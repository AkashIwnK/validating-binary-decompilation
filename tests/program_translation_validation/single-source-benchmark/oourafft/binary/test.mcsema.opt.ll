; ModuleID = 'binary/test.mcsema.inline.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_404070__rodata_type = type <{ [24 x i8], [88 x i8], [45 x i8], [7 x i8] }>
%seg_604df0__init_array_type = type <{ i64, i64 }>
%seg_604ff0__got_type = type <{ i64, i64 }>
%__bss_start_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_404070__rodata = internal constant %seg_404070__rodata_type <{ [24 x i8] c"\01\00\02\00\00\00\00\00\BB\BD\D7\D9\DF|\DB=\00\00\00\00\00\00P?", [88 x i8] c"\00\00\00\00\00\00\90@\00\00\00\00\00\00\10@\00\00\00\00\00\00\E0C\95\D6&\E8\0B.\11>\8D\ED\B5\A0\F7\C6\B0>\00\00\00\00\00\00\F0?q\8B\89\C0\85.\D0>\00\00\00\00\00\00\00@\00\00\00\00\00\00\00\00\FF\FF\FF\FF\FF\FF\FF\7F\FF\FF\FF\FF\FF\FF\FF\7F", [45 x i8] c"FFT sanity check failed! Difference is: %le\0A\00", [7 x i8] c"%e %e\0A\00" }>
@seg_604df0__init_array = internal global %seg_604df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4007f0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4007c0___do_global_dtors_aux to i64) }>
@seg_604ff0__got = internal global %seg_604ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@__bss_start = global %__bss_start_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4007f0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4007c0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_404060___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_403ff0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @errorcheck_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @get_time_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @makewt_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @cdft_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @putdata_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @sub_403300_cftmdl_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401030_cdft_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400e30_makewt_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4010d0_errorcheck_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400fb0_putdata_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401840_cftfsub_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400638__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400de0_get_time_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402480_cftbsub_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_4011c0_bitrv2_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_400750_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_401be0_bitrv2conj_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

declare %struct.Memory* @sub_402870_cft1st_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #0

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #0

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #0

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #2

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #3 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() local_unnamed_addr #4 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) local_unnamed_addr #5

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memcpy(i64, i64, i64) #6

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @abort() #6

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memset(i64, i64, i64) #6

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #6

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @free(i64) #6

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #6

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @gettimeofday(i64, i64) #6

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #6

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @memalign(i64, i64) #6

; Function Attrs: noinline
define %struct.Memory* @sub_403ff0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_403ff0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 27, i32 0
  %R13D = bitcast %union.anon* %4 to i32*
  %RBX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 3, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 25, i32 0, i32 0
  %R13 = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %R14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 29, i32 0, i32 0
  %R15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 31, i32 0, i32 0
  %5 = load i64, i64* %R15, align 8
  %6 = add i64 %1, 2
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %R14, align 8
  %11 = load i64, i64* %PC, align 8
  %12 = add i64 %11, 2
  store i64 %12, i64* %PC, align 8
  %13 = add i64 %7, -16
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %RDX, align 8
  %16 = load i64, i64* %PC, align 8
  store i64 %15, i64* %R15, align 8, !tbaa !2428
  %17 = load i64, i64* %R13, align 8
  %18 = add i64 %16, 5
  store i64 %18, i64* %PC, align 8
  %19 = add i64 %7, -24
  %20 = inttoptr i64 %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load i64, i64* %R12, align 8
  %22 = load i64, i64* %PC, align 8
  %23 = add i64 %22, 2
  store i64 %23, i64* %PC, align 8
  %24 = add i64 %7, -32
  %25 = inttoptr i64 %24 to i64*
  store i64 %21, i64* %25, align 8
  %26 = load i64, i64* %PC, align 8
  store i64 ptrtoint (%seg_604df0__init_array_type* @seg_604df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %27 = load i64, i64* %RBP, align 8
  %28 = add i64 %26, 8
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %7, -40
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 add (i64 ptrtoint (%seg_604df0__init_array_type* @seg_604df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %32 = load i64, i64* %RBX, align 8
  %33 = add i64 %31, 8
  store i64 %33, i64* %PC, align 8
  %34 = add i64 %7, -48
  %35 = inttoptr i64 %34 to i64*
  store i64 %32, i64* %35, align 8
  %36 = load i32, i32* %EDI, align 4
  %37 = zext i32 %36 to i64
  %38 = load i64, i64* %PC, align 8
  store i64 %37, i64* %R13, align 8, !tbaa !2428
  %39 = load i64, i64* %RSI, align 8
  store i64 %39, i64* %R14, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP, align 8
  %41 = load i64, i64* %R12, align 8
  %42 = sub i64 %40, %41
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %49 = lshr i64 %42, 2
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = ashr i64 %42, 3
  store i64 %52, i64* %RBP, align 8, !tbaa !2428
  store i8 %51, i8* %43, align 1, !tbaa !2432
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 255
  %55 = tail call i32 @llvm.ctpop.i32(i32 %54) #11
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  store i8 %58, i8* %44, align 1, !tbaa !2432
  store i8 0, i8* %45, align 1, !tbaa !2432
  %59 = icmp eq i64 %52, 0
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %46, align 1, !tbaa !2432
  %61 = lshr i64 %52, 63
  %62 = trunc i64 %61 to i8
  store i8 %62, i8* %47, align 1, !tbaa !2432
  store i8 0, i8* %48, align 1, !tbaa !2432
  %63 = add i64 %38, -14803
  %64 = add i64 %38, 22
  %65 = add i64 %7, -64
  %66 = inttoptr i64 %65 to i64*
  store i64 %64, i64* %66, align 8
  store i64 %65, i64* %RSP, align 8, !tbaa !2428
  store i64 %63, i64* %PC, align 8, !tbaa !2428
  %67 = tail call %struct.Memory* @sub_400638__init_proc_renamed_(%struct.State* nonnull %0, i64 %63, %struct.Memory* %2)
  %68 = load i64, i64* %RBP, align 8
  %69 = load i64, i64* %PC, align 8
  store i8 0, i8* %43, align 1, !tbaa !2433
  %70 = trunc i64 %68 to i32
  %71 = and i32 %70, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #11
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %44, align 1, !tbaa !2447
  %76 = icmp eq i64 %68, 0
  %77 = zext i1 %76 to i8
  store i8 %77, i8* %46, align 1, !tbaa !2448
  %78 = lshr i64 %68, 63
  %79 = trunc i64 %78 to i8
  store i8 %79, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2451
  %.v = select i1 %76, i64 37, i64 5
  %80 = add i64 %69, %.v
  store i64 %80, i64* %PC, align 8, !tbaa !2428
  br i1 %76, label %block_404046, label %block_404026

block_404046:                                     ; preds = %block_404030, %block_403ff0
  %81 = phi i64 [ %80, %block_403ff0 ], [ %179, %block_404030 ]
  %MEMORY.0 = phi %struct.Memory* [ %67, %block_403ff0 ], [ %149, %block_404030 ]
  %82 = load i64, i64* %RSP, align 8
  %83 = add i64 %82, 8
  store i64 %83, i64* %RSP, align 8, !tbaa !2428
  %84 = icmp ugt i64 %82, -9
  %85 = zext i1 %84 to i8
  store i8 %85, i8* %43, align 1, !tbaa !2433
  %86 = trunc i64 %83 to i32
  %87 = and i32 %86, 255
  %88 = tail call i32 @llvm.ctpop.i32(i32 %87) #11
  %89 = trunc i32 %88 to i8
  %90 = and i8 %89, 1
  %91 = xor i8 %90, 1
  store i8 %91, i8* %44, align 1, !tbaa !2447
  %92 = xor i64 %82, %83
  %93 = lshr i64 %92, 4
  %94 = trunc i64 %93 to i8
  %95 = and i8 %94, 1
  store i8 %95, i8* %45, align 1, !tbaa !2451
  %96 = icmp eq i64 %83, 0
  %97 = zext i1 %96 to i8
  store i8 %97, i8* %46, align 1, !tbaa !2448
  %98 = lshr i64 %83, 63
  %99 = trunc i64 %98 to i8
  store i8 %99, i8* %47, align 1, !tbaa !2449
  %100 = lshr i64 %82, 63
  %101 = xor i64 %98, %100
  %102 = add nuw nsw i64 %101, %98
  %103 = icmp eq i64 %102, 2
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %48, align 1, !tbaa !2450
  %105 = add i64 %81, 5
  store i64 %105, i64* %PC, align 8
  %106 = add i64 %82, 16
  %107 = inttoptr i64 %83 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %RBX, align 8, !tbaa !2428
  store i64 %106, i64* %RSP, align 8, !tbaa !2428
  %109 = add i64 %81, 6
  store i64 %109, i64* %PC, align 8
  %110 = add i64 %82, 24
  %111 = inttoptr i64 %106 to i64*
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %RBP, align 8, !tbaa !2428
  store i64 %110, i64* %RSP, align 8, !tbaa !2428
  %113 = add i64 %81, 8
  store i64 %113, i64* %PC, align 8
  %114 = add i64 %82, 32
  %115 = inttoptr i64 %110 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %R12, align 8, !tbaa !2428
  store i64 %114, i64* %RSP, align 8, !tbaa !2428
  %117 = add i64 %81, 10
  store i64 %117, i64* %PC, align 8
  %118 = add i64 %82, 40
  %119 = inttoptr i64 %114 to i64*
  %120 = load i64, i64* %119, align 8
  store i64 %120, i64* %R13, align 8, !tbaa !2428
  store i64 %118, i64* %RSP, align 8, !tbaa !2428
  %121 = add i64 %81, 12
  store i64 %121, i64* %PC, align 8
  %122 = add i64 %82, 48
  %123 = inttoptr i64 %118 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %R14, align 8, !tbaa !2428
  store i64 %122, i64* %RSP, align 8, !tbaa !2428
  %125 = add i64 %81, 14
  store i64 %125, i64* %PC, align 8
  %126 = add i64 %82, 56
  %127 = inttoptr i64 %122 to i64*
  %128 = load i64, i64* %127, align 8
  store i64 %128, i64* %R15, align 8, !tbaa !2428
  store i64 %126, i64* %RSP, align 8, !tbaa !2428
  %129 = add i64 %81, 15
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %126 to i64*
  %131 = load i64, i64* %130, align 8
  store i64 %131, i64* %PC, align 8, !tbaa !2428
  %132 = add i64 %82, 64
  store i64 %132, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_404026:                                     ; preds = %block_403ff0
  store i64 0, i64* %RBX, align 8, !tbaa !2428
  store i8 0, i8* %43, align 1, !tbaa !2433
  store i8 1, i8* %44, align 1, !tbaa !2447
  store i8 1, i8* %46, align 1, !tbaa !2448
  store i8 0, i8* %47, align 1, !tbaa !2449
  store i8 0, i8* %48, align 1, !tbaa !2450
  store i8 0, i8* %45, align 1, !tbaa !2451
  %133 = add i64 %80, 10
  store i64 %133, i64* %PC, align 8
  br label %block_404030

block_404030:                                     ; preds = %block_404030, %block_404026
  %134 = phi i64 [ 0, %block_404026 ], [ %152, %block_404030 ]
  %135 = phi i64 [ %133, %block_404026 ], [ %179, %block_404030 ]
  %MEMORY.1 = phi %struct.Memory* [ %67, %block_404026 ], [ %149, %block_404030 ]
  %136 = load i64, i64* %R15, align 8
  store i64 %136, i64* %RDX, align 8, !tbaa !2428
  %137 = load i64, i64* %R14, align 8
  store i64 %137, i64* %RSI, align 8, !tbaa !2428
  %138 = load i32, i32* %R13D, align 4
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %RDI, align 8, !tbaa !2428
  %140 = load i64, i64* %R12, align 8
  %141 = shl i64 %134, 3
  %142 = add i64 %141, %140
  %143 = add i64 %135, 13
  store i64 %143, i64* %PC, align 8
  %144 = load i64, i64* %RSP, align 8, !tbaa !2428
  %145 = add i64 %144, -8
  %146 = inttoptr i64 %145 to i64*
  store i64 %143, i64* %146, align 8
  store i64 %145, i64* %RSP, align 8, !tbaa !2428
  %147 = inttoptr i64 %142 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %PC, align 8, !tbaa !2428
  %149 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %148, %struct.Memory* %MEMORY.1)
  %150 = load i64, i64* %RBX, align 8
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %150, 1
  store i64 %152, i64* %RBX, align 8, !tbaa !2428
  %153 = lshr i64 %152, 63
  %154 = load i64, i64* %RBP, align 8
  %155 = sub i64 %154, %152
  %156 = icmp ult i64 %154, %152
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %43, align 1, !tbaa !2433
  %158 = trunc i64 %155 to i32
  %159 = and i32 %158, 255
  %160 = tail call i32 @llvm.ctpop.i32(i32 %159) #11
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = xor i8 %162, 1
  store i8 %163, i8* %44, align 1, !tbaa !2447
  %164 = xor i64 %152, %154
  %165 = xor i64 %164, %155
  %166 = lshr i64 %165, 4
  %167 = trunc i64 %166 to i8
  %168 = and i8 %167, 1
  store i8 %168, i8* %45, align 1, !tbaa !2451
  %169 = icmp eq i64 %155, 0
  %170 = zext i1 %169 to i8
  store i8 %170, i8* %46, align 1, !tbaa !2448
  %171 = lshr i64 %155, 63
  %172 = trunc i64 %171 to i8
  store i8 %172, i8* %47, align 1, !tbaa !2449
  %173 = lshr i64 %154, 63
  %174 = xor i64 %153, %173
  %175 = xor i64 %171, %173
  %176 = add nuw nsw i64 %175, %174
  %177 = icmp eq i64 %176, 2
  %178 = zext i1 %177 to i8
  store i8 %178, i8* %48, align 1, !tbaa !2450
  %.v1 = select i1 %169, i64 9, i64 -13
  %179 = add i64 %151, %.v1
  store i64 %179, i64* %PC, align 8, !tbaa !2428
  br i1 %169, label %block_404046, label %block_404030
}

; Function Attrs: noinline
define %struct.Memory* @sub_400fb0_putdata(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400fb0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %6 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %9 = load i64, i64* %RBP, align 8
  %10 = add i64 %1, 1
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %9, i64* %14, align 8
  store i64 %13, i64* %11, align 8, !tbaa !2428
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = add i64 %12, -12
  %17 = load i32, i32* %EDI, align 4
  %18 = add i64 %15, 6
  store i64 %18, i64* %PC, align 8
  %19 = inttoptr i64 %16 to i32*
  store i32 %17, i32* %19, align 4
  %20 = load i64, i64* %RBP, align 8
  %21 = add i64 %20, -8
  %22 = load i32, i32* %ESI, align 4
  %23 = load i64, i64* %PC, align 8
  %24 = add i64 %23, 3
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %21 to i32*
  store i32 %22, i32* %25, align 4
  %26 = load i64, i64* %RBP, align 8
  %27 = add i64 %26, -16
  %28 = load i64, i64* %RDX, align 8
  %29 = load i64, i64* %PC, align 8
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC, align 8
  %31 = inttoptr i64 %27 to i64*
  store i64 %28, i64* %31, align 8
  %32 = load i64, i64* %RBP, align 8
  %33 = add i64 %32, -24
  %34 = load i64, i64* %PC, align 8
  %35 = add i64 %34, 7
  store i64 %35, i64* %PC, align 8
  %36 = inttoptr i64 %33 to i32*
  store i32 0, i32* %36, align 4
  %37 = load i64, i64* %RBP, align 8
  %38 = add i64 %37, -4
  %39 = load i64, i64* %PC, align 8
  %40 = add i64 %39, 3
  store i64 %40, i64* %PC, align 8
  %41 = inttoptr i64 %38 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  store i64 %43, i64* %RSI, align 8, !tbaa !2428
  %44 = add i64 %37, -20
  %45 = add i64 %39, 6
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %44 to i32*
  store i32 %42, i32* %46, align 4
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %54 = bitcast i64* %53 to double*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %56 = bitcast %union.VectorReg* %8 to double*
  %57 = bitcast [32 x %union.VectorReg]* %7 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_400fcb

block_400fcb:                                     ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit, %block_400fb0
  %58 = phi i64 [ %.pre, %block_400fb0 ], [ %214, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400fb0 ], [ %160, %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit ]
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -20
  %61 = add i64 %58, 3
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %60 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = zext i32 %63 to i64
  store i64 %64, i64* %RAX, align 8, !tbaa !2428
  %65 = add i64 %59, -8
  %66 = add i64 %58, 6
  store i64 %66, i64* %PC, align 8
  %67 = inttoptr i64 %65 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = sub i32 %63, %68
  %70 = icmp ult i32 %63, %68
  %71 = zext i1 %70 to i8
  store i8 %71, i8* %47, align 1, !tbaa !2433
  %72 = and i32 %69, 255
  %73 = tail call i32 @llvm.ctpop.i32(i32 %72) #11
  %74 = trunc i32 %73 to i8
  %75 = and i8 %74, 1
  %76 = xor i8 %75, 1
  store i8 %76, i8* %48, align 1, !tbaa !2447
  %77 = xor i32 %68, %63
  %78 = xor i32 %77, %69
  %79 = lshr i32 %78, 4
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  store i8 %81, i8* %49, align 1, !tbaa !2451
  %82 = icmp eq i32 %69, 0
  %83 = zext i1 %82 to i8
  store i8 %83, i8* %50, align 1, !tbaa !2448
  %84 = lshr i32 %69, 31
  %85 = trunc i32 %84 to i8
  store i8 %85, i8* %51, align 1, !tbaa !2449
  %86 = lshr i32 %63, 31
  %87 = lshr i32 %68, 31
  %88 = xor i32 %87, %86
  %89 = xor i32 %84, %86
  %90 = add nuw nsw i32 %89, %88
  %91 = icmp eq i32 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %52, align 1, !tbaa !2450
  %93 = icmp ne i8 %85, 0
  %94 = xor i1 %93, %91
  %.demorgan = or i1 %82, %94
  %.v = select i1 %.demorgan, i64 12, i64 87
  %95 = add i64 %58, %.v
  store i64 %95, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan, label %block_400fd7, label %block_401022

block_400fd7:                                     ; preds = %block_400fcb
  %96 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 72) to i64*), align 8
  %97 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %7, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %96, i64* %97, align 1, !tbaa !2452
  store double 0.000000e+00, double* %54, align 1, !tbaa !2452
  store i64 259200, i64* %RAX, align 8, !tbaa !2428
  %98 = add i64 %59, -24
  %99 = add i64 %95, 20
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %98 to i32*
  %101 = load i32, i32* %100, align 4
  %102 = sext i32 %101 to i64
  %103 = mul nsw i64 %102, 7141
  %104 = trunc i64 %103 to i32
  %105 = add i32 %104, 54773
  %106 = zext i32 %105 to i64
  store i64 %106, i64* %RCX, align 8, !tbaa !2428
  %107 = icmp ugt i32 %104, -54774
  %108 = zext i1 %107 to i8
  store i8 %108, i8* %47, align 1, !tbaa !2433
  %109 = and i32 %105, 255
  %110 = tail call i32 @llvm.ctpop.i32(i32 %109) #11
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = xor i8 %112, 1
  store i8 %113, i8* %48, align 1, !tbaa !2447
  %114 = xor i32 %104, 16
  %115 = xor i32 %114, %105
  %116 = lshr i32 %115, 4
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %49, align 1, !tbaa !2451
  %119 = icmp eq i32 %105, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %50, align 1, !tbaa !2448
  %121 = lshr i32 %105, 31
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %51, align 1, !tbaa !2449
  %123 = lshr i32 %104, 31
  %124 = xor i32 %121, %123
  %125 = add nuw nsw i32 %124, %121
  %126 = icmp eq i32 %125, 2
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %52, align 1, !tbaa !2450
  %128 = add i64 %59, -28
  %129 = add i64 %95, 29
  store i64 %129, i64* %PC, align 8
  %130 = inttoptr i64 %128 to i32*
  store i32 259200, i32* %130, align 4
  %131 = load i32, i32* %ECX, align 4
  %132 = zext i32 %131 to i64
  %133 = load i64, i64* %PC, align 8
  store i64 %132, i64* %RAX, align 8, !tbaa !2428
  %134 = sext i32 %131 to i64
  %135 = lshr i64 %134, 32
  store i64 %135, i64* %55, align 8, !tbaa !2428
  %136 = load i64, i64* %RBP, align 8
  %137 = add i64 %136, -28
  %138 = add i64 %133, 6
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i32*
  %140 = load i32, i32* %139, align 4
  %141 = zext i32 %140 to i64
  store i64 %141, i64* %RCX, align 8, !tbaa !2428
  %142 = add i64 %133, 8
  store i64 %142, i64* %PC, align 8
  %143 = sext i32 %140 to i64
  %144 = shl nuw i64 %135, 32
  %145 = or i64 %144, %132
  %146 = sdiv i64 %145, %143
  %147 = shl i64 %146, 32
  %148 = ashr exact i64 %147, 32
  %149 = icmp eq i64 %146, %148
  br i1 %149, label %152, label %150

; <label>:150:                                    ; preds = %block_400fd7
  %151 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %142, %struct.Memory* %MEMORY.0) #12
  %.pre1 = load i64, i64* %RBP, align 8
  %.pre2 = load i32, i32* %EDX, align 4
  %.pre3 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:152:                                    ; preds = %block_400fd7
  %153 = srem i64 %145, %143
  %154 = and i64 %146, 4294967295
  store i64 %154, i64* %RAX, align 8, !tbaa !2428
  %155 = and i64 %153, 4294967295
  store i64 %155, i64* %55, align 8, !tbaa !2428
  store i8 0, i8* %47, align 1, !tbaa !2433
  store i8 0, i8* %48, align 1, !tbaa !2447
  store i8 0, i8* %49, align 1, !tbaa !2451
  store i8 0, i8* %50, align 1, !tbaa !2448
  store i8 0, i8* %51, align 1, !tbaa !2449
  store i8 0, i8* %52, align 1, !tbaa !2450
  %156 = trunc i64 %153 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %152, %150
  %157 = phi i64 [ %.pre3, %150 ], [ %142, %152 ]
  %158 = phi i32 [ %.pre2, %150 ], [ %156, %152 ]
  %159 = phi i64 [ %.pre1, %150 ], [ %136, %152 ]
  %160 = phi %struct.Memory* [ %151, %150 ], [ %MEMORY.0, %152 ]
  %161 = add i64 %159, -24
  %162 = add i64 %157, 3
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %161 to i32*
  store i32 %158, i32* %163, align 4
  %164 = load i32, i32* %EDX, align 4
  %165 = load i64, i64* %PC, align 8
  %166 = sitofp i32 %164 to double
  %167 = load double, double* %57, align 1
  %168 = fmul double %166, %167
  store double %168, double* %56, align 1, !tbaa !2452
  %169 = load i64, i64* %RBP, align 8
  %170 = add i64 %169, -16
  %171 = add i64 %165, 12
  store i64 %171, i64* %PC, align 8
  %172 = inttoptr i64 %170 to i64*
  %173 = load i64, i64* %172, align 8
  store i64 %173, i64* %RSI, align 8, !tbaa !2428
  %174 = add i64 %169, -20
  %175 = add i64 %165, 16
  store i64 %175, i64* %PC, align 8
  %176 = inttoptr i64 %174 to i32*
  %177 = load i32, i32* %176, align 4
  %178 = sext i32 %177 to i64
  store i64 %178, i64* %RDI, align 8, !tbaa !2428
  %179 = shl nsw i64 %178, 3
  %180 = add i64 %179, %173
  %181 = add i64 %165, 21
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %180 to double*
  store double %168, double* %182, align 8
  %183 = load i64, i64* %RBP, align 8
  %184 = add i64 %183, -20
  %185 = load i64, i64* %PC, align 8
  %186 = add i64 %185, 3
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %184 to i32*
  %188 = load i32, i32* %187, align 4
  %189 = add i32 %188, 1
  %190 = zext i32 %189 to i64
  store i64 %190, i64* %RAX, align 8, !tbaa !2428
  %191 = icmp eq i32 %188, -1
  %192 = icmp eq i32 %189, 0
  %193 = or i1 %191, %192
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %47, align 1, !tbaa !2433
  %195 = and i32 %189, 255
  %196 = tail call i32 @llvm.ctpop.i32(i32 %195) #11
  %197 = trunc i32 %196 to i8
  %198 = and i8 %197, 1
  %199 = xor i8 %198, 1
  store i8 %199, i8* %48, align 1, !tbaa !2447
  %200 = xor i32 %188, %189
  %201 = lshr i32 %200, 4
  %202 = trunc i32 %201 to i8
  %203 = and i8 %202, 1
  store i8 %203, i8* %49, align 1, !tbaa !2451
  %204 = zext i1 %192 to i8
  store i8 %204, i8* %50, align 1, !tbaa !2448
  %205 = lshr i32 %189, 31
  %206 = trunc i32 %205 to i8
  store i8 %206, i8* %51, align 1, !tbaa !2449
  %207 = lshr i32 %188, 31
  %208 = xor i32 %205, %207
  %209 = add nuw nsw i32 %208, %205
  %210 = icmp eq i32 %209, 2
  %211 = zext i1 %210 to i8
  store i8 %211, i8* %52, align 1, !tbaa !2450
  %212 = add i64 %185, 9
  store i64 %212, i64* %PC, align 8
  store i32 %189, i32* %187, align 4
  %213 = load i64, i64* %PC, align 8
  %214 = add i64 %213, -82
  store i64 %214, i64* %PC, align 8, !tbaa !2428
  br label %block_400fcb

block_401022:                                     ; preds = %block_400fcb
  %215 = add i64 %95, 1
  store i64 %215, i64* %PC, align 8
  %216 = load i64, i64* %11, align 8, !tbaa !2428
  %217 = add i64 %216, 8
  %218 = inttoptr i64 %216 to i64*
  %219 = load i64, i64* %218, align 8
  store i64 %219, i64* %RBP, align 8, !tbaa !2428
  store i64 %217, i64* %11, align 8, !tbaa !2428
  %220 = add i64 %95, 2
  store i64 %220, i64* %PC, align 8
  %221 = inttoptr i64 %217 to i64*
  %222 = load i64, i64* %221, align 8
  store i64 %222, i64* %PC, align 8, !tbaa !2428
  %223 = add i64 %216, 16
  store i64 %223, i64* %11, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4011c0_bitrv2(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4011c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %5, i64* %10, align 8
  store i64 %9, i64* %7, align 8, !tbaa !2428
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -12
  %13 = load i32, i32* %EDI, align 4
  %14 = add i64 %11, 6
  store i64 %14, i64* %PC, align 8
  %15 = inttoptr i64 %12 to i32*
  store i32 %13, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -16
  %18 = load i64, i64* %RSI, align 8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 4
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -24
  %24 = load i64, i64* %RDX, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 4
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %27, align 8
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -16
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %29 to i64*
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %RDX, align 8, !tbaa !2428
  %34 = add i64 %30, 10
  store i64 %34, i64* %PC, align 8
  %35 = inttoptr i64 %33 to i32*
  store i32 0, i32* %35, align 4
  %36 = load i64, i64* %RBP, align 8
  %37 = add i64 %36, -4
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %38, 3
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %RDI, align 8, !tbaa !2428
  %43 = add i64 %36, -44
  %44 = add i64 %38, 6
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %43 to i32*
  store i32 %41, i32* %45, align 4
  %46 = load i64, i64* %RBP, align 8
  %47 = add i64 %46, -48
  %48 = load i64, i64* %PC, align 8
  %49 = add i64 %48, 7
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %47 to i32*
  store i32 1, i32* %50, align 4
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %.pre = load i64, i64* %PC, align 8
  br label %block_4011e6

block_40127d:                                     ; preds = %block_401289, %block_401276
  %57 = phi i64 [ %3073, %block_401289 ], [ %.pre5, %block_401276 ]
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -28
  %60 = add i64 %57, 3
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %59 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  store i64 %63, i64* %RAX, align 8, !tbaa !2428
  %64 = add i64 %58, -36
  %65 = add i64 %57, 6
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i32*
  %67 = load i32, i32* %66, align 4
  %68 = sub i32 %62, %67
  %69 = icmp ult i32 %62, %67
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %51, align 1, !tbaa !2433
  %71 = and i32 %68, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #11
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %52, align 1, !tbaa !2447
  %76 = xor i32 %67, %62
  %77 = xor i32 %76, %68
  %78 = lshr i32 %77, 4
  %79 = trunc i32 %78 to i8
  %80 = and i8 %79, 1
  store i8 %80, i8* %53, align 1, !tbaa !2451
  %81 = icmp eq i32 %68, 0
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %54, align 1, !tbaa !2448
  %83 = lshr i32 %68, 31
  %84 = trunc i32 %83 to i8
  store i8 %84, i8* %55, align 1, !tbaa !2449
  %85 = lshr i32 %62, 31
  %86 = lshr i32 %67, 31
  %87 = xor i32 %86, %85
  %88 = xor i32 %83, %85
  %89 = add nuw nsw i32 %88, %87
  %90 = icmp eq i32 %89, 2
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %56, align 1, !tbaa !2450
  %92 = icmp ne i8 %84, 0
  %93 = xor i1 %92, %90
  %.v14 = select i1 %93, i64 12, i64 784
  %94 = add i64 %57, %.v14
  %95 = add i64 %94, 3
  store i64 %95, i64* %PC, align 8
  br i1 %93, label %block_401289, label %block_40158d

block_4011f5:                                     ; preds = %block_4011e6
  %96 = load i32, i32* %262, align 4
  %97 = zext i32 %96 to i64
  %98 = shl nuw i64 %97, 32
  %99 = ashr i64 %98, 33
  %100 = trunc i32 %96 to i8
  %101 = and i8 %100, 1
  %102 = trunc i64 %99 to i32
  %103 = and i64 %99, 4294967295
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  store i8 %101, i8* %51, align 1, !tbaa !2432
  %104 = and i32 %102, 255
  %105 = tail call i32 @llvm.ctpop.i32(i32 %104) #11
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = xor i8 %107, 1
  store i8 %108, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %109 = icmp eq i32 %102, 0
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %54, align 1, !tbaa !2432
  %111 = lshr i64 %99, 31
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  store i8 %113, i8* %55, align 1, !tbaa !2432
  store i8 0, i8* %56, align 1, !tbaa !2432
  %114 = add i64 %289, 9
  store i64 %114, i64* %PC, align 8
  store i32 %102, i32* %262, align 4
  %115 = load i64, i64* %RBP, align 8
  %116 = add i64 %115, -28
  %117 = load i64, i64* %PC, align 8
  %118 = add i64 %117, 7
  store i64 %118, i64* %PC, align 8
  %119 = inttoptr i64 %116 to i32*
  store i32 0, i32* %119, align 4
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_401205

block_40166b:                                     ; preds = %block_40181a, %block_401664
  %120 = phi i64 [ %352, %block_40181a ], [ %.pre6, %block_401664 ]
  %121 = load i64, i64* %RBP, align 8
  %122 = add i64 %121, -36
  %123 = add i64 %120, 3
  store i64 %123, i64* %PC, align 8
  %124 = inttoptr i64 %122 to i32*
  %125 = load i32, i32* %124, align 4
  %126 = zext i32 %125 to i64
  store i64 %126, i64* %RAX, align 8, !tbaa !2428
  %127 = add i64 %121, -48
  %128 = add i64 %120, 6
  store i64 %128, i64* %PC, align 8
  %129 = inttoptr i64 %127 to i32*
  %130 = load i32, i32* %129, align 4
  %131 = sub i32 %125, %130
  %132 = icmp ult i32 %125, %130
  %133 = zext i1 %132 to i8
  store i8 %133, i8* %51, align 1, !tbaa !2433
  %134 = and i32 %131, 255
  %135 = tail call i32 @llvm.ctpop.i32(i32 %134) #11
  %136 = trunc i32 %135 to i8
  %137 = and i8 %136, 1
  %138 = xor i8 %137, 1
  store i8 %138, i8* %52, align 1, !tbaa !2447
  %139 = xor i32 %130, %125
  %140 = xor i32 %139, %131
  %141 = lshr i32 %140, 4
  %142 = trunc i32 %141 to i8
  %143 = and i8 %142, 1
  store i8 %143, i8* %53, align 1, !tbaa !2451
  %144 = icmp eq i32 %131, 0
  %145 = zext i1 %144 to i8
  store i8 %145, i8* %54, align 1, !tbaa !2448
  %146 = lshr i32 %131, 31
  %147 = trunc i32 %146 to i8
  store i8 %147, i8* %55, align 1, !tbaa !2449
  %148 = lshr i32 %125, 31
  %149 = lshr i32 %130, 31
  %150 = xor i32 %149, %148
  %151 = xor i32 %146, %148
  %152 = add nuw nsw i32 %151, %150
  %153 = icmp eq i32 %152, 2
  %154 = zext i1 %153 to i8
  store i8 %154, i8* %56, align 1, !tbaa !2450
  %155 = icmp ne i8 %147, 0
  %156 = xor i1 %155, %153
  %.v20 = select i1 %156, i64 12, i64 450
  %157 = add i64 %120, %.v20
  store i64 %157, i64* %PC, align 8, !tbaa !2428
  br i1 %156, label %block_401677, label %block_40182d

block_40167e:                                     ; preds = %block_40168a, %block_401677
  %158 = phi i64 [ %1677, %block_40168a ], [ %.pre7, %block_401677 ]
  %159 = load i64, i64* %RBP, align 8
  %160 = add i64 %159, -28
  %161 = add i64 %158, 3
  store i64 %161, i64* %PC, align 8
  %162 = inttoptr i64 %160 to i32*
  %163 = load i32, i32* %162, align 4
  %164 = zext i32 %163 to i64
  store i64 %164, i64* %RAX, align 8, !tbaa !2428
  %165 = add i64 %159, -36
  %166 = add i64 %158, 6
  store i64 %166, i64* %PC, align 8
  %167 = inttoptr i64 %165 to i32*
  %168 = load i32, i32* %167, align 4
  %169 = sub i32 %163, %168
  %170 = icmp ult i32 %163, %168
  %171 = zext i1 %170 to i8
  store i8 %171, i8* %51, align 1, !tbaa !2433
  %172 = and i32 %169, 255
  %173 = tail call i32 @llvm.ctpop.i32(i32 %172) #11
  %174 = trunc i32 %173 to i8
  %175 = and i8 %174, 1
  %176 = xor i8 %175, 1
  store i8 %176, i8* %52, align 1, !tbaa !2447
  %177 = xor i32 %168, %163
  %178 = xor i32 %177, %169
  %179 = lshr i32 %178, 4
  %180 = trunc i32 %179 to i8
  %181 = and i8 %180, 1
  store i8 %181, i8* %53, align 1, !tbaa !2451
  %182 = icmp eq i32 %169, 0
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %54, align 1, !tbaa !2448
  %184 = lshr i32 %169, 31
  %185 = trunc i32 %184 to i8
  store i8 %185, i8* %55, align 1, !tbaa !2449
  %186 = lshr i32 %163, 31
  %187 = lshr i32 %168, 31
  %188 = xor i32 %187, %186
  %189 = xor i32 %184, %186
  %190 = add nuw nsw i32 %189, %188
  %191 = icmp eq i32 %190, 2
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %56, align 1, !tbaa !2450
  %193 = icmp ne i8 %185, 0
  %194 = xor i1 %193, %191
  %.v21 = select i1 %194, i64 12, i64 412
  %195 = add i64 %158, %.v21
  store i64 %195, i64* %PC, align 8, !tbaa !2428
  br i1 %194, label %block_40168a, label %block_40181a

block_40126a:                                     ; preds = %block_40158d, %block_401263
  %196 = phi i64 [ %949, %block_40158d ], [ %.pre4, %block_401263 ]
  %197 = load i64, i64* %RBP, align 8
  %198 = add i64 %197, -36
  %199 = add i64 %196, 3
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %198 to i32*
  %201 = load i32, i32* %200, align 4
  %202 = zext i32 %201 to i64
  store i64 %202, i64* %RAX, align 8, !tbaa !2428
  %203 = add i64 %197, -48
  %204 = add i64 %196, 6
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %203 to i32*
  %206 = load i32, i32* %205, align 4
  %207 = sub i32 %201, %206
  %208 = icmp ult i32 %201, %206
  %209 = zext i1 %208 to i8
  store i8 %209, i8* %51, align 1, !tbaa !2433
  %210 = and i32 %207, 255
  %211 = tail call i32 @llvm.ctpop.i32(i32 %210) #11
  %212 = trunc i32 %211 to i8
  %213 = and i8 %212, 1
  %214 = xor i8 %213, 1
  store i8 %214, i8* %52, align 1, !tbaa !2447
  %215 = xor i32 %206, %201
  %216 = xor i32 %215, %207
  %217 = lshr i32 %216, 4
  %218 = trunc i32 %217 to i8
  %219 = and i8 %218, 1
  store i8 %219, i8* %53, align 1, !tbaa !2451
  %220 = icmp eq i32 %207, 0
  %221 = zext i1 %220 to i8
  store i8 %221, i8* %54, align 1, !tbaa !2448
  %222 = lshr i32 %207, 31
  %223 = trunc i32 %222 to i8
  store i8 %223, i8* %55, align 1, !tbaa !2449
  %224 = lshr i32 %201, 31
  %225 = lshr i32 %206, 31
  %226 = xor i32 %225, %224
  %227 = xor i32 %222, %224
  %228 = add nuw nsw i32 %227, %226
  %229 = icmp eq i32 %228, 2
  %230 = zext i1 %229 to i8
  store i8 %230, i8* %56, align 1, !tbaa !2450
  %231 = icmp ne i8 %223, 0
  %232 = xor i1 %231, %229
  %.v13 = select i1 %232, i64 12, i64 1013
  %233 = add i64 %196, %.v13
  store i64 %233, i64* %PC, align 8, !tbaa !2428
  br i1 %232, label %block_401276, label %block_40165f

block_401677:                                     ; preds = %block_40166b
  %234 = add i64 %121, -28
  %235 = add i64 %157, 7
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %234 to i32*
  store i32 0, i32* %236, align 4
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_40167e

block_401263:                                     ; preds = %block_40124b
  store i32 0, i32* %426, align 4
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %238 = bitcast i64* %237 to double*
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_40126a

block_4011e6:                                     ; preds = %block_40123d, %block_4011c0
  %239 = phi i64 [ %312, %block_40123d ], [ %.pre, %block_4011c0 ]
  %240 = load i64, i64* %RBP, align 8
  %241 = add i64 %240, -48
  %242 = add i64 %239, 3
  store i64 %242, i64* %PC, align 8
  %243 = inttoptr i64 %241 to i32*
  %244 = load i32, i32* %243, align 4
  %245 = shl i32 %244, 3
  %246 = zext i32 %245 to i64
  store i64 %246, i64* %RAX, align 8, !tbaa !2428
  %247 = lshr i32 %244, 29
  %248 = trunc i32 %247 to i8
  %249 = and i8 %248, 1
  store i8 %249, i8* %51, align 1, !tbaa !2432
  %250 = and i32 %245, 248
  %251 = tail call i32 @llvm.ctpop.i32(i32 %250) #11
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  store i8 %254, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %255 = icmp eq i32 %245, 0
  %256 = zext i1 %255 to i8
  store i8 %256, i8* %54, align 1, !tbaa !2432
  %257 = lshr i32 %244, 28
  %258 = and i32 %257, 1
  %259 = trunc i32 %258 to i8
  store i8 %259, i8* %55, align 1, !tbaa !2432
  store i8 0, i8* %56, align 1, !tbaa !2432
  %260 = add i64 %240, -44
  %261 = add i64 %239, 9
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %260 to i32*
  %263 = load i32, i32* %262, align 4
  %264 = sub i32 %245, %263
  %265 = icmp ult i32 %245, %263
  %266 = zext i1 %265 to i8
  store i8 %266, i8* %51, align 1, !tbaa !2433
  %267 = and i32 %264, 255
  %268 = tail call i32 @llvm.ctpop.i32(i32 %267) #11
  %269 = trunc i32 %268 to i8
  %270 = and i8 %269, 1
  %271 = xor i8 %270, 1
  store i8 %271, i8* %52, align 1, !tbaa !2447
  %272 = xor i32 %263, %245
  %273 = xor i32 %272, %264
  %274 = lshr i32 %273, 4
  %275 = trunc i32 %274 to i8
  %276 = and i8 %275, 1
  store i8 %276, i8* %53, align 1, !tbaa !2451
  %277 = icmp eq i32 %264, 0
  %278 = zext i1 %277 to i8
  store i8 %278, i8* %54, align 1, !tbaa !2448
  %279 = lshr i32 %264, 31
  %280 = trunc i32 %279 to i8
  store i8 %280, i8* %55, align 1, !tbaa !2449
  %281 = lshr i32 %263, 31
  %282 = xor i32 %281, %258
  %283 = xor i32 %279, %258
  %284 = add nuw nsw i32 %283, %282
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %56, align 1, !tbaa !2450
  %287 = icmp ne i8 %280, 0
  %288 = xor i1 %287, %285
  %.v = select i1 %288, i64 15, i64 101
  %289 = add i64 %239, %.v
  %290 = add i64 %289, 3
  store i64 %290, i64* %PC, align 8
  br i1 %288, label %block_4011f5, label %block_40124b

block_40123d:                                     ; preds = %block_401205
  %291 = add i64 %3111, 3
  store i64 %291, i64* %PC, align 8
  %292 = load i32, i32* %3083, align 4
  %293 = shl i32 %292, 1
  %294 = icmp slt i32 %292, 0
  %295 = icmp slt i32 %293, 0
  %296 = xor i1 %294, %295
  %297 = zext i32 %293 to i64
  store i64 %297, i64* %RAX, align 8, !tbaa !2428
  %.lobit = lshr i32 %292, 31
  %298 = trunc i32 %.lobit to i8
  store i8 %298, i8* %51, align 1, !tbaa !2432
  %299 = and i32 %293, 254
  %300 = tail call i32 @llvm.ctpop.i32(i32 %299) #11
  %301 = trunc i32 %300 to i8
  %302 = and i8 %301, 1
  %303 = xor i8 %302, 1
  store i8 %303, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %304 = icmp eq i32 %293, 0
  %305 = zext i1 %304 to i8
  store i8 %305, i8* %54, align 1, !tbaa !2432
  %306 = lshr i32 %292, 30
  %307 = trunc i32 %306 to i8
  %308 = and i8 %307, 1
  store i8 %308, i8* %55, align 1, !tbaa !2432
  %309 = zext i1 %296 to i8
  store i8 %309, i8* %56, align 1, !tbaa !2432
  %310 = add i64 %3111, 9
  store i64 %310, i64* %PC, align 8
  store i32 %293, i32* %3083, align 4
  %311 = load i64, i64* %PC, align 8
  %312 = add i64 %311, -96
  store i64 %312, i64* %PC, align 8, !tbaa !2428
  br label %block_4011e6

block_401664:                                     ; preds = %block_40124b
  store i32 1, i32* %426, align 4
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %314 = bitcast i64* %313 to double*
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_40166b

block_401832:                                     ; preds = %block_40165f, %block_40182d
  %.sink = phi i64 [ %353, %block_40165f ], [ %324, %block_40182d ]
  %315 = add i64 %.sink, 1
  store i64 %315, i64* %PC, align 8
  %316 = load i64, i64* %7, align 8, !tbaa !2428
  %317 = add i64 %316, 8
  %318 = inttoptr i64 %316 to i64*
  %319 = load i64, i64* %318, align 8
  store i64 %319, i64* %RBP, align 8, !tbaa !2428
  store i64 %317, i64* %7, align 8, !tbaa !2428
  %320 = add i64 %.sink, 2
  store i64 %320, i64* %PC, align 8
  %321 = inttoptr i64 %317 to i64*
  %322 = load i64, i64* %321, align 8
  store i64 %322, i64* %PC, align 8, !tbaa !2428
  %323 = add i64 %316, 16
  store i64 %323, i64* %7, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_40182d:                                     ; preds = %block_40166b
  %324 = add i64 %157, 5
  br label %block_401832

block_40181a:                                     ; preds = %block_40167e
  %325 = add i64 %195, 8
  store i64 %325, i64* %PC, align 8
  %326 = load i32, i32* %167, align 4
  %327 = add i32 %326, 1
  %328 = zext i32 %327 to i64
  store i64 %328, i64* %RAX, align 8, !tbaa !2428
  %329 = icmp eq i32 %326, -1
  %330 = icmp eq i32 %327, 0
  %331 = or i1 %329, %330
  %332 = zext i1 %331 to i8
  store i8 %332, i8* %51, align 1, !tbaa !2433
  %333 = and i32 %327, 255
  %334 = tail call i32 @llvm.ctpop.i32(i32 %333) #11
  %335 = trunc i32 %334 to i8
  %336 = and i8 %335, 1
  %337 = xor i8 %336, 1
  store i8 %337, i8* %52, align 1, !tbaa !2447
  %338 = xor i32 %326, %327
  %339 = lshr i32 %338, 4
  %340 = trunc i32 %339 to i8
  %341 = and i8 %340, 1
  store i8 %341, i8* %53, align 1, !tbaa !2451
  %342 = zext i1 %330 to i8
  store i8 %342, i8* %54, align 1, !tbaa !2448
  %343 = lshr i32 %327, 31
  %344 = trunc i32 %343 to i8
  store i8 %344, i8* %55, align 1, !tbaa !2449
  %345 = lshr i32 %326, 31
  %346 = xor i32 %343, %345
  %347 = add nuw nsw i32 %346, %343
  %348 = icmp eq i32 %347, 2
  %349 = zext i1 %348 to i8
  store i8 %349, i8* %56, align 1, !tbaa !2450
  %350 = add i64 %195, 14
  store i64 %350, i64* %PC, align 8
  store i32 %327, i32* %167, align 4
  %351 = load i64, i64* %PC, align 8
  %352 = add i64 %351, -445
  store i64 %352, i64* %PC, align 8, !tbaa !2428
  br label %block_40166b

block_40165f:                                     ; preds = %block_40126a
  %353 = add i64 %233, 467
  br label %block_401832

block_40124b:                                     ; preds = %block_4011e6
  %354 = load i32, i32* %243, align 4
  %355 = shl i32 %354, 1
  %356 = icmp slt i32 %354, 0
  %357 = icmp slt i32 %355, 0
  %358 = xor i1 %356, %357
  %359 = zext i32 %355 to i64
  store i64 %359, i64* %RAX, align 8, !tbaa !2428
  %.lobit10 = lshr i32 %354, 31
  %360 = trunc i32 %.lobit10 to i8
  store i8 %360, i8* %51, align 1, !tbaa !2432
  %361 = and i32 %355, 254
  %362 = tail call i32 @llvm.ctpop.i32(i32 %361) #11
  %363 = trunc i32 %362 to i8
  %364 = and i8 %363, 1
  %365 = xor i8 %364, 1
  store i8 %365, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %366 = icmp eq i32 %355, 0
  %367 = zext i1 %366 to i8
  store i8 %367, i8* %54, align 1, !tbaa !2432
  %368 = lshr i32 %354, 30
  %369 = trunc i32 %368 to i8
  %370 = and i8 %369, 1
  store i8 %370, i8* %55, align 1, !tbaa !2432
  %371 = zext i1 %358 to i8
  store i8 %371, i8* %56, align 1, !tbaa !2432
  %372 = add i64 %240, -52
  %373 = add i64 %289, 9
  store i64 %373, i64* %PC, align 8
  %374 = inttoptr i64 %372 to i32*
  store i32 %355, i32* %374, align 4
  %375 = load i64, i64* %RBP, align 8
  %376 = add i64 %375, -48
  %377 = load i64, i64* %PC, align 8
  %378 = add i64 %377, 3
  store i64 %378, i64* %PC, align 8
  %379 = inttoptr i64 %376 to i32*
  %380 = load i32, i32* %379, align 4
  %381 = shl i32 %380, 3
  %382 = zext i32 %381 to i64
  store i64 %382, i64* %RAX, align 8, !tbaa !2428
  %383 = lshr i32 %380, 29
  %384 = trunc i32 %383 to i8
  %385 = and i8 %384, 1
  store i8 %385, i8* %51, align 1, !tbaa !2432
  %386 = and i32 %381, 248
  %387 = tail call i32 @llvm.ctpop.i32(i32 %386) #11
  %388 = trunc i32 %387 to i8
  %389 = and i8 %388, 1
  %390 = xor i8 %389, 1
  store i8 %390, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %391 = icmp eq i32 %381, 0
  %392 = zext i1 %391 to i8
  store i8 %392, i8* %54, align 1, !tbaa !2432
  %393 = lshr i32 %380, 28
  %394 = and i32 %393, 1
  %395 = trunc i32 %394 to i8
  store i8 %395, i8* %55, align 1, !tbaa !2432
  store i8 0, i8* %56, align 1, !tbaa !2432
  %396 = add i64 %375, -44
  %397 = add i64 %377, 9
  store i64 %397, i64* %PC, align 8
  %398 = inttoptr i64 %396 to i32*
  %399 = load i32, i32* %398, align 4
  %400 = sub i32 %381, %399
  %401 = icmp ult i32 %381, %399
  %402 = zext i1 %401 to i8
  store i8 %402, i8* %51, align 1, !tbaa !2433
  %403 = and i32 %400, 255
  %404 = tail call i32 @llvm.ctpop.i32(i32 %403) #11
  %405 = trunc i32 %404 to i8
  %406 = and i8 %405, 1
  %407 = xor i8 %406, 1
  store i8 %407, i8* %52, align 1, !tbaa !2447
  %408 = xor i32 %399, %381
  %409 = xor i32 %408, %400
  %410 = lshr i32 %409, 4
  %411 = trunc i32 %410 to i8
  %412 = and i8 %411, 1
  store i8 %412, i8* %53, align 1, !tbaa !2451
  %413 = icmp eq i32 %400, 0
  %414 = zext i1 %413 to i8
  store i8 %414, i8* %54, align 1, !tbaa !2448
  %415 = lshr i32 %400, 31
  %416 = trunc i32 %415 to i8
  store i8 %416, i8* %55, align 1, !tbaa !2449
  %417 = lshr i32 %399, 31
  %418 = xor i32 %417, %394
  %419 = xor i32 %415, %394
  %420 = add nuw nsw i32 %419, %418
  %421 = icmp eq i32 %420, 2
  %422 = zext i1 %421 to i8
  store i8 %422, i8* %56, align 1, !tbaa !2450
  %.v12 = select i1 %413, i64 15, i64 1040
  %423 = add i64 %377, %.v12
  %424 = add i64 %375, -36
  %425 = add i64 %423, 7
  store i64 %425, i64* %PC, align 8
  %426 = inttoptr i64 %424 to i32*
  br i1 %413, label %block_401263, label %block_401664

block_401211:                                     ; preds = %block_401205
  %427 = add i64 %3075, -16
  %428 = add i64 %3111, 4
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %427 to i64*
  %430 = load i64, i64* %429, align 8
  store i64 %430, i64* %RAX, align 8, !tbaa !2428
  %431 = add i64 %3111, 8
  store i64 %431, i64* %PC, align 8
  %432 = load i32, i32* %3078, align 4
  %433 = sext i32 %432 to i64
  store i64 %433, i64* %RCX, align 8, !tbaa !2428
  %434 = shl nsw i64 %433, 2
  %435 = add i64 %434, %430
  %436 = add i64 %3111, 11
  store i64 %436, i64* %PC, align 8
  %437 = inttoptr i64 %435 to i32*
  %438 = load i32, i32* %437, align 4
  %439 = zext i32 %438 to i64
  store i64 %439, i64* %RDX, align 8, !tbaa !2428
  %440 = add i64 %3075, -44
  %441 = add i64 %3111, 14
  store i64 %441, i64* %PC, align 8
  %442 = inttoptr i64 %440 to i32*
  %443 = load i32, i32* %442, align 4
  %444 = add i32 %443, %438
  %445 = zext i32 %444 to i64
  store i64 %445, i64* %RDX, align 8, !tbaa !2428
  %446 = icmp ult i32 %444, %438
  %447 = icmp ult i32 %444, %443
  %448 = or i1 %446, %447
  %449 = zext i1 %448 to i8
  store i8 %449, i8* %51, align 1, !tbaa !2433
  %450 = and i32 %444, 255
  %451 = tail call i32 @llvm.ctpop.i32(i32 %450) #11
  %452 = trunc i32 %451 to i8
  %453 = and i8 %452, 1
  %454 = xor i8 %453, 1
  store i8 %454, i8* %52, align 1, !tbaa !2447
  %455 = xor i32 %443, %438
  %456 = xor i32 %455, %444
  %457 = lshr i32 %456, 4
  %458 = trunc i32 %457 to i8
  %459 = and i8 %458, 1
  store i8 %459, i8* %53, align 1, !tbaa !2451
  %460 = icmp eq i32 %444, 0
  %461 = zext i1 %460 to i8
  store i8 %461, i8* %54, align 1, !tbaa !2448
  %462 = lshr i32 %444, 31
  %463 = trunc i32 %462 to i8
  store i8 %463, i8* %55, align 1, !tbaa !2449
  %464 = lshr i32 %438, 31
  %465 = lshr i32 %443, 31
  %466 = xor i32 %462, %464
  %467 = xor i32 %462, %465
  %468 = add nuw nsw i32 %466, %467
  %469 = icmp eq i32 %468, 2
  %470 = zext i1 %469 to i8
  store i8 %470, i8* %56, align 1, !tbaa !2450
  %471 = add i64 %3111, 18
  store i64 %471, i64* %PC, align 8
  %472 = load i64, i64* %429, align 8
  store i64 %472, i64* %RAX, align 8, !tbaa !2428
  %473 = add i64 %3111, 21
  store i64 %473, i64* %PC, align 8
  %474 = load i32, i32* %3083, align 4
  %475 = zext i32 %474 to i64
  store i64 %475, i64* %RSI, align 8, !tbaa !2428
  %476 = add i64 %3111, 24
  store i64 %476, i64* %PC, align 8
  %477 = load i32, i32* %3078, align 4
  %478 = add i32 %477, %474
  %479 = zext i32 %478 to i64
  store i64 %479, i64* %RSI, align 8, !tbaa !2428
  %480 = icmp ult i32 %478, %474
  %481 = icmp ult i32 %478, %477
  %482 = or i1 %480, %481
  %483 = zext i1 %482 to i8
  store i8 %483, i8* %51, align 1, !tbaa !2433
  %484 = and i32 %478, 255
  %485 = tail call i32 @llvm.ctpop.i32(i32 %484) #11
  %486 = trunc i32 %485 to i8
  %487 = and i8 %486, 1
  %488 = xor i8 %487, 1
  store i8 %488, i8* %52, align 1, !tbaa !2447
  %489 = xor i32 %477, %474
  %490 = xor i32 %489, %478
  %491 = lshr i32 %490, 4
  %492 = trunc i32 %491 to i8
  %493 = and i8 %492, 1
  store i8 %493, i8* %53, align 1, !tbaa !2451
  %494 = icmp eq i32 %478, 0
  %495 = zext i1 %494 to i8
  store i8 %495, i8* %54, align 1, !tbaa !2448
  %496 = lshr i32 %478, 31
  %497 = trunc i32 %496 to i8
  store i8 %497, i8* %55, align 1, !tbaa !2449
  %498 = lshr i32 %474, 31
  %499 = lshr i32 %477, 31
  %500 = xor i32 %496, %498
  %501 = xor i32 %496, %499
  %502 = add nuw nsw i32 %500, %501
  %503 = icmp eq i32 %502, 2
  %504 = zext i1 %503 to i8
  store i8 %504, i8* %56, align 1, !tbaa !2450
  %505 = sext i32 %478 to i64
  store i64 %505, i64* %RCX, align 8, !tbaa !2428
  %506 = shl nsw i64 %505, 2
  %507 = add i64 %506, %472
  %508 = add i64 %3111, 30
  store i64 %508, i64* %PC, align 8
  %509 = inttoptr i64 %507 to i32*
  store i32 %444, i32* %509, align 4
  %510 = load i64, i64* %RBP, align 8
  %511 = add i64 %510, -28
  %512 = load i64, i64* %PC, align 8
  %513 = add i64 %512, 3
  store i64 %513, i64* %PC, align 8
  %514 = inttoptr i64 %511 to i32*
  %515 = load i32, i32* %514, align 4
  %516 = add i32 %515, 1
  %517 = zext i32 %516 to i64
  store i64 %517, i64* %RAX, align 8, !tbaa !2428
  %518 = icmp eq i32 %515, -1
  %519 = icmp eq i32 %516, 0
  %520 = or i1 %518, %519
  %521 = zext i1 %520 to i8
  store i8 %521, i8* %51, align 1, !tbaa !2433
  %522 = and i32 %516, 255
  %523 = tail call i32 @llvm.ctpop.i32(i32 %522) #11
  %524 = trunc i32 %523 to i8
  %525 = and i8 %524, 1
  %526 = xor i8 %525, 1
  store i8 %526, i8* %52, align 1, !tbaa !2447
  %527 = xor i32 %515, %516
  %528 = lshr i32 %527, 4
  %529 = trunc i32 %528 to i8
  %530 = and i8 %529, 1
  store i8 %530, i8* %53, align 1, !tbaa !2451
  %531 = zext i1 %519 to i8
  store i8 %531, i8* %54, align 1, !tbaa !2448
  %532 = lshr i32 %516, 31
  %533 = trunc i32 %532 to i8
  store i8 %533, i8* %55, align 1, !tbaa !2449
  %534 = lshr i32 %515, 31
  %535 = xor i32 %532, %534
  %536 = add nuw nsw i32 %535, %532
  %537 = icmp eq i32 %536, 2
  %538 = zext i1 %537 to i8
  store i8 %538, i8* %56, align 1, !tbaa !2450
  %539 = add i64 %512, 9
  store i64 %539, i64* %PC, align 8
  store i32 %516, i32* %514, align 4
  %540 = load i64, i64* %PC, align 8
  %541 = add i64 %540, -51
  store i64 %541, i64* %PC, align 8, !tbaa !2428
  br label %block_401205

block_40158d:                                     ; preds = %block_40127d
  %542 = load i32, i32* %66, align 4
  %543 = shl i32 %542, 1
  %544 = icmp slt i32 %542, 0
  %545 = icmp slt i32 %543, 0
  %546 = xor i1 %544, %545
  %547 = zext i32 %543 to i64
  store i64 %547, i64* %RAX, align 8, !tbaa !2428
  %.lobit19 = lshr i32 %542, 31
  %548 = trunc i32 %.lobit19 to i8
  store i8 %548, i8* %51, align 1, !tbaa !2432
  %549 = and i32 %543, 254
  %550 = tail call i32 @llvm.ctpop.i32(i32 %549) #11
  %551 = trunc i32 %550 to i8
  %552 = and i8 %551, 1
  %553 = xor i8 %552, 1
  store i8 %553, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %554 = icmp eq i32 %543, 0
  %555 = zext i1 %554 to i8
  store i8 %555, i8* %54, align 1, !tbaa !2432
  %556 = lshr i32 %542, 30
  %557 = and i32 %556, 1
  %558 = trunc i32 %557 to i8
  store i8 %558, i8* %55, align 1, !tbaa !2432
  %559 = zext i1 %546 to i8
  store i8 %559, i8* %56, align 1, !tbaa !2432
  %560 = add i64 %58, -52
  %561 = add i64 %94, 9
  store i64 %561, i64* %PC, align 8
  %562 = inttoptr i64 %560 to i32*
  %563 = load i32, i32* %562, align 4
  %564 = add i32 %563, %543
  %565 = zext i32 %564 to i64
  store i64 %565, i64* %RAX, align 8, !tbaa !2428
  %566 = icmp ult i32 %564, %543
  %567 = icmp ult i32 %564, %563
  %568 = or i1 %566, %567
  %569 = zext i1 %568 to i8
  store i8 %569, i8* %51, align 1, !tbaa !2433
  %570 = and i32 %564, 255
  %571 = tail call i32 @llvm.ctpop.i32(i32 %570) #11
  %572 = trunc i32 %571 to i8
  %573 = and i8 %572, 1
  %574 = xor i8 %573, 1
  store i8 %574, i8* %52, align 1, !tbaa !2447
  %575 = xor i32 %563, %543
  %576 = xor i32 %575, %564
  %577 = lshr i32 %576, 4
  %578 = trunc i32 %577 to i8
  %579 = and i8 %578, 1
  store i8 %579, i8* %53, align 1, !tbaa !2451
  %580 = icmp eq i32 %564, 0
  %581 = zext i1 %580 to i8
  store i8 %581, i8* %54, align 1, !tbaa !2448
  %582 = lshr i32 %564, 31
  %583 = trunc i32 %582 to i8
  store i8 %583, i8* %55, align 1, !tbaa !2449
  %584 = lshr i32 %563, 31
  %585 = xor i32 %582, %557
  %586 = xor i32 %582, %584
  %587 = add nuw nsw i32 %585, %586
  %588 = icmp eq i32 %587, 2
  %589 = zext i1 %588 to i8
  store i8 %589, i8* %56, align 1, !tbaa !2450
  %590 = add i64 %58, -16
  %591 = add i64 %94, 13
  store i64 %591, i64* %PC, align 8
  %592 = inttoptr i64 %590 to i64*
  %593 = load i64, i64* %592, align 8
  store i64 %593, i64* %RCX, align 8, !tbaa !2428
  %594 = add i64 %94, 17
  store i64 %594, i64* %PC, align 8
  %595 = load i32, i32* %66, align 4
  %596 = sext i32 %595 to i64
  store i64 %596, i64* %RDX, align 8, !tbaa !2428
  %597 = shl nsw i64 %596, 2
  %598 = add i64 %597, %593
  %599 = add i64 %94, 20
  store i64 %599, i64* %PC, align 8
  %600 = inttoptr i64 %598 to i32*
  %601 = load i32, i32* %600, align 4
  %602 = add i32 %601, %564
  %603 = zext i32 %602 to i64
  store i64 %603, i64* %RAX, align 8, !tbaa !2428
  %604 = icmp ult i32 %602, %564
  %605 = icmp ult i32 %602, %601
  %606 = or i1 %604, %605
  %607 = zext i1 %606 to i8
  store i8 %607, i8* %51, align 1, !tbaa !2433
  %608 = and i32 %602, 255
  %609 = tail call i32 @llvm.ctpop.i32(i32 %608) #11
  %610 = trunc i32 %609 to i8
  %611 = and i8 %610, 1
  %612 = xor i8 %611, 1
  store i8 %612, i8* %52, align 1, !tbaa !2447
  %613 = xor i32 %601, %564
  %614 = xor i32 %613, %602
  %615 = lshr i32 %614, 4
  %616 = trunc i32 %615 to i8
  %617 = and i8 %616, 1
  store i8 %617, i8* %53, align 1, !tbaa !2451
  %618 = icmp eq i32 %602, 0
  %619 = zext i1 %618 to i8
  store i8 %619, i8* %54, align 1, !tbaa !2448
  %620 = lshr i32 %602, 31
  %621 = trunc i32 %620 to i8
  store i8 %621, i8* %55, align 1, !tbaa !2449
  %622 = lshr i32 %601, 31
  %623 = xor i32 %620, %582
  %624 = xor i32 %620, %622
  %625 = add nuw nsw i32 %623, %624
  %626 = icmp eq i32 %625, 2
  %627 = zext i1 %626 to i8
  store i8 %627, i8* %56, align 1, !tbaa !2450
  %628 = load i64, i64* %RBP, align 8
  %629 = add i64 %628, -32
  %630 = add i64 %94, 23
  store i64 %630, i64* %PC, align 8
  %631 = inttoptr i64 %629 to i32*
  store i32 %602, i32* %631, align 4
  %632 = load i64, i64* %RBP, align 8
  %633 = add i64 %632, -32
  %634 = load i64, i64* %PC, align 8
  %635 = add i64 %634, 3
  store i64 %635, i64* %PC, align 8
  %636 = inttoptr i64 %633 to i32*
  %637 = load i32, i32* %636, align 4
  %638 = zext i32 %637 to i64
  store i64 %638, i64* %RAX, align 8, !tbaa !2428
  %639 = add i64 %632, -52
  %640 = add i64 %634, 6
  store i64 %640, i64* %PC, align 8
  %641 = inttoptr i64 %639 to i32*
  %642 = load i32, i32* %641, align 4
  %643 = add i32 %642, %637
  %644 = zext i32 %643 to i64
  store i64 %644, i64* %RAX, align 8, !tbaa !2428
  %645 = icmp ult i32 %643, %637
  %646 = icmp ult i32 %643, %642
  %647 = or i1 %645, %646
  %648 = zext i1 %647 to i8
  store i8 %648, i8* %51, align 1, !tbaa !2433
  %649 = and i32 %643, 255
  %650 = tail call i32 @llvm.ctpop.i32(i32 %649) #11
  %651 = trunc i32 %650 to i8
  %652 = and i8 %651, 1
  %653 = xor i8 %652, 1
  store i8 %653, i8* %52, align 1, !tbaa !2447
  %654 = xor i32 %642, %637
  %655 = xor i32 %654, %643
  %656 = lshr i32 %655, 4
  %657 = trunc i32 %656 to i8
  %658 = and i8 %657, 1
  store i8 %658, i8* %53, align 1, !tbaa !2451
  %659 = icmp eq i32 %643, 0
  %660 = zext i1 %659 to i8
  store i8 %660, i8* %54, align 1, !tbaa !2448
  %661 = lshr i32 %643, 31
  %662 = trunc i32 %661 to i8
  store i8 %662, i8* %55, align 1, !tbaa !2449
  %663 = lshr i32 %637, 31
  %664 = lshr i32 %642, 31
  %665 = xor i32 %661, %663
  %666 = xor i32 %661, %664
  %667 = add nuw nsw i32 %665, %666
  %668 = icmp eq i32 %667, 2
  %669 = zext i1 %668 to i8
  store i8 %669, i8* %56, align 1, !tbaa !2450
  %670 = add i64 %632, -40
  %671 = add i64 %634, 9
  store i64 %671, i64* %PC, align 8
  %672 = inttoptr i64 %670 to i32*
  store i32 %643, i32* %672, align 4
  %673 = load i64, i64* %RBP, align 8
  %674 = add i64 %673, -24
  %675 = load i64, i64* %PC, align 8
  %676 = add i64 %675, 4
  store i64 %676, i64* %PC, align 8
  %677 = inttoptr i64 %674 to i64*
  %678 = load i64, i64* %677, align 8
  store i64 %678, i64* %RCX, align 8, !tbaa !2428
  %679 = add i64 %673, -32
  %680 = add i64 %675, 8
  store i64 %680, i64* %PC, align 8
  %681 = inttoptr i64 %679 to i32*
  %682 = load i32, i32* %681, align 4
  %683 = sext i32 %682 to i64
  store i64 %683, i64* %RDX, align 8, !tbaa !2428
  %684 = shl nsw i64 %683, 3
  %685 = add i64 %684, %678
  %686 = add i64 %675, 13
  store i64 %686, i64* %PC, align 8
  %687 = inttoptr i64 %685 to i64*
  %688 = load i64, i64* %687, align 8
  %689 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %688, i64* %689, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %690 = add i64 %673, -64
  %691 = add i64 %675, 18
  store i64 %691, i64* %PC, align 8
  %692 = inttoptr i64 %690 to i64*
  store i64 %688, i64* %692, align 8
  %693 = load i64, i64* %RBP, align 8
  %694 = add i64 %693, -24
  %695 = load i64, i64* %PC, align 8
  %696 = add i64 %695, 4
  store i64 %696, i64* %PC, align 8
  %697 = inttoptr i64 %694 to i64*
  %698 = load i64, i64* %697, align 8
  store i64 %698, i64* %RCX, align 8, !tbaa !2428
  %699 = add i64 %693, -32
  %700 = add i64 %695, 7
  store i64 %700, i64* %PC, align 8
  %701 = inttoptr i64 %699 to i32*
  %702 = load i32, i32* %701, align 4
  %703 = add i32 %702, 1
  %704 = zext i32 %703 to i64
  store i64 %704, i64* %RAX, align 8, !tbaa !2428
  %705 = icmp eq i32 %702, -1
  %706 = icmp eq i32 %703, 0
  %707 = or i1 %705, %706
  %708 = zext i1 %707 to i8
  store i8 %708, i8* %51, align 1, !tbaa !2433
  %709 = and i32 %703, 255
  %710 = tail call i32 @llvm.ctpop.i32(i32 %709) #11
  %711 = trunc i32 %710 to i8
  %712 = and i8 %711, 1
  %713 = xor i8 %712, 1
  store i8 %713, i8* %52, align 1, !tbaa !2447
  %714 = xor i32 %702, %703
  %715 = lshr i32 %714, 4
  %716 = trunc i32 %715 to i8
  %717 = and i8 %716, 1
  store i8 %717, i8* %53, align 1, !tbaa !2451
  %718 = zext i1 %706 to i8
  store i8 %718, i8* %54, align 1, !tbaa !2448
  %719 = lshr i32 %703, 31
  %720 = trunc i32 %719 to i8
  store i8 %720, i8* %55, align 1, !tbaa !2449
  %721 = lshr i32 %702, 31
  %722 = xor i32 %719, %721
  %723 = add nuw nsw i32 %722, %719
  %724 = icmp eq i32 %723, 2
  %725 = zext i1 %724 to i8
  store i8 %725, i8* %56, align 1, !tbaa !2450
  %726 = sext i32 %703 to i64
  store i64 %726, i64* %RDX, align 8, !tbaa !2428
  %727 = shl nsw i64 %726, 3
  %728 = add i64 %727, %698
  %729 = add i64 %695, 18
  store i64 %729, i64* %PC, align 8
  %730 = inttoptr i64 %728 to i64*
  %731 = load i64, i64* %730, align 8
  store i64 %731, i64* %689, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %732 = add i64 %693, -72
  %733 = add i64 %695, 23
  store i64 %733, i64* %PC, align 8
  %734 = inttoptr i64 %732 to i64*
  store i64 %731, i64* %734, align 8
  %735 = load i64, i64* %RBP, align 8
  %736 = add i64 %735, -24
  %737 = load i64, i64* %PC, align 8
  %738 = add i64 %737, 4
  store i64 %738, i64* %PC, align 8
  %739 = inttoptr i64 %736 to i64*
  %740 = load i64, i64* %739, align 8
  store i64 %740, i64* %RCX, align 8, !tbaa !2428
  %741 = add i64 %735, -40
  %742 = add i64 %737, 8
  store i64 %742, i64* %PC, align 8
  %743 = inttoptr i64 %741 to i32*
  %744 = load i32, i32* %743, align 4
  %745 = sext i32 %744 to i64
  store i64 %745, i64* %RDX, align 8, !tbaa !2428
  %746 = shl nsw i64 %745, 3
  %747 = add i64 %746, %740
  %748 = add i64 %737, 13
  store i64 %748, i64* %PC, align 8
  %749 = inttoptr i64 %747 to i64*
  %750 = load i64, i64* %749, align 8
  store i64 %750, i64* %689, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %751 = add i64 %735, -80
  %752 = add i64 %737, 18
  store i64 %752, i64* %PC, align 8
  %753 = inttoptr i64 %751 to i64*
  store i64 %750, i64* %753, align 8
  %754 = load i64, i64* %RBP, align 8
  %755 = add i64 %754, -24
  %756 = load i64, i64* %PC, align 8
  %757 = add i64 %756, 4
  store i64 %757, i64* %PC, align 8
  %758 = inttoptr i64 %755 to i64*
  %759 = load i64, i64* %758, align 8
  store i64 %759, i64* %RCX, align 8, !tbaa !2428
  %760 = add i64 %754, -40
  %761 = add i64 %756, 7
  store i64 %761, i64* %PC, align 8
  %762 = inttoptr i64 %760 to i32*
  %763 = load i32, i32* %762, align 4
  %764 = add i32 %763, 1
  %765 = zext i32 %764 to i64
  store i64 %765, i64* %RAX, align 8, !tbaa !2428
  %766 = icmp eq i32 %763, -1
  %767 = icmp eq i32 %764, 0
  %768 = or i1 %766, %767
  %769 = zext i1 %768 to i8
  store i8 %769, i8* %51, align 1, !tbaa !2433
  %770 = and i32 %764, 255
  %771 = tail call i32 @llvm.ctpop.i32(i32 %770) #11
  %772 = trunc i32 %771 to i8
  %773 = and i8 %772, 1
  %774 = xor i8 %773, 1
  store i8 %774, i8* %52, align 1, !tbaa !2447
  %775 = xor i32 %763, %764
  %776 = lshr i32 %775, 4
  %777 = trunc i32 %776 to i8
  %778 = and i8 %777, 1
  store i8 %778, i8* %53, align 1, !tbaa !2451
  %779 = zext i1 %767 to i8
  store i8 %779, i8* %54, align 1, !tbaa !2448
  %780 = lshr i32 %764, 31
  %781 = trunc i32 %780 to i8
  store i8 %781, i8* %55, align 1, !tbaa !2449
  %782 = lshr i32 %763, 31
  %783 = xor i32 %780, %782
  %784 = add nuw nsw i32 %783, %780
  %785 = icmp eq i32 %784, 2
  %786 = zext i1 %785 to i8
  store i8 %786, i8* %56, align 1, !tbaa !2450
  %787 = sext i32 %764 to i64
  store i64 %787, i64* %RDX, align 8, !tbaa !2428
  %788 = shl nsw i64 %787, 3
  %789 = add i64 %788, %759
  %790 = add i64 %756, 18
  store i64 %790, i64* %PC, align 8
  %791 = inttoptr i64 %789 to i64*
  %792 = load i64, i64* %791, align 8
  store i64 %792, i64* %689, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %793 = add i64 %754, -88
  %794 = add i64 %756, 23
  store i64 %794, i64* %PC, align 8
  %795 = inttoptr i64 %793 to i64*
  store i64 %792, i64* %795, align 8
  %796 = load i64, i64* %RBP, align 8
  %797 = add i64 %796, -80
  %798 = load i64, i64* %PC, align 8
  %799 = add i64 %798, 5
  store i64 %799, i64* %PC, align 8
  %800 = inttoptr i64 %797 to i64*
  %801 = load i64, i64* %800, align 8
  store i64 %801, i64* %689, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %802 = add i64 %796, -24
  %803 = add i64 %798, 9
  store i64 %803, i64* %PC, align 8
  %804 = inttoptr i64 %802 to i64*
  %805 = load i64, i64* %804, align 8
  store i64 %805, i64* %RCX, align 8, !tbaa !2428
  %806 = add i64 %796, -32
  %807 = add i64 %798, 13
  store i64 %807, i64* %PC, align 8
  %808 = inttoptr i64 %806 to i32*
  %809 = load i32, i32* %808, align 4
  %810 = sext i32 %809 to i64
  store i64 %810, i64* %RDX, align 8, !tbaa !2428
  %811 = shl nsw i64 %810, 3
  %812 = add i64 %811, %805
  %813 = add i64 %798, 18
  store i64 %813, i64* %PC, align 8
  %814 = inttoptr i64 %812 to i64*
  store i64 %801, i64* %814, align 8
  %815 = load i64, i64* %RBP, align 8
  %816 = add i64 %815, -88
  %817 = load i64, i64* %PC, align 8
  %818 = add i64 %817, 5
  store i64 %818, i64* %PC, align 8
  %819 = inttoptr i64 %816 to i64*
  %820 = load i64, i64* %819, align 8
  store i64 %820, i64* %689, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %821 = add i64 %815, -24
  %822 = add i64 %817, 9
  store i64 %822, i64* %PC, align 8
  %823 = inttoptr i64 %821 to i64*
  %824 = load i64, i64* %823, align 8
  store i64 %824, i64* %RCX, align 8, !tbaa !2428
  %825 = add i64 %815, -32
  %826 = add i64 %817, 12
  store i64 %826, i64* %PC, align 8
  %827 = inttoptr i64 %825 to i32*
  %828 = load i32, i32* %827, align 4
  %829 = add i32 %828, 1
  %830 = zext i32 %829 to i64
  store i64 %830, i64* %RAX, align 8, !tbaa !2428
  %831 = icmp eq i32 %828, -1
  %832 = icmp eq i32 %829, 0
  %833 = or i1 %831, %832
  %834 = zext i1 %833 to i8
  store i8 %834, i8* %51, align 1, !tbaa !2433
  %835 = and i32 %829, 255
  %836 = tail call i32 @llvm.ctpop.i32(i32 %835) #11
  %837 = trunc i32 %836 to i8
  %838 = and i8 %837, 1
  %839 = xor i8 %838, 1
  store i8 %839, i8* %52, align 1, !tbaa !2447
  %840 = xor i32 %828, %829
  %841 = lshr i32 %840, 4
  %842 = trunc i32 %841 to i8
  %843 = and i8 %842, 1
  store i8 %843, i8* %53, align 1, !tbaa !2451
  %844 = zext i1 %832 to i8
  store i8 %844, i8* %54, align 1, !tbaa !2448
  %845 = lshr i32 %829, 31
  %846 = trunc i32 %845 to i8
  store i8 %846, i8* %55, align 1, !tbaa !2449
  %847 = lshr i32 %828, 31
  %848 = xor i32 %845, %847
  %849 = add nuw nsw i32 %848, %845
  %850 = icmp eq i32 %849, 2
  %851 = zext i1 %850 to i8
  store i8 %851, i8* %56, align 1, !tbaa !2450
  %852 = sext i32 %829 to i64
  store i64 %852, i64* %RDX, align 8, !tbaa !2428
  %853 = shl nsw i64 %852, 3
  %854 = add i64 %853, %824
  %855 = add i64 %817, 23
  store i64 %855, i64* %PC, align 8
  %856 = inttoptr i64 %854 to i64*
  store i64 %820, i64* %856, align 8
  %857 = load i64, i64* %RBP, align 8
  %858 = add i64 %857, -64
  %859 = load i64, i64* %PC, align 8
  %860 = add i64 %859, 5
  store i64 %860, i64* %PC, align 8
  %861 = inttoptr i64 %858 to i64*
  %862 = load i64, i64* %861, align 8
  store i64 %862, i64* %689, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %863 = add i64 %857, -24
  %864 = add i64 %859, 9
  store i64 %864, i64* %PC, align 8
  %865 = inttoptr i64 %863 to i64*
  %866 = load i64, i64* %865, align 8
  store i64 %866, i64* %RCX, align 8, !tbaa !2428
  %867 = add i64 %857, -40
  %868 = add i64 %859, 13
  store i64 %868, i64* %PC, align 8
  %869 = inttoptr i64 %867 to i32*
  %870 = load i32, i32* %869, align 4
  %871 = sext i32 %870 to i64
  store i64 %871, i64* %RDX, align 8, !tbaa !2428
  %872 = shl nsw i64 %871, 3
  %873 = add i64 %872, %866
  %874 = add i64 %859, 18
  store i64 %874, i64* %PC, align 8
  %875 = inttoptr i64 %873 to i64*
  store i64 %862, i64* %875, align 8
  %876 = load i64, i64* %RBP, align 8
  %877 = add i64 %876, -72
  %878 = load i64, i64* %PC, align 8
  %879 = add i64 %878, 5
  store i64 %879, i64* %PC, align 8
  %880 = inttoptr i64 %877 to i64*
  %881 = load i64, i64* %880, align 8
  store i64 %881, i64* %689, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %882 = add i64 %876, -24
  %883 = add i64 %878, 9
  store i64 %883, i64* %PC, align 8
  %884 = inttoptr i64 %882 to i64*
  %885 = load i64, i64* %884, align 8
  store i64 %885, i64* %RCX, align 8, !tbaa !2428
  %886 = add i64 %876, -40
  %887 = add i64 %878, 12
  store i64 %887, i64* %PC, align 8
  %888 = inttoptr i64 %886 to i32*
  %889 = load i32, i32* %888, align 4
  %890 = add i32 %889, 1
  %891 = zext i32 %890 to i64
  store i64 %891, i64* %RAX, align 8, !tbaa !2428
  %892 = icmp eq i32 %889, -1
  %893 = icmp eq i32 %890, 0
  %894 = or i1 %892, %893
  %895 = zext i1 %894 to i8
  store i8 %895, i8* %51, align 1, !tbaa !2433
  %896 = and i32 %890, 255
  %897 = tail call i32 @llvm.ctpop.i32(i32 %896) #11
  %898 = trunc i32 %897 to i8
  %899 = and i8 %898, 1
  %900 = xor i8 %899, 1
  store i8 %900, i8* %52, align 1, !tbaa !2447
  %901 = xor i32 %889, %890
  %902 = lshr i32 %901, 4
  %903 = trunc i32 %902 to i8
  %904 = and i8 %903, 1
  store i8 %904, i8* %53, align 1, !tbaa !2451
  %905 = zext i1 %893 to i8
  store i8 %905, i8* %54, align 1, !tbaa !2448
  %906 = lshr i32 %890, 31
  %907 = trunc i32 %906 to i8
  store i8 %907, i8* %55, align 1, !tbaa !2449
  %908 = lshr i32 %889, 31
  %909 = xor i32 %906, %908
  %910 = add nuw nsw i32 %909, %906
  %911 = icmp eq i32 %910, 2
  %912 = zext i1 %911 to i8
  store i8 %912, i8* %56, align 1, !tbaa !2450
  %913 = sext i32 %890 to i64
  store i64 %913, i64* %RDX, align 8, !tbaa !2428
  %914 = shl nsw i64 %913, 3
  %915 = add i64 %914, %885
  %916 = add i64 %878, 23
  store i64 %916, i64* %PC, align 8
  %917 = inttoptr i64 %915 to i64*
  store i64 %881, i64* %917, align 8
  %918 = load i64, i64* %RBP, align 8
  %919 = add i64 %918, -36
  %920 = load i64, i64* %PC, align 8
  %921 = add i64 %920, 3
  store i64 %921, i64* %PC, align 8
  %922 = inttoptr i64 %919 to i32*
  %923 = load i32, i32* %922, align 4
  %924 = add i32 %923, 1
  %925 = zext i32 %924 to i64
  store i64 %925, i64* %RAX, align 8, !tbaa !2428
  %926 = icmp eq i32 %923, -1
  %927 = icmp eq i32 %924, 0
  %928 = or i1 %926, %927
  %929 = zext i1 %928 to i8
  store i8 %929, i8* %51, align 1, !tbaa !2433
  %930 = and i32 %924, 255
  %931 = tail call i32 @llvm.ctpop.i32(i32 %930) #11
  %932 = trunc i32 %931 to i8
  %933 = and i8 %932, 1
  %934 = xor i8 %933, 1
  store i8 %934, i8* %52, align 1, !tbaa !2447
  %935 = xor i32 %923, %924
  %936 = lshr i32 %935, 4
  %937 = trunc i32 %936 to i8
  %938 = and i8 %937, 1
  store i8 %938, i8* %53, align 1, !tbaa !2451
  %939 = zext i1 %927 to i8
  store i8 %939, i8* %54, align 1, !tbaa !2448
  %940 = lshr i32 %924, 31
  %941 = trunc i32 %940 to i8
  store i8 %941, i8* %55, align 1, !tbaa !2449
  %942 = lshr i32 %923, 31
  %943 = xor i32 %940, %942
  %944 = add nuw nsw i32 %943, %940
  %945 = icmp eq i32 %944, 2
  %946 = zext i1 %945 to i8
  store i8 %946, i8* %56, align 1, !tbaa !2450
  %947 = add i64 %920, 9
  store i64 %947, i64* %PC, align 8
  store i32 %924, i32* %922, align 4
  %948 = load i64, i64* %PC, align 8
  %949 = add i64 %948, -1008
  store i64 %949, i64* %PC, align 8, !tbaa !2428
  br label %block_40126a

block_401276:                                     ; preds = %block_40126a
  %950 = add i64 %197, -28
  %951 = add i64 %233, 7
  store i64 %951, i64* %PC, align 8
  %952 = inttoptr i64 %950 to i32*
  store i32 0, i32* %952, align 4
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_40127d

block_40168a:                                     ; preds = %block_40167e
  %953 = add i64 %195, 3
  store i64 %953, i64* %PC, align 8
  %954 = load i32, i32* %162, align 4
  %955 = shl i32 %954, 1
  %956 = icmp slt i32 %954, 0
  %957 = icmp slt i32 %955, 0
  %958 = xor i1 %956, %957
  %959 = zext i32 %955 to i64
  store i64 %959, i64* %RAX, align 8, !tbaa !2428
  %.lobit22 = lshr i32 %954, 31
  %960 = trunc i32 %.lobit22 to i8
  store i8 %960, i8* %51, align 1, !tbaa !2432
  %961 = and i32 %955, 254
  %962 = tail call i32 @llvm.ctpop.i32(i32 %961) #11
  %963 = trunc i32 %962 to i8
  %964 = and i8 %963, 1
  %965 = xor i8 %964, 1
  store i8 %965, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %966 = icmp eq i32 %955, 0
  %967 = zext i1 %966 to i8
  store i8 %967, i8* %54, align 1, !tbaa !2432
  %968 = lshr i32 %954, 30
  %969 = and i32 %968, 1
  %970 = trunc i32 %969 to i8
  store i8 %970, i8* %55, align 1, !tbaa !2432
  %971 = zext i1 %958 to i8
  store i8 %971, i8* %56, align 1, !tbaa !2432
  %972 = add i64 %159, -16
  %973 = add i64 %195, 10
  store i64 %973, i64* %PC, align 8
  %974 = inttoptr i64 %972 to i64*
  %975 = load i64, i64* %974, align 8
  store i64 %975, i64* %RCX, align 8, !tbaa !2428
  %976 = add i64 %195, 14
  store i64 %976, i64* %PC, align 8
  %977 = load i32, i32* %167, align 4
  %978 = sext i32 %977 to i64
  store i64 %978, i64* %RDX, align 8, !tbaa !2428
  %979 = shl nsw i64 %978, 2
  %980 = add i64 %979, %975
  %981 = add i64 %195, 17
  store i64 %981, i64* %PC, align 8
  %982 = inttoptr i64 %980 to i32*
  %983 = load i32, i32* %982, align 4
  %984 = add i32 %983, %955
  %985 = zext i32 %984 to i64
  store i64 %985, i64* %RAX, align 8, !tbaa !2428
  %986 = icmp ult i32 %984, %955
  %987 = icmp ult i32 %984, %983
  %988 = or i1 %986, %987
  %989 = zext i1 %988 to i8
  store i8 %989, i8* %51, align 1, !tbaa !2433
  %990 = and i32 %984, 255
  %991 = tail call i32 @llvm.ctpop.i32(i32 %990) #11
  %992 = trunc i32 %991 to i8
  %993 = and i8 %992, 1
  %994 = xor i8 %993, 1
  store i8 %994, i8* %52, align 1, !tbaa !2447
  %995 = xor i32 %983, %955
  %996 = xor i32 %995, %984
  %997 = lshr i32 %996, 4
  %998 = trunc i32 %997 to i8
  %999 = and i8 %998, 1
  store i8 %999, i8* %53, align 1, !tbaa !2451
  %1000 = icmp eq i32 %984, 0
  %1001 = zext i1 %1000 to i8
  store i8 %1001, i8* %54, align 1, !tbaa !2448
  %1002 = lshr i32 %984, 31
  %1003 = trunc i32 %1002 to i8
  store i8 %1003, i8* %55, align 1, !tbaa !2449
  %1004 = lshr i32 %983, 31
  %1005 = xor i32 %1002, %969
  %1006 = xor i32 %1002, %1004
  %1007 = add nuw nsw i32 %1005, %1006
  %1008 = icmp eq i32 %1007, 2
  %1009 = zext i1 %1008 to i8
  store i8 %1009, i8* %56, align 1, !tbaa !2450
  %1010 = add i64 %159, -32
  %1011 = add i64 %195, 20
  store i64 %1011, i64* %PC, align 8
  %1012 = inttoptr i64 %1010 to i32*
  store i32 %984, i32* %1012, align 4
  %1013 = load i64, i64* %RBP, align 8
  %1014 = add i64 %1013, -36
  %1015 = load i64, i64* %PC, align 8
  %1016 = add i64 %1015, 3
  store i64 %1016, i64* %PC, align 8
  %1017 = inttoptr i64 %1014 to i32*
  %1018 = load i32, i32* %1017, align 4
  %1019 = shl i32 %1018, 1
  %1020 = icmp slt i32 %1018, 0
  %1021 = icmp slt i32 %1019, 0
  %1022 = xor i1 %1020, %1021
  %1023 = zext i32 %1019 to i64
  store i64 %1023, i64* %RAX, align 8, !tbaa !2428
  %.lobit23 = lshr i32 %1018, 31
  %1024 = trunc i32 %.lobit23 to i8
  store i8 %1024, i8* %51, align 1, !tbaa !2432
  %1025 = and i32 %1019, 254
  %1026 = tail call i32 @llvm.ctpop.i32(i32 %1025) #11
  %1027 = trunc i32 %1026 to i8
  %1028 = and i8 %1027, 1
  %1029 = xor i8 %1028, 1
  store i8 %1029, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %1030 = icmp eq i32 %1019, 0
  %1031 = zext i1 %1030 to i8
  store i8 %1031, i8* %54, align 1, !tbaa !2432
  %1032 = lshr i32 %1018, 30
  %1033 = and i32 %1032, 1
  %1034 = trunc i32 %1033 to i8
  store i8 %1034, i8* %55, align 1, !tbaa !2432
  %1035 = zext i1 %1022 to i8
  store i8 %1035, i8* %56, align 1, !tbaa !2432
  %1036 = add i64 %1013, -16
  %1037 = add i64 %1015, 10
  store i64 %1037, i64* %PC, align 8
  %1038 = inttoptr i64 %1036 to i64*
  %1039 = load i64, i64* %1038, align 8
  store i64 %1039, i64* %RCX, align 8, !tbaa !2428
  %1040 = add i64 %1013, -28
  %1041 = add i64 %1015, 14
  store i64 %1041, i64* %PC, align 8
  %1042 = inttoptr i64 %1040 to i32*
  %1043 = load i32, i32* %1042, align 4
  %1044 = sext i32 %1043 to i64
  store i64 %1044, i64* %RDX, align 8, !tbaa !2428
  %1045 = shl nsw i64 %1044, 2
  %1046 = add i64 %1045, %1039
  %1047 = add i64 %1015, 17
  store i64 %1047, i64* %PC, align 8
  %1048 = inttoptr i64 %1046 to i32*
  %1049 = load i32, i32* %1048, align 4
  %1050 = add i32 %1049, %1019
  %1051 = zext i32 %1050 to i64
  store i64 %1051, i64* %RAX, align 8, !tbaa !2428
  %1052 = icmp ult i32 %1050, %1019
  %1053 = icmp ult i32 %1050, %1049
  %1054 = or i1 %1052, %1053
  %1055 = zext i1 %1054 to i8
  store i8 %1055, i8* %51, align 1, !tbaa !2433
  %1056 = and i32 %1050, 255
  %1057 = tail call i32 @llvm.ctpop.i32(i32 %1056) #11
  %1058 = trunc i32 %1057 to i8
  %1059 = and i8 %1058, 1
  %1060 = xor i8 %1059, 1
  store i8 %1060, i8* %52, align 1, !tbaa !2447
  %1061 = xor i32 %1049, %1019
  %1062 = xor i32 %1061, %1050
  %1063 = lshr i32 %1062, 4
  %1064 = trunc i32 %1063 to i8
  %1065 = and i8 %1064, 1
  store i8 %1065, i8* %53, align 1, !tbaa !2451
  %1066 = icmp eq i32 %1050, 0
  %1067 = zext i1 %1066 to i8
  store i8 %1067, i8* %54, align 1, !tbaa !2448
  %1068 = lshr i32 %1050, 31
  %1069 = trunc i32 %1068 to i8
  store i8 %1069, i8* %55, align 1, !tbaa !2449
  %1070 = lshr i32 %1049, 31
  %1071 = xor i32 %1068, %1033
  %1072 = xor i32 %1068, %1070
  %1073 = add nuw nsw i32 %1071, %1072
  %1074 = icmp eq i32 %1073, 2
  %1075 = zext i1 %1074 to i8
  store i8 %1075, i8* %56, align 1, !tbaa !2450
  %1076 = add i64 %1013, -40
  %1077 = add i64 %1015, 20
  store i64 %1077, i64* %PC, align 8
  %1078 = inttoptr i64 %1076 to i32*
  store i32 %1050, i32* %1078, align 4
  %1079 = load i64, i64* %RBP, align 8
  %1080 = add i64 %1079, -24
  %1081 = load i64, i64* %PC, align 8
  %1082 = add i64 %1081, 4
  store i64 %1082, i64* %PC, align 8
  %1083 = inttoptr i64 %1080 to i64*
  %1084 = load i64, i64* %1083, align 8
  store i64 %1084, i64* %RCX, align 8, !tbaa !2428
  %1085 = add i64 %1079, -32
  %1086 = add i64 %1081, 8
  store i64 %1086, i64* %PC, align 8
  %1087 = inttoptr i64 %1085 to i32*
  %1088 = load i32, i32* %1087, align 4
  %1089 = sext i32 %1088 to i64
  store i64 %1089, i64* %RDX, align 8, !tbaa !2428
  %1090 = shl nsw i64 %1089, 3
  %1091 = add i64 %1090, %1084
  %1092 = add i64 %1081, 13
  store i64 %1092, i64* %PC, align 8
  %1093 = inttoptr i64 %1091 to i64*
  %1094 = load i64, i64* %1093, align 8
  %1095 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %1094, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1096 = add i64 %1079, -64
  %1097 = add i64 %1081, 18
  store i64 %1097, i64* %PC, align 8
  %1098 = inttoptr i64 %1096 to i64*
  store i64 %1094, i64* %1098, align 8
  %1099 = load i64, i64* %RBP, align 8
  %1100 = add i64 %1099, -24
  %1101 = load i64, i64* %PC, align 8
  %1102 = add i64 %1101, 4
  store i64 %1102, i64* %PC, align 8
  %1103 = inttoptr i64 %1100 to i64*
  %1104 = load i64, i64* %1103, align 8
  store i64 %1104, i64* %RCX, align 8, !tbaa !2428
  %1105 = add i64 %1099, -32
  %1106 = add i64 %1101, 7
  store i64 %1106, i64* %PC, align 8
  %1107 = inttoptr i64 %1105 to i32*
  %1108 = load i32, i32* %1107, align 4
  %1109 = add i32 %1108, 1
  %1110 = zext i32 %1109 to i64
  store i64 %1110, i64* %RAX, align 8, !tbaa !2428
  %1111 = icmp eq i32 %1108, -1
  %1112 = icmp eq i32 %1109, 0
  %1113 = or i1 %1111, %1112
  %1114 = zext i1 %1113 to i8
  store i8 %1114, i8* %51, align 1, !tbaa !2433
  %1115 = and i32 %1109, 255
  %1116 = tail call i32 @llvm.ctpop.i32(i32 %1115) #11
  %1117 = trunc i32 %1116 to i8
  %1118 = and i8 %1117, 1
  %1119 = xor i8 %1118, 1
  store i8 %1119, i8* %52, align 1, !tbaa !2447
  %1120 = xor i32 %1108, %1109
  %1121 = lshr i32 %1120, 4
  %1122 = trunc i32 %1121 to i8
  %1123 = and i8 %1122, 1
  store i8 %1123, i8* %53, align 1, !tbaa !2451
  %1124 = zext i1 %1112 to i8
  store i8 %1124, i8* %54, align 1, !tbaa !2448
  %1125 = lshr i32 %1109, 31
  %1126 = trunc i32 %1125 to i8
  store i8 %1126, i8* %55, align 1, !tbaa !2449
  %1127 = lshr i32 %1108, 31
  %1128 = xor i32 %1125, %1127
  %1129 = add nuw nsw i32 %1128, %1125
  %1130 = icmp eq i32 %1129, 2
  %1131 = zext i1 %1130 to i8
  store i8 %1131, i8* %56, align 1, !tbaa !2450
  %1132 = sext i32 %1109 to i64
  store i64 %1132, i64* %RDX, align 8, !tbaa !2428
  %1133 = shl nsw i64 %1132, 3
  %1134 = add i64 %1133, %1104
  %1135 = add i64 %1101, 18
  store i64 %1135, i64* %PC, align 8
  %1136 = inttoptr i64 %1134 to i64*
  %1137 = load i64, i64* %1136, align 8
  store i64 %1137, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1138 = add i64 %1099, -72
  %1139 = add i64 %1101, 23
  store i64 %1139, i64* %PC, align 8
  %1140 = inttoptr i64 %1138 to i64*
  store i64 %1137, i64* %1140, align 8
  %1141 = load i64, i64* %RBP, align 8
  %1142 = add i64 %1141, -24
  %1143 = load i64, i64* %PC, align 8
  %1144 = add i64 %1143, 4
  store i64 %1144, i64* %PC, align 8
  %1145 = inttoptr i64 %1142 to i64*
  %1146 = load i64, i64* %1145, align 8
  store i64 %1146, i64* %RCX, align 8, !tbaa !2428
  %1147 = add i64 %1141, -40
  %1148 = add i64 %1143, 8
  store i64 %1148, i64* %PC, align 8
  %1149 = inttoptr i64 %1147 to i32*
  %1150 = load i32, i32* %1149, align 4
  %1151 = sext i32 %1150 to i64
  store i64 %1151, i64* %RDX, align 8, !tbaa !2428
  %1152 = shl nsw i64 %1151, 3
  %1153 = add i64 %1152, %1146
  %1154 = add i64 %1143, 13
  store i64 %1154, i64* %PC, align 8
  %1155 = inttoptr i64 %1153 to i64*
  %1156 = load i64, i64* %1155, align 8
  store i64 %1156, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1157 = add i64 %1141, -80
  %1158 = add i64 %1143, 18
  store i64 %1158, i64* %PC, align 8
  %1159 = inttoptr i64 %1157 to i64*
  store i64 %1156, i64* %1159, align 8
  %1160 = load i64, i64* %RBP, align 8
  %1161 = add i64 %1160, -24
  %1162 = load i64, i64* %PC, align 8
  %1163 = add i64 %1162, 4
  store i64 %1163, i64* %PC, align 8
  %1164 = inttoptr i64 %1161 to i64*
  %1165 = load i64, i64* %1164, align 8
  store i64 %1165, i64* %RCX, align 8, !tbaa !2428
  %1166 = add i64 %1160, -40
  %1167 = add i64 %1162, 7
  store i64 %1167, i64* %PC, align 8
  %1168 = inttoptr i64 %1166 to i32*
  %1169 = load i32, i32* %1168, align 4
  %1170 = add i32 %1169, 1
  %1171 = zext i32 %1170 to i64
  store i64 %1171, i64* %RAX, align 8, !tbaa !2428
  %1172 = icmp eq i32 %1169, -1
  %1173 = icmp eq i32 %1170, 0
  %1174 = or i1 %1172, %1173
  %1175 = zext i1 %1174 to i8
  store i8 %1175, i8* %51, align 1, !tbaa !2433
  %1176 = and i32 %1170, 255
  %1177 = tail call i32 @llvm.ctpop.i32(i32 %1176) #11
  %1178 = trunc i32 %1177 to i8
  %1179 = and i8 %1178, 1
  %1180 = xor i8 %1179, 1
  store i8 %1180, i8* %52, align 1, !tbaa !2447
  %1181 = xor i32 %1169, %1170
  %1182 = lshr i32 %1181, 4
  %1183 = trunc i32 %1182 to i8
  %1184 = and i8 %1183, 1
  store i8 %1184, i8* %53, align 1, !tbaa !2451
  %1185 = zext i1 %1173 to i8
  store i8 %1185, i8* %54, align 1, !tbaa !2448
  %1186 = lshr i32 %1170, 31
  %1187 = trunc i32 %1186 to i8
  store i8 %1187, i8* %55, align 1, !tbaa !2449
  %1188 = lshr i32 %1169, 31
  %1189 = xor i32 %1186, %1188
  %1190 = add nuw nsw i32 %1189, %1186
  %1191 = icmp eq i32 %1190, 2
  %1192 = zext i1 %1191 to i8
  store i8 %1192, i8* %56, align 1, !tbaa !2450
  %1193 = sext i32 %1170 to i64
  store i64 %1193, i64* %RDX, align 8, !tbaa !2428
  %1194 = shl nsw i64 %1193, 3
  %1195 = add i64 %1194, %1165
  %1196 = add i64 %1162, 18
  store i64 %1196, i64* %PC, align 8
  %1197 = inttoptr i64 %1195 to i64*
  %1198 = load i64, i64* %1197, align 8
  store i64 %1198, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1199 = add i64 %1160, -88
  %1200 = add i64 %1162, 23
  store i64 %1200, i64* %PC, align 8
  %1201 = inttoptr i64 %1199 to i64*
  store i64 %1198, i64* %1201, align 8
  %1202 = load i64, i64* %RBP, align 8
  %1203 = add i64 %1202, -80
  %1204 = load i64, i64* %PC, align 8
  %1205 = add i64 %1204, 5
  store i64 %1205, i64* %PC, align 8
  %1206 = inttoptr i64 %1203 to i64*
  %1207 = load i64, i64* %1206, align 8
  store i64 %1207, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1208 = add i64 %1202, -24
  %1209 = add i64 %1204, 9
  store i64 %1209, i64* %PC, align 8
  %1210 = inttoptr i64 %1208 to i64*
  %1211 = load i64, i64* %1210, align 8
  store i64 %1211, i64* %RCX, align 8, !tbaa !2428
  %1212 = add i64 %1202, -32
  %1213 = add i64 %1204, 13
  store i64 %1213, i64* %PC, align 8
  %1214 = inttoptr i64 %1212 to i32*
  %1215 = load i32, i32* %1214, align 4
  %1216 = sext i32 %1215 to i64
  store i64 %1216, i64* %RDX, align 8, !tbaa !2428
  %1217 = shl nsw i64 %1216, 3
  %1218 = add i64 %1217, %1211
  %1219 = add i64 %1204, 18
  store i64 %1219, i64* %PC, align 8
  %1220 = inttoptr i64 %1218 to i64*
  store i64 %1207, i64* %1220, align 8
  %1221 = load i64, i64* %RBP, align 8
  %1222 = add i64 %1221, -88
  %1223 = load i64, i64* %PC, align 8
  %1224 = add i64 %1223, 5
  store i64 %1224, i64* %PC, align 8
  %1225 = inttoptr i64 %1222 to i64*
  %1226 = load i64, i64* %1225, align 8
  store i64 %1226, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1227 = add i64 %1221, -24
  %1228 = add i64 %1223, 9
  store i64 %1228, i64* %PC, align 8
  %1229 = inttoptr i64 %1227 to i64*
  %1230 = load i64, i64* %1229, align 8
  store i64 %1230, i64* %RCX, align 8, !tbaa !2428
  %1231 = add i64 %1221, -32
  %1232 = add i64 %1223, 12
  store i64 %1232, i64* %PC, align 8
  %1233 = inttoptr i64 %1231 to i32*
  %1234 = load i32, i32* %1233, align 4
  %1235 = add i32 %1234, 1
  %1236 = zext i32 %1235 to i64
  store i64 %1236, i64* %RAX, align 8, !tbaa !2428
  %1237 = icmp eq i32 %1234, -1
  %1238 = icmp eq i32 %1235, 0
  %1239 = or i1 %1237, %1238
  %1240 = zext i1 %1239 to i8
  store i8 %1240, i8* %51, align 1, !tbaa !2433
  %1241 = and i32 %1235, 255
  %1242 = tail call i32 @llvm.ctpop.i32(i32 %1241) #11
  %1243 = trunc i32 %1242 to i8
  %1244 = and i8 %1243, 1
  %1245 = xor i8 %1244, 1
  store i8 %1245, i8* %52, align 1, !tbaa !2447
  %1246 = xor i32 %1234, %1235
  %1247 = lshr i32 %1246, 4
  %1248 = trunc i32 %1247 to i8
  %1249 = and i8 %1248, 1
  store i8 %1249, i8* %53, align 1, !tbaa !2451
  %1250 = zext i1 %1238 to i8
  store i8 %1250, i8* %54, align 1, !tbaa !2448
  %1251 = lshr i32 %1235, 31
  %1252 = trunc i32 %1251 to i8
  store i8 %1252, i8* %55, align 1, !tbaa !2449
  %1253 = lshr i32 %1234, 31
  %1254 = xor i32 %1251, %1253
  %1255 = add nuw nsw i32 %1254, %1251
  %1256 = icmp eq i32 %1255, 2
  %1257 = zext i1 %1256 to i8
  store i8 %1257, i8* %56, align 1, !tbaa !2450
  %1258 = sext i32 %1235 to i64
  store i64 %1258, i64* %RDX, align 8, !tbaa !2428
  %1259 = shl nsw i64 %1258, 3
  %1260 = add i64 %1259, %1230
  %1261 = add i64 %1223, 23
  store i64 %1261, i64* %PC, align 8
  %1262 = inttoptr i64 %1260 to i64*
  store i64 %1226, i64* %1262, align 8
  %1263 = load i64, i64* %RBP, align 8
  %1264 = add i64 %1263, -64
  %1265 = load i64, i64* %PC, align 8
  %1266 = add i64 %1265, 5
  store i64 %1266, i64* %PC, align 8
  %1267 = inttoptr i64 %1264 to i64*
  %1268 = load i64, i64* %1267, align 8
  store i64 %1268, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1269 = add i64 %1263, -24
  %1270 = add i64 %1265, 9
  store i64 %1270, i64* %PC, align 8
  %1271 = inttoptr i64 %1269 to i64*
  %1272 = load i64, i64* %1271, align 8
  store i64 %1272, i64* %RCX, align 8, !tbaa !2428
  %1273 = add i64 %1263, -40
  %1274 = add i64 %1265, 13
  store i64 %1274, i64* %PC, align 8
  %1275 = inttoptr i64 %1273 to i32*
  %1276 = load i32, i32* %1275, align 4
  %1277 = sext i32 %1276 to i64
  store i64 %1277, i64* %RDX, align 8, !tbaa !2428
  %1278 = shl nsw i64 %1277, 3
  %1279 = add i64 %1278, %1272
  %1280 = add i64 %1265, 18
  store i64 %1280, i64* %PC, align 8
  %1281 = inttoptr i64 %1279 to i64*
  store i64 %1268, i64* %1281, align 8
  %1282 = load i64, i64* %RBP, align 8
  %1283 = add i64 %1282, -72
  %1284 = load i64, i64* %PC, align 8
  %1285 = add i64 %1284, 5
  store i64 %1285, i64* %PC, align 8
  %1286 = inttoptr i64 %1283 to i64*
  %1287 = load i64, i64* %1286, align 8
  store i64 %1287, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1288 = add i64 %1282, -24
  %1289 = add i64 %1284, 9
  store i64 %1289, i64* %PC, align 8
  %1290 = inttoptr i64 %1288 to i64*
  %1291 = load i64, i64* %1290, align 8
  store i64 %1291, i64* %RCX, align 8, !tbaa !2428
  %1292 = add i64 %1282, -40
  %1293 = add i64 %1284, 12
  store i64 %1293, i64* %PC, align 8
  %1294 = inttoptr i64 %1292 to i32*
  %1295 = load i32, i32* %1294, align 4
  %1296 = add i32 %1295, 1
  %1297 = zext i32 %1296 to i64
  store i64 %1297, i64* %RAX, align 8, !tbaa !2428
  %1298 = icmp eq i32 %1295, -1
  %1299 = icmp eq i32 %1296, 0
  %1300 = or i1 %1298, %1299
  %1301 = zext i1 %1300 to i8
  store i8 %1301, i8* %51, align 1, !tbaa !2433
  %1302 = and i32 %1296, 255
  %1303 = tail call i32 @llvm.ctpop.i32(i32 %1302) #11
  %1304 = trunc i32 %1303 to i8
  %1305 = and i8 %1304, 1
  %1306 = xor i8 %1305, 1
  store i8 %1306, i8* %52, align 1, !tbaa !2447
  %1307 = xor i32 %1295, %1296
  %1308 = lshr i32 %1307, 4
  %1309 = trunc i32 %1308 to i8
  %1310 = and i8 %1309, 1
  store i8 %1310, i8* %53, align 1, !tbaa !2451
  %1311 = zext i1 %1299 to i8
  store i8 %1311, i8* %54, align 1, !tbaa !2448
  %1312 = lshr i32 %1296, 31
  %1313 = trunc i32 %1312 to i8
  store i8 %1313, i8* %55, align 1, !tbaa !2449
  %1314 = lshr i32 %1295, 31
  %1315 = xor i32 %1312, %1314
  %1316 = add nuw nsw i32 %1315, %1312
  %1317 = icmp eq i32 %1316, 2
  %1318 = zext i1 %1317 to i8
  store i8 %1318, i8* %56, align 1, !tbaa !2450
  %1319 = sext i32 %1296 to i64
  store i64 %1319, i64* %RDX, align 8, !tbaa !2428
  %1320 = shl nsw i64 %1319, 3
  %1321 = add i64 %1320, %1291
  %1322 = add i64 %1284, 23
  store i64 %1322, i64* %PC, align 8
  %1323 = inttoptr i64 %1321 to i64*
  store i64 %1287, i64* %1323, align 8
  %1324 = load i64, i64* %RBP, align 8
  %1325 = add i64 %1324, -52
  %1326 = load i64, i64* %PC, align 8
  %1327 = add i64 %1326, 3
  store i64 %1327, i64* %PC, align 8
  %1328 = inttoptr i64 %1325 to i32*
  %1329 = load i32, i32* %1328, align 4
  %1330 = zext i32 %1329 to i64
  store i64 %1330, i64* %RAX, align 8, !tbaa !2428
  %1331 = add i64 %1324, -32
  %1332 = add i64 %1326, 6
  store i64 %1332, i64* %PC, align 8
  %1333 = inttoptr i64 %1331 to i32*
  %1334 = load i32, i32* %1333, align 4
  %1335 = add i32 %1334, %1329
  %1336 = zext i32 %1335 to i64
  store i64 %1336, i64* %RAX, align 8, !tbaa !2428
  %1337 = icmp ult i32 %1335, %1329
  %1338 = icmp ult i32 %1335, %1334
  %1339 = or i1 %1337, %1338
  %1340 = zext i1 %1339 to i8
  store i8 %1340, i8* %51, align 1, !tbaa !2433
  %1341 = and i32 %1335, 255
  %1342 = tail call i32 @llvm.ctpop.i32(i32 %1341) #11
  %1343 = trunc i32 %1342 to i8
  %1344 = and i8 %1343, 1
  %1345 = xor i8 %1344, 1
  store i8 %1345, i8* %52, align 1, !tbaa !2447
  %1346 = xor i32 %1334, %1329
  %1347 = xor i32 %1346, %1335
  %1348 = lshr i32 %1347, 4
  %1349 = trunc i32 %1348 to i8
  %1350 = and i8 %1349, 1
  store i8 %1350, i8* %53, align 1, !tbaa !2451
  %1351 = icmp eq i32 %1335, 0
  %1352 = zext i1 %1351 to i8
  store i8 %1352, i8* %54, align 1, !tbaa !2448
  %1353 = lshr i32 %1335, 31
  %1354 = trunc i32 %1353 to i8
  store i8 %1354, i8* %55, align 1, !tbaa !2449
  %1355 = lshr i32 %1329, 31
  %1356 = lshr i32 %1334, 31
  %1357 = xor i32 %1353, %1355
  %1358 = xor i32 %1353, %1356
  %1359 = add nuw nsw i32 %1357, %1358
  %1360 = icmp eq i32 %1359, 2
  %1361 = zext i1 %1360 to i8
  store i8 %1361, i8* %56, align 1, !tbaa !2450
  %1362 = add i64 %1326, 9
  store i64 %1362, i64* %PC, align 8
  store i32 %1335, i32* %1333, align 4
  %1363 = load i64, i64* %RBP, align 8
  %1364 = add i64 %1363, -52
  %1365 = load i64, i64* %PC, align 8
  %1366 = add i64 %1365, 3
  store i64 %1366, i64* %PC, align 8
  %1367 = inttoptr i64 %1364 to i32*
  %1368 = load i32, i32* %1367, align 4
  %1369 = zext i32 %1368 to i64
  store i64 %1369, i64* %RAX, align 8, !tbaa !2428
  %1370 = add i64 %1363, -40
  %1371 = add i64 %1365, 6
  store i64 %1371, i64* %PC, align 8
  %1372 = inttoptr i64 %1370 to i32*
  %1373 = load i32, i32* %1372, align 4
  %1374 = add i32 %1373, %1368
  %1375 = zext i32 %1374 to i64
  store i64 %1375, i64* %RAX, align 8, !tbaa !2428
  %1376 = icmp ult i32 %1374, %1368
  %1377 = icmp ult i32 %1374, %1373
  %1378 = or i1 %1376, %1377
  %1379 = zext i1 %1378 to i8
  store i8 %1379, i8* %51, align 1, !tbaa !2433
  %1380 = and i32 %1374, 255
  %1381 = tail call i32 @llvm.ctpop.i32(i32 %1380) #11
  %1382 = trunc i32 %1381 to i8
  %1383 = and i8 %1382, 1
  %1384 = xor i8 %1383, 1
  store i8 %1384, i8* %52, align 1, !tbaa !2447
  %1385 = xor i32 %1373, %1368
  %1386 = xor i32 %1385, %1374
  %1387 = lshr i32 %1386, 4
  %1388 = trunc i32 %1387 to i8
  %1389 = and i8 %1388, 1
  store i8 %1389, i8* %53, align 1, !tbaa !2451
  %1390 = icmp eq i32 %1374, 0
  %1391 = zext i1 %1390 to i8
  store i8 %1391, i8* %54, align 1, !tbaa !2448
  %1392 = lshr i32 %1374, 31
  %1393 = trunc i32 %1392 to i8
  store i8 %1393, i8* %55, align 1, !tbaa !2449
  %1394 = lshr i32 %1368, 31
  %1395 = lshr i32 %1373, 31
  %1396 = xor i32 %1392, %1394
  %1397 = xor i32 %1392, %1395
  %1398 = add nuw nsw i32 %1396, %1397
  %1399 = icmp eq i32 %1398, 2
  %1400 = zext i1 %1399 to i8
  store i8 %1400, i8* %56, align 1, !tbaa !2450
  %1401 = add i64 %1365, 9
  store i64 %1401, i64* %PC, align 8
  store i32 %1374, i32* %1372, align 4
  %1402 = load i64, i64* %RBP, align 8
  %1403 = add i64 %1402, -24
  %1404 = load i64, i64* %PC, align 8
  %1405 = add i64 %1404, 4
  store i64 %1405, i64* %PC, align 8
  %1406 = inttoptr i64 %1403 to i64*
  %1407 = load i64, i64* %1406, align 8
  store i64 %1407, i64* %RCX, align 8, !tbaa !2428
  %1408 = add i64 %1402, -32
  %1409 = add i64 %1404, 8
  store i64 %1409, i64* %PC, align 8
  %1410 = inttoptr i64 %1408 to i32*
  %1411 = load i32, i32* %1410, align 4
  %1412 = sext i32 %1411 to i64
  store i64 %1412, i64* %RDX, align 8, !tbaa !2428
  %1413 = shl nsw i64 %1412, 3
  %1414 = add i64 %1413, %1407
  %1415 = add i64 %1404, 13
  store i64 %1415, i64* %PC, align 8
  %1416 = inttoptr i64 %1414 to i64*
  %1417 = load i64, i64* %1416, align 8
  store i64 %1417, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1418 = add i64 %1402, -64
  %1419 = add i64 %1404, 18
  store i64 %1419, i64* %PC, align 8
  %1420 = inttoptr i64 %1418 to i64*
  store i64 %1417, i64* %1420, align 8
  %1421 = load i64, i64* %RBP, align 8
  %1422 = add i64 %1421, -24
  %1423 = load i64, i64* %PC, align 8
  %1424 = add i64 %1423, 4
  store i64 %1424, i64* %PC, align 8
  %1425 = inttoptr i64 %1422 to i64*
  %1426 = load i64, i64* %1425, align 8
  store i64 %1426, i64* %RCX, align 8, !tbaa !2428
  %1427 = add i64 %1421, -32
  %1428 = add i64 %1423, 7
  store i64 %1428, i64* %PC, align 8
  %1429 = inttoptr i64 %1427 to i32*
  %1430 = load i32, i32* %1429, align 4
  %1431 = add i32 %1430, 1
  %1432 = zext i32 %1431 to i64
  store i64 %1432, i64* %RAX, align 8, !tbaa !2428
  %1433 = icmp eq i32 %1430, -1
  %1434 = icmp eq i32 %1431, 0
  %1435 = or i1 %1433, %1434
  %1436 = zext i1 %1435 to i8
  store i8 %1436, i8* %51, align 1, !tbaa !2433
  %1437 = and i32 %1431, 255
  %1438 = tail call i32 @llvm.ctpop.i32(i32 %1437) #11
  %1439 = trunc i32 %1438 to i8
  %1440 = and i8 %1439, 1
  %1441 = xor i8 %1440, 1
  store i8 %1441, i8* %52, align 1, !tbaa !2447
  %1442 = xor i32 %1430, %1431
  %1443 = lshr i32 %1442, 4
  %1444 = trunc i32 %1443 to i8
  %1445 = and i8 %1444, 1
  store i8 %1445, i8* %53, align 1, !tbaa !2451
  %1446 = zext i1 %1434 to i8
  store i8 %1446, i8* %54, align 1, !tbaa !2448
  %1447 = lshr i32 %1431, 31
  %1448 = trunc i32 %1447 to i8
  store i8 %1448, i8* %55, align 1, !tbaa !2449
  %1449 = lshr i32 %1430, 31
  %1450 = xor i32 %1447, %1449
  %1451 = add nuw nsw i32 %1450, %1447
  %1452 = icmp eq i32 %1451, 2
  %1453 = zext i1 %1452 to i8
  store i8 %1453, i8* %56, align 1, !tbaa !2450
  %1454 = sext i32 %1431 to i64
  store i64 %1454, i64* %RDX, align 8, !tbaa !2428
  %1455 = shl nsw i64 %1454, 3
  %1456 = add i64 %1455, %1426
  %1457 = add i64 %1423, 18
  store i64 %1457, i64* %PC, align 8
  %1458 = inttoptr i64 %1456 to i64*
  %1459 = load i64, i64* %1458, align 8
  store i64 %1459, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1460 = add i64 %1421, -72
  %1461 = add i64 %1423, 23
  store i64 %1461, i64* %PC, align 8
  %1462 = inttoptr i64 %1460 to i64*
  store i64 %1459, i64* %1462, align 8
  %1463 = load i64, i64* %RBP, align 8
  %1464 = add i64 %1463, -24
  %1465 = load i64, i64* %PC, align 8
  %1466 = add i64 %1465, 4
  store i64 %1466, i64* %PC, align 8
  %1467 = inttoptr i64 %1464 to i64*
  %1468 = load i64, i64* %1467, align 8
  store i64 %1468, i64* %RCX, align 8, !tbaa !2428
  %1469 = add i64 %1463, -40
  %1470 = add i64 %1465, 8
  store i64 %1470, i64* %PC, align 8
  %1471 = inttoptr i64 %1469 to i32*
  %1472 = load i32, i32* %1471, align 4
  %1473 = sext i32 %1472 to i64
  store i64 %1473, i64* %RDX, align 8, !tbaa !2428
  %1474 = shl nsw i64 %1473, 3
  %1475 = add i64 %1474, %1468
  %1476 = add i64 %1465, 13
  store i64 %1476, i64* %PC, align 8
  %1477 = inttoptr i64 %1475 to i64*
  %1478 = load i64, i64* %1477, align 8
  store i64 %1478, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1479 = add i64 %1463, -80
  %1480 = add i64 %1465, 18
  store i64 %1480, i64* %PC, align 8
  %1481 = inttoptr i64 %1479 to i64*
  store i64 %1478, i64* %1481, align 8
  %1482 = load i64, i64* %RBP, align 8
  %1483 = add i64 %1482, -24
  %1484 = load i64, i64* %PC, align 8
  %1485 = add i64 %1484, 4
  store i64 %1485, i64* %PC, align 8
  %1486 = inttoptr i64 %1483 to i64*
  %1487 = load i64, i64* %1486, align 8
  store i64 %1487, i64* %RCX, align 8, !tbaa !2428
  %1488 = add i64 %1482, -40
  %1489 = add i64 %1484, 7
  store i64 %1489, i64* %PC, align 8
  %1490 = inttoptr i64 %1488 to i32*
  %1491 = load i32, i32* %1490, align 4
  %1492 = add i32 %1491, 1
  %1493 = zext i32 %1492 to i64
  store i64 %1493, i64* %RAX, align 8, !tbaa !2428
  %1494 = icmp eq i32 %1491, -1
  %1495 = icmp eq i32 %1492, 0
  %1496 = or i1 %1494, %1495
  %1497 = zext i1 %1496 to i8
  store i8 %1497, i8* %51, align 1, !tbaa !2433
  %1498 = and i32 %1492, 255
  %1499 = tail call i32 @llvm.ctpop.i32(i32 %1498) #11
  %1500 = trunc i32 %1499 to i8
  %1501 = and i8 %1500, 1
  %1502 = xor i8 %1501, 1
  store i8 %1502, i8* %52, align 1, !tbaa !2447
  %1503 = xor i32 %1491, %1492
  %1504 = lshr i32 %1503, 4
  %1505 = trunc i32 %1504 to i8
  %1506 = and i8 %1505, 1
  store i8 %1506, i8* %53, align 1, !tbaa !2451
  %1507 = zext i1 %1495 to i8
  store i8 %1507, i8* %54, align 1, !tbaa !2448
  %1508 = lshr i32 %1492, 31
  %1509 = trunc i32 %1508 to i8
  store i8 %1509, i8* %55, align 1, !tbaa !2449
  %1510 = lshr i32 %1491, 31
  %1511 = xor i32 %1508, %1510
  %1512 = add nuw nsw i32 %1511, %1508
  %1513 = icmp eq i32 %1512, 2
  %1514 = zext i1 %1513 to i8
  store i8 %1514, i8* %56, align 1, !tbaa !2450
  %1515 = sext i32 %1492 to i64
  store i64 %1515, i64* %RDX, align 8, !tbaa !2428
  %1516 = shl nsw i64 %1515, 3
  %1517 = add i64 %1516, %1487
  %1518 = add i64 %1484, 18
  store i64 %1518, i64* %PC, align 8
  %1519 = inttoptr i64 %1517 to i64*
  %1520 = load i64, i64* %1519, align 8
  store i64 %1520, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1521 = add i64 %1482, -88
  %1522 = add i64 %1484, 23
  store i64 %1522, i64* %PC, align 8
  %1523 = inttoptr i64 %1521 to i64*
  store i64 %1520, i64* %1523, align 8
  %1524 = load i64, i64* %RBP, align 8
  %1525 = add i64 %1524, -80
  %1526 = load i64, i64* %PC, align 8
  %1527 = add i64 %1526, 5
  store i64 %1527, i64* %PC, align 8
  %1528 = inttoptr i64 %1525 to i64*
  %1529 = load i64, i64* %1528, align 8
  store i64 %1529, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1530 = add i64 %1524, -24
  %1531 = add i64 %1526, 9
  store i64 %1531, i64* %PC, align 8
  %1532 = inttoptr i64 %1530 to i64*
  %1533 = load i64, i64* %1532, align 8
  store i64 %1533, i64* %RCX, align 8, !tbaa !2428
  %1534 = add i64 %1524, -32
  %1535 = add i64 %1526, 13
  store i64 %1535, i64* %PC, align 8
  %1536 = inttoptr i64 %1534 to i32*
  %1537 = load i32, i32* %1536, align 4
  %1538 = sext i32 %1537 to i64
  store i64 %1538, i64* %RDX, align 8, !tbaa !2428
  %1539 = shl nsw i64 %1538, 3
  %1540 = add i64 %1539, %1533
  %1541 = add i64 %1526, 18
  store i64 %1541, i64* %PC, align 8
  %1542 = inttoptr i64 %1540 to i64*
  store i64 %1529, i64* %1542, align 8
  %1543 = load i64, i64* %RBP, align 8
  %1544 = add i64 %1543, -88
  %1545 = load i64, i64* %PC, align 8
  %1546 = add i64 %1545, 5
  store i64 %1546, i64* %PC, align 8
  %1547 = inttoptr i64 %1544 to i64*
  %1548 = load i64, i64* %1547, align 8
  store i64 %1548, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1549 = add i64 %1543, -24
  %1550 = add i64 %1545, 9
  store i64 %1550, i64* %PC, align 8
  %1551 = inttoptr i64 %1549 to i64*
  %1552 = load i64, i64* %1551, align 8
  store i64 %1552, i64* %RCX, align 8, !tbaa !2428
  %1553 = add i64 %1543, -32
  %1554 = add i64 %1545, 12
  store i64 %1554, i64* %PC, align 8
  %1555 = inttoptr i64 %1553 to i32*
  %1556 = load i32, i32* %1555, align 4
  %1557 = add i32 %1556, 1
  %1558 = zext i32 %1557 to i64
  store i64 %1558, i64* %RAX, align 8, !tbaa !2428
  %1559 = icmp eq i32 %1556, -1
  %1560 = icmp eq i32 %1557, 0
  %1561 = or i1 %1559, %1560
  %1562 = zext i1 %1561 to i8
  store i8 %1562, i8* %51, align 1, !tbaa !2433
  %1563 = and i32 %1557, 255
  %1564 = tail call i32 @llvm.ctpop.i32(i32 %1563) #11
  %1565 = trunc i32 %1564 to i8
  %1566 = and i8 %1565, 1
  %1567 = xor i8 %1566, 1
  store i8 %1567, i8* %52, align 1, !tbaa !2447
  %1568 = xor i32 %1556, %1557
  %1569 = lshr i32 %1568, 4
  %1570 = trunc i32 %1569 to i8
  %1571 = and i8 %1570, 1
  store i8 %1571, i8* %53, align 1, !tbaa !2451
  %1572 = zext i1 %1560 to i8
  store i8 %1572, i8* %54, align 1, !tbaa !2448
  %1573 = lshr i32 %1557, 31
  %1574 = trunc i32 %1573 to i8
  store i8 %1574, i8* %55, align 1, !tbaa !2449
  %1575 = lshr i32 %1556, 31
  %1576 = xor i32 %1573, %1575
  %1577 = add nuw nsw i32 %1576, %1573
  %1578 = icmp eq i32 %1577, 2
  %1579 = zext i1 %1578 to i8
  store i8 %1579, i8* %56, align 1, !tbaa !2450
  %1580 = sext i32 %1557 to i64
  store i64 %1580, i64* %RDX, align 8, !tbaa !2428
  %1581 = shl nsw i64 %1580, 3
  %1582 = add i64 %1581, %1552
  %1583 = add i64 %1545, 23
  store i64 %1583, i64* %PC, align 8
  %1584 = inttoptr i64 %1582 to i64*
  store i64 %1548, i64* %1584, align 8
  %1585 = load i64, i64* %RBP, align 8
  %1586 = add i64 %1585, -64
  %1587 = load i64, i64* %PC, align 8
  %1588 = add i64 %1587, 5
  store i64 %1588, i64* %PC, align 8
  %1589 = inttoptr i64 %1586 to i64*
  %1590 = load i64, i64* %1589, align 8
  store i64 %1590, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1591 = add i64 %1585, -24
  %1592 = add i64 %1587, 9
  store i64 %1592, i64* %PC, align 8
  %1593 = inttoptr i64 %1591 to i64*
  %1594 = load i64, i64* %1593, align 8
  store i64 %1594, i64* %RCX, align 8, !tbaa !2428
  %1595 = add i64 %1585, -40
  %1596 = add i64 %1587, 13
  store i64 %1596, i64* %PC, align 8
  %1597 = inttoptr i64 %1595 to i32*
  %1598 = load i32, i32* %1597, align 4
  %1599 = sext i32 %1598 to i64
  store i64 %1599, i64* %RDX, align 8, !tbaa !2428
  %1600 = shl nsw i64 %1599, 3
  %1601 = add i64 %1600, %1594
  %1602 = add i64 %1587, 18
  store i64 %1602, i64* %PC, align 8
  %1603 = inttoptr i64 %1601 to i64*
  store i64 %1590, i64* %1603, align 8
  %1604 = load i64, i64* %RBP, align 8
  %1605 = add i64 %1604, -72
  %1606 = load i64, i64* %PC, align 8
  %1607 = add i64 %1606, 5
  store i64 %1607, i64* %PC, align 8
  %1608 = inttoptr i64 %1605 to i64*
  %1609 = load i64, i64* %1608, align 8
  store i64 %1609, i64* %1095, align 1, !tbaa !2452
  store double 0.000000e+00, double* %314, align 1, !tbaa !2452
  %1610 = add i64 %1604, -24
  %1611 = add i64 %1606, 9
  store i64 %1611, i64* %PC, align 8
  %1612 = inttoptr i64 %1610 to i64*
  %1613 = load i64, i64* %1612, align 8
  store i64 %1613, i64* %RCX, align 8, !tbaa !2428
  %1614 = add i64 %1604, -40
  %1615 = add i64 %1606, 12
  store i64 %1615, i64* %PC, align 8
  %1616 = inttoptr i64 %1614 to i32*
  %1617 = load i32, i32* %1616, align 4
  %1618 = add i32 %1617, 1
  %1619 = zext i32 %1618 to i64
  store i64 %1619, i64* %RAX, align 8, !tbaa !2428
  %1620 = icmp eq i32 %1617, -1
  %1621 = icmp eq i32 %1618, 0
  %1622 = or i1 %1620, %1621
  %1623 = zext i1 %1622 to i8
  store i8 %1623, i8* %51, align 1, !tbaa !2433
  %1624 = and i32 %1618, 255
  %1625 = tail call i32 @llvm.ctpop.i32(i32 %1624) #11
  %1626 = trunc i32 %1625 to i8
  %1627 = and i8 %1626, 1
  %1628 = xor i8 %1627, 1
  store i8 %1628, i8* %52, align 1, !tbaa !2447
  %1629 = xor i32 %1617, %1618
  %1630 = lshr i32 %1629, 4
  %1631 = trunc i32 %1630 to i8
  %1632 = and i8 %1631, 1
  store i8 %1632, i8* %53, align 1, !tbaa !2451
  %1633 = zext i1 %1621 to i8
  store i8 %1633, i8* %54, align 1, !tbaa !2448
  %1634 = lshr i32 %1618, 31
  %1635 = trunc i32 %1634 to i8
  store i8 %1635, i8* %55, align 1, !tbaa !2449
  %1636 = lshr i32 %1617, 31
  %1637 = xor i32 %1634, %1636
  %1638 = add nuw nsw i32 %1637, %1634
  %1639 = icmp eq i32 %1638, 2
  %1640 = zext i1 %1639 to i8
  store i8 %1640, i8* %56, align 1, !tbaa !2450
  %1641 = sext i32 %1618 to i64
  store i64 %1641, i64* %RDX, align 8, !tbaa !2428
  %1642 = shl nsw i64 %1641, 3
  %1643 = add i64 %1642, %1613
  %1644 = add i64 %1606, 23
  store i64 %1644, i64* %PC, align 8
  %1645 = inttoptr i64 %1643 to i64*
  store i64 %1609, i64* %1645, align 8
  %1646 = load i64, i64* %RBP, align 8
  %1647 = add i64 %1646, -28
  %1648 = load i64, i64* %PC, align 8
  %1649 = add i64 %1648, 3
  store i64 %1649, i64* %PC, align 8
  %1650 = inttoptr i64 %1647 to i32*
  %1651 = load i32, i32* %1650, align 4
  %1652 = add i32 %1651, 1
  %1653 = zext i32 %1652 to i64
  store i64 %1653, i64* %RAX, align 8, !tbaa !2428
  %1654 = icmp eq i32 %1651, -1
  %1655 = icmp eq i32 %1652, 0
  %1656 = or i1 %1654, %1655
  %1657 = zext i1 %1656 to i8
  store i8 %1657, i8* %51, align 1, !tbaa !2433
  %1658 = and i32 %1652, 255
  %1659 = tail call i32 @llvm.ctpop.i32(i32 %1658) #11
  %1660 = trunc i32 %1659 to i8
  %1661 = and i8 %1660, 1
  %1662 = xor i8 %1661, 1
  store i8 %1662, i8* %52, align 1, !tbaa !2447
  %1663 = xor i32 %1651, %1652
  %1664 = lshr i32 %1663, 4
  %1665 = trunc i32 %1664 to i8
  %1666 = and i8 %1665, 1
  store i8 %1666, i8* %53, align 1, !tbaa !2451
  %1667 = zext i1 %1655 to i8
  store i8 %1667, i8* %54, align 1, !tbaa !2448
  %1668 = lshr i32 %1652, 31
  %1669 = trunc i32 %1668 to i8
  store i8 %1669, i8* %55, align 1, !tbaa !2449
  %1670 = lshr i32 %1651, 31
  %1671 = xor i32 %1668, %1670
  %1672 = add nuw nsw i32 %1671, %1668
  %1673 = icmp eq i32 %1672, 2
  %1674 = zext i1 %1673 to i8
  store i8 %1674, i8* %56, align 1, !tbaa !2450
  %1675 = add i64 %1648, 9
  store i64 %1675, i64* %PC, align 8
  store i32 %1652, i32* %1650, align 4
  %1676 = load i64, i64* %PC, align 8
  %1677 = add i64 %1676, -407
  store i64 %1677, i64* %PC, align 8, !tbaa !2428
  br label %block_40167e

block_401289:                                     ; preds = %block_40127d
  %1678 = load i32, i32* %61, align 4
  %1679 = shl i32 %1678, 1
  %1680 = icmp slt i32 %1678, 0
  %1681 = icmp slt i32 %1679, 0
  %1682 = xor i1 %1680, %1681
  %1683 = zext i32 %1679 to i64
  store i64 %1683, i64* %RAX, align 8, !tbaa !2428
  %.lobit15 = lshr i32 %1678, 31
  %1684 = trunc i32 %.lobit15 to i8
  store i8 %1684, i8* %51, align 1, !tbaa !2432
  %1685 = and i32 %1679, 254
  %1686 = tail call i32 @llvm.ctpop.i32(i32 %1685) #11
  %1687 = trunc i32 %1686 to i8
  %1688 = and i8 %1687, 1
  %1689 = xor i8 %1688, 1
  store i8 %1689, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %1690 = icmp eq i32 %1679, 0
  %1691 = zext i1 %1690 to i8
  store i8 %1691, i8* %54, align 1, !tbaa !2432
  %1692 = lshr i32 %1678, 30
  %1693 = and i32 %1692, 1
  %1694 = trunc i32 %1693 to i8
  store i8 %1694, i8* %55, align 1, !tbaa !2432
  %1695 = zext i1 %1682 to i8
  store i8 %1695, i8* %56, align 1, !tbaa !2432
  %1696 = add i64 %58, -16
  %1697 = add i64 %94, 10
  store i64 %1697, i64* %PC, align 8
  %1698 = inttoptr i64 %1696 to i64*
  %1699 = load i64, i64* %1698, align 8
  store i64 %1699, i64* %RCX, align 8, !tbaa !2428
  %1700 = add i64 %94, 14
  store i64 %1700, i64* %PC, align 8
  %1701 = load i32, i32* %66, align 4
  %1702 = sext i32 %1701 to i64
  store i64 %1702, i64* %RDX, align 8, !tbaa !2428
  %1703 = shl nsw i64 %1702, 2
  %1704 = add i64 %1703, %1699
  %1705 = add i64 %94, 17
  store i64 %1705, i64* %PC, align 8
  %1706 = inttoptr i64 %1704 to i32*
  %1707 = load i32, i32* %1706, align 4
  %1708 = add i32 %1707, %1679
  %1709 = zext i32 %1708 to i64
  store i64 %1709, i64* %RAX, align 8, !tbaa !2428
  %1710 = icmp ult i32 %1708, %1679
  %1711 = icmp ult i32 %1708, %1707
  %1712 = or i1 %1710, %1711
  %1713 = zext i1 %1712 to i8
  store i8 %1713, i8* %51, align 1, !tbaa !2433
  %1714 = and i32 %1708, 255
  %1715 = tail call i32 @llvm.ctpop.i32(i32 %1714) #11
  %1716 = trunc i32 %1715 to i8
  %1717 = and i8 %1716, 1
  %1718 = xor i8 %1717, 1
  store i8 %1718, i8* %52, align 1, !tbaa !2447
  %1719 = xor i32 %1707, %1679
  %1720 = xor i32 %1719, %1708
  %1721 = lshr i32 %1720, 4
  %1722 = trunc i32 %1721 to i8
  %1723 = and i8 %1722, 1
  store i8 %1723, i8* %53, align 1, !tbaa !2451
  %1724 = icmp eq i32 %1708, 0
  %1725 = zext i1 %1724 to i8
  store i8 %1725, i8* %54, align 1, !tbaa !2448
  %1726 = lshr i32 %1708, 31
  %1727 = trunc i32 %1726 to i8
  store i8 %1727, i8* %55, align 1, !tbaa !2449
  %1728 = lshr i32 %1707, 31
  %1729 = xor i32 %1726, %1693
  %1730 = xor i32 %1726, %1728
  %1731 = add nuw nsw i32 %1729, %1730
  %1732 = icmp eq i32 %1731, 2
  %1733 = zext i1 %1732 to i8
  store i8 %1733, i8* %56, align 1, !tbaa !2450
  %1734 = add i64 %58, -32
  %1735 = add i64 %94, 20
  store i64 %1735, i64* %PC, align 8
  %1736 = inttoptr i64 %1734 to i32*
  store i32 %1708, i32* %1736, align 4
  %1737 = load i64, i64* %RBP, align 8
  %1738 = add i64 %1737, -36
  %1739 = load i64, i64* %PC, align 8
  %1740 = add i64 %1739, 3
  store i64 %1740, i64* %PC, align 8
  %1741 = inttoptr i64 %1738 to i32*
  %1742 = load i32, i32* %1741, align 4
  %1743 = shl i32 %1742, 1
  %1744 = icmp slt i32 %1742, 0
  %1745 = icmp slt i32 %1743, 0
  %1746 = xor i1 %1744, %1745
  %1747 = zext i32 %1743 to i64
  store i64 %1747, i64* %RAX, align 8, !tbaa !2428
  %.lobit16 = lshr i32 %1742, 31
  %1748 = trunc i32 %.lobit16 to i8
  store i8 %1748, i8* %51, align 1, !tbaa !2432
  %1749 = and i32 %1743, 254
  %1750 = tail call i32 @llvm.ctpop.i32(i32 %1749) #11
  %1751 = trunc i32 %1750 to i8
  %1752 = and i8 %1751, 1
  %1753 = xor i8 %1752, 1
  store i8 %1753, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %1754 = icmp eq i32 %1743, 0
  %1755 = zext i1 %1754 to i8
  store i8 %1755, i8* %54, align 1, !tbaa !2432
  %1756 = lshr i32 %1742, 30
  %1757 = and i32 %1756, 1
  %1758 = trunc i32 %1757 to i8
  store i8 %1758, i8* %55, align 1, !tbaa !2432
  %1759 = zext i1 %1746 to i8
  store i8 %1759, i8* %56, align 1, !tbaa !2432
  %1760 = add i64 %1737, -16
  %1761 = add i64 %1739, 10
  store i64 %1761, i64* %PC, align 8
  %1762 = inttoptr i64 %1760 to i64*
  %1763 = load i64, i64* %1762, align 8
  store i64 %1763, i64* %RCX, align 8, !tbaa !2428
  %1764 = add i64 %1737, -28
  %1765 = add i64 %1739, 14
  store i64 %1765, i64* %PC, align 8
  %1766 = inttoptr i64 %1764 to i32*
  %1767 = load i32, i32* %1766, align 4
  %1768 = sext i32 %1767 to i64
  store i64 %1768, i64* %RDX, align 8, !tbaa !2428
  %1769 = shl nsw i64 %1768, 2
  %1770 = add i64 %1769, %1763
  %1771 = add i64 %1739, 17
  store i64 %1771, i64* %PC, align 8
  %1772 = inttoptr i64 %1770 to i32*
  %1773 = load i32, i32* %1772, align 4
  %1774 = add i32 %1773, %1743
  %1775 = zext i32 %1774 to i64
  store i64 %1775, i64* %RAX, align 8, !tbaa !2428
  %1776 = icmp ult i32 %1774, %1743
  %1777 = icmp ult i32 %1774, %1773
  %1778 = or i1 %1776, %1777
  %1779 = zext i1 %1778 to i8
  store i8 %1779, i8* %51, align 1, !tbaa !2433
  %1780 = and i32 %1774, 255
  %1781 = tail call i32 @llvm.ctpop.i32(i32 %1780) #11
  %1782 = trunc i32 %1781 to i8
  %1783 = and i8 %1782, 1
  %1784 = xor i8 %1783, 1
  store i8 %1784, i8* %52, align 1, !tbaa !2447
  %1785 = xor i32 %1773, %1743
  %1786 = xor i32 %1785, %1774
  %1787 = lshr i32 %1786, 4
  %1788 = trunc i32 %1787 to i8
  %1789 = and i8 %1788, 1
  store i8 %1789, i8* %53, align 1, !tbaa !2451
  %1790 = icmp eq i32 %1774, 0
  %1791 = zext i1 %1790 to i8
  store i8 %1791, i8* %54, align 1, !tbaa !2448
  %1792 = lshr i32 %1774, 31
  %1793 = trunc i32 %1792 to i8
  store i8 %1793, i8* %55, align 1, !tbaa !2449
  %1794 = lshr i32 %1773, 31
  %1795 = xor i32 %1792, %1757
  %1796 = xor i32 %1792, %1794
  %1797 = add nuw nsw i32 %1795, %1796
  %1798 = icmp eq i32 %1797, 2
  %1799 = zext i1 %1798 to i8
  store i8 %1799, i8* %56, align 1, !tbaa !2450
  %1800 = add i64 %1737, -40
  %1801 = add i64 %1739, 20
  store i64 %1801, i64* %PC, align 8
  %1802 = inttoptr i64 %1800 to i32*
  store i32 %1774, i32* %1802, align 4
  %1803 = load i64, i64* %RBP, align 8
  %1804 = add i64 %1803, -24
  %1805 = load i64, i64* %PC, align 8
  %1806 = add i64 %1805, 4
  store i64 %1806, i64* %PC, align 8
  %1807 = inttoptr i64 %1804 to i64*
  %1808 = load i64, i64* %1807, align 8
  store i64 %1808, i64* %RCX, align 8, !tbaa !2428
  %1809 = add i64 %1803, -32
  %1810 = add i64 %1805, 8
  store i64 %1810, i64* %PC, align 8
  %1811 = inttoptr i64 %1809 to i32*
  %1812 = load i32, i32* %1811, align 4
  %1813 = sext i32 %1812 to i64
  store i64 %1813, i64* %RDX, align 8, !tbaa !2428
  %1814 = shl nsw i64 %1813, 3
  %1815 = add i64 %1814, %1808
  %1816 = add i64 %1805, 13
  store i64 %1816, i64* %PC, align 8
  %1817 = inttoptr i64 %1815 to i64*
  %1818 = load i64, i64* %1817, align 8
  %1819 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %1818, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %1820 = add i64 %1803, -64
  %1821 = add i64 %1805, 18
  store i64 %1821, i64* %PC, align 8
  %1822 = inttoptr i64 %1820 to i64*
  store i64 %1818, i64* %1822, align 8
  %1823 = load i64, i64* %RBP, align 8
  %1824 = add i64 %1823, -24
  %1825 = load i64, i64* %PC, align 8
  %1826 = add i64 %1825, 4
  store i64 %1826, i64* %PC, align 8
  %1827 = inttoptr i64 %1824 to i64*
  %1828 = load i64, i64* %1827, align 8
  store i64 %1828, i64* %RCX, align 8, !tbaa !2428
  %1829 = add i64 %1823, -32
  %1830 = add i64 %1825, 7
  store i64 %1830, i64* %PC, align 8
  %1831 = inttoptr i64 %1829 to i32*
  %1832 = load i32, i32* %1831, align 4
  %1833 = add i32 %1832, 1
  %1834 = zext i32 %1833 to i64
  store i64 %1834, i64* %RAX, align 8, !tbaa !2428
  %1835 = icmp eq i32 %1832, -1
  %1836 = icmp eq i32 %1833, 0
  %1837 = or i1 %1835, %1836
  %1838 = zext i1 %1837 to i8
  store i8 %1838, i8* %51, align 1, !tbaa !2433
  %1839 = and i32 %1833, 255
  %1840 = tail call i32 @llvm.ctpop.i32(i32 %1839) #11
  %1841 = trunc i32 %1840 to i8
  %1842 = and i8 %1841, 1
  %1843 = xor i8 %1842, 1
  store i8 %1843, i8* %52, align 1, !tbaa !2447
  %1844 = xor i32 %1832, %1833
  %1845 = lshr i32 %1844, 4
  %1846 = trunc i32 %1845 to i8
  %1847 = and i8 %1846, 1
  store i8 %1847, i8* %53, align 1, !tbaa !2451
  %1848 = zext i1 %1836 to i8
  store i8 %1848, i8* %54, align 1, !tbaa !2448
  %1849 = lshr i32 %1833, 31
  %1850 = trunc i32 %1849 to i8
  store i8 %1850, i8* %55, align 1, !tbaa !2449
  %1851 = lshr i32 %1832, 31
  %1852 = xor i32 %1849, %1851
  %1853 = add nuw nsw i32 %1852, %1849
  %1854 = icmp eq i32 %1853, 2
  %1855 = zext i1 %1854 to i8
  store i8 %1855, i8* %56, align 1, !tbaa !2450
  %1856 = sext i32 %1833 to i64
  store i64 %1856, i64* %RDX, align 8, !tbaa !2428
  %1857 = shl nsw i64 %1856, 3
  %1858 = add i64 %1857, %1828
  %1859 = add i64 %1825, 18
  store i64 %1859, i64* %PC, align 8
  %1860 = inttoptr i64 %1858 to i64*
  %1861 = load i64, i64* %1860, align 8
  store i64 %1861, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %1862 = add i64 %1823, -72
  %1863 = add i64 %1825, 23
  store i64 %1863, i64* %PC, align 8
  %1864 = inttoptr i64 %1862 to i64*
  store i64 %1861, i64* %1864, align 8
  %1865 = load i64, i64* %RBP, align 8
  %1866 = add i64 %1865, -24
  %1867 = load i64, i64* %PC, align 8
  %1868 = add i64 %1867, 4
  store i64 %1868, i64* %PC, align 8
  %1869 = inttoptr i64 %1866 to i64*
  %1870 = load i64, i64* %1869, align 8
  store i64 %1870, i64* %RCX, align 8, !tbaa !2428
  %1871 = add i64 %1865, -40
  %1872 = add i64 %1867, 8
  store i64 %1872, i64* %PC, align 8
  %1873 = inttoptr i64 %1871 to i32*
  %1874 = load i32, i32* %1873, align 4
  %1875 = sext i32 %1874 to i64
  store i64 %1875, i64* %RDX, align 8, !tbaa !2428
  %1876 = shl nsw i64 %1875, 3
  %1877 = add i64 %1876, %1870
  %1878 = add i64 %1867, 13
  store i64 %1878, i64* %PC, align 8
  %1879 = inttoptr i64 %1877 to i64*
  %1880 = load i64, i64* %1879, align 8
  store i64 %1880, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %1881 = add i64 %1865, -80
  %1882 = add i64 %1867, 18
  store i64 %1882, i64* %PC, align 8
  %1883 = inttoptr i64 %1881 to i64*
  store i64 %1880, i64* %1883, align 8
  %1884 = load i64, i64* %RBP, align 8
  %1885 = add i64 %1884, -24
  %1886 = load i64, i64* %PC, align 8
  %1887 = add i64 %1886, 4
  store i64 %1887, i64* %PC, align 8
  %1888 = inttoptr i64 %1885 to i64*
  %1889 = load i64, i64* %1888, align 8
  store i64 %1889, i64* %RCX, align 8, !tbaa !2428
  %1890 = add i64 %1884, -40
  %1891 = add i64 %1886, 7
  store i64 %1891, i64* %PC, align 8
  %1892 = inttoptr i64 %1890 to i32*
  %1893 = load i32, i32* %1892, align 4
  %1894 = add i32 %1893, 1
  %1895 = zext i32 %1894 to i64
  store i64 %1895, i64* %RAX, align 8, !tbaa !2428
  %1896 = icmp eq i32 %1893, -1
  %1897 = icmp eq i32 %1894, 0
  %1898 = or i1 %1896, %1897
  %1899 = zext i1 %1898 to i8
  store i8 %1899, i8* %51, align 1, !tbaa !2433
  %1900 = and i32 %1894, 255
  %1901 = tail call i32 @llvm.ctpop.i32(i32 %1900) #11
  %1902 = trunc i32 %1901 to i8
  %1903 = and i8 %1902, 1
  %1904 = xor i8 %1903, 1
  store i8 %1904, i8* %52, align 1, !tbaa !2447
  %1905 = xor i32 %1893, %1894
  %1906 = lshr i32 %1905, 4
  %1907 = trunc i32 %1906 to i8
  %1908 = and i8 %1907, 1
  store i8 %1908, i8* %53, align 1, !tbaa !2451
  %1909 = zext i1 %1897 to i8
  store i8 %1909, i8* %54, align 1, !tbaa !2448
  %1910 = lshr i32 %1894, 31
  %1911 = trunc i32 %1910 to i8
  store i8 %1911, i8* %55, align 1, !tbaa !2449
  %1912 = lshr i32 %1893, 31
  %1913 = xor i32 %1910, %1912
  %1914 = add nuw nsw i32 %1913, %1910
  %1915 = icmp eq i32 %1914, 2
  %1916 = zext i1 %1915 to i8
  store i8 %1916, i8* %56, align 1, !tbaa !2450
  %1917 = sext i32 %1894 to i64
  store i64 %1917, i64* %RDX, align 8, !tbaa !2428
  %1918 = shl nsw i64 %1917, 3
  %1919 = add i64 %1918, %1889
  %1920 = add i64 %1886, 18
  store i64 %1920, i64* %PC, align 8
  %1921 = inttoptr i64 %1919 to i64*
  %1922 = load i64, i64* %1921, align 8
  store i64 %1922, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %1923 = add i64 %1884, -88
  %1924 = add i64 %1886, 23
  store i64 %1924, i64* %PC, align 8
  %1925 = inttoptr i64 %1923 to i64*
  store i64 %1922, i64* %1925, align 8
  %1926 = load i64, i64* %RBP, align 8
  %1927 = add i64 %1926, -80
  %1928 = load i64, i64* %PC, align 8
  %1929 = add i64 %1928, 5
  store i64 %1929, i64* %PC, align 8
  %1930 = inttoptr i64 %1927 to i64*
  %1931 = load i64, i64* %1930, align 8
  store i64 %1931, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %1932 = add i64 %1926, -24
  %1933 = add i64 %1928, 9
  store i64 %1933, i64* %PC, align 8
  %1934 = inttoptr i64 %1932 to i64*
  %1935 = load i64, i64* %1934, align 8
  store i64 %1935, i64* %RCX, align 8, !tbaa !2428
  %1936 = add i64 %1926, -32
  %1937 = add i64 %1928, 13
  store i64 %1937, i64* %PC, align 8
  %1938 = inttoptr i64 %1936 to i32*
  %1939 = load i32, i32* %1938, align 4
  %1940 = sext i32 %1939 to i64
  store i64 %1940, i64* %RDX, align 8, !tbaa !2428
  %1941 = shl nsw i64 %1940, 3
  %1942 = add i64 %1941, %1935
  %1943 = add i64 %1928, 18
  store i64 %1943, i64* %PC, align 8
  %1944 = inttoptr i64 %1942 to i64*
  store i64 %1931, i64* %1944, align 8
  %1945 = load i64, i64* %RBP, align 8
  %1946 = add i64 %1945, -88
  %1947 = load i64, i64* %PC, align 8
  %1948 = add i64 %1947, 5
  store i64 %1948, i64* %PC, align 8
  %1949 = inttoptr i64 %1946 to i64*
  %1950 = load i64, i64* %1949, align 8
  store i64 %1950, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %1951 = add i64 %1945, -24
  %1952 = add i64 %1947, 9
  store i64 %1952, i64* %PC, align 8
  %1953 = inttoptr i64 %1951 to i64*
  %1954 = load i64, i64* %1953, align 8
  store i64 %1954, i64* %RCX, align 8, !tbaa !2428
  %1955 = add i64 %1945, -32
  %1956 = add i64 %1947, 12
  store i64 %1956, i64* %PC, align 8
  %1957 = inttoptr i64 %1955 to i32*
  %1958 = load i32, i32* %1957, align 4
  %1959 = add i32 %1958, 1
  %1960 = zext i32 %1959 to i64
  store i64 %1960, i64* %RAX, align 8, !tbaa !2428
  %1961 = icmp eq i32 %1958, -1
  %1962 = icmp eq i32 %1959, 0
  %1963 = or i1 %1961, %1962
  %1964 = zext i1 %1963 to i8
  store i8 %1964, i8* %51, align 1, !tbaa !2433
  %1965 = and i32 %1959, 255
  %1966 = tail call i32 @llvm.ctpop.i32(i32 %1965) #11
  %1967 = trunc i32 %1966 to i8
  %1968 = and i8 %1967, 1
  %1969 = xor i8 %1968, 1
  store i8 %1969, i8* %52, align 1, !tbaa !2447
  %1970 = xor i32 %1958, %1959
  %1971 = lshr i32 %1970, 4
  %1972 = trunc i32 %1971 to i8
  %1973 = and i8 %1972, 1
  store i8 %1973, i8* %53, align 1, !tbaa !2451
  %1974 = zext i1 %1962 to i8
  store i8 %1974, i8* %54, align 1, !tbaa !2448
  %1975 = lshr i32 %1959, 31
  %1976 = trunc i32 %1975 to i8
  store i8 %1976, i8* %55, align 1, !tbaa !2449
  %1977 = lshr i32 %1958, 31
  %1978 = xor i32 %1975, %1977
  %1979 = add nuw nsw i32 %1978, %1975
  %1980 = icmp eq i32 %1979, 2
  %1981 = zext i1 %1980 to i8
  store i8 %1981, i8* %56, align 1, !tbaa !2450
  %1982 = sext i32 %1959 to i64
  store i64 %1982, i64* %RDX, align 8, !tbaa !2428
  %1983 = shl nsw i64 %1982, 3
  %1984 = add i64 %1983, %1954
  %1985 = add i64 %1947, 23
  store i64 %1985, i64* %PC, align 8
  %1986 = inttoptr i64 %1984 to i64*
  store i64 %1950, i64* %1986, align 8
  %1987 = load i64, i64* %RBP, align 8
  %1988 = add i64 %1987, -64
  %1989 = load i64, i64* %PC, align 8
  %1990 = add i64 %1989, 5
  store i64 %1990, i64* %PC, align 8
  %1991 = inttoptr i64 %1988 to i64*
  %1992 = load i64, i64* %1991, align 8
  store i64 %1992, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %1993 = add i64 %1987, -24
  %1994 = add i64 %1989, 9
  store i64 %1994, i64* %PC, align 8
  %1995 = inttoptr i64 %1993 to i64*
  %1996 = load i64, i64* %1995, align 8
  store i64 %1996, i64* %RCX, align 8, !tbaa !2428
  %1997 = add i64 %1987, -40
  %1998 = add i64 %1989, 13
  store i64 %1998, i64* %PC, align 8
  %1999 = inttoptr i64 %1997 to i32*
  %2000 = load i32, i32* %1999, align 4
  %2001 = sext i32 %2000 to i64
  store i64 %2001, i64* %RDX, align 8, !tbaa !2428
  %2002 = shl nsw i64 %2001, 3
  %2003 = add i64 %2002, %1996
  %2004 = add i64 %1989, 18
  store i64 %2004, i64* %PC, align 8
  %2005 = inttoptr i64 %2003 to i64*
  store i64 %1992, i64* %2005, align 8
  %2006 = load i64, i64* %RBP, align 8
  %2007 = add i64 %2006, -72
  %2008 = load i64, i64* %PC, align 8
  %2009 = add i64 %2008, 5
  store i64 %2009, i64* %PC, align 8
  %2010 = inttoptr i64 %2007 to i64*
  %2011 = load i64, i64* %2010, align 8
  store i64 %2011, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2012 = add i64 %2006, -24
  %2013 = add i64 %2008, 9
  store i64 %2013, i64* %PC, align 8
  %2014 = inttoptr i64 %2012 to i64*
  %2015 = load i64, i64* %2014, align 8
  store i64 %2015, i64* %RCX, align 8, !tbaa !2428
  %2016 = add i64 %2006, -40
  %2017 = add i64 %2008, 12
  store i64 %2017, i64* %PC, align 8
  %2018 = inttoptr i64 %2016 to i32*
  %2019 = load i32, i32* %2018, align 4
  %2020 = add i32 %2019, 1
  %2021 = zext i32 %2020 to i64
  store i64 %2021, i64* %RAX, align 8, !tbaa !2428
  %2022 = icmp eq i32 %2019, -1
  %2023 = icmp eq i32 %2020, 0
  %2024 = or i1 %2022, %2023
  %2025 = zext i1 %2024 to i8
  store i8 %2025, i8* %51, align 1, !tbaa !2433
  %2026 = and i32 %2020, 255
  %2027 = tail call i32 @llvm.ctpop.i32(i32 %2026) #11
  %2028 = trunc i32 %2027 to i8
  %2029 = and i8 %2028, 1
  %2030 = xor i8 %2029, 1
  store i8 %2030, i8* %52, align 1, !tbaa !2447
  %2031 = xor i32 %2019, %2020
  %2032 = lshr i32 %2031, 4
  %2033 = trunc i32 %2032 to i8
  %2034 = and i8 %2033, 1
  store i8 %2034, i8* %53, align 1, !tbaa !2451
  %2035 = zext i1 %2023 to i8
  store i8 %2035, i8* %54, align 1, !tbaa !2448
  %2036 = lshr i32 %2020, 31
  %2037 = trunc i32 %2036 to i8
  store i8 %2037, i8* %55, align 1, !tbaa !2449
  %2038 = lshr i32 %2019, 31
  %2039 = xor i32 %2036, %2038
  %2040 = add nuw nsw i32 %2039, %2036
  %2041 = icmp eq i32 %2040, 2
  %2042 = zext i1 %2041 to i8
  store i8 %2042, i8* %56, align 1, !tbaa !2450
  %2043 = sext i32 %2020 to i64
  store i64 %2043, i64* %RDX, align 8, !tbaa !2428
  %2044 = shl nsw i64 %2043, 3
  %2045 = add i64 %2044, %2015
  %2046 = add i64 %2008, 23
  store i64 %2046, i64* %PC, align 8
  %2047 = inttoptr i64 %2045 to i64*
  store i64 %2011, i64* %2047, align 8
  %2048 = load i64, i64* %RBP, align 8
  %2049 = add i64 %2048, -52
  %2050 = load i64, i64* %PC, align 8
  %2051 = add i64 %2050, 3
  store i64 %2051, i64* %PC, align 8
  %2052 = inttoptr i64 %2049 to i32*
  %2053 = load i32, i32* %2052, align 4
  %2054 = zext i32 %2053 to i64
  store i64 %2054, i64* %RAX, align 8, !tbaa !2428
  %2055 = add i64 %2048, -32
  %2056 = add i64 %2050, 6
  store i64 %2056, i64* %PC, align 8
  %2057 = inttoptr i64 %2055 to i32*
  %2058 = load i32, i32* %2057, align 4
  %2059 = add i32 %2058, %2053
  %2060 = zext i32 %2059 to i64
  store i64 %2060, i64* %RAX, align 8, !tbaa !2428
  %2061 = icmp ult i32 %2059, %2053
  %2062 = icmp ult i32 %2059, %2058
  %2063 = or i1 %2061, %2062
  %2064 = zext i1 %2063 to i8
  store i8 %2064, i8* %51, align 1, !tbaa !2433
  %2065 = and i32 %2059, 255
  %2066 = tail call i32 @llvm.ctpop.i32(i32 %2065) #11
  %2067 = trunc i32 %2066 to i8
  %2068 = and i8 %2067, 1
  %2069 = xor i8 %2068, 1
  store i8 %2069, i8* %52, align 1, !tbaa !2447
  %2070 = xor i32 %2058, %2053
  %2071 = xor i32 %2070, %2059
  %2072 = lshr i32 %2071, 4
  %2073 = trunc i32 %2072 to i8
  %2074 = and i8 %2073, 1
  store i8 %2074, i8* %53, align 1, !tbaa !2451
  %2075 = icmp eq i32 %2059, 0
  %2076 = zext i1 %2075 to i8
  store i8 %2076, i8* %54, align 1, !tbaa !2448
  %2077 = lshr i32 %2059, 31
  %2078 = trunc i32 %2077 to i8
  store i8 %2078, i8* %55, align 1, !tbaa !2449
  %2079 = lshr i32 %2053, 31
  %2080 = lshr i32 %2058, 31
  %2081 = xor i32 %2077, %2079
  %2082 = xor i32 %2077, %2080
  %2083 = add nuw nsw i32 %2081, %2082
  %2084 = icmp eq i32 %2083, 2
  %2085 = zext i1 %2084 to i8
  store i8 %2085, i8* %56, align 1, !tbaa !2450
  %2086 = add i64 %2050, 9
  store i64 %2086, i64* %PC, align 8
  store i32 %2059, i32* %2057, align 4
  %2087 = load i64, i64* %RBP, align 8
  %2088 = add i64 %2087, -52
  %2089 = load i64, i64* %PC, align 8
  %2090 = add i64 %2089, 3
  store i64 %2090, i64* %PC, align 8
  %2091 = inttoptr i64 %2088 to i32*
  %2092 = load i32, i32* %2091, align 4
  %2093 = shl i32 %2092, 1
  %2094 = icmp slt i32 %2092, 0
  %2095 = icmp slt i32 %2093, 0
  %2096 = xor i1 %2094, %2095
  %2097 = zext i32 %2093 to i64
  store i64 %2097, i64* %RAX, align 8, !tbaa !2428
  %.lobit17 = lshr i32 %2092, 31
  %2098 = trunc i32 %.lobit17 to i8
  store i8 %2098, i8* %51, align 1, !tbaa !2432
  %2099 = and i32 %2093, 254
  %2100 = tail call i32 @llvm.ctpop.i32(i32 %2099) #11
  %2101 = trunc i32 %2100 to i8
  %2102 = and i8 %2101, 1
  %2103 = xor i8 %2102, 1
  store i8 %2103, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %2104 = icmp eq i32 %2093, 0
  %2105 = zext i1 %2104 to i8
  store i8 %2105, i8* %54, align 1, !tbaa !2432
  %2106 = lshr i32 %2092, 30
  %2107 = and i32 %2106, 1
  %2108 = trunc i32 %2107 to i8
  store i8 %2108, i8* %55, align 1, !tbaa !2432
  %2109 = zext i1 %2096 to i8
  store i8 %2109, i8* %56, align 1, !tbaa !2432
  %2110 = add i64 %2087, -40
  %2111 = add i64 %2089, 9
  store i64 %2111, i64* %PC, align 8
  %2112 = inttoptr i64 %2110 to i32*
  %2113 = load i32, i32* %2112, align 4
  %2114 = add i32 %2113, %2093
  %2115 = zext i32 %2114 to i64
  store i64 %2115, i64* %RAX, align 8, !tbaa !2428
  %2116 = icmp ult i32 %2114, %2093
  %2117 = icmp ult i32 %2114, %2113
  %2118 = or i1 %2116, %2117
  %2119 = zext i1 %2118 to i8
  store i8 %2119, i8* %51, align 1, !tbaa !2433
  %2120 = and i32 %2114, 255
  %2121 = tail call i32 @llvm.ctpop.i32(i32 %2120) #11
  %2122 = trunc i32 %2121 to i8
  %2123 = and i8 %2122, 1
  %2124 = xor i8 %2123, 1
  store i8 %2124, i8* %52, align 1, !tbaa !2447
  %2125 = xor i32 %2113, %2093
  %2126 = xor i32 %2125, %2114
  %2127 = lshr i32 %2126, 4
  %2128 = trunc i32 %2127 to i8
  %2129 = and i8 %2128, 1
  store i8 %2129, i8* %53, align 1, !tbaa !2451
  %2130 = icmp eq i32 %2114, 0
  %2131 = zext i1 %2130 to i8
  store i8 %2131, i8* %54, align 1, !tbaa !2448
  %2132 = lshr i32 %2114, 31
  %2133 = trunc i32 %2132 to i8
  store i8 %2133, i8* %55, align 1, !tbaa !2449
  %2134 = lshr i32 %2113, 31
  %2135 = xor i32 %2132, %2107
  %2136 = xor i32 %2132, %2134
  %2137 = add nuw nsw i32 %2135, %2136
  %2138 = icmp eq i32 %2137, 2
  %2139 = zext i1 %2138 to i8
  store i8 %2139, i8* %56, align 1, !tbaa !2450
  %2140 = add i64 %2089, 12
  store i64 %2140, i64* %PC, align 8
  store i32 %2114, i32* %2112, align 4
  %2141 = load i64, i64* %RBP, align 8
  %2142 = add i64 %2141, -24
  %2143 = load i64, i64* %PC, align 8
  %2144 = add i64 %2143, 4
  store i64 %2144, i64* %PC, align 8
  %2145 = inttoptr i64 %2142 to i64*
  %2146 = load i64, i64* %2145, align 8
  store i64 %2146, i64* %RCX, align 8, !tbaa !2428
  %2147 = add i64 %2141, -32
  %2148 = add i64 %2143, 8
  store i64 %2148, i64* %PC, align 8
  %2149 = inttoptr i64 %2147 to i32*
  %2150 = load i32, i32* %2149, align 4
  %2151 = sext i32 %2150 to i64
  store i64 %2151, i64* %RDX, align 8, !tbaa !2428
  %2152 = shl nsw i64 %2151, 3
  %2153 = add i64 %2152, %2146
  %2154 = add i64 %2143, 13
  store i64 %2154, i64* %PC, align 8
  %2155 = inttoptr i64 %2153 to i64*
  %2156 = load i64, i64* %2155, align 8
  store i64 %2156, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2157 = add i64 %2141, -64
  %2158 = add i64 %2143, 18
  store i64 %2158, i64* %PC, align 8
  %2159 = inttoptr i64 %2157 to i64*
  store i64 %2156, i64* %2159, align 8
  %2160 = load i64, i64* %RBP, align 8
  %2161 = add i64 %2160, -24
  %2162 = load i64, i64* %PC, align 8
  %2163 = add i64 %2162, 4
  store i64 %2163, i64* %PC, align 8
  %2164 = inttoptr i64 %2161 to i64*
  %2165 = load i64, i64* %2164, align 8
  store i64 %2165, i64* %RCX, align 8, !tbaa !2428
  %2166 = add i64 %2160, -32
  %2167 = add i64 %2162, 7
  store i64 %2167, i64* %PC, align 8
  %2168 = inttoptr i64 %2166 to i32*
  %2169 = load i32, i32* %2168, align 4
  %2170 = add i32 %2169, 1
  %2171 = zext i32 %2170 to i64
  store i64 %2171, i64* %RAX, align 8, !tbaa !2428
  %2172 = icmp eq i32 %2169, -1
  %2173 = icmp eq i32 %2170, 0
  %2174 = or i1 %2172, %2173
  %2175 = zext i1 %2174 to i8
  store i8 %2175, i8* %51, align 1, !tbaa !2433
  %2176 = and i32 %2170, 255
  %2177 = tail call i32 @llvm.ctpop.i32(i32 %2176) #11
  %2178 = trunc i32 %2177 to i8
  %2179 = and i8 %2178, 1
  %2180 = xor i8 %2179, 1
  store i8 %2180, i8* %52, align 1, !tbaa !2447
  %2181 = xor i32 %2169, %2170
  %2182 = lshr i32 %2181, 4
  %2183 = trunc i32 %2182 to i8
  %2184 = and i8 %2183, 1
  store i8 %2184, i8* %53, align 1, !tbaa !2451
  %2185 = zext i1 %2173 to i8
  store i8 %2185, i8* %54, align 1, !tbaa !2448
  %2186 = lshr i32 %2170, 31
  %2187 = trunc i32 %2186 to i8
  store i8 %2187, i8* %55, align 1, !tbaa !2449
  %2188 = lshr i32 %2169, 31
  %2189 = xor i32 %2186, %2188
  %2190 = add nuw nsw i32 %2189, %2186
  %2191 = icmp eq i32 %2190, 2
  %2192 = zext i1 %2191 to i8
  store i8 %2192, i8* %56, align 1, !tbaa !2450
  %2193 = sext i32 %2170 to i64
  store i64 %2193, i64* %RDX, align 8, !tbaa !2428
  %2194 = shl nsw i64 %2193, 3
  %2195 = add i64 %2194, %2165
  %2196 = add i64 %2162, 18
  store i64 %2196, i64* %PC, align 8
  %2197 = inttoptr i64 %2195 to i64*
  %2198 = load i64, i64* %2197, align 8
  store i64 %2198, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2199 = add i64 %2160, -72
  %2200 = add i64 %2162, 23
  store i64 %2200, i64* %PC, align 8
  %2201 = inttoptr i64 %2199 to i64*
  store i64 %2198, i64* %2201, align 8
  %2202 = load i64, i64* %RBP, align 8
  %2203 = add i64 %2202, -24
  %2204 = load i64, i64* %PC, align 8
  %2205 = add i64 %2204, 4
  store i64 %2205, i64* %PC, align 8
  %2206 = inttoptr i64 %2203 to i64*
  %2207 = load i64, i64* %2206, align 8
  store i64 %2207, i64* %RCX, align 8, !tbaa !2428
  %2208 = add i64 %2202, -40
  %2209 = add i64 %2204, 8
  store i64 %2209, i64* %PC, align 8
  %2210 = inttoptr i64 %2208 to i32*
  %2211 = load i32, i32* %2210, align 4
  %2212 = sext i32 %2211 to i64
  store i64 %2212, i64* %RDX, align 8, !tbaa !2428
  %2213 = shl nsw i64 %2212, 3
  %2214 = add i64 %2213, %2207
  %2215 = add i64 %2204, 13
  store i64 %2215, i64* %PC, align 8
  %2216 = inttoptr i64 %2214 to i64*
  %2217 = load i64, i64* %2216, align 8
  store i64 %2217, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2218 = add i64 %2202, -80
  %2219 = add i64 %2204, 18
  store i64 %2219, i64* %PC, align 8
  %2220 = inttoptr i64 %2218 to i64*
  store i64 %2217, i64* %2220, align 8
  %2221 = load i64, i64* %RBP, align 8
  %2222 = add i64 %2221, -24
  %2223 = load i64, i64* %PC, align 8
  %2224 = add i64 %2223, 4
  store i64 %2224, i64* %PC, align 8
  %2225 = inttoptr i64 %2222 to i64*
  %2226 = load i64, i64* %2225, align 8
  store i64 %2226, i64* %RCX, align 8, !tbaa !2428
  %2227 = add i64 %2221, -40
  %2228 = add i64 %2223, 7
  store i64 %2228, i64* %PC, align 8
  %2229 = inttoptr i64 %2227 to i32*
  %2230 = load i32, i32* %2229, align 4
  %2231 = add i32 %2230, 1
  %2232 = zext i32 %2231 to i64
  store i64 %2232, i64* %RAX, align 8, !tbaa !2428
  %2233 = icmp eq i32 %2230, -1
  %2234 = icmp eq i32 %2231, 0
  %2235 = or i1 %2233, %2234
  %2236 = zext i1 %2235 to i8
  store i8 %2236, i8* %51, align 1, !tbaa !2433
  %2237 = and i32 %2231, 255
  %2238 = tail call i32 @llvm.ctpop.i32(i32 %2237) #11
  %2239 = trunc i32 %2238 to i8
  %2240 = and i8 %2239, 1
  %2241 = xor i8 %2240, 1
  store i8 %2241, i8* %52, align 1, !tbaa !2447
  %2242 = xor i32 %2230, %2231
  %2243 = lshr i32 %2242, 4
  %2244 = trunc i32 %2243 to i8
  %2245 = and i8 %2244, 1
  store i8 %2245, i8* %53, align 1, !tbaa !2451
  %2246 = zext i1 %2234 to i8
  store i8 %2246, i8* %54, align 1, !tbaa !2448
  %2247 = lshr i32 %2231, 31
  %2248 = trunc i32 %2247 to i8
  store i8 %2248, i8* %55, align 1, !tbaa !2449
  %2249 = lshr i32 %2230, 31
  %2250 = xor i32 %2247, %2249
  %2251 = add nuw nsw i32 %2250, %2247
  %2252 = icmp eq i32 %2251, 2
  %2253 = zext i1 %2252 to i8
  store i8 %2253, i8* %56, align 1, !tbaa !2450
  %2254 = sext i32 %2231 to i64
  store i64 %2254, i64* %RDX, align 8, !tbaa !2428
  %2255 = shl nsw i64 %2254, 3
  %2256 = add i64 %2255, %2226
  %2257 = add i64 %2223, 18
  store i64 %2257, i64* %PC, align 8
  %2258 = inttoptr i64 %2256 to i64*
  %2259 = load i64, i64* %2258, align 8
  store i64 %2259, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2260 = add i64 %2221, -88
  %2261 = add i64 %2223, 23
  store i64 %2261, i64* %PC, align 8
  %2262 = inttoptr i64 %2260 to i64*
  store i64 %2259, i64* %2262, align 8
  %2263 = load i64, i64* %RBP, align 8
  %2264 = add i64 %2263, -80
  %2265 = load i64, i64* %PC, align 8
  %2266 = add i64 %2265, 5
  store i64 %2266, i64* %PC, align 8
  %2267 = inttoptr i64 %2264 to i64*
  %2268 = load i64, i64* %2267, align 8
  store i64 %2268, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2269 = add i64 %2263, -24
  %2270 = add i64 %2265, 9
  store i64 %2270, i64* %PC, align 8
  %2271 = inttoptr i64 %2269 to i64*
  %2272 = load i64, i64* %2271, align 8
  store i64 %2272, i64* %RCX, align 8, !tbaa !2428
  %2273 = add i64 %2263, -32
  %2274 = add i64 %2265, 13
  store i64 %2274, i64* %PC, align 8
  %2275 = inttoptr i64 %2273 to i32*
  %2276 = load i32, i32* %2275, align 4
  %2277 = sext i32 %2276 to i64
  store i64 %2277, i64* %RDX, align 8, !tbaa !2428
  %2278 = shl nsw i64 %2277, 3
  %2279 = add i64 %2278, %2272
  %2280 = add i64 %2265, 18
  store i64 %2280, i64* %PC, align 8
  %2281 = inttoptr i64 %2279 to i64*
  store i64 %2268, i64* %2281, align 8
  %2282 = load i64, i64* %RBP, align 8
  %2283 = add i64 %2282, -88
  %2284 = load i64, i64* %PC, align 8
  %2285 = add i64 %2284, 5
  store i64 %2285, i64* %PC, align 8
  %2286 = inttoptr i64 %2283 to i64*
  %2287 = load i64, i64* %2286, align 8
  store i64 %2287, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2288 = add i64 %2282, -24
  %2289 = add i64 %2284, 9
  store i64 %2289, i64* %PC, align 8
  %2290 = inttoptr i64 %2288 to i64*
  %2291 = load i64, i64* %2290, align 8
  store i64 %2291, i64* %RCX, align 8, !tbaa !2428
  %2292 = add i64 %2282, -32
  %2293 = add i64 %2284, 12
  store i64 %2293, i64* %PC, align 8
  %2294 = inttoptr i64 %2292 to i32*
  %2295 = load i32, i32* %2294, align 4
  %2296 = add i32 %2295, 1
  %2297 = zext i32 %2296 to i64
  store i64 %2297, i64* %RAX, align 8, !tbaa !2428
  %2298 = icmp eq i32 %2295, -1
  %2299 = icmp eq i32 %2296, 0
  %2300 = or i1 %2298, %2299
  %2301 = zext i1 %2300 to i8
  store i8 %2301, i8* %51, align 1, !tbaa !2433
  %2302 = and i32 %2296, 255
  %2303 = tail call i32 @llvm.ctpop.i32(i32 %2302) #11
  %2304 = trunc i32 %2303 to i8
  %2305 = and i8 %2304, 1
  %2306 = xor i8 %2305, 1
  store i8 %2306, i8* %52, align 1, !tbaa !2447
  %2307 = xor i32 %2295, %2296
  %2308 = lshr i32 %2307, 4
  %2309 = trunc i32 %2308 to i8
  %2310 = and i8 %2309, 1
  store i8 %2310, i8* %53, align 1, !tbaa !2451
  %2311 = zext i1 %2299 to i8
  store i8 %2311, i8* %54, align 1, !tbaa !2448
  %2312 = lshr i32 %2296, 31
  %2313 = trunc i32 %2312 to i8
  store i8 %2313, i8* %55, align 1, !tbaa !2449
  %2314 = lshr i32 %2295, 31
  %2315 = xor i32 %2312, %2314
  %2316 = add nuw nsw i32 %2315, %2312
  %2317 = icmp eq i32 %2316, 2
  %2318 = zext i1 %2317 to i8
  store i8 %2318, i8* %56, align 1, !tbaa !2450
  %2319 = sext i32 %2296 to i64
  store i64 %2319, i64* %RDX, align 8, !tbaa !2428
  %2320 = shl nsw i64 %2319, 3
  %2321 = add i64 %2320, %2291
  %2322 = add i64 %2284, 23
  store i64 %2322, i64* %PC, align 8
  %2323 = inttoptr i64 %2321 to i64*
  store i64 %2287, i64* %2323, align 8
  %2324 = load i64, i64* %RBP, align 8
  %2325 = add i64 %2324, -64
  %2326 = load i64, i64* %PC, align 8
  %2327 = add i64 %2326, 5
  store i64 %2327, i64* %PC, align 8
  %2328 = inttoptr i64 %2325 to i64*
  %2329 = load i64, i64* %2328, align 8
  store i64 %2329, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2330 = add i64 %2324, -24
  %2331 = add i64 %2326, 9
  store i64 %2331, i64* %PC, align 8
  %2332 = inttoptr i64 %2330 to i64*
  %2333 = load i64, i64* %2332, align 8
  store i64 %2333, i64* %RCX, align 8, !tbaa !2428
  %2334 = add i64 %2324, -40
  %2335 = add i64 %2326, 13
  store i64 %2335, i64* %PC, align 8
  %2336 = inttoptr i64 %2334 to i32*
  %2337 = load i32, i32* %2336, align 4
  %2338 = sext i32 %2337 to i64
  store i64 %2338, i64* %RDX, align 8, !tbaa !2428
  %2339 = shl nsw i64 %2338, 3
  %2340 = add i64 %2339, %2333
  %2341 = add i64 %2326, 18
  store i64 %2341, i64* %PC, align 8
  %2342 = inttoptr i64 %2340 to i64*
  store i64 %2329, i64* %2342, align 8
  %2343 = load i64, i64* %RBP, align 8
  %2344 = add i64 %2343, -72
  %2345 = load i64, i64* %PC, align 8
  %2346 = add i64 %2345, 5
  store i64 %2346, i64* %PC, align 8
  %2347 = inttoptr i64 %2344 to i64*
  %2348 = load i64, i64* %2347, align 8
  store i64 %2348, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2349 = add i64 %2343, -24
  %2350 = add i64 %2345, 9
  store i64 %2350, i64* %PC, align 8
  %2351 = inttoptr i64 %2349 to i64*
  %2352 = load i64, i64* %2351, align 8
  store i64 %2352, i64* %RCX, align 8, !tbaa !2428
  %2353 = add i64 %2343, -40
  %2354 = add i64 %2345, 12
  store i64 %2354, i64* %PC, align 8
  %2355 = inttoptr i64 %2353 to i32*
  %2356 = load i32, i32* %2355, align 4
  %2357 = add i32 %2356, 1
  %2358 = zext i32 %2357 to i64
  store i64 %2358, i64* %RAX, align 8, !tbaa !2428
  %2359 = icmp eq i32 %2356, -1
  %2360 = icmp eq i32 %2357, 0
  %2361 = or i1 %2359, %2360
  %2362 = zext i1 %2361 to i8
  store i8 %2362, i8* %51, align 1, !tbaa !2433
  %2363 = and i32 %2357, 255
  %2364 = tail call i32 @llvm.ctpop.i32(i32 %2363) #11
  %2365 = trunc i32 %2364 to i8
  %2366 = and i8 %2365, 1
  %2367 = xor i8 %2366, 1
  store i8 %2367, i8* %52, align 1, !tbaa !2447
  %2368 = xor i32 %2356, %2357
  %2369 = lshr i32 %2368, 4
  %2370 = trunc i32 %2369 to i8
  %2371 = and i8 %2370, 1
  store i8 %2371, i8* %53, align 1, !tbaa !2451
  %2372 = zext i1 %2360 to i8
  store i8 %2372, i8* %54, align 1, !tbaa !2448
  %2373 = lshr i32 %2357, 31
  %2374 = trunc i32 %2373 to i8
  store i8 %2374, i8* %55, align 1, !tbaa !2449
  %2375 = lshr i32 %2356, 31
  %2376 = xor i32 %2373, %2375
  %2377 = add nuw nsw i32 %2376, %2373
  %2378 = icmp eq i32 %2377, 2
  %2379 = zext i1 %2378 to i8
  store i8 %2379, i8* %56, align 1, !tbaa !2450
  %2380 = sext i32 %2357 to i64
  store i64 %2380, i64* %RDX, align 8, !tbaa !2428
  %2381 = shl nsw i64 %2380, 3
  %2382 = add i64 %2381, %2352
  %2383 = add i64 %2345, 23
  store i64 %2383, i64* %PC, align 8
  %2384 = inttoptr i64 %2382 to i64*
  store i64 %2348, i64* %2384, align 8
  %2385 = load i64, i64* %RBP, align 8
  %2386 = add i64 %2385, -52
  %2387 = load i64, i64* %PC, align 8
  %2388 = add i64 %2387, 3
  store i64 %2388, i64* %PC, align 8
  %2389 = inttoptr i64 %2386 to i32*
  %2390 = load i32, i32* %2389, align 4
  %2391 = zext i32 %2390 to i64
  store i64 %2391, i64* %RAX, align 8, !tbaa !2428
  %2392 = add i64 %2385, -32
  %2393 = add i64 %2387, 6
  store i64 %2393, i64* %PC, align 8
  %2394 = inttoptr i64 %2392 to i32*
  %2395 = load i32, i32* %2394, align 4
  %2396 = add i32 %2395, %2390
  %2397 = zext i32 %2396 to i64
  store i64 %2397, i64* %RAX, align 8, !tbaa !2428
  %2398 = icmp ult i32 %2396, %2390
  %2399 = icmp ult i32 %2396, %2395
  %2400 = or i1 %2398, %2399
  %2401 = zext i1 %2400 to i8
  store i8 %2401, i8* %51, align 1, !tbaa !2433
  %2402 = and i32 %2396, 255
  %2403 = tail call i32 @llvm.ctpop.i32(i32 %2402) #11
  %2404 = trunc i32 %2403 to i8
  %2405 = and i8 %2404, 1
  %2406 = xor i8 %2405, 1
  store i8 %2406, i8* %52, align 1, !tbaa !2447
  %2407 = xor i32 %2395, %2390
  %2408 = xor i32 %2407, %2396
  %2409 = lshr i32 %2408, 4
  %2410 = trunc i32 %2409 to i8
  %2411 = and i8 %2410, 1
  store i8 %2411, i8* %53, align 1, !tbaa !2451
  %2412 = icmp eq i32 %2396, 0
  %2413 = zext i1 %2412 to i8
  store i8 %2413, i8* %54, align 1, !tbaa !2448
  %2414 = lshr i32 %2396, 31
  %2415 = trunc i32 %2414 to i8
  store i8 %2415, i8* %55, align 1, !tbaa !2449
  %2416 = lshr i32 %2390, 31
  %2417 = lshr i32 %2395, 31
  %2418 = xor i32 %2414, %2416
  %2419 = xor i32 %2414, %2417
  %2420 = add nuw nsw i32 %2418, %2419
  %2421 = icmp eq i32 %2420, 2
  %2422 = zext i1 %2421 to i8
  store i8 %2422, i8* %56, align 1, !tbaa !2450
  %2423 = add i64 %2387, 9
  store i64 %2423, i64* %PC, align 8
  store i32 %2396, i32* %2394, align 4
  %2424 = load i64, i64* %RBP, align 8
  %2425 = add i64 %2424, -52
  %2426 = load i64, i64* %PC, align 8
  %2427 = add i64 %2426, 3
  store i64 %2427, i64* %PC, align 8
  %2428 = inttoptr i64 %2425 to i32*
  %2429 = load i32, i32* %2428, align 4
  %2430 = zext i32 %2429 to i64
  store i64 %2430, i64* %RAX, align 8, !tbaa !2428
  %2431 = add i64 %2424, -40
  %2432 = add i64 %2426, 6
  store i64 %2432, i64* %PC, align 8
  %2433 = inttoptr i64 %2431 to i32*
  %2434 = load i32, i32* %2433, align 4
  %2435 = sub i32 %2434, %2429
  %2436 = zext i32 %2435 to i64
  store i64 %2436, i64* %RSI, align 8, !tbaa !2428
  %2437 = icmp ult i32 %2434, %2429
  %2438 = zext i1 %2437 to i8
  store i8 %2438, i8* %51, align 1, !tbaa !2433
  %2439 = and i32 %2435, 255
  %2440 = tail call i32 @llvm.ctpop.i32(i32 %2439) #11
  %2441 = trunc i32 %2440 to i8
  %2442 = and i8 %2441, 1
  %2443 = xor i8 %2442, 1
  store i8 %2443, i8* %52, align 1, !tbaa !2447
  %2444 = xor i32 %2429, %2434
  %2445 = xor i32 %2444, %2435
  %2446 = lshr i32 %2445, 4
  %2447 = trunc i32 %2446 to i8
  %2448 = and i8 %2447, 1
  store i8 %2448, i8* %53, align 1, !tbaa !2451
  %2449 = icmp eq i32 %2435, 0
  %2450 = zext i1 %2449 to i8
  store i8 %2450, i8* %54, align 1, !tbaa !2448
  %2451 = lshr i32 %2435, 31
  %2452 = trunc i32 %2451 to i8
  store i8 %2452, i8* %55, align 1, !tbaa !2449
  %2453 = lshr i32 %2434, 31
  %2454 = lshr i32 %2429, 31
  %2455 = xor i32 %2454, %2453
  %2456 = xor i32 %2451, %2453
  %2457 = add nuw nsw i32 %2456, %2455
  %2458 = icmp eq i32 %2457, 2
  %2459 = zext i1 %2458 to i8
  store i8 %2459, i8* %56, align 1, !tbaa !2450
  %2460 = add i64 %2426, 11
  store i64 %2460, i64* %PC, align 8
  store i32 %2435, i32* %2433, align 4
  %2461 = load i64, i64* %RBP, align 8
  %2462 = add i64 %2461, -24
  %2463 = load i64, i64* %PC, align 8
  %2464 = add i64 %2463, 4
  store i64 %2464, i64* %PC, align 8
  %2465 = inttoptr i64 %2462 to i64*
  %2466 = load i64, i64* %2465, align 8
  store i64 %2466, i64* %RCX, align 8, !tbaa !2428
  %2467 = add i64 %2461, -32
  %2468 = add i64 %2463, 8
  store i64 %2468, i64* %PC, align 8
  %2469 = inttoptr i64 %2467 to i32*
  %2470 = load i32, i32* %2469, align 4
  %2471 = sext i32 %2470 to i64
  store i64 %2471, i64* %RDX, align 8, !tbaa !2428
  %2472 = shl nsw i64 %2471, 3
  %2473 = add i64 %2472, %2466
  %2474 = add i64 %2463, 13
  store i64 %2474, i64* %PC, align 8
  %2475 = inttoptr i64 %2473 to i64*
  %2476 = load i64, i64* %2475, align 8
  store i64 %2476, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2477 = add i64 %2461, -64
  %2478 = add i64 %2463, 18
  store i64 %2478, i64* %PC, align 8
  %2479 = inttoptr i64 %2477 to i64*
  store i64 %2476, i64* %2479, align 8
  %2480 = load i64, i64* %RBP, align 8
  %2481 = add i64 %2480, -24
  %2482 = load i64, i64* %PC, align 8
  %2483 = add i64 %2482, 4
  store i64 %2483, i64* %PC, align 8
  %2484 = inttoptr i64 %2481 to i64*
  %2485 = load i64, i64* %2484, align 8
  store i64 %2485, i64* %RCX, align 8, !tbaa !2428
  %2486 = add i64 %2480, -32
  %2487 = add i64 %2482, 7
  store i64 %2487, i64* %PC, align 8
  %2488 = inttoptr i64 %2486 to i32*
  %2489 = load i32, i32* %2488, align 4
  %2490 = add i32 %2489, 1
  %2491 = zext i32 %2490 to i64
  store i64 %2491, i64* %RAX, align 8, !tbaa !2428
  %2492 = icmp eq i32 %2489, -1
  %2493 = icmp eq i32 %2490, 0
  %2494 = or i1 %2492, %2493
  %2495 = zext i1 %2494 to i8
  store i8 %2495, i8* %51, align 1, !tbaa !2433
  %2496 = and i32 %2490, 255
  %2497 = tail call i32 @llvm.ctpop.i32(i32 %2496) #11
  %2498 = trunc i32 %2497 to i8
  %2499 = and i8 %2498, 1
  %2500 = xor i8 %2499, 1
  store i8 %2500, i8* %52, align 1, !tbaa !2447
  %2501 = xor i32 %2489, %2490
  %2502 = lshr i32 %2501, 4
  %2503 = trunc i32 %2502 to i8
  %2504 = and i8 %2503, 1
  store i8 %2504, i8* %53, align 1, !tbaa !2451
  %2505 = zext i1 %2493 to i8
  store i8 %2505, i8* %54, align 1, !tbaa !2448
  %2506 = lshr i32 %2490, 31
  %2507 = trunc i32 %2506 to i8
  store i8 %2507, i8* %55, align 1, !tbaa !2449
  %2508 = lshr i32 %2489, 31
  %2509 = xor i32 %2506, %2508
  %2510 = add nuw nsw i32 %2509, %2506
  %2511 = icmp eq i32 %2510, 2
  %2512 = zext i1 %2511 to i8
  store i8 %2512, i8* %56, align 1, !tbaa !2450
  %2513 = sext i32 %2490 to i64
  store i64 %2513, i64* %RDX, align 8, !tbaa !2428
  %2514 = shl nsw i64 %2513, 3
  %2515 = add i64 %2514, %2485
  %2516 = add i64 %2482, 18
  store i64 %2516, i64* %PC, align 8
  %2517 = inttoptr i64 %2515 to i64*
  %2518 = load i64, i64* %2517, align 8
  store i64 %2518, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2519 = add i64 %2480, -72
  %2520 = add i64 %2482, 23
  store i64 %2520, i64* %PC, align 8
  %2521 = inttoptr i64 %2519 to i64*
  store i64 %2518, i64* %2521, align 8
  %2522 = load i64, i64* %RBP, align 8
  %2523 = add i64 %2522, -24
  %2524 = load i64, i64* %PC, align 8
  %2525 = add i64 %2524, 4
  store i64 %2525, i64* %PC, align 8
  %2526 = inttoptr i64 %2523 to i64*
  %2527 = load i64, i64* %2526, align 8
  store i64 %2527, i64* %RCX, align 8, !tbaa !2428
  %2528 = add i64 %2522, -40
  %2529 = add i64 %2524, 8
  store i64 %2529, i64* %PC, align 8
  %2530 = inttoptr i64 %2528 to i32*
  %2531 = load i32, i32* %2530, align 4
  %2532 = sext i32 %2531 to i64
  store i64 %2532, i64* %RDX, align 8, !tbaa !2428
  %2533 = shl nsw i64 %2532, 3
  %2534 = add i64 %2533, %2527
  %2535 = add i64 %2524, 13
  store i64 %2535, i64* %PC, align 8
  %2536 = inttoptr i64 %2534 to i64*
  %2537 = load i64, i64* %2536, align 8
  store i64 %2537, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2538 = add i64 %2522, -80
  %2539 = add i64 %2524, 18
  store i64 %2539, i64* %PC, align 8
  %2540 = inttoptr i64 %2538 to i64*
  store i64 %2537, i64* %2540, align 8
  %2541 = load i64, i64* %RBP, align 8
  %2542 = add i64 %2541, -24
  %2543 = load i64, i64* %PC, align 8
  %2544 = add i64 %2543, 4
  store i64 %2544, i64* %PC, align 8
  %2545 = inttoptr i64 %2542 to i64*
  %2546 = load i64, i64* %2545, align 8
  store i64 %2546, i64* %RCX, align 8, !tbaa !2428
  %2547 = add i64 %2541, -40
  %2548 = add i64 %2543, 7
  store i64 %2548, i64* %PC, align 8
  %2549 = inttoptr i64 %2547 to i32*
  %2550 = load i32, i32* %2549, align 4
  %2551 = add i32 %2550, 1
  %2552 = zext i32 %2551 to i64
  store i64 %2552, i64* %RAX, align 8, !tbaa !2428
  %2553 = icmp eq i32 %2550, -1
  %2554 = icmp eq i32 %2551, 0
  %2555 = or i1 %2553, %2554
  %2556 = zext i1 %2555 to i8
  store i8 %2556, i8* %51, align 1, !tbaa !2433
  %2557 = and i32 %2551, 255
  %2558 = tail call i32 @llvm.ctpop.i32(i32 %2557) #11
  %2559 = trunc i32 %2558 to i8
  %2560 = and i8 %2559, 1
  %2561 = xor i8 %2560, 1
  store i8 %2561, i8* %52, align 1, !tbaa !2447
  %2562 = xor i32 %2550, %2551
  %2563 = lshr i32 %2562, 4
  %2564 = trunc i32 %2563 to i8
  %2565 = and i8 %2564, 1
  store i8 %2565, i8* %53, align 1, !tbaa !2451
  %2566 = zext i1 %2554 to i8
  store i8 %2566, i8* %54, align 1, !tbaa !2448
  %2567 = lshr i32 %2551, 31
  %2568 = trunc i32 %2567 to i8
  store i8 %2568, i8* %55, align 1, !tbaa !2449
  %2569 = lshr i32 %2550, 31
  %2570 = xor i32 %2567, %2569
  %2571 = add nuw nsw i32 %2570, %2567
  %2572 = icmp eq i32 %2571, 2
  %2573 = zext i1 %2572 to i8
  store i8 %2573, i8* %56, align 1, !tbaa !2450
  %2574 = sext i32 %2551 to i64
  store i64 %2574, i64* %RDX, align 8, !tbaa !2428
  %2575 = shl nsw i64 %2574, 3
  %2576 = add i64 %2575, %2546
  %2577 = add i64 %2543, 18
  store i64 %2577, i64* %PC, align 8
  %2578 = inttoptr i64 %2576 to i64*
  %2579 = load i64, i64* %2578, align 8
  store i64 %2579, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2580 = add i64 %2541, -88
  %2581 = add i64 %2543, 23
  store i64 %2581, i64* %PC, align 8
  %2582 = inttoptr i64 %2580 to i64*
  store i64 %2579, i64* %2582, align 8
  %2583 = load i64, i64* %RBP, align 8
  %2584 = add i64 %2583, -80
  %2585 = load i64, i64* %PC, align 8
  %2586 = add i64 %2585, 5
  store i64 %2586, i64* %PC, align 8
  %2587 = inttoptr i64 %2584 to i64*
  %2588 = load i64, i64* %2587, align 8
  store i64 %2588, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2589 = add i64 %2583, -24
  %2590 = add i64 %2585, 9
  store i64 %2590, i64* %PC, align 8
  %2591 = inttoptr i64 %2589 to i64*
  %2592 = load i64, i64* %2591, align 8
  store i64 %2592, i64* %RCX, align 8, !tbaa !2428
  %2593 = add i64 %2583, -32
  %2594 = add i64 %2585, 13
  store i64 %2594, i64* %PC, align 8
  %2595 = inttoptr i64 %2593 to i32*
  %2596 = load i32, i32* %2595, align 4
  %2597 = sext i32 %2596 to i64
  store i64 %2597, i64* %RDX, align 8, !tbaa !2428
  %2598 = shl nsw i64 %2597, 3
  %2599 = add i64 %2598, %2592
  %2600 = add i64 %2585, 18
  store i64 %2600, i64* %PC, align 8
  %2601 = inttoptr i64 %2599 to i64*
  store i64 %2588, i64* %2601, align 8
  %2602 = load i64, i64* %RBP, align 8
  %2603 = add i64 %2602, -88
  %2604 = load i64, i64* %PC, align 8
  %2605 = add i64 %2604, 5
  store i64 %2605, i64* %PC, align 8
  %2606 = inttoptr i64 %2603 to i64*
  %2607 = load i64, i64* %2606, align 8
  store i64 %2607, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2608 = add i64 %2602, -24
  %2609 = add i64 %2604, 9
  store i64 %2609, i64* %PC, align 8
  %2610 = inttoptr i64 %2608 to i64*
  %2611 = load i64, i64* %2610, align 8
  store i64 %2611, i64* %RCX, align 8, !tbaa !2428
  %2612 = add i64 %2602, -32
  %2613 = add i64 %2604, 12
  store i64 %2613, i64* %PC, align 8
  %2614 = inttoptr i64 %2612 to i32*
  %2615 = load i32, i32* %2614, align 4
  %2616 = add i32 %2615, 1
  %2617 = zext i32 %2616 to i64
  store i64 %2617, i64* %RAX, align 8, !tbaa !2428
  %2618 = icmp eq i32 %2615, -1
  %2619 = icmp eq i32 %2616, 0
  %2620 = or i1 %2618, %2619
  %2621 = zext i1 %2620 to i8
  store i8 %2621, i8* %51, align 1, !tbaa !2433
  %2622 = and i32 %2616, 255
  %2623 = tail call i32 @llvm.ctpop.i32(i32 %2622) #11
  %2624 = trunc i32 %2623 to i8
  %2625 = and i8 %2624, 1
  %2626 = xor i8 %2625, 1
  store i8 %2626, i8* %52, align 1, !tbaa !2447
  %2627 = xor i32 %2615, %2616
  %2628 = lshr i32 %2627, 4
  %2629 = trunc i32 %2628 to i8
  %2630 = and i8 %2629, 1
  store i8 %2630, i8* %53, align 1, !tbaa !2451
  %2631 = zext i1 %2619 to i8
  store i8 %2631, i8* %54, align 1, !tbaa !2448
  %2632 = lshr i32 %2616, 31
  %2633 = trunc i32 %2632 to i8
  store i8 %2633, i8* %55, align 1, !tbaa !2449
  %2634 = lshr i32 %2615, 31
  %2635 = xor i32 %2632, %2634
  %2636 = add nuw nsw i32 %2635, %2632
  %2637 = icmp eq i32 %2636, 2
  %2638 = zext i1 %2637 to i8
  store i8 %2638, i8* %56, align 1, !tbaa !2450
  %2639 = sext i32 %2616 to i64
  store i64 %2639, i64* %RDX, align 8, !tbaa !2428
  %2640 = shl nsw i64 %2639, 3
  %2641 = add i64 %2640, %2611
  %2642 = add i64 %2604, 23
  store i64 %2642, i64* %PC, align 8
  %2643 = inttoptr i64 %2641 to i64*
  store i64 %2607, i64* %2643, align 8
  %2644 = load i64, i64* %RBP, align 8
  %2645 = add i64 %2644, -64
  %2646 = load i64, i64* %PC, align 8
  %2647 = add i64 %2646, 5
  store i64 %2647, i64* %PC, align 8
  %2648 = inttoptr i64 %2645 to i64*
  %2649 = load i64, i64* %2648, align 8
  store i64 %2649, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2650 = add i64 %2644, -24
  %2651 = add i64 %2646, 9
  store i64 %2651, i64* %PC, align 8
  %2652 = inttoptr i64 %2650 to i64*
  %2653 = load i64, i64* %2652, align 8
  store i64 %2653, i64* %RCX, align 8, !tbaa !2428
  %2654 = add i64 %2644, -40
  %2655 = add i64 %2646, 13
  store i64 %2655, i64* %PC, align 8
  %2656 = inttoptr i64 %2654 to i32*
  %2657 = load i32, i32* %2656, align 4
  %2658 = sext i32 %2657 to i64
  store i64 %2658, i64* %RDX, align 8, !tbaa !2428
  %2659 = shl nsw i64 %2658, 3
  %2660 = add i64 %2659, %2653
  %2661 = add i64 %2646, 18
  store i64 %2661, i64* %PC, align 8
  %2662 = inttoptr i64 %2660 to i64*
  store i64 %2649, i64* %2662, align 8
  %2663 = load i64, i64* %RBP, align 8
  %2664 = add i64 %2663, -72
  %2665 = load i64, i64* %PC, align 8
  %2666 = add i64 %2665, 5
  store i64 %2666, i64* %PC, align 8
  %2667 = inttoptr i64 %2664 to i64*
  %2668 = load i64, i64* %2667, align 8
  store i64 %2668, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2669 = add i64 %2663, -24
  %2670 = add i64 %2665, 9
  store i64 %2670, i64* %PC, align 8
  %2671 = inttoptr i64 %2669 to i64*
  %2672 = load i64, i64* %2671, align 8
  store i64 %2672, i64* %RCX, align 8, !tbaa !2428
  %2673 = add i64 %2663, -40
  %2674 = add i64 %2665, 12
  store i64 %2674, i64* %PC, align 8
  %2675 = inttoptr i64 %2673 to i32*
  %2676 = load i32, i32* %2675, align 4
  %2677 = add i32 %2676, 1
  %2678 = zext i32 %2677 to i64
  store i64 %2678, i64* %RAX, align 8, !tbaa !2428
  %2679 = icmp eq i32 %2676, -1
  %2680 = icmp eq i32 %2677, 0
  %2681 = or i1 %2679, %2680
  %2682 = zext i1 %2681 to i8
  store i8 %2682, i8* %51, align 1, !tbaa !2433
  %2683 = and i32 %2677, 255
  %2684 = tail call i32 @llvm.ctpop.i32(i32 %2683) #11
  %2685 = trunc i32 %2684 to i8
  %2686 = and i8 %2685, 1
  %2687 = xor i8 %2686, 1
  store i8 %2687, i8* %52, align 1, !tbaa !2447
  %2688 = xor i32 %2676, %2677
  %2689 = lshr i32 %2688, 4
  %2690 = trunc i32 %2689 to i8
  %2691 = and i8 %2690, 1
  store i8 %2691, i8* %53, align 1, !tbaa !2451
  %2692 = zext i1 %2680 to i8
  store i8 %2692, i8* %54, align 1, !tbaa !2448
  %2693 = lshr i32 %2677, 31
  %2694 = trunc i32 %2693 to i8
  store i8 %2694, i8* %55, align 1, !tbaa !2449
  %2695 = lshr i32 %2676, 31
  %2696 = xor i32 %2693, %2695
  %2697 = add nuw nsw i32 %2696, %2693
  %2698 = icmp eq i32 %2697, 2
  %2699 = zext i1 %2698 to i8
  store i8 %2699, i8* %56, align 1, !tbaa !2450
  %2700 = sext i32 %2677 to i64
  store i64 %2700, i64* %RDX, align 8, !tbaa !2428
  %2701 = shl nsw i64 %2700, 3
  %2702 = add i64 %2701, %2672
  %2703 = add i64 %2665, 23
  store i64 %2703, i64* %PC, align 8
  %2704 = inttoptr i64 %2702 to i64*
  store i64 %2668, i64* %2704, align 8
  %2705 = load i64, i64* %RBP, align 8
  %2706 = add i64 %2705, -52
  %2707 = load i64, i64* %PC, align 8
  %2708 = add i64 %2707, 3
  store i64 %2708, i64* %PC, align 8
  %2709 = inttoptr i64 %2706 to i32*
  %2710 = load i32, i32* %2709, align 4
  %2711 = zext i32 %2710 to i64
  store i64 %2711, i64* %RAX, align 8, !tbaa !2428
  %2712 = add i64 %2705, -32
  %2713 = add i64 %2707, 6
  store i64 %2713, i64* %PC, align 8
  %2714 = inttoptr i64 %2712 to i32*
  %2715 = load i32, i32* %2714, align 4
  %2716 = add i32 %2715, %2710
  %2717 = zext i32 %2716 to i64
  store i64 %2717, i64* %RAX, align 8, !tbaa !2428
  %2718 = icmp ult i32 %2716, %2710
  %2719 = icmp ult i32 %2716, %2715
  %2720 = or i1 %2718, %2719
  %2721 = zext i1 %2720 to i8
  store i8 %2721, i8* %51, align 1, !tbaa !2433
  %2722 = and i32 %2716, 255
  %2723 = tail call i32 @llvm.ctpop.i32(i32 %2722) #11
  %2724 = trunc i32 %2723 to i8
  %2725 = and i8 %2724, 1
  %2726 = xor i8 %2725, 1
  store i8 %2726, i8* %52, align 1, !tbaa !2447
  %2727 = xor i32 %2715, %2710
  %2728 = xor i32 %2727, %2716
  %2729 = lshr i32 %2728, 4
  %2730 = trunc i32 %2729 to i8
  %2731 = and i8 %2730, 1
  store i8 %2731, i8* %53, align 1, !tbaa !2451
  %2732 = icmp eq i32 %2716, 0
  %2733 = zext i1 %2732 to i8
  store i8 %2733, i8* %54, align 1, !tbaa !2448
  %2734 = lshr i32 %2716, 31
  %2735 = trunc i32 %2734 to i8
  store i8 %2735, i8* %55, align 1, !tbaa !2449
  %2736 = lshr i32 %2710, 31
  %2737 = lshr i32 %2715, 31
  %2738 = xor i32 %2734, %2736
  %2739 = xor i32 %2734, %2737
  %2740 = add nuw nsw i32 %2738, %2739
  %2741 = icmp eq i32 %2740, 2
  %2742 = zext i1 %2741 to i8
  store i8 %2742, i8* %56, align 1, !tbaa !2450
  %2743 = add i64 %2707, 9
  store i64 %2743, i64* %PC, align 8
  store i32 %2716, i32* %2714, align 4
  %2744 = load i64, i64* %RBP, align 8
  %2745 = add i64 %2744, -52
  %2746 = load i64, i64* %PC, align 8
  %2747 = add i64 %2746, 3
  store i64 %2747, i64* %PC, align 8
  %2748 = inttoptr i64 %2745 to i32*
  %2749 = load i32, i32* %2748, align 4
  %2750 = shl i32 %2749, 1
  %2751 = icmp slt i32 %2749, 0
  %2752 = icmp slt i32 %2750, 0
  %2753 = xor i1 %2751, %2752
  %2754 = zext i32 %2750 to i64
  store i64 %2754, i64* %RAX, align 8, !tbaa !2428
  %.lobit18 = lshr i32 %2749, 31
  %2755 = trunc i32 %.lobit18 to i8
  store i8 %2755, i8* %51, align 1, !tbaa !2432
  %2756 = and i32 %2750, 254
  %2757 = tail call i32 @llvm.ctpop.i32(i32 %2756) #11
  %2758 = trunc i32 %2757 to i8
  %2759 = and i8 %2758, 1
  %2760 = xor i8 %2759, 1
  store i8 %2760, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %2761 = icmp eq i32 %2750, 0
  %2762 = zext i1 %2761 to i8
  store i8 %2762, i8* %54, align 1, !tbaa !2432
  %2763 = lshr i32 %2749, 30
  %2764 = and i32 %2763, 1
  %2765 = trunc i32 %2764 to i8
  store i8 %2765, i8* %55, align 1, !tbaa !2432
  %2766 = zext i1 %2753 to i8
  store i8 %2766, i8* %56, align 1, !tbaa !2432
  %2767 = add i64 %2744, -40
  %2768 = add i64 %2746, 9
  store i64 %2768, i64* %PC, align 8
  %2769 = inttoptr i64 %2767 to i32*
  %2770 = load i32, i32* %2769, align 4
  %2771 = add i32 %2770, %2750
  %2772 = zext i32 %2771 to i64
  store i64 %2772, i64* %RAX, align 8, !tbaa !2428
  %2773 = icmp ult i32 %2771, %2750
  %2774 = icmp ult i32 %2771, %2770
  %2775 = or i1 %2773, %2774
  %2776 = zext i1 %2775 to i8
  store i8 %2776, i8* %51, align 1, !tbaa !2433
  %2777 = and i32 %2771, 255
  %2778 = tail call i32 @llvm.ctpop.i32(i32 %2777) #11
  %2779 = trunc i32 %2778 to i8
  %2780 = and i8 %2779, 1
  %2781 = xor i8 %2780, 1
  store i8 %2781, i8* %52, align 1, !tbaa !2447
  %2782 = xor i32 %2770, %2750
  %2783 = xor i32 %2782, %2771
  %2784 = lshr i32 %2783, 4
  %2785 = trunc i32 %2784 to i8
  %2786 = and i8 %2785, 1
  store i8 %2786, i8* %53, align 1, !tbaa !2451
  %2787 = icmp eq i32 %2771, 0
  %2788 = zext i1 %2787 to i8
  store i8 %2788, i8* %54, align 1, !tbaa !2448
  %2789 = lshr i32 %2771, 31
  %2790 = trunc i32 %2789 to i8
  store i8 %2790, i8* %55, align 1, !tbaa !2449
  %2791 = lshr i32 %2770, 31
  %2792 = xor i32 %2789, %2764
  %2793 = xor i32 %2789, %2791
  %2794 = add nuw nsw i32 %2792, %2793
  %2795 = icmp eq i32 %2794, 2
  %2796 = zext i1 %2795 to i8
  store i8 %2796, i8* %56, align 1, !tbaa !2450
  %2797 = add i64 %2746, 12
  store i64 %2797, i64* %PC, align 8
  store i32 %2771, i32* %2769, align 4
  %2798 = load i64, i64* %RBP, align 8
  %2799 = add i64 %2798, -24
  %2800 = load i64, i64* %PC, align 8
  %2801 = add i64 %2800, 4
  store i64 %2801, i64* %PC, align 8
  %2802 = inttoptr i64 %2799 to i64*
  %2803 = load i64, i64* %2802, align 8
  store i64 %2803, i64* %RCX, align 8, !tbaa !2428
  %2804 = add i64 %2798, -32
  %2805 = add i64 %2800, 8
  store i64 %2805, i64* %PC, align 8
  %2806 = inttoptr i64 %2804 to i32*
  %2807 = load i32, i32* %2806, align 4
  %2808 = sext i32 %2807 to i64
  store i64 %2808, i64* %RDX, align 8, !tbaa !2428
  %2809 = shl nsw i64 %2808, 3
  %2810 = add i64 %2809, %2803
  %2811 = add i64 %2800, 13
  store i64 %2811, i64* %PC, align 8
  %2812 = inttoptr i64 %2810 to i64*
  %2813 = load i64, i64* %2812, align 8
  store i64 %2813, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2814 = add i64 %2798, -64
  %2815 = add i64 %2800, 18
  store i64 %2815, i64* %PC, align 8
  %2816 = inttoptr i64 %2814 to i64*
  store i64 %2813, i64* %2816, align 8
  %2817 = load i64, i64* %RBP, align 8
  %2818 = add i64 %2817, -24
  %2819 = load i64, i64* %PC, align 8
  %2820 = add i64 %2819, 4
  store i64 %2820, i64* %PC, align 8
  %2821 = inttoptr i64 %2818 to i64*
  %2822 = load i64, i64* %2821, align 8
  store i64 %2822, i64* %RCX, align 8, !tbaa !2428
  %2823 = add i64 %2817, -32
  %2824 = add i64 %2819, 7
  store i64 %2824, i64* %PC, align 8
  %2825 = inttoptr i64 %2823 to i32*
  %2826 = load i32, i32* %2825, align 4
  %2827 = add i32 %2826, 1
  %2828 = zext i32 %2827 to i64
  store i64 %2828, i64* %RAX, align 8, !tbaa !2428
  %2829 = icmp eq i32 %2826, -1
  %2830 = icmp eq i32 %2827, 0
  %2831 = or i1 %2829, %2830
  %2832 = zext i1 %2831 to i8
  store i8 %2832, i8* %51, align 1, !tbaa !2433
  %2833 = and i32 %2827, 255
  %2834 = tail call i32 @llvm.ctpop.i32(i32 %2833) #11
  %2835 = trunc i32 %2834 to i8
  %2836 = and i8 %2835, 1
  %2837 = xor i8 %2836, 1
  store i8 %2837, i8* %52, align 1, !tbaa !2447
  %2838 = xor i32 %2826, %2827
  %2839 = lshr i32 %2838, 4
  %2840 = trunc i32 %2839 to i8
  %2841 = and i8 %2840, 1
  store i8 %2841, i8* %53, align 1, !tbaa !2451
  %2842 = zext i1 %2830 to i8
  store i8 %2842, i8* %54, align 1, !tbaa !2448
  %2843 = lshr i32 %2827, 31
  %2844 = trunc i32 %2843 to i8
  store i8 %2844, i8* %55, align 1, !tbaa !2449
  %2845 = lshr i32 %2826, 31
  %2846 = xor i32 %2843, %2845
  %2847 = add nuw nsw i32 %2846, %2843
  %2848 = icmp eq i32 %2847, 2
  %2849 = zext i1 %2848 to i8
  store i8 %2849, i8* %56, align 1, !tbaa !2450
  %2850 = sext i32 %2827 to i64
  store i64 %2850, i64* %RDX, align 8, !tbaa !2428
  %2851 = shl nsw i64 %2850, 3
  %2852 = add i64 %2851, %2822
  %2853 = add i64 %2819, 18
  store i64 %2853, i64* %PC, align 8
  %2854 = inttoptr i64 %2852 to i64*
  %2855 = load i64, i64* %2854, align 8
  store i64 %2855, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2856 = add i64 %2817, -72
  %2857 = add i64 %2819, 23
  store i64 %2857, i64* %PC, align 8
  %2858 = inttoptr i64 %2856 to i64*
  store i64 %2855, i64* %2858, align 8
  %2859 = load i64, i64* %RBP, align 8
  %2860 = add i64 %2859, -24
  %2861 = load i64, i64* %PC, align 8
  %2862 = add i64 %2861, 4
  store i64 %2862, i64* %PC, align 8
  %2863 = inttoptr i64 %2860 to i64*
  %2864 = load i64, i64* %2863, align 8
  store i64 %2864, i64* %RCX, align 8, !tbaa !2428
  %2865 = add i64 %2859, -40
  %2866 = add i64 %2861, 8
  store i64 %2866, i64* %PC, align 8
  %2867 = inttoptr i64 %2865 to i32*
  %2868 = load i32, i32* %2867, align 4
  %2869 = sext i32 %2868 to i64
  store i64 %2869, i64* %RDX, align 8, !tbaa !2428
  %2870 = shl nsw i64 %2869, 3
  %2871 = add i64 %2870, %2864
  %2872 = add i64 %2861, 13
  store i64 %2872, i64* %PC, align 8
  %2873 = inttoptr i64 %2871 to i64*
  %2874 = load i64, i64* %2873, align 8
  store i64 %2874, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2875 = add i64 %2859, -80
  %2876 = add i64 %2861, 18
  store i64 %2876, i64* %PC, align 8
  %2877 = inttoptr i64 %2875 to i64*
  store i64 %2874, i64* %2877, align 8
  %2878 = load i64, i64* %RBP, align 8
  %2879 = add i64 %2878, -24
  %2880 = load i64, i64* %PC, align 8
  %2881 = add i64 %2880, 4
  store i64 %2881, i64* %PC, align 8
  %2882 = inttoptr i64 %2879 to i64*
  %2883 = load i64, i64* %2882, align 8
  store i64 %2883, i64* %RCX, align 8, !tbaa !2428
  %2884 = add i64 %2878, -40
  %2885 = add i64 %2880, 7
  store i64 %2885, i64* %PC, align 8
  %2886 = inttoptr i64 %2884 to i32*
  %2887 = load i32, i32* %2886, align 4
  %2888 = add i32 %2887, 1
  %2889 = zext i32 %2888 to i64
  store i64 %2889, i64* %RAX, align 8, !tbaa !2428
  %2890 = icmp eq i32 %2887, -1
  %2891 = icmp eq i32 %2888, 0
  %2892 = or i1 %2890, %2891
  %2893 = zext i1 %2892 to i8
  store i8 %2893, i8* %51, align 1, !tbaa !2433
  %2894 = and i32 %2888, 255
  %2895 = tail call i32 @llvm.ctpop.i32(i32 %2894) #11
  %2896 = trunc i32 %2895 to i8
  %2897 = and i8 %2896, 1
  %2898 = xor i8 %2897, 1
  store i8 %2898, i8* %52, align 1, !tbaa !2447
  %2899 = xor i32 %2887, %2888
  %2900 = lshr i32 %2899, 4
  %2901 = trunc i32 %2900 to i8
  %2902 = and i8 %2901, 1
  store i8 %2902, i8* %53, align 1, !tbaa !2451
  %2903 = zext i1 %2891 to i8
  store i8 %2903, i8* %54, align 1, !tbaa !2448
  %2904 = lshr i32 %2888, 31
  %2905 = trunc i32 %2904 to i8
  store i8 %2905, i8* %55, align 1, !tbaa !2449
  %2906 = lshr i32 %2887, 31
  %2907 = xor i32 %2904, %2906
  %2908 = add nuw nsw i32 %2907, %2904
  %2909 = icmp eq i32 %2908, 2
  %2910 = zext i1 %2909 to i8
  store i8 %2910, i8* %56, align 1, !tbaa !2450
  %2911 = sext i32 %2888 to i64
  store i64 %2911, i64* %RDX, align 8, !tbaa !2428
  %2912 = shl nsw i64 %2911, 3
  %2913 = add i64 %2912, %2883
  %2914 = add i64 %2880, 18
  store i64 %2914, i64* %PC, align 8
  %2915 = inttoptr i64 %2913 to i64*
  %2916 = load i64, i64* %2915, align 8
  store i64 %2916, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2917 = add i64 %2878, -88
  %2918 = add i64 %2880, 23
  store i64 %2918, i64* %PC, align 8
  %2919 = inttoptr i64 %2917 to i64*
  store i64 %2916, i64* %2919, align 8
  %2920 = load i64, i64* %RBP, align 8
  %2921 = add i64 %2920, -80
  %2922 = load i64, i64* %PC, align 8
  %2923 = add i64 %2922, 5
  store i64 %2923, i64* %PC, align 8
  %2924 = inttoptr i64 %2921 to i64*
  %2925 = load i64, i64* %2924, align 8
  store i64 %2925, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2926 = add i64 %2920, -24
  %2927 = add i64 %2922, 9
  store i64 %2927, i64* %PC, align 8
  %2928 = inttoptr i64 %2926 to i64*
  %2929 = load i64, i64* %2928, align 8
  store i64 %2929, i64* %RCX, align 8, !tbaa !2428
  %2930 = add i64 %2920, -32
  %2931 = add i64 %2922, 13
  store i64 %2931, i64* %PC, align 8
  %2932 = inttoptr i64 %2930 to i32*
  %2933 = load i32, i32* %2932, align 4
  %2934 = sext i32 %2933 to i64
  store i64 %2934, i64* %RDX, align 8, !tbaa !2428
  %2935 = shl nsw i64 %2934, 3
  %2936 = add i64 %2935, %2929
  %2937 = add i64 %2922, 18
  store i64 %2937, i64* %PC, align 8
  %2938 = inttoptr i64 %2936 to i64*
  store i64 %2925, i64* %2938, align 8
  %2939 = load i64, i64* %RBP, align 8
  %2940 = add i64 %2939, -88
  %2941 = load i64, i64* %PC, align 8
  %2942 = add i64 %2941, 5
  store i64 %2942, i64* %PC, align 8
  %2943 = inttoptr i64 %2940 to i64*
  %2944 = load i64, i64* %2943, align 8
  store i64 %2944, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2945 = add i64 %2939, -24
  %2946 = add i64 %2941, 9
  store i64 %2946, i64* %PC, align 8
  %2947 = inttoptr i64 %2945 to i64*
  %2948 = load i64, i64* %2947, align 8
  store i64 %2948, i64* %RCX, align 8, !tbaa !2428
  %2949 = add i64 %2939, -32
  %2950 = add i64 %2941, 12
  store i64 %2950, i64* %PC, align 8
  %2951 = inttoptr i64 %2949 to i32*
  %2952 = load i32, i32* %2951, align 4
  %2953 = add i32 %2952, 1
  %2954 = zext i32 %2953 to i64
  store i64 %2954, i64* %RAX, align 8, !tbaa !2428
  %2955 = icmp eq i32 %2952, -1
  %2956 = icmp eq i32 %2953, 0
  %2957 = or i1 %2955, %2956
  %2958 = zext i1 %2957 to i8
  store i8 %2958, i8* %51, align 1, !tbaa !2433
  %2959 = and i32 %2953, 255
  %2960 = tail call i32 @llvm.ctpop.i32(i32 %2959) #11
  %2961 = trunc i32 %2960 to i8
  %2962 = and i8 %2961, 1
  %2963 = xor i8 %2962, 1
  store i8 %2963, i8* %52, align 1, !tbaa !2447
  %2964 = xor i32 %2952, %2953
  %2965 = lshr i32 %2964, 4
  %2966 = trunc i32 %2965 to i8
  %2967 = and i8 %2966, 1
  store i8 %2967, i8* %53, align 1, !tbaa !2451
  %2968 = zext i1 %2956 to i8
  store i8 %2968, i8* %54, align 1, !tbaa !2448
  %2969 = lshr i32 %2953, 31
  %2970 = trunc i32 %2969 to i8
  store i8 %2970, i8* %55, align 1, !tbaa !2449
  %2971 = lshr i32 %2952, 31
  %2972 = xor i32 %2969, %2971
  %2973 = add nuw nsw i32 %2972, %2969
  %2974 = icmp eq i32 %2973, 2
  %2975 = zext i1 %2974 to i8
  store i8 %2975, i8* %56, align 1, !tbaa !2450
  %2976 = sext i32 %2953 to i64
  store i64 %2976, i64* %RDX, align 8, !tbaa !2428
  %2977 = shl nsw i64 %2976, 3
  %2978 = add i64 %2977, %2948
  %2979 = add i64 %2941, 23
  store i64 %2979, i64* %PC, align 8
  %2980 = inttoptr i64 %2978 to i64*
  store i64 %2944, i64* %2980, align 8
  %2981 = load i64, i64* %RBP, align 8
  %2982 = add i64 %2981, -64
  %2983 = load i64, i64* %PC, align 8
  %2984 = add i64 %2983, 5
  store i64 %2984, i64* %PC, align 8
  %2985 = inttoptr i64 %2982 to i64*
  %2986 = load i64, i64* %2985, align 8
  store i64 %2986, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %2987 = add i64 %2981, -24
  %2988 = add i64 %2983, 9
  store i64 %2988, i64* %PC, align 8
  %2989 = inttoptr i64 %2987 to i64*
  %2990 = load i64, i64* %2989, align 8
  store i64 %2990, i64* %RCX, align 8, !tbaa !2428
  %2991 = add i64 %2981, -40
  %2992 = add i64 %2983, 13
  store i64 %2992, i64* %PC, align 8
  %2993 = inttoptr i64 %2991 to i32*
  %2994 = load i32, i32* %2993, align 4
  %2995 = sext i32 %2994 to i64
  store i64 %2995, i64* %RDX, align 8, !tbaa !2428
  %2996 = shl nsw i64 %2995, 3
  %2997 = add i64 %2996, %2990
  %2998 = add i64 %2983, 18
  store i64 %2998, i64* %PC, align 8
  %2999 = inttoptr i64 %2997 to i64*
  store i64 %2986, i64* %2999, align 8
  %3000 = load i64, i64* %RBP, align 8
  %3001 = add i64 %3000, -72
  %3002 = load i64, i64* %PC, align 8
  %3003 = add i64 %3002, 5
  store i64 %3003, i64* %PC, align 8
  %3004 = inttoptr i64 %3001 to i64*
  %3005 = load i64, i64* %3004, align 8
  store i64 %3005, i64* %1819, align 1, !tbaa !2452
  store double 0.000000e+00, double* %238, align 1, !tbaa !2452
  %3006 = add i64 %3000, -24
  %3007 = add i64 %3002, 9
  store i64 %3007, i64* %PC, align 8
  %3008 = inttoptr i64 %3006 to i64*
  %3009 = load i64, i64* %3008, align 8
  store i64 %3009, i64* %RCX, align 8, !tbaa !2428
  %3010 = add i64 %3000, -40
  %3011 = add i64 %3002, 12
  store i64 %3011, i64* %PC, align 8
  %3012 = inttoptr i64 %3010 to i32*
  %3013 = load i32, i32* %3012, align 4
  %3014 = add i32 %3013, 1
  %3015 = zext i32 %3014 to i64
  store i64 %3015, i64* %RAX, align 8, !tbaa !2428
  %3016 = icmp eq i32 %3013, -1
  %3017 = icmp eq i32 %3014, 0
  %3018 = or i1 %3016, %3017
  %3019 = zext i1 %3018 to i8
  store i8 %3019, i8* %51, align 1, !tbaa !2433
  %3020 = and i32 %3014, 255
  %3021 = tail call i32 @llvm.ctpop.i32(i32 %3020) #11
  %3022 = trunc i32 %3021 to i8
  %3023 = and i8 %3022, 1
  %3024 = xor i8 %3023, 1
  store i8 %3024, i8* %52, align 1, !tbaa !2447
  %3025 = xor i32 %3013, %3014
  %3026 = lshr i32 %3025, 4
  %3027 = trunc i32 %3026 to i8
  %3028 = and i8 %3027, 1
  store i8 %3028, i8* %53, align 1, !tbaa !2451
  %3029 = zext i1 %3017 to i8
  store i8 %3029, i8* %54, align 1, !tbaa !2448
  %3030 = lshr i32 %3014, 31
  %3031 = trunc i32 %3030 to i8
  store i8 %3031, i8* %55, align 1, !tbaa !2449
  %3032 = lshr i32 %3013, 31
  %3033 = xor i32 %3030, %3032
  %3034 = add nuw nsw i32 %3033, %3030
  %3035 = icmp eq i32 %3034, 2
  %3036 = zext i1 %3035 to i8
  store i8 %3036, i8* %56, align 1, !tbaa !2450
  %3037 = sext i32 %3014 to i64
  store i64 %3037, i64* %RDX, align 8, !tbaa !2428
  %3038 = shl nsw i64 %3037, 3
  %3039 = add i64 %3038, %3009
  %3040 = add i64 %3002, 23
  store i64 %3040, i64* %PC, align 8
  %3041 = inttoptr i64 %3039 to i64*
  store i64 %3005, i64* %3041, align 8
  %3042 = load i64, i64* %RBP, align 8
  %3043 = add i64 %3042, -28
  %3044 = load i64, i64* %PC, align 8
  %3045 = add i64 %3044, 3
  store i64 %3045, i64* %PC, align 8
  %3046 = inttoptr i64 %3043 to i32*
  %3047 = load i32, i32* %3046, align 4
  %3048 = add i32 %3047, 1
  %3049 = zext i32 %3048 to i64
  store i64 %3049, i64* %RAX, align 8, !tbaa !2428
  %3050 = icmp eq i32 %3047, -1
  %3051 = icmp eq i32 %3048, 0
  %3052 = or i1 %3050, %3051
  %3053 = zext i1 %3052 to i8
  store i8 %3053, i8* %51, align 1, !tbaa !2433
  %3054 = and i32 %3048, 255
  %3055 = tail call i32 @llvm.ctpop.i32(i32 %3054) #11
  %3056 = trunc i32 %3055 to i8
  %3057 = and i8 %3056, 1
  %3058 = xor i8 %3057, 1
  store i8 %3058, i8* %52, align 1, !tbaa !2447
  %3059 = xor i32 %3047, %3048
  %3060 = lshr i32 %3059, 4
  %3061 = trunc i32 %3060 to i8
  %3062 = and i8 %3061, 1
  store i8 %3062, i8* %53, align 1, !tbaa !2451
  %3063 = zext i1 %3051 to i8
  store i8 %3063, i8* %54, align 1, !tbaa !2448
  %3064 = lshr i32 %3048, 31
  %3065 = trunc i32 %3064 to i8
  store i8 %3065, i8* %55, align 1, !tbaa !2449
  %3066 = lshr i32 %3047, 31
  %3067 = xor i32 %3064, %3066
  %3068 = add nuw nsw i32 %3067, %3064
  %3069 = icmp eq i32 %3068, 2
  %3070 = zext i1 %3069 to i8
  store i8 %3070, i8* %56, align 1, !tbaa !2450
  %3071 = add i64 %3044, 9
  store i64 %3071, i64* %PC, align 8
  store i32 %3048, i32* %3046, align 4
  %3072 = load i64, i64* %PC, align 8
  %3073 = add i64 %3072, -779
  store i64 %3073, i64* %PC, align 8, !tbaa !2428
  br label %block_40127d

block_401205:                                     ; preds = %block_401211, %block_4011f5
  %3074 = phi i64 [ %541, %block_401211 ], [ %.pre3, %block_4011f5 ]
  %3075 = load i64, i64* %RBP, align 8
  %3076 = add i64 %3075, -28
  %3077 = add i64 %3074, 3
  store i64 %3077, i64* %PC, align 8
  %3078 = inttoptr i64 %3076 to i32*
  %3079 = load i32, i32* %3078, align 4
  %3080 = zext i32 %3079 to i64
  store i64 %3080, i64* %RAX, align 8, !tbaa !2428
  %3081 = add i64 %3075, -48
  %3082 = add i64 %3074, 6
  store i64 %3082, i64* %PC, align 8
  %3083 = inttoptr i64 %3081 to i32*
  %3084 = load i32, i32* %3083, align 4
  %3085 = sub i32 %3079, %3084
  %3086 = icmp ult i32 %3079, %3084
  %3087 = zext i1 %3086 to i8
  store i8 %3087, i8* %51, align 1, !tbaa !2433
  %3088 = and i32 %3085, 255
  %3089 = tail call i32 @llvm.ctpop.i32(i32 %3088) #11
  %3090 = trunc i32 %3089 to i8
  %3091 = and i8 %3090, 1
  %3092 = xor i8 %3091, 1
  store i8 %3092, i8* %52, align 1, !tbaa !2447
  %3093 = xor i32 %3084, %3079
  %3094 = xor i32 %3093, %3085
  %3095 = lshr i32 %3094, 4
  %3096 = trunc i32 %3095 to i8
  %3097 = and i8 %3096, 1
  store i8 %3097, i8* %53, align 1, !tbaa !2451
  %3098 = icmp eq i32 %3085, 0
  %3099 = zext i1 %3098 to i8
  store i8 %3099, i8* %54, align 1, !tbaa !2448
  %3100 = lshr i32 %3085, 31
  %3101 = trunc i32 %3100 to i8
  store i8 %3101, i8* %55, align 1, !tbaa !2449
  %3102 = lshr i32 %3079, 31
  %3103 = lshr i32 %3084, 31
  %3104 = xor i32 %3103, %3102
  %3105 = xor i32 %3100, %3102
  %3106 = add nuw nsw i32 %3105, %3104
  %3107 = icmp eq i32 %3106, 2
  %3108 = zext i1 %3107 to i8
  store i8 %3108, i8* %56, align 1, !tbaa !2450
  %3109 = icmp ne i8 %3101, 0
  %3110 = xor i1 %3109, %3107
  %.v9 = select i1 %3110, i64 12, i64 56
  %3111 = add i64 %3074, %.v9
  store i64 %3111, i64* %PC, align 8, !tbaa !2428
  br i1 %3110, label %block_401211, label %block_40123d
}

; Function Attrs: noinline
define %struct.Memory* @sub_400e30_makewt(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400e30:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = load i64, i64* %RSP, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %7, i64* %11, align 8
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -72
  store i64 %13, i64* %RSP, align 8, !tbaa !2428
  %14 = icmp ult i64 %10, 64
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1, !tbaa !2433
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #11
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !2447
  %24 = xor i64 %10, %13
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2451
  %29 = icmp eq i64 %13, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %13, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %10, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = add i64 %9, -12
  %42 = load i32, i32* %EDI, align 4
  %43 = add i64 %12, 10
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %41 to i32*
  store i32 %42, i32* %44, align 4
  %45 = load i64, i64* %RBP, align 8
  %46 = add i64 %45, -16
  %47 = load i64, i64* %RSI, align 8
  %48 = load i64, i64* %PC, align 8
  %49 = add i64 %48, 4
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %46 to i64*
  store i64 %47, i64* %50, align 8
  %51 = load i64, i64* %RBP, align 8
  %52 = add i64 %51, -24
  %53 = load i64, i64* %RDX, align 8
  %54 = load i64, i64* %PC, align 8
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC, align 8
  %56 = inttoptr i64 %52 to i64*
  store i64 %53, i64* %56, align 8
  %57 = load i64, i64* %RBP, align 8
  %58 = add i64 %57, -4
  %59 = load i64, i64* %PC, align 8
  %60 = add i64 %59, 4
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %58 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = add i32 %62, -2
  %64 = icmp ult i32 %62, 2
  %65 = zext i1 %64 to i8
  store i8 %65, i8* %16, align 1, !tbaa !2433
  %66 = and i32 %63, 255
  %67 = tail call i32 @llvm.ctpop.i32(i32 %66) #11
  %68 = trunc i32 %67 to i8
  %69 = and i8 %68, 1
  %70 = xor i8 %69, 1
  store i8 %70, i8* %23, align 1, !tbaa !2447
  %71 = xor i32 %62, %63
  %72 = lshr i32 %71, 4
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  store i8 %74, i8* %28, align 1, !tbaa !2451
  %75 = icmp eq i32 %63, 0
  %76 = zext i1 %75 to i8
  store i8 %76, i8* %31, align 1, !tbaa !2448
  %77 = lshr i32 %63, 31
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %34, align 1, !tbaa !2449
  %79 = lshr i32 %62, 31
  %80 = xor i32 %77, %79
  %81 = add nuw nsw i32 %80, %79
  %82 = icmp eq i32 %81, 2
  %83 = zext i1 %82 to i8
  store i8 %83, i8* %40, align 1, !tbaa !2450
  %84 = icmp ne i8 %78, 0
  %85 = xor i1 %84, %82
  %86 = or i1 %75, %85
  %.v = select i1 %86, i64 347, i64 10
  %87 = add i64 %59, %.v
  store i64 %87, i64* %PC, align 8, !tbaa !2428
  br i1 %86, label %block_400f9e, label %block_400e4d

block_400f9e:                                     ; preds = %block_400f99, %block_400e30
  %88 = phi i64 [ %87, %block_400e30 ], [ %580, %block_400f99 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400e30 ], [ %MEMORY.1, %block_400f99 ]
  %89 = load i64, i64* %RSP, align 8
  %90 = add i64 %89, 64
  store i64 %90, i64* %RSP, align 8, !tbaa !2428
  %91 = icmp ugt i64 %89, -65
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %16, align 1, !tbaa !2433
  %93 = trunc i64 %90 to i32
  %94 = and i32 %93, 255
  %95 = tail call i32 @llvm.ctpop.i32(i32 %94) #11
  %96 = trunc i32 %95 to i8
  %97 = and i8 %96, 1
  %98 = xor i8 %97, 1
  store i8 %98, i8* %23, align 1, !tbaa !2447
  %99 = xor i64 %89, %90
  %100 = lshr i64 %99, 4
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  store i8 %102, i8* %28, align 1, !tbaa !2451
  %103 = icmp eq i64 %90, 0
  %104 = zext i1 %103 to i8
  store i8 %104, i8* %31, align 1, !tbaa !2448
  %105 = lshr i64 %90, 63
  %106 = trunc i64 %105 to i8
  store i8 %106, i8* %34, align 1, !tbaa !2449
  %107 = lshr i64 %89, 63
  %108 = xor i64 %105, %107
  %109 = add nuw nsw i64 %108, %105
  %110 = icmp eq i64 %109, 2
  %111 = zext i1 %110 to i8
  store i8 %111, i8* %40, align 1, !tbaa !2450
  %112 = add i64 %88, 5
  store i64 %112, i64* %PC, align 8
  %113 = add i64 %89, 72
  %114 = inttoptr i64 %90 to i64*
  %115 = load i64, i64* %114, align 8
  store i64 %115, i64* %RBP, align 8, !tbaa !2428
  store i64 %113, i64* %RSP, align 8, !tbaa !2428
  %116 = add i64 %88, 6
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %113 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %PC, align 8, !tbaa !2428
  %119 = add i64 %89, 80
  store i64 %119, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400eda:                                     ; preds = %block_400e4d
  %120 = add i64 %292, -28
  %121 = add i64 %322, 7
  store i64 %121, i64* %PC, align 8
  %122 = inttoptr i64 %120 to i32*
  store i32 2, i32* %122, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_400ee1

block_400e4d:                                     ; preds = %block_400e30
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %124 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 64) to i64*), align 16
  %125 = bitcast [32 x %union.VectorReg]* %4 to double*
  %126 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %4, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %124, i64* %126, align 1, !tbaa !2452
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %128 = bitcast i64* %127 to double*
  store double 0.000000e+00, double* %128, align 1, !tbaa !2452
  %129 = add i64 %87, 11
  store i64 %129, i64* %PC, align 8
  %130 = load i32, i32* %61, align 4
  %131 = zext i32 %130 to i64
  %132 = shl nuw i64 %131, 32
  %133 = ashr i64 %132, 33
  %134 = trunc i32 %130 to i8
  %135 = and i8 %134, 1
  %136 = trunc i64 %133 to i32
  %137 = and i64 %133, 4294967295
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  store i8 %135, i8* %16, align 1, !tbaa !2432
  %138 = and i32 %136, 255
  %139 = tail call i32 @llvm.ctpop.i32(i32 %138) #11
  %140 = trunc i32 %139 to i8
  %141 = and i8 %140, 1
  %142 = xor i8 %141, 1
  store i8 %142, i8* %23, align 1, !tbaa !2432
  store i8 0, i8* %28, align 1, !tbaa !2432
  %143 = icmp eq i32 %136, 0
  %144 = zext i1 %143 to i8
  store i8 %144, i8* %31, align 1, !tbaa !2432
  %145 = lshr i64 %133, 31
  %146 = trunc i64 %145 to i8
  %147 = and i8 %146, 1
  store i8 %147, i8* %34, align 1, !tbaa !2432
  store i8 0, i8* %40, align 1, !tbaa !2432
  %148 = add i64 %57, -32
  %149 = add i64 %87, 17
  store i64 %149, i64* %PC, align 8
  %150 = inttoptr i64 %148 to i32*
  store i32 %136, i32* %150, align 4
  %151 = load i64, i64* %PC, align 8
  %152 = add i64 %151, -2014
  %153 = add i64 %151, 5
  %154 = load i64, i64* %RSP, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %153, i64* %156, align 8
  store i64 %155, i64* %RSP, align 8, !tbaa !2428
  store i64 %152, i64* %PC, align 8, !alias.scope !2454, !noalias !2457
  %157 = load double, double* %125, align 8, !alias.scope !2454, !noalias !2457
  %158 = load i64, i64* %156, align 8
  store i64 %154, i64* %RSP, align 8, !alias.scope !2454, !noalias !2457
  %159 = tail call double @atan(double %157)
  %160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 2
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 3
  %162 = bitcast i64* %127 to i8*
  call void @llvm.memset.p0i8.i64(i8* %162, i8 0, i64 24, i32 8, i1 false)
  store double %159, double* %125, align 8, !alias.scope !2454, !noalias !2457
  %163 = bitcast %union.VectorReg* %5 to i8*
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %165 = bitcast %union.VectorReg* %5 to i32*
  store i32 0, i32* %165, align 1, !tbaa !2459
  %166 = getelementptr inbounds i8, i8* %163, i64 4
  %167 = bitcast i8* %166 to i32*
  store i32 0, i32* %167, align 1, !tbaa !2459
  %168 = bitcast i64* %164 to i32*
  store i32 0, i32* %168, align 1, !tbaa !2459
  %169 = getelementptr inbounds i8, i8* %163, i64 12
  %170 = bitcast i8* %169 to i32*
  store i32 0, i32* %170, align 1, !tbaa !2459
  %171 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 64) to i64*), align 16
  %172 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %171, i64* %172, align 1, !tbaa !2452
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %174 = bitcast i64* %173 to double*
  store double 0.000000e+00, double* %174, align 1, !tbaa !2452
  %175 = load i64, i64* %RBP, align 8
  %176 = add i64 %175, -32
  %177 = add i64 %158, 14
  store i64 %177, i64* %PC, align 8
  %178 = inttoptr i64 %176 to i32*
  %179 = load i32, i32* %178, align 4
  %180 = zext i32 %179 to i64
  store i64 %180, i64* %RAX, align 8, !tbaa !2428
  %181 = sitofp i32 %179 to double
  %182 = bitcast %union.VectorReg* %123 to double*
  store double %181, double* %182, align 1, !tbaa !2452
  %183 = fdiv double %159, %181
  store double %183, double* %125, align 1, !tbaa !2452
  %184 = add i64 %175, -40
  %185 = add i64 %158, 27
  store i64 %185, i64* %PC, align 8
  %186 = inttoptr i64 %184 to double*
  store double %183, double* %186, align 8
  %187 = load i64, i64* %RBP, align 8
  %188 = add i64 %187, -24
  %189 = load i64, i64* %PC, align 8
  %190 = add i64 %189, 4
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %188 to i64*
  %192 = load i64, i64* %191, align 8
  store i64 %192, i64* %RCX, align 8, !tbaa !2428
  %193 = add i64 %189, 8
  store i64 %193, i64* %PC, align 8
  %194 = load i64, i64* %172, align 1
  %195 = inttoptr i64 %192 to i64*
  store i64 %194, i64* %195, align 8
  %196 = load i64, i64* %RBP, align 8
  %197 = add i64 %196, -24
  %198 = load i64, i64* %PC, align 8
  %199 = add i64 %198, 4
  store i64 %199, i64* %PC, align 8
  %200 = inttoptr i64 %197 to i64*
  %201 = load i64, i64* %200, align 8
  store i64 %201, i64* %RCX, align 8, !tbaa !2428
  %202 = add i64 %201, 8
  %203 = add i64 %198, 9
  store i64 %203, i64* %PC, align 8
  %204 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  %205 = load i64, i64* %204, align 1
  %206 = inttoptr i64 %202 to i64*
  store i64 %205, i64* %206, align 8
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -40
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 5
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to double*
  %212 = load double, double* %211, align 8
  store double %212, double* %125, align 1, !tbaa !2452
  store double 0.000000e+00, double* %128, align 1, !tbaa !2452
  %213 = add i64 %207, -32
  %214 = add i64 %209, 8
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i32*
  %216 = load i32, i32* %215, align 4
  %217 = zext i32 %216 to i64
  store i64 %217, i64* %RAX, align 8, !tbaa !2428
  %218 = sitofp i32 %216 to double
  %219 = bitcast %union.VectorReg* %5 to double*
  store double %218, double* %219, align 1, !tbaa !2452
  %220 = fmul double %212, %218
  store double %220, double* %125, align 1, !tbaa !2452
  store i64 0, i64* %127, align 1, !tbaa !2452
  %221 = add i64 %209, -1999
  %222 = add i64 %209, 21
  %223 = load i64, i64* %RSP, align 8, !tbaa !2428
  %224 = add i64 %223, -8
  %225 = inttoptr i64 %224 to i64*
  store i64 %222, i64* %225, align 8
  store i64 %224, i64* %RSP, align 8, !tbaa !2428
  store i64 %221, i64* %PC, align 8, !alias.scope !2460, !noalias !2463
  %226 = load double, double* %125, align 8, !alias.scope !2460, !noalias !2463
  %227 = load i64, i64* %225, align 8
  store i64 %223, i64* %RSP, align 8, !alias.scope !2460, !noalias !2463
  %228 = tail call double @cos(double %226)
  %229 = bitcast i64* %127 to i8*
  call void @llvm.memset.p0i8.i64(i8* %229, i8 0, i64 24, i32 8, i1 false)
  store double %228, double* %125, align 8, !alias.scope !2460, !noalias !2463
  %230 = load i64, i64* %RBP, align 8
  %231 = add i64 %230, -24
  %232 = add i64 %227, 4
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %231 to i64*
  %234 = load i64, i64* %233, align 8
  store i64 %234, i64* %RCX, align 8, !tbaa !2428
  %235 = add i64 %230, -32
  %236 = add i64 %227, 8
  store i64 %236, i64* %PC, align 8
  %237 = inttoptr i64 %235 to i32*
  %238 = load i32, i32* %237, align 4
  %239 = sext i32 %238 to i64
  store i64 %239, i64* %RDX, align 8, !tbaa !2428
  %240 = shl nsw i64 %239, 3
  %241 = add i64 %240, %234
  %242 = add i64 %227, 13
  store i64 %242, i64* %PC, align 8
  %243 = inttoptr i64 %241 to double*
  store double %228, double* %243, align 8
  %244 = load i64, i64* %RBP, align 8
  %245 = add i64 %244, -24
  %246 = load i64, i64* %PC, align 8
  %247 = add i64 %246, 4
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %245 to i64*
  %249 = load i64, i64* %248, align 8
  store i64 %249, i64* %RCX, align 8, !tbaa !2428
  %250 = add i64 %244, -32
  %251 = add i64 %246, 8
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %250 to i32*
  %253 = load i32, i32* %252, align 4
  %254 = sext i32 %253 to i64
  store i64 %254, i64* %RDX, align 8, !tbaa !2428
  %255 = shl nsw i64 %254, 3
  %256 = add i64 %255, %249
  %257 = add i64 %246, 13
  store i64 %257, i64* %PC, align 8
  %258 = inttoptr i64 %256 to i64*
  %259 = load i64, i64* %258, align 8
  store i64 %259, i64* %126, align 1, !tbaa !2452
  store double 0.000000e+00, double* %128, align 1, !tbaa !2452
  %260 = add i64 %246, 17
  store i64 %260, i64* %PC, align 8
  %261 = load i64, i64* %248, align 8
  store i64 %261, i64* %RCX, align 8, !tbaa !2428
  %262 = add i64 %246, 20
  store i64 %262, i64* %PC, align 8
  %263 = load i32, i32* %252, align 4
  %264 = add i32 %263, 1
  %265 = zext i32 %264 to i64
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = icmp eq i32 %263, -1
  %267 = icmp eq i32 %264, 0
  %268 = or i1 %266, %267
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %16, align 1, !tbaa !2433
  %270 = and i32 %264, 255
  %271 = tail call i32 @llvm.ctpop.i32(i32 %270) #11
  %272 = trunc i32 %271 to i8
  %273 = and i8 %272, 1
  %274 = xor i8 %273, 1
  store i8 %274, i8* %23, align 1, !tbaa !2447
  %275 = xor i32 %263, %264
  %276 = lshr i32 %275, 4
  %277 = trunc i32 %276 to i8
  %278 = and i8 %277, 1
  store i8 %278, i8* %28, align 1, !tbaa !2451
  %279 = zext i1 %267 to i8
  store i8 %279, i8* %31, align 1, !tbaa !2448
  %280 = lshr i32 %264, 31
  %281 = trunc i32 %280 to i8
  store i8 %281, i8* %34, align 1, !tbaa !2449
  %282 = lshr i32 %263, 31
  %283 = xor i32 %280, %282
  %284 = add nuw nsw i32 %283, %280
  %285 = icmp eq i32 %284, 2
  %286 = zext i1 %285 to i8
  store i8 %286, i8* %40, align 1, !tbaa !2450
  %287 = sext i32 %264 to i64
  store i64 %287, i64* %RDX, align 8, !tbaa !2428
  %288 = shl nsw i64 %287, 3
  %289 = add i64 %288, %261
  %290 = add i64 %246, 31
  store i64 %290, i64* %PC, align 8
  %291 = inttoptr i64 %289 to i64*
  store i64 %259, i64* %291, align 8
  %292 = load i64, i64* %RBP, align 8
  %293 = add i64 %292, -32
  %294 = load i64, i64* %PC, align 8
  %295 = add i64 %294, 4
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %293 to i32*
  %297 = load i32, i32* %296, align 4
  %298 = add i32 %297, -2
  %299 = icmp ult i32 %297, 2
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %16, align 1, !tbaa !2433
  %301 = and i32 %298, 255
  %302 = tail call i32 @llvm.ctpop.i32(i32 %301) #11
  %303 = trunc i32 %302 to i8
  %304 = and i8 %303, 1
  %305 = xor i8 %304, 1
  store i8 %305, i8* %23, align 1, !tbaa !2447
  %306 = xor i32 %297, %298
  %307 = lshr i32 %306, 4
  %308 = trunc i32 %307 to i8
  %309 = and i8 %308, 1
  store i8 %309, i8* %28, align 1, !tbaa !2451
  %310 = icmp eq i32 %298, 0
  %311 = zext i1 %310 to i8
  store i8 %311, i8* %31, align 1, !tbaa !2448
  %312 = lshr i32 %298, 31
  %313 = trunc i32 %312 to i8
  store i8 %313, i8* %34, align 1, !tbaa !2449
  %314 = lshr i32 %297, 31
  %315 = xor i32 %312, %314
  %316 = add nuw nsw i32 %315, %314
  %317 = icmp eq i32 %316, 2
  %318 = zext i1 %317 to i8
  store i8 %318, i8* %40, align 1, !tbaa !2450
  %319 = icmp ne i8 %313, 0
  %320 = xor i1 %319, %317
  %321 = or i1 %310, %320
  %.v9 = select i1 %321, i64 201, i64 10
  %322 = add i64 %294, %.v9
  store i64 %322, i64* %PC, align 8, !tbaa !2428
  br i1 %321, label %block_400f99, label %block_400eda

block_400eed:                                     ; preds = %block_400ee1
  %323 = add i64 %582, -40
  %324 = add i64 %618, 5
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to double*
  %326 = load double, double* %325, align 8
  store double %326, double* %125, align 1, !tbaa !2452
  store double 0.000000e+00, double* %128, align 1, !tbaa !2452
  %327 = add i64 %618, 8
  store i64 %327, i64* %PC, align 8
  %328 = load i32, i32* %585, align 4
  %329 = zext i32 %328 to i64
  store i64 %329, i64* %RAX, align 8, !tbaa !2428
  %330 = sitofp i32 %328 to double
  store double %330, double* %219, align 1, !tbaa !2452
  %331 = fmul double %326, %330
  store double %331, double* %125, align 1, !tbaa !2452
  store i64 0, i64* %127, align 1, !tbaa !2452
  %332 = add i64 %618, -2093
  %333 = add i64 %618, 21
  %334 = load i64, i64* %RSP, align 8, !tbaa !2428
  %335 = add i64 %334, -8
  %336 = inttoptr i64 %335 to i64*
  store i64 %333, i64* %336, align 8
  store i64 %335, i64* %RSP, align 8, !tbaa !2428
  store i64 %332, i64* %PC, align 8, !alias.scope !2465, !noalias !2468
  %337 = load double, double* %125, align 8, !alias.scope !2465, !noalias !2468
  %338 = load i64, i64* %336, align 8
  store i64 %334, i64* %RSP, align 8, !alias.scope !2465, !noalias !2468
  %339 = tail call double @cos(double %337)
  %340 = bitcast i64* %127 to i8*
  call void @llvm.memset.p0i8.i64(i8* %340, i8 0, i64 24, i32 8, i1 false)
  store double %339, double* %125, align 8, !alias.scope !2465, !noalias !2468
  %341 = load i64, i64* %RBP, align 8
  %342 = add i64 %341, -48
  %343 = add i64 %338, 5
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %342 to double*
  store double %339, double* %344, align 8
  %345 = load i64, i64* %RBP, align 8
  %346 = add i64 %345, -40
  %347 = load i64, i64* %PC, align 8
  %348 = add i64 %347, 5
  store i64 %348, i64* %PC, align 8
  %349 = inttoptr i64 %346 to double*
  %350 = load double, double* %349, align 8
  store double %350, double* %125, align 1, !tbaa !2452
  store double 0.000000e+00, double* %128, align 1, !tbaa !2452
  %351 = add i64 %345, -28
  %352 = add i64 %347, 8
  store i64 %352, i64* %PC, align 8
  %353 = inttoptr i64 %351 to i32*
  %354 = load i32, i32* %353, align 4
  %355 = zext i32 %354 to i64
  store i64 %355, i64* %RAX, align 8, !tbaa !2428
  %356 = sitofp i32 %354 to double
  store double %356, double* %219, align 1, !tbaa !2452
  %357 = fmul double %350, %356
  store double %357, double* %125, align 1, !tbaa !2452
  store i64 0, i64* %127, align 1, !tbaa !2452
  %358 = add i64 %347, -2071
  %359 = add i64 %347, 21
  %360 = load i64, i64* %RSP, align 8, !tbaa !2428
  %361 = add i64 %360, -8
  %362 = inttoptr i64 %361 to i64*
  store i64 %359, i64* %362, align 8
  store i64 %361, i64* %RSP, align 8, !tbaa !2428
  store i64 %358, i64* %PC, align 8, !alias.scope !2470, !noalias !2473
  %363 = load double, double* %125, align 8, !alias.scope !2470, !noalias !2473
  %364 = load i64, i64* %362, align 8
  store i64 %360, i64* %RSP, align 8, !alias.scope !2470, !noalias !2473
  %365 = tail call double @sin(double %363)
  %366 = bitcast i64* %127 to i8*
  call void @llvm.memset.p0i8.i64(i8* %366, i8 0, i64 24, i32 8, i1 false)
  store double %365, double* %125, align 8, !alias.scope !2470, !noalias !2473
  %367 = load i64, i64* %RBP, align 8
  %368 = add i64 %367, -56
  %369 = add i64 %364, 5
  store i64 %369, i64* %PC, align 8
  %370 = inttoptr i64 %368 to double*
  store double %365, double* %370, align 8
  %371 = load i64, i64* %RBP, align 8
  %372 = add i64 %371, -48
  %373 = load i64, i64* %PC, align 8
  %374 = add i64 %373, 5
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %372 to i64*
  %376 = load i64, i64* %375, align 8
  store i64 %376, i64* %126, align 1, !tbaa !2452
  store double 0.000000e+00, double* %128, align 1, !tbaa !2452
  %377 = add i64 %371, -24
  %378 = add i64 %373, 9
  store i64 %378, i64* %PC, align 8
  %379 = inttoptr i64 %377 to i64*
  %380 = load i64, i64* %379, align 8
  store i64 %380, i64* %RCX, align 8, !tbaa !2428
  %381 = add i64 %371, -28
  %382 = add i64 %373, 13
  store i64 %382, i64* %PC, align 8
  %383 = inttoptr i64 %381 to i32*
  %384 = load i32, i32* %383, align 4
  %385 = sext i32 %384 to i64
  store i64 %385, i64* %RDX, align 8, !tbaa !2428
  %386 = shl nsw i64 %385, 3
  %387 = add i64 %386, %380
  %388 = add i64 %373, 18
  store i64 %388, i64* %PC, align 8
  %389 = inttoptr i64 %387 to i64*
  store i64 %376, i64* %389, align 8
  %390 = load i64, i64* %RBP, align 8
  %391 = add i64 %390, -56
  %392 = load i64, i64* %PC, align 8
  %393 = add i64 %392, 5
  store i64 %393, i64* %PC, align 8
  %394 = inttoptr i64 %391 to i64*
  %395 = load i64, i64* %394, align 8
  store i64 %395, i64* %126, align 1, !tbaa !2452
  store double 0.000000e+00, double* %128, align 1, !tbaa !2452
  %396 = add i64 %390, -24
  %397 = add i64 %392, 9
  store i64 %397, i64* %PC, align 8
  %398 = inttoptr i64 %396 to i64*
  %399 = load i64, i64* %398, align 8
  store i64 %399, i64* %RCX, align 8, !tbaa !2428
  %400 = add i64 %390, -28
  %401 = add i64 %392, 12
  store i64 %401, i64* %PC, align 8
  %402 = inttoptr i64 %400 to i32*
  %403 = load i32, i32* %402, align 4
  %404 = add i32 %403, 1
  %405 = zext i32 %404 to i64
  store i64 %405, i64* %RAX, align 8, !tbaa !2428
  %406 = icmp eq i32 %403, -1
  %407 = icmp eq i32 %404, 0
  %408 = or i1 %406, %407
  %409 = zext i1 %408 to i8
  store i8 %409, i8* %16, align 1, !tbaa !2433
  %410 = and i32 %404, 255
  %411 = tail call i32 @llvm.ctpop.i32(i32 %410) #11
  %412 = trunc i32 %411 to i8
  %413 = and i8 %412, 1
  %414 = xor i8 %413, 1
  store i8 %414, i8* %23, align 1, !tbaa !2447
  %415 = xor i32 %403, %404
  %416 = lshr i32 %415, 4
  %417 = trunc i32 %416 to i8
  %418 = and i8 %417, 1
  store i8 %418, i8* %28, align 1, !tbaa !2451
  %419 = zext i1 %407 to i8
  store i8 %419, i8* %31, align 1, !tbaa !2448
  %420 = lshr i32 %404, 31
  %421 = trunc i32 %420 to i8
  store i8 %421, i8* %34, align 1, !tbaa !2449
  %422 = lshr i32 %403, 31
  %423 = xor i32 %420, %422
  %424 = add nuw nsw i32 %423, %420
  %425 = icmp eq i32 %424, 2
  %426 = zext i1 %425 to i8
  store i8 %426, i8* %40, align 1, !tbaa !2450
  %427 = sext i32 %404 to i64
  store i64 %427, i64* %RDX, align 8, !tbaa !2428
  %428 = shl nsw i64 %427, 3
  %429 = add i64 %428, %399
  %430 = add i64 %392, 23
  store i64 %430, i64* %PC, align 8
  %431 = inttoptr i64 %429 to i64*
  store i64 %395, i64* %431, align 8
  %432 = load i64, i64* %RBP, align 8
  %433 = add i64 %432, -56
  %434 = load i64, i64* %PC, align 8
  %435 = add i64 %434, 5
  store i64 %435, i64* %PC, align 8
  %436 = inttoptr i64 %433 to i64*
  %437 = load i64, i64* %436, align 8
  store i64 %437, i64* %126, align 1, !tbaa !2452
  store double 0.000000e+00, double* %128, align 1, !tbaa !2452
  %438 = add i64 %432, -24
  %439 = add i64 %434, 9
  store i64 %439, i64* %PC, align 8
  %440 = inttoptr i64 %438 to i64*
  %441 = load i64, i64* %440, align 8
  store i64 %441, i64* %RCX, align 8, !tbaa !2428
  %442 = add i64 %432, -4
  %443 = add i64 %434, 12
  store i64 %443, i64* %PC, align 8
  %444 = inttoptr i64 %442 to i32*
  %445 = load i32, i32* %444, align 4
  %446 = zext i32 %445 to i64
  store i64 %446, i64* %RAX, align 8, !tbaa !2428
  %447 = add i64 %432, -28
  %448 = add i64 %434, 15
  store i64 %448, i64* %PC, align 8
  %449 = inttoptr i64 %447 to i32*
  %450 = load i32, i32* %449, align 4
  %451 = sub i32 %445, %450
  %452 = zext i32 %451 to i64
  store i64 %452, i64* %RAX, align 8, !tbaa !2428
  %453 = icmp ult i32 %445, %450
  %454 = zext i1 %453 to i8
  store i8 %454, i8* %16, align 1, !tbaa !2433
  %455 = and i32 %451, 255
  %456 = tail call i32 @llvm.ctpop.i32(i32 %455) #11
  %457 = trunc i32 %456 to i8
  %458 = and i8 %457, 1
  %459 = xor i8 %458, 1
  store i8 %459, i8* %23, align 1, !tbaa !2447
  %460 = xor i32 %450, %445
  %461 = xor i32 %460, %451
  %462 = lshr i32 %461, 4
  %463 = trunc i32 %462 to i8
  %464 = and i8 %463, 1
  store i8 %464, i8* %28, align 1, !tbaa !2451
  %465 = icmp eq i32 %451, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %31, align 1, !tbaa !2448
  %467 = lshr i32 %451, 31
  %468 = trunc i32 %467 to i8
  store i8 %468, i8* %34, align 1, !tbaa !2449
  %469 = lshr i32 %445, 31
  %470 = lshr i32 %450, 31
  %471 = xor i32 %470, %469
  %472 = xor i32 %467, %469
  %473 = add nuw nsw i32 %472, %471
  %474 = icmp eq i32 %473, 2
  %475 = zext i1 %474 to i8
  store i8 %475, i8* %40, align 1, !tbaa !2450
  %476 = sext i32 %451 to i64
  store i64 %476, i64* %RDX, align 8, !tbaa !2428
  %477 = shl nsw i64 %476, 3
  %478 = add i64 %477, %441
  %479 = add i64 %434, 23
  store i64 %479, i64* %PC, align 8
  %480 = inttoptr i64 %478 to i64*
  store i64 %437, i64* %480, align 8
  %481 = load i64, i64* %RBP, align 8
  %482 = add i64 %481, -48
  %483 = load i64, i64* %PC, align 8
  %484 = add i64 %483, 5
  store i64 %484, i64* %PC, align 8
  %485 = inttoptr i64 %482 to i64*
  %486 = load i64, i64* %485, align 8
  store i64 %486, i64* %126, align 1, !tbaa !2452
  store double 0.000000e+00, double* %128, align 1, !tbaa !2452
  %487 = add i64 %481, -24
  %488 = add i64 %483, 9
  store i64 %488, i64* %PC, align 8
  %489 = inttoptr i64 %487 to i64*
  %490 = load i64, i64* %489, align 8
  store i64 %490, i64* %RCX, align 8, !tbaa !2428
  %491 = add i64 %481, -4
  %492 = add i64 %483, 12
  store i64 %492, i64* %PC, align 8
  %493 = inttoptr i64 %491 to i32*
  %494 = load i32, i32* %493, align 4
  %495 = zext i32 %494 to i64
  store i64 %495, i64* %RAX, align 8, !tbaa !2428
  %496 = add i64 %481, -28
  %497 = add i64 %483, 15
  store i64 %497, i64* %PC, align 8
  %498 = inttoptr i64 %496 to i32*
  %499 = load i32, i32* %498, align 4
  %500 = sub i32 %494, %499
  %501 = lshr i32 %500, 31
  %502 = add i32 %500, 1
  %503 = zext i32 %502 to i64
  store i64 %503, i64* %RAX, align 8, !tbaa !2428
  %504 = icmp eq i32 %500, -1
  %505 = icmp eq i32 %502, 0
  %506 = or i1 %504, %505
  %507 = zext i1 %506 to i8
  store i8 %507, i8* %16, align 1, !tbaa !2433
  %508 = and i32 %502, 255
  %509 = tail call i32 @llvm.ctpop.i32(i32 %508) #11
  %510 = trunc i32 %509 to i8
  %511 = and i8 %510, 1
  %512 = xor i8 %511, 1
  store i8 %512, i8* %23, align 1, !tbaa !2447
  %513 = xor i32 %500, %502
  %514 = lshr i32 %513, 4
  %515 = trunc i32 %514 to i8
  %516 = and i8 %515, 1
  store i8 %516, i8* %28, align 1, !tbaa !2451
  %517 = zext i1 %505 to i8
  store i8 %517, i8* %31, align 1, !tbaa !2448
  %518 = lshr i32 %502, 31
  %519 = trunc i32 %518 to i8
  store i8 %519, i8* %34, align 1, !tbaa !2449
  %520 = xor i32 %518, %501
  %521 = add nuw nsw i32 %520, %518
  %522 = icmp eq i32 %521, 2
  %523 = zext i1 %522 to i8
  store i8 %523, i8* %40, align 1, !tbaa !2450
  %524 = sext i32 %502 to i64
  store i64 %524, i64* %RDX, align 8, !tbaa !2428
  %525 = shl nsw i64 %524, 3
  %526 = add i64 %525, %490
  %527 = add i64 %483, 26
  store i64 %527, i64* %PC, align 8
  %528 = inttoptr i64 %526 to i64*
  store i64 %486, i64* %528, align 8
  %529 = load i64, i64* %RBP, align 8
  %530 = add i64 %529, -28
  %531 = load i64, i64* %PC, align 8
  %532 = add i64 %531, 3
  store i64 %532, i64* %PC, align 8
  %533 = inttoptr i64 %530 to i32*
  %534 = load i32, i32* %533, align 4
  %535 = add i32 %534, 2
  %536 = zext i32 %535 to i64
  store i64 %536, i64* %RAX, align 8, !tbaa !2428
  %537 = icmp ugt i32 %534, -3
  %538 = zext i1 %537 to i8
  store i8 %538, i8* %16, align 1, !tbaa !2433
  %539 = and i32 %535, 255
  %540 = tail call i32 @llvm.ctpop.i32(i32 %539) #11
  %541 = trunc i32 %540 to i8
  %542 = and i8 %541, 1
  %543 = xor i8 %542, 1
  store i8 %543, i8* %23, align 1, !tbaa !2447
  %544 = xor i32 %534, %535
  %545 = lshr i32 %544, 4
  %546 = trunc i32 %545 to i8
  %547 = and i8 %546, 1
  store i8 %547, i8* %28, align 1, !tbaa !2451
  %548 = icmp eq i32 %535, 0
  %549 = zext i1 %548 to i8
  store i8 %549, i8* %31, align 1, !tbaa !2448
  %550 = lshr i32 %535, 31
  %551 = trunc i32 %550 to i8
  store i8 %551, i8* %34, align 1, !tbaa !2449
  %552 = lshr i32 %534, 31
  %553 = xor i32 %550, %552
  %554 = add nuw nsw i32 %553, %550
  %555 = icmp eq i32 %554, 2
  %556 = zext i1 %555 to i8
  store i8 %556, i8* %40, align 1, !tbaa !2450
  %557 = add i64 %531, 9
  store i64 %557, i64* %PC, align 8
  store i32 %535, i32* %533, align 4
  %558 = load i64, i64* %PC, align 8
  %559 = add i64 %558, -163
  store i64 %559, i64* %PC, align 8, !tbaa !2428
  br label %block_400ee1

block_400f89:                                     ; preds = %block_400ee1
  %560 = add i64 %582, -4
  %561 = add i64 %618, 3
  store i64 %561, i64* %PC, align 8
  %562 = inttoptr i64 %560 to i32*
  %563 = load i32, i32* %562, align 4
  %564 = zext i32 %563 to i64
  store i64 %564, i64* %RDI, align 8, !tbaa !2428
  %565 = add i64 %582, -16
  %566 = add i64 %618, 7
  store i64 %566, i64* %PC, align 8
  %567 = inttoptr i64 %565 to i64*
  %568 = load i64, i64* %567, align 8
  store i64 %568, i64* %RSI, align 8, !tbaa !2428
  %569 = add i64 %582, -24
  %570 = add i64 %618, 11
  store i64 %570, i64* %PC, align 8
  %571 = inttoptr i64 %569 to i64*
  %572 = load i64, i64* %571, align 8
  store i64 %572, i64* %RDX, align 8, !tbaa !2428
  %573 = add i64 %618, 567
  %574 = add i64 %618, 16
  %575 = load i64, i64* %RSP, align 8, !tbaa !2428
  %576 = add i64 %575, -8
  %577 = inttoptr i64 %576 to i64*
  store i64 %574, i64* %577, align 8
  store i64 %576, i64* %RSP, align 8, !tbaa !2428
  store i64 %573, i64* %PC, align 8, !tbaa !2428
  %578 = tail call %struct.Memory* @sub_4011c0_bitrv2_renamed_(%struct.State* nonnull %0, i64 %573, %struct.Memory* %2)
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_400f99

block_400f99:                                     ; preds = %block_400f89, %block_400e4d
  %579 = phi i64 [ %322, %block_400e4d ], [ %.pre1, %block_400f89 ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_400e4d ], [ %578, %block_400f89 ]
  %580 = add i64 %579, 5
  store i64 %580, i64* %PC, align 8, !tbaa !2428
  br label %block_400f9e

block_400ee1:                                     ; preds = %block_400eed, %block_400eda
  %581 = phi i64 [ %559, %block_400eed ], [ %.pre, %block_400eda ]
  %582 = load i64, i64* %RBP, align 8
  %583 = add i64 %582, -28
  %584 = add i64 %581, 3
  store i64 %584, i64* %PC, align 8
  %585 = inttoptr i64 %583 to i32*
  %586 = load i32, i32* %585, align 4
  %587 = zext i32 %586 to i64
  store i64 %587, i64* %RAX, align 8, !tbaa !2428
  %588 = add i64 %582, -32
  %589 = add i64 %581, 6
  store i64 %589, i64* %PC, align 8
  %590 = inttoptr i64 %588 to i32*
  %591 = load i32, i32* %590, align 4
  %592 = sub i32 %586, %591
  %593 = icmp ult i32 %586, %591
  %594 = zext i1 %593 to i8
  store i8 %594, i8* %16, align 1, !tbaa !2433
  %595 = and i32 %592, 255
  %596 = tail call i32 @llvm.ctpop.i32(i32 %595) #11
  %597 = trunc i32 %596 to i8
  %598 = and i8 %597, 1
  %599 = xor i8 %598, 1
  store i8 %599, i8* %23, align 1, !tbaa !2447
  %600 = xor i32 %591, %586
  %601 = xor i32 %600, %592
  %602 = lshr i32 %601, 4
  %603 = trunc i32 %602 to i8
  %604 = and i8 %603, 1
  store i8 %604, i8* %28, align 1, !tbaa !2451
  %605 = icmp eq i32 %592, 0
  %606 = zext i1 %605 to i8
  store i8 %606, i8* %31, align 1, !tbaa !2448
  %607 = lshr i32 %592, 31
  %608 = trunc i32 %607 to i8
  store i8 %608, i8* %34, align 1, !tbaa !2449
  %609 = lshr i32 %586, 31
  %610 = lshr i32 %591, 31
  %611 = xor i32 %610, %609
  %612 = xor i32 %607, %609
  %613 = add nuw nsw i32 %612, %611
  %614 = icmp eq i32 %613, 2
  %615 = zext i1 %614 to i8
  store i8 %615, i8* %40, align 1, !tbaa !2450
  %616 = icmp ne i8 %608, 0
  %617 = xor i1 %616, %614
  %.v10 = select i1 %617, i64 12, i64 168
  %618 = add i64 %581, %.v10
  store i64 %618, i64* %PC, align 8, !tbaa !2428
  br i1 %617, label %block_400eed, label %block_400f89
}

; Function Attrs: noinline
define %struct.Memory* @sub_404060___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_404060:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401840_cftfsub(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_401840:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -120
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 112
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2433
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #11
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2451
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %7, -12
  %41 = load i32, i32* %EDI, align 4
  %42 = add i64 %10, 10
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i32*
  store i32 %41, i32* %43, align 4
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -24
  %52 = load i64, i64* %RDX, align 8
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -44
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 7
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 2, i32* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -4
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = add i32 %66, -8
  %68 = icmp ult i32 %66, 8
  %69 = zext i1 %68 to i8
  store i8 %69, i8* %14, align 1, !tbaa !2433
  %70 = and i32 %67, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #11
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %21, align 1, !tbaa !2447
  %75 = xor i32 %66, %67
  %76 = lshr i32 %75, 4
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %27, align 1, !tbaa !2451
  %79 = icmp eq i32 %67, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %30, align 1, !tbaa !2448
  %81 = lshr i32 %67, 31
  %82 = trunc i32 %81 to i8
  store i8 %82, i8* %33, align 1, !tbaa !2449
  %83 = lshr i32 %66, 31
  %84 = xor i32 %81, %83
  %85 = add nuw nsw i32 %84, %83
  %86 = icmp eq i32 %85, 2
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %39, align 1, !tbaa !2450
  %88 = icmp ne i8 %82, 0
  %89 = xor i1 %88, %86
  %90 = or i1 %79, %89
  %.v = select i1 %90, i64 86, i64 10
  %91 = add i64 %63, %.v
  store i64 %91, i64* %PC, align 8, !tbaa !2428
  br i1 %90, label %block_4018b0, label %block_401864

block_401af3:                                     ; preds = %block_4018b0.block_401af3_crit_edge, %block_401aff
  %92 = phi i64 [ %1458, %block_401aff ], [ %.pre2, %block_4018b0.block_401af3_crit_edge ]
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -28
  %95 = add i64 %92, 3
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = zext i32 %97 to i64
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = add i64 %93, -44
  %100 = add i64 %92, 6
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = sub i32 %97, %102
  %104 = icmp ult i32 %97, %102
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %14, align 1, !tbaa !2433
  %106 = and i32 %103, 255
  %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #11
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* %21, align 1, !tbaa !2447
  %111 = xor i32 %102, %97
  %112 = xor i32 %111, %103
  %113 = lshr i32 %112, 4
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  store i8 %115, i8* %27, align 1, !tbaa !2451
  %116 = icmp eq i32 %103, 0
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %30, align 1, !tbaa !2448
  %118 = lshr i32 %103, 31
  %119 = trunc i32 %118 to i8
  store i8 %119, i8* %33, align 1, !tbaa !2449
  %120 = lshr i32 %97, 31
  %121 = lshr i32 %102, 31
  %122 = xor i32 %121, %120
  %123 = xor i32 %118, %120
  %124 = add nuw nsw i32 %123, %122
  %125 = icmp eq i32 %124, 2
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %39, align 1, !tbaa !2450
  %127 = icmp ne i8 %119, 0
  %128 = xor i1 %127, %125
  %.v7 = select i1 %128, i64 12, i64 220
  %129 = add i64 %92, %.v7
  store i64 %129, i64* %PC, align 8, !tbaa !2428
  br i1 %128, label %block_401aff, label %block_401bcf

block_4018d2:                                     ; preds = %block_4018c6
  %130 = add i64 %1573, 3
  store i64 %130, i64* %PC, align 8
  %131 = load i32, i32* %1540, align 4
  %132 = zext i32 %131 to i64
  store i64 %132, i64* %RAX, align 8, !tbaa !2428
  %133 = add i64 %1573, 6
  store i64 %133, i64* %PC, align 8
  %134 = load i32, i32* %1545, align 4
  %135 = add i32 %134, %131
  %136 = zext i32 %135 to i64
  store i64 %136, i64* %RAX, align 8, !tbaa !2428
  %137 = icmp ult i32 %135, %131
  %138 = icmp ult i32 %135, %134
  %139 = or i1 %137, %138
  %140 = zext i1 %139 to i8
  store i8 %140, i8* %14, align 1, !tbaa !2433
  %141 = and i32 %135, 255
  %142 = tail call i32 @llvm.ctpop.i32(i32 %141) #11
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  store i8 %145, i8* %21, align 1, !tbaa !2447
  %146 = xor i32 %134, %131
  %147 = xor i32 %146, %135
  %148 = lshr i32 %147, 4
  %149 = trunc i32 %148 to i8
  %150 = and i8 %149, 1
  store i8 %150, i8* %27, align 1, !tbaa !2451
  %151 = icmp eq i32 %135, 0
  %152 = zext i1 %151 to i8
  store i8 %152, i8* %30, align 1, !tbaa !2448
  %153 = lshr i32 %135, 31
  %154 = trunc i32 %153 to i8
  store i8 %154, i8* %33, align 1, !tbaa !2449
  %155 = lshr i32 %131, 31
  %156 = lshr i32 %134, 31
  %157 = xor i32 %153, %155
  %158 = xor i32 %153, %156
  %159 = add nuw nsw i32 %157, %158
  %160 = icmp eq i32 %159, 2
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %39, align 1, !tbaa !2450
  %162 = add i64 %1537, -32
  %163 = add i64 %1573, 9
  store i64 %163, i64* %PC, align 8
  %164 = inttoptr i64 %162 to i32*
  store i32 %135, i32* %164, align 4
  %165 = load i64, i64* %RBP, align 8
  %166 = add i64 %165, -32
  %167 = load i64, i64* %PC, align 8
  %168 = add i64 %167, 3
  store i64 %168, i64* %PC, align 8
  %169 = inttoptr i64 %166 to i32*
  %170 = load i32, i32* %169, align 4
  %171 = zext i32 %170 to i64
  store i64 %171, i64* %RAX, align 8, !tbaa !2428
  %172 = add i64 %165, -44
  %173 = add i64 %167, 6
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %172 to i32*
  %175 = load i32, i32* %174, align 4
  %176 = add i32 %175, %170
  %177 = zext i32 %176 to i64
  store i64 %177, i64* %RAX, align 8, !tbaa !2428
  %178 = icmp ult i32 %176, %170
  %179 = icmp ult i32 %176, %175
  %180 = or i1 %178, %179
  %181 = zext i1 %180 to i8
  store i8 %181, i8* %14, align 1, !tbaa !2433
  %182 = and i32 %176, 255
  %183 = tail call i32 @llvm.ctpop.i32(i32 %182) #11
  %184 = trunc i32 %183 to i8
  %185 = and i8 %184, 1
  %186 = xor i8 %185, 1
  store i8 %186, i8* %21, align 1, !tbaa !2447
  %187 = xor i32 %175, %170
  %188 = xor i32 %187, %176
  %189 = lshr i32 %188, 4
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  store i8 %191, i8* %27, align 1, !tbaa !2451
  %192 = icmp eq i32 %176, 0
  %193 = zext i1 %192 to i8
  store i8 %193, i8* %30, align 1, !tbaa !2448
  %194 = lshr i32 %176, 31
  %195 = trunc i32 %194 to i8
  store i8 %195, i8* %33, align 1, !tbaa !2449
  %196 = lshr i32 %170, 31
  %197 = lshr i32 %175, 31
  %198 = xor i32 %194, %196
  %199 = xor i32 %194, %197
  %200 = add nuw nsw i32 %198, %199
  %201 = icmp eq i32 %200, 2
  %202 = zext i1 %201 to i8
  store i8 %202, i8* %39, align 1, !tbaa !2450
  %203 = add i64 %165, -36
  %204 = add i64 %167, 9
  store i64 %204, i64* %PC, align 8
  %205 = inttoptr i64 %203 to i32*
  store i32 %176, i32* %205, align 4
  %206 = load i64, i64* %RBP, align 8
  %207 = add i64 %206, -36
  %208 = load i64, i64* %PC, align 8
  %209 = add i64 %208, 3
  store i64 %209, i64* %PC, align 8
  %210 = inttoptr i64 %207 to i32*
  %211 = load i32, i32* %210, align 4
  %212 = zext i32 %211 to i64
  store i64 %212, i64* %RAX, align 8, !tbaa !2428
  %213 = add i64 %206, -44
  %214 = add i64 %208, 6
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i32*
  %216 = load i32, i32* %215, align 4
  %217 = add i32 %216, %211
  %218 = zext i32 %217 to i64
  store i64 %218, i64* %RAX, align 8, !tbaa !2428
  %219 = icmp ult i32 %217, %211
  %220 = icmp ult i32 %217, %216
  %221 = or i1 %219, %220
  %222 = zext i1 %221 to i8
  store i8 %222, i8* %14, align 1, !tbaa !2433
  %223 = and i32 %217, 255
  %224 = tail call i32 @llvm.ctpop.i32(i32 %223) #11
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  store i8 %227, i8* %21, align 1, !tbaa !2447
  %228 = xor i32 %216, %211
  %229 = xor i32 %228, %217
  %230 = lshr i32 %229, 4
  %231 = trunc i32 %230 to i8
  %232 = and i8 %231, 1
  store i8 %232, i8* %27, align 1, !tbaa !2451
  %233 = icmp eq i32 %217, 0
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %30, align 1, !tbaa !2448
  %235 = lshr i32 %217, 31
  %236 = trunc i32 %235 to i8
  store i8 %236, i8* %33, align 1, !tbaa !2449
  %237 = lshr i32 %211, 31
  %238 = lshr i32 %216, 31
  %239 = xor i32 %235, %237
  %240 = xor i32 %235, %238
  %241 = add nuw nsw i32 %239, %240
  %242 = icmp eq i32 %241, 2
  %243 = zext i1 %242 to i8
  store i8 %243, i8* %39, align 1, !tbaa !2450
  %244 = add i64 %206, -40
  %245 = add i64 %208, 9
  store i64 %245, i64* %PC, align 8
  %246 = inttoptr i64 %244 to i32*
  store i32 %217, i32* %246, align 4
  %247 = load i64, i64* %RBP, align 8
  %248 = add i64 %247, -16
  %249 = load i64, i64* %PC, align 8
  %250 = add i64 %249, 4
  store i64 %250, i64* %PC, align 8
  %251 = inttoptr i64 %248 to i64*
  %252 = load i64, i64* %251, align 8
  store i64 %252, i64* %RCX, align 8, !tbaa !2428
  %253 = add i64 %247, -28
  %254 = add i64 %249, 8
  store i64 %254, i64* %PC, align 8
  %255 = inttoptr i64 %253 to i32*
  %256 = load i32, i32* %255, align 4
  %257 = sext i32 %256 to i64
  store i64 %257, i64* %RDX, align 8, !tbaa !2428
  %258 = shl nsw i64 %257, 3
  %259 = add i64 %258, %252
  %260 = add i64 %249, 13
  store i64 %260, i64* %PC, align 8
  %261 = inttoptr i64 %259 to double*
  %262 = load double, double* %261, align 8
  store double %262, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %263 = add i64 %249, 17
  store i64 %263, i64* %PC, align 8
  %264 = load i64, i64* %251, align 8
  store i64 %264, i64* %RCX, align 8, !tbaa !2428
  %265 = add i64 %247, -32
  %266 = add i64 %249, 21
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %265 to i32*
  %268 = load i32, i32* %267, align 4
  %269 = sext i32 %268 to i64
  store i64 %269, i64* %RDX, align 8, !tbaa !2428
  %270 = shl nsw i64 %269, 3
  %271 = add i64 %270, %264
  %272 = add i64 %249, 26
  store i64 %272, i64* %PC, align 8
  %273 = inttoptr i64 %271 to double*
  %274 = load double, double* %273, align 8
  %275 = fadd double %262, %274
  store double %275, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %276 = add i64 %247, -56
  %277 = add i64 %249, 31
  store i64 %277, i64* %PC, align 8
  %278 = inttoptr i64 %276 to double*
  store double %275, double* %278, align 8
  %279 = load i64, i64* %RBP, align 8
  %280 = add i64 %279, -16
  %281 = load i64, i64* %PC, align 8
  %282 = add i64 %281, 4
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %280 to i64*
  %284 = load i64, i64* %283, align 8
  store i64 %284, i64* %RCX, align 8, !tbaa !2428
  %285 = add i64 %279, -28
  %286 = add i64 %281, 7
  store i64 %286, i64* %PC, align 8
  %287 = inttoptr i64 %285 to i32*
  %288 = load i32, i32* %287, align 4
  %289 = add i32 %288, 1
  %290 = zext i32 %289 to i64
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = icmp eq i32 %288, -1
  %292 = icmp eq i32 %289, 0
  %293 = or i1 %291, %292
  %294 = zext i1 %293 to i8
  store i8 %294, i8* %14, align 1, !tbaa !2433
  %295 = and i32 %289, 255
  %296 = tail call i32 @llvm.ctpop.i32(i32 %295) #11
  %297 = trunc i32 %296 to i8
  %298 = and i8 %297, 1
  %299 = xor i8 %298, 1
  store i8 %299, i8* %21, align 1, !tbaa !2447
  %300 = xor i32 %288, %289
  %301 = lshr i32 %300, 4
  %302 = trunc i32 %301 to i8
  %303 = and i8 %302, 1
  store i8 %303, i8* %27, align 1, !tbaa !2451
  %304 = zext i1 %292 to i8
  store i8 %304, i8* %30, align 1, !tbaa !2448
  %305 = lshr i32 %289, 31
  %306 = trunc i32 %305 to i8
  store i8 %306, i8* %33, align 1, !tbaa !2449
  %307 = lshr i32 %288, 31
  %308 = xor i32 %305, %307
  %309 = add nuw nsw i32 %308, %305
  %310 = icmp eq i32 %309, 2
  %311 = zext i1 %310 to i8
  store i8 %311, i8* %39, align 1, !tbaa !2450
  %312 = sext i32 %289 to i64
  store i64 %312, i64* %RDX, align 8, !tbaa !2428
  %313 = shl nsw i64 %312, 3
  %314 = add i64 %313, %284
  %315 = add i64 %281, 18
  store i64 %315, i64* %PC, align 8
  %316 = inttoptr i64 %314 to double*
  %317 = load double, double* %316, align 8
  store double %317, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %318 = add i64 %281, 22
  store i64 %318, i64* %PC, align 8
  %319 = load i64, i64* %283, align 8
  store i64 %319, i64* %RCX, align 8, !tbaa !2428
  %320 = add i64 %279, -32
  %321 = add i64 %281, 25
  store i64 %321, i64* %PC, align 8
  %322 = inttoptr i64 %320 to i32*
  %323 = load i32, i32* %322, align 4
  %324 = add i32 %323, 1
  %325 = zext i32 %324 to i64
  store i64 %325, i64* %RAX, align 8, !tbaa !2428
  %326 = icmp eq i32 %323, -1
  %327 = icmp eq i32 %324, 0
  %328 = or i1 %326, %327
  %329 = zext i1 %328 to i8
  store i8 %329, i8* %14, align 1, !tbaa !2433
  %330 = and i32 %324, 255
  %331 = tail call i32 @llvm.ctpop.i32(i32 %330) #11
  %332 = trunc i32 %331 to i8
  %333 = and i8 %332, 1
  %334 = xor i8 %333, 1
  store i8 %334, i8* %21, align 1, !tbaa !2447
  %335 = xor i32 %323, %324
  %336 = lshr i32 %335, 4
  %337 = trunc i32 %336 to i8
  %338 = and i8 %337, 1
  store i8 %338, i8* %27, align 1, !tbaa !2451
  %339 = zext i1 %327 to i8
  store i8 %339, i8* %30, align 1, !tbaa !2448
  %340 = lshr i32 %324, 31
  %341 = trunc i32 %340 to i8
  store i8 %341, i8* %33, align 1, !tbaa !2449
  %342 = lshr i32 %323, 31
  %343 = xor i32 %340, %342
  %344 = add nuw nsw i32 %343, %340
  %345 = icmp eq i32 %344, 2
  %346 = zext i1 %345 to i8
  store i8 %346, i8* %39, align 1, !tbaa !2450
  %347 = sext i32 %324 to i64
  store i64 %347, i64* %RDX, align 8, !tbaa !2428
  %348 = shl nsw i64 %347, 3
  %349 = add i64 %348, %319
  %350 = add i64 %281, 36
  store i64 %350, i64* %PC, align 8
  %351 = inttoptr i64 %349 to double*
  %352 = load double, double* %351, align 8
  %353 = fadd double %317, %352
  store double %353, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %354 = load i64, i64* %RBP, align 8
  %355 = add i64 %354, -64
  %356 = add i64 %281, 41
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to double*
  store double %353, double* %357, align 8
  %358 = load i64, i64* %RBP, align 8
  %359 = add i64 %358, -16
  %360 = load i64, i64* %PC, align 8
  %361 = add i64 %360, 4
  store i64 %361, i64* %PC, align 8
  %362 = inttoptr i64 %359 to i64*
  %363 = load i64, i64* %362, align 8
  store i64 %363, i64* %RCX, align 8, !tbaa !2428
  %364 = add i64 %358, -28
  %365 = add i64 %360, 8
  store i64 %365, i64* %PC, align 8
  %366 = inttoptr i64 %364 to i32*
  %367 = load i32, i32* %366, align 4
  %368 = sext i32 %367 to i64
  store i64 %368, i64* %RDX, align 8, !tbaa !2428
  %369 = shl nsw i64 %368, 3
  %370 = add i64 %369, %363
  %371 = add i64 %360, 13
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %370 to double*
  %373 = load double, double* %372, align 8
  store double %373, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %374 = add i64 %360, 17
  store i64 %374, i64* %PC, align 8
  %375 = load i64, i64* %362, align 8
  store i64 %375, i64* %RCX, align 8, !tbaa !2428
  %376 = add i64 %358, -32
  %377 = add i64 %360, 21
  store i64 %377, i64* %PC, align 8
  %378 = inttoptr i64 %376 to i32*
  %379 = load i32, i32* %378, align 4
  %380 = sext i32 %379 to i64
  store i64 %380, i64* %RDX, align 8, !tbaa !2428
  %381 = shl nsw i64 %380, 3
  %382 = add i64 %381, %375
  %383 = add i64 %360, 26
  store i64 %383, i64* %PC, align 8
  %384 = inttoptr i64 %382 to double*
  %385 = load double, double* %384, align 8
  %386 = fsub double %373, %385
  store double %386, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %387 = add i64 %358, -72
  %388 = add i64 %360, 31
  store i64 %388, i64* %PC, align 8
  %389 = inttoptr i64 %387 to double*
  store double %386, double* %389, align 8
  %390 = load i64, i64* %RBP, align 8
  %391 = add i64 %390, -16
  %392 = load i64, i64* %PC, align 8
  %393 = add i64 %392, 4
  store i64 %393, i64* %PC, align 8
  %394 = inttoptr i64 %391 to i64*
  %395 = load i64, i64* %394, align 8
  store i64 %395, i64* %RCX, align 8, !tbaa !2428
  %396 = add i64 %390, -28
  %397 = add i64 %392, 7
  store i64 %397, i64* %PC, align 8
  %398 = inttoptr i64 %396 to i32*
  %399 = load i32, i32* %398, align 4
  %400 = add i32 %399, 1
  %401 = zext i32 %400 to i64
  store i64 %401, i64* %RAX, align 8, !tbaa !2428
  %402 = icmp eq i32 %399, -1
  %403 = icmp eq i32 %400, 0
  %404 = or i1 %402, %403
  %405 = zext i1 %404 to i8
  store i8 %405, i8* %14, align 1, !tbaa !2433
  %406 = and i32 %400, 255
  %407 = tail call i32 @llvm.ctpop.i32(i32 %406) #11
  %408 = trunc i32 %407 to i8
  %409 = and i8 %408, 1
  %410 = xor i8 %409, 1
  store i8 %410, i8* %21, align 1, !tbaa !2447
  %411 = xor i32 %399, %400
  %412 = lshr i32 %411, 4
  %413 = trunc i32 %412 to i8
  %414 = and i8 %413, 1
  store i8 %414, i8* %27, align 1, !tbaa !2451
  %415 = zext i1 %403 to i8
  store i8 %415, i8* %30, align 1, !tbaa !2448
  %416 = lshr i32 %400, 31
  %417 = trunc i32 %416 to i8
  store i8 %417, i8* %33, align 1, !tbaa !2449
  %418 = lshr i32 %399, 31
  %419 = xor i32 %416, %418
  %420 = add nuw nsw i32 %419, %416
  %421 = icmp eq i32 %420, 2
  %422 = zext i1 %421 to i8
  store i8 %422, i8* %39, align 1, !tbaa !2450
  %423 = sext i32 %400 to i64
  store i64 %423, i64* %RDX, align 8, !tbaa !2428
  %424 = shl nsw i64 %423, 3
  %425 = add i64 %424, %395
  %426 = add i64 %392, 18
  store i64 %426, i64* %PC, align 8
  %427 = inttoptr i64 %425 to double*
  %428 = load double, double* %427, align 8
  store double %428, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %429 = add i64 %392, 22
  store i64 %429, i64* %PC, align 8
  %430 = load i64, i64* %394, align 8
  store i64 %430, i64* %RCX, align 8, !tbaa !2428
  %431 = add i64 %390, -32
  %432 = add i64 %392, 25
  store i64 %432, i64* %PC, align 8
  %433 = inttoptr i64 %431 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = add i32 %434, 1
  %436 = zext i32 %435 to i64
  store i64 %436, i64* %RAX, align 8, !tbaa !2428
  %437 = icmp eq i32 %434, -1
  %438 = icmp eq i32 %435, 0
  %439 = or i1 %437, %438
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %14, align 1, !tbaa !2433
  %441 = and i32 %435, 255
  %442 = tail call i32 @llvm.ctpop.i32(i32 %441) #11
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  store i8 %445, i8* %21, align 1, !tbaa !2447
  %446 = xor i32 %434, %435
  %447 = lshr i32 %446, 4
  %448 = trunc i32 %447 to i8
  %449 = and i8 %448, 1
  store i8 %449, i8* %27, align 1, !tbaa !2451
  %450 = zext i1 %438 to i8
  store i8 %450, i8* %30, align 1, !tbaa !2448
  %451 = lshr i32 %435, 31
  %452 = trunc i32 %451 to i8
  store i8 %452, i8* %33, align 1, !tbaa !2449
  %453 = lshr i32 %434, 31
  %454 = xor i32 %451, %453
  %455 = add nuw nsw i32 %454, %451
  %456 = icmp eq i32 %455, 2
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %39, align 1, !tbaa !2450
  %458 = sext i32 %435 to i64
  store i64 %458, i64* %RDX, align 8, !tbaa !2428
  %459 = shl nsw i64 %458, 3
  %460 = add i64 %459, %430
  %461 = add i64 %392, 36
  store i64 %461, i64* %PC, align 8
  %462 = inttoptr i64 %460 to double*
  %463 = load double, double* %462, align 8
  %464 = fsub double %428, %463
  store double %464, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %465 = load i64, i64* %RBP, align 8
  %466 = add i64 %465, -80
  %467 = add i64 %392, 41
  store i64 %467, i64* %PC, align 8
  %468 = inttoptr i64 %466 to double*
  store double %464, double* %468, align 8
  %469 = load i64, i64* %RBP, align 8
  %470 = add i64 %469, -16
  %471 = load i64, i64* %PC, align 8
  %472 = add i64 %471, 4
  store i64 %472, i64* %PC, align 8
  %473 = inttoptr i64 %470 to i64*
  %474 = load i64, i64* %473, align 8
  store i64 %474, i64* %RCX, align 8, !tbaa !2428
  %475 = add i64 %469, -36
  %476 = add i64 %471, 8
  store i64 %476, i64* %PC, align 8
  %477 = inttoptr i64 %475 to i32*
  %478 = load i32, i32* %477, align 4
  %479 = sext i32 %478 to i64
  store i64 %479, i64* %RDX, align 8, !tbaa !2428
  %480 = shl nsw i64 %479, 3
  %481 = add i64 %480, %474
  %482 = add i64 %471, 13
  store i64 %482, i64* %PC, align 8
  %483 = inttoptr i64 %481 to double*
  %484 = load double, double* %483, align 8
  store double %484, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %485 = add i64 %471, 17
  store i64 %485, i64* %PC, align 8
  %486 = load i64, i64* %473, align 8
  store i64 %486, i64* %RCX, align 8, !tbaa !2428
  %487 = add i64 %469, -40
  %488 = add i64 %471, 21
  store i64 %488, i64* %PC, align 8
  %489 = inttoptr i64 %487 to i32*
  %490 = load i32, i32* %489, align 4
  %491 = sext i32 %490 to i64
  store i64 %491, i64* %RDX, align 8, !tbaa !2428
  %492 = shl nsw i64 %491, 3
  %493 = add i64 %492, %486
  %494 = add i64 %471, 26
  store i64 %494, i64* %PC, align 8
  %495 = inttoptr i64 %493 to double*
  %496 = load double, double* %495, align 8
  %497 = fadd double %484, %496
  store double %497, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %498 = add i64 %469, -88
  %499 = add i64 %471, 31
  store i64 %499, i64* %PC, align 8
  %500 = inttoptr i64 %498 to double*
  store double %497, double* %500, align 8
  %501 = load i64, i64* %RBP, align 8
  %502 = add i64 %501, -16
  %503 = load i64, i64* %PC, align 8
  %504 = add i64 %503, 4
  store i64 %504, i64* %PC, align 8
  %505 = inttoptr i64 %502 to i64*
  %506 = load i64, i64* %505, align 8
  store i64 %506, i64* %RCX, align 8, !tbaa !2428
  %507 = add i64 %501, -36
  %508 = add i64 %503, 7
  store i64 %508, i64* %PC, align 8
  %509 = inttoptr i64 %507 to i32*
  %510 = load i32, i32* %509, align 4
  %511 = add i32 %510, 1
  %512 = zext i32 %511 to i64
  store i64 %512, i64* %RAX, align 8, !tbaa !2428
  %513 = icmp eq i32 %510, -1
  %514 = icmp eq i32 %511, 0
  %515 = or i1 %513, %514
  %516 = zext i1 %515 to i8
  store i8 %516, i8* %14, align 1, !tbaa !2433
  %517 = and i32 %511, 255
  %518 = tail call i32 @llvm.ctpop.i32(i32 %517) #11
  %519 = trunc i32 %518 to i8
  %520 = and i8 %519, 1
  %521 = xor i8 %520, 1
  store i8 %521, i8* %21, align 1, !tbaa !2447
  %522 = xor i32 %510, %511
  %523 = lshr i32 %522, 4
  %524 = trunc i32 %523 to i8
  %525 = and i8 %524, 1
  store i8 %525, i8* %27, align 1, !tbaa !2451
  %526 = zext i1 %514 to i8
  store i8 %526, i8* %30, align 1, !tbaa !2448
  %527 = lshr i32 %511, 31
  %528 = trunc i32 %527 to i8
  store i8 %528, i8* %33, align 1, !tbaa !2449
  %529 = lshr i32 %510, 31
  %530 = xor i32 %527, %529
  %531 = add nuw nsw i32 %530, %527
  %532 = icmp eq i32 %531, 2
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %39, align 1, !tbaa !2450
  %534 = sext i32 %511 to i64
  store i64 %534, i64* %RDX, align 8, !tbaa !2428
  %535 = shl nsw i64 %534, 3
  %536 = add i64 %535, %506
  %537 = add i64 %503, 18
  store i64 %537, i64* %PC, align 8
  %538 = inttoptr i64 %536 to double*
  %539 = load double, double* %538, align 8
  store double %539, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %540 = add i64 %503, 22
  store i64 %540, i64* %PC, align 8
  %541 = load i64, i64* %505, align 8
  store i64 %541, i64* %RCX, align 8, !tbaa !2428
  %542 = add i64 %501, -40
  %543 = add i64 %503, 25
  store i64 %543, i64* %PC, align 8
  %544 = inttoptr i64 %542 to i32*
  %545 = load i32, i32* %544, align 4
  %546 = add i32 %545, 1
  %547 = zext i32 %546 to i64
  store i64 %547, i64* %RAX, align 8, !tbaa !2428
  %548 = icmp eq i32 %545, -1
  %549 = icmp eq i32 %546, 0
  %550 = or i1 %548, %549
  %551 = zext i1 %550 to i8
  store i8 %551, i8* %14, align 1, !tbaa !2433
  %552 = and i32 %546, 255
  %553 = tail call i32 @llvm.ctpop.i32(i32 %552) #11
  %554 = trunc i32 %553 to i8
  %555 = and i8 %554, 1
  %556 = xor i8 %555, 1
  store i8 %556, i8* %21, align 1, !tbaa !2447
  %557 = xor i32 %545, %546
  %558 = lshr i32 %557, 4
  %559 = trunc i32 %558 to i8
  %560 = and i8 %559, 1
  store i8 %560, i8* %27, align 1, !tbaa !2451
  %561 = zext i1 %549 to i8
  store i8 %561, i8* %30, align 1, !tbaa !2448
  %562 = lshr i32 %546, 31
  %563 = trunc i32 %562 to i8
  store i8 %563, i8* %33, align 1, !tbaa !2449
  %564 = lshr i32 %545, 31
  %565 = xor i32 %562, %564
  %566 = add nuw nsw i32 %565, %562
  %567 = icmp eq i32 %566, 2
  %568 = zext i1 %567 to i8
  store i8 %568, i8* %39, align 1, !tbaa !2450
  %569 = sext i32 %546 to i64
  store i64 %569, i64* %RDX, align 8, !tbaa !2428
  %570 = shl nsw i64 %569, 3
  %571 = add i64 %570, %541
  %572 = add i64 %503, 36
  store i64 %572, i64* %PC, align 8
  %573 = inttoptr i64 %571 to double*
  %574 = load double, double* %573, align 8
  %575 = fadd double %539, %574
  store double %575, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %576 = load i64, i64* %RBP, align 8
  %577 = add i64 %576, -96
  %578 = add i64 %503, 41
  store i64 %578, i64* %PC, align 8
  %579 = inttoptr i64 %577 to double*
  store double %575, double* %579, align 8
  %580 = load i64, i64* %RBP, align 8
  %581 = add i64 %580, -16
  %582 = load i64, i64* %PC, align 8
  %583 = add i64 %582, 4
  store i64 %583, i64* %PC, align 8
  %584 = inttoptr i64 %581 to i64*
  %585 = load i64, i64* %584, align 8
  store i64 %585, i64* %RCX, align 8, !tbaa !2428
  %586 = add i64 %580, -36
  %587 = add i64 %582, 8
  store i64 %587, i64* %PC, align 8
  %588 = inttoptr i64 %586 to i32*
  %589 = load i32, i32* %588, align 4
  %590 = sext i32 %589 to i64
  store i64 %590, i64* %RDX, align 8, !tbaa !2428
  %591 = shl nsw i64 %590, 3
  %592 = add i64 %591, %585
  %593 = add i64 %582, 13
  store i64 %593, i64* %PC, align 8
  %594 = inttoptr i64 %592 to double*
  %595 = load double, double* %594, align 8
  store double %595, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %596 = add i64 %582, 17
  store i64 %596, i64* %PC, align 8
  %597 = load i64, i64* %584, align 8
  store i64 %597, i64* %RCX, align 8, !tbaa !2428
  %598 = add i64 %580, -40
  %599 = add i64 %582, 21
  store i64 %599, i64* %PC, align 8
  %600 = inttoptr i64 %598 to i32*
  %601 = load i32, i32* %600, align 4
  %602 = sext i32 %601 to i64
  store i64 %602, i64* %RDX, align 8, !tbaa !2428
  %603 = shl nsw i64 %602, 3
  %604 = add i64 %603, %597
  %605 = add i64 %582, 26
  store i64 %605, i64* %PC, align 8
  %606 = inttoptr i64 %604 to double*
  %607 = load double, double* %606, align 8
  %608 = fsub double %595, %607
  store double %608, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %609 = add i64 %580, -104
  %610 = add i64 %582, 31
  store i64 %610, i64* %PC, align 8
  %611 = inttoptr i64 %609 to double*
  store double %608, double* %611, align 8
  %612 = load i64, i64* %RBP, align 8
  %613 = add i64 %612, -16
  %614 = load i64, i64* %PC, align 8
  %615 = add i64 %614, 4
  store i64 %615, i64* %PC, align 8
  %616 = inttoptr i64 %613 to i64*
  %617 = load i64, i64* %616, align 8
  store i64 %617, i64* %RCX, align 8, !tbaa !2428
  %618 = add i64 %612, -36
  %619 = add i64 %614, 7
  store i64 %619, i64* %PC, align 8
  %620 = inttoptr i64 %618 to i32*
  %621 = load i32, i32* %620, align 4
  %622 = add i32 %621, 1
  %623 = zext i32 %622 to i64
  store i64 %623, i64* %RAX, align 8, !tbaa !2428
  %624 = icmp eq i32 %621, -1
  %625 = icmp eq i32 %622, 0
  %626 = or i1 %624, %625
  %627 = zext i1 %626 to i8
  store i8 %627, i8* %14, align 1, !tbaa !2433
  %628 = and i32 %622, 255
  %629 = tail call i32 @llvm.ctpop.i32(i32 %628) #11
  %630 = trunc i32 %629 to i8
  %631 = and i8 %630, 1
  %632 = xor i8 %631, 1
  store i8 %632, i8* %21, align 1, !tbaa !2447
  %633 = xor i32 %621, %622
  %634 = lshr i32 %633, 4
  %635 = trunc i32 %634 to i8
  %636 = and i8 %635, 1
  store i8 %636, i8* %27, align 1, !tbaa !2451
  %637 = zext i1 %625 to i8
  store i8 %637, i8* %30, align 1, !tbaa !2448
  %638 = lshr i32 %622, 31
  %639 = trunc i32 %638 to i8
  store i8 %639, i8* %33, align 1, !tbaa !2449
  %640 = lshr i32 %621, 31
  %641 = xor i32 %638, %640
  %642 = add nuw nsw i32 %641, %638
  %643 = icmp eq i32 %642, 2
  %644 = zext i1 %643 to i8
  store i8 %644, i8* %39, align 1, !tbaa !2450
  %645 = sext i32 %622 to i64
  store i64 %645, i64* %RDX, align 8, !tbaa !2428
  %646 = shl nsw i64 %645, 3
  %647 = add i64 %646, %617
  %648 = add i64 %614, 18
  store i64 %648, i64* %PC, align 8
  %649 = inttoptr i64 %647 to double*
  %650 = load double, double* %649, align 8
  store double %650, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %651 = add i64 %614, 22
  store i64 %651, i64* %PC, align 8
  %652 = load i64, i64* %616, align 8
  store i64 %652, i64* %RCX, align 8, !tbaa !2428
  %653 = add i64 %612, -40
  %654 = add i64 %614, 25
  store i64 %654, i64* %PC, align 8
  %655 = inttoptr i64 %653 to i32*
  %656 = load i32, i32* %655, align 4
  %657 = add i32 %656, 1
  %658 = zext i32 %657 to i64
  store i64 %658, i64* %RAX, align 8, !tbaa !2428
  %659 = icmp eq i32 %656, -1
  %660 = icmp eq i32 %657, 0
  %661 = or i1 %659, %660
  %662 = zext i1 %661 to i8
  store i8 %662, i8* %14, align 1, !tbaa !2433
  %663 = and i32 %657, 255
  %664 = tail call i32 @llvm.ctpop.i32(i32 %663) #11
  %665 = trunc i32 %664 to i8
  %666 = and i8 %665, 1
  %667 = xor i8 %666, 1
  store i8 %667, i8* %21, align 1, !tbaa !2447
  %668 = xor i32 %656, %657
  %669 = lshr i32 %668, 4
  %670 = trunc i32 %669 to i8
  %671 = and i8 %670, 1
  store i8 %671, i8* %27, align 1, !tbaa !2451
  %672 = zext i1 %660 to i8
  store i8 %672, i8* %30, align 1, !tbaa !2448
  %673 = lshr i32 %657, 31
  %674 = trunc i32 %673 to i8
  store i8 %674, i8* %33, align 1, !tbaa !2449
  %675 = lshr i32 %656, 31
  %676 = xor i32 %673, %675
  %677 = add nuw nsw i32 %676, %673
  %678 = icmp eq i32 %677, 2
  %679 = zext i1 %678 to i8
  store i8 %679, i8* %39, align 1, !tbaa !2450
  %680 = sext i32 %657 to i64
  store i64 %680, i64* %RDX, align 8, !tbaa !2428
  %681 = shl nsw i64 %680, 3
  %682 = add i64 %681, %652
  %683 = add i64 %614, 36
  store i64 %683, i64* %PC, align 8
  %684 = inttoptr i64 %682 to double*
  %685 = load double, double* %684, align 8
  %686 = fsub double %650, %685
  store double %686, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %687 = load i64, i64* %RBP, align 8
  %688 = add i64 %687, -112
  %689 = add i64 %614, 41
  store i64 %689, i64* %PC, align 8
  %690 = inttoptr i64 %688 to double*
  store double %686, double* %690, align 8
  %691 = load i64, i64* %RBP, align 8
  %692 = add i64 %691, -56
  %693 = load i64, i64* %PC, align 8
  %694 = add i64 %693, 5
  store i64 %694, i64* %PC, align 8
  %695 = inttoptr i64 %692 to double*
  %696 = load double, double* %695, align 8
  store double %696, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %697 = add i64 %691, -88
  %698 = add i64 %693, 10
  store i64 %698, i64* %PC, align 8
  %699 = inttoptr i64 %697 to double*
  %700 = load double, double* %699, align 8
  %701 = fadd double %696, %700
  store double %701, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %702 = add i64 %691, -16
  %703 = add i64 %693, 14
  store i64 %703, i64* %PC, align 8
  %704 = inttoptr i64 %702 to i64*
  %705 = load i64, i64* %704, align 8
  store i64 %705, i64* %RCX, align 8, !tbaa !2428
  %706 = add i64 %691, -28
  %707 = add i64 %693, 18
  store i64 %707, i64* %PC, align 8
  %708 = inttoptr i64 %706 to i32*
  %709 = load i32, i32* %708, align 4
  %710 = sext i32 %709 to i64
  store i64 %710, i64* %RDX, align 8, !tbaa !2428
  %711 = shl nsw i64 %710, 3
  %712 = add i64 %711, %705
  %713 = add i64 %693, 23
  store i64 %713, i64* %PC, align 8
  %714 = inttoptr i64 %712 to double*
  store double %701, double* %714, align 8
  %715 = load i64, i64* %RBP, align 8
  %716 = add i64 %715, -64
  %717 = load i64, i64* %PC, align 8
  %718 = add i64 %717, 5
  store i64 %718, i64* %PC, align 8
  %719 = inttoptr i64 %716 to double*
  %720 = load double, double* %719, align 8
  store double %720, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %721 = add i64 %715, -96
  %722 = add i64 %717, 10
  store i64 %722, i64* %PC, align 8
  %723 = inttoptr i64 %721 to double*
  %724 = load double, double* %723, align 8
  %725 = fadd double %720, %724
  store double %725, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %726 = add i64 %715, -16
  %727 = add i64 %717, 14
  store i64 %727, i64* %PC, align 8
  %728 = inttoptr i64 %726 to i64*
  %729 = load i64, i64* %728, align 8
  store i64 %729, i64* %RCX, align 8, !tbaa !2428
  %730 = add i64 %715, -28
  %731 = add i64 %717, 17
  store i64 %731, i64* %PC, align 8
  %732 = inttoptr i64 %730 to i32*
  %733 = load i32, i32* %732, align 4
  %734 = add i32 %733, 1
  %735 = zext i32 %734 to i64
  store i64 %735, i64* %RAX, align 8, !tbaa !2428
  %736 = icmp eq i32 %733, -1
  %737 = icmp eq i32 %734, 0
  %738 = or i1 %736, %737
  %739 = zext i1 %738 to i8
  store i8 %739, i8* %14, align 1, !tbaa !2433
  %740 = and i32 %734, 255
  %741 = tail call i32 @llvm.ctpop.i32(i32 %740) #11
  %742 = trunc i32 %741 to i8
  %743 = and i8 %742, 1
  %744 = xor i8 %743, 1
  store i8 %744, i8* %21, align 1, !tbaa !2447
  %745 = xor i32 %733, %734
  %746 = lshr i32 %745, 4
  %747 = trunc i32 %746 to i8
  %748 = and i8 %747, 1
  store i8 %748, i8* %27, align 1, !tbaa !2451
  %749 = zext i1 %737 to i8
  store i8 %749, i8* %30, align 1, !tbaa !2448
  %750 = lshr i32 %734, 31
  %751 = trunc i32 %750 to i8
  store i8 %751, i8* %33, align 1, !tbaa !2449
  %752 = lshr i32 %733, 31
  %753 = xor i32 %750, %752
  %754 = add nuw nsw i32 %753, %750
  %755 = icmp eq i32 %754, 2
  %756 = zext i1 %755 to i8
  store i8 %756, i8* %39, align 1, !tbaa !2450
  %757 = sext i32 %734 to i64
  store i64 %757, i64* %RDX, align 8, !tbaa !2428
  %758 = shl nsw i64 %757, 3
  %759 = add i64 %758, %729
  %760 = add i64 %717, 28
  store i64 %760, i64* %PC, align 8
  %761 = inttoptr i64 %759 to double*
  store double %725, double* %761, align 8
  %762 = load i64, i64* %RBP, align 8
  %763 = add i64 %762, -56
  %764 = load i64, i64* %PC, align 8
  %765 = add i64 %764, 5
  store i64 %765, i64* %PC, align 8
  %766 = inttoptr i64 %763 to double*
  %767 = load double, double* %766, align 8
  store double %767, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %768 = add i64 %762, -88
  %769 = add i64 %764, 10
  store i64 %769, i64* %PC, align 8
  %770 = inttoptr i64 %768 to double*
  %771 = load double, double* %770, align 8
  %772 = fsub double %767, %771
  store double %772, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %773 = add i64 %762, -16
  %774 = add i64 %764, 14
  store i64 %774, i64* %PC, align 8
  %775 = inttoptr i64 %773 to i64*
  %776 = load i64, i64* %775, align 8
  store i64 %776, i64* %RCX, align 8, !tbaa !2428
  %777 = add i64 %762, -36
  %778 = add i64 %764, 18
  store i64 %778, i64* %PC, align 8
  %779 = inttoptr i64 %777 to i32*
  %780 = load i32, i32* %779, align 4
  %781 = sext i32 %780 to i64
  store i64 %781, i64* %RDX, align 8, !tbaa !2428
  %782 = shl nsw i64 %781, 3
  %783 = add i64 %782, %776
  %784 = add i64 %764, 23
  store i64 %784, i64* %PC, align 8
  %785 = inttoptr i64 %783 to double*
  store double %772, double* %785, align 8
  %786 = load i64, i64* %RBP, align 8
  %787 = add i64 %786, -64
  %788 = load i64, i64* %PC, align 8
  %789 = add i64 %788, 5
  store i64 %789, i64* %PC, align 8
  %790 = inttoptr i64 %787 to double*
  %791 = load double, double* %790, align 8
  store double %791, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %792 = add i64 %786, -96
  %793 = add i64 %788, 10
  store i64 %793, i64* %PC, align 8
  %794 = inttoptr i64 %792 to double*
  %795 = load double, double* %794, align 8
  %796 = fsub double %791, %795
  store double %796, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %797 = add i64 %786, -16
  %798 = add i64 %788, 14
  store i64 %798, i64* %PC, align 8
  %799 = inttoptr i64 %797 to i64*
  %800 = load i64, i64* %799, align 8
  store i64 %800, i64* %RCX, align 8, !tbaa !2428
  %801 = add i64 %786, -36
  %802 = add i64 %788, 17
  store i64 %802, i64* %PC, align 8
  %803 = inttoptr i64 %801 to i32*
  %804 = load i32, i32* %803, align 4
  %805 = add i32 %804, 1
  %806 = zext i32 %805 to i64
  store i64 %806, i64* %RAX, align 8, !tbaa !2428
  %807 = icmp eq i32 %804, -1
  %808 = icmp eq i32 %805, 0
  %809 = or i1 %807, %808
  %810 = zext i1 %809 to i8
  store i8 %810, i8* %14, align 1, !tbaa !2433
  %811 = and i32 %805, 255
  %812 = tail call i32 @llvm.ctpop.i32(i32 %811) #11
  %813 = trunc i32 %812 to i8
  %814 = and i8 %813, 1
  %815 = xor i8 %814, 1
  store i8 %815, i8* %21, align 1, !tbaa !2447
  %816 = xor i32 %804, %805
  %817 = lshr i32 %816, 4
  %818 = trunc i32 %817 to i8
  %819 = and i8 %818, 1
  store i8 %819, i8* %27, align 1, !tbaa !2451
  %820 = zext i1 %808 to i8
  store i8 %820, i8* %30, align 1, !tbaa !2448
  %821 = lshr i32 %805, 31
  %822 = trunc i32 %821 to i8
  store i8 %822, i8* %33, align 1, !tbaa !2449
  %823 = lshr i32 %804, 31
  %824 = xor i32 %821, %823
  %825 = add nuw nsw i32 %824, %821
  %826 = icmp eq i32 %825, 2
  %827 = zext i1 %826 to i8
  store i8 %827, i8* %39, align 1, !tbaa !2450
  %828 = sext i32 %805 to i64
  store i64 %828, i64* %RDX, align 8, !tbaa !2428
  %829 = shl nsw i64 %828, 3
  %830 = add i64 %829, %800
  %831 = add i64 %788, 28
  store i64 %831, i64* %PC, align 8
  %832 = inttoptr i64 %830 to double*
  store double %796, double* %832, align 8
  %833 = load i64, i64* %RBP, align 8
  %834 = add i64 %833, -72
  %835 = load i64, i64* %PC, align 8
  %836 = add i64 %835, 5
  store i64 %836, i64* %PC, align 8
  %837 = inttoptr i64 %834 to double*
  %838 = load double, double* %837, align 8
  store double %838, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %839 = add i64 %833, -112
  %840 = add i64 %835, 10
  store i64 %840, i64* %PC, align 8
  %841 = inttoptr i64 %839 to double*
  %842 = load double, double* %841, align 8
  %843 = fsub double %838, %842
  store double %843, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %844 = add i64 %833, -16
  %845 = add i64 %835, 14
  store i64 %845, i64* %PC, align 8
  %846 = inttoptr i64 %844 to i64*
  %847 = load i64, i64* %846, align 8
  store i64 %847, i64* %RCX, align 8, !tbaa !2428
  %848 = add i64 %833, -32
  %849 = add i64 %835, 18
  store i64 %849, i64* %PC, align 8
  %850 = inttoptr i64 %848 to i32*
  %851 = load i32, i32* %850, align 4
  %852 = sext i32 %851 to i64
  store i64 %852, i64* %RDX, align 8, !tbaa !2428
  %853 = shl nsw i64 %852, 3
  %854 = add i64 %853, %847
  %855 = add i64 %835, 23
  store i64 %855, i64* %PC, align 8
  %856 = inttoptr i64 %854 to double*
  store double %843, double* %856, align 8
  %857 = load i64, i64* %RBP, align 8
  %858 = add i64 %857, -80
  %859 = load i64, i64* %PC, align 8
  %860 = add i64 %859, 5
  store i64 %860, i64* %PC, align 8
  %861 = inttoptr i64 %858 to double*
  %862 = load double, double* %861, align 8
  store double %862, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %863 = add i64 %857, -104
  %864 = add i64 %859, 10
  store i64 %864, i64* %PC, align 8
  %865 = inttoptr i64 %863 to double*
  %866 = load double, double* %865, align 8
  %867 = fadd double %862, %866
  store double %867, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %868 = add i64 %857, -16
  %869 = add i64 %859, 14
  store i64 %869, i64* %PC, align 8
  %870 = inttoptr i64 %868 to i64*
  %871 = load i64, i64* %870, align 8
  store i64 %871, i64* %RCX, align 8, !tbaa !2428
  %872 = add i64 %857, -32
  %873 = add i64 %859, 17
  store i64 %873, i64* %PC, align 8
  %874 = inttoptr i64 %872 to i32*
  %875 = load i32, i32* %874, align 4
  %876 = add i32 %875, 1
  %877 = zext i32 %876 to i64
  store i64 %877, i64* %RAX, align 8, !tbaa !2428
  %878 = icmp eq i32 %875, -1
  %879 = icmp eq i32 %876, 0
  %880 = or i1 %878, %879
  %881 = zext i1 %880 to i8
  store i8 %881, i8* %14, align 1, !tbaa !2433
  %882 = and i32 %876, 255
  %883 = tail call i32 @llvm.ctpop.i32(i32 %882) #11
  %884 = trunc i32 %883 to i8
  %885 = and i8 %884, 1
  %886 = xor i8 %885, 1
  store i8 %886, i8* %21, align 1, !tbaa !2447
  %887 = xor i32 %875, %876
  %888 = lshr i32 %887, 4
  %889 = trunc i32 %888 to i8
  %890 = and i8 %889, 1
  store i8 %890, i8* %27, align 1, !tbaa !2451
  %891 = zext i1 %879 to i8
  store i8 %891, i8* %30, align 1, !tbaa !2448
  %892 = lshr i32 %876, 31
  %893 = trunc i32 %892 to i8
  store i8 %893, i8* %33, align 1, !tbaa !2449
  %894 = lshr i32 %875, 31
  %895 = xor i32 %892, %894
  %896 = add nuw nsw i32 %895, %892
  %897 = icmp eq i32 %896, 2
  %898 = zext i1 %897 to i8
  store i8 %898, i8* %39, align 1, !tbaa !2450
  %899 = sext i32 %876 to i64
  store i64 %899, i64* %RDX, align 8, !tbaa !2428
  %900 = shl nsw i64 %899, 3
  %901 = add i64 %900, %871
  %902 = add i64 %859, 28
  store i64 %902, i64* %PC, align 8
  %903 = inttoptr i64 %901 to double*
  store double %867, double* %903, align 8
  %904 = load i64, i64* %RBP, align 8
  %905 = add i64 %904, -72
  %906 = load i64, i64* %PC, align 8
  %907 = add i64 %906, 5
  store i64 %907, i64* %PC, align 8
  %908 = inttoptr i64 %905 to double*
  %909 = load double, double* %908, align 8
  store double %909, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %910 = add i64 %904, -112
  %911 = add i64 %906, 10
  store i64 %911, i64* %PC, align 8
  %912 = inttoptr i64 %910 to double*
  %913 = load double, double* %912, align 8
  %914 = fadd double %909, %913
  store double %914, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %915 = add i64 %904, -16
  %916 = add i64 %906, 14
  store i64 %916, i64* %PC, align 8
  %917 = inttoptr i64 %915 to i64*
  %918 = load i64, i64* %917, align 8
  store i64 %918, i64* %RCX, align 8, !tbaa !2428
  %919 = add i64 %904, -40
  %920 = add i64 %906, 18
  store i64 %920, i64* %PC, align 8
  %921 = inttoptr i64 %919 to i32*
  %922 = load i32, i32* %921, align 4
  %923 = sext i32 %922 to i64
  store i64 %923, i64* %RDX, align 8, !tbaa !2428
  %924 = shl nsw i64 %923, 3
  %925 = add i64 %924, %918
  %926 = add i64 %906, 23
  store i64 %926, i64* %PC, align 8
  %927 = inttoptr i64 %925 to double*
  store double %914, double* %927, align 8
  %928 = load i64, i64* %RBP, align 8
  %929 = add i64 %928, -80
  %930 = load i64, i64* %PC, align 8
  %931 = add i64 %930, 5
  store i64 %931, i64* %PC, align 8
  %932 = inttoptr i64 %929 to double*
  %933 = load double, double* %932, align 8
  store double %933, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %934 = add i64 %928, -104
  %935 = add i64 %930, 10
  store i64 %935, i64* %PC, align 8
  %936 = inttoptr i64 %934 to double*
  %937 = load double, double* %936, align 8
  %938 = fsub double %933, %937
  store double %938, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %939 = add i64 %928, -16
  %940 = add i64 %930, 14
  store i64 %940, i64* %PC, align 8
  %941 = inttoptr i64 %939 to i64*
  %942 = load i64, i64* %941, align 8
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %943 = add i64 %928, -40
  %944 = add i64 %930, 17
  store i64 %944, i64* %PC, align 8
  %945 = inttoptr i64 %943 to i32*
  %946 = load i32, i32* %945, align 4
  %947 = add i32 %946, 1
  %948 = zext i32 %947 to i64
  store i64 %948, i64* %RAX, align 8, !tbaa !2428
  %949 = icmp eq i32 %946, -1
  %950 = icmp eq i32 %947, 0
  %951 = or i1 %949, %950
  %952 = zext i1 %951 to i8
  store i8 %952, i8* %14, align 1, !tbaa !2433
  %953 = and i32 %947, 255
  %954 = tail call i32 @llvm.ctpop.i32(i32 %953) #11
  %955 = trunc i32 %954 to i8
  %956 = and i8 %955, 1
  %957 = xor i8 %956, 1
  store i8 %957, i8* %21, align 1, !tbaa !2447
  %958 = xor i32 %946, %947
  %959 = lshr i32 %958, 4
  %960 = trunc i32 %959 to i8
  %961 = and i8 %960, 1
  store i8 %961, i8* %27, align 1, !tbaa !2451
  %962 = zext i1 %950 to i8
  store i8 %962, i8* %30, align 1, !tbaa !2448
  %963 = lshr i32 %947, 31
  %964 = trunc i32 %963 to i8
  store i8 %964, i8* %33, align 1, !tbaa !2449
  %965 = lshr i32 %946, 31
  %966 = xor i32 %963, %965
  %967 = add nuw nsw i32 %966, %963
  %968 = icmp eq i32 %967, 2
  %969 = zext i1 %968 to i8
  store i8 %969, i8* %39, align 1, !tbaa !2450
  %970 = sext i32 %947 to i64
  store i64 %970, i64* %RDX, align 8, !tbaa !2428
  %971 = shl nsw i64 %970, 3
  %972 = add i64 %971, %942
  %973 = add i64 %930, 28
  store i64 %973, i64* %PC, align 8
  %974 = inttoptr i64 %972 to double*
  store double %938, double* %974, align 8
  %975 = load i64, i64* %RBP, align 8
  %976 = add i64 %975, -28
  %977 = load i64, i64* %PC, align 8
  %978 = add i64 %977, 3
  store i64 %978, i64* %PC, align 8
  %979 = inttoptr i64 %976 to i32*
  %980 = load i32, i32* %979, align 4
  %981 = add i32 %980, 2
  %982 = zext i32 %981 to i64
  store i64 %982, i64* %RAX, align 8, !tbaa !2428
  %983 = icmp ugt i32 %980, -3
  %984 = zext i1 %983 to i8
  store i8 %984, i8* %14, align 1, !tbaa !2433
  %985 = and i32 %981, 255
  %986 = tail call i32 @llvm.ctpop.i32(i32 %985) #11
  %987 = trunc i32 %986 to i8
  %988 = and i8 %987, 1
  %989 = xor i8 %988, 1
  store i8 %989, i8* %21, align 1, !tbaa !2447
  %990 = xor i32 %980, %981
  %991 = lshr i32 %990, 4
  %992 = trunc i32 %991 to i8
  %993 = and i8 %992, 1
  store i8 %993, i8* %27, align 1, !tbaa !2451
  %994 = icmp eq i32 %981, 0
  %995 = zext i1 %994 to i8
  store i8 %995, i8* %30, align 1, !tbaa !2448
  %996 = lshr i32 %981, 31
  %997 = trunc i32 %996 to i8
  store i8 %997, i8* %33, align 1, !tbaa !2449
  %998 = lshr i32 %980, 31
  %999 = xor i32 %996, %998
  %1000 = add nuw nsw i32 %999, %996
  %1001 = icmp eq i32 %1000, 2
  %1002 = zext i1 %1001 to i8
  store i8 %1002, i8* %39, align 1, !tbaa !2450
  %1003 = add i64 %977, 9
  store i64 %1003, i64* %PC, align 8
  store i32 %981, i32* %979, align 4
  %1004 = load i64, i64* %PC, align 8
  %1005 = add i64 %1004, -540
  store i64 %1005, i64* %PC, align 8, !tbaa !2428
  br label %block_4018c6

block_4018b0:                                     ; preds = %block_4018ab, %block_401840
  %1006 = phi i64 [ %91, %block_401840 ], [ %1113, %block_4018ab ]
  %1007 = phi i64 [ %61, %block_401840 ], [ %1063, %block_4018ab ]
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_401840 ], [ %MEMORY.2, %block_4018ab ]
  %1008 = add i64 %1007, -44
  %1009 = add i64 %1006, 3
  store i64 %1009, i64* %PC, align 8
  %1010 = inttoptr i64 %1008 to i32*
  %1011 = load i32, i32* %1010, align 4
  %1012 = shl i32 %1011, 2
  %1013 = zext i32 %1012 to i64
  store i64 %1013, i64* %RAX, align 8, !tbaa !2428
  %1014 = lshr i32 %1011, 30
  %1015 = trunc i32 %1014 to i8
  %1016 = and i8 %1015, 1
  store i8 %1016, i8* %14, align 1, !tbaa !2432
  %1017 = and i32 %1012, 252
  %1018 = tail call i32 @llvm.ctpop.i32(i32 %1017) #11
  %1019 = trunc i32 %1018 to i8
  %1020 = and i8 %1019, 1
  %1021 = xor i8 %1020, 1
  store i8 %1021, i8* %21, align 1, !tbaa !2432
  store i8 0, i8* %27, align 1, !tbaa !2432
  %1022 = icmp eq i32 %1012, 0
  %1023 = zext i1 %1022 to i8
  store i8 %1023, i8* %30, align 1, !tbaa !2432
  %1024 = lshr i32 %1011, 29
  %1025 = and i32 %1024, 1
  %1026 = trunc i32 %1025 to i8
  store i8 %1026, i8* %33, align 1, !tbaa !2432
  store i8 0, i8* %39, align 1, !tbaa !2432
  %1027 = add i64 %1007, -4
  %1028 = add i64 %1006, 9
  store i64 %1028, i64* %PC, align 8
  %1029 = inttoptr i64 %1027 to i32*
  %1030 = load i32, i32* %1029, align 4
  %1031 = sub i32 %1012, %1030
  %1032 = icmp ult i32 %1012, %1030
  %1033 = zext i1 %1032 to i8
  store i8 %1033, i8* %14, align 1, !tbaa !2433
  %1034 = and i32 %1031, 255
  %1035 = tail call i32 @llvm.ctpop.i32(i32 %1034) #11
  %1036 = trunc i32 %1035 to i8
  %1037 = and i8 %1036, 1
  %1038 = xor i8 %1037, 1
  store i8 %1038, i8* %21, align 1, !tbaa !2447
  %1039 = xor i32 %1030, %1012
  %1040 = xor i32 %1039, %1031
  %1041 = lshr i32 %1040, 4
  %1042 = trunc i32 %1041 to i8
  %1043 = and i8 %1042, 1
  store i8 %1043, i8* %27, align 1, !tbaa !2451
  %1044 = icmp eq i32 %1031, 0
  %1045 = zext i1 %1044 to i8
  store i8 %1045, i8* %30, align 1, !tbaa !2448
  %1046 = lshr i32 %1031, 31
  %1047 = trunc i32 %1046 to i8
  store i8 %1047, i8* %33, align 1, !tbaa !2449
  %1048 = lshr i32 %1030, 31
  %1049 = xor i32 %1048, %1025
  %1050 = xor i32 %1046, %1025
  %1051 = add nuw nsw i32 %1050, %1049
  %1052 = icmp eq i32 %1051, 2
  %1053 = zext i1 %1052 to i8
  store i8 %1053, i8* %39, align 1, !tbaa !2450
  %.v5 = select i1 %1044, i64 15, i64 572
  %1054 = add i64 %1006, %.v5
  %1055 = add i64 %1007, -28
  %1056 = add i64 %1054, 7
  store i64 %1056, i64* %PC, align 8
  %1057 = inttoptr i64 %1055 to i32*
  store i32 0, i32* %1057, align 4
  %1058 = bitcast %union.VectorReg* %4 to double*
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1060 = bitcast i64* %1059 to double*
  %.pre2 = load i64, i64* %PC, align 8
  br i1 %1044, label %block_4018b0.block_4018c6_crit_edge, label %block_4018b0.block_401af3_crit_edge

block_4018b0.block_4018c6_crit_edge:              ; preds = %block_4018b0
  br label %block_4018c6

block_4018b0.block_401af3_crit_edge:              ; preds = %block_4018b0
  br label %block_401af3

block_401bcf:                                     ; preds = %block_401af3
  %1061 = add i64 %129, 5
  br label %block_401bd4

block_40187b:                                     ; preds = %block_401864, %block_40188a
  %1062 = phi i64 [ %.pre, %block_401864 ], [ %1502, %block_40188a ]
  %MEMORY.2 = phi %struct.Memory* [ %1590, %block_401864 ], [ %1478, %block_40188a ]
  %1063 = load i64, i64* %RBP, align 8
  %1064 = add i64 %1063, -44
  %1065 = add i64 %1062, 3
  store i64 %1065, i64* %PC, align 8
  %1066 = inttoptr i64 %1064 to i32*
  %1067 = load i32, i32* %1066, align 4
  %1068 = shl i32 %1067, 2
  %1069 = zext i32 %1068 to i64
  store i64 %1069, i64* %RAX, align 8, !tbaa !2428
  %1070 = lshr i32 %1067, 30
  %1071 = trunc i32 %1070 to i8
  %1072 = and i8 %1071, 1
  store i8 %1072, i8* %14, align 1, !tbaa !2432
  %1073 = and i32 %1068, 252
  %1074 = tail call i32 @llvm.ctpop.i32(i32 %1073) #11
  %1075 = trunc i32 %1074 to i8
  %1076 = and i8 %1075, 1
  %1077 = xor i8 %1076, 1
  store i8 %1077, i8* %21, align 1, !tbaa !2432
  store i8 0, i8* %27, align 1, !tbaa !2432
  %1078 = icmp eq i32 %1068, 0
  %1079 = zext i1 %1078 to i8
  store i8 %1079, i8* %30, align 1, !tbaa !2432
  %1080 = lshr i32 %1067, 29
  %1081 = and i32 %1080, 1
  %1082 = trunc i32 %1081 to i8
  store i8 %1082, i8* %33, align 1, !tbaa !2432
  store i8 0, i8* %39, align 1, !tbaa !2432
  %1083 = add i64 %1063, -4
  %1084 = add i64 %1062, 9
  store i64 %1084, i64* %PC, align 8
  %1085 = inttoptr i64 %1083 to i32*
  %1086 = load i32, i32* %1085, align 4
  %1087 = sub i32 %1068, %1086
  %1088 = icmp ult i32 %1068, %1086
  %1089 = zext i1 %1088 to i8
  store i8 %1089, i8* %14, align 1, !tbaa !2433
  %1090 = and i32 %1087, 255
  %1091 = tail call i32 @llvm.ctpop.i32(i32 %1090) #11
  %1092 = trunc i32 %1091 to i8
  %1093 = and i8 %1092, 1
  %1094 = xor i8 %1093, 1
  store i8 %1094, i8* %21, align 1, !tbaa !2447
  %1095 = xor i32 %1086, %1068
  %1096 = xor i32 %1095, %1087
  %1097 = lshr i32 %1096, 4
  %1098 = trunc i32 %1097 to i8
  %1099 = and i8 %1098, 1
  store i8 %1099, i8* %27, align 1, !tbaa !2451
  %1100 = icmp eq i32 %1087, 0
  %1101 = zext i1 %1100 to i8
  store i8 %1101, i8* %30, align 1, !tbaa !2448
  %1102 = lshr i32 %1087, 31
  %1103 = trunc i32 %1102 to i8
  store i8 %1103, i8* %33, align 1, !tbaa !2449
  %1104 = lshr i32 %1086, 31
  %1105 = xor i32 %1104, %1081
  %1106 = xor i32 %1102, %1081
  %1107 = add nuw nsw i32 %1106, %1105
  %1108 = icmp eq i32 %1107, 2
  %1109 = zext i1 %1108 to i8
  store i8 %1109, i8* %39, align 1, !tbaa !2450
  %1110 = icmp ne i8 %1103, 0
  %1111 = xor i1 %1110, %1108
  %.v4 = select i1 %1111, i64 15, i64 48
  %1112 = add i64 %1062, %.v4
  store i64 %1112, i64* %PC, align 8, !tbaa !2428
  br i1 %1111, label %block_40188a, label %block_4018ab

block_4018ab:                                     ; preds = %block_40187b
  %1113 = add i64 %1112, 5
  store i64 %1113, i64* %PC, align 8, !tbaa !2428
  br label %block_4018b0

block_401aff:                                     ; preds = %block_401af3
  %1114 = add i64 %129, 3
  store i64 %1114, i64* %PC, align 8
  %1115 = load i32, i32* %96, align 4
  %1116 = zext i32 %1115 to i64
  store i64 %1116, i64* %RAX, align 8, !tbaa !2428
  %1117 = add i64 %129, 6
  store i64 %1117, i64* %PC, align 8
  %1118 = load i32, i32* %101, align 4
  %1119 = add i32 %1118, %1115
  %1120 = zext i32 %1119 to i64
  store i64 %1120, i64* %RAX, align 8, !tbaa !2428
  %1121 = icmp ult i32 %1119, %1115
  %1122 = icmp ult i32 %1119, %1118
  %1123 = or i1 %1121, %1122
  %1124 = zext i1 %1123 to i8
  store i8 %1124, i8* %14, align 1, !tbaa !2433
  %1125 = and i32 %1119, 255
  %1126 = tail call i32 @llvm.ctpop.i32(i32 %1125) #11
  %1127 = trunc i32 %1126 to i8
  %1128 = and i8 %1127, 1
  %1129 = xor i8 %1128, 1
  store i8 %1129, i8* %21, align 1, !tbaa !2447
  %1130 = xor i32 %1118, %1115
  %1131 = xor i32 %1130, %1119
  %1132 = lshr i32 %1131, 4
  %1133 = trunc i32 %1132 to i8
  %1134 = and i8 %1133, 1
  store i8 %1134, i8* %27, align 1, !tbaa !2451
  %1135 = icmp eq i32 %1119, 0
  %1136 = zext i1 %1135 to i8
  store i8 %1136, i8* %30, align 1, !tbaa !2448
  %1137 = lshr i32 %1119, 31
  %1138 = trunc i32 %1137 to i8
  store i8 %1138, i8* %33, align 1, !tbaa !2449
  %1139 = lshr i32 %1115, 31
  %1140 = lshr i32 %1118, 31
  %1141 = xor i32 %1137, %1139
  %1142 = xor i32 %1137, %1140
  %1143 = add nuw nsw i32 %1141, %1142
  %1144 = icmp eq i32 %1143, 2
  %1145 = zext i1 %1144 to i8
  store i8 %1145, i8* %39, align 1, !tbaa !2450
  %1146 = add i64 %93, -32
  %1147 = add i64 %129, 9
  store i64 %1147, i64* %PC, align 8
  %1148 = inttoptr i64 %1146 to i32*
  store i32 %1119, i32* %1148, align 4
  %1149 = load i64, i64* %RBP, align 8
  %1150 = add i64 %1149, -16
  %1151 = load i64, i64* %PC, align 8
  %1152 = add i64 %1151, 4
  store i64 %1152, i64* %PC, align 8
  %1153 = inttoptr i64 %1150 to i64*
  %1154 = load i64, i64* %1153, align 8
  store i64 %1154, i64* %RCX, align 8, !tbaa !2428
  %1155 = add i64 %1149, -28
  %1156 = add i64 %1151, 8
  store i64 %1156, i64* %PC, align 8
  %1157 = inttoptr i64 %1155 to i32*
  %1158 = load i32, i32* %1157, align 4
  %1159 = sext i32 %1158 to i64
  store i64 %1159, i64* %RDX, align 8, !tbaa !2428
  %1160 = shl nsw i64 %1159, 3
  %1161 = add i64 %1160, %1154
  %1162 = add i64 %1151, 13
  store i64 %1162, i64* %PC, align 8
  %1163 = inttoptr i64 %1161 to double*
  %1164 = load double, double* %1163, align 8
  store double %1164, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %1165 = add i64 %1151, 17
  store i64 %1165, i64* %PC, align 8
  %1166 = load i64, i64* %1153, align 8
  store i64 %1166, i64* %RCX, align 8, !tbaa !2428
  %1167 = add i64 %1149, -32
  %1168 = add i64 %1151, 21
  store i64 %1168, i64* %PC, align 8
  %1169 = inttoptr i64 %1167 to i32*
  %1170 = load i32, i32* %1169, align 4
  %1171 = sext i32 %1170 to i64
  store i64 %1171, i64* %RDX, align 8, !tbaa !2428
  %1172 = shl nsw i64 %1171, 3
  %1173 = add i64 %1172, %1166
  %1174 = add i64 %1151, 26
  store i64 %1174, i64* %PC, align 8
  %1175 = inttoptr i64 %1173 to double*
  %1176 = load double, double* %1175, align 8
  %1177 = fsub double %1164, %1176
  store double %1177, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %1178 = add i64 %1149, -56
  %1179 = add i64 %1151, 31
  store i64 %1179, i64* %PC, align 8
  %1180 = inttoptr i64 %1178 to double*
  store double %1177, double* %1180, align 8
  %1181 = load i64, i64* %RBP, align 8
  %1182 = add i64 %1181, -16
  %1183 = load i64, i64* %PC, align 8
  %1184 = add i64 %1183, 4
  store i64 %1184, i64* %PC, align 8
  %1185 = inttoptr i64 %1182 to i64*
  %1186 = load i64, i64* %1185, align 8
  store i64 %1186, i64* %RCX, align 8, !tbaa !2428
  %1187 = add i64 %1181, -28
  %1188 = add i64 %1183, 7
  store i64 %1188, i64* %PC, align 8
  %1189 = inttoptr i64 %1187 to i32*
  %1190 = load i32, i32* %1189, align 4
  %1191 = add i32 %1190, 1
  %1192 = zext i32 %1191 to i64
  store i64 %1192, i64* %RAX, align 8, !tbaa !2428
  %1193 = icmp eq i32 %1190, -1
  %1194 = icmp eq i32 %1191, 0
  %1195 = or i1 %1193, %1194
  %1196 = zext i1 %1195 to i8
  store i8 %1196, i8* %14, align 1, !tbaa !2433
  %1197 = and i32 %1191, 255
  %1198 = tail call i32 @llvm.ctpop.i32(i32 %1197) #11
  %1199 = trunc i32 %1198 to i8
  %1200 = and i8 %1199, 1
  %1201 = xor i8 %1200, 1
  store i8 %1201, i8* %21, align 1, !tbaa !2447
  %1202 = xor i32 %1190, %1191
  %1203 = lshr i32 %1202, 4
  %1204 = trunc i32 %1203 to i8
  %1205 = and i8 %1204, 1
  store i8 %1205, i8* %27, align 1, !tbaa !2451
  %1206 = zext i1 %1194 to i8
  store i8 %1206, i8* %30, align 1, !tbaa !2448
  %1207 = lshr i32 %1191, 31
  %1208 = trunc i32 %1207 to i8
  store i8 %1208, i8* %33, align 1, !tbaa !2449
  %1209 = lshr i32 %1190, 31
  %1210 = xor i32 %1207, %1209
  %1211 = add nuw nsw i32 %1210, %1207
  %1212 = icmp eq i32 %1211, 2
  %1213 = zext i1 %1212 to i8
  store i8 %1213, i8* %39, align 1, !tbaa !2450
  %1214 = sext i32 %1191 to i64
  store i64 %1214, i64* %RDX, align 8, !tbaa !2428
  %1215 = shl nsw i64 %1214, 3
  %1216 = add i64 %1215, %1186
  %1217 = add i64 %1183, 18
  store i64 %1217, i64* %PC, align 8
  %1218 = inttoptr i64 %1216 to double*
  %1219 = load double, double* %1218, align 8
  store double %1219, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %1220 = add i64 %1183, 22
  store i64 %1220, i64* %PC, align 8
  %1221 = load i64, i64* %1185, align 8
  store i64 %1221, i64* %RCX, align 8, !tbaa !2428
  %1222 = add i64 %1181, -32
  %1223 = add i64 %1183, 25
  store i64 %1223, i64* %PC, align 8
  %1224 = inttoptr i64 %1222 to i32*
  %1225 = load i32, i32* %1224, align 4
  %1226 = add i32 %1225, 1
  %1227 = zext i32 %1226 to i64
  store i64 %1227, i64* %RAX, align 8, !tbaa !2428
  %1228 = icmp eq i32 %1225, -1
  %1229 = icmp eq i32 %1226, 0
  %1230 = or i1 %1228, %1229
  %1231 = zext i1 %1230 to i8
  store i8 %1231, i8* %14, align 1, !tbaa !2433
  %1232 = and i32 %1226, 255
  %1233 = tail call i32 @llvm.ctpop.i32(i32 %1232) #11
  %1234 = trunc i32 %1233 to i8
  %1235 = and i8 %1234, 1
  %1236 = xor i8 %1235, 1
  store i8 %1236, i8* %21, align 1, !tbaa !2447
  %1237 = xor i32 %1225, %1226
  %1238 = lshr i32 %1237, 4
  %1239 = trunc i32 %1238 to i8
  %1240 = and i8 %1239, 1
  store i8 %1240, i8* %27, align 1, !tbaa !2451
  %1241 = zext i1 %1229 to i8
  store i8 %1241, i8* %30, align 1, !tbaa !2448
  %1242 = lshr i32 %1226, 31
  %1243 = trunc i32 %1242 to i8
  store i8 %1243, i8* %33, align 1, !tbaa !2449
  %1244 = lshr i32 %1225, 31
  %1245 = xor i32 %1242, %1244
  %1246 = add nuw nsw i32 %1245, %1242
  %1247 = icmp eq i32 %1246, 2
  %1248 = zext i1 %1247 to i8
  store i8 %1248, i8* %39, align 1, !tbaa !2450
  %1249 = sext i32 %1226 to i64
  store i64 %1249, i64* %RDX, align 8, !tbaa !2428
  %1250 = shl nsw i64 %1249, 3
  %1251 = add i64 %1250, %1221
  %1252 = add i64 %1183, 36
  store i64 %1252, i64* %PC, align 8
  %1253 = inttoptr i64 %1251 to double*
  %1254 = load double, double* %1253, align 8
  %1255 = fsub double %1219, %1254
  store double %1255, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %1256 = load i64, i64* %RBP, align 8
  %1257 = add i64 %1256, -64
  %1258 = add i64 %1183, 41
  store i64 %1258, i64* %PC, align 8
  %1259 = inttoptr i64 %1257 to double*
  store double %1255, double* %1259, align 8
  %1260 = load i64, i64* %RBP, align 8
  %1261 = add i64 %1260, -16
  %1262 = load i64, i64* %PC, align 8
  %1263 = add i64 %1262, 4
  store i64 %1263, i64* %PC, align 8
  %1264 = inttoptr i64 %1261 to i64*
  %1265 = load i64, i64* %1264, align 8
  store i64 %1265, i64* %RCX, align 8, !tbaa !2428
  %1266 = add i64 %1260, -32
  %1267 = add i64 %1262, 8
  store i64 %1267, i64* %PC, align 8
  %1268 = inttoptr i64 %1266 to i32*
  %1269 = load i32, i32* %1268, align 4
  %1270 = sext i32 %1269 to i64
  store i64 %1270, i64* %RDX, align 8, !tbaa !2428
  %1271 = shl nsw i64 %1270, 3
  %1272 = add i64 %1271, %1265
  %1273 = add i64 %1262, 13
  store i64 %1273, i64* %PC, align 8
  %1274 = inttoptr i64 %1272 to double*
  %1275 = load double, double* %1274, align 8
  store double %1275, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %1276 = add i64 %1262, 17
  store i64 %1276, i64* %PC, align 8
  %1277 = load i64, i64* %1264, align 8
  store i64 %1277, i64* %RCX, align 8, !tbaa !2428
  %1278 = add i64 %1260, -28
  %1279 = add i64 %1262, 21
  store i64 %1279, i64* %PC, align 8
  %1280 = inttoptr i64 %1278 to i32*
  %1281 = load i32, i32* %1280, align 4
  %1282 = sext i32 %1281 to i64
  store i64 %1282, i64* %RDX, align 8, !tbaa !2428
  %1283 = shl nsw i64 %1282, 3
  %1284 = add i64 %1283, %1277
  %1285 = add i64 %1262, 26
  store i64 %1285, i64* %PC, align 8
  %1286 = inttoptr i64 %1284 to double*
  %1287 = load double, double* %1286, align 8
  %1288 = fadd double %1275, %1287
  store double %1288, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %1289 = add i64 %1262, 31
  store i64 %1289, i64* %PC, align 8
  store double %1288, double* %1286, align 8
  %1290 = load i64, i64* %RBP, align 8
  %1291 = add i64 %1290, -16
  %1292 = load i64, i64* %PC, align 8
  %1293 = add i64 %1292, 4
  store i64 %1293, i64* %PC, align 8
  %1294 = inttoptr i64 %1291 to i64*
  %1295 = load i64, i64* %1294, align 8
  store i64 %1295, i64* %RCX, align 8, !tbaa !2428
  %1296 = add i64 %1290, -32
  %1297 = add i64 %1292, 7
  store i64 %1297, i64* %PC, align 8
  %1298 = inttoptr i64 %1296 to i32*
  %1299 = load i32, i32* %1298, align 4
  %1300 = add i32 %1299, 1
  %1301 = zext i32 %1300 to i64
  store i64 %1301, i64* %RAX, align 8, !tbaa !2428
  %1302 = icmp eq i32 %1299, -1
  %1303 = icmp eq i32 %1300, 0
  %1304 = or i1 %1302, %1303
  %1305 = zext i1 %1304 to i8
  store i8 %1305, i8* %14, align 1, !tbaa !2433
  %1306 = and i32 %1300, 255
  %1307 = tail call i32 @llvm.ctpop.i32(i32 %1306) #11
  %1308 = trunc i32 %1307 to i8
  %1309 = and i8 %1308, 1
  %1310 = xor i8 %1309, 1
  store i8 %1310, i8* %21, align 1, !tbaa !2447
  %1311 = xor i32 %1299, %1300
  %1312 = lshr i32 %1311, 4
  %1313 = trunc i32 %1312 to i8
  %1314 = and i8 %1313, 1
  store i8 %1314, i8* %27, align 1, !tbaa !2451
  %1315 = zext i1 %1303 to i8
  store i8 %1315, i8* %30, align 1, !tbaa !2448
  %1316 = lshr i32 %1300, 31
  %1317 = trunc i32 %1316 to i8
  store i8 %1317, i8* %33, align 1, !tbaa !2449
  %1318 = lshr i32 %1299, 31
  %1319 = xor i32 %1316, %1318
  %1320 = add nuw nsw i32 %1319, %1316
  %1321 = icmp eq i32 %1320, 2
  %1322 = zext i1 %1321 to i8
  store i8 %1322, i8* %39, align 1, !tbaa !2450
  %1323 = sext i32 %1300 to i64
  store i64 %1323, i64* %RDX, align 8, !tbaa !2428
  %1324 = shl nsw i64 %1323, 3
  %1325 = add i64 %1324, %1295
  %1326 = add i64 %1292, 18
  store i64 %1326, i64* %PC, align 8
  %1327 = inttoptr i64 %1325 to double*
  %1328 = load double, double* %1327, align 8
  store double %1328, double* %1058, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %1329 = add i64 %1292, 22
  store i64 %1329, i64* %PC, align 8
  %1330 = load i64, i64* %1294, align 8
  store i64 %1330, i64* %RCX, align 8, !tbaa !2428
  %1331 = add i64 %1290, -28
  %1332 = add i64 %1292, 25
  store i64 %1332, i64* %PC, align 8
  %1333 = inttoptr i64 %1331 to i32*
  %1334 = load i32, i32* %1333, align 4
  %1335 = add i32 %1334, 1
  %1336 = zext i32 %1335 to i64
  store i64 %1336, i64* %RAX, align 8, !tbaa !2428
  %1337 = icmp eq i32 %1334, -1
  %1338 = icmp eq i32 %1335, 0
  %1339 = or i1 %1337, %1338
  %1340 = zext i1 %1339 to i8
  store i8 %1340, i8* %14, align 1, !tbaa !2433
  %1341 = and i32 %1335, 255
  %1342 = tail call i32 @llvm.ctpop.i32(i32 %1341) #11
  %1343 = trunc i32 %1342 to i8
  %1344 = and i8 %1343, 1
  %1345 = xor i8 %1344, 1
  store i8 %1345, i8* %21, align 1, !tbaa !2447
  %1346 = xor i32 %1334, %1335
  %1347 = lshr i32 %1346, 4
  %1348 = trunc i32 %1347 to i8
  %1349 = and i8 %1348, 1
  store i8 %1349, i8* %27, align 1, !tbaa !2451
  %1350 = zext i1 %1338 to i8
  store i8 %1350, i8* %30, align 1, !tbaa !2448
  %1351 = lshr i32 %1335, 31
  %1352 = trunc i32 %1351 to i8
  store i8 %1352, i8* %33, align 1, !tbaa !2449
  %1353 = lshr i32 %1334, 31
  %1354 = xor i32 %1351, %1353
  %1355 = add nuw nsw i32 %1354, %1351
  %1356 = icmp eq i32 %1355, 2
  %1357 = zext i1 %1356 to i8
  store i8 %1357, i8* %39, align 1, !tbaa !2450
  %1358 = sext i32 %1335 to i64
  store i64 %1358, i64* %RDX, align 8, !tbaa !2428
  %1359 = shl nsw i64 %1358, 3
  %1360 = add i64 %1359, %1330
  %1361 = add i64 %1292, 36
  store i64 %1361, i64* %PC, align 8
  %1362 = inttoptr i64 %1360 to double*
  %1363 = load double, double* %1362, align 8
  %1364 = fadd double %1328, %1363
  store double %1364, double* %1058, align 1, !tbaa !2452
  store i64 0, i64* %1059, align 1, !tbaa !2452
  %1365 = add i64 %1292, 41
  store i64 %1365, i64* %PC, align 8
  store double %1364, double* %1362, align 8
  %1366 = load i64, i64* %RBP, align 8
  %1367 = add i64 %1366, -56
  %1368 = load i64, i64* %PC, align 8
  %1369 = add i64 %1368, 5
  store i64 %1369, i64* %PC, align 8
  %1370 = inttoptr i64 %1367 to i64*
  %1371 = load i64, i64* %1370, align 8
  %1372 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %1371, i64* %1372, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %1373 = add i64 %1366, -16
  %1374 = add i64 %1368, 9
  store i64 %1374, i64* %PC, align 8
  %1375 = inttoptr i64 %1373 to i64*
  %1376 = load i64, i64* %1375, align 8
  store i64 %1376, i64* %RCX, align 8, !tbaa !2428
  %1377 = add i64 %1366, -32
  %1378 = add i64 %1368, 13
  store i64 %1378, i64* %PC, align 8
  %1379 = inttoptr i64 %1377 to i32*
  %1380 = load i32, i32* %1379, align 4
  %1381 = sext i32 %1380 to i64
  store i64 %1381, i64* %RDX, align 8, !tbaa !2428
  %1382 = shl nsw i64 %1381, 3
  %1383 = add i64 %1382, %1376
  %1384 = add i64 %1368, 18
  store i64 %1384, i64* %PC, align 8
  %1385 = inttoptr i64 %1383 to i64*
  store i64 %1371, i64* %1385, align 8
  %1386 = load i64, i64* %RBP, align 8
  %1387 = add i64 %1386, -64
  %1388 = load i64, i64* %PC, align 8
  %1389 = add i64 %1388, 5
  store i64 %1389, i64* %PC, align 8
  %1390 = inttoptr i64 %1387 to i64*
  %1391 = load i64, i64* %1390, align 8
  store i64 %1391, i64* %1372, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1060, align 1, !tbaa !2452
  %1392 = add i64 %1386, -16
  %1393 = add i64 %1388, 9
  store i64 %1393, i64* %PC, align 8
  %1394 = inttoptr i64 %1392 to i64*
  %1395 = load i64, i64* %1394, align 8
  store i64 %1395, i64* %RCX, align 8, !tbaa !2428
  %1396 = add i64 %1386, -32
  %1397 = add i64 %1388, 12
  store i64 %1397, i64* %PC, align 8
  %1398 = inttoptr i64 %1396 to i32*
  %1399 = load i32, i32* %1398, align 4
  %1400 = add i32 %1399, 1
  %1401 = zext i32 %1400 to i64
  store i64 %1401, i64* %RAX, align 8, !tbaa !2428
  %1402 = icmp eq i32 %1399, -1
  %1403 = icmp eq i32 %1400, 0
  %1404 = or i1 %1402, %1403
  %1405 = zext i1 %1404 to i8
  store i8 %1405, i8* %14, align 1, !tbaa !2433
  %1406 = and i32 %1400, 255
  %1407 = tail call i32 @llvm.ctpop.i32(i32 %1406) #11
  %1408 = trunc i32 %1407 to i8
  %1409 = and i8 %1408, 1
  %1410 = xor i8 %1409, 1
  store i8 %1410, i8* %21, align 1, !tbaa !2447
  %1411 = xor i32 %1399, %1400
  %1412 = lshr i32 %1411, 4
  %1413 = trunc i32 %1412 to i8
  %1414 = and i8 %1413, 1
  store i8 %1414, i8* %27, align 1, !tbaa !2451
  %1415 = zext i1 %1403 to i8
  store i8 %1415, i8* %30, align 1, !tbaa !2448
  %1416 = lshr i32 %1400, 31
  %1417 = trunc i32 %1416 to i8
  store i8 %1417, i8* %33, align 1, !tbaa !2449
  %1418 = lshr i32 %1399, 31
  %1419 = xor i32 %1416, %1418
  %1420 = add nuw nsw i32 %1419, %1416
  %1421 = icmp eq i32 %1420, 2
  %1422 = zext i1 %1421 to i8
  store i8 %1422, i8* %39, align 1, !tbaa !2450
  %1423 = sext i32 %1400 to i64
  store i64 %1423, i64* %RDX, align 8, !tbaa !2428
  %1424 = shl nsw i64 %1423, 3
  %1425 = add i64 %1424, %1395
  %1426 = add i64 %1388, 23
  store i64 %1426, i64* %PC, align 8
  %1427 = inttoptr i64 %1425 to i64*
  store i64 %1391, i64* %1427, align 8
  %1428 = load i64, i64* %RBP, align 8
  %1429 = add i64 %1428, -28
  %1430 = load i64, i64* %PC, align 8
  %1431 = add i64 %1430, 3
  store i64 %1431, i64* %PC, align 8
  %1432 = inttoptr i64 %1429 to i32*
  %1433 = load i32, i32* %1432, align 4
  %1434 = add i32 %1433, 2
  %1435 = zext i32 %1434 to i64
  store i64 %1435, i64* %RAX, align 8, !tbaa !2428
  %1436 = icmp ugt i32 %1433, -3
  %1437 = zext i1 %1436 to i8
  store i8 %1437, i8* %14, align 1, !tbaa !2433
  %1438 = and i32 %1434, 255
  %1439 = tail call i32 @llvm.ctpop.i32(i32 %1438) #11
  %1440 = trunc i32 %1439 to i8
  %1441 = and i8 %1440, 1
  %1442 = xor i8 %1441, 1
  store i8 %1442, i8* %21, align 1, !tbaa !2447
  %1443 = xor i32 %1433, %1434
  %1444 = lshr i32 %1443, 4
  %1445 = trunc i32 %1444 to i8
  %1446 = and i8 %1445, 1
  store i8 %1446, i8* %27, align 1, !tbaa !2451
  %1447 = icmp eq i32 %1434, 0
  %1448 = zext i1 %1447 to i8
  store i8 %1448, i8* %30, align 1, !tbaa !2448
  %1449 = lshr i32 %1434, 31
  %1450 = trunc i32 %1449 to i8
  store i8 %1450, i8* %33, align 1, !tbaa !2449
  %1451 = lshr i32 %1433, 31
  %1452 = xor i32 %1449, %1451
  %1453 = add nuw nsw i32 %1452, %1449
  %1454 = icmp eq i32 %1453, 2
  %1455 = zext i1 %1454 to i8
  store i8 %1455, i8* %39, align 1, !tbaa !2450
  %1456 = add i64 %1430, 9
  store i64 %1456, i64* %PC, align 8
  store i32 %1434, i32* %1432, align 4
  %1457 = load i64, i64* %PC, align 8
  %1458 = add i64 %1457, -215
  store i64 %1458, i64* %PC, align 8, !tbaa !2428
  br label %block_401af3

block_40188a:                                     ; preds = %block_40187b
  %1459 = add i64 %1112, 3
  store i64 %1459, i64* %PC, align 8
  %1460 = load i32, i32* %1085, align 4
  %1461 = zext i32 %1460 to i64
  store i64 %1461, i64* %RDI, align 8, !tbaa !2428
  %1462 = add i64 %1112, 6
  store i64 %1462, i64* %PC, align 8
  %1463 = load i32, i32* %1066, align 4
  %1464 = zext i32 %1463 to i64
  store i64 %1464, i64* %RSI, align 8, !tbaa !2428
  %1465 = add i64 %1063, -16
  %1466 = add i64 %1112, 10
  store i64 %1466, i64* %PC, align 8
  %1467 = inttoptr i64 %1465 to i64*
  %1468 = load i64, i64* %1467, align 8
  store i64 %1468, i64* %RDX, align 8, !tbaa !2428
  %1469 = add i64 %1063, -24
  %1470 = add i64 %1112, 14
  store i64 %1470, i64* %PC, align 8
  %1471 = inttoptr i64 %1469 to i64*
  %1472 = load i64, i64* %1471, align 8
  store i64 %1472, i64* %RCX, align 8, !tbaa !2428
  %1473 = add i64 %1112, 6774
  %1474 = add i64 %1112, 19
  %1475 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1476 = add i64 %1475, -8
  %1477 = inttoptr i64 %1476 to i64*
  store i64 %1474, i64* %1477, align 8
  store i64 %1476, i64* %RSP, align 8, !tbaa !2428
  store i64 %1473, i64* %PC, align 8, !tbaa !2428
  %1478 = tail call %struct.Memory* @sub_403300_cftmdl_renamed_(%struct.State* nonnull %0, i64 %1473, %struct.Memory* %MEMORY.2)
  %1479 = load i64, i64* %RBP, align 8
  %1480 = add i64 %1479, -44
  %1481 = load i64, i64* %PC, align 8
  %1482 = add i64 %1481, 3
  store i64 %1482, i64* %PC, align 8
  %1483 = inttoptr i64 %1480 to i32*
  %1484 = load i32, i32* %1483, align 4
  %1485 = shl i32 %1484, 2
  %1486 = zext i32 %1485 to i64
  store i64 %1486, i64* %RSI, align 8, !tbaa !2428
  %1487 = lshr i32 %1484, 30
  %1488 = trunc i32 %1487 to i8
  %1489 = and i8 %1488, 1
  store i8 %1489, i8* %14, align 1, !tbaa !2432
  %1490 = and i32 %1485, 252
  %1491 = tail call i32 @llvm.ctpop.i32(i32 %1490) #11
  %1492 = trunc i32 %1491 to i8
  %1493 = and i8 %1492, 1
  %1494 = xor i8 %1493, 1
  store i8 %1494, i8* %21, align 1, !tbaa !2432
  store i8 0, i8* %27, align 1, !tbaa !2432
  %1495 = icmp eq i32 %1485, 0
  %1496 = zext i1 %1495 to i8
  store i8 %1496, i8* %30, align 1, !tbaa !2432
  %1497 = lshr i32 %1484, 29
  %1498 = trunc i32 %1497 to i8
  %1499 = and i8 %1498, 1
  store i8 %1499, i8* %33, align 1, !tbaa !2432
  store i8 0, i8* %39, align 1, !tbaa !2432
  %1500 = add i64 %1481, 9
  store i64 %1500, i64* %PC, align 8
  store i32 %1485, i32* %1483, align 4
  %1501 = load i64, i64* %PC, align 8
  %1502 = add i64 %1501, -43
  store i64 %1502, i64* %PC, align 8, !tbaa !2428
  br label %block_40187b

block_401ae7:                                     ; preds = %block_4018c6
  %1503 = add i64 %1573, 237
  br label %block_401bd4

block_401bd4:                                     ; preds = %block_401ae7, %block_401bcf
  %.sink = phi i64 [ %1503, %block_401ae7 ], [ %1061, %block_401bcf ]
  %1504 = load i64, i64* %RSP, align 8
  %1505 = add i64 %1504, 112
  store i64 %1505, i64* %RSP, align 8, !tbaa !2428
  %1506 = icmp ugt i64 %1504, -113
  %1507 = zext i1 %1506 to i8
  store i8 %1507, i8* %14, align 1, !tbaa !2433
  %1508 = trunc i64 %1505 to i32
  %1509 = and i32 %1508, 255
  %1510 = tail call i32 @llvm.ctpop.i32(i32 %1509) #11
  %1511 = trunc i32 %1510 to i8
  %1512 = and i8 %1511, 1
  %1513 = xor i8 %1512, 1
  store i8 %1513, i8* %21, align 1, !tbaa !2447
  %1514 = xor i64 %1504, 16
  %1515 = xor i64 %1514, %1505
  %1516 = lshr i64 %1515, 4
  %1517 = trunc i64 %1516 to i8
  %1518 = and i8 %1517, 1
  store i8 %1518, i8* %27, align 1, !tbaa !2451
  %1519 = icmp eq i64 %1505, 0
  %1520 = zext i1 %1519 to i8
  store i8 %1520, i8* %30, align 1, !tbaa !2448
  %1521 = lshr i64 %1505, 63
  %1522 = trunc i64 %1521 to i8
  store i8 %1522, i8* %33, align 1, !tbaa !2449
  %1523 = lshr i64 %1504, 63
  %1524 = xor i64 %1521, %1523
  %1525 = add nuw nsw i64 %1524, %1521
  %1526 = icmp eq i64 %1525, 2
  %1527 = zext i1 %1526 to i8
  store i8 %1527, i8* %39, align 1, !tbaa !2450
  %1528 = add i64 %.sink, 5
  store i64 %1528, i64* %PC, align 8
  %1529 = add i64 %1504, 120
  %1530 = inttoptr i64 %1505 to i64*
  %1531 = load i64, i64* %1530, align 8
  store i64 %1531, i64* %RBP, align 8, !tbaa !2428
  store i64 %1529, i64* %RSP, align 8, !tbaa !2428
  %1532 = add i64 %.sink, 6
  store i64 %1532, i64* %PC, align 8
  %1533 = inttoptr i64 %1529 to i64*
  %1534 = load i64, i64* %1533, align 8
  store i64 %1534, i64* %PC, align 8, !tbaa !2428
  %1535 = add i64 %1504, 128
  store i64 %1535, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_4018c6:                                     ; preds = %block_4018b0.block_4018c6_crit_edge, %block_4018d2
  %1536 = phi i64 [ %1005, %block_4018d2 ], [ %.pre2, %block_4018b0.block_4018c6_crit_edge ]
  %1537 = load i64, i64* %RBP, align 8
  %1538 = add i64 %1537, -28
  %1539 = add i64 %1536, 3
  store i64 %1539, i64* %PC, align 8
  %1540 = inttoptr i64 %1538 to i32*
  %1541 = load i32, i32* %1540, align 4
  %1542 = zext i32 %1541 to i64
  store i64 %1542, i64* %RAX, align 8, !tbaa !2428
  %1543 = add i64 %1537, -44
  %1544 = add i64 %1536, 6
  store i64 %1544, i64* %PC, align 8
  %1545 = inttoptr i64 %1543 to i32*
  %1546 = load i32, i32* %1545, align 4
  %1547 = sub i32 %1541, %1546
  %1548 = icmp ult i32 %1541, %1546
  %1549 = zext i1 %1548 to i8
  store i8 %1549, i8* %14, align 1, !tbaa !2433
  %1550 = and i32 %1547, 255
  %1551 = tail call i32 @llvm.ctpop.i32(i32 %1550) #11
  %1552 = trunc i32 %1551 to i8
  %1553 = and i8 %1552, 1
  %1554 = xor i8 %1553, 1
  store i8 %1554, i8* %21, align 1, !tbaa !2447
  %1555 = xor i32 %1546, %1541
  %1556 = xor i32 %1555, %1547
  %1557 = lshr i32 %1556, 4
  %1558 = trunc i32 %1557 to i8
  %1559 = and i8 %1558, 1
  store i8 %1559, i8* %27, align 1, !tbaa !2451
  %1560 = icmp eq i32 %1547, 0
  %1561 = zext i1 %1560 to i8
  store i8 %1561, i8* %30, align 1, !tbaa !2448
  %1562 = lshr i32 %1547, 31
  %1563 = trunc i32 %1562 to i8
  store i8 %1563, i8* %33, align 1, !tbaa !2449
  %1564 = lshr i32 %1541, 31
  %1565 = lshr i32 %1546, 31
  %1566 = xor i32 %1565, %1564
  %1567 = xor i32 %1562, %1564
  %1568 = add nuw nsw i32 %1567, %1566
  %1569 = icmp eq i32 %1568, 2
  %1570 = zext i1 %1569 to i8
  store i8 %1570, i8* %39, align 1, !tbaa !2450
  %1571 = icmp ne i8 %1563, 0
  %1572 = xor i1 %1571, %1569
  %.v6 = select i1 %1572, i64 12, i64 545
  %1573 = add i64 %1536, %.v6
  store i64 %1573, i64* %PC, align 8, !tbaa !2428
  br i1 %1572, label %block_4018d2, label %block_401ae7

block_401864:                                     ; preds = %block_401840
  %1574 = add i64 %91, 3
  store i64 %1574, i64* %PC, align 8
  %1575 = load i32, i32* %65, align 4
  %1576 = zext i32 %1575 to i64
  store i64 %1576, i64* %RDI, align 8, !tbaa !2428
  %1577 = add i64 %61, -16
  %1578 = add i64 %91, 7
  store i64 %1578, i64* %PC, align 8
  %1579 = inttoptr i64 %1577 to i64*
  %1580 = load i64, i64* %1579, align 8
  store i64 %1580, i64* %RSI, align 8, !tbaa !2428
  %1581 = add i64 %61, -24
  %1582 = add i64 %91, 11
  store i64 %1582, i64* %PC, align 8
  %1583 = inttoptr i64 %1581 to i64*
  %1584 = load i64, i64* %1583, align 8
  store i64 %1584, i64* %RDX, align 8, !tbaa !2428
  %1585 = add i64 %91, 4108
  %1586 = add i64 %91, 16
  %1587 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1588 = add i64 %1587, -8
  %1589 = inttoptr i64 %1588 to i64*
  store i64 %1586, i64* %1589, align 8
  store i64 %1588, i64* %RSP, align 8, !tbaa !2428
  store i64 %1585, i64* %PC, align 8, !tbaa !2428
  %1590 = tail call %struct.Memory* @sub_402870_cft1st_renamed_(%struct.State* nonnull %0, i64 %1585, %struct.Memory* %2)
  %1591 = load i64, i64* %RBP, align 8
  %1592 = add i64 %1591, -44
  %1593 = load i64, i64* %PC, align 8
  %1594 = add i64 %1593, 7
  store i64 %1594, i64* %PC, align 8
  %1595 = inttoptr i64 %1592 to i32*
  store i32 8, i32* %1595, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_40187b
}

; Function Attrs: noinline
define %struct.Memory* @sub_403300_cftmdl(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_403300:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %8 = load i64, i64* %RBP, align 8
  %9 = add i64 %1, 1
  store i64 %9, i64* %PC, align 8
  %10 = load i64, i64* %RSP, align 8, !tbaa !2428
  %11 = add i64 %10, -8
  %12 = inttoptr i64 %11 to i64*
  store i64 %8, i64* %12, align 8
  %13 = load i64, i64* %PC, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  %14 = add i64 %10, -56
  store i64 %14, i64* %RSP, align 8, !tbaa !2428
  %15 = icmp ult i64 %11, 48
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %16, i8* %17, align 1, !tbaa !2433
  %18 = trunc i64 %14 to i32
  %19 = and i32 %18, 255
  %20 = tail call i32 @llvm.ctpop.i32(i32 %19) #11
  %21 = trunc i32 %20 to i8
  %22 = and i8 %21, 1
  %23 = xor i8 %22, 1
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %23, i8* %24, align 1, !tbaa !2447
  %25 = xor i64 %11, 16
  %26 = xor i64 %25, %14
  %27 = lshr i64 %26, 4
  %28 = trunc i64 %27 to i8
  %29 = and i8 %28, 1
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %29, i8* %30, align 1, !tbaa !2451
  %31 = icmp eq i64 %14, 0
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %32, i8* %33, align 1, !tbaa !2448
  %34 = lshr i64 %14, 63
  %35 = trunc i64 %34 to i8
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %35, i8* %36, align 1, !tbaa !2449
  %37 = lshr i64 %11, 63
  %38 = xor i64 %34, %37
  %39 = add nuw nsw i64 %38, %37
  %40 = icmp eq i64 %39, 2
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %41, i8* %42, align 1, !tbaa !2450
  %43 = add i64 %10, -12
  %44 = load i32, i32* %EDI, align 4
  %45 = add i64 %13, 10
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %43 to i32*
  store i32 %44, i32* %46, align 4
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -8
  %49 = load i32, i32* %ESI, align 4
  %50 = load i64, i64* %PC, align 8
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %48 to i32*
  store i32 %49, i32* %52, align 4
  %53 = load i64, i64* %RBP, align 8
  %54 = add i64 %53, -16
  %55 = load i64, i64* %RDX, align 8
  %56 = load i64, i64* %PC, align 8
  %57 = add i64 %56, 4
  store i64 %57, i64* %PC, align 8
  %58 = inttoptr i64 %54 to i64*
  store i64 %55, i64* %58, align 8
  %59 = load i64, i64* %RBP, align 8
  %60 = add i64 %59, -24
  %61 = load i64, i64* %RCX, align 8
  %62 = load i64, i64* %PC, align 8
  %63 = add i64 %62, 4
  store i64 %63, i64* %PC, align 8
  %64 = inttoptr i64 %60 to i64*
  store i64 %61, i64* %64, align 8
  %65 = load i64, i64* %RBP, align 8
  %66 = add i64 %65, -8
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC, align 8
  %69 = inttoptr i64 %66 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = shl i32 %70, 2
  %72 = zext i32 %71 to i64
  store i64 %72, i64* %RSI, align 8, !tbaa !2428
  %73 = lshr i32 %70, 30
  %74 = trunc i32 %73 to i8
  %75 = and i8 %74, 1
  store i8 %75, i8* %17, align 1, !tbaa !2432
  %76 = and i32 %71, 252
  %77 = tail call i32 @llvm.ctpop.i32(i32 %76) #11
  %78 = trunc i32 %77 to i8
  %79 = and i8 %78, 1
  %80 = xor i8 %79, 1
  store i8 %80, i8* %24, align 1, !tbaa !2432
  store i8 0, i8* %30, align 1, !tbaa !2432
  %81 = icmp eq i32 %71, 0
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %33, align 1, !tbaa !2432
  %83 = lshr i32 %70, 29
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  store i8 %85, i8* %36, align 1, !tbaa !2432
  store i8 0, i8* %42, align 1, !tbaa !2432
  %86 = add i64 %65, -56
  %87 = add i64 %67, 9
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to i32*
  store i32 %71, i32* %88, align 4
  %89 = load i64, i64* %RBP, align 8
  %90 = add i64 %89, -28
  %91 = load i64, i64* %PC, align 8
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %90 to i32*
  store i32 0, i32* %93, align 4
  %94 = bitcast [32 x %union.VectorReg]* %5 to double*
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %96 = bitcast i64* %95 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_403326

block_403c22:                                     ; preds = %block_403910
  %97 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 80) to i64*), align 16
  store i64 %97, i64* %275, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %98 = add i64 %1575, -24
  %99 = add i64 %1618, 12
  store i64 %99, i64* %PC, align 8
  %100 = inttoptr i64 %98 to i64*
  %101 = load i64, i64* %100, align 8
  store i64 %101, i64* %RAX, align 8, !tbaa !2428
  %102 = add i64 %1575, -52
  %103 = add i64 %1618, 15
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %102 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = add i32 %105, 2
  %107 = zext i32 %106 to i64
  store i64 %107, i64* %RCX, align 8, !tbaa !2428
  %108 = icmp ugt i32 %105, -3
  %109 = zext i1 %108 to i8
  store i8 %109, i8* %17, align 1, !tbaa !2433
  %110 = and i32 %106, 255
  %111 = tail call i32 @llvm.ctpop.i32(i32 %110) #11
  %112 = trunc i32 %111 to i8
  %113 = and i8 %112, 1
  %114 = xor i8 %113, 1
  store i8 %114, i8* %24, align 1, !tbaa !2447
  %115 = xor i32 %105, %106
  %116 = lshr i32 %115, 4
  %117 = trunc i32 %116 to i8
  %118 = and i8 %117, 1
  store i8 %118, i8* %30, align 1, !tbaa !2451
  %119 = icmp eq i32 %106, 0
  %120 = zext i1 %119 to i8
  store i8 %120, i8* %33, align 1, !tbaa !2448
  %121 = lshr i32 %106, 31
  %122 = trunc i32 %121 to i8
  store i8 %122, i8* %36, align 1, !tbaa !2449
  %123 = lshr i32 %105, 31
  %124 = xor i32 %121, %123
  %125 = add nuw nsw i32 %124, %121
  %126 = icmp eq i32 %125, 2
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %42, align 1, !tbaa !2450
  %128 = sext i32 %106 to i64
  store i64 %128, i64* %RDX, align 8, !tbaa !2428
  %129 = shl nsw i64 %128, 3
  %130 = add i64 %129, %101
  %131 = add i64 %1618, 26
  store i64 %131, i64* %PC, align 8
  %132 = inttoptr i64 %130 to i64*
  %133 = load i64, i64* %132, align 8
  store i64 %133, i64* %1238, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %134 = add i64 %1575, -72
  %135 = add i64 %1618, 31
  store i64 %135, i64* %PC, align 8
  %136 = inttoptr i64 %134 to i64*
  store i64 %133, i64* %136, align 8
  %137 = load i64, i64* %RBP, align 8
  %138 = add i64 %137, -24
  %139 = load i64, i64* %PC, align 8
  %140 = add i64 %139, 4
  store i64 %140, i64* %PC, align 8
  %141 = inttoptr i64 %138 to i64*
  %142 = load i64, i64* %141, align 8
  store i64 %142, i64* %RAX, align 8, !tbaa !2428
  %143 = add i64 %137, -52
  %144 = add i64 %139, 7
  store i64 %144, i64* %PC, align 8
  %145 = inttoptr i64 %143 to i32*
  %146 = load i32, i32* %145, align 4
  %147 = add i32 %146, 3
  %148 = zext i32 %147 to i64
  store i64 %148, i64* %RCX, align 8, !tbaa !2428
  %149 = icmp ugt i32 %146, -4
  %150 = zext i1 %149 to i8
  store i8 %150, i8* %17, align 1, !tbaa !2433
  %151 = and i32 %147, 255
  %152 = tail call i32 @llvm.ctpop.i32(i32 %151) #11
  %153 = trunc i32 %152 to i8
  %154 = and i8 %153, 1
  %155 = xor i8 %154, 1
  store i8 %155, i8* %24, align 1, !tbaa !2447
  %156 = xor i32 %146, %147
  %157 = lshr i32 %156, 4
  %158 = trunc i32 %157 to i8
  %159 = and i8 %158, 1
  store i8 %159, i8* %30, align 1, !tbaa !2451
  %160 = icmp eq i32 %147, 0
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %33, align 1, !tbaa !2448
  %162 = lshr i32 %147, 31
  %163 = trunc i32 %162 to i8
  store i8 %163, i8* %36, align 1, !tbaa !2449
  %164 = lshr i32 %146, 31
  %165 = xor i32 %162, %164
  %166 = add nuw nsw i32 %165, %162
  %167 = icmp eq i32 %166, 2
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %42, align 1, !tbaa !2450
  %169 = sext i32 %147 to i64
  store i64 %169, i64* %RDX, align 8, !tbaa !2428
  %170 = shl nsw i64 %169, 3
  %171 = add i64 %170, %142
  %172 = add i64 %139, 18
  store i64 %172, i64* %PC, align 8
  %173 = inttoptr i64 %171 to i64*
  %174 = load i64, i64* %173, align 8
  store i64 %174, i64* %1238, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %175 = add i64 %137, -80
  %176 = add i64 %139, 23
  store i64 %176, i64* %PC, align 8
  %177 = inttoptr i64 %175 to i64*
  store i64 %174, i64* %177, align 8
  %178 = load i64, i64* %RBP, align 8
  %179 = add i64 %178, -72
  %180 = load i64, i64* %PC, align 8
  %181 = add i64 %180, 5
  store i64 %181, i64* %PC, align 8
  %182 = inttoptr i64 %179 to double*
  %183 = load double, double* %182, align 8
  store double %183, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %184 = load <2 x i32>, <2 x i32>* %1443, align 1
  %185 = load <2 x i32>, <2 x i32>* %1444, align 1
  %186 = extractelement <2 x i32> %184, i32 0
  store i32 %186, i32* %1445, align 1, !tbaa !2475
  %187 = extractelement <2 x i32> %184, i32 1
  store i32 %187, i32* %1447, align 1, !tbaa !2475
  %188 = extractelement <2 x i32> %185, i32 0
  store i32 %188, i32* %1449, align 1, !tbaa !2475
  %189 = extractelement <2 x i32> %185, i32 1
  store i32 %189, i32* %1451, align 1, !tbaa !2475
  %190 = add i64 %178, -88
  %191 = add i64 %180, 13
  store i64 %191, i64* %PC, align 8
  %192 = load double, double* %1452, align 1
  %193 = inttoptr i64 %190 to double*
  %194 = load double, double* %193, align 8
  %195 = fmul double %192, %194
  store double %195, double* %1452, align 1, !tbaa !2452
  %196 = add i64 %178, -80
  %197 = add i64 %180, 18
  store i64 %197, i64* %PC, align 8
  %198 = inttoptr i64 %196 to double*
  %199 = load double, double* %198, align 8
  %200 = fmul double %195, %199
  store double %200, double* %1452, align 1, !tbaa !2452
  %201 = fsub double %183, %200
  store double %201, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %202 = add i64 %178, -104
  %203 = add i64 %180, 27
  store i64 %203, i64* %PC, align 8
  %204 = inttoptr i64 %202 to double*
  store double %201, double* %204, align 8
  %205 = load i64, i64* %RBP, align 8
  %206 = add i64 %205, -88
  %207 = load i64, i64* %PC, align 8
  %208 = add i64 %207, 5
  store i64 %208, i64* %PC, align 8
  %209 = load double, double* %94, align 1
  %210 = inttoptr i64 %206 to double*
  %211 = load double, double* %210, align 8
  %212 = fmul double %209, %211
  store double %212, double* %94, align 1, !tbaa !2452
  %213 = add i64 %205, -72
  %214 = add i64 %207, 10
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to double*
  %216 = load double, double* %215, align 8
  %217 = fmul double %212, %216
  store double %217, double* %94, align 1, !tbaa !2452
  %218 = add i64 %205, -80
  %219 = add i64 %207, 15
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %218 to double*
  %221 = load double, double* %220, align 8
  %222 = fsub double %217, %221
  store double %222, double* %94, align 1, !tbaa !2452
  %223 = add i64 %205, -112
  %224 = add i64 %207, 20
  store i64 %224, i64* %PC, align 8
  %225 = inttoptr i64 %223 to double*
  store double %222, double* %225, align 8
  %226 = load i64, i64* %RBP, align 8
  %227 = add i64 %226, -44
  %228 = load i64, i64* %PC, align 8
  %229 = add i64 %228, 3
  store i64 %229, i64* %PC, align 8
  %230 = inttoptr i64 %227 to i32*
  %231 = load i32, i32* %230, align 4
  %232 = zext i32 %231 to i64
  store i64 %232, i64* %RCX, align 8, !tbaa !2428
  %233 = add i64 %226, -56
  %234 = add i64 %228, 6
  store i64 %234, i64* %PC, align 8
  %235 = inttoptr i64 %233 to i32*
  %236 = load i32, i32* %235, align 4
  %237 = add i32 %236, %231
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %RCX, align 8, !tbaa !2428
  %239 = icmp ult i32 %237, %231
  %240 = icmp ult i32 %237, %236
  %241 = or i1 %239, %240
  %242 = zext i1 %241 to i8
  store i8 %242, i8* %17, align 1, !tbaa !2433
  %243 = and i32 %237, 255
  %244 = tail call i32 @llvm.ctpop.i32(i32 %243) #11
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  store i8 %247, i8* %24, align 1, !tbaa !2447
  %248 = xor i32 %236, %231
  %249 = xor i32 %248, %237
  %250 = lshr i32 %249, 4
  %251 = trunc i32 %250 to i8
  %252 = and i8 %251, 1
  store i8 %252, i8* %30, align 1, !tbaa !2451
  %253 = icmp eq i32 %237, 0
  %254 = zext i1 %253 to i8
  store i8 %254, i8* %33, align 1, !tbaa !2448
  %255 = lshr i32 %237, 31
  %256 = trunc i32 %255 to i8
  store i8 %256, i8* %36, align 1, !tbaa !2449
  %257 = lshr i32 %231, 31
  %258 = lshr i32 %236, 31
  %259 = xor i32 %255, %257
  %260 = xor i32 %255, %258
  %261 = add nuw nsw i32 %259, %260
  %262 = icmp eq i32 %261, 2
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %42, align 1, !tbaa !2450
  %264 = add i64 %226, -28
  %265 = add i64 %228, 9
  store i64 %265, i64* %PC, align 8
  %266 = inttoptr i64 %264 to i32*
  store i32 %237, i32* %266, align 4
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_403c90

block_40357d:                                     ; preds = %block_403326
  %267 = add i64 %4713, -24
  %268 = add i64 %4749, 4
  store i64 %268, i64* %PC, align 8
  %269 = inttoptr i64 %267 to i64*
  %270 = load i64, i64* %269, align 8
  store i64 %270, i64* %RAX, align 8, !tbaa !2428
  %271 = add i64 %270, 16
  %272 = add i64 %4749, 9
  store i64 %272, i64* %PC, align 8
  %273 = inttoptr i64 %271 to i64*
  %274 = load i64, i64* %273, align 8
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %5, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %274, i64* %275, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %276 = add i64 %4713, -72
  %277 = add i64 %4749, 14
  store i64 %277, i64* %PC, align 8
  %278 = inttoptr i64 %276 to i64*
  store i64 %274, i64* %278, align 8
  %279 = load i64, i64* %RBP, align 8
  %280 = add i64 %279, -56
  %281 = load i64, i64* %PC, align 8
  %282 = add i64 %281, 3
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %280 to i32*
  %284 = load i32, i32* %283, align 4
  %285 = zext i32 %284 to i64
  store i64 %285, i64* %RCX, align 8, !tbaa !2428
  %286 = add i64 %279, -28
  %287 = add i64 %281, 6
  store i64 %287, i64* %PC, align 8
  %288 = inttoptr i64 %286 to i32*
  store i32 %284, i32* %288, align 4
  %289 = bitcast %union.VectorReg* %6 to double*
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %291 = bitcast i64* %290 to double*
  %.pre3 = load i64, i64* %PC, align 8
  br label %block_403591

block_403332:                                     ; preds = %block_403326
  %292 = add i64 %4749, 3
  store i64 %292, i64* %PC, align 8
  %293 = load i32, i32* %4716, align 4
  %294 = zext i32 %293 to i64
  store i64 %294, i64* %RAX, align 8, !tbaa !2428
  %295 = add i64 %4749, 6
  store i64 %295, i64* %PC, align 8
  %296 = load i32, i32* %4721, align 4
  %297 = add i32 %296, %293
  %298 = zext i32 %297 to i64
  store i64 %298, i64* %RAX, align 8, !tbaa !2428
  %299 = icmp ult i32 %297, %293
  %300 = icmp ult i32 %297, %296
  %301 = or i1 %299, %300
  %302 = zext i1 %301 to i8
  store i8 %302, i8* %17, align 1, !tbaa !2433
  %303 = and i32 %297, 255
  %304 = tail call i32 @llvm.ctpop.i32(i32 %303) #11
  %305 = trunc i32 %304 to i8
  %306 = and i8 %305, 1
  %307 = xor i8 %306, 1
  store i8 %307, i8* %24, align 1, !tbaa !2447
  %308 = xor i32 %296, %293
  %309 = xor i32 %308, %297
  %310 = lshr i32 %309, 4
  %311 = trunc i32 %310 to i8
  %312 = and i8 %311, 1
  store i8 %312, i8* %30, align 1, !tbaa !2451
  %313 = icmp eq i32 %297, 0
  %314 = zext i1 %313 to i8
  store i8 %314, i8* %33, align 1, !tbaa !2448
  %315 = lshr i32 %297, 31
  %316 = trunc i32 %315 to i8
  store i8 %316, i8* %36, align 1, !tbaa !2449
  %317 = lshr i32 %293, 31
  %318 = lshr i32 %296, 31
  %319 = xor i32 %315, %317
  %320 = xor i32 %315, %318
  %321 = add nuw nsw i32 %319, %320
  %322 = icmp eq i32 %321, 2
  %323 = zext i1 %322 to i8
  store i8 %323, i8* %42, align 1, !tbaa !2450
  %324 = add i64 %4713, -32
  %325 = add i64 %4749, 9
  store i64 %325, i64* %PC, align 8
  %326 = inttoptr i64 %324 to i32*
  store i32 %297, i32* %326, align 4
  %327 = load i64, i64* %RBP, align 8
  %328 = add i64 %327, -32
  %329 = load i64, i64* %PC, align 8
  %330 = add i64 %329, 3
  store i64 %330, i64* %PC, align 8
  %331 = inttoptr i64 %328 to i32*
  %332 = load i32, i32* %331, align 4
  %333 = zext i32 %332 to i64
  store i64 %333, i64* %RAX, align 8, !tbaa !2428
  %334 = add i64 %327, -8
  %335 = add i64 %329, 6
  store i64 %335, i64* %PC, align 8
  %336 = inttoptr i64 %334 to i32*
  %337 = load i32, i32* %336, align 4
  %338 = add i32 %337, %332
  %339 = zext i32 %338 to i64
  store i64 %339, i64* %RAX, align 8, !tbaa !2428
  %340 = icmp ult i32 %338, %332
  %341 = icmp ult i32 %338, %337
  %342 = or i1 %340, %341
  %343 = zext i1 %342 to i8
  store i8 %343, i8* %17, align 1, !tbaa !2433
  %344 = and i32 %338, 255
  %345 = tail call i32 @llvm.ctpop.i32(i32 %344) #11
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  %348 = xor i8 %347, 1
  store i8 %348, i8* %24, align 1, !tbaa !2447
  %349 = xor i32 %337, %332
  %350 = xor i32 %349, %338
  %351 = lshr i32 %350, 4
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  store i8 %353, i8* %30, align 1, !tbaa !2451
  %354 = icmp eq i32 %338, 0
  %355 = zext i1 %354 to i8
  store i8 %355, i8* %33, align 1, !tbaa !2448
  %356 = lshr i32 %338, 31
  %357 = trunc i32 %356 to i8
  store i8 %357, i8* %36, align 1, !tbaa !2449
  %358 = lshr i32 %332, 31
  %359 = lshr i32 %337, 31
  %360 = xor i32 %356, %358
  %361 = xor i32 %356, %359
  %362 = add nuw nsw i32 %360, %361
  %363 = icmp eq i32 %362, 2
  %364 = zext i1 %363 to i8
  store i8 %364, i8* %42, align 1, !tbaa !2450
  %365 = add i64 %327, -36
  %366 = add i64 %329, 9
  store i64 %366, i64* %PC, align 8
  %367 = inttoptr i64 %365 to i32*
  store i32 %338, i32* %367, align 4
  %368 = load i64, i64* %RBP, align 8
  %369 = add i64 %368, -36
  %370 = load i64, i64* %PC, align 8
  %371 = add i64 %370, 3
  store i64 %371, i64* %PC, align 8
  %372 = inttoptr i64 %369 to i32*
  %373 = load i32, i32* %372, align 4
  %374 = zext i32 %373 to i64
  store i64 %374, i64* %RAX, align 8, !tbaa !2428
  %375 = add i64 %368, -8
  %376 = add i64 %370, 6
  store i64 %376, i64* %PC, align 8
  %377 = inttoptr i64 %375 to i32*
  %378 = load i32, i32* %377, align 4
  %379 = add i32 %378, %373
  %380 = zext i32 %379 to i64
  store i64 %380, i64* %RAX, align 8, !tbaa !2428
  %381 = icmp ult i32 %379, %373
  %382 = icmp ult i32 %379, %378
  %383 = or i1 %381, %382
  %384 = zext i1 %383 to i8
  store i8 %384, i8* %17, align 1, !tbaa !2433
  %385 = and i32 %379, 255
  %386 = tail call i32 @llvm.ctpop.i32(i32 %385) #11
  %387 = trunc i32 %386 to i8
  %388 = and i8 %387, 1
  %389 = xor i8 %388, 1
  store i8 %389, i8* %24, align 1, !tbaa !2447
  %390 = xor i32 %378, %373
  %391 = xor i32 %390, %379
  %392 = lshr i32 %391, 4
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  store i8 %394, i8* %30, align 1, !tbaa !2451
  %395 = icmp eq i32 %379, 0
  %396 = zext i1 %395 to i8
  store i8 %396, i8* %33, align 1, !tbaa !2448
  %397 = lshr i32 %379, 31
  %398 = trunc i32 %397 to i8
  store i8 %398, i8* %36, align 1, !tbaa !2449
  %399 = lshr i32 %373, 31
  %400 = lshr i32 %378, 31
  %401 = xor i32 %397, %399
  %402 = xor i32 %397, %400
  %403 = add nuw nsw i32 %401, %402
  %404 = icmp eq i32 %403, 2
  %405 = zext i1 %404 to i8
  store i8 %405, i8* %42, align 1, !tbaa !2450
  %406 = add i64 %368, -40
  %407 = add i64 %370, 9
  store i64 %407, i64* %PC, align 8
  %408 = inttoptr i64 %406 to i32*
  store i32 %379, i32* %408, align 4
  %409 = load i64, i64* %RBP, align 8
  %410 = add i64 %409, -16
  %411 = load i64, i64* %PC, align 8
  %412 = add i64 %411, 4
  store i64 %412, i64* %PC, align 8
  %413 = inttoptr i64 %410 to i64*
  %414 = load i64, i64* %413, align 8
  store i64 %414, i64* %RCX, align 8, !tbaa !2428
  %415 = add i64 %409, -28
  %416 = add i64 %411, 8
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %415 to i32*
  %418 = load i32, i32* %417, align 4
  %419 = sext i32 %418 to i64
  store i64 %419, i64* %RDX, align 8, !tbaa !2428
  %420 = shl nsw i64 %419, 3
  %421 = add i64 %420, %414
  %422 = add i64 %411, 13
  store i64 %422, i64* %PC, align 8
  %423 = inttoptr i64 %421 to double*
  %424 = load double, double* %423, align 8
  store double %424, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %425 = add i64 %411, 17
  store i64 %425, i64* %PC, align 8
  %426 = load i64, i64* %413, align 8
  store i64 %426, i64* %RCX, align 8, !tbaa !2428
  %427 = add i64 %409, -32
  %428 = add i64 %411, 21
  store i64 %428, i64* %PC, align 8
  %429 = inttoptr i64 %427 to i32*
  %430 = load i32, i32* %429, align 4
  %431 = sext i32 %430 to i64
  store i64 %431, i64* %RDX, align 8, !tbaa !2428
  %432 = shl nsw i64 %431, 3
  %433 = add i64 %432, %426
  %434 = add i64 %411, 26
  store i64 %434, i64* %PC, align 8
  %435 = inttoptr i64 %433 to double*
  %436 = load double, double* %435, align 8
  %437 = fadd double %424, %436
  store double %437, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %438 = add i64 %409, -120
  %439 = add i64 %411, 31
  store i64 %439, i64* %PC, align 8
  %440 = inttoptr i64 %438 to double*
  store double %437, double* %440, align 8
  %441 = load i64, i64* %RBP, align 8
  %442 = add i64 %441, -16
  %443 = load i64, i64* %PC, align 8
  %444 = add i64 %443, 4
  store i64 %444, i64* %PC, align 8
  %445 = inttoptr i64 %442 to i64*
  %446 = load i64, i64* %445, align 8
  store i64 %446, i64* %RCX, align 8, !tbaa !2428
  %447 = add i64 %441, -28
  %448 = add i64 %443, 7
  store i64 %448, i64* %PC, align 8
  %449 = inttoptr i64 %447 to i32*
  %450 = load i32, i32* %449, align 4
  %451 = add i32 %450, 1
  %452 = zext i32 %451 to i64
  store i64 %452, i64* %RAX, align 8, !tbaa !2428
  %453 = icmp eq i32 %450, -1
  %454 = icmp eq i32 %451, 0
  %455 = or i1 %453, %454
  %456 = zext i1 %455 to i8
  store i8 %456, i8* %17, align 1, !tbaa !2433
  %457 = and i32 %451, 255
  %458 = tail call i32 @llvm.ctpop.i32(i32 %457) #11
  %459 = trunc i32 %458 to i8
  %460 = and i8 %459, 1
  %461 = xor i8 %460, 1
  store i8 %461, i8* %24, align 1, !tbaa !2447
  %462 = xor i32 %450, %451
  %463 = lshr i32 %462, 4
  %464 = trunc i32 %463 to i8
  %465 = and i8 %464, 1
  store i8 %465, i8* %30, align 1, !tbaa !2451
  %466 = zext i1 %454 to i8
  store i8 %466, i8* %33, align 1, !tbaa !2448
  %467 = lshr i32 %451, 31
  %468 = trunc i32 %467 to i8
  store i8 %468, i8* %36, align 1, !tbaa !2449
  %469 = lshr i32 %450, 31
  %470 = xor i32 %467, %469
  %471 = add nuw nsw i32 %470, %467
  %472 = icmp eq i32 %471, 2
  %473 = zext i1 %472 to i8
  store i8 %473, i8* %42, align 1, !tbaa !2450
  %474 = sext i32 %451 to i64
  store i64 %474, i64* %RDX, align 8, !tbaa !2428
  %475 = shl nsw i64 %474, 3
  %476 = add i64 %475, %446
  %477 = add i64 %443, 18
  store i64 %477, i64* %PC, align 8
  %478 = inttoptr i64 %476 to double*
  %479 = load double, double* %478, align 8
  store double %479, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %480 = add i64 %443, 22
  store i64 %480, i64* %PC, align 8
  %481 = load i64, i64* %445, align 8
  store i64 %481, i64* %RCX, align 8, !tbaa !2428
  %482 = add i64 %441, -32
  %483 = add i64 %443, 25
  store i64 %483, i64* %PC, align 8
  %484 = inttoptr i64 %482 to i32*
  %485 = load i32, i32* %484, align 4
  %486 = add i32 %485, 1
  %487 = zext i32 %486 to i64
  store i64 %487, i64* %RAX, align 8, !tbaa !2428
  %488 = icmp eq i32 %485, -1
  %489 = icmp eq i32 %486, 0
  %490 = or i1 %488, %489
  %491 = zext i1 %490 to i8
  store i8 %491, i8* %17, align 1, !tbaa !2433
  %492 = and i32 %486, 255
  %493 = tail call i32 @llvm.ctpop.i32(i32 %492) #11
  %494 = trunc i32 %493 to i8
  %495 = and i8 %494, 1
  %496 = xor i8 %495, 1
  store i8 %496, i8* %24, align 1, !tbaa !2447
  %497 = xor i32 %485, %486
  %498 = lshr i32 %497, 4
  %499 = trunc i32 %498 to i8
  %500 = and i8 %499, 1
  store i8 %500, i8* %30, align 1, !tbaa !2451
  %501 = zext i1 %489 to i8
  store i8 %501, i8* %33, align 1, !tbaa !2448
  %502 = lshr i32 %486, 31
  %503 = trunc i32 %502 to i8
  store i8 %503, i8* %36, align 1, !tbaa !2449
  %504 = lshr i32 %485, 31
  %505 = xor i32 %502, %504
  %506 = add nuw nsw i32 %505, %502
  %507 = icmp eq i32 %506, 2
  %508 = zext i1 %507 to i8
  store i8 %508, i8* %42, align 1, !tbaa !2450
  %509 = sext i32 %486 to i64
  store i64 %509, i64* %RDX, align 8, !tbaa !2428
  %510 = shl nsw i64 %509, 3
  %511 = add i64 %510, %481
  %512 = add i64 %443, 36
  store i64 %512, i64* %PC, align 8
  %513 = inttoptr i64 %511 to double*
  %514 = load double, double* %513, align 8
  %515 = fadd double %479, %514
  store double %515, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %516 = load i64, i64* %RBP, align 8
  %517 = add i64 %516, -128
  %518 = add i64 %443, 41
  store i64 %518, i64* %PC, align 8
  %519 = inttoptr i64 %517 to double*
  store double %515, double* %519, align 8
  %520 = load i64, i64* %RBP, align 8
  %521 = add i64 %520, -16
  %522 = load i64, i64* %PC, align 8
  %523 = add i64 %522, 4
  store i64 %523, i64* %PC, align 8
  %524 = inttoptr i64 %521 to i64*
  %525 = load i64, i64* %524, align 8
  store i64 %525, i64* %RCX, align 8, !tbaa !2428
  %526 = add i64 %520, -28
  %527 = add i64 %522, 8
  store i64 %527, i64* %PC, align 8
  %528 = inttoptr i64 %526 to i32*
  %529 = load i32, i32* %528, align 4
  %530 = sext i32 %529 to i64
  store i64 %530, i64* %RDX, align 8, !tbaa !2428
  %531 = shl nsw i64 %530, 3
  %532 = add i64 %531, %525
  %533 = add i64 %522, 13
  store i64 %533, i64* %PC, align 8
  %534 = inttoptr i64 %532 to double*
  %535 = load double, double* %534, align 8
  store double %535, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %536 = add i64 %522, 17
  store i64 %536, i64* %PC, align 8
  %537 = load i64, i64* %524, align 8
  store i64 %537, i64* %RCX, align 8, !tbaa !2428
  %538 = add i64 %520, -32
  %539 = add i64 %522, 21
  store i64 %539, i64* %PC, align 8
  %540 = inttoptr i64 %538 to i32*
  %541 = load i32, i32* %540, align 4
  %542 = sext i32 %541 to i64
  store i64 %542, i64* %RDX, align 8, !tbaa !2428
  %543 = shl nsw i64 %542, 3
  %544 = add i64 %543, %537
  %545 = add i64 %522, 26
  store i64 %545, i64* %PC, align 8
  %546 = inttoptr i64 %544 to double*
  %547 = load double, double* %546, align 8
  %548 = fsub double %535, %547
  store double %548, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %549 = add i64 %520, -136
  %550 = add i64 %522, 34
  store i64 %550, i64* %PC, align 8
  %551 = inttoptr i64 %549 to double*
  store double %548, double* %551, align 8
  %552 = load i64, i64* %RBP, align 8
  %553 = add i64 %552, -16
  %554 = load i64, i64* %PC, align 8
  %555 = add i64 %554, 4
  store i64 %555, i64* %PC, align 8
  %556 = inttoptr i64 %553 to i64*
  %557 = load i64, i64* %556, align 8
  store i64 %557, i64* %RCX, align 8, !tbaa !2428
  %558 = add i64 %552, -28
  %559 = add i64 %554, 7
  store i64 %559, i64* %PC, align 8
  %560 = inttoptr i64 %558 to i32*
  %561 = load i32, i32* %560, align 4
  %562 = add i32 %561, 1
  %563 = zext i32 %562 to i64
  store i64 %563, i64* %RAX, align 8, !tbaa !2428
  %564 = icmp eq i32 %561, -1
  %565 = icmp eq i32 %562, 0
  %566 = or i1 %564, %565
  %567 = zext i1 %566 to i8
  store i8 %567, i8* %17, align 1, !tbaa !2433
  %568 = and i32 %562, 255
  %569 = tail call i32 @llvm.ctpop.i32(i32 %568) #11
  %570 = trunc i32 %569 to i8
  %571 = and i8 %570, 1
  %572 = xor i8 %571, 1
  store i8 %572, i8* %24, align 1, !tbaa !2447
  %573 = xor i32 %561, %562
  %574 = lshr i32 %573, 4
  %575 = trunc i32 %574 to i8
  %576 = and i8 %575, 1
  store i8 %576, i8* %30, align 1, !tbaa !2451
  %577 = zext i1 %565 to i8
  store i8 %577, i8* %33, align 1, !tbaa !2448
  %578 = lshr i32 %562, 31
  %579 = trunc i32 %578 to i8
  store i8 %579, i8* %36, align 1, !tbaa !2449
  %580 = lshr i32 %561, 31
  %581 = xor i32 %578, %580
  %582 = add nuw nsw i32 %581, %578
  %583 = icmp eq i32 %582, 2
  %584 = zext i1 %583 to i8
  store i8 %584, i8* %42, align 1, !tbaa !2450
  %585 = sext i32 %562 to i64
  store i64 %585, i64* %RDX, align 8, !tbaa !2428
  %586 = shl nsw i64 %585, 3
  %587 = add i64 %586, %557
  %588 = add i64 %554, 18
  store i64 %588, i64* %PC, align 8
  %589 = inttoptr i64 %587 to double*
  %590 = load double, double* %589, align 8
  store double %590, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %591 = add i64 %554, 22
  store i64 %591, i64* %PC, align 8
  %592 = load i64, i64* %556, align 8
  store i64 %592, i64* %RCX, align 8, !tbaa !2428
  %593 = add i64 %552, -32
  %594 = add i64 %554, 25
  store i64 %594, i64* %PC, align 8
  %595 = inttoptr i64 %593 to i32*
  %596 = load i32, i32* %595, align 4
  %597 = add i32 %596, 1
  %598 = zext i32 %597 to i64
  store i64 %598, i64* %RAX, align 8, !tbaa !2428
  %599 = icmp eq i32 %596, -1
  %600 = icmp eq i32 %597, 0
  %601 = or i1 %599, %600
  %602 = zext i1 %601 to i8
  store i8 %602, i8* %17, align 1, !tbaa !2433
  %603 = and i32 %597, 255
  %604 = tail call i32 @llvm.ctpop.i32(i32 %603) #11
  %605 = trunc i32 %604 to i8
  %606 = and i8 %605, 1
  %607 = xor i8 %606, 1
  store i8 %607, i8* %24, align 1, !tbaa !2447
  %608 = xor i32 %596, %597
  %609 = lshr i32 %608, 4
  %610 = trunc i32 %609 to i8
  %611 = and i8 %610, 1
  store i8 %611, i8* %30, align 1, !tbaa !2451
  %612 = zext i1 %600 to i8
  store i8 %612, i8* %33, align 1, !tbaa !2448
  %613 = lshr i32 %597, 31
  %614 = trunc i32 %613 to i8
  store i8 %614, i8* %36, align 1, !tbaa !2449
  %615 = lshr i32 %596, 31
  %616 = xor i32 %613, %615
  %617 = add nuw nsw i32 %616, %613
  %618 = icmp eq i32 %617, 2
  %619 = zext i1 %618 to i8
  store i8 %619, i8* %42, align 1, !tbaa !2450
  %620 = sext i32 %597 to i64
  store i64 %620, i64* %RDX, align 8, !tbaa !2428
  %621 = shl nsw i64 %620, 3
  %622 = add i64 %621, %592
  %623 = add i64 %554, 36
  store i64 %623, i64* %PC, align 8
  %624 = inttoptr i64 %622 to double*
  %625 = load double, double* %624, align 8
  %626 = fsub double %590, %625
  store double %626, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %627 = load i64, i64* %RBP, align 8
  %628 = add i64 %627, -144
  %629 = add i64 %554, 44
  store i64 %629, i64* %PC, align 8
  %630 = inttoptr i64 %628 to double*
  store double %626, double* %630, align 8
  %631 = load i64, i64* %RBP, align 8
  %632 = add i64 %631, -16
  %633 = load i64, i64* %PC, align 8
  %634 = add i64 %633, 4
  store i64 %634, i64* %PC, align 8
  %635 = inttoptr i64 %632 to i64*
  %636 = load i64, i64* %635, align 8
  store i64 %636, i64* %RCX, align 8, !tbaa !2428
  %637 = add i64 %631, -36
  %638 = add i64 %633, 8
  store i64 %638, i64* %PC, align 8
  %639 = inttoptr i64 %637 to i32*
  %640 = load i32, i32* %639, align 4
  %641 = sext i32 %640 to i64
  store i64 %641, i64* %RDX, align 8, !tbaa !2428
  %642 = shl nsw i64 %641, 3
  %643 = add i64 %642, %636
  %644 = add i64 %633, 13
  store i64 %644, i64* %PC, align 8
  %645 = inttoptr i64 %643 to double*
  %646 = load double, double* %645, align 8
  store double %646, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %647 = add i64 %633, 17
  store i64 %647, i64* %PC, align 8
  %648 = load i64, i64* %635, align 8
  store i64 %648, i64* %RCX, align 8, !tbaa !2428
  %649 = add i64 %631, -40
  %650 = add i64 %633, 21
  store i64 %650, i64* %PC, align 8
  %651 = inttoptr i64 %649 to i32*
  %652 = load i32, i32* %651, align 4
  %653 = sext i32 %652 to i64
  store i64 %653, i64* %RDX, align 8, !tbaa !2428
  %654 = shl nsw i64 %653, 3
  %655 = add i64 %654, %648
  %656 = add i64 %633, 26
  store i64 %656, i64* %PC, align 8
  %657 = inttoptr i64 %655 to double*
  %658 = load double, double* %657, align 8
  %659 = fadd double %646, %658
  store double %659, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %660 = add i64 %631, -152
  %661 = add i64 %633, 34
  store i64 %661, i64* %PC, align 8
  %662 = inttoptr i64 %660 to double*
  store double %659, double* %662, align 8
  %663 = load i64, i64* %RBP, align 8
  %664 = add i64 %663, -16
  %665 = load i64, i64* %PC, align 8
  %666 = add i64 %665, 4
  store i64 %666, i64* %PC, align 8
  %667 = inttoptr i64 %664 to i64*
  %668 = load i64, i64* %667, align 8
  store i64 %668, i64* %RCX, align 8, !tbaa !2428
  %669 = add i64 %663, -36
  %670 = add i64 %665, 7
  store i64 %670, i64* %PC, align 8
  %671 = inttoptr i64 %669 to i32*
  %672 = load i32, i32* %671, align 4
  %673 = add i32 %672, 1
  %674 = zext i32 %673 to i64
  store i64 %674, i64* %RAX, align 8, !tbaa !2428
  %675 = icmp eq i32 %672, -1
  %676 = icmp eq i32 %673, 0
  %677 = or i1 %675, %676
  %678 = zext i1 %677 to i8
  store i8 %678, i8* %17, align 1, !tbaa !2433
  %679 = and i32 %673, 255
  %680 = tail call i32 @llvm.ctpop.i32(i32 %679) #11
  %681 = trunc i32 %680 to i8
  %682 = and i8 %681, 1
  %683 = xor i8 %682, 1
  store i8 %683, i8* %24, align 1, !tbaa !2447
  %684 = xor i32 %672, %673
  %685 = lshr i32 %684, 4
  %686 = trunc i32 %685 to i8
  %687 = and i8 %686, 1
  store i8 %687, i8* %30, align 1, !tbaa !2451
  %688 = zext i1 %676 to i8
  store i8 %688, i8* %33, align 1, !tbaa !2448
  %689 = lshr i32 %673, 31
  %690 = trunc i32 %689 to i8
  store i8 %690, i8* %36, align 1, !tbaa !2449
  %691 = lshr i32 %672, 31
  %692 = xor i32 %689, %691
  %693 = add nuw nsw i32 %692, %689
  %694 = icmp eq i32 %693, 2
  %695 = zext i1 %694 to i8
  store i8 %695, i8* %42, align 1, !tbaa !2450
  %696 = sext i32 %673 to i64
  store i64 %696, i64* %RDX, align 8, !tbaa !2428
  %697 = shl nsw i64 %696, 3
  %698 = add i64 %697, %668
  %699 = add i64 %665, 18
  store i64 %699, i64* %PC, align 8
  %700 = inttoptr i64 %698 to double*
  %701 = load double, double* %700, align 8
  store double %701, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %702 = add i64 %665, 22
  store i64 %702, i64* %PC, align 8
  %703 = load i64, i64* %667, align 8
  store i64 %703, i64* %RCX, align 8, !tbaa !2428
  %704 = add i64 %663, -40
  %705 = add i64 %665, 25
  store i64 %705, i64* %PC, align 8
  %706 = inttoptr i64 %704 to i32*
  %707 = load i32, i32* %706, align 4
  %708 = add i32 %707, 1
  %709 = zext i32 %708 to i64
  store i64 %709, i64* %RAX, align 8, !tbaa !2428
  %710 = icmp eq i32 %707, -1
  %711 = icmp eq i32 %708, 0
  %712 = or i1 %710, %711
  %713 = zext i1 %712 to i8
  store i8 %713, i8* %17, align 1, !tbaa !2433
  %714 = and i32 %708, 255
  %715 = tail call i32 @llvm.ctpop.i32(i32 %714) #11
  %716 = trunc i32 %715 to i8
  %717 = and i8 %716, 1
  %718 = xor i8 %717, 1
  store i8 %718, i8* %24, align 1, !tbaa !2447
  %719 = xor i32 %707, %708
  %720 = lshr i32 %719, 4
  %721 = trunc i32 %720 to i8
  %722 = and i8 %721, 1
  store i8 %722, i8* %30, align 1, !tbaa !2451
  %723 = zext i1 %711 to i8
  store i8 %723, i8* %33, align 1, !tbaa !2448
  %724 = lshr i32 %708, 31
  %725 = trunc i32 %724 to i8
  store i8 %725, i8* %36, align 1, !tbaa !2449
  %726 = lshr i32 %707, 31
  %727 = xor i32 %724, %726
  %728 = add nuw nsw i32 %727, %724
  %729 = icmp eq i32 %728, 2
  %730 = zext i1 %729 to i8
  store i8 %730, i8* %42, align 1, !tbaa !2450
  %731 = sext i32 %708 to i64
  store i64 %731, i64* %RDX, align 8, !tbaa !2428
  %732 = shl nsw i64 %731, 3
  %733 = add i64 %732, %703
  %734 = add i64 %665, 36
  store i64 %734, i64* %PC, align 8
  %735 = inttoptr i64 %733 to double*
  %736 = load double, double* %735, align 8
  %737 = fadd double %701, %736
  store double %737, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %738 = load i64, i64* %RBP, align 8
  %739 = add i64 %738, -160
  %740 = add i64 %665, 44
  store i64 %740, i64* %PC, align 8
  %741 = inttoptr i64 %739 to double*
  store double %737, double* %741, align 8
  %742 = load i64, i64* %RBP, align 8
  %743 = add i64 %742, -16
  %744 = load i64, i64* %PC, align 8
  %745 = add i64 %744, 4
  store i64 %745, i64* %PC, align 8
  %746 = inttoptr i64 %743 to i64*
  %747 = load i64, i64* %746, align 8
  store i64 %747, i64* %RCX, align 8, !tbaa !2428
  %748 = add i64 %742, -36
  %749 = add i64 %744, 8
  store i64 %749, i64* %PC, align 8
  %750 = inttoptr i64 %748 to i32*
  %751 = load i32, i32* %750, align 4
  %752 = sext i32 %751 to i64
  store i64 %752, i64* %RDX, align 8, !tbaa !2428
  %753 = shl nsw i64 %752, 3
  %754 = add i64 %753, %747
  %755 = add i64 %744, 13
  store i64 %755, i64* %PC, align 8
  %756 = inttoptr i64 %754 to double*
  %757 = load double, double* %756, align 8
  store double %757, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %758 = add i64 %744, 17
  store i64 %758, i64* %PC, align 8
  %759 = load i64, i64* %746, align 8
  store i64 %759, i64* %RCX, align 8, !tbaa !2428
  %760 = add i64 %742, -40
  %761 = add i64 %744, 21
  store i64 %761, i64* %PC, align 8
  %762 = inttoptr i64 %760 to i32*
  %763 = load i32, i32* %762, align 4
  %764 = sext i32 %763 to i64
  store i64 %764, i64* %RDX, align 8, !tbaa !2428
  %765 = shl nsw i64 %764, 3
  %766 = add i64 %765, %759
  %767 = add i64 %744, 26
  store i64 %767, i64* %PC, align 8
  %768 = inttoptr i64 %766 to double*
  %769 = load double, double* %768, align 8
  %770 = fsub double %757, %769
  store double %770, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %771 = add i64 %742, -168
  %772 = add i64 %744, 34
  store i64 %772, i64* %PC, align 8
  %773 = inttoptr i64 %771 to double*
  store double %770, double* %773, align 8
  %774 = load i64, i64* %RBP, align 8
  %775 = add i64 %774, -16
  %776 = load i64, i64* %PC, align 8
  %777 = add i64 %776, 4
  store i64 %777, i64* %PC, align 8
  %778 = inttoptr i64 %775 to i64*
  %779 = load i64, i64* %778, align 8
  store i64 %779, i64* %RCX, align 8, !tbaa !2428
  %780 = add i64 %774, -36
  %781 = add i64 %776, 7
  store i64 %781, i64* %PC, align 8
  %782 = inttoptr i64 %780 to i32*
  %783 = load i32, i32* %782, align 4
  %784 = add i32 %783, 1
  %785 = zext i32 %784 to i64
  store i64 %785, i64* %RAX, align 8, !tbaa !2428
  %786 = icmp eq i32 %783, -1
  %787 = icmp eq i32 %784, 0
  %788 = or i1 %786, %787
  %789 = zext i1 %788 to i8
  store i8 %789, i8* %17, align 1, !tbaa !2433
  %790 = and i32 %784, 255
  %791 = tail call i32 @llvm.ctpop.i32(i32 %790) #11
  %792 = trunc i32 %791 to i8
  %793 = and i8 %792, 1
  %794 = xor i8 %793, 1
  store i8 %794, i8* %24, align 1, !tbaa !2447
  %795 = xor i32 %783, %784
  %796 = lshr i32 %795, 4
  %797 = trunc i32 %796 to i8
  %798 = and i8 %797, 1
  store i8 %798, i8* %30, align 1, !tbaa !2451
  %799 = zext i1 %787 to i8
  store i8 %799, i8* %33, align 1, !tbaa !2448
  %800 = lshr i32 %784, 31
  %801 = trunc i32 %800 to i8
  store i8 %801, i8* %36, align 1, !tbaa !2449
  %802 = lshr i32 %783, 31
  %803 = xor i32 %800, %802
  %804 = add nuw nsw i32 %803, %800
  %805 = icmp eq i32 %804, 2
  %806 = zext i1 %805 to i8
  store i8 %806, i8* %42, align 1, !tbaa !2450
  %807 = sext i32 %784 to i64
  store i64 %807, i64* %RDX, align 8, !tbaa !2428
  %808 = shl nsw i64 %807, 3
  %809 = add i64 %808, %779
  %810 = add i64 %776, 18
  store i64 %810, i64* %PC, align 8
  %811 = inttoptr i64 %809 to double*
  %812 = load double, double* %811, align 8
  store double %812, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %813 = add i64 %776, 22
  store i64 %813, i64* %PC, align 8
  %814 = load i64, i64* %778, align 8
  store i64 %814, i64* %RCX, align 8, !tbaa !2428
  %815 = add i64 %774, -40
  %816 = add i64 %776, 25
  store i64 %816, i64* %PC, align 8
  %817 = inttoptr i64 %815 to i32*
  %818 = load i32, i32* %817, align 4
  %819 = add i32 %818, 1
  %820 = zext i32 %819 to i64
  store i64 %820, i64* %RAX, align 8, !tbaa !2428
  %821 = icmp eq i32 %818, -1
  %822 = icmp eq i32 %819, 0
  %823 = or i1 %821, %822
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %17, align 1, !tbaa !2433
  %825 = and i32 %819, 255
  %826 = tail call i32 @llvm.ctpop.i32(i32 %825) #11
  %827 = trunc i32 %826 to i8
  %828 = and i8 %827, 1
  %829 = xor i8 %828, 1
  store i8 %829, i8* %24, align 1, !tbaa !2447
  %830 = xor i32 %818, %819
  %831 = lshr i32 %830, 4
  %832 = trunc i32 %831 to i8
  %833 = and i8 %832, 1
  store i8 %833, i8* %30, align 1, !tbaa !2451
  %834 = zext i1 %822 to i8
  store i8 %834, i8* %33, align 1, !tbaa !2448
  %835 = lshr i32 %819, 31
  %836 = trunc i32 %835 to i8
  store i8 %836, i8* %36, align 1, !tbaa !2449
  %837 = lshr i32 %818, 31
  %838 = xor i32 %835, %837
  %839 = add nuw nsw i32 %838, %835
  %840 = icmp eq i32 %839, 2
  %841 = zext i1 %840 to i8
  store i8 %841, i8* %42, align 1, !tbaa !2450
  %842 = sext i32 %819 to i64
  store i64 %842, i64* %RDX, align 8, !tbaa !2428
  %843 = shl nsw i64 %842, 3
  %844 = add i64 %843, %814
  %845 = add i64 %776, 36
  store i64 %845, i64* %PC, align 8
  %846 = inttoptr i64 %844 to double*
  %847 = load double, double* %846, align 8
  %848 = fsub double %812, %847
  store double %848, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %849 = load i64, i64* %RBP, align 8
  %850 = add i64 %849, -176
  %851 = add i64 %776, 44
  store i64 %851, i64* %PC, align 8
  %852 = inttoptr i64 %850 to double*
  store double %848, double* %852, align 8
  %853 = load i64, i64* %RBP, align 8
  %854 = add i64 %853, -120
  %855 = load i64, i64* %PC, align 8
  %856 = add i64 %855, 5
  store i64 %856, i64* %PC, align 8
  %857 = inttoptr i64 %854 to double*
  %858 = load double, double* %857, align 8
  store double %858, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %859 = add i64 %853, -152
  %860 = add i64 %855, 13
  store i64 %860, i64* %PC, align 8
  %861 = inttoptr i64 %859 to double*
  %862 = load double, double* %861, align 8
  %863 = fadd double %858, %862
  store double %863, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %864 = add i64 %853, -16
  %865 = add i64 %855, 17
  store i64 %865, i64* %PC, align 8
  %866 = inttoptr i64 %864 to i64*
  %867 = load i64, i64* %866, align 8
  store i64 %867, i64* %RCX, align 8, !tbaa !2428
  %868 = add i64 %853, -28
  %869 = add i64 %855, 21
  store i64 %869, i64* %PC, align 8
  %870 = inttoptr i64 %868 to i32*
  %871 = load i32, i32* %870, align 4
  %872 = sext i32 %871 to i64
  store i64 %872, i64* %RDX, align 8, !tbaa !2428
  %873 = shl nsw i64 %872, 3
  %874 = add i64 %873, %867
  %875 = add i64 %855, 26
  store i64 %875, i64* %PC, align 8
  %876 = inttoptr i64 %874 to double*
  store double %863, double* %876, align 8
  %877 = load i64, i64* %RBP, align 8
  %878 = add i64 %877, -128
  %879 = load i64, i64* %PC, align 8
  %880 = add i64 %879, 5
  store i64 %880, i64* %PC, align 8
  %881 = inttoptr i64 %878 to double*
  %882 = load double, double* %881, align 8
  store double %882, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %883 = add i64 %877, -160
  %884 = add i64 %879, 13
  store i64 %884, i64* %PC, align 8
  %885 = inttoptr i64 %883 to double*
  %886 = load double, double* %885, align 8
  %887 = fadd double %882, %886
  store double %887, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %888 = add i64 %877, -16
  %889 = add i64 %879, 17
  store i64 %889, i64* %PC, align 8
  %890 = inttoptr i64 %888 to i64*
  %891 = load i64, i64* %890, align 8
  store i64 %891, i64* %RCX, align 8, !tbaa !2428
  %892 = add i64 %877, -28
  %893 = add i64 %879, 20
  store i64 %893, i64* %PC, align 8
  %894 = inttoptr i64 %892 to i32*
  %895 = load i32, i32* %894, align 4
  %896 = add i32 %895, 1
  %897 = zext i32 %896 to i64
  store i64 %897, i64* %RAX, align 8, !tbaa !2428
  %898 = icmp eq i32 %895, -1
  %899 = icmp eq i32 %896, 0
  %900 = or i1 %898, %899
  %901 = zext i1 %900 to i8
  store i8 %901, i8* %17, align 1, !tbaa !2433
  %902 = and i32 %896, 255
  %903 = tail call i32 @llvm.ctpop.i32(i32 %902) #11
  %904 = trunc i32 %903 to i8
  %905 = and i8 %904, 1
  %906 = xor i8 %905, 1
  store i8 %906, i8* %24, align 1, !tbaa !2447
  %907 = xor i32 %895, %896
  %908 = lshr i32 %907, 4
  %909 = trunc i32 %908 to i8
  %910 = and i8 %909, 1
  store i8 %910, i8* %30, align 1, !tbaa !2451
  %911 = zext i1 %899 to i8
  store i8 %911, i8* %33, align 1, !tbaa !2448
  %912 = lshr i32 %896, 31
  %913 = trunc i32 %912 to i8
  store i8 %913, i8* %36, align 1, !tbaa !2449
  %914 = lshr i32 %895, 31
  %915 = xor i32 %912, %914
  %916 = add nuw nsw i32 %915, %912
  %917 = icmp eq i32 %916, 2
  %918 = zext i1 %917 to i8
  store i8 %918, i8* %42, align 1, !tbaa !2450
  %919 = sext i32 %896 to i64
  store i64 %919, i64* %RDX, align 8, !tbaa !2428
  %920 = shl nsw i64 %919, 3
  %921 = add i64 %920, %891
  %922 = add i64 %879, 31
  store i64 %922, i64* %PC, align 8
  %923 = inttoptr i64 %921 to double*
  store double %887, double* %923, align 8
  %924 = load i64, i64* %RBP, align 8
  %925 = add i64 %924, -120
  %926 = load i64, i64* %PC, align 8
  %927 = add i64 %926, 5
  store i64 %927, i64* %PC, align 8
  %928 = inttoptr i64 %925 to double*
  %929 = load double, double* %928, align 8
  store double %929, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %930 = add i64 %924, -152
  %931 = add i64 %926, 13
  store i64 %931, i64* %PC, align 8
  %932 = inttoptr i64 %930 to double*
  %933 = load double, double* %932, align 8
  %934 = fsub double %929, %933
  store double %934, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %935 = add i64 %924, -16
  %936 = add i64 %926, 17
  store i64 %936, i64* %PC, align 8
  %937 = inttoptr i64 %935 to i64*
  %938 = load i64, i64* %937, align 8
  store i64 %938, i64* %RCX, align 8, !tbaa !2428
  %939 = add i64 %924, -36
  %940 = add i64 %926, 21
  store i64 %940, i64* %PC, align 8
  %941 = inttoptr i64 %939 to i32*
  %942 = load i32, i32* %941, align 4
  %943 = sext i32 %942 to i64
  store i64 %943, i64* %RDX, align 8, !tbaa !2428
  %944 = shl nsw i64 %943, 3
  %945 = add i64 %944, %938
  %946 = add i64 %926, 26
  store i64 %946, i64* %PC, align 8
  %947 = inttoptr i64 %945 to double*
  store double %934, double* %947, align 8
  %948 = load i64, i64* %RBP, align 8
  %949 = add i64 %948, -128
  %950 = load i64, i64* %PC, align 8
  %951 = add i64 %950, 5
  store i64 %951, i64* %PC, align 8
  %952 = inttoptr i64 %949 to double*
  %953 = load double, double* %952, align 8
  store double %953, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %954 = add i64 %948, -160
  %955 = add i64 %950, 13
  store i64 %955, i64* %PC, align 8
  %956 = inttoptr i64 %954 to double*
  %957 = load double, double* %956, align 8
  %958 = fsub double %953, %957
  store double %958, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %959 = add i64 %948, -16
  %960 = add i64 %950, 17
  store i64 %960, i64* %PC, align 8
  %961 = inttoptr i64 %959 to i64*
  %962 = load i64, i64* %961, align 8
  store i64 %962, i64* %RCX, align 8, !tbaa !2428
  %963 = add i64 %948, -36
  %964 = add i64 %950, 20
  store i64 %964, i64* %PC, align 8
  %965 = inttoptr i64 %963 to i32*
  %966 = load i32, i32* %965, align 4
  %967 = add i32 %966, 1
  %968 = zext i32 %967 to i64
  store i64 %968, i64* %RAX, align 8, !tbaa !2428
  %969 = icmp eq i32 %966, -1
  %970 = icmp eq i32 %967, 0
  %971 = or i1 %969, %970
  %972 = zext i1 %971 to i8
  store i8 %972, i8* %17, align 1, !tbaa !2433
  %973 = and i32 %967, 255
  %974 = tail call i32 @llvm.ctpop.i32(i32 %973) #11
  %975 = trunc i32 %974 to i8
  %976 = and i8 %975, 1
  %977 = xor i8 %976, 1
  store i8 %977, i8* %24, align 1, !tbaa !2447
  %978 = xor i32 %966, %967
  %979 = lshr i32 %978, 4
  %980 = trunc i32 %979 to i8
  %981 = and i8 %980, 1
  store i8 %981, i8* %30, align 1, !tbaa !2451
  %982 = zext i1 %970 to i8
  store i8 %982, i8* %33, align 1, !tbaa !2448
  %983 = lshr i32 %967, 31
  %984 = trunc i32 %983 to i8
  store i8 %984, i8* %36, align 1, !tbaa !2449
  %985 = lshr i32 %966, 31
  %986 = xor i32 %983, %985
  %987 = add nuw nsw i32 %986, %983
  %988 = icmp eq i32 %987, 2
  %989 = zext i1 %988 to i8
  store i8 %989, i8* %42, align 1, !tbaa !2450
  %990 = sext i32 %967 to i64
  store i64 %990, i64* %RDX, align 8, !tbaa !2428
  %991 = shl nsw i64 %990, 3
  %992 = add i64 %991, %962
  %993 = add i64 %950, 31
  store i64 %993, i64* %PC, align 8
  %994 = inttoptr i64 %992 to double*
  store double %958, double* %994, align 8
  %995 = load i64, i64* %RBP, align 8
  %996 = add i64 %995, -136
  %997 = load i64, i64* %PC, align 8
  %998 = add i64 %997, 8
  store i64 %998, i64* %PC, align 8
  %999 = inttoptr i64 %996 to double*
  %1000 = load double, double* %999, align 8
  store double %1000, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %1001 = add i64 %995, -176
  %1002 = add i64 %997, 16
  store i64 %1002, i64* %PC, align 8
  %1003 = inttoptr i64 %1001 to double*
  %1004 = load double, double* %1003, align 8
  %1005 = fsub double %1000, %1004
  store double %1005, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %1006 = add i64 %995, -16
  %1007 = add i64 %997, 20
  store i64 %1007, i64* %PC, align 8
  %1008 = inttoptr i64 %1006 to i64*
  %1009 = load i64, i64* %1008, align 8
  store i64 %1009, i64* %RCX, align 8, !tbaa !2428
  %1010 = add i64 %995, -32
  %1011 = add i64 %997, 24
  store i64 %1011, i64* %PC, align 8
  %1012 = inttoptr i64 %1010 to i32*
  %1013 = load i32, i32* %1012, align 4
  %1014 = sext i32 %1013 to i64
  store i64 %1014, i64* %RDX, align 8, !tbaa !2428
  %1015 = shl nsw i64 %1014, 3
  %1016 = add i64 %1015, %1009
  %1017 = add i64 %997, 29
  store i64 %1017, i64* %PC, align 8
  %1018 = inttoptr i64 %1016 to double*
  store double %1005, double* %1018, align 8
  %1019 = load i64, i64* %RBP, align 8
  %1020 = add i64 %1019, -144
  %1021 = load i64, i64* %PC, align 8
  %1022 = add i64 %1021, 8
  store i64 %1022, i64* %PC, align 8
  %1023 = inttoptr i64 %1020 to double*
  %1024 = load double, double* %1023, align 8
  store double %1024, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %1025 = add i64 %1019, -168
  %1026 = add i64 %1021, 16
  store i64 %1026, i64* %PC, align 8
  %1027 = inttoptr i64 %1025 to double*
  %1028 = load double, double* %1027, align 8
  %1029 = fadd double %1024, %1028
  store double %1029, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %1030 = add i64 %1019, -16
  %1031 = add i64 %1021, 20
  store i64 %1031, i64* %PC, align 8
  %1032 = inttoptr i64 %1030 to i64*
  %1033 = load i64, i64* %1032, align 8
  store i64 %1033, i64* %RCX, align 8, !tbaa !2428
  %1034 = add i64 %1019, -32
  %1035 = add i64 %1021, 23
  store i64 %1035, i64* %PC, align 8
  %1036 = inttoptr i64 %1034 to i32*
  %1037 = load i32, i32* %1036, align 4
  %1038 = add i32 %1037, 1
  %1039 = zext i32 %1038 to i64
  store i64 %1039, i64* %RAX, align 8, !tbaa !2428
  %1040 = icmp eq i32 %1037, -1
  %1041 = icmp eq i32 %1038, 0
  %1042 = or i1 %1040, %1041
  %1043 = zext i1 %1042 to i8
  store i8 %1043, i8* %17, align 1, !tbaa !2433
  %1044 = and i32 %1038, 255
  %1045 = tail call i32 @llvm.ctpop.i32(i32 %1044) #11
  %1046 = trunc i32 %1045 to i8
  %1047 = and i8 %1046, 1
  %1048 = xor i8 %1047, 1
  store i8 %1048, i8* %24, align 1, !tbaa !2447
  %1049 = xor i32 %1037, %1038
  %1050 = lshr i32 %1049, 4
  %1051 = trunc i32 %1050 to i8
  %1052 = and i8 %1051, 1
  store i8 %1052, i8* %30, align 1, !tbaa !2451
  %1053 = zext i1 %1041 to i8
  store i8 %1053, i8* %33, align 1, !tbaa !2448
  %1054 = lshr i32 %1038, 31
  %1055 = trunc i32 %1054 to i8
  store i8 %1055, i8* %36, align 1, !tbaa !2449
  %1056 = lshr i32 %1037, 31
  %1057 = xor i32 %1054, %1056
  %1058 = add nuw nsw i32 %1057, %1054
  %1059 = icmp eq i32 %1058, 2
  %1060 = zext i1 %1059 to i8
  store i8 %1060, i8* %42, align 1, !tbaa !2450
  %1061 = sext i32 %1038 to i64
  store i64 %1061, i64* %RDX, align 8, !tbaa !2428
  %1062 = shl nsw i64 %1061, 3
  %1063 = add i64 %1062, %1033
  %1064 = add i64 %1021, 34
  store i64 %1064, i64* %PC, align 8
  %1065 = inttoptr i64 %1063 to double*
  store double %1029, double* %1065, align 8
  %1066 = load i64, i64* %RBP, align 8
  %1067 = add i64 %1066, -136
  %1068 = load i64, i64* %PC, align 8
  %1069 = add i64 %1068, 8
  store i64 %1069, i64* %PC, align 8
  %1070 = inttoptr i64 %1067 to double*
  %1071 = load double, double* %1070, align 8
  store double %1071, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %1072 = add i64 %1066, -176
  %1073 = add i64 %1068, 16
  store i64 %1073, i64* %PC, align 8
  %1074 = inttoptr i64 %1072 to double*
  %1075 = load double, double* %1074, align 8
  %1076 = fadd double %1071, %1075
  store double %1076, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %1077 = add i64 %1066, -16
  %1078 = add i64 %1068, 20
  store i64 %1078, i64* %PC, align 8
  %1079 = inttoptr i64 %1077 to i64*
  %1080 = load i64, i64* %1079, align 8
  store i64 %1080, i64* %RCX, align 8, !tbaa !2428
  %1081 = add i64 %1066, -40
  %1082 = add i64 %1068, 24
  store i64 %1082, i64* %PC, align 8
  %1083 = inttoptr i64 %1081 to i32*
  %1084 = load i32, i32* %1083, align 4
  %1085 = sext i32 %1084 to i64
  store i64 %1085, i64* %RDX, align 8, !tbaa !2428
  %1086 = shl nsw i64 %1085, 3
  %1087 = add i64 %1086, %1080
  %1088 = add i64 %1068, 29
  store i64 %1088, i64* %PC, align 8
  %1089 = inttoptr i64 %1087 to double*
  store double %1076, double* %1089, align 8
  %1090 = load i64, i64* %RBP, align 8
  %1091 = add i64 %1090, -144
  %1092 = load i64, i64* %PC, align 8
  %1093 = add i64 %1092, 8
  store i64 %1093, i64* %PC, align 8
  %1094 = inttoptr i64 %1091 to double*
  %1095 = load double, double* %1094, align 8
  store double %1095, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %1096 = add i64 %1090, -168
  %1097 = add i64 %1092, 16
  store i64 %1097, i64* %PC, align 8
  %1098 = inttoptr i64 %1096 to double*
  %1099 = load double, double* %1098, align 8
  %1100 = fsub double %1095, %1099
  store double %1100, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %1101 = add i64 %1090, -16
  %1102 = add i64 %1092, 20
  store i64 %1102, i64* %PC, align 8
  %1103 = inttoptr i64 %1101 to i64*
  %1104 = load i64, i64* %1103, align 8
  store i64 %1104, i64* %RCX, align 8, !tbaa !2428
  %1105 = add i64 %1090, -40
  %1106 = add i64 %1092, 23
  store i64 %1106, i64* %PC, align 8
  %1107 = inttoptr i64 %1105 to i32*
  %1108 = load i32, i32* %1107, align 4
  %1109 = add i32 %1108, 1
  %1110 = zext i32 %1109 to i64
  store i64 %1110, i64* %RAX, align 8, !tbaa !2428
  %1111 = icmp eq i32 %1108, -1
  %1112 = icmp eq i32 %1109, 0
  %1113 = or i1 %1111, %1112
  %1114 = zext i1 %1113 to i8
  store i8 %1114, i8* %17, align 1, !tbaa !2433
  %1115 = and i32 %1109, 255
  %1116 = tail call i32 @llvm.ctpop.i32(i32 %1115) #11
  %1117 = trunc i32 %1116 to i8
  %1118 = and i8 %1117, 1
  %1119 = xor i8 %1118, 1
  store i8 %1119, i8* %24, align 1, !tbaa !2447
  %1120 = xor i32 %1108, %1109
  %1121 = lshr i32 %1120, 4
  %1122 = trunc i32 %1121 to i8
  %1123 = and i8 %1122, 1
  store i8 %1123, i8* %30, align 1, !tbaa !2451
  %1124 = zext i1 %1112 to i8
  store i8 %1124, i8* %33, align 1, !tbaa !2448
  %1125 = lshr i32 %1109, 31
  %1126 = trunc i32 %1125 to i8
  store i8 %1126, i8* %36, align 1, !tbaa !2449
  %1127 = lshr i32 %1108, 31
  %1128 = xor i32 %1125, %1127
  %1129 = add nuw nsw i32 %1128, %1125
  %1130 = icmp eq i32 %1129, 2
  %1131 = zext i1 %1130 to i8
  store i8 %1131, i8* %42, align 1, !tbaa !2450
  %1132 = sext i32 %1109 to i64
  store i64 %1132, i64* %RDX, align 8, !tbaa !2428
  %1133 = shl nsw i64 %1132, 3
  %1134 = add i64 %1133, %1104
  %1135 = add i64 %1092, 34
  store i64 %1135, i64* %PC, align 8
  %1136 = inttoptr i64 %1134 to double*
  store double %1100, double* %1136, align 8
  %1137 = load i64, i64* %RBP, align 8
  %1138 = add i64 %1137, -28
  %1139 = load i64, i64* %PC, align 8
  %1140 = add i64 %1139, 3
  store i64 %1140, i64* %PC, align 8
  %1141 = inttoptr i64 %1138 to i32*
  %1142 = load i32, i32* %1141, align 4
  %1143 = add i32 %1142, 2
  %1144 = zext i32 %1143 to i64
  store i64 %1144, i64* %RAX, align 8, !tbaa !2428
  %1145 = icmp ugt i32 %1142, -3
  %1146 = zext i1 %1145 to i8
  store i8 %1146, i8* %17, align 1, !tbaa !2433
  %1147 = and i32 %1143, 255
  %1148 = tail call i32 @llvm.ctpop.i32(i32 %1147) #11
  %1149 = trunc i32 %1148 to i8
  %1150 = and i8 %1149, 1
  %1151 = xor i8 %1150, 1
  store i8 %1151, i8* %24, align 1, !tbaa !2447
  %1152 = xor i32 %1142, %1143
  %1153 = lshr i32 %1152, 4
  %1154 = trunc i32 %1153 to i8
  %1155 = and i8 %1154, 1
  store i8 %1155, i8* %30, align 1, !tbaa !2451
  %1156 = icmp eq i32 %1143, 0
  %1157 = zext i1 %1156 to i8
  store i8 %1157, i8* %33, align 1, !tbaa !2448
  %1158 = lshr i32 %1143, 31
  %1159 = trunc i32 %1158 to i8
  store i8 %1159, i8* %36, align 1, !tbaa !2449
  %1160 = lshr i32 %1142, 31
  %1161 = xor i32 %1158, %1160
  %1162 = add nuw nsw i32 %1161, %1158
  %1163 = icmp eq i32 %1162, 2
  %1164 = zext i1 %1163 to i8
  store i8 %1164, i8* %42, align 1, !tbaa !2450
  %1165 = add i64 %1139, 9
  store i64 %1165, i64* %PC, align 8
  store i32 %1143, i32* %1141, align 4
  %1166 = load i64, i64* %PC, align 8
  %1167 = add i64 %1166, -594
  store i64 %1167, i64* %PC, align 8, !tbaa !2428
  br label %block_403326

block_40386f:                                     ; preds = %block_403863
  %1168 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 80) to i64*), align 16
  store i64 %1168, i64* %275, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %1169 = add i64 %2617, -48
  %1170 = add i64 %2653, 11
  store i64 %1170, i64* %PC, align 8
  %1171 = inttoptr i64 %1169 to i32*
  %1172 = load i32, i32* %1171, align 4
  %1173 = add i32 %1172, 2
  %1174 = zext i32 %1173 to i64
  store i64 %1174, i64* %RAX, align 8, !tbaa !2428
  %1175 = icmp ugt i32 %1172, -3
  %1176 = zext i1 %1175 to i8
  store i8 %1176, i8* %17, align 1, !tbaa !2433
  %1177 = and i32 %1173, 255
  %1178 = tail call i32 @llvm.ctpop.i32(i32 %1177) #11
  %1179 = trunc i32 %1178 to i8
  %1180 = and i8 %1179, 1
  %1181 = xor i8 %1180, 1
  store i8 %1181, i8* %24, align 1, !tbaa !2447
  %1182 = xor i32 %1172, %1173
  %1183 = lshr i32 %1182, 4
  %1184 = trunc i32 %1183 to i8
  %1185 = and i8 %1184, 1
  store i8 %1185, i8* %30, align 1, !tbaa !2451
  %1186 = icmp eq i32 %1173, 0
  %1187 = zext i1 %1186 to i8
  store i8 %1187, i8* %33, align 1, !tbaa !2448
  %1188 = lshr i32 %1173, 31
  %1189 = trunc i32 %1188 to i8
  store i8 %1189, i8* %36, align 1, !tbaa !2449
  %1190 = lshr i32 %1172, 31
  %1191 = xor i32 %1188, %1190
  %1192 = add nuw nsw i32 %1191, %1188
  %1193 = icmp eq i32 %1192, 2
  %1194 = zext i1 %1193 to i8
  store i8 %1194, i8* %42, align 1, !tbaa !2450
  %1195 = add i64 %2653, 17
  store i64 %1195, i64* %PC, align 8
  store i32 %1173, i32* %1171, align 4
  %1196 = load i64, i64* %RBP, align 8
  %1197 = add i64 %1196, -48
  %1198 = load i64, i64* %PC, align 8
  %1199 = add i64 %1198, 3
  store i64 %1199, i64* %PC, align 8
  %1200 = inttoptr i64 %1197 to i32*
  %1201 = load i32, i32* %1200, align 4
  %1202 = shl i32 %1201, 1
  %1203 = icmp slt i32 %1201, 0
  %1204 = icmp slt i32 %1202, 0
  %1205 = xor i1 %1203, %1204
  %1206 = zext i32 %1202 to i64
  store i64 %1206, i64* %RAX, align 8, !tbaa !2428
  %.lobit9 = lshr i32 %1201, 31
  %1207 = trunc i32 %.lobit9 to i8
  store i8 %1207, i8* %17, align 1, !tbaa !2432
  %1208 = and i32 %1202, 254
  %1209 = tail call i32 @llvm.ctpop.i32(i32 %1208) #11
  %1210 = trunc i32 %1209 to i8
  %1211 = and i8 %1210, 1
  %1212 = xor i8 %1211, 1
  store i8 %1212, i8* %24, align 1, !tbaa !2432
  store i8 0, i8* %30, align 1, !tbaa !2432
  %1213 = icmp eq i32 %1202, 0
  %1214 = zext i1 %1213 to i8
  store i8 %1214, i8* %33, align 1, !tbaa !2432
  %1215 = lshr i32 %1201, 30
  %1216 = trunc i32 %1215 to i8
  %1217 = and i8 %1216, 1
  store i8 %1217, i8* %36, align 1, !tbaa !2432
  %1218 = zext i1 %1205 to i8
  store i8 %1218, i8* %42, align 1, !tbaa !2432
  %1219 = add i64 %1196, -52
  %1220 = add i64 %1198, 9
  store i64 %1220, i64* %PC, align 8
  %1221 = inttoptr i64 %1219 to i32*
  store i32 %1202, i32* %1221, align 4
  %1222 = load i64, i64* %RBP, align 8
  %1223 = add i64 %1222, -24
  %1224 = load i64, i64* %PC, align 8
  %1225 = add i64 %1224, 4
  store i64 %1225, i64* %PC, align 8
  %1226 = inttoptr i64 %1223 to i64*
  %1227 = load i64, i64* %1226, align 8
  store i64 %1227, i64* %RCX, align 8, !tbaa !2428
  %1228 = add i64 %1222, -48
  %1229 = add i64 %1224, 8
  store i64 %1229, i64* %PC, align 8
  %1230 = inttoptr i64 %1228 to i32*
  %1231 = load i32, i32* %1230, align 4
  %1232 = sext i32 %1231 to i64
  store i64 %1232, i64* %RDX, align 8, !tbaa !2428
  %1233 = shl nsw i64 %1232, 3
  %1234 = add i64 %1233, %1227
  %1235 = add i64 %1224, 13
  store i64 %1235, i64* %PC, align 8
  %1236 = inttoptr i64 %1234 to i64*
  %1237 = load i64, i64* %1236, align 8
  %1238 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %1237, i64* %1238, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %1239 = add i64 %1222, -88
  %1240 = add i64 %1224, 18
  store i64 %1240, i64* %PC, align 8
  %1241 = inttoptr i64 %1239 to i64*
  store i64 %1237, i64* %1241, align 8
  %1242 = load i64, i64* %RBP, align 8
  %1243 = add i64 %1242, -24
  %1244 = load i64, i64* %PC, align 8
  %1245 = add i64 %1244, 4
  store i64 %1245, i64* %PC, align 8
  %1246 = inttoptr i64 %1243 to i64*
  %1247 = load i64, i64* %1246, align 8
  store i64 %1247, i64* %RCX, align 8, !tbaa !2428
  %1248 = add i64 %1242, -48
  %1249 = add i64 %1244, 7
  store i64 %1249, i64* %PC, align 8
  %1250 = inttoptr i64 %1248 to i32*
  %1251 = load i32, i32* %1250, align 4
  %1252 = add i32 %1251, 1
  %1253 = zext i32 %1252 to i64
  store i64 %1253, i64* %RAX, align 8, !tbaa !2428
  %1254 = icmp eq i32 %1251, -1
  %1255 = icmp eq i32 %1252, 0
  %1256 = or i1 %1254, %1255
  %1257 = zext i1 %1256 to i8
  store i8 %1257, i8* %17, align 1, !tbaa !2433
  %1258 = and i32 %1252, 255
  %1259 = tail call i32 @llvm.ctpop.i32(i32 %1258) #11
  %1260 = trunc i32 %1259 to i8
  %1261 = and i8 %1260, 1
  %1262 = xor i8 %1261, 1
  store i8 %1262, i8* %24, align 1, !tbaa !2447
  %1263 = xor i32 %1251, %1252
  %1264 = lshr i32 %1263, 4
  %1265 = trunc i32 %1264 to i8
  %1266 = and i8 %1265, 1
  store i8 %1266, i8* %30, align 1, !tbaa !2451
  %1267 = zext i1 %1255 to i8
  store i8 %1267, i8* %33, align 1, !tbaa !2448
  %1268 = lshr i32 %1252, 31
  %1269 = trunc i32 %1268 to i8
  store i8 %1269, i8* %36, align 1, !tbaa !2449
  %1270 = lshr i32 %1251, 31
  %1271 = xor i32 %1268, %1270
  %1272 = add nuw nsw i32 %1271, %1268
  %1273 = icmp eq i32 %1272, 2
  %1274 = zext i1 %1273 to i8
  store i8 %1274, i8* %42, align 1, !tbaa !2450
  %1275 = sext i32 %1252 to i64
  store i64 %1275, i64* %RDX, align 8, !tbaa !2428
  %1276 = shl nsw i64 %1275, 3
  %1277 = add i64 %1276, %1247
  %1278 = add i64 %1244, 18
  store i64 %1278, i64* %PC, align 8
  %1279 = inttoptr i64 %1277 to i64*
  %1280 = load i64, i64* %1279, align 8
  store i64 %1280, i64* %1238, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %1281 = add i64 %1242, -96
  %1282 = add i64 %1244, 23
  store i64 %1282, i64* %PC, align 8
  %1283 = inttoptr i64 %1281 to i64*
  store i64 %1280, i64* %1283, align 8
  %1284 = load i64, i64* %RBP, align 8
  %1285 = add i64 %1284, -24
  %1286 = load i64, i64* %PC, align 8
  %1287 = add i64 %1286, 4
  store i64 %1287, i64* %PC, align 8
  %1288 = inttoptr i64 %1285 to i64*
  %1289 = load i64, i64* %1288, align 8
  store i64 %1289, i64* %RCX, align 8, !tbaa !2428
  %1290 = add i64 %1284, -52
  %1291 = add i64 %1286, 8
  store i64 %1291, i64* %PC, align 8
  %1292 = inttoptr i64 %1290 to i32*
  %1293 = load i32, i32* %1292, align 4
  %1294 = sext i32 %1293 to i64
  store i64 %1294, i64* %RDX, align 8, !tbaa !2428
  %1295 = shl nsw i64 %1294, 3
  %1296 = add i64 %1295, %1289
  %1297 = add i64 %1286, 13
  store i64 %1297, i64* %PC, align 8
  %1298 = inttoptr i64 %1296 to i64*
  %1299 = load i64, i64* %1298, align 8
  store i64 %1299, i64* %1238, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %1300 = add i64 %1284, -72
  %1301 = add i64 %1286, 18
  store i64 %1301, i64* %PC, align 8
  %1302 = inttoptr i64 %1300 to i64*
  store i64 %1299, i64* %1302, align 8
  %1303 = load i64, i64* %RBP, align 8
  %1304 = add i64 %1303, -24
  %1305 = load i64, i64* %PC, align 8
  %1306 = add i64 %1305, 4
  store i64 %1306, i64* %PC, align 8
  %1307 = inttoptr i64 %1304 to i64*
  %1308 = load i64, i64* %1307, align 8
  store i64 %1308, i64* %RCX, align 8, !tbaa !2428
  %1309 = add i64 %1303, -52
  %1310 = add i64 %1305, 7
  store i64 %1310, i64* %PC, align 8
  %1311 = inttoptr i64 %1309 to i32*
  %1312 = load i32, i32* %1311, align 4
  %1313 = add i32 %1312, 1
  %1314 = zext i32 %1313 to i64
  store i64 %1314, i64* %RAX, align 8, !tbaa !2428
  %1315 = icmp eq i32 %1312, -1
  %1316 = icmp eq i32 %1313, 0
  %1317 = or i1 %1315, %1316
  %1318 = zext i1 %1317 to i8
  store i8 %1318, i8* %17, align 1, !tbaa !2433
  %1319 = and i32 %1313, 255
  %1320 = tail call i32 @llvm.ctpop.i32(i32 %1319) #11
  %1321 = trunc i32 %1320 to i8
  %1322 = and i8 %1321, 1
  %1323 = xor i8 %1322, 1
  store i8 %1323, i8* %24, align 1, !tbaa !2447
  %1324 = xor i32 %1312, %1313
  %1325 = lshr i32 %1324, 4
  %1326 = trunc i32 %1325 to i8
  %1327 = and i8 %1326, 1
  store i8 %1327, i8* %30, align 1, !tbaa !2451
  %1328 = zext i1 %1316 to i8
  store i8 %1328, i8* %33, align 1, !tbaa !2448
  %1329 = lshr i32 %1313, 31
  %1330 = trunc i32 %1329 to i8
  store i8 %1330, i8* %36, align 1, !tbaa !2449
  %1331 = lshr i32 %1312, 31
  %1332 = xor i32 %1329, %1331
  %1333 = add nuw nsw i32 %1332, %1329
  %1334 = icmp eq i32 %1333, 2
  %1335 = zext i1 %1334 to i8
  store i8 %1335, i8* %42, align 1, !tbaa !2450
  %1336 = sext i32 %1313 to i64
  store i64 %1336, i64* %RDX, align 8, !tbaa !2428
  %1337 = shl nsw i64 %1336, 3
  %1338 = add i64 %1337, %1308
  %1339 = add i64 %1305, 18
  store i64 %1339, i64* %PC, align 8
  %1340 = inttoptr i64 %1338 to i64*
  %1341 = load i64, i64* %1340, align 8
  store i64 %1341, i64* %1238, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %1342 = add i64 %1303, -80
  %1343 = add i64 %1305, 23
  store i64 %1343, i64* %PC, align 8
  %1344 = inttoptr i64 %1342 to i64*
  store i64 %1341, i64* %1344, align 8
  %1345 = load i64, i64* %RBP, align 8
  %1346 = add i64 %1345, -72
  %1347 = load i64, i64* %PC, align 8
  %1348 = add i64 %1347, 5
  store i64 %1348, i64* %PC, align 8
  %1349 = inttoptr i64 %1346 to double*
  %1350 = load double, double* %1349, align 8
  store double %1350, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %1351 = load <2 x i32>, <2 x i32>* %1443, align 1
  %1352 = load <2 x i32>, <2 x i32>* %1444, align 1
  %1353 = extractelement <2 x i32> %1351, i32 0
  store i32 %1353, i32* %1445, align 1, !tbaa !2475
  %1354 = extractelement <2 x i32> %1351, i32 1
  store i32 %1354, i32* %1447, align 1, !tbaa !2475
  %1355 = extractelement <2 x i32> %1352, i32 0
  store i32 %1355, i32* %1449, align 1, !tbaa !2475
  %1356 = extractelement <2 x i32> %1352, i32 1
  store i32 %1356, i32* %1451, align 1, !tbaa !2475
  %1357 = add i64 %1345, -96
  %1358 = add i64 %1347, 13
  store i64 %1358, i64* %PC, align 8
  %1359 = load double, double* %1452, align 1
  %1360 = inttoptr i64 %1357 to double*
  %1361 = load double, double* %1360, align 8
  %1362 = fmul double %1359, %1361
  store double %1362, double* %1452, align 1, !tbaa !2452
  %1363 = add i64 %1345, -80
  %1364 = add i64 %1347, 18
  store i64 %1364, i64* %PC, align 8
  %1365 = inttoptr i64 %1363 to double*
  %1366 = load double, double* %1365, align 8
  %1367 = fmul double %1362, %1366
  store double %1367, double* %1452, align 1, !tbaa !2452
  %1368 = fsub double %1350, %1367
  store double %1368, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %1369 = add i64 %1345, -104
  %1370 = add i64 %1347, 27
  store i64 %1370, i64* %PC, align 8
  %1371 = inttoptr i64 %1369 to double*
  store double %1368, double* %1371, align 8
  %1372 = load i64, i64* %RBP, align 8
  %1373 = add i64 %1372, -96
  %1374 = load i64, i64* %PC, align 8
  %1375 = add i64 %1374, 5
  store i64 %1375, i64* %PC, align 8
  %1376 = load double, double* %94, align 1
  %1377 = inttoptr i64 %1373 to double*
  %1378 = load double, double* %1377, align 8
  %1379 = fmul double %1376, %1378
  store double %1379, double* %94, align 1, !tbaa !2452
  %1380 = add i64 %1372, -72
  %1381 = add i64 %1374, 10
  store i64 %1381, i64* %PC, align 8
  %1382 = inttoptr i64 %1380 to double*
  %1383 = load double, double* %1382, align 8
  %1384 = fmul double %1379, %1383
  store double %1384, double* %94, align 1, !tbaa !2452
  %1385 = add i64 %1372, -80
  %1386 = add i64 %1374, 15
  store i64 %1386, i64* %PC, align 8
  %1387 = inttoptr i64 %1385 to double*
  %1388 = load double, double* %1387, align 8
  %1389 = fsub double %1384, %1388
  store double %1389, double* %94, align 1, !tbaa !2452
  %1390 = add i64 %1372, -112
  %1391 = add i64 %1374, 20
  store i64 %1391, i64* %PC, align 8
  %1392 = inttoptr i64 %1390 to double*
  store double %1389, double* %1392, align 8
  %1393 = load i64, i64* %RBP, align 8
  %1394 = add i64 %1393, -44
  %1395 = load i64, i64* %PC, align 8
  %1396 = add i64 %1395, 3
  store i64 %1396, i64* %PC, align 8
  %1397 = inttoptr i64 %1394 to i32*
  %1398 = load i32, i32* %1397, align 4
  %1399 = zext i32 %1398 to i64
  store i64 %1399, i64* %RAX, align 8, !tbaa !2428
  %1400 = add i64 %1393, -28
  %1401 = add i64 %1395, 6
  store i64 %1401, i64* %PC, align 8
  %1402 = inttoptr i64 %1400 to i32*
  store i32 %1398, i32* %1402, align 4
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_403910

block_40384d:                                     ; preds = %block_403591
  %1403 = add i64 %2572, -48
  %1404 = add i64 %2615, 7
  store i64 %1404, i64* %PC, align 8
  %1405 = inttoptr i64 %1403 to i32*
  store i32 0, i32* %1405, align 4
  %1406 = load i64, i64* %RBP, align 8
  %1407 = add i64 %1406, -56
  %1408 = load i64, i64* %PC, align 8
  %1409 = add i64 %1408, 3
  store i64 %1409, i64* %PC, align 8
  %1410 = inttoptr i64 %1407 to i32*
  %1411 = load i32, i32* %1410, align 4
  %1412 = shl i32 %1411, 1
  %1413 = icmp slt i32 %1411, 0
  %1414 = icmp slt i32 %1412, 0
  %1415 = xor i1 %1413, %1414
  %1416 = zext i32 %1412 to i64
  store i64 %1416, i64* %RAX, align 8, !tbaa !2428
  %.lobit = lshr i32 %1411, 31
  %1417 = trunc i32 %.lobit to i8
  store i8 %1417, i8* %17, align 1, !tbaa !2432
  %1418 = and i32 %1412, 254
  %1419 = tail call i32 @llvm.ctpop.i32(i32 %1418) #11
  %1420 = trunc i32 %1419 to i8
  %1421 = and i8 %1420, 1
  %1422 = xor i8 %1421, 1
  store i8 %1422, i8* %24, align 1, !tbaa !2432
  store i8 0, i8* %30, align 1, !tbaa !2432
  %1423 = icmp eq i32 %1412, 0
  %1424 = zext i1 %1423 to i8
  store i8 %1424, i8* %33, align 1, !tbaa !2432
  %1425 = lshr i32 %1411, 30
  %1426 = trunc i32 %1425 to i8
  %1427 = and i8 %1426, 1
  store i8 %1427, i8* %36, align 1, !tbaa !2432
  %1428 = zext i1 %1415 to i8
  store i8 %1428, i8* %42, align 1, !tbaa !2432
  %1429 = add i64 %1406, -60
  %1430 = add i64 %1408, 9
  store i64 %1430, i64* %PC, align 8
  %1431 = inttoptr i64 %1429 to i32*
  store i32 %1412, i32* %1431, align 4
  %1432 = load i64, i64* %RBP, align 8
  %1433 = add i64 %1432, -60
  %1434 = load i64, i64* %PC, align 8
  %1435 = add i64 %1434, 3
  store i64 %1435, i64* %PC, align 8
  %1436 = inttoptr i64 %1433 to i32*
  %1437 = load i32, i32* %1436, align 4
  %1438 = zext i32 %1437 to i64
  store i64 %1438, i64* %RAX, align 8, !tbaa !2428
  %1439 = add i64 %1432, -44
  %1440 = add i64 %1434, 6
  store i64 %1440, i64* %PC, align 8
  %1441 = inttoptr i64 %1439 to i32*
  store i32 %1437, i32* %1441, align 4
  %1442 = bitcast %union.VectorReg* %7 to i8*
  %1443 = bitcast [32 x %union.VectorReg]* %5 to <2 x i32>*
  %1444 = bitcast i64* %95 to <2 x i32>*
  %1445 = bitcast %union.VectorReg* %7 to i32*
  %1446 = getelementptr inbounds i8, i8* %1442, i64 4
  %1447 = bitcast i8* %1446 to i32*
  %1448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %1449 = bitcast i64* %1448 to i32*
  %1450 = getelementptr inbounds i8, i8* %1442, i64 12
  %1451 = bitcast i8* %1450 to i32*
  %1452 = bitcast %union.VectorReg* %7 to double*
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_403863

block_403fde:                                     ; preds = %block_403863
  %1453 = load i64, i64* %RSP, align 8
  %1454 = add i64 %1453, 48
  store i64 %1454, i64* %RSP, align 8, !tbaa !2428
  %1455 = icmp ugt i64 %1453, -49
  %1456 = zext i1 %1455 to i8
  store i8 %1456, i8* %17, align 1, !tbaa !2433
  %1457 = trunc i64 %1454 to i32
  %1458 = and i32 %1457, 255
  %1459 = tail call i32 @llvm.ctpop.i32(i32 %1458) #11
  %1460 = trunc i32 %1459 to i8
  %1461 = and i8 %1460, 1
  %1462 = xor i8 %1461, 1
  store i8 %1462, i8* %24, align 1, !tbaa !2447
  %1463 = xor i64 %1453, 16
  %1464 = xor i64 %1463, %1454
  %1465 = lshr i64 %1464, 4
  %1466 = trunc i64 %1465 to i8
  %1467 = and i8 %1466, 1
  store i8 %1467, i8* %30, align 1, !tbaa !2451
  %1468 = icmp eq i64 %1454, 0
  %1469 = zext i1 %1468 to i8
  store i8 %1469, i8* %33, align 1, !tbaa !2448
  %1470 = lshr i64 %1454, 63
  %1471 = trunc i64 %1470 to i8
  store i8 %1471, i8* %36, align 1, !tbaa !2449
  %1472 = lshr i64 %1453, 63
  %1473 = xor i64 %1470, %1472
  %1474 = add nuw nsw i64 %1473, %1470
  %1475 = icmp eq i64 %1474, 2
  %1476 = zext i1 %1475 to i8
  store i8 %1476, i8* %42, align 1, !tbaa !2450
  %1477 = add i64 %2653, 5
  store i64 %1477, i64* %PC, align 8
  %1478 = add i64 %1453, 56
  %1479 = inttoptr i64 %1454 to i64*
  %1480 = load i64, i64* %1479, align 8
  store i64 %1480, i64* %RBP, align 8, !tbaa !2428
  store i64 %1478, i64* %RSP, align 8, !tbaa !2428
  %1481 = add i64 %2653, 6
  store i64 %1481, i64* %PC, align 8
  %1482 = inttoptr i64 %1478 to i64*
  %1483 = load i64, i64* %1482, align 8
  store i64 %1483, i64* %PC, align 8, !tbaa !2428
  %1484 = add i64 %1453, 64
  store i64 %1484, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_403fcb:                                     ; preds = %block_403c90
  %1485 = add i64 %1523, -60
  %1486 = add i64 %1573, 8
  store i64 %1486, i64* %PC, align 8
  %1487 = inttoptr i64 %1485 to i32*
  %1488 = load i32, i32* %1487, align 4
  %1489 = zext i32 %1488 to i64
  store i64 %1489, i64* %RAX, align 8, !tbaa !2428
  %1490 = add i64 %1573, 11
  store i64 %1490, i64* %PC, align 8
  %1491 = load i32, i32* %1536, align 4
  %1492 = add i32 %1491, %1488
  %1493 = zext i32 %1492 to i64
  store i64 %1493, i64* %RAX, align 8, !tbaa !2428
  %1494 = icmp ult i32 %1492, %1488
  %1495 = icmp ult i32 %1492, %1491
  %1496 = or i1 %1494, %1495
  %1497 = zext i1 %1496 to i8
  store i8 %1497, i8* %17, align 1, !tbaa !2433
  %1498 = and i32 %1492, 255
  %1499 = tail call i32 @llvm.ctpop.i32(i32 %1498) #11
  %1500 = trunc i32 %1499 to i8
  %1501 = and i8 %1500, 1
  %1502 = xor i8 %1501, 1
  store i8 %1502, i8* %24, align 1, !tbaa !2447
  %1503 = xor i32 %1491, %1488
  %1504 = xor i32 %1503, %1492
  %1505 = lshr i32 %1504, 4
  %1506 = trunc i32 %1505 to i8
  %1507 = and i8 %1506, 1
  store i8 %1507, i8* %30, align 1, !tbaa !2451
  %1508 = icmp eq i32 %1492, 0
  %1509 = zext i1 %1508 to i8
  store i8 %1509, i8* %33, align 1, !tbaa !2448
  %1510 = lshr i32 %1492, 31
  %1511 = trunc i32 %1510 to i8
  store i8 %1511, i8* %36, align 1, !tbaa !2449
  %1512 = lshr i32 %1488, 31
  %1513 = lshr i32 %1491, 31
  %1514 = xor i32 %1510, %1512
  %1515 = xor i32 %1510, %1513
  %1516 = add nuw nsw i32 %1514, %1515
  %1517 = icmp eq i32 %1516, 2
  %1518 = zext i1 %1517 to i8
  store i8 %1518, i8* %42, align 1, !tbaa !2450
  %1519 = add i64 %1573, 14
  store i64 %1519, i64* %PC, align 8
  store i32 %1492, i32* %1536, align 4
  %1520 = load i64, i64* %PC, align 8
  %1521 = add i64 %1520, -1910
  store i64 %1521, i64* %PC, align 8, !tbaa !2428
  br label %block_403863

block_403c90:                                     ; preds = %block_403ca6, %block_403c22
  %1522 = phi i64 [ %4711, %block_403ca6 ], [ %.pre6, %block_403c22 ]
  %1523 = load i64, i64* %RBP, align 8
  %1524 = add i64 %1523, -28
  %1525 = add i64 %1522, 3
  store i64 %1525, i64* %PC, align 8
  %1526 = inttoptr i64 %1524 to i32*
  %1527 = load i32, i32* %1526, align 4
  %1528 = zext i32 %1527 to i64
  store i64 %1528, i64* %RAX, align 8, !tbaa !2428
  %1529 = add i64 %1523, -8
  %1530 = add i64 %1522, 6
  store i64 %1530, i64* %PC, align 8
  %1531 = inttoptr i64 %1529 to i32*
  %1532 = load i32, i32* %1531, align 4
  %1533 = zext i32 %1532 to i64
  store i64 %1533, i64* %RCX, align 8, !tbaa !2428
  %1534 = add i64 %1523, -44
  %1535 = add i64 %1522, 9
  store i64 %1535, i64* %PC, align 8
  %1536 = inttoptr i64 %1534 to i32*
  %1537 = load i32, i32* %1536, align 4
  %1538 = zext i32 %1537 to i64
  store i64 %1538, i64* %RDX, align 8, !tbaa !2428
  %1539 = add i64 %1523, -56
  %1540 = add i64 %1522, 12
  store i64 %1540, i64* %PC, align 8
  %1541 = inttoptr i64 %1539 to i32*
  %1542 = load i32, i32* %1541, align 4
  %1543 = add i32 %1542, %1537
  %1544 = zext i32 %1543 to i64
  store i64 %1544, i64* %RDX, align 8, !tbaa !2428
  %1545 = add i32 %1543, %1532
  %1546 = zext i32 %1545 to i64
  store i64 %1546, i64* %RCX, align 8, !tbaa !2428
  %1547 = lshr i32 %1545, 31
  %1548 = sub i32 %1527, %1545
  %1549 = icmp ult i32 %1527, %1545
  %1550 = zext i1 %1549 to i8
  store i8 %1550, i8* %17, align 1, !tbaa !2433
  %1551 = and i32 %1548, 255
  %1552 = tail call i32 @llvm.ctpop.i32(i32 %1551) #11
  %1553 = trunc i32 %1552 to i8
  %1554 = and i8 %1553, 1
  %1555 = xor i8 %1554, 1
  store i8 %1555, i8* %24, align 1, !tbaa !2447
  %1556 = xor i32 %1545, %1527
  %1557 = xor i32 %1556, %1548
  %1558 = lshr i32 %1557, 4
  %1559 = trunc i32 %1558 to i8
  %1560 = and i8 %1559, 1
  store i8 %1560, i8* %30, align 1, !tbaa !2451
  %1561 = icmp eq i32 %1548, 0
  %1562 = zext i1 %1561 to i8
  store i8 %1562, i8* %33, align 1, !tbaa !2448
  %1563 = lshr i32 %1548, 31
  %1564 = trunc i32 %1563 to i8
  store i8 %1564, i8* %36, align 1, !tbaa !2449
  %1565 = lshr i32 %1527, 31
  %1566 = xor i32 %1547, %1565
  %1567 = xor i32 %1563, %1565
  %1568 = add nuw nsw i32 %1567, %1566
  %1569 = icmp eq i32 %1568, 2
  %1570 = zext i1 %1569 to i8
  store i8 %1570, i8* %42, align 1, !tbaa !2450
  %1571 = icmp ne i8 %1564, 0
  %1572 = xor i1 %1571, %1569
  %.v11 = select i1 %1572, i64 22, i64 827
  %1573 = add i64 %1522, %.v11
  store i64 %1573, i64* %PC, align 8, !tbaa !2428
  br i1 %1572, label %block_403ca6, label %block_403fcb

block_403910:                                     ; preds = %block_403921, %block_40386f
  %1574 = phi i64 [ %3669, %block_403921 ], [ %.pre5, %block_40386f ]
  %1575 = load i64, i64* %RBP, align 8
  %1576 = add i64 %1575, -28
  %1577 = add i64 %1574, 3
  store i64 %1577, i64* %PC, align 8
  %1578 = inttoptr i64 %1576 to i32*
  %1579 = load i32, i32* %1578, align 4
  %1580 = zext i32 %1579 to i64
  store i64 %1580, i64* %RAX, align 8, !tbaa !2428
  %1581 = add i64 %1575, -8
  %1582 = add i64 %1574, 6
  store i64 %1582, i64* %PC, align 8
  %1583 = inttoptr i64 %1581 to i32*
  %1584 = load i32, i32* %1583, align 4
  %1585 = zext i32 %1584 to i64
  store i64 %1585, i64* %RCX, align 8, !tbaa !2428
  %1586 = add i64 %1575, -44
  %1587 = add i64 %1574, 9
  store i64 %1587, i64* %PC, align 8
  %1588 = inttoptr i64 %1586 to i32*
  %1589 = load i32, i32* %1588, align 4
  %1590 = add i32 %1589, %1584
  %1591 = zext i32 %1590 to i64
  store i64 %1591, i64* %RCX, align 8, !tbaa !2428
  %1592 = lshr i32 %1590, 31
  %1593 = sub i32 %1579, %1590
  %1594 = icmp ult i32 %1579, %1590
  %1595 = zext i1 %1594 to i8
  store i8 %1595, i8* %17, align 1, !tbaa !2433
  %1596 = and i32 %1593, 255
  %1597 = tail call i32 @llvm.ctpop.i32(i32 %1596) #11
  %1598 = trunc i32 %1597 to i8
  %1599 = and i8 %1598, 1
  %1600 = xor i8 %1599, 1
  store i8 %1600, i8* %24, align 1, !tbaa !2447
  %1601 = xor i32 %1590, %1579
  %1602 = xor i32 %1601, %1593
  %1603 = lshr i32 %1602, 4
  %1604 = trunc i32 %1603 to i8
  %1605 = and i8 %1604, 1
  store i8 %1605, i8* %30, align 1, !tbaa !2451
  %1606 = icmp eq i32 %1593, 0
  %1607 = zext i1 %1606 to i8
  store i8 %1607, i8* %33, align 1, !tbaa !2448
  %1608 = lshr i32 %1593, 31
  %1609 = trunc i32 %1608 to i8
  store i8 %1609, i8* %36, align 1, !tbaa !2449
  %1610 = lshr i32 %1579, 31
  %1611 = xor i32 %1592, %1610
  %1612 = xor i32 %1608, %1610
  %1613 = add nuw nsw i32 %1612, %1611
  %1614 = icmp eq i32 %1613, 2
  %1615 = zext i1 %1614 to i8
  store i8 %1615, i8* %42, align 1, !tbaa !2450
  %1616 = icmp ne i8 %1609, 0
  %1617 = xor i1 %1616, %1614
  %.v10 = select i1 %1617, i64 17, i64 786
  %1618 = add i64 %1574, %.v10
  store i64 %1618, i64* %PC, align 8, !tbaa !2428
  br i1 %1617, label %block_403921, label %block_403c22

block_4035a2:                                     ; preds = %block_403591
  %1619 = add i64 %2615, 3
  store i64 %1619, i64* %PC, align 8
  %1620 = load i32, i32* %2575, align 4
  %1621 = zext i32 %1620 to i64
  store i64 %1621, i64* %RAX, align 8, !tbaa !2428
  %1622 = add i64 %2615, 6
  store i64 %1622, i64* %PC, align 8
  %1623 = load i32, i32* %2580, align 4
  %1624 = add i32 %1623, %1620
  %1625 = zext i32 %1624 to i64
  store i64 %1625, i64* %RAX, align 8, !tbaa !2428
  %1626 = icmp ult i32 %1624, %1620
  %1627 = icmp ult i32 %1624, %1623
  %1628 = or i1 %1626, %1627
  %1629 = zext i1 %1628 to i8
  store i8 %1629, i8* %17, align 1, !tbaa !2433
  %1630 = and i32 %1624, 255
  %1631 = tail call i32 @llvm.ctpop.i32(i32 %1630) #11
  %1632 = trunc i32 %1631 to i8
  %1633 = and i8 %1632, 1
  %1634 = xor i8 %1633, 1
  store i8 %1634, i8* %24, align 1, !tbaa !2447
  %1635 = xor i32 %1623, %1620
  %1636 = xor i32 %1635, %1624
  %1637 = lshr i32 %1636, 4
  %1638 = trunc i32 %1637 to i8
  %1639 = and i8 %1638, 1
  store i8 %1639, i8* %30, align 1, !tbaa !2451
  %1640 = icmp eq i32 %1624, 0
  %1641 = zext i1 %1640 to i8
  store i8 %1641, i8* %33, align 1, !tbaa !2448
  %1642 = lshr i32 %1624, 31
  %1643 = trunc i32 %1642 to i8
  store i8 %1643, i8* %36, align 1, !tbaa !2449
  %1644 = lshr i32 %1620, 31
  %1645 = lshr i32 %1623, 31
  %1646 = xor i32 %1642, %1644
  %1647 = xor i32 %1642, %1645
  %1648 = add nuw nsw i32 %1646, %1647
  %1649 = icmp eq i32 %1648, 2
  %1650 = zext i1 %1649 to i8
  store i8 %1650, i8* %42, align 1, !tbaa !2450
  %1651 = add i64 %2572, -32
  %1652 = add i64 %2615, 9
  store i64 %1652, i64* %PC, align 8
  %1653 = inttoptr i64 %1651 to i32*
  store i32 %1624, i32* %1653, align 4
  %1654 = load i64, i64* %RBP, align 8
  %1655 = add i64 %1654, -32
  %1656 = load i64, i64* %PC, align 8
  %1657 = add i64 %1656, 3
  store i64 %1657, i64* %PC, align 8
  %1658 = inttoptr i64 %1655 to i32*
  %1659 = load i32, i32* %1658, align 4
  %1660 = zext i32 %1659 to i64
  store i64 %1660, i64* %RAX, align 8, !tbaa !2428
  %1661 = add i64 %1654, -8
  %1662 = add i64 %1656, 6
  store i64 %1662, i64* %PC, align 8
  %1663 = inttoptr i64 %1661 to i32*
  %1664 = load i32, i32* %1663, align 4
  %1665 = add i32 %1664, %1659
  %1666 = zext i32 %1665 to i64
  store i64 %1666, i64* %RAX, align 8, !tbaa !2428
  %1667 = icmp ult i32 %1665, %1659
  %1668 = icmp ult i32 %1665, %1664
  %1669 = or i1 %1667, %1668
  %1670 = zext i1 %1669 to i8
  store i8 %1670, i8* %17, align 1, !tbaa !2433
  %1671 = and i32 %1665, 255
  %1672 = tail call i32 @llvm.ctpop.i32(i32 %1671) #11
  %1673 = trunc i32 %1672 to i8
  %1674 = and i8 %1673, 1
  %1675 = xor i8 %1674, 1
  store i8 %1675, i8* %24, align 1, !tbaa !2447
  %1676 = xor i32 %1664, %1659
  %1677 = xor i32 %1676, %1665
  %1678 = lshr i32 %1677, 4
  %1679 = trunc i32 %1678 to i8
  %1680 = and i8 %1679, 1
  store i8 %1680, i8* %30, align 1, !tbaa !2451
  %1681 = icmp eq i32 %1665, 0
  %1682 = zext i1 %1681 to i8
  store i8 %1682, i8* %33, align 1, !tbaa !2448
  %1683 = lshr i32 %1665, 31
  %1684 = trunc i32 %1683 to i8
  store i8 %1684, i8* %36, align 1, !tbaa !2449
  %1685 = lshr i32 %1659, 31
  %1686 = lshr i32 %1664, 31
  %1687 = xor i32 %1683, %1685
  %1688 = xor i32 %1683, %1686
  %1689 = add nuw nsw i32 %1687, %1688
  %1690 = icmp eq i32 %1689, 2
  %1691 = zext i1 %1690 to i8
  store i8 %1691, i8* %42, align 1, !tbaa !2450
  %1692 = add i64 %1654, -36
  %1693 = add i64 %1656, 9
  store i64 %1693, i64* %PC, align 8
  %1694 = inttoptr i64 %1692 to i32*
  store i32 %1665, i32* %1694, align 4
  %1695 = load i64, i64* %RBP, align 8
  %1696 = add i64 %1695, -36
  %1697 = load i64, i64* %PC, align 8
  %1698 = add i64 %1697, 3
  store i64 %1698, i64* %PC, align 8
  %1699 = inttoptr i64 %1696 to i32*
  %1700 = load i32, i32* %1699, align 4
  %1701 = zext i32 %1700 to i64
  store i64 %1701, i64* %RAX, align 8, !tbaa !2428
  %1702 = add i64 %1695, -8
  %1703 = add i64 %1697, 6
  store i64 %1703, i64* %PC, align 8
  %1704 = inttoptr i64 %1702 to i32*
  %1705 = load i32, i32* %1704, align 4
  %1706 = add i32 %1705, %1700
  %1707 = zext i32 %1706 to i64
  store i64 %1707, i64* %RAX, align 8, !tbaa !2428
  %1708 = icmp ult i32 %1706, %1700
  %1709 = icmp ult i32 %1706, %1705
  %1710 = or i1 %1708, %1709
  %1711 = zext i1 %1710 to i8
  store i8 %1711, i8* %17, align 1, !tbaa !2433
  %1712 = and i32 %1706, 255
  %1713 = tail call i32 @llvm.ctpop.i32(i32 %1712) #11
  %1714 = trunc i32 %1713 to i8
  %1715 = and i8 %1714, 1
  %1716 = xor i8 %1715, 1
  store i8 %1716, i8* %24, align 1, !tbaa !2447
  %1717 = xor i32 %1705, %1700
  %1718 = xor i32 %1717, %1706
  %1719 = lshr i32 %1718, 4
  %1720 = trunc i32 %1719 to i8
  %1721 = and i8 %1720, 1
  store i8 %1721, i8* %30, align 1, !tbaa !2451
  %1722 = icmp eq i32 %1706, 0
  %1723 = zext i1 %1722 to i8
  store i8 %1723, i8* %33, align 1, !tbaa !2448
  %1724 = lshr i32 %1706, 31
  %1725 = trunc i32 %1724 to i8
  store i8 %1725, i8* %36, align 1, !tbaa !2449
  %1726 = lshr i32 %1700, 31
  %1727 = lshr i32 %1705, 31
  %1728 = xor i32 %1724, %1726
  %1729 = xor i32 %1724, %1727
  %1730 = add nuw nsw i32 %1728, %1729
  %1731 = icmp eq i32 %1730, 2
  %1732 = zext i1 %1731 to i8
  store i8 %1732, i8* %42, align 1, !tbaa !2450
  %1733 = add i64 %1695, -40
  %1734 = add i64 %1697, 9
  store i64 %1734, i64* %PC, align 8
  %1735 = inttoptr i64 %1733 to i32*
  store i32 %1706, i32* %1735, align 4
  %1736 = load i64, i64* %RBP, align 8
  %1737 = add i64 %1736, -16
  %1738 = load i64, i64* %PC, align 8
  %1739 = add i64 %1738, 4
  store i64 %1739, i64* %PC, align 8
  %1740 = inttoptr i64 %1737 to i64*
  %1741 = load i64, i64* %1740, align 8
  store i64 %1741, i64* %RCX, align 8, !tbaa !2428
  %1742 = add i64 %1736, -28
  %1743 = add i64 %1738, 8
  store i64 %1743, i64* %PC, align 8
  %1744 = inttoptr i64 %1742 to i32*
  %1745 = load i32, i32* %1744, align 4
  %1746 = sext i32 %1745 to i64
  store i64 %1746, i64* %RDX, align 8, !tbaa !2428
  %1747 = shl nsw i64 %1746, 3
  %1748 = add i64 %1747, %1741
  %1749 = add i64 %1738, 13
  store i64 %1749, i64* %PC, align 8
  %1750 = inttoptr i64 %1748 to double*
  %1751 = load double, double* %1750, align 8
  store double %1751, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %1752 = add i64 %1738, 17
  store i64 %1752, i64* %PC, align 8
  %1753 = load i64, i64* %1740, align 8
  store i64 %1753, i64* %RCX, align 8, !tbaa !2428
  %1754 = add i64 %1736, -32
  %1755 = add i64 %1738, 21
  store i64 %1755, i64* %PC, align 8
  %1756 = inttoptr i64 %1754 to i32*
  %1757 = load i32, i32* %1756, align 4
  %1758 = sext i32 %1757 to i64
  store i64 %1758, i64* %RDX, align 8, !tbaa !2428
  %1759 = shl nsw i64 %1758, 3
  %1760 = add i64 %1759, %1753
  %1761 = add i64 %1738, 26
  store i64 %1761, i64* %PC, align 8
  %1762 = inttoptr i64 %1760 to double*
  %1763 = load double, double* %1762, align 8
  %1764 = fadd double %1751, %1763
  store double %1764, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %1765 = add i64 %1736, -120
  %1766 = add i64 %1738, 31
  store i64 %1766, i64* %PC, align 8
  %1767 = inttoptr i64 %1765 to double*
  store double %1764, double* %1767, align 8
  %1768 = load i64, i64* %RBP, align 8
  %1769 = add i64 %1768, -16
  %1770 = load i64, i64* %PC, align 8
  %1771 = add i64 %1770, 4
  store i64 %1771, i64* %PC, align 8
  %1772 = inttoptr i64 %1769 to i64*
  %1773 = load i64, i64* %1772, align 8
  store i64 %1773, i64* %RCX, align 8, !tbaa !2428
  %1774 = add i64 %1768, -28
  %1775 = add i64 %1770, 7
  store i64 %1775, i64* %PC, align 8
  %1776 = inttoptr i64 %1774 to i32*
  %1777 = load i32, i32* %1776, align 4
  %1778 = add i32 %1777, 1
  %1779 = zext i32 %1778 to i64
  store i64 %1779, i64* %RAX, align 8, !tbaa !2428
  %1780 = icmp eq i32 %1777, -1
  %1781 = icmp eq i32 %1778, 0
  %1782 = or i1 %1780, %1781
  %1783 = zext i1 %1782 to i8
  store i8 %1783, i8* %17, align 1, !tbaa !2433
  %1784 = and i32 %1778, 255
  %1785 = tail call i32 @llvm.ctpop.i32(i32 %1784) #11
  %1786 = trunc i32 %1785 to i8
  %1787 = and i8 %1786, 1
  %1788 = xor i8 %1787, 1
  store i8 %1788, i8* %24, align 1, !tbaa !2447
  %1789 = xor i32 %1777, %1778
  %1790 = lshr i32 %1789, 4
  %1791 = trunc i32 %1790 to i8
  %1792 = and i8 %1791, 1
  store i8 %1792, i8* %30, align 1, !tbaa !2451
  %1793 = zext i1 %1781 to i8
  store i8 %1793, i8* %33, align 1, !tbaa !2448
  %1794 = lshr i32 %1778, 31
  %1795 = trunc i32 %1794 to i8
  store i8 %1795, i8* %36, align 1, !tbaa !2449
  %1796 = lshr i32 %1777, 31
  %1797 = xor i32 %1794, %1796
  %1798 = add nuw nsw i32 %1797, %1794
  %1799 = icmp eq i32 %1798, 2
  %1800 = zext i1 %1799 to i8
  store i8 %1800, i8* %42, align 1, !tbaa !2450
  %1801 = sext i32 %1778 to i64
  store i64 %1801, i64* %RDX, align 8, !tbaa !2428
  %1802 = shl nsw i64 %1801, 3
  %1803 = add i64 %1802, %1773
  %1804 = add i64 %1770, 18
  store i64 %1804, i64* %PC, align 8
  %1805 = inttoptr i64 %1803 to double*
  %1806 = load double, double* %1805, align 8
  store double %1806, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %1807 = add i64 %1770, 22
  store i64 %1807, i64* %PC, align 8
  %1808 = load i64, i64* %1772, align 8
  store i64 %1808, i64* %RCX, align 8, !tbaa !2428
  %1809 = add i64 %1768, -32
  %1810 = add i64 %1770, 25
  store i64 %1810, i64* %PC, align 8
  %1811 = inttoptr i64 %1809 to i32*
  %1812 = load i32, i32* %1811, align 4
  %1813 = add i32 %1812, 1
  %1814 = zext i32 %1813 to i64
  store i64 %1814, i64* %RAX, align 8, !tbaa !2428
  %1815 = icmp eq i32 %1812, -1
  %1816 = icmp eq i32 %1813, 0
  %1817 = or i1 %1815, %1816
  %1818 = zext i1 %1817 to i8
  store i8 %1818, i8* %17, align 1, !tbaa !2433
  %1819 = and i32 %1813, 255
  %1820 = tail call i32 @llvm.ctpop.i32(i32 %1819) #11
  %1821 = trunc i32 %1820 to i8
  %1822 = and i8 %1821, 1
  %1823 = xor i8 %1822, 1
  store i8 %1823, i8* %24, align 1, !tbaa !2447
  %1824 = xor i32 %1812, %1813
  %1825 = lshr i32 %1824, 4
  %1826 = trunc i32 %1825 to i8
  %1827 = and i8 %1826, 1
  store i8 %1827, i8* %30, align 1, !tbaa !2451
  %1828 = zext i1 %1816 to i8
  store i8 %1828, i8* %33, align 1, !tbaa !2448
  %1829 = lshr i32 %1813, 31
  %1830 = trunc i32 %1829 to i8
  store i8 %1830, i8* %36, align 1, !tbaa !2449
  %1831 = lshr i32 %1812, 31
  %1832 = xor i32 %1829, %1831
  %1833 = add nuw nsw i32 %1832, %1829
  %1834 = icmp eq i32 %1833, 2
  %1835 = zext i1 %1834 to i8
  store i8 %1835, i8* %42, align 1, !tbaa !2450
  %1836 = sext i32 %1813 to i64
  store i64 %1836, i64* %RDX, align 8, !tbaa !2428
  %1837 = shl nsw i64 %1836, 3
  %1838 = add i64 %1837, %1808
  %1839 = add i64 %1770, 36
  store i64 %1839, i64* %PC, align 8
  %1840 = inttoptr i64 %1838 to double*
  %1841 = load double, double* %1840, align 8
  %1842 = fadd double %1806, %1841
  store double %1842, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %1843 = load i64, i64* %RBP, align 8
  %1844 = add i64 %1843, -128
  %1845 = add i64 %1770, 41
  store i64 %1845, i64* %PC, align 8
  %1846 = inttoptr i64 %1844 to double*
  store double %1842, double* %1846, align 8
  %1847 = load i64, i64* %RBP, align 8
  %1848 = add i64 %1847, -16
  %1849 = load i64, i64* %PC, align 8
  %1850 = add i64 %1849, 4
  store i64 %1850, i64* %PC, align 8
  %1851 = inttoptr i64 %1848 to i64*
  %1852 = load i64, i64* %1851, align 8
  store i64 %1852, i64* %RCX, align 8, !tbaa !2428
  %1853 = add i64 %1847, -28
  %1854 = add i64 %1849, 8
  store i64 %1854, i64* %PC, align 8
  %1855 = inttoptr i64 %1853 to i32*
  %1856 = load i32, i32* %1855, align 4
  %1857 = sext i32 %1856 to i64
  store i64 %1857, i64* %RDX, align 8, !tbaa !2428
  %1858 = shl nsw i64 %1857, 3
  %1859 = add i64 %1858, %1852
  %1860 = add i64 %1849, 13
  store i64 %1860, i64* %PC, align 8
  %1861 = inttoptr i64 %1859 to double*
  %1862 = load double, double* %1861, align 8
  store double %1862, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %1863 = add i64 %1849, 17
  store i64 %1863, i64* %PC, align 8
  %1864 = load i64, i64* %1851, align 8
  store i64 %1864, i64* %RCX, align 8, !tbaa !2428
  %1865 = add i64 %1847, -32
  %1866 = add i64 %1849, 21
  store i64 %1866, i64* %PC, align 8
  %1867 = inttoptr i64 %1865 to i32*
  %1868 = load i32, i32* %1867, align 4
  %1869 = sext i32 %1868 to i64
  store i64 %1869, i64* %RDX, align 8, !tbaa !2428
  %1870 = shl nsw i64 %1869, 3
  %1871 = add i64 %1870, %1864
  %1872 = add i64 %1849, 26
  store i64 %1872, i64* %PC, align 8
  %1873 = inttoptr i64 %1871 to double*
  %1874 = load double, double* %1873, align 8
  %1875 = fsub double %1862, %1874
  store double %1875, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %1876 = add i64 %1847, -136
  %1877 = add i64 %1849, 34
  store i64 %1877, i64* %PC, align 8
  %1878 = inttoptr i64 %1876 to double*
  store double %1875, double* %1878, align 8
  %1879 = load i64, i64* %RBP, align 8
  %1880 = add i64 %1879, -16
  %1881 = load i64, i64* %PC, align 8
  %1882 = add i64 %1881, 4
  store i64 %1882, i64* %PC, align 8
  %1883 = inttoptr i64 %1880 to i64*
  %1884 = load i64, i64* %1883, align 8
  store i64 %1884, i64* %RCX, align 8, !tbaa !2428
  %1885 = add i64 %1879, -28
  %1886 = add i64 %1881, 7
  store i64 %1886, i64* %PC, align 8
  %1887 = inttoptr i64 %1885 to i32*
  %1888 = load i32, i32* %1887, align 4
  %1889 = add i32 %1888, 1
  %1890 = zext i32 %1889 to i64
  store i64 %1890, i64* %RAX, align 8, !tbaa !2428
  %1891 = icmp eq i32 %1888, -1
  %1892 = icmp eq i32 %1889, 0
  %1893 = or i1 %1891, %1892
  %1894 = zext i1 %1893 to i8
  store i8 %1894, i8* %17, align 1, !tbaa !2433
  %1895 = and i32 %1889, 255
  %1896 = tail call i32 @llvm.ctpop.i32(i32 %1895) #11
  %1897 = trunc i32 %1896 to i8
  %1898 = and i8 %1897, 1
  %1899 = xor i8 %1898, 1
  store i8 %1899, i8* %24, align 1, !tbaa !2447
  %1900 = xor i32 %1888, %1889
  %1901 = lshr i32 %1900, 4
  %1902 = trunc i32 %1901 to i8
  %1903 = and i8 %1902, 1
  store i8 %1903, i8* %30, align 1, !tbaa !2451
  %1904 = zext i1 %1892 to i8
  store i8 %1904, i8* %33, align 1, !tbaa !2448
  %1905 = lshr i32 %1889, 31
  %1906 = trunc i32 %1905 to i8
  store i8 %1906, i8* %36, align 1, !tbaa !2449
  %1907 = lshr i32 %1888, 31
  %1908 = xor i32 %1905, %1907
  %1909 = add nuw nsw i32 %1908, %1905
  %1910 = icmp eq i32 %1909, 2
  %1911 = zext i1 %1910 to i8
  store i8 %1911, i8* %42, align 1, !tbaa !2450
  %1912 = sext i32 %1889 to i64
  store i64 %1912, i64* %RDX, align 8, !tbaa !2428
  %1913 = shl nsw i64 %1912, 3
  %1914 = add i64 %1913, %1884
  %1915 = add i64 %1881, 18
  store i64 %1915, i64* %PC, align 8
  %1916 = inttoptr i64 %1914 to double*
  %1917 = load double, double* %1916, align 8
  store double %1917, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %1918 = add i64 %1881, 22
  store i64 %1918, i64* %PC, align 8
  %1919 = load i64, i64* %1883, align 8
  store i64 %1919, i64* %RCX, align 8, !tbaa !2428
  %1920 = add i64 %1879, -32
  %1921 = add i64 %1881, 25
  store i64 %1921, i64* %PC, align 8
  %1922 = inttoptr i64 %1920 to i32*
  %1923 = load i32, i32* %1922, align 4
  %1924 = add i32 %1923, 1
  %1925 = zext i32 %1924 to i64
  store i64 %1925, i64* %RAX, align 8, !tbaa !2428
  %1926 = icmp eq i32 %1923, -1
  %1927 = icmp eq i32 %1924, 0
  %1928 = or i1 %1926, %1927
  %1929 = zext i1 %1928 to i8
  store i8 %1929, i8* %17, align 1, !tbaa !2433
  %1930 = and i32 %1924, 255
  %1931 = tail call i32 @llvm.ctpop.i32(i32 %1930) #11
  %1932 = trunc i32 %1931 to i8
  %1933 = and i8 %1932, 1
  %1934 = xor i8 %1933, 1
  store i8 %1934, i8* %24, align 1, !tbaa !2447
  %1935 = xor i32 %1923, %1924
  %1936 = lshr i32 %1935, 4
  %1937 = trunc i32 %1936 to i8
  %1938 = and i8 %1937, 1
  store i8 %1938, i8* %30, align 1, !tbaa !2451
  %1939 = zext i1 %1927 to i8
  store i8 %1939, i8* %33, align 1, !tbaa !2448
  %1940 = lshr i32 %1924, 31
  %1941 = trunc i32 %1940 to i8
  store i8 %1941, i8* %36, align 1, !tbaa !2449
  %1942 = lshr i32 %1923, 31
  %1943 = xor i32 %1940, %1942
  %1944 = add nuw nsw i32 %1943, %1940
  %1945 = icmp eq i32 %1944, 2
  %1946 = zext i1 %1945 to i8
  store i8 %1946, i8* %42, align 1, !tbaa !2450
  %1947 = sext i32 %1924 to i64
  store i64 %1947, i64* %RDX, align 8, !tbaa !2428
  %1948 = shl nsw i64 %1947, 3
  %1949 = add i64 %1948, %1919
  %1950 = add i64 %1881, 36
  store i64 %1950, i64* %PC, align 8
  %1951 = inttoptr i64 %1949 to double*
  %1952 = load double, double* %1951, align 8
  %1953 = fsub double %1917, %1952
  store double %1953, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %1954 = load i64, i64* %RBP, align 8
  %1955 = add i64 %1954, -144
  %1956 = add i64 %1881, 44
  store i64 %1956, i64* %PC, align 8
  %1957 = inttoptr i64 %1955 to double*
  store double %1953, double* %1957, align 8
  %1958 = load i64, i64* %RBP, align 8
  %1959 = add i64 %1958, -16
  %1960 = load i64, i64* %PC, align 8
  %1961 = add i64 %1960, 4
  store i64 %1961, i64* %PC, align 8
  %1962 = inttoptr i64 %1959 to i64*
  %1963 = load i64, i64* %1962, align 8
  store i64 %1963, i64* %RCX, align 8, !tbaa !2428
  %1964 = add i64 %1958, -36
  %1965 = add i64 %1960, 8
  store i64 %1965, i64* %PC, align 8
  %1966 = inttoptr i64 %1964 to i32*
  %1967 = load i32, i32* %1966, align 4
  %1968 = sext i32 %1967 to i64
  store i64 %1968, i64* %RDX, align 8, !tbaa !2428
  %1969 = shl nsw i64 %1968, 3
  %1970 = add i64 %1969, %1963
  %1971 = add i64 %1960, 13
  store i64 %1971, i64* %PC, align 8
  %1972 = inttoptr i64 %1970 to double*
  %1973 = load double, double* %1972, align 8
  store double %1973, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %1974 = add i64 %1960, 17
  store i64 %1974, i64* %PC, align 8
  %1975 = load i64, i64* %1962, align 8
  store i64 %1975, i64* %RCX, align 8, !tbaa !2428
  %1976 = add i64 %1958, -40
  %1977 = add i64 %1960, 21
  store i64 %1977, i64* %PC, align 8
  %1978 = inttoptr i64 %1976 to i32*
  %1979 = load i32, i32* %1978, align 4
  %1980 = sext i32 %1979 to i64
  store i64 %1980, i64* %RDX, align 8, !tbaa !2428
  %1981 = shl nsw i64 %1980, 3
  %1982 = add i64 %1981, %1975
  %1983 = add i64 %1960, 26
  store i64 %1983, i64* %PC, align 8
  %1984 = inttoptr i64 %1982 to double*
  %1985 = load double, double* %1984, align 8
  %1986 = fadd double %1973, %1985
  store double %1986, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %1987 = add i64 %1958, -152
  %1988 = add i64 %1960, 34
  store i64 %1988, i64* %PC, align 8
  %1989 = inttoptr i64 %1987 to double*
  store double %1986, double* %1989, align 8
  %1990 = load i64, i64* %RBP, align 8
  %1991 = add i64 %1990, -16
  %1992 = load i64, i64* %PC, align 8
  %1993 = add i64 %1992, 4
  store i64 %1993, i64* %PC, align 8
  %1994 = inttoptr i64 %1991 to i64*
  %1995 = load i64, i64* %1994, align 8
  store i64 %1995, i64* %RCX, align 8, !tbaa !2428
  %1996 = add i64 %1990, -36
  %1997 = add i64 %1992, 7
  store i64 %1997, i64* %PC, align 8
  %1998 = inttoptr i64 %1996 to i32*
  %1999 = load i32, i32* %1998, align 4
  %2000 = add i32 %1999, 1
  %2001 = zext i32 %2000 to i64
  store i64 %2001, i64* %RAX, align 8, !tbaa !2428
  %2002 = icmp eq i32 %1999, -1
  %2003 = icmp eq i32 %2000, 0
  %2004 = or i1 %2002, %2003
  %2005 = zext i1 %2004 to i8
  store i8 %2005, i8* %17, align 1, !tbaa !2433
  %2006 = and i32 %2000, 255
  %2007 = tail call i32 @llvm.ctpop.i32(i32 %2006) #11
  %2008 = trunc i32 %2007 to i8
  %2009 = and i8 %2008, 1
  %2010 = xor i8 %2009, 1
  store i8 %2010, i8* %24, align 1, !tbaa !2447
  %2011 = xor i32 %1999, %2000
  %2012 = lshr i32 %2011, 4
  %2013 = trunc i32 %2012 to i8
  %2014 = and i8 %2013, 1
  store i8 %2014, i8* %30, align 1, !tbaa !2451
  %2015 = zext i1 %2003 to i8
  store i8 %2015, i8* %33, align 1, !tbaa !2448
  %2016 = lshr i32 %2000, 31
  %2017 = trunc i32 %2016 to i8
  store i8 %2017, i8* %36, align 1, !tbaa !2449
  %2018 = lshr i32 %1999, 31
  %2019 = xor i32 %2016, %2018
  %2020 = add nuw nsw i32 %2019, %2016
  %2021 = icmp eq i32 %2020, 2
  %2022 = zext i1 %2021 to i8
  store i8 %2022, i8* %42, align 1, !tbaa !2450
  %2023 = sext i32 %2000 to i64
  store i64 %2023, i64* %RDX, align 8, !tbaa !2428
  %2024 = shl nsw i64 %2023, 3
  %2025 = add i64 %2024, %1995
  %2026 = add i64 %1992, 18
  store i64 %2026, i64* %PC, align 8
  %2027 = inttoptr i64 %2025 to double*
  %2028 = load double, double* %2027, align 8
  store double %2028, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2029 = add i64 %1992, 22
  store i64 %2029, i64* %PC, align 8
  %2030 = load i64, i64* %1994, align 8
  store i64 %2030, i64* %RCX, align 8, !tbaa !2428
  %2031 = add i64 %1990, -40
  %2032 = add i64 %1992, 25
  store i64 %2032, i64* %PC, align 8
  %2033 = inttoptr i64 %2031 to i32*
  %2034 = load i32, i32* %2033, align 4
  %2035 = add i32 %2034, 1
  %2036 = zext i32 %2035 to i64
  store i64 %2036, i64* %RAX, align 8, !tbaa !2428
  %2037 = icmp eq i32 %2034, -1
  %2038 = icmp eq i32 %2035, 0
  %2039 = or i1 %2037, %2038
  %2040 = zext i1 %2039 to i8
  store i8 %2040, i8* %17, align 1, !tbaa !2433
  %2041 = and i32 %2035, 255
  %2042 = tail call i32 @llvm.ctpop.i32(i32 %2041) #11
  %2043 = trunc i32 %2042 to i8
  %2044 = and i8 %2043, 1
  %2045 = xor i8 %2044, 1
  store i8 %2045, i8* %24, align 1, !tbaa !2447
  %2046 = xor i32 %2034, %2035
  %2047 = lshr i32 %2046, 4
  %2048 = trunc i32 %2047 to i8
  %2049 = and i8 %2048, 1
  store i8 %2049, i8* %30, align 1, !tbaa !2451
  %2050 = zext i1 %2038 to i8
  store i8 %2050, i8* %33, align 1, !tbaa !2448
  %2051 = lshr i32 %2035, 31
  %2052 = trunc i32 %2051 to i8
  store i8 %2052, i8* %36, align 1, !tbaa !2449
  %2053 = lshr i32 %2034, 31
  %2054 = xor i32 %2051, %2053
  %2055 = add nuw nsw i32 %2054, %2051
  %2056 = icmp eq i32 %2055, 2
  %2057 = zext i1 %2056 to i8
  store i8 %2057, i8* %42, align 1, !tbaa !2450
  %2058 = sext i32 %2035 to i64
  store i64 %2058, i64* %RDX, align 8, !tbaa !2428
  %2059 = shl nsw i64 %2058, 3
  %2060 = add i64 %2059, %2030
  %2061 = add i64 %1992, 36
  store i64 %2061, i64* %PC, align 8
  %2062 = inttoptr i64 %2060 to double*
  %2063 = load double, double* %2062, align 8
  %2064 = fadd double %2028, %2063
  store double %2064, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2065 = load i64, i64* %RBP, align 8
  %2066 = add i64 %2065, -160
  %2067 = add i64 %1992, 44
  store i64 %2067, i64* %PC, align 8
  %2068 = inttoptr i64 %2066 to double*
  store double %2064, double* %2068, align 8
  %2069 = load i64, i64* %RBP, align 8
  %2070 = add i64 %2069, -16
  %2071 = load i64, i64* %PC, align 8
  %2072 = add i64 %2071, 4
  store i64 %2072, i64* %PC, align 8
  %2073 = inttoptr i64 %2070 to i64*
  %2074 = load i64, i64* %2073, align 8
  store i64 %2074, i64* %RCX, align 8, !tbaa !2428
  %2075 = add i64 %2069, -36
  %2076 = add i64 %2071, 8
  store i64 %2076, i64* %PC, align 8
  %2077 = inttoptr i64 %2075 to i32*
  %2078 = load i32, i32* %2077, align 4
  %2079 = sext i32 %2078 to i64
  store i64 %2079, i64* %RDX, align 8, !tbaa !2428
  %2080 = shl nsw i64 %2079, 3
  %2081 = add i64 %2080, %2074
  %2082 = add i64 %2071, 13
  store i64 %2082, i64* %PC, align 8
  %2083 = inttoptr i64 %2081 to double*
  %2084 = load double, double* %2083, align 8
  store double %2084, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2085 = add i64 %2071, 17
  store i64 %2085, i64* %PC, align 8
  %2086 = load i64, i64* %2073, align 8
  store i64 %2086, i64* %RCX, align 8, !tbaa !2428
  %2087 = add i64 %2069, -40
  %2088 = add i64 %2071, 21
  store i64 %2088, i64* %PC, align 8
  %2089 = inttoptr i64 %2087 to i32*
  %2090 = load i32, i32* %2089, align 4
  %2091 = sext i32 %2090 to i64
  store i64 %2091, i64* %RDX, align 8, !tbaa !2428
  %2092 = shl nsw i64 %2091, 3
  %2093 = add i64 %2092, %2086
  %2094 = add i64 %2071, 26
  store i64 %2094, i64* %PC, align 8
  %2095 = inttoptr i64 %2093 to double*
  %2096 = load double, double* %2095, align 8
  %2097 = fsub double %2084, %2096
  store double %2097, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2098 = add i64 %2069, -168
  %2099 = add i64 %2071, 34
  store i64 %2099, i64* %PC, align 8
  %2100 = inttoptr i64 %2098 to double*
  store double %2097, double* %2100, align 8
  %2101 = load i64, i64* %RBP, align 8
  %2102 = add i64 %2101, -16
  %2103 = load i64, i64* %PC, align 8
  %2104 = add i64 %2103, 4
  store i64 %2104, i64* %PC, align 8
  %2105 = inttoptr i64 %2102 to i64*
  %2106 = load i64, i64* %2105, align 8
  store i64 %2106, i64* %RCX, align 8, !tbaa !2428
  %2107 = add i64 %2101, -36
  %2108 = add i64 %2103, 7
  store i64 %2108, i64* %PC, align 8
  %2109 = inttoptr i64 %2107 to i32*
  %2110 = load i32, i32* %2109, align 4
  %2111 = add i32 %2110, 1
  %2112 = zext i32 %2111 to i64
  store i64 %2112, i64* %RAX, align 8, !tbaa !2428
  %2113 = icmp eq i32 %2110, -1
  %2114 = icmp eq i32 %2111, 0
  %2115 = or i1 %2113, %2114
  %2116 = zext i1 %2115 to i8
  store i8 %2116, i8* %17, align 1, !tbaa !2433
  %2117 = and i32 %2111, 255
  %2118 = tail call i32 @llvm.ctpop.i32(i32 %2117) #11
  %2119 = trunc i32 %2118 to i8
  %2120 = and i8 %2119, 1
  %2121 = xor i8 %2120, 1
  store i8 %2121, i8* %24, align 1, !tbaa !2447
  %2122 = xor i32 %2110, %2111
  %2123 = lshr i32 %2122, 4
  %2124 = trunc i32 %2123 to i8
  %2125 = and i8 %2124, 1
  store i8 %2125, i8* %30, align 1, !tbaa !2451
  %2126 = zext i1 %2114 to i8
  store i8 %2126, i8* %33, align 1, !tbaa !2448
  %2127 = lshr i32 %2111, 31
  %2128 = trunc i32 %2127 to i8
  store i8 %2128, i8* %36, align 1, !tbaa !2449
  %2129 = lshr i32 %2110, 31
  %2130 = xor i32 %2127, %2129
  %2131 = add nuw nsw i32 %2130, %2127
  %2132 = icmp eq i32 %2131, 2
  %2133 = zext i1 %2132 to i8
  store i8 %2133, i8* %42, align 1, !tbaa !2450
  %2134 = sext i32 %2111 to i64
  store i64 %2134, i64* %RDX, align 8, !tbaa !2428
  %2135 = shl nsw i64 %2134, 3
  %2136 = add i64 %2135, %2106
  %2137 = add i64 %2103, 18
  store i64 %2137, i64* %PC, align 8
  %2138 = inttoptr i64 %2136 to double*
  %2139 = load double, double* %2138, align 8
  store double %2139, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2140 = add i64 %2103, 22
  store i64 %2140, i64* %PC, align 8
  %2141 = load i64, i64* %2105, align 8
  store i64 %2141, i64* %RCX, align 8, !tbaa !2428
  %2142 = add i64 %2101, -40
  %2143 = add i64 %2103, 25
  store i64 %2143, i64* %PC, align 8
  %2144 = inttoptr i64 %2142 to i32*
  %2145 = load i32, i32* %2144, align 4
  %2146 = add i32 %2145, 1
  %2147 = zext i32 %2146 to i64
  store i64 %2147, i64* %RAX, align 8, !tbaa !2428
  %2148 = icmp eq i32 %2145, -1
  %2149 = icmp eq i32 %2146, 0
  %2150 = or i1 %2148, %2149
  %2151 = zext i1 %2150 to i8
  store i8 %2151, i8* %17, align 1, !tbaa !2433
  %2152 = and i32 %2146, 255
  %2153 = tail call i32 @llvm.ctpop.i32(i32 %2152) #11
  %2154 = trunc i32 %2153 to i8
  %2155 = and i8 %2154, 1
  %2156 = xor i8 %2155, 1
  store i8 %2156, i8* %24, align 1, !tbaa !2447
  %2157 = xor i32 %2145, %2146
  %2158 = lshr i32 %2157, 4
  %2159 = trunc i32 %2158 to i8
  %2160 = and i8 %2159, 1
  store i8 %2160, i8* %30, align 1, !tbaa !2451
  %2161 = zext i1 %2149 to i8
  store i8 %2161, i8* %33, align 1, !tbaa !2448
  %2162 = lshr i32 %2146, 31
  %2163 = trunc i32 %2162 to i8
  store i8 %2163, i8* %36, align 1, !tbaa !2449
  %2164 = lshr i32 %2145, 31
  %2165 = xor i32 %2162, %2164
  %2166 = add nuw nsw i32 %2165, %2162
  %2167 = icmp eq i32 %2166, 2
  %2168 = zext i1 %2167 to i8
  store i8 %2168, i8* %42, align 1, !tbaa !2450
  %2169 = sext i32 %2146 to i64
  store i64 %2169, i64* %RDX, align 8, !tbaa !2428
  %2170 = shl nsw i64 %2169, 3
  %2171 = add i64 %2170, %2141
  %2172 = add i64 %2103, 36
  store i64 %2172, i64* %PC, align 8
  %2173 = inttoptr i64 %2171 to double*
  %2174 = load double, double* %2173, align 8
  %2175 = fsub double %2139, %2174
  store double %2175, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2176 = load i64, i64* %RBP, align 8
  %2177 = add i64 %2176, -176
  %2178 = add i64 %2103, 44
  store i64 %2178, i64* %PC, align 8
  %2179 = inttoptr i64 %2177 to double*
  store double %2175, double* %2179, align 8
  %2180 = load i64, i64* %RBP, align 8
  %2181 = add i64 %2180, -120
  %2182 = load i64, i64* %PC, align 8
  %2183 = add i64 %2182, 5
  store i64 %2183, i64* %PC, align 8
  %2184 = inttoptr i64 %2181 to double*
  %2185 = load double, double* %2184, align 8
  store double %2185, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2186 = add i64 %2180, -152
  %2187 = add i64 %2182, 13
  store i64 %2187, i64* %PC, align 8
  %2188 = inttoptr i64 %2186 to double*
  %2189 = load double, double* %2188, align 8
  %2190 = fadd double %2185, %2189
  store double %2190, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2191 = add i64 %2180, -16
  %2192 = add i64 %2182, 17
  store i64 %2192, i64* %PC, align 8
  %2193 = inttoptr i64 %2191 to i64*
  %2194 = load i64, i64* %2193, align 8
  store i64 %2194, i64* %RCX, align 8, !tbaa !2428
  %2195 = add i64 %2180, -28
  %2196 = add i64 %2182, 21
  store i64 %2196, i64* %PC, align 8
  %2197 = inttoptr i64 %2195 to i32*
  %2198 = load i32, i32* %2197, align 4
  %2199 = sext i32 %2198 to i64
  store i64 %2199, i64* %RDX, align 8, !tbaa !2428
  %2200 = shl nsw i64 %2199, 3
  %2201 = add i64 %2200, %2194
  %2202 = add i64 %2182, 26
  store i64 %2202, i64* %PC, align 8
  %2203 = inttoptr i64 %2201 to double*
  store double %2190, double* %2203, align 8
  %2204 = load i64, i64* %RBP, align 8
  %2205 = add i64 %2204, -128
  %2206 = load i64, i64* %PC, align 8
  %2207 = add i64 %2206, 5
  store i64 %2207, i64* %PC, align 8
  %2208 = inttoptr i64 %2205 to double*
  %2209 = load double, double* %2208, align 8
  store double %2209, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2210 = add i64 %2204, -160
  %2211 = add i64 %2206, 13
  store i64 %2211, i64* %PC, align 8
  %2212 = inttoptr i64 %2210 to double*
  %2213 = load double, double* %2212, align 8
  %2214 = fadd double %2209, %2213
  store double %2214, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2215 = add i64 %2204, -16
  %2216 = add i64 %2206, 17
  store i64 %2216, i64* %PC, align 8
  %2217 = inttoptr i64 %2215 to i64*
  %2218 = load i64, i64* %2217, align 8
  store i64 %2218, i64* %RCX, align 8, !tbaa !2428
  %2219 = add i64 %2204, -28
  %2220 = add i64 %2206, 20
  store i64 %2220, i64* %PC, align 8
  %2221 = inttoptr i64 %2219 to i32*
  %2222 = load i32, i32* %2221, align 4
  %2223 = add i32 %2222, 1
  %2224 = zext i32 %2223 to i64
  store i64 %2224, i64* %RAX, align 8, !tbaa !2428
  %2225 = icmp eq i32 %2222, -1
  %2226 = icmp eq i32 %2223, 0
  %2227 = or i1 %2225, %2226
  %2228 = zext i1 %2227 to i8
  store i8 %2228, i8* %17, align 1, !tbaa !2433
  %2229 = and i32 %2223, 255
  %2230 = tail call i32 @llvm.ctpop.i32(i32 %2229) #11
  %2231 = trunc i32 %2230 to i8
  %2232 = and i8 %2231, 1
  %2233 = xor i8 %2232, 1
  store i8 %2233, i8* %24, align 1, !tbaa !2447
  %2234 = xor i32 %2222, %2223
  %2235 = lshr i32 %2234, 4
  %2236 = trunc i32 %2235 to i8
  %2237 = and i8 %2236, 1
  store i8 %2237, i8* %30, align 1, !tbaa !2451
  %2238 = zext i1 %2226 to i8
  store i8 %2238, i8* %33, align 1, !tbaa !2448
  %2239 = lshr i32 %2223, 31
  %2240 = trunc i32 %2239 to i8
  store i8 %2240, i8* %36, align 1, !tbaa !2449
  %2241 = lshr i32 %2222, 31
  %2242 = xor i32 %2239, %2241
  %2243 = add nuw nsw i32 %2242, %2239
  %2244 = icmp eq i32 %2243, 2
  %2245 = zext i1 %2244 to i8
  store i8 %2245, i8* %42, align 1, !tbaa !2450
  %2246 = sext i32 %2223 to i64
  store i64 %2246, i64* %RDX, align 8, !tbaa !2428
  %2247 = shl nsw i64 %2246, 3
  %2248 = add i64 %2247, %2218
  %2249 = add i64 %2206, 31
  store i64 %2249, i64* %PC, align 8
  %2250 = inttoptr i64 %2248 to double*
  store double %2214, double* %2250, align 8
  %2251 = load i64, i64* %RBP, align 8
  %2252 = add i64 %2251, -160
  %2253 = load i64, i64* %PC, align 8
  %2254 = add i64 %2253, 8
  store i64 %2254, i64* %PC, align 8
  %2255 = inttoptr i64 %2252 to double*
  %2256 = load double, double* %2255, align 8
  store double %2256, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2257 = add i64 %2251, -128
  %2258 = add i64 %2253, 13
  store i64 %2258, i64* %PC, align 8
  %2259 = inttoptr i64 %2257 to double*
  %2260 = load double, double* %2259, align 8
  %2261 = fsub double %2256, %2260
  store double %2261, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2262 = add i64 %2251, -16
  %2263 = add i64 %2253, 17
  store i64 %2263, i64* %PC, align 8
  %2264 = inttoptr i64 %2262 to i64*
  %2265 = load i64, i64* %2264, align 8
  store i64 %2265, i64* %RCX, align 8, !tbaa !2428
  %2266 = add i64 %2251, -36
  %2267 = add i64 %2253, 21
  store i64 %2267, i64* %PC, align 8
  %2268 = inttoptr i64 %2266 to i32*
  %2269 = load i32, i32* %2268, align 4
  %2270 = sext i32 %2269 to i64
  store i64 %2270, i64* %RDX, align 8, !tbaa !2428
  %2271 = shl nsw i64 %2270, 3
  %2272 = add i64 %2271, %2265
  %2273 = add i64 %2253, 26
  store i64 %2273, i64* %PC, align 8
  %2274 = inttoptr i64 %2272 to double*
  store double %2261, double* %2274, align 8
  %2275 = load i64, i64* %RBP, align 8
  %2276 = add i64 %2275, -120
  %2277 = load i64, i64* %PC, align 8
  %2278 = add i64 %2277, 5
  store i64 %2278, i64* %PC, align 8
  %2279 = inttoptr i64 %2276 to double*
  %2280 = load double, double* %2279, align 8
  store double %2280, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2281 = add i64 %2275, -152
  %2282 = add i64 %2277, 13
  store i64 %2282, i64* %PC, align 8
  %2283 = inttoptr i64 %2281 to double*
  %2284 = load double, double* %2283, align 8
  %2285 = fsub double %2280, %2284
  store double %2285, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2286 = add i64 %2275, -16
  %2287 = add i64 %2277, 17
  store i64 %2287, i64* %PC, align 8
  %2288 = inttoptr i64 %2286 to i64*
  %2289 = load i64, i64* %2288, align 8
  store i64 %2289, i64* %RCX, align 8, !tbaa !2428
  %2290 = add i64 %2275, -36
  %2291 = add i64 %2277, 20
  store i64 %2291, i64* %PC, align 8
  %2292 = inttoptr i64 %2290 to i32*
  %2293 = load i32, i32* %2292, align 4
  %2294 = add i32 %2293, 1
  %2295 = zext i32 %2294 to i64
  store i64 %2295, i64* %RAX, align 8, !tbaa !2428
  %2296 = icmp eq i32 %2293, -1
  %2297 = icmp eq i32 %2294, 0
  %2298 = or i1 %2296, %2297
  %2299 = zext i1 %2298 to i8
  store i8 %2299, i8* %17, align 1, !tbaa !2433
  %2300 = and i32 %2294, 255
  %2301 = tail call i32 @llvm.ctpop.i32(i32 %2300) #11
  %2302 = trunc i32 %2301 to i8
  %2303 = and i8 %2302, 1
  %2304 = xor i8 %2303, 1
  store i8 %2304, i8* %24, align 1, !tbaa !2447
  %2305 = xor i32 %2293, %2294
  %2306 = lshr i32 %2305, 4
  %2307 = trunc i32 %2306 to i8
  %2308 = and i8 %2307, 1
  store i8 %2308, i8* %30, align 1, !tbaa !2451
  %2309 = zext i1 %2297 to i8
  store i8 %2309, i8* %33, align 1, !tbaa !2448
  %2310 = lshr i32 %2294, 31
  %2311 = trunc i32 %2310 to i8
  store i8 %2311, i8* %36, align 1, !tbaa !2449
  %2312 = lshr i32 %2293, 31
  %2313 = xor i32 %2310, %2312
  %2314 = add nuw nsw i32 %2313, %2310
  %2315 = icmp eq i32 %2314, 2
  %2316 = zext i1 %2315 to i8
  store i8 %2316, i8* %42, align 1, !tbaa !2450
  %2317 = sext i32 %2294 to i64
  store i64 %2317, i64* %RDX, align 8, !tbaa !2428
  %2318 = shl nsw i64 %2317, 3
  %2319 = add i64 %2318, %2289
  %2320 = add i64 %2277, 31
  store i64 %2320, i64* %PC, align 8
  %2321 = inttoptr i64 %2319 to double*
  store double %2285, double* %2321, align 8
  %2322 = load i64, i64* %RBP, align 8
  %2323 = add i64 %2322, -136
  %2324 = load i64, i64* %PC, align 8
  %2325 = add i64 %2324, 8
  store i64 %2325, i64* %PC, align 8
  %2326 = inttoptr i64 %2323 to double*
  %2327 = load double, double* %2326, align 8
  store double %2327, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2328 = add i64 %2322, -176
  %2329 = add i64 %2324, 16
  store i64 %2329, i64* %PC, align 8
  %2330 = inttoptr i64 %2328 to double*
  %2331 = load double, double* %2330, align 8
  %2332 = fsub double %2327, %2331
  store double %2332, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2333 = add i64 %2322, -120
  %2334 = add i64 %2324, 21
  store i64 %2334, i64* %PC, align 8
  %2335 = inttoptr i64 %2333 to double*
  store double %2332, double* %2335, align 8
  %2336 = load i64, i64* %RBP, align 8
  %2337 = add i64 %2336, -144
  %2338 = load i64, i64* %PC, align 8
  %2339 = add i64 %2338, 8
  store i64 %2339, i64* %PC, align 8
  %2340 = inttoptr i64 %2337 to double*
  %2341 = load double, double* %2340, align 8
  store double %2341, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2342 = add i64 %2336, -168
  %2343 = add i64 %2338, 16
  store i64 %2343, i64* %PC, align 8
  %2344 = inttoptr i64 %2342 to double*
  %2345 = load double, double* %2344, align 8
  %2346 = fadd double %2341, %2345
  store double %2346, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2347 = add i64 %2336, -128
  %2348 = add i64 %2338, 21
  store i64 %2348, i64* %PC, align 8
  %2349 = inttoptr i64 %2347 to double*
  store double %2346, double* %2349, align 8
  %2350 = load i64, i64* %RBP, align 8
  %2351 = add i64 %2350, -72
  %2352 = load i64, i64* %PC, align 8
  %2353 = add i64 %2352, 5
  store i64 %2353, i64* %PC, align 8
  %2354 = inttoptr i64 %2351 to double*
  %2355 = load double, double* %2354, align 8
  store double %2355, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2356 = add i64 %2350, -120
  %2357 = add i64 %2352, 10
  store i64 %2357, i64* %PC, align 8
  %2358 = inttoptr i64 %2356 to double*
  %2359 = load double, double* %2358, align 8
  store double %2359, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %2360 = add i64 %2350, -128
  %2361 = add i64 %2352, 15
  store i64 %2361, i64* %PC, align 8
  %2362 = inttoptr i64 %2360 to double*
  %2363 = load double, double* %2362, align 8
  %2364 = fsub double %2359, %2363
  store double %2364, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %2365 = fmul double %2355, %2364
  store double %2365, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2366 = add i64 %2350, -16
  %2367 = add i64 %2352, 23
  store i64 %2367, i64* %PC, align 8
  %2368 = inttoptr i64 %2366 to i64*
  %2369 = load i64, i64* %2368, align 8
  store i64 %2369, i64* %RCX, align 8, !tbaa !2428
  %2370 = add i64 %2350, -32
  %2371 = add i64 %2352, 27
  store i64 %2371, i64* %PC, align 8
  %2372 = inttoptr i64 %2370 to i32*
  %2373 = load i32, i32* %2372, align 4
  %2374 = sext i32 %2373 to i64
  store i64 %2374, i64* %RDX, align 8, !tbaa !2428
  %2375 = shl nsw i64 %2374, 3
  %2376 = add i64 %2375, %2369
  %2377 = add i64 %2352, 32
  store i64 %2377, i64* %PC, align 8
  %2378 = inttoptr i64 %2376 to double*
  store double %2365, double* %2378, align 8
  %2379 = load i64, i64* %RBP, align 8
  %2380 = add i64 %2379, -72
  %2381 = load i64, i64* %PC, align 8
  %2382 = add i64 %2381, 5
  store i64 %2382, i64* %PC, align 8
  %2383 = inttoptr i64 %2380 to double*
  %2384 = load double, double* %2383, align 8
  store double %2384, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2385 = add i64 %2379, -120
  %2386 = add i64 %2381, 10
  store i64 %2386, i64* %PC, align 8
  %2387 = inttoptr i64 %2385 to double*
  %2388 = load double, double* %2387, align 8
  store double %2388, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %2389 = add i64 %2379, -128
  %2390 = add i64 %2381, 15
  store i64 %2390, i64* %PC, align 8
  %2391 = inttoptr i64 %2389 to double*
  %2392 = load double, double* %2391, align 8
  %2393 = fadd double %2388, %2392
  store double %2393, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %2394 = fmul double %2384, %2393
  store double %2394, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2395 = add i64 %2379, -16
  %2396 = add i64 %2381, 23
  store i64 %2396, i64* %PC, align 8
  %2397 = inttoptr i64 %2395 to i64*
  %2398 = load i64, i64* %2397, align 8
  store i64 %2398, i64* %RCX, align 8, !tbaa !2428
  %2399 = add i64 %2379, -32
  %2400 = add i64 %2381, 26
  store i64 %2400, i64* %PC, align 8
  %2401 = inttoptr i64 %2399 to i32*
  %2402 = load i32, i32* %2401, align 4
  %2403 = add i32 %2402, 1
  %2404 = zext i32 %2403 to i64
  store i64 %2404, i64* %RAX, align 8, !tbaa !2428
  %2405 = icmp eq i32 %2402, -1
  %2406 = icmp eq i32 %2403, 0
  %2407 = or i1 %2405, %2406
  %2408 = zext i1 %2407 to i8
  store i8 %2408, i8* %17, align 1, !tbaa !2433
  %2409 = and i32 %2403, 255
  %2410 = tail call i32 @llvm.ctpop.i32(i32 %2409) #11
  %2411 = trunc i32 %2410 to i8
  %2412 = and i8 %2411, 1
  %2413 = xor i8 %2412, 1
  store i8 %2413, i8* %24, align 1, !tbaa !2447
  %2414 = xor i32 %2402, %2403
  %2415 = lshr i32 %2414, 4
  %2416 = trunc i32 %2415 to i8
  %2417 = and i8 %2416, 1
  store i8 %2417, i8* %30, align 1, !tbaa !2451
  %2418 = zext i1 %2406 to i8
  store i8 %2418, i8* %33, align 1, !tbaa !2448
  %2419 = lshr i32 %2403, 31
  %2420 = trunc i32 %2419 to i8
  store i8 %2420, i8* %36, align 1, !tbaa !2449
  %2421 = lshr i32 %2402, 31
  %2422 = xor i32 %2419, %2421
  %2423 = add nuw nsw i32 %2422, %2419
  %2424 = icmp eq i32 %2423, 2
  %2425 = zext i1 %2424 to i8
  store i8 %2425, i8* %42, align 1, !tbaa !2450
  %2426 = sext i32 %2403 to i64
  store i64 %2426, i64* %RDX, align 8, !tbaa !2428
  %2427 = shl nsw i64 %2426, 3
  %2428 = add i64 %2427, %2398
  %2429 = add i64 %2381, 37
  store i64 %2429, i64* %PC, align 8
  %2430 = inttoptr i64 %2428 to double*
  store double %2394, double* %2430, align 8
  %2431 = load i64, i64* %RBP, align 8
  %2432 = add i64 %2431, -176
  %2433 = load i64, i64* %PC, align 8
  %2434 = add i64 %2433, 8
  store i64 %2434, i64* %PC, align 8
  %2435 = inttoptr i64 %2432 to double*
  %2436 = load double, double* %2435, align 8
  store double %2436, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2437 = add i64 %2431, -136
  %2438 = add i64 %2433, 16
  store i64 %2438, i64* %PC, align 8
  %2439 = inttoptr i64 %2437 to double*
  %2440 = load double, double* %2439, align 8
  %2441 = fadd double %2436, %2440
  store double %2441, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2442 = add i64 %2431, -120
  %2443 = add i64 %2433, 21
  store i64 %2443, i64* %PC, align 8
  %2444 = inttoptr i64 %2442 to double*
  store double %2441, double* %2444, align 8
  %2445 = load i64, i64* %RBP, align 8
  %2446 = add i64 %2445, -168
  %2447 = load i64, i64* %PC, align 8
  %2448 = add i64 %2447, 8
  store i64 %2448, i64* %PC, align 8
  %2449 = inttoptr i64 %2446 to double*
  %2450 = load double, double* %2449, align 8
  store double %2450, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2451 = add i64 %2445, -144
  %2452 = add i64 %2447, 16
  store i64 %2452, i64* %PC, align 8
  %2453 = inttoptr i64 %2451 to double*
  %2454 = load double, double* %2453, align 8
  %2455 = fsub double %2450, %2454
  store double %2455, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2456 = add i64 %2445, -128
  %2457 = add i64 %2447, 21
  store i64 %2457, i64* %PC, align 8
  %2458 = inttoptr i64 %2456 to double*
  store double %2455, double* %2458, align 8
  %2459 = load i64, i64* %RBP, align 8
  %2460 = add i64 %2459, -72
  %2461 = load i64, i64* %PC, align 8
  %2462 = add i64 %2461, 5
  store i64 %2462, i64* %PC, align 8
  %2463 = inttoptr i64 %2460 to double*
  %2464 = load double, double* %2463, align 8
  store double %2464, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2465 = add i64 %2459, -128
  %2466 = add i64 %2461, 10
  store i64 %2466, i64* %PC, align 8
  %2467 = inttoptr i64 %2465 to double*
  %2468 = load double, double* %2467, align 8
  store double %2468, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %2469 = add i64 %2459, -120
  %2470 = add i64 %2461, 15
  store i64 %2470, i64* %PC, align 8
  %2471 = inttoptr i64 %2469 to double*
  %2472 = load double, double* %2471, align 8
  %2473 = fsub double %2468, %2472
  store double %2473, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %2474 = fmul double %2464, %2473
  store double %2474, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2475 = add i64 %2459, -16
  %2476 = add i64 %2461, 23
  store i64 %2476, i64* %PC, align 8
  %2477 = inttoptr i64 %2475 to i64*
  %2478 = load i64, i64* %2477, align 8
  store i64 %2478, i64* %RCX, align 8, !tbaa !2428
  %2479 = add i64 %2459, -40
  %2480 = add i64 %2461, 27
  store i64 %2480, i64* %PC, align 8
  %2481 = inttoptr i64 %2479 to i32*
  %2482 = load i32, i32* %2481, align 4
  %2483 = sext i32 %2482 to i64
  store i64 %2483, i64* %RDX, align 8, !tbaa !2428
  %2484 = shl nsw i64 %2483, 3
  %2485 = add i64 %2484, %2478
  %2486 = add i64 %2461, 32
  store i64 %2486, i64* %PC, align 8
  %2487 = inttoptr i64 %2485 to double*
  store double %2474, double* %2487, align 8
  %2488 = load i64, i64* %RBP, align 8
  %2489 = add i64 %2488, -72
  %2490 = load i64, i64* %PC, align 8
  %2491 = add i64 %2490, 5
  store i64 %2491, i64* %PC, align 8
  %2492 = inttoptr i64 %2489 to double*
  %2493 = load double, double* %2492, align 8
  store double %2493, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2494 = add i64 %2488, -128
  %2495 = add i64 %2490, 10
  store i64 %2495, i64* %PC, align 8
  %2496 = inttoptr i64 %2494 to double*
  %2497 = load double, double* %2496, align 8
  store double %2497, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %2498 = add i64 %2488, -120
  %2499 = add i64 %2490, 15
  store i64 %2499, i64* %PC, align 8
  %2500 = inttoptr i64 %2498 to double*
  %2501 = load double, double* %2500, align 8
  %2502 = fadd double %2497, %2501
  store double %2502, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %2503 = fmul double %2493, %2502
  store double %2503, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2504 = add i64 %2488, -16
  %2505 = add i64 %2490, 23
  store i64 %2505, i64* %PC, align 8
  %2506 = inttoptr i64 %2504 to i64*
  %2507 = load i64, i64* %2506, align 8
  store i64 %2507, i64* %RCX, align 8, !tbaa !2428
  %2508 = add i64 %2488, -40
  %2509 = add i64 %2490, 26
  store i64 %2509, i64* %PC, align 8
  %2510 = inttoptr i64 %2508 to i32*
  %2511 = load i32, i32* %2510, align 4
  %2512 = add i32 %2511, 1
  %2513 = zext i32 %2512 to i64
  store i64 %2513, i64* %RAX, align 8, !tbaa !2428
  %2514 = icmp eq i32 %2511, -1
  %2515 = icmp eq i32 %2512, 0
  %2516 = or i1 %2514, %2515
  %2517 = zext i1 %2516 to i8
  store i8 %2517, i8* %17, align 1, !tbaa !2433
  %2518 = and i32 %2512, 255
  %2519 = tail call i32 @llvm.ctpop.i32(i32 %2518) #11
  %2520 = trunc i32 %2519 to i8
  %2521 = and i8 %2520, 1
  %2522 = xor i8 %2521, 1
  store i8 %2522, i8* %24, align 1, !tbaa !2447
  %2523 = xor i32 %2511, %2512
  %2524 = lshr i32 %2523, 4
  %2525 = trunc i32 %2524 to i8
  %2526 = and i8 %2525, 1
  store i8 %2526, i8* %30, align 1, !tbaa !2451
  %2527 = zext i1 %2515 to i8
  store i8 %2527, i8* %33, align 1, !tbaa !2448
  %2528 = lshr i32 %2512, 31
  %2529 = trunc i32 %2528 to i8
  store i8 %2529, i8* %36, align 1, !tbaa !2449
  %2530 = lshr i32 %2511, 31
  %2531 = xor i32 %2528, %2530
  %2532 = add nuw nsw i32 %2531, %2528
  %2533 = icmp eq i32 %2532, 2
  %2534 = zext i1 %2533 to i8
  store i8 %2534, i8* %42, align 1, !tbaa !2450
  %2535 = sext i32 %2512 to i64
  store i64 %2535, i64* %RDX, align 8, !tbaa !2428
  %2536 = shl nsw i64 %2535, 3
  %2537 = add i64 %2536, %2507
  %2538 = add i64 %2490, 37
  store i64 %2538, i64* %PC, align 8
  %2539 = inttoptr i64 %2537 to double*
  store double %2503, double* %2539, align 8
  %2540 = load i64, i64* %RBP, align 8
  %2541 = add i64 %2540, -28
  %2542 = load i64, i64* %PC, align 8
  %2543 = add i64 %2542, 3
  store i64 %2543, i64* %PC, align 8
  %2544 = inttoptr i64 %2541 to i32*
  %2545 = load i32, i32* %2544, align 4
  %2546 = add i32 %2545, 2
  %2547 = zext i32 %2546 to i64
  store i64 %2547, i64* %RAX, align 8, !tbaa !2428
  %2548 = icmp ugt i32 %2545, -3
  %2549 = zext i1 %2548 to i8
  store i8 %2549, i8* %17, align 1, !tbaa !2433
  %2550 = and i32 %2546, 255
  %2551 = tail call i32 @llvm.ctpop.i32(i32 %2550) #11
  %2552 = trunc i32 %2551 to i8
  %2553 = and i8 %2552, 1
  %2554 = xor i8 %2553, 1
  store i8 %2554, i8* %24, align 1, !tbaa !2447
  %2555 = xor i32 %2545, %2546
  %2556 = lshr i32 %2555, 4
  %2557 = trunc i32 %2556 to i8
  %2558 = and i8 %2557, 1
  store i8 %2558, i8* %30, align 1, !tbaa !2451
  %2559 = icmp eq i32 %2546, 0
  %2560 = zext i1 %2559 to i8
  store i8 %2560, i8* %33, align 1, !tbaa !2448
  %2561 = lshr i32 %2546, 31
  %2562 = trunc i32 %2561 to i8
  store i8 %2562, i8* %36, align 1, !tbaa !2449
  %2563 = lshr i32 %2545, 31
  %2564 = xor i32 %2561, %2563
  %2565 = add nuw nsw i32 %2564, %2561
  %2566 = icmp eq i32 %2565, 2
  %2567 = zext i1 %2566 to i8
  store i8 %2567, i8* %42, align 1, !tbaa !2450
  %2568 = add i64 %2542, 9
  store i64 %2568, i64* %PC, align 8
  store i32 %2546, i32* %2544, align 4
  %2569 = load i64, i64* %PC, align 8
  %2570 = add i64 %2569, -695
  store i64 %2570, i64* %PC, align 8, !tbaa !2428
  br label %block_403591

block_403591:                                     ; preds = %block_4035a2, %block_40357d
  %2571 = phi i64 [ %2570, %block_4035a2 ], [ %.pre3, %block_40357d ]
  %2572 = load i64, i64* %RBP, align 8
  %2573 = add i64 %2572, -28
  %2574 = add i64 %2571, 3
  store i64 %2574, i64* %PC, align 8
  %2575 = inttoptr i64 %2573 to i32*
  %2576 = load i32, i32* %2575, align 4
  %2577 = zext i32 %2576 to i64
  store i64 %2577, i64* %RAX, align 8, !tbaa !2428
  %2578 = add i64 %2572, -8
  %2579 = add i64 %2571, 6
  store i64 %2579, i64* %PC, align 8
  %2580 = inttoptr i64 %2578 to i32*
  %2581 = load i32, i32* %2580, align 4
  %2582 = zext i32 %2581 to i64
  store i64 %2582, i64* %RCX, align 8, !tbaa !2428
  %2583 = add i64 %2572, -56
  %2584 = add i64 %2571, 9
  store i64 %2584, i64* %PC, align 8
  %2585 = inttoptr i64 %2583 to i32*
  %2586 = load i32, i32* %2585, align 4
  %2587 = add i32 %2586, %2581
  %2588 = zext i32 %2587 to i64
  store i64 %2588, i64* %RCX, align 8, !tbaa !2428
  %2589 = lshr i32 %2587, 31
  %2590 = sub i32 %2576, %2587
  %2591 = icmp ult i32 %2576, %2587
  %2592 = zext i1 %2591 to i8
  store i8 %2592, i8* %17, align 1, !tbaa !2433
  %2593 = and i32 %2590, 255
  %2594 = tail call i32 @llvm.ctpop.i32(i32 %2593) #11
  %2595 = trunc i32 %2594 to i8
  %2596 = and i8 %2595, 1
  %2597 = xor i8 %2596, 1
  store i8 %2597, i8* %24, align 1, !tbaa !2447
  %2598 = xor i32 %2587, %2576
  %2599 = xor i32 %2598, %2590
  %2600 = lshr i32 %2599, 4
  %2601 = trunc i32 %2600 to i8
  %2602 = and i8 %2601, 1
  store i8 %2602, i8* %30, align 1, !tbaa !2451
  %2603 = icmp eq i32 %2590, 0
  %2604 = zext i1 %2603 to i8
  store i8 %2604, i8* %33, align 1, !tbaa !2448
  %2605 = lshr i32 %2590, 31
  %2606 = trunc i32 %2605 to i8
  store i8 %2606, i8* %36, align 1, !tbaa !2449
  %2607 = lshr i32 %2576, 31
  %2608 = xor i32 %2589, %2607
  %2609 = xor i32 %2605, %2607
  %2610 = add nuw nsw i32 %2609, %2608
  %2611 = icmp eq i32 %2610, 2
  %2612 = zext i1 %2611 to i8
  store i8 %2612, i8* %42, align 1, !tbaa !2450
  %2613 = icmp ne i8 %2606, 0
  %2614 = xor i1 %2613, %2611
  %.v7 = select i1 %2614, i64 17, i64 700
  %2615 = add i64 %2571, %.v7
  store i64 %2615, i64* %PC, align 8, !tbaa !2428
  br i1 %2614, label %block_4035a2, label %block_40384d

block_403863:                                     ; preds = %block_403fcb, %block_40384d
  %2616 = phi i64 [ %1521, %block_403fcb ], [ %.pre4, %block_40384d ]
  %2617 = load i64, i64* %RBP, align 8
  %2618 = add i64 %2617, -44
  %2619 = add i64 %2616, 3
  store i64 %2619, i64* %PC, align 8
  %2620 = inttoptr i64 %2618 to i32*
  %2621 = load i32, i32* %2620, align 4
  %2622 = zext i32 %2621 to i64
  store i64 %2622, i64* %RAX, align 8, !tbaa !2428
  %2623 = add i64 %2617, -4
  %2624 = add i64 %2616, 6
  store i64 %2624, i64* %PC, align 8
  %2625 = inttoptr i64 %2623 to i32*
  %2626 = load i32, i32* %2625, align 4
  %2627 = sub i32 %2621, %2626
  %2628 = icmp ult i32 %2621, %2626
  %2629 = zext i1 %2628 to i8
  store i8 %2629, i8* %17, align 1, !tbaa !2433
  %2630 = and i32 %2627, 255
  %2631 = tail call i32 @llvm.ctpop.i32(i32 %2630) #11
  %2632 = trunc i32 %2631 to i8
  %2633 = and i8 %2632, 1
  %2634 = xor i8 %2633, 1
  store i8 %2634, i8* %24, align 1, !tbaa !2447
  %2635 = xor i32 %2626, %2621
  %2636 = xor i32 %2635, %2627
  %2637 = lshr i32 %2636, 4
  %2638 = trunc i32 %2637 to i8
  %2639 = and i8 %2638, 1
  store i8 %2639, i8* %30, align 1, !tbaa !2451
  %2640 = icmp eq i32 %2627, 0
  %2641 = zext i1 %2640 to i8
  store i8 %2641, i8* %33, align 1, !tbaa !2448
  %2642 = lshr i32 %2627, 31
  %2643 = trunc i32 %2642 to i8
  store i8 %2643, i8* %36, align 1, !tbaa !2449
  %2644 = lshr i32 %2621, 31
  %2645 = lshr i32 %2626, 31
  %2646 = xor i32 %2645, %2644
  %2647 = xor i32 %2642, %2644
  %2648 = add nuw nsw i32 %2647, %2646
  %2649 = icmp eq i32 %2648, 2
  %2650 = zext i1 %2649 to i8
  store i8 %2650, i8* %42, align 1, !tbaa !2450
  %2651 = icmp ne i8 %2643, 0
  %2652 = xor i1 %2651, %2649
  %.v8 = select i1 %2652, i64 12, i64 1915
  %2653 = add i64 %2616, %.v8
  store i64 %2653, i64* %PC, align 8, !tbaa !2428
  br i1 %2652, label %block_40386f, label %block_403fde

block_403921:                                     ; preds = %block_403910
  %2654 = add i64 %1618, 3
  store i64 %2654, i64* %PC, align 8
  %2655 = load i32, i32* %1578, align 4
  %2656 = zext i32 %2655 to i64
  store i64 %2656, i64* %RAX, align 8, !tbaa !2428
  %2657 = add i64 %1618, 6
  store i64 %2657, i64* %PC, align 8
  %2658 = load i32, i32* %1583, align 4
  %2659 = add i32 %2658, %2655
  %2660 = zext i32 %2659 to i64
  store i64 %2660, i64* %RAX, align 8, !tbaa !2428
  %2661 = icmp ult i32 %2659, %2655
  %2662 = icmp ult i32 %2659, %2658
  %2663 = or i1 %2661, %2662
  %2664 = zext i1 %2663 to i8
  store i8 %2664, i8* %17, align 1, !tbaa !2433
  %2665 = and i32 %2659, 255
  %2666 = tail call i32 @llvm.ctpop.i32(i32 %2665) #11
  %2667 = trunc i32 %2666 to i8
  %2668 = and i8 %2667, 1
  %2669 = xor i8 %2668, 1
  store i8 %2669, i8* %24, align 1, !tbaa !2447
  %2670 = xor i32 %2658, %2655
  %2671 = xor i32 %2670, %2659
  %2672 = lshr i32 %2671, 4
  %2673 = trunc i32 %2672 to i8
  %2674 = and i8 %2673, 1
  store i8 %2674, i8* %30, align 1, !tbaa !2451
  %2675 = icmp eq i32 %2659, 0
  %2676 = zext i1 %2675 to i8
  store i8 %2676, i8* %33, align 1, !tbaa !2448
  %2677 = lshr i32 %2659, 31
  %2678 = trunc i32 %2677 to i8
  store i8 %2678, i8* %36, align 1, !tbaa !2449
  %2679 = lshr i32 %2655, 31
  %2680 = lshr i32 %2658, 31
  %2681 = xor i32 %2677, %2679
  %2682 = xor i32 %2677, %2680
  %2683 = add nuw nsw i32 %2681, %2682
  %2684 = icmp eq i32 %2683, 2
  %2685 = zext i1 %2684 to i8
  store i8 %2685, i8* %42, align 1, !tbaa !2450
  %2686 = add i64 %1575, -32
  %2687 = add i64 %1618, 9
  store i64 %2687, i64* %PC, align 8
  %2688 = inttoptr i64 %2686 to i32*
  store i32 %2659, i32* %2688, align 4
  %2689 = load i64, i64* %RBP, align 8
  %2690 = add i64 %2689, -32
  %2691 = load i64, i64* %PC, align 8
  %2692 = add i64 %2691, 3
  store i64 %2692, i64* %PC, align 8
  %2693 = inttoptr i64 %2690 to i32*
  %2694 = load i32, i32* %2693, align 4
  %2695 = zext i32 %2694 to i64
  store i64 %2695, i64* %RAX, align 8, !tbaa !2428
  %2696 = add i64 %2689, -8
  %2697 = add i64 %2691, 6
  store i64 %2697, i64* %PC, align 8
  %2698 = inttoptr i64 %2696 to i32*
  %2699 = load i32, i32* %2698, align 4
  %2700 = add i32 %2699, %2694
  %2701 = zext i32 %2700 to i64
  store i64 %2701, i64* %RAX, align 8, !tbaa !2428
  %2702 = icmp ult i32 %2700, %2694
  %2703 = icmp ult i32 %2700, %2699
  %2704 = or i1 %2702, %2703
  %2705 = zext i1 %2704 to i8
  store i8 %2705, i8* %17, align 1, !tbaa !2433
  %2706 = and i32 %2700, 255
  %2707 = tail call i32 @llvm.ctpop.i32(i32 %2706) #11
  %2708 = trunc i32 %2707 to i8
  %2709 = and i8 %2708, 1
  %2710 = xor i8 %2709, 1
  store i8 %2710, i8* %24, align 1, !tbaa !2447
  %2711 = xor i32 %2699, %2694
  %2712 = xor i32 %2711, %2700
  %2713 = lshr i32 %2712, 4
  %2714 = trunc i32 %2713 to i8
  %2715 = and i8 %2714, 1
  store i8 %2715, i8* %30, align 1, !tbaa !2451
  %2716 = icmp eq i32 %2700, 0
  %2717 = zext i1 %2716 to i8
  store i8 %2717, i8* %33, align 1, !tbaa !2448
  %2718 = lshr i32 %2700, 31
  %2719 = trunc i32 %2718 to i8
  store i8 %2719, i8* %36, align 1, !tbaa !2449
  %2720 = lshr i32 %2694, 31
  %2721 = lshr i32 %2699, 31
  %2722 = xor i32 %2718, %2720
  %2723 = xor i32 %2718, %2721
  %2724 = add nuw nsw i32 %2722, %2723
  %2725 = icmp eq i32 %2724, 2
  %2726 = zext i1 %2725 to i8
  store i8 %2726, i8* %42, align 1, !tbaa !2450
  %2727 = add i64 %2689, -36
  %2728 = add i64 %2691, 9
  store i64 %2728, i64* %PC, align 8
  %2729 = inttoptr i64 %2727 to i32*
  store i32 %2700, i32* %2729, align 4
  %2730 = load i64, i64* %RBP, align 8
  %2731 = add i64 %2730, -36
  %2732 = load i64, i64* %PC, align 8
  %2733 = add i64 %2732, 3
  store i64 %2733, i64* %PC, align 8
  %2734 = inttoptr i64 %2731 to i32*
  %2735 = load i32, i32* %2734, align 4
  %2736 = zext i32 %2735 to i64
  store i64 %2736, i64* %RAX, align 8, !tbaa !2428
  %2737 = add i64 %2730, -8
  %2738 = add i64 %2732, 6
  store i64 %2738, i64* %PC, align 8
  %2739 = inttoptr i64 %2737 to i32*
  %2740 = load i32, i32* %2739, align 4
  %2741 = add i32 %2740, %2735
  %2742 = zext i32 %2741 to i64
  store i64 %2742, i64* %RAX, align 8, !tbaa !2428
  %2743 = icmp ult i32 %2741, %2735
  %2744 = icmp ult i32 %2741, %2740
  %2745 = or i1 %2743, %2744
  %2746 = zext i1 %2745 to i8
  store i8 %2746, i8* %17, align 1, !tbaa !2433
  %2747 = and i32 %2741, 255
  %2748 = tail call i32 @llvm.ctpop.i32(i32 %2747) #11
  %2749 = trunc i32 %2748 to i8
  %2750 = and i8 %2749, 1
  %2751 = xor i8 %2750, 1
  store i8 %2751, i8* %24, align 1, !tbaa !2447
  %2752 = xor i32 %2740, %2735
  %2753 = xor i32 %2752, %2741
  %2754 = lshr i32 %2753, 4
  %2755 = trunc i32 %2754 to i8
  %2756 = and i8 %2755, 1
  store i8 %2756, i8* %30, align 1, !tbaa !2451
  %2757 = icmp eq i32 %2741, 0
  %2758 = zext i1 %2757 to i8
  store i8 %2758, i8* %33, align 1, !tbaa !2448
  %2759 = lshr i32 %2741, 31
  %2760 = trunc i32 %2759 to i8
  store i8 %2760, i8* %36, align 1, !tbaa !2449
  %2761 = lshr i32 %2735, 31
  %2762 = lshr i32 %2740, 31
  %2763 = xor i32 %2759, %2761
  %2764 = xor i32 %2759, %2762
  %2765 = add nuw nsw i32 %2763, %2764
  %2766 = icmp eq i32 %2765, 2
  %2767 = zext i1 %2766 to i8
  store i8 %2767, i8* %42, align 1, !tbaa !2450
  %2768 = add i64 %2730, -40
  %2769 = add i64 %2732, 9
  store i64 %2769, i64* %PC, align 8
  %2770 = inttoptr i64 %2768 to i32*
  store i32 %2741, i32* %2770, align 4
  %2771 = load i64, i64* %RBP, align 8
  %2772 = add i64 %2771, -16
  %2773 = load i64, i64* %PC, align 8
  %2774 = add i64 %2773, 4
  store i64 %2774, i64* %PC, align 8
  %2775 = inttoptr i64 %2772 to i64*
  %2776 = load i64, i64* %2775, align 8
  store i64 %2776, i64* %RCX, align 8, !tbaa !2428
  %2777 = add i64 %2771, -28
  %2778 = add i64 %2773, 8
  store i64 %2778, i64* %PC, align 8
  %2779 = inttoptr i64 %2777 to i32*
  %2780 = load i32, i32* %2779, align 4
  %2781 = sext i32 %2780 to i64
  store i64 %2781, i64* %RDX, align 8, !tbaa !2428
  %2782 = shl nsw i64 %2781, 3
  %2783 = add i64 %2782, %2776
  %2784 = add i64 %2773, 13
  store i64 %2784, i64* %PC, align 8
  %2785 = inttoptr i64 %2783 to double*
  %2786 = load double, double* %2785, align 8
  store double %2786, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2787 = add i64 %2773, 17
  store i64 %2787, i64* %PC, align 8
  %2788 = load i64, i64* %2775, align 8
  store i64 %2788, i64* %RCX, align 8, !tbaa !2428
  %2789 = add i64 %2771, -32
  %2790 = add i64 %2773, 21
  store i64 %2790, i64* %PC, align 8
  %2791 = inttoptr i64 %2789 to i32*
  %2792 = load i32, i32* %2791, align 4
  %2793 = sext i32 %2792 to i64
  store i64 %2793, i64* %RDX, align 8, !tbaa !2428
  %2794 = shl nsw i64 %2793, 3
  %2795 = add i64 %2794, %2788
  %2796 = add i64 %2773, 26
  store i64 %2796, i64* %PC, align 8
  %2797 = inttoptr i64 %2795 to double*
  %2798 = load double, double* %2797, align 8
  %2799 = fadd double %2786, %2798
  store double %2799, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2800 = add i64 %2771, -120
  %2801 = add i64 %2773, 31
  store i64 %2801, i64* %PC, align 8
  %2802 = inttoptr i64 %2800 to double*
  store double %2799, double* %2802, align 8
  %2803 = load i64, i64* %RBP, align 8
  %2804 = add i64 %2803, -16
  %2805 = load i64, i64* %PC, align 8
  %2806 = add i64 %2805, 4
  store i64 %2806, i64* %PC, align 8
  %2807 = inttoptr i64 %2804 to i64*
  %2808 = load i64, i64* %2807, align 8
  store i64 %2808, i64* %RCX, align 8, !tbaa !2428
  %2809 = add i64 %2803, -28
  %2810 = add i64 %2805, 7
  store i64 %2810, i64* %PC, align 8
  %2811 = inttoptr i64 %2809 to i32*
  %2812 = load i32, i32* %2811, align 4
  %2813 = add i32 %2812, 1
  %2814 = zext i32 %2813 to i64
  store i64 %2814, i64* %RAX, align 8, !tbaa !2428
  %2815 = icmp eq i32 %2812, -1
  %2816 = icmp eq i32 %2813, 0
  %2817 = or i1 %2815, %2816
  %2818 = zext i1 %2817 to i8
  store i8 %2818, i8* %17, align 1, !tbaa !2433
  %2819 = and i32 %2813, 255
  %2820 = tail call i32 @llvm.ctpop.i32(i32 %2819) #11
  %2821 = trunc i32 %2820 to i8
  %2822 = and i8 %2821, 1
  %2823 = xor i8 %2822, 1
  store i8 %2823, i8* %24, align 1, !tbaa !2447
  %2824 = xor i32 %2812, %2813
  %2825 = lshr i32 %2824, 4
  %2826 = trunc i32 %2825 to i8
  %2827 = and i8 %2826, 1
  store i8 %2827, i8* %30, align 1, !tbaa !2451
  %2828 = zext i1 %2816 to i8
  store i8 %2828, i8* %33, align 1, !tbaa !2448
  %2829 = lshr i32 %2813, 31
  %2830 = trunc i32 %2829 to i8
  store i8 %2830, i8* %36, align 1, !tbaa !2449
  %2831 = lshr i32 %2812, 31
  %2832 = xor i32 %2829, %2831
  %2833 = add nuw nsw i32 %2832, %2829
  %2834 = icmp eq i32 %2833, 2
  %2835 = zext i1 %2834 to i8
  store i8 %2835, i8* %42, align 1, !tbaa !2450
  %2836 = sext i32 %2813 to i64
  store i64 %2836, i64* %RDX, align 8, !tbaa !2428
  %2837 = shl nsw i64 %2836, 3
  %2838 = add i64 %2837, %2808
  %2839 = add i64 %2805, 18
  store i64 %2839, i64* %PC, align 8
  %2840 = inttoptr i64 %2838 to double*
  %2841 = load double, double* %2840, align 8
  store double %2841, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2842 = add i64 %2805, 22
  store i64 %2842, i64* %PC, align 8
  %2843 = load i64, i64* %2807, align 8
  store i64 %2843, i64* %RCX, align 8, !tbaa !2428
  %2844 = add i64 %2803, -32
  %2845 = add i64 %2805, 25
  store i64 %2845, i64* %PC, align 8
  %2846 = inttoptr i64 %2844 to i32*
  %2847 = load i32, i32* %2846, align 4
  %2848 = add i32 %2847, 1
  %2849 = zext i32 %2848 to i64
  store i64 %2849, i64* %RAX, align 8, !tbaa !2428
  %2850 = icmp eq i32 %2847, -1
  %2851 = icmp eq i32 %2848, 0
  %2852 = or i1 %2850, %2851
  %2853 = zext i1 %2852 to i8
  store i8 %2853, i8* %17, align 1, !tbaa !2433
  %2854 = and i32 %2848, 255
  %2855 = tail call i32 @llvm.ctpop.i32(i32 %2854) #11
  %2856 = trunc i32 %2855 to i8
  %2857 = and i8 %2856, 1
  %2858 = xor i8 %2857, 1
  store i8 %2858, i8* %24, align 1, !tbaa !2447
  %2859 = xor i32 %2847, %2848
  %2860 = lshr i32 %2859, 4
  %2861 = trunc i32 %2860 to i8
  %2862 = and i8 %2861, 1
  store i8 %2862, i8* %30, align 1, !tbaa !2451
  %2863 = zext i1 %2851 to i8
  store i8 %2863, i8* %33, align 1, !tbaa !2448
  %2864 = lshr i32 %2848, 31
  %2865 = trunc i32 %2864 to i8
  store i8 %2865, i8* %36, align 1, !tbaa !2449
  %2866 = lshr i32 %2847, 31
  %2867 = xor i32 %2864, %2866
  %2868 = add nuw nsw i32 %2867, %2864
  %2869 = icmp eq i32 %2868, 2
  %2870 = zext i1 %2869 to i8
  store i8 %2870, i8* %42, align 1, !tbaa !2450
  %2871 = sext i32 %2848 to i64
  store i64 %2871, i64* %RDX, align 8, !tbaa !2428
  %2872 = shl nsw i64 %2871, 3
  %2873 = add i64 %2872, %2843
  %2874 = add i64 %2805, 36
  store i64 %2874, i64* %PC, align 8
  %2875 = inttoptr i64 %2873 to double*
  %2876 = load double, double* %2875, align 8
  %2877 = fadd double %2841, %2876
  store double %2877, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2878 = load i64, i64* %RBP, align 8
  %2879 = add i64 %2878, -128
  %2880 = add i64 %2805, 41
  store i64 %2880, i64* %PC, align 8
  %2881 = inttoptr i64 %2879 to double*
  store double %2877, double* %2881, align 8
  %2882 = load i64, i64* %RBP, align 8
  %2883 = add i64 %2882, -16
  %2884 = load i64, i64* %PC, align 8
  %2885 = add i64 %2884, 4
  store i64 %2885, i64* %PC, align 8
  %2886 = inttoptr i64 %2883 to i64*
  %2887 = load i64, i64* %2886, align 8
  store i64 %2887, i64* %RCX, align 8, !tbaa !2428
  %2888 = add i64 %2882, -28
  %2889 = add i64 %2884, 8
  store i64 %2889, i64* %PC, align 8
  %2890 = inttoptr i64 %2888 to i32*
  %2891 = load i32, i32* %2890, align 4
  %2892 = sext i32 %2891 to i64
  store i64 %2892, i64* %RDX, align 8, !tbaa !2428
  %2893 = shl nsw i64 %2892, 3
  %2894 = add i64 %2893, %2887
  %2895 = add i64 %2884, 13
  store i64 %2895, i64* %PC, align 8
  %2896 = inttoptr i64 %2894 to double*
  %2897 = load double, double* %2896, align 8
  store double %2897, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2898 = add i64 %2884, 17
  store i64 %2898, i64* %PC, align 8
  %2899 = load i64, i64* %2886, align 8
  store i64 %2899, i64* %RCX, align 8, !tbaa !2428
  %2900 = add i64 %2882, -32
  %2901 = add i64 %2884, 21
  store i64 %2901, i64* %PC, align 8
  %2902 = inttoptr i64 %2900 to i32*
  %2903 = load i32, i32* %2902, align 4
  %2904 = sext i32 %2903 to i64
  store i64 %2904, i64* %RDX, align 8, !tbaa !2428
  %2905 = shl nsw i64 %2904, 3
  %2906 = add i64 %2905, %2899
  %2907 = add i64 %2884, 26
  store i64 %2907, i64* %PC, align 8
  %2908 = inttoptr i64 %2906 to double*
  %2909 = load double, double* %2908, align 8
  %2910 = fsub double %2897, %2909
  store double %2910, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2911 = add i64 %2882, -136
  %2912 = add i64 %2884, 34
  store i64 %2912, i64* %PC, align 8
  %2913 = inttoptr i64 %2911 to double*
  store double %2910, double* %2913, align 8
  %2914 = load i64, i64* %RBP, align 8
  %2915 = add i64 %2914, -16
  %2916 = load i64, i64* %PC, align 8
  %2917 = add i64 %2916, 4
  store i64 %2917, i64* %PC, align 8
  %2918 = inttoptr i64 %2915 to i64*
  %2919 = load i64, i64* %2918, align 8
  store i64 %2919, i64* %RCX, align 8, !tbaa !2428
  %2920 = add i64 %2914, -28
  %2921 = add i64 %2916, 7
  store i64 %2921, i64* %PC, align 8
  %2922 = inttoptr i64 %2920 to i32*
  %2923 = load i32, i32* %2922, align 4
  %2924 = add i32 %2923, 1
  %2925 = zext i32 %2924 to i64
  store i64 %2925, i64* %RAX, align 8, !tbaa !2428
  %2926 = icmp eq i32 %2923, -1
  %2927 = icmp eq i32 %2924, 0
  %2928 = or i1 %2926, %2927
  %2929 = zext i1 %2928 to i8
  store i8 %2929, i8* %17, align 1, !tbaa !2433
  %2930 = and i32 %2924, 255
  %2931 = tail call i32 @llvm.ctpop.i32(i32 %2930) #11
  %2932 = trunc i32 %2931 to i8
  %2933 = and i8 %2932, 1
  %2934 = xor i8 %2933, 1
  store i8 %2934, i8* %24, align 1, !tbaa !2447
  %2935 = xor i32 %2923, %2924
  %2936 = lshr i32 %2935, 4
  %2937 = trunc i32 %2936 to i8
  %2938 = and i8 %2937, 1
  store i8 %2938, i8* %30, align 1, !tbaa !2451
  %2939 = zext i1 %2927 to i8
  store i8 %2939, i8* %33, align 1, !tbaa !2448
  %2940 = lshr i32 %2924, 31
  %2941 = trunc i32 %2940 to i8
  store i8 %2941, i8* %36, align 1, !tbaa !2449
  %2942 = lshr i32 %2923, 31
  %2943 = xor i32 %2940, %2942
  %2944 = add nuw nsw i32 %2943, %2940
  %2945 = icmp eq i32 %2944, 2
  %2946 = zext i1 %2945 to i8
  store i8 %2946, i8* %42, align 1, !tbaa !2450
  %2947 = sext i32 %2924 to i64
  store i64 %2947, i64* %RDX, align 8, !tbaa !2428
  %2948 = shl nsw i64 %2947, 3
  %2949 = add i64 %2948, %2919
  %2950 = add i64 %2916, 18
  store i64 %2950, i64* %PC, align 8
  %2951 = inttoptr i64 %2949 to double*
  %2952 = load double, double* %2951, align 8
  store double %2952, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %2953 = add i64 %2916, 22
  store i64 %2953, i64* %PC, align 8
  %2954 = load i64, i64* %2918, align 8
  store i64 %2954, i64* %RCX, align 8, !tbaa !2428
  %2955 = add i64 %2914, -32
  %2956 = add i64 %2916, 25
  store i64 %2956, i64* %PC, align 8
  %2957 = inttoptr i64 %2955 to i32*
  %2958 = load i32, i32* %2957, align 4
  %2959 = add i32 %2958, 1
  %2960 = zext i32 %2959 to i64
  store i64 %2960, i64* %RAX, align 8, !tbaa !2428
  %2961 = icmp eq i32 %2958, -1
  %2962 = icmp eq i32 %2959, 0
  %2963 = or i1 %2961, %2962
  %2964 = zext i1 %2963 to i8
  store i8 %2964, i8* %17, align 1, !tbaa !2433
  %2965 = and i32 %2959, 255
  %2966 = tail call i32 @llvm.ctpop.i32(i32 %2965) #11
  %2967 = trunc i32 %2966 to i8
  %2968 = and i8 %2967, 1
  %2969 = xor i8 %2968, 1
  store i8 %2969, i8* %24, align 1, !tbaa !2447
  %2970 = xor i32 %2958, %2959
  %2971 = lshr i32 %2970, 4
  %2972 = trunc i32 %2971 to i8
  %2973 = and i8 %2972, 1
  store i8 %2973, i8* %30, align 1, !tbaa !2451
  %2974 = zext i1 %2962 to i8
  store i8 %2974, i8* %33, align 1, !tbaa !2448
  %2975 = lshr i32 %2959, 31
  %2976 = trunc i32 %2975 to i8
  store i8 %2976, i8* %36, align 1, !tbaa !2449
  %2977 = lshr i32 %2958, 31
  %2978 = xor i32 %2975, %2977
  %2979 = add nuw nsw i32 %2978, %2975
  %2980 = icmp eq i32 %2979, 2
  %2981 = zext i1 %2980 to i8
  store i8 %2981, i8* %42, align 1, !tbaa !2450
  %2982 = sext i32 %2959 to i64
  store i64 %2982, i64* %RDX, align 8, !tbaa !2428
  %2983 = shl nsw i64 %2982, 3
  %2984 = add i64 %2983, %2954
  %2985 = add i64 %2916, 36
  store i64 %2985, i64* %PC, align 8
  %2986 = inttoptr i64 %2984 to double*
  %2987 = load double, double* %2986, align 8
  %2988 = fsub double %2952, %2987
  store double %2988, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %2989 = load i64, i64* %RBP, align 8
  %2990 = add i64 %2989, -144
  %2991 = add i64 %2916, 44
  store i64 %2991, i64* %PC, align 8
  %2992 = inttoptr i64 %2990 to double*
  store double %2988, double* %2992, align 8
  %2993 = load i64, i64* %RBP, align 8
  %2994 = add i64 %2993, -16
  %2995 = load i64, i64* %PC, align 8
  %2996 = add i64 %2995, 4
  store i64 %2996, i64* %PC, align 8
  %2997 = inttoptr i64 %2994 to i64*
  %2998 = load i64, i64* %2997, align 8
  store i64 %2998, i64* %RCX, align 8, !tbaa !2428
  %2999 = add i64 %2993, -36
  %3000 = add i64 %2995, 8
  store i64 %3000, i64* %PC, align 8
  %3001 = inttoptr i64 %2999 to i32*
  %3002 = load i32, i32* %3001, align 4
  %3003 = sext i32 %3002 to i64
  store i64 %3003, i64* %RDX, align 8, !tbaa !2428
  %3004 = shl nsw i64 %3003, 3
  %3005 = add i64 %3004, %2998
  %3006 = add i64 %2995, 13
  store i64 %3006, i64* %PC, align 8
  %3007 = inttoptr i64 %3005 to double*
  %3008 = load double, double* %3007, align 8
  store double %3008, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3009 = add i64 %2995, 17
  store i64 %3009, i64* %PC, align 8
  %3010 = load i64, i64* %2997, align 8
  store i64 %3010, i64* %RCX, align 8, !tbaa !2428
  %3011 = add i64 %2993, -40
  %3012 = add i64 %2995, 21
  store i64 %3012, i64* %PC, align 8
  %3013 = inttoptr i64 %3011 to i32*
  %3014 = load i32, i32* %3013, align 4
  %3015 = sext i32 %3014 to i64
  store i64 %3015, i64* %RDX, align 8, !tbaa !2428
  %3016 = shl nsw i64 %3015, 3
  %3017 = add i64 %3016, %3010
  %3018 = add i64 %2995, 26
  store i64 %3018, i64* %PC, align 8
  %3019 = inttoptr i64 %3017 to double*
  %3020 = load double, double* %3019, align 8
  %3021 = fadd double %3008, %3020
  store double %3021, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3022 = add i64 %2993, -152
  %3023 = add i64 %2995, 34
  store i64 %3023, i64* %PC, align 8
  %3024 = inttoptr i64 %3022 to double*
  store double %3021, double* %3024, align 8
  %3025 = load i64, i64* %RBP, align 8
  %3026 = add i64 %3025, -16
  %3027 = load i64, i64* %PC, align 8
  %3028 = add i64 %3027, 4
  store i64 %3028, i64* %PC, align 8
  %3029 = inttoptr i64 %3026 to i64*
  %3030 = load i64, i64* %3029, align 8
  store i64 %3030, i64* %RCX, align 8, !tbaa !2428
  %3031 = add i64 %3025, -36
  %3032 = add i64 %3027, 7
  store i64 %3032, i64* %PC, align 8
  %3033 = inttoptr i64 %3031 to i32*
  %3034 = load i32, i32* %3033, align 4
  %3035 = add i32 %3034, 1
  %3036 = zext i32 %3035 to i64
  store i64 %3036, i64* %RAX, align 8, !tbaa !2428
  %3037 = icmp eq i32 %3034, -1
  %3038 = icmp eq i32 %3035, 0
  %3039 = or i1 %3037, %3038
  %3040 = zext i1 %3039 to i8
  store i8 %3040, i8* %17, align 1, !tbaa !2433
  %3041 = and i32 %3035, 255
  %3042 = tail call i32 @llvm.ctpop.i32(i32 %3041) #11
  %3043 = trunc i32 %3042 to i8
  %3044 = and i8 %3043, 1
  %3045 = xor i8 %3044, 1
  store i8 %3045, i8* %24, align 1, !tbaa !2447
  %3046 = xor i32 %3034, %3035
  %3047 = lshr i32 %3046, 4
  %3048 = trunc i32 %3047 to i8
  %3049 = and i8 %3048, 1
  store i8 %3049, i8* %30, align 1, !tbaa !2451
  %3050 = zext i1 %3038 to i8
  store i8 %3050, i8* %33, align 1, !tbaa !2448
  %3051 = lshr i32 %3035, 31
  %3052 = trunc i32 %3051 to i8
  store i8 %3052, i8* %36, align 1, !tbaa !2449
  %3053 = lshr i32 %3034, 31
  %3054 = xor i32 %3051, %3053
  %3055 = add nuw nsw i32 %3054, %3051
  %3056 = icmp eq i32 %3055, 2
  %3057 = zext i1 %3056 to i8
  store i8 %3057, i8* %42, align 1, !tbaa !2450
  %3058 = sext i32 %3035 to i64
  store i64 %3058, i64* %RDX, align 8, !tbaa !2428
  %3059 = shl nsw i64 %3058, 3
  %3060 = add i64 %3059, %3030
  %3061 = add i64 %3027, 18
  store i64 %3061, i64* %PC, align 8
  %3062 = inttoptr i64 %3060 to double*
  %3063 = load double, double* %3062, align 8
  store double %3063, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3064 = add i64 %3027, 22
  store i64 %3064, i64* %PC, align 8
  %3065 = load i64, i64* %3029, align 8
  store i64 %3065, i64* %RCX, align 8, !tbaa !2428
  %3066 = add i64 %3025, -40
  %3067 = add i64 %3027, 25
  store i64 %3067, i64* %PC, align 8
  %3068 = inttoptr i64 %3066 to i32*
  %3069 = load i32, i32* %3068, align 4
  %3070 = add i32 %3069, 1
  %3071 = zext i32 %3070 to i64
  store i64 %3071, i64* %RAX, align 8, !tbaa !2428
  %3072 = icmp eq i32 %3069, -1
  %3073 = icmp eq i32 %3070, 0
  %3074 = or i1 %3072, %3073
  %3075 = zext i1 %3074 to i8
  store i8 %3075, i8* %17, align 1, !tbaa !2433
  %3076 = and i32 %3070, 255
  %3077 = tail call i32 @llvm.ctpop.i32(i32 %3076) #11
  %3078 = trunc i32 %3077 to i8
  %3079 = and i8 %3078, 1
  %3080 = xor i8 %3079, 1
  store i8 %3080, i8* %24, align 1, !tbaa !2447
  %3081 = xor i32 %3069, %3070
  %3082 = lshr i32 %3081, 4
  %3083 = trunc i32 %3082 to i8
  %3084 = and i8 %3083, 1
  store i8 %3084, i8* %30, align 1, !tbaa !2451
  %3085 = zext i1 %3073 to i8
  store i8 %3085, i8* %33, align 1, !tbaa !2448
  %3086 = lshr i32 %3070, 31
  %3087 = trunc i32 %3086 to i8
  store i8 %3087, i8* %36, align 1, !tbaa !2449
  %3088 = lshr i32 %3069, 31
  %3089 = xor i32 %3086, %3088
  %3090 = add nuw nsw i32 %3089, %3086
  %3091 = icmp eq i32 %3090, 2
  %3092 = zext i1 %3091 to i8
  store i8 %3092, i8* %42, align 1, !tbaa !2450
  %3093 = sext i32 %3070 to i64
  store i64 %3093, i64* %RDX, align 8, !tbaa !2428
  %3094 = shl nsw i64 %3093, 3
  %3095 = add i64 %3094, %3065
  %3096 = add i64 %3027, 36
  store i64 %3096, i64* %PC, align 8
  %3097 = inttoptr i64 %3095 to double*
  %3098 = load double, double* %3097, align 8
  %3099 = fadd double %3063, %3098
  store double %3099, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3100 = load i64, i64* %RBP, align 8
  %3101 = add i64 %3100, -160
  %3102 = add i64 %3027, 44
  store i64 %3102, i64* %PC, align 8
  %3103 = inttoptr i64 %3101 to double*
  store double %3099, double* %3103, align 8
  %3104 = load i64, i64* %RBP, align 8
  %3105 = add i64 %3104, -16
  %3106 = load i64, i64* %PC, align 8
  %3107 = add i64 %3106, 4
  store i64 %3107, i64* %PC, align 8
  %3108 = inttoptr i64 %3105 to i64*
  %3109 = load i64, i64* %3108, align 8
  store i64 %3109, i64* %RCX, align 8, !tbaa !2428
  %3110 = add i64 %3104, -36
  %3111 = add i64 %3106, 8
  store i64 %3111, i64* %PC, align 8
  %3112 = inttoptr i64 %3110 to i32*
  %3113 = load i32, i32* %3112, align 4
  %3114 = sext i32 %3113 to i64
  store i64 %3114, i64* %RDX, align 8, !tbaa !2428
  %3115 = shl nsw i64 %3114, 3
  %3116 = add i64 %3115, %3109
  %3117 = add i64 %3106, 13
  store i64 %3117, i64* %PC, align 8
  %3118 = inttoptr i64 %3116 to double*
  %3119 = load double, double* %3118, align 8
  store double %3119, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3120 = add i64 %3106, 17
  store i64 %3120, i64* %PC, align 8
  %3121 = load i64, i64* %3108, align 8
  store i64 %3121, i64* %RCX, align 8, !tbaa !2428
  %3122 = add i64 %3104, -40
  %3123 = add i64 %3106, 21
  store i64 %3123, i64* %PC, align 8
  %3124 = inttoptr i64 %3122 to i32*
  %3125 = load i32, i32* %3124, align 4
  %3126 = sext i32 %3125 to i64
  store i64 %3126, i64* %RDX, align 8, !tbaa !2428
  %3127 = shl nsw i64 %3126, 3
  %3128 = add i64 %3127, %3121
  %3129 = add i64 %3106, 26
  store i64 %3129, i64* %PC, align 8
  %3130 = inttoptr i64 %3128 to double*
  %3131 = load double, double* %3130, align 8
  %3132 = fsub double %3119, %3131
  store double %3132, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3133 = add i64 %3104, -168
  %3134 = add i64 %3106, 34
  store i64 %3134, i64* %PC, align 8
  %3135 = inttoptr i64 %3133 to double*
  store double %3132, double* %3135, align 8
  %3136 = load i64, i64* %RBP, align 8
  %3137 = add i64 %3136, -16
  %3138 = load i64, i64* %PC, align 8
  %3139 = add i64 %3138, 4
  store i64 %3139, i64* %PC, align 8
  %3140 = inttoptr i64 %3137 to i64*
  %3141 = load i64, i64* %3140, align 8
  store i64 %3141, i64* %RCX, align 8, !tbaa !2428
  %3142 = add i64 %3136, -36
  %3143 = add i64 %3138, 7
  store i64 %3143, i64* %PC, align 8
  %3144 = inttoptr i64 %3142 to i32*
  %3145 = load i32, i32* %3144, align 4
  %3146 = add i32 %3145, 1
  %3147 = zext i32 %3146 to i64
  store i64 %3147, i64* %RAX, align 8, !tbaa !2428
  %3148 = icmp eq i32 %3145, -1
  %3149 = icmp eq i32 %3146, 0
  %3150 = or i1 %3148, %3149
  %3151 = zext i1 %3150 to i8
  store i8 %3151, i8* %17, align 1, !tbaa !2433
  %3152 = and i32 %3146, 255
  %3153 = tail call i32 @llvm.ctpop.i32(i32 %3152) #11
  %3154 = trunc i32 %3153 to i8
  %3155 = and i8 %3154, 1
  %3156 = xor i8 %3155, 1
  store i8 %3156, i8* %24, align 1, !tbaa !2447
  %3157 = xor i32 %3145, %3146
  %3158 = lshr i32 %3157, 4
  %3159 = trunc i32 %3158 to i8
  %3160 = and i8 %3159, 1
  store i8 %3160, i8* %30, align 1, !tbaa !2451
  %3161 = zext i1 %3149 to i8
  store i8 %3161, i8* %33, align 1, !tbaa !2448
  %3162 = lshr i32 %3146, 31
  %3163 = trunc i32 %3162 to i8
  store i8 %3163, i8* %36, align 1, !tbaa !2449
  %3164 = lshr i32 %3145, 31
  %3165 = xor i32 %3162, %3164
  %3166 = add nuw nsw i32 %3165, %3162
  %3167 = icmp eq i32 %3166, 2
  %3168 = zext i1 %3167 to i8
  store i8 %3168, i8* %42, align 1, !tbaa !2450
  %3169 = sext i32 %3146 to i64
  store i64 %3169, i64* %RDX, align 8, !tbaa !2428
  %3170 = shl nsw i64 %3169, 3
  %3171 = add i64 %3170, %3141
  %3172 = add i64 %3138, 18
  store i64 %3172, i64* %PC, align 8
  %3173 = inttoptr i64 %3171 to double*
  %3174 = load double, double* %3173, align 8
  store double %3174, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3175 = add i64 %3138, 22
  store i64 %3175, i64* %PC, align 8
  %3176 = load i64, i64* %3140, align 8
  store i64 %3176, i64* %RCX, align 8, !tbaa !2428
  %3177 = add i64 %3136, -40
  %3178 = add i64 %3138, 25
  store i64 %3178, i64* %PC, align 8
  %3179 = inttoptr i64 %3177 to i32*
  %3180 = load i32, i32* %3179, align 4
  %3181 = add i32 %3180, 1
  %3182 = zext i32 %3181 to i64
  store i64 %3182, i64* %RAX, align 8, !tbaa !2428
  %3183 = icmp eq i32 %3180, -1
  %3184 = icmp eq i32 %3181, 0
  %3185 = or i1 %3183, %3184
  %3186 = zext i1 %3185 to i8
  store i8 %3186, i8* %17, align 1, !tbaa !2433
  %3187 = and i32 %3181, 255
  %3188 = tail call i32 @llvm.ctpop.i32(i32 %3187) #11
  %3189 = trunc i32 %3188 to i8
  %3190 = and i8 %3189, 1
  %3191 = xor i8 %3190, 1
  store i8 %3191, i8* %24, align 1, !tbaa !2447
  %3192 = xor i32 %3180, %3181
  %3193 = lshr i32 %3192, 4
  %3194 = trunc i32 %3193 to i8
  %3195 = and i8 %3194, 1
  store i8 %3195, i8* %30, align 1, !tbaa !2451
  %3196 = zext i1 %3184 to i8
  store i8 %3196, i8* %33, align 1, !tbaa !2448
  %3197 = lshr i32 %3181, 31
  %3198 = trunc i32 %3197 to i8
  store i8 %3198, i8* %36, align 1, !tbaa !2449
  %3199 = lshr i32 %3180, 31
  %3200 = xor i32 %3197, %3199
  %3201 = add nuw nsw i32 %3200, %3197
  %3202 = icmp eq i32 %3201, 2
  %3203 = zext i1 %3202 to i8
  store i8 %3203, i8* %42, align 1, !tbaa !2450
  %3204 = sext i32 %3181 to i64
  store i64 %3204, i64* %RDX, align 8, !tbaa !2428
  %3205 = shl nsw i64 %3204, 3
  %3206 = add i64 %3205, %3176
  %3207 = add i64 %3138, 36
  store i64 %3207, i64* %PC, align 8
  %3208 = inttoptr i64 %3206 to double*
  %3209 = load double, double* %3208, align 8
  %3210 = fsub double %3174, %3209
  store double %3210, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3211 = load i64, i64* %RBP, align 8
  %3212 = add i64 %3211, -176
  %3213 = add i64 %3138, 44
  store i64 %3213, i64* %PC, align 8
  %3214 = inttoptr i64 %3212 to double*
  store double %3210, double* %3214, align 8
  %3215 = load i64, i64* %RBP, align 8
  %3216 = add i64 %3215, -120
  %3217 = load i64, i64* %PC, align 8
  %3218 = add i64 %3217, 5
  store i64 %3218, i64* %PC, align 8
  %3219 = inttoptr i64 %3216 to double*
  %3220 = load double, double* %3219, align 8
  store double %3220, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3221 = add i64 %3215, -152
  %3222 = add i64 %3217, 13
  store i64 %3222, i64* %PC, align 8
  %3223 = inttoptr i64 %3221 to double*
  %3224 = load double, double* %3223, align 8
  %3225 = fadd double %3220, %3224
  store double %3225, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3226 = add i64 %3215, -16
  %3227 = add i64 %3217, 17
  store i64 %3227, i64* %PC, align 8
  %3228 = inttoptr i64 %3226 to i64*
  %3229 = load i64, i64* %3228, align 8
  store i64 %3229, i64* %RCX, align 8, !tbaa !2428
  %3230 = add i64 %3215, -28
  %3231 = add i64 %3217, 21
  store i64 %3231, i64* %PC, align 8
  %3232 = inttoptr i64 %3230 to i32*
  %3233 = load i32, i32* %3232, align 4
  %3234 = sext i32 %3233 to i64
  store i64 %3234, i64* %RDX, align 8, !tbaa !2428
  %3235 = shl nsw i64 %3234, 3
  %3236 = add i64 %3235, %3229
  %3237 = add i64 %3217, 26
  store i64 %3237, i64* %PC, align 8
  %3238 = inttoptr i64 %3236 to double*
  store double %3225, double* %3238, align 8
  %3239 = load i64, i64* %RBP, align 8
  %3240 = add i64 %3239, -128
  %3241 = load i64, i64* %PC, align 8
  %3242 = add i64 %3241, 5
  store i64 %3242, i64* %PC, align 8
  %3243 = inttoptr i64 %3240 to double*
  %3244 = load double, double* %3243, align 8
  store double %3244, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3245 = add i64 %3239, -160
  %3246 = add i64 %3241, 13
  store i64 %3246, i64* %PC, align 8
  %3247 = inttoptr i64 %3245 to double*
  %3248 = load double, double* %3247, align 8
  %3249 = fadd double %3244, %3248
  store double %3249, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3250 = add i64 %3239, -16
  %3251 = add i64 %3241, 17
  store i64 %3251, i64* %PC, align 8
  %3252 = inttoptr i64 %3250 to i64*
  %3253 = load i64, i64* %3252, align 8
  store i64 %3253, i64* %RCX, align 8, !tbaa !2428
  %3254 = add i64 %3239, -28
  %3255 = add i64 %3241, 20
  store i64 %3255, i64* %PC, align 8
  %3256 = inttoptr i64 %3254 to i32*
  %3257 = load i32, i32* %3256, align 4
  %3258 = add i32 %3257, 1
  %3259 = zext i32 %3258 to i64
  store i64 %3259, i64* %RAX, align 8, !tbaa !2428
  %3260 = icmp eq i32 %3257, -1
  %3261 = icmp eq i32 %3258, 0
  %3262 = or i1 %3260, %3261
  %3263 = zext i1 %3262 to i8
  store i8 %3263, i8* %17, align 1, !tbaa !2433
  %3264 = and i32 %3258, 255
  %3265 = tail call i32 @llvm.ctpop.i32(i32 %3264) #11
  %3266 = trunc i32 %3265 to i8
  %3267 = and i8 %3266, 1
  %3268 = xor i8 %3267, 1
  store i8 %3268, i8* %24, align 1, !tbaa !2447
  %3269 = xor i32 %3257, %3258
  %3270 = lshr i32 %3269, 4
  %3271 = trunc i32 %3270 to i8
  %3272 = and i8 %3271, 1
  store i8 %3272, i8* %30, align 1, !tbaa !2451
  %3273 = zext i1 %3261 to i8
  store i8 %3273, i8* %33, align 1, !tbaa !2448
  %3274 = lshr i32 %3258, 31
  %3275 = trunc i32 %3274 to i8
  store i8 %3275, i8* %36, align 1, !tbaa !2449
  %3276 = lshr i32 %3257, 31
  %3277 = xor i32 %3274, %3276
  %3278 = add nuw nsw i32 %3277, %3274
  %3279 = icmp eq i32 %3278, 2
  %3280 = zext i1 %3279 to i8
  store i8 %3280, i8* %42, align 1, !tbaa !2450
  %3281 = sext i32 %3258 to i64
  store i64 %3281, i64* %RDX, align 8, !tbaa !2428
  %3282 = shl nsw i64 %3281, 3
  %3283 = add i64 %3282, %3253
  %3284 = add i64 %3241, 31
  store i64 %3284, i64* %PC, align 8
  %3285 = inttoptr i64 %3283 to double*
  store double %3249, double* %3285, align 8
  %3286 = load i64, i64* %RBP, align 8
  %3287 = add i64 %3286, -152
  %3288 = load i64, i64* %PC, align 8
  %3289 = add i64 %3288, 8
  store i64 %3289, i64* %PC, align 8
  %3290 = inttoptr i64 %3287 to double*
  %3291 = load double, double* %3290, align 8
  store double %3291, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3292 = add i64 %3286, -120
  %3293 = add i64 %3288, 13
  store i64 %3293, i64* %PC, align 8
  %3294 = inttoptr i64 %3292 to double*
  %3295 = load double, double* %3294, align 8
  %3296 = fsub double %3295, %3291
  store double %3296, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %3297 = add i64 %3288, 22
  store i64 %3297, i64* %PC, align 8
  store double %3296, double* %3294, align 8
  %3298 = load i64, i64* %RBP, align 8
  %3299 = add i64 %3298, -160
  %3300 = load i64, i64* %PC, align 8
  %3301 = add i64 %3300, 8
  store i64 %3301, i64* %PC, align 8
  %3302 = inttoptr i64 %3299 to double*
  %3303 = load double, double* %3302, align 8
  store double %3303, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3304 = add i64 %3298, -128
  %3305 = add i64 %3300, 13
  store i64 %3305, i64* %PC, align 8
  %3306 = inttoptr i64 %3304 to double*
  %3307 = load double, double* %3306, align 8
  %3308 = fsub double %3307, %3303
  store double %3308, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %3309 = add i64 %3300, 22
  store i64 %3309, i64* %PC, align 8
  store double %3308, double* %3306, align 8
  %3310 = load i64, i64* %RBP, align 8
  %3311 = add i64 %3310, -88
  %3312 = load i64, i64* %PC, align 8
  %3313 = add i64 %3312, 5
  store i64 %3313, i64* %PC, align 8
  %3314 = inttoptr i64 %3311 to double*
  %3315 = load double, double* %3314, align 8
  store double %3315, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3316 = add i64 %3310, -120
  %3317 = add i64 %3312, 10
  store i64 %3317, i64* %PC, align 8
  %3318 = inttoptr i64 %3316 to double*
  %3319 = load double, double* %3318, align 8
  %3320 = fmul double %3315, %3319
  store double %3320, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3321 = add i64 %3310, -96
  %3322 = add i64 %3312, 15
  store i64 %3322, i64* %PC, align 8
  %3323 = inttoptr i64 %3321 to double*
  %3324 = load double, double* %3323, align 8
  store double %3324, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %3325 = add i64 %3310, -128
  %3326 = add i64 %3312, 20
  store i64 %3326, i64* %PC, align 8
  %3327 = inttoptr i64 %3325 to double*
  %3328 = load double, double* %3327, align 8
  %3329 = fmul double %3324, %3328
  store double %3329, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %3330 = fsub double %3320, %3329
  store double %3330, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3331 = add i64 %3310, -16
  %3332 = add i64 %3312, 28
  store i64 %3332, i64* %PC, align 8
  %3333 = inttoptr i64 %3331 to i64*
  %3334 = load i64, i64* %3333, align 8
  store i64 %3334, i64* %RCX, align 8, !tbaa !2428
  %3335 = add i64 %3310, -36
  %3336 = add i64 %3312, 32
  store i64 %3336, i64* %PC, align 8
  %3337 = inttoptr i64 %3335 to i32*
  %3338 = load i32, i32* %3337, align 4
  %3339 = sext i32 %3338 to i64
  store i64 %3339, i64* %RDX, align 8, !tbaa !2428
  %3340 = shl nsw i64 %3339, 3
  %3341 = add i64 %3340, %3334
  %3342 = add i64 %3312, 37
  store i64 %3342, i64* %PC, align 8
  %3343 = inttoptr i64 %3341 to double*
  store double %3330, double* %3343, align 8
  %3344 = load i64, i64* %RBP, align 8
  %3345 = add i64 %3344, -88
  %3346 = load i64, i64* %PC, align 8
  %3347 = add i64 %3346, 5
  store i64 %3347, i64* %PC, align 8
  %3348 = inttoptr i64 %3345 to double*
  %3349 = load double, double* %3348, align 8
  store double %3349, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3350 = add i64 %3344, -128
  %3351 = add i64 %3346, 10
  store i64 %3351, i64* %PC, align 8
  %3352 = inttoptr i64 %3350 to double*
  %3353 = load double, double* %3352, align 8
  %3354 = fmul double %3349, %3353
  store double %3354, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3355 = add i64 %3344, -96
  %3356 = add i64 %3346, 15
  store i64 %3356, i64* %PC, align 8
  %3357 = inttoptr i64 %3355 to double*
  %3358 = load double, double* %3357, align 8
  store double %3358, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %3359 = add i64 %3344, -120
  %3360 = add i64 %3346, 20
  store i64 %3360, i64* %PC, align 8
  %3361 = inttoptr i64 %3359 to double*
  %3362 = load double, double* %3361, align 8
  %3363 = fmul double %3358, %3362
  store double %3363, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %3364 = fadd double %3354, %3363
  store double %3364, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3365 = add i64 %3344, -16
  %3366 = add i64 %3346, 28
  store i64 %3366, i64* %PC, align 8
  %3367 = inttoptr i64 %3365 to i64*
  %3368 = load i64, i64* %3367, align 8
  store i64 %3368, i64* %RCX, align 8, !tbaa !2428
  %3369 = add i64 %3344, -36
  %3370 = add i64 %3346, 31
  store i64 %3370, i64* %PC, align 8
  %3371 = inttoptr i64 %3369 to i32*
  %3372 = load i32, i32* %3371, align 4
  %3373 = add i32 %3372, 1
  %3374 = zext i32 %3373 to i64
  store i64 %3374, i64* %RAX, align 8, !tbaa !2428
  %3375 = icmp eq i32 %3372, -1
  %3376 = icmp eq i32 %3373, 0
  %3377 = or i1 %3375, %3376
  %3378 = zext i1 %3377 to i8
  store i8 %3378, i8* %17, align 1, !tbaa !2433
  %3379 = and i32 %3373, 255
  %3380 = tail call i32 @llvm.ctpop.i32(i32 %3379) #11
  %3381 = trunc i32 %3380 to i8
  %3382 = and i8 %3381, 1
  %3383 = xor i8 %3382, 1
  store i8 %3383, i8* %24, align 1, !tbaa !2447
  %3384 = xor i32 %3372, %3373
  %3385 = lshr i32 %3384, 4
  %3386 = trunc i32 %3385 to i8
  %3387 = and i8 %3386, 1
  store i8 %3387, i8* %30, align 1, !tbaa !2451
  %3388 = zext i1 %3376 to i8
  store i8 %3388, i8* %33, align 1, !tbaa !2448
  %3389 = lshr i32 %3373, 31
  %3390 = trunc i32 %3389 to i8
  store i8 %3390, i8* %36, align 1, !tbaa !2449
  %3391 = lshr i32 %3372, 31
  %3392 = xor i32 %3389, %3391
  %3393 = add nuw nsw i32 %3392, %3389
  %3394 = icmp eq i32 %3393, 2
  %3395 = zext i1 %3394 to i8
  store i8 %3395, i8* %42, align 1, !tbaa !2450
  %3396 = sext i32 %3373 to i64
  store i64 %3396, i64* %RDX, align 8, !tbaa !2428
  %3397 = shl nsw i64 %3396, 3
  %3398 = add i64 %3397, %3368
  %3399 = add i64 %3346, 42
  store i64 %3399, i64* %PC, align 8
  %3400 = inttoptr i64 %3398 to double*
  store double %3364, double* %3400, align 8
  %3401 = load i64, i64* %RBP, align 8
  %3402 = add i64 %3401, -136
  %3403 = load i64, i64* %PC, align 8
  %3404 = add i64 %3403, 8
  store i64 %3404, i64* %PC, align 8
  %3405 = inttoptr i64 %3402 to double*
  %3406 = load double, double* %3405, align 8
  store double %3406, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3407 = add i64 %3401, -176
  %3408 = add i64 %3403, 16
  store i64 %3408, i64* %PC, align 8
  %3409 = inttoptr i64 %3407 to double*
  %3410 = load double, double* %3409, align 8
  %3411 = fsub double %3406, %3410
  store double %3411, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3412 = add i64 %3401, -120
  %3413 = add i64 %3403, 21
  store i64 %3413, i64* %PC, align 8
  %3414 = inttoptr i64 %3412 to double*
  store double %3411, double* %3414, align 8
  %3415 = load i64, i64* %RBP, align 8
  %3416 = add i64 %3415, -144
  %3417 = load i64, i64* %PC, align 8
  %3418 = add i64 %3417, 8
  store i64 %3418, i64* %PC, align 8
  %3419 = inttoptr i64 %3416 to double*
  %3420 = load double, double* %3419, align 8
  store double %3420, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3421 = add i64 %3415, -168
  %3422 = add i64 %3417, 16
  store i64 %3422, i64* %PC, align 8
  %3423 = inttoptr i64 %3421 to double*
  %3424 = load double, double* %3423, align 8
  %3425 = fadd double %3420, %3424
  store double %3425, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3426 = add i64 %3415, -128
  %3427 = add i64 %3417, 21
  store i64 %3427, i64* %PC, align 8
  %3428 = inttoptr i64 %3426 to double*
  store double %3425, double* %3428, align 8
  %3429 = load i64, i64* %RBP, align 8
  %3430 = add i64 %3429, -72
  %3431 = load i64, i64* %PC, align 8
  %3432 = add i64 %3431, 5
  store i64 %3432, i64* %PC, align 8
  %3433 = inttoptr i64 %3430 to double*
  %3434 = load double, double* %3433, align 8
  store double %3434, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3435 = add i64 %3429, -120
  %3436 = add i64 %3431, 10
  store i64 %3436, i64* %PC, align 8
  %3437 = inttoptr i64 %3435 to double*
  %3438 = load double, double* %3437, align 8
  %3439 = fmul double %3434, %3438
  store double %3439, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3440 = add i64 %3429, -80
  %3441 = add i64 %3431, 15
  store i64 %3441, i64* %PC, align 8
  %3442 = inttoptr i64 %3440 to double*
  %3443 = load double, double* %3442, align 8
  store double %3443, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %3444 = add i64 %3429, -128
  %3445 = add i64 %3431, 20
  store i64 %3445, i64* %PC, align 8
  %3446 = inttoptr i64 %3444 to double*
  %3447 = load double, double* %3446, align 8
  %3448 = fmul double %3443, %3447
  store double %3448, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %3449 = fsub double %3439, %3448
  store double %3449, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3450 = add i64 %3429, -16
  %3451 = add i64 %3431, 28
  store i64 %3451, i64* %PC, align 8
  %3452 = inttoptr i64 %3450 to i64*
  %3453 = load i64, i64* %3452, align 8
  store i64 %3453, i64* %RCX, align 8, !tbaa !2428
  %3454 = add i64 %3429, -32
  %3455 = add i64 %3431, 32
  store i64 %3455, i64* %PC, align 8
  %3456 = inttoptr i64 %3454 to i32*
  %3457 = load i32, i32* %3456, align 4
  %3458 = sext i32 %3457 to i64
  store i64 %3458, i64* %RDX, align 8, !tbaa !2428
  %3459 = shl nsw i64 %3458, 3
  %3460 = add i64 %3459, %3453
  %3461 = add i64 %3431, 37
  store i64 %3461, i64* %PC, align 8
  %3462 = inttoptr i64 %3460 to double*
  store double %3449, double* %3462, align 8
  %3463 = load i64, i64* %RBP, align 8
  %3464 = add i64 %3463, -72
  %3465 = load i64, i64* %PC, align 8
  %3466 = add i64 %3465, 5
  store i64 %3466, i64* %PC, align 8
  %3467 = inttoptr i64 %3464 to double*
  %3468 = load double, double* %3467, align 8
  store double %3468, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3469 = add i64 %3463, -128
  %3470 = add i64 %3465, 10
  store i64 %3470, i64* %PC, align 8
  %3471 = inttoptr i64 %3469 to double*
  %3472 = load double, double* %3471, align 8
  %3473 = fmul double %3468, %3472
  store double %3473, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3474 = add i64 %3463, -80
  %3475 = add i64 %3465, 15
  store i64 %3475, i64* %PC, align 8
  %3476 = inttoptr i64 %3474 to double*
  %3477 = load double, double* %3476, align 8
  store double %3477, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %3478 = add i64 %3463, -120
  %3479 = add i64 %3465, 20
  store i64 %3479, i64* %PC, align 8
  %3480 = inttoptr i64 %3478 to double*
  %3481 = load double, double* %3480, align 8
  %3482 = fmul double %3477, %3481
  store double %3482, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %3483 = fadd double %3473, %3482
  store double %3483, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3484 = add i64 %3463, -16
  %3485 = add i64 %3465, 28
  store i64 %3485, i64* %PC, align 8
  %3486 = inttoptr i64 %3484 to i64*
  %3487 = load i64, i64* %3486, align 8
  store i64 %3487, i64* %RCX, align 8, !tbaa !2428
  %3488 = add i64 %3463, -32
  %3489 = add i64 %3465, 31
  store i64 %3489, i64* %PC, align 8
  %3490 = inttoptr i64 %3488 to i32*
  %3491 = load i32, i32* %3490, align 4
  %3492 = add i32 %3491, 1
  %3493 = zext i32 %3492 to i64
  store i64 %3493, i64* %RAX, align 8, !tbaa !2428
  %3494 = icmp eq i32 %3491, -1
  %3495 = icmp eq i32 %3492, 0
  %3496 = or i1 %3494, %3495
  %3497 = zext i1 %3496 to i8
  store i8 %3497, i8* %17, align 1, !tbaa !2433
  %3498 = and i32 %3492, 255
  %3499 = tail call i32 @llvm.ctpop.i32(i32 %3498) #11
  %3500 = trunc i32 %3499 to i8
  %3501 = and i8 %3500, 1
  %3502 = xor i8 %3501, 1
  store i8 %3502, i8* %24, align 1, !tbaa !2447
  %3503 = xor i32 %3491, %3492
  %3504 = lshr i32 %3503, 4
  %3505 = trunc i32 %3504 to i8
  %3506 = and i8 %3505, 1
  store i8 %3506, i8* %30, align 1, !tbaa !2451
  %3507 = zext i1 %3495 to i8
  store i8 %3507, i8* %33, align 1, !tbaa !2448
  %3508 = lshr i32 %3492, 31
  %3509 = trunc i32 %3508 to i8
  store i8 %3509, i8* %36, align 1, !tbaa !2449
  %3510 = lshr i32 %3491, 31
  %3511 = xor i32 %3508, %3510
  %3512 = add nuw nsw i32 %3511, %3508
  %3513 = icmp eq i32 %3512, 2
  %3514 = zext i1 %3513 to i8
  store i8 %3514, i8* %42, align 1, !tbaa !2450
  %3515 = sext i32 %3492 to i64
  store i64 %3515, i64* %RDX, align 8, !tbaa !2428
  %3516 = shl nsw i64 %3515, 3
  %3517 = add i64 %3516, %3487
  %3518 = add i64 %3465, 42
  store i64 %3518, i64* %PC, align 8
  %3519 = inttoptr i64 %3517 to double*
  store double %3483, double* %3519, align 8
  %3520 = load i64, i64* %RBP, align 8
  %3521 = add i64 %3520, -136
  %3522 = load i64, i64* %PC, align 8
  %3523 = add i64 %3522, 8
  store i64 %3523, i64* %PC, align 8
  %3524 = inttoptr i64 %3521 to double*
  %3525 = load double, double* %3524, align 8
  store double %3525, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3526 = add i64 %3520, -176
  %3527 = add i64 %3522, 16
  store i64 %3527, i64* %PC, align 8
  %3528 = inttoptr i64 %3526 to double*
  %3529 = load double, double* %3528, align 8
  %3530 = fadd double %3525, %3529
  store double %3530, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3531 = add i64 %3520, -120
  %3532 = add i64 %3522, 21
  store i64 %3532, i64* %PC, align 8
  %3533 = inttoptr i64 %3531 to double*
  store double %3530, double* %3533, align 8
  %3534 = load i64, i64* %RBP, align 8
  %3535 = add i64 %3534, -144
  %3536 = load i64, i64* %PC, align 8
  %3537 = add i64 %3536, 8
  store i64 %3537, i64* %PC, align 8
  %3538 = inttoptr i64 %3535 to double*
  %3539 = load double, double* %3538, align 8
  store double %3539, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3540 = add i64 %3534, -168
  %3541 = add i64 %3536, 16
  store i64 %3541, i64* %PC, align 8
  %3542 = inttoptr i64 %3540 to double*
  %3543 = load double, double* %3542, align 8
  %3544 = fsub double %3539, %3543
  store double %3544, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3545 = add i64 %3534, -128
  %3546 = add i64 %3536, 21
  store i64 %3546, i64* %PC, align 8
  %3547 = inttoptr i64 %3545 to double*
  store double %3544, double* %3547, align 8
  %3548 = load i64, i64* %RBP, align 8
  %3549 = add i64 %3548, -104
  %3550 = load i64, i64* %PC, align 8
  %3551 = add i64 %3550, 5
  store i64 %3551, i64* %PC, align 8
  %3552 = inttoptr i64 %3549 to double*
  %3553 = load double, double* %3552, align 8
  store double %3553, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3554 = add i64 %3548, -120
  %3555 = add i64 %3550, 10
  store i64 %3555, i64* %PC, align 8
  %3556 = inttoptr i64 %3554 to double*
  %3557 = load double, double* %3556, align 8
  %3558 = fmul double %3553, %3557
  store double %3558, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3559 = add i64 %3548, -112
  %3560 = add i64 %3550, 15
  store i64 %3560, i64* %PC, align 8
  %3561 = inttoptr i64 %3559 to double*
  %3562 = load double, double* %3561, align 8
  store double %3562, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %3563 = add i64 %3548, -128
  %3564 = add i64 %3550, 20
  store i64 %3564, i64* %PC, align 8
  %3565 = inttoptr i64 %3563 to double*
  %3566 = load double, double* %3565, align 8
  %3567 = fmul double %3562, %3566
  store double %3567, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %3568 = fsub double %3558, %3567
  store double %3568, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3569 = add i64 %3548, -16
  %3570 = add i64 %3550, 28
  store i64 %3570, i64* %PC, align 8
  %3571 = inttoptr i64 %3569 to i64*
  %3572 = load i64, i64* %3571, align 8
  store i64 %3572, i64* %RCX, align 8, !tbaa !2428
  %3573 = add i64 %3548, -40
  %3574 = add i64 %3550, 32
  store i64 %3574, i64* %PC, align 8
  %3575 = inttoptr i64 %3573 to i32*
  %3576 = load i32, i32* %3575, align 4
  %3577 = sext i32 %3576 to i64
  store i64 %3577, i64* %RDX, align 8, !tbaa !2428
  %3578 = shl nsw i64 %3577, 3
  %3579 = add i64 %3578, %3572
  %3580 = add i64 %3550, 37
  store i64 %3580, i64* %PC, align 8
  %3581 = inttoptr i64 %3579 to double*
  store double %3568, double* %3581, align 8
  %3582 = load i64, i64* %RBP, align 8
  %3583 = add i64 %3582, -104
  %3584 = load i64, i64* %PC, align 8
  %3585 = add i64 %3584, 5
  store i64 %3585, i64* %PC, align 8
  %3586 = inttoptr i64 %3583 to double*
  %3587 = load double, double* %3586, align 8
  store double %3587, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3588 = add i64 %3582, -128
  %3589 = add i64 %3584, 10
  store i64 %3589, i64* %PC, align 8
  %3590 = inttoptr i64 %3588 to double*
  %3591 = load double, double* %3590, align 8
  %3592 = fmul double %3587, %3591
  store double %3592, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3593 = add i64 %3582, -112
  %3594 = add i64 %3584, 15
  store i64 %3594, i64* %PC, align 8
  %3595 = inttoptr i64 %3593 to double*
  %3596 = load double, double* %3595, align 8
  store double %3596, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %3597 = add i64 %3582, -120
  %3598 = add i64 %3584, 20
  store i64 %3598, i64* %PC, align 8
  %3599 = inttoptr i64 %3597 to double*
  %3600 = load double, double* %3599, align 8
  %3601 = fmul double %3596, %3600
  store double %3601, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %3602 = fadd double %3592, %3601
  store double %3602, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3603 = add i64 %3582, -16
  %3604 = add i64 %3584, 28
  store i64 %3604, i64* %PC, align 8
  %3605 = inttoptr i64 %3603 to i64*
  %3606 = load i64, i64* %3605, align 8
  store i64 %3606, i64* %RCX, align 8, !tbaa !2428
  %3607 = add i64 %3582, -40
  %3608 = add i64 %3584, 31
  store i64 %3608, i64* %PC, align 8
  %3609 = inttoptr i64 %3607 to i32*
  %3610 = load i32, i32* %3609, align 4
  %3611 = add i32 %3610, 1
  %3612 = zext i32 %3611 to i64
  store i64 %3612, i64* %RAX, align 8, !tbaa !2428
  %3613 = icmp eq i32 %3610, -1
  %3614 = icmp eq i32 %3611, 0
  %3615 = or i1 %3613, %3614
  %3616 = zext i1 %3615 to i8
  store i8 %3616, i8* %17, align 1, !tbaa !2433
  %3617 = and i32 %3611, 255
  %3618 = tail call i32 @llvm.ctpop.i32(i32 %3617) #11
  %3619 = trunc i32 %3618 to i8
  %3620 = and i8 %3619, 1
  %3621 = xor i8 %3620, 1
  store i8 %3621, i8* %24, align 1, !tbaa !2447
  %3622 = xor i32 %3610, %3611
  %3623 = lshr i32 %3622, 4
  %3624 = trunc i32 %3623 to i8
  %3625 = and i8 %3624, 1
  store i8 %3625, i8* %30, align 1, !tbaa !2451
  %3626 = zext i1 %3614 to i8
  store i8 %3626, i8* %33, align 1, !tbaa !2448
  %3627 = lshr i32 %3611, 31
  %3628 = trunc i32 %3627 to i8
  store i8 %3628, i8* %36, align 1, !tbaa !2449
  %3629 = lshr i32 %3610, 31
  %3630 = xor i32 %3627, %3629
  %3631 = add nuw nsw i32 %3630, %3627
  %3632 = icmp eq i32 %3631, 2
  %3633 = zext i1 %3632 to i8
  store i8 %3633, i8* %42, align 1, !tbaa !2450
  %3634 = sext i32 %3611 to i64
  store i64 %3634, i64* %RDX, align 8, !tbaa !2428
  %3635 = shl nsw i64 %3634, 3
  %3636 = add i64 %3635, %3606
  %3637 = add i64 %3584, 42
  store i64 %3637, i64* %PC, align 8
  %3638 = inttoptr i64 %3636 to double*
  store double %3602, double* %3638, align 8
  %3639 = load i64, i64* %RBP, align 8
  %3640 = add i64 %3639, -28
  %3641 = load i64, i64* %PC, align 8
  %3642 = add i64 %3641, 3
  store i64 %3642, i64* %PC, align 8
  %3643 = inttoptr i64 %3640 to i32*
  %3644 = load i32, i32* %3643, align 4
  %3645 = add i32 %3644, 2
  %3646 = zext i32 %3645 to i64
  store i64 %3646, i64* %RAX, align 8, !tbaa !2428
  %3647 = icmp ugt i32 %3644, -3
  %3648 = zext i1 %3647 to i8
  store i8 %3648, i8* %17, align 1, !tbaa !2433
  %3649 = and i32 %3645, 255
  %3650 = tail call i32 @llvm.ctpop.i32(i32 %3649) #11
  %3651 = trunc i32 %3650 to i8
  %3652 = and i8 %3651, 1
  %3653 = xor i8 %3652, 1
  store i8 %3653, i8* %24, align 1, !tbaa !2447
  %3654 = xor i32 %3644, %3645
  %3655 = lshr i32 %3654, 4
  %3656 = trunc i32 %3655 to i8
  %3657 = and i8 %3656, 1
  store i8 %3657, i8* %30, align 1, !tbaa !2451
  %3658 = icmp eq i32 %3645, 0
  %3659 = zext i1 %3658 to i8
  store i8 %3659, i8* %33, align 1, !tbaa !2448
  %3660 = lshr i32 %3645, 31
  %3661 = trunc i32 %3660 to i8
  store i8 %3661, i8* %36, align 1, !tbaa !2449
  %3662 = lshr i32 %3644, 31
  %3663 = xor i32 %3660, %3662
  %3664 = add nuw nsw i32 %3663, %3660
  %3665 = icmp eq i32 %3664, 2
  %3666 = zext i1 %3665 to i8
  store i8 %3666, i8* %42, align 1, !tbaa !2450
  %3667 = add i64 %3641, 9
  store i64 %3667, i64* %PC, align 8
  store i32 %3645, i32* %3643, align 4
  %3668 = load i64, i64* %PC, align 8
  %3669 = add i64 %3668, -781
  store i64 %3669, i64* %PC, align 8, !tbaa !2428
  br label %block_403910

block_403ca6:                                     ; preds = %block_403c90
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %3670 = add i64 %1573, 13
  store i64 %3670, i64* %PC, align 8
  %3671 = load i32, i32* %1526, align 4
  %3672 = zext i32 %3671 to i64
  store i64 %3672, i64* %RCX, align 8, !tbaa !2428
  %3673 = add i64 %1573, 16
  store i64 %3673, i64* %PC, align 8
  %3674 = load i32, i32* %1531, align 4
  %3675 = add i32 %3674, %3671
  %3676 = zext i32 %3675 to i64
  store i64 %3676, i64* %RCX, align 8, !tbaa !2428
  %3677 = icmp ult i32 %3675, %3671
  %3678 = icmp ult i32 %3675, %3674
  %3679 = or i1 %3677, %3678
  %3680 = zext i1 %3679 to i8
  store i8 %3680, i8* %17, align 1, !tbaa !2433
  %3681 = and i32 %3675, 255
  %3682 = tail call i32 @llvm.ctpop.i32(i32 %3681) #11
  %3683 = trunc i32 %3682 to i8
  %3684 = and i8 %3683, 1
  %3685 = xor i8 %3684, 1
  store i8 %3685, i8* %24, align 1, !tbaa !2447
  %3686 = xor i32 %3674, %3671
  %3687 = xor i32 %3686, %3675
  %3688 = lshr i32 %3687, 4
  %3689 = trunc i32 %3688 to i8
  %3690 = and i8 %3689, 1
  store i8 %3690, i8* %30, align 1, !tbaa !2451
  %3691 = icmp eq i32 %3675, 0
  %3692 = zext i1 %3691 to i8
  store i8 %3692, i8* %33, align 1, !tbaa !2448
  %3693 = lshr i32 %3675, 31
  %3694 = trunc i32 %3693 to i8
  store i8 %3694, i8* %36, align 1, !tbaa !2449
  %3695 = lshr i32 %3671, 31
  %3696 = lshr i32 %3674, 31
  %3697 = xor i32 %3693, %3695
  %3698 = xor i32 %3693, %3696
  %3699 = add nuw nsw i32 %3697, %3698
  %3700 = icmp eq i32 %3699, 2
  %3701 = zext i1 %3700 to i8
  store i8 %3701, i8* %42, align 1, !tbaa !2450
  %3702 = add i64 %1523, -32
  %3703 = add i64 %1573, 19
  store i64 %3703, i64* %PC, align 8
  %3704 = inttoptr i64 %3702 to i32*
  store i32 %3675, i32* %3704, align 4
  %3705 = load i64, i64* %RBP, align 8
  %3706 = add i64 %3705, -32
  %3707 = load i64, i64* %PC, align 8
  %3708 = add i64 %3707, 3
  store i64 %3708, i64* %PC, align 8
  %3709 = inttoptr i64 %3706 to i32*
  %3710 = load i32, i32* %3709, align 4
  %3711 = zext i32 %3710 to i64
  store i64 %3711, i64* %RCX, align 8, !tbaa !2428
  %3712 = add i64 %3705, -8
  %3713 = add i64 %3707, 6
  store i64 %3713, i64* %PC, align 8
  %3714 = inttoptr i64 %3712 to i32*
  %3715 = load i32, i32* %3714, align 4
  %3716 = add i32 %3715, %3710
  %3717 = zext i32 %3716 to i64
  store i64 %3717, i64* %RCX, align 8, !tbaa !2428
  %3718 = icmp ult i32 %3716, %3710
  %3719 = icmp ult i32 %3716, %3715
  %3720 = or i1 %3718, %3719
  %3721 = zext i1 %3720 to i8
  store i8 %3721, i8* %17, align 1, !tbaa !2433
  %3722 = and i32 %3716, 255
  %3723 = tail call i32 @llvm.ctpop.i32(i32 %3722) #11
  %3724 = trunc i32 %3723 to i8
  %3725 = and i8 %3724, 1
  %3726 = xor i8 %3725, 1
  store i8 %3726, i8* %24, align 1, !tbaa !2447
  %3727 = xor i32 %3715, %3710
  %3728 = xor i32 %3727, %3716
  %3729 = lshr i32 %3728, 4
  %3730 = trunc i32 %3729 to i8
  %3731 = and i8 %3730, 1
  store i8 %3731, i8* %30, align 1, !tbaa !2451
  %3732 = icmp eq i32 %3716, 0
  %3733 = zext i1 %3732 to i8
  store i8 %3733, i8* %33, align 1, !tbaa !2448
  %3734 = lshr i32 %3716, 31
  %3735 = trunc i32 %3734 to i8
  store i8 %3735, i8* %36, align 1, !tbaa !2449
  %3736 = lshr i32 %3710, 31
  %3737 = lshr i32 %3715, 31
  %3738 = xor i32 %3734, %3736
  %3739 = xor i32 %3734, %3737
  %3740 = add nuw nsw i32 %3738, %3739
  %3741 = icmp eq i32 %3740, 2
  %3742 = zext i1 %3741 to i8
  store i8 %3742, i8* %42, align 1, !tbaa !2450
  %3743 = add i64 %3705, -36
  %3744 = add i64 %3707, 9
  store i64 %3744, i64* %PC, align 8
  %3745 = inttoptr i64 %3743 to i32*
  store i32 %3716, i32* %3745, align 4
  %3746 = load i64, i64* %RBP, align 8
  %3747 = add i64 %3746, -36
  %3748 = load i64, i64* %PC, align 8
  %3749 = add i64 %3748, 3
  store i64 %3749, i64* %PC, align 8
  %3750 = inttoptr i64 %3747 to i32*
  %3751 = load i32, i32* %3750, align 4
  %3752 = zext i32 %3751 to i64
  store i64 %3752, i64* %RCX, align 8, !tbaa !2428
  %3753 = add i64 %3746, -8
  %3754 = add i64 %3748, 6
  store i64 %3754, i64* %PC, align 8
  %3755 = inttoptr i64 %3753 to i32*
  %3756 = load i32, i32* %3755, align 4
  %3757 = add i32 %3756, %3751
  %3758 = zext i32 %3757 to i64
  store i64 %3758, i64* %RCX, align 8, !tbaa !2428
  %3759 = icmp ult i32 %3757, %3751
  %3760 = icmp ult i32 %3757, %3756
  %3761 = or i1 %3759, %3760
  %3762 = zext i1 %3761 to i8
  store i8 %3762, i8* %17, align 1, !tbaa !2433
  %3763 = and i32 %3757, 255
  %3764 = tail call i32 @llvm.ctpop.i32(i32 %3763) #11
  %3765 = trunc i32 %3764 to i8
  %3766 = and i8 %3765, 1
  %3767 = xor i8 %3766, 1
  store i8 %3767, i8* %24, align 1, !tbaa !2447
  %3768 = xor i32 %3756, %3751
  %3769 = xor i32 %3768, %3757
  %3770 = lshr i32 %3769, 4
  %3771 = trunc i32 %3770 to i8
  %3772 = and i8 %3771, 1
  store i8 %3772, i8* %30, align 1, !tbaa !2451
  %3773 = icmp eq i32 %3757, 0
  %3774 = zext i1 %3773 to i8
  store i8 %3774, i8* %33, align 1, !tbaa !2448
  %3775 = lshr i32 %3757, 31
  %3776 = trunc i32 %3775 to i8
  store i8 %3776, i8* %36, align 1, !tbaa !2449
  %3777 = lshr i32 %3751, 31
  %3778 = lshr i32 %3756, 31
  %3779 = xor i32 %3775, %3777
  %3780 = xor i32 %3775, %3778
  %3781 = add nuw nsw i32 %3779, %3780
  %3782 = icmp eq i32 %3781, 2
  %3783 = zext i1 %3782 to i8
  store i8 %3783, i8* %42, align 1, !tbaa !2450
  %3784 = add i64 %3746, -40
  %3785 = add i64 %3748, 9
  store i64 %3785, i64* %PC, align 8
  %3786 = inttoptr i64 %3784 to i32*
  store i32 %3757, i32* %3786, align 4
  %3787 = load i64, i64* %RBP, align 8
  %3788 = add i64 %3787, -16
  %3789 = load i64, i64* %PC, align 8
  %3790 = add i64 %3789, 4
  store i64 %3790, i64* %PC, align 8
  %3791 = inttoptr i64 %3788 to i64*
  %3792 = load i64, i64* %3791, align 8
  store i64 %3792, i64* %RDX, align 8, !tbaa !2428
  %3793 = add i64 %3787, -28
  %3794 = add i64 %3789, 8
  store i64 %3794, i64* %PC, align 8
  %3795 = inttoptr i64 %3793 to i32*
  %3796 = load i32, i32* %3795, align 4
  %3797 = sext i32 %3796 to i64
  store i64 %3797, i64* %RSI, align 8, !tbaa !2428
  %3798 = shl nsw i64 %3797, 3
  %3799 = add i64 %3798, %3792
  %3800 = add i64 %3789, 13
  store i64 %3800, i64* %PC, align 8
  %3801 = inttoptr i64 %3799 to double*
  %3802 = load double, double* %3801, align 8
  store double %3802, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3803 = add i64 %3789, 17
  store i64 %3803, i64* %PC, align 8
  %3804 = load i64, i64* %3791, align 8
  store i64 %3804, i64* %RDX, align 8, !tbaa !2428
  %3805 = add i64 %3787, -32
  %3806 = add i64 %3789, 21
  store i64 %3806, i64* %PC, align 8
  %3807 = inttoptr i64 %3805 to i32*
  %3808 = load i32, i32* %3807, align 4
  %3809 = sext i32 %3808 to i64
  store i64 %3809, i64* %RSI, align 8, !tbaa !2428
  %3810 = shl nsw i64 %3809, 3
  %3811 = add i64 %3810, %3804
  %3812 = add i64 %3789, 26
  store i64 %3812, i64* %PC, align 8
  %3813 = inttoptr i64 %3811 to double*
  %3814 = load double, double* %3813, align 8
  %3815 = fadd double %3802, %3814
  store double %3815, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3816 = add i64 %3787, -120
  %3817 = add i64 %3789, 31
  store i64 %3817, i64* %PC, align 8
  %3818 = inttoptr i64 %3816 to double*
  store double %3815, double* %3818, align 8
  %3819 = load i64, i64* %RBP, align 8
  %3820 = add i64 %3819, -16
  %3821 = load i64, i64* %PC, align 8
  %3822 = add i64 %3821, 4
  store i64 %3822, i64* %PC, align 8
  %3823 = inttoptr i64 %3820 to i64*
  %3824 = load i64, i64* %3823, align 8
  store i64 %3824, i64* %RDX, align 8, !tbaa !2428
  %3825 = add i64 %3819, -28
  %3826 = add i64 %3821, 7
  store i64 %3826, i64* %PC, align 8
  %3827 = inttoptr i64 %3825 to i32*
  %3828 = load i32, i32* %3827, align 4
  %3829 = add i32 %3828, 1
  %3830 = zext i32 %3829 to i64
  store i64 %3830, i64* %RCX, align 8, !tbaa !2428
  %3831 = icmp eq i32 %3828, -1
  %3832 = icmp eq i32 %3829, 0
  %3833 = or i1 %3831, %3832
  %3834 = zext i1 %3833 to i8
  store i8 %3834, i8* %17, align 1, !tbaa !2433
  %3835 = and i32 %3829, 255
  %3836 = tail call i32 @llvm.ctpop.i32(i32 %3835) #11
  %3837 = trunc i32 %3836 to i8
  %3838 = and i8 %3837, 1
  %3839 = xor i8 %3838, 1
  store i8 %3839, i8* %24, align 1, !tbaa !2447
  %3840 = xor i32 %3828, %3829
  %3841 = lshr i32 %3840, 4
  %3842 = trunc i32 %3841 to i8
  %3843 = and i8 %3842, 1
  store i8 %3843, i8* %30, align 1, !tbaa !2451
  %3844 = zext i1 %3832 to i8
  store i8 %3844, i8* %33, align 1, !tbaa !2448
  %3845 = lshr i32 %3829, 31
  %3846 = trunc i32 %3845 to i8
  store i8 %3846, i8* %36, align 1, !tbaa !2449
  %3847 = lshr i32 %3828, 31
  %3848 = xor i32 %3845, %3847
  %3849 = add nuw nsw i32 %3848, %3845
  %3850 = icmp eq i32 %3849, 2
  %3851 = zext i1 %3850 to i8
  store i8 %3851, i8* %42, align 1, !tbaa !2450
  %3852 = sext i32 %3829 to i64
  store i64 %3852, i64* %RSI, align 8, !tbaa !2428
  %3853 = shl nsw i64 %3852, 3
  %3854 = add i64 %3853, %3824
  %3855 = add i64 %3821, 18
  store i64 %3855, i64* %PC, align 8
  %3856 = inttoptr i64 %3854 to double*
  %3857 = load double, double* %3856, align 8
  store double %3857, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3858 = add i64 %3821, 22
  store i64 %3858, i64* %PC, align 8
  %3859 = load i64, i64* %3823, align 8
  store i64 %3859, i64* %RDX, align 8, !tbaa !2428
  %3860 = add i64 %3819, -32
  %3861 = add i64 %3821, 25
  store i64 %3861, i64* %PC, align 8
  %3862 = inttoptr i64 %3860 to i32*
  %3863 = load i32, i32* %3862, align 4
  %3864 = add i32 %3863, 1
  %3865 = zext i32 %3864 to i64
  store i64 %3865, i64* %RCX, align 8, !tbaa !2428
  %3866 = icmp eq i32 %3863, -1
  %3867 = icmp eq i32 %3864, 0
  %3868 = or i1 %3866, %3867
  %3869 = zext i1 %3868 to i8
  store i8 %3869, i8* %17, align 1, !tbaa !2433
  %3870 = and i32 %3864, 255
  %3871 = tail call i32 @llvm.ctpop.i32(i32 %3870) #11
  %3872 = trunc i32 %3871 to i8
  %3873 = and i8 %3872, 1
  %3874 = xor i8 %3873, 1
  store i8 %3874, i8* %24, align 1, !tbaa !2447
  %3875 = xor i32 %3863, %3864
  %3876 = lshr i32 %3875, 4
  %3877 = trunc i32 %3876 to i8
  %3878 = and i8 %3877, 1
  store i8 %3878, i8* %30, align 1, !tbaa !2451
  %3879 = zext i1 %3867 to i8
  store i8 %3879, i8* %33, align 1, !tbaa !2448
  %3880 = lshr i32 %3864, 31
  %3881 = trunc i32 %3880 to i8
  store i8 %3881, i8* %36, align 1, !tbaa !2449
  %3882 = lshr i32 %3863, 31
  %3883 = xor i32 %3880, %3882
  %3884 = add nuw nsw i32 %3883, %3880
  %3885 = icmp eq i32 %3884, 2
  %3886 = zext i1 %3885 to i8
  store i8 %3886, i8* %42, align 1, !tbaa !2450
  %3887 = sext i32 %3864 to i64
  store i64 %3887, i64* %RSI, align 8, !tbaa !2428
  %3888 = shl nsw i64 %3887, 3
  %3889 = add i64 %3888, %3859
  %3890 = add i64 %3821, 36
  store i64 %3890, i64* %PC, align 8
  %3891 = inttoptr i64 %3889 to double*
  %3892 = load double, double* %3891, align 8
  %3893 = fadd double %3857, %3892
  store double %3893, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3894 = load i64, i64* %RBP, align 8
  %3895 = add i64 %3894, -128
  %3896 = add i64 %3821, 41
  store i64 %3896, i64* %PC, align 8
  %3897 = inttoptr i64 %3895 to double*
  store double %3893, double* %3897, align 8
  %3898 = load i64, i64* %RBP, align 8
  %3899 = add i64 %3898, -16
  %3900 = load i64, i64* %PC, align 8
  %3901 = add i64 %3900, 4
  store i64 %3901, i64* %PC, align 8
  %3902 = inttoptr i64 %3899 to i64*
  %3903 = load i64, i64* %3902, align 8
  store i64 %3903, i64* %RDX, align 8, !tbaa !2428
  %3904 = add i64 %3898, -28
  %3905 = add i64 %3900, 8
  store i64 %3905, i64* %PC, align 8
  %3906 = inttoptr i64 %3904 to i32*
  %3907 = load i32, i32* %3906, align 4
  %3908 = sext i32 %3907 to i64
  store i64 %3908, i64* %RSI, align 8, !tbaa !2428
  %3909 = shl nsw i64 %3908, 3
  %3910 = add i64 %3909, %3903
  %3911 = add i64 %3900, 13
  store i64 %3911, i64* %PC, align 8
  %3912 = inttoptr i64 %3910 to double*
  %3913 = load double, double* %3912, align 8
  store double %3913, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3914 = add i64 %3900, 17
  store i64 %3914, i64* %PC, align 8
  %3915 = load i64, i64* %3902, align 8
  store i64 %3915, i64* %RDX, align 8, !tbaa !2428
  %3916 = add i64 %3898, -32
  %3917 = add i64 %3900, 21
  store i64 %3917, i64* %PC, align 8
  %3918 = inttoptr i64 %3916 to i32*
  %3919 = load i32, i32* %3918, align 4
  %3920 = sext i32 %3919 to i64
  store i64 %3920, i64* %RSI, align 8, !tbaa !2428
  %3921 = shl nsw i64 %3920, 3
  %3922 = add i64 %3921, %3915
  %3923 = add i64 %3900, 26
  store i64 %3923, i64* %PC, align 8
  %3924 = inttoptr i64 %3922 to double*
  %3925 = load double, double* %3924, align 8
  %3926 = fsub double %3913, %3925
  store double %3926, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %3927 = add i64 %3898, -136
  %3928 = add i64 %3900, 34
  store i64 %3928, i64* %PC, align 8
  %3929 = inttoptr i64 %3927 to double*
  store double %3926, double* %3929, align 8
  %3930 = load i64, i64* %RBP, align 8
  %3931 = add i64 %3930, -16
  %3932 = load i64, i64* %PC, align 8
  %3933 = add i64 %3932, 4
  store i64 %3933, i64* %PC, align 8
  %3934 = inttoptr i64 %3931 to i64*
  %3935 = load i64, i64* %3934, align 8
  store i64 %3935, i64* %RDX, align 8, !tbaa !2428
  %3936 = add i64 %3930, -28
  %3937 = add i64 %3932, 7
  store i64 %3937, i64* %PC, align 8
  %3938 = inttoptr i64 %3936 to i32*
  %3939 = load i32, i32* %3938, align 4
  %3940 = add i32 %3939, 1
  %3941 = zext i32 %3940 to i64
  store i64 %3941, i64* %RCX, align 8, !tbaa !2428
  %3942 = icmp eq i32 %3939, -1
  %3943 = icmp eq i32 %3940, 0
  %3944 = or i1 %3942, %3943
  %3945 = zext i1 %3944 to i8
  store i8 %3945, i8* %17, align 1, !tbaa !2433
  %3946 = and i32 %3940, 255
  %3947 = tail call i32 @llvm.ctpop.i32(i32 %3946) #11
  %3948 = trunc i32 %3947 to i8
  %3949 = and i8 %3948, 1
  %3950 = xor i8 %3949, 1
  store i8 %3950, i8* %24, align 1, !tbaa !2447
  %3951 = xor i32 %3939, %3940
  %3952 = lshr i32 %3951, 4
  %3953 = trunc i32 %3952 to i8
  %3954 = and i8 %3953, 1
  store i8 %3954, i8* %30, align 1, !tbaa !2451
  %3955 = zext i1 %3943 to i8
  store i8 %3955, i8* %33, align 1, !tbaa !2448
  %3956 = lshr i32 %3940, 31
  %3957 = trunc i32 %3956 to i8
  store i8 %3957, i8* %36, align 1, !tbaa !2449
  %3958 = lshr i32 %3939, 31
  %3959 = xor i32 %3956, %3958
  %3960 = add nuw nsw i32 %3959, %3956
  %3961 = icmp eq i32 %3960, 2
  %3962 = zext i1 %3961 to i8
  store i8 %3962, i8* %42, align 1, !tbaa !2450
  %3963 = sext i32 %3940 to i64
  store i64 %3963, i64* %RSI, align 8, !tbaa !2428
  %3964 = shl nsw i64 %3963, 3
  %3965 = add i64 %3964, %3935
  %3966 = add i64 %3932, 18
  store i64 %3966, i64* %PC, align 8
  %3967 = inttoptr i64 %3965 to double*
  %3968 = load double, double* %3967, align 8
  store double %3968, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %3969 = add i64 %3932, 22
  store i64 %3969, i64* %PC, align 8
  %3970 = load i64, i64* %3934, align 8
  store i64 %3970, i64* %RDX, align 8, !tbaa !2428
  %3971 = add i64 %3930, -32
  %3972 = add i64 %3932, 25
  store i64 %3972, i64* %PC, align 8
  %3973 = inttoptr i64 %3971 to i32*
  %3974 = load i32, i32* %3973, align 4
  %3975 = add i32 %3974, 1
  %3976 = zext i32 %3975 to i64
  store i64 %3976, i64* %RCX, align 8, !tbaa !2428
  %3977 = icmp eq i32 %3974, -1
  %3978 = icmp eq i32 %3975, 0
  %3979 = or i1 %3977, %3978
  %3980 = zext i1 %3979 to i8
  store i8 %3980, i8* %17, align 1, !tbaa !2433
  %3981 = and i32 %3975, 255
  %3982 = tail call i32 @llvm.ctpop.i32(i32 %3981) #11
  %3983 = trunc i32 %3982 to i8
  %3984 = and i8 %3983, 1
  %3985 = xor i8 %3984, 1
  store i8 %3985, i8* %24, align 1, !tbaa !2447
  %3986 = xor i32 %3974, %3975
  %3987 = lshr i32 %3986, 4
  %3988 = trunc i32 %3987 to i8
  %3989 = and i8 %3988, 1
  store i8 %3989, i8* %30, align 1, !tbaa !2451
  %3990 = zext i1 %3978 to i8
  store i8 %3990, i8* %33, align 1, !tbaa !2448
  %3991 = lshr i32 %3975, 31
  %3992 = trunc i32 %3991 to i8
  store i8 %3992, i8* %36, align 1, !tbaa !2449
  %3993 = lshr i32 %3974, 31
  %3994 = xor i32 %3991, %3993
  %3995 = add nuw nsw i32 %3994, %3991
  %3996 = icmp eq i32 %3995, 2
  %3997 = zext i1 %3996 to i8
  store i8 %3997, i8* %42, align 1, !tbaa !2450
  %3998 = sext i32 %3975 to i64
  store i64 %3998, i64* %RSI, align 8, !tbaa !2428
  %3999 = shl nsw i64 %3998, 3
  %4000 = add i64 %3999, %3970
  %4001 = add i64 %3932, 36
  store i64 %4001, i64* %PC, align 8
  %4002 = inttoptr i64 %4000 to double*
  %4003 = load double, double* %4002, align 8
  %4004 = fsub double %3968, %4003
  store double %4004, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4005 = load i64, i64* %RBP, align 8
  %4006 = add i64 %4005, -144
  %4007 = add i64 %3932, 44
  store i64 %4007, i64* %PC, align 8
  %4008 = inttoptr i64 %4006 to double*
  store double %4004, double* %4008, align 8
  %4009 = load i64, i64* %RBP, align 8
  %4010 = add i64 %4009, -16
  %4011 = load i64, i64* %PC, align 8
  %4012 = add i64 %4011, 4
  store i64 %4012, i64* %PC, align 8
  %4013 = inttoptr i64 %4010 to i64*
  %4014 = load i64, i64* %4013, align 8
  store i64 %4014, i64* %RDX, align 8, !tbaa !2428
  %4015 = add i64 %4009, -36
  %4016 = add i64 %4011, 8
  store i64 %4016, i64* %PC, align 8
  %4017 = inttoptr i64 %4015 to i32*
  %4018 = load i32, i32* %4017, align 4
  %4019 = sext i32 %4018 to i64
  store i64 %4019, i64* %RSI, align 8, !tbaa !2428
  %4020 = shl nsw i64 %4019, 3
  %4021 = add i64 %4020, %4014
  %4022 = add i64 %4011, 13
  store i64 %4022, i64* %PC, align 8
  %4023 = inttoptr i64 %4021 to double*
  %4024 = load double, double* %4023, align 8
  store double %4024, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4025 = add i64 %4011, 17
  store i64 %4025, i64* %PC, align 8
  %4026 = load i64, i64* %4013, align 8
  store i64 %4026, i64* %RDX, align 8, !tbaa !2428
  %4027 = add i64 %4009, -40
  %4028 = add i64 %4011, 21
  store i64 %4028, i64* %PC, align 8
  %4029 = inttoptr i64 %4027 to i32*
  %4030 = load i32, i32* %4029, align 4
  %4031 = sext i32 %4030 to i64
  store i64 %4031, i64* %RSI, align 8, !tbaa !2428
  %4032 = shl nsw i64 %4031, 3
  %4033 = add i64 %4032, %4026
  %4034 = add i64 %4011, 26
  store i64 %4034, i64* %PC, align 8
  %4035 = inttoptr i64 %4033 to double*
  %4036 = load double, double* %4035, align 8
  %4037 = fadd double %4024, %4036
  store double %4037, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4038 = add i64 %4009, -152
  %4039 = add i64 %4011, 34
  store i64 %4039, i64* %PC, align 8
  %4040 = inttoptr i64 %4038 to double*
  store double %4037, double* %4040, align 8
  %4041 = load i64, i64* %RBP, align 8
  %4042 = add i64 %4041, -16
  %4043 = load i64, i64* %PC, align 8
  %4044 = add i64 %4043, 4
  store i64 %4044, i64* %PC, align 8
  %4045 = inttoptr i64 %4042 to i64*
  %4046 = load i64, i64* %4045, align 8
  store i64 %4046, i64* %RDX, align 8, !tbaa !2428
  %4047 = add i64 %4041, -36
  %4048 = add i64 %4043, 7
  store i64 %4048, i64* %PC, align 8
  %4049 = inttoptr i64 %4047 to i32*
  %4050 = load i32, i32* %4049, align 4
  %4051 = add i32 %4050, 1
  %4052 = zext i32 %4051 to i64
  store i64 %4052, i64* %RCX, align 8, !tbaa !2428
  %4053 = icmp eq i32 %4050, -1
  %4054 = icmp eq i32 %4051, 0
  %4055 = or i1 %4053, %4054
  %4056 = zext i1 %4055 to i8
  store i8 %4056, i8* %17, align 1, !tbaa !2433
  %4057 = and i32 %4051, 255
  %4058 = tail call i32 @llvm.ctpop.i32(i32 %4057) #11
  %4059 = trunc i32 %4058 to i8
  %4060 = and i8 %4059, 1
  %4061 = xor i8 %4060, 1
  store i8 %4061, i8* %24, align 1, !tbaa !2447
  %4062 = xor i32 %4050, %4051
  %4063 = lshr i32 %4062, 4
  %4064 = trunc i32 %4063 to i8
  %4065 = and i8 %4064, 1
  store i8 %4065, i8* %30, align 1, !tbaa !2451
  %4066 = zext i1 %4054 to i8
  store i8 %4066, i8* %33, align 1, !tbaa !2448
  %4067 = lshr i32 %4051, 31
  %4068 = trunc i32 %4067 to i8
  store i8 %4068, i8* %36, align 1, !tbaa !2449
  %4069 = lshr i32 %4050, 31
  %4070 = xor i32 %4067, %4069
  %4071 = add nuw nsw i32 %4070, %4067
  %4072 = icmp eq i32 %4071, 2
  %4073 = zext i1 %4072 to i8
  store i8 %4073, i8* %42, align 1, !tbaa !2450
  %4074 = sext i32 %4051 to i64
  store i64 %4074, i64* %RSI, align 8, !tbaa !2428
  %4075 = shl nsw i64 %4074, 3
  %4076 = add i64 %4075, %4046
  %4077 = add i64 %4043, 18
  store i64 %4077, i64* %PC, align 8
  %4078 = inttoptr i64 %4076 to double*
  %4079 = load double, double* %4078, align 8
  store double %4079, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4080 = add i64 %4043, 22
  store i64 %4080, i64* %PC, align 8
  %4081 = load i64, i64* %4045, align 8
  store i64 %4081, i64* %RDX, align 8, !tbaa !2428
  %4082 = add i64 %4041, -40
  %4083 = add i64 %4043, 25
  store i64 %4083, i64* %PC, align 8
  %4084 = inttoptr i64 %4082 to i32*
  %4085 = load i32, i32* %4084, align 4
  %4086 = add i32 %4085, 1
  %4087 = zext i32 %4086 to i64
  store i64 %4087, i64* %RCX, align 8, !tbaa !2428
  %4088 = icmp eq i32 %4085, -1
  %4089 = icmp eq i32 %4086, 0
  %4090 = or i1 %4088, %4089
  %4091 = zext i1 %4090 to i8
  store i8 %4091, i8* %17, align 1, !tbaa !2433
  %4092 = and i32 %4086, 255
  %4093 = tail call i32 @llvm.ctpop.i32(i32 %4092) #11
  %4094 = trunc i32 %4093 to i8
  %4095 = and i8 %4094, 1
  %4096 = xor i8 %4095, 1
  store i8 %4096, i8* %24, align 1, !tbaa !2447
  %4097 = xor i32 %4085, %4086
  %4098 = lshr i32 %4097, 4
  %4099 = trunc i32 %4098 to i8
  %4100 = and i8 %4099, 1
  store i8 %4100, i8* %30, align 1, !tbaa !2451
  %4101 = zext i1 %4089 to i8
  store i8 %4101, i8* %33, align 1, !tbaa !2448
  %4102 = lshr i32 %4086, 31
  %4103 = trunc i32 %4102 to i8
  store i8 %4103, i8* %36, align 1, !tbaa !2449
  %4104 = lshr i32 %4085, 31
  %4105 = xor i32 %4102, %4104
  %4106 = add nuw nsw i32 %4105, %4102
  %4107 = icmp eq i32 %4106, 2
  %4108 = zext i1 %4107 to i8
  store i8 %4108, i8* %42, align 1, !tbaa !2450
  %4109 = sext i32 %4086 to i64
  store i64 %4109, i64* %RSI, align 8, !tbaa !2428
  %4110 = shl nsw i64 %4109, 3
  %4111 = add i64 %4110, %4081
  %4112 = add i64 %4043, 36
  store i64 %4112, i64* %PC, align 8
  %4113 = inttoptr i64 %4111 to double*
  %4114 = load double, double* %4113, align 8
  %4115 = fadd double %4079, %4114
  store double %4115, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4116 = load i64, i64* %RBP, align 8
  %4117 = add i64 %4116, -160
  %4118 = add i64 %4043, 44
  store i64 %4118, i64* %PC, align 8
  %4119 = inttoptr i64 %4117 to double*
  store double %4115, double* %4119, align 8
  %4120 = load i64, i64* %RBP, align 8
  %4121 = add i64 %4120, -16
  %4122 = load i64, i64* %PC, align 8
  %4123 = add i64 %4122, 4
  store i64 %4123, i64* %PC, align 8
  %4124 = inttoptr i64 %4121 to i64*
  %4125 = load i64, i64* %4124, align 8
  store i64 %4125, i64* %RDX, align 8, !tbaa !2428
  %4126 = add i64 %4120, -36
  %4127 = add i64 %4122, 8
  store i64 %4127, i64* %PC, align 8
  %4128 = inttoptr i64 %4126 to i32*
  %4129 = load i32, i32* %4128, align 4
  %4130 = sext i32 %4129 to i64
  store i64 %4130, i64* %RSI, align 8, !tbaa !2428
  %4131 = shl nsw i64 %4130, 3
  %4132 = add i64 %4131, %4125
  %4133 = add i64 %4122, 13
  store i64 %4133, i64* %PC, align 8
  %4134 = inttoptr i64 %4132 to double*
  %4135 = load double, double* %4134, align 8
  store double %4135, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4136 = add i64 %4122, 17
  store i64 %4136, i64* %PC, align 8
  %4137 = load i64, i64* %4124, align 8
  store i64 %4137, i64* %RDX, align 8, !tbaa !2428
  %4138 = add i64 %4120, -40
  %4139 = add i64 %4122, 21
  store i64 %4139, i64* %PC, align 8
  %4140 = inttoptr i64 %4138 to i32*
  %4141 = load i32, i32* %4140, align 4
  %4142 = sext i32 %4141 to i64
  store i64 %4142, i64* %RSI, align 8, !tbaa !2428
  %4143 = shl nsw i64 %4142, 3
  %4144 = add i64 %4143, %4137
  %4145 = add i64 %4122, 26
  store i64 %4145, i64* %PC, align 8
  %4146 = inttoptr i64 %4144 to double*
  %4147 = load double, double* %4146, align 8
  %4148 = fsub double %4135, %4147
  store double %4148, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4149 = add i64 %4120, -168
  %4150 = add i64 %4122, 34
  store i64 %4150, i64* %PC, align 8
  %4151 = inttoptr i64 %4149 to double*
  store double %4148, double* %4151, align 8
  %4152 = load i64, i64* %RBP, align 8
  %4153 = add i64 %4152, -16
  %4154 = load i64, i64* %PC, align 8
  %4155 = add i64 %4154, 4
  store i64 %4155, i64* %PC, align 8
  %4156 = inttoptr i64 %4153 to i64*
  %4157 = load i64, i64* %4156, align 8
  store i64 %4157, i64* %RDX, align 8, !tbaa !2428
  %4158 = add i64 %4152, -36
  %4159 = add i64 %4154, 7
  store i64 %4159, i64* %PC, align 8
  %4160 = inttoptr i64 %4158 to i32*
  %4161 = load i32, i32* %4160, align 4
  %4162 = add i32 %4161, 1
  %4163 = zext i32 %4162 to i64
  store i64 %4163, i64* %RCX, align 8, !tbaa !2428
  %4164 = icmp eq i32 %4161, -1
  %4165 = icmp eq i32 %4162, 0
  %4166 = or i1 %4164, %4165
  %4167 = zext i1 %4166 to i8
  store i8 %4167, i8* %17, align 1, !tbaa !2433
  %4168 = and i32 %4162, 255
  %4169 = tail call i32 @llvm.ctpop.i32(i32 %4168) #11
  %4170 = trunc i32 %4169 to i8
  %4171 = and i8 %4170, 1
  %4172 = xor i8 %4171, 1
  store i8 %4172, i8* %24, align 1, !tbaa !2447
  %4173 = xor i32 %4161, %4162
  %4174 = lshr i32 %4173, 4
  %4175 = trunc i32 %4174 to i8
  %4176 = and i8 %4175, 1
  store i8 %4176, i8* %30, align 1, !tbaa !2451
  %4177 = zext i1 %4165 to i8
  store i8 %4177, i8* %33, align 1, !tbaa !2448
  %4178 = lshr i32 %4162, 31
  %4179 = trunc i32 %4178 to i8
  store i8 %4179, i8* %36, align 1, !tbaa !2449
  %4180 = lshr i32 %4161, 31
  %4181 = xor i32 %4178, %4180
  %4182 = add nuw nsw i32 %4181, %4178
  %4183 = icmp eq i32 %4182, 2
  %4184 = zext i1 %4183 to i8
  store i8 %4184, i8* %42, align 1, !tbaa !2450
  %4185 = sext i32 %4162 to i64
  store i64 %4185, i64* %RSI, align 8, !tbaa !2428
  %4186 = shl nsw i64 %4185, 3
  %4187 = add i64 %4186, %4157
  %4188 = add i64 %4154, 18
  store i64 %4188, i64* %PC, align 8
  %4189 = inttoptr i64 %4187 to double*
  %4190 = load double, double* %4189, align 8
  store double %4190, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4191 = add i64 %4154, 22
  store i64 %4191, i64* %PC, align 8
  %4192 = load i64, i64* %4156, align 8
  store i64 %4192, i64* %RDX, align 8, !tbaa !2428
  %4193 = add i64 %4152, -40
  %4194 = add i64 %4154, 25
  store i64 %4194, i64* %PC, align 8
  %4195 = inttoptr i64 %4193 to i32*
  %4196 = load i32, i32* %4195, align 4
  %4197 = add i32 %4196, 1
  %4198 = zext i32 %4197 to i64
  store i64 %4198, i64* %RCX, align 8, !tbaa !2428
  %4199 = icmp eq i32 %4196, -1
  %4200 = icmp eq i32 %4197, 0
  %4201 = or i1 %4199, %4200
  %4202 = zext i1 %4201 to i8
  store i8 %4202, i8* %17, align 1, !tbaa !2433
  %4203 = and i32 %4197, 255
  %4204 = tail call i32 @llvm.ctpop.i32(i32 %4203) #11
  %4205 = trunc i32 %4204 to i8
  %4206 = and i8 %4205, 1
  %4207 = xor i8 %4206, 1
  store i8 %4207, i8* %24, align 1, !tbaa !2447
  %4208 = xor i32 %4196, %4197
  %4209 = lshr i32 %4208, 4
  %4210 = trunc i32 %4209 to i8
  %4211 = and i8 %4210, 1
  store i8 %4211, i8* %30, align 1, !tbaa !2451
  %4212 = zext i1 %4200 to i8
  store i8 %4212, i8* %33, align 1, !tbaa !2448
  %4213 = lshr i32 %4197, 31
  %4214 = trunc i32 %4213 to i8
  store i8 %4214, i8* %36, align 1, !tbaa !2449
  %4215 = lshr i32 %4196, 31
  %4216 = xor i32 %4213, %4215
  %4217 = add nuw nsw i32 %4216, %4213
  %4218 = icmp eq i32 %4217, 2
  %4219 = zext i1 %4218 to i8
  store i8 %4219, i8* %42, align 1, !tbaa !2450
  %4220 = sext i32 %4197 to i64
  store i64 %4220, i64* %RSI, align 8, !tbaa !2428
  %4221 = shl nsw i64 %4220, 3
  %4222 = add i64 %4221, %4192
  %4223 = add i64 %4154, 36
  store i64 %4223, i64* %PC, align 8
  %4224 = inttoptr i64 %4222 to double*
  %4225 = load double, double* %4224, align 8
  %4226 = fsub double %4190, %4225
  store double %4226, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4227 = load i64, i64* %RBP, align 8
  %4228 = add i64 %4227, -176
  %4229 = add i64 %4154, 44
  store i64 %4229, i64* %PC, align 8
  %4230 = inttoptr i64 %4228 to double*
  store double %4226, double* %4230, align 8
  %4231 = load i64, i64* %RBP, align 8
  %4232 = add i64 %4231, -120
  %4233 = load i64, i64* %PC, align 8
  %4234 = add i64 %4233, 5
  store i64 %4234, i64* %PC, align 8
  %4235 = inttoptr i64 %4232 to double*
  %4236 = load double, double* %4235, align 8
  store double %4236, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4237 = add i64 %4231, -152
  %4238 = add i64 %4233, 13
  store i64 %4238, i64* %PC, align 8
  %4239 = inttoptr i64 %4237 to double*
  %4240 = load double, double* %4239, align 8
  %4241 = fadd double %4236, %4240
  store double %4241, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4242 = add i64 %4231, -16
  %4243 = add i64 %4233, 17
  store i64 %4243, i64* %PC, align 8
  %4244 = inttoptr i64 %4242 to i64*
  %4245 = load i64, i64* %4244, align 8
  store i64 %4245, i64* %RDX, align 8, !tbaa !2428
  %4246 = add i64 %4231, -28
  %4247 = add i64 %4233, 21
  store i64 %4247, i64* %PC, align 8
  %4248 = inttoptr i64 %4246 to i32*
  %4249 = load i32, i32* %4248, align 4
  %4250 = sext i32 %4249 to i64
  store i64 %4250, i64* %RSI, align 8, !tbaa !2428
  %4251 = shl nsw i64 %4250, 3
  %4252 = add i64 %4251, %4245
  %4253 = add i64 %4233, 26
  store i64 %4253, i64* %PC, align 8
  %4254 = inttoptr i64 %4252 to double*
  store double %4241, double* %4254, align 8
  %4255 = load i64, i64* %RBP, align 8
  %4256 = add i64 %4255, -128
  %4257 = load i64, i64* %PC, align 8
  %4258 = add i64 %4257, 5
  store i64 %4258, i64* %PC, align 8
  %4259 = inttoptr i64 %4256 to double*
  %4260 = load double, double* %4259, align 8
  store double %4260, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4261 = add i64 %4255, -160
  %4262 = add i64 %4257, 13
  store i64 %4262, i64* %PC, align 8
  %4263 = inttoptr i64 %4261 to double*
  %4264 = load double, double* %4263, align 8
  %4265 = fadd double %4260, %4264
  store double %4265, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4266 = add i64 %4255, -16
  %4267 = add i64 %4257, 17
  store i64 %4267, i64* %PC, align 8
  %4268 = inttoptr i64 %4266 to i64*
  %4269 = load i64, i64* %4268, align 8
  store i64 %4269, i64* %RDX, align 8, !tbaa !2428
  %4270 = add i64 %4255, -28
  %4271 = add i64 %4257, 20
  store i64 %4271, i64* %PC, align 8
  %4272 = inttoptr i64 %4270 to i32*
  %4273 = load i32, i32* %4272, align 4
  %4274 = add i32 %4273, 1
  %4275 = zext i32 %4274 to i64
  store i64 %4275, i64* %RCX, align 8, !tbaa !2428
  %4276 = icmp eq i32 %4273, -1
  %4277 = icmp eq i32 %4274, 0
  %4278 = or i1 %4276, %4277
  %4279 = zext i1 %4278 to i8
  store i8 %4279, i8* %17, align 1, !tbaa !2433
  %4280 = and i32 %4274, 255
  %4281 = tail call i32 @llvm.ctpop.i32(i32 %4280) #11
  %4282 = trunc i32 %4281 to i8
  %4283 = and i8 %4282, 1
  %4284 = xor i8 %4283, 1
  store i8 %4284, i8* %24, align 1, !tbaa !2447
  %4285 = xor i32 %4273, %4274
  %4286 = lshr i32 %4285, 4
  %4287 = trunc i32 %4286 to i8
  %4288 = and i8 %4287, 1
  store i8 %4288, i8* %30, align 1, !tbaa !2451
  %4289 = zext i1 %4277 to i8
  store i8 %4289, i8* %33, align 1, !tbaa !2448
  %4290 = lshr i32 %4274, 31
  %4291 = trunc i32 %4290 to i8
  store i8 %4291, i8* %36, align 1, !tbaa !2449
  %4292 = lshr i32 %4273, 31
  %4293 = xor i32 %4290, %4292
  %4294 = add nuw nsw i32 %4293, %4290
  %4295 = icmp eq i32 %4294, 2
  %4296 = zext i1 %4295 to i8
  store i8 %4296, i8* %42, align 1, !tbaa !2450
  %4297 = sext i32 %4274 to i64
  store i64 %4297, i64* %RSI, align 8, !tbaa !2428
  %4298 = shl nsw i64 %4297, 3
  %4299 = add i64 %4298, %4269
  %4300 = add i64 %4257, 31
  store i64 %4300, i64* %PC, align 8
  %4301 = inttoptr i64 %4299 to double*
  store double %4265, double* %4301, align 8
  %4302 = load i64, i64* %RBP, align 8
  %4303 = add i64 %4302, -152
  %4304 = load i64, i64* %PC, align 8
  %4305 = add i64 %4304, 8
  store i64 %4305, i64* %PC, align 8
  %4306 = inttoptr i64 %4303 to double*
  %4307 = load double, double* %4306, align 8
  store double %4307, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4308 = add i64 %4302, -120
  %4309 = add i64 %4304, 13
  store i64 %4309, i64* %PC, align 8
  %4310 = inttoptr i64 %4308 to double*
  %4311 = load double, double* %4310, align 8
  %4312 = fsub double %4311, %4307
  store double %4312, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %4313 = add i64 %4304, 22
  store i64 %4313, i64* %PC, align 8
  store double %4312, double* %4310, align 8
  %4314 = load i64, i64* %RBP, align 8
  %4315 = add i64 %4314, -160
  %4316 = load i64, i64* %PC, align 8
  %4317 = add i64 %4316, 8
  store i64 %4317, i64* %PC, align 8
  %4318 = inttoptr i64 %4315 to double*
  %4319 = load double, double* %4318, align 8
  store double %4319, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4320 = add i64 %4314, -128
  %4321 = add i64 %4316, 13
  store i64 %4321, i64* %PC, align 8
  %4322 = inttoptr i64 %4320 to double*
  %4323 = load double, double* %4322, align 8
  %4324 = fsub double %4323, %4319
  store double %4324, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %4325 = add i64 %4316, 22
  store i64 %4325, i64* %PC, align 8
  store double %4324, double* %4322, align 8
  %4326 = load i64, i64* %RBP, align 8
  %4327 = add i64 %4326, -96
  %4328 = load i64, i64* %PC, align 8
  %4329 = add i64 %4328, 5
  store i64 %4329, i64* %PC, align 8
  %4330 = inttoptr i64 %4327 to i64*
  %4331 = load i64, i64* %4330, align 8
  %4332 = load i64, i64* %RAX, align 8
  %4333 = xor i64 %4332, %4331
  store i64 %4333, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2433
  %4334 = trunc i64 %4333 to i32
  %4335 = and i32 %4334, 255
  %4336 = tail call i32 @llvm.ctpop.i32(i32 %4335) #11
  %4337 = trunc i32 %4336 to i8
  %4338 = and i8 %4337, 1
  %4339 = xor i8 %4338, 1
  store i8 %4339, i8* %24, align 1, !tbaa !2447
  %4340 = icmp eq i64 %4333, 0
  %4341 = zext i1 %4340 to i8
  store i8 %4341, i8* %33, align 1, !tbaa !2448
  %4342 = lshr i64 %4333, 63
  %4343 = trunc i64 %4342 to i8
  store i8 %4343, i8* %36, align 1, !tbaa !2449
  store i8 0, i8* %42, align 1, !tbaa !2450
  store i8 0, i8* %30, align 1, !tbaa !2451
  store i64 %4333, i64* %275, align 1, !tbaa !2428
  store i64 0, i64* %95, align 1, !tbaa !2428
  %4344 = add i64 %4326, -120
  %4345 = add i64 %4328, 23
  store i64 %4345, i64* %PC, align 8
  %4346 = bitcast i64 %4333 to double
  %4347 = inttoptr i64 %4344 to double*
  %4348 = load double, double* %4347, align 8
  %4349 = fmul double %4346, %4348
  store double %4349, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4350 = add i64 %4326, -88
  %4351 = add i64 %4328, 28
  store i64 %4351, i64* %PC, align 8
  %4352 = inttoptr i64 %4350 to double*
  %4353 = load double, double* %4352, align 8
  store double %4353, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %4354 = add i64 %4326, -128
  %4355 = add i64 %4328, 33
  store i64 %4355, i64* %PC, align 8
  %4356 = inttoptr i64 %4354 to double*
  %4357 = load double, double* %4356, align 8
  %4358 = fmul double %4353, %4357
  store double %4358, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %4359 = fsub double %4349, %4358
  store double %4359, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4360 = add i64 %4326, -16
  %4361 = add i64 %4328, 41
  store i64 %4361, i64* %PC, align 8
  %4362 = inttoptr i64 %4360 to i64*
  %4363 = load i64, i64* %4362, align 8
  store i64 %4363, i64* %RDX, align 8, !tbaa !2428
  %4364 = add i64 %4326, -36
  %4365 = add i64 %4328, 45
  store i64 %4365, i64* %PC, align 8
  %4366 = inttoptr i64 %4364 to i32*
  %4367 = load i32, i32* %4366, align 4
  %4368 = sext i32 %4367 to i64
  store i64 %4368, i64* %RSI, align 8, !tbaa !2428
  %4369 = shl nsw i64 %4368, 3
  %4370 = add i64 %4369, %4363
  %4371 = add i64 %4328, 50
  store i64 %4371, i64* %PC, align 8
  %4372 = inttoptr i64 %4370 to double*
  store double %4359, double* %4372, align 8
  %4373 = load i64, i64* %RBP, align 8
  %4374 = add i64 %4373, -96
  %4375 = load i64, i64* %PC, align 8
  %4376 = add i64 %4375, 5
  store i64 %4376, i64* %PC, align 8
  %4377 = inttoptr i64 %4374 to i64*
  %4378 = load i64, i64* %4377, align 8
  %4379 = load i64, i64* %RAX, align 8
  %4380 = xor i64 %4379, %4378
  store i64 %4380, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %17, align 1, !tbaa !2433
  %4381 = trunc i64 %4380 to i32
  %4382 = and i32 %4381, 255
  %4383 = tail call i32 @llvm.ctpop.i32(i32 %4382) #11
  %4384 = trunc i32 %4383 to i8
  %4385 = and i8 %4384, 1
  %4386 = xor i8 %4385, 1
  store i8 %4386, i8* %24, align 1, !tbaa !2447
  %4387 = icmp eq i64 %4380, 0
  %4388 = zext i1 %4387 to i8
  store i8 %4388, i8* %33, align 1, !tbaa !2448
  %4389 = lshr i64 %4380, 63
  %4390 = trunc i64 %4389 to i8
  store i8 %4390, i8* %36, align 1, !tbaa !2449
  store i8 0, i8* %42, align 1, !tbaa !2450
  store i8 0, i8* %30, align 1, !tbaa !2451
  store i64 %4380, i64* %275, align 1, !tbaa !2428
  store i64 0, i64* %95, align 1, !tbaa !2428
  %4391 = add i64 %4373, -128
  %4392 = add i64 %4375, 23
  store i64 %4392, i64* %PC, align 8
  %4393 = bitcast i64 %4380 to double
  %4394 = inttoptr i64 %4391 to double*
  %4395 = load double, double* %4394, align 8
  %4396 = fmul double %4393, %4395
  store double %4396, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4397 = add i64 %4373, -88
  %4398 = add i64 %4375, 28
  store i64 %4398, i64* %PC, align 8
  %4399 = inttoptr i64 %4397 to double*
  %4400 = load double, double* %4399, align 8
  store double %4400, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %4401 = add i64 %4373, -120
  %4402 = add i64 %4375, 33
  store i64 %4402, i64* %PC, align 8
  %4403 = inttoptr i64 %4401 to double*
  %4404 = load double, double* %4403, align 8
  %4405 = fmul double %4400, %4404
  store double %4405, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %4406 = fadd double %4396, %4405
  store double %4406, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4407 = add i64 %4373, -16
  %4408 = add i64 %4375, 41
  store i64 %4408, i64* %PC, align 8
  %4409 = inttoptr i64 %4407 to i64*
  %4410 = load i64, i64* %4409, align 8
  store i64 %4410, i64* %RAX, align 8, !tbaa !2428
  %4411 = add i64 %4373, -36
  %4412 = add i64 %4375, 44
  store i64 %4412, i64* %PC, align 8
  %4413 = inttoptr i64 %4411 to i32*
  %4414 = load i32, i32* %4413, align 4
  %4415 = add i32 %4414, 1
  %4416 = zext i32 %4415 to i64
  store i64 %4416, i64* %RCX, align 8, !tbaa !2428
  %4417 = icmp eq i32 %4414, -1
  %4418 = icmp eq i32 %4415, 0
  %4419 = or i1 %4417, %4418
  %4420 = zext i1 %4419 to i8
  store i8 %4420, i8* %17, align 1, !tbaa !2433
  %4421 = and i32 %4415, 255
  %4422 = tail call i32 @llvm.ctpop.i32(i32 %4421) #11
  %4423 = trunc i32 %4422 to i8
  %4424 = and i8 %4423, 1
  %4425 = xor i8 %4424, 1
  store i8 %4425, i8* %24, align 1, !tbaa !2447
  %4426 = xor i32 %4414, %4415
  %4427 = lshr i32 %4426, 4
  %4428 = trunc i32 %4427 to i8
  %4429 = and i8 %4428, 1
  store i8 %4429, i8* %30, align 1, !tbaa !2451
  %4430 = zext i1 %4418 to i8
  store i8 %4430, i8* %33, align 1, !tbaa !2448
  %4431 = lshr i32 %4415, 31
  %4432 = trunc i32 %4431 to i8
  store i8 %4432, i8* %36, align 1, !tbaa !2449
  %4433 = lshr i32 %4414, 31
  %4434 = xor i32 %4431, %4433
  %4435 = add nuw nsw i32 %4434, %4431
  %4436 = icmp eq i32 %4435, 2
  %4437 = zext i1 %4436 to i8
  store i8 %4437, i8* %42, align 1, !tbaa !2450
  %4438 = sext i32 %4415 to i64
  store i64 %4438, i64* %RDX, align 8, !tbaa !2428
  %4439 = shl nsw i64 %4438, 3
  %4440 = add i64 %4439, %4410
  %4441 = add i64 %4375, 55
  store i64 %4441, i64* %PC, align 8
  %4442 = inttoptr i64 %4440 to double*
  store double %4406, double* %4442, align 8
  %4443 = load i64, i64* %RBP, align 8
  %4444 = add i64 %4443, -136
  %4445 = load i64, i64* %PC, align 8
  %4446 = add i64 %4445, 8
  store i64 %4446, i64* %PC, align 8
  %4447 = inttoptr i64 %4444 to double*
  %4448 = load double, double* %4447, align 8
  store double %4448, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4449 = add i64 %4443, -176
  %4450 = add i64 %4445, 16
  store i64 %4450, i64* %PC, align 8
  %4451 = inttoptr i64 %4449 to double*
  %4452 = load double, double* %4451, align 8
  %4453 = fsub double %4448, %4452
  store double %4453, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4454 = add i64 %4443, -120
  %4455 = add i64 %4445, 21
  store i64 %4455, i64* %PC, align 8
  %4456 = inttoptr i64 %4454 to double*
  store double %4453, double* %4456, align 8
  %4457 = load i64, i64* %RBP, align 8
  %4458 = add i64 %4457, -144
  %4459 = load i64, i64* %PC, align 8
  %4460 = add i64 %4459, 8
  store i64 %4460, i64* %PC, align 8
  %4461 = inttoptr i64 %4458 to double*
  %4462 = load double, double* %4461, align 8
  store double %4462, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4463 = add i64 %4457, -168
  %4464 = add i64 %4459, 16
  store i64 %4464, i64* %PC, align 8
  %4465 = inttoptr i64 %4463 to double*
  %4466 = load double, double* %4465, align 8
  %4467 = fadd double %4462, %4466
  store double %4467, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4468 = add i64 %4457, -128
  %4469 = add i64 %4459, 21
  store i64 %4469, i64* %PC, align 8
  %4470 = inttoptr i64 %4468 to double*
  store double %4467, double* %4470, align 8
  %4471 = load i64, i64* %RBP, align 8
  %4472 = add i64 %4471, -72
  %4473 = load i64, i64* %PC, align 8
  %4474 = add i64 %4473, 5
  store i64 %4474, i64* %PC, align 8
  %4475 = inttoptr i64 %4472 to double*
  %4476 = load double, double* %4475, align 8
  store double %4476, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4477 = add i64 %4471, -120
  %4478 = add i64 %4473, 10
  store i64 %4478, i64* %PC, align 8
  %4479 = inttoptr i64 %4477 to double*
  %4480 = load double, double* %4479, align 8
  %4481 = fmul double %4476, %4480
  store double %4481, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4482 = add i64 %4471, -80
  %4483 = add i64 %4473, 15
  store i64 %4483, i64* %PC, align 8
  %4484 = inttoptr i64 %4482 to double*
  %4485 = load double, double* %4484, align 8
  store double %4485, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %4486 = add i64 %4471, -128
  %4487 = add i64 %4473, 20
  store i64 %4487, i64* %PC, align 8
  %4488 = inttoptr i64 %4486 to double*
  %4489 = load double, double* %4488, align 8
  %4490 = fmul double %4485, %4489
  store double %4490, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %4491 = fsub double %4481, %4490
  store double %4491, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4492 = add i64 %4471, -16
  %4493 = add i64 %4473, 28
  store i64 %4493, i64* %PC, align 8
  %4494 = inttoptr i64 %4492 to i64*
  %4495 = load i64, i64* %4494, align 8
  store i64 %4495, i64* %RAX, align 8, !tbaa !2428
  %4496 = add i64 %4471, -32
  %4497 = add i64 %4473, 32
  store i64 %4497, i64* %PC, align 8
  %4498 = inttoptr i64 %4496 to i32*
  %4499 = load i32, i32* %4498, align 4
  %4500 = sext i32 %4499 to i64
  store i64 %4500, i64* %RDX, align 8, !tbaa !2428
  %4501 = shl nsw i64 %4500, 3
  %4502 = add i64 %4501, %4495
  %4503 = add i64 %4473, 37
  store i64 %4503, i64* %PC, align 8
  %4504 = inttoptr i64 %4502 to double*
  store double %4491, double* %4504, align 8
  %4505 = load i64, i64* %RBP, align 8
  %4506 = add i64 %4505, -72
  %4507 = load i64, i64* %PC, align 8
  %4508 = add i64 %4507, 5
  store i64 %4508, i64* %PC, align 8
  %4509 = inttoptr i64 %4506 to double*
  %4510 = load double, double* %4509, align 8
  store double %4510, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4511 = add i64 %4505, -128
  %4512 = add i64 %4507, 10
  store i64 %4512, i64* %PC, align 8
  %4513 = inttoptr i64 %4511 to double*
  %4514 = load double, double* %4513, align 8
  %4515 = fmul double %4510, %4514
  store double %4515, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4516 = add i64 %4505, -80
  %4517 = add i64 %4507, 15
  store i64 %4517, i64* %PC, align 8
  %4518 = inttoptr i64 %4516 to double*
  %4519 = load double, double* %4518, align 8
  store double %4519, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %4520 = add i64 %4505, -120
  %4521 = add i64 %4507, 20
  store i64 %4521, i64* %PC, align 8
  %4522 = inttoptr i64 %4520 to double*
  %4523 = load double, double* %4522, align 8
  %4524 = fmul double %4519, %4523
  store double %4524, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %4525 = fadd double %4515, %4524
  store double %4525, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4526 = add i64 %4505, -16
  %4527 = add i64 %4507, 28
  store i64 %4527, i64* %PC, align 8
  %4528 = inttoptr i64 %4526 to i64*
  %4529 = load i64, i64* %4528, align 8
  store i64 %4529, i64* %RAX, align 8, !tbaa !2428
  %4530 = add i64 %4505, -32
  %4531 = add i64 %4507, 31
  store i64 %4531, i64* %PC, align 8
  %4532 = inttoptr i64 %4530 to i32*
  %4533 = load i32, i32* %4532, align 4
  %4534 = add i32 %4533, 1
  %4535 = zext i32 %4534 to i64
  store i64 %4535, i64* %RCX, align 8, !tbaa !2428
  %4536 = icmp eq i32 %4533, -1
  %4537 = icmp eq i32 %4534, 0
  %4538 = or i1 %4536, %4537
  %4539 = zext i1 %4538 to i8
  store i8 %4539, i8* %17, align 1, !tbaa !2433
  %4540 = and i32 %4534, 255
  %4541 = tail call i32 @llvm.ctpop.i32(i32 %4540) #11
  %4542 = trunc i32 %4541 to i8
  %4543 = and i8 %4542, 1
  %4544 = xor i8 %4543, 1
  store i8 %4544, i8* %24, align 1, !tbaa !2447
  %4545 = xor i32 %4533, %4534
  %4546 = lshr i32 %4545, 4
  %4547 = trunc i32 %4546 to i8
  %4548 = and i8 %4547, 1
  store i8 %4548, i8* %30, align 1, !tbaa !2451
  %4549 = zext i1 %4537 to i8
  store i8 %4549, i8* %33, align 1, !tbaa !2448
  %4550 = lshr i32 %4534, 31
  %4551 = trunc i32 %4550 to i8
  store i8 %4551, i8* %36, align 1, !tbaa !2449
  %4552 = lshr i32 %4533, 31
  %4553 = xor i32 %4550, %4552
  %4554 = add nuw nsw i32 %4553, %4550
  %4555 = icmp eq i32 %4554, 2
  %4556 = zext i1 %4555 to i8
  store i8 %4556, i8* %42, align 1, !tbaa !2450
  %4557 = sext i32 %4534 to i64
  store i64 %4557, i64* %RDX, align 8, !tbaa !2428
  %4558 = shl nsw i64 %4557, 3
  %4559 = add i64 %4558, %4529
  %4560 = add i64 %4507, 42
  store i64 %4560, i64* %PC, align 8
  %4561 = inttoptr i64 %4559 to double*
  store double %4525, double* %4561, align 8
  %4562 = load i64, i64* %RBP, align 8
  %4563 = add i64 %4562, -136
  %4564 = load i64, i64* %PC, align 8
  %4565 = add i64 %4564, 8
  store i64 %4565, i64* %PC, align 8
  %4566 = inttoptr i64 %4563 to double*
  %4567 = load double, double* %4566, align 8
  store double %4567, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4568 = add i64 %4562, -176
  %4569 = add i64 %4564, 16
  store i64 %4569, i64* %PC, align 8
  %4570 = inttoptr i64 %4568 to double*
  %4571 = load double, double* %4570, align 8
  %4572 = fadd double %4567, %4571
  store double %4572, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4573 = add i64 %4562, -120
  %4574 = add i64 %4564, 21
  store i64 %4574, i64* %PC, align 8
  %4575 = inttoptr i64 %4573 to double*
  store double %4572, double* %4575, align 8
  %4576 = load i64, i64* %RBP, align 8
  %4577 = add i64 %4576, -144
  %4578 = load i64, i64* %PC, align 8
  %4579 = add i64 %4578, 8
  store i64 %4579, i64* %PC, align 8
  %4580 = inttoptr i64 %4577 to double*
  %4581 = load double, double* %4580, align 8
  store double %4581, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4582 = add i64 %4576, -168
  %4583 = add i64 %4578, 16
  store i64 %4583, i64* %PC, align 8
  %4584 = inttoptr i64 %4582 to double*
  %4585 = load double, double* %4584, align 8
  %4586 = fsub double %4581, %4585
  store double %4586, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4587 = add i64 %4576, -128
  %4588 = add i64 %4578, 21
  store i64 %4588, i64* %PC, align 8
  %4589 = inttoptr i64 %4587 to double*
  store double %4586, double* %4589, align 8
  %4590 = load i64, i64* %RBP, align 8
  %4591 = add i64 %4590, -104
  %4592 = load i64, i64* %PC, align 8
  %4593 = add i64 %4592, 5
  store i64 %4593, i64* %PC, align 8
  %4594 = inttoptr i64 %4591 to double*
  %4595 = load double, double* %4594, align 8
  store double %4595, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4596 = add i64 %4590, -120
  %4597 = add i64 %4592, 10
  store i64 %4597, i64* %PC, align 8
  %4598 = inttoptr i64 %4596 to double*
  %4599 = load double, double* %4598, align 8
  %4600 = fmul double %4595, %4599
  store double %4600, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4601 = add i64 %4590, -112
  %4602 = add i64 %4592, 15
  store i64 %4602, i64* %PC, align 8
  %4603 = inttoptr i64 %4601 to double*
  %4604 = load double, double* %4603, align 8
  store double %4604, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %4605 = add i64 %4590, -128
  %4606 = add i64 %4592, 20
  store i64 %4606, i64* %PC, align 8
  %4607 = inttoptr i64 %4605 to double*
  %4608 = load double, double* %4607, align 8
  %4609 = fmul double %4604, %4608
  store double %4609, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %4610 = fsub double %4600, %4609
  store double %4610, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4611 = add i64 %4590, -16
  %4612 = add i64 %4592, 28
  store i64 %4612, i64* %PC, align 8
  %4613 = inttoptr i64 %4611 to i64*
  %4614 = load i64, i64* %4613, align 8
  store i64 %4614, i64* %RAX, align 8, !tbaa !2428
  %4615 = add i64 %4590, -40
  %4616 = add i64 %4592, 32
  store i64 %4616, i64* %PC, align 8
  %4617 = inttoptr i64 %4615 to i32*
  %4618 = load i32, i32* %4617, align 4
  %4619 = sext i32 %4618 to i64
  store i64 %4619, i64* %RDX, align 8, !tbaa !2428
  %4620 = shl nsw i64 %4619, 3
  %4621 = add i64 %4620, %4614
  %4622 = add i64 %4592, 37
  store i64 %4622, i64* %PC, align 8
  %4623 = inttoptr i64 %4621 to double*
  store double %4610, double* %4623, align 8
  %4624 = load i64, i64* %RBP, align 8
  %4625 = add i64 %4624, -104
  %4626 = load i64, i64* %PC, align 8
  %4627 = add i64 %4626, 5
  store i64 %4627, i64* %PC, align 8
  %4628 = inttoptr i64 %4625 to double*
  %4629 = load double, double* %4628, align 8
  store double %4629, double* %94, align 1, !tbaa !2452
  store double 0.000000e+00, double* %96, align 1, !tbaa !2452
  %4630 = add i64 %4624, -128
  %4631 = add i64 %4626, 10
  store i64 %4631, i64* %PC, align 8
  %4632 = inttoptr i64 %4630 to double*
  %4633 = load double, double* %4632, align 8
  %4634 = fmul double %4629, %4633
  store double %4634, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4635 = add i64 %4624, -112
  %4636 = add i64 %4626, 15
  store i64 %4636, i64* %PC, align 8
  %4637 = inttoptr i64 %4635 to double*
  %4638 = load double, double* %4637, align 8
  store double %4638, double* %289, align 1, !tbaa !2452
  store double 0.000000e+00, double* %291, align 1, !tbaa !2452
  %4639 = add i64 %4624, -120
  %4640 = add i64 %4626, 20
  store i64 %4640, i64* %PC, align 8
  %4641 = inttoptr i64 %4639 to double*
  %4642 = load double, double* %4641, align 8
  %4643 = fmul double %4638, %4642
  store double %4643, double* %289, align 1, !tbaa !2452
  store i64 0, i64* %290, align 1, !tbaa !2452
  %4644 = fadd double %4634, %4643
  store double %4644, double* %94, align 1, !tbaa !2452
  store i64 0, i64* %95, align 1, !tbaa !2452
  %4645 = add i64 %4624, -16
  %4646 = add i64 %4626, 28
  store i64 %4646, i64* %PC, align 8
  %4647 = inttoptr i64 %4645 to i64*
  %4648 = load i64, i64* %4647, align 8
  store i64 %4648, i64* %RAX, align 8, !tbaa !2428
  %4649 = add i64 %4624, -40
  %4650 = add i64 %4626, 31
  store i64 %4650, i64* %PC, align 8
  %4651 = inttoptr i64 %4649 to i32*
  %4652 = load i32, i32* %4651, align 4
  %4653 = add i32 %4652, 1
  %4654 = zext i32 %4653 to i64
  store i64 %4654, i64* %RCX, align 8, !tbaa !2428
  %4655 = icmp eq i32 %4652, -1
  %4656 = icmp eq i32 %4653, 0
  %4657 = or i1 %4655, %4656
  %4658 = zext i1 %4657 to i8
  store i8 %4658, i8* %17, align 1, !tbaa !2433
  %4659 = and i32 %4653, 255
  %4660 = tail call i32 @llvm.ctpop.i32(i32 %4659) #11
  %4661 = trunc i32 %4660 to i8
  %4662 = and i8 %4661, 1
  %4663 = xor i8 %4662, 1
  store i8 %4663, i8* %24, align 1, !tbaa !2447
  %4664 = xor i32 %4652, %4653
  %4665 = lshr i32 %4664, 4
  %4666 = trunc i32 %4665 to i8
  %4667 = and i8 %4666, 1
  store i8 %4667, i8* %30, align 1, !tbaa !2451
  %4668 = zext i1 %4656 to i8
  store i8 %4668, i8* %33, align 1, !tbaa !2448
  %4669 = lshr i32 %4653, 31
  %4670 = trunc i32 %4669 to i8
  store i8 %4670, i8* %36, align 1, !tbaa !2449
  %4671 = lshr i32 %4652, 31
  %4672 = xor i32 %4669, %4671
  %4673 = add nuw nsw i32 %4672, %4669
  %4674 = icmp eq i32 %4673, 2
  %4675 = zext i1 %4674 to i8
  store i8 %4675, i8* %42, align 1, !tbaa !2450
  %4676 = sext i32 %4653 to i64
  store i64 %4676, i64* %RDX, align 8, !tbaa !2428
  %4677 = shl nsw i64 %4676, 3
  %4678 = add i64 %4677, %4648
  %4679 = add i64 %4626, 42
  store i64 %4679, i64* %PC, align 8
  %4680 = inttoptr i64 %4678 to double*
  store double %4644, double* %4680, align 8
  %4681 = load i64, i64* %RBP, align 8
  %4682 = add i64 %4681, -28
  %4683 = load i64, i64* %PC, align 8
  %4684 = add i64 %4683, 3
  store i64 %4684, i64* %PC, align 8
  %4685 = inttoptr i64 %4682 to i32*
  %4686 = load i32, i32* %4685, align 4
  %4687 = add i32 %4686, 2
  %4688 = zext i32 %4687 to i64
  store i64 %4688, i64* %RAX, align 8, !tbaa !2428
  %4689 = icmp ugt i32 %4686, -3
  %4690 = zext i1 %4689 to i8
  store i8 %4690, i8* %17, align 1, !tbaa !2433
  %4691 = and i32 %4687, 255
  %4692 = tail call i32 @llvm.ctpop.i32(i32 %4691) #11
  %4693 = trunc i32 %4692 to i8
  %4694 = and i8 %4693, 1
  %4695 = xor i8 %4694, 1
  store i8 %4695, i8* %24, align 1, !tbaa !2447
  %4696 = xor i32 %4686, %4687
  %4697 = lshr i32 %4696, 4
  %4698 = trunc i32 %4697 to i8
  %4699 = and i8 %4698, 1
  store i8 %4699, i8* %30, align 1, !tbaa !2451
  %4700 = icmp eq i32 %4687, 0
  %4701 = zext i1 %4700 to i8
  store i8 %4701, i8* %33, align 1, !tbaa !2448
  %4702 = lshr i32 %4687, 31
  %4703 = trunc i32 %4702 to i8
  store i8 %4703, i8* %36, align 1, !tbaa !2449
  %4704 = lshr i32 %4686, 31
  %4705 = xor i32 %4702, %4704
  %4706 = add nuw nsw i32 %4705, %4702
  %4707 = icmp eq i32 %4706, 2
  %4708 = zext i1 %4707 to i8
  store i8 %4708, i8* %42, align 1, !tbaa !2450
  %4709 = add i64 %4683, 9
  store i64 %4709, i64* %PC, align 8
  store i32 %4687, i32* %4685, align 4
  %4710 = load i64, i64* %PC, align 8
  %4711 = add i64 %4710, -822
  store i64 %4711, i64* %PC, align 8, !tbaa !2428
  br label %block_403c90

block_403326:                                     ; preds = %block_403332, %block_403300
  %4712 = phi i64 [ %1167, %block_403332 ], [ %.pre, %block_403300 ]
  %4713 = load i64, i64* %RBP, align 8
  %4714 = add i64 %4713, -28
  %4715 = add i64 %4712, 3
  store i64 %4715, i64* %PC, align 8
  %4716 = inttoptr i64 %4714 to i32*
  %4717 = load i32, i32* %4716, align 4
  %4718 = zext i32 %4717 to i64
  store i64 %4718, i64* %RAX, align 8, !tbaa !2428
  %4719 = add i64 %4713, -8
  %4720 = add i64 %4712, 6
  store i64 %4720, i64* %PC, align 8
  %4721 = inttoptr i64 %4719 to i32*
  %4722 = load i32, i32* %4721, align 4
  %4723 = sub i32 %4717, %4722
  %4724 = icmp ult i32 %4717, %4722
  %4725 = zext i1 %4724 to i8
  store i8 %4725, i8* %17, align 1, !tbaa !2433
  %4726 = and i32 %4723, 255
  %4727 = tail call i32 @llvm.ctpop.i32(i32 %4726) #11
  %4728 = trunc i32 %4727 to i8
  %4729 = and i8 %4728, 1
  %4730 = xor i8 %4729, 1
  store i8 %4730, i8* %24, align 1, !tbaa !2447
  %4731 = xor i32 %4722, %4717
  %4732 = xor i32 %4731, %4723
  %4733 = lshr i32 %4732, 4
  %4734 = trunc i32 %4733 to i8
  %4735 = and i8 %4734, 1
  store i8 %4735, i8* %30, align 1, !tbaa !2451
  %4736 = icmp eq i32 %4723, 0
  %4737 = zext i1 %4736 to i8
  store i8 %4737, i8* %33, align 1, !tbaa !2448
  %4738 = lshr i32 %4723, 31
  %4739 = trunc i32 %4738 to i8
  store i8 %4739, i8* %36, align 1, !tbaa !2449
  %4740 = lshr i32 %4717, 31
  %4741 = lshr i32 %4722, 31
  %4742 = xor i32 %4741, %4740
  %4743 = xor i32 %4738, %4740
  %4744 = add nuw nsw i32 %4743, %4742
  %4745 = icmp eq i32 %4744, 2
  %4746 = zext i1 %4745 to i8
  store i8 %4746, i8* %42, align 1, !tbaa !2450
  %4747 = icmp ne i8 %4739, 0
  %4748 = xor i1 %4747, %4745
  %.v = select i1 %4748, i64 12, i64 599
  %4749 = add i64 %4712, %.v
  store i64 %4749, i64* %PC, align 8, !tbaa !2428
  br i1 %4748, label %block_403332, label %block_40357d
}

; Function Attrs: noinline
define %struct.Memory* @sub_402480_cftbsub(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_402480:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -120
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 112
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2433
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #11
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = xor i64 %8, 16
  %23 = xor i64 %22, %11
  %24 = lshr i64 %23, 4
  %25 = trunc i64 %24 to i8
  %26 = and i8 %25, 1
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %26, i8* %27, align 1, !tbaa !2451
  %28 = icmp eq i64 %11, 0
  %29 = zext i1 %28 to i8
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %29, i8* %30, align 1, !tbaa !2448
  %31 = lshr i64 %11, 63
  %32 = trunc i64 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = lshr i64 %8, 63
  %35 = xor i64 %31, %34
  %36 = add nuw nsw i64 %35, %34
  %37 = icmp eq i64 %36, 2
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %38, i8* %39, align 1, !tbaa !2450
  %40 = add i64 %7, -12
  %41 = load i32, i32* %EDI, align 4
  %42 = add i64 %10, 10
  store i64 %42, i64* %PC, align 8
  %43 = inttoptr i64 %40 to i32*
  store i32 %41, i32* %43, align 4
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -16
  %46 = load i64, i64* %RSI, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -24
  %52 = load i64, i64* %RDX, align 8
  %53 = load i64, i64* %PC, align 8
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC, align 8
  %55 = inttoptr i64 %51 to i64*
  store i64 %52, i64* %55, align 8
  %56 = load i64, i64* %RBP, align 8
  %57 = add i64 %56, -44
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 7
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %57 to i32*
  store i32 2, i32* %60, align 4
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -4
  %63 = load i64, i64* %PC, align 8
  %64 = add i64 %63, 4
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %62 to i32*
  %66 = load i32, i32* %65, align 4
  %67 = add i32 %66, -8
  %68 = icmp ult i32 %66, 8
  %69 = zext i1 %68 to i8
  store i8 %69, i8* %14, align 1, !tbaa !2433
  %70 = and i32 %67, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #11
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %21, align 1, !tbaa !2447
  %75 = xor i32 %66, %67
  %76 = lshr i32 %75, 4
  %77 = trunc i32 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %27, align 1, !tbaa !2451
  %79 = icmp eq i32 %67, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %30, align 1, !tbaa !2448
  %81 = lshr i32 %67, 31
  %82 = trunc i32 %81 to i8
  store i8 %82, i8* %33, align 1, !tbaa !2449
  %83 = lshr i32 %66, 31
  %84 = xor i32 %81, %83
  %85 = add nuw nsw i32 %84, %83
  %86 = icmp eq i32 %85, 2
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %39, align 1, !tbaa !2450
  %88 = icmp ne i8 %82, 0
  %89 = xor i1 %88, %86
  %90 = or i1 %79, %89
  %.v = select i1 %90, i64 86, i64 10
  %91 = add i64 %63, %.v
  store i64 %91, i64* %PC, align 8, !tbaa !2428
  br i1 %90, label %block_4024f0, label %block_4024a4

block_402757:                                     ; preds = %block_4024f0.block_402757_crit_edge, %block_402763
  %92 = phi i64 [ %586, %block_402763 ], [ %.pre3, %block_4024f0.block_402757_crit_edge ]
  %93 = load i64, i64* %RBP, align 8
  %94 = add i64 %93, -28
  %95 = add i64 %92, 3
  store i64 %95, i64* %PC, align 8
  %96 = inttoptr i64 %94 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = zext i32 %97 to i64
  store i64 %98, i64* %RAX, align 8, !tbaa !2428
  %99 = add i64 %93, -44
  %100 = add i64 %92, 6
  store i64 %100, i64* %PC, align 8
  %101 = inttoptr i64 %99 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = sub i32 %97, %102
  %104 = icmp ult i32 %97, %102
  %105 = zext i1 %104 to i8
  store i8 %105, i8* %14, align 1, !tbaa !2433
  %106 = and i32 %103, 255
  %107 = tail call i32 @llvm.ctpop.i32(i32 %106) #11
  %108 = trunc i32 %107 to i8
  %109 = and i8 %108, 1
  %110 = xor i8 %109, 1
  store i8 %110, i8* %21, align 1, !tbaa !2447
  %111 = xor i32 %102, %97
  %112 = xor i32 %111, %103
  %113 = lshr i32 %112, 4
  %114 = trunc i32 %113 to i8
  %115 = and i8 %114, 1
  store i8 %115, i8* %27, align 1, !tbaa !2451
  %116 = icmp eq i32 %103, 0
  %117 = zext i1 %116 to i8
  store i8 %117, i8* %30, align 1, !tbaa !2448
  %118 = lshr i32 %103, 31
  %119 = trunc i32 %118 to i8
  store i8 %119, i8* %33, align 1, !tbaa !2449
  %120 = lshr i32 %97, 31
  %121 = lshr i32 %102, 31
  %122 = xor i32 %121, %120
  %123 = xor i32 %118, %120
  %124 = add nuw nsw i32 %123, %122
  %125 = icmp eq i32 %124, 2
  %126 = zext i1 %125 to i8
  store i8 %126, i8* %39, align 1, !tbaa !2450
  %127 = icmp ne i8 %119, 0
  %128 = xor i1 %127, %125
  %.v8 = select i1 %128, i64 12, i64 269
  %129 = add i64 %92, %.v8
  store i64 %129, i64* %PC, align 8, !tbaa !2428
  br i1 %128, label %block_402763, label %block_402864

block_4024bb:                                     ; preds = %block_4024a4, %block_4024ca
  %130 = phi i64 [ %.pre, %block_4024a4 ], [ %631, %block_4024ca ]
  %MEMORY.1 = phi %struct.Memory* [ %718, %block_4024a4 ], [ %607, %block_4024ca ]
  %131 = load i64, i64* %RBP, align 8
  %132 = add i64 %131, -44
  %133 = add i64 %130, 3
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i32*
  %135 = load i32, i32* %134, align 4
  %136 = shl i32 %135, 2
  %137 = zext i32 %136 to i64
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = lshr i32 %135, 30
  %139 = trunc i32 %138 to i8
  %140 = and i8 %139, 1
  store i8 %140, i8* %14, align 1, !tbaa !2432
  %141 = and i32 %136, 252
  %142 = tail call i32 @llvm.ctpop.i32(i32 %141) #11
  %143 = trunc i32 %142 to i8
  %144 = and i8 %143, 1
  %145 = xor i8 %144, 1
  store i8 %145, i8* %21, align 1, !tbaa !2432
  store i8 0, i8* %27, align 1, !tbaa !2432
  %146 = icmp eq i32 %136, 0
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %30, align 1, !tbaa !2432
  %148 = lshr i32 %135, 29
  %149 = and i32 %148, 1
  %150 = trunc i32 %149 to i8
  store i8 %150, i8* %33, align 1, !tbaa !2432
  store i8 0, i8* %39, align 1, !tbaa !2432
  %151 = add i64 %131, -4
  %152 = add i64 %130, 9
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %151 to i32*
  %154 = load i32, i32* %153, align 4
  %155 = sub i32 %136, %154
  %156 = icmp ult i32 %136, %154
  %157 = zext i1 %156 to i8
  store i8 %157, i8* %14, align 1, !tbaa !2433
  %158 = and i32 %155, 255
  %159 = tail call i32 @llvm.ctpop.i32(i32 %158) #11
  %160 = trunc i32 %159 to i8
  %161 = and i8 %160, 1
  %162 = xor i8 %161, 1
  store i8 %162, i8* %21, align 1, !tbaa !2447
  %163 = xor i32 %154, %136
  %164 = xor i32 %163, %155
  %165 = lshr i32 %164, 4
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  store i8 %167, i8* %27, align 1, !tbaa !2451
  %168 = icmp eq i32 %155, 0
  %169 = zext i1 %168 to i8
  store i8 %169, i8* %30, align 1, !tbaa !2448
  %170 = lshr i32 %155, 31
  %171 = trunc i32 %170 to i8
  store i8 %171, i8* %33, align 1, !tbaa !2449
  %172 = lshr i32 %154, 31
  %173 = xor i32 %172, %149
  %174 = xor i32 %170, %149
  %175 = add nuw nsw i32 %174, %173
  %176 = icmp eq i32 %175, 2
  %177 = zext i1 %176 to i8
  store i8 %177, i8* %39, align 1, !tbaa !2450
  %178 = icmp ne i8 %171, 0
  %179 = xor i1 %178, %176
  %.v5 = select i1 %179, i64 15, i64 48
  %180 = add i64 %130, %.v5
  store i64 %180, i64* %PC, align 8, !tbaa !2428
  br i1 %179, label %block_4024ca, label %block_4024eb

block_402763:                                     ; preds = %block_402757
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %181 = add i64 %129, 13
  store i64 %181, i64* %PC, align 8
  %182 = load i32, i32* %96, align 4
  %183 = zext i32 %182 to i64
  store i64 %183, i64* %RCX, align 8, !tbaa !2428
  %184 = add i64 %129, 16
  store i64 %184, i64* %PC, align 8
  %185 = load i32, i32* %101, align 4
  %186 = add i32 %185, %182
  %187 = zext i32 %186 to i64
  store i64 %187, i64* %RCX, align 8, !tbaa !2428
  %188 = icmp ult i32 %186, %182
  %189 = icmp ult i32 %186, %185
  %190 = or i1 %188, %189
  %191 = zext i1 %190 to i8
  store i8 %191, i8* %14, align 1, !tbaa !2433
  %192 = and i32 %186, 255
  %193 = tail call i32 @llvm.ctpop.i32(i32 %192) #11
  %194 = trunc i32 %193 to i8
  %195 = and i8 %194, 1
  %196 = xor i8 %195, 1
  store i8 %196, i8* %21, align 1, !tbaa !2447
  %197 = xor i32 %185, %182
  %198 = xor i32 %197, %186
  %199 = lshr i32 %198, 4
  %200 = trunc i32 %199 to i8
  %201 = and i8 %200, 1
  store i8 %201, i8* %27, align 1, !tbaa !2451
  %202 = icmp eq i32 %186, 0
  %203 = zext i1 %202 to i8
  store i8 %203, i8* %30, align 1, !tbaa !2448
  %204 = lshr i32 %186, 31
  %205 = trunc i32 %204 to i8
  store i8 %205, i8* %33, align 1, !tbaa !2449
  %206 = lshr i32 %182, 31
  %207 = lshr i32 %185, 31
  %208 = xor i32 %204, %206
  %209 = xor i32 %204, %207
  %210 = add nuw nsw i32 %208, %209
  %211 = icmp eq i32 %210, 2
  %212 = zext i1 %211 to i8
  store i8 %212, i8* %39, align 1, !tbaa !2450
  %213 = add i64 %93, -32
  %214 = add i64 %129, 19
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %213 to i32*
  store i32 %186, i32* %215, align 4
  %216 = load i64, i64* %RBP, align 8
  %217 = add i64 %216, -16
  %218 = load i64, i64* %PC, align 8
  %219 = add i64 %218, 4
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %217 to i64*
  %221 = load i64, i64* %220, align 8
  store i64 %221, i64* %RDX, align 8, !tbaa !2428
  %222 = add i64 %216, -28
  %223 = add i64 %218, 8
  store i64 %223, i64* %PC, align 8
  %224 = inttoptr i64 %222 to i32*
  %225 = load i32, i32* %224, align 4
  %226 = sext i32 %225 to i64
  store i64 %226, i64* %RSI, align 8, !tbaa !2428
  %227 = shl nsw i64 %226, 3
  %228 = add i64 %227, %221
  %229 = add i64 %218, 13
  store i64 %229, i64* %PC, align 8
  %230 = inttoptr i64 %228 to double*
  %231 = load double, double* %230, align 8
  store double %231, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %232 = add i64 %218, 17
  store i64 %232, i64* %PC, align 8
  %233 = load i64, i64* %220, align 8
  store i64 %233, i64* %RDX, align 8, !tbaa !2428
  %234 = add i64 %216, -32
  %235 = add i64 %218, 21
  store i64 %235, i64* %PC, align 8
  %236 = inttoptr i64 %234 to i32*
  %237 = load i32, i32* %236, align 4
  %238 = sext i32 %237 to i64
  store i64 %238, i64* %RSI, align 8, !tbaa !2428
  %239 = shl nsw i64 %238, 3
  %240 = add i64 %239, %233
  %241 = add i64 %218, 26
  store i64 %241, i64* %PC, align 8
  %242 = inttoptr i64 %240 to double*
  %243 = load double, double* %242, align 8
  %244 = fsub double %231, %243
  store double %244, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %245 = add i64 %216, -56
  %246 = add i64 %218, 31
  store i64 %246, i64* %PC, align 8
  %247 = inttoptr i64 %245 to double*
  store double %244, double* %247, align 8
  %248 = load i64, i64* %RBP, align 8
  %249 = add i64 %248, -16
  %250 = load i64, i64* %PC, align 8
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252, align 8
  store i64 %253, i64* %RDX, align 8, !tbaa !2428
  %254 = add i64 %248, -28
  %255 = add i64 %250, 7
  store i64 %255, i64* %PC, align 8
  %256 = inttoptr i64 %254 to i32*
  %257 = load i32, i32* %256, align 4
  %258 = add i32 %257, 1
  %259 = zext i32 %258 to i64
  store i64 %259, i64* %RCX, align 8, !tbaa !2428
  %260 = icmp eq i32 %257, -1
  %261 = icmp eq i32 %258, 0
  %262 = or i1 %260, %261
  %263 = zext i1 %262 to i8
  store i8 %263, i8* %14, align 1, !tbaa !2433
  %264 = and i32 %258, 255
  %265 = tail call i32 @llvm.ctpop.i32(i32 %264) #11
  %266 = trunc i32 %265 to i8
  %267 = and i8 %266, 1
  %268 = xor i8 %267, 1
  store i8 %268, i8* %21, align 1, !tbaa !2447
  %269 = xor i32 %257, %258
  %270 = lshr i32 %269, 4
  %271 = trunc i32 %270 to i8
  %272 = and i8 %271, 1
  store i8 %272, i8* %27, align 1, !tbaa !2451
  %273 = zext i1 %261 to i8
  store i8 %273, i8* %30, align 1, !tbaa !2448
  %274 = lshr i32 %258, 31
  %275 = trunc i32 %274 to i8
  store i8 %275, i8* %33, align 1, !tbaa !2449
  %276 = lshr i32 %257, 31
  %277 = xor i32 %274, %276
  %278 = add nuw nsw i32 %277, %274
  %279 = icmp eq i32 %278, 2
  %280 = zext i1 %279 to i8
  store i8 %280, i8* %39, align 1, !tbaa !2450
  %281 = sext i32 %258 to i64
  store i64 %281, i64* %RSI, align 8, !tbaa !2428
  %282 = shl nsw i64 %281, 3
  %283 = add i64 %282, %253
  %284 = add i64 %250, 18
  store i64 %284, i64* %PC, align 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285, align 8
  %287 = load i64, i64* %RAX, align 8
  %288 = xor i64 %287, %286
  store i64 %288, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  %289 = trunc i64 %288 to i32
  %290 = and i32 %289, 255
  %291 = tail call i32 @llvm.ctpop.i32(i32 %290) #11
  %292 = trunc i32 %291 to i8
  %293 = and i8 %292, 1
  %294 = xor i8 %293, 1
  store i8 %294, i8* %21, align 1, !tbaa !2447
  %295 = icmp eq i64 %288, 0
  %296 = zext i1 %295 to i8
  store i8 %296, i8* %30, align 1, !tbaa !2448
  %297 = lshr i64 %288, 63
  %298 = trunc i64 %297 to i8
  store i8 %298, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2451
  store i64 %288, i64* %1683, align 1, !tbaa !2428
  store i64 0, i64* %1681, align 1, !tbaa !2428
  %299 = add i64 %250, 35
  store i64 %299, i64* %PC, align 8
  %300 = load i64, i64* %252, align 8
  store i64 %300, i64* %RDX, align 8, !tbaa !2428
  %301 = add i64 %248, -32
  %302 = add i64 %250, 38
  store i64 %302, i64* %PC, align 8
  %303 = inttoptr i64 %301 to i32*
  %304 = load i32, i32* %303, align 4
  %305 = add i32 %304, 1
  %306 = zext i32 %305 to i64
  store i64 %306, i64* %RCX, align 8, !tbaa !2428
  %307 = icmp eq i32 %304, -1
  %308 = icmp eq i32 %305, 0
  %309 = or i1 %307, %308
  %310 = zext i1 %309 to i8
  store i8 %310, i8* %14, align 1, !tbaa !2433
  %311 = and i32 %305, 255
  %312 = tail call i32 @llvm.ctpop.i32(i32 %311) #11
  %313 = trunc i32 %312 to i8
  %314 = and i8 %313, 1
  %315 = xor i8 %314, 1
  store i8 %315, i8* %21, align 1, !tbaa !2447
  %316 = xor i32 %304, %305
  %317 = lshr i32 %316, 4
  %318 = trunc i32 %317 to i8
  %319 = and i8 %318, 1
  store i8 %319, i8* %27, align 1, !tbaa !2451
  %320 = zext i1 %308 to i8
  store i8 %320, i8* %30, align 1, !tbaa !2448
  %321 = lshr i32 %305, 31
  %322 = trunc i32 %321 to i8
  store i8 %322, i8* %33, align 1, !tbaa !2449
  %323 = lshr i32 %304, 31
  %324 = xor i32 %321, %323
  %325 = add nuw nsw i32 %324, %321
  %326 = icmp eq i32 %325, 2
  %327 = zext i1 %326 to i8
  store i8 %327, i8* %39, align 1, !tbaa !2450
  %328 = sext i32 %305 to i64
  store i64 %328, i64* %RSI, align 8, !tbaa !2428
  %329 = shl nsw i64 %328, 3
  %330 = add i64 %329, %300
  %331 = add i64 %250, 49
  store i64 %331, i64* %PC, align 8
  %332 = bitcast i64 %288 to double
  %333 = inttoptr i64 %330 to double*
  %334 = load double, double* %333, align 8
  %335 = fadd double %332, %334
  store double %335, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %336 = load i64, i64* %RBP, align 8
  %337 = add i64 %336, -64
  %338 = add i64 %250, 54
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %337 to double*
  store double %335, double* %339, align 8
  %340 = load i64, i64* %RBP, align 8
  %341 = add i64 %340, -16
  %342 = load i64, i64* %PC, align 8
  %343 = add i64 %342, 4
  store i64 %343, i64* %PC, align 8
  %344 = inttoptr i64 %341 to i64*
  %345 = load i64, i64* %344, align 8
  store i64 %345, i64* %RDX, align 8, !tbaa !2428
  %346 = add i64 %340, -32
  %347 = add i64 %342, 8
  store i64 %347, i64* %PC, align 8
  %348 = inttoptr i64 %346 to i32*
  %349 = load i32, i32* %348, align 4
  %350 = sext i32 %349 to i64
  store i64 %350, i64* %RSI, align 8, !tbaa !2428
  %351 = shl nsw i64 %350, 3
  %352 = add i64 %351, %345
  %353 = add i64 %342, 13
  store i64 %353, i64* %PC, align 8
  %354 = inttoptr i64 %352 to double*
  %355 = load double, double* %354, align 8
  store double %355, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %356 = add i64 %342, 17
  store i64 %356, i64* %PC, align 8
  %357 = load i64, i64* %344, align 8
  store i64 %357, i64* %RDX, align 8, !tbaa !2428
  %358 = add i64 %340, -28
  %359 = add i64 %342, 21
  store i64 %359, i64* %PC, align 8
  %360 = inttoptr i64 %358 to i32*
  %361 = load i32, i32* %360, align 4
  %362 = sext i32 %361 to i64
  store i64 %362, i64* %RSI, align 8, !tbaa !2428
  %363 = shl nsw i64 %362, 3
  %364 = add i64 %363, %357
  %365 = add i64 %342, 26
  store i64 %365, i64* %PC, align 8
  %366 = inttoptr i64 %364 to double*
  %367 = load double, double* %366, align 8
  %368 = fadd double %355, %367
  store double %368, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %369 = add i64 %342, 31
  store i64 %369, i64* %PC, align 8
  store double %368, double* %366, align 8
  %370 = load i64, i64* %RBP, align 8
  %371 = add i64 %370, -16
  %372 = load i64, i64* %PC, align 8
  %373 = add i64 %372, 4
  store i64 %373, i64* %PC, align 8
  %374 = inttoptr i64 %371 to i64*
  %375 = load i64, i64* %374, align 8
  store i64 %375, i64* %RDX, align 8, !tbaa !2428
  %376 = add i64 %370, -28
  %377 = add i64 %372, 7
  store i64 %377, i64* %PC, align 8
  %378 = inttoptr i64 %376 to i32*
  %379 = load i32, i32* %378, align 4
  %380 = add i32 %379, 1
  %381 = zext i32 %380 to i64
  store i64 %381, i64* %RCX, align 8, !tbaa !2428
  %382 = icmp eq i32 %379, -1
  %383 = icmp eq i32 %380, 0
  %384 = or i1 %382, %383
  %385 = zext i1 %384 to i8
  store i8 %385, i8* %14, align 1, !tbaa !2433
  %386 = and i32 %380, 255
  %387 = tail call i32 @llvm.ctpop.i32(i32 %386) #11
  %388 = trunc i32 %387 to i8
  %389 = and i8 %388, 1
  %390 = xor i8 %389, 1
  store i8 %390, i8* %21, align 1, !tbaa !2447
  %391 = xor i32 %379, %380
  %392 = lshr i32 %391, 4
  %393 = trunc i32 %392 to i8
  %394 = and i8 %393, 1
  store i8 %394, i8* %27, align 1, !tbaa !2451
  %395 = zext i1 %383 to i8
  store i8 %395, i8* %30, align 1, !tbaa !2448
  %396 = lshr i32 %380, 31
  %397 = trunc i32 %396 to i8
  store i8 %397, i8* %33, align 1, !tbaa !2449
  %398 = lshr i32 %379, 31
  %399 = xor i32 %396, %398
  %400 = add nuw nsw i32 %399, %396
  %401 = icmp eq i32 %400, 2
  %402 = zext i1 %401 to i8
  store i8 %402, i8* %39, align 1, !tbaa !2450
  %403 = sext i32 %380 to i64
  store i64 %403, i64* %RSI, align 8, !tbaa !2428
  %404 = shl nsw i64 %403, 3
  %405 = add i64 %404, %375
  %406 = add i64 %372, 18
  store i64 %406, i64* %PC, align 8
  %407 = inttoptr i64 %405 to i64*
  %408 = load i64, i64* %407, align 8
  %409 = load i64, i64* %RAX, align 8
  %410 = xor i64 %409, %408
  store i64 %410, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  %411 = trunc i64 %410 to i32
  %412 = and i32 %411, 255
  %413 = tail call i32 @llvm.ctpop.i32(i32 %412) #11
  %414 = trunc i32 %413 to i8
  %415 = and i8 %414, 1
  %416 = xor i8 %415, 1
  store i8 %416, i8* %21, align 1, !tbaa !2447
  %417 = icmp eq i64 %410, 0
  %418 = zext i1 %417 to i8
  store i8 %418, i8* %30, align 1, !tbaa !2448
  %419 = lshr i64 %410, 63
  %420 = trunc i64 %419 to i8
  store i8 %420, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2451
  store i64 %410, i64* %1683, align 1, !tbaa !2428
  store i64 0, i64* %1681, align 1, !tbaa !2428
  %421 = add i64 %372, 35
  store i64 %421, i64* %PC, align 8
  %422 = load i64, i64* %374, align 8
  store i64 %422, i64* %RAX, align 8, !tbaa !2428
  %423 = add i64 %370, -32
  %424 = add i64 %372, 38
  store i64 %424, i64* %PC, align 8
  %425 = inttoptr i64 %423 to i32*
  %426 = load i32, i32* %425, align 4
  %427 = add i32 %426, 1
  %428 = zext i32 %427 to i64
  store i64 %428, i64* %RCX, align 8, !tbaa !2428
  %429 = icmp eq i32 %426, -1
  %430 = icmp eq i32 %427, 0
  %431 = or i1 %429, %430
  %432 = zext i1 %431 to i8
  store i8 %432, i8* %14, align 1, !tbaa !2433
  %433 = and i32 %427, 255
  %434 = tail call i32 @llvm.ctpop.i32(i32 %433) #11
  %435 = trunc i32 %434 to i8
  %436 = and i8 %435, 1
  %437 = xor i8 %436, 1
  store i8 %437, i8* %21, align 1, !tbaa !2447
  %438 = xor i32 %426, %427
  %439 = lshr i32 %438, 4
  %440 = trunc i32 %439 to i8
  %441 = and i8 %440, 1
  store i8 %441, i8* %27, align 1, !tbaa !2451
  %442 = zext i1 %430 to i8
  store i8 %442, i8* %30, align 1, !tbaa !2448
  %443 = lshr i32 %427, 31
  %444 = trunc i32 %443 to i8
  store i8 %444, i8* %33, align 1, !tbaa !2449
  %445 = lshr i32 %426, 31
  %446 = xor i32 %443, %445
  %447 = add nuw nsw i32 %446, %443
  %448 = icmp eq i32 %447, 2
  %449 = zext i1 %448 to i8
  store i8 %449, i8* %39, align 1, !tbaa !2450
  %450 = sext i32 %427 to i64
  store i64 %450, i64* %RDX, align 8, !tbaa !2428
  %451 = shl nsw i64 %450, 3
  %452 = add i64 %451, %422
  %453 = add i64 %372, 49
  store i64 %453, i64* %PC, align 8
  %454 = bitcast i64 %410 to double
  %455 = inttoptr i64 %452 to double*
  %456 = load double, double* %455, align 8
  %457 = fsub double %454, %456
  store double %457, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %458 = load i64, i64* %RBP, align 8
  %459 = add i64 %458, -16
  %460 = add i64 %372, 53
  store i64 %460, i64* %PC, align 8
  %461 = inttoptr i64 %459 to i64*
  %462 = load i64, i64* %461, align 8
  store i64 %462, i64* %RAX, align 8, !tbaa !2428
  %463 = add i64 %458, -28
  %464 = add i64 %372, 56
  store i64 %464, i64* %PC, align 8
  %465 = inttoptr i64 %463 to i32*
  %466 = load i32, i32* %465, align 4
  %467 = add i32 %466, 1
  %468 = zext i32 %467 to i64
  store i64 %468, i64* %RCX, align 8, !tbaa !2428
  %469 = icmp eq i32 %466, -1
  %470 = icmp eq i32 %467, 0
  %471 = or i1 %469, %470
  %472 = zext i1 %471 to i8
  store i8 %472, i8* %14, align 1, !tbaa !2433
  %473 = and i32 %467, 255
  %474 = tail call i32 @llvm.ctpop.i32(i32 %473) #11
  %475 = trunc i32 %474 to i8
  %476 = and i8 %475, 1
  %477 = xor i8 %476, 1
  store i8 %477, i8* %21, align 1, !tbaa !2447
  %478 = xor i32 %466, %467
  %479 = lshr i32 %478, 4
  %480 = trunc i32 %479 to i8
  %481 = and i8 %480, 1
  store i8 %481, i8* %27, align 1, !tbaa !2451
  %482 = zext i1 %470 to i8
  store i8 %482, i8* %30, align 1, !tbaa !2448
  %483 = lshr i32 %467, 31
  %484 = trunc i32 %483 to i8
  store i8 %484, i8* %33, align 1, !tbaa !2449
  %485 = lshr i32 %466, 31
  %486 = xor i32 %483, %485
  %487 = add nuw nsw i32 %486, %483
  %488 = icmp eq i32 %487, 2
  %489 = zext i1 %488 to i8
  store i8 %489, i8* %39, align 1, !tbaa !2450
  %490 = sext i32 %467 to i64
  store i64 %490, i64* %RDX, align 8, !tbaa !2428
  %491 = shl nsw i64 %490, 3
  %492 = add i64 %491, %462
  %493 = add i64 %372, 67
  store i64 %493, i64* %PC, align 8
  %494 = inttoptr i64 %492 to double*
  store double %457, double* %494, align 8
  %495 = load i64, i64* %RBP, align 8
  %496 = add i64 %495, -56
  %497 = load i64, i64* %PC, align 8
  %498 = add i64 %497, 5
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %496 to i64*
  %500 = load i64, i64* %499, align 8
  store i64 %500, i64* %1683, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %501 = add i64 %495, -16
  %502 = add i64 %497, 9
  store i64 %502, i64* %PC, align 8
  %503 = inttoptr i64 %501 to i64*
  %504 = load i64, i64* %503, align 8
  store i64 %504, i64* %RAX, align 8, !tbaa !2428
  %505 = add i64 %495, -32
  %506 = add i64 %497, 13
  store i64 %506, i64* %PC, align 8
  %507 = inttoptr i64 %505 to i32*
  %508 = load i32, i32* %507, align 4
  %509 = sext i32 %508 to i64
  store i64 %509, i64* %RDX, align 8, !tbaa !2428
  %510 = shl nsw i64 %509, 3
  %511 = add i64 %510, %504
  %512 = add i64 %497, 18
  store i64 %512, i64* %PC, align 8
  %513 = inttoptr i64 %511 to i64*
  store i64 %500, i64* %513, align 8
  %514 = load i64, i64* %RBP, align 8
  %515 = add i64 %514, -64
  %516 = load i64, i64* %PC, align 8
  %517 = add i64 %516, 5
  store i64 %517, i64* %PC, align 8
  %518 = inttoptr i64 %515 to i64*
  %519 = load i64, i64* %518, align 8
  store i64 %519, i64* %1683, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %520 = add i64 %514, -16
  %521 = add i64 %516, 9
  store i64 %521, i64* %PC, align 8
  %522 = inttoptr i64 %520 to i64*
  %523 = load i64, i64* %522, align 8
  store i64 %523, i64* %RAX, align 8, !tbaa !2428
  %524 = add i64 %514, -32
  %525 = add i64 %516, 12
  store i64 %525, i64* %PC, align 8
  %526 = inttoptr i64 %524 to i32*
  %527 = load i32, i32* %526, align 4
  %528 = add i32 %527, 1
  %529 = zext i32 %528 to i64
  store i64 %529, i64* %RCX, align 8, !tbaa !2428
  %530 = icmp eq i32 %527, -1
  %531 = icmp eq i32 %528, 0
  %532 = or i1 %530, %531
  %533 = zext i1 %532 to i8
  store i8 %533, i8* %14, align 1, !tbaa !2433
  %534 = and i32 %528, 255
  %535 = tail call i32 @llvm.ctpop.i32(i32 %534) #11
  %536 = trunc i32 %535 to i8
  %537 = and i8 %536, 1
  %538 = xor i8 %537, 1
  store i8 %538, i8* %21, align 1, !tbaa !2447
  %539 = xor i32 %527, %528
  %540 = lshr i32 %539, 4
  %541 = trunc i32 %540 to i8
  %542 = and i8 %541, 1
  store i8 %542, i8* %27, align 1, !tbaa !2451
  %543 = zext i1 %531 to i8
  store i8 %543, i8* %30, align 1, !tbaa !2448
  %544 = lshr i32 %528, 31
  %545 = trunc i32 %544 to i8
  store i8 %545, i8* %33, align 1, !tbaa !2449
  %546 = lshr i32 %527, 31
  %547 = xor i32 %544, %546
  %548 = add nuw nsw i32 %547, %544
  %549 = icmp eq i32 %548, 2
  %550 = zext i1 %549 to i8
  store i8 %550, i8* %39, align 1, !tbaa !2450
  %551 = sext i32 %528 to i64
  store i64 %551, i64* %RDX, align 8, !tbaa !2428
  %552 = shl nsw i64 %551, 3
  %553 = add i64 %552, %523
  %554 = add i64 %516, 23
  store i64 %554, i64* %PC, align 8
  %555 = inttoptr i64 %553 to i64*
  store i64 %519, i64* %555, align 8
  %556 = load i64, i64* %RBP, align 8
  %557 = add i64 %556, -28
  %558 = load i64, i64* %PC, align 8
  %559 = add i64 %558, 3
  store i64 %559, i64* %PC, align 8
  %560 = inttoptr i64 %557 to i32*
  %561 = load i32, i32* %560, align 4
  %562 = add i32 %561, 2
  %563 = zext i32 %562 to i64
  store i64 %563, i64* %RAX, align 8, !tbaa !2428
  %564 = icmp ugt i32 %561, -3
  %565 = zext i1 %564 to i8
  store i8 %565, i8* %14, align 1, !tbaa !2433
  %566 = and i32 %562, 255
  %567 = tail call i32 @llvm.ctpop.i32(i32 %566) #11
  %568 = trunc i32 %567 to i8
  %569 = and i8 %568, 1
  %570 = xor i8 %569, 1
  store i8 %570, i8* %21, align 1, !tbaa !2447
  %571 = xor i32 %561, %562
  %572 = lshr i32 %571, 4
  %573 = trunc i32 %572 to i8
  %574 = and i8 %573, 1
  store i8 %574, i8* %27, align 1, !tbaa !2451
  %575 = icmp eq i32 %562, 0
  %576 = zext i1 %575 to i8
  store i8 %576, i8* %30, align 1, !tbaa !2448
  %577 = lshr i32 %562, 31
  %578 = trunc i32 %577 to i8
  store i8 %578, i8* %33, align 1, !tbaa !2449
  %579 = lshr i32 %561, 31
  %580 = xor i32 %577, %579
  %581 = add nuw nsw i32 %580, %577
  %582 = icmp eq i32 %581, 2
  %583 = zext i1 %582 to i8
  store i8 %583, i8* %39, align 1, !tbaa !2450
  %584 = add i64 %558, 9
  store i64 %584, i64* %PC, align 8
  store i32 %562, i32* %560, align 4
  %585 = load i64, i64* %PC, align 8
  %586 = add i64 %585, -264
  store i64 %586, i64* %PC, align 8, !tbaa !2428
  br label %block_402757

block_40274b:                                     ; preds = %block_402506
  %587 = add i64 %701, 286
  br label %block_402869

block_4024ca:                                     ; preds = %block_4024bb
  %588 = add i64 %180, 3
  store i64 %588, i64* %PC, align 8
  %589 = load i32, i32* %153, align 4
  %590 = zext i32 %589 to i64
  store i64 %590, i64* %RDI, align 8, !tbaa !2428
  %591 = add i64 %180, 6
  store i64 %591, i64* %PC, align 8
  %592 = load i32, i32* %134, align 4
  %593 = zext i32 %592 to i64
  store i64 %593, i64* %RSI, align 8, !tbaa !2428
  %594 = add i64 %131, -16
  %595 = add i64 %180, 10
  store i64 %595, i64* %PC, align 8
  %596 = inttoptr i64 %594 to i64*
  %597 = load i64, i64* %596, align 8
  store i64 %597, i64* %RDX, align 8, !tbaa !2428
  %598 = add i64 %131, -24
  %599 = add i64 %180, 14
  store i64 %599, i64* %PC, align 8
  %600 = inttoptr i64 %598 to i64*
  %601 = load i64, i64* %600, align 8
  store i64 %601, i64* %RCX, align 8, !tbaa !2428
  %602 = add i64 %180, 3638
  %603 = add i64 %180, 19
  %604 = load i64, i64* %RSP, align 8, !tbaa !2428
  %605 = add i64 %604, -8
  %606 = inttoptr i64 %605 to i64*
  store i64 %603, i64* %606, align 8
  store i64 %605, i64* %RSP, align 8, !tbaa !2428
  store i64 %602, i64* %PC, align 8, !tbaa !2428
  %607 = tail call %struct.Memory* @sub_403300_cftmdl_renamed_(%struct.State* nonnull %0, i64 %602, %struct.Memory* %MEMORY.1)
  %608 = load i64, i64* %RBP, align 8
  %609 = add i64 %608, -44
  %610 = load i64, i64* %PC, align 8
  %611 = add i64 %610, 3
  store i64 %611, i64* %PC, align 8
  %612 = inttoptr i64 %609 to i32*
  %613 = load i32, i32* %612, align 4
  %614 = shl i32 %613, 2
  %615 = zext i32 %614 to i64
  store i64 %615, i64* %RSI, align 8, !tbaa !2428
  %616 = lshr i32 %613, 30
  %617 = trunc i32 %616 to i8
  %618 = and i8 %617, 1
  store i8 %618, i8* %14, align 1, !tbaa !2432
  %619 = and i32 %614, 252
  %620 = tail call i32 @llvm.ctpop.i32(i32 %619) #11
  %621 = trunc i32 %620 to i8
  %622 = and i8 %621, 1
  %623 = xor i8 %622, 1
  store i8 %623, i8* %21, align 1, !tbaa !2432
  store i8 0, i8* %27, align 1, !tbaa !2432
  %624 = icmp eq i32 %614, 0
  %625 = zext i1 %624 to i8
  store i8 %625, i8* %30, align 1, !tbaa !2432
  %626 = lshr i32 %613, 29
  %627 = trunc i32 %626 to i8
  %628 = and i8 %627, 1
  store i8 %628, i8* %33, align 1, !tbaa !2432
  store i8 0, i8* %39, align 1, !tbaa !2432
  %629 = add i64 %610, 9
  store i64 %629, i64* %PC, align 8
  store i32 %614, i32* %612, align 4
  %630 = load i64, i64* %PC, align 8
  %631 = add i64 %630, -43
  store i64 %631, i64* %PC, align 8, !tbaa !2428
  br label %block_4024bb

block_402869:                                     ; preds = %block_402864, %block_40274b
  %.sink = phi i64 [ %725, %block_402864 ], [ %587, %block_40274b ]
  %632 = load i64, i64* %RSP, align 8
  %633 = add i64 %632, 112
  store i64 %633, i64* %RSP, align 8, !tbaa !2428
  %634 = icmp ugt i64 %632, -113
  %635 = zext i1 %634 to i8
  store i8 %635, i8* %14, align 1, !tbaa !2433
  %636 = trunc i64 %633 to i32
  %637 = and i32 %636, 255
  %638 = tail call i32 @llvm.ctpop.i32(i32 %637) #11
  %639 = trunc i32 %638 to i8
  %640 = and i8 %639, 1
  %641 = xor i8 %640, 1
  store i8 %641, i8* %21, align 1, !tbaa !2447
  %642 = xor i64 %632, 16
  %643 = xor i64 %642, %633
  %644 = lshr i64 %643, 4
  %645 = trunc i64 %644 to i8
  %646 = and i8 %645, 1
  store i8 %646, i8* %27, align 1, !tbaa !2451
  %647 = icmp eq i64 %633, 0
  %648 = zext i1 %647 to i8
  store i8 %648, i8* %30, align 1, !tbaa !2448
  %649 = lshr i64 %633, 63
  %650 = trunc i64 %649 to i8
  store i8 %650, i8* %33, align 1, !tbaa !2449
  %651 = lshr i64 %632, 63
  %652 = xor i64 %649, %651
  %653 = add nuw nsw i64 %652, %649
  %654 = icmp eq i64 %653, 2
  %655 = zext i1 %654 to i8
  store i8 %655, i8* %39, align 1, !tbaa !2450
  %656 = add i64 %.sink, 5
  store i64 %656, i64* %PC, align 8
  %657 = add i64 %632, 120
  %658 = inttoptr i64 %633 to i64*
  %659 = load i64, i64* %658, align 8
  store i64 %659, i64* %RBP, align 8, !tbaa !2428
  store i64 %657, i64* %RSP, align 8, !tbaa !2428
  %660 = add i64 %.sink, 6
  store i64 %660, i64* %PC, align 8
  %661 = inttoptr i64 %657 to i64*
  %662 = load i64, i64* %661, align 8
  store i64 %662, i64* %PC, align 8, !tbaa !2428
  %663 = add i64 %632, 128
  store i64 %663, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_402506:                                     ; preds = %block_4024f0.block_402506_crit_edge, %block_402512
  %664 = phi i64 [ %1627, %block_402512 ], [ %.pre3, %block_4024f0.block_402506_crit_edge ]
  %665 = load i64, i64* %RBP, align 8
  %666 = add i64 %665, -28
  %667 = add i64 %664, 3
  store i64 %667, i64* %PC, align 8
  %668 = inttoptr i64 %666 to i32*
  %669 = load i32, i32* %668, align 4
  %670 = zext i32 %669 to i64
  store i64 %670, i64* %RAX, align 8, !tbaa !2428
  %671 = add i64 %665, -44
  %672 = add i64 %664, 6
  store i64 %672, i64* %PC, align 8
  %673 = inttoptr i64 %671 to i32*
  %674 = load i32, i32* %673, align 4
  %675 = sub i32 %669, %674
  %676 = icmp ult i32 %669, %674
  %677 = zext i1 %676 to i8
  store i8 %677, i8* %14, align 1, !tbaa !2433
  %678 = and i32 %675, 255
  %679 = tail call i32 @llvm.ctpop.i32(i32 %678) #11
  %680 = trunc i32 %679 to i8
  %681 = and i8 %680, 1
  %682 = xor i8 %681, 1
  store i8 %682, i8* %21, align 1, !tbaa !2447
  %683 = xor i32 %674, %669
  %684 = xor i32 %683, %675
  %685 = lshr i32 %684, 4
  %686 = trunc i32 %685 to i8
  %687 = and i8 %686, 1
  store i8 %687, i8* %27, align 1, !tbaa !2451
  %688 = icmp eq i32 %675, 0
  %689 = zext i1 %688 to i8
  store i8 %689, i8* %30, align 1, !tbaa !2448
  %690 = lshr i32 %675, 31
  %691 = trunc i32 %690 to i8
  store i8 %691, i8* %33, align 1, !tbaa !2449
  %692 = lshr i32 %669, 31
  %693 = lshr i32 %674, 31
  %694 = xor i32 %693, %692
  %695 = xor i32 %690, %692
  %696 = add nuw nsw i32 %695, %694
  %697 = icmp eq i32 %696, 2
  %698 = zext i1 %697 to i8
  store i8 %698, i8* %39, align 1, !tbaa !2450
  %699 = icmp ne i8 %691, 0
  %700 = xor i1 %699, %697
  %.v7 = select i1 %700, i64 12, i64 581
  %701 = add i64 %664, %.v7
  store i64 %701, i64* %PC, align 8, !tbaa !2428
  br i1 %700, label %block_402512, label %block_40274b

block_4024a4:                                     ; preds = %block_402480
  %702 = add i64 %91, 3
  store i64 %702, i64* %PC, align 8
  %703 = load i32, i32* %65, align 4
  %704 = zext i32 %703 to i64
  store i64 %704, i64* %RDI, align 8, !tbaa !2428
  %705 = add i64 %61, -16
  %706 = add i64 %91, 7
  store i64 %706, i64* %PC, align 8
  %707 = inttoptr i64 %705 to i64*
  %708 = load i64, i64* %707, align 8
  store i64 %708, i64* %RSI, align 8, !tbaa !2428
  %709 = add i64 %61, -24
  %710 = add i64 %91, 11
  store i64 %710, i64* %PC, align 8
  %711 = inttoptr i64 %709 to i64*
  %712 = load i64, i64* %711, align 8
  store i64 %712, i64* %RDX, align 8, !tbaa !2428
  %713 = add i64 %91, 972
  %714 = add i64 %91, 16
  %715 = load i64, i64* %RSP, align 8, !tbaa !2428
  %716 = add i64 %715, -8
  %717 = inttoptr i64 %716 to i64*
  store i64 %714, i64* %717, align 8
  store i64 %716, i64* %RSP, align 8, !tbaa !2428
  store i64 %713, i64* %PC, align 8, !tbaa !2428
  %718 = tail call %struct.Memory* @sub_402870_cft1st_renamed_(%struct.State* nonnull %0, i64 %713, %struct.Memory* %2)
  %719 = load i64, i64* %RBP, align 8
  %720 = add i64 %719, -44
  %721 = load i64, i64* %PC, align 8
  %722 = add i64 %721, 7
  store i64 %722, i64* %PC, align 8
  %723 = inttoptr i64 %720 to i32*
  store i32 8, i32* %723, align 4
  %.pre = load i64, i64* %PC, align 8
  br label %block_4024bb

block_4024eb:                                     ; preds = %block_4024bb
  %724 = add i64 %180, 5
  store i64 %724, i64* %PC, align 8, !tbaa !2428
  br label %block_4024f0

block_402864:                                     ; preds = %block_402757
  %725 = add i64 %129, 5
  br label %block_402869

block_402512:                                     ; preds = %block_402506
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %726 = add i64 %701, 13
  store i64 %726, i64* %PC, align 8
  %727 = load i32, i32* %668, align 4
  %728 = zext i32 %727 to i64
  store i64 %728, i64* %RCX, align 8, !tbaa !2428
  %729 = add i64 %701, 16
  store i64 %729, i64* %PC, align 8
  %730 = load i32, i32* %673, align 4
  %731 = add i32 %730, %727
  %732 = zext i32 %731 to i64
  store i64 %732, i64* %RCX, align 8, !tbaa !2428
  %733 = icmp ult i32 %731, %727
  %734 = icmp ult i32 %731, %730
  %735 = or i1 %733, %734
  %736 = zext i1 %735 to i8
  store i8 %736, i8* %14, align 1, !tbaa !2433
  %737 = and i32 %731, 255
  %738 = tail call i32 @llvm.ctpop.i32(i32 %737) #11
  %739 = trunc i32 %738 to i8
  %740 = and i8 %739, 1
  %741 = xor i8 %740, 1
  store i8 %741, i8* %21, align 1, !tbaa !2447
  %742 = xor i32 %730, %727
  %743 = xor i32 %742, %731
  %744 = lshr i32 %743, 4
  %745 = trunc i32 %744 to i8
  %746 = and i8 %745, 1
  store i8 %746, i8* %27, align 1, !tbaa !2451
  %747 = icmp eq i32 %731, 0
  %748 = zext i1 %747 to i8
  store i8 %748, i8* %30, align 1, !tbaa !2448
  %749 = lshr i32 %731, 31
  %750 = trunc i32 %749 to i8
  store i8 %750, i8* %33, align 1, !tbaa !2449
  %751 = lshr i32 %727, 31
  %752 = lshr i32 %730, 31
  %753 = xor i32 %749, %751
  %754 = xor i32 %749, %752
  %755 = add nuw nsw i32 %753, %754
  %756 = icmp eq i32 %755, 2
  %757 = zext i1 %756 to i8
  store i8 %757, i8* %39, align 1, !tbaa !2450
  %758 = add i64 %665, -32
  %759 = add i64 %701, 19
  store i64 %759, i64* %PC, align 8
  %760 = inttoptr i64 %758 to i32*
  store i32 %731, i32* %760, align 4
  %761 = load i64, i64* %RBP, align 8
  %762 = add i64 %761, -32
  %763 = load i64, i64* %PC, align 8
  %764 = add i64 %763, 3
  store i64 %764, i64* %PC, align 8
  %765 = inttoptr i64 %762 to i32*
  %766 = load i32, i32* %765, align 4
  %767 = zext i32 %766 to i64
  store i64 %767, i64* %RCX, align 8, !tbaa !2428
  %768 = add i64 %761, -44
  %769 = add i64 %763, 6
  store i64 %769, i64* %PC, align 8
  %770 = inttoptr i64 %768 to i32*
  %771 = load i32, i32* %770, align 4
  %772 = add i32 %771, %766
  %773 = zext i32 %772 to i64
  store i64 %773, i64* %RCX, align 8, !tbaa !2428
  %774 = icmp ult i32 %772, %766
  %775 = icmp ult i32 %772, %771
  %776 = or i1 %774, %775
  %777 = zext i1 %776 to i8
  store i8 %777, i8* %14, align 1, !tbaa !2433
  %778 = and i32 %772, 255
  %779 = tail call i32 @llvm.ctpop.i32(i32 %778) #11
  %780 = trunc i32 %779 to i8
  %781 = and i8 %780, 1
  %782 = xor i8 %781, 1
  store i8 %782, i8* %21, align 1, !tbaa !2447
  %783 = xor i32 %771, %766
  %784 = xor i32 %783, %772
  %785 = lshr i32 %784, 4
  %786 = trunc i32 %785 to i8
  %787 = and i8 %786, 1
  store i8 %787, i8* %27, align 1, !tbaa !2451
  %788 = icmp eq i32 %772, 0
  %789 = zext i1 %788 to i8
  store i8 %789, i8* %30, align 1, !tbaa !2448
  %790 = lshr i32 %772, 31
  %791 = trunc i32 %790 to i8
  store i8 %791, i8* %33, align 1, !tbaa !2449
  %792 = lshr i32 %766, 31
  %793 = lshr i32 %771, 31
  %794 = xor i32 %790, %792
  %795 = xor i32 %790, %793
  %796 = add nuw nsw i32 %794, %795
  %797 = icmp eq i32 %796, 2
  %798 = zext i1 %797 to i8
  store i8 %798, i8* %39, align 1, !tbaa !2450
  %799 = add i64 %761, -36
  %800 = add i64 %763, 9
  store i64 %800, i64* %PC, align 8
  %801 = inttoptr i64 %799 to i32*
  store i32 %772, i32* %801, align 4
  %802 = load i64, i64* %RBP, align 8
  %803 = add i64 %802, -36
  %804 = load i64, i64* %PC, align 8
  %805 = add i64 %804, 3
  store i64 %805, i64* %PC, align 8
  %806 = inttoptr i64 %803 to i32*
  %807 = load i32, i32* %806, align 4
  %808 = zext i32 %807 to i64
  store i64 %808, i64* %RCX, align 8, !tbaa !2428
  %809 = add i64 %802, -44
  %810 = add i64 %804, 6
  store i64 %810, i64* %PC, align 8
  %811 = inttoptr i64 %809 to i32*
  %812 = load i32, i32* %811, align 4
  %813 = add i32 %812, %807
  %814 = zext i32 %813 to i64
  store i64 %814, i64* %RCX, align 8, !tbaa !2428
  %815 = icmp ult i32 %813, %807
  %816 = icmp ult i32 %813, %812
  %817 = or i1 %815, %816
  %818 = zext i1 %817 to i8
  store i8 %818, i8* %14, align 1, !tbaa !2433
  %819 = and i32 %813, 255
  %820 = tail call i32 @llvm.ctpop.i32(i32 %819) #11
  %821 = trunc i32 %820 to i8
  %822 = and i8 %821, 1
  %823 = xor i8 %822, 1
  store i8 %823, i8* %21, align 1, !tbaa !2447
  %824 = xor i32 %812, %807
  %825 = xor i32 %824, %813
  %826 = lshr i32 %825, 4
  %827 = trunc i32 %826 to i8
  %828 = and i8 %827, 1
  store i8 %828, i8* %27, align 1, !tbaa !2451
  %829 = icmp eq i32 %813, 0
  %830 = zext i1 %829 to i8
  store i8 %830, i8* %30, align 1, !tbaa !2448
  %831 = lshr i32 %813, 31
  %832 = trunc i32 %831 to i8
  store i8 %832, i8* %33, align 1, !tbaa !2449
  %833 = lshr i32 %807, 31
  %834 = lshr i32 %812, 31
  %835 = xor i32 %831, %833
  %836 = xor i32 %831, %834
  %837 = add nuw nsw i32 %835, %836
  %838 = icmp eq i32 %837, 2
  %839 = zext i1 %838 to i8
  store i8 %839, i8* %39, align 1, !tbaa !2450
  %840 = add i64 %802, -40
  %841 = add i64 %804, 9
  store i64 %841, i64* %PC, align 8
  %842 = inttoptr i64 %840 to i32*
  store i32 %813, i32* %842, align 4
  %843 = load i64, i64* %RBP, align 8
  %844 = add i64 %843, -16
  %845 = load i64, i64* %PC, align 8
  %846 = add i64 %845, 4
  store i64 %846, i64* %PC, align 8
  %847 = inttoptr i64 %844 to i64*
  %848 = load i64, i64* %847, align 8
  store i64 %848, i64* %RDX, align 8, !tbaa !2428
  %849 = add i64 %843, -28
  %850 = add i64 %845, 8
  store i64 %850, i64* %PC, align 8
  %851 = inttoptr i64 %849 to i32*
  %852 = load i32, i32* %851, align 4
  %853 = sext i32 %852 to i64
  store i64 %853, i64* %RSI, align 8, !tbaa !2428
  %854 = shl nsw i64 %853, 3
  %855 = add i64 %854, %848
  %856 = add i64 %845, 13
  store i64 %856, i64* %PC, align 8
  %857 = inttoptr i64 %855 to double*
  %858 = load double, double* %857, align 8
  store double %858, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %859 = add i64 %845, 17
  store i64 %859, i64* %PC, align 8
  %860 = load i64, i64* %847, align 8
  store i64 %860, i64* %RDX, align 8, !tbaa !2428
  %861 = add i64 %843, -32
  %862 = add i64 %845, 21
  store i64 %862, i64* %PC, align 8
  %863 = inttoptr i64 %861 to i32*
  %864 = load i32, i32* %863, align 4
  %865 = sext i32 %864 to i64
  store i64 %865, i64* %RSI, align 8, !tbaa !2428
  %866 = shl nsw i64 %865, 3
  %867 = add i64 %866, %860
  %868 = add i64 %845, 26
  store i64 %868, i64* %PC, align 8
  %869 = inttoptr i64 %867 to double*
  %870 = load double, double* %869, align 8
  %871 = fadd double %858, %870
  store double %871, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %872 = add i64 %843, -56
  %873 = add i64 %845, 31
  store i64 %873, i64* %PC, align 8
  %874 = inttoptr i64 %872 to double*
  store double %871, double* %874, align 8
  %875 = load i64, i64* %RBP, align 8
  %876 = add i64 %875, -16
  %877 = load i64, i64* %PC, align 8
  %878 = add i64 %877, 4
  store i64 %878, i64* %PC, align 8
  %879 = inttoptr i64 %876 to i64*
  %880 = load i64, i64* %879, align 8
  store i64 %880, i64* %RDX, align 8, !tbaa !2428
  %881 = add i64 %875, -28
  %882 = add i64 %877, 7
  store i64 %882, i64* %PC, align 8
  %883 = inttoptr i64 %881 to i32*
  %884 = load i32, i32* %883, align 4
  %885 = add i32 %884, 1
  %886 = zext i32 %885 to i64
  store i64 %886, i64* %RCX, align 8, !tbaa !2428
  %887 = icmp eq i32 %884, -1
  %888 = icmp eq i32 %885, 0
  %889 = or i1 %887, %888
  %890 = zext i1 %889 to i8
  store i8 %890, i8* %14, align 1, !tbaa !2433
  %891 = and i32 %885, 255
  %892 = tail call i32 @llvm.ctpop.i32(i32 %891) #11
  %893 = trunc i32 %892 to i8
  %894 = and i8 %893, 1
  %895 = xor i8 %894, 1
  store i8 %895, i8* %21, align 1, !tbaa !2447
  %896 = xor i32 %884, %885
  %897 = lshr i32 %896, 4
  %898 = trunc i32 %897 to i8
  %899 = and i8 %898, 1
  store i8 %899, i8* %27, align 1, !tbaa !2451
  %900 = zext i1 %888 to i8
  store i8 %900, i8* %30, align 1, !tbaa !2448
  %901 = lshr i32 %885, 31
  %902 = trunc i32 %901 to i8
  store i8 %902, i8* %33, align 1, !tbaa !2449
  %903 = lshr i32 %884, 31
  %904 = xor i32 %901, %903
  %905 = add nuw nsw i32 %904, %901
  %906 = icmp eq i32 %905, 2
  %907 = zext i1 %906 to i8
  store i8 %907, i8* %39, align 1, !tbaa !2450
  %908 = sext i32 %885 to i64
  store i64 %908, i64* %RSI, align 8, !tbaa !2428
  %909 = shl nsw i64 %908, 3
  %910 = add i64 %909, %880
  %911 = add i64 %877, 18
  store i64 %911, i64* %PC, align 8
  %912 = inttoptr i64 %910 to i64*
  %913 = load i64, i64* %912, align 8
  %914 = load i64, i64* %RAX, align 8
  %915 = xor i64 %914, %913
  store i64 %915, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  %916 = trunc i64 %915 to i32
  %917 = and i32 %916, 255
  %918 = tail call i32 @llvm.ctpop.i32(i32 %917) #11
  %919 = trunc i32 %918 to i8
  %920 = and i8 %919, 1
  %921 = xor i8 %920, 1
  store i8 %921, i8* %21, align 1, !tbaa !2447
  %922 = icmp eq i64 %915, 0
  %923 = zext i1 %922 to i8
  store i8 %923, i8* %30, align 1, !tbaa !2448
  %924 = lshr i64 %915, 63
  %925 = trunc i64 %924 to i8
  store i8 %925, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2451
  store i64 %915, i64* %1683, align 1, !tbaa !2428
  store i64 0, i64* %1681, align 1, !tbaa !2428
  %926 = add i64 %877, 35
  store i64 %926, i64* %PC, align 8
  %927 = load i64, i64* %879, align 8
  store i64 %927, i64* %RDX, align 8, !tbaa !2428
  %928 = add i64 %875, -32
  %929 = add i64 %877, 38
  store i64 %929, i64* %PC, align 8
  %930 = inttoptr i64 %928 to i32*
  %931 = load i32, i32* %930, align 4
  %932 = add i32 %931, 1
  %933 = zext i32 %932 to i64
  store i64 %933, i64* %RCX, align 8, !tbaa !2428
  %934 = icmp eq i32 %931, -1
  %935 = icmp eq i32 %932, 0
  %936 = or i1 %934, %935
  %937 = zext i1 %936 to i8
  store i8 %937, i8* %14, align 1, !tbaa !2433
  %938 = and i32 %932, 255
  %939 = tail call i32 @llvm.ctpop.i32(i32 %938) #11
  %940 = trunc i32 %939 to i8
  %941 = and i8 %940, 1
  %942 = xor i8 %941, 1
  store i8 %942, i8* %21, align 1, !tbaa !2447
  %943 = xor i32 %931, %932
  %944 = lshr i32 %943, 4
  %945 = trunc i32 %944 to i8
  %946 = and i8 %945, 1
  store i8 %946, i8* %27, align 1, !tbaa !2451
  %947 = zext i1 %935 to i8
  store i8 %947, i8* %30, align 1, !tbaa !2448
  %948 = lshr i32 %932, 31
  %949 = trunc i32 %948 to i8
  store i8 %949, i8* %33, align 1, !tbaa !2449
  %950 = lshr i32 %931, 31
  %951 = xor i32 %948, %950
  %952 = add nuw nsw i32 %951, %948
  %953 = icmp eq i32 %952, 2
  %954 = zext i1 %953 to i8
  store i8 %954, i8* %39, align 1, !tbaa !2450
  %955 = sext i32 %932 to i64
  store i64 %955, i64* %RSI, align 8, !tbaa !2428
  %956 = shl nsw i64 %955, 3
  %957 = add i64 %956, %927
  %958 = add i64 %877, 49
  store i64 %958, i64* %PC, align 8
  %959 = bitcast i64 %915 to double
  %960 = inttoptr i64 %957 to double*
  %961 = load double, double* %960, align 8
  %962 = fsub double %959, %961
  store double %962, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %963 = load i64, i64* %RBP, align 8
  %964 = add i64 %963, -64
  %965 = add i64 %877, 54
  store i64 %965, i64* %PC, align 8
  %966 = inttoptr i64 %964 to double*
  store double %962, double* %966, align 8
  %967 = load i64, i64* %RBP, align 8
  %968 = add i64 %967, -16
  %969 = load i64, i64* %PC, align 8
  %970 = add i64 %969, 4
  store i64 %970, i64* %PC, align 8
  %971 = inttoptr i64 %968 to i64*
  %972 = load i64, i64* %971, align 8
  store i64 %972, i64* %RDX, align 8, !tbaa !2428
  %973 = add i64 %967, -28
  %974 = add i64 %969, 8
  store i64 %974, i64* %PC, align 8
  %975 = inttoptr i64 %973 to i32*
  %976 = load i32, i32* %975, align 4
  %977 = sext i32 %976 to i64
  store i64 %977, i64* %RSI, align 8, !tbaa !2428
  %978 = shl nsw i64 %977, 3
  %979 = add i64 %978, %972
  %980 = add i64 %969, 13
  store i64 %980, i64* %PC, align 8
  %981 = inttoptr i64 %979 to double*
  %982 = load double, double* %981, align 8
  store double %982, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %983 = add i64 %969, 17
  store i64 %983, i64* %PC, align 8
  %984 = load i64, i64* %971, align 8
  store i64 %984, i64* %RDX, align 8, !tbaa !2428
  %985 = add i64 %967, -32
  %986 = add i64 %969, 21
  store i64 %986, i64* %PC, align 8
  %987 = inttoptr i64 %985 to i32*
  %988 = load i32, i32* %987, align 4
  %989 = sext i32 %988 to i64
  store i64 %989, i64* %RSI, align 8, !tbaa !2428
  %990 = shl nsw i64 %989, 3
  %991 = add i64 %990, %984
  %992 = add i64 %969, 26
  store i64 %992, i64* %PC, align 8
  %993 = inttoptr i64 %991 to double*
  %994 = load double, double* %993, align 8
  %995 = fsub double %982, %994
  store double %995, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %996 = add i64 %967, -72
  %997 = add i64 %969, 31
  store i64 %997, i64* %PC, align 8
  %998 = inttoptr i64 %996 to double*
  store double %995, double* %998, align 8
  %999 = load i64, i64* %RBP, align 8
  %1000 = add i64 %999, -16
  %1001 = load i64, i64* %PC, align 8
  %1002 = add i64 %1001, 4
  store i64 %1002, i64* %PC, align 8
  %1003 = inttoptr i64 %1000 to i64*
  %1004 = load i64, i64* %1003, align 8
  store i64 %1004, i64* %RDX, align 8, !tbaa !2428
  %1005 = add i64 %999, -28
  %1006 = add i64 %1001, 7
  store i64 %1006, i64* %PC, align 8
  %1007 = inttoptr i64 %1005 to i32*
  %1008 = load i32, i32* %1007, align 4
  %1009 = add i32 %1008, 1
  %1010 = zext i32 %1009 to i64
  store i64 %1010, i64* %RCX, align 8, !tbaa !2428
  %1011 = icmp eq i32 %1008, -1
  %1012 = icmp eq i32 %1009, 0
  %1013 = or i1 %1011, %1012
  %1014 = zext i1 %1013 to i8
  store i8 %1014, i8* %14, align 1, !tbaa !2433
  %1015 = and i32 %1009, 255
  %1016 = tail call i32 @llvm.ctpop.i32(i32 %1015) #11
  %1017 = trunc i32 %1016 to i8
  %1018 = and i8 %1017, 1
  %1019 = xor i8 %1018, 1
  store i8 %1019, i8* %21, align 1, !tbaa !2447
  %1020 = xor i32 %1008, %1009
  %1021 = lshr i32 %1020, 4
  %1022 = trunc i32 %1021 to i8
  %1023 = and i8 %1022, 1
  store i8 %1023, i8* %27, align 1, !tbaa !2451
  %1024 = zext i1 %1012 to i8
  store i8 %1024, i8* %30, align 1, !tbaa !2448
  %1025 = lshr i32 %1009, 31
  %1026 = trunc i32 %1025 to i8
  store i8 %1026, i8* %33, align 1, !tbaa !2449
  %1027 = lshr i32 %1008, 31
  %1028 = xor i32 %1025, %1027
  %1029 = add nuw nsw i32 %1028, %1025
  %1030 = icmp eq i32 %1029, 2
  %1031 = zext i1 %1030 to i8
  store i8 %1031, i8* %39, align 1, !tbaa !2450
  %1032 = sext i32 %1009 to i64
  store i64 %1032, i64* %RSI, align 8, !tbaa !2428
  %1033 = shl nsw i64 %1032, 3
  %1034 = add i64 %1033, %1004
  %1035 = add i64 %1001, 18
  store i64 %1035, i64* %PC, align 8
  %1036 = inttoptr i64 %1034 to i64*
  %1037 = load i64, i64* %1036, align 8
  %1038 = load i64, i64* %RAX, align 8
  %1039 = xor i64 %1038, %1037
  store i64 %1039, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %14, align 1, !tbaa !2433
  %1040 = trunc i64 %1039 to i32
  %1041 = and i32 %1040, 255
  %1042 = tail call i32 @llvm.ctpop.i32(i32 %1041) #11
  %1043 = trunc i32 %1042 to i8
  %1044 = and i8 %1043, 1
  %1045 = xor i8 %1044, 1
  store i8 %1045, i8* %21, align 1, !tbaa !2447
  %1046 = icmp eq i64 %1039, 0
  %1047 = zext i1 %1046 to i8
  store i8 %1047, i8* %30, align 1, !tbaa !2448
  %1048 = lshr i64 %1039, 63
  %1049 = trunc i64 %1048 to i8
  store i8 %1049, i8* %33, align 1, !tbaa !2449
  store i8 0, i8* %39, align 1, !tbaa !2450
  store i8 0, i8* %27, align 1, !tbaa !2451
  store i64 %1039, i64* %1683, align 1, !tbaa !2428
  store i64 0, i64* %1681, align 1, !tbaa !2428
  %1050 = add i64 %1001, 35
  store i64 %1050, i64* %PC, align 8
  %1051 = load i64, i64* %1003, align 8
  store i64 %1051, i64* %RAX, align 8, !tbaa !2428
  %1052 = add i64 %999, -32
  %1053 = add i64 %1001, 38
  store i64 %1053, i64* %PC, align 8
  %1054 = inttoptr i64 %1052 to i32*
  %1055 = load i32, i32* %1054, align 4
  %1056 = add i32 %1055, 1
  %1057 = zext i32 %1056 to i64
  store i64 %1057, i64* %RCX, align 8, !tbaa !2428
  %1058 = icmp eq i32 %1055, -1
  %1059 = icmp eq i32 %1056, 0
  %1060 = or i1 %1058, %1059
  %1061 = zext i1 %1060 to i8
  store i8 %1061, i8* %14, align 1, !tbaa !2433
  %1062 = and i32 %1056, 255
  %1063 = tail call i32 @llvm.ctpop.i32(i32 %1062) #11
  %1064 = trunc i32 %1063 to i8
  %1065 = and i8 %1064, 1
  %1066 = xor i8 %1065, 1
  store i8 %1066, i8* %21, align 1, !tbaa !2447
  %1067 = xor i32 %1055, %1056
  %1068 = lshr i32 %1067, 4
  %1069 = trunc i32 %1068 to i8
  %1070 = and i8 %1069, 1
  store i8 %1070, i8* %27, align 1, !tbaa !2451
  %1071 = zext i1 %1059 to i8
  store i8 %1071, i8* %30, align 1, !tbaa !2448
  %1072 = lshr i32 %1056, 31
  %1073 = trunc i32 %1072 to i8
  store i8 %1073, i8* %33, align 1, !tbaa !2449
  %1074 = lshr i32 %1055, 31
  %1075 = xor i32 %1072, %1074
  %1076 = add nuw nsw i32 %1075, %1072
  %1077 = icmp eq i32 %1076, 2
  %1078 = zext i1 %1077 to i8
  store i8 %1078, i8* %39, align 1, !tbaa !2450
  %1079 = sext i32 %1056 to i64
  store i64 %1079, i64* %RDX, align 8, !tbaa !2428
  %1080 = shl nsw i64 %1079, 3
  %1081 = add i64 %1080, %1051
  %1082 = add i64 %1001, 49
  store i64 %1082, i64* %PC, align 8
  %1083 = bitcast i64 %1039 to double
  %1084 = inttoptr i64 %1081 to double*
  %1085 = load double, double* %1084, align 8
  %1086 = fadd double %1083, %1085
  store double %1086, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %1087 = load i64, i64* %RBP, align 8
  %1088 = add i64 %1087, -80
  %1089 = add i64 %1001, 54
  store i64 %1089, i64* %PC, align 8
  %1090 = inttoptr i64 %1088 to double*
  store double %1086, double* %1090, align 8
  %1091 = load i64, i64* %RBP, align 8
  %1092 = add i64 %1091, -16
  %1093 = load i64, i64* %PC, align 8
  %1094 = add i64 %1093, 4
  store i64 %1094, i64* %PC, align 8
  %1095 = inttoptr i64 %1092 to i64*
  %1096 = load i64, i64* %1095, align 8
  store i64 %1096, i64* %RAX, align 8, !tbaa !2428
  %1097 = add i64 %1091, -36
  %1098 = add i64 %1093, 8
  store i64 %1098, i64* %PC, align 8
  %1099 = inttoptr i64 %1097 to i32*
  %1100 = load i32, i32* %1099, align 4
  %1101 = sext i32 %1100 to i64
  store i64 %1101, i64* %RDX, align 8, !tbaa !2428
  %1102 = shl nsw i64 %1101, 3
  %1103 = add i64 %1102, %1096
  %1104 = add i64 %1093, 13
  store i64 %1104, i64* %PC, align 8
  %1105 = inttoptr i64 %1103 to double*
  %1106 = load double, double* %1105, align 8
  store double %1106, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %1107 = add i64 %1093, 17
  store i64 %1107, i64* %PC, align 8
  %1108 = load i64, i64* %1095, align 8
  store i64 %1108, i64* %RAX, align 8, !tbaa !2428
  %1109 = add i64 %1091, -40
  %1110 = add i64 %1093, 21
  store i64 %1110, i64* %PC, align 8
  %1111 = inttoptr i64 %1109 to i32*
  %1112 = load i32, i32* %1111, align 4
  %1113 = sext i32 %1112 to i64
  store i64 %1113, i64* %RDX, align 8, !tbaa !2428
  %1114 = shl nsw i64 %1113, 3
  %1115 = add i64 %1114, %1108
  %1116 = add i64 %1093, 26
  store i64 %1116, i64* %PC, align 8
  %1117 = inttoptr i64 %1115 to double*
  %1118 = load double, double* %1117, align 8
  %1119 = fadd double %1106, %1118
  store double %1119, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %1120 = add i64 %1091, -88
  %1121 = add i64 %1093, 31
  store i64 %1121, i64* %PC, align 8
  %1122 = inttoptr i64 %1120 to double*
  store double %1119, double* %1122, align 8
  %1123 = load i64, i64* %RBP, align 8
  %1124 = add i64 %1123, -16
  %1125 = load i64, i64* %PC, align 8
  %1126 = add i64 %1125, 4
  store i64 %1126, i64* %PC, align 8
  %1127 = inttoptr i64 %1124 to i64*
  %1128 = load i64, i64* %1127, align 8
  store i64 %1128, i64* %RAX, align 8, !tbaa !2428
  %1129 = add i64 %1123, -36
  %1130 = add i64 %1125, 7
  store i64 %1130, i64* %PC, align 8
  %1131 = inttoptr i64 %1129 to i32*
  %1132 = load i32, i32* %1131, align 4
  %1133 = add i32 %1132, 1
  %1134 = zext i32 %1133 to i64
  store i64 %1134, i64* %RCX, align 8, !tbaa !2428
  %1135 = icmp eq i32 %1132, -1
  %1136 = icmp eq i32 %1133, 0
  %1137 = or i1 %1135, %1136
  %1138 = zext i1 %1137 to i8
  store i8 %1138, i8* %14, align 1, !tbaa !2433
  %1139 = and i32 %1133, 255
  %1140 = tail call i32 @llvm.ctpop.i32(i32 %1139) #11
  %1141 = trunc i32 %1140 to i8
  %1142 = and i8 %1141, 1
  %1143 = xor i8 %1142, 1
  store i8 %1143, i8* %21, align 1, !tbaa !2447
  %1144 = xor i32 %1132, %1133
  %1145 = lshr i32 %1144, 4
  %1146 = trunc i32 %1145 to i8
  %1147 = and i8 %1146, 1
  store i8 %1147, i8* %27, align 1, !tbaa !2451
  %1148 = zext i1 %1136 to i8
  store i8 %1148, i8* %30, align 1, !tbaa !2448
  %1149 = lshr i32 %1133, 31
  %1150 = trunc i32 %1149 to i8
  store i8 %1150, i8* %33, align 1, !tbaa !2449
  %1151 = lshr i32 %1132, 31
  %1152 = xor i32 %1149, %1151
  %1153 = add nuw nsw i32 %1152, %1149
  %1154 = icmp eq i32 %1153, 2
  %1155 = zext i1 %1154 to i8
  store i8 %1155, i8* %39, align 1, !tbaa !2450
  %1156 = sext i32 %1133 to i64
  store i64 %1156, i64* %RDX, align 8, !tbaa !2428
  %1157 = shl nsw i64 %1156, 3
  %1158 = add i64 %1157, %1128
  %1159 = add i64 %1125, 18
  store i64 %1159, i64* %PC, align 8
  %1160 = inttoptr i64 %1158 to double*
  %1161 = load double, double* %1160, align 8
  store double %1161, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %1162 = add i64 %1125, 22
  store i64 %1162, i64* %PC, align 8
  %1163 = load i64, i64* %1127, align 8
  store i64 %1163, i64* %RAX, align 8, !tbaa !2428
  %1164 = add i64 %1123, -40
  %1165 = add i64 %1125, 25
  store i64 %1165, i64* %PC, align 8
  %1166 = inttoptr i64 %1164 to i32*
  %1167 = load i32, i32* %1166, align 4
  %1168 = add i32 %1167, 1
  %1169 = zext i32 %1168 to i64
  store i64 %1169, i64* %RCX, align 8, !tbaa !2428
  %1170 = icmp eq i32 %1167, -1
  %1171 = icmp eq i32 %1168, 0
  %1172 = or i1 %1170, %1171
  %1173 = zext i1 %1172 to i8
  store i8 %1173, i8* %14, align 1, !tbaa !2433
  %1174 = and i32 %1168, 255
  %1175 = tail call i32 @llvm.ctpop.i32(i32 %1174) #11
  %1176 = trunc i32 %1175 to i8
  %1177 = and i8 %1176, 1
  %1178 = xor i8 %1177, 1
  store i8 %1178, i8* %21, align 1, !tbaa !2447
  %1179 = xor i32 %1167, %1168
  %1180 = lshr i32 %1179, 4
  %1181 = trunc i32 %1180 to i8
  %1182 = and i8 %1181, 1
  store i8 %1182, i8* %27, align 1, !tbaa !2451
  %1183 = zext i1 %1171 to i8
  store i8 %1183, i8* %30, align 1, !tbaa !2448
  %1184 = lshr i32 %1168, 31
  %1185 = trunc i32 %1184 to i8
  store i8 %1185, i8* %33, align 1, !tbaa !2449
  %1186 = lshr i32 %1167, 31
  %1187 = xor i32 %1184, %1186
  %1188 = add nuw nsw i32 %1187, %1184
  %1189 = icmp eq i32 %1188, 2
  %1190 = zext i1 %1189 to i8
  store i8 %1190, i8* %39, align 1, !tbaa !2450
  %1191 = sext i32 %1168 to i64
  store i64 %1191, i64* %RDX, align 8, !tbaa !2428
  %1192 = shl nsw i64 %1191, 3
  %1193 = add i64 %1192, %1163
  %1194 = add i64 %1125, 36
  store i64 %1194, i64* %PC, align 8
  %1195 = inttoptr i64 %1193 to double*
  %1196 = load double, double* %1195, align 8
  %1197 = fadd double %1161, %1196
  store double %1197, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %1198 = load i64, i64* %RBP, align 8
  %1199 = add i64 %1198, -96
  %1200 = add i64 %1125, 41
  store i64 %1200, i64* %PC, align 8
  %1201 = inttoptr i64 %1199 to double*
  store double %1197, double* %1201, align 8
  %1202 = load i64, i64* %RBP, align 8
  %1203 = add i64 %1202, -16
  %1204 = load i64, i64* %PC, align 8
  %1205 = add i64 %1204, 4
  store i64 %1205, i64* %PC, align 8
  %1206 = inttoptr i64 %1203 to i64*
  %1207 = load i64, i64* %1206, align 8
  store i64 %1207, i64* %RAX, align 8, !tbaa !2428
  %1208 = add i64 %1202, -36
  %1209 = add i64 %1204, 8
  store i64 %1209, i64* %PC, align 8
  %1210 = inttoptr i64 %1208 to i32*
  %1211 = load i32, i32* %1210, align 4
  %1212 = sext i32 %1211 to i64
  store i64 %1212, i64* %RDX, align 8, !tbaa !2428
  %1213 = shl nsw i64 %1212, 3
  %1214 = add i64 %1213, %1207
  %1215 = add i64 %1204, 13
  store i64 %1215, i64* %PC, align 8
  %1216 = inttoptr i64 %1214 to double*
  %1217 = load double, double* %1216, align 8
  store double %1217, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %1218 = add i64 %1204, 17
  store i64 %1218, i64* %PC, align 8
  %1219 = load i64, i64* %1206, align 8
  store i64 %1219, i64* %RAX, align 8, !tbaa !2428
  %1220 = add i64 %1202, -40
  %1221 = add i64 %1204, 21
  store i64 %1221, i64* %PC, align 8
  %1222 = inttoptr i64 %1220 to i32*
  %1223 = load i32, i32* %1222, align 4
  %1224 = sext i32 %1223 to i64
  store i64 %1224, i64* %RDX, align 8, !tbaa !2428
  %1225 = shl nsw i64 %1224, 3
  %1226 = add i64 %1225, %1219
  %1227 = add i64 %1204, 26
  store i64 %1227, i64* %PC, align 8
  %1228 = inttoptr i64 %1226 to double*
  %1229 = load double, double* %1228, align 8
  %1230 = fsub double %1217, %1229
  store double %1230, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %1231 = add i64 %1202, -104
  %1232 = add i64 %1204, 31
  store i64 %1232, i64* %PC, align 8
  %1233 = inttoptr i64 %1231 to double*
  store double %1230, double* %1233, align 8
  %1234 = load i64, i64* %RBP, align 8
  %1235 = add i64 %1234, -16
  %1236 = load i64, i64* %PC, align 8
  %1237 = add i64 %1236, 4
  store i64 %1237, i64* %PC, align 8
  %1238 = inttoptr i64 %1235 to i64*
  %1239 = load i64, i64* %1238, align 8
  store i64 %1239, i64* %RAX, align 8, !tbaa !2428
  %1240 = add i64 %1234, -36
  %1241 = add i64 %1236, 7
  store i64 %1241, i64* %PC, align 8
  %1242 = inttoptr i64 %1240 to i32*
  %1243 = load i32, i32* %1242, align 4
  %1244 = add i32 %1243, 1
  %1245 = zext i32 %1244 to i64
  store i64 %1245, i64* %RCX, align 8, !tbaa !2428
  %1246 = icmp eq i32 %1243, -1
  %1247 = icmp eq i32 %1244, 0
  %1248 = or i1 %1246, %1247
  %1249 = zext i1 %1248 to i8
  store i8 %1249, i8* %14, align 1, !tbaa !2433
  %1250 = and i32 %1244, 255
  %1251 = tail call i32 @llvm.ctpop.i32(i32 %1250) #11
  %1252 = trunc i32 %1251 to i8
  %1253 = and i8 %1252, 1
  %1254 = xor i8 %1253, 1
  store i8 %1254, i8* %21, align 1, !tbaa !2447
  %1255 = xor i32 %1243, %1244
  %1256 = lshr i32 %1255, 4
  %1257 = trunc i32 %1256 to i8
  %1258 = and i8 %1257, 1
  store i8 %1258, i8* %27, align 1, !tbaa !2451
  %1259 = zext i1 %1247 to i8
  store i8 %1259, i8* %30, align 1, !tbaa !2448
  %1260 = lshr i32 %1244, 31
  %1261 = trunc i32 %1260 to i8
  store i8 %1261, i8* %33, align 1, !tbaa !2449
  %1262 = lshr i32 %1243, 31
  %1263 = xor i32 %1260, %1262
  %1264 = add nuw nsw i32 %1263, %1260
  %1265 = icmp eq i32 %1264, 2
  %1266 = zext i1 %1265 to i8
  store i8 %1266, i8* %39, align 1, !tbaa !2450
  %1267 = sext i32 %1244 to i64
  store i64 %1267, i64* %RDX, align 8, !tbaa !2428
  %1268 = shl nsw i64 %1267, 3
  %1269 = add i64 %1268, %1239
  %1270 = add i64 %1236, 18
  store i64 %1270, i64* %PC, align 8
  %1271 = inttoptr i64 %1269 to double*
  %1272 = load double, double* %1271, align 8
  store double %1272, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %1273 = add i64 %1236, 22
  store i64 %1273, i64* %PC, align 8
  %1274 = load i64, i64* %1238, align 8
  store i64 %1274, i64* %RAX, align 8, !tbaa !2428
  %1275 = add i64 %1234, -40
  %1276 = add i64 %1236, 25
  store i64 %1276, i64* %PC, align 8
  %1277 = inttoptr i64 %1275 to i32*
  %1278 = load i32, i32* %1277, align 4
  %1279 = add i32 %1278, 1
  %1280 = zext i32 %1279 to i64
  store i64 %1280, i64* %RCX, align 8, !tbaa !2428
  %1281 = icmp eq i32 %1278, -1
  %1282 = icmp eq i32 %1279, 0
  %1283 = or i1 %1281, %1282
  %1284 = zext i1 %1283 to i8
  store i8 %1284, i8* %14, align 1, !tbaa !2433
  %1285 = and i32 %1279, 255
  %1286 = tail call i32 @llvm.ctpop.i32(i32 %1285) #11
  %1287 = trunc i32 %1286 to i8
  %1288 = and i8 %1287, 1
  %1289 = xor i8 %1288, 1
  store i8 %1289, i8* %21, align 1, !tbaa !2447
  %1290 = xor i32 %1278, %1279
  %1291 = lshr i32 %1290, 4
  %1292 = trunc i32 %1291 to i8
  %1293 = and i8 %1292, 1
  store i8 %1293, i8* %27, align 1, !tbaa !2451
  %1294 = zext i1 %1282 to i8
  store i8 %1294, i8* %30, align 1, !tbaa !2448
  %1295 = lshr i32 %1279, 31
  %1296 = trunc i32 %1295 to i8
  store i8 %1296, i8* %33, align 1, !tbaa !2449
  %1297 = lshr i32 %1278, 31
  %1298 = xor i32 %1295, %1297
  %1299 = add nuw nsw i32 %1298, %1295
  %1300 = icmp eq i32 %1299, 2
  %1301 = zext i1 %1300 to i8
  store i8 %1301, i8* %39, align 1, !tbaa !2450
  %1302 = sext i32 %1279 to i64
  store i64 %1302, i64* %RDX, align 8, !tbaa !2428
  %1303 = shl nsw i64 %1302, 3
  %1304 = add i64 %1303, %1274
  %1305 = add i64 %1236, 36
  store i64 %1305, i64* %PC, align 8
  %1306 = inttoptr i64 %1304 to double*
  %1307 = load double, double* %1306, align 8
  %1308 = fsub double %1272, %1307
  store double %1308, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %1309 = load i64, i64* %RBP, align 8
  %1310 = add i64 %1309, -112
  %1311 = add i64 %1236, 41
  store i64 %1311, i64* %PC, align 8
  %1312 = inttoptr i64 %1310 to double*
  store double %1308, double* %1312, align 8
  %1313 = load i64, i64* %RBP, align 8
  %1314 = add i64 %1313, -56
  %1315 = load i64, i64* %PC, align 8
  %1316 = add i64 %1315, 5
  store i64 %1316, i64* %PC, align 8
  %1317 = inttoptr i64 %1314 to double*
  %1318 = load double, double* %1317, align 8
  store double %1318, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %1319 = add i64 %1313, -88
  %1320 = add i64 %1315, 10
  store i64 %1320, i64* %PC, align 8
  %1321 = inttoptr i64 %1319 to double*
  %1322 = load double, double* %1321, align 8
  %1323 = fadd double %1318, %1322
  store double %1323, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %1324 = add i64 %1313, -16
  %1325 = add i64 %1315, 14
  store i64 %1325, i64* %PC, align 8
  %1326 = inttoptr i64 %1324 to i64*
  %1327 = load i64, i64* %1326, align 8
  store i64 %1327, i64* %RAX, align 8, !tbaa !2428
  %1328 = add i64 %1313, -28
  %1329 = add i64 %1315, 18
  store i64 %1329, i64* %PC, align 8
  %1330 = inttoptr i64 %1328 to i32*
  %1331 = load i32, i32* %1330, align 4
  %1332 = sext i32 %1331 to i64
  store i64 %1332, i64* %RDX, align 8, !tbaa !2428
  %1333 = shl nsw i64 %1332, 3
  %1334 = add i64 %1333, %1327
  %1335 = add i64 %1315, 23
  store i64 %1335, i64* %PC, align 8
  %1336 = inttoptr i64 %1334 to double*
  store double %1323, double* %1336, align 8
  %1337 = load i64, i64* %RBP, align 8
  %1338 = add i64 %1337, -64
  %1339 = load i64, i64* %PC, align 8
  %1340 = add i64 %1339, 5
  store i64 %1340, i64* %PC, align 8
  %1341 = inttoptr i64 %1338 to double*
  %1342 = load double, double* %1341, align 8
  store double %1342, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %1343 = add i64 %1337, -96
  %1344 = add i64 %1339, 10
  store i64 %1344, i64* %PC, align 8
  %1345 = inttoptr i64 %1343 to double*
  %1346 = load double, double* %1345, align 8
  %1347 = fsub double %1342, %1346
  store double %1347, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %1348 = add i64 %1337, -16
  %1349 = add i64 %1339, 14
  store i64 %1349, i64* %PC, align 8
  %1350 = inttoptr i64 %1348 to i64*
  %1351 = load i64, i64* %1350, align 8
  store i64 %1351, i64* %RAX, align 8, !tbaa !2428
  %1352 = add i64 %1337, -28
  %1353 = add i64 %1339, 17
  store i64 %1353, i64* %PC, align 8
  %1354 = inttoptr i64 %1352 to i32*
  %1355 = load i32, i32* %1354, align 4
  %1356 = add i32 %1355, 1
  %1357 = zext i32 %1356 to i64
  store i64 %1357, i64* %RCX, align 8, !tbaa !2428
  %1358 = icmp eq i32 %1355, -1
  %1359 = icmp eq i32 %1356, 0
  %1360 = or i1 %1358, %1359
  %1361 = zext i1 %1360 to i8
  store i8 %1361, i8* %14, align 1, !tbaa !2433
  %1362 = and i32 %1356, 255
  %1363 = tail call i32 @llvm.ctpop.i32(i32 %1362) #11
  %1364 = trunc i32 %1363 to i8
  %1365 = and i8 %1364, 1
  %1366 = xor i8 %1365, 1
  store i8 %1366, i8* %21, align 1, !tbaa !2447
  %1367 = xor i32 %1355, %1356
  %1368 = lshr i32 %1367, 4
  %1369 = trunc i32 %1368 to i8
  %1370 = and i8 %1369, 1
  store i8 %1370, i8* %27, align 1, !tbaa !2451
  %1371 = zext i1 %1359 to i8
  store i8 %1371, i8* %30, align 1, !tbaa !2448
  %1372 = lshr i32 %1356, 31
  %1373 = trunc i32 %1372 to i8
  store i8 %1373, i8* %33, align 1, !tbaa !2449
  %1374 = lshr i32 %1355, 31
  %1375 = xor i32 %1372, %1374
  %1376 = add nuw nsw i32 %1375, %1372
  %1377 = icmp eq i32 %1376, 2
  %1378 = zext i1 %1377 to i8
  store i8 %1378, i8* %39, align 1, !tbaa !2450
  %1379 = sext i32 %1356 to i64
  store i64 %1379, i64* %RDX, align 8, !tbaa !2428
  %1380 = shl nsw i64 %1379, 3
  %1381 = add i64 %1380, %1351
  %1382 = add i64 %1339, 28
  store i64 %1382, i64* %PC, align 8
  %1383 = inttoptr i64 %1381 to double*
  store double %1347, double* %1383, align 8
  %1384 = load i64, i64* %RBP, align 8
  %1385 = add i64 %1384, -56
  %1386 = load i64, i64* %PC, align 8
  %1387 = add i64 %1386, 5
  store i64 %1387, i64* %PC, align 8
  %1388 = inttoptr i64 %1385 to double*
  %1389 = load double, double* %1388, align 8
  store double %1389, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %1390 = add i64 %1384, -88
  %1391 = add i64 %1386, 10
  store i64 %1391, i64* %PC, align 8
  %1392 = inttoptr i64 %1390 to double*
  %1393 = load double, double* %1392, align 8
  %1394 = fsub double %1389, %1393
  store double %1394, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %1395 = add i64 %1384, -16
  %1396 = add i64 %1386, 14
  store i64 %1396, i64* %PC, align 8
  %1397 = inttoptr i64 %1395 to i64*
  %1398 = load i64, i64* %1397, align 8
  store i64 %1398, i64* %RAX, align 8, !tbaa !2428
  %1399 = add i64 %1384, -36
  %1400 = add i64 %1386, 18
  store i64 %1400, i64* %PC, align 8
  %1401 = inttoptr i64 %1399 to i32*
  %1402 = load i32, i32* %1401, align 4
  %1403 = sext i32 %1402 to i64
  store i64 %1403, i64* %RDX, align 8, !tbaa !2428
  %1404 = shl nsw i64 %1403, 3
  %1405 = add i64 %1404, %1398
  %1406 = add i64 %1386, 23
  store i64 %1406, i64* %PC, align 8
  %1407 = inttoptr i64 %1405 to double*
  store double %1394, double* %1407, align 8
  %1408 = load i64, i64* %RBP, align 8
  %1409 = add i64 %1408, -64
  %1410 = load i64, i64* %PC, align 8
  %1411 = add i64 %1410, 5
  store i64 %1411, i64* %PC, align 8
  %1412 = inttoptr i64 %1409 to double*
  %1413 = load double, double* %1412, align 8
  store double %1413, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %1414 = add i64 %1408, -96
  %1415 = add i64 %1410, 10
  store i64 %1415, i64* %PC, align 8
  %1416 = inttoptr i64 %1414 to double*
  %1417 = load double, double* %1416, align 8
  %1418 = fadd double %1413, %1417
  store double %1418, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %1419 = add i64 %1408, -16
  %1420 = add i64 %1410, 14
  store i64 %1420, i64* %PC, align 8
  %1421 = inttoptr i64 %1419 to i64*
  %1422 = load i64, i64* %1421, align 8
  store i64 %1422, i64* %RAX, align 8, !tbaa !2428
  %1423 = add i64 %1408, -36
  %1424 = add i64 %1410, 17
  store i64 %1424, i64* %PC, align 8
  %1425 = inttoptr i64 %1423 to i32*
  %1426 = load i32, i32* %1425, align 4
  %1427 = add i32 %1426, 1
  %1428 = zext i32 %1427 to i64
  store i64 %1428, i64* %RCX, align 8, !tbaa !2428
  %1429 = icmp eq i32 %1426, -1
  %1430 = icmp eq i32 %1427, 0
  %1431 = or i1 %1429, %1430
  %1432 = zext i1 %1431 to i8
  store i8 %1432, i8* %14, align 1, !tbaa !2433
  %1433 = and i32 %1427, 255
  %1434 = tail call i32 @llvm.ctpop.i32(i32 %1433) #11
  %1435 = trunc i32 %1434 to i8
  %1436 = and i8 %1435, 1
  %1437 = xor i8 %1436, 1
  store i8 %1437, i8* %21, align 1, !tbaa !2447
  %1438 = xor i32 %1426, %1427
  %1439 = lshr i32 %1438, 4
  %1440 = trunc i32 %1439 to i8
  %1441 = and i8 %1440, 1
  store i8 %1441, i8* %27, align 1, !tbaa !2451
  %1442 = zext i1 %1430 to i8
  store i8 %1442, i8* %30, align 1, !tbaa !2448
  %1443 = lshr i32 %1427, 31
  %1444 = trunc i32 %1443 to i8
  store i8 %1444, i8* %33, align 1, !tbaa !2449
  %1445 = lshr i32 %1426, 31
  %1446 = xor i32 %1443, %1445
  %1447 = add nuw nsw i32 %1446, %1443
  %1448 = icmp eq i32 %1447, 2
  %1449 = zext i1 %1448 to i8
  store i8 %1449, i8* %39, align 1, !tbaa !2450
  %1450 = sext i32 %1427 to i64
  store i64 %1450, i64* %RDX, align 8, !tbaa !2428
  %1451 = shl nsw i64 %1450, 3
  %1452 = add i64 %1451, %1422
  %1453 = add i64 %1410, 28
  store i64 %1453, i64* %PC, align 8
  %1454 = inttoptr i64 %1452 to double*
  store double %1418, double* %1454, align 8
  %1455 = load i64, i64* %RBP, align 8
  %1456 = add i64 %1455, -72
  %1457 = load i64, i64* %PC, align 8
  %1458 = add i64 %1457, 5
  store i64 %1458, i64* %PC, align 8
  %1459 = inttoptr i64 %1456 to double*
  %1460 = load double, double* %1459, align 8
  store double %1460, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %1461 = add i64 %1455, -112
  %1462 = add i64 %1457, 10
  store i64 %1462, i64* %PC, align 8
  %1463 = inttoptr i64 %1461 to double*
  %1464 = load double, double* %1463, align 8
  %1465 = fsub double %1460, %1464
  store double %1465, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %1466 = add i64 %1455, -16
  %1467 = add i64 %1457, 14
  store i64 %1467, i64* %PC, align 8
  %1468 = inttoptr i64 %1466 to i64*
  %1469 = load i64, i64* %1468, align 8
  store i64 %1469, i64* %RAX, align 8, !tbaa !2428
  %1470 = add i64 %1455, -32
  %1471 = add i64 %1457, 18
  store i64 %1471, i64* %PC, align 8
  %1472 = inttoptr i64 %1470 to i32*
  %1473 = load i32, i32* %1472, align 4
  %1474 = sext i32 %1473 to i64
  store i64 %1474, i64* %RDX, align 8, !tbaa !2428
  %1475 = shl nsw i64 %1474, 3
  %1476 = add i64 %1475, %1469
  %1477 = add i64 %1457, 23
  store i64 %1477, i64* %PC, align 8
  %1478 = inttoptr i64 %1476 to double*
  store double %1465, double* %1478, align 8
  %1479 = load i64, i64* %RBP, align 8
  %1480 = add i64 %1479, -80
  %1481 = load i64, i64* %PC, align 8
  %1482 = add i64 %1481, 5
  store i64 %1482, i64* %PC, align 8
  %1483 = inttoptr i64 %1480 to double*
  %1484 = load double, double* %1483, align 8
  store double %1484, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %1485 = add i64 %1479, -104
  %1486 = add i64 %1481, 10
  store i64 %1486, i64* %PC, align 8
  %1487 = inttoptr i64 %1485 to double*
  %1488 = load double, double* %1487, align 8
  %1489 = fsub double %1484, %1488
  store double %1489, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %1490 = add i64 %1479, -16
  %1491 = add i64 %1481, 14
  store i64 %1491, i64* %PC, align 8
  %1492 = inttoptr i64 %1490 to i64*
  %1493 = load i64, i64* %1492, align 8
  store i64 %1493, i64* %RAX, align 8, !tbaa !2428
  %1494 = add i64 %1479, -32
  %1495 = add i64 %1481, 17
  store i64 %1495, i64* %PC, align 8
  %1496 = inttoptr i64 %1494 to i32*
  %1497 = load i32, i32* %1496, align 4
  %1498 = add i32 %1497, 1
  %1499 = zext i32 %1498 to i64
  store i64 %1499, i64* %RCX, align 8, !tbaa !2428
  %1500 = icmp eq i32 %1497, -1
  %1501 = icmp eq i32 %1498, 0
  %1502 = or i1 %1500, %1501
  %1503 = zext i1 %1502 to i8
  store i8 %1503, i8* %14, align 1, !tbaa !2433
  %1504 = and i32 %1498, 255
  %1505 = tail call i32 @llvm.ctpop.i32(i32 %1504) #11
  %1506 = trunc i32 %1505 to i8
  %1507 = and i8 %1506, 1
  %1508 = xor i8 %1507, 1
  store i8 %1508, i8* %21, align 1, !tbaa !2447
  %1509 = xor i32 %1497, %1498
  %1510 = lshr i32 %1509, 4
  %1511 = trunc i32 %1510 to i8
  %1512 = and i8 %1511, 1
  store i8 %1512, i8* %27, align 1, !tbaa !2451
  %1513 = zext i1 %1501 to i8
  store i8 %1513, i8* %30, align 1, !tbaa !2448
  %1514 = lshr i32 %1498, 31
  %1515 = trunc i32 %1514 to i8
  store i8 %1515, i8* %33, align 1, !tbaa !2449
  %1516 = lshr i32 %1497, 31
  %1517 = xor i32 %1514, %1516
  %1518 = add nuw nsw i32 %1517, %1514
  %1519 = icmp eq i32 %1518, 2
  %1520 = zext i1 %1519 to i8
  store i8 %1520, i8* %39, align 1, !tbaa !2450
  %1521 = sext i32 %1498 to i64
  store i64 %1521, i64* %RDX, align 8, !tbaa !2428
  %1522 = shl nsw i64 %1521, 3
  %1523 = add i64 %1522, %1493
  %1524 = add i64 %1481, 28
  store i64 %1524, i64* %PC, align 8
  %1525 = inttoptr i64 %1523 to double*
  store double %1489, double* %1525, align 8
  %1526 = load i64, i64* %RBP, align 8
  %1527 = add i64 %1526, -72
  %1528 = load i64, i64* %PC, align 8
  %1529 = add i64 %1528, 5
  store i64 %1529, i64* %PC, align 8
  %1530 = inttoptr i64 %1527 to double*
  %1531 = load double, double* %1530, align 8
  store double %1531, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %1532 = add i64 %1526, -112
  %1533 = add i64 %1528, 10
  store i64 %1533, i64* %PC, align 8
  %1534 = inttoptr i64 %1532 to double*
  %1535 = load double, double* %1534, align 8
  %1536 = fadd double %1531, %1535
  store double %1536, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %1537 = add i64 %1526, -16
  %1538 = add i64 %1528, 14
  store i64 %1538, i64* %PC, align 8
  %1539 = inttoptr i64 %1537 to i64*
  %1540 = load i64, i64* %1539, align 8
  store i64 %1540, i64* %RAX, align 8, !tbaa !2428
  %1541 = add i64 %1526, -40
  %1542 = add i64 %1528, 18
  store i64 %1542, i64* %PC, align 8
  %1543 = inttoptr i64 %1541 to i32*
  %1544 = load i32, i32* %1543, align 4
  %1545 = sext i32 %1544 to i64
  store i64 %1545, i64* %RDX, align 8, !tbaa !2428
  %1546 = shl nsw i64 %1545, 3
  %1547 = add i64 %1546, %1540
  %1548 = add i64 %1528, 23
  store i64 %1548, i64* %PC, align 8
  %1549 = inttoptr i64 %1547 to double*
  store double %1536, double* %1549, align 8
  %1550 = load i64, i64* %RBP, align 8
  %1551 = add i64 %1550, -80
  %1552 = load i64, i64* %PC, align 8
  %1553 = add i64 %1552, 5
  store i64 %1553, i64* %PC, align 8
  %1554 = inttoptr i64 %1551 to double*
  %1555 = load double, double* %1554, align 8
  store double %1555, double* %1680, align 1, !tbaa !2452
  store double 0.000000e+00, double* %1682, align 1, !tbaa !2452
  %1556 = add i64 %1550, -104
  %1557 = add i64 %1552, 10
  store i64 %1557, i64* %PC, align 8
  %1558 = inttoptr i64 %1556 to double*
  %1559 = load double, double* %1558, align 8
  %1560 = fadd double %1555, %1559
  store double %1560, double* %1680, align 1, !tbaa !2452
  store i64 0, i64* %1681, align 1, !tbaa !2452
  %1561 = add i64 %1550, -16
  %1562 = add i64 %1552, 14
  store i64 %1562, i64* %PC, align 8
  %1563 = inttoptr i64 %1561 to i64*
  %1564 = load i64, i64* %1563, align 8
  store i64 %1564, i64* %RAX, align 8, !tbaa !2428
  %1565 = add i64 %1550, -40
  %1566 = add i64 %1552, 17
  store i64 %1566, i64* %PC, align 8
  %1567 = inttoptr i64 %1565 to i32*
  %1568 = load i32, i32* %1567, align 4
  %1569 = add i32 %1568, 1
  %1570 = zext i32 %1569 to i64
  store i64 %1570, i64* %RCX, align 8, !tbaa !2428
  %1571 = icmp eq i32 %1568, -1
  %1572 = icmp eq i32 %1569, 0
  %1573 = or i1 %1571, %1572
  %1574 = zext i1 %1573 to i8
  store i8 %1574, i8* %14, align 1, !tbaa !2433
  %1575 = and i32 %1569, 255
  %1576 = tail call i32 @llvm.ctpop.i32(i32 %1575) #11
  %1577 = trunc i32 %1576 to i8
  %1578 = and i8 %1577, 1
  %1579 = xor i8 %1578, 1
  store i8 %1579, i8* %21, align 1, !tbaa !2447
  %1580 = xor i32 %1568, %1569
  %1581 = lshr i32 %1580, 4
  %1582 = trunc i32 %1581 to i8
  %1583 = and i8 %1582, 1
  store i8 %1583, i8* %27, align 1, !tbaa !2451
  %1584 = zext i1 %1572 to i8
  store i8 %1584, i8* %30, align 1, !tbaa !2448
  %1585 = lshr i32 %1569, 31
  %1586 = trunc i32 %1585 to i8
  store i8 %1586, i8* %33, align 1, !tbaa !2449
  %1587 = lshr i32 %1568, 31
  %1588 = xor i32 %1585, %1587
  %1589 = add nuw nsw i32 %1588, %1585
  %1590 = icmp eq i32 %1589, 2
  %1591 = zext i1 %1590 to i8
  store i8 %1591, i8* %39, align 1, !tbaa !2450
  %1592 = sext i32 %1569 to i64
  store i64 %1592, i64* %RDX, align 8, !tbaa !2428
  %1593 = shl nsw i64 %1592, 3
  %1594 = add i64 %1593, %1564
  %1595 = add i64 %1552, 28
  store i64 %1595, i64* %PC, align 8
  %1596 = inttoptr i64 %1594 to double*
  store double %1560, double* %1596, align 8
  %1597 = load i64, i64* %RBP, align 8
  %1598 = add i64 %1597, -28
  %1599 = load i64, i64* %PC, align 8
  %1600 = add i64 %1599, 3
  store i64 %1600, i64* %PC, align 8
  %1601 = inttoptr i64 %1598 to i32*
  %1602 = load i32, i32* %1601, align 4
  %1603 = add i32 %1602, 2
  %1604 = zext i32 %1603 to i64
  store i64 %1604, i64* %RAX, align 8, !tbaa !2428
  %1605 = icmp ugt i32 %1602, -3
  %1606 = zext i1 %1605 to i8
  store i8 %1606, i8* %14, align 1, !tbaa !2433
  %1607 = and i32 %1603, 255
  %1608 = tail call i32 @llvm.ctpop.i32(i32 %1607) #11
  %1609 = trunc i32 %1608 to i8
  %1610 = and i8 %1609, 1
  %1611 = xor i8 %1610, 1
  store i8 %1611, i8* %21, align 1, !tbaa !2447
  %1612 = xor i32 %1602, %1603
  %1613 = lshr i32 %1612, 4
  %1614 = trunc i32 %1613 to i8
  %1615 = and i8 %1614, 1
  store i8 %1615, i8* %27, align 1, !tbaa !2451
  %1616 = icmp eq i32 %1603, 0
  %1617 = zext i1 %1616 to i8
  store i8 %1617, i8* %30, align 1, !tbaa !2448
  %1618 = lshr i32 %1603, 31
  %1619 = trunc i32 %1618 to i8
  store i8 %1619, i8* %33, align 1, !tbaa !2449
  %1620 = lshr i32 %1602, 31
  %1621 = xor i32 %1618, %1620
  %1622 = add nuw nsw i32 %1621, %1618
  %1623 = icmp eq i32 %1622, 2
  %1624 = zext i1 %1623 to i8
  store i8 %1624, i8* %39, align 1, !tbaa !2450
  %1625 = add i64 %1599, 9
  store i64 %1625, i64* %PC, align 8
  store i32 %1603, i32* %1601, align 4
  %1626 = load i64, i64* %PC, align 8
  %1627 = add i64 %1626, -576
  store i64 %1627, i64* %PC, align 8, !tbaa !2428
  br label %block_402506

block_4024f0:                                     ; preds = %block_4024eb, %block_402480
  %1628 = phi i64 [ %91, %block_402480 ], [ %724, %block_4024eb ]
  %1629 = phi i64 [ %61, %block_402480 ], [ %131, %block_4024eb ]
  %MEMORY.4 = phi %struct.Memory* [ %2, %block_402480 ], [ %MEMORY.1, %block_4024eb ]
  %1630 = add i64 %1629, -44
  %1631 = add i64 %1628, 3
  store i64 %1631, i64* %PC, align 8
  %1632 = inttoptr i64 %1630 to i32*
  %1633 = load i32, i32* %1632, align 4
  %1634 = shl i32 %1633, 2
  %1635 = zext i32 %1634 to i64
  store i64 %1635, i64* %RAX, align 8, !tbaa !2428
  %1636 = lshr i32 %1633, 30
  %1637 = trunc i32 %1636 to i8
  %1638 = and i8 %1637, 1
  store i8 %1638, i8* %14, align 1, !tbaa !2432
  %1639 = and i32 %1634, 252
  %1640 = tail call i32 @llvm.ctpop.i32(i32 %1639) #11
  %1641 = trunc i32 %1640 to i8
  %1642 = and i8 %1641, 1
  %1643 = xor i8 %1642, 1
  store i8 %1643, i8* %21, align 1, !tbaa !2432
  store i8 0, i8* %27, align 1, !tbaa !2432
  %1644 = icmp eq i32 %1634, 0
  %1645 = zext i1 %1644 to i8
  store i8 %1645, i8* %30, align 1, !tbaa !2432
  %1646 = lshr i32 %1633, 29
  %1647 = and i32 %1646, 1
  %1648 = trunc i32 %1647 to i8
  store i8 %1648, i8* %33, align 1, !tbaa !2432
  store i8 0, i8* %39, align 1, !tbaa !2432
  %1649 = add i64 %1629, -4
  %1650 = add i64 %1628, 9
  store i64 %1650, i64* %PC, align 8
  %1651 = inttoptr i64 %1649 to i32*
  %1652 = load i32, i32* %1651, align 4
  %1653 = sub i32 %1634, %1652
  %1654 = icmp ult i32 %1634, %1652
  %1655 = zext i1 %1654 to i8
  store i8 %1655, i8* %14, align 1, !tbaa !2433
  %1656 = and i32 %1653, 255
  %1657 = tail call i32 @llvm.ctpop.i32(i32 %1656) #11
  %1658 = trunc i32 %1657 to i8
  %1659 = and i8 %1658, 1
  %1660 = xor i8 %1659, 1
  store i8 %1660, i8* %21, align 1, !tbaa !2447
  %1661 = xor i32 %1652, %1634
  %1662 = xor i32 %1661, %1653
  %1663 = lshr i32 %1662, 4
  %1664 = trunc i32 %1663 to i8
  %1665 = and i8 %1664, 1
  store i8 %1665, i8* %27, align 1, !tbaa !2451
  %1666 = icmp eq i32 %1653, 0
  %1667 = zext i1 %1666 to i8
  store i8 %1667, i8* %30, align 1, !tbaa !2448
  %1668 = lshr i32 %1653, 31
  %1669 = trunc i32 %1668 to i8
  store i8 %1669, i8* %33, align 1, !tbaa !2449
  %1670 = lshr i32 %1652, 31
  %1671 = xor i32 %1670, %1647
  %1672 = xor i32 %1668, %1647
  %1673 = add nuw nsw i32 %1672, %1671
  %1674 = icmp eq i32 %1673, 2
  %1675 = zext i1 %1674 to i8
  store i8 %1675, i8* %39, align 1, !tbaa !2450
  %.v6 = select i1 %1666, i64 15, i64 608
  %1676 = add i64 %1628, %.v6
  %1677 = add i64 %1629, -28
  %1678 = add i64 %1676, 7
  store i64 %1678, i64* %PC, align 8
  %1679 = inttoptr i64 %1677 to i32*
  store i32 0, i32* %1679, align 4
  %1680 = bitcast %union.VectorReg* %4 to double*
  %1681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %1682 = bitcast i64* %1681 to double*
  %1683 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  %.pre3 = load i64, i64* %PC, align 8
  br i1 %1666, label %block_4024f0.block_402506_crit_edge, label %block_4024f0.block_402757_crit_edge

block_4024f0.block_402506_crit_edge:              ; preds = %block_4024f0
  br label %block_402506

block_4024f0.block_402757_crit_edge:              ; preds = %block_4024f0
  br label %block_402757
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007c0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4007c0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i8, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i64 0, i32 0, i64 0), align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4, align 1, !tbaa !2433
  %5 = zext i8 %3 to i32
  %6 = tail call i32 @llvm.ctpop.i32(i32 %5) #11
  %7 = trunc i32 %6 to i8
  %8 = and i8 %7, 1
  %9 = xor i8 %8, 1
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9, i8* %10, align 1, !tbaa !2447
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11, align 1, !tbaa !2451
  %12 = icmp eq i8 %3, 0
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13, i8* %14, align 1, !tbaa !2448
  %15 = lshr i8 %3, 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %15, i8* %16, align 1, !tbaa !2449
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %17, align 1, !tbaa !2450
  %.v = select i1 %12, i64 9, i64 32
  %18 = add i64 %.v, %1
  store i64 %18, i64* %PC, align 8, !tbaa !2428
  br i1 %12, label %block_4007c9, label %block_4007e0

block_4007e0:                                     ; preds = %block_4007c0
  %19 = add i64 %18, 2
  store i64 %19, i64* %PC, align 8
  %20 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %21 = load i64, i64* %20, align 8, !tbaa !2428
  %22 = inttoptr i64 %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %PC, align 8, !tbaa !2428
  %24 = add i64 %21, 8
  store i64 %24, i64* %20, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4007c9:                                     ; preds = %block_4007c0
  %25 = load i64, i64* %RBP, align 8
  %26 = add i64 %18, 1
  store i64 %26, i64* %PC, align 8
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %25, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  store i64 %29, i64* %RBP, align 8, !tbaa !2428
  %32 = add i64 %31, -122
  %33 = add i64 %31, 8
  %34 = add i64 %28, -16
  %35 = inttoptr i64 %34 to i64*
  store i64 %33, i64* %35, align 8
  store i64 %34, i64* %27, align 8, !tbaa !2428
  store i64 %32, i64* %PC, align 8, !tbaa !2428
  %36 = tail call %struct.Memory* @sub_400750_deregister_tm_clones_renamed_(%struct.State* nonnull %0, i64 %32, %struct.Memory* %2)
  %37 = load i64, i64* %PC, align 8
  store i8 1, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i64 0, i32 0, i64 0), align 8
  %38 = add i64 %37, 8
  store i64 %38, i64* %PC, align 8
  %39 = load i64, i64* %27, align 8, !tbaa !2428
  %40 = add i64 %39, 8
  %41 = inttoptr i64 %39 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %RBP, align 8, !tbaa !2428
  store i64 %40, i64* %27, align 8, !tbaa !2428
  %43 = add i64 %37, 9
  store i64 %43, i64* %PC, align 8
  %44 = inttoptr i64 %40 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %PC, align 8, !tbaa !2428
  %46 = add i64 %39, 16
  store i64 %46, i64* %27, align 8, !tbaa !2428
  ret %struct.Memory* %36
}

; Function Attrs: noinline
define %struct.Memory* @sub_401030_cdft(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_401030:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %4 to i32*
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = load i64, i64* %RSP, align 8, !tbaa !2428
  %8 = add i64 %7, -8
  %9 = inttoptr i64 %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = load i64, i64* %PC, align 8
  store i64 %8, i64* %RBP, align 8, !tbaa !2428
  %11 = add i64 %7, -40
  store i64 %11, i64* %RSP, align 8, !tbaa !2428
  %12 = icmp ult i64 %8, 32
  %13 = zext i1 %12 to i8
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13, i8* %14, align 1, !tbaa !2433
  %15 = trunc i64 %11 to i32
  %16 = and i32 %15, 255
  %17 = tail call i32 @llvm.ctpop.i32(i32 %16) #11
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = xor i64 %8, %11
  %23 = lshr i64 %22, 4
  %24 = trunc i64 %23 to i8
  %25 = and i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %25, i8* %26, align 1, !tbaa !2451
  %27 = icmp eq i64 %11, 0
  %28 = zext i1 %27 to i8
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %28, i8* %29, align 1, !tbaa !2448
  %30 = lshr i64 %11, 63
  %31 = trunc i64 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %31, i8* %32, align 1, !tbaa !2449
  %33 = lshr i64 %8, 63
  %34 = xor i64 %30, %33
  %35 = add nuw nsw i64 %34, %33
  %36 = icmp eq i64 %35, 2
  %37 = zext i1 %36 to i8
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %37, i8* %38, align 1, !tbaa !2450
  %39 = add i64 %7, -12
  %40 = load i32, i32* %EDI, align 4
  %41 = add i64 %10, 10
  store i64 %41, i64* %PC, align 8
  %42 = inttoptr i64 %39 to i32*
  store i32 %40, i32* %42, align 4
  %43 = load i64, i64* %RBP, align 8
  %44 = add i64 %43, -8
  %45 = load i32, i32* %ESI, align 4
  %46 = load i64, i64* %PC, align 8
  %47 = add i64 %46, 3
  store i64 %47, i64* %PC, align 8
  %48 = inttoptr i64 %44 to i32*
  store i32 %45, i32* %48, align 4
  %49 = load i64, i64* %RBP, align 8
  %50 = add i64 %49, -16
  %51 = load i64, i64* %RDX, align 8
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 4
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %50 to i64*
  store i64 %51, i64* %54, align 8
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -24
  %57 = load i64, i64* %RCX, align 8
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 4
  store i64 %59, i64* %PC, align 8
  %60 = inttoptr i64 %56 to i64*
  store i64 %57, i64* %60, align 8
  %61 = load i64, i64* %RBP, align 8
  %62 = add i64 %61, -32
  %63 = load i64, i64* %R8, align 8
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 4
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %62 to i64*
  store i64 %63, i64* %66, align 8
  %67 = load i64, i64* %RBP, align 8
  %68 = add i64 %67, -4
  %69 = load i64, i64* %PC, align 8
  %70 = add i64 %69, 4
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %68 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = add i32 %72, -4
  %74 = icmp ult i32 %72, 4
  %75 = zext i1 %74 to i8
  store i8 %75, i8* %14, align 1, !tbaa !2433
  %76 = and i32 %73, 255
  %77 = tail call i32 @llvm.ctpop.i32(i32 %76) #11
  %78 = trunc i32 %77 to i8
  %79 = and i8 %78, 1
  %80 = xor i8 %79, 1
  store i8 %80, i8* %21, align 1, !tbaa !2447
  %81 = xor i32 %72, %73
  %82 = lshr i32 %81, 4
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 1
  store i8 %84, i8* %26, align 1, !tbaa !2451
  %85 = icmp eq i32 %73, 0
  %86 = zext i1 %85 to i8
  store i8 %86, i8* %29, align 1, !tbaa !2448
  %87 = lshr i32 %73, 31
  %88 = trunc i32 %87 to i8
  store i8 %88, i8* %32, align 1, !tbaa !2449
  %89 = lshr i32 %72, 31
  %90 = xor i32 %87, %89
  %91 = add nuw nsw i32 %90, %89
  %92 = icmp eq i32 %91, 2
  %93 = zext i1 %92 to i8
  store i8 %93, i8* %38, align 1, !tbaa !2450
  %94 = icmp ne i8 %88, 0
  %95 = xor i1 %94, %92
  %96 = or i1 %85, %95
  %.v = select i1 %96, i64 94, i64 10
  %97 = add i64 %69, %.v
  store i64 %97, i64* %PC, align 8, !tbaa !2428
  br i1 %96, label %block_4010a8, label %block_401054

block_40105e:                                     ; preds = %block_401054
  %98 = add i64 %242, 354
  %99 = add i64 %242, 16
  %100 = load i64, i64* %RSP, align 8, !tbaa !2428
  %101 = add i64 %100, -8
  %102 = inttoptr i64 %101 to i64*
  store i64 %99, i64* %102, align 8
  store i64 %101, i64* %RSP, align 8, !tbaa !2428
  store i64 %98, i64* %PC, align 8, !tbaa !2428
  %103 = tail call %struct.Memory* @sub_4011c0_bitrv2_renamed_(%struct.State* nonnull %0, i64 %98, %struct.Memory* %2)
  %104 = load i64, i64* %RBP, align 8
  %105 = add i64 %104, -4
  %106 = load i64, i64* %PC, align 8
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC, align 8
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDI, align 8, !tbaa !2428
  %111 = add i64 %104, -16
  %112 = add i64 %106, 7
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %111 to i64*
  %114 = load i64, i64* %113, align 8
  store i64 %114, i64* %RSI, align 8, !tbaa !2428
  %115 = add i64 %104, -32
  %116 = add i64 %106, 11
  store i64 %116, i64* %PC, align 8
  %117 = inttoptr i64 %115 to i64*
  %118 = load i64, i64* %117, align 8
  store i64 %118, i64* %RDX, align 8, !tbaa !2428
  %119 = add i64 %106, 2002
  %120 = add i64 %106, 16
  %121 = load i64, i64* %RSP, align 8, !tbaa !2428
  %122 = add i64 %121, -8
  %123 = inttoptr i64 %122 to i64*
  store i64 %120, i64* %123, align 8
  store i64 %122, i64* %RSP, align 8, !tbaa !2428
  store i64 %119, i64* %PC, align 8, !tbaa !2428
  %124 = tail call %struct.Memory* @sub_401840_cftfsub_renamed_(%struct.State* nonnull %0, i64 %119, %struct.Memory* %103)
  %125 = load i64, i64* %PC, align 8
  %126 = add i64 %125, 37
  store i64 %126, i64* %PC, align 8, !tbaa !2428
  br label %block_4010a3

block_4010a3:                                     ; preds = %block_401083, %block_40105e
  %127 = phi i64 [ %.pre, %block_401083 ], [ %126, %block_40105e ]
  %MEMORY.0 = phi %struct.Memory* [ %227, %block_401083 ], [ %124, %block_40105e ]
  %128 = add i64 %127, 36
  br label %block_4010c7

block_4010b2:                                     ; preds = %block_4010a8
  %129 = add i64 %169, 3
  store i64 %129, i64* %PC, align 8
  %130 = load i32, i32* %71, align 4
  %131 = zext i32 %130 to i64
  store i64 %131, i64* %RDI, align 8, !tbaa !2428
  %132 = add i64 %67, -16
  %133 = add i64 %169, 7
  store i64 %133, i64* %PC, align 8
  %134 = inttoptr i64 %132 to i64*
  %135 = load i64, i64* %134, align 8
  store i64 %135, i64* %RSI, align 8, !tbaa !2428
  %136 = add i64 %67, -32
  %137 = add i64 %169, 11
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %136 to i64*
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %RDX, align 8, !tbaa !2428
  %140 = add i64 %169, 1934
  %141 = add i64 %169, 16
  %142 = load i64, i64* %RSP, align 8, !tbaa !2428
  %143 = add i64 %142, -8
  %144 = inttoptr i64 %143 to i64*
  store i64 %141, i64* %144, align 8
  store i64 %143, i64* %RSP, align 8, !tbaa !2428
  store i64 %140, i64* %PC, align 8, !tbaa !2428
  %145 = tail call %struct.Memory* @sub_401840_cftfsub_renamed_(%struct.State* nonnull %0, i64 %140, %struct.Memory* %2)
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_4010c2

block_4010a8:                                     ; preds = %block_401030
  %146 = add i64 %97, 4
  store i64 %146, i64* %PC, align 8
  %147 = load i32, i32* %71, align 4
  %148 = add i32 %147, -4
  %149 = icmp ult i32 %147, 4
  %150 = zext i1 %149 to i8
  store i8 %150, i8* %14, align 1, !tbaa !2433
  %151 = and i32 %148, 255
  %152 = tail call i32 @llvm.ctpop.i32(i32 %151) #11
  %153 = trunc i32 %152 to i8
  %154 = and i8 %153, 1
  %155 = xor i8 %154, 1
  store i8 %155, i8* %21, align 1, !tbaa !2447
  %156 = xor i32 %147, %148
  %157 = lshr i32 %156, 4
  %158 = trunc i32 %157 to i8
  %159 = and i8 %158, 1
  store i8 %159, i8* %26, align 1, !tbaa !2451
  %160 = icmp eq i32 %148, 0
  %161 = zext i1 %160 to i8
  store i8 %161, i8* %29, align 1, !tbaa !2448
  %162 = lshr i32 %148, 31
  %163 = trunc i32 %162 to i8
  store i8 %163, i8* %32, align 1, !tbaa !2449
  %164 = lshr i32 %147, 31
  %165 = xor i32 %162, %164
  %166 = add nuw nsw i32 %165, %164
  %167 = icmp eq i32 %166, 2
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %38, align 1, !tbaa !2450
  %.v4 = select i1 %160, i64 10, i64 26
  %169 = add i64 %97, %.v4
  store i64 %169, i64* %PC, align 8, !tbaa !2428
  br i1 %160, label %block_4010b2, label %block_4010c2

block_4010c7:                                     ; preds = %block_4010c2, %block_4010a3
  %.sink = phi i64 [ %255, %block_4010c2 ], [ %128, %block_4010a3 ]
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.2, %block_4010c2 ], [ %MEMORY.0, %block_4010a3 ]
  %170 = load i64, i64* %RSP, align 8
  %171 = add i64 %170, 32
  store i64 %171, i64* %RSP, align 8, !tbaa !2428
  %172 = icmp ugt i64 %170, -33
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %14, align 1, !tbaa !2433
  %174 = trunc i64 %171 to i32
  %175 = and i32 %174, 255
  %176 = tail call i32 @llvm.ctpop.i32(i32 %175) #11
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  store i8 %179, i8* %21, align 1, !tbaa !2447
  %180 = xor i64 %170, %171
  %181 = lshr i64 %180, 4
  %182 = trunc i64 %181 to i8
  %183 = and i8 %182, 1
  store i8 %183, i8* %26, align 1, !tbaa !2451
  %184 = icmp eq i64 %171, 0
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %29, align 1, !tbaa !2448
  %186 = lshr i64 %171, 63
  %187 = trunc i64 %186 to i8
  store i8 %187, i8* %32, align 1, !tbaa !2449
  %188 = lshr i64 %170, 63
  %189 = xor i64 %186, %188
  %190 = add nuw nsw i64 %189, %186
  %191 = icmp eq i64 %190, 2
  %192 = zext i1 %191 to i8
  store i8 %192, i8* %38, align 1, !tbaa !2450
  %193 = add i64 %.sink, 5
  store i64 %193, i64* %PC, align 8
  %194 = add i64 %170, 40
  %195 = inttoptr i64 %171 to i64*
  %196 = load i64, i64* %195, align 8
  store i64 %196, i64* %RBP, align 8, !tbaa !2428
  store i64 %194, i64* %RSP, align 8, !tbaa !2428
  %197 = add i64 %.sink, 6
  store i64 %197, i64* %PC, align 8
  %198 = inttoptr i64 %194 to i64*
  %199 = load i64, i64* %198, align 8
  store i64 %199, i64* %PC, align 8, !tbaa !2428
  %200 = add i64 %170, 48
  store i64 %200, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_401083:                                     ; preds = %block_401054
  %201 = add i64 %242, 2909
  %202 = add i64 %242, 16
  %203 = load i64, i64* %RSP, align 8, !tbaa !2428
  %204 = add i64 %203, -8
  %205 = inttoptr i64 %204 to i64*
  store i64 %202, i64* %205, align 8
  store i64 %204, i64* %RSP, align 8, !tbaa !2428
  store i64 %201, i64* %PC, align 8, !tbaa !2428
  %206 = tail call %struct.Memory* @sub_401be0_bitrv2conj_renamed_(%struct.State* nonnull %0, i64 %201, %struct.Memory* %2)
  %207 = load i64, i64* %RBP, align 8
  %208 = add i64 %207, -4
  %209 = load i64, i64* %PC, align 8
  %210 = add i64 %209, 3
  store i64 %210, i64* %PC, align 8
  %211 = inttoptr i64 %208 to i32*
  %212 = load i32, i32* %211, align 4
  %213 = zext i32 %212 to i64
  store i64 %213, i64* %RDI, align 8, !tbaa !2428
  %214 = add i64 %207, -16
  %215 = add i64 %209, 7
  store i64 %215, i64* %PC, align 8
  %216 = inttoptr i64 %214 to i64*
  %217 = load i64, i64* %216, align 8
  store i64 %217, i64* %RSI, align 8, !tbaa !2428
  %218 = add i64 %207, -32
  %219 = add i64 %209, 11
  store i64 %219, i64* %PC, align 8
  %220 = inttoptr i64 %218 to i64*
  %221 = load i64, i64* %220, align 8
  store i64 %221, i64* %RDX, align 8, !tbaa !2428
  %222 = add i64 %209, 5101
  %223 = add i64 %209, 16
  %224 = load i64, i64* %RSP, align 8, !tbaa !2428
  %225 = add i64 %224, -8
  %226 = inttoptr i64 %225 to i64*
  store i64 %223, i64* %226, align 8
  store i64 %225, i64* %RSP, align 8, !tbaa !2428
  store i64 %222, i64* %PC, align 8, !tbaa !2428
  %227 = tail call %struct.Memory* @sub_402480_cftbsub_renamed_(%struct.State* nonnull %0, i64 %222, %struct.Memory* %206)
  %.pre = load i64, i64* %PC, align 8
  br label %block_4010a3

block_401054:                                     ; preds = %block_401030
  %228 = add i64 %67, -8
  %229 = add i64 %97, 4
  store i64 %229, i64* %PC, align 8
  %230 = inttoptr i64 %228 to i32*
  %231 = load i32, i32* %230, align 4
  store i8 0, i8* %14, align 1, !tbaa !2433
  %232 = and i32 %231, 255
  %233 = tail call i32 @llvm.ctpop.i32(i32 %232) #11
  %234 = trunc i32 %233 to i8
  %235 = and i8 %234, 1
  %236 = xor i8 %235, 1
  store i8 %236, i8* %21, align 1, !tbaa !2447
  store i8 0, i8* %26, align 1, !tbaa !2451
  %237 = icmp eq i32 %231, 0
  %238 = zext i1 %237 to i8
  store i8 %238, i8* %29, align 1, !tbaa !2448
  %239 = lshr i32 %231, 31
  %240 = trunc i32 %239 to i8
  store i8 %240, i8* %32, align 1, !tbaa !2449
  store i8 0, i8* %38, align 1, !tbaa !2450
  %241 = icmp ne i8 %240, 0
  %.v3 = select i1 %241, i64 47, i64 10
  %242 = add i64 %97, %.v3
  %243 = add i64 %242, 3
  store i64 %243, i64* %PC, align 8
  %244 = load i32, i32* %71, align 4
  %245 = zext i32 %244 to i64
  store i64 %245, i64* %RDI, align 8, !tbaa !2428
  %246 = add i64 %67, -24
  %247 = add i64 %242, 7
  store i64 %247, i64* %PC, align 8
  %248 = inttoptr i64 %246 to i64*
  %249 = load i64, i64* %248, align 8
  store i64 %249, i64* %RSI, align 8, !tbaa !2428
  %250 = add i64 %67, -16
  %251 = add i64 %242, 11
  store i64 %251, i64* %PC, align 8
  %252 = inttoptr i64 %250 to i64*
  %253 = load i64, i64* %252, align 8
  store i64 %253, i64* %RDX, align 8, !tbaa !2428
  br i1 %241, label %block_401083, label %block_40105e

block_4010c2:                                     ; preds = %block_4010a8, %block_4010b2
  %254 = phi i64 [ %169, %block_4010a8 ], [ %.pre1, %block_4010b2 ]
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_4010a8 ], [ %145, %block_4010b2 ]
  %255 = add i64 %254, 5
  br label %block_4010c7
}

; Function Attrs: noinline
define %struct.Memory* @sub_400638__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400638:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  store i64 %4, i64* %RSP, align 8, !tbaa !2428
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_604ff0__got_type* @seg_604ff0__got to i64), i64 8) to i64*), align 8
  store i64 %11, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %5, align 1, !tbaa !2433
  %12 = trunc i64 %11 to i32
  %13 = and i32 %12, 255
  %14 = tail call i32 @llvm.ctpop.i32(i32 %13) #11
  %15 = trunc i32 %14 to i8
  %16 = and i8 %15, 1
  %17 = xor i8 %16, 1
  store i8 %17, i8* %6, align 1, !tbaa !2447
  %18 = icmp eq i64 %11, 0
  %19 = zext i1 %18 to i8
  store i8 %19, i8* %8, align 1, !tbaa !2448
  %20 = lshr i64 %11, 63
  %21 = trunc i64 %20 to i8
  store i8 %21, i8* %9, align 1, !tbaa !2449
  store i8 0, i8* %10, align 1, !tbaa !2450
  store i8 0, i8* %7, align 1, !tbaa !2451
  %.v = select i1 %18, i64 18, i64 16
  %22 = add i64 %.v, %1
  store i64 %22, i64* %PC, align 8, !tbaa !2428
  br i1 %18, label %block_400638.block_40064a_crit_edge, label %block_400648

block_400638.block_40064a_crit_edge:              ; preds = %block_400638
  br label %block_40064a

block_400648:                                     ; preds = %block_400638
  %23 = add i64 %22, 2
  %24 = add i64 %3, -16
  %25 = inttoptr i64 %24 to i64*
  store i64 %23, i64* %25, align 8
  store i64 %24, i64* %RSP, align 8, !tbaa !2428
  store i64 %11, i64* %PC, align 8, !tbaa !2428
  %26 = tail call %struct.Memory* @__remill_function_call(%struct.State* nonnull %0, i64 %11, %struct.Memory* %2)
  %.pre = load i64, i64* %RSP, align 8
  %.pre1 = load i64, i64* %PC, align 8
  br label %block_40064a

block_40064a:                                     ; preds = %block_400638.block_40064a_crit_edge, %block_400648
  %27 = phi i64 [ %22, %block_400638.block_40064a_crit_edge ], [ %.pre1, %block_400648 ]
  %28 = phi i64 [ %4, %block_400638.block_40064a_crit_edge ], [ %.pre, %block_400648 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400638.block_40064a_crit_edge ], [ %26, %block_400648 ]
  %29 = add i64 %28, 8
  store i64 %29, i64* %RSP, align 8, !tbaa !2428
  %30 = icmp ugt i64 %28, -9
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %5, align 1, !tbaa !2433
  %32 = trunc i64 %29 to i32
  %33 = and i32 %32, 255
  %34 = tail call i32 @llvm.ctpop.i32(i32 %33) #11
  %35 = trunc i32 %34 to i8
  %36 = and i8 %35, 1
  %37 = xor i8 %36, 1
  store i8 %37, i8* %6, align 1, !tbaa !2447
  %38 = xor i64 %28, %29
  %39 = lshr i64 %38, 4
  %40 = trunc i64 %39 to i8
  %41 = and i8 %40, 1
  store i8 %41, i8* %7, align 1, !tbaa !2451
  %42 = icmp eq i64 %29, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %8, align 1, !tbaa !2448
  %44 = lshr i64 %29, 63
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %9, align 1, !tbaa !2449
  %46 = lshr i64 %28, 63
  %47 = xor i64 %44, %46
  %48 = add nuw nsw i64 %47, %44
  %49 = icmp eq i64 %48, 2
  %50 = zext i1 %49 to i8
  store i8 %50, i8* %10, align 1, !tbaa !2450
  %51 = add i64 %27, 5
  store i64 %51, i64* %PC, align 8
  %52 = inttoptr i64 %29 to i64*
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %PC, align 8, !tbaa !2428
  %54 = add i64 %28, 16
  store i64 %54, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_402870_cft1st(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_402870:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = load i64, i64* %RSP, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %7, i64* %11, align 8
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = add i64 %9, -32
  store i64 %13, i64* %RSP, align 8, !tbaa !2428
  %14 = icmp ult i64 %10, 24
  %15 = zext i1 %14 to i8
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 1, !tbaa !2433
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 255
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #11
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %22, i8* %23, align 1, !tbaa !2447
  %24 = xor i64 %10, 16
  %25 = xor i64 %24, %13
  %26 = lshr i64 %25, 4
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 1
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %28, i8* %29, align 1, !tbaa !2451
  %30 = icmp eq i64 %13, 0
  %31 = zext i1 %30 to i8
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %31, i8* %32, align 1, !tbaa !2448
  %33 = lshr i64 %13, 63
  %34 = trunc i64 %33 to i8
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %34, i8* %35, align 1, !tbaa !2449
  %36 = lshr i64 %10, 63
  %37 = xor i64 %33, %36
  %38 = add nuw nsw i64 %37, %36
  %39 = icmp eq i64 %38, 2
  %40 = zext i1 %39 to i8
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %40, i8* %41, align 1, !tbaa !2450
  %42 = add i64 %9, -12
  %43 = load i32, i32* %EDI, align 4
  %44 = add i64 %12, 10
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %42 to i32*
  store i32 %43, i32* %45, align 4
  %46 = load i64, i64* %RBP, align 8
  %47 = add i64 %46, -16
  %48 = load i64, i64* %RSI, align 8
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 4
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %47 to i64*
  store i64 %48, i64* %51, align 8
  %52 = load i64, i64* %RBP, align 8
  %53 = add i64 %52, -24
  %54 = load i64, i64* %RDX, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %55, 4
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %53 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -16
  %60 = load i64, i64* %PC, align 8
  %61 = add i64 %60, 4
  store i64 %61, i64* %PC, align 8
  %62 = inttoptr i64 %59 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %RDX, align 8, !tbaa !2428
  %64 = add i64 %60, 8
  store i64 %64, i64* %PC, align 8
  %65 = inttoptr i64 %63 to double*
  %66 = load double, double* %65, align 8
  %67 = bitcast [32 x %union.VectorReg]* %4 to double*
  store double %66, double* %67, align 1, !tbaa !2452
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %69 = bitcast i64* %68 to double*
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %70 = add i64 %60, 12
  store i64 %70, i64* %PC, align 8
  %71 = load i64, i64* %62, align 8
  store i64 %71, i64* %RDX, align 8, !tbaa !2428
  %72 = add i64 %71, 16
  %73 = add i64 %60, 17
  store i64 %73, i64* %PC, align 8
  %74 = inttoptr i64 %72 to double*
  %75 = load double, double* %74, align 8
  %76 = fadd double %66, %75
  store double %76, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %77 = add i64 %58, -96
  %78 = add i64 %60, 22
  store i64 %78, i64* %PC, align 8
  %79 = inttoptr i64 %77 to double*
  store double %76, double* %79, align 8
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -16
  %82 = load i64, i64* %PC, align 8
  %83 = add i64 %82, 4
  store i64 %83, i64* %PC, align 8
  %84 = inttoptr i64 %81 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %RDX, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = add i64 %82, 9
  store i64 %87, i64* %PC, align 8
  %88 = inttoptr i64 %86 to double*
  %89 = load double, double* %88, align 8
  store double %89, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %90 = add i64 %82, 13
  store i64 %90, i64* %PC, align 8
  %91 = load i64, i64* %84, align 8
  store i64 %91, i64* %RDX, align 8, !tbaa !2428
  %92 = add i64 %91, 24
  %93 = add i64 %82, 18
  store i64 %93, i64* %PC, align 8
  %94 = inttoptr i64 %92 to double*
  %95 = load double, double* %94, align 8
  %96 = fadd double %89, %95
  store double %96, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %97 = add i64 %80, -104
  %98 = add i64 %82, 23
  store i64 %98, i64* %PC, align 8
  %99 = inttoptr i64 %97 to double*
  store double %96, double* %99, align 8
  %100 = load i64, i64* %RBP, align 8
  %101 = add i64 %100, -16
  %102 = load i64, i64* %PC, align 8
  %103 = add i64 %102, 4
  store i64 %103, i64* %PC, align 8
  %104 = inttoptr i64 %101 to i64*
  %105 = load i64, i64* %104, align 8
  store i64 %105, i64* %RDX, align 8, !tbaa !2428
  %106 = add i64 %102, 8
  store i64 %106, i64* %PC, align 8
  %107 = inttoptr i64 %105 to double*
  %108 = load double, double* %107, align 8
  store double %108, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %109 = add i64 %102, 12
  store i64 %109, i64* %PC, align 8
  %110 = load i64, i64* %104, align 8
  store i64 %110, i64* %RDX, align 8, !tbaa !2428
  %111 = add i64 %110, 16
  %112 = add i64 %102, 17
  store i64 %112, i64* %PC, align 8
  %113 = inttoptr i64 %111 to double*
  %114 = load double, double* %113, align 8
  %115 = fsub double %108, %114
  store double %115, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %116 = add i64 %100, -112
  %117 = add i64 %102, 22
  store i64 %117, i64* %PC, align 8
  %118 = inttoptr i64 %116 to double*
  store double %115, double* %118, align 8
  %119 = load i64, i64* %RBP, align 8
  %120 = add i64 %119, -16
  %121 = load i64, i64* %PC, align 8
  %122 = add i64 %121, 4
  store i64 %122, i64* %PC, align 8
  %123 = inttoptr i64 %120 to i64*
  %124 = load i64, i64* %123, align 8
  store i64 %124, i64* %RDX, align 8, !tbaa !2428
  %125 = add i64 %124, 8
  %126 = add i64 %121, 9
  store i64 %126, i64* %PC, align 8
  %127 = inttoptr i64 %125 to double*
  %128 = load double, double* %127, align 8
  store double %128, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %129 = add i64 %121, 13
  store i64 %129, i64* %PC, align 8
  %130 = load i64, i64* %123, align 8
  store i64 %130, i64* %RDX, align 8, !tbaa !2428
  %131 = add i64 %130, 24
  %132 = add i64 %121, 18
  store i64 %132, i64* %PC, align 8
  %133 = inttoptr i64 %131 to double*
  %134 = load double, double* %133, align 8
  %135 = fsub double %128, %134
  store double %135, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %136 = add i64 %119, -120
  %137 = add i64 %121, 23
  store i64 %137, i64* %PC, align 8
  %138 = inttoptr i64 %136 to double*
  store double %135, double* %138, align 8
  %139 = load i64, i64* %RBP, align 8
  %140 = add i64 %139, -16
  %141 = load i64, i64* %PC, align 8
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC, align 8
  %143 = inttoptr i64 %140 to i64*
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %RDX, align 8, !tbaa !2428
  %145 = add i64 %144, 32
  %146 = add i64 %141, 9
  store i64 %146, i64* %PC, align 8
  %147 = inttoptr i64 %145 to double*
  %148 = load double, double* %147, align 8
  store double %148, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %149 = add i64 %141, 13
  store i64 %149, i64* %PC, align 8
  %150 = load i64, i64* %143, align 8
  store i64 %150, i64* %RDX, align 8, !tbaa !2428
  %151 = add i64 %150, 48
  %152 = add i64 %141, 18
  store i64 %152, i64* %PC, align 8
  %153 = inttoptr i64 %151 to double*
  %154 = load double, double* %153, align 8
  %155 = fadd double %148, %154
  store double %155, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %156 = add i64 %139, -128
  %157 = add i64 %141, 23
  store i64 %157, i64* %PC, align 8
  %158 = inttoptr i64 %156 to double*
  store double %155, double* %158, align 8
  %159 = load i64, i64* %RBP, align 8
  %160 = add i64 %159, -16
  %161 = load i64, i64* %PC, align 8
  %162 = add i64 %161, 4
  store i64 %162, i64* %PC, align 8
  %163 = inttoptr i64 %160 to i64*
  %164 = load i64, i64* %163, align 8
  store i64 %164, i64* %RDX, align 8, !tbaa !2428
  %165 = add i64 %164, 40
  %166 = add i64 %161, 9
  store i64 %166, i64* %PC, align 8
  %167 = inttoptr i64 %165 to double*
  %168 = load double, double* %167, align 8
  store double %168, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %169 = add i64 %161, 13
  store i64 %169, i64* %PC, align 8
  %170 = load i64, i64* %163, align 8
  store i64 %170, i64* %RDX, align 8, !tbaa !2428
  %171 = add i64 %170, 56
  %172 = add i64 %161, 18
  store i64 %172, i64* %PC, align 8
  %173 = inttoptr i64 %171 to double*
  %174 = load double, double* %173, align 8
  %175 = fadd double %168, %174
  store double %175, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %176 = add i64 %159, -136
  %177 = add i64 %161, 26
  store i64 %177, i64* %PC, align 8
  %178 = inttoptr i64 %176 to double*
  store double %175, double* %178, align 8
  %179 = load i64, i64* %RBP, align 8
  %180 = add i64 %179, -16
  %181 = load i64, i64* %PC, align 8
  %182 = add i64 %181, 4
  store i64 %182, i64* %PC, align 8
  %183 = inttoptr i64 %180 to i64*
  %184 = load i64, i64* %183, align 8
  store i64 %184, i64* %RDX, align 8, !tbaa !2428
  %185 = add i64 %184, 32
  %186 = add i64 %181, 9
  store i64 %186, i64* %PC, align 8
  %187 = inttoptr i64 %185 to double*
  %188 = load double, double* %187, align 8
  store double %188, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %189 = add i64 %181, 13
  store i64 %189, i64* %PC, align 8
  %190 = load i64, i64* %183, align 8
  store i64 %190, i64* %RDX, align 8, !tbaa !2428
  %191 = add i64 %190, 48
  %192 = add i64 %181, 18
  store i64 %192, i64* %PC, align 8
  %193 = inttoptr i64 %191 to double*
  %194 = load double, double* %193, align 8
  %195 = fsub double %188, %194
  store double %195, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %196 = add i64 %179, -144
  %197 = add i64 %181, 26
  store i64 %197, i64* %PC, align 8
  %198 = inttoptr i64 %196 to double*
  store double %195, double* %198, align 8
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -16
  %201 = load i64, i64* %PC, align 8
  %202 = add i64 %201, 4
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %200 to i64*
  %204 = load i64, i64* %203, align 8
  store i64 %204, i64* %RDX, align 8, !tbaa !2428
  %205 = add i64 %204, 40
  %206 = add i64 %201, 9
  store i64 %206, i64* %PC, align 8
  %207 = inttoptr i64 %205 to double*
  %208 = load double, double* %207, align 8
  store double %208, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %209 = add i64 %201, 13
  store i64 %209, i64* %PC, align 8
  %210 = load i64, i64* %203, align 8
  store i64 %210, i64* %RDX, align 8, !tbaa !2428
  %211 = add i64 %210, 56
  %212 = add i64 %201, 18
  store i64 %212, i64* %PC, align 8
  %213 = inttoptr i64 %211 to double*
  %214 = load double, double* %213, align 8
  %215 = fsub double %208, %214
  store double %215, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %216 = add i64 %199, -152
  %217 = add i64 %201, 26
  store i64 %217, i64* %PC, align 8
  %218 = inttoptr i64 %216 to double*
  store double %215, double* %218, align 8
  %219 = load i64, i64* %RBP, align 8
  %220 = add i64 %219, -96
  %221 = load i64, i64* %PC, align 8
  %222 = add i64 %221, 5
  store i64 %222, i64* %PC, align 8
  %223 = inttoptr i64 %220 to double*
  %224 = load double, double* %223, align 8
  store double %224, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %225 = add i64 %219, -128
  %226 = add i64 %221, 10
  store i64 %226, i64* %PC, align 8
  %227 = inttoptr i64 %225 to double*
  %228 = load double, double* %227, align 8
  %229 = fadd double %224, %228
  store double %229, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %230 = add i64 %219, -16
  %231 = add i64 %221, 14
  store i64 %231, i64* %PC, align 8
  %232 = inttoptr i64 %230 to i64*
  %233 = load i64, i64* %232, align 8
  store i64 %233, i64* %RDX, align 8, !tbaa !2428
  %234 = add i64 %221, 18
  store i64 %234, i64* %PC, align 8
  %235 = inttoptr i64 %233 to double*
  store double %229, double* %235, align 8
  %236 = load i64, i64* %RBP, align 8
  %237 = add i64 %236, -104
  %238 = load i64, i64* %PC, align 8
  %239 = add i64 %238, 5
  store i64 %239, i64* %PC, align 8
  %240 = inttoptr i64 %237 to double*
  %241 = load double, double* %240, align 8
  store double %241, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %242 = add i64 %236, -136
  %243 = add i64 %238, 13
  store i64 %243, i64* %PC, align 8
  %244 = inttoptr i64 %242 to double*
  %245 = load double, double* %244, align 8
  %246 = fadd double %241, %245
  store double %246, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %247 = add i64 %236, -16
  %248 = add i64 %238, 17
  store i64 %248, i64* %PC, align 8
  %249 = inttoptr i64 %247 to i64*
  %250 = load i64, i64* %249, align 8
  store i64 %250, i64* %RDX, align 8, !tbaa !2428
  %251 = add i64 %250, 8
  %252 = add i64 %238, 22
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %251 to double*
  store double %246, double* %253, align 8
  %254 = load i64, i64* %RBP, align 8
  %255 = add i64 %254, -96
  %256 = load i64, i64* %PC, align 8
  %257 = add i64 %256, 5
  store i64 %257, i64* %PC, align 8
  %258 = inttoptr i64 %255 to double*
  %259 = load double, double* %258, align 8
  store double %259, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %260 = add i64 %254, -128
  %261 = add i64 %256, 10
  store i64 %261, i64* %PC, align 8
  %262 = inttoptr i64 %260 to double*
  %263 = load double, double* %262, align 8
  %264 = fsub double %259, %263
  store double %264, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %265 = add i64 %254, -16
  %266 = add i64 %256, 14
  store i64 %266, i64* %PC, align 8
  %267 = inttoptr i64 %265 to i64*
  %268 = load i64, i64* %267, align 8
  store i64 %268, i64* %RDX, align 8, !tbaa !2428
  %269 = add i64 %268, 32
  %270 = add i64 %256, 19
  store i64 %270, i64* %PC, align 8
  %271 = inttoptr i64 %269 to double*
  store double %264, double* %271, align 8
  %272 = load i64, i64* %RBP, align 8
  %273 = add i64 %272, -104
  %274 = load i64, i64* %PC, align 8
  %275 = add i64 %274, 5
  store i64 %275, i64* %PC, align 8
  %276 = inttoptr i64 %273 to double*
  %277 = load double, double* %276, align 8
  store double %277, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %278 = add i64 %272, -136
  %279 = add i64 %274, 13
  store i64 %279, i64* %PC, align 8
  %280 = inttoptr i64 %278 to double*
  %281 = load double, double* %280, align 8
  %282 = fsub double %277, %281
  store double %282, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %283 = add i64 %272, -16
  %284 = add i64 %274, 17
  store i64 %284, i64* %PC, align 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285, align 8
  store i64 %286, i64* %RDX, align 8, !tbaa !2428
  %287 = add i64 %286, 40
  %288 = add i64 %274, 22
  store i64 %288, i64* %PC, align 8
  %289 = inttoptr i64 %287 to double*
  store double %282, double* %289, align 8
  %290 = load i64, i64* %RBP, align 8
  %291 = add i64 %290, -112
  %292 = load i64, i64* %PC, align 8
  %293 = add i64 %292, 5
  store i64 %293, i64* %PC, align 8
  %294 = inttoptr i64 %291 to double*
  %295 = load double, double* %294, align 8
  store double %295, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %296 = add i64 %290, -152
  %297 = add i64 %292, 13
  store i64 %297, i64* %PC, align 8
  %298 = inttoptr i64 %296 to double*
  %299 = load double, double* %298, align 8
  %300 = fsub double %295, %299
  store double %300, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %301 = add i64 %290, -16
  %302 = add i64 %292, 17
  store i64 %302, i64* %PC, align 8
  %303 = inttoptr i64 %301 to i64*
  %304 = load i64, i64* %303, align 8
  store i64 %304, i64* %RDX, align 8, !tbaa !2428
  %305 = add i64 %304, 16
  %306 = add i64 %292, 22
  store i64 %306, i64* %PC, align 8
  %307 = inttoptr i64 %305 to double*
  store double %300, double* %307, align 8
  %308 = load i64, i64* %RBP, align 8
  %309 = add i64 %308, -120
  %310 = load i64, i64* %PC, align 8
  %311 = add i64 %310, 5
  store i64 %311, i64* %PC, align 8
  %312 = inttoptr i64 %309 to double*
  %313 = load double, double* %312, align 8
  store double %313, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %314 = add i64 %308, -144
  %315 = add i64 %310, 13
  store i64 %315, i64* %PC, align 8
  %316 = inttoptr i64 %314 to double*
  %317 = load double, double* %316, align 8
  %318 = fadd double %313, %317
  store double %318, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %319 = add i64 %308, -16
  %320 = add i64 %310, 17
  store i64 %320, i64* %PC, align 8
  %321 = inttoptr i64 %319 to i64*
  %322 = load i64, i64* %321, align 8
  store i64 %322, i64* %RDX, align 8, !tbaa !2428
  %323 = add i64 %322, 24
  %324 = add i64 %310, 22
  store i64 %324, i64* %PC, align 8
  %325 = inttoptr i64 %323 to double*
  store double %318, double* %325, align 8
  %326 = load i64, i64* %RBP, align 8
  %327 = add i64 %326, -112
  %328 = load i64, i64* %PC, align 8
  %329 = add i64 %328, 5
  store i64 %329, i64* %PC, align 8
  %330 = inttoptr i64 %327 to double*
  %331 = load double, double* %330, align 8
  store double %331, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %332 = add i64 %326, -152
  %333 = add i64 %328, 13
  store i64 %333, i64* %PC, align 8
  %334 = inttoptr i64 %332 to double*
  %335 = load double, double* %334, align 8
  %336 = fadd double %331, %335
  store double %336, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %337 = add i64 %326, -16
  %338 = add i64 %328, 17
  store i64 %338, i64* %PC, align 8
  %339 = inttoptr i64 %337 to i64*
  %340 = load i64, i64* %339, align 8
  store i64 %340, i64* %RDX, align 8, !tbaa !2428
  %341 = add i64 %340, 48
  %342 = add i64 %328, 22
  store i64 %342, i64* %PC, align 8
  %343 = inttoptr i64 %341 to double*
  store double %336, double* %343, align 8
  %344 = load i64, i64* %RBP, align 8
  %345 = add i64 %344, -120
  %346 = load i64, i64* %PC, align 8
  %347 = add i64 %346, 5
  store i64 %347, i64* %PC, align 8
  %348 = inttoptr i64 %345 to double*
  %349 = load double, double* %348, align 8
  store double %349, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %350 = add i64 %344, -144
  %351 = add i64 %346, 13
  store i64 %351, i64* %PC, align 8
  %352 = inttoptr i64 %350 to double*
  %353 = load double, double* %352, align 8
  %354 = fsub double %349, %353
  store double %354, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %355 = add i64 %344, -16
  %356 = add i64 %346, 17
  store i64 %356, i64* %PC, align 8
  %357 = inttoptr i64 %355 to i64*
  %358 = load i64, i64* %357, align 8
  store i64 %358, i64* %RDX, align 8, !tbaa !2428
  %359 = add i64 %358, 56
  %360 = add i64 %346, 22
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %359 to double*
  store double %354, double* %361, align 8
  %362 = load i64, i64* %RBP, align 8
  %363 = add i64 %362, -24
  %364 = load i64, i64* %PC, align 8
  %365 = add i64 %364, 4
  store i64 %365, i64* %PC, align 8
  %366 = inttoptr i64 %363 to i64*
  %367 = load i64, i64* %366, align 8
  store i64 %367, i64* %RDX, align 8, !tbaa !2428
  %368 = add i64 %367, 16
  %369 = add i64 %364, 9
  store i64 %369, i64* %PC, align 8
  %370 = inttoptr i64 %368 to i64*
  %371 = load i64, i64* %370, align 8
  %372 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %4, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %371, i64* %372, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %373 = add i64 %362, -48
  %374 = add i64 %364, 14
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i64*
  store i64 %371, i64* %375, align 8
  %376 = load i64, i64* %RBP, align 8
  %377 = add i64 %376, -16
  %378 = load i64, i64* %PC, align 8
  %379 = add i64 %378, 4
  store i64 %379, i64* %PC, align 8
  %380 = inttoptr i64 %377 to i64*
  %381 = load i64, i64* %380, align 8
  store i64 %381, i64* %RDX, align 8, !tbaa !2428
  %382 = add i64 %381, 64
  %383 = add i64 %378, 9
  store i64 %383, i64* %PC, align 8
  %384 = inttoptr i64 %382 to double*
  %385 = load double, double* %384, align 8
  store double %385, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %386 = add i64 %378, 13
  store i64 %386, i64* %PC, align 8
  %387 = load i64, i64* %380, align 8
  store i64 %387, i64* %RDX, align 8, !tbaa !2428
  %388 = add i64 %387, 80
  %389 = add i64 %378, 18
  store i64 %389, i64* %PC, align 8
  %390 = inttoptr i64 %388 to double*
  %391 = load double, double* %390, align 8
  %392 = fadd double %385, %391
  store double %392, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %393 = add i64 %376, -96
  %394 = add i64 %378, 23
  store i64 %394, i64* %PC, align 8
  %395 = inttoptr i64 %393 to double*
  store double %392, double* %395, align 8
  %396 = load i64, i64* %RBP, align 8
  %397 = add i64 %396, -16
  %398 = load i64, i64* %PC, align 8
  %399 = add i64 %398, 4
  store i64 %399, i64* %PC, align 8
  %400 = inttoptr i64 %397 to i64*
  %401 = load i64, i64* %400, align 8
  store i64 %401, i64* %RDX, align 8, !tbaa !2428
  %402 = add i64 %401, 72
  %403 = add i64 %398, 9
  store i64 %403, i64* %PC, align 8
  %404 = inttoptr i64 %402 to double*
  %405 = load double, double* %404, align 8
  store double %405, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %406 = add i64 %398, 13
  store i64 %406, i64* %PC, align 8
  %407 = load i64, i64* %400, align 8
  store i64 %407, i64* %RDX, align 8, !tbaa !2428
  %408 = add i64 %407, 88
  %409 = add i64 %398, 18
  store i64 %409, i64* %PC, align 8
  %410 = inttoptr i64 %408 to double*
  %411 = load double, double* %410, align 8
  %412 = fadd double %405, %411
  store double %412, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %413 = add i64 %396, -104
  %414 = add i64 %398, 23
  store i64 %414, i64* %PC, align 8
  %415 = inttoptr i64 %413 to double*
  store double %412, double* %415, align 8
  %416 = load i64, i64* %RBP, align 8
  %417 = add i64 %416, -16
  %418 = load i64, i64* %PC, align 8
  %419 = add i64 %418, 4
  store i64 %419, i64* %PC, align 8
  %420 = inttoptr i64 %417 to i64*
  %421 = load i64, i64* %420, align 8
  store i64 %421, i64* %RDX, align 8, !tbaa !2428
  %422 = add i64 %421, 64
  %423 = add i64 %418, 9
  store i64 %423, i64* %PC, align 8
  %424 = inttoptr i64 %422 to double*
  %425 = load double, double* %424, align 8
  store double %425, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %426 = add i64 %418, 13
  store i64 %426, i64* %PC, align 8
  %427 = load i64, i64* %420, align 8
  store i64 %427, i64* %RDX, align 8, !tbaa !2428
  %428 = add i64 %427, 80
  %429 = add i64 %418, 18
  store i64 %429, i64* %PC, align 8
  %430 = inttoptr i64 %428 to double*
  %431 = load double, double* %430, align 8
  %432 = fsub double %425, %431
  store double %432, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %433 = add i64 %416, -112
  %434 = add i64 %418, 23
  store i64 %434, i64* %PC, align 8
  %435 = inttoptr i64 %433 to double*
  store double %432, double* %435, align 8
  %436 = load i64, i64* %RBP, align 8
  %437 = add i64 %436, -16
  %438 = load i64, i64* %PC, align 8
  %439 = add i64 %438, 4
  store i64 %439, i64* %PC, align 8
  %440 = inttoptr i64 %437 to i64*
  %441 = load i64, i64* %440, align 8
  store i64 %441, i64* %RDX, align 8, !tbaa !2428
  %442 = add i64 %441, 72
  %443 = add i64 %438, 9
  store i64 %443, i64* %PC, align 8
  %444 = inttoptr i64 %442 to double*
  %445 = load double, double* %444, align 8
  store double %445, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %446 = add i64 %438, 13
  store i64 %446, i64* %PC, align 8
  %447 = load i64, i64* %440, align 8
  store i64 %447, i64* %RDX, align 8, !tbaa !2428
  %448 = add i64 %447, 88
  %449 = add i64 %438, 18
  store i64 %449, i64* %PC, align 8
  %450 = inttoptr i64 %448 to double*
  %451 = load double, double* %450, align 8
  %452 = fsub double %445, %451
  store double %452, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %453 = add i64 %436, -120
  %454 = add i64 %438, 23
  store i64 %454, i64* %PC, align 8
  %455 = inttoptr i64 %453 to double*
  store double %452, double* %455, align 8
  %456 = load i64, i64* %RBP, align 8
  %457 = add i64 %456, -16
  %458 = load i64, i64* %PC, align 8
  %459 = add i64 %458, 4
  store i64 %459, i64* %PC, align 8
  %460 = inttoptr i64 %457 to i64*
  %461 = load i64, i64* %460, align 8
  store i64 %461, i64* %RDX, align 8, !tbaa !2428
  %462 = add i64 %461, 96
  %463 = add i64 %458, 9
  store i64 %463, i64* %PC, align 8
  %464 = inttoptr i64 %462 to double*
  %465 = load double, double* %464, align 8
  store double %465, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %466 = add i64 %458, 13
  store i64 %466, i64* %PC, align 8
  %467 = load i64, i64* %460, align 8
  store i64 %467, i64* %RDX, align 8, !tbaa !2428
  %468 = add i64 %467, 112
  %469 = add i64 %458, 18
  store i64 %469, i64* %PC, align 8
  %470 = inttoptr i64 %468 to double*
  %471 = load double, double* %470, align 8
  %472 = fadd double %465, %471
  store double %472, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %473 = add i64 %456, -128
  %474 = add i64 %458, 23
  store i64 %474, i64* %PC, align 8
  %475 = inttoptr i64 %473 to double*
  store double %472, double* %475, align 8
  %476 = load i64, i64* %RBP, align 8
  %477 = add i64 %476, -16
  %478 = load i64, i64* %PC, align 8
  %479 = add i64 %478, 4
  store i64 %479, i64* %PC, align 8
  %480 = inttoptr i64 %477 to i64*
  %481 = load i64, i64* %480, align 8
  store i64 %481, i64* %RDX, align 8, !tbaa !2428
  %482 = add i64 %481, 104
  %483 = add i64 %478, 9
  store i64 %483, i64* %PC, align 8
  %484 = inttoptr i64 %482 to double*
  %485 = load double, double* %484, align 8
  store double %485, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %486 = add i64 %478, 13
  store i64 %486, i64* %PC, align 8
  %487 = load i64, i64* %480, align 8
  store i64 %487, i64* %RDX, align 8, !tbaa !2428
  %488 = add i64 %487, 120
  %489 = add i64 %478, 18
  store i64 %489, i64* %PC, align 8
  %490 = inttoptr i64 %488 to double*
  %491 = load double, double* %490, align 8
  %492 = fadd double %485, %491
  store double %492, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %493 = add i64 %476, -136
  %494 = add i64 %478, 26
  store i64 %494, i64* %PC, align 8
  %495 = inttoptr i64 %493 to double*
  store double %492, double* %495, align 8
  %496 = load i64, i64* %RBP, align 8
  %497 = add i64 %496, -16
  %498 = load i64, i64* %PC, align 8
  %499 = add i64 %498, 4
  store i64 %499, i64* %PC, align 8
  %500 = inttoptr i64 %497 to i64*
  %501 = load i64, i64* %500, align 8
  store i64 %501, i64* %RDX, align 8, !tbaa !2428
  %502 = add i64 %501, 96
  %503 = add i64 %498, 9
  store i64 %503, i64* %PC, align 8
  %504 = inttoptr i64 %502 to double*
  %505 = load double, double* %504, align 8
  store double %505, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %506 = add i64 %498, 13
  store i64 %506, i64* %PC, align 8
  %507 = load i64, i64* %500, align 8
  store i64 %507, i64* %RDX, align 8, !tbaa !2428
  %508 = add i64 %507, 112
  %509 = add i64 %498, 18
  store i64 %509, i64* %PC, align 8
  %510 = inttoptr i64 %508 to double*
  %511 = load double, double* %510, align 8
  %512 = fsub double %505, %511
  store double %512, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %513 = add i64 %496, -144
  %514 = add i64 %498, 26
  store i64 %514, i64* %PC, align 8
  %515 = inttoptr i64 %513 to double*
  store double %512, double* %515, align 8
  %516 = load i64, i64* %RBP, align 8
  %517 = add i64 %516, -16
  %518 = load i64, i64* %PC, align 8
  %519 = add i64 %518, 4
  store i64 %519, i64* %PC, align 8
  %520 = inttoptr i64 %517 to i64*
  %521 = load i64, i64* %520, align 8
  store i64 %521, i64* %RDX, align 8, !tbaa !2428
  %522 = add i64 %521, 104
  %523 = add i64 %518, 9
  store i64 %523, i64* %PC, align 8
  %524 = inttoptr i64 %522 to double*
  %525 = load double, double* %524, align 8
  store double %525, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %526 = add i64 %518, 13
  store i64 %526, i64* %PC, align 8
  %527 = load i64, i64* %520, align 8
  store i64 %527, i64* %RDX, align 8, !tbaa !2428
  %528 = add i64 %527, 120
  %529 = add i64 %518, 18
  store i64 %529, i64* %PC, align 8
  %530 = inttoptr i64 %528 to double*
  %531 = load double, double* %530, align 8
  %532 = fsub double %525, %531
  store double %532, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %533 = add i64 %516, -152
  %534 = add i64 %518, 26
  store i64 %534, i64* %PC, align 8
  %535 = inttoptr i64 %533 to double*
  store double %532, double* %535, align 8
  %536 = load i64, i64* %RBP, align 8
  %537 = add i64 %536, -96
  %538 = load i64, i64* %PC, align 8
  %539 = add i64 %538, 5
  store i64 %539, i64* %PC, align 8
  %540 = inttoptr i64 %537 to double*
  %541 = load double, double* %540, align 8
  store double %541, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %542 = add i64 %536, -128
  %543 = add i64 %538, 10
  store i64 %543, i64* %PC, align 8
  %544 = inttoptr i64 %542 to double*
  %545 = load double, double* %544, align 8
  %546 = fadd double %541, %545
  store double %546, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %547 = add i64 %536, -16
  %548 = add i64 %538, 14
  store i64 %548, i64* %PC, align 8
  %549 = inttoptr i64 %547 to i64*
  %550 = load i64, i64* %549, align 8
  store i64 %550, i64* %RDX, align 8, !tbaa !2428
  %551 = add i64 %550, 64
  %552 = add i64 %538, 19
  store i64 %552, i64* %PC, align 8
  %553 = inttoptr i64 %551 to double*
  store double %546, double* %553, align 8
  %554 = load i64, i64* %RBP, align 8
  %555 = add i64 %554, -104
  %556 = load i64, i64* %PC, align 8
  %557 = add i64 %556, 5
  store i64 %557, i64* %PC, align 8
  %558 = inttoptr i64 %555 to double*
  %559 = load double, double* %558, align 8
  store double %559, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %560 = add i64 %554, -136
  %561 = add i64 %556, 13
  store i64 %561, i64* %PC, align 8
  %562 = inttoptr i64 %560 to double*
  %563 = load double, double* %562, align 8
  %564 = fadd double %559, %563
  store double %564, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %565 = add i64 %554, -16
  %566 = add i64 %556, 17
  store i64 %566, i64* %PC, align 8
  %567 = inttoptr i64 %565 to i64*
  %568 = load i64, i64* %567, align 8
  store i64 %568, i64* %RDX, align 8, !tbaa !2428
  %569 = add i64 %568, 72
  %570 = add i64 %556, 22
  store i64 %570, i64* %PC, align 8
  %571 = inttoptr i64 %569 to double*
  store double %564, double* %571, align 8
  %572 = load i64, i64* %RBP, align 8
  %573 = add i64 %572, -136
  %574 = load i64, i64* %PC, align 8
  %575 = add i64 %574, 8
  store i64 %575, i64* %PC, align 8
  %576 = inttoptr i64 %573 to double*
  %577 = load double, double* %576, align 8
  store double %577, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %578 = add i64 %572, -104
  %579 = add i64 %574, 13
  store i64 %579, i64* %PC, align 8
  %580 = inttoptr i64 %578 to double*
  %581 = load double, double* %580, align 8
  %582 = fsub double %577, %581
  store double %582, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %583 = add i64 %572, -16
  %584 = add i64 %574, 17
  store i64 %584, i64* %PC, align 8
  %585 = inttoptr i64 %583 to i64*
  %586 = load i64, i64* %585, align 8
  store i64 %586, i64* %RDX, align 8, !tbaa !2428
  %587 = add i64 %586, 96
  %588 = add i64 %574, 22
  store i64 %588, i64* %PC, align 8
  %589 = inttoptr i64 %587 to double*
  store double %582, double* %589, align 8
  %590 = load i64, i64* %RBP, align 8
  %591 = add i64 %590, -96
  %592 = load i64, i64* %PC, align 8
  %593 = add i64 %592, 5
  store i64 %593, i64* %PC, align 8
  %594 = inttoptr i64 %591 to double*
  %595 = load double, double* %594, align 8
  store double %595, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %596 = add i64 %590, -128
  %597 = add i64 %592, 10
  store i64 %597, i64* %PC, align 8
  %598 = inttoptr i64 %596 to double*
  %599 = load double, double* %598, align 8
  %600 = fsub double %595, %599
  store double %600, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %601 = add i64 %590, -16
  %602 = add i64 %592, 14
  store i64 %602, i64* %PC, align 8
  %603 = inttoptr i64 %601 to i64*
  %604 = load i64, i64* %603, align 8
  store i64 %604, i64* %RDX, align 8, !tbaa !2428
  %605 = add i64 %604, 104
  %606 = add i64 %592, 19
  store i64 %606, i64* %PC, align 8
  %607 = inttoptr i64 %605 to double*
  store double %600, double* %607, align 8
  %608 = load i64, i64* %RBP, align 8
  %609 = add i64 %608, -112
  %610 = load i64, i64* %PC, align 8
  %611 = add i64 %610, 5
  store i64 %611, i64* %PC, align 8
  %612 = inttoptr i64 %609 to double*
  %613 = load double, double* %612, align 8
  store double %613, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %614 = add i64 %608, -152
  %615 = add i64 %610, 13
  store i64 %615, i64* %PC, align 8
  %616 = inttoptr i64 %614 to double*
  %617 = load double, double* %616, align 8
  %618 = fsub double %613, %617
  store double %618, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %619 = add i64 %608, -96
  %620 = add i64 %610, 18
  store i64 %620, i64* %PC, align 8
  %621 = inttoptr i64 %619 to double*
  store double %618, double* %621, align 8
  %622 = load i64, i64* %RBP, align 8
  %623 = add i64 %622, -120
  %624 = load i64, i64* %PC, align 8
  %625 = add i64 %624, 5
  store i64 %625, i64* %PC, align 8
  %626 = inttoptr i64 %623 to double*
  %627 = load double, double* %626, align 8
  store double %627, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %628 = add i64 %622, -144
  %629 = add i64 %624, 13
  store i64 %629, i64* %PC, align 8
  %630 = inttoptr i64 %628 to double*
  %631 = load double, double* %630, align 8
  %632 = fadd double %627, %631
  store double %632, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %633 = add i64 %622, -104
  %634 = add i64 %624, 18
  store i64 %634, i64* %PC, align 8
  %635 = inttoptr i64 %633 to double*
  store double %632, double* %635, align 8
  %636 = load i64, i64* %RBP, align 8
  %637 = add i64 %636, -48
  %638 = load i64, i64* %PC, align 8
  %639 = add i64 %638, 5
  store i64 %639, i64* %PC, align 8
  %640 = inttoptr i64 %637 to double*
  %641 = load double, double* %640, align 8
  store double %641, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %642 = bitcast %union.VectorReg* %5 to i8*
  %643 = add i64 %636, -96
  %644 = add i64 %638, 10
  store i64 %644, i64* %PC, align 8
  %645 = inttoptr i64 %643 to double*
  %646 = load double, double* %645, align 8
  %647 = bitcast %union.VectorReg* %5 to double*
  store double %646, double* %647, align 1, !tbaa !2452
  %648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %649 = bitcast i64* %648 to double*
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %650 = add i64 %636, -104
  %651 = add i64 %638, 15
  store i64 %651, i64* %PC, align 8
  %652 = inttoptr i64 %650 to double*
  %653 = load double, double* %652, align 8
  %654 = fsub double %646, %653
  store double %654, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %655 = fmul double %641, %654
  store double %655, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %656 = add i64 %636, -16
  %657 = add i64 %638, 23
  store i64 %657, i64* %PC, align 8
  %658 = inttoptr i64 %656 to i64*
  %659 = load i64, i64* %658, align 8
  store i64 %659, i64* %RDX, align 8, !tbaa !2428
  %660 = add i64 %659, 80
  %661 = add i64 %638, 28
  store i64 %661, i64* %PC, align 8
  %662 = inttoptr i64 %660 to double*
  store double %655, double* %662, align 8
  %663 = load i64, i64* %RBP, align 8
  %664 = add i64 %663, -48
  %665 = load i64, i64* %PC, align 8
  %666 = add i64 %665, 5
  store i64 %666, i64* %PC, align 8
  %667 = inttoptr i64 %664 to double*
  %668 = load double, double* %667, align 8
  store double %668, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %669 = add i64 %663, -96
  %670 = add i64 %665, 10
  store i64 %670, i64* %PC, align 8
  %671 = inttoptr i64 %669 to double*
  %672 = load double, double* %671, align 8
  store double %672, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %673 = add i64 %663, -104
  %674 = add i64 %665, 15
  store i64 %674, i64* %PC, align 8
  %675 = inttoptr i64 %673 to double*
  %676 = load double, double* %675, align 8
  %677 = fadd double %672, %676
  store double %677, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %678 = fmul double %668, %677
  store double %678, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %679 = add i64 %663, -16
  %680 = add i64 %665, 23
  store i64 %680, i64* %PC, align 8
  %681 = inttoptr i64 %679 to i64*
  %682 = load i64, i64* %681, align 8
  store i64 %682, i64* %RDX, align 8, !tbaa !2428
  %683 = add i64 %682, 88
  %684 = add i64 %665, 28
  store i64 %684, i64* %PC, align 8
  %685 = inttoptr i64 %683 to double*
  store double %678, double* %685, align 8
  %686 = load i64, i64* %RBP, align 8
  %687 = add i64 %686, -152
  %688 = load i64, i64* %PC, align 8
  %689 = add i64 %688, 8
  store i64 %689, i64* %PC, align 8
  %690 = inttoptr i64 %687 to double*
  %691 = load double, double* %690, align 8
  store double %691, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %692 = add i64 %686, -112
  %693 = add i64 %688, 13
  store i64 %693, i64* %PC, align 8
  %694 = inttoptr i64 %692 to double*
  %695 = load double, double* %694, align 8
  %696 = fadd double %691, %695
  store double %696, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %697 = add i64 %686, -96
  %698 = add i64 %688, 18
  store i64 %698, i64* %PC, align 8
  %699 = inttoptr i64 %697 to double*
  store double %696, double* %699, align 8
  %700 = load i64, i64* %RBP, align 8
  %701 = add i64 %700, -144
  %702 = load i64, i64* %PC, align 8
  %703 = add i64 %702, 8
  store i64 %703, i64* %PC, align 8
  %704 = inttoptr i64 %701 to double*
  %705 = load double, double* %704, align 8
  store double %705, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %706 = add i64 %700, -120
  %707 = add i64 %702, 13
  store i64 %707, i64* %PC, align 8
  %708 = inttoptr i64 %706 to double*
  %709 = load double, double* %708, align 8
  %710 = fsub double %705, %709
  store double %710, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %711 = add i64 %700, -104
  %712 = add i64 %702, 18
  store i64 %712, i64* %PC, align 8
  %713 = inttoptr i64 %711 to double*
  store double %710, double* %713, align 8
  %714 = load i64, i64* %RBP, align 8
  %715 = add i64 %714, -48
  %716 = load i64, i64* %PC, align 8
  %717 = add i64 %716, 5
  store i64 %717, i64* %PC, align 8
  %718 = inttoptr i64 %715 to double*
  %719 = load double, double* %718, align 8
  store double %719, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %720 = add i64 %714, -104
  %721 = add i64 %716, 10
  store i64 %721, i64* %PC, align 8
  %722 = inttoptr i64 %720 to double*
  %723 = load double, double* %722, align 8
  store double %723, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %724 = add i64 %714, -96
  %725 = add i64 %716, 15
  store i64 %725, i64* %PC, align 8
  %726 = inttoptr i64 %724 to double*
  %727 = load double, double* %726, align 8
  %728 = fsub double %723, %727
  store double %728, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %729 = fmul double %719, %728
  store double %729, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %730 = add i64 %714, -16
  %731 = add i64 %716, 23
  store i64 %731, i64* %PC, align 8
  %732 = inttoptr i64 %730 to i64*
  %733 = load i64, i64* %732, align 8
  store i64 %733, i64* %RDX, align 8, !tbaa !2428
  %734 = add i64 %733, 112
  %735 = add i64 %716, 28
  store i64 %735, i64* %PC, align 8
  %736 = inttoptr i64 %734 to double*
  store double %729, double* %736, align 8
  %737 = load i64, i64* %RBP, align 8
  %738 = add i64 %737, -48
  %739 = load i64, i64* %PC, align 8
  %740 = add i64 %739, 5
  store i64 %740, i64* %PC, align 8
  %741 = inttoptr i64 %738 to double*
  %742 = load double, double* %741, align 8
  store double %742, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %743 = add i64 %737, -104
  %744 = add i64 %739, 10
  store i64 %744, i64* %PC, align 8
  %745 = inttoptr i64 %743 to double*
  %746 = load double, double* %745, align 8
  store double %746, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %747 = add i64 %737, -96
  %748 = add i64 %739, 15
  store i64 %748, i64* %PC, align 8
  %749 = inttoptr i64 %747 to double*
  %750 = load double, double* %749, align 8
  %751 = fadd double %746, %750
  store double %751, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %752 = fmul double %742, %751
  store double %752, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %753 = add i64 %737, -16
  %754 = add i64 %739, 23
  store i64 %754, i64* %PC, align 8
  %755 = inttoptr i64 %753 to i64*
  %756 = load i64, i64* %755, align 8
  store i64 %756, i64* %RDX, align 8, !tbaa !2428
  %757 = add i64 %756, 120
  %758 = add i64 %739, 28
  store i64 %758, i64* %PC, align 8
  %759 = inttoptr i64 %757 to double*
  store double %752, double* %759, align 8
  %760 = load i64, i64* %RBP, align 8
  %761 = add i64 %760, -32
  %762 = load i64, i64* %PC, align 8
  %763 = add i64 %762, 7
  store i64 %763, i64* %PC, align 8
  %764 = inttoptr i64 %761 to i32*
  store i32 0, i32* %764, align 4
  %765 = load i64, i64* %RBP, align 8
  %766 = add i64 %765, -28
  %767 = load i64, i64* %PC, align 8
  %768 = add i64 %767, 7
  store i64 %768, i64* %PC, align 8
  %769 = inttoptr i64 %766 to i32*
  store i32 16, i32* %769, align 4
  %770 = bitcast %union.VectorReg* %6 to i8*
  %771 = bitcast [32 x %union.VectorReg]* %4 to <2 x i32>*
  %772 = bitcast i64* %68 to <2 x i32>*
  %773 = bitcast %union.VectorReg* %6 to i32*
  %774 = getelementptr inbounds i8, i8* %770, i64 4
  %775 = bitcast i8* %774 to i32*
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %777 = bitcast i64* %776 to i32*
  %778 = getelementptr inbounds i8, i8* %770, i64 12
  %779 = bitcast i8* %778 to i32*
  %780 = bitcast %union.VectorReg* %6 to double*
  %781 = bitcast %union.VectorReg* %5 to i32*
  %782 = getelementptr inbounds i8, i8* %642, i64 4
  %783 = bitcast i8* %782 to i32*
  %784 = bitcast i64* %648 to i32*
  %785 = getelementptr inbounds i8, i8* %642, i64 12
  %786 = bitcast i8* %785 to i32*
  %787 = bitcast i64* %776 to double*
  %.pre = load i64, i64* %PC, align 8
  br label %block_402bd2

block_402bde:                                     ; preds = %block_402bd2
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %788 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 80) to i64*), align 16
  store i64 %788, i64* %372, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %789 = add i64 %3347, -32
  %790 = add i64 %3383, 21
  store i64 %790, i64* %PC, align 8
  %791 = inttoptr i64 %789 to i32*
  %792 = load i32, i32* %791, align 4
  %793 = add i32 %792, 2
  %794 = zext i32 %793 to i64
  store i64 %794, i64* %RCX, align 8, !tbaa !2428
  %795 = icmp ugt i32 %792, -3
  %796 = zext i1 %795 to i8
  store i8 %796, i8* %16, align 1, !tbaa !2433
  %797 = and i32 %793, 255
  %798 = tail call i32 @llvm.ctpop.i32(i32 %797) #11
  %799 = trunc i32 %798 to i8
  %800 = and i8 %799, 1
  %801 = xor i8 %800, 1
  store i8 %801, i8* %23, align 1, !tbaa !2447
  %802 = xor i32 %792, %793
  %803 = lshr i32 %802, 4
  %804 = trunc i32 %803 to i8
  %805 = and i8 %804, 1
  store i8 %805, i8* %29, align 1, !tbaa !2451
  %806 = icmp eq i32 %793, 0
  %807 = zext i1 %806 to i8
  store i8 %807, i8* %32, align 1, !tbaa !2448
  %808 = lshr i32 %793, 31
  %809 = trunc i32 %808 to i8
  store i8 %809, i8* %35, align 1, !tbaa !2449
  %810 = lshr i32 %792, 31
  %811 = xor i32 %808, %810
  %812 = add nuw nsw i32 %811, %808
  %813 = icmp eq i32 %812, 2
  %814 = zext i1 %813 to i8
  store i8 %814, i8* %41, align 1, !tbaa !2450
  %815 = add i64 %3383, 27
  store i64 %815, i64* %PC, align 8
  store i32 %793, i32* %791, align 4
  %816 = load i64, i64* %RBP, align 8
  %817 = add i64 %816, -32
  %818 = load i64, i64* %PC, align 8
  %819 = add i64 %818, 3
  store i64 %819, i64* %PC, align 8
  %820 = inttoptr i64 %817 to i32*
  %821 = load i32, i32* %820, align 4
  %822 = shl i32 %821, 1
  %823 = icmp slt i32 %821, 0
  %824 = icmp slt i32 %822, 0
  %825 = xor i1 %823, %824
  %826 = zext i32 %822 to i64
  store i64 %826, i64* %RCX, align 8, !tbaa !2428
  %.lobit = lshr i32 %821, 31
  %827 = trunc i32 %.lobit to i8
  store i8 %827, i8* %16, align 1, !tbaa !2432
  %828 = and i32 %822, 254
  %829 = tail call i32 @llvm.ctpop.i32(i32 %828) #11
  %830 = trunc i32 %829 to i8
  %831 = and i8 %830, 1
  %832 = xor i8 %831, 1
  store i8 %832, i8* %23, align 1, !tbaa !2432
  store i8 0, i8* %29, align 1, !tbaa !2432
  %833 = icmp eq i32 %822, 0
  %834 = zext i1 %833 to i8
  store i8 %834, i8* %32, align 1, !tbaa !2432
  %835 = lshr i32 %821, 30
  %836 = trunc i32 %835 to i8
  %837 = and i8 %836, 1
  store i8 %837, i8* %35, align 1, !tbaa !2432
  %838 = zext i1 %825 to i8
  store i8 %838, i8* %41, align 1, !tbaa !2432
  %839 = add i64 %816, -36
  %840 = add i64 %818, 9
  store i64 %840, i64* %PC, align 8
  %841 = inttoptr i64 %839 to i32*
  store i32 %822, i32* %841, align 4
  %842 = load i64, i64* %RBP, align 8
  %843 = add i64 %842, -24
  %844 = load i64, i64* %PC, align 8
  %845 = add i64 %844, 4
  store i64 %845, i64* %PC, align 8
  %846 = inttoptr i64 %843 to i64*
  %847 = load i64, i64* %846, align 8
  store i64 %847, i64* %RDX, align 8, !tbaa !2428
  %848 = add i64 %842, -32
  %849 = add i64 %844, 8
  store i64 %849, i64* %PC, align 8
  %850 = inttoptr i64 %848 to i32*
  %851 = load i32, i32* %850, align 4
  %852 = sext i32 %851 to i64
  store i64 %852, i64* %RSI, align 8, !tbaa !2428
  %853 = shl nsw i64 %852, 3
  %854 = add i64 %853, %847
  %855 = add i64 %844, 13
  store i64 %855, i64* %PC, align 8
  %856 = inttoptr i64 %854 to i64*
  %857 = load i64, i64* %856, align 8
  %858 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %857, i64* %858, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %859 = add i64 %842, -64
  %860 = add i64 %844, 18
  store i64 %860, i64* %PC, align 8
  %861 = inttoptr i64 %859 to i64*
  store i64 %857, i64* %861, align 8
  %862 = load i64, i64* %RBP, align 8
  %863 = add i64 %862, -24
  %864 = load i64, i64* %PC, align 8
  %865 = add i64 %864, 4
  store i64 %865, i64* %PC, align 8
  %866 = inttoptr i64 %863 to i64*
  %867 = load i64, i64* %866, align 8
  store i64 %867, i64* %RDX, align 8, !tbaa !2428
  %868 = add i64 %862, -32
  %869 = add i64 %864, 7
  store i64 %869, i64* %PC, align 8
  %870 = inttoptr i64 %868 to i32*
  %871 = load i32, i32* %870, align 4
  %872 = add i32 %871, 1
  %873 = zext i32 %872 to i64
  store i64 %873, i64* %RCX, align 8, !tbaa !2428
  %874 = icmp eq i32 %871, -1
  %875 = icmp eq i32 %872, 0
  %876 = or i1 %874, %875
  %877 = zext i1 %876 to i8
  store i8 %877, i8* %16, align 1, !tbaa !2433
  %878 = and i32 %872, 255
  %879 = tail call i32 @llvm.ctpop.i32(i32 %878) #11
  %880 = trunc i32 %879 to i8
  %881 = and i8 %880, 1
  %882 = xor i8 %881, 1
  store i8 %882, i8* %23, align 1, !tbaa !2447
  %883 = xor i32 %871, %872
  %884 = lshr i32 %883, 4
  %885 = trunc i32 %884 to i8
  %886 = and i8 %885, 1
  store i8 %886, i8* %29, align 1, !tbaa !2451
  %887 = zext i1 %875 to i8
  store i8 %887, i8* %32, align 1, !tbaa !2448
  %888 = lshr i32 %872, 31
  %889 = trunc i32 %888 to i8
  store i8 %889, i8* %35, align 1, !tbaa !2449
  %890 = lshr i32 %871, 31
  %891 = xor i32 %888, %890
  %892 = add nuw nsw i32 %891, %888
  %893 = icmp eq i32 %892, 2
  %894 = zext i1 %893 to i8
  store i8 %894, i8* %41, align 1, !tbaa !2450
  %895 = sext i32 %872 to i64
  store i64 %895, i64* %RSI, align 8, !tbaa !2428
  %896 = shl nsw i64 %895, 3
  %897 = add i64 %896, %867
  %898 = add i64 %864, 18
  store i64 %898, i64* %PC, align 8
  %899 = inttoptr i64 %897 to i64*
  %900 = load i64, i64* %899, align 8
  store i64 %900, i64* %858, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %901 = add i64 %862, -72
  %902 = add i64 %864, 23
  store i64 %902, i64* %PC, align 8
  %903 = inttoptr i64 %901 to i64*
  store i64 %900, i64* %903, align 8
  %904 = load i64, i64* %RBP, align 8
  %905 = add i64 %904, -24
  %906 = load i64, i64* %PC, align 8
  %907 = add i64 %906, 4
  store i64 %907, i64* %PC, align 8
  %908 = inttoptr i64 %905 to i64*
  %909 = load i64, i64* %908, align 8
  store i64 %909, i64* %RDX, align 8, !tbaa !2428
  %910 = add i64 %904, -36
  %911 = add i64 %906, 8
  store i64 %911, i64* %PC, align 8
  %912 = inttoptr i64 %910 to i32*
  %913 = load i32, i32* %912, align 4
  %914 = sext i32 %913 to i64
  store i64 %914, i64* %RSI, align 8, !tbaa !2428
  %915 = shl nsw i64 %914, 3
  %916 = add i64 %915, %909
  %917 = add i64 %906, 13
  store i64 %917, i64* %PC, align 8
  %918 = inttoptr i64 %916 to i64*
  %919 = load i64, i64* %918, align 8
  store i64 %919, i64* %858, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %920 = add i64 %904, -48
  %921 = add i64 %906, 18
  store i64 %921, i64* %PC, align 8
  %922 = inttoptr i64 %920 to i64*
  store i64 %919, i64* %922, align 8
  %923 = load i64, i64* %RBP, align 8
  %924 = add i64 %923, -24
  %925 = load i64, i64* %PC, align 8
  %926 = add i64 %925, 4
  store i64 %926, i64* %PC, align 8
  %927 = inttoptr i64 %924 to i64*
  %928 = load i64, i64* %927, align 8
  store i64 %928, i64* %RDX, align 8, !tbaa !2428
  %929 = add i64 %923, -36
  %930 = add i64 %925, 7
  store i64 %930, i64* %PC, align 8
  %931 = inttoptr i64 %929 to i32*
  %932 = load i32, i32* %931, align 4
  %933 = add i32 %932, 1
  %934 = zext i32 %933 to i64
  store i64 %934, i64* %RCX, align 8, !tbaa !2428
  %935 = icmp eq i32 %932, -1
  %936 = icmp eq i32 %933, 0
  %937 = or i1 %935, %936
  %938 = zext i1 %937 to i8
  store i8 %938, i8* %16, align 1, !tbaa !2433
  %939 = and i32 %933, 255
  %940 = tail call i32 @llvm.ctpop.i32(i32 %939) #11
  %941 = trunc i32 %940 to i8
  %942 = and i8 %941, 1
  %943 = xor i8 %942, 1
  store i8 %943, i8* %23, align 1, !tbaa !2447
  %944 = xor i32 %932, %933
  %945 = lshr i32 %944, 4
  %946 = trunc i32 %945 to i8
  %947 = and i8 %946, 1
  store i8 %947, i8* %29, align 1, !tbaa !2451
  %948 = zext i1 %936 to i8
  store i8 %948, i8* %32, align 1, !tbaa !2448
  %949 = lshr i32 %933, 31
  %950 = trunc i32 %949 to i8
  store i8 %950, i8* %35, align 1, !tbaa !2449
  %951 = lshr i32 %932, 31
  %952 = xor i32 %949, %951
  %953 = add nuw nsw i32 %952, %949
  %954 = icmp eq i32 %953, 2
  %955 = zext i1 %954 to i8
  store i8 %955, i8* %41, align 1, !tbaa !2450
  %956 = sext i32 %933 to i64
  store i64 %956, i64* %RSI, align 8, !tbaa !2428
  %957 = shl nsw i64 %956, 3
  %958 = add i64 %957, %928
  %959 = add i64 %925, 18
  store i64 %959, i64* %PC, align 8
  %960 = inttoptr i64 %958 to i64*
  %961 = load i64, i64* %960, align 8
  store i64 %961, i64* %858, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %962 = add i64 %923, -56
  %963 = add i64 %925, 23
  store i64 %963, i64* %PC, align 8
  %964 = inttoptr i64 %962 to i64*
  store i64 %961, i64* %964, align 8
  %965 = load i64, i64* %RBP, align 8
  %966 = add i64 %965, -48
  %967 = load i64, i64* %PC, align 8
  %968 = add i64 %967, 5
  store i64 %968, i64* %PC, align 8
  %969 = inttoptr i64 %966 to double*
  %970 = load double, double* %969, align 8
  store double %970, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %971 = load <2 x i32>, <2 x i32>* %771, align 1
  %972 = load <2 x i32>, <2 x i32>* %772, align 1
  %973 = extractelement <2 x i32> %971, i32 0
  store i32 %973, i32* %773, align 1, !tbaa !2475
  %974 = extractelement <2 x i32> %971, i32 1
  store i32 %974, i32* %775, align 1, !tbaa !2475
  %975 = extractelement <2 x i32> %972, i32 0
  store i32 %975, i32* %777, align 1, !tbaa !2475
  %976 = extractelement <2 x i32> %972, i32 1
  store i32 %976, i32* %779, align 1, !tbaa !2475
  %977 = add i64 %965, -72
  %978 = add i64 %967, 13
  store i64 %978, i64* %PC, align 8
  %979 = load double, double* %780, align 1
  %980 = inttoptr i64 %977 to double*
  %981 = load double, double* %980, align 8
  %982 = fmul double %979, %981
  store double %982, double* %780, align 1, !tbaa !2452
  %983 = add i64 %965, -56
  %984 = add i64 %967, 18
  store i64 %984, i64* %PC, align 8
  %985 = inttoptr i64 %983 to double*
  %986 = load double, double* %985, align 8
  %987 = fmul double %982, %986
  store double %987, double* %780, align 1, !tbaa !2452
  %988 = fsub double %970, %987
  %989 = add i64 %965, -80
  %990 = add i64 %967, 27
  store i64 %990, i64* %PC, align 8
  %991 = inttoptr i64 %989 to double*
  store double %988, double* %991, align 8
  %992 = load i64, i64* %PC, align 8
  %993 = load <2 x i32>, <2 x i32>* %771, align 1
  %994 = load <2 x i32>, <2 x i32>* %772, align 1
  %995 = extractelement <2 x i32> %993, i32 0
  store i32 %995, i32* %781, align 1, !tbaa !2475
  %996 = extractelement <2 x i32> %993, i32 1
  store i32 %996, i32* %783, align 1, !tbaa !2475
  %997 = extractelement <2 x i32> %994, i32 0
  store i32 %997, i32* %784, align 1, !tbaa !2475
  %998 = extractelement <2 x i32> %994, i32 1
  store i32 %998, i32* %786, align 1, !tbaa !2475
  %999 = load i64, i64* %RBP, align 8
  %1000 = add i64 %999, -72
  %1001 = add i64 %992, 8
  store i64 %1001, i64* %PC, align 8
  %1002 = load double, double* %647, align 1
  %1003 = inttoptr i64 %1000 to double*
  %1004 = load double, double* %1003, align 8
  %1005 = fmul double %1002, %1004
  store double %1005, double* %647, align 1, !tbaa !2452
  %1006 = add i64 %999, -48
  %1007 = add i64 %992, 13
  store i64 %1007, i64* %PC, align 8
  %1008 = inttoptr i64 %1006 to double*
  %1009 = load double, double* %1008, align 8
  %1010 = fmul double %1005, %1009
  store double %1010, double* %647, align 1, !tbaa !2452
  %1011 = add i64 %999, -56
  %1012 = add i64 %992, 18
  store i64 %1012, i64* %PC, align 8
  %1013 = inttoptr i64 %1011 to double*
  %1014 = load double, double* %1013, align 8
  %1015 = fsub double %1010, %1014
  store double %1015, double* %647, align 1, !tbaa !2452
  %1016 = add i64 %999, -88
  %1017 = add i64 %992, 23
  store i64 %1017, i64* %PC, align 8
  %1018 = inttoptr i64 %1016 to double*
  store double %1015, double* %1018, align 8
  %1019 = load i64, i64* %RBP, align 8
  %1020 = add i64 %1019, -16
  %1021 = load i64, i64* %PC, align 8
  %1022 = add i64 %1021, 4
  store i64 %1022, i64* %PC, align 8
  %1023 = inttoptr i64 %1020 to i64*
  %1024 = load i64, i64* %1023, align 8
  store i64 %1024, i64* %RDX, align 8, !tbaa !2428
  %1025 = add i64 %1019, -28
  %1026 = add i64 %1021, 8
  store i64 %1026, i64* %PC, align 8
  %1027 = inttoptr i64 %1025 to i32*
  %1028 = load i32, i32* %1027, align 4
  %1029 = sext i32 %1028 to i64
  store i64 %1029, i64* %RSI, align 8, !tbaa !2428
  %1030 = shl nsw i64 %1029, 3
  %1031 = add i64 %1030, %1024
  %1032 = add i64 %1021, 13
  store i64 %1032, i64* %PC, align 8
  %1033 = inttoptr i64 %1031 to double*
  %1034 = load double, double* %1033, align 8
  store double %1034, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1035 = add i64 %1021, 17
  store i64 %1035, i64* %PC, align 8
  %1036 = load i64, i64* %1023, align 8
  store i64 %1036, i64* %RDX, align 8, !tbaa !2428
  %1037 = add i64 %1021, 20
  store i64 %1037, i64* %PC, align 8
  %1038 = load i32, i32* %1027, align 4
  %1039 = add i32 %1038, 2
  %1040 = zext i32 %1039 to i64
  store i64 %1040, i64* %RCX, align 8, !tbaa !2428
  %1041 = icmp ugt i32 %1038, -3
  %1042 = zext i1 %1041 to i8
  store i8 %1042, i8* %16, align 1, !tbaa !2433
  %1043 = and i32 %1039, 255
  %1044 = tail call i32 @llvm.ctpop.i32(i32 %1043) #11
  %1045 = trunc i32 %1044 to i8
  %1046 = and i8 %1045, 1
  %1047 = xor i8 %1046, 1
  store i8 %1047, i8* %23, align 1, !tbaa !2447
  %1048 = xor i32 %1038, %1039
  %1049 = lshr i32 %1048, 4
  %1050 = trunc i32 %1049 to i8
  %1051 = and i8 %1050, 1
  store i8 %1051, i8* %29, align 1, !tbaa !2451
  %1052 = icmp eq i32 %1039, 0
  %1053 = zext i1 %1052 to i8
  store i8 %1053, i8* %32, align 1, !tbaa !2448
  %1054 = lshr i32 %1039, 31
  %1055 = trunc i32 %1054 to i8
  store i8 %1055, i8* %35, align 1, !tbaa !2449
  %1056 = lshr i32 %1038, 31
  %1057 = xor i32 %1054, %1056
  %1058 = add nuw nsw i32 %1057, %1054
  %1059 = icmp eq i32 %1058, 2
  %1060 = zext i1 %1059 to i8
  store i8 %1060, i8* %41, align 1, !tbaa !2450
  %1061 = sext i32 %1039 to i64
  store i64 %1061, i64* %RSI, align 8, !tbaa !2428
  %1062 = shl nsw i64 %1061, 3
  %1063 = add i64 %1062, %1036
  %1064 = add i64 %1021, 31
  store i64 %1064, i64* %PC, align 8
  %1065 = inttoptr i64 %1063 to double*
  %1066 = load double, double* %1065, align 8
  %1067 = fadd double %1034, %1066
  store double %1067, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1068 = add i64 %1019, -96
  %1069 = add i64 %1021, 36
  store i64 %1069, i64* %PC, align 8
  %1070 = inttoptr i64 %1068 to double*
  store double %1067, double* %1070, align 8
  %1071 = load i64, i64* %RBP, align 8
  %1072 = add i64 %1071, -16
  %1073 = load i64, i64* %PC, align 8
  %1074 = add i64 %1073, 4
  store i64 %1074, i64* %PC, align 8
  %1075 = inttoptr i64 %1072 to i64*
  %1076 = load i64, i64* %1075, align 8
  store i64 %1076, i64* %RDX, align 8, !tbaa !2428
  %1077 = add i64 %1071, -28
  %1078 = add i64 %1073, 7
  store i64 %1078, i64* %PC, align 8
  %1079 = inttoptr i64 %1077 to i32*
  %1080 = load i32, i32* %1079, align 4
  %1081 = add i32 %1080, 1
  %1082 = zext i32 %1081 to i64
  store i64 %1082, i64* %RCX, align 8, !tbaa !2428
  %1083 = icmp eq i32 %1080, -1
  %1084 = icmp eq i32 %1081, 0
  %1085 = or i1 %1083, %1084
  %1086 = zext i1 %1085 to i8
  store i8 %1086, i8* %16, align 1, !tbaa !2433
  %1087 = and i32 %1081, 255
  %1088 = tail call i32 @llvm.ctpop.i32(i32 %1087) #11
  %1089 = trunc i32 %1088 to i8
  %1090 = and i8 %1089, 1
  %1091 = xor i8 %1090, 1
  store i8 %1091, i8* %23, align 1, !tbaa !2447
  %1092 = xor i32 %1080, %1081
  %1093 = lshr i32 %1092, 4
  %1094 = trunc i32 %1093 to i8
  %1095 = and i8 %1094, 1
  store i8 %1095, i8* %29, align 1, !tbaa !2451
  %1096 = zext i1 %1084 to i8
  store i8 %1096, i8* %32, align 1, !tbaa !2448
  %1097 = lshr i32 %1081, 31
  %1098 = trunc i32 %1097 to i8
  store i8 %1098, i8* %35, align 1, !tbaa !2449
  %1099 = lshr i32 %1080, 31
  %1100 = xor i32 %1097, %1099
  %1101 = add nuw nsw i32 %1100, %1097
  %1102 = icmp eq i32 %1101, 2
  %1103 = zext i1 %1102 to i8
  store i8 %1103, i8* %41, align 1, !tbaa !2450
  %1104 = sext i32 %1081 to i64
  store i64 %1104, i64* %RSI, align 8, !tbaa !2428
  %1105 = shl nsw i64 %1104, 3
  %1106 = add i64 %1105, %1076
  %1107 = add i64 %1073, 18
  store i64 %1107, i64* %PC, align 8
  %1108 = inttoptr i64 %1106 to double*
  %1109 = load double, double* %1108, align 8
  store double %1109, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1110 = add i64 %1073, 22
  store i64 %1110, i64* %PC, align 8
  %1111 = load i64, i64* %1075, align 8
  store i64 %1111, i64* %RDX, align 8, !tbaa !2428
  %1112 = add i64 %1073, 25
  store i64 %1112, i64* %PC, align 8
  %1113 = load i32, i32* %1079, align 4
  %1114 = add i32 %1113, 3
  %1115 = zext i32 %1114 to i64
  store i64 %1115, i64* %RCX, align 8, !tbaa !2428
  %1116 = icmp ugt i32 %1113, -4
  %1117 = zext i1 %1116 to i8
  store i8 %1117, i8* %16, align 1, !tbaa !2433
  %1118 = and i32 %1114, 255
  %1119 = tail call i32 @llvm.ctpop.i32(i32 %1118) #11
  %1120 = trunc i32 %1119 to i8
  %1121 = and i8 %1120, 1
  %1122 = xor i8 %1121, 1
  store i8 %1122, i8* %23, align 1, !tbaa !2447
  %1123 = xor i32 %1113, %1114
  %1124 = lshr i32 %1123, 4
  %1125 = trunc i32 %1124 to i8
  %1126 = and i8 %1125, 1
  store i8 %1126, i8* %29, align 1, !tbaa !2451
  %1127 = icmp eq i32 %1114, 0
  %1128 = zext i1 %1127 to i8
  store i8 %1128, i8* %32, align 1, !tbaa !2448
  %1129 = lshr i32 %1114, 31
  %1130 = trunc i32 %1129 to i8
  store i8 %1130, i8* %35, align 1, !tbaa !2449
  %1131 = lshr i32 %1113, 31
  %1132 = xor i32 %1129, %1131
  %1133 = add nuw nsw i32 %1132, %1129
  %1134 = icmp eq i32 %1133, 2
  %1135 = zext i1 %1134 to i8
  store i8 %1135, i8* %41, align 1, !tbaa !2450
  %1136 = sext i32 %1114 to i64
  store i64 %1136, i64* %RSI, align 8, !tbaa !2428
  %1137 = shl nsw i64 %1136, 3
  %1138 = add i64 %1137, %1111
  %1139 = add i64 %1073, 36
  store i64 %1139, i64* %PC, align 8
  %1140 = inttoptr i64 %1138 to double*
  %1141 = load double, double* %1140, align 8
  %1142 = fadd double %1109, %1141
  store double %1142, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1143 = load i64, i64* %RBP, align 8
  %1144 = add i64 %1143, -104
  %1145 = add i64 %1073, 41
  store i64 %1145, i64* %PC, align 8
  %1146 = inttoptr i64 %1144 to double*
  store double %1142, double* %1146, align 8
  %1147 = load i64, i64* %RBP, align 8
  %1148 = add i64 %1147, -16
  %1149 = load i64, i64* %PC, align 8
  %1150 = add i64 %1149, 4
  store i64 %1150, i64* %PC, align 8
  %1151 = inttoptr i64 %1148 to i64*
  %1152 = load i64, i64* %1151, align 8
  store i64 %1152, i64* %RDX, align 8, !tbaa !2428
  %1153 = add i64 %1147, -28
  %1154 = add i64 %1149, 8
  store i64 %1154, i64* %PC, align 8
  %1155 = inttoptr i64 %1153 to i32*
  %1156 = load i32, i32* %1155, align 4
  %1157 = sext i32 %1156 to i64
  store i64 %1157, i64* %RSI, align 8, !tbaa !2428
  %1158 = shl nsw i64 %1157, 3
  %1159 = add i64 %1158, %1152
  %1160 = add i64 %1149, 13
  store i64 %1160, i64* %PC, align 8
  %1161 = inttoptr i64 %1159 to double*
  %1162 = load double, double* %1161, align 8
  store double %1162, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1163 = add i64 %1149, 17
  store i64 %1163, i64* %PC, align 8
  %1164 = load i64, i64* %1151, align 8
  store i64 %1164, i64* %RDX, align 8, !tbaa !2428
  %1165 = add i64 %1149, 20
  store i64 %1165, i64* %PC, align 8
  %1166 = load i32, i32* %1155, align 4
  %1167 = add i32 %1166, 2
  %1168 = zext i32 %1167 to i64
  store i64 %1168, i64* %RCX, align 8, !tbaa !2428
  %1169 = icmp ugt i32 %1166, -3
  %1170 = zext i1 %1169 to i8
  store i8 %1170, i8* %16, align 1, !tbaa !2433
  %1171 = and i32 %1167, 255
  %1172 = tail call i32 @llvm.ctpop.i32(i32 %1171) #11
  %1173 = trunc i32 %1172 to i8
  %1174 = and i8 %1173, 1
  %1175 = xor i8 %1174, 1
  store i8 %1175, i8* %23, align 1, !tbaa !2447
  %1176 = xor i32 %1166, %1167
  %1177 = lshr i32 %1176, 4
  %1178 = trunc i32 %1177 to i8
  %1179 = and i8 %1178, 1
  store i8 %1179, i8* %29, align 1, !tbaa !2451
  %1180 = icmp eq i32 %1167, 0
  %1181 = zext i1 %1180 to i8
  store i8 %1181, i8* %32, align 1, !tbaa !2448
  %1182 = lshr i32 %1167, 31
  %1183 = trunc i32 %1182 to i8
  store i8 %1183, i8* %35, align 1, !tbaa !2449
  %1184 = lshr i32 %1166, 31
  %1185 = xor i32 %1182, %1184
  %1186 = add nuw nsw i32 %1185, %1182
  %1187 = icmp eq i32 %1186, 2
  %1188 = zext i1 %1187 to i8
  store i8 %1188, i8* %41, align 1, !tbaa !2450
  %1189 = sext i32 %1167 to i64
  store i64 %1189, i64* %RSI, align 8, !tbaa !2428
  %1190 = shl nsw i64 %1189, 3
  %1191 = add i64 %1190, %1164
  %1192 = add i64 %1149, 31
  store i64 %1192, i64* %PC, align 8
  %1193 = inttoptr i64 %1191 to double*
  %1194 = load double, double* %1193, align 8
  %1195 = fsub double %1162, %1194
  store double %1195, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1196 = add i64 %1147, -112
  %1197 = add i64 %1149, 36
  store i64 %1197, i64* %PC, align 8
  %1198 = inttoptr i64 %1196 to double*
  store double %1195, double* %1198, align 8
  %1199 = load i64, i64* %RBP, align 8
  %1200 = add i64 %1199, -16
  %1201 = load i64, i64* %PC, align 8
  %1202 = add i64 %1201, 4
  store i64 %1202, i64* %PC, align 8
  %1203 = inttoptr i64 %1200 to i64*
  %1204 = load i64, i64* %1203, align 8
  store i64 %1204, i64* %RDX, align 8, !tbaa !2428
  %1205 = add i64 %1199, -28
  %1206 = add i64 %1201, 7
  store i64 %1206, i64* %PC, align 8
  %1207 = inttoptr i64 %1205 to i32*
  %1208 = load i32, i32* %1207, align 4
  %1209 = add i32 %1208, 1
  %1210 = zext i32 %1209 to i64
  store i64 %1210, i64* %RCX, align 8, !tbaa !2428
  %1211 = icmp eq i32 %1208, -1
  %1212 = icmp eq i32 %1209, 0
  %1213 = or i1 %1211, %1212
  %1214 = zext i1 %1213 to i8
  store i8 %1214, i8* %16, align 1, !tbaa !2433
  %1215 = and i32 %1209, 255
  %1216 = tail call i32 @llvm.ctpop.i32(i32 %1215) #11
  %1217 = trunc i32 %1216 to i8
  %1218 = and i8 %1217, 1
  %1219 = xor i8 %1218, 1
  store i8 %1219, i8* %23, align 1, !tbaa !2447
  %1220 = xor i32 %1208, %1209
  %1221 = lshr i32 %1220, 4
  %1222 = trunc i32 %1221 to i8
  %1223 = and i8 %1222, 1
  store i8 %1223, i8* %29, align 1, !tbaa !2451
  %1224 = zext i1 %1212 to i8
  store i8 %1224, i8* %32, align 1, !tbaa !2448
  %1225 = lshr i32 %1209, 31
  %1226 = trunc i32 %1225 to i8
  store i8 %1226, i8* %35, align 1, !tbaa !2449
  %1227 = lshr i32 %1208, 31
  %1228 = xor i32 %1225, %1227
  %1229 = add nuw nsw i32 %1228, %1225
  %1230 = icmp eq i32 %1229, 2
  %1231 = zext i1 %1230 to i8
  store i8 %1231, i8* %41, align 1, !tbaa !2450
  %1232 = sext i32 %1209 to i64
  store i64 %1232, i64* %RSI, align 8, !tbaa !2428
  %1233 = shl nsw i64 %1232, 3
  %1234 = add i64 %1233, %1204
  %1235 = add i64 %1201, 18
  store i64 %1235, i64* %PC, align 8
  %1236 = inttoptr i64 %1234 to double*
  %1237 = load double, double* %1236, align 8
  store double %1237, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1238 = add i64 %1201, 22
  store i64 %1238, i64* %PC, align 8
  %1239 = load i64, i64* %1203, align 8
  store i64 %1239, i64* %RDX, align 8, !tbaa !2428
  %1240 = add i64 %1201, 25
  store i64 %1240, i64* %PC, align 8
  %1241 = load i32, i32* %1207, align 4
  %1242 = add i32 %1241, 3
  %1243 = zext i32 %1242 to i64
  store i64 %1243, i64* %RCX, align 8, !tbaa !2428
  %1244 = icmp ugt i32 %1241, -4
  %1245 = zext i1 %1244 to i8
  store i8 %1245, i8* %16, align 1, !tbaa !2433
  %1246 = and i32 %1242, 255
  %1247 = tail call i32 @llvm.ctpop.i32(i32 %1246) #11
  %1248 = trunc i32 %1247 to i8
  %1249 = and i8 %1248, 1
  %1250 = xor i8 %1249, 1
  store i8 %1250, i8* %23, align 1, !tbaa !2447
  %1251 = xor i32 %1241, %1242
  %1252 = lshr i32 %1251, 4
  %1253 = trunc i32 %1252 to i8
  %1254 = and i8 %1253, 1
  store i8 %1254, i8* %29, align 1, !tbaa !2451
  %1255 = icmp eq i32 %1242, 0
  %1256 = zext i1 %1255 to i8
  store i8 %1256, i8* %32, align 1, !tbaa !2448
  %1257 = lshr i32 %1242, 31
  %1258 = trunc i32 %1257 to i8
  store i8 %1258, i8* %35, align 1, !tbaa !2449
  %1259 = lshr i32 %1241, 31
  %1260 = xor i32 %1257, %1259
  %1261 = add nuw nsw i32 %1260, %1257
  %1262 = icmp eq i32 %1261, 2
  %1263 = zext i1 %1262 to i8
  store i8 %1263, i8* %41, align 1, !tbaa !2450
  %1264 = sext i32 %1242 to i64
  store i64 %1264, i64* %RSI, align 8, !tbaa !2428
  %1265 = shl nsw i64 %1264, 3
  %1266 = add i64 %1265, %1239
  %1267 = add i64 %1201, 36
  store i64 %1267, i64* %PC, align 8
  %1268 = inttoptr i64 %1266 to double*
  %1269 = load double, double* %1268, align 8
  %1270 = fsub double %1237, %1269
  store double %1270, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1271 = load i64, i64* %RBP, align 8
  %1272 = add i64 %1271, -120
  %1273 = add i64 %1201, 41
  store i64 %1273, i64* %PC, align 8
  %1274 = inttoptr i64 %1272 to double*
  store double %1270, double* %1274, align 8
  %1275 = load i64, i64* %RBP, align 8
  %1276 = add i64 %1275, -16
  %1277 = load i64, i64* %PC, align 8
  %1278 = add i64 %1277, 4
  store i64 %1278, i64* %PC, align 8
  %1279 = inttoptr i64 %1276 to i64*
  %1280 = load i64, i64* %1279, align 8
  store i64 %1280, i64* %RDX, align 8, !tbaa !2428
  %1281 = add i64 %1275, -28
  %1282 = add i64 %1277, 7
  store i64 %1282, i64* %PC, align 8
  %1283 = inttoptr i64 %1281 to i32*
  %1284 = load i32, i32* %1283, align 4
  %1285 = add i32 %1284, 4
  %1286 = zext i32 %1285 to i64
  store i64 %1286, i64* %RCX, align 8, !tbaa !2428
  %1287 = icmp ugt i32 %1284, -5
  %1288 = zext i1 %1287 to i8
  store i8 %1288, i8* %16, align 1, !tbaa !2433
  %1289 = and i32 %1285, 255
  %1290 = tail call i32 @llvm.ctpop.i32(i32 %1289) #11
  %1291 = trunc i32 %1290 to i8
  %1292 = and i8 %1291, 1
  %1293 = xor i8 %1292, 1
  store i8 %1293, i8* %23, align 1, !tbaa !2447
  %1294 = xor i32 %1284, %1285
  %1295 = lshr i32 %1294, 4
  %1296 = trunc i32 %1295 to i8
  %1297 = and i8 %1296, 1
  store i8 %1297, i8* %29, align 1, !tbaa !2451
  %1298 = icmp eq i32 %1285, 0
  %1299 = zext i1 %1298 to i8
  store i8 %1299, i8* %32, align 1, !tbaa !2448
  %1300 = lshr i32 %1285, 31
  %1301 = trunc i32 %1300 to i8
  store i8 %1301, i8* %35, align 1, !tbaa !2449
  %1302 = lshr i32 %1284, 31
  %1303 = xor i32 %1300, %1302
  %1304 = add nuw nsw i32 %1303, %1300
  %1305 = icmp eq i32 %1304, 2
  %1306 = zext i1 %1305 to i8
  store i8 %1306, i8* %41, align 1, !tbaa !2450
  %1307 = sext i32 %1285 to i64
  store i64 %1307, i64* %RSI, align 8, !tbaa !2428
  %1308 = shl nsw i64 %1307, 3
  %1309 = add i64 %1308, %1280
  %1310 = add i64 %1277, 18
  store i64 %1310, i64* %PC, align 8
  %1311 = inttoptr i64 %1309 to double*
  %1312 = load double, double* %1311, align 8
  store double %1312, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1313 = add i64 %1277, 22
  store i64 %1313, i64* %PC, align 8
  %1314 = load i64, i64* %1279, align 8
  store i64 %1314, i64* %RDX, align 8, !tbaa !2428
  %1315 = add i64 %1277, 25
  store i64 %1315, i64* %PC, align 8
  %1316 = load i32, i32* %1283, align 4
  %1317 = add i32 %1316, 6
  %1318 = zext i32 %1317 to i64
  store i64 %1318, i64* %RCX, align 8, !tbaa !2428
  %1319 = icmp ugt i32 %1316, -7
  %1320 = zext i1 %1319 to i8
  store i8 %1320, i8* %16, align 1, !tbaa !2433
  %1321 = and i32 %1317, 255
  %1322 = tail call i32 @llvm.ctpop.i32(i32 %1321) #11
  %1323 = trunc i32 %1322 to i8
  %1324 = and i8 %1323, 1
  %1325 = xor i8 %1324, 1
  store i8 %1325, i8* %23, align 1, !tbaa !2447
  %1326 = xor i32 %1316, %1317
  %1327 = lshr i32 %1326, 4
  %1328 = trunc i32 %1327 to i8
  %1329 = and i8 %1328, 1
  store i8 %1329, i8* %29, align 1, !tbaa !2451
  %1330 = icmp eq i32 %1317, 0
  %1331 = zext i1 %1330 to i8
  store i8 %1331, i8* %32, align 1, !tbaa !2448
  %1332 = lshr i32 %1317, 31
  %1333 = trunc i32 %1332 to i8
  store i8 %1333, i8* %35, align 1, !tbaa !2449
  %1334 = lshr i32 %1316, 31
  %1335 = xor i32 %1332, %1334
  %1336 = add nuw nsw i32 %1335, %1332
  %1337 = icmp eq i32 %1336, 2
  %1338 = zext i1 %1337 to i8
  store i8 %1338, i8* %41, align 1, !tbaa !2450
  %1339 = sext i32 %1317 to i64
  store i64 %1339, i64* %RSI, align 8, !tbaa !2428
  %1340 = shl nsw i64 %1339, 3
  %1341 = add i64 %1340, %1314
  %1342 = add i64 %1277, 36
  store i64 %1342, i64* %PC, align 8
  %1343 = inttoptr i64 %1341 to double*
  %1344 = load double, double* %1343, align 8
  %1345 = fadd double %1312, %1344
  store double %1345, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1346 = add i64 %1275, -128
  %1347 = add i64 %1277, 41
  store i64 %1347, i64* %PC, align 8
  %1348 = inttoptr i64 %1346 to double*
  store double %1345, double* %1348, align 8
  %1349 = load i64, i64* %RBP, align 8
  %1350 = add i64 %1349, -16
  %1351 = load i64, i64* %PC, align 8
  %1352 = add i64 %1351, 4
  store i64 %1352, i64* %PC, align 8
  %1353 = inttoptr i64 %1350 to i64*
  %1354 = load i64, i64* %1353, align 8
  store i64 %1354, i64* %RDX, align 8, !tbaa !2428
  %1355 = add i64 %1349, -28
  %1356 = add i64 %1351, 7
  store i64 %1356, i64* %PC, align 8
  %1357 = inttoptr i64 %1355 to i32*
  %1358 = load i32, i32* %1357, align 4
  %1359 = add i32 %1358, 5
  %1360 = zext i32 %1359 to i64
  store i64 %1360, i64* %RCX, align 8, !tbaa !2428
  %1361 = icmp ugt i32 %1358, -6
  %1362 = zext i1 %1361 to i8
  store i8 %1362, i8* %16, align 1, !tbaa !2433
  %1363 = and i32 %1359, 255
  %1364 = tail call i32 @llvm.ctpop.i32(i32 %1363) #11
  %1365 = trunc i32 %1364 to i8
  %1366 = and i8 %1365, 1
  %1367 = xor i8 %1366, 1
  store i8 %1367, i8* %23, align 1, !tbaa !2447
  %1368 = xor i32 %1358, %1359
  %1369 = lshr i32 %1368, 4
  %1370 = trunc i32 %1369 to i8
  %1371 = and i8 %1370, 1
  store i8 %1371, i8* %29, align 1, !tbaa !2451
  %1372 = icmp eq i32 %1359, 0
  %1373 = zext i1 %1372 to i8
  store i8 %1373, i8* %32, align 1, !tbaa !2448
  %1374 = lshr i32 %1359, 31
  %1375 = trunc i32 %1374 to i8
  store i8 %1375, i8* %35, align 1, !tbaa !2449
  %1376 = lshr i32 %1358, 31
  %1377 = xor i32 %1374, %1376
  %1378 = add nuw nsw i32 %1377, %1374
  %1379 = icmp eq i32 %1378, 2
  %1380 = zext i1 %1379 to i8
  store i8 %1380, i8* %41, align 1, !tbaa !2450
  %1381 = sext i32 %1359 to i64
  store i64 %1381, i64* %RSI, align 8, !tbaa !2428
  %1382 = shl nsw i64 %1381, 3
  %1383 = add i64 %1382, %1354
  %1384 = add i64 %1351, 18
  store i64 %1384, i64* %PC, align 8
  %1385 = inttoptr i64 %1383 to double*
  %1386 = load double, double* %1385, align 8
  store double %1386, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1387 = add i64 %1351, 22
  store i64 %1387, i64* %PC, align 8
  %1388 = load i64, i64* %1353, align 8
  store i64 %1388, i64* %RDX, align 8, !tbaa !2428
  %1389 = add i64 %1351, 25
  store i64 %1389, i64* %PC, align 8
  %1390 = load i32, i32* %1357, align 4
  %1391 = add i32 %1390, 7
  %1392 = zext i32 %1391 to i64
  store i64 %1392, i64* %RCX, align 8, !tbaa !2428
  %1393 = icmp ugt i32 %1390, -8
  %1394 = zext i1 %1393 to i8
  store i8 %1394, i8* %16, align 1, !tbaa !2433
  %1395 = and i32 %1391, 255
  %1396 = tail call i32 @llvm.ctpop.i32(i32 %1395) #11
  %1397 = trunc i32 %1396 to i8
  %1398 = and i8 %1397, 1
  %1399 = xor i8 %1398, 1
  store i8 %1399, i8* %23, align 1, !tbaa !2447
  %1400 = xor i32 %1390, %1391
  %1401 = lshr i32 %1400, 4
  %1402 = trunc i32 %1401 to i8
  %1403 = and i8 %1402, 1
  store i8 %1403, i8* %29, align 1, !tbaa !2451
  %1404 = icmp eq i32 %1391, 0
  %1405 = zext i1 %1404 to i8
  store i8 %1405, i8* %32, align 1, !tbaa !2448
  %1406 = lshr i32 %1391, 31
  %1407 = trunc i32 %1406 to i8
  store i8 %1407, i8* %35, align 1, !tbaa !2449
  %1408 = lshr i32 %1390, 31
  %1409 = xor i32 %1406, %1408
  %1410 = add nuw nsw i32 %1409, %1406
  %1411 = icmp eq i32 %1410, 2
  %1412 = zext i1 %1411 to i8
  store i8 %1412, i8* %41, align 1, !tbaa !2450
  %1413 = sext i32 %1391 to i64
  store i64 %1413, i64* %RSI, align 8, !tbaa !2428
  %1414 = shl nsw i64 %1413, 3
  %1415 = add i64 %1414, %1388
  %1416 = add i64 %1351, 36
  store i64 %1416, i64* %PC, align 8
  %1417 = inttoptr i64 %1415 to double*
  %1418 = load double, double* %1417, align 8
  %1419 = fadd double %1386, %1418
  store double %1419, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1420 = add i64 %1349, -136
  %1421 = add i64 %1351, 44
  store i64 %1421, i64* %PC, align 8
  %1422 = inttoptr i64 %1420 to double*
  store double %1419, double* %1422, align 8
  %1423 = load i64, i64* %RBP, align 8
  %1424 = add i64 %1423, -16
  %1425 = load i64, i64* %PC, align 8
  %1426 = add i64 %1425, 4
  store i64 %1426, i64* %PC, align 8
  %1427 = inttoptr i64 %1424 to i64*
  %1428 = load i64, i64* %1427, align 8
  store i64 %1428, i64* %RDX, align 8, !tbaa !2428
  %1429 = add i64 %1423, -28
  %1430 = add i64 %1425, 7
  store i64 %1430, i64* %PC, align 8
  %1431 = inttoptr i64 %1429 to i32*
  %1432 = load i32, i32* %1431, align 4
  %1433 = add i32 %1432, 4
  %1434 = zext i32 %1433 to i64
  store i64 %1434, i64* %RCX, align 8, !tbaa !2428
  %1435 = icmp ugt i32 %1432, -5
  %1436 = zext i1 %1435 to i8
  store i8 %1436, i8* %16, align 1, !tbaa !2433
  %1437 = and i32 %1433, 255
  %1438 = tail call i32 @llvm.ctpop.i32(i32 %1437) #11
  %1439 = trunc i32 %1438 to i8
  %1440 = and i8 %1439, 1
  %1441 = xor i8 %1440, 1
  store i8 %1441, i8* %23, align 1, !tbaa !2447
  %1442 = xor i32 %1432, %1433
  %1443 = lshr i32 %1442, 4
  %1444 = trunc i32 %1443 to i8
  %1445 = and i8 %1444, 1
  store i8 %1445, i8* %29, align 1, !tbaa !2451
  %1446 = icmp eq i32 %1433, 0
  %1447 = zext i1 %1446 to i8
  store i8 %1447, i8* %32, align 1, !tbaa !2448
  %1448 = lshr i32 %1433, 31
  %1449 = trunc i32 %1448 to i8
  store i8 %1449, i8* %35, align 1, !tbaa !2449
  %1450 = lshr i32 %1432, 31
  %1451 = xor i32 %1448, %1450
  %1452 = add nuw nsw i32 %1451, %1448
  %1453 = icmp eq i32 %1452, 2
  %1454 = zext i1 %1453 to i8
  store i8 %1454, i8* %41, align 1, !tbaa !2450
  %1455 = sext i32 %1433 to i64
  store i64 %1455, i64* %RSI, align 8, !tbaa !2428
  %1456 = shl nsw i64 %1455, 3
  %1457 = add i64 %1456, %1428
  %1458 = add i64 %1425, 18
  store i64 %1458, i64* %PC, align 8
  %1459 = inttoptr i64 %1457 to double*
  %1460 = load double, double* %1459, align 8
  store double %1460, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1461 = add i64 %1425, 22
  store i64 %1461, i64* %PC, align 8
  %1462 = load i64, i64* %1427, align 8
  store i64 %1462, i64* %RDX, align 8, !tbaa !2428
  %1463 = add i64 %1425, 25
  store i64 %1463, i64* %PC, align 8
  %1464 = load i32, i32* %1431, align 4
  %1465 = add i32 %1464, 6
  %1466 = zext i32 %1465 to i64
  store i64 %1466, i64* %RCX, align 8, !tbaa !2428
  %1467 = icmp ugt i32 %1464, -7
  %1468 = zext i1 %1467 to i8
  store i8 %1468, i8* %16, align 1, !tbaa !2433
  %1469 = and i32 %1465, 255
  %1470 = tail call i32 @llvm.ctpop.i32(i32 %1469) #11
  %1471 = trunc i32 %1470 to i8
  %1472 = and i8 %1471, 1
  %1473 = xor i8 %1472, 1
  store i8 %1473, i8* %23, align 1, !tbaa !2447
  %1474 = xor i32 %1464, %1465
  %1475 = lshr i32 %1474, 4
  %1476 = trunc i32 %1475 to i8
  %1477 = and i8 %1476, 1
  store i8 %1477, i8* %29, align 1, !tbaa !2451
  %1478 = icmp eq i32 %1465, 0
  %1479 = zext i1 %1478 to i8
  store i8 %1479, i8* %32, align 1, !tbaa !2448
  %1480 = lshr i32 %1465, 31
  %1481 = trunc i32 %1480 to i8
  store i8 %1481, i8* %35, align 1, !tbaa !2449
  %1482 = lshr i32 %1464, 31
  %1483 = xor i32 %1480, %1482
  %1484 = add nuw nsw i32 %1483, %1480
  %1485 = icmp eq i32 %1484, 2
  %1486 = zext i1 %1485 to i8
  store i8 %1486, i8* %41, align 1, !tbaa !2450
  %1487 = sext i32 %1465 to i64
  store i64 %1487, i64* %RSI, align 8, !tbaa !2428
  %1488 = shl nsw i64 %1487, 3
  %1489 = add i64 %1488, %1462
  %1490 = add i64 %1425, 36
  store i64 %1490, i64* %PC, align 8
  %1491 = inttoptr i64 %1489 to double*
  %1492 = load double, double* %1491, align 8
  %1493 = fsub double %1460, %1492
  store double %1493, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1494 = add i64 %1423, -144
  %1495 = add i64 %1425, 44
  store i64 %1495, i64* %PC, align 8
  %1496 = inttoptr i64 %1494 to double*
  store double %1493, double* %1496, align 8
  %1497 = load i64, i64* %RBP, align 8
  %1498 = add i64 %1497, -16
  %1499 = load i64, i64* %PC, align 8
  %1500 = add i64 %1499, 4
  store i64 %1500, i64* %PC, align 8
  %1501 = inttoptr i64 %1498 to i64*
  %1502 = load i64, i64* %1501, align 8
  store i64 %1502, i64* %RDX, align 8, !tbaa !2428
  %1503 = add i64 %1497, -28
  %1504 = add i64 %1499, 7
  store i64 %1504, i64* %PC, align 8
  %1505 = inttoptr i64 %1503 to i32*
  %1506 = load i32, i32* %1505, align 4
  %1507 = add i32 %1506, 5
  %1508 = zext i32 %1507 to i64
  store i64 %1508, i64* %RCX, align 8, !tbaa !2428
  %1509 = icmp ugt i32 %1506, -6
  %1510 = zext i1 %1509 to i8
  store i8 %1510, i8* %16, align 1, !tbaa !2433
  %1511 = and i32 %1507, 255
  %1512 = tail call i32 @llvm.ctpop.i32(i32 %1511) #11
  %1513 = trunc i32 %1512 to i8
  %1514 = and i8 %1513, 1
  %1515 = xor i8 %1514, 1
  store i8 %1515, i8* %23, align 1, !tbaa !2447
  %1516 = xor i32 %1506, %1507
  %1517 = lshr i32 %1516, 4
  %1518 = trunc i32 %1517 to i8
  %1519 = and i8 %1518, 1
  store i8 %1519, i8* %29, align 1, !tbaa !2451
  %1520 = icmp eq i32 %1507, 0
  %1521 = zext i1 %1520 to i8
  store i8 %1521, i8* %32, align 1, !tbaa !2448
  %1522 = lshr i32 %1507, 31
  %1523 = trunc i32 %1522 to i8
  store i8 %1523, i8* %35, align 1, !tbaa !2449
  %1524 = lshr i32 %1506, 31
  %1525 = xor i32 %1522, %1524
  %1526 = add nuw nsw i32 %1525, %1522
  %1527 = icmp eq i32 %1526, 2
  %1528 = zext i1 %1527 to i8
  store i8 %1528, i8* %41, align 1, !tbaa !2450
  %1529 = sext i32 %1507 to i64
  store i64 %1529, i64* %RSI, align 8, !tbaa !2428
  %1530 = shl nsw i64 %1529, 3
  %1531 = add i64 %1530, %1502
  %1532 = add i64 %1499, 18
  store i64 %1532, i64* %PC, align 8
  %1533 = inttoptr i64 %1531 to double*
  %1534 = load double, double* %1533, align 8
  store double %1534, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1535 = add i64 %1499, 22
  store i64 %1535, i64* %PC, align 8
  %1536 = load i64, i64* %1501, align 8
  store i64 %1536, i64* %RDX, align 8, !tbaa !2428
  %1537 = add i64 %1499, 25
  store i64 %1537, i64* %PC, align 8
  %1538 = load i32, i32* %1505, align 4
  %1539 = add i32 %1538, 7
  %1540 = zext i32 %1539 to i64
  store i64 %1540, i64* %RCX, align 8, !tbaa !2428
  %1541 = icmp ugt i32 %1538, -8
  %1542 = zext i1 %1541 to i8
  store i8 %1542, i8* %16, align 1, !tbaa !2433
  %1543 = and i32 %1539, 255
  %1544 = tail call i32 @llvm.ctpop.i32(i32 %1543) #11
  %1545 = trunc i32 %1544 to i8
  %1546 = and i8 %1545, 1
  %1547 = xor i8 %1546, 1
  store i8 %1547, i8* %23, align 1, !tbaa !2447
  %1548 = xor i32 %1538, %1539
  %1549 = lshr i32 %1548, 4
  %1550 = trunc i32 %1549 to i8
  %1551 = and i8 %1550, 1
  store i8 %1551, i8* %29, align 1, !tbaa !2451
  %1552 = icmp eq i32 %1539, 0
  %1553 = zext i1 %1552 to i8
  store i8 %1553, i8* %32, align 1, !tbaa !2448
  %1554 = lshr i32 %1539, 31
  %1555 = trunc i32 %1554 to i8
  store i8 %1555, i8* %35, align 1, !tbaa !2449
  %1556 = lshr i32 %1538, 31
  %1557 = xor i32 %1554, %1556
  %1558 = add nuw nsw i32 %1557, %1554
  %1559 = icmp eq i32 %1558, 2
  %1560 = zext i1 %1559 to i8
  store i8 %1560, i8* %41, align 1, !tbaa !2450
  %1561 = sext i32 %1539 to i64
  store i64 %1561, i64* %RSI, align 8, !tbaa !2428
  %1562 = shl nsw i64 %1561, 3
  %1563 = add i64 %1562, %1536
  %1564 = add i64 %1499, 36
  store i64 %1564, i64* %PC, align 8
  %1565 = inttoptr i64 %1563 to double*
  %1566 = load double, double* %1565, align 8
  %1567 = fsub double %1534, %1566
  store double %1567, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1568 = add i64 %1497, -152
  %1569 = add i64 %1499, 44
  store i64 %1569, i64* %PC, align 8
  %1570 = inttoptr i64 %1568 to double*
  store double %1567, double* %1570, align 8
  %1571 = load i64, i64* %RBP, align 8
  %1572 = add i64 %1571, -96
  %1573 = load i64, i64* %PC, align 8
  %1574 = add i64 %1573, 5
  store i64 %1574, i64* %PC, align 8
  %1575 = inttoptr i64 %1572 to double*
  %1576 = load double, double* %1575, align 8
  store double %1576, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1577 = add i64 %1571, -128
  %1578 = add i64 %1573, 10
  store i64 %1578, i64* %PC, align 8
  %1579 = inttoptr i64 %1577 to double*
  %1580 = load double, double* %1579, align 8
  %1581 = fadd double %1576, %1580
  store double %1581, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1582 = add i64 %1571, -16
  %1583 = add i64 %1573, 14
  store i64 %1583, i64* %PC, align 8
  %1584 = inttoptr i64 %1582 to i64*
  %1585 = load i64, i64* %1584, align 8
  store i64 %1585, i64* %RDX, align 8, !tbaa !2428
  %1586 = add i64 %1571, -28
  %1587 = add i64 %1573, 18
  store i64 %1587, i64* %PC, align 8
  %1588 = inttoptr i64 %1586 to i32*
  %1589 = load i32, i32* %1588, align 4
  %1590 = sext i32 %1589 to i64
  store i64 %1590, i64* %RSI, align 8, !tbaa !2428
  %1591 = shl nsw i64 %1590, 3
  %1592 = add i64 %1591, %1585
  %1593 = add i64 %1573, 23
  store i64 %1593, i64* %PC, align 8
  %1594 = inttoptr i64 %1592 to double*
  store double %1581, double* %1594, align 8
  %1595 = load i64, i64* %RBP, align 8
  %1596 = add i64 %1595, -104
  %1597 = load i64, i64* %PC, align 8
  %1598 = add i64 %1597, 5
  store i64 %1598, i64* %PC, align 8
  %1599 = inttoptr i64 %1596 to double*
  %1600 = load double, double* %1599, align 8
  store double %1600, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1601 = add i64 %1595, -136
  %1602 = add i64 %1597, 13
  store i64 %1602, i64* %PC, align 8
  %1603 = inttoptr i64 %1601 to double*
  %1604 = load double, double* %1603, align 8
  %1605 = fadd double %1600, %1604
  store double %1605, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1606 = add i64 %1595, -16
  %1607 = add i64 %1597, 17
  store i64 %1607, i64* %PC, align 8
  %1608 = inttoptr i64 %1606 to i64*
  %1609 = load i64, i64* %1608, align 8
  store i64 %1609, i64* %RDX, align 8, !tbaa !2428
  %1610 = add i64 %1595, -28
  %1611 = add i64 %1597, 20
  store i64 %1611, i64* %PC, align 8
  %1612 = inttoptr i64 %1610 to i32*
  %1613 = load i32, i32* %1612, align 4
  %1614 = add i32 %1613, 1
  %1615 = zext i32 %1614 to i64
  store i64 %1615, i64* %RCX, align 8, !tbaa !2428
  %1616 = icmp eq i32 %1613, -1
  %1617 = icmp eq i32 %1614, 0
  %1618 = or i1 %1616, %1617
  %1619 = zext i1 %1618 to i8
  store i8 %1619, i8* %16, align 1, !tbaa !2433
  %1620 = and i32 %1614, 255
  %1621 = tail call i32 @llvm.ctpop.i32(i32 %1620) #11
  %1622 = trunc i32 %1621 to i8
  %1623 = and i8 %1622, 1
  %1624 = xor i8 %1623, 1
  store i8 %1624, i8* %23, align 1, !tbaa !2447
  %1625 = xor i32 %1613, %1614
  %1626 = lshr i32 %1625, 4
  %1627 = trunc i32 %1626 to i8
  %1628 = and i8 %1627, 1
  store i8 %1628, i8* %29, align 1, !tbaa !2451
  %1629 = zext i1 %1617 to i8
  store i8 %1629, i8* %32, align 1, !tbaa !2448
  %1630 = lshr i32 %1614, 31
  %1631 = trunc i32 %1630 to i8
  store i8 %1631, i8* %35, align 1, !tbaa !2449
  %1632 = lshr i32 %1613, 31
  %1633 = xor i32 %1630, %1632
  %1634 = add nuw nsw i32 %1633, %1630
  %1635 = icmp eq i32 %1634, 2
  %1636 = zext i1 %1635 to i8
  store i8 %1636, i8* %41, align 1, !tbaa !2450
  %1637 = sext i32 %1614 to i64
  store i64 %1637, i64* %RSI, align 8, !tbaa !2428
  %1638 = shl nsw i64 %1637, 3
  %1639 = add i64 %1638, %1609
  %1640 = add i64 %1597, 31
  store i64 %1640, i64* %PC, align 8
  %1641 = inttoptr i64 %1639 to double*
  store double %1605, double* %1641, align 8
  %1642 = load i64, i64* %RBP, align 8
  %1643 = add i64 %1642, -128
  %1644 = load i64, i64* %PC, align 8
  %1645 = add i64 %1644, 5
  store i64 %1645, i64* %PC, align 8
  %1646 = inttoptr i64 %1643 to double*
  %1647 = load double, double* %1646, align 8
  store double %1647, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1648 = add i64 %1642, -96
  %1649 = add i64 %1644, 10
  store i64 %1649, i64* %PC, align 8
  %1650 = inttoptr i64 %1648 to double*
  %1651 = load double, double* %1650, align 8
  %1652 = fsub double %1651, %1647
  store double %1652, double* %780, align 1, !tbaa !2452
  store i64 0, i64* %776, align 1, !tbaa !2452
  %1653 = add i64 %1644, 19
  store i64 %1653, i64* %PC, align 8
  store double %1652, double* %1650, align 8
  %1654 = load i64, i64* %RBP, align 8
  %1655 = add i64 %1654, -136
  %1656 = load i64, i64* %PC, align 8
  %1657 = add i64 %1656, 8
  store i64 %1657, i64* %PC, align 8
  %1658 = inttoptr i64 %1655 to double*
  %1659 = load double, double* %1658, align 8
  store double %1659, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1660 = add i64 %1654, -104
  %1661 = add i64 %1656, 13
  store i64 %1661, i64* %PC, align 8
  %1662 = inttoptr i64 %1660 to double*
  %1663 = load double, double* %1662, align 8
  %1664 = fsub double %1663, %1659
  store double %1664, double* %780, align 1, !tbaa !2452
  store i64 0, i64* %776, align 1, !tbaa !2452
  %1665 = add i64 %1656, 22
  store i64 %1665, i64* %PC, align 8
  store double %1664, double* %1662, align 8
  %1666 = load i64, i64* %RBP, align 8
  %1667 = add i64 %1666, -64
  %1668 = load i64, i64* %PC, align 8
  %1669 = add i64 %1668, 5
  store i64 %1669, i64* %PC, align 8
  %1670 = inttoptr i64 %1667 to double*
  %1671 = load double, double* %1670, align 8
  store double %1671, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1672 = add i64 %1666, -96
  %1673 = add i64 %1668, 10
  store i64 %1673, i64* %PC, align 8
  %1674 = inttoptr i64 %1672 to double*
  %1675 = load double, double* %1674, align 8
  %1676 = fmul double %1671, %1675
  store double %1676, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1677 = add i64 %1666, -72
  %1678 = add i64 %1668, 15
  store i64 %1678, i64* %PC, align 8
  %1679 = inttoptr i64 %1677 to double*
  %1680 = load double, double* %1679, align 8
  store double %1680, double* %780, align 1, !tbaa !2452
  store double 0.000000e+00, double* %787, align 1, !tbaa !2452
  %1681 = add i64 %1666, -104
  %1682 = add i64 %1668, 20
  store i64 %1682, i64* %PC, align 8
  %1683 = inttoptr i64 %1681 to double*
  %1684 = load double, double* %1683, align 8
  %1685 = fmul double %1680, %1684
  store double %1685, double* %780, align 1, !tbaa !2452
  store i64 0, i64* %776, align 1, !tbaa !2452
  %1686 = fsub double %1676, %1685
  store double %1686, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1687 = add i64 %1666, -16
  %1688 = add i64 %1668, 28
  store i64 %1688, i64* %PC, align 8
  %1689 = inttoptr i64 %1687 to i64*
  %1690 = load i64, i64* %1689, align 8
  store i64 %1690, i64* %RDX, align 8, !tbaa !2428
  %1691 = add i64 %1666, -28
  %1692 = add i64 %1668, 31
  store i64 %1692, i64* %PC, align 8
  %1693 = inttoptr i64 %1691 to i32*
  %1694 = load i32, i32* %1693, align 4
  %1695 = add i32 %1694, 4
  %1696 = zext i32 %1695 to i64
  store i64 %1696, i64* %RCX, align 8, !tbaa !2428
  %1697 = icmp ugt i32 %1694, -5
  %1698 = zext i1 %1697 to i8
  store i8 %1698, i8* %16, align 1, !tbaa !2433
  %1699 = and i32 %1695, 255
  %1700 = tail call i32 @llvm.ctpop.i32(i32 %1699) #11
  %1701 = trunc i32 %1700 to i8
  %1702 = and i8 %1701, 1
  %1703 = xor i8 %1702, 1
  store i8 %1703, i8* %23, align 1, !tbaa !2447
  %1704 = xor i32 %1694, %1695
  %1705 = lshr i32 %1704, 4
  %1706 = trunc i32 %1705 to i8
  %1707 = and i8 %1706, 1
  store i8 %1707, i8* %29, align 1, !tbaa !2451
  %1708 = icmp eq i32 %1695, 0
  %1709 = zext i1 %1708 to i8
  store i8 %1709, i8* %32, align 1, !tbaa !2448
  %1710 = lshr i32 %1695, 31
  %1711 = trunc i32 %1710 to i8
  store i8 %1711, i8* %35, align 1, !tbaa !2449
  %1712 = lshr i32 %1694, 31
  %1713 = xor i32 %1710, %1712
  %1714 = add nuw nsw i32 %1713, %1710
  %1715 = icmp eq i32 %1714, 2
  %1716 = zext i1 %1715 to i8
  store i8 %1716, i8* %41, align 1, !tbaa !2450
  %1717 = sext i32 %1695 to i64
  store i64 %1717, i64* %RSI, align 8, !tbaa !2428
  %1718 = shl nsw i64 %1717, 3
  %1719 = add i64 %1718, %1690
  %1720 = add i64 %1668, 42
  store i64 %1720, i64* %PC, align 8
  %1721 = inttoptr i64 %1719 to double*
  store double %1686, double* %1721, align 8
  %1722 = load i64, i64* %RBP, align 8
  %1723 = add i64 %1722, -64
  %1724 = load i64, i64* %PC, align 8
  %1725 = add i64 %1724, 5
  store i64 %1725, i64* %PC, align 8
  %1726 = inttoptr i64 %1723 to double*
  %1727 = load double, double* %1726, align 8
  store double %1727, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1728 = add i64 %1722, -104
  %1729 = add i64 %1724, 10
  store i64 %1729, i64* %PC, align 8
  %1730 = inttoptr i64 %1728 to double*
  %1731 = load double, double* %1730, align 8
  %1732 = fmul double %1727, %1731
  store double %1732, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1733 = add i64 %1722, -72
  %1734 = add i64 %1724, 15
  store i64 %1734, i64* %PC, align 8
  %1735 = inttoptr i64 %1733 to double*
  %1736 = load double, double* %1735, align 8
  store double %1736, double* %780, align 1, !tbaa !2452
  store double 0.000000e+00, double* %787, align 1, !tbaa !2452
  %1737 = add i64 %1722, -96
  %1738 = add i64 %1724, 20
  store i64 %1738, i64* %PC, align 8
  %1739 = inttoptr i64 %1737 to double*
  %1740 = load double, double* %1739, align 8
  %1741 = fmul double %1736, %1740
  store double %1741, double* %780, align 1, !tbaa !2452
  store i64 0, i64* %776, align 1, !tbaa !2452
  %1742 = fadd double %1732, %1741
  store double %1742, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1743 = add i64 %1722, -16
  %1744 = add i64 %1724, 28
  store i64 %1744, i64* %PC, align 8
  %1745 = inttoptr i64 %1743 to i64*
  %1746 = load i64, i64* %1745, align 8
  store i64 %1746, i64* %RDX, align 8, !tbaa !2428
  %1747 = add i64 %1722, -28
  %1748 = add i64 %1724, 31
  store i64 %1748, i64* %PC, align 8
  %1749 = inttoptr i64 %1747 to i32*
  %1750 = load i32, i32* %1749, align 4
  %1751 = add i32 %1750, 5
  %1752 = zext i32 %1751 to i64
  store i64 %1752, i64* %RCX, align 8, !tbaa !2428
  %1753 = icmp ugt i32 %1750, -6
  %1754 = zext i1 %1753 to i8
  store i8 %1754, i8* %16, align 1, !tbaa !2433
  %1755 = and i32 %1751, 255
  %1756 = tail call i32 @llvm.ctpop.i32(i32 %1755) #11
  %1757 = trunc i32 %1756 to i8
  %1758 = and i8 %1757, 1
  %1759 = xor i8 %1758, 1
  store i8 %1759, i8* %23, align 1, !tbaa !2447
  %1760 = xor i32 %1750, %1751
  %1761 = lshr i32 %1760, 4
  %1762 = trunc i32 %1761 to i8
  %1763 = and i8 %1762, 1
  store i8 %1763, i8* %29, align 1, !tbaa !2451
  %1764 = icmp eq i32 %1751, 0
  %1765 = zext i1 %1764 to i8
  store i8 %1765, i8* %32, align 1, !tbaa !2448
  %1766 = lshr i32 %1751, 31
  %1767 = trunc i32 %1766 to i8
  store i8 %1767, i8* %35, align 1, !tbaa !2449
  %1768 = lshr i32 %1750, 31
  %1769 = xor i32 %1766, %1768
  %1770 = add nuw nsw i32 %1769, %1766
  %1771 = icmp eq i32 %1770, 2
  %1772 = zext i1 %1771 to i8
  store i8 %1772, i8* %41, align 1, !tbaa !2450
  %1773 = sext i32 %1751 to i64
  store i64 %1773, i64* %RSI, align 8, !tbaa !2428
  %1774 = shl nsw i64 %1773, 3
  %1775 = add i64 %1774, %1746
  %1776 = add i64 %1724, 42
  store i64 %1776, i64* %PC, align 8
  %1777 = inttoptr i64 %1775 to double*
  store double %1742, double* %1777, align 8
  %1778 = load i64, i64* %RBP, align 8
  %1779 = add i64 %1778, -112
  %1780 = load i64, i64* %PC, align 8
  %1781 = add i64 %1780, 5
  store i64 %1781, i64* %PC, align 8
  %1782 = inttoptr i64 %1779 to double*
  %1783 = load double, double* %1782, align 8
  store double %1783, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1784 = add i64 %1778, -152
  %1785 = add i64 %1780, 13
  store i64 %1785, i64* %PC, align 8
  %1786 = inttoptr i64 %1784 to double*
  %1787 = load double, double* %1786, align 8
  %1788 = fsub double %1783, %1787
  store double %1788, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1789 = add i64 %1778, -96
  %1790 = add i64 %1780, 18
  store i64 %1790, i64* %PC, align 8
  %1791 = inttoptr i64 %1789 to double*
  store double %1788, double* %1791, align 8
  %1792 = load i64, i64* %RBP, align 8
  %1793 = add i64 %1792, -120
  %1794 = load i64, i64* %PC, align 8
  %1795 = add i64 %1794, 5
  store i64 %1795, i64* %PC, align 8
  %1796 = inttoptr i64 %1793 to double*
  %1797 = load double, double* %1796, align 8
  store double %1797, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1798 = add i64 %1792, -144
  %1799 = add i64 %1794, 13
  store i64 %1799, i64* %PC, align 8
  %1800 = inttoptr i64 %1798 to double*
  %1801 = load double, double* %1800, align 8
  %1802 = fadd double %1797, %1801
  store double %1802, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1803 = add i64 %1792, -104
  %1804 = add i64 %1794, 18
  store i64 %1804, i64* %PC, align 8
  %1805 = inttoptr i64 %1803 to double*
  store double %1802, double* %1805, align 8
  %1806 = load i64, i64* %RBP, align 8
  %1807 = add i64 %1806, -48
  %1808 = load i64, i64* %PC, align 8
  %1809 = add i64 %1808, 5
  store i64 %1809, i64* %PC, align 8
  %1810 = inttoptr i64 %1807 to double*
  %1811 = load double, double* %1810, align 8
  store double %1811, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1812 = add i64 %1806, -96
  %1813 = add i64 %1808, 10
  store i64 %1813, i64* %PC, align 8
  %1814 = inttoptr i64 %1812 to double*
  %1815 = load double, double* %1814, align 8
  %1816 = fmul double %1811, %1815
  store double %1816, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1817 = add i64 %1806, -56
  %1818 = add i64 %1808, 15
  store i64 %1818, i64* %PC, align 8
  %1819 = inttoptr i64 %1817 to double*
  %1820 = load double, double* %1819, align 8
  store double %1820, double* %780, align 1, !tbaa !2452
  store double 0.000000e+00, double* %787, align 1, !tbaa !2452
  %1821 = add i64 %1806, -104
  %1822 = add i64 %1808, 20
  store i64 %1822, i64* %PC, align 8
  %1823 = inttoptr i64 %1821 to double*
  %1824 = load double, double* %1823, align 8
  %1825 = fmul double %1820, %1824
  store double %1825, double* %780, align 1, !tbaa !2452
  store i64 0, i64* %776, align 1, !tbaa !2452
  %1826 = fsub double %1816, %1825
  store double %1826, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1827 = add i64 %1806, -16
  %1828 = add i64 %1808, 28
  store i64 %1828, i64* %PC, align 8
  %1829 = inttoptr i64 %1827 to i64*
  %1830 = load i64, i64* %1829, align 8
  store i64 %1830, i64* %RDX, align 8, !tbaa !2428
  %1831 = add i64 %1806, -28
  %1832 = add i64 %1808, 31
  store i64 %1832, i64* %PC, align 8
  %1833 = inttoptr i64 %1831 to i32*
  %1834 = load i32, i32* %1833, align 4
  %1835 = add i32 %1834, 2
  %1836 = zext i32 %1835 to i64
  store i64 %1836, i64* %RCX, align 8, !tbaa !2428
  %1837 = icmp ugt i32 %1834, -3
  %1838 = zext i1 %1837 to i8
  store i8 %1838, i8* %16, align 1, !tbaa !2433
  %1839 = and i32 %1835, 255
  %1840 = tail call i32 @llvm.ctpop.i32(i32 %1839) #11
  %1841 = trunc i32 %1840 to i8
  %1842 = and i8 %1841, 1
  %1843 = xor i8 %1842, 1
  store i8 %1843, i8* %23, align 1, !tbaa !2447
  %1844 = xor i32 %1834, %1835
  %1845 = lshr i32 %1844, 4
  %1846 = trunc i32 %1845 to i8
  %1847 = and i8 %1846, 1
  store i8 %1847, i8* %29, align 1, !tbaa !2451
  %1848 = icmp eq i32 %1835, 0
  %1849 = zext i1 %1848 to i8
  store i8 %1849, i8* %32, align 1, !tbaa !2448
  %1850 = lshr i32 %1835, 31
  %1851 = trunc i32 %1850 to i8
  store i8 %1851, i8* %35, align 1, !tbaa !2449
  %1852 = lshr i32 %1834, 31
  %1853 = xor i32 %1850, %1852
  %1854 = add nuw nsw i32 %1853, %1850
  %1855 = icmp eq i32 %1854, 2
  %1856 = zext i1 %1855 to i8
  store i8 %1856, i8* %41, align 1, !tbaa !2450
  %1857 = sext i32 %1835 to i64
  store i64 %1857, i64* %RSI, align 8, !tbaa !2428
  %1858 = shl nsw i64 %1857, 3
  %1859 = add i64 %1858, %1830
  %1860 = add i64 %1808, 42
  store i64 %1860, i64* %PC, align 8
  %1861 = inttoptr i64 %1859 to double*
  store double %1826, double* %1861, align 8
  %1862 = load i64, i64* %RBP, align 8
  %1863 = add i64 %1862, -48
  %1864 = load i64, i64* %PC, align 8
  %1865 = add i64 %1864, 5
  store i64 %1865, i64* %PC, align 8
  %1866 = inttoptr i64 %1863 to double*
  %1867 = load double, double* %1866, align 8
  store double %1867, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1868 = add i64 %1862, -104
  %1869 = add i64 %1864, 10
  store i64 %1869, i64* %PC, align 8
  %1870 = inttoptr i64 %1868 to double*
  %1871 = load double, double* %1870, align 8
  %1872 = fmul double %1867, %1871
  store double %1872, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1873 = add i64 %1862, -56
  %1874 = add i64 %1864, 15
  store i64 %1874, i64* %PC, align 8
  %1875 = inttoptr i64 %1873 to double*
  %1876 = load double, double* %1875, align 8
  store double %1876, double* %780, align 1, !tbaa !2452
  store double 0.000000e+00, double* %787, align 1, !tbaa !2452
  %1877 = add i64 %1862, -96
  %1878 = add i64 %1864, 20
  store i64 %1878, i64* %PC, align 8
  %1879 = inttoptr i64 %1877 to double*
  %1880 = load double, double* %1879, align 8
  %1881 = fmul double %1876, %1880
  store double %1881, double* %780, align 1, !tbaa !2452
  store i64 0, i64* %776, align 1, !tbaa !2452
  %1882 = fadd double %1872, %1881
  store double %1882, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1883 = add i64 %1862, -16
  %1884 = add i64 %1864, 28
  store i64 %1884, i64* %PC, align 8
  %1885 = inttoptr i64 %1883 to i64*
  %1886 = load i64, i64* %1885, align 8
  store i64 %1886, i64* %RDX, align 8, !tbaa !2428
  %1887 = add i64 %1862, -28
  %1888 = add i64 %1864, 31
  store i64 %1888, i64* %PC, align 8
  %1889 = inttoptr i64 %1887 to i32*
  %1890 = load i32, i32* %1889, align 4
  %1891 = add i32 %1890, 3
  %1892 = zext i32 %1891 to i64
  store i64 %1892, i64* %RCX, align 8, !tbaa !2428
  %1893 = icmp ugt i32 %1890, -4
  %1894 = zext i1 %1893 to i8
  store i8 %1894, i8* %16, align 1, !tbaa !2433
  %1895 = and i32 %1891, 255
  %1896 = tail call i32 @llvm.ctpop.i32(i32 %1895) #11
  %1897 = trunc i32 %1896 to i8
  %1898 = and i8 %1897, 1
  %1899 = xor i8 %1898, 1
  store i8 %1899, i8* %23, align 1, !tbaa !2447
  %1900 = xor i32 %1890, %1891
  %1901 = lshr i32 %1900, 4
  %1902 = trunc i32 %1901 to i8
  %1903 = and i8 %1902, 1
  store i8 %1903, i8* %29, align 1, !tbaa !2451
  %1904 = icmp eq i32 %1891, 0
  %1905 = zext i1 %1904 to i8
  store i8 %1905, i8* %32, align 1, !tbaa !2448
  %1906 = lshr i32 %1891, 31
  %1907 = trunc i32 %1906 to i8
  store i8 %1907, i8* %35, align 1, !tbaa !2449
  %1908 = lshr i32 %1890, 31
  %1909 = xor i32 %1906, %1908
  %1910 = add nuw nsw i32 %1909, %1906
  %1911 = icmp eq i32 %1910, 2
  %1912 = zext i1 %1911 to i8
  store i8 %1912, i8* %41, align 1, !tbaa !2450
  %1913 = sext i32 %1891 to i64
  store i64 %1913, i64* %RSI, align 8, !tbaa !2428
  %1914 = shl nsw i64 %1913, 3
  %1915 = add i64 %1914, %1886
  %1916 = add i64 %1864, 42
  store i64 %1916, i64* %PC, align 8
  %1917 = inttoptr i64 %1915 to double*
  store double %1882, double* %1917, align 8
  %1918 = load i64, i64* %RBP, align 8
  %1919 = add i64 %1918, -112
  %1920 = load i64, i64* %PC, align 8
  %1921 = add i64 %1920, 5
  store i64 %1921, i64* %PC, align 8
  %1922 = inttoptr i64 %1919 to double*
  %1923 = load double, double* %1922, align 8
  store double %1923, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1924 = add i64 %1918, -152
  %1925 = add i64 %1920, 13
  store i64 %1925, i64* %PC, align 8
  %1926 = inttoptr i64 %1924 to double*
  %1927 = load double, double* %1926, align 8
  %1928 = fadd double %1923, %1927
  store double %1928, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1929 = add i64 %1918, -96
  %1930 = add i64 %1920, 18
  store i64 %1930, i64* %PC, align 8
  %1931 = inttoptr i64 %1929 to double*
  store double %1928, double* %1931, align 8
  %1932 = load i64, i64* %RBP, align 8
  %1933 = add i64 %1932, -120
  %1934 = load i64, i64* %PC, align 8
  %1935 = add i64 %1934, 5
  store i64 %1935, i64* %PC, align 8
  %1936 = inttoptr i64 %1933 to double*
  %1937 = load double, double* %1936, align 8
  store double %1937, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1938 = add i64 %1932, -144
  %1939 = add i64 %1934, 13
  store i64 %1939, i64* %PC, align 8
  %1940 = inttoptr i64 %1938 to double*
  %1941 = load double, double* %1940, align 8
  %1942 = fsub double %1937, %1941
  store double %1942, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1943 = add i64 %1932, -104
  %1944 = add i64 %1934, 18
  store i64 %1944, i64* %PC, align 8
  %1945 = inttoptr i64 %1943 to double*
  store double %1942, double* %1945, align 8
  %1946 = load i64, i64* %RBP, align 8
  %1947 = add i64 %1946, -80
  %1948 = load i64, i64* %PC, align 8
  %1949 = add i64 %1948, 5
  store i64 %1949, i64* %PC, align 8
  %1950 = inttoptr i64 %1947 to double*
  %1951 = load double, double* %1950, align 8
  store double %1951, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %1952 = add i64 %1946, -96
  %1953 = add i64 %1948, 10
  store i64 %1953, i64* %PC, align 8
  %1954 = inttoptr i64 %1952 to double*
  %1955 = load double, double* %1954, align 8
  %1956 = fmul double %1951, %1955
  store double %1956, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1957 = add i64 %1946, -88
  %1958 = add i64 %1948, 15
  store i64 %1958, i64* %PC, align 8
  %1959 = inttoptr i64 %1957 to double*
  %1960 = load double, double* %1959, align 8
  store double %1960, double* %780, align 1, !tbaa !2452
  store double 0.000000e+00, double* %787, align 1, !tbaa !2452
  %1961 = add i64 %1946, -104
  %1962 = add i64 %1948, 20
  store i64 %1962, i64* %PC, align 8
  %1963 = inttoptr i64 %1961 to double*
  %1964 = load double, double* %1963, align 8
  %1965 = fmul double %1960, %1964
  store double %1965, double* %780, align 1, !tbaa !2452
  store i64 0, i64* %776, align 1, !tbaa !2452
  %1966 = fsub double %1956, %1965
  store double %1966, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %1967 = add i64 %1946, -16
  %1968 = add i64 %1948, 28
  store i64 %1968, i64* %PC, align 8
  %1969 = inttoptr i64 %1967 to i64*
  %1970 = load i64, i64* %1969, align 8
  store i64 %1970, i64* %RDX, align 8, !tbaa !2428
  %1971 = add i64 %1946, -28
  %1972 = add i64 %1948, 31
  store i64 %1972, i64* %PC, align 8
  %1973 = inttoptr i64 %1971 to i32*
  %1974 = load i32, i32* %1973, align 4
  %1975 = add i32 %1974, 6
  %1976 = zext i32 %1975 to i64
  store i64 %1976, i64* %RCX, align 8, !tbaa !2428
  %1977 = icmp ugt i32 %1974, -7
  %1978 = zext i1 %1977 to i8
  store i8 %1978, i8* %16, align 1, !tbaa !2433
  %1979 = and i32 %1975, 255
  %1980 = tail call i32 @llvm.ctpop.i32(i32 %1979) #11
  %1981 = trunc i32 %1980 to i8
  %1982 = and i8 %1981, 1
  %1983 = xor i8 %1982, 1
  store i8 %1983, i8* %23, align 1, !tbaa !2447
  %1984 = xor i32 %1974, %1975
  %1985 = lshr i32 %1984, 4
  %1986 = trunc i32 %1985 to i8
  %1987 = and i8 %1986, 1
  store i8 %1987, i8* %29, align 1, !tbaa !2451
  %1988 = icmp eq i32 %1975, 0
  %1989 = zext i1 %1988 to i8
  store i8 %1989, i8* %32, align 1, !tbaa !2448
  %1990 = lshr i32 %1975, 31
  %1991 = trunc i32 %1990 to i8
  store i8 %1991, i8* %35, align 1, !tbaa !2449
  %1992 = lshr i32 %1974, 31
  %1993 = xor i32 %1990, %1992
  %1994 = add nuw nsw i32 %1993, %1990
  %1995 = icmp eq i32 %1994, 2
  %1996 = zext i1 %1995 to i8
  store i8 %1996, i8* %41, align 1, !tbaa !2450
  %1997 = sext i32 %1975 to i64
  store i64 %1997, i64* %RSI, align 8, !tbaa !2428
  %1998 = shl nsw i64 %1997, 3
  %1999 = add i64 %1998, %1970
  %2000 = add i64 %1948, 42
  store i64 %2000, i64* %PC, align 8
  %2001 = inttoptr i64 %1999 to double*
  store double %1966, double* %2001, align 8
  %2002 = load i64, i64* %RBP, align 8
  %2003 = add i64 %2002, -80
  %2004 = load i64, i64* %PC, align 8
  %2005 = add i64 %2004, 5
  store i64 %2005, i64* %PC, align 8
  %2006 = inttoptr i64 %2003 to double*
  %2007 = load double, double* %2006, align 8
  store double %2007, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %2008 = add i64 %2002, -104
  %2009 = add i64 %2004, 10
  store i64 %2009, i64* %PC, align 8
  %2010 = inttoptr i64 %2008 to double*
  %2011 = load double, double* %2010, align 8
  %2012 = fmul double %2007, %2011
  store double %2012, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %2013 = add i64 %2002, -88
  %2014 = add i64 %2004, 15
  store i64 %2014, i64* %PC, align 8
  %2015 = inttoptr i64 %2013 to double*
  %2016 = load double, double* %2015, align 8
  store double %2016, double* %780, align 1, !tbaa !2452
  store double 0.000000e+00, double* %787, align 1, !tbaa !2452
  %2017 = add i64 %2002, -96
  %2018 = add i64 %2004, 20
  store i64 %2018, i64* %PC, align 8
  %2019 = inttoptr i64 %2017 to double*
  %2020 = load double, double* %2019, align 8
  %2021 = fmul double %2016, %2020
  store double %2021, double* %780, align 1, !tbaa !2452
  store i64 0, i64* %776, align 1, !tbaa !2452
  %2022 = fadd double %2012, %2021
  store double %2022, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %2023 = add i64 %2002, -16
  %2024 = add i64 %2004, 28
  store i64 %2024, i64* %PC, align 8
  %2025 = inttoptr i64 %2023 to i64*
  %2026 = load i64, i64* %2025, align 8
  store i64 %2026, i64* %RDX, align 8, !tbaa !2428
  %2027 = add i64 %2002, -28
  %2028 = add i64 %2004, 31
  store i64 %2028, i64* %PC, align 8
  %2029 = inttoptr i64 %2027 to i32*
  %2030 = load i32, i32* %2029, align 4
  %2031 = add i32 %2030, 7
  %2032 = zext i32 %2031 to i64
  store i64 %2032, i64* %RCX, align 8, !tbaa !2428
  %2033 = icmp ugt i32 %2030, -8
  %2034 = zext i1 %2033 to i8
  store i8 %2034, i8* %16, align 1, !tbaa !2433
  %2035 = and i32 %2031, 255
  %2036 = tail call i32 @llvm.ctpop.i32(i32 %2035) #11
  %2037 = trunc i32 %2036 to i8
  %2038 = and i8 %2037, 1
  %2039 = xor i8 %2038, 1
  store i8 %2039, i8* %23, align 1, !tbaa !2447
  %2040 = xor i32 %2030, %2031
  %2041 = lshr i32 %2040, 4
  %2042 = trunc i32 %2041 to i8
  %2043 = and i8 %2042, 1
  store i8 %2043, i8* %29, align 1, !tbaa !2451
  %2044 = icmp eq i32 %2031, 0
  %2045 = zext i1 %2044 to i8
  store i8 %2045, i8* %32, align 1, !tbaa !2448
  %2046 = lshr i32 %2031, 31
  %2047 = trunc i32 %2046 to i8
  store i8 %2047, i8* %35, align 1, !tbaa !2449
  %2048 = lshr i32 %2030, 31
  %2049 = xor i32 %2046, %2048
  %2050 = add nuw nsw i32 %2049, %2046
  %2051 = icmp eq i32 %2050, 2
  %2052 = zext i1 %2051 to i8
  store i8 %2052, i8* %41, align 1, !tbaa !2450
  %2053 = sext i32 %2031 to i64
  store i64 %2053, i64* %RSI, align 8, !tbaa !2428
  %2054 = shl nsw i64 %2053, 3
  %2055 = add i64 %2054, %2026
  %2056 = add i64 %2004, 42
  store i64 %2056, i64* %PC, align 8
  %2057 = inttoptr i64 %2055 to double*
  store double %2022, double* %2057, align 8
  %2058 = load i64, i64* %RBP, align 8
  %2059 = add i64 %2058, -24
  %2060 = load i64, i64* %PC, align 8
  %2061 = add i64 %2060, 4
  store i64 %2061, i64* %PC, align 8
  %2062 = inttoptr i64 %2059 to i64*
  %2063 = load i64, i64* %2062, align 8
  store i64 %2063, i64* %RDX, align 8, !tbaa !2428
  %2064 = add i64 %2058, -36
  %2065 = add i64 %2060, 7
  store i64 %2065, i64* %PC, align 8
  %2066 = inttoptr i64 %2064 to i32*
  %2067 = load i32, i32* %2066, align 4
  %2068 = add i32 %2067, 2
  %2069 = zext i32 %2068 to i64
  store i64 %2069, i64* %RCX, align 8, !tbaa !2428
  %2070 = icmp ugt i32 %2067, -3
  %2071 = zext i1 %2070 to i8
  store i8 %2071, i8* %16, align 1, !tbaa !2433
  %2072 = and i32 %2068, 255
  %2073 = tail call i32 @llvm.ctpop.i32(i32 %2072) #11
  %2074 = trunc i32 %2073 to i8
  %2075 = and i8 %2074, 1
  %2076 = xor i8 %2075, 1
  store i8 %2076, i8* %23, align 1, !tbaa !2447
  %2077 = xor i32 %2067, %2068
  %2078 = lshr i32 %2077, 4
  %2079 = trunc i32 %2078 to i8
  %2080 = and i8 %2079, 1
  store i8 %2080, i8* %29, align 1, !tbaa !2451
  %2081 = icmp eq i32 %2068, 0
  %2082 = zext i1 %2081 to i8
  store i8 %2082, i8* %32, align 1, !tbaa !2448
  %2083 = lshr i32 %2068, 31
  %2084 = trunc i32 %2083 to i8
  store i8 %2084, i8* %35, align 1, !tbaa !2449
  %2085 = lshr i32 %2067, 31
  %2086 = xor i32 %2083, %2085
  %2087 = add nuw nsw i32 %2086, %2083
  %2088 = icmp eq i32 %2087, 2
  %2089 = zext i1 %2088 to i8
  store i8 %2089, i8* %41, align 1, !tbaa !2450
  %2090 = sext i32 %2068 to i64
  store i64 %2090, i64* %RSI, align 8, !tbaa !2428
  %2091 = shl nsw i64 %2090, 3
  %2092 = add i64 %2091, %2063
  %2093 = add i64 %2060, 18
  store i64 %2093, i64* %PC, align 8
  %2094 = inttoptr i64 %2092 to i64*
  %2095 = load i64, i64* %2094, align 8
  store i64 %2095, i64* %858, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %2096 = add i64 %2058, -48
  %2097 = add i64 %2060, 23
  store i64 %2097, i64* %PC, align 8
  %2098 = inttoptr i64 %2096 to i64*
  store i64 %2095, i64* %2098, align 8
  %2099 = load i64, i64* %RBP, align 8
  %2100 = add i64 %2099, -24
  %2101 = load i64, i64* %PC, align 8
  %2102 = add i64 %2101, 4
  store i64 %2102, i64* %PC, align 8
  %2103 = inttoptr i64 %2100 to i64*
  %2104 = load i64, i64* %2103, align 8
  store i64 %2104, i64* %RDX, align 8, !tbaa !2428
  %2105 = add i64 %2099, -36
  %2106 = add i64 %2101, 7
  store i64 %2106, i64* %PC, align 8
  %2107 = inttoptr i64 %2105 to i32*
  %2108 = load i32, i32* %2107, align 4
  %2109 = add i32 %2108, 3
  %2110 = zext i32 %2109 to i64
  store i64 %2110, i64* %RCX, align 8, !tbaa !2428
  %2111 = icmp ugt i32 %2108, -4
  %2112 = zext i1 %2111 to i8
  store i8 %2112, i8* %16, align 1, !tbaa !2433
  %2113 = and i32 %2109, 255
  %2114 = tail call i32 @llvm.ctpop.i32(i32 %2113) #11
  %2115 = trunc i32 %2114 to i8
  %2116 = and i8 %2115, 1
  %2117 = xor i8 %2116, 1
  store i8 %2117, i8* %23, align 1, !tbaa !2447
  %2118 = xor i32 %2108, %2109
  %2119 = lshr i32 %2118, 4
  %2120 = trunc i32 %2119 to i8
  %2121 = and i8 %2120, 1
  store i8 %2121, i8* %29, align 1, !tbaa !2451
  %2122 = icmp eq i32 %2109, 0
  %2123 = zext i1 %2122 to i8
  store i8 %2123, i8* %32, align 1, !tbaa !2448
  %2124 = lshr i32 %2109, 31
  %2125 = trunc i32 %2124 to i8
  store i8 %2125, i8* %35, align 1, !tbaa !2449
  %2126 = lshr i32 %2108, 31
  %2127 = xor i32 %2124, %2126
  %2128 = add nuw nsw i32 %2127, %2124
  %2129 = icmp eq i32 %2128, 2
  %2130 = zext i1 %2129 to i8
  store i8 %2130, i8* %41, align 1, !tbaa !2450
  %2131 = sext i32 %2109 to i64
  store i64 %2131, i64* %RSI, align 8, !tbaa !2428
  %2132 = shl nsw i64 %2131, 3
  %2133 = add i64 %2132, %2104
  %2134 = add i64 %2101, 18
  store i64 %2134, i64* %PC, align 8
  %2135 = inttoptr i64 %2133 to i64*
  %2136 = load i64, i64* %2135, align 8
  store i64 %2136, i64* %858, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %2137 = add i64 %2099, -56
  %2138 = add i64 %2101, 23
  store i64 %2138, i64* %PC, align 8
  %2139 = inttoptr i64 %2137 to i64*
  store i64 %2136, i64* %2139, align 8
  %2140 = load i64, i64* %RBP, align 8
  %2141 = add i64 %2140, -48
  %2142 = load i64, i64* %PC, align 8
  %2143 = add i64 %2142, 5
  store i64 %2143, i64* %PC, align 8
  %2144 = inttoptr i64 %2141 to double*
  %2145 = load double, double* %2144, align 8
  store double %2145, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %2146 = load <2 x i32>, <2 x i32>* %771, align 1
  %2147 = load <2 x i32>, <2 x i32>* %772, align 1
  %2148 = extractelement <2 x i32> %2146, i32 0
  store i32 %2148, i32* %773, align 1, !tbaa !2475
  %2149 = extractelement <2 x i32> %2146, i32 1
  store i32 %2149, i32* %775, align 1, !tbaa !2475
  %2150 = extractelement <2 x i32> %2147, i32 0
  store i32 %2150, i32* %777, align 1, !tbaa !2475
  %2151 = extractelement <2 x i32> %2147, i32 1
  store i32 %2151, i32* %779, align 1, !tbaa !2475
  %2152 = add i64 %2140, -64
  %2153 = add i64 %2142, 13
  store i64 %2153, i64* %PC, align 8
  %2154 = load double, double* %780, align 1
  %2155 = inttoptr i64 %2152 to double*
  %2156 = load double, double* %2155, align 8
  %2157 = fmul double %2154, %2156
  store double %2157, double* %780, align 1, !tbaa !2452
  %2158 = add i64 %2140, -56
  %2159 = add i64 %2142, 18
  store i64 %2159, i64* %PC, align 8
  %2160 = inttoptr i64 %2158 to double*
  %2161 = load double, double* %2160, align 8
  %2162 = fmul double %2157, %2161
  store double %2162, double* %780, align 1, !tbaa !2452
  %2163 = fsub double %2145, %2162
  store double %2163, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %2164 = add i64 %2140, -80
  %2165 = add i64 %2142, 27
  store i64 %2165, i64* %PC, align 8
  %2166 = inttoptr i64 %2164 to double*
  store double %2163, double* %2166, align 8
  %2167 = load i64, i64* %RBP, align 8
  %2168 = add i64 %2167, -64
  %2169 = load i64, i64* %PC, align 8
  %2170 = add i64 %2169, 5
  store i64 %2170, i64* %PC, align 8
  %2171 = load double, double* %67, align 1
  %2172 = inttoptr i64 %2168 to double*
  %2173 = load double, double* %2172, align 8
  %2174 = fmul double %2171, %2173
  store double %2174, double* %67, align 1, !tbaa !2452
  %2175 = add i64 %2167, -48
  %2176 = add i64 %2169, 10
  store i64 %2176, i64* %PC, align 8
  %2177 = inttoptr i64 %2175 to double*
  %2178 = load double, double* %2177, align 8
  %2179 = fmul double %2174, %2178
  store double %2179, double* %67, align 1, !tbaa !2452
  %2180 = add i64 %2167, -56
  %2181 = add i64 %2169, 15
  store i64 %2181, i64* %PC, align 8
  %2182 = inttoptr i64 %2180 to double*
  %2183 = load double, double* %2182, align 8
  %2184 = fsub double %2179, %2183
  store double %2184, double* %67, align 1, !tbaa !2452
  %2185 = add i64 %2167, -88
  %2186 = add i64 %2169, 20
  store i64 %2186, i64* %PC, align 8
  %2187 = inttoptr i64 %2185 to double*
  store double %2184, double* %2187, align 8
  %2188 = load i64, i64* %RBP, align 8
  %2189 = add i64 %2188, -16
  %2190 = load i64, i64* %PC, align 8
  %2191 = add i64 %2190, 4
  store i64 %2191, i64* %PC, align 8
  %2192 = inttoptr i64 %2189 to i64*
  %2193 = load i64, i64* %2192, align 8
  store i64 %2193, i64* %RDX, align 8, !tbaa !2428
  %2194 = add i64 %2188, -28
  %2195 = add i64 %2190, 7
  store i64 %2195, i64* %PC, align 8
  %2196 = inttoptr i64 %2194 to i32*
  %2197 = load i32, i32* %2196, align 4
  %2198 = add i32 %2197, 8
  %2199 = zext i32 %2198 to i64
  store i64 %2199, i64* %RCX, align 8, !tbaa !2428
  %2200 = icmp ugt i32 %2197, -9
  %2201 = zext i1 %2200 to i8
  store i8 %2201, i8* %16, align 1, !tbaa !2433
  %2202 = and i32 %2198, 255
  %2203 = tail call i32 @llvm.ctpop.i32(i32 %2202) #11
  %2204 = trunc i32 %2203 to i8
  %2205 = and i8 %2204, 1
  %2206 = xor i8 %2205, 1
  store i8 %2206, i8* %23, align 1, !tbaa !2447
  %2207 = xor i32 %2197, %2198
  %2208 = lshr i32 %2207, 4
  %2209 = trunc i32 %2208 to i8
  %2210 = and i8 %2209, 1
  store i8 %2210, i8* %29, align 1, !tbaa !2451
  %2211 = icmp eq i32 %2198, 0
  %2212 = zext i1 %2211 to i8
  store i8 %2212, i8* %32, align 1, !tbaa !2448
  %2213 = lshr i32 %2198, 31
  %2214 = trunc i32 %2213 to i8
  store i8 %2214, i8* %35, align 1, !tbaa !2449
  %2215 = lshr i32 %2197, 31
  %2216 = xor i32 %2213, %2215
  %2217 = add nuw nsw i32 %2216, %2213
  %2218 = icmp eq i32 %2217, 2
  %2219 = zext i1 %2218 to i8
  store i8 %2219, i8* %41, align 1, !tbaa !2450
  %2220 = sext i32 %2198 to i64
  store i64 %2220, i64* %RSI, align 8, !tbaa !2428
  %2221 = shl nsw i64 %2220, 3
  %2222 = add i64 %2221, %2193
  %2223 = add i64 %2190, 18
  store i64 %2223, i64* %PC, align 8
  %2224 = inttoptr i64 %2222 to double*
  %2225 = load double, double* %2224, align 8
  store double %2225, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %2226 = add i64 %2190, 22
  store i64 %2226, i64* %PC, align 8
  %2227 = load i64, i64* %2192, align 8
  store i64 %2227, i64* %RDX, align 8, !tbaa !2428
  %2228 = add i64 %2190, 25
  store i64 %2228, i64* %PC, align 8
  %2229 = load i32, i32* %2196, align 4
  %2230 = add i32 %2229, 10
  %2231 = zext i32 %2230 to i64
  store i64 %2231, i64* %RCX, align 8, !tbaa !2428
  %2232 = icmp ugt i32 %2229, -11
  %2233 = zext i1 %2232 to i8
  store i8 %2233, i8* %16, align 1, !tbaa !2433
  %2234 = and i32 %2230, 255
  %2235 = tail call i32 @llvm.ctpop.i32(i32 %2234) #11
  %2236 = trunc i32 %2235 to i8
  %2237 = and i8 %2236, 1
  %2238 = xor i8 %2237, 1
  store i8 %2238, i8* %23, align 1, !tbaa !2447
  %2239 = xor i32 %2229, %2230
  %2240 = lshr i32 %2239, 4
  %2241 = trunc i32 %2240 to i8
  %2242 = and i8 %2241, 1
  store i8 %2242, i8* %29, align 1, !tbaa !2451
  %2243 = icmp eq i32 %2230, 0
  %2244 = zext i1 %2243 to i8
  store i8 %2244, i8* %32, align 1, !tbaa !2448
  %2245 = lshr i32 %2230, 31
  %2246 = trunc i32 %2245 to i8
  store i8 %2246, i8* %35, align 1, !tbaa !2449
  %2247 = lshr i32 %2229, 31
  %2248 = xor i32 %2245, %2247
  %2249 = add nuw nsw i32 %2248, %2245
  %2250 = icmp eq i32 %2249, 2
  %2251 = zext i1 %2250 to i8
  store i8 %2251, i8* %41, align 1, !tbaa !2450
  %2252 = sext i32 %2230 to i64
  store i64 %2252, i64* %RSI, align 8, !tbaa !2428
  %2253 = shl nsw i64 %2252, 3
  %2254 = add i64 %2253, %2227
  %2255 = add i64 %2190, 36
  store i64 %2255, i64* %PC, align 8
  %2256 = inttoptr i64 %2254 to double*
  %2257 = load double, double* %2256, align 8
  %2258 = fadd double %2225, %2257
  store double %2258, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %2259 = add i64 %2188, -96
  %2260 = add i64 %2190, 41
  store i64 %2260, i64* %PC, align 8
  %2261 = inttoptr i64 %2259 to double*
  store double %2258, double* %2261, align 8
  %2262 = load i64, i64* %RBP, align 8
  %2263 = add i64 %2262, -16
  %2264 = load i64, i64* %PC, align 8
  %2265 = add i64 %2264, 4
  store i64 %2265, i64* %PC, align 8
  %2266 = inttoptr i64 %2263 to i64*
  %2267 = load i64, i64* %2266, align 8
  store i64 %2267, i64* %RDX, align 8, !tbaa !2428
  %2268 = add i64 %2262, -28
  %2269 = add i64 %2264, 7
  store i64 %2269, i64* %PC, align 8
  %2270 = inttoptr i64 %2268 to i32*
  %2271 = load i32, i32* %2270, align 4
  %2272 = add i32 %2271, 9
  %2273 = zext i32 %2272 to i64
  store i64 %2273, i64* %RCX, align 8, !tbaa !2428
  %2274 = icmp ugt i32 %2271, -10
  %2275 = zext i1 %2274 to i8
  store i8 %2275, i8* %16, align 1, !tbaa !2433
  %2276 = and i32 %2272, 255
  %2277 = tail call i32 @llvm.ctpop.i32(i32 %2276) #11
  %2278 = trunc i32 %2277 to i8
  %2279 = and i8 %2278, 1
  %2280 = xor i8 %2279, 1
  store i8 %2280, i8* %23, align 1, !tbaa !2447
  %2281 = xor i32 %2271, %2272
  %2282 = lshr i32 %2281, 4
  %2283 = trunc i32 %2282 to i8
  %2284 = and i8 %2283, 1
  store i8 %2284, i8* %29, align 1, !tbaa !2451
  %2285 = icmp eq i32 %2272, 0
  %2286 = zext i1 %2285 to i8
  store i8 %2286, i8* %32, align 1, !tbaa !2448
  %2287 = lshr i32 %2272, 31
  %2288 = trunc i32 %2287 to i8
  store i8 %2288, i8* %35, align 1, !tbaa !2449
  %2289 = lshr i32 %2271, 31
  %2290 = xor i32 %2287, %2289
  %2291 = add nuw nsw i32 %2290, %2287
  %2292 = icmp eq i32 %2291, 2
  %2293 = zext i1 %2292 to i8
  store i8 %2293, i8* %41, align 1, !tbaa !2450
  %2294 = sext i32 %2272 to i64
  store i64 %2294, i64* %RSI, align 8, !tbaa !2428
  %2295 = shl nsw i64 %2294, 3
  %2296 = add i64 %2295, %2267
  %2297 = add i64 %2264, 18
  store i64 %2297, i64* %PC, align 8
  %2298 = inttoptr i64 %2296 to double*
  %2299 = load double, double* %2298, align 8
  store double %2299, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %2300 = add i64 %2264, 22
  store i64 %2300, i64* %PC, align 8
  %2301 = load i64, i64* %2266, align 8
  store i64 %2301, i64* %RDX, align 8, !tbaa !2428
  %2302 = add i64 %2264, 25
  store i64 %2302, i64* %PC, align 8
  %2303 = load i32, i32* %2270, align 4
  %2304 = add i32 %2303, 11
  %2305 = zext i32 %2304 to i64
  store i64 %2305, i64* %RCX, align 8, !tbaa !2428
  %2306 = icmp ugt i32 %2303, -12
  %2307 = zext i1 %2306 to i8
  store i8 %2307, i8* %16, align 1, !tbaa !2433
  %2308 = and i32 %2304, 255
  %2309 = tail call i32 @llvm.ctpop.i32(i32 %2308) #11
  %2310 = trunc i32 %2309 to i8
  %2311 = and i8 %2310, 1
  %2312 = xor i8 %2311, 1
  store i8 %2312, i8* %23, align 1, !tbaa !2447
  %2313 = xor i32 %2303, %2304
  %2314 = lshr i32 %2313, 4
  %2315 = trunc i32 %2314 to i8
  %2316 = and i8 %2315, 1
  store i8 %2316, i8* %29, align 1, !tbaa !2451
  %2317 = icmp eq i32 %2304, 0
  %2318 = zext i1 %2317 to i8
  store i8 %2318, i8* %32, align 1, !tbaa !2448
  %2319 = lshr i32 %2304, 31
  %2320 = trunc i32 %2319 to i8
  store i8 %2320, i8* %35, align 1, !tbaa !2449
  %2321 = lshr i32 %2303, 31
  %2322 = xor i32 %2319, %2321
  %2323 = add nuw nsw i32 %2322, %2319
  %2324 = icmp eq i32 %2323, 2
  %2325 = zext i1 %2324 to i8
  store i8 %2325, i8* %41, align 1, !tbaa !2450
  %2326 = sext i32 %2304 to i64
  store i64 %2326, i64* %RSI, align 8, !tbaa !2428
  %2327 = shl nsw i64 %2326, 3
  %2328 = add i64 %2327, %2301
  %2329 = add i64 %2264, 36
  store i64 %2329, i64* %PC, align 8
  %2330 = inttoptr i64 %2328 to double*
  %2331 = load double, double* %2330, align 8
  %2332 = fadd double %2299, %2331
  store double %2332, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %2333 = add i64 %2262, -104
  %2334 = add i64 %2264, 41
  store i64 %2334, i64* %PC, align 8
  %2335 = inttoptr i64 %2333 to double*
  store double %2332, double* %2335, align 8
  %2336 = load i64, i64* %RBP, align 8
  %2337 = add i64 %2336, -16
  %2338 = load i64, i64* %PC, align 8
  %2339 = add i64 %2338, 4
  store i64 %2339, i64* %PC, align 8
  %2340 = inttoptr i64 %2337 to i64*
  %2341 = load i64, i64* %2340, align 8
  store i64 %2341, i64* %RDX, align 8, !tbaa !2428
  %2342 = add i64 %2336, -28
  %2343 = add i64 %2338, 7
  store i64 %2343, i64* %PC, align 8
  %2344 = inttoptr i64 %2342 to i32*
  %2345 = load i32, i32* %2344, align 4
  %2346 = add i32 %2345, 8
  %2347 = zext i32 %2346 to i64
  store i64 %2347, i64* %RCX, align 8, !tbaa !2428
  %2348 = icmp ugt i32 %2345, -9
  %2349 = zext i1 %2348 to i8
  store i8 %2349, i8* %16, align 1, !tbaa !2433
  %2350 = and i32 %2346, 255
  %2351 = tail call i32 @llvm.ctpop.i32(i32 %2350) #11
  %2352 = trunc i32 %2351 to i8
  %2353 = and i8 %2352, 1
  %2354 = xor i8 %2353, 1
  store i8 %2354, i8* %23, align 1, !tbaa !2447
  %2355 = xor i32 %2345, %2346
  %2356 = lshr i32 %2355, 4
  %2357 = trunc i32 %2356 to i8
  %2358 = and i8 %2357, 1
  store i8 %2358, i8* %29, align 1, !tbaa !2451
  %2359 = icmp eq i32 %2346, 0
  %2360 = zext i1 %2359 to i8
  store i8 %2360, i8* %32, align 1, !tbaa !2448
  %2361 = lshr i32 %2346, 31
  %2362 = trunc i32 %2361 to i8
  store i8 %2362, i8* %35, align 1, !tbaa !2449
  %2363 = lshr i32 %2345, 31
  %2364 = xor i32 %2361, %2363
  %2365 = add nuw nsw i32 %2364, %2361
  %2366 = icmp eq i32 %2365, 2
  %2367 = zext i1 %2366 to i8
  store i8 %2367, i8* %41, align 1, !tbaa !2450
  %2368 = sext i32 %2346 to i64
  store i64 %2368, i64* %RSI, align 8, !tbaa !2428
  %2369 = shl nsw i64 %2368, 3
  %2370 = add i64 %2369, %2341
  %2371 = add i64 %2338, 18
  store i64 %2371, i64* %PC, align 8
  %2372 = inttoptr i64 %2370 to double*
  %2373 = load double, double* %2372, align 8
  store double %2373, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %2374 = add i64 %2338, 22
  store i64 %2374, i64* %PC, align 8
  %2375 = load i64, i64* %2340, align 8
  store i64 %2375, i64* %RDX, align 8, !tbaa !2428
  %2376 = add i64 %2338, 25
  store i64 %2376, i64* %PC, align 8
  %2377 = load i32, i32* %2344, align 4
  %2378 = add i32 %2377, 10
  %2379 = zext i32 %2378 to i64
  store i64 %2379, i64* %RCX, align 8, !tbaa !2428
  %2380 = icmp ugt i32 %2377, -11
  %2381 = zext i1 %2380 to i8
  store i8 %2381, i8* %16, align 1, !tbaa !2433
  %2382 = and i32 %2378, 255
  %2383 = tail call i32 @llvm.ctpop.i32(i32 %2382) #11
  %2384 = trunc i32 %2383 to i8
  %2385 = and i8 %2384, 1
  %2386 = xor i8 %2385, 1
  store i8 %2386, i8* %23, align 1, !tbaa !2447
  %2387 = xor i32 %2377, %2378
  %2388 = lshr i32 %2387, 4
  %2389 = trunc i32 %2388 to i8
  %2390 = and i8 %2389, 1
  store i8 %2390, i8* %29, align 1, !tbaa !2451
  %2391 = icmp eq i32 %2378, 0
  %2392 = zext i1 %2391 to i8
  store i8 %2392, i8* %32, align 1, !tbaa !2448
  %2393 = lshr i32 %2378, 31
  %2394 = trunc i32 %2393 to i8
  store i8 %2394, i8* %35, align 1, !tbaa !2449
  %2395 = lshr i32 %2377, 31
  %2396 = xor i32 %2393, %2395
  %2397 = add nuw nsw i32 %2396, %2393
  %2398 = icmp eq i32 %2397, 2
  %2399 = zext i1 %2398 to i8
  store i8 %2399, i8* %41, align 1, !tbaa !2450
  %2400 = sext i32 %2378 to i64
  store i64 %2400, i64* %RSI, align 8, !tbaa !2428
  %2401 = shl nsw i64 %2400, 3
  %2402 = add i64 %2401, %2375
  %2403 = add i64 %2338, 36
  store i64 %2403, i64* %PC, align 8
  %2404 = inttoptr i64 %2402 to double*
  %2405 = load double, double* %2404, align 8
  %2406 = fsub double %2373, %2405
  store double %2406, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %2407 = add i64 %2336, -112
  %2408 = add i64 %2338, 41
  store i64 %2408, i64* %PC, align 8
  %2409 = inttoptr i64 %2407 to double*
  store double %2406, double* %2409, align 8
  %2410 = load i64, i64* %RBP, align 8
  %2411 = add i64 %2410, -16
  %2412 = load i64, i64* %PC, align 8
  %2413 = add i64 %2412, 4
  store i64 %2413, i64* %PC, align 8
  %2414 = inttoptr i64 %2411 to i64*
  %2415 = load i64, i64* %2414, align 8
  store i64 %2415, i64* %RDX, align 8, !tbaa !2428
  %2416 = add i64 %2410, -28
  %2417 = add i64 %2412, 7
  store i64 %2417, i64* %PC, align 8
  %2418 = inttoptr i64 %2416 to i32*
  %2419 = load i32, i32* %2418, align 4
  %2420 = add i32 %2419, 9
  %2421 = zext i32 %2420 to i64
  store i64 %2421, i64* %RCX, align 8, !tbaa !2428
  %2422 = icmp ugt i32 %2419, -10
  %2423 = zext i1 %2422 to i8
  store i8 %2423, i8* %16, align 1, !tbaa !2433
  %2424 = and i32 %2420, 255
  %2425 = tail call i32 @llvm.ctpop.i32(i32 %2424) #11
  %2426 = trunc i32 %2425 to i8
  %2427 = and i8 %2426, 1
  %2428 = xor i8 %2427, 1
  store i8 %2428, i8* %23, align 1, !tbaa !2447
  %2429 = xor i32 %2419, %2420
  %2430 = lshr i32 %2429, 4
  %2431 = trunc i32 %2430 to i8
  %2432 = and i8 %2431, 1
  store i8 %2432, i8* %29, align 1, !tbaa !2451
  %2433 = icmp eq i32 %2420, 0
  %2434 = zext i1 %2433 to i8
  store i8 %2434, i8* %32, align 1, !tbaa !2448
  %2435 = lshr i32 %2420, 31
  %2436 = trunc i32 %2435 to i8
  store i8 %2436, i8* %35, align 1, !tbaa !2449
  %2437 = lshr i32 %2419, 31
  %2438 = xor i32 %2435, %2437
  %2439 = add nuw nsw i32 %2438, %2435
  %2440 = icmp eq i32 %2439, 2
  %2441 = zext i1 %2440 to i8
  store i8 %2441, i8* %41, align 1, !tbaa !2450
  %2442 = sext i32 %2420 to i64
  store i64 %2442, i64* %RSI, align 8, !tbaa !2428
  %2443 = shl nsw i64 %2442, 3
  %2444 = add i64 %2443, %2415
  %2445 = add i64 %2412, 18
  store i64 %2445, i64* %PC, align 8
  %2446 = inttoptr i64 %2444 to double*
  %2447 = load double, double* %2446, align 8
  store double %2447, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %2448 = add i64 %2412, 22
  store i64 %2448, i64* %PC, align 8
  %2449 = load i64, i64* %2414, align 8
  store i64 %2449, i64* %RDX, align 8, !tbaa !2428
  %2450 = add i64 %2412, 25
  store i64 %2450, i64* %PC, align 8
  %2451 = load i32, i32* %2418, align 4
  %2452 = add i32 %2451, 11
  %2453 = zext i32 %2452 to i64
  store i64 %2453, i64* %RCX, align 8, !tbaa !2428
  %2454 = icmp ugt i32 %2451, -12
  %2455 = zext i1 %2454 to i8
  store i8 %2455, i8* %16, align 1, !tbaa !2433
  %2456 = and i32 %2452, 255
  %2457 = tail call i32 @llvm.ctpop.i32(i32 %2456) #11
  %2458 = trunc i32 %2457 to i8
  %2459 = and i8 %2458, 1
  %2460 = xor i8 %2459, 1
  store i8 %2460, i8* %23, align 1, !tbaa !2447
  %2461 = xor i32 %2451, %2452
  %2462 = lshr i32 %2461, 4
  %2463 = trunc i32 %2462 to i8
  %2464 = and i8 %2463, 1
  store i8 %2464, i8* %29, align 1, !tbaa !2451
  %2465 = icmp eq i32 %2452, 0
  %2466 = zext i1 %2465 to i8
  store i8 %2466, i8* %32, align 1, !tbaa !2448
  %2467 = lshr i32 %2452, 31
  %2468 = trunc i32 %2467 to i8
  store i8 %2468, i8* %35, align 1, !tbaa !2449
  %2469 = lshr i32 %2451, 31
  %2470 = xor i32 %2467, %2469
  %2471 = add nuw nsw i32 %2470, %2467
  %2472 = icmp eq i32 %2471, 2
  %2473 = zext i1 %2472 to i8
  store i8 %2473, i8* %41, align 1, !tbaa !2450
  %2474 = sext i32 %2452 to i64
  store i64 %2474, i64* %RSI, align 8, !tbaa !2428
  %2475 = shl nsw i64 %2474, 3
  %2476 = add i64 %2475, %2449
  %2477 = add i64 %2412, 36
  store i64 %2477, i64* %PC, align 8
  %2478 = inttoptr i64 %2476 to double*
  %2479 = load double, double* %2478, align 8
  %2480 = fsub double %2447, %2479
  store double %2480, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %2481 = add i64 %2410, -120
  %2482 = add i64 %2412, 41
  store i64 %2482, i64* %PC, align 8
  %2483 = inttoptr i64 %2481 to double*
  store double %2480, double* %2483, align 8
  %2484 = load i64, i64* %RBP, align 8
  %2485 = add i64 %2484, -16
  %2486 = load i64, i64* %PC, align 8
  %2487 = add i64 %2486, 4
  store i64 %2487, i64* %PC, align 8
  %2488 = inttoptr i64 %2485 to i64*
  %2489 = load i64, i64* %2488, align 8
  store i64 %2489, i64* %RDX, align 8, !tbaa !2428
  %2490 = add i64 %2484, -28
  %2491 = add i64 %2486, 7
  store i64 %2491, i64* %PC, align 8
  %2492 = inttoptr i64 %2490 to i32*
  %2493 = load i32, i32* %2492, align 4
  %2494 = add i32 %2493, 12
  %2495 = zext i32 %2494 to i64
  store i64 %2495, i64* %RCX, align 8, !tbaa !2428
  %2496 = icmp ugt i32 %2493, -13
  %2497 = zext i1 %2496 to i8
  store i8 %2497, i8* %16, align 1, !tbaa !2433
  %2498 = and i32 %2494, 255
  %2499 = tail call i32 @llvm.ctpop.i32(i32 %2498) #11
  %2500 = trunc i32 %2499 to i8
  %2501 = and i8 %2500, 1
  %2502 = xor i8 %2501, 1
  store i8 %2502, i8* %23, align 1, !tbaa !2447
  %2503 = xor i32 %2493, %2494
  %2504 = lshr i32 %2503, 4
  %2505 = trunc i32 %2504 to i8
  %2506 = and i8 %2505, 1
  store i8 %2506, i8* %29, align 1, !tbaa !2451
  %2507 = icmp eq i32 %2494, 0
  %2508 = zext i1 %2507 to i8
  store i8 %2508, i8* %32, align 1, !tbaa !2448
  %2509 = lshr i32 %2494, 31
  %2510 = trunc i32 %2509 to i8
  store i8 %2510, i8* %35, align 1, !tbaa !2449
  %2511 = lshr i32 %2493, 31
  %2512 = xor i32 %2509, %2511
  %2513 = add nuw nsw i32 %2512, %2509
  %2514 = icmp eq i32 %2513, 2
  %2515 = zext i1 %2514 to i8
  store i8 %2515, i8* %41, align 1, !tbaa !2450
  %2516 = sext i32 %2494 to i64
  store i64 %2516, i64* %RSI, align 8, !tbaa !2428
  %2517 = shl nsw i64 %2516, 3
  %2518 = add i64 %2517, %2489
  %2519 = add i64 %2486, 18
  store i64 %2519, i64* %PC, align 8
  %2520 = inttoptr i64 %2518 to double*
  %2521 = load double, double* %2520, align 8
  store double %2521, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %2522 = add i64 %2486, 22
  store i64 %2522, i64* %PC, align 8
  %2523 = load i64, i64* %2488, align 8
  store i64 %2523, i64* %RDX, align 8, !tbaa !2428
  %2524 = add i64 %2486, 25
  store i64 %2524, i64* %PC, align 8
  %2525 = load i32, i32* %2492, align 4
  %2526 = add i32 %2525, 14
  %2527 = zext i32 %2526 to i64
  store i64 %2527, i64* %RCX, align 8, !tbaa !2428
  %2528 = icmp ugt i32 %2525, -15
  %2529 = zext i1 %2528 to i8
  store i8 %2529, i8* %16, align 1, !tbaa !2433
  %2530 = and i32 %2526, 255
  %2531 = tail call i32 @llvm.ctpop.i32(i32 %2530) #11
  %2532 = trunc i32 %2531 to i8
  %2533 = and i8 %2532, 1
  %2534 = xor i8 %2533, 1
  store i8 %2534, i8* %23, align 1, !tbaa !2447
  %2535 = xor i32 %2525, %2526
  %2536 = lshr i32 %2535, 4
  %2537 = trunc i32 %2536 to i8
  %2538 = and i8 %2537, 1
  store i8 %2538, i8* %29, align 1, !tbaa !2451
  %2539 = icmp eq i32 %2526, 0
  %2540 = zext i1 %2539 to i8
  store i8 %2540, i8* %32, align 1, !tbaa !2448
  %2541 = lshr i32 %2526, 31
  %2542 = trunc i32 %2541 to i8
  store i8 %2542, i8* %35, align 1, !tbaa !2449
  %2543 = lshr i32 %2525, 31
  %2544 = xor i32 %2541, %2543
  %2545 = add nuw nsw i32 %2544, %2541
  %2546 = icmp eq i32 %2545, 2
  %2547 = zext i1 %2546 to i8
  store i8 %2547, i8* %41, align 1, !tbaa !2450
  %2548 = sext i32 %2526 to i64
  store i64 %2548, i64* %RSI, align 8, !tbaa !2428
  %2549 = shl nsw i64 %2548, 3
  %2550 = add i64 %2549, %2523
  %2551 = add i64 %2486, 36
  store i64 %2551, i64* %PC, align 8
  %2552 = inttoptr i64 %2550 to double*
  %2553 = load double, double* %2552, align 8
  %2554 = fadd double %2521, %2553
  store double %2554, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %2555 = add i64 %2484, -128
  %2556 = add i64 %2486, 41
  store i64 %2556, i64* %PC, align 8
  %2557 = inttoptr i64 %2555 to double*
  store double %2554, double* %2557, align 8
  %2558 = load i64, i64* %RBP, align 8
  %2559 = add i64 %2558, -16
  %2560 = load i64, i64* %PC, align 8
  %2561 = add i64 %2560, 4
  store i64 %2561, i64* %PC, align 8
  %2562 = inttoptr i64 %2559 to i64*
  %2563 = load i64, i64* %2562, align 8
  store i64 %2563, i64* %RDX, align 8, !tbaa !2428
  %2564 = add i64 %2558, -28
  %2565 = add i64 %2560, 7
  store i64 %2565, i64* %PC, align 8
  %2566 = inttoptr i64 %2564 to i32*
  %2567 = load i32, i32* %2566, align 4
  %2568 = add i32 %2567, 13
  %2569 = zext i32 %2568 to i64
  store i64 %2569, i64* %RCX, align 8, !tbaa !2428
  %2570 = icmp ugt i32 %2567, -14
  %2571 = zext i1 %2570 to i8
  store i8 %2571, i8* %16, align 1, !tbaa !2433
  %2572 = and i32 %2568, 255
  %2573 = tail call i32 @llvm.ctpop.i32(i32 %2572) #11
  %2574 = trunc i32 %2573 to i8
  %2575 = and i8 %2574, 1
  %2576 = xor i8 %2575, 1
  store i8 %2576, i8* %23, align 1, !tbaa !2447
  %2577 = xor i32 %2567, %2568
  %2578 = lshr i32 %2577, 4
  %2579 = trunc i32 %2578 to i8
  %2580 = and i8 %2579, 1
  store i8 %2580, i8* %29, align 1, !tbaa !2451
  %2581 = icmp eq i32 %2568, 0
  %2582 = zext i1 %2581 to i8
  store i8 %2582, i8* %32, align 1, !tbaa !2448
  %2583 = lshr i32 %2568, 31
  %2584 = trunc i32 %2583 to i8
  store i8 %2584, i8* %35, align 1, !tbaa !2449
  %2585 = lshr i32 %2567, 31
  %2586 = xor i32 %2583, %2585
  %2587 = add nuw nsw i32 %2586, %2583
  %2588 = icmp eq i32 %2587, 2
  %2589 = zext i1 %2588 to i8
  store i8 %2589, i8* %41, align 1, !tbaa !2450
  %2590 = sext i32 %2568 to i64
  store i64 %2590, i64* %RSI, align 8, !tbaa !2428
  %2591 = shl nsw i64 %2590, 3
  %2592 = add i64 %2591, %2563
  %2593 = add i64 %2560, 18
  store i64 %2593, i64* %PC, align 8
  %2594 = inttoptr i64 %2592 to double*
  %2595 = load double, double* %2594, align 8
  store double %2595, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %2596 = add i64 %2560, 22
  store i64 %2596, i64* %PC, align 8
  %2597 = load i64, i64* %2562, align 8
  store i64 %2597, i64* %RDX, align 8, !tbaa !2428
  %2598 = add i64 %2560, 25
  store i64 %2598, i64* %PC, align 8
  %2599 = load i32, i32* %2566, align 4
  %2600 = add i32 %2599, 15
  %2601 = zext i32 %2600 to i64
  store i64 %2601, i64* %RCX, align 8, !tbaa !2428
  %2602 = icmp ugt i32 %2599, -16
  %2603 = zext i1 %2602 to i8
  store i8 %2603, i8* %16, align 1, !tbaa !2433
  %2604 = and i32 %2600, 255
  %2605 = tail call i32 @llvm.ctpop.i32(i32 %2604) #11
  %2606 = trunc i32 %2605 to i8
  %2607 = and i8 %2606, 1
  %2608 = xor i8 %2607, 1
  store i8 %2608, i8* %23, align 1, !tbaa !2447
  %2609 = xor i32 %2599, %2600
  %2610 = lshr i32 %2609, 4
  %2611 = trunc i32 %2610 to i8
  %2612 = and i8 %2611, 1
  store i8 %2612, i8* %29, align 1, !tbaa !2451
  %2613 = icmp eq i32 %2600, 0
  %2614 = zext i1 %2613 to i8
  store i8 %2614, i8* %32, align 1, !tbaa !2448
  %2615 = lshr i32 %2600, 31
  %2616 = trunc i32 %2615 to i8
  store i8 %2616, i8* %35, align 1, !tbaa !2449
  %2617 = lshr i32 %2599, 31
  %2618 = xor i32 %2615, %2617
  %2619 = add nuw nsw i32 %2618, %2615
  %2620 = icmp eq i32 %2619, 2
  %2621 = zext i1 %2620 to i8
  store i8 %2621, i8* %41, align 1, !tbaa !2450
  %2622 = sext i32 %2600 to i64
  store i64 %2622, i64* %RSI, align 8, !tbaa !2428
  %2623 = shl nsw i64 %2622, 3
  %2624 = add i64 %2623, %2597
  %2625 = add i64 %2560, 36
  store i64 %2625, i64* %PC, align 8
  %2626 = inttoptr i64 %2624 to double*
  %2627 = load double, double* %2626, align 8
  %2628 = fadd double %2595, %2627
  store double %2628, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %2629 = add i64 %2558, -136
  %2630 = add i64 %2560, 44
  store i64 %2630, i64* %PC, align 8
  %2631 = inttoptr i64 %2629 to double*
  store double %2628, double* %2631, align 8
  %2632 = load i64, i64* %RBP, align 8
  %2633 = add i64 %2632, -16
  %2634 = load i64, i64* %PC, align 8
  %2635 = add i64 %2634, 4
  store i64 %2635, i64* %PC, align 8
  %2636 = inttoptr i64 %2633 to i64*
  %2637 = load i64, i64* %2636, align 8
  store i64 %2637, i64* %RDX, align 8, !tbaa !2428
  %2638 = add i64 %2632, -28
  %2639 = add i64 %2634, 7
  store i64 %2639, i64* %PC, align 8
  %2640 = inttoptr i64 %2638 to i32*
  %2641 = load i32, i32* %2640, align 4
  %2642 = add i32 %2641, 12
  %2643 = zext i32 %2642 to i64
  store i64 %2643, i64* %RCX, align 8, !tbaa !2428
  %2644 = icmp ugt i32 %2641, -13
  %2645 = zext i1 %2644 to i8
  store i8 %2645, i8* %16, align 1, !tbaa !2433
  %2646 = and i32 %2642, 255
  %2647 = tail call i32 @llvm.ctpop.i32(i32 %2646) #11
  %2648 = trunc i32 %2647 to i8
  %2649 = and i8 %2648, 1
  %2650 = xor i8 %2649, 1
  store i8 %2650, i8* %23, align 1, !tbaa !2447
  %2651 = xor i32 %2641, %2642
  %2652 = lshr i32 %2651, 4
  %2653 = trunc i32 %2652 to i8
  %2654 = and i8 %2653, 1
  store i8 %2654, i8* %29, align 1, !tbaa !2451
  %2655 = icmp eq i32 %2642, 0
  %2656 = zext i1 %2655 to i8
  store i8 %2656, i8* %32, align 1, !tbaa !2448
  %2657 = lshr i32 %2642, 31
  %2658 = trunc i32 %2657 to i8
  store i8 %2658, i8* %35, align 1, !tbaa !2449
  %2659 = lshr i32 %2641, 31
  %2660 = xor i32 %2657, %2659
  %2661 = add nuw nsw i32 %2660, %2657
  %2662 = icmp eq i32 %2661, 2
  %2663 = zext i1 %2662 to i8
  store i8 %2663, i8* %41, align 1, !tbaa !2450
  %2664 = sext i32 %2642 to i64
  store i64 %2664, i64* %RSI, align 8, !tbaa !2428
  %2665 = shl nsw i64 %2664, 3
  %2666 = add i64 %2665, %2637
  %2667 = add i64 %2634, 18
  store i64 %2667, i64* %PC, align 8
  %2668 = inttoptr i64 %2666 to double*
  %2669 = load double, double* %2668, align 8
  store double %2669, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %2670 = add i64 %2634, 22
  store i64 %2670, i64* %PC, align 8
  %2671 = load i64, i64* %2636, align 8
  store i64 %2671, i64* %RDX, align 8, !tbaa !2428
  %2672 = add i64 %2634, 25
  store i64 %2672, i64* %PC, align 8
  %2673 = load i32, i32* %2640, align 4
  %2674 = add i32 %2673, 14
  %2675 = zext i32 %2674 to i64
  store i64 %2675, i64* %RCX, align 8, !tbaa !2428
  %2676 = icmp ugt i32 %2673, -15
  %2677 = zext i1 %2676 to i8
  store i8 %2677, i8* %16, align 1, !tbaa !2433
  %2678 = and i32 %2674, 255
  %2679 = tail call i32 @llvm.ctpop.i32(i32 %2678) #11
  %2680 = trunc i32 %2679 to i8
  %2681 = and i8 %2680, 1
  %2682 = xor i8 %2681, 1
  store i8 %2682, i8* %23, align 1, !tbaa !2447
  %2683 = xor i32 %2673, %2674
  %2684 = lshr i32 %2683, 4
  %2685 = trunc i32 %2684 to i8
  %2686 = and i8 %2685, 1
  store i8 %2686, i8* %29, align 1, !tbaa !2451
  %2687 = icmp eq i32 %2674, 0
  %2688 = zext i1 %2687 to i8
  store i8 %2688, i8* %32, align 1, !tbaa !2448
  %2689 = lshr i32 %2674, 31
  %2690 = trunc i32 %2689 to i8
  store i8 %2690, i8* %35, align 1, !tbaa !2449
  %2691 = lshr i32 %2673, 31
  %2692 = xor i32 %2689, %2691
  %2693 = add nuw nsw i32 %2692, %2689
  %2694 = icmp eq i32 %2693, 2
  %2695 = zext i1 %2694 to i8
  store i8 %2695, i8* %41, align 1, !tbaa !2450
  %2696 = sext i32 %2674 to i64
  store i64 %2696, i64* %RSI, align 8, !tbaa !2428
  %2697 = shl nsw i64 %2696, 3
  %2698 = add i64 %2697, %2671
  %2699 = add i64 %2634, 36
  store i64 %2699, i64* %PC, align 8
  %2700 = inttoptr i64 %2698 to double*
  %2701 = load double, double* %2700, align 8
  %2702 = fsub double %2669, %2701
  store double %2702, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %2703 = add i64 %2632, -144
  %2704 = add i64 %2634, 44
  store i64 %2704, i64* %PC, align 8
  %2705 = inttoptr i64 %2703 to double*
  store double %2702, double* %2705, align 8
  %2706 = load i64, i64* %RBP, align 8
  %2707 = add i64 %2706, -16
  %2708 = load i64, i64* %PC, align 8
  %2709 = add i64 %2708, 4
  store i64 %2709, i64* %PC, align 8
  %2710 = inttoptr i64 %2707 to i64*
  %2711 = load i64, i64* %2710, align 8
  store i64 %2711, i64* %RDX, align 8, !tbaa !2428
  %2712 = add i64 %2706, -28
  %2713 = add i64 %2708, 7
  store i64 %2713, i64* %PC, align 8
  %2714 = inttoptr i64 %2712 to i32*
  %2715 = load i32, i32* %2714, align 4
  %2716 = add i32 %2715, 13
  %2717 = zext i32 %2716 to i64
  store i64 %2717, i64* %RCX, align 8, !tbaa !2428
  %2718 = icmp ugt i32 %2715, -14
  %2719 = zext i1 %2718 to i8
  store i8 %2719, i8* %16, align 1, !tbaa !2433
  %2720 = and i32 %2716, 255
  %2721 = tail call i32 @llvm.ctpop.i32(i32 %2720) #11
  %2722 = trunc i32 %2721 to i8
  %2723 = and i8 %2722, 1
  %2724 = xor i8 %2723, 1
  store i8 %2724, i8* %23, align 1, !tbaa !2447
  %2725 = xor i32 %2715, %2716
  %2726 = lshr i32 %2725, 4
  %2727 = trunc i32 %2726 to i8
  %2728 = and i8 %2727, 1
  store i8 %2728, i8* %29, align 1, !tbaa !2451
  %2729 = icmp eq i32 %2716, 0
  %2730 = zext i1 %2729 to i8
  store i8 %2730, i8* %32, align 1, !tbaa !2448
  %2731 = lshr i32 %2716, 31
  %2732 = trunc i32 %2731 to i8
  store i8 %2732, i8* %35, align 1, !tbaa !2449
  %2733 = lshr i32 %2715, 31
  %2734 = xor i32 %2731, %2733
  %2735 = add nuw nsw i32 %2734, %2731
  %2736 = icmp eq i32 %2735, 2
  %2737 = zext i1 %2736 to i8
  store i8 %2737, i8* %41, align 1, !tbaa !2450
  %2738 = sext i32 %2716 to i64
  store i64 %2738, i64* %RSI, align 8, !tbaa !2428
  %2739 = shl nsw i64 %2738, 3
  %2740 = add i64 %2739, %2711
  %2741 = add i64 %2708, 18
  store i64 %2741, i64* %PC, align 8
  %2742 = inttoptr i64 %2740 to double*
  %2743 = load double, double* %2742, align 8
  store double %2743, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %2744 = add i64 %2708, 22
  store i64 %2744, i64* %PC, align 8
  %2745 = load i64, i64* %2710, align 8
  store i64 %2745, i64* %RDX, align 8, !tbaa !2428
  %2746 = add i64 %2708, 25
  store i64 %2746, i64* %PC, align 8
  %2747 = load i32, i32* %2714, align 4
  %2748 = add i32 %2747, 15
  %2749 = zext i32 %2748 to i64
  store i64 %2749, i64* %RCX, align 8, !tbaa !2428
  %2750 = icmp ugt i32 %2747, -16
  %2751 = zext i1 %2750 to i8
  store i8 %2751, i8* %16, align 1, !tbaa !2433
  %2752 = and i32 %2748, 255
  %2753 = tail call i32 @llvm.ctpop.i32(i32 %2752) #11
  %2754 = trunc i32 %2753 to i8
  %2755 = and i8 %2754, 1
  %2756 = xor i8 %2755, 1
  store i8 %2756, i8* %23, align 1, !tbaa !2447
  %2757 = xor i32 %2747, %2748
  %2758 = lshr i32 %2757, 4
  %2759 = trunc i32 %2758 to i8
  %2760 = and i8 %2759, 1
  store i8 %2760, i8* %29, align 1, !tbaa !2451
  %2761 = icmp eq i32 %2748, 0
  %2762 = zext i1 %2761 to i8
  store i8 %2762, i8* %32, align 1, !tbaa !2448
  %2763 = lshr i32 %2748, 31
  %2764 = trunc i32 %2763 to i8
  store i8 %2764, i8* %35, align 1, !tbaa !2449
  %2765 = lshr i32 %2747, 31
  %2766 = xor i32 %2763, %2765
  %2767 = add nuw nsw i32 %2766, %2763
  %2768 = icmp eq i32 %2767, 2
  %2769 = zext i1 %2768 to i8
  store i8 %2769, i8* %41, align 1, !tbaa !2450
  %2770 = sext i32 %2748 to i64
  store i64 %2770, i64* %RSI, align 8, !tbaa !2428
  %2771 = shl nsw i64 %2770, 3
  %2772 = add i64 %2771, %2745
  %2773 = add i64 %2708, 36
  store i64 %2773, i64* %PC, align 8
  %2774 = inttoptr i64 %2772 to double*
  %2775 = load double, double* %2774, align 8
  %2776 = fsub double %2743, %2775
  store double %2776, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %2777 = add i64 %2706, -152
  %2778 = add i64 %2708, 44
  store i64 %2778, i64* %PC, align 8
  %2779 = inttoptr i64 %2777 to double*
  store double %2776, double* %2779, align 8
  %2780 = load i64, i64* %RBP, align 8
  %2781 = add i64 %2780, -96
  %2782 = load i64, i64* %PC, align 8
  %2783 = add i64 %2782, 5
  store i64 %2783, i64* %PC, align 8
  %2784 = inttoptr i64 %2781 to double*
  %2785 = load double, double* %2784, align 8
  store double %2785, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %2786 = add i64 %2780, -128
  %2787 = add i64 %2782, 10
  store i64 %2787, i64* %PC, align 8
  %2788 = inttoptr i64 %2786 to double*
  %2789 = load double, double* %2788, align 8
  %2790 = fadd double %2785, %2789
  store double %2790, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %2791 = add i64 %2780, -16
  %2792 = add i64 %2782, 14
  store i64 %2792, i64* %PC, align 8
  %2793 = inttoptr i64 %2791 to i64*
  %2794 = load i64, i64* %2793, align 8
  store i64 %2794, i64* %RDX, align 8, !tbaa !2428
  %2795 = add i64 %2780, -28
  %2796 = add i64 %2782, 17
  store i64 %2796, i64* %PC, align 8
  %2797 = inttoptr i64 %2795 to i32*
  %2798 = load i32, i32* %2797, align 4
  %2799 = add i32 %2798, 8
  %2800 = zext i32 %2799 to i64
  store i64 %2800, i64* %RCX, align 8, !tbaa !2428
  %2801 = icmp ugt i32 %2798, -9
  %2802 = zext i1 %2801 to i8
  store i8 %2802, i8* %16, align 1, !tbaa !2433
  %2803 = and i32 %2799, 255
  %2804 = tail call i32 @llvm.ctpop.i32(i32 %2803) #11
  %2805 = trunc i32 %2804 to i8
  %2806 = and i8 %2805, 1
  %2807 = xor i8 %2806, 1
  store i8 %2807, i8* %23, align 1, !tbaa !2447
  %2808 = xor i32 %2798, %2799
  %2809 = lshr i32 %2808, 4
  %2810 = trunc i32 %2809 to i8
  %2811 = and i8 %2810, 1
  store i8 %2811, i8* %29, align 1, !tbaa !2451
  %2812 = icmp eq i32 %2799, 0
  %2813 = zext i1 %2812 to i8
  store i8 %2813, i8* %32, align 1, !tbaa !2448
  %2814 = lshr i32 %2799, 31
  %2815 = trunc i32 %2814 to i8
  store i8 %2815, i8* %35, align 1, !tbaa !2449
  %2816 = lshr i32 %2798, 31
  %2817 = xor i32 %2814, %2816
  %2818 = add nuw nsw i32 %2817, %2814
  %2819 = icmp eq i32 %2818, 2
  %2820 = zext i1 %2819 to i8
  store i8 %2820, i8* %41, align 1, !tbaa !2450
  %2821 = sext i32 %2799 to i64
  store i64 %2821, i64* %RSI, align 8, !tbaa !2428
  %2822 = shl nsw i64 %2821, 3
  %2823 = add i64 %2822, %2794
  %2824 = add i64 %2782, 28
  store i64 %2824, i64* %PC, align 8
  %2825 = inttoptr i64 %2823 to double*
  store double %2790, double* %2825, align 8
  %2826 = load i64, i64* %RBP, align 8
  %2827 = add i64 %2826, -104
  %2828 = load i64, i64* %PC, align 8
  %2829 = add i64 %2828, 5
  store i64 %2829, i64* %PC, align 8
  %2830 = inttoptr i64 %2827 to double*
  %2831 = load double, double* %2830, align 8
  store double %2831, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %2832 = add i64 %2826, -136
  %2833 = add i64 %2828, 13
  store i64 %2833, i64* %PC, align 8
  %2834 = inttoptr i64 %2832 to double*
  %2835 = load double, double* %2834, align 8
  %2836 = fadd double %2831, %2835
  store double %2836, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %2837 = add i64 %2826, -16
  %2838 = add i64 %2828, 17
  store i64 %2838, i64* %PC, align 8
  %2839 = inttoptr i64 %2837 to i64*
  %2840 = load i64, i64* %2839, align 8
  store i64 %2840, i64* %RDX, align 8, !tbaa !2428
  %2841 = add i64 %2826, -28
  %2842 = add i64 %2828, 20
  store i64 %2842, i64* %PC, align 8
  %2843 = inttoptr i64 %2841 to i32*
  %2844 = load i32, i32* %2843, align 4
  %2845 = add i32 %2844, 9
  %2846 = zext i32 %2845 to i64
  store i64 %2846, i64* %RCX, align 8, !tbaa !2428
  %2847 = icmp ugt i32 %2844, -10
  %2848 = zext i1 %2847 to i8
  store i8 %2848, i8* %16, align 1, !tbaa !2433
  %2849 = and i32 %2845, 255
  %2850 = tail call i32 @llvm.ctpop.i32(i32 %2849) #11
  %2851 = trunc i32 %2850 to i8
  %2852 = and i8 %2851, 1
  %2853 = xor i8 %2852, 1
  store i8 %2853, i8* %23, align 1, !tbaa !2447
  %2854 = xor i32 %2844, %2845
  %2855 = lshr i32 %2854, 4
  %2856 = trunc i32 %2855 to i8
  %2857 = and i8 %2856, 1
  store i8 %2857, i8* %29, align 1, !tbaa !2451
  %2858 = icmp eq i32 %2845, 0
  %2859 = zext i1 %2858 to i8
  store i8 %2859, i8* %32, align 1, !tbaa !2448
  %2860 = lshr i32 %2845, 31
  %2861 = trunc i32 %2860 to i8
  store i8 %2861, i8* %35, align 1, !tbaa !2449
  %2862 = lshr i32 %2844, 31
  %2863 = xor i32 %2860, %2862
  %2864 = add nuw nsw i32 %2863, %2860
  %2865 = icmp eq i32 %2864, 2
  %2866 = zext i1 %2865 to i8
  store i8 %2866, i8* %41, align 1, !tbaa !2450
  %2867 = sext i32 %2845 to i64
  store i64 %2867, i64* %RSI, align 8, !tbaa !2428
  %2868 = shl nsw i64 %2867, 3
  %2869 = add i64 %2868, %2840
  %2870 = add i64 %2828, 31
  store i64 %2870, i64* %PC, align 8
  %2871 = inttoptr i64 %2869 to double*
  store double %2836, double* %2871, align 8
  %2872 = load i64, i64* %RBP, align 8
  %2873 = add i64 %2872, -128
  %2874 = load i64, i64* %PC, align 8
  %2875 = add i64 %2874, 5
  store i64 %2875, i64* %PC, align 8
  %2876 = inttoptr i64 %2873 to double*
  %2877 = load double, double* %2876, align 8
  store double %2877, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %2878 = add i64 %2872, -96
  %2879 = add i64 %2874, 10
  store i64 %2879, i64* %PC, align 8
  %2880 = inttoptr i64 %2878 to double*
  %2881 = load double, double* %2880, align 8
  %2882 = fsub double %2881, %2877
  store double %2882, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %2883 = add i64 %2874, 19
  store i64 %2883, i64* %PC, align 8
  store double %2882, double* %2880, align 8
  %2884 = load i64, i64* %RBP, align 8
  %2885 = add i64 %2884, -136
  %2886 = load i64, i64* %PC, align 8
  %2887 = add i64 %2886, 8
  store i64 %2887, i64* %PC, align 8
  %2888 = inttoptr i64 %2885 to double*
  %2889 = load double, double* %2888, align 8
  store double %2889, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %2890 = add i64 %2884, -104
  %2891 = add i64 %2886, 13
  store i64 %2891, i64* %PC, align 8
  %2892 = inttoptr i64 %2890 to double*
  %2893 = load double, double* %2892, align 8
  %2894 = fsub double %2893, %2889
  store double %2894, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %2895 = add i64 %2886, 22
  store i64 %2895, i64* %PC, align 8
  store double %2894, double* %2892, align 8
  %2896 = load i64, i64* %RBP, align 8
  %2897 = add i64 %2896, -72
  %2898 = load i64, i64* %PC, align 8
  %2899 = add i64 %2898, 5
  store i64 %2899, i64* %PC, align 8
  %2900 = inttoptr i64 %2897 to i64*
  %2901 = load i64, i64* %2900, align 8
  %2902 = load i64, i64* %RAX, align 8
  %2903 = xor i64 %2902, %2901
  store i64 %2903, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %16, align 1, !tbaa !2433
  %2904 = trunc i64 %2903 to i32
  %2905 = and i32 %2904, 255
  %2906 = tail call i32 @llvm.ctpop.i32(i32 %2905) #11
  %2907 = trunc i32 %2906 to i8
  %2908 = and i8 %2907, 1
  %2909 = xor i8 %2908, 1
  store i8 %2909, i8* %23, align 1, !tbaa !2447
  %2910 = icmp eq i64 %2903, 0
  %2911 = zext i1 %2910 to i8
  store i8 %2911, i8* %32, align 1, !tbaa !2448
  %2912 = lshr i64 %2903, 63
  %2913 = trunc i64 %2912 to i8
  store i8 %2913, i8* %35, align 1, !tbaa !2449
  store i8 0, i8* %41, align 1, !tbaa !2450
  store i8 0, i8* %29, align 1, !tbaa !2451
  store i64 %2903, i64* %372, align 1, !tbaa !2428
  store i64 0, i64* %68, align 1, !tbaa !2428
  %2914 = add i64 %2896, -96
  %2915 = add i64 %2898, 23
  store i64 %2915, i64* %PC, align 8
  %2916 = bitcast i64 %2903 to double
  %2917 = inttoptr i64 %2914 to double*
  %2918 = load double, double* %2917, align 8
  %2919 = fmul double %2916, %2918
  store double %2919, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %2920 = add i64 %2896, -64
  %2921 = add i64 %2898, 28
  store i64 %2921, i64* %PC, align 8
  %2922 = inttoptr i64 %2920 to double*
  %2923 = load double, double* %2922, align 8
  store double %2923, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %2924 = add i64 %2896, -104
  %2925 = add i64 %2898, 33
  store i64 %2925, i64* %PC, align 8
  %2926 = inttoptr i64 %2924 to double*
  %2927 = load double, double* %2926, align 8
  %2928 = fmul double %2923, %2927
  store double %2928, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %2929 = fsub double %2919, %2928
  store double %2929, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %2930 = add i64 %2896, -16
  %2931 = add i64 %2898, 41
  store i64 %2931, i64* %PC, align 8
  %2932 = inttoptr i64 %2930 to i64*
  %2933 = load i64, i64* %2932, align 8
  store i64 %2933, i64* %RDX, align 8, !tbaa !2428
  %2934 = add i64 %2896, -28
  %2935 = add i64 %2898, 44
  store i64 %2935, i64* %PC, align 8
  %2936 = inttoptr i64 %2934 to i32*
  %2937 = load i32, i32* %2936, align 4
  %2938 = add i32 %2937, 12
  %2939 = zext i32 %2938 to i64
  store i64 %2939, i64* %RCX, align 8, !tbaa !2428
  %2940 = icmp ugt i32 %2937, -13
  %2941 = zext i1 %2940 to i8
  store i8 %2941, i8* %16, align 1, !tbaa !2433
  %2942 = and i32 %2938, 255
  %2943 = tail call i32 @llvm.ctpop.i32(i32 %2942) #11
  %2944 = trunc i32 %2943 to i8
  %2945 = and i8 %2944, 1
  %2946 = xor i8 %2945, 1
  store i8 %2946, i8* %23, align 1, !tbaa !2447
  %2947 = xor i32 %2937, %2938
  %2948 = lshr i32 %2947, 4
  %2949 = trunc i32 %2948 to i8
  %2950 = and i8 %2949, 1
  store i8 %2950, i8* %29, align 1, !tbaa !2451
  %2951 = icmp eq i32 %2938, 0
  %2952 = zext i1 %2951 to i8
  store i8 %2952, i8* %32, align 1, !tbaa !2448
  %2953 = lshr i32 %2938, 31
  %2954 = trunc i32 %2953 to i8
  store i8 %2954, i8* %35, align 1, !tbaa !2449
  %2955 = lshr i32 %2937, 31
  %2956 = xor i32 %2953, %2955
  %2957 = add nuw nsw i32 %2956, %2953
  %2958 = icmp eq i32 %2957, 2
  %2959 = zext i1 %2958 to i8
  store i8 %2959, i8* %41, align 1, !tbaa !2450
  %2960 = sext i32 %2938 to i64
  store i64 %2960, i64* %RSI, align 8, !tbaa !2428
  %2961 = shl nsw i64 %2960, 3
  %2962 = add i64 %2961, %2933
  %2963 = add i64 %2898, 55
  store i64 %2963, i64* %PC, align 8
  %2964 = inttoptr i64 %2962 to double*
  store double %2929, double* %2964, align 8
  %2965 = load i64, i64* %RBP, align 8
  %2966 = add i64 %2965, -72
  %2967 = load i64, i64* %PC, align 8
  %2968 = add i64 %2967, 5
  store i64 %2968, i64* %PC, align 8
  %2969 = inttoptr i64 %2966 to i64*
  %2970 = load i64, i64* %2969, align 8
  %2971 = load i64, i64* %RAX, align 8
  %2972 = xor i64 %2971, %2970
  store i64 %2972, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %16, align 1, !tbaa !2433
  %2973 = trunc i64 %2972 to i32
  %2974 = and i32 %2973, 255
  %2975 = tail call i32 @llvm.ctpop.i32(i32 %2974) #11
  %2976 = trunc i32 %2975 to i8
  %2977 = and i8 %2976, 1
  %2978 = xor i8 %2977, 1
  store i8 %2978, i8* %23, align 1, !tbaa !2447
  %2979 = icmp eq i64 %2972, 0
  %2980 = zext i1 %2979 to i8
  store i8 %2980, i8* %32, align 1, !tbaa !2448
  %2981 = lshr i64 %2972, 63
  %2982 = trunc i64 %2981 to i8
  store i8 %2982, i8* %35, align 1, !tbaa !2449
  store i8 0, i8* %41, align 1, !tbaa !2450
  store i8 0, i8* %29, align 1, !tbaa !2451
  store i64 %2972, i64* %372, align 1, !tbaa !2428
  store i64 0, i64* %68, align 1, !tbaa !2428
  %2983 = add i64 %2965, -104
  %2984 = add i64 %2967, 23
  store i64 %2984, i64* %PC, align 8
  %2985 = bitcast i64 %2972 to double
  %2986 = inttoptr i64 %2983 to double*
  %2987 = load double, double* %2986, align 8
  %2988 = fmul double %2985, %2987
  store double %2988, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %2989 = add i64 %2965, -64
  %2990 = add i64 %2967, 28
  store i64 %2990, i64* %PC, align 8
  %2991 = inttoptr i64 %2989 to double*
  %2992 = load double, double* %2991, align 8
  store double %2992, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %2993 = add i64 %2965, -96
  %2994 = add i64 %2967, 33
  store i64 %2994, i64* %PC, align 8
  %2995 = inttoptr i64 %2993 to double*
  %2996 = load double, double* %2995, align 8
  %2997 = fmul double %2992, %2996
  store double %2997, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %2998 = fadd double %2988, %2997
  store double %2998, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %2999 = add i64 %2965, -16
  %3000 = add i64 %2967, 41
  store i64 %3000, i64* %PC, align 8
  %3001 = inttoptr i64 %2999 to i64*
  %3002 = load i64, i64* %3001, align 8
  store i64 %3002, i64* %RAX, align 8, !tbaa !2428
  %3003 = add i64 %2965, -28
  %3004 = add i64 %2967, 44
  store i64 %3004, i64* %PC, align 8
  %3005 = inttoptr i64 %3003 to i32*
  %3006 = load i32, i32* %3005, align 4
  %3007 = add i32 %3006, 13
  %3008 = zext i32 %3007 to i64
  store i64 %3008, i64* %RCX, align 8, !tbaa !2428
  %3009 = icmp ugt i32 %3006, -14
  %3010 = zext i1 %3009 to i8
  store i8 %3010, i8* %16, align 1, !tbaa !2433
  %3011 = and i32 %3007, 255
  %3012 = tail call i32 @llvm.ctpop.i32(i32 %3011) #11
  %3013 = trunc i32 %3012 to i8
  %3014 = and i8 %3013, 1
  %3015 = xor i8 %3014, 1
  store i8 %3015, i8* %23, align 1, !tbaa !2447
  %3016 = xor i32 %3006, %3007
  %3017 = lshr i32 %3016, 4
  %3018 = trunc i32 %3017 to i8
  %3019 = and i8 %3018, 1
  store i8 %3019, i8* %29, align 1, !tbaa !2451
  %3020 = icmp eq i32 %3007, 0
  %3021 = zext i1 %3020 to i8
  store i8 %3021, i8* %32, align 1, !tbaa !2448
  %3022 = lshr i32 %3007, 31
  %3023 = trunc i32 %3022 to i8
  store i8 %3023, i8* %35, align 1, !tbaa !2449
  %3024 = lshr i32 %3006, 31
  %3025 = xor i32 %3022, %3024
  %3026 = add nuw nsw i32 %3025, %3022
  %3027 = icmp eq i32 %3026, 2
  %3028 = zext i1 %3027 to i8
  store i8 %3028, i8* %41, align 1, !tbaa !2450
  %3029 = sext i32 %3007 to i64
  store i64 %3029, i64* %RDX, align 8, !tbaa !2428
  %3030 = shl nsw i64 %3029, 3
  %3031 = add i64 %3030, %3002
  %3032 = add i64 %2967, 55
  store i64 %3032, i64* %PC, align 8
  %3033 = inttoptr i64 %3031 to double*
  store double %2998, double* %3033, align 8
  %3034 = load i64, i64* %RBP, align 8
  %3035 = add i64 %3034, -112
  %3036 = load i64, i64* %PC, align 8
  %3037 = add i64 %3036, 5
  store i64 %3037, i64* %PC, align 8
  %3038 = inttoptr i64 %3035 to double*
  %3039 = load double, double* %3038, align 8
  store double %3039, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %3040 = add i64 %3034, -152
  %3041 = add i64 %3036, 13
  store i64 %3041, i64* %PC, align 8
  %3042 = inttoptr i64 %3040 to double*
  %3043 = load double, double* %3042, align 8
  %3044 = fsub double %3039, %3043
  store double %3044, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %3045 = add i64 %3034, -96
  %3046 = add i64 %3036, 18
  store i64 %3046, i64* %PC, align 8
  %3047 = inttoptr i64 %3045 to double*
  store double %3044, double* %3047, align 8
  %3048 = load i64, i64* %RBP, align 8
  %3049 = add i64 %3048, -120
  %3050 = load i64, i64* %PC, align 8
  %3051 = add i64 %3050, 5
  store i64 %3051, i64* %PC, align 8
  %3052 = inttoptr i64 %3049 to double*
  %3053 = load double, double* %3052, align 8
  store double %3053, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %3054 = add i64 %3048, -144
  %3055 = add i64 %3050, 13
  store i64 %3055, i64* %PC, align 8
  %3056 = inttoptr i64 %3054 to double*
  %3057 = load double, double* %3056, align 8
  %3058 = fadd double %3053, %3057
  store double %3058, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %3059 = add i64 %3048, -104
  %3060 = add i64 %3050, 18
  store i64 %3060, i64* %PC, align 8
  %3061 = inttoptr i64 %3059 to double*
  store double %3058, double* %3061, align 8
  %3062 = load i64, i64* %RBP, align 8
  %3063 = add i64 %3062, -48
  %3064 = load i64, i64* %PC, align 8
  %3065 = add i64 %3064, 5
  store i64 %3065, i64* %PC, align 8
  %3066 = inttoptr i64 %3063 to double*
  %3067 = load double, double* %3066, align 8
  store double %3067, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %3068 = add i64 %3062, -96
  %3069 = add i64 %3064, 10
  store i64 %3069, i64* %PC, align 8
  %3070 = inttoptr i64 %3068 to double*
  %3071 = load double, double* %3070, align 8
  %3072 = fmul double %3067, %3071
  store double %3072, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %3073 = add i64 %3062, -56
  %3074 = add i64 %3064, 15
  store i64 %3074, i64* %PC, align 8
  %3075 = inttoptr i64 %3073 to double*
  %3076 = load double, double* %3075, align 8
  store double %3076, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %3077 = add i64 %3062, -104
  %3078 = add i64 %3064, 20
  store i64 %3078, i64* %PC, align 8
  %3079 = inttoptr i64 %3077 to double*
  %3080 = load double, double* %3079, align 8
  %3081 = fmul double %3076, %3080
  store double %3081, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %3082 = fsub double %3072, %3081
  store double %3082, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %3083 = add i64 %3062, -16
  %3084 = add i64 %3064, 28
  store i64 %3084, i64* %PC, align 8
  %3085 = inttoptr i64 %3083 to i64*
  %3086 = load i64, i64* %3085, align 8
  store i64 %3086, i64* %RAX, align 8, !tbaa !2428
  %3087 = add i64 %3062, -28
  %3088 = add i64 %3064, 31
  store i64 %3088, i64* %PC, align 8
  %3089 = inttoptr i64 %3087 to i32*
  %3090 = load i32, i32* %3089, align 4
  %3091 = add i32 %3090, 10
  %3092 = zext i32 %3091 to i64
  store i64 %3092, i64* %RCX, align 8, !tbaa !2428
  %3093 = icmp ugt i32 %3090, -11
  %3094 = zext i1 %3093 to i8
  store i8 %3094, i8* %16, align 1, !tbaa !2433
  %3095 = and i32 %3091, 255
  %3096 = tail call i32 @llvm.ctpop.i32(i32 %3095) #11
  %3097 = trunc i32 %3096 to i8
  %3098 = and i8 %3097, 1
  %3099 = xor i8 %3098, 1
  store i8 %3099, i8* %23, align 1, !tbaa !2447
  %3100 = xor i32 %3090, %3091
  %3101 = lshr i32 %3100, 4
  %3102 = trunc i32 %3101 to i8
  %3103 = and i8 %3102, 1
  store i8 %3103, i8* %29, align 1, !tbaa !2451
  %3104 = icmp eq i32 %3091, 0
  %3105 = zext i1 %3104 to i8
  store i8 %3105, i8* %32, align 1, !tbaa !2448
  %3106 = lshr i32 %3091, 31
  %3107 = trunc i32 %3106 to i8
  store i8 %3107, i8* %35, align 1, !tbaa !2449
  %3108 = lshr i32 %3090, 31
  %3109 = xor i32 %3106, %3108
  %3110 = add nuw nsw i32 %3109, %3106
  %3111 = icmp eq i32 %3110, 2
  %3112 = zext i1 %3111 to i8
  store i8 %3112, i8* %41, align 1, !tbaa !2450
  %3113 = sext i32 %3091 to i64
  store i64 %3113, i64* %RDX, align 8, !tbaa !2428
  %3114 = shl nsw i64 %3113, 3
  %3115 = add i64 %3114, %3086
  %3116 = add i64 %3064, 42
  store i64 %3116, i64* %PC, align 8
  %3117 = inttoptr i64 %3115 to double*
  store double %3082, double* %3117, align 8
  %3118 = load i64, i64* %RBP, align 8
  %3119 = add i64 %3118, -48
  %3120 = load i64, i64* %PC, align 8
  %3121 = add i64 %3120, 5
  store i64 %3121, i64* %PC, align 8
  %3122 = inttoptr i64 %3119 to double*
  %3123 = load double, double* %3122, align 8
  store double %3123, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %3124 = add i64 %3118, -104
  %3125 = add i64 %3120, 10
  store i64 %3125, i64* %PC, align 8
  %3126 = inttoptr i64 %3124 to double*
  %3127 = load double, double* %3126, align 8
  %3128 = fmul double %3123, %3127
  store double %3128, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %3129 = add i64 %3118, -56
  %3130 = add i64 %3120, 15
  store i64 %3130, i64* %PC, align 8
  %3131 = inttoptr i64 %3129 to double*
  %3132 = load double, double* %3131, align 8
  store double %3132, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %3133 = add i64 %3118, -96
  %3134 = add i64 %3120, 20
  store i64 %3134, i64* %PC, align 8
  %3135 = inttoptr i64 %3133 to double*
  %3136 = load double, double* %3135, align 8
  %3137 = fmul double %3132, %3136
  store double %3137, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %3138 = fadd double %3128, %3137
  store double %3138, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %3139 = add i64 %3118, -16
  %3140 = add i64 %3120, 28
  store i64 %3140, i64* %PC, align 8
  %3141 = inttoptr i64 %3139 to i64*
  %3142 = load i64, i64* %3141, align 8
  store i64 %3142, i64* %RAX, align 8, !tbaa !2428
  %3143 = add i64 %3118, -28
  %3144 = add i64 %3120, 31
  store i64 %3144, i64* %PC, align 8
  %3145 = inttoptr i64 %3143 to i32*
  %3146 = load i32, i32* %3145, align 4
  %3147 = add i32 %3146, 11
  %3148 = zext i32 %3147 to i64
  store i64 %3148, i64* %RCX, align 8, !tbaa !2428
  %3149 = icmp ugt i32 %3146, -12
  %3150 = zext i1 %3149 to i8
  store i8 %3150, i8* %16, align 1, !tbaa !2433
  %3151 = and i32 %3147, 255
  %3152 = tail call i32 @llvm.ctpop.i32(i32 %3151) #11
  %3153 = trunc i32 %3152 to i8
  %3154 = and i8 %3153, 1
  %3155 = xor i8 %3154, 1
  store i8 %3155, i8* %23, align 1, !tbaa !2447
  %3156 = xor i32 %3146, %3147
  %3157 = lshr i32 %3156, 4
  %3158 = trunc i32 %3157 to i8
  %3159 = and i8 %3158, 1
  store i8 %3159, i8* %29, align 1, !tbaa !2451
  %3160 = icmp eq i32 %3147, 0
  %3161 = zext i1 %3160 to i8
  store i8 %3161, i8* %32, align 1, !tbaa !2448
  %3162 = lshr i32 %3147, 31
  %3163 = trunc i32 %3162 to i8
  store i8 %3163, i8* %35, align 1, !tbaa !2449
  %3164 = lshr i32 %3146, 31
  %3165 = xor i32 %3162, %3164
  %3166 = add nuw nsw i32 %3165, %3162
  %3167 = icmp eq i32 %3166, 2
  %3168 = zext i1 %3167 to i8
  store i8 %3168, i8* %41, align 1, !tbaa !2450
  %3169 = sext i32 %3147 to i64
  store i64 %3169, i64* %RDX, align 8, !tbaa !2428
  %3170 = shl nsw i64 %3169, 3
  %3171 = add i64 %3170, %3142
  %3172 = add i64 %3120, 42
  store i64 %3172, i64* %PC, align 8
  %3173 = inttoptr i64 %3171 to double*
  store double %3138, double* %3173, align 8
  %3174 = load i64, i64* %RBP, align 8
  %3175 = add i64 %3174, -112
  %3176 = load i64, i64* %PC, align 8
  %3177 = add i64 %3176, 5
  store i64 %3177, i64* %PC, align 8
  %3178 = inttoptr i64 %3175 to double*
  %3179 = load double, double* %3178, align 8
  store double %3179, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %3180 = add i64 %3174, -152
  %3181 = add i64 %3176, 13
  store i64 %3181, i64* %PC, align 8
  %3182 = inttoptr i64 %3180 to double*
  %3183 = load double, double* %3182, align 8
  %3184 = fadd double %3179, %3183
  store double %3184, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %3185 = add i64 %3174, -96
  %3186 = add i64 %3176, 18
  store i64 %3186, i64* %PC, align 8
  %3187 = inttoptr i64 %3185 to double*
  store double %3184, double* %3187, align 8
  %3188 = load i64, i64* %RBP, align 8
  %3189 = add i64 %3188, -120
  %3190 = load i64, i64* %PC, align 8
  %3191 = add i64 %3190, 5
  store i64 %3191, i64* %PC, align 8
  %3192 = inttoptr i64 %3189 to double*
  %3193 = load double, double* %3192, align 8
  store double %3193, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %3194 = add i64 %3188, -144
  %3195 = add i64 %3190, 13
  store i64 %3195, i64* %PC, align 8
  %3196 = inttoptr i64 %3194 to double*
  %3197 = load double, double* %3196, align 8
  %3198 = fsub double %3193, %3197
  store double %3198, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %3199 = add i64 %3188, -104
  %3200 = add i64 %3190, 18
  store i64 %3200, i64* %PC, align 8
  %3201 = inttoptr i64 %3199 to double*
  store double %3198, double* %3201, align 8
  %3202 = load i64, i64* %RBP, align 8
  %3203 = add i64 %3202, -80
  %3204 = load i64, i64* %PC, align 8
  %3205 = add i64 %3204, 5
  store i64 %3205, i64* %PC, align 8
  %3206 = inttoptr i64 %3203 to double*
  %3207 = load double, double* %3206, align 8
  store double %3207, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %3208 = add i64 %3202, -96
  %3209 = add i64 %3204, 10
  store i64 %3209, i64* %PC, align 8
  %3210 = inttoptr i64 %3208 to double*
  %3211 = load double, double* %3210, align 8
  %3212 = fmul double %3207, %3211
  store double %3212, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %3213 = add i64 %3202, -88
  %3214 = add i64 %3204, 15
  store i64 %3214, i64* %PC, align 8
  %3215 = inttoptr i64 %3213 to double*
  %3216 = load double, double* %3215, align 8
  store double %3216, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %3217 = add i64 %3202, -104
  %3218 = add i64 %3204, 20
  store i64 %3218, i64* %PC, align 8
  %3219 = inttoptr i64 %3217 to double*
  %3220 = load double, double* %3219, align 8
  %3221 = fmul double %3216, %3220
  store double %3221, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %3222 = fsub double %3212, %3221
  store double %3222, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %3223 = add i64 %3202, -16
  %3224 = add i64 %3204, 28
  store i64 %3224, i64* %PC, align 8
  %3225 = inttoptr i64 %3223 to i64*
  %3226 = load i64, i64* %3225, align 8
  store i64 %3226, i64* %RAX, align 8, !tbaa !2428
  %3227 = add i64 %3202, -28
  %3228 = add i64 %3204, 31
  store i64 %3228, i64* %PC, align 8
  %3229 = inttoptr i64 %3227 to i32*
  %3230 = load i32, i32* %3229, align 4
  %3231 = add i32 %3230, 14
  %3232 = zext i32 %3231 to i64
  store i64 %3232, i64* %RCX, align 8, !tbaa !2428
  %3233 = icmp ugt i32 %3230, -15
  %3234 = zext i1 %3233 to i8
  store i8 %3234, i8* %16, align 1, !tbaa !2433
  %3235 = and i32 %3231, 255
  %3236 = tail call i32 @llvm.ctpop.i32(i32 %3235) #11
  %3237 = trunc i32 %3236 to i8
  %3238 = and i8 %3237, 1
  %3239 = xor i8 %3238, 1
  store i8 %3239, i8* %23, align 1, !tbaa !2447
  %3240 = xor i32 %3230, %3231
  %3241 = lshr i32 %3240, 4
  %3242 = trunc i32 %3241 to i8
  %3243 = and i8 %3242, 1
  store i8 %3243, i8* %29, align 1, !tbaa !2451
  %3244 = icmp eq i32 %3231, 0
  %3245 = zext i1 %3244 to i8
  store i8 %3245, i8* %32, align 1, !tbaa !2448
  %3246 = lshr i32 %3231, 31
  %3247 = trunc i32 %3246 to i8
  store i8 %3247, i8* %35, align 1, !tbaa !2449
  %3248 = lshr i32 %3230, 31
  %3249 = xor i32 %3246, %3248
  %3250 = add nuw nsw i32 %3249, %3246
  %3251 = icmp eq i32 %3250, 2
  %3252 = zext i1 %3251 to i8
  store i8 %3252, i8* %41, align 1, !tbaa !2450
  %3253 = sext i32 %3231 to i64
  store i64 %3253, i64* %RDX, align 8, !tbaa !2428
  %3254 = shl nsw i64 %3253, 3
  %3255 = add i64 %3254, %3226
  %3256 = add i64 %3204, 42
  store i64 %3256, i64* %PC, align 8
  %3257 = inttoptr i64 %3255 to double*
  store double %3222, double* %3257, align 8
  %3258 = load i64, i64* %RBP, align 8
  %3259 = add i64 %3258, -80
  %3260 = load i64, i64* %PC, align 8
  %3261 = add i64 %3260, 5
  store i64 %3261, i64* %PC, align 8
  %3262 = inttoptr i64 %3259 to double*
  %3263 = load double, double* %3262, align 8
  store double %3263, double* %67, align 1, !tbaa !2452
  store double 0.000000e+00, double* %69, align 1, !tbaa !2452
  %3264 = add i64 %3258, -104
  %3265 = add i64 %3260, 10
  store i64 %3265, i64* %PC, align 8
  %3266 = inttoptr i64 %3264 to double*
  %3267 = load double, double* %3266, align 8
  %3268 = fmul double %3263, %3267
  store double %3268, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %3269 = add i64 %3258, -88
  %3270 = add i64 %3260, 15
  store i64 %3270, i64* %PC, align 8
  %3271 = inttoptr i64 %3269 to double*
  %3272 = load double, double* %3271, align 8
  store double %3272, double* %647, align 1, !tbaa !2452
  store double 0.000000e+00, double* %649, align 1, !tbaa !2452
  %3273 = add i64 %3258, -96
  %3274 = add i64 %3260, 20
  store i64 %3274, i64* %PC, align 8
  %3275 = inttoptr i64 %3273 to double*
  %3276 = load double, double* %3275, align 8
  %3277 = fmul double %3272, %3276
  store double %3277, double* %647, align 1, !tbaa !2452
  store i64 0, i64* %648, align 1, !tbaa !2452
  %3278 = fadd double %3268, %3277
  store double %3278, double* %67, align 1, !tbaa !2452
  store i64 0, i64* %68, align 1, !tbaa !2452
  %3279 = add i64 %3258, -16
  %3280 = add i64 %3260, 28
  store i64 %3280, i64* %PC, align 8
  %3281 = inttoptr i64 %3279 to i64*
  %3282 = load i64, i64* %3281, align 8
  store i64 %3282, i64* %RAX, align 8, !tbaa !2428
  %3283 = add i64 %3258, -28
  %3284 = add i64 %3260, 31
  store i64 %3284, i64* %PC, align 8
  %3285 = inttoptr i64 %3283 to i32*
  %3286 = load i32, i32* %3285, align 4
  %3287 = add i32 %3286, 15
  %3288 = zext i32 %3287 to i64
  store i64 %3288, i64* %RCX, align 8, !tbaa !2428
  %3289 = icmp ugt i32 %3286, -16
  %3290 = zext i1 %3289 to i8
  store i8 %3290, i8* %16, align 1, !tbaa !2433
  %3291 = and i32 %3287, 255
  %3292 = tail call i32 @llvm.ctpop.i32(i32 %3291) #11
  %3293 = trunc i32 %3292 to i8
  %3294 = and i8 %3293, 1
  %3295 = xor i8 %3294, 1
  store i8 %3295, i8* %23, align 1, !tbaa !2447
  %3296 = xor i32 %3286, %3287
  %3297 = lshr i32 %3296, 4
  %3298 = trunc i32 %3297 to i8
  %3299 = and i8 %3298, 1
  store i8 %3299, i8* %29, align 1, !tbaa !2451
  %3300 = icmp eq i32 %3287, 0
  %3301 = zext i1 %3300 to i8
  store i8 %3301, i8* %32, align 1, !tbaa !2448
  %3302 = lshr i32 %3287, 31
  %3303 = trunc i32 %3302 to i8
  store i8 %3303, i8* %35, align 1, !tbaa !2449
  %3304 = lshr i32 %3286, 31
  %3305 = xor i32 %3302, %3304
  %3306 = add nuw nsw i32 %3305, %3302
  %3307 = icmp eq i32 %3306, 2
  %3308 = zext i1 %3307 to i8
  store i8 %3308, i8* %41, align 1, !tbaa !2450
  %3309 = sext i32 %3287 to i64
  store i64 %3309, i64* %RDX, align 8, !tbaa !2428
  %3310 = shl nsw i64 %3309, 3
  %3311 = add i64 %3310, %3282
  %3312 = add i64 %3260, 42
  store i64 %3312, i64* %PC, align 8
  %3313 = inttoptr i64 %3311 to double*
  store double %3278, double* %3313, align 8
  %3314 = load i64, i64* %RBP, align 8
  %3315 = add i64 %3314, -28
  %3316 = load i64, i64* %PC, align 8
  %3317 = add i64 %3316, 3
  store i64 %3317, i64* %PC, align 8
  %3318 = inttoptr i64 %3315 to i32*
  %3319 = load i32, i32* %3318, align 4
  %3320 = add i32 %3319, 16
  %3321 = zext i32 %3320 to i64
  store i64 %3321, i64* %RAX, align 8, !tbaa !2428
  %3322 = icmp ugt i32 %3319, -17
  %3323 = zext i1 %3322 to i8
  store i8 %3323, i8* %16, align 1, !tbaa !2433
  %3324 = and i32 %3320, 255
  %3325 = tail call i32 @llvm.ctpop.i32(i32 %3324) #11
  %3326 = trunc i32 %3325 to i8
  %3327 = and i8 %3326, 1
  %3328 = xor i8 %3327, 1
  store i8 %3328, i8* %23, align 1, !tbaa !2447
  %3329 = xor i32 %3319, 16
  %3330 = xor i32 %3329, %3320
  %3331 = lshr i32 %3330, 4
  %3332 = trunc i32 %3331 to i8
  %3333 = and i8 %3332, 1
  store i8 %3333, i8* %29, align 1, !tbaa !2451
  %3334 = icmp eq i32 %3320, 0
  %3335 = zext i1 %3334 to i8
  store i8 %3335, i8* %32, align 1, !tbaa !2448
  %3336 = lshr i32 %3320, 31
  %3337 = trunc i32 %3336 to i8
  store i8 %3337, i8* %35, align 1, !tbaa !2449
  %3338 = lshr i32 %3319, 31
  %3339 = xor i32 %3336, %3338
  %3340 = add nuw nsw i32 %3339, %3336
  %3341 = icmp eq i32 %3340, 2
  %3342 = zext i1 %3341 to i8
  store i8 %3342, i8* %41, align 1, !tbaa !2450
  %3343 = add i64 %3316, 9
  store i64 %3343, i64* %PC, align 8
  store i32 %3320, i32* %3318, align 4
  %3344 = load i64, i64* %PC, align 8
  %3345 = add i64 %3344, -1815
  store i64 %3345, i64* %PC, align 8, !tbaa !2428
  br label %block_402bd2

block_402bd2:                                     ; preds = %block_402bde, %block_402870
  %3346 = phi i64 [ %3345, %block_402bde ], [ %.pre, %block_402870 ]
  %3347 = load i64, i64* %RBP, align 8
  %3348 = add i64 %3347, -28
  %3349 = add i64 %3346, 3
  store i64 %3349, i64* %PC, align 8
  %3350 = inttoptr i64 %3348 to i32*
  %3351 = load i32, i32* %3350, align 4
  %3352 = zext i32 %3351 to i64
  store i64 %3352, i64* %RAX, align 8, !tbaa !2428
  %3353 = add i64 %3347, -4
  %3354 = add i64 %3346, 6
  store i64 %3354, i64* %PC, align 8
  %3355 = inttoptr i64 %3353 to i32*
  %3356 = load i32, i32* %3355, align 4
  %3357 = sub i32 %3351, %3356
  %3358 = icmp ult i32 %3351, %3356
  %3359 = zext i1 %3358 to i8
  store i8 %3359, i8* %16, align 1, !tbaa !2433
  %3360 = and i32 %3357, 255
  %3361 = tail call i32 @llvm.ctpop.i32(i32 %3360) #11
  %3362 = trunc i32 %3361 to i8
  %3363 = and i8 %3362, 1
  %3364 = xor i8 %3363, 1
  store i8 %3364, i8* %23, align 1, !tbaa !2447
  %3365 = xor i32 %3356, %3351
  %3366 = xor i32 %3365, %3357
  %3367 = lshr i32 %3366, 4
  %3368 = trunc i32 %3367 to i8
  %3369 = and i8 %3368, 1
  store i8 %3369, i8* %29, align 1, !tbaa !2451
  %3370 = icmp eq i32 %3357, 0
  %3371 = zext i1 %3370 to i8
  store i8 %3371, i8* %32, align 1, !tbaa !2448
  %3372 = lshr i32 %3357, 31
  %3373 = trunc i32 %3372 to i8
  store i8 %3373, i8* %35, align 1, !tbaa !2449
  %3374 = lshr i32 %3351, 31
  %3375 = lshr i32 %3356, 31
  %3376 = xor i32 %3375, %3374
  %3377 = xor i32 %3372, %3374
  %3378 = add nuw nsw i32 %3377, %3376
  %3379 = icmp eq i32 %3378, 2
  %3380 = zext i1 %3379 to i8
  store i8 %3380, i8* %41, align 1, !tbaa !2450
  %3381 = icmp ne i8 %3373, 0
  %3382 = xor i1 %3381, %3379
  %.v = select i1 %3382, i64 12, i64 1820
  %3383 = add i64 %3346, %.v
  store i64 %3383, i64* %PC, align 8, !tbaa !2428
  br i1 %3382, label %block_402bde, label %block_4032ee

block_4032ee:                                     ; preds = %block_402bd2
  %3384 = load i64, i64* %RSP, align 8
  %3385 = add i64 %3384, 24
  store i64 %3385, i64* %RSP, align 8, !tbaa !2428
  %3386 = icmp ugt i64 %3384, -25
  %3387 = zext i1 %3386 to i8
  store i8 %3387, i8* %16, align 1, !tbaa !2433
  %3388 = trunc i64 %3385 to i32
  %3389 = and i32 %3388, 255
  %3390 = tail call i32 @llvm.ctpop.i32(i32 %3389) #11
  %3391 = trunc i32 %3390 to i8
  %3392 = and i8 %3391, 1
  %3393 = xor i8 %3392, 1
  store i8 %3393, i8* %23, align 1, !tbaa !2447
  %3394 = xor i64 %3384, 16
  %3395 = xor i64 %3394, %3385
  %3396 = lshr i64 %3395, 4
  %3397 = trunc i64 %3396 to i8
  %3398 = and i8 %3397, 1
  store i8 %3398, i8* %29, align 1, !tbaa !2451
  %3399 = icmp eq i64 %3385, 0
  %3400 = zext i1 %3399 to i8
  store i8 %3400, i8* %32, align 1, !tbaa !2448
  %3401 = lshr i64 %3385, 63
  %3402 = trunc i64 %3401 to i8
  store i8 %3402, i8* %35, align 1, !tbaa !2449
  %3403 = lshr i64 %3384, 63
  %3404 = xor i64 %3401, %3403
  %3405 = add nuw nsw i64 %3404, %3401
  %3406 = icmp eq i64 %3405, 2
  %3407 = zext i1 %3406 to i8
  store i8 %3407, i8* %41, align 1, !tbaa !2450
  %3408 = add i64 %3383, 5
  store i64 %3408, i64* %PC, align 8
  %3409 = add i64 %3384, 32
  %3410 = inttoptr i64 %3385 to i64*
  %3411 = load i64, i64* %3410, align 8
  store i64 %3411, i64* %RBP, align 8, !tbaa !2428
  store i64 %3409, i64* %RSP, align 8, !tbaa !2428
  %3412 = add i64 %3383, 6
  store i64 %3412, i64* %PC, align 8
  %3413 = inttoptr i64 %3409 to i64*
  %3414 = load i64, i64* %3413, align 8
  store i64 %3414, i64* %PC, align 8, !tbaa !2428
  %3415 = add i64 %3384, 40
  store i64 %3415, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400740__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400740:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = add i64 %1, 2
  store i64 %3, i64* %PC, align 8
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !tbaa !2428
  %6 = inttoptr i64 %5 to i64*
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %PC, align 8, !tbaa !2428
  %8 = add i64 %5, 8
  store i64 %8, i64* %4, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_404064__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_404064:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3 = load i64, i64* %RSP, align 8
  %4 = add i64 %3, -8
  %5 = icmp ult i64 %3, 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10 = lshr i64 %4, 63
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %12 = lshr i64 %3, 63
  %13 = xor i64 %10, %12
  %14 = add nuw nsw i64 %13, %12
  %15 = icmp eq i64 %14, 2
  %16 = zext i1 %15 to i8
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %18 = zext i1 %5 to i8
  store i8 %18, i8* %6, align 1, !tbaa !2433
  %19 = trunc i64 %3 to i32
  %20 = and i32 %19, 255
  %21 = tail call i32 @llvm.ctpop.i32(i32 %20) #11
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  store i8 %24, i8* %7, align 1, !tbaa !2447
  %25 = xor i64 %4, %3
  %26 = lshr i64 %25, 4
  %27 = trunc i64 %26 to i8
  %28 = and i8 %27, 1
  store i8 %28, i8* %8, align 1, !tbaa !2451
  %29 = icmp eq i64 %3, 0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %9, align 1, !tbaa !2448
  %31 = trunc i64 %12 to i8
  store i8 %31, i8* %11, align 1, !tbaa !2449
  store i8 %16, i8* %17, align 1, !tbaa !2450
  %32 = add i64 %1, 9
  store i64 %32, i64* %PC, align 8
  %33 = inttoptr i64 %3 to i64*
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  %35 = add i64 %3, 8
  store i64 %35, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400780_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400780:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 6
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %RSI, align 8
  %10 = load i64, i64* %PC, align 8
  %11 = sub i64 %9, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %18 = ashr i64 %11, 3
  %19 = lshr i64 %18, 63
  store i64 %19, i64* %RAX, align 8, !tbaa !2428
  %20 = add nsw i64 %19, %18
  %21 = trunc i64 %20 to i8
  %22 = and i8 %21, 1
  %23 = ashr i64 %20, 1
  store i64 %23, i64* %RSI, align 8, !tbaa !2428
  store i8 %22, i8* %12, align 1, !tbaa !2432
  %24 = trunc i64 %23 to i32
  %25 = and i32 %24, 255
  %26 = tail call i32 @llvm.ctpop.i32(i32 %25) #11
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = xor i8 %28, 1
  store i8 %29, i8* %13, align 1, !tbaa !2432
  store i8 0, i8* %14, align 1, !tbaa !2432
  %30 = icmp eq i64 %23, 0
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %15, align 1, !tbaa !2432
  %32 = lshr i64 %23, 63
  %33 = trunc i64 %32 to i8
  store i8 %33, i8* %16, align 1, !tbaa !2432
  store i8 0, i8* %17, align 1, !tbaa !2432
  %.v = select i1 %30, i64 50, i64 29
  %34 = add i64 %10, %.v
  store i64 %34, i64* %PC, align 8, !tbaa !2428
  br i1 %30, label %block_4007b8, label %block_4007a3

block_4007b8:                                     ; preds = %block_4007a3, %block_400780
  %35 = phi i64 [ %42, %block_4007a3 ], [ %34, %block_400780 ]
  %36 = add i64 %35, 1
  store i64 %36, i64* %PC, align 8
  %37 = load i64, i64* %8, align 8
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %38 = add i64 %35, 2
  store i64 %38, i64* %PC, align 8
  %39 = inttoptr i64 %6 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %PC, align 8, !tbaa !2428
  %41 = add i64 %7, 16
  store i64 %41, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4007a3:                                     ; preds = %block_400780
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %12, align 1, !tbaa !2433
  store i8 1, i8* %13, align 1, !tbaa !2447
  store i8 1, i8* %15, align 1, !tbaa !2448
  store i8 0, i8* %16, align 1, !tbaa !2449
  store i8 0, i8* %17, align 1, !tbaa !2450
  store i8 0, i8* %14, align 1, !tbaa !2451
  %42 = add i64 %34, 21
  store i64 %42, i64* %PC, align 8, !tbaa !2428
  br label %block_4007b8
}

; Function Attrs: noinline
define %struct.Memory* @sub_400750_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400750:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 zext (i1 icmp ult (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)) to i8), i8* %10, align 1, !tbaa !2433
  %11 = tail call i32 @llvm.ctpop.i32(i32 and (i32 trunc (i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)) to i32), i32 255)) #11
  %12 = trunc i32 %11 to i8
  %13 = and i8 %12, 1
  %14 = xor i8 %13, 1
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14, i8* %15, align 1, !tbaa !2447
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 and (i8 trunc (i64 lshr (i64 xor (i64 xor (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295)), i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64))), i64 4) to i8), i8 1), i8* %16, align 1, !tbaa !2451
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 zext (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)), i64 0) to i8), i8* %17, align 1, !tbaa !2448
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 trunc (i64 lshr (i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)), i64 63) to i8), i8* %18, align 1, !tbaa !2449
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 zext (i1 icmp eq (i64 add (i64 xor (i64 lshr (i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)), i64 63), i64 lshr (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 63)), i64 xor (i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), i64 lshr (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 63))), i64 2) to i8), i8* %19, align 1, !tbaa !2450
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %20 = add i64 %9, select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)), i64 0), i64 39, i64 16)
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  br i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)), i64 0), label %block_400778, label %block_400761

block_400778:                                     ; preds = %block_400761, %block_400750
  %21 = phi i64 [ %28, %block_400761 ], [ %20, %block_400750 ]
  %22 = add i64 %21, 1
  store i64 %22, i64* %PC, align 8
  %23 = load i64, i64* %8, align 8
  store i64 %23, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %24 = add i64 %21, 2
  store i64 %24, i64* %PC, align 8
  %25 = inttoptr i64 %6 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %PC, align 8, !tbaa !2428
  %27 = add i64 %6, 8
  store i64 %27, i64* %5, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400761:                                     ; preds = %block_400750
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %10, align 1, !tbaa !2433
  store i8 1, i8* %15, align 1, !tbaa !2447
  store i8 1, i8* %17, align 1, !tbaa !2448
  store i8 0, i8* %18, align 1, !tbaa !2449
  store i8 0, i8* %19, align 1, !tbaa !2450
  store i8 0, i8* %16, align 1, !tbaa !2451
  %28 = add i64 %9, add (i64 select (i1 icmp eq (i64 sub (i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64 ptrtoint (%__bss_start_type* @__bss_start to i64)), i64 0), i64 39, i64 16), i64 23)
  store i64 %28, i64* %PC, align 8, !tbaa !2428
  br label %block_400778
}

; Function Attrs: noinline
define %struct.Memory* @sub_400800_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400800:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %AL = bitcast %union.anon* %3 to i8*
  %EAX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = load i64, i64* %RSP, align 8, !tbaa !2428
  %13 = add i64 %12, -8
  %14 = inttoptr i64 %13 to i64*
  store i64 %10, i64* %14, align 8
  %15 = load i64, i64* %PC, align 8
  store i64 %13, i64* %RBP, align 8, !tbaa !2428
  %16 = add i64 %12, -232
  store i64 %16, i64* %RSP, align 8, !tbaa !2428
  %17 = icmp ult i64 %13, 224
  %18 = zext i1 %17 to i8
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %18, i8* %19, align 1, !tbaa !2433
  %20 = trunc i64 %16 to i32
  %21 = and i32 %20, 255
  %22 = tail call i32 @llvm.ctpop.i32(i32 %21) #11
  %23 = trunc i32 %22 to i8
  %24 = and i8 %23, 1
  %25 = xor i8 %24, 1
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %25, i8* %26, align 1, !tbaa !2447
  %27 = xor i64 %13, %16
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2451
  %32 = icmp eq i64 %16, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %16, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %13, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  store i64 16, i64* %RAX, align 8, !tbaa !2428
  store i64 16, i64* %RDI, align 8, !tbaa !2428
  %44 = add i64 %12, -12
  %45 = add i64 %15, 24
  store i64 %45, i64* %PC, align 8
  %46 = inttoptr i64 %44 to i32*
  store i32 0, i32* %46, align 4
  %47 = load i64, i64* %RBP, align 8
  %48 = add i64 %47, -88
  %49 = load i64, i64* %PC, align 8
  %50 = add i64 %49, 8
  store i64 %50, i64* %PC, align 8
  %51 = inttoptr i64 %48 to i64*
  store i64 0, i64* %51, align 8
  %52 = load i64, i64* %RBP, align 8
  %53 = add i64 %52, -144
  %54 = load i64, i64* %RDI, align 8
  %55 = load i64, i64* %PC, align 8
  %56 = add i64 %55, 7
  store i64 %56, i64* %PC, align 8
  %57 = inttoptr i64 %53 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load i64, i64* %PC, align 8
  %59 = add i64 %58, 1464
  %60 = add i64 %58, 5
  %61 = load i64, i64* %RSP, align 8, !tbaa !2428
  %62 = add i64 %61, -8
  %63 = inttoptr i64 %62 to i64*
  store i64 %60, i64* %63, align 8
  store i64 %62, i64* %RSP, align 8, !tbaa !2428
  store i64 %59, i64* %PC, align 8, !tbaa !2428
  %64 = tail call %struct.Memory* @sub_400de0_get_time_renamed_(%struct.State* nonnull %0, i64 %59, %struct.Memory* %2)
  %65 = load i64, i64* %RBP, align 8
  %66 = add i64 %65, -64
  %67 = load i64, i64* %PC, align 8
  %68 = add i64 %67, 5
  store i64 %68, i64* %PC, align 8
  %69 = bitcast [32 x %union.VectorReg]* %6 to double*
  %70 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %6, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %71 = load i64, i64* %70, align 1
  %72 = inttoptr i64 %66 to i64*
  store i64 %71, i64* %72, align 8
  %73 = load i64, i64* %PC, align 8
  %74 = add i64 %73, 1454
  %75 = add i64 %73, 5
  %76 = load i64, i64* %RSP, align 8, !tbaa !2428
  %77 = add i64 %76, -8
  %78 = inttoptr i64 %77 to i64*
  store i64 %75, i64* %78, align 8
  store i64 %77, i64* %RSP, align 8, !tbaa !2428
  store i64 %74, i64* %PC, align 8, !tbaa !2428
  %79 = tail call %struct.Memory* @sub_400de0_get_time_renamed_(%struct.State* nonnull %0, i64 %74, %struct.Memory* %64)
  %80 = load i64, i64* %RBP, align 8
  %81 = add i64 %80, -72
  %82 = load i64, i64* %PC, align 8
  %83 = add i64 %82, 5
  store i64 %83, i64* %PC, align 8
  %84 = load i64, i64* %70, align 1
  %85 = inttoptr i64 %81 to i64*
  store i64 %84, i64* %85, align 8
  %86 = bitcast [32 x %union.VectorReg]* %6 to i8*
  %87 = load i64, i64* %RBP, align 8
  %88 = add i64 %87, -72
  %89 = load i64, i64* %PC, align 8
  %90 = add i64 %89, 5
  store i64 %90, i64* %PC, align 8
  %91 = inttoptr i64 %88 to double*
  %92 = load double, double* %91, align 8
  store double %92, double* %69, align 1, !tbaa !2452
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %94 = bitcast i64* %93 to double*
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %95 = bitcast %union.VectorReg* %7 to i8*
  %96 = add i64 %87, -64
  %97 = add i64 %89, 10
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to double*
  %99 = load double, double* %98, align 8
  %100 = bitcast %union.VectorReg* %7 to double*
  store double %99, double* %100, align 1, !tbaa !2452
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %102 = bitcast i64* %101 to double*
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %103 = fsub double %92, %99
  %104 = add i64 %87, -80
  %105 = add i64 %89, 19
  store i64 %105, i64* %PC, align 8
  %106 = inttoptr i64 %104 to double*
  store double %103, double* %106, align 8
  %107 = load i64, i64* %PC, align 8
  %108 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 24) to i64*), align 8
  store i64 %108, i64* %70, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %109 = add i64 %107, -335
  %110 = add i64 %107, 13
  %111 = load i64, i64* %RSP, align 8, !tbaa !2428
  %112 = add i64 %111, -8
  %113 = inttoptr i64 %112 to i64*
  store i64 %110, i64* %113, align 8
  store i64 %112, i64* %RSP, align 8, !tbaa !2428
  store i64 %109, i64* %PC, align 8, !alias.scope !2477, !noalias !2480
  %114 = load double, double* %69, align 8, !alias.scope !2477, !noalias !2480
  %115 = load i64, i64* %113, align 8
  store i64 %111, i64* %RSP, align 8, !alias.scope !2477, !noalias !2480
  %116 = tail call double @sqrt(double %114)
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 2
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 3
  %119 = bitcast i64* %93 to i8*
  call void @llvm.memset.p0i8.i64(i8* %119, i8 0, i64 24, i32 8, i1 false)
  %120 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 32) to double*), align 16
  %121 = bitcast i64* %93 to <2 x i32>*
  %122 = fmul double %116, %120
  store double %122, double* %69, align 1, !tbaa !2452
  %123 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 40) to double*), align 8
  store double %123, double* %100, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %124 = bitcast %union.VectorReg* %8 to i8*
  %125 = bitcast double %122 to <2 x i32>
  %126 = extractelement <2 x i32> %125, i32 0
  %127 = bitcast %union.VectorReg* %8 to i32*
  store i32 %126, i32* %127, align 1, !tbaa !2475
  %128 = extractelement <2 x i32> %125, i32 1
  %129 = getelementptr inbounds i8, i8* %124, i64 4
  %130 = bitcast i8* %129 to i32*
  store i32 %128, i32* %130, align 1, !tbaa !2475
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %132 = bitcast i64* %131 to i32*
  store i32 0, i32* %132, align 1, !tbaa !2475
  %133 = getelementptr inbounds i8, i8* %124, i64 12
  %134 = bitcast i8* %133 to i32*
  store i32 0, i32* %134, align 1, !tbaa !2475
  %135 = bitcast %union.VectorReg* %8 to double*
  %136 = load double, double* %135, align 1
  %137 = fsub double %136, %123
  store double %137, double* %135, align 1, !tbaa !2452
  %138 = tail call double @llvm.trunc.f64(double %137) #11
  %139 = tail call double @llvm.fabs.f64(double %138) #11
  %140 = fcmp ogt double %139, 0x43E0000000000000
  %141 = fptosi double %138 to i64
  %.op = xor i64 %141, -9223372036854775808
  %142 = select i1 %140, i64 0, i64 %.op
  store i64 %142, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2433
  %143 = trunc i64 %142 to i32
  %144 = and i32 %143, 255
  %145 = tail call i32 @llvm.ctpop.i32(i32 %144) #11
  %146 = trunc i32 %145 to i8
  %147 = and i8 %146, 1
  %148 = xor i8 %147, 1
  store i8 %148, i8* %26, align 1, !tbaa !2447
  %149 = icmp eq i64 %142, 0
  %150 = zext i1 %149 to i8
  store i8 %150, i8* %34, align 1, !tbaa !2448
  %151 = lshr i64 %142, 63
  %152 = trunc i64 %151 to i8
  store i8 %152, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  store i8 0, i8* %31, align 1, !tbaa !2451
  %153 = tail call double @llvm.trunc.f64(double %122) #11
  %154 = tail call double @llvm.fabs.f64(double %153) #11
  %155 = fcmp ogt double %154, 0x43E0000000000000
  %156 = fptosi double %153 to i64
  %157 = select i1 %155, i64 -9223372036854775808, i64 %156
  store i64 %157, i64* %RCX, align 8, !tbaa !2428
  %158 = add i64 %115, 54
  store i64 %158, i64* %PC, align 8
  %159 = fcmp uno double %122, %123
  br i1 %159, label %160, label %170

; <label>:160:                                    ; preds = %block_400800
  %161 = fadd double %122, %123
  %162 = bitcast double %161 to i64
  %163 = and i64 %162, 9221120237041090560
  %164 = icmp eq i64 %163, 9218868437227405312
  %165 = and i64 %162, 2251799813685247
  %166 = icmp ne i64 %165, 0
  %167 = and i1 %164, %166
  br i1 %167, label %168, label %176

; <label>:168:                                    ; preds = %160
  %169 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %158, %struct.Memory* %79) #12
  %.pre = load i64, i64* %RCX, align 8
  %.pre1 = load i64, i64* %PC, align 8
  %.pre2 = load i8, i8* %19, align 1, !tbaa !2433
  %.pre3 = load i64, i64* %RDI, align 8, !tbaa !2428
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3

; <label>:170:                                    ; preds = %block_400800
  %171 = fcmp ogt double %122, %123
  br i1 %171, label %176, label %172

; <label>:172:                                    ; preds = %170
  %173 = fcmp olt double %122, %123
  br i1 %173, label %176, label %174

; <label>:174:                                    ; preds = %172
  %175 = fcmp oeq double %122, %123
  br i1 %175, label %176, label %180

; <label>:176:                                    ; preds = %174, %172, %170, %160
  %177 = phi i8 [ 0, %170 ], [ 0, %172 ], [ 1, %174 ], [ 1, %160 ]
  %178 = phi i8 [ 0, %170 ], [ 0, %172 ], [ 0, %174 ], [ 1, %160 ]
  %179 = phi i8 [ 0, %170 ], [ 1, %172 ], [ 0, %174 ], [ 1, %160 ]
  store i8 %177, i8* %34, align 1, !tbaa !2432
  store i8 %178, i8* %26, align 1, !tbaa !2432
  store i8 %179, i8* %19, align 1, !tbaa !2432
  br label %180

; <label>:180:                                    ; preds = %176, %174
  %181 = phi i8 [ %179, %176 ], [ 0, %174 ]
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 0, i8* %37, align 1, !tbaa !2432
  store i8 0, i8* %31, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3: ; preds = %180, %168
  %182 = phi i64 [ %.pre3, %168 ], [ %142, %180 ]
  %183 = phi i8 [ %.pre2, %168 ], [ %181, %180 ]
  %184 = phi i64 [ %.pre1, %168 ], [ %158, %180 ]
  %185 = phi i64 [ %.pre, %168 ], [ %157, %180 ]
  %186 = phi %struct.Memory* [ %169, %168 ], [ %79, %180 ]
  %187 = icmp ne i8 %183, 0
  %188 = select i1 %187, i64 %185, i64 %182
  store i64 %188, i64* %RDI, align 8, !tbaa !2428
  %189 = load i64, i64* %RBP, align 8
  %190 = add i64 %189, -144
  %191 = add i64 %184, 11
  store i64 %191, i64* %PC, align 8
  %192 = inttoptr i64 %190 to i64*
  %193 = load i64, i64* %192, align 8
  store i64 %193, i64* %RCX, align 8, !tbaa !2428
  %194 = add i64 %189, -152
  %195 = add i64 %184, 18
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i64*
  store i64 %188, i64* %196, align 8
  %197 = load i64, i64* %RCX, align 8
  %198 = load i64, i64* %PC, align 8
  store i64 %197, i64* %RDI, align 8, !tbaa !2428
  %199 = load i64, i64* %RBP, align 8
  %200 = add i64 %199, -152
  %201 = add i64 %198, 10
  store i64 %201, i64* %PC, align 8
  %202 = inttoptr i64 %200 to i64*
  %203 = load i64, i64* %202, align 8
  store i64 %203, i64* %RSI, align 8, !tbaa !2428
  %204 = add i64 %198, -452
  %205 = add i64 %198, 15
  %206 = load i64, i64* %RSP, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %205, i64* %208, align 8
  store i64 %207, i64* %RSP, align 8, !tbaa !2428
  store i64 %204, i64* %PC, align 8, !tbaa !2428
  %209 = tail call fastcc %struct.Memory* @ext_4006e0_memalign(%struct.State* nonnull %0, %struct.Memory* %186)
  %210 = load i64, i64* %PC, align 8
  store i64 16, i64* %RDI, align 8, !tbaa !2428
  store i64 20480, i64* %RDX, align 8, !tbaa !2428
  store i64 20480, i64* %RSI, align 8, !tbaa !2428
  %211 = load i64, i64* %RBP, align 8
  %212 = add i64 %211, -24
  %213 = load i64, i64* %RAX, align 8
  %214 = add i64 %210, 18
  store i64 %214, i64* %PC, align 8
  %215 = inttoptr i64 %212 to i64*
  store i64 %213, i64* %215, align 8
  %216 = load i64, i64* %PC, align 8
  %217 = add i64 %216, -485
  %218 = add i64 %216, 5
  %219 = load i64, i64* %RSP, align 8, !tbaa !2428
  %220 = add i64 %219, -8
  %221 = inttoptr i64 %220 to i64*
  store i64 %218, i64* %221, align 8
  store i64 %220, i64* %RSP, align 8, !tbaa !2428
  store i64 %217, i64* %PC, align 8, !tbaa !2428
  %222 = tail call fastcc %struct.Memory* @ext_4006e0_memalign(%struct.State* nonnull %0, %struct.Memory* %209)
  %223 = load i64, i64* %PC, align 8
  store i64 512, i64* %RDI, align 8, !tbaa !2428
  %224 = load i64, i64* %RBP, align 8
  %225 = add i64 %224, -56
  %226 = load i64, i64* %RAX, align 8
  %227 = add i64 %223, 9
  store i64 %227, i64* %PC, align 8
  %228 = inttoptr i64 %225 to i64*
  store i64 %226, i64* %228, align 8
  %229 = load i64, i64* %RBP, align 8
  %230 = add i64 %229, -24
  %231 = load i64, i64* %PC, align 8
  %232 = add i64 %231, 4
  store i64 %232, i64* %PC, align 8
  %233 = inttoptr i64 %230 to i64*
  %234 = load i64, i64* %233, align 8
  store i64 %234, i64* %RSI, align 8, !tbaa !2428
  %235 = add i64 %229, -56
  %236 = add i64 %231, 8
  store i64 %236, i64* %PC, align 8
  %237 = inttoptr i64 %235 to i64*
  %238 = load i64, i64* %237, align 8
  store i64 %238, i64* %RDX, align 8, !tbaa !2428
  %239 = add i64 %231, 1373
  %240 = add i64 %231, 13
  %241 = load i64, i64* %RSP, align 8, !tbaa !2428
  %242 = add i64 %241, -8
  %243 = inttoptr i64 %242 to i64*
  store i64 %240, i64* %243, align 8
  store i64 %242, i64* %RSP, align 8, !tbaa !2428
  store i64 %239, i64* %PC, align 8, !tbaa !2428
  %244 = tail call %struct.Memory* @sub_400e30_makewt_renamed_(%struct.State* nonnull %0, i64 %239, %struct.Memory* %222)
  %245 = load i64, i64* %PC, align 8
  store i64 16, i64* %RDI, align 8, !tbaa !2428
  store i64 16384, i64* %R8, align 8, !tbaa !2428
  store i64 16384, i64* %RSI, align 8, !tbaa !2428
  %246 = add i64 %245, -512
  %247 = add i64 %245, 19
  %248 = load i64, i64* %RSP, align 8, !tbaa !2428
  %249 = add i64 %248, -8
  %250 = inttoptr i64 %249 to i64*
  store i64 %247, i64* %250, align 8
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  store i64 %246, i64* %PC, align 8, !tbaa !2428
  %251 = tail call fastcc %struct.Memory* @ext_4006e0_memalign(%struct.State* nonnull %0, %struct.Memory* %244)
  %252 = load i64, i64* %PC, align 8
  store i64 16, i64* %RDI, align 8, !tbaa !2428
  store i64 16384, i64* %R8, align 8, !tbaa !2428
  store i64 16384, i64* %RSI, align 8, !tbaa !2428
  %253 = load i64, i64* %RBP, align 8
  %254 = add i64 %253, -32
  %255 = load i64, i64* %RAX, align 8
  %256 = add i64 %252, 22
  store i64 %256, i64* %PC, align 8
  %257 = inttoptr i64 %254 to i64*
  store i64 %255, i64* %257, align 8
  %258 = load i64, i64* %PC, align 8
  %259 = add i64 %258, -553
  %260 = add i64 %258, 5
  %261 = load i64, i64* %RSP, align 8, !tbaa !2428
  %262 = add i64 %261, -8
  %263 = inttoptr i64 %262 to i64*
  store i64 %260, i64* %263, align 8
  store i64 %262, i64* %RSP, align 8, !tbaa !2428
  store i64 %259, i64* %PC, align 8, !tbaa !2428
  %264 = tail call fastcc %struct.Memory* @ext_4006e0_memalign(%struct.State* nonnull %0, %struct.Memory* %251)
  %265 = load i64, i64* %PC, align 8
  store i64 16, i64* %RDI, align 8, !tbaa !2428
  store i64 16384, i64* %R8, align 8, !tbaa !2428
  store i64 16384, i64* %RSI, align 8, !tbaa !2428
  %266 = load i64, i64* %RBP, align 8
  %267 = add i64 %266, -40
  %268 = load i64, i64* %RAX, align 8
  %269 = add i64 %265, 22
  store i64 %269, i64* %PC, align 8
  %270 = inttoptr i64 %267 to i64*
  store i64 %268, i64* %270, align 8
  %271 = load i64, i64* %PC, align 8
  %272 = add i64 %271, -580
  %273 = add i64 %271, 5
  %274 = load i64, i64* %RSP, align 8, !tbaa !2428
  %275 = add i64 %274, -8
  %276 = inttoptr i64 %275 to i64*
  store i64 %273, i64* %276, align 8
  store i64 %275, i64* %RSP, align 8, !tbaa !2428
  store i64 %272, i64* %PC, align 8, !tbaa !2428
  %277 = tail call fastcc %struct.Memory* @ext_4006e0_memalign(%struct.State* nonnull %0, %struct.Memory* %264)
  %278 = load i64, i64* %PC, align 8
  store i64 0, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2433
  store i8 1, i8* %26, align 1, !tbaa !2447
  store i8 1, i8* %34, align 1, !tbaa !2448
  store i8 0, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  store i8 0, i8* %31, align 1, !tbaa !2451
  store i64 2047, i64* %RSI, align 8, !tbaa !2428
  %279 = load i64, i64* %RBP, align 8
  %280 = add i64 %279, -48
  %281 = load i64, i64* %RAX, align 8
  %282 = add i64 %278, 11
  store i64 %282, i64* %PC, align 8
  %283 = inttoptr i64 %280 to i64*
  store i64 %281, i64* %283, align 8
  %284 = load i64, i64* %RBP, align 8
  %285 = add i64 %284, -32
  %286 = load i64, i64* %PC, align 8
  %287 = add i64 %286, 4
  store i64 %287, i64* %PC, align 8
  %288 = inttoptr i64 %285 to i64*
  %289 = load i64, i64* %288, align 8
  store i64 %289, i64* %RDX, align 8, !tbaa !2428
  %290 = add i64 %286, 1660
  %291 = add i64 %286, 9
  %292 = load i64, i64* %RSP, align 8, !tbaa !2428
  %293 = add i64 %292, -8
  %294 = inttoptr i64 %293 to i64*
  store i64 %291, i64* %294, align 8
  store i64 %293, i64* %RSP, align 8, !tbaa !2428
  store i64 %290, i64* %PC, align 8, !tbaa !2428
  %295 = tail call %struct.Memory* @sub_400fb0_putdata_renamed_(%struct.State* nonnull %0, i64 %290, %struct.Memory* %277)
  %296 = load i64, i64* %PC, align 8
  store i64 2048, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %297 = load i64, i64* %RBP, align 8
  %298 = add i64 %297, -32
  %299 = add i64 %296, 14
  store i64 %299, i64* %PC, align 8
  %300 = inttoptr i64 %298 to i64*
  %301 = load i64, i64* %300, align 8
  store i64 %301, i64* %RDX, align 8, !tbaa !2428
  %302 = add i64 %297, -24
  %303 = add i64 %296, 18
  store i64 %303, i64* %PC, align 8
  %304 = inttoptr i64 %302 to i64*
  %305 = load i64, i64* %304, align 8
  store i64 %305, i64* %RCX, align 8, !tbaa !2428
  %306 = add i64 %297, -56
  %307 = add i64 %296, 22
  store i64 %307, i64* %PC, align 8
  %308 = inttoptr i64 %306 to i64*
  %309 = load i64, i64* %308, align 8
  store i64 %309, i64* %R8, align 8, !tbaa !2428
  %310 = add i64 %296, 1779
  %311 = add i64 %296, 27
  %312 = load i64, i64* %RSP, align 8, !tbaa !2428
  %313 = add i64 %312, -8
  %314 = inttoptr i64 %313 to i64*
  store i64 %311, i64* %314, align 8
  store i64 %313, i64* %RSP, align 8, !tbaa !2428
  store i64 %310, i64* %PC, align 8, !tbaa !2428
  %315 = tail call %struct.Memory* @sub_401030_cdft_renamed_(%struct.State* nonnull %0, i64 %310, %struct.Memory* %295)
  %316 = load i64, i64* %PC, align 8
  store i64 2048, i64* %RDI, align 8, !tbaa !2428
  store i64 4294967295, i64* %RSI, align 8, !tbaa !2428
  %317 = load i64, i64* %RBP, align 8
  %318 = add i64 %317, -32
  %319 = add i64 %316, 14
  store i64 %319, i64* %PC, align 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320, align 8
  store i64 %321, i64* %RDX, align 8, !tbaa !2428
  %322 = add i64 %317, -24
  %323 = add i64 %316, 18
  store i64 %323, i64* %PC, align 8
  %324 = inttoptr i64 %322 to i64*
  %325 = load i64, i64* %324, align 8
  store i64 %325, i64* %RCX, align 8, !tbaa !2428
  %326 = add i64 %317, -56
  %327 = add i64 %316, 22
  store i64 %327, i64* %PC, align 8
  %328 = inttoptr i64 %326 to i64*
  %329 = load i64, i64* %328, align 8
  store i64 %329, i64* %R8, align 8, !tbaa !2428
  %330 = add i64 %316, 1752
  %331 = add i64 %316, 27
  %332 = load i64, i64* %RSP, align 8, !tbaa !2428
  %333 = add i64 %332, -8
  %334 = inttoptr i64 %333 to i64*
  store i64 %331, i64* %334, align 8
  store i64 %333, i64* %RSP, align 8, !tbaa !2428
  store i64 %330, i64* %PC, align 8, !tbaa !2428
  %335 = tail call %struct.Memory* @sub_401030_cdft_renamed_(%struct.State* nonnull %0, i64 %330, %struct.Memory* %315)
  %336 = load i64, i64* %PC, align 8
  store i64 0, i64* %RDI, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2433
  store i8 1, i8* %26, align 1, !tbaa !2447
  store i8 1, i8* %34, align 1, !tbaa !2448
  store i8 0, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  store i8 0, i8* %31, align 1, !tbaa !2451
  store i64 2047, i64* %RSI, align 8, !tbaa !2428
  %337 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 16) to i64*), align 16
  store i64 %337, i64* %70, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %338 = load i64, i64* %RBP, align 8
  %339 = add i64 %338, -32
  %340 = add i64 %336, 19
  store i64 %340, i64* %PC, align 8
  %341 = inttoptr i64 %339 to i64*
  %342 = load i64, i64* %341, align 8
  store i64 %342, i64* %RDX, align 8, !tbaa !2428
  %343 = add i64 %336, 1885
  %344 = add i64 %336, 24
  %345 = load i64, i64* %RSP, align 8, !tbaa !2428
  %346 = add i64 %345, -8
  %347 = inttoptr i64 %346 to i64*
  store i64 %344, i64* %347, align 8
  store i64 %346, i64* %RSP, align 8, !tbaa !2428
  store i64 %343, i64* %PC, align 8, !tbaa !2428
  %348 = tail call %struct.Memory* @sub_4010d0_errorcheck_renamed_(%struct.State* nonnull %0, i64 %343, %struct.Memory* %335)
  %349 = load i64, i64* %PC, align 8
  %350 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 8) to i64*), align 8
  %351 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %7, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %350, i64* %351, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %352 = load i64, i64* %RBP, align 8
  %353 = add i64 %352, -96
  %354 = add i64 %349, 13
  store i64 %354, i64* %PC, align 8
  %355 = load i64, i64* %70, align 1
  %356 = inttoptr i64 %353 to i64*
  store i64 %355, i64* %356, align 8
  %357 = load i64, i64* %RBP, align 8
  %358 = add i64 %357, -96
  %359 = load i64, i64* %PC, align 8
  %360 = add i64 %359, 5
  store i64 %360, i64* %PC, align 8
  %361 = inttoptr i64 %358 to i64*
  %362 = load i64, i64* %361, align 8
  %363 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 96) to i32*), align 16
  %364 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 100) to i32*), align 4
  %365 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 104) to i32*), align 8
  %366 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 108) to i32*), align 4
  store i32 %363, i32* %127, align 1, !tbaa !2475
  store i32 %364, i32* %130, align 1, !tbaa !2475
  store i32 %365, i32* %132, align 1, !tbaa !2475
  store i32 %366, i32* %134, align 1, !tbaa !2475
  %367 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %8, i64 0, i32 0, i32 0, i32 0, i64 0
  %368 = load i64, i64* %367, align 1
  %369 = and i64 %368, %362
  %370 = trunc i64 %369 to i32
  %371 = lshr i64 %369, 32
  %372 = trunc i64 %371 to i32
  %373 = bitcast [32 x %union.VectorReg]* %6 to i32*
  store i32 %370, i32* %373, align 1, !tbaa !2459
  %374 = getelementptr inbounds i8, i8* %86, i64 4
  %375 = bitcast i8* %374 to i32*
  store i32 %372, i32* %375, align 1, !tbaa !2459
  %376 = bitcast i64* %93 to i32*
  store i32 0, i32* %376, align 1, !tbaa !2459
  %377 = getelementptr inbounds i8, i8* %86, i64 12
  %378 = bitcast i8* %377 to i32*
  store i32 0, i32* %378, align 1, !tbaa !2459
  %379 = add i64 %359, 20
  store i64 %379, i64* %PC, align 8
  %380 = load double, double* %69, align 1
  %381 = load double, double* %100, align 1
  %382 = fcmp uno double %380, %381
  br i1 %382, label %383, label %393

; <label>:383:                                    ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3
  %384 = fadd double %380, %381
  %385 = bitcast double %384 to i64
  %386 = and i64 %385, 9221120237041090560
  %387 = icmp eq i64 %386, 9218868437227405312
  %388 = and i64 %385, 2251799813685247
  %389 = icmp ne i64 %388, 0
  %390 = and i1 %387, %389
  br i1 %390, label %391, label %399

; <label>:391:                                    ; preds = %383
  %392 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %379, %struct.Memory* %348) #12
  %.pre4 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

; <label>:393:                                    ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit3
  %394 = fcmp ogt double %380, %381
  br i1 %394, label %399, label %395

; <label>:395:                                    ; preds = %393
  %396 = fcmp olt double %380, %381
  br i1 %396, label %399, label %397

; <label>:397:                                    ; preds = %395
  %398 = fcmp oeq double %380, %381
  br i1 %398, label %399, label %403

; <label>:399:                                    ; preds = %397, %395, %393, %383
  %400 = phi i8 [ 0, %393 ], [ 0, %395 ], [ 1, %397 ], [ 1, %383 ]
  %401 = phi i8 [ 0, %393 ], [ 0, %395 ], [ 0, %397 ], [ 1, %383 ]
  %402 = phi i8 [ 0, %393 ], [ 1, %395 ], [ 0, %397 ], [ 1, %383 ]
  store i8 %400, i8* %34, align 1, !tbaa !2432
  store i8 %401, i8* %26, align 1, !tbaa !2432
  store i8 %402, i8* %19, align 1, !tbaa !2432
  br label %403

; <label>:403:                                    ; preds = %399, %397
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 0, i8* %37, align 1, !tbaa !2432
  store i8 0, i8* %31, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2: ; preds = %403, %391
  %404 = phi i64 [ %.pre4, %391 ], [ %379, %403 ]
  %405 = phi %struct.Memory* [ %392, %391 ], [ %348, %403 ]
  %406 = load i8, i8* %19, align 1, !tbaa !2433
  %407 = load i8, i8* %34, align 1, !tbaa !2448
  %408 = or i8 %407, %406
  %409 = icmp ne i8 %408, 0
  %.v = select i1 %409, i64 39, i64 6
  %410 = add i64 %404, %.v
  store i64 %410, i64* %PC, align 8, !tbaa !2428
  br i1 %409, label %block_4009d3, label %block_4009b2

block_400c14:                                     ; preds = %block_400b37
  store i64 2048, i64* %RDI, align 8, !tbaa !2428
  store i64 4294967295, i64* %RSI, align 8, !tbaa !2428
  %411 = add i64 %1093, -40
  %412 = add i64 %1121, 14
  store i64 %412, i64* %PC, align 8
  %413 = inttoptr i64 %411 to i64*
  %414 = load i64, i64* %413, align 8
  store i64 %414, i64* %RDX, align 8, !tbaa !2428
  %415 = add i64 %1093, -24
  %416 = add i64 %1121, 18
  store i64 %416, i64* %PC, align 8
  %417 = inttoptr i64 %415 to i64*
  %418 = load i64, i64* %417, align 8
  store i64 %418, i64* %RCX, align 8, !tbaa !2428
  %419 = add i64 %1093, -56
  %420 = add i64 %1121, 22
  store i64 %420, i64* %PC, align 8
  %421 = inttoptr i64 %419 to i64*
  %422 = load i64, i64* %421, align 8
  store i64 %422, i64* %R8, align 8, !tbaa !2428
  %423 = add i64 %1121, 1052
  %424 = add i64 %1121, 27
  %425 = load i64, i64* %RSP, align 8, !tbaa !2428
  %426 = add i64 %425, -8
  %427 = inttoptr i64 %426 to i64*
  store i64 %424, i64* %427, align 8
  store i64 %426, i64* %RSP, align 8, !tbaa !2428
  store i64 %423, i64* %PC, align 8, !tbaa !2428
  %428 = tail call %struct.Memory* @sub_401030_cdft_renamed_(%struct.State* nonnull %0, i64 %423, %struct.Memory* %516)
  %429 = load i64, i64* %RBP, align 8
  %430 = add i64 %429, -8
  %431 = load i64, i64* %PC, align 8
  %432 = add i64 %431, 3
  store i64 %432, i64* %PC, align 8
  %433 = inttoptr i64 %430 to i32*
  %434 = load i32, i32* %433, align 4
  %435 = add i32 %434, 1
  %436 = zext i32 %435 to i64
  store i64 %436, i64* %RAX, align 8, !tbaa !2428
  %437 = icmp eq i32 %434, -1
  %438 = icmp eq i32 %435, 0
  %439 = or i1 %437, %438
  %440 = zext i1 %439 to i8
  store i8 %440, i8* %19, align 1, !tbaa !2433
  %441 = and i32 %435, 255
  %442 = tail call i32 @llvm.ctpop.i32(i32 %441) #11
  %443 = trunc i32 %442 to i8
  %444 = and i8 %443, 1
  %445 = xor i8 %444, 1
  store i8 %445, i8* %26, align 1, !tbaa !2447
  %446 = xor i32 %434, %435
  %447 = lshr i32 %446, 4
  %448 = trunc i32 %447 to i8
  %449 = and i8 %448, 1
  store i8 %449, i8* %31, align 1, !tbaa !2451
  %450 = zext i1 %438 to i8
  store i8 %450, i8* %34, align 1, !tbaa !2448
  %451 = lshr i32 %435, 31
  %452 = trunc i32 %451 to i8
  store i8 %452, i8* %37, align 1, !tbaa !2449
  %453 = lshr i32 %434, 31
  %454 = xor i32 %451, %453
  %455 = add nuw nsw i32 %454, %451
  %456 = icmp eq i32 %455, 2
  %457 = zext i1 %456 to i8
  store i8 %457, i8* %43, align 1, !tbaa !2450
  %458 = add i64 %431, 9
  store i64 %458, i64* %PC, align 8
  store i32 %435, i32* %433, align 4
  %459 = load i64, i64* %PC, align 8
  %460 = add i64 %459, -354
  store i64 %460, i64* %PC, align 8, !tbaa !2428
  br label %block_400ad6

block_400ae3:                                     ; preds = %block_400ad6
  store i64 2048, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  store i64 16384, i64* %RAX, align 8, !tbaa !2428
  store i64 16384, i64* %RDX, align 8, !tbaa !2428
  %461 = add i64 %595, -40
  %462 = add i64 %624, 21
  store i64 %462, i64* %PC, align 8
  %463 = inttoptr i64 %461 to i64*
  %464 = load i64, i64* %463, align 8
  store i64 %464, i64* %RCX, align 8, !tbaa !2428
  %465 = add i64 %595, -48
  %466 = add i64 %624, 25
  store i64 %466, i64* %PC, align 8
  %467 = inttoptr i64 %465 to i64*
  %468 = load i64, i64* %467, align 8
  store i64 %468, i64* %R8, align 8, !tbaa !2428
  %469 = add i64 %595, -176
  %470 = add i64 %624, 31
  store i64 %470, i64* %PC, align 8
  %471 = inttoptr i64 %469 to i32*
  store i32 2048, i32* %471, align 4
  %472 = load i64, i64* %RCX, align 8
  %473 = load i64, i64* %PC, align 8
  store i64 %472, i64* %RDI, align 8, !tbaa !2428
  %474 = load i64, i64* %RBP, align 8
  %475 = add i64 %474, -180
  %476 = load i32, i32* %ESI, align 4
  %477 = add i64 %473, 9
  store i64 %477, i64* %PC, align 8
  %478 = inttoptr i64 %475 to i32*
  store i32 %476, i32* %478, align 4
  %479 = load i64, i64* %R8, align 8
  %480 = load i64, i64* %PC, align 8
  store i64 %479, i64* %RSI, align 8, !tbaa !2428
  %481 = add i64 %480, -1083
  %482 = add i64 %480, 8
  %483 = load i64, i64* %RSP, align 8, !tbaa !2428
  %484 = add i64 %483, -8
  %485 = inttoptr i64 %484 to i64*
  store i64 %482, i64* %485, align 8
  store i64 %484, i64* %RSP, align 8, !tbaa !2428
  store i64 %481, i64* %PC, align 8, !tbaa !2428
  %486 = tail call fastcc %struct.Memory* @ext_605128_memcpy(%struct.State* nonnull %0, %struct.Memory* %MEMORY.0)
  %487 = load i64, i64* %RBP, align 8
  %488 = add i64 %487, -40
  %489 = load i64, i64* %PC, align 8
  %490 = add i64 %489, 4
  store i64 %490, i64* %PC, align 8
  %491 = inttoptr i64 %488 to i64*
  %492 = load i64, i64* %491, align 8
  store i64 %492, i64* %RDX, align 8, !tbaa !2428
  %493 = add i64 %487, -24
  %494 = add i64 %489, 8
  store i64 %494, i64* %PC, align 8
  %495 = inttoptr i64 %493 to i64*
  %496 = load i64, i64* %495, align 8
  store i64 %496, i64* %RCX, align 8, !tbaa !2428
  %497 = add i64 %487, -56
  %498 = add i64 %489, 12
  store i64 %498, i64* %PC, align 8
  %499 = inttoptr i64 %497 to i64*
  %500 = load i64, i64* %499, align 8
  store i64 %500, i64* %R8, align 8, !tbaa !2428
  %501 = add i64 %487, -176
  %502 = add i64 %489, 18
  store i64 %502, i64* %PC, align 8
  %503 = inttoptr i64 %501 to i32*
  %504 = load i32, i32* %503, align 4
  %505 = zext i32 %504 to i64
  store i64 %505, i64* %RDI, align 8, !tbaa !2428
  %506 = add i64 %487, -180
  %507 = add i64 %489, 24
  store i64 %507, i64* %PC, align 8
  %508 = inttoptr i64 %506 to i32*
  %509 = load i32, i32* %508, align 4
  %510 = zext i32 %509 to i64
  store i64 %510, i64* %RSI, align 8, !tbaa !2428
  %511 = add i64 %489, 1309
  %512 = add i64 %489, 29
  %513 = load i64, i64* %RSP, align 8, !tbaa !2428
  %514 = add i64 %513, -8
  %515 = inttoptr i64 %514 to i64*
  store i64 %512, i64* %515, align 8
  store i64 %514, i64* %RSP, align 8, !tbaa !2428
  store i64 %511, i64* %PC, align 8, !tbaa !2428
  %516 = tail call %struct.Memory* @sub_401030_cdft_renamed_(%struct.State* nonnull %0, i64 %511, %struct.Memory* %486)
  %517 = load i64, i64* %RBP, align 8
  %518 = add i64 %517, -100
  %519 = load i64, i64* %PC, align 8
  %520 = add i64 %519, 7
  store i64 %520, i64* %PC, align 8
  %521 = inttoptr i64 %518 to i32*
  store i32 0, i32* %521, align 4
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_400b37

block_400c74:                                     ; preds = %block_400c67
  %522 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 48) to double*), align 16
  store double %522, double* %69, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %523 = add i64 %1545, -40
  %524 = add i64 %1573, 12
  store i64 %524, i64* %PC, align 8
  %525 = inttoptr i64 %523 to i64*
  %526 = load i64, i64* %525, align 8
  store i64 %526, i64* %RAX, align 8, !tbaa !2428
  %527 = add i64 %1573, 15
  store i64 %527, i64* %PC, align 8
  %528 = load i32, i32* %1548, align 4
  %529 = shl i32 %528, 1
  %530 = icmp slt i32 %528, 0
  %531 = icmp slt i32 %529, 0
  %532 = xor i1 %530, %531
  %533 = zext i32 %529 to i64
  store i64 %533, i64* %RCX, align 8, !tbaa !2428
  %.lobit34 = lshr i32 %528, 31
  %534 = trunc i32 %.lobit34 to i8
  store i8 %534, i8* %19, align 1, !tbaa !2432
  %535 = and i32 %529, 254
  %536 = tail call i32 @llvm.ctpop.i32(i32 %535) #11
  %537 = trunc i32 %536 to i8
  %538 = and i8 %537, 1
  %539 = xor i8 %538, 1
  store i8 %539, i8* %26, align 1, !tbaa !2432
  store i8 0, i8* %31, align 1, !tbaa !2432
  %540 = icmp eq i32 %529, 0
  %541 = zext i1 %540 to i8
  store i8 %541, i8* %34, align 1, !tbaa !2432
  %542 = lshr i32 %528, 30
  %543 = trunc i32 %542 to i8
  %544 = and i8 %543, 1
  store i8 %544, i8* %37, align 1, !tbaa !2432
  %545 = zext i1 %532 to i8
  store i8 %545, i8* %43, align 1, !tbaa !2432
  %546 = sext i32 %529 to i64
  store i64 %546, i64* %RDX, align 8, !tbaa !2428
  %547 = shl nsw i64 %546, 3
  %548 = add i64 %547, %526
  %549 = add i64 %1573, 26
  store i64 %549, i64* %PC, align 8
  %550 = inttoptr i64 %548 to i64*
  %551 = load i64, i64* %550, align 8
  %552 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 96) to i32*), align 16
  %553 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 100) to i32*), align 4
  %554 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 104) to i32*), align 8
  %555 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 108) to i32*), align 4
  store i32 %552, i32* %127, align 1, !tbaa !2475
  store i32 %553, i32* %130, align 1, !tbaa !2475
  store i32 %554, i32* %132, align 1, !tbaa !2475
  store i32 %555, i32* %134, align 1, !tbaa !2475
  %556 = load i64, i64* %367, align 1
  %557 = and i64 %556, %551
  %558 = trunc i64 %557 to i32
  %559 = lshr i64 %557, 32
  %560 = trunc i64 %559 to i32
  store i32 %558, i32* %1079, align 1, !tbaa !2459
  store i32 %560, i32* %1081, align 1, !tbaa !2459
  store i32 0, i32* %1082, align 1, !tbaa !2459
  store i32 0, i32* %1084, align 1, !tbaa !2459
  %561 = add i64 %1573, 41
  store i64 %561, i64* %PC, align 8
  %562 = load double, double* %100, align 1
  %563 = fcmp uno double %562, %522
  br i1 %563, label %564, label %574

; <label>:564:                                    ; preds = %block_400c74
  %565 = fadd double %562, %522
  %566 = bitcast double %565 to i64
  %567 = and i64 %566, 9221120237041090560
  %568 = icmp eq i64 %567, 9218868437227405312
  %569 = and i64 %566, 2251799813685247
  %570 = icmp ne i64 %569, 0
  %571 = and i1 %568, %570
  br i1 %571, label %572, label %580

; <label>:572:                                    ; preds = %564
  %573 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %561, %struct.Memory* %MEMORY.5) #12
  %.pre9 = load i64, i64* %PC, align 8
  %.pre10 = load i8, i8* %19, align 1, !tbaa !2433
  %.pre11 = load i8, i8* %34, align 1, !tbaa !2448
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

; <label>:574:                                    ; preds = %block_400c74
  %575 = fcmp ogt double %562, %522
  br i1 %575, label %580, label %576

; <label>:576:                                    ; preds = %574
  %577 = fcmp olt double %562, %522
  br i1 %577, label %580, label %578

; <label>:578:                                    ; preds = %576
  %579 = fcmp oeq double %562, %522
  br i1 %579, label %580, label %584

; <label>:580:                                    ; preds = %578, %576, %574, %564
  %581 = phi i8 [ 0, %574 ], [ 0, %576 ], [ 1, %578 ], [ 1, %564 ]
  %582 = phi i8 [ 0, %574 ], [ 0, %576 ], [ 0, %578 ], [ 1, %564 ]
  %583 = phi i8 [ 0, %574 ], [ 1, %576 ], [ 0, %578 ], [ 1, %564 ]
  store i8 %581, i8* %34, align 1, !tbaa !2432
  store i8 %582, i8* %26, align 1, !tbaa !2432
  store i8 %583, i8* %19, align 1, !tbaa !2432
  br label %584

; <label>:584:                                    ; preds = %580, %578
  %585 = phi i8 [ %581, %580 ], [ %541, %578 ]
  %586 = phi i8 [ %583, %580 ], [ %534, %578 ]
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 0, i8* %37, align 1, !tbaa !2432
  store i8 0, i8* %31, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1: ; preds = %584, %572
  %587 = phi i8 [ %.pre11, %572 ], [ %585, %584 ]
  %588 = phi i8 [ %.pre10, %572 ], [ %586, %584 ]
  %589 = phi i64 [ %.pre9, %572 ], [ %561, %584 ]
  %590 = phi %struct.Memory* [ %573, %572 ], [ %MEMORY.5, %584 ]
  %591 = or i8 %587, %588
  %592 = icmp ne i8 %591, 0
  %.v35 = select i1 %592, i64 37, i64 6
  %593 = add i64 %589, %.v35
  store i64 %593, i64* %PC, align 8, !tbaa !2428
  br i1 %592, label %block_400cc2, label %block_400ca3

block_400ad6:                                     ; preds = %block_400a8b, %block_400c14
  %594 = phi i64 [ %.pre6, %block_400a8b ], [ %460, %block_400c14 ]
  %MEMORY.0 = phi %struct.Memory* [ %1532, %block_400a8b ], [ %428, %block_400c14 ]
  %595 = load i64, i64* %RBP, align 8
  %596 = add i64 %595, -8
  %597 = add i64 %594, 7
  store i64 %597, i64* %PC, align 8
  %598 = inttoptr i64 %596 to i32*
  %599 = load i32, i32* %598, align 4
  %600 = add i32 %599, -150000
  %601 = icmp ult i32 %599, 150000
  %602 = zext i1 %601 to i8
  store i8 %602, i8* %19, align 1, !tbaa !2433
  %603 = and i32 %600, 255
  %604 = tail call i32 @llvm.ctpop.i32(i32 %603) #11
  %605 = trunc i32 %604 to i8
  %606 = and i8 %605, 1
  %607 = xor i8 %606, 1
  store i8 %607, i8* %26, align 1, !tbaa !2447
  %608 = xor i32 %599, 16
  %609 = xor i32 %608, %600
  %610 = lshr i32 %609, 4
  %611 = trunc i32 %610 to i8
  %612 = and i8 %611, 1
  store i8 %612, i8* %31, align 1, !tbaa !2451
  %613 = icmp eq i32 %600, 0
  %614 = zext i1 %613 to i8
  store i8 %614, i8* %34, align 1, !tbaa !2448
  %615 = lshr i32 %600, 31
  %616 = trunc i32 %615 to i8
  store i8 %616, i8* %37, align 1, !tbaa !2449
  %617 = lshr i32 %599, 31
  %618 = xor i32 %615, %617
  %619 = add nuw nsw i32 %618, %617
  %620 = icmp eq i32 %619, 2
  %621 = zext i1 %620 to i8
  store i8 %621, i8* %43, align 1, !tbaa !2450
  %622 = icmp ne i8 %616, 0
  %623 = xor i1 %622, %620
  %.v29 = select i1 %623, i64 13, i64 359
  %624 = add i64 %594, %.v29
  store i64 %624, i64* %PC, align 8, !tbaa !2428
  br i1 %623, label %block_400ae3, label %block_400c3d

block_400cd2:                                     ; preds = %block_400ca3, %block_400cc2
  %.sink19.in = phi i64 [ %1234, %block_400ca3 ], [ %1037, %block_400cc2 ]
  %.sink = phi double [ %1265, %block_400ca3 ], [ %1039, %block_400cc2 ]
  %.sink17 = phi i64 [ 21, %block_400ca3 ], [ 5, %block_400cc2 ]
  %.sink19 = add i64 %.sink19.in, -192
  %625 = inttoptr i64 %.sink19 to double*
  store double %.sink, double* %625, align 8
  %626 = load i64, i64* %PC, align 8
  %627 = add i64 %626, %.sink17
  %628 = load i64, i64* %RBP, align 8
  %629 = add i64 %628, -192
  %630 = add i64 %627, 8
  store i64 %630, i64* %PC, align 8
  %631 = inttoptr i64 %629 to i64*
  %632 = load i64, i64* %631, align 8
  store i64 %632, i64* %70, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %633 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 48) to i64*), align 16
  store i64 %633, i64* %351, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %634 = add i64 %628, -40
  %635 = add i64 %627, 20
  store i64 %635, i64* %PC, align 8
  %636 = inttoptr i64 %634 to i64*
  %637 = load i64, i64* %636, align 8
  store i64 %637, i64* %RAX, align 8, !tbaa !2428
  %638 = add i64 %628, -12
  %639 = add i64 %627, 23
  store i64 %639, i64* %PC, align 8
  %640 = inttoptr i64 %638 to i32*
  %641 = load i32, i32* %640, align 4
  %642 = shl i32 %641, 1
  %643 = lshr i32 %641, 30
  %644 = and i32 %643, 1
  %645 = or i32 %642, 1
  %646 = zext i32 %645 to i64
  store i64 %646, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2433
  %647 = and i32 %645, 255
  %648 = tail call i32 @llvm.ctpop.i32(i32 %647) #11
  %649 = trunc i32 %648 to i8
  %650 = and i8 %649, 1
  %651 = xor i8 %650, 1
  store i8 %651, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %31, align 1, !tbaa !2451
  store i8 0, i8* %34, align 1, !tbaa !2448
  %652 = trunc i32 %644 to i8
  store i8 %652, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  %653 = sext i32 %645 to i64
  store i64 %653, i64* %RDX, align 8, !tbaa !2428
  %654 = shl nsw i64 %653, 3
  %655 = add i64 %654, %637
  %656 = add i64 %627, 37
  store i64 %656, i64* %PC, align 8
  %657 = inttoptr i64 %655 to i64*
  %658 = load i64, i64* %657, align 8
  %659 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 96) to i32*), align 16
  %660 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 100) to i32*), align 4
  %661 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 104) to i32*), align 8
  %662 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 108) to i32*), align 4
  %663 = bitcast %union.VectorReg* %9 to i32*
  store i32 %659, i32* %663, align 1, !tbaa !2475
  %664 = bitcast i8* %1086 to i32*
  store i32 %660, i32* %664, align 1, !tbaa !2475
  %665 = bitcast i64* %1087 to i32*
  store i32 %661, i32* %665, align 1, !tbaa !2475
  %666 = bitcast i8* %1088 to i32*
  store i32 %662, i32* %666, align 1, !tbaa !2475
  %667 = load i64, i64* %1089, align 1
  %668 = and i64 %667, %658
  %669 = trunc i64 %668 to i32
  %670 = lshr i64 %668, 32
  %671 = trunc i64 %670 to i32
  store i32 %669, i32* %127, align 1, !tbaa !2459
  store i32 %671, i32* %130, align 1, !tbaa !2459
  store i32 0, i32* %132, align 1, !tbaa !2459
  store i32 0, i32* %134, align 1, !tbaa !2459
  %672 = add i64 %627, 52
  store i64 %672, i64* %PC, align 8
  %673 = load double, double* %135, align 1
  %674 = bitcast i64 %633 to double
  %675 = fcmp uno double %673, %674
  br i1 %675, label %676, label %686

; <label>:676:                                    ; preds = %block_400cd2
  %677 = fadd double %673, %674
  %678 = bitcast double %677 to i64
  %679 = and i64 %678, 9221120237041090560
  %680 = icmp eq i64 %679, 9218868437227405312
  %681 = and i64 %678, 2251799813685247
  %682 = icmp ne i64 %681, 0
  %683 = and i1 %680, %682
  br i1 %683, label %684, label %692

; <label>:684:                                    ; preds = %676
  %685 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %672, %struct.Memory* %590) #12
  %.pre12 = load i64, i64* %PC, align 8
  %.pre38 = load i64, i64* %RBP, align 8
  %.pre39 = load i64, i64* %70, align 1
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:686:                                    ; preds = %block_400cd2
  %687 = fcmp ogt double %673, %674
  br i1 %687, label %692, label %688

; <label>:688:                                    ; preds = %686
  %689 = fcmp olt double %673, %674
  br i1 %689, label %692, label %690

; <label>:690:                                    ; preds = %688
  %691 = fcmp oeq double %673, %674
  br i1 %691, label %692, label %696

; <label>:692:                                    ; preds = %690, %688, %686, %676
  %693 = phi i8 [ 0, %686 ], [ 0, %688 ], [ 1, %690 ], [ 1, %676 ]
  %694 = phi i8 [ 0, %686 ], [ 0, %688 ], [ 0, %690 ], [ 1, %676 ]
  %695 = phi i8 [ 0, %686 ], [ 1, %688 ], [ 0, %690 ], [ 1, %676 ]
  store i8 %693, i8* %34, align 1, !tbaa !2432
  store i8 %694, i8* %26, align 1, !tbaa !2432
  store i8 %695, i8* %19, align 1, !tbaa !2432
  br label %696

; <label>:696:                                    ; preds = %692, %690
  store i8 0, i8* %43, align 1, !tbaa !2432
  store i8 0, i8* %37, align 1, !tbaa !2432
  store i8 0, i8* %31, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %696, %684
  %697 = phi i64 [ %.pre39, %684 ], [ %632, %696 ]
  %698 = phi i64 [ %.pre38, %684 ], [ %628, %696 ]
  %699 = phi i64 [ %.pre12, %684 ], [ %672, %696 ]
  %700 = phi %struct.Memory* [ %685, %684 ], [ %590, %696 ]
  %701 = add i64 %698, -200
  %702 = add i64 %699, 8
  store i64 %702, i64* %PC, align 8
  %703 = inttoptr i64 %701 to i64*
  store i64 %697, i64* %703, align 8
  %704 = load i64, i64* %PC, align 8
  %705 = load i8, i8* %19, align 1, !tbaa !2433
  %706 = load i8, i8* %34, align 1, !tbaa !2448
  %707 = or i8 %706, %705
  %708 = icmp ne i8 %707, 0
  %.v37 = select i1 %708, i64 40, i64 6
  %709 = add i64 %704, %.v37
  store i64 %709, i64* %PC, align 8, !tbaa !2428
  br i1 %708, label %block_400d36, label %block_400d14

block_400d46:                                     ; preds = %block_400d36, %block_400d14
  %.sink24.in = phi i64 [ %1574, %block_400d36 ], [ %1267, %block_400d14 ]
  %.sink22 = phi double [ %1576, %block_400d36 ], [ %1292, %block_400d14 ]
  %.sink21 = phi i64 [ 5, %block_400d36 ], [ 21, %block_400d14 ]
  %.sink24 = add i64 %.sink24.in, -208
  %710 = inttoptr i64 %.sink24 to double*
  store double %.sink22, double* %710, align 8
  %711 = load i64, i64* %PC, align 8
  %712 = add i64 %711, %.sink21
  %713 = load i64, i64* %RBP, align 8
  %714 = add i64 %713, -208
  %715 = add i64 %712, 8
  store i64 %715, i64* %PC, align 8
  %716 = inttoptr i64 %714 to i64*
  %717 = load i64, i64* %716, align 8
  store i64 %717, i64* %70, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  store i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 157), i64* %RDI, align 8, !tbaa !2428
  %718 = add i64 %713, -200
  %719 = add i64 %712, 26
  store i64 %719, i64* %PC, align 8
  %720 = inttoptr i64 %718 to i64*
  %721 = load i64, i64* %720, align 8
  store i64 %721, i64* %351, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %722 = add i64 %713, -216
  %723 = add i64 %712, 34
  store i64 %723, i64* %PC, align 8
  %724 = inttoptr i64 %722 to i64*
  store i64 %717, i64* %724, align 8
  %725 = load i64, i64* %PC, align 8
  %726 = load <2 x i32>, <2 x i32>* %1090, align 1
  %727 = load <2 x i32>, <2 x i32>* %1091, align 1
  %728 = extractelement <2 x i32> %726, i32 0
  store i32 %728, i32* %373, align 1, !tbaa !2475
  %729 = extractelement <2 x i32> %726, i32 1
  store i32 %729, i32* %375, align 1, !tbaa !2475
  %730 = extractelement <2 x i32> %727, i32 0
  store i32 %730, i32* %376, align 1, !tbaa !2475
  %731 = extractelement <2 x i32> %727, i32 1
  store i32 %731, i32* %378, align 1, !tbaa !2475
  %732 = load i64, i64* %RBP, align 8
  %733 = add i64 %732, -216
  %734 = add i64 %725, 11
  store i64 %734, i64* %PC, align 8
  %735 = inttoptr i64 %733 to i64*
  %736 = load i64, i64* %735, align 8
  store i64 %736, i64* %351, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  store i8 2, i8* %AL, align 1, !tbaa !2432
  %737 = add i64 %725, -1752
  %738 = add i64 %725, 18
  %739 = load i64, i64* %RSP, align 8, !tbaa !2428
  %740 = add i64 %739, -8
  %741 = inttoptr i64 %740 to i64*
  store i64 %738, i64* %741, align 8
  store i64 %740, i64* %RSP, align 8, !tbaa !2428
  store i64 %737, i64* %PC, align 8, !tbaa !2428
  %742 = tail call fastcc %struct.Memory* @ext_6050a0_printf(%struct.State* nonnull %0, %struct.Memory* %700)
  %743 = load i64, i64* %RBP, align 8
  %744 = add i64 %743, -220
  %745 = load i32, i32* %EAX, align 4
  %746 = load i64, i64* %PC, align 8
  %747 = add i64 %746, 6
  store i64 %747, i64* %PC, align 8
  %748 = inttoptr i64 %744 to i32*
  store i32 %745, i32* %748, align 4
  %749 = load i64, i64* %RBP, align 8
  %750 = add i64 %749, -12
  %751 = load i64, i64* %PC, align 8
  %752 = add i64 %751, 3
  store i64 %752, i64* %PC, align 8
  %753 = inttoptr i64 %750 to i32*
  %754 = load i32, i32* %753, align 4
  %755 = add i32 %754, 1
  %756 = zext i32 %755 to i64
  store i64 %756, i64* %RAX, align 8, !tbaa !2428
  %757 = icmp eq i32 %754, -1
  %758 = icmp eq i32 %755, 0
  %759 = or i1 %757, %758
  %760 = zext i1 %759 to i8
  store i8 %760, i8* %19, align 1, !tbaa !2433
  %761 = and i32 %755, 255
  %762 = tail call i32 @llvm.ctpop.i32(i32 %761) #11
  %763 = trunc i32 %762 to i8
  %764 = and i8 %763, 1
  %765 = xor i8 %764, 1
  store i8 %765, i8* %26, align 1, !tbaa !2447
  %766 = xor i32 %754, %755
  %767 = lshr i32 %766, 4
  %768 = trunc i32 %767 to i8
  %769 = and i8 %768, 1
  store i8 %769, i8* %31, align 1, !tbaa !2451
  %770 = zext i1 %758 to i8
  store i8 %770, i8* %34, align 1, !tbaa !2448
  %771 = lshr i32 %755, 31
  %772 = trunc i32 %771 to i8
  store i8 %772, i8* %37, align 1, !tbaa !2449
  %773 = lshr i32 %754, 31
  %774 = xor i32 %771, %773
  %775 = add nuw nsw i32 %774, %771
  %776 = icmp eq i32 %775, 2
  %777 = zext i1 %776 to i8
  store i8 %777, i8* %43, align 1, !tbaa !2450
  %778 = add i64 %751, 9
  store i64 %778, i64* %PC, align 8
  store i32 %755, i32* %753, align 4
  %779 = load i64, i64* %PC, align 8
  %780 = add i64 %779, -290
  store i64 %780, i64* %PC, align 8, !tbaa !2428
  br label %block_400c67

block_400b44:                                     ; preds = %block_400b37
  %781 = add i64 %1093, -40
  %782 = add i64 %1121, 4
  store i64 %782, i64* %PC, align 8
  %783 = inttoptr i64 %781 to i64*
  %784 = load i64, i64* %783, align 8
  store i64 %784, i64* %RAX, align 8, !tbaa !2428
  %785 = add i64 %1121, 7
  store i64 %785, i64* %PC, align 8
  %786 = load i32, i32* %1096, align 4
  %787 = shl i32 %786, 1
  %788 = icmp slt i32 %786, 0
  %789 = icmp slt i32 %787, 0
  %790 = xor i1 %788, %789
  %791 = zext i32 %787 to i64
  store i64 %791, i64* %RCX, align 8, !tbaa !2428
  %.lobit = lshr i32 %786, 31
  %792 = trunc i32 %.lobit to i8
  store i8 %792, i8* %19, align 1, !tbaa !2432
  %793 = and i32 %787, 254
  %794 = tail call i32 @llvm.ctpop.i32(i32 %793) #11
  %795 = trunc i32 %794 to i8
  %796 = and i8 %795, 1
  %797 = xor i8 %796, 1
  store i8 %797, i8* %26, align 1, !tbaa !2432
  store i8 0, i8* %31, align 1, !tbaa !2432
  %798 = icmp eq i32 %787, 0
  %799 = zext i1 %798 to i8
  store i8 %799, i8* %34, align 1, !tbaa !2432
  %800 = lshr i32 %786, 30
  %801 = trunc i32 %800 to i8
  %802 = and i8 %801, 1
  store i8 %802, i8* %37, align 1, !tbaa !2432
  %803 = zext i1 %790 to i8
  store i8 %803, i8* %43, align 1, !tbaa !2432
  %804 = sext i32 %787 to i64
  store i64 %804, i64* %RDX, align 8, !tbaa !2428
  %805 = shl nsw i64 %804, 3
  %806 = add i64 %805, %784
  %807 = add i64 %1121, 18
  store i64 %807, i64* %PC, align 8
  %808 = inttoptr i64 %806 to i64*
  %809 = load i64, i64* %808, align 8
  store i64 %809, i64* %70, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %810 = add i64 %1093, -112
  %811 = add i64 %1121, 23
  store i64 %811, i64* %PC, align 8
  %812 = inttoptr i64 %810 to i64*
  store i64 %809, i64* %812, align 8
  %813 = load i64, i64* %RBP, align 8
  %814 = add i64 %813, -32
  %815 = load i64, i64* %PC, align 8
  %816 = add i64 %815, 4
  store i64 %816, i64* %PC, align 8
  %817 = inttoptr i64 %814 to i64*
  %818 = load i64, i64* %817, align 8
  store i64 %818, i64* %RAX, align 8, !tbaa !2428
  %819 = add i64 %813, -100
  %820 = add i64 %815, 7
  store i64 %820, i64* %PC, align 8
  %821 = inttoptr i64 %819 to i32*
  %822 = load i32, i32* %821, align 4
  %823 = shl i32 %822, 1
  %824 = icmp slt i32 %822, 0
  %825 = icmp slt i32 %823, 0
  %826 = xor i1 %824, %825
  %827 = zext i32 %823 to i64
  store i64 %827, i64* %RCX, align 8, !tbaa !2428
  %.lobit31 = lshr i32 %822, 31
  %828 = trunc i32 %.lobit31 to i8
  store i8 %828, i8* %19, align 1, !tbaa !2432
  %829 = and i32 %823, 254
  %830 = tail call i32 @llvm.ctpop.i32(i32 %829) #11
  %831 = trunc i32 %830 to i8
  %832 = and i8 %831, 1
  %833 = xor i8 %832, 1
  store i8 %833, i8* %26, align 1, !tbaa !2432
  store i8 0, i8* %31, align 1, !tbaa !2432
  %834 = icmp eq i32 %823, 0
  %835 = zext i1 %834 to i8
  store i8 %835, i8* %34, align 1, !tbaa !2432
  %836 = lshr i32 %822, 30
  %837 = trunc i32 %836 to i8
  %838 = and i8 %837, 1
  store i8 %838, i8* %37, align 1, !tbaa !2432
  %839 = zext i1 %826 to i8
  store i8 %839, i8* %43, align 1, !tbaa !2432
  %840 = sext i32 %823 to i64
  store i64 %840, i64* %RDX, align 8, !tbaa !2428
  %841 = shl nsw i64 %840, 3
  %842 = add i64 %841, %818
  %843 = add i64 %815, 18
  store i64 %843, i64* %PC, align 8
  %844 = inttoptr i64 %842 to i64*
  %845 = load i64, i64* %844, align 8
  store i64 %845, i64* %70, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %846 = add i64 %813, -120
  %847 = add i64 %815, 23
  store i64 %847, i64* %PC, align 8
  %848 = inttoptr i64 %846 to i64*
  store i64 %845, i64* %848, align 8
  %849 = load i64, i64* %RBP, align 8
  %850 = add i64 %849, -40
  %851 = load i64, i64* %PC, align 8
  %852 = add i64 %851, 4
  store i64 %852, i64* %PC, align 8
  %853 = inttoptr i64 %850 to i64*
  %854 = load i64, i64* %853, align 8
  store i64 %854, i64* %RAX, align 8, !tbaa !2428
  %855 = add i64 %849, -100
  %856 = add i64 %851, 7
  store i64 %856, i64* %PC, align 8
  %857 = inttoptr i64 %855 to i32*
  %858 = load i32, i32* %857, align 4
  %859 = shl i32 %858, 1
  %860 = lshr i32 %858, 30
  %861 = and i32 %860, 1
  %862 = or i32 %859, 1
  %863 = zext i32 %862 to i64
  store i64 %863, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2433
  %864 = and i32 %862, 255
  %865 = tail call i32 @llvm.ctpop.i32(i32 %864) #11
  %866 = trunc i32 %865 to i8
  %867 = and i8 %866, 1
  %868 = xor i8 %867, 1
  store i8 %868, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %31, align 1, !tbaa !2451
  store i8 0, i8* %34, align 1, !tbaa !2448
  %869 = trunc i32 %861 to i8
  store i8 %869, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  %870 = sext i32 %862 to i64
  store i64 %870, i64* %RDX, align 8, !tbaa !2428
  %871 = shl nsw i64 %870, 3
  %872 = add i64 %871, %854
  %873 = add i64 %851, 21
  store i64 %873, i64* %PC, align 8
  %874 = inttoptr i64 %872 to i64*
  %875 = load i64, i64* %874, align 8
  store i64 %875, i64* %70, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %876 = add i64 %849, -128
  %877 = add i64 %851, 26
  store i64 %877, i64* %PC, align 8
  %878 = inttoptr i64 %876 to i64*
  store i64 %875, i64* %878, align 8
  %879 = load i64, i64* %RBP, align 8
  %880 = add i64 %879, -32
  %881 = load i64, i64* %PC, align 8
  %882 = add i64 %881, 4
  store i64 %882, i64* %PC, align 8
  %883 = inttoptr i64 %880 to i64*
  %884 = load i64, i64* %883, align 8
  store i64 %884, i64* %RAX, align 8, !tbaa !2428
  %885 = add i64 %879, -100
  %886 = add i64 %881, 7
  store i64 %886, i64* %PC, align 8
  %887 = inttoptr i64 %885 to i32*
  %888 = load i32, i32* %887, align 4
  %889 = shl i32 %888, 1
  %890 = lshr i32 %888, 30
  %891 = and i32 %890, 1
  %892 = or i32 %889, 1
  %893 = zext i32 %892 to i64
  store i64 %893, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2433
  %894 = and i32 %892, 255
  %895 = tail call i32 @llvm.ctpop.i32(i32 %894) #11
  %896 = trunc i32 %895 to i8
  %897 = and i8 %896, 1
  %898 = xor i8 %897, 1
  store i8 %898, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %31, align 1, !tbaa !2451
  store i8 0, i8* %34, align 1, !tbaa !2448
  %899 = trunc i32 %891 to i8
  store i8 %899, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  %900 = sext i32 %892 to i64
  store i64 %900, i64* %RDX, align 8, !tbaa !2428
  %901 = shl nsw i64 %900, 3
  %902 = add i64 %901, %884
  %903 = add i64 %881, 21
  store i64 %903, i64* %PC, align 8
  %904 = inttoptr i64 %902 to i64*
  %905 = load i64, i64* %904, align 8
  store i64 %905, i64* %70, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %906 = add i64 %879, -136
  %907 = add i64 %881, 29
  store i64 %907, i64* %PC, align 8
  %908 = inttoptr i64 %906 to i64*
  store i64 %905, i64* %908, align 8
  %909 = load i64, i64* %RBP, align 8
  %910 = add i64 %909, -112
  %911 = load i64, i64* %PC, align 8
  %912 = add i64 %911, 5
  store i64 %912, i64* %PC, align 8
  %913 = inttoptr i64 %910 to double*
  %914 = load double, double* %913, align 8
  store double %914, double* %69, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %915 = add i64 %909, -120
  %916 = add i64 %911, 10
  store i64 %916, i64* %PC, align 8
  %917 = inttoptr i64 %915 to double*
  %918 = load double, double* %917, align 8
  %919 = fmul double %914, %918
  store double %919, double* %69, align 1, !tbaa !2452
  store i64 0, i64* %93, align 1, !tbaa !2452
  %920 = add i64 %909, -128
  %921 = add i64 %911, 15
  store i64 %921, i64* %PC, align 8
  %922 = inttoptr i64 %920 to double*
  %923 = load double, double* %922, align 8
  store double %923, double* %100, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %924 = add i64 %909, -136
  %925 = add i64 %911, 23
  store i64 %925, i64* %PC, align 8
  %926 = inttoptr i64 %924 to double*
  %927 = load double, double* %926, align 8
  %928 = fmul double %923, %927
  store double %928, double* %100, align 1, !tbaa !2452
  store i64 0, i64* %101, align 1, !tbaa !2452
  %929 = fsub double %919, %928
  store double %929, double* %69, align 1, !tbaa !2452
  store i64 0, i64* %93, align 1, !tbaa !2452
  %930 = add i64 %909, -40
  %931 = add i64 %911, 31
  store i64 %931, i64* %PC, align 8
  %932 = inttoptr i64 %930 to i64*
  %933 = load i64, i64* %932, align 8
  store i64 %933, i64* %RAX, align 8, !tbaa !2428
  %934 = add i64 %909, -100
  %935 = add i64 %911, 34
  store i64 %935, i64* %PC, align 8
  %936 = inttoptr i64 %934 to i32*
  %937 = load i32, i32* %936, align 4
  %938 = shl i32 %937, 1
  %939 = icmp slt i32 %937, 0
  %940 = icmp slt i32 %938, 0
  %941 = xor i1 %939, %940
  %942 = zext i32 %938 to i64
  store i64 %942, i64* %RCX, align 8, !tbaa !2428
  %.lobit32 = lshr i32 %937, 31
  %943 = trunc i32 %.lobit32 to i8
  store i8 %943, i8* %19, align 1, !tbaa !2432
  %944 = and i32 %938, 254
  %945 = tail call i32 @llvm.ctpop.i32(i32 %944) #11
  %946 = trunc i32 %945 to i8
  %947 = and i8 %946, 1
  %948 = xor i8 %947, 1
  store i8 %948, i8* %26, align 1, !tbaa !2432
  store i8 0, i8* %31, align 1, !tbaa !2432
  %949 = icmp eq i32 %938, 0
  %950 = zext i1 %949 to i8
  store i8 %950, i8* %34, align 1, !tbaa !2432
  %951 = lshr i32 %937, 30
  %952 = trunc i32 %951 to i8
  %953 = and i8 %952, 1
  store i8 %953, i8* %37, align 1, !tbaa !2432
  %954 = zext i1 %941 to i8
  store i8 %954, i8* %43, align 1, !tbaa !2432
  %955 = sext i32 %938 to i64
  store i64 %955, i64* %RDX, align 8, !tbaa !2428
  %956 = shl nsw i64 %955, 3
  %957 = add i64 %956, %933
  %958 = add i64 %911, 45
  store i64 %958, i64* %PC, align 8
  %959 = inttoptr i64 %957 to double*
  store double %929, double* %959, align 8
  %960 = load i64, i64* %RBP, align 8
  %961 = add i64 %960, -112
  %962 = load i64, i64* %PC, align 8
  %963 = add i64 %962, 5
  store i64 %963, i64* %PC, align 8
  %964 = inttoptr i64 %961 to double*
  %965 = load double, double* %964, align 8
  store double %965, double* %69, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %966 = add i64 %960, -136
  %967 = add i64 %962, 13
  store i64 %967, i64* %PC, align 8
  %968 = inttoptr i64 %966 to double*
  %969 = load double, double* %968, align 8
  %970 = fmul double %965, %969
  store double %970, double* %69, align 1, !tbaa !2452
  store i64 0, i64* %93, align 1, !tbaa !2452
  %971 = add i64 %960, -128
  %972 = add i64 %962, 18
  store i64 %972, i64* %PC, align 8
  %973 = inttoptr i64 %971 to double*
  %974 = load double, double* %973, align 8
  store double %974, double* %100, align 1, !tbaa !2452
  store double 0.000000e+00, double* %102, align 1, !tbaa !2452
  %975 = add i64 %960, -120
  %976 = add i64 %962, 23
  store i64 %976, i64* %PC, align 8
  %977 = inttoptr i64 %975 to double*
  %978 = load double, double* %977, align 8
  %979 = fmul double %974, %978
  store double %979, double* %100, align 1, !tbaa !2452
  store i64 0, i64* %101, align 1, !tbaa !2452
  %980 = fadd double %970, %979
  store double %980, double* %69, align 1, !tbaa !2452
  store i64 0, i64* %93, align 1, !tbaa !2452
  %981 = add i64 %960, -40
  %982 = add i64 %962, 31
  store i64 %982, i64* %PC, align 8
  %983 = inttoptr i64 %981 to i64*
  %984 = load i64, i64* %983, align 8
  store i64 %984, i64* %RAX, align 8, !tbaa !2428
  %985 = add i64 %960, -100
  %986 = add i64 %962, 34
  store i64 %986, i64* %PC, align 8
  %987 = inttoptr i64 %985 to i32*
  %988 = load i32, i32* %987, align 4
  %989 = shl i32 %988, 1
  %990 = lshr i32 %988, 30
  %991 = and i32 %990, 1
  %992 = or i32 %989, 1
  %993 = zext i32 %992 to i64
  store i64 %993, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2433
  %994 = and i32 %992, 255
  %995 = tail call i32 @llvm.ctpop.i32(i32 %994) #11
  %996 = trunc i32 %995 to i8
  %997 = and i8 %996, 1
  %998 = xor i8 %997, 1
  store i8 %998, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %31, align 1, !tbaa !2451
  store i8 0, i8* %34, align 1, !tbaa !2448
  %999 = trunc i32 %991 to i8
  store i8 %999, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  %1000 = sext i32 %992 to i64
  store i64 %1000, i64* %RDX, align 8, !tbaa !2428
  %1001 = shl nsw i64 %1000, 3
  %1002 = add i64 %1001, %984
  %1003 = add i64 %962, 48
  store i64 %1003, i64* %PC, align 8
  %1004 = inttoptr i64 %1002 to double*
  store double %980, double* %1004, align 8
  %1005 = load i64, i64* %RBP, align 8
  %1006 = add i64 %1005, -100
  %1007 = load i64, i64* %PC, align 8
  %1008 = add i64 %1007, 3
  store i64 %1008, i64* %PC, align 8
  %1009 = inttoptr i64 %1006 to i32*
  %1010 = load i32, i32* %1009, align 4
  %1011 = add i32 %1010, 1
  %1012 = zext i32 %1011 to i64
  store i64 %1012, i64* %RAX, align 8, !tbaa !2428
  %1013 = icmp eq i32 %1010, -1
  %1014 = icmp eq i32 %1011, 0
  %1015 = or i1 %1013, %1014
  %1016 = zext i1 %1015 to i8
  store i8 %1016, i8* %19, align 1, !tbaa !2433
  %1017 = and i32 %1011, 255
  %1018 = tail call i32 @llvm.ctpop.i32(i32 %1017) #11
  %1019 = trunc i32 %1018 to i8
  %1020 = and i8 %1019, 1
  %1021 = xor i8 %1020, 1
  store i8 %1021, i8* %26, align 1, !tbaa !2447
  %1022 = xor i32 %1010, %1011
  %1023 = lshr i32 %1022, 4
  %1024 = trunc i32 %1023 to i8
  %1025 = and i8 %1024, 1
  store i8 %1025, i8* %31, align 1, !tbaa !2451
  %1026 = zext i1 %1014 to i8
  store i8 %1026, i8* %34, align 1, !tbaa !2448
  %1027 = lshr i32 %1011, 31
  %1028 = trunc i32 %1027 to i8
  store i8 %1028, i8* %37, align 1, !tbaa !2449
  %1029 = lshr i32 %1010, 31
  %1030 = xor i32 %1027, %1029
  %1031 = add nuw nsw i32 %1030, %1027
  %1032 = icmp eq i32 %1031, 2
  %1033 = zext i1 %1032 to i8
  store i8 %1033, i8* %43, align 1, !tbaa !2450
  %1034 = add i64 %1007, 9
  store i64 %1034, i64* %PC, align 8
  store i32 %1011, i32* %1009, align 4
  %1035 = load i64, i64* %PC, align 8
  %1036 = add i64 %1035, -216
  store i64 %1036, i64* %PC, align 8, !tbaa !2428
  br label %block_400b37

block_400cc2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  store i32 0, i32* %373, align 1, !tbaa !2459
  store i32 0, i32* %375, align 1, !tbaa !2459
  store i32 0, i32* %376, align 1, !tbaa !2459
  store i32 0, i32* %378, align 1, !tbaa !2459
  %1037 = load i64, i64* %RBP, align 8
  %1038 = add i64 %593, 11
  store i64 %1038, i64* %PC, align 8
  %1039 = load double, double* %69, align 1
  br label %block_400cd2

block_400c3d:                                     ; preds = %block_400ad6
  %1040 = add i64 %624, 419
  %1041 = add i64 %624, 5
  %1042 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1043 = add i64 %1042, -8
  %1044 = inttoptr i64 %1043 to i64*
  store i64 %1041, i64* %1044, align 8
  store i64 %1043, i64* %RSP, align 8, !tbaa !2428
  store i64 %1040, i64* %PC, align 8, !tbaa !2428
  %1045 = tail call %struct.Memory* @sub_400de0_get_time_renamed_(%struct.State* nonnull %0, i64 %1040, %struct.Memory* %MEMORY.0)
  %1046 = load i64, i64* %RBP, align 8
  %1047 = add i64 %1046, -72
  %1048 = load i64, i64* %PC, align 8
  %1049 = add i64 %1048, 5
  store i64 %1049, i64* %PC, align 8
  %1050 = load i64, i64* %70, align 1
  %1051 = inttoptr i64 %1047 to i64*
  store i64 %1050, i64* %1051, align 8
  %1052 = load i64, i64* %RBP, align 8
  %1053 = add i64 %1052, -72
  %1054 = load i64, i64* %PC, align 8
  %1055 = add i64 %1054, 5
  store i64 %1055, i64* %PC, align 8
  %1056 = inttoptr i64 %1053 to double*
  %1057 = load double, double* %1056, align 8
  store double %1057, double* %69, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %1058 = add i64 %1052, -64
  %1059 = add i64 %1054, 10
  store i64 %1059, i64* %PC, align 8
  %1060 = inttoptr i64 %1058 to double*
  %1061 = load double, double* %1060, align 8
  %1062 = fsub double %1057, %1061
  store double %1062, double* %69, align 1, !tbaa !2452
  store i64 0, i64* %93, align 1, !tbaa !2452
  %1063 = add i64 %1052, -80
  %1064 = add i64 %1054, 15
  store i64 %1064, i64* %PC, align 8
  %1065 = inttoptr i64 %1063 to double*
  %1066 = load double, double* %1065, align 8
  %1067 = fsub double %1062, %1066
  store double %1067, double* %69, align 1, !tbaa !2452
  store i64 0, i64* %93, align 1, !tbaa !2452
  %1068 = add i64 %1052, -88
  %1069 = add i64 %1054, 20
  store i64 %1069, i64* %PC, align 8
  %1070 = inttoptr i64 %1068 to double*
  %1071 = load double, double* %1070, align 8
  %1072 = fadd double %1067, %1071
  store double %1072, double* %69, align 1, !tbaa !2452
  store i64 0, i64* %93, align 1, !tbaa !2452
  %1073 = add i64 %1054, 25
  store i64 %1073, i64* %PC, align 8
  store double %1072, double* %1070, align 8
  %1074 = load i64, i64* %RBP, align 8
  %1075 = add i64 %1074, -12
  %1076 = load i64, i64* %PC, align 8
  %1077 = add i64 %1076, 7
  store i64 %1077, i64* %PC, align 8
  %1078 = inttoptr i64 %1075 to i32*
  store i32 0, i32* %1078, align 4
  %1079 = bitcast %union.VectorReg* %7 to i32*
  %1080 = getelementptr inbounds i8, i8* %95, i64 4
  %1081 = bitcast i8* %1080 to i32*
  %1082 = bitcast i64* %101 to i32*
  %1083 = getelementptr inbounds i8, i8* %95, i64 12
  %1084 = bitcast i8* %1083 to i32*
  %1085 = bitcast %union.VectorReg* %9 to i8*
  %1086 = getelementptr inbounds i8, i8* %1085, i64 4
  %1087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 3, i32 0, i32 0, i32 0, i64 1
  %1088 = getelementptr inbounds i8, i8* %1085, i64 12
  %1089 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  %1090 = bitcast %union.VectorReg* %7 to <2 x i32>*
  %1091 = bitcast i64* %101 to <2 x i32>*
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_400c67

block_400b37:                                     ; preds = %block_400b44, %block_400ae3
  %1092 = phi i64 [ %1036, %block_400b44 ], [ %.pre7, %block_400ae3 ]
  %1093 = load i64, i64* %RBP, align 8
  %1094 = add i64 %1093, -100
  %1095 = add i64 %1092, 7
  store i64 %1095, i64* %PC, align 8
  %1096 = inttoptr i64 %1094 to i32*
  %1097 = load i32, i32* %1096, align 4
  %1098 = add i32 %1097, -1024
  %1099 = icmp ult i32 %1097, 1024
  %1100 = zext i1 %1099 to i8
  store i8 %1100, i8* %19, align 1, !tbaa !2433
  %1101 = and i32 %1098, 255
  %1102 = tail call i32 @llvm.ctpop.i32(i32 %1101) #11
  %1103 = trunc i32 %1102 to i8
  %1104 = and i8 %1103, 1
  %1105 = xor i8 %1104, 1
  store i8 %1105, i8* %26, align 1, !tbaa !2447
  %1106 = xor i32 %1097, %1098
  %1107 = lshr i32 %1106, 4
  %1108 = trunc i32 %1107 to i8
  %1109 = and i8 %1108, 1
  store i8 %1109, i8* %31, align 1, !tbaa !2451
  %1110 = icmp eq i32 %1098, 0
  %1111 = zext i1 %1110 to i8
  store i8 %1111, i8* %34, align 1, !tbaa !2448
  %1112 = lshr i32 %1098, 31
  %1113 = trunc i32 %1112 to i8
  store i8 %1113, i8* %37, align 1, !tbaa !2449
  %1114 = lshr i32 %1097, 31
  %1115 = xor i32 %1112, %1114
  %1116 = add nuw nsw i32 %1115, %1114
  %1117 = icmp eq i32 %1116, 2
  %1118 = zext i1 %1117 to i8
  store i8 %1118, i8* %43, align 1, !tbaa !2450
  %1119 = icmp ne i8 %1113, 0
  %1120 = xor i1 %1119, %1117
  %.v30 = select i1 %1120, i64 13, i64 221
  %1121 = add i64 %1092, %.v30
  store i64 %1121, i64* %PC, align 8, !tbaa !2428
  br i1 %1120, label %block_400b44, label %block_400c14

block_400a3c:                                     ; preds = %block_400a2f
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %1122 = add i64 %1454, -32
  %1123 = add i64 %1482, 14
  store i64 %1123, i64* %PC, align 8
  %1124 = inttoptr i64 %1122 to i64*
  %1125 = load i64, i64* %1124, align 8
  store i64 %1125, i64* %RCX, align 8, !tbaa !2428
  %1126 = add i64 %1482, 17
  store i64 %1126, i64* %PC, align 8
  %1127 = load i32, i32* %1457, align 4
  %1128 = shl i32 %1127, 1
  %1129 = lshr i32 %1127, 30
  %1130 = and i32 %1129, 1
  %1131 = or i32 %1128, 1
  %1132 = zext i32 %1131 to i64
  store i64 %1132, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2433
  %1133 = and i32 %1131, 255
  %1134 = tail call i32 @llvm.ctpop.i32(i32 %1133) #11
  %1135 = trunc i32 %1134 to i8
  %1136 = and i8 %1135, 1
  %1137 = xor i8 %1136, 1
  store i8 %1137, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %31, align 1, !tbaa !2451
  store i8 0, i8* %34, align 1, !tbaa !2448
  %1138 = trunc i32 %1130 to i8
  store i8 %1138, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  %1139 = sext i32 %1131 to i64
  store i64 %1139, i64* %RSI, align 8, !tbaa !2428
  %1140 = shl nsw i64 %1139, 3
  %1141 = add i64 %1140, %1125
  %1142 = add i64 %1482, 31
  store i64 %1142, i64* %PC, align 8
  %1143 = inttoptr i64 %1141 to i64*
  %1144 = load i64, i64* %1143, align 8
  %1145 = xor i64 %1144, -9223372036854775808
  store i64 %1145, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2433
  %1146 = trunc i64 %1144 to i32
  %1147 = and i32 %1146, 255
  %1148 = tail call i32 @llvm.ctpop.i32(i32 %1147) #11
  %1149 = trunc i32 %1148 to i8
  %1150 = and i8 %1149, 1
  %1151 = xor i8 %1150, 1
  store i8 %1151, i8* %26, align 1, !tbaa !2447
  %1152 = icmp eq i64 %1145, 0
  %1153 = zext i1 %1152 to i8
  store i8 %1153, i8* %34, align 1, !tbaa !2448
  %1154 = lshr i64 %1145, 63
  %1155 = trunc i64 %1154 to i8
  store i8 %1155, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  store i8 0, i8* %31, align 1, !tbaa !2451
  store i64 %1145, i64* %70, align 1, !tbaa !2428
  store i64 0, i64* %93, align 1, !tbaa !2428
  %1156 = add i64 %1482, 48
  store i64 %1156, i64* %PC, align 8
  %1157 = load i64, i64* %1124, align 8
  store i64 %1157, i64* %RAX, align 8, !tbaa !2428
  %1158 = add i64 %1482, 51
  store i64 %1158, i64* %PC, align 8
  %1159 = load i32, i32* %1457, align 4
  %1160 = shl i32 %1159, 1
  %1161 = lshr i32 %1159, 30
  %1162 = and i32 %1161, 1
  %1163 = or i32 %1160, 1
  %1164 = zext i32 %1163 to i64
  store i64 %1164, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2433
  %1165 = and i32 %1163, 255
  %1166 = tail call i32 @llvm.ctpop.i32(i32 %1165) #11
  %1167 = trunc i32 %1166 to i8
  %1168 = and i8 %1167, 1
  %1169 = xor i8 %1168, 1
  store i8 %1169, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %31, align 1, !tbaa !2451
  store i8 0, i8* %34, align 1, !tbaa !2448
  %1170 = trunc i32 %1162 to i8
  store i8 %1170, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  %1171 = sext i32 %1163 to i64
  store i64 %1171, i64* %RCX, align 8, !tbaa !2428
  %1172 = shl nsw i64 %1171, 3
  %1173 = add i64 %1172, %1157
  %1174 = add i64 %1482, 65
  store i64 %1174, i64* %PC, align 8
  %1175 = inttoptr i64 %1173 to i64*
  store i64 %1145, i64* %1175, align 8
  %1176 = load i64, i64* %RBP, align 8
  %1177 = add i64 %1176, -12
  %1178 = load i64, i64* %PC, align 8
  %1179 = add i64 %1178, 3
  store i64 %1179, i64* %PC, align 8
  %1180 = inttoptr i64 %1177 to i32*
  %1181 = load i32, i32* %1180, align 4
  %1182 = add i32 %1181, 1
  %1183 = zext i32 %1182 to i64
  store i64 %1183, i64* %RAX, align 8, !tbaa !2428
  %1184 = icmp eq i32 %1181, -1
  %1185 = icmp eq i32 %1182, 0
  %1186 = or i1 %1184, %1185
  %1187 = zext i1 %1186 to i8
  store i8 %1187, i8* %19, align 1, !tbaa !2433
  %1188 = and i32 %1182, 255
  %1189 = tail call i32 @llvm.ctpop.i32(i32 %1188) #11
  %1190 = trunc i32 %1189 to i8
  %1191 = and i8 %1190, 1
  %1192 = xor i8 %1191, 1
  store i8 %1192, i8* %26, align 1, !tbaa !2447
  %1193 = xor i32 %1181, %1182
  %1194 = lshr i32 %1193, 4
  %1195 = trunc i32 %1194 to i8
  %1196 = and i8 %1195, 1
  store i8 %1196, i8* %31, align 1, !tbaa !2451
  %1197 = zext i1 %1185 to i8
  store i8 %1197, i8* %34, align 1, !tbaa !2448
  %1198 = lshr i32 %1182, 31
  %1199 = trunc i32 %1198 to i8
  store i8 %1199, i8* %37, align 1, !tbaa !2449
  %1200 = lshr i32 %1181, 31
  %1201 = xor i32 %1198, %1200
  %1202 = add nuw nsw i32 %1201, %1198
  %1203 = icmp eq i32 %1202, 2
  %1204 = zext i1 %1203 to i8
  store i8 %1204, i8* %43, align 1, !tbaa !2450
  %1205 = add i64 %1178, 9
  store i64 %1205, i64* %PC, align 8
  store i32 %1182, i32* %1180, align 4
  %1206 = load i64, i64* %PC, align 8
  %1207 = add i64 %1206, -87
  store i64 %1207, i64* %PC, align 8, !tbaa !2428
  br label %block_400a2f

block_4009b2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  store i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 112), i64* %RDI, align 8, !tbaa !2428
  %1208 = load i64, i64* %RBP, align 8
  %1209 = add i64 %1208, -96
  %1210 = add i64 %410, 15
  store i64 %1210, i64* %PC, align 8
  %1211 = inttoptr i64 %1209 to i64*
  %1212 = load i64, i64* %1211, align 8
  store i64 %1212, i64* %70, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  store i8 1, i8* %AL, align 1, !tbaa !2432
  %1213 = add i64 %410, -802
  %1214 = add i64 %410, 22
  %1215 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1216 = add i64 %1215, -8
  %1217 = inttoptr i64 %1216 to i64*
  store i64 %1214, i64* %1217, align 8
  store i64 %1216, i64* %RSP, align 8, !tbaa !2428
  store i64 %1213, i64* %PC, align 8, !tbaa !2428
  %1218 = tail call fastcc %struct.Memory* @ext_6050a0_printf(%struct.State* nonnull %0, %struct.Memory* %405)
  %1219 = load i64, i64* %RBP, align 8
  %1220 = add i64 %1219, -156
  %1221 = load i32, i32* %EAX, align 4
  %1222 = load i64, i64* %PC, align 8
  %1223 = add i64 %1222, 6
  store i64 %1223, i64* %PC, align 8
  %1224 = inttoptr i64 %1220 to i32*
  store i32 %1221, i32* %1224, align 4
  %1225 = load i64, i64* %PC, align 8
  %1226 = add i64 %1225, -862
  %1227 = add i64 %1225, 5
  %1228 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1229 = add i64 %1228, -8
  %1230 = inttoptr i64 %1229 to i64*
  store i64 %1227, i64* %1230, align 8
  store i64 %1229, i64* %RSP, align 8, !tbaa !2428
  store i64 %1226, i64* %PC, align 8, !tbaa !2428
  %1231 = tail call fastcc %struct.Memory* @ext_400670_abort(%struct.State* nonnull %0, %struct.Memory* %1218)
  %1232 = load i64, i64* %PC, align 8
  %1233 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %1232, %struct.Memory* %1231)
  ret %struct.Memory* %1233

block_400ca3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit1
  %1234 = load i64, i64* %RBP, align 8
  %1235 = add i64 %1234, -40
  %1236 = add i64 %593, 4
  store i64 %1236, i64* %PC, align 8
  %1237 = inttoptr i64 %1235 to i64*
  %1238 = load i64, i64* %1237, align 8
  store i64 %1238, i64* %RAX, align 8, !tbaa !2428
  %1239 = add i64 %1234, -12
  %1240 = add i64 %593, 7
  store i64 %1240, i64* %PC, align 8
  %1241 = inttoptr i64 %1239 to i32*
  %1242 = load i32, i32* %1241, align 4
  %1243 = shl i32 %1242, 1
  %1244 = icmp slt i32 %1242, 0
  %1245 = icmp slt i32 %1243, 0
  %1246 = xor i1 %1244, %1245
  %1247 = zext i32 %1243 to i64
  store i64 %1247, i64* %RCX, align 8, !tbaa !2428
  %.lobit36 = lshr i32 %1242, 31
  %1248 = trunc i32 %.lobit36 to i8
  store i8 %1248, i8* %19, align 1, !tbaa !2432
  %1249 = and i32 %1243, 254
  %1250 = tail call i32 @llvm.ctpop.i32(i32 %1249) #11
  %1251 = trunc i32 %1250 to i8
  %1252 = and i8 %1251, 1
  %1253 = xor i8 %1252, 1
  store i8 %1253, i8* %26, align 1, !tbaa !2432
  store i8 0, i8* %31, align 1, !tbaa !2432
  %1254 = icmp eq i32 %1243, 0
  %1255 = zext i1 %1254 to i8
  store i8 %1255, i8* %34, align 1, !tbaa !2432
  %1256 = lshr i32 %1242, 30
  %1257 = trunc i32 %1256 to i8
  %1258 = and i8 %1257, 1
  store i8 %1258, i8* %37, align 1, !tbaa !2432
  %1259 = zext i1 %1246 to i8
  store i8 %1259, i8* %43, align 1, !tbaa !2432
  %1260 = sext i32 %1243 to i64
  store i64 %1260, i64* %RDX, align 8, !tbaa !2428
  %1261 = shl nsw i64 %1260, 3
  %1262 = add i64 %1261, %1238
  %1263 = add i64 %593, 18
  store i64 %1263, i64* %PC, align 8
  %1264 = inttoptr i64 %1262 to double*
  %1265 = load double, double* %1264, align 8
  store double %1265, double* %69, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %1266 = add i64 %593, 26
  store i64 %1266, i64* %PC, align 8
  br label %block_400cd2

block_400d14:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %1267 = load i64, i64* %RBP, align 8
  %1268 = add i64 %1267, -40
  %1269 = add i64 %709, 4
  store i64 %1269, i64* %PC, align 8
  %1270 = inttoptr i64 %1268 to i64*
  %1271 = load i64, i64* %1270, align 8
  store i64 %1271, i64* %RAX, align 8, !tbaa !2428
  %1272 = add i64 %1267, -12
  %1273 = add i64 %709, 7
  store i64 %1273, i64* %PC, align 8
  %1274 = inttoptr i64 %1272 to i32*
  %1275 = load i32, i32* %1274, align 4
  %1276 = shl i32 %1275, 1
  %1277 = lshr i32 %1275, 30
  %1278 = and i32 %1277, 1
  %1279 = or i32 %1276, 1
  %1280 = zext i32 %1279 to i64
  store i64 %1280, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2433
  %1281 = and i32 %1279, 255
  %1282 = tail call i32 @llvm.ctpop.i32(i32 %1281) #11
  %1283 = trunc i32 %1282 to i8
  %1284 = and i8 %1283, 1
  %1285 = xor i8 %1284, 1
  store i8 %1285, i8* %26, align 1, !tbaa !2447
  store i8 0, i8* %31, align 1, !tbaa !2451
  store i8 0, i8* %34, align 1, !tbaa !2448
  %1286 = trunc i32 %1278 to i8
  store i8 %1286, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  %1287 = sext i32 %1279 to i64
  store i64 %1287, i64* %RDX, align 8, !tbaa !2428
  %1288 = shl nsw i64 %1287, 3
  %1289 = add i64 %1288, %1271
  %1290 = add i64 %709, 21
  store i64 %1290, i64* %PC, align 8
  %1291 = inttoptr i64 %1289 to double*
  %1292 = load double, double* %1291, align 8
  store double %1292, double* %69, align 1, !tbaa !2452
  store double 0.000000e+00, double* %94, align 1, !tbaa !2452
  %1293 = add i64 %709, 29
  store i64 %1293, i64* %PC, align 8
  br label %block_400d46

block_400d8e:                                     ; preds = %block_400c67
  %1294 = add i64 %1545, -32
  %1295 = add i64 %1573, 4
  store i64 %1295, i64* %PC, align 8
  %1296 = inttoptr i64 %1294 to i64*
  %1297 = load i64, i64* %1296, align 8
  store i64 %1297, i64* %RAX, align 8, !tbaa !2428
  store i64 %1297, i64* %RDI, align 8, !tbaa !2428
  %1298 = add i64 %1573, -1838
  %1299 = add i64 %1573, 12
  %1300 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1301 = add i64 %1300, -8
  %1302 = inttoptr i64 %1301 to i64*
  store i64 %1299, i64* %1302, align 8
  store i64 %1301, i64* %RSP, align 8, !tbaa !2428
  store i64 %1298, i64* %PC, align 8, !tbaa !2428
  %1303 = tail call fastcc %struct.Memory* @ext_6050e8_free(%struct.State* nonnull %0, %struct.Memory* %MEMORY.5)
  %1304 = load i64, i64* %RBP, align 8
  %1305 = add i64 %1304, -56
  %1306 = load i64, i64* %PC, align 8
  %1307 = add i64 %1306, 4
  store i64 %1307, i64* %PC, align 8
  %1308 = inttoptr i64 %1305 to i64*
  %1309 = load i64, i64* %1308, align 8
  store i64 %1309, i64* %RAX, align 8, !tbaa !2428
  store i64 %1309, i64* %RDI, align 8, !tbaa !2428
  %1310 = add i64 %1306, -1850
  %1311 = add i64 %1306, 12
  %1312 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1313 = add i64 %1312, -8
  %1314 = inttoptr i64 %1313 to i64*
  store i64 %1311, i64* %1314, align 8
  store i64 %1313, i64* %RSP, align 8, !tbaa !2428
  store i64 %1310, i64* %PC, align 8, !tbaa !2428
  %1315 = tail call fastcc %struct.Memory* @ext_6050e8_free(%struct.State* nonnull %0, %struct.Memory* %1303)
  %1316 = load i64, i64* %RBP, align 8
  %1317 = add i64 %1316, -24
  %1318 = load i64, i64* %PC, align 8
  %1319 = add i64 %1318, 4
  store i64 %1319, i64* %PC, align 8
  %1320 = inttoptr i64 %1317 to i64*
  %1321 = load i64, i64* %1320, align 8
  store i64 %1321, i64* %RAX, align 8, !tbaa !2428
  store i64 %1321, i64* %RDI, align 8, !tbaa !2428
  %1322 = add i64 %1318, -1862
  %1323 = add i64 %1318, 12
  %1324 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1325 = add i64 %1324, -8
  %1326 = inttoptr i64 %1325 to i64*
  store i64 %1323, i64* %1326, align 8
  store i64 %1325, i64* %RSP, align 8, !tbaa !2428
  store i64 %1322, i64* %PC, align 8, !tbaa !2428
  %1327 = tail call fastcc %struct.Memory* @ext_6050e8_free(%struct.State* nonnull %0, %struct.Memory* %1315)
  %1328 = load i64, i64* %RBP, align 8
  %1329 = add i64 %1328, -40
  %1330 = load i64, i64* %PC, align 8
  %1331 = add i64 %1330, 4
  store i64 %1331, i64* %PC, align 8
  %1332 = inttoptr i64 %1329 to i64*
  %1333 = load i64, i64* %1332, align 8
  store i64 %1333, i64* %RAX, align 8, !tbaa !2428
  store i64 %1333, i64* %RDI, align 8, !tbaa !2428
  %1334 = add i64 %1330, -1874
  %1335 = add i64 %1330, 12
  %1336 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1337 = add i64 %1336, -8
  %1338 = inttoptr i64 %1337 to i64*
  store i64 %1335, i64* %1338, align 8
  store i64 %1337, i64* %RSP, align 8, !tbaa !2428
  store i64 %1334, i64* %PC, align 8, !tbaa !2428
  %1339 = tail call fastcc %struct.Memory* @ext_6050e8_free(%struct.State* nonnull %0, %struct.Memory* %1327)
  %1340 = load i64, i64* %RBP, align 8
  %1341 = add i64 %1340, -48
  %1342 = load i64, i64* %PC, align 8
  %1343 = add i64 %1342, 4
  store i64 %1343, i64* %PC, align 8
  %1344 = inttoptr i64 %1341 to i64*
  %1345 = load i64, i64* %1344, align 8
  store i64 %1345, i64* %RAX, align 8, !tbaa !2428
  store i64 %1345, i64* %RDI, align 8, !tbaa !2428
  %1346 = add i64 %1342, -1886
  %1347 = add i64 %1342, 12
  %1348 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1349 = add i64 %1348, -8
  %1350 = inttoptr i64 %1349 to i64*
  store i64 %1347, i64* %1350, align 8
  store i64 %1349, i64* %RSP, align 8, !tbaa !2428
  store i64 %1346, i64* %PC, align 8, !tbaa !2428
  %1351 = tail call fastcc %struct.Memory* @ext_6050e8_free(%struct.State* nonnull %0, %struct.Memory* %1339)
  %1352 = load i64, i64* %PC, align 8
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %1353 = load i64, i64* %RSP, align 8
  %1354 = add i64 %1353, 224
  store i64 %1354, i64* %RSP, align 8, !tbaa !2428
  %1355 = icmp ugt i64 %1353, -225
  %1356 = zext i1 %1355 to i8
  store i8 %1356, i8* %19, align 1, !tbaa !2433
  %1357 = trunc i64 %1354 to i32
  %1358 = and i32 %1357, 255
  %1359 = tail call i32 @llvm.ctpop.i32(i32 %1358) #11
  %1360 = trunc i32 %1359 to i8
  %1361 = and i8 %1360, 1
  %1362 = xor i8 %1361, 1
  store i8 %1362, i8* %26, align 1, !tbaa !2447
  %1363 = xor i64 %1353, %1354
  %1364 = lshr i64 %1363, 4
  %1365 = trunc i64 %1364 to i8
  %1366 = and i8 %1365, 1
  store i8 %1366, i8* %31, align 1, !tbaa !2451
  %1367 = icmp eq i64 %1354, 0
  %1368 = zext i1 %1367 to i8
  store i8 %1368, i8* %34, align 1, !tbaa !2448
  %1369 = lshr i64 %1354, 63
  %1370 = trunc i64 %1369 to i8
  store i8 %1370, i8* %37, align 1, !tbaa !2449
  %1371 = lshr i64 %1353, 63
  %1372 = xor i64 %1369, %1371
  %1373 = add nuw nsw i64 %1372, %1369
  %1374 = icmp eq i64 %1373, 2
  %1375 = zext i1 %1374 to i8
  store i8 %1375, i8* %43, align 1, !tbaa !2450
  %1376 = add i64 %1352, 10
  store i64 %1376, i64* %PC, align 8
  %1377 = add i64 %1353, 232
  %1378 = inttoptr i64 %1354 to i64*
  %1379 = load i64, i64* %1378, align 8
  store i64 %1379, i64* %RBP, align 8, !tbaa !2428
  store i64 %1377, i64* %RSP, align 8, !tbaa !2428
  %1380 = add i64 %1352, 11
  store i64 %1380, i64* %PC, align 8
  %1381 = inttoptr i64 %1377 to i64*
  %1382 = load i64, i64* %1381, align 8
  store i64 %1382, i64* %PC, align 8, !tbaa !2428
  %1383 = add i64 %1353, 240
  store i64 %1383, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %1351

block_4009d3:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit2
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2433
  store i8 1, i8* %26, align 1, !tbaa !2447
  store i8 1, i8* %34, align 1, !tbaa !2448
  store i8 0, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  store i8 0, i8* %31, align 1, !tbaa !2451
  store i64 1023, i64* %RSI, align 8, !tbaa !2428
  store i64 16384, i64* %RCX, align 8, !tbaa !2428
  store i64 16384, i64* %RDX, align 8, !tbaa !2428
  %1384 = load i64, i64* %RBP, align 8
  %1385 = add i64 %1384, -32
  %1386 = add i64 %410, 18
  store i64 %1386, i64* %PC, align 8
  %1387 = inttoptr i64 %1385 to i64*
  %1388 = load i64, i64* %1387, align 8
  store i64 %1388, i64* %RDI, align 8, !tbaa !2428
  %1389 = add i64 %1384, -160
  %1390 = add i64 %410, 24
  store i64 %1390, i64* %PC, align 8
  %1391 = inttoptr i64 %1389 to i32*
  store i32 1023, i32* %1391, align 4
  %1392 = load i32, i32* %EAX, align 4
  %1393 = zext i32 %1392 to i64
  %1394 = load i64, i64* %PC, align 8
  store i64 %1393, i64* %RSI, align 8, !tbaa !2428
  %1395 = load i64, i64* %RBP, align 8
  %1396 = add i64 %1395, -164
  %1397 = add i64 %1394, 8
  store i64 %1397, i64* %PC, align 8
  %1398 = inttoptr i64 %1396 to i32*
  store i32 %1392, i32* %1398, align 4
  %1399 = load i64, i64* %PC, align 8
  %1400 = add i64 %1399, -835
  %1401 = add i64 %1399, 5
  %1402 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1403 = add i64 %1402, -8
  %1404 = inttoptr i64 %1403 to i64*
  store i64 %1401, i64* %1404, align 8
  store i64 %1403, i64* %RSP, align 8, !tbaa !2428
  store i64 %1400, i64* %PC, align 8, !tbaa !2428
  %1405 = tail call fastcc %struct.Memory* @ext_605110_memset(%struct.State* nonnull %0, %struct.Memory* %405)
  %1406 = load i64, i64* %RBP, align 8
  %1407 = add i64 %1406, -32
  %1408 = load i64, i64* %PC, align 8
  %1409 = add i64 %1408, 4
  store i64 %1409, i64* %PC, align 8
  %1410 = inttoptr i64 %1407 to i64*
  %1411 = load i64, i64* %1410, align 8
  store i64 %1411, i64* %RDX, align 8, !tbaa !2428
  %1412 = add i64 %1406, -164
  %1413 = add i64 %1408, 10
  store i64 %1413, i64* %PC, align 8
  %1414 = inttoptr i64 %1412 to i32*
  %1415 = load i32, i32* %1414, align 4
  %1416 = zext i32 %1415 to i64
  store i64 %1416, i64* %RDI, align 8, !tbaa !2428
  %1417 = add i64 %1406, -160
  %1418 = add i64 %1408, 16
  store i64 %1418, i64* %PC, align 8
  %1419 = inttoptr i64 %1417 to i32*
  %1420 = load i32, i32* %1419, align 4
  %1421 = zext i32 %1420 to i64
  store i64 %1421, i64* %RSI, align 8, !tbaa !2428
  %1422 = add i64 %1408, 1464
  %1423 = add i64 %1408, 21
  %1424 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1425 = add i64 %1424, -8
  %1426 = inttoptr i64 %1425 to i64*
  store i64 %1423, i64* %1426, align 8
  store i64 %1425, i64* %RSP, align 8, !tbaa !2428
  store i64 %1422, i64* %PC, align 8, !tbaa !2428
  %1427 = tail call %struct.Memory* @sub_400fb0_putdata_renamed_(%struct.State* nonnull %0, i64 %1422, %struct.Memory* %1405)
  %1428 = load i64, i64* %PC, align 8
  store i64 2048, i64* %RDI, align 8, !tbaa !2428
  store i64 1, i64* %RSI, align 8, !tbaa !2428
  %1429 = load i64, i64* %RBP, align 8
  %1430 = add i64 %1429, -32
  %1431 = add i64 %1428, 14
  store i64 %1431, i64* %PC, align 8
  %1432 = inttoptr i64 %1430 to i64*
  %1433 = load i64, i64* %1432, align 8
  store i64 %1433, i64* %RDX, align 8, !tbaa !2428
  %1434 = add i64 %1429, -24
  %1435 = add i64 %1428, 18
  store i64 %1435, i64* %PC, align 8
  %1436 = inttoptr i64 %1434 to i64*
  %1437 = load i64, i64* %1436, align 8
  store i64 %1437, i64* %RCX, align 8, !tbaa !2428
  %1438 = add i64 %1429, -56
  %1439 = add i64 %1428, 22
  store i64 %1439, i64* %PC, align 8
  %1440 = inttoptr i64 %1438 to i64*
  %1441 = load i64, i64* %1440, align 8
  store i64 %1441, i64* %R8, align 8, !tbaa !2428
  %1442 = add i64 %1428, 1571
  %1443 = add i64 %1428, 27
  %1444 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1445 = add i64 %1444, -8
  %1446 = inttoptr i64 %1445 to i64*
  store i64 %1443, i64* %1446, align 8
  store i64 %1445, i64* %RSP, align 8, !tbaa !2428
  store i64 %1442, i64* %PC, align 8, !tbaa !2428
  %1447 = tail call %struct.Memory* @sub_401030_cdft_renamed_(%struct.State* nonnull %0, i64 %1442, %struct.Memory* %1427)
  %1448 = load i64, i64* %RBP, align 8
  %1449 = add i64 %1448, -12
  %1450 = load i64, i64* %PC, align 8
  %1451 = add i64 %1450, 7
  store i64 %1451, i64* %PC, align 8
  %1452 = inttoptr i64 %1449 to i32*
  store i32 0, i32* %1452, align 4
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_400a2f

block_400a2f:                                     ; preds = %block_4009d3, %block_400a3c
  %1453 = phi i64 [ %.pre5, %block_4009d3 ], [ %1207, %block_400a3c ]
  %1454 = load i64, i64* %RBP, align 8
  %1455 = add i64 %1454, -12
  %1456 = add i64 %1453, 7
  store i64 %1456, i64* %PC, align 8
  %1457 = inttoptr i64 %1455 to i32*
  %1458 = load i32, i32* %1457, align 4
  %1459 = add i32 %1458, -1024
  %1460 = icmp ult i32 %1458, 1024
  %1461 = zext i1 %1460 to i8
  store i8 %1461, i8* %19, align 1, !tbaa !2433
  %1462 = and i32 %1459, 255
  %1463 = tail call i32 @llvm.ctpop.i32(i32 %1462) #11
  %1464 = trunc i32 %1463 to i8
  %1465 = and i8 %1464, 1
  %1466 = xor i8 %1465, 1
  store i8 %1466, i8* %26, align 1, !tbaa !2447
  %1467 = xor i32 %1458, %1459
  %1468 = lshr i32 %1467, 4
  %1469 = trunc i32 %1468 to i8
  %1470 = and i8 %1469, 1
  store i8 %1470, i8* %31, align 1, !tbaa !2451
  %1471 = icmp eq i32 %1459, 0
  %1472 = zext i1 %1471 to i8
  store i8 %1472, i8* %34, align 1, !tbaa !2448
  %1473 = lshr i32 %1459, 31
  %1474 = trunc i32 %1473 to i8
  store i8 %1474, i8* %37, align 1, !tbaa !2449
  %1475 = lshr i32 %1458, 31
  %1476 = xor i32 %1473, %1475
  %1477 = add nuw nsw i32 %1476, %1475
  %1478 = icmp eq i32 %1477, 2
  %1479 = zext i1 %1478 to i8
  store i8 %1479, i8* %43, align 1, !tbaa !2450
  %1480 = icmp ne i8 %1474, 0
  %1481 = xor i1 %1480, %1478
  %.v28 = select i1 %1481, i64 13, i64 92
  %1482 = add i64 %1453, %.v28
  store i64 %1482, i64* %PC, align 8, !tbaa !2428
  br i1 %1481, label %block_400a3c, label %block_400a8b

block_400a8b:                                     ; preds = %block_400a2f
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %19, align 1, !tbaa !2433
  store i8 1, i8* %26, align 1, !tbaa !2447
  store i8 1, i8* %34, align 1, !tbaa !2448
  store i8 0, i8* %37, align 1, !tbaa !2449
  store i8 0, i8* %43, align 1, !tbaa !2450
  store i8 0, i8* %31, align 1, !tbaa !2451
  store i64 1023, i64* %RSI, align 8, !tbaa !2428
  store i64 16384, i64* %RCX, align 8, !tbaa !2428
  store i64 16384, i64* %RDX, align 8, !tbaa !2428
  %1483 = add i64 %1454, -48
  %1484 = add i64 %1482, 18
  store i64 %1484, i64* %PC, align 8
  %1485 = inttoptr i64 %1483 to i64*
  %1486 = load i64, i64* %1485, align 8
  store i64 %1486, i64* %RDI, align 8, !tbaa !2428
  %1487 = add i64 %1454, -168
  %1488 = add i64 %1482, 24
  store i64 %1488, i64* %PC, align 8
  %1489 = inttoptr i64 %1487 to i32*
  store i32 1023, i32* %1489, align 4
  %1490 = load i32, i32* %EAX, align 4
  %1491 = zext i32 %1490 to i64
  %1492 = load i64, i64* %PC, align 8
  store i64 %1491, i64* %RSI, align 8, !tbaa !2428
  %1493 = load i64, i64* %RBP, align 8
  %1494 = add i64 %1493, -172
  %1495 = add i64 %1492, 8
  store i64 %1495, i64* %PC, align 8
  %1496 = inttoptr i64 %1494 to i32*
  store i32 %1490, i32* %1496, align 4
  %1497 = load i64, i64* %PC, align 8
  %1498 = add i64 %1497, -1019
  %1499 = add i64 %1497, 5
  %1500 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1501 = add i64 %1500, -8
  %1502 = inttoptr i64 %1501 to i64*
  store i64 %1499, i64* %1502, align 8
  store i64 %1501, i64* %RSP, align 8, !tbaa !2428
  store i64 %1498, i64* %PC, align 8, !tbaa !2428
  %1503 = tail call fastcc %struct.Memory* @ext_605110_memset(%struct.State* nonnull %0, %struct.Memory* %1447)
  %1504 = load i64, i64* %RBP, align 8
  %1505 = add i64 %1504, -48
  %1506 = load i64, i64* %PC, align 8
  %1507 = add i64 %1506, 4
  store i64 %1507, i64* %PC, align 8
  %1508 = inttoptr i64 %1505 to i64*
  %1509 = load i64, i64* %1508, align 8
  store i64 %1509, i64* %RDX, align 8, !tbaa !2428
  %1510 = add i64 %1504, -172
  %1511 = add i64 %1506, 10
  store i64 %1511, i64* %PC, align 8
  %1512 = inttoptr i64 %1510 to i32*
  %1513 = load i32, i32* %1512, align 4
  %1514 = zext i32 %1513 to i64
  store i64 %1514, i64* %RDI, align 8, !tbaa !2428
  %1515 = add i64 %1504, -168
  %1516 = add i64 %1506, 16
  store i64 %1516, i64* %PC, align 8
  %1517 = inttoptr i64 %1515 to i32*
  %1518 = load i32, i32* %1517, align 4
  %1519 = zext i32 %1518 to i64
  store i64 %1519, i64* %RSI, align 8, !tbaa !2428
  %1520 = add i64 %1506, 1280
  %1521 = add i64 %1506, 21
  %1522 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1523 = add i64 %1522, -8
  %1524 = inttoptr i64 %1523 to i64*
  store i64 %1521, i64* %1524, align 8
  store i64 %1523, i64* %RSP, align 8, !tbaa !2428
  store i64 %1520, i64* %PC, align 8, !tbaa !2428
  %1525 = tail call %struct.Memory* @sub_400fb0_putdata_renamed_(%struct.State* nonnull %0, i64 %1520, %struct.Memory* %1503)
  %1526 = load i64, i64* %PC, align 8
  %1527 = add i64 %1526, 795
  %1528 = add i64 %1526, 5
  %1529 = load i64, i64* %RSP, align 8, !tbaa !2428
  %1530 = add i64 %1529, -8
  %1531 = inttoptr i64 %1530 to i64*
  store i64 %1528, i64* %1531, align 8
  store i64 %1530, i64* %RSP, align 8, !tbaa !2428
  store i64 %1527, i64* %PC, align 8, !tbaa !2428
  %1532 = tail call %struct.Memory* @sub_400de0_get_time_renamed_(%struct.State* nonnull %0, i64 %1527, %struct.Memory* %1525)
  %1533 = load i64, i64* %RBP, align 8
  %1534 = add i64 %1533, -64
  %1535 = load i64, i64* %PC, align 8
  %1536 = add i64 %1535, 5
  store i64 %1536, i64* %PC, align 8
  %1537 = load i64, i64* %70, align 1
  %1538 = inttoptr i64 %1534 to i64*
  store i64 %1537, i64* %1538, align 8
  %1539 = load i64, i64* %RBP, align 8
  %1540 = add i64 %1539, -8
  %1541 = load i64, i64* %PC, align 8
  %1542 = add i64 %1541, 7
  store i64 %1542, i64* %PC, align 8
  %1543 = inttoptr i64 %1540 to i32*
  store i32 0, i32* %1543, align 4
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_400ad6

block_400c67:                                     ; preds = %block_400c3d, %block_400d46
  %1544 = phi i64 [ %.pre8, %block_400c3d ], [ %780, %block_400d46 ]
  %MEMORY.5 = phi %struct.Memory* [ %1045, %block_400c3d ], [ %742, %block_400d46 ]
  %1545 = load i64, i64* %RBP, align 8
  %1546 = add i64 %1545, -12
  %1547 = add i64 %1544, 7
  store i64 %1547, i64* %PC, align 8
  %1548 = inttoptr i64 %1546 to i32*
  %1549 = load i32, i32* %1548, align 4
  %1550 = add i32 %1549, -1024
  %1551 = icmp ult i32 %1549, 1024
  %1552 = zext i1 %1551 to i8
  store i8 %1552, i8* %19, align 1, !tbaa !2433
  %1553 = and i32 %1550, 255
  %1554 = tail call i32 @llvm.ctpop.i32(i32 %1553) #11
  %1555 = trunc i32 %1554 to i8
  %1556 = and i8 %1555, 1
  %1557 = xor i8 %1556, 1
  store i8 %1557, i8* %26, align 1, !tbaa !2447
  %1558 = xor i32 %1549, %1550
  %1559 = lshr i32 %1558, 4
  %1560 = trunc i32 %1559 to i8
  %1561 = and i8 %1560, 1
  store i8 %1561, i8* %31, align 1, !tbaa !2451
  %1562 = icmp eq i32 %1550, 0
  %1563 = zext i1 %1562 to i8
  store i8 %1563, i8* %34, align 1, !tbaa !2448
  %1564 = lshr i32 %1550, 31
  %1565 = trunc i32 %1564 to i8
  store i8 %1565, i8* %37, align 1, !tbaa !2449
  %1566 = lshr i32 %1549, 31
  %1567 = xor i32 %1564, %1566
  %1568 = add nuw nsw i32 %1567, %1566
  %1569 = icmp eq i32 %1568, 2
  %1570 = zext i1 %1569 to i8
  store i8 %1570, i8* %43, align 1, !tbaa !2450
  %1571 = icmp ne i8 %1565, 0
  %1572 = xor i1 %1571, %1569
  %.v33 = select i1 %1572, i64 13, i64 295
  %1573 = add i64 %1544, %.v33
  store i64 %1573, i64* %PC, align 8, !tbaa !2428
  br i1 %1572, label %block_400c74, label %block_400d8e

block_400d36:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  store i32 0, i32* %373, align 1, !tbaa !2459
  store i32 0, i32* %375, align 1, !tbaa !2459
  store i32 0, i32* %376, align 1, !tbaa !2459
  store i32 0, i32* %378, align 1, !tbaa !2459
  %1574 = load i64, i64* %RBP, align 8
  %1575 = add i64 %709, 11
  store i64 %1575, i64* %PC, align 8
  %1576 = load double, double* %69, align 1
  br label %block_400d46
}

; Function Attrs: noinline
define %struct.Memory* @sub_400de0_get_time(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400de0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0
  %EAX = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %7 = load i64, i64* %RBP, align 8
  %8 = add i64 %1, 1
  store i64 %8, i64* %PC, align 8
  %9 = load i64, i64* %RSP, align 8, !tbaa !2428
  %10 = add i64 %9, -8
  %11 = inttoptr i64 %10 to i64*
  store i64 %7, i64* %11, align 8
  %12 = load i64, i64* %PC, align 8
  store i64 %10, i64* %RBP, align 8, !tbaa !2428
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %17 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %19 = add i64 %9, -24
  store i64 %19, i64* %RDI, align 8, !tbaa !2428
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  store i8 0, i8* %13, align 1, !tbaa !2433
  store i8 1, i8* %14, align 1, !tbaa !2447
  store i8 1, i8* %16, align 1, !tbaa !2448
  store i8 0, i8* %17, align 1, !tbaa !2449
  store i8 0, i8* %18, align 1, !tbaa !2450
  store i8 0, i8* %15, align 1, !tbaa !2451
  store i64 0, i64* %RSI, align 8, !tbaa !2428
  %20 = add i64 %12, -1857
  %21 = add i64 %12, 20
  %22 = add i64 %9, -48
  %23 = inttoptr i64 %22 to i64*
  store i64 %21, i64* %23, align 8
  store i64 %22, i64* %RSP, align 8, !tbaa !2428
  store i64 %20, i64* %PC, align 8, !tbaa !2428
  %24 = tail call fastcc %struct.Memory* @ext_4006a0_gettimeofday(%struct.State* nonnull %0, %struct.Memory* %2)
  %25 = bitcast [32 x %union.VectorReg]* %4 to i8*
  %26 = load i64, i64* %PC, align 8
  %27 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 56) to double*), align 8
  %28 = bitcast [32 x %union.VectorReg]* %4 to double*
  store double %27, double* %28, align 1, !tbaa !2452
  %29 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %30 = bitcast i64* %29 to double*
  store double 0.000000e+00, double* %30, align 1, !tbaa !2452
  %31 = load i64, i64* %RBP, align 8
  %32 = add i64 %31, -16
  %33 = add i64 %26, 12
  store i64 %33, i64* %PC, align 8
  %34 = inttoptr i64 %32 to i64*
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %RSI, align 8, !tbaa !2428
  %36 = sitofp i64 %35 to double
  %37 = bitcast %union.VectorReg* %5 to double*
  store double %36, double* %37, align 1, !tbaa !2452
  %38 = add i64 %31, -8
  %39 = add i64 %26, 21
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %38 to i64*
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %RSI, align 8, !tbaa !2428
  %42 = sitofp i64 %41 to double
  %43 = bitcast %union.VectorReg* %6 to double*
  %44 = fmul double %42, %27
  store double %44, double* %43, align 1, !tbaa !2452
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %46 = bitcast i64* %45 to <2 x i32>*
  %47 = load <2 x i32>, <2 x i32>* %46, align 1
  %48 = fadd double %36, %44
  store double %48, double* %37, align 1, !tbaa !2452
  %49 = bitcast double %48 to <2 x i32>
  %50 = extractelement <2 x i32> %49, i32 0
  %51 = bitcast [32 x %union.VectorReg]* %4 to i32*
  store i32 %50, i32* %51, align 1, !tbaa !2475
  %52 = extractelement <2 x i32> %49, i32 1
  %53 = getelementptr inbounds i8, i8* %25, i64 4
  %54 = bitcast i8* %53 to i32*
  store i32 %52, i32* %54, align 1, !tbaa !2475
  %55 = extractelement <2 x i32> %47, i32 0
  %56 = bitcast i64* %29 to i32*
  store i32 %55, i32* %56, align 1, !tbaa !2475
  %57 = extractelement <2 x i32> %47, i32 1
  %58 = getelementptr inbounds i8, i8* %25, i64 12
  %59 = bitcast i8* %58 to i32*
  store i32 %57, i32* %59, align 1, !tbaa !2475
  %60 = add i64 %31, -20
  %61 = load i32, i32* %EAX, align 4
  %62 = add i64 %26, 40
  store i64 %62, i64* %PC, align 8
  %63 = inttoptr i64 %60 to i32*
  store i32 %61, i32* %63, align 4
  %64 = load i64, i64* %RSP, align 8
  %65 = load i64, i64* %PC, align 8
  %66 = add i64 %64, 32
  store i64 %66, i64* %RSP, align 8, !tbaa !2428
  %67 = icmp ugt i64 %64, -33
  %68 = zext i1 %67 to i8
  store i8 %68, i8* %13, align 1, !tbaa !2433
  %69 = trunc i64 %66 to i32
  %70 = and i32 %69, 255
  %71 = tail call i32 @llvm.ctpop.i32(i32 %70) #11
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  store i8 %74, i8* %14, align 1, !tbaa !2447
  %75 = xor i64 %64, %66
  %76 = lshr i64 %75, 4
  %77 = trunc i64 %76 to i8
  %78 = and i8 %77, 1
  store i8 %78, i8* %15, align 1, !tbaa !2451
  %79 = icmp eq i64 %66, 0
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %16, align 1, !tbaa !2448
  %81 = lshr i64 %66, 63
  %82 = trunc i64 %81 to i8
  store i8 %82, i8* %17, align 1, !tbaa !2449
  %83 = lshr i64 %64, 63
  %84 = xor i64 %81, %83
  %85 = add nuw nsw i64 %84, %81
  %86 = icmp eq i64 %85, 2
  %87 = zext i1 %86 to i8
  store i8 %87, i8* %18, align 1, !tbaa !2450
  %88 = add i64 %65, 5
  store i64 %88, i64* %PC, align 8
  %89 = add i64 %64, 40
  %90 = inttoptr i64 %66 to i64*
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %RBP, align 8, !tbaa !2428
  store i64 %89, i64* %RSP, align 8, !tbaa !2428
  %92 = add i64 %65, 6
  store i64 %92, i64* %PC, align 8
  %93 = inttoptr i64 %89 to i64*
  %94 = load i64, i64* %93, align 8
  store i64 %94, i64* %PC, align 8, !tbaa !2428
  %95 = add i64 %64, 48
  store i64 %95, i64* %RSP, align 8, !tbaa !2428
  ret %struct.Memory* %24
}

; Function Attrs: noinline
define %struct.Memory* @sub_401be0_bitrv2conj(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_401be0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %3 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = load i64, i64* %RBP, align 8
  %6 = add i64 %1, 1
  store i64 %6, i64* %PC, align 8
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8 = load i64, i64* %7, align 8, !tbaa !2428
  %9 = add i64 %8, -8
  %10 = inttoptr i64 %9 to i64*
  store i64 %5, i64* %10, align 8
  store i64 %9, i64* %7, align 8, !tbaa !2428
  %11 = load i64, i64* %PC, align 8
  store i64 %9, i64* %RBP, align 8, !tbaa !2428
  %12 = add i64 %8, -12
  %13 = load i32, i32* %EDI, align 4
  %14 = add i64 %11, 6
  store i64 %14, i64* %PC, align 8
  %15 = inttoptr i64 %12 to i32*
  store i32 %13, i32* %15, align 4
  %16 = load i64, i64* %RBP, align 8
  %17 = add i64 %16, -16
  %18 = load i64, i64* %RSI, align 8
  %19 = load i64, i64* %PC, align 8
  %20 = add i64 %19, 4
  store i64 %20, i64* %PC, align 8
  %21 = inttoptr i64 %17 to i64*
  store i64 %18, i64* %21, align 8
  %22 = load i64, i64* %RBP, align 8
  %23 = add i64 %22, -24
  %24 = load i64, i64* %RDX, align 8
  %25 = load i64, i64* %PC, align 8
  %26 = add i64 %25, 4
  store i64 %26, i64* %PC, align 8
  %27 = inttoptr i64 %23 to i64*
  store i64 %24, i64* %27, align 8
  %28 = load i64, i64* %RBP, align 8
  %29 = add i64 %28, -16
  %30 = load i64, i64* %PC, align 8
  %31 = add i64 %30, 4
  store i64 %31, i64* %PC, align 8
  %32 = inttoptr i64 %29 to i64*
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %RDX, align 8, !tbaa !2428
  %34 = add i64 %30, 10
  store i64 %34, i64* %PC, align 8
  %35 = inttoptr i64 %33 to i32*
  store i32 0, i32* %35, align 4
  %36 = load i64, i64* %RBP, align 8
  %37 = add i64 %36, -4
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %38, 3
  store i64 %39, i64* %PC, align 8
  %40 = inttoptr i64 %37 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i64
  store i64 %42, i64* %RDI, align 8, !tbaa !2428
  %43 = add i64 %36, -44
  %44 = add i64 %38, 6
  store i64 %44, i64* %PC, align 8
  %45 = inttoptr i64 %43 to i32*
  store i32 %41, i32* %45, align 4
  %46 = load i64, i64* %RBP, align 8
  %47 = add i64 %46, -48
  %48 = load i64, i64* %PC, align 8
  %49 = add i64 %48, 7
  store i64 %49, i64* %PC, align 8
  %50 = inttoptr i64 %47 to i32*
  store i32 1, i32* %50, align 4
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %.pre = load i64, i64* %PC, align 8
  br label %block_401c06

block_4021ff:                                     ; preds = %block_40220b, %block_4021f8
  %57 = phi i64 [ %3671, %block_40220b ], [ %.pre8, %block_4021f8 ]
  %58 = load i64, i64* %RBP, align 8
  %59 = add i64 %58, -28
  %60 = add i64 %57, 3
  store i64 %60, i64* %PC, align 8
  %61 = inttoptr i64 %59 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  store i64 %63, i64* %RAX, align 8, !tbaa !2428
  %64 = add i64 %58, -36
  %65 = add i64 %57, 6
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %64 to i32*
  %67 = load i32, i32* %66, align 4
  %68 = sub i32 %62, %67
  %69 = icmp ult i32 %62, %67
  %70 = zext i1 %69 to i8
  store i8 %70, i8* %51, align 1, !tbaa !2433
  %71 = and i32 %68, 255
  %72 = tail call i32 @llvm.ctpop.i32(i32 %71) #11
  %73 = trunc i32 %72 to i8
  %74 = and i8 %73, 1
  %75 = xor i8 %74, 1
  store i8 %75, i8* %52, align 1, !tbaa !2447
  %76 = xor i32 %67, %62
  %77 = xor i32 %76, %68
  %78 = lshr i32 %77, 4
  %79 = trunc i32 %78 to i8
  %80 = and i8 %79, 1
  store i8 %80, i8* %53, align 1, !tbaa !2451
  %81 = icmp eq i32 %68, 0
  %82 = zext i1 %81 to i8
  store i8 %82, i8* %54, align 1, !tbaa !2448
  %83 = lshr i32 %68, 31
  %84 = trunc i32 %83 to i8
  store i8 %84, i8* %55, align 1, !tbaa !2449
  %85 = lshr i32 %62, 31
  %86 = lshr i32 %67, 31
  %87 = xor i32 %86, %85
  %88 = xor i32 %83, %85
  %89 = add nuw nsw i32 %88, %87
  %90 = icmp eq i32 %89, 2
  %91 = zext i1 %90 to i8
  store i8 %91, i8* %56, align 1, !tbaa !2450
  %92 = icmp ne i8 %84, 0
  %93 = xor i1 %92, %90
  %.v22 = select i1 %93, i64 12, i64 474
  %94 = add i64 %57, %.v22
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %95 = add i64 %94, 13
  store i64 %95, i64* %PC, align 8
  br i1 %93, label %block_40220b, label %block_4023d9

block_4021f8:                                     ; preds = %block_4021ec
  %96 = add i64 %2793, -28
  %97 = add i64 %2829, 7
  store i64 %97, i64* %PC, align 8
  %98 = inttoptr i64 %96 to i32*
  store i32 0, i32* %98, align 4
  %.pre8 = load i64, i64* %PC, align 8
  br label %block_4021ff

block_40246d:                                     ; preds = %block_4021ec
  %99 = add i64 %2829, 5
  br label %block_402472

block_401c6b:                                     ; preds = %block_401c06
  %100 = load i32, i32* %3676, align 4
  %101 = shl i32 %100, 1
  %102 = icmp slt i32 %100, 0
  %103 = icmp slt i32 %101, 0
  %104 = xor i1 %102, %103
  %105 = zext i32 %101 to i64
  store i64 %105, i64* %RAX, align 8, !tbaa !2428
  %.lobit11 = lshr i32 %100, 31
  %106 = trunc i32 %.lobit11 to i8
  store i8 %106, i8* %51, align 1, !tbaa !2432
  %107 = and i32 %101, 254
  %108 = tail call i32 @llvm.ctpop.i32(i32 %107) #11
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %112 = icmp eq i32 %101, 0
  %113 = zext i1 %112 to i8
  store i8 %113, i8* %54, align 1, !tbaa !2432
  %114 = lshr i32 %100, 30
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  store i8 %116, i8* %55, align 1, !tbaa !2432
  %117 = zext i1 %104 to i8
  store i8 %117, i8* %56, align 1, !tbaa !2432
  %118 = add i64 %3673, -52
  %119 = add i64 %3722, 9
  store i64 %119, i64* %PC, align 8
  %120 = inttoptr i64 %118 to i32*
  store i32 %101, i32* %120, align 4
  %121 = load i64, i64* %RBP, align 8
  %122 = add i64 %121, -48
  %123 = load i64, i64* %PC, align 8
  %124 = add i64 %123, 3
  store i64 %124, i64* %PC, align 8
  %125 = inttoptr i64 %122 to i32*
  %126 = load i32, i32* %125, align 4
  %127 = shl i32 %126, 3
  %128 = zext i32 %127 to i64
  store i64 %128, i64* %RAX, align 8, !tbaa !2428
  %129 = lshr i32 %126, 29
  %130 = trunc i32 %129 to i8
  %131 = and i8 %130, 1
  store i8 %131, i8* %51, align 1, !tbaa !2432
  %132 = and i32 %127, 248
  %133 = tail call i32 @llvm.ctpop.i32(i32 %132) #11
  %134 = trunc i32 %133 to i8
  %135 = and i8 %134, 1
  %136 = xor i8 %135, 1
  store i8 %136, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %137 = icmp eq i32 %127, 0
  %138 = zext i1 %137 to i8
  store i8 %138, i8* %54, align 1, !tbaa !2432
  %139 = lshr i32 %126, 28
  %140 = and i32 %139, 1
  %141 = trunc i32 %140 to i8
  store i8 %141, i8* %55, align 1, !tbaa !2432
  store i8 0, i8* %56, align 1, !tbaa !2432
  %142 = add i64 %121, -44
  %143 = add i64 %123, 9
  store i64 %143, i64* %PC, align 8
  %144 = inttoptr i64 %142 to i32*
  %145 = load i32, i32* %144, align 4
  %146 = sub i32 %127, %145
  %147 = icmp ult i32 %127, %145
  %148 = zext i1 %147 to i8
  store i8 %148, i8* %51, align 1, !tbaa !2433
  %149 = and i32 %146, 255
  %150 = tail call i32 @llvm.ctpop.i32(i32 %149) #11
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  %153 = xor i8 %152, 1
  store i8 %153, i8* %52, align 1, !tbaa !2447
  %154 = xor i32 %145, %127
  %155 = xor i32 %154, %146
  %156 = lshr i32 %155, 4
  %157 = trunc i32 %156 to i8
  %158 = and i8 %157, 1
  store i8 %158, i8* %53, align 1, !tbaa !2451
  %159 = icmp eq i32 %146, 0
  %160 = zext i1 %159 to i8
  store i8 %160, i8* %54, align 1, !tbaa !2448
  %161 = lshr i32 %146, 31
  %162 = trunc i32 %161 to i8
  store i8 %162, i8* %55, align 1, !tbaa !2449
  %163 = lshr i32 %145, 31
  %164 = xor i32 %163, %140
  %165 = xor i32 %161, %140
  %166 = add nuw nsw i32 %165, %164
  %167 = icmp eq i32 %166, 2
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %56, align 1, !tbaa !2450
  %.v13 = select i1 %159, i64 15, i64 1303
  %169 = add i64 %123, %.v13
  store i64 %169, i64* %PC, align 8, !tbaa !2428
  br i1 %159, label %block_401c83, label %block_40218b

block_401c5d:                                     ; preds = %block_401c25
  %170 = add i64 %2103, 3
  store i64 %170, i64* %PC, align 8
  %171 = load i32, i32* %2075, align 4
  %172 = shl i32 %171, 1
  %173 = icmp slt i32 %171, 0
  %174 = icmp slt i32 %172, 0
  %175 = xor i1 %173, %174
  %176 = zext i32 %172 to i64
  store i64 %176, i64* %RAX, align 8, !tbaa !2428
  %.lobit = lshr i32 %171, 31
  %177 = trunc i32 %.lobit to i8
  store i8 %177, i8* %51, align 1, !tbaa !2432
  %178 = and i32 %172, 254
  %179 = tail call i32 @llvm.ctpop.i32(i32 %178) #11
  %180 = trunc i32 %179 to i8
  %181 = and i8 %180, 1
  %182 = xor i8 %181, 1
  store i8 %182, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %183 = icmp eq i32 %172, 0
  %184 = zext i1 %183 to i8
  store i8 %184, i8* %54, align 1, !tbaa !2432
  %185 = lshr i32 %171, 30
  %186 = trunc i32 %185 to i8
  %187 = and i8 %186, 1
  store i8 %187, i8* %55, align 1, !tbaa !2432
  %188 = zext i1 %175 to i8
  store i8 %188, i8* %56, align 1, !tbaa !2432
  %189 = add i64 %2103, 9
  store i64 %189, i64* %PC, align 8
  store i32 %172, i32* %2075, align 4
  %190 = load i64, i64* %PC, align 8
  %191 = add i64 %190, -96
  store i64 %191, i64* %PC, align 8, !tbaa !2428
  br label %block_401c06

block_402186:                                     ; preds = %block_401c8a
  %192 = add i64 %2900, 748
  br label %block_402472

block_401c31:                                     ; preds = %block_401c25
  %193 = add i64 %2067, -16
  %194 = add i64 %2103, 4
  store i64 %194, i64* %PC, align 8
  %195 = inttoptr i64 %193 to i64*
  %196 = load i64, i64* %195, align 8
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = add i64 %2103, 8
  store i64 %197, i64* %PC, align 8
  %198 = load i32, i32* %2070, align 4
  %199 = sext i32 %198 to i64
  store i64 %199, i64* %RCX, align 8, !tbaa !2428
  %200 = shl nsw i64 %199, 2
  %201 = add i64 %200, %196
  %202 = add i64 %2103, 11
  store i64 %202, i64* %PC, align 8
  %203 = inttoptr i64 %201 to i32*
  %204 = load i32, i32* %203, align 4
  %205 = zext i32 %204 to i64
  store i64 %205, i64* %RDX, align 8, !tbaa !2428
  %206 = add i64 %2067, -44
  %207 = add i64 %2103, 14
  store i64 %207, i64* %PC, align 8
  %208 = inttoptr i64 %206 to i32*
  %209 = load i32, i32* %208, align 4
  %210 = add i32 %209, %204
  %211 = zext i32 %210 to i64
  store i64 %211, i64* %RDX, align 8, !tbaa !2428
  %212 = icmp ult i32 %210, %204
  %213 = icmp ult i32 %210, %209
  %214 = or i1 %212, %213
  %215 = zext i1 %214 to i8
  store i8 %215, i8* %51, align 1, !tbaa !2433
  %216 = and i32 %210, 255
  %217 = tail call i32 @llvm.ctpop.i32(i32 %216) #11
  %218 = trunc i32 %217 to i8
  %219 = and i8 %218, 1
  %220 = xor i8 %219, 1
  store i8 %220, i8* %52, align 1, !tbaa !2447
  %221 = xor i32 %209, %204
  %222 = xor i32 %221, %210
  %223 = lshr i32 %222, 4
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  store i8 %225, i8* %53, align 1, !tbaa !2451
  %226 = icmp eq i32 %210, 0
  %227 = zext i1 %226 to i8
  store i8 %227, i8* %54, align 1, !tbaa !2448
  %228 = lshr i32 %210, 31
  %229 = trunc i32 %228 to i8
  store i8 %229, i8* %55, align 1, !tbaa !2449
  %230 = lshr i32 %204, 31
  %231 = lshr i32 %209, 31
  %232 = xor i32 %228, %230
  %233 = xor i32 %228, %231
  %234 = add nuw nsw i32 %232, %233
  %235 = icmp eq i32 %234, 2
  %236 = zext i1 %235 to i8
  store i8 %236, i8* %56, align 1, !tbaa !2450
  %237 = add i64 %2103, 18
  store i64 %237, i64* %PC, align 8
  %238 = load i64, i64* %195, align 8
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = add i64 %2103, 21
  store i64 %239, i64* %PC, align 8
  %240 = load i32, i32* %2075, align 4
  %241 = zext i32 %240 to i64
  store i64 %241, i64* %RSI, align 8, !tbaa !2428
  %242 = add i64 %2103, 24
  store i64 %242, i64* %PC, align 8
  %243 = load i32, i32* %2070, align 4
  %244 = add i32 %243, %240
  %245 = zext i32 %244 to i64
  store i64 %245, i64* %RSI, align 8, !tbaa !2428
  %246 = icmp ult i32 %244, %240
  %247 = icmp ult i32 %244, %243
  %248 = or i1 %246, %247
  %249 = zext i1 %248 to i8
  store i8 %249, i8* %51, align 1, !tbaa !2433
  %250 = and i32 %244, 255
  %251 = tail call i32 @llvm.ctpop.i32(i32 %250) #11
  %252 = trunc i32 %251 to i8
  %253 = and i8 %252, 1
  %254 = xor i8 %253, 1
  store i8 %254, i8* %52, align 1, !tbaa !2447
  %255 = xor i32 %243, %240
  %256 = xor i32 %255, %244
  %257 = lshr i32 %256, 4
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  store i8 %259, i8* %53, align 1, !tbaa !2451
  %260 = icmp eq i32 %244, 0
  %261 = zext i1 %260 to i8
  store i8 %261, i8* %54, align 1, !tbaa !2448
  %262 = lshr i32 %244, 31
  %263 = trunc i32 %262 to i8
  store i8 %263, i8* %55, align 1, !tbaa !2449
  %264 = lshr i32 %240, 31
  %265 = lshr i32 %243, 31
  %266 = xor i32 %262, %264
  %267 = xor i32 %262, %265
  %268 = add nuw nsw i32 %266, %267
  %269 = icmp eq i32 %268, 2
  %270 = zext i1 %269 to i8
  store i8 %270, i8* %56, align 1, !tbaa !2450
  %271 = sext i32 %244 to i64
  store i64 %271, i64* %RCX, align 8, !tbaa !2428
  %272 = shl nsw i64 %271, 2
  %273 = add i64 %272, %238
  %274 = add i64 %2103, 30
  store i64 %274, i64* %PC, align 8
  %275 = inttoptr i64 %273 to i32*
  store i32 %210, i32* %275, align 4
  %276 = load i64, i64* %RBP, align 8
  %277 = add i64 %276, -28
  %278 = load i64, i64* %PC, align 8
  %279 = add i64 %278, 3
  store i64 %279, i64* %PC, align 8
  %280 = inttoptr i64 %277 to i32*
  %281 = load i32, i32* %280, align 4
  %282 = add i32 %281, 1
  %283 = zext i32 %282 to i64
  store i64 %283, i64* %RAX, align 8, !tbaa !2428
  %284 = icmp eq i32 %281, -1
  %285 = icmp eq i32 %282, 0
  %286 = or i1 %284, %285
  %287 = zext i1 %286 to i8
  store i8 %287, i8* %51, align 1, !tbaa !2433
  %288 = and i32 %282, 255
  %289 = tail call i32 @llvm.ctpop.i32(i32 %288) #11
  %290 = trunc i32 %289 to i8
  %291 = and i8 %290, 1
  %292 = xor i8 %291, 1
  store i8 %292, i8* %52, align 1, !tbaa !2447
  %293 = xor i32 %281, %282
  %294 = lshr i32 %293, 4
  %295 = trunc i32 %294 to i8
  %296 = and i8 %295, 1
  store i8 %296, i8* %53, align 1, !tbaa !2451
  %297 = zext i1 %285 to i8
  store i8 %297, i8* %54, align 1, !tbaa !2448
  %298 = lshr i32 %282, 31
  %299 = trunc i32 %298 to i8
  store i8 %299, i8* %55, align 1, !tbaa !2449
  %300 = lshr i32 %281, 31
  %301 = xor i32 %298, %300
  %302 = add nuw nsw i32 %301, %298
  %303 = icmp eq i32 %302, 2
  %304 = zext i1 %303 to i8
  store i8 %304, i8* %56, align 1, !tbaa !2450
  %305 = add i64 %278, 9
  store i64 %305, i64* %PC, align 8
  store i32 %282, i32* %280, align 4
  %306 = load i64, i64* %PC, align 8
  %307 = add i64 %306, -51
  store i64 %307, i64* %PC, align 8, !tbaa !2428
  br label %block_401c25

block_4023d9:                                     ; preds = %block_4021ff
  %308 = load i32, i32* %66, align 4
  %309 = shl i32 %308, 1
  %310 = icmp slt i32 %308, 0
  %311 = icmp slt i32 %309, 0
  %312 = xor i1 %310, %311
  %313 = zext i32 %309 to i64
  store i64 %313, i64* %RCX, align 8, !tbaa !2428
  %.lobit25 = lshr i32 %308, 31
  %314 = trunc i32 %.lobit25 to i8
  store i8 %314, i8* %51, align 1, !tbaa !2432
  %315 = and i32 %309, 254
  %316 = tail call i32 @llvm.ctpop.i32(i32 %315) #11
  %317 = trunc i32 %316 to i8
  %318 = and i8 %317, 1
  %319 = xor i8 %318, 1
  store i8 %319, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %320 = icmp eq i32 %309, 0
  %321 = zext i1 %320 to i8
  store i8 %321, i8* %54, align 1, !tbaa !2432
  %322 = lshr i32 %308, 30
  %323 = and i32 %322, 1
  %324 = trunc i32 %323 to i8
  store i8 %324, i8* %55, align 1, !tbaa !2432
  %325 = zext i1 %312 to i8
  store i8 %325, i8* %56, align 1, !tbaa !2432
  %326 = add i64 %58, -16
  %327 = add i64 %94, 20
  store i64 %327, i64* %PC, align 8
  %328 = inttoptr i64 %326 to i64*
  %329 = load i64, i64* %328, align 8
  store i64 %329, i64* %RDX, align 8, !tbaa !2428
  %330 = add i64 %94, 24
  store i64 %330, i64* %PC, align 8
  %331 = load i32, i32* %66, align 4
  %332 = sext i32 %331 to i64
  store i64 %332, i64* %RSI, align 8, !tbaa !2428
  %333 = shl nsw i64 %332, 2
  %334 = add i64 %333, %329
  %335 = add i64 %94, 27
  store i64 %335, i64* %PC, align 8
  %336 = inttoptr i64 %334 to i32*
  %337 = load i32, i32* %336, align 4
  %338 = add i32 %337, %309
  %339 = zext i32 %338 to i64
  store i64 %339, i64* %RCX, align 8, !tbaa !2428
  %340 = icmp ult i32 %338, %309
  %341 = icmp ult i32 %338, %337
  %342 = or i1 %340, %341
  %343 = zext i1 %342 to i8
  store i8 %343, i8* %51, align 1, !tbaa !2433
  %344 = and i32 %338, 255
  %345 = tail call i32 @llvm.ctpop.i32(i32 %344) #11
  %346 = trunc i32 %345 to i8
  %347 = and i8 %346, 1
  %348 = xor i8 %347, 1
  store i8 %348, i8* %52, align 1, !tbaa !2447
  %349 = xor i32 %337, %309
  %350 = xor i32 %349, %338
  %351 = lshr i32 %350, 4
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  store i8 %353, i8* %53, align 1, !tbaa !2451
  %354 = icmp eq i32 %338, 0
  %355 = zext i1 %354 to i8
  store i8 %355, i8* %54, align 1, !tbaa !2448
  %356 = lshr i32 %338, 31
  %357 = trunc i32 %356 to i8
  store i8 %357, i8* %55, align 1, !tbaa !2449
  %358 = lshr i32 %337, 31
  %359 = xor i32 %356, %323
  %360 = xor i32 %356, %358
  %361 = add nuw nsw i32 %359, %360
  %362 = icmp eq i32 %361, 2
  %363 = zext i1 %362 to i8
  store i8 %363, i8* %56, align 1, !tbaa !2450
  %364 = add i64 %58, -40
  %365 = add i64 %94, 30
  store i64 %365, i64* %PC, align 8
  %366 = inttoptr i64 %364 to i32*
  store i32 %338, i32* %366, align 4
  %367 = load i64, i64* %RBP, align 8
  %368 = add i64 %367, -24
  %369 = load i64, i64* %PC, align 8
  %370 = add i64 %369, 4
  store i64 %370, i64* %PC, align 8
  %371 = inttoptr i64 %368 to i64*
  %372 = load i64, i64* %371, align 8
  store i64 %372, i64* %RDX, align 8, !tbaa !2428
  %373 = add i64 %367, -40
  %374 = add i64 %369, 7
  store i64 %374, i64* %PC, align 8
  %375 = inttoptr i64 %373 to i32*
  %376 = load i32, i32* %375, align 4
  %377 = add i32 %376, 1
  %378 = zext i32 %377 to i64
  store i64 %378, i64* %RCX, align 8, !tbaa !2428
  %379 = icmp eq i32 %376, -1
  %380 = icmp eq i32 %377, 0
  %381 = or i1 %379, %380
  %382 = zext i1 %381 to i8
  store i8 %382, i8* %51, align 1, !tbaa !2433
  %383 = and i32 %377, 255
  %384 = tail call i32 @llvm.ctpop.i32(i32 %383) #11
  %385 = trunc i32 %384 to i8
  %386 = and i8 %385, 1
  %387 = xor i8 %386, 1
  store i8 %387, i8* %52, align 1, !tbaa !2447
  %388 = xor i32 %376, %377
  %389 = lshr i32 %388, 4
  %390 = trunc i32 %389 to i8
  %391 = and i8 %390, 1
  store i8 %391, i8* %53, align 1, !tbaa !2451
  %392 = zext i1 %380 to i8
  store i8 %392, i8* %54, align 1, !tbaa !2448
  %393 = lshr i32 %377, 31
  %394 = trunc i32 %393 to i8
  store i8 %394, i8* %55, align 1, !tbaa !2449
  %395 = lshr i32 %376, 31
  %396 = xor i32 %393, %395
  %397 = add nuw nsw i32 %396, %393
  %398 = icmp eq i32 %397, 2
  %399 = zext i1 %398 to i8
  store i8 %399, i8* %56, align 1, !tbaa !2450
  %400 = sext i32 %377 to i64
  store i64 %400, i64* %RSI, align 8, !tbaa !2428
  %401 = shl nsw i64 %400, 3
  %402 = add i64 %401, %372
  %403 = add i64 %369, 18
  store i64 %403, i64* %PC, align 8
  %404 = inttoptr i64 %402 to i64*
  %405 = load i64, i64* %404, align 8
  %406 = load i64, i64* %RAX, align 8
  %407 = xor i64 %406, %405
  store i64 %407, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %408 = trunc i64 %407 to i32
  %409 = and i32 %408, 255
  %410 = tail call i32 @llvm.ctpop.i32(i32 %409) #11
  %411 = trunc i32 %410 to i8
  %412 = and i8 %411, 1
  %413 = xor i8 %412, 1
  store i8 %413, i8* %52, align 1, !tbaa !2447
  %414 = icmp eq i64 %407, 0
  %415 = zext i1 %414 to i8
  store i8 %415, i8* %54, align 1, !tbaa !2448
  %416 = lshr i64 %407, 63
  %417 = trunc i64 %416 to i8
  store i8 %417, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %407, i64* %3745, align 1, !tbaa !2428
  store i64 0, i64* %3732, align 1, !tbaa !2428
  %418 = add i64 %369, 35
  store i64 %418, i64* %PC, align 8
  %419 = load i64, i64* %371, align 8
  store i64 %419, i64* %RDX, align 8, !tbaa !2428
  %420 = add i64 %369, 38
  store i64 %420, i64* %PC, align 8
  %421 = load i32, i32* %375, align 4
  %422 = add i32 %421, 1
  %423 = zext i32 %422 to i64
  store i64 %423, i64* %RCX, align 8, !tbaa !2428
  %424 = icmp eq i32 %421, -1
  %425 = icmp eq i32 %422, 0
  %426 = or i1 %424, %425
  %427 = zext i1 %426 to i8
  store i8 %427, i8* %51, align 1, !tbaa !2433
  %428 = and i32 %422, 255
  %429 = tail call i32 @llvm.ctpop.i32(i32 %428) #11
  %430 = trunc i32 %429 to i8
  %431 = and i8 %430, 1
  %432 = xor i8 %431, 1
  store i8 %432, i8* %52, align 1, !tbaa !2447
  %433 = xor i32 %421, %422
  %434 = lshr i32 %433, 4
  %435 = trunc i32 %434 to i8
  %436 = and i8 %435, 1
  store i8 %436, i8* %53, align 1, !tbaa !2451
  %437 = zext i1 %425 to i8
  store i8 %437, i8* %54, align 1, !tbaa !2448
  %438 = lshr i32 %422, 31
  %439 = trunc i32 %438 to i8
  store i8 %439, i8* %55, align 1, !tbaa !2449
  %440 = lshr i32 %421, 31
  %441 = xor i32 %438, %440
  %442 = add nuw nsw i32 %441, %438
  %443 = icmp eq i32 %442, 2
  %444 = zext i1 %443 to i8
  store i8 %444, i8* %56, align 1, !tbaa !2450
  %445 = sext i32 %422 to i64
  store i64 %445, i64* %RSI, align 8, !tbaa !2428
  %446 = shl nsw i64 %445, 3
  %447 = add i64 %446, %419
  %448 = add i64 %369, 49
  store i64 %448, i64* %PC, align 8
  %449 = inttoptr i64 %447 to i64*
  store i64 %407, i64* %449, align 8
  %450 = load i64, i64* %RBP, align 8
  %451 = add i64 %450, -24
  %452 = load i64, i64* %PC, align 8
  %453 = add i64 %452, 4
  store i64 %453, i64* %PC, align 8
  %454 = inttoptr i64 %451 to i64*
  %455 = load i64, i64* %454, align 8
  store i64 %455, i64* %RDX, align 8, !tbaa !2428
  %456 = add i64 %450, -40
  %457 = add i64 %452, 7
  store i64 %457, i64* %PC, align 8
  %458 = inttoptr i64 %456 to i32*
  %459 = load i32, i32* %458, align 4
  %460 = zext i32 %459 to i64
  store i64 %460, i64* %RCX, align 8, !tbaa !2428
  %461 = add i64 %450, -52
  %462 = add i64 %452, 10
  store i64 %462, i64* %PC, align 8
  %463 = inttoptr i64 %461 to i32*
  %464 = load i32, i32* %463, align 4
  %465 = add i32 %464, %459
  %466 = lshr i32 %465, 31
  %467 = add i32 %465, 1
  %468 = zext i32 %467 to i64
  store i64 %468, i64* %RCX, align 8, !tbaa !2428
  %469 = icmp eq i32 %465, -1
  %470 = icmp eq i32 %467, 0
  %471 = or i1 %469, %470
  %472 = zext i1 %471 to i8
  store i8 %472, i8* %51, align 1, !tbaa !2433
  %473 = and i32 %467, 255
  %474 = tail call i32 @llvm.ctpop.i32(i32 %473) #11
  %475 = trunc i32 %474 to i8
  %476 = and i8 %475, 1
  %477 = xor i8 %476, 1
  store i8 %477, i8* %52, align 1, !tbaa !2447
  %478 = xor i32 %465, %467
  %479 = lshr i32 %478, 4
  %480 = trunc i32 %479 to i8
  %481 = and i8 %480, 1
  store i8 %481, i8* %53, align 1, !tbaa !2451
  %482 = zext i1 %470 to i8
  store i8 %482, i8* %54, align 1, !tbaa !2448
  %483 = lshr i32 %467, 31
  %484 = trunc i32 %483 to i8
  store i8 %484, i8* %55, align 1, !tbaa !2449
  %485 = xor i32 %483, %466
  %486 = add nuw nsw i32 %485, %483
  %487 = icmp eq i32 %486, 2
  %488 = zext i1 %487 to i8
  store i8 %488, i8* %56, align 1, !tbaa !2450
  %489 = sext i32 %467 to i64
  store i64 %489, i64* %RSI, align 8, !tbaa !2428
  %490 = shl nsw i64 %489, 3
  %491 = add i64 %490, %455
  %492 = add i64 %452, 21
  store i64 %492, i64* %PC, align 8
  %493 = inttoptr i64 %491 to i64*
  %494 = load i64, i64* %493, align 8
  %495 = load i64, i64* %RAX, align 8
  %496 = xor i64 %495, %494
  store i64 %496, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %497 = trunc i64 %496 to i32
  %498 = and i32 %497, 255
  %499 = tail call i32 @llvm.ctpop.i32(i32 %498) #11
  %500 = trunc i32 %499 to i8
  %501 = and i8 %500, 1
  %502 = xor i8 %501, 1
  store i8 %502, i8* %52, align 1, !tbaa !2447
  %503 = icmp eq i64 %496, 0
  %504 = zext i1 %503 to i8
  store i8 %504, i8* %54, align 1, !tbaa !2448
  %505 = lshr i64 %496, 63
  %506 = trunc i64 %505 to i8
  store i8 %506, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %496, i64* %3745, align 1, !tbaa !2428
  store i64 0, i64* %3732, align 1, !tbaa !2428
  %507 = add i64 %452, 38
  store i64 %507, i64* %PC, align 8
  %508 = load i64, i64* %454, align 8
  store i64 %508, i64* %RAX, align 8, !tbaa !2428
  %509 = add i64 %452, 41
  store i64 %509, i64* %PC, align 8
  %510 = load i32, i32* %458, align 4
  %511 = zext i32 %510 to i64
  store i64 %511, i64* %RCX, align 8, !tbaa !2428
  %512 = add i64 %452, 44
  store i64 %512, i64* %PC, align 8
  %513 = load i32, i32* %463, align 4
  %514 = add i32 %513, %510
  %515 = lshr i32 %514, 31
  %516 = add i32 %514, 1
  %517 = zext i32 %516 to i64
  store i64 %517, i64* %RCX, align 8, !tbaa !2428
  %518 = icmp eq i32 %514, -1
  %519 = icmp eq i32 %516, 0
  %520 = or i1 %518, %519
  %521 = zext i1 %520 to i8
  store i8 %521, i8* %51, align 1, !tbaa !2433
  %522 = and i32 %516, 255
  %523 = tail call i32 @llvm.ctpop.i32(i32 %522) #11
  %524 = trunc i32 %523 to i8
  %525 = and i8 %524, 1
  %526 = xor i8 %525, 1
  store i8 %526, i8* %52, align 1, !tbaa !2447
  %527 = xor i32 %514, %516
  %528 = lshr i32 %527, 4
  %529 = trunc i32 %528 to i8
  %530 = and i8 %529, 1
  store i8 %530, i8* %53, align 1, !tbaa !2451
  %531 = zext i1 %519 to i8
  store i8 %531, i8* %54, align 1, !tbaa !2448
  %532 = lshr i32 %516, 31
  %533 = trunc i32 %532 to i8
  store i8 %533, i8* %55, align 1, !tbaa !2449
  %534 = xor i32 %532, %515
  %535 = add nuw nsw i32 %534, %532
  %536 = icmp eq i32 %535, 2
  %537 = zext i1 %536 to i8
  store i8 %537, i8* %56, align 1, !tbaa !2450
  %538 = sext i32 %516 to i64
  store i64 %538, i64* %RDX, align 8, !tbaa !2428
  %539 = shl nsw i64 %538, 3
  %540 = add i64 %539, %508
  %541 = add i64 %452, 55
  store i64 %541, i64* %PC, align 8
  %542 = inttoptr i64 %540 to i64*
  store i64 %496, i64* %542, align 8
  %543 = load i64, i64* %RBP, align 8
  %544 = add i64 %543, -36
  %545 = load i64, i64* %PC, align 8
  %546 = add i64 %545, 3
  store i64 %546, i64* %PC, align 8
  %547 = inttoptr i64 %544 to i32*
  %548 = load i32, i32* %547, align 4
  %549 = add i32 %548, 1
  %550 = zext i32 %549 to i64
  store i64 %550, i64* %RAX, align 8, !tbaa !2428
  %551 = icmp eq i32 %548, -1
  %552 = icmp eq i32 %549, 0
  %553 = or i1 %551, %552
  %554 = zext i1 %553 to i8
  store i8 %554, i8* %51, align 1, !tbaa !2433
  %555 = and i32 %549, 255
  %556 = tail call i32 @llvm.ctpop.i32(i32 %555) #11
  %557 = trunc i32 %556 to i8
  %558 = and i8 %557, 1
  %559 = xor i8 %558, 1
  store i8 %559, i8* %52, align 1, !tbaa !2447
  %560 = xor i32 %548, %549
  %561 = lshr i32 %560, 4
  %562 = trunc i32 %561 to i8
  %563 = and i8 %562, 1
  store i8 %563, i8* %53, align 1, !tbaa !2451
  %564 = zext i1 %552 to i8
  store i8 %564, i8* %54, align 1, !tbaa !2448
  %565 = lshr i32 %549, 31
  %566 = trunc i32 %565 to i8
  store i8 %566, i8* %55, align 1, !tbaa !2449
  %567 = lshr i32 %548, 31
  %568 = xor i32 %565, %567
  %569 = add nuw nsw i32 %568, %565
  %570 = icmp eq i32 %569, 2
  %571 = zext i1 %570 to i8
  store i8 %571, i8* %56, align 1, !tbaa !2450
  %572 = add i64 %545, 9
  store i64 %572, i64* %PC, align 8
  store i32 %549, i32* %547, align 4
  %573 = load i64, i64* %PC, align 8
  %574 = add i64 %573, -636
  store i64 %574, i64* %PC, align 8, !tbaa !2428
  br label %block_4021ec

block_401ca9:                                     ; preds = %block_401c9d
  %575 = load i32, i32* %2754, align 4
  %576 = shl i32 %575, 1
  %577 = icmp slt i32 %575, 0
  %578 = icmp slt i32 %576, 0
  %579 = xor i1 %577, %578
  %580 = zext i32 %576 to i64
  store i64 %580, i64* %RCX, align 8, !tbaa !2428
  %.lobit16 = lshr i32 %575, 31
  %581 = trunc i32 %.lobit16 to i8
  store i8 %581, i8* %51, align 1, !tbaa !2432
  %582 = and i32 %576, 254
  %583 = tail call i32 @llvm.ctpop.i32(i32 %582) #11
  %584 = trunc i32 %583 to i8
  %585 = and i8 %584, 1
  %586 = xor i8 %585, 1
  store i8 %586, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %587 = icmp eq i32 %576, 0
  %588 = zext i1 %587 to i8
  store i8 %588, i8* %54, align 1, !tbaa !2432
  %589 = lshr i32 %575, 30
  %590 = and i32 %589, 1
  %591 = trunc i32 %590 to i8
  store i8 %591, i8* %55, align 1, !tbaa !2432
  %592 = zext i1 %579 to i8
  store i8 %592, i8* %56, align 1, !tbaa !2432
  %593 = add i64 %2751, -16
  %594 = add i64 %2787, 20
  store i64 %594, i64* %PC, align 8
  %595 = inttoptr i64 %593 to i64*
  %596 = load i64, i64* %595, align 8
  store i64 %596, i64* %RDX, align 8, !tbaa !2428
  %597 = add i64 %2787, 24
  store i64 %597, i64* %PC, align 8
  %598 = load i32, i32* %2759, align 4
  %599 = sext i32 %598 to i64
  store i64 %599, i64* %RSI, align 8, !tbaa !2428
  %600 = shl nsw i64 %599, 2
  %601 = add i64 %600, %596
  %602 = add i64 %2787, 27
  store i64 %602, i64* %PC, align 8
  %603 = inttoptr i64 %601 to i32*
  %604 = load i32, i32* %603, align 4
  %605 = add i32 %604, %576
  %606 = zext i32 %605 to i64
  store i64 %606, i64* %RCX, align 8, !tbaa !2428
  %607 = icmp ult i32 %605, %576
  %608 = icmp ult i32 %605, %604
  %609 = or i1 %607, %608
  %610 = zext i1 %609 to i8
  store i8 %610, i8* %51, align 1, !tbaa !2433
  %611 = and i32 %605, 255
  %612 = tail call i32 @llvm.ctpop.i32(i32 %611) #11
  %613 = trunc i32 %612 to i8
  %614 = and i8 %613, 1
  %615 = xor i8 %614, 1
  store i8 %615, i8* %52, align 1, !tbaa !2447
  %616 = xor i32 %604, %576
  %617 = xor i32 %616, %605
  %618 = lshr i32 %617, 4
  %619 = trunc i32 %618 to i8
  %620 = and i8 %619, 1
  store i8 %620, i8* %53, align 1, !tbaa !2451
  %621 = icmp eq i32 %605, 0
  %622 = zext i1 %621 to i8
  store i8 %622, i8* %54, align 1, !tbaa !2448
  %623 = lshr i32 %605, 31
  %624 = trunc i32 %623 to i8
  store i8 %624, i8* %55, align 1, !tbaa !2449
  %625 = lshr i32 %604, 31
  %626 = xor i32 %623, %590
  %627 = xor i32 %623, %625
  %628 = add nuw nsw i32 %626, %627
  %629 = icmp eq i32 %628, 2
  %630 = zext i1 %629 to i8
  store i8 %630, i8* %56, align 1, !tbaa !2450
  %631 = add i64 %2751, -32
  %632 = add i64 %2787, 30
  store i64 %632, i64* %PC, align 8
  %633 = inttoptr i64 %631 to i32*
  store i32 %605, i32* %633, align 4
  %634 = load i64, i64* %RBP, align 8
  %635 = add i64 %634, -36
  %636 = load i64, i64* %PC, align 8
  %637 = add i64 %636, 3
  store i64 %637, i64* %PC, align 8
  %638 = inttoptr i64 %635 to i32*
  %639 = load i32, i32* %638, align 4
  %640 = shl i32 %639, 1
  %641 = icmp slt i32 %639, 0
  %642 = icmp slt i32 %640, 0
  %643 = xor i1 %641, %642
  %644 = zext i32 %640 to i64
  store i64 %644, i64* %RCX, align 8, !tbaa !2428
  %.lobit17 = lshr i32 %639, 31
  %645 = trunc i32 %.lobit17 to i8
  store i8 %645, i8* %51, align 1, !tbaa !2432
  %646 = and i32 %640, 254
  %647 = tail call i32 @llvm.ctpop.i32(i32 %646) #11
  %648 = trunc i32 %647 to i8
  %649 = and i8 %648, 1
  %650 = xor i8 %649, 1
  store i8 %650, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %651 = icmp eq i32 %640, 0
  %652 = zext i1 %651 to i8
  store i8 %652, i8* %54, align 1, !tbaa !2432
  %653 = lshr i32 %639, 30
  %654 = and i32 %653, 1
  %655 = trunc i32 %654 to i8
  store i8 %655, i8* %55, align 1, !tbaa !2432
  %656 = zext i1 %643 to i8
  store i8 %656, i8* %56, align 1, !tbaa !2432
  %657 = add i64 %634, -16
  %658 = add i64 %636, 10
  store i64 %658, i64* %PC, align 8
  %659 = inttoptr i64 %657 to i64*
  %660 = load i64, i64* %659, align 8
  store i64 %660, i64* %RDX, align 8, !tbaa !2428
  %661 = add i64 %634, -28
  %662 = add i64 %636, 14
  store i64 %662, i64* %PC, align 8
  %663 = inttoptr i64 %661 to i32*
  %664 = load i32, i32* %663, align 4
  %665 = sext i32 %664 to i64
  store i64 %665, i64* %RSI, align 8, !tbaa !2428
  %666 = shl nsw i64 %665, 2
  %667 = add i64 %666, %660
  %668 = add i64 %636, 17
  store i64 %668, i64* %PC, align 8
  %669 = inttoptr i64 %667 to i32*
  %670 = load i32, i32* %669, align 4
  %671 = add i32 %670, %640
  %672 = zext i32 %671 to i64
  store i64 %672, i64* %RCX, align 8, !tbaa !2428
  %673 = icmp ult i32 %671, %640
  %674 = icmp ult i32 %671, %670
  %675 = or i1 %673, %674
  %676 = zext i1 %675 to i8
  store i8 %676, i8* %51, align 1, !tbaa !2433
  %677 = and i32 %671, 255
  %678 = tail call i32 @llvm.ctpop.i32(i32 %677) #11
  %679 = trunc i32 %678 to i8
  %680 = and i8 %679, 1
  %681 = xor i8 %680, 1
  store i8 %681, i8* %52, align 1, !tbaa !2447
  %682 = xor i32 %670, %640
  %683 = xor i32 %682, %671
  %684 = lshr i32 %683, 4
  %685 = trunc i32 %684 to i8
  %686 = and i8 %685, 1
  store i8 %686, i8* %53, align 1, !tbaa !2451
  %687 = icmp eq i32 %671, 0
  %688 = zext i1 %687 to i8
  store i8 %688, i8* %54, align 1, !tbaa !2448
  %689 = lshr i32 %671, 31
  %690 = trunc i32 %689 to i8
  store i8 %690, i8* %55, align 1, !tbaa !2449
  %691 = lshr i32 %670, 31
  %692 = xor i32 %689, %654
  %693 = xor i32 %689, %691
  %694 = add nuw nsw i32 %692, %693
  %695 = icmp eq i32 %694, 2
  %696 = zext i1 %695 to i8
  store i8 %696, i8* %56, align 1, !tbaa !2450
  %697 = add i64 %634, -40
  %698 = add i64 %636, 20
  store i64 %698, i64* %PC, align 8
  %699 = inttoptr i64 %697 to i32*
  store i32 %671, i32* %699, align 4
  %700 = load i64, i64* %RBP, align 8
  %701 = add i64 %700, -24
  %702 = load i64, i64* %PC, align 8
  %703 = add i64 %702, 4
  store i64 %703, i64* %PC, align 8
  %704 = inttoptr i64 %701 to i64*
  %705 = load i64, i64* %704, align 8
  store i64 %705, i64* %RDX, align 8, !tbaa !2428
  %706 = add i64 %700, -32
  %707 = add i64 %702, 8
  store i64 %707, i64* %PC, align 8
  %708 = inttoptr i64 %706 to i32*
  %709 = load i32, i32* %708, align 4
  %710 = sext i32 %709 to i64
  store i64 %710, i64* %RSI, align 8, !tbaa !2428
  %711 = shl nsw i64 %710, 3
  %712 = add i64 %711, %705
  %713 = add i64 %702, 13
  store i64 %713, i64* %PC, align 8
  %714 = inttoptr i64 %712 to i64*
  %715 = load i64, i64* %714, align 8
  store i64 %715, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %716 = add i64 %700, -64
  %717 = add i64 %702, 18
  store i64 %717, i64* %PC, align 8
  %718 = inttoptr i64 %716 to i64*
  store i64 %715, i64* %718, align 8
  %719 = load i64, i64* %RBP, align 8
  %720 = add i64 %719, -24
  %721 = load i64, i64* %PC, align 8
  %722 = add i64 %721, 4
  store i64 %722, i64* %PC, align 8
  %723 = inttoptr i64 %720 to i64*
  %724 = load i64, i64* %723, align 8
  store i64 %724, i64* %RDX, align 8, !tbaa !2428
  %725 = add i64 %719, -32
  %726 = add i64 %721, 7
  store i64 %726, i64* %PC, align 8
  %727 = inttoptr i64 %725 to i32*
  %728 = load i32, i32* %727, align 4
  %729 = add i32 %728, 1
  %730 = zext i32 %729 to i64
  store i64 %730, i64* %RCX, align 8, !tbaa !2428
  %731 = icmp eq i32 %728, -1
  %732 = icmp eq i32 %729, 0
  %733 = or i1 %731, %732
  %734 = zext i1 %733 to i8
  store i8 %734, i8* %51, align 1, !tbaa !2433
  %735 = and i32 %729, 255
  %736 = tail call i32 @llvm.ctpop.i32(i32 %735) #11
  %737 = trunc i32 %736 to i8
  %738 = and i8 %737, 1
  %739 = xor i8 %738, 1
  store i8 %739, i8* %52, align 1, !tbaa !2447
  %740 = xor i32 %728, %729
  %741 = lshr i32 %740, 4
  %742 = trunc i32 %741 to i8
  %743 = and i8 %742, 1
  store i8 %743, i8* %53, align 1, !tbaa !2451
  %744 = zext i1 %732 to i8
  store i8 %744, i8* %54, align 1, !tbaa !2448
  %745 = lshr i32 %729, 31
  %746 = trunc i32 %745 to i8
  store i8 %746, i8* %55, align 1, !tbaa !2449
  %747 = lshr i32 %728, 31
  %748 = xor i32 %745, %747
  %749 = add nuw nsw i32 %748, %745
  %750 = icmp eq i32 %749, 2
  %751 = zext i1 %750 to i8
  store i8 %751, i8* %56, align 1, !tbaa !2450
  %752 = sext i32 %729 to i64
  store i64 %752, i64* %RSI, align 8, !tbaa !2428
  %753 = shl nsw i64 %752, 3
  %754 = add i64 %753, %724
  %755 = add i64 %721, 18
  store i64 %755, i64* %PC, align 8
  %756 = inttoptr i64 %754 to i64*
  %757 = load i64, i64* %756, align 8
  %758 = load i64, i64* %RAX, align 8
  %759 = xor i64 %758, %757
  store i64 %759, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %760 = trunc i64 %759 to i32
  %761 = and i32 %760, 255
  %762 = tail call i32 @llvm.ctpop.i32(i32 %761) #11
  %763 = trunc i32 %762 to i8
  %764 = and i8 %763, 1
  %765 = xor i8 %764, 1
  store i8 %765, i8* %52, align 1, !tbaa !2447
  %766 = icmp eq i64 %759, 0
  %767 = zext i1 %766 to i8
  store i8 %767, i8* %54, align 1, !tbaa !2448
  %768 = lshr i64 %759, 63
  %769 = trunc i64 %768 to i8
  store i8 %769, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %759, i64* %3844, align 1, !tbaa !2428
  store i64 0, i64* %3842, align 1, !tbaa !2428
  %770 = add i64 %719, -72
  %771 = add i64 %721, 36
  store i64 %771, i64* %PC, align 8
  %772 = inttoptr i64 %770 to i64*
  store i64 %759, i64* %772, align 8
  %773 = load i64, i64* %RBP, align 8
  %774 = add i64 %773, -24
  %775 = load i64, i64* %PC, align 8
  %776 = add i64 %775, 4
  store i64 %776, i64* %PC, align 8
  %777 = inttoptr i64 %774 to i64*
  %778 = load i64, i64* %777, align 8
  store i64 %778, i64* %RDX, align 8, !tbaa !2428
  %779 = add i64 %773, -40
  %780 = add i64 %775, 8
  store i64 %780, i64* %PC, align 8
  %781 = inttoptr i64 %779 to i32*
  %782 = load i32, i32* %781, align 4
  %783 = sext i32 %782 to i64
  store i64 %783, i64* %RSI, align 8, !tbaa !2428
  %784 = shl nsw i64 %783, 3
  %785 = add i64 %784, %778
  %786 = add i64 %775, 13
  store i64 %786, i64* %PC, align 8
  %787 = inttoptr i64 %785 to i64*
  %788 = load i64, i64* %787, align 8
  store i64 %788, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %789 = add i64 %773, -80
  %790 = add i64 %775, 18
  store i64 %790, i64* %PC, align 8
  %791 = inttoptr i64 %789 to i64*
  store i64 %788, i64* %791, align 8
  %792 = load i64, i64* %RBP, align 8
  %793 = add i64 %792, -24
  %794 = load i64, i64* %PC, align 8
  %795 = add i64 %794, 4
  store i64 %795, i64* %PC, align 8
  %796 = inttoptr i64 %793 to i64*
  %797 = load i64, i64* %796, align 8
  store i64 %797, i64* %RDX, align 8, !tbaa !2428
  %798 = add i64 %792, -40
  %799 = add i64 %794, 7
  store i64 %799, i64* %PC, align 8
  %800 = inttoptr i64 %798 to i32*
  %801 = load i32, i32* %800, align 4
  %802 = add i32 %801, 1
  %803 = zext i32 %802 to i64
  store i64 %803, i64* %RCX, align 8, !tbaa !2428
  %804 = icmp eq i32 %801, -1
  %805 = icmp eq i32 %802, 0
  %806 = or i1 %804, %805
  %807 = zext i1 %806 to i8
  store i8 %807, i8* %51, align 1, !tbaa !2433
  %808 = and i32 %802, 255
  %809 = tail call i32 @llvm.ctpop.i32(i32 %808) #11
  %810 = trunc i32 %809 to i8
  %811 = and i8 %810, 1
  %812 = xor i8 %811, 1
  store i8 %812, i8* %52, align 1, !tbaa !2447
  %813 = xor i32 %801, %802
  %814 = lshr i32 %813, 4
  %815 = trunc i32 %814 to i8
  %816 = and i8 %815, 1
  store i8 %816, i8* %53, align 1, !tbaa !2451
  %817 = zext i1 %805 to i8
  store i8 %817, i8* %54, align 1, !tbaa !2448
  %818 = lshr i32 %802, 31
  %819 = trunc i32 %818 to i8
  store i8 %819, i8* %55, align 1, !tbaa !2449
  %820 = lshr i32 %801, 31
  %821 = xor i32 %818, %820
  %822 = add nuw nsw i32 %821, %818
  %823 = icmp eq i32 %822, 2
  %824 = zext i1 %823 to i8
  store i8 %824, i8* %56, align 1, !tbaa !2450
  %825 = sext i32 %802 to i64
  store i64 %825, i64* %RSI, align 8, !tbaa !2428
  %826 = shl nsw i64 %825, 3
  %827 = add i64 %826, %797
  %828 = add i64 %794, 18
  store i64 %828, i64* %PC, align 8
  %829 = inttoptr i64 %827 to i64*
  %830 = load i64, i64* %829, align 8
  %831 = load i64, i64* %RAX, align 8
  %832 = xor i64 %831, %830
  store i64 %832, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %833 = trunc i64 %832 to i32
  %834 = and i32 %833, 255
  %835 = tail call i32 @llvm.ctpop.i32(i32 %834) #11
  %836 = trunc i32 %835 to i8
  %837 = and i8 %836, 1
  %838 = xor i8 %837, 1
  store i8 %838, i8* %52, align 1, !tbaa !2447
  %839 = icmp eq i64 %832, 0
  %840 = zext i1 %839 to i8
  store i8 %840, i8* %54, align 1, !tbaa !2448
  %841 = lshr i64 %832, 63
  %842 = trunc i64 %841 to i8
  store i8 %842, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %832, i64* %3844, align 1, !tbaa !2428
  store i64 0, i64* %3842, align 1, !tbaa !2428
  %843 = add i64 %792, -88
  %844 = add i64 %794, 36
  store i64 %844, i64* %PC, align 8
  %845 = inttoptr i64 %843 to i64*
  store i64 %832, i64* %845, align 8
  %846 = load i64, i64* %RBP, align 8
  %847 = add i64 %846, -80
  %848 = load i64, i64* %PC, align 8
  %849 = add i64 %848, 5
  store i64 %849, i64* %PC, align 8
  %850 = inttoptr i64 %847 to i64*
  %851 = load i64, i64* %850, align 8
  store i64 %851, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %852 = add i64 %846, -24
  %853 = add i64 %848, 9
  store i64 %853, i64* %PC, align 8
  %854 = inttoptr i64 %852 to i64*
  %855 = load i64, i64* %854, align 8
  store i64 %855, i64* %RDX, align 8, !tbaa !2428
  %856 = add i64 %846, -32
  %857 = add i64 %848, 13
  store i64 %857, i64* %PC, align 8
  %858 = inttoptr i64 %856 to i32*
  %859 = load i32, i32* %858, align 4
  %860 = sext i32 %859 to i64
  store i64 %860, i64* %RSI, align 8, !tbaa !2428
  %861 = shl nsw i64 %860, 3
  %862 = add i64 %861, %855
  %863 = add i64 %848, 18
  store i64 %863, i64* %PC, align 8
  %864 = inttoptr i64 %862 to i64*
  store i64 %851, i64* %864, align 8
  %865 = load i64, i64* %RBP, align 8
  %866 = add i64 %865, -88
  %867 = load i64, i64* %PC, align 8
  %868 = add i64 %867, 5
  store i64 %868, i64* %PC, align 8
  %869 = inttoptr i64 %866 to i64*
  %870 = load i64, i64* %869, align 8
  store i64 %870, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %871 = add i64 %865, -24
  %872 = add i64 %867, 9
  store i64 %872, i64* %PC, align 8
  %873 = inttoptr i64 %871 to i64*
  %874 = load i64, i64* %873, align 8
  store i64 %874, i64* %RDX, align 8, !tbaa !2428
  %875 = add i64 %865, -32
  %876 = add i64 %867, 12
  store i64 %876, i64* %PC, align 8
  %877 = inttoptr i64 %875 to i32*
  %878 = load i32, i32* %877, align 4
  %879 = add i32 %878, 1
  %880 = zext i32 %879 to i64
  store i64 %880, i64* %RCX, align 8, !tbaa !2428
  %881 = icmp eq i32 %878, -1
  %882 = icmp eq i32 %879, 0
  %883 = or i1 %881, %882
  %884 = zext i1 %883 to i8
  store i8 %884, i8* %51, align 1, !tbaa !2433
  %885 = and i32 %879, 255
  %886 = tail call i32 @llvm.ctpop.i32(i32 %885) #11
  %887 = trunc i32 %886 to i8
  %888 = and i8 %887, 1
  %889 = xor i8 %888, 1
  store i8 %889, i8* %52, align 1, !tbaa !2447
  %890 = xor i32 %878, %879
  %891 = lshr i32 %890, 4
  %892 = trunc i32 %891 to i8
  %893 = and i8 %892, 1
  store i8 %893, i8* %53, align 1, !tbaa !2451
  %894 = zext i1 %882 to i8
  store i8 %894, i8* %54, align 1, !tbaa !2448
  %895 = lshr i32 %879, 31
  %896 = trunc i32 %895 to i8
  store i8 %896, i8* %55, align 1, !tbaa !2449
  %897 = lshr i32 %878, 31
  %898 = xor i32 %895, %897
  %899 = add nuw nsw i32 %898, %895
  %900 = icmp eq i32 %899, 2
  %901 = zext i1 %900 to i8
  store i8 %901, i8* %56, align 1, !tbaa !2450
  %902 = sext i32 %879 to i64
  store i64 %902, i64* %RSI, align 8, !tbaa !2428
  %903 = shl nsw i64 %902, 3
  %904 = add i64 %903, %874
  %905 = add i64 %867, 23
  store i64 %905, i64* %PC, align 8
  %906 = inttoptr i64 %904 to i64*
  store i64 %870, i64* %906, align 8
  %907 = load i64, i64* %RBP, align 8
  %908 = add i64 %907, -64
  %909 = load i64, i64* %PC, align 8
  %910 = add i64 %909, 5
  store i64 %910, i64* %PC, align 8
  %911 = inttoptr i64 %908 to i64*
  %912 = load i64, i64* %911, align 8
  store i64 %912, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %913 = add i64 %907, -24
  %914 = add i64 %909, 9
  store i64 %914, i64* %PC, align 8
  %915 = inttoptr i64 %913 to i64*
  %916 = load i64, i64* %915, align 8
  store i64 %916, i64* %RDX, align 8, !tbaa !2428
  %917 = add i64 %907, -40
  %918 = add i64 %909, 13
  store i64 %918, i64* %PC, align 8
  %919 = inttoptr i64 %917 to i32*
  %920 = load i32, i32* %919, align 4
  %921 = sext i32 %920 to i64
  store i64 %921, i64* %RSI, align 8, !tbaa !2428
  %922 = shl nsw i64 %921, 3
  %923 = add i64 %922, %916
  %924 = add i64 %909, 18
  store i64 %924, i64* %PC, align 8
  %925 = inttoptr i64 %923 to i64*
  store i64 %912, i64* %925, align 8
  %926 = load i64, i64* %RBP, align 8
  %927 = add i64 %926, -72
  %928 = load i64, i64* %PC, align 8
  %929 = add i64 %928, 5
  store i64 %929, i64* %PC, align 8
  %930 = inttoptr i64 %927 to i64*
  %931 = load i64, i64* %930, align 8
  store i64 %931, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %932 = add i64 %926, -24
  %933 = add i64 %928, 9
  store i64 %933, i64* %PC, align 8
  %934 = inttoptr i64 %932 to i64*
  %935 = load i64, i64* %934, align 8
  store i64 %935, i64* %RDX, align 8, !tbaa !2428
  %936 = add i64 %926, -40
  %937 = add i64 %928, 12
  store i64 %937, i64* %PC, align 8
  %938 = inttoptr i64 %936 to i32*
  %939 = load i32, i32* %938, align 4
  %940 = add i32 %939, 1
  %941 = zext i32 %940 to i64
  store i64 %941, i64* %RCX, align 8, !tbaa !2428
  %942 = icmp eq i32 %939, -1
  %943 = icmp eq i32 %940, 0
  %944 = or i1 %942, %943
  %945 = zext i1 %944 to i8
  store i8 %945, i8* %51, align 1, !tbaa !2433
  %946 = and i32 %940, 255
  %947 = tail call i32 @llvm.ctpop.i32(i32 %946) #11
  %948 = trunc i32 %947 to i8
  %949 = and i8 %948, 1
  %950 = xor i8 %949, 1
  store i8 %950, i8* %52, align 1, !tbaa !2447
  %951 = xor i32 %939, %940
  %952 = lshr i32 %951, 4
  %953 = trunc i32 %952 to i8
  %954 = and i8 %953, 1
  store i8 %954, i8* %53, align 1, !tbaa !2451
  %955 = zext i1 %943 to i8
  store i8 %955, i8* %54, align 1, !tbaa !2448
  %956 = lshr i32 %940, 31
  %957 = trunc i32 %956 to i8
  store i8 %957, i8* %55, align 1, !tbaa !2449
  %958 = lshr i32 %939, 31
  %959 = xor i32 %956, %958
  %960 = add nuw nsw i32 %959, %956
  %961 = icmp eq i32 %960, 2
  %962 = zext i1 %961 to i8
  store i8 %962, i8* %56, align 1, !tbaa !2450
  %963 = sext i32 %940 to i64
  store i64 %963, i64* %RSI, align 8, !tbaa !2428
  %964 = shl nsw i64 %963, 3
  %965 = add i64 %964, %935
  %966 = add i64 %928, 23
  store i64 %966, i64* %PC, align 8
  %967 = inttoptr i64 %965 to i64*
  store i64 %931, i64* %967, align 8
  %968 = load i64, i64* %RBP, align 8
  %969 = add i64 %968, -52
  %970 = load i64, i64* %PC, align 8
  %971 = add i64 %970, 3
  store i64 %971, i64* %PC, align 8
  %972 = inttoptr i64 %969 to i32*
  %973 = load i32, i32* %972, align 4
  %974 = zext i32 %973 to i64
  store i64 %974, i64* %RCX, align 8, !tbaa !2428
  %975 = add i64 %968, -32
  %976 = add i64 %970, 6
  store i64 %976, i64* %PC, align 8
  %977 = inttoptr i64 %975 to i32*
  %978 = load i32, i32* %977, align 4
  %979 = add i32 %978, %973
  %980 = zext i32 %979 to i64
  store i64 %980, i64* %RCX, align 8, !tbaa !2428
  %981 = icmp ult i32 %979, %973
  %982 = icmp ult i32 %979, %978
  %983 = or i1 %981, %982
  %984 = zext i1 %983 to i8
  store i8 %984, i8* %51, align 1, !tbaa !2433
  %985 = and i32 %979, 255
  %986 = tail call i32 @llvm.ctpop.i32(i32 %985) #11
  %987 = trunc i32 %986 to i8
  %988 = and i8 %987, 1
  %989 = xor i8 %988, 1
  store i8 %989, i8* %52, align 1, !tbaa !2447
  %990 = xor i32 %978, %973
  %991 = xor i32 %990, %979
  %992 = lshr i32 %991, 4
  %993 = trunc i32 %992 to i8
  %994 = and i8 %993, 1
  store i8 %994, i8* %53, align 1, !tbaa !2451
  %995 = icmp eq i32 %979, 0
  %996 = zext i1 %995 to i8
  store i8 %996, i8* %54, align 1, !tbaa !2448
  %997 = lshr i32 %979, 31
  %998 = trunc i32 %997 to i8
  store i8 %998, i8* %55, align 1, !tbaa !2449
  %999 = lshr i32 %973, 31
  %1000 = lshr i32 %978, 31
  %1001 = xor i32 %997, %999
  %1002 = xor i32 %997, %1000
  %1003 = add nuw nsw i32 %1001, %1002
  %1004 = icmp eq i32 %1003, 2
  %1005 = zext i1 %1004 to i8
  store i8 %1005, i8* %56, align 1, !tbaa !2450
  %1006 = add i64 %970, 9
  store i64 %1006, i64* %PC, align 8
  store i32 %979, i32* %977, align 4
  %1007 = load i64, i64* %RBP, align 8
  %1008 = add i64 %1007, -52
  %1009 = load i64, i64* %PC, align 8
  %1010 = add i64 %1009, 3
  store i64 %1010, i64* %PC, align 8
  %1011 = inttoptr i64 %1008 to i32*
  %1012 = load i32, i32* %1011, align 4
  %1013 = shl i32 %1012, 1
  %1014 = icmp slt i32 %1012, 0
  %1015 = icmp slt i32 %1013, 0
  %1016 = xor i1 %1014, %1015
  %1017 = zext i32 %1013 to i64
  store i64 %1017, i64* %RCX, align 8, !tbaa !2428
  %.lobit18 = lshr i32 %1012, 31
  %1018 = trunc i32 %.lobit18 to i8
  store i8 %1018, i8* %51, align 1, !tbaa !2432
  %1019 = and i32 %1013, 254
  %1020 = tail call i32 @llvm.ctpop.i32(i32 %1019) #11
  %1021 = trunc i32 %1020 to i8
  %1022 = and i8 %1021, 1
  %1023 = xor i8 %1022, 1
  store i8 %1023, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %1024 = icmp eq i32 %1013, 0
  %1025 = zext i1 %1024 to i8
  store i8 %1025, i8* %54, align 1, !tbaa !2432
  %1026 = lshr i32 %1012, 30
  %1027 = and i32 %1026, 1
  %1028 = trunc i32 %1027 to i8
  store i8 %1028, i8* %55, align 1, !tbaa !2432
  %1029 = zext i1 %1016 to i8
  store i8 %1029, i8* %56, align 1, !tbaa !2432
  %1030 = add i64 %1007, -40
  %1031 = add i64 %1009, 9
  store i64 %1031, i64* %PC, align 8
  %1032 = inttoptr i64 %1030 to i32*
  %1033 = load i32, i32* %1032, align 4
  %1034 = add i32 %1033, %1013
  %1035 = zext i32 %1034 to i64
  store i64 %1035, i64* %RCX, align 8, !tbaa !2428
  %1036 = icmp ult i32 %1034, %1013
  %1037 = icmp ult i32 %1034, %1033
  %1038 = or i1 %1036, %1037
  %1039 = zext i1 %1038 to i8
  store i8 %1039, i8* %51, align 1, !tbaa !2433
  %1040 = and i32 %1034, 255
  %1041 = tail call i32 @llvm.ctpop.i32(i32 %1040) #11
  %1042 = trunc i32 %1041 to i8
  %1043 = and i8 %1042, 1
  %1044 = xor i8 %1043, 1
  store i8 %1044, i8* %52, align 1, !tbaa !2447
  %1045 = xor i32 %1033, %1013
  %1046 = xor i32 %1045, %1034
  %1047 = lshr i32 %1046, 4
  %1048 = trunc i32 %1047 to i8
  %1049 = and i8 %1048, 1
  store i8 %1049, i8* %53, align 1, !tbaa !2451
  %1050 = icmp eq i32 %1034, 0
  %1051 = zext i1 %1050 to i8
  store i8 %1051, i8* %54, align 1, !tbaa !2448
  %1052 = lshr i32 %1034, 31
  %1053 = trunc i32 %1052 to i8
  store i8 %1053, i8* %55, align 1, !tbaa !2449
  %1054 = lshr i32 %1033, 31
  %1055 = xor i32 %1052, %1027
  %1056 = xor i32 %1052, %1054
  %1057 = add nuw nsw i32 %1055, %1056
  %1058 = icmp eq i32 %1057, 2
  %1059 = zext i1 %1058 to i8
  store i8 %1059, i8* %56, align 1, !tbaa !2450
  %1060 = add i64 %1009, 12
  store i64 %1060, i64* %PC, align 8
  store i32 %1034, i32* %1032, align 4
  %1061 = load i64, i64* %RBP, align 8
  %1062 = add i64 %1061, -24
  %1063 = load i64, i64* %PC, align 8
  %1064 = add i64 %1063, 4
  store i64 %1064, i64* %PC, align 8
  %1065 = inttoptr i64 %1062 to i64*
  %1066 = load i64, i64* %1065, align 8
  store i64 %1066, i64* %RDX, align 8, !tbaa !2428
  %1067 = add i64 %1061, -32
  %1068 = add i64 %1063, 8
  store i64 %1068, i64* %PC, align 8
  %1069 = inttoptr i64 %1067 to i32*
  %1070 = load i32, i32* %1069, align 4
  %1071 = sext i32 %1070 to i64
  store i64 %1071, i64* %RSI, align 8, !tbaa !2428
  %1072 = shl nsw i64 %1071, 3
  %1073 = add i64 %1072, %1066
  %1074 = add i64 %1063, 13
  store i64 %1074, i64* %PC, align 8
  %1075 = inttoptr i64 %1073 to i64*
  %1076 = load i64, i64* %1075, align 8
  store i64 %1076, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1077 = add i64 %1061, -64
  %1078 = add i64 %1063, 18
  store i64 %1078, i64* %PC, align 8
  %1079 = inttoptr i64 %1077 to i64*
  store i64 %1076, i64* %1079, align 8
  %1080 = load i64, i64* %RBP, align 8
  %1081 = add i64 %1080, -24
  %1082 = load i64, i64* %PC, align 8
  %1083 = add i64 %1082, 4
  store i64 %1083, i64* %PC, align 8
  %1084 = inttoptr i64 %1081 to i64*
  %1085 = load i64, i64* %1084, align 8
  store i64 %1085, i64* %RDX, align 8, !tbaa !2428
  %1086 = add i64 %1080, -32
  %1087 = add i64 %1082, 7
  store i64 %1087, i64* %PC, align 8
  %1088 = inttoptr i64 %1086 to i32*
  %1089 = load i32, i32* %1088, align 4
  %1090 = add i32 %1089, 1
  %1091 = zext i32 %1090 to i64
  store i64 %1091, i64* %RCX, align 8, !tbaa !2428
  %1092 = icmp eq i32 %1089, -1
  %1093 = icmp eq i32 %1090, 0
  %1094 = or i1 %1092, %1093
  %1095 = zext i1 %1094 to i8
  store i8 %1095, i8* %51, align 1, !tbaa !2433
  %1096 = and i32 %1090, 255
  %1097 = tail call i32 @llvm.ctpop.i32(i32 %1096) #11
  %1098 = trunc i32 %1097 to i8
  %1099 = and i8 %1098, 1
  %1100 = xor i8 %1099, 1
  store i8 %1100, i8* %52, align 1, !tbaa !2447
  %1101 = xor i32 %1089, %1090
  %1102 = lshr i32 %1101, 4
  %1103 = trunc i32 %1102 to i8
  %1104 = and i8 %1103, 1
  store i8 %1104, i8* %53, align 1, !tbaa !2451
  %1105 = zext i1 %1093 to i8
  store i8 %1105, i8* %54, align 1, !tbaa !2448
  %1106 = lshr i32 %1090, 31
  %1107 = trunc i32 %1106 to i8
  store i8 %1107, i8* %55, align 1, !tbaa !2449
  %1108 = lshr i32 %1089, 31
  %1109 = xor i32 %1106, %1108
  %1110 = add nuw nsw i32 %1109, %1106
  %1111 = icmp eq i32 %1110, 2
  %1112 = zext i1 %1111 to i8
  store i8 %1112, i8* %56, align 1, !tbaa !2450
  %1113 = sext i32 %1090 to i64
  store i64 %1113, i64* %RSI, align 8, !tbaa !2428
  %1114 = shl nsw i64 %1113, 3
  %1115 = add i64 %1114, %1085
  %1116 = add i64 %1082, 18
  store i64 %1116, i64* %PC, align 8
  %1117 = inttoptr i64 %1115 to i64*
  %1118 = load i64, i64* %1117, align 8
  %1119 = load i64, i64* %RAX, align 8
  %1120 = xor i64 %1119, %1118
  store i64 %1120, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %1121 = trunc i64 %1120 to i32
  %1122 = and i32 %1121, 255
  %1123 = tail call i32 @llvm.ctpop.i32(i32 %1122) #11
  %1124 = trunc i32 %1123 to i8
  %1125 = and i8 %1124, 1
  %1126 = xor i8 %1125, 1
  store i8 %1126, i8* %52, align 1, !tbaa !2447
  %1127 = icmp eq i64 %1120, 0
  %1128 = zext i1 %1127 to i8
  store i8 %1128, i8* %54, align 1, !tbaa !2448
  %1129 = lshr i64 %1120, 63
  %1130 = trunc i64 %1129 to i8
  store i8 %1130, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %1120, i64* %3844, align 1, !tbaa !2428
  store i64 0, i64* %3842, align 1, !tbaa !2428
  %1131 = add i64 %1080, -72
  %1132 = add i64 %1082, 36
  store i64 %1132, i64* %PC, align 8
  %1133 = inttoptr i64 %1131 to i64*
  store i64 %1120, i64* %1133, align 8
  %1134 = load i64, i64* %RBP, align 8
  %1135 = add i64 %1134, -24
  %1136 = load i64, i64* %PC, align 8
  %1137 = add i64 %1136, 4
  store i64 %1137, i64* %PC, align 8
  %1138 = inttoptr i64 %1135 to i64*
  %1139 = load i64, i64* %1138, align 8
  store i64 %1139, i64* %RDX, align 8, !tbaa !2428
  %1140 = add i64 %1134, -40
  %1141 = add i64 %1136, 8
  store i64 %1141, i64* %PC, align 8
  %1142 = inttoptr i64 %1140 to i32*
  %1143 = load i32, i32* %1142, align 4
  %1144 = sext i32 %1143 to i64
  store i64 %1144, i64* %RSI, align 8, !tbaa !2428
  %1145 = shl nsw i64 %1144, 3
  %1146 = add i64 %1145, %1139
  %1147 = add i64 %1136, 13
  store i64 %1147, i64* %PC, align 8
  %1148 = inttoptr i64 %1146 to i64*
  %1149 = load i64, i64* %1148, align 8
  store i64 %1149, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1150 = add i64 %1134, -80
  %1151 = add i64 %1136, 18
  store i64 %1151, i64* %PC, align 8
  %1152 = inttoptr i64 %1150 to i64*
  store i64 %1149, i64* %1152, align 8
  %1153 = load i64, i64* %RBP, align 8
  %1154 = add i64 %1153, -24
  %1155 = load i64, i64* %PC, align 8
  %1156 = add i64 %1155, 4
  store i64 %1156, i64* %PC, align 8
  %1157 = inttoptr i64 %1154 to i64*
  %1158 = load i64, i64* %1157, align 8
  store i64 %1158, i64* %RDX, align 8, !tbaa !2428
  %1159 = add i64 %1153, -40
  %1160 = add i64 %1155, 7
  store i64 %1160, i64* %PC, align 8
  %1161 = inttoptr i64 %1159 to i32*
  %1162 = load i32, i32* %1161, align 4
  %1163 = add i32 %1162, 1
  %1164 = zext i32 %1163 to i64
  store i64 %1164, i64* %RCX, align 8, !tbaa !2428
  %1165 = icmp eq i32 %1162, -1
  %1166 = icmp eq i32 %1163, 0
  %1167 = or i1 %1165, %1166
  %1168 = zext i1 %1167 to i8
  store i8 %1168, i8* %51, align 1, !tbaa !2433
  %1169 = and i32 %1163, 255
  %1170 = tail call i32 @llvm.ctpop.i32(i32 %1169) #11
  %1171 = trunc i32 %1170 to i8
  %1172 = and i8 %1171, 1
  %1173 = xor i8 %1172, 1
  store i8 %1173, i8* %52, align 1, !tbaa !2447
  %1174 = xor i32 %1162, %1163
  %1175 = lshr i32 %1174, 4
  %1176 = trunc i32 %1175 to i8
  %1177 = and i8 %1176, 1
  store i8 %1177, i8* %53, align 1, !tbaa !2451
  %1178 = zext i1 %1166 to i8
  store i8 %1178, i8* %54, align 1, !tbaa !2448
  %1179 = lshr i32 %1163, 31
  %1180 = trunc i32 %1179 to i8
  store i8 %1180, i8* %55, align 1, !tbaa !2449
  %1181 = lshr i32 %1162, 31
  %1182 = xor i32 %1179, %1181
  %1183 = add nuw nsw i32 %1182, %1179
  %1184 = icmp eq i32 %1183, 2
  %1185 = zext i1 %1184 to i8
  store i8 %1185, i8* %56, align 1, !tbaa !2450
  %1186 = sext i32 %1163 to i64
  store i64 %1186, i64* %RSI, align 8, !tbaa !2428
  %1187 = shl nsw i64 %1186, 3
  %1188 = add i64 %1187, %1158
  %1189 = add i64 %1155, 18
  store i64 %1189, i64* %PC, align 8
  %1190 = inttoptr i64 %1188 to i64*
  %1191 = load i64, i64* %1190, align 8
  %1192 = load i64, i64* %RAX, align 8
  %1193 = xor i64 %1192, %1191
  store i64 %1193, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %1194 = trunc i64 %1193 to i32
  %1195 = and i32 %1194, 255
  %1196 = tail call i32 @llvm.ctpop.i32(i32 %1195) #11
  %1197 = trunc i32 %1196 to i8
  %1198 = and i8 %1197, 1
  %1199 = xor i8 %1198, 1
  store i8 %1199, i8* %52, align 1, !tbaa !2447
  %1200 = icmp eq i64 %1193, 0
  %1201 = zext i1 %1200 to i8
  store i8 %1201, i8* %54, align 1, !tbaa !2448
  %1202 = lshr i64 %1193, 63
  %1203 = trunc i64 %1202 to i8
  store i8 %1203, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %1193, i64* %3844, align 1, !tbaa !2428
  store i64 0, i64* %3842, align 1, !tbaa !2428
  %1204 = add i64 %1153, -88
  %1205 = add i64 %1155, 36
  store i64 %1205, i64* %PC, align 8
  %1206 = inttoptr i64 %1204 to i64*
  store i64 %1193, i64* %1206, align 8
  %1207 = load i64, i64* %RBP, align 8
  %1208 = add i64 %1207, -80
  %1209 = load i64, i64* %PC, align 8
  %1210 = add i64 %1209, 5
  store i64 %1210, i64* %PC, align 8
  %1211 = inttoptr i64 %1208 to i64*
  %1212 = load i64, i64* %1211, align 8
  store i64 %1212, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1213 = add i64 %1207, -24
  %1214 = add i64 %1209, 9
  store i64 %1214, i64* %PC, align 8
  %1215 = inttoptr i64 %1213 to i64*
  %1216 = load i64, i64* %1215, align 8
  store i64 %1216, i64* %RDX, align 8, !tbaa !2428
  %1217 = add i64 %1207, -32
  %1218 = add i64 %1209, 13
  store i64 %1218, i64* %PC, align 8
  %1219 = inttoptr i64 %1217 to i32*
  %1220 = load i32, i32* %1219, align 4
  %1221 = sext i32 %1220 to i64
  store i64 %1221, i64* %RSI, align 8, !tbaa !2428
  %1222 = shl nsw i64 %1221, 3
  %1223 = add i64 %1222, %1216
  %1224 = add i64 %1209, 18
  store i64 %1224, i64* %PC, align 8
  %1225 = inttoptr i64 %1223 to i64*
  store i64 %1212, i64* %1225, align 8
  %1226 = load i64, i64* %RBP, align 8
  %1227 = add i64 %1226, -88
  %1228 = load i64, i64* %PC, align 8
  %1229 = add i64 %1228, 5
  store i64 %1229, i64* %PC, align 8
  %1230 = inttoptr i64 %1227 to i64*
  %1231 = load i64, i64* %1230, align 8
  store i64 %1231, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1232 = add i64 %1226, -24
  %1233 = add i64 %1228, 9
  store i64 %1233, i64* %PC, align 8
  %1234 = inttoptr i64 %1232 to i64*
  %1235 = load i64, i64* %1234, align 8
  store i64 %1235, i64* %RDX, align 8, !tbaa !2428
  %1236 = add i64 %1226, -32
  %1237 = add i64 %1228, 12
  store i64 %1237, i64* %PC, align 8
  %1238 = inttoptr i64 %1236 to i32*
  %1239 = load i32, i32* %1238, align 4
  %1240 = add i32 %1239, 1
  %1241 = zext i32 %1240 to i64
  store i64 %1241, i64* %RCX, align 8, !tbaa !2428
  %1242 = icmp eq i32 %1239, -1
  %1243 = icmp eq i32 %1240, 0
  %1244 = or i1 %1242, %1243
  %1245 = zext i1 %1244 to i8
  store i8 %1245, i8* %51, align 1, !tbaa !2433
  %1246 = and i32 %1240, 255
  %1247 = tail call i32 @llvm.ctpop.i32(i32 %1246) #11
  %1248 = trunc i32 %1247 to i8
  %1249 = and i8 %1248, 1
  %1250 = xor i8 %1249, 1
  store i8 %1250, i8* %52, align 1, !tbaa !2447
  %1251 = xor i32 %1239, %1240
  %1252 = lshr i32 %1251, 4
  %1253 = trunc i32 %1252 to i8
  %1254 = and i8 %1253, 1
  store i8 %1254, i8* %53, align 1, !tbaa !2451
  %1255 = zext i1 %1243 to i8
  store i8 %1255, i8* %54, align 1, !tbaa !2448
  %1256 = lshr i32 %1240, 31
  %1257 = trunc i32 %1256 to i8
  store i8 %1257, i8* %55, align 1, !tbaa !2449
  %1258 = lshr i32 %1239, 31
  %1259 = xor i32 %1256, %1258
  %1260 = add nuw nsw i32 %1259, %1256
  %1261 = icmp eq i32 %1260, 2
  %1262 = zext i1 %1261 to i8
  store i8 %1262, i8* %56, align 1, !tbaa !2450
  %1263 = sext i32 %1240 to i64
  store i64 %1263, i64* %RSI, align 8, !tbaa !2428
  %1264 = shl nsw i64 %1263, 3
  %1265 = add i64 %1264, %1235
  %1266 = add i64 %1228, 23
  store i64 %1266, i64* %PC, align 8
  %1267 = inttoptr i64 %1265 to i64*
  store i64 %1231, i64* %1267, align 8
  %1268 = load i64, i64* %RBP, align 8
  %1269 = add i64 %1268, -64
  %1270 = load i64, i64* %PC, align 8
  %1271 = add i64 %1270, 5
  store i64 %1271, i64* %PC, align 8
  %1272 = inttoptr i64 %1269 to i64*
  %1273 = load i64, i64* %1272, align 8
  store i64 %1273, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1274 = add i64 %1268, -24
  %1275 = add i64 %1270, 9
  store i64 %1275, i64* %PC, align 8
  %1276 = inttoptr i64 %1274 to i64*
  %1277 = load i64, i64* %1276, align 8
  store i64 %1277, i64* %RDX, align 8, !tbaa !2428
  %1278 = add i64 %1268, -40
  %1279 = add i64 %1270, 13
  store i64 %1279, i64* %PC, align 8
  %1280 = inttoptr i64 %1278 to i32*
  %1281 = load i32, i32* %1280, align 4
  %1282 = sext i32 %1281 to i64
  store i64 %1282, i64* %RSI, align 8, !tbaa !2428
  %1283 = shl nsw i64 %1282, 3
  %1284 = add i64 %1283, %1277
  %1285 = add i64 %1270, 18
  store i64 %1285, i64* %PC, align 8
  %1286 = inttoptr i64 %1284 to i64*
  store i64 %1273, i64* %1286, align 8
  %1287 = load i64, i64* %RBP, align 8
  %1288 = add i64 %1287, -72
  %1289 = load i64, i64* %PC, align 8
  %1290 = add i64 %1289, 5
  store i64 %1290, i64* %PC, align 8
  %1291 = inttoptr i64 %1288 to i64*
  %1292 = load i64, i64* %1291, align 8
  store i64 %1292, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1293 = add i64 %1287, -24
  %1294 = add i64 %1289, 9
  store i64 %1294, i64* %PC, align 8
  %1295 = inttoptr i64 %1293 to i64*
  %1296 = load i64, i64* %1295, align 8
  store i64 %1296, i64* %RDX, align 8, !tbaa !2428
  %1297 = add i64 %1287, -40
  %1298 = add i64 %1289, 12
  store i64 %1298, i64* %PC, align 8
  %1299 = inttoptr i64 %1297 to i32*
  %1300 = load i32, i32* %1299, align 4
  %1301 = add i32 %1300, 1
  %1302 = zext i32 %1301 to i64
  store i64 %1302, i64* %RCX, align 8, !tbaa !2428
  %1303 = icmp eq i32 %1300, -1
  %1304 = icmp eq i32 %1301, 0
  %1305 = or i1 %1303, %1304
  %1306 = zext i1 %1305 to i8
  store i8 %1306, i8* %51, align 1, !tbaa !2433
  %1307 = and i32 %1301, 255
  %1308 = tail call i32 @llvm.ctpop.i32(i32 %1307) #11
  %1309 = trunc i32 %1308 to i8
  %1310 = and i8 %1309, 1
  %1311 = xor i8 %1310, 1
  store i8 %1311, i8* %52, align 1, !tbaa !2447
  %1312 = xor i32 %1300, %1301
  %1313 = lshr i32 %1312, 4
  %1314 = trunc i32 %1313 to i8
  %1315 = and i8 %1314, 1
  store i8 %1315, i8* %53, align 1, !tbaa !2451
  %1316 = zext i1 %1304 to i8
  store i8 %1316, i8* %54, align 1, !tbaa !2448
  %1317 = lshr i32 %1301, 31
  %1318 = trunc i32 %1317 to i8
  store i8 %1318, i8* %55, align 1, !tbaa !2449
  %1319 = lshr i32 %1300, 31
  %1320 = xor i32 %1317, %1319
  %1321 = add nuw nsw i32 %1320, %1317
  %1322 = icmp eq i32 %1321, 2
  %1323 = zext i1 %1322 to i8
  store i8 %1323, i8* %56, align 1, !tbaa !2450
  %1324 = sext i32 %1301 to i64
  store i64 %1324, i64* %RSI, align 8, !tbaa !2428
  %1325 = shl nsw i64 %1324, 3
  %1326 = add i64 %1325, %1296
  %1327 = add i64 %1289, 23
  store i64 %1327, i64* %PC, align 8
  %1328 = inttoptr i64 %1326 to i64*
  store i64 %1292, i64* %1328, align 8
  %1329 = load i64, i64* %RBP, align 8
  %1330 = add i64 %1329, -52
  %1331 = load i64, i64* %PC, align 8
  %1332 = add i64 %1331, 3
  store i64 %1332, i64* %PC, align 8
  %1333 = inttoptr i64 %1330 to i32*
  %1334 = load i32, i32* %1333, align 4
  %1335 = zext i32 %1334 to i64
  store i64 %1335, i64* %RCX, align 8, !tbaa !2428
  %1336 = add i64 %1329, -32
  %1337 = add i64 %1331, 6
  store i64 %1337, i64* %PC, align 8
  %1338 = inttoptr i64 %1336 to i32*
  %1339 = load i32, i32* %1338, align 4
  %1340 = add i32 %1339, %1334
  %1341 = zext i32 %1340 to i64
  store i64 %1341, i64* %RCX, align 8, !tbaa !2428
  %1342 = icmp ult i32 %1340, %1334
  %1343 = icmp ult i32 %1340, %1339
  %1344 = or i1 %1342, %1343
  %1345 = zext i1 %1344 to i8
  store i8 %1345, i8* %51, align 1, !tbaa !2433
  %1346 = and i32 %1340, 255
  %1347 = tail call i32 @llvm.ctpop.i32(i32 %1346) #11
  %1348 = trunc i32 %1347 to i8
  %1349 = and i8 %1348, 1
  %1350 = xor i8 %1349, 1
  store i8 %1350, i8* %52, align 1, !tbaa !2447
  %1351 = xor i32 %1339, %1334
  %1352 = xor i32 %1351, %1340
  %1353 = lshr i32 %1352, 4
  %1354 = trunc i32 %1353 to i8
  %1355 = and i8 %1354, 1
  store i8 %1355, i8* %53, align 1, !tbaa !2451
  %1356 = icmp eq i32 %1340, 0
  %1357 = zext i1 %1356 to i8
  store i8 %1357, i8* %54, align 1, !tbaa !2448
  %1358 = lshr i32 %1340, 31
  %1359 = trunc i32 %1358 to i8
  store i8 %1359, i8* %55, align 1, !tbaa !2449
  %1360 = lshr i32 %1334, 31
  %1361 = lshr i32 %1339, 31
  %1362 = xor i32 %1358, %1360
  %1363 = xor i32 %1358, %1361
  %1364 = add nuw nsw i32 %1362, %1363
  %1365 = icmp eq i32 %1364, 2
  %1366 = zext i1 %1365 to i8
  store i8 %1366, i8* %56, align 1, !tbaa !2450
  %1367 = add i64 %1331, 9
  store i64 %1367, i64* %PC, align 8
  store i32 %1340, i32* %1338, align 4
  %1368 = load i64, i64* %RBP, align 8
  %1369 = add i64 %1368, -52
  %1370 = load i64, i64* %PC, align 8
  %1371 = add i64 %1370, 3
  store i64 %1371, i64* %PC, align 8
  %1372 = inttoptr i64 %1369 to i32*
  %1373 = load i32, i32* %1372, align 4
  %1374 = zext i32 %1373 to i64
  store i64 %1374, i64* %RCX, align 8, !tbaa !2428
  %1375 = add i64 %1368, -40
  %1376 = add i64 %1370, 6
  store i64 %1376, i64* %PC, align 8
  %1377 = inttoptr i64 %1375 to i32*
  %1378 = load i32, i32* %1377, align 4
  %1379 = sub i32 %1378, %1373
  %1380 = zext i32 %1379 to i64
  store i64 %1380, i64* %RDI, align 8, !tbaa !2428
  %1381 = icmp ult i32 %1378, %1373
  %1382 = zext i1 %1381 to i8
  store i8 %1382, i8* %51, align 1, !tbaa !2433
  %1383 = and i32 %1379, 255
  %1384 = tail call i32 @llvm.ctpop.i32(i32 %1383) #11
  %1385 = trunc i32 %1384 to i8
  %1386 = and i8 %1385, 1
  %1387 = xor i8 %1386, 1
  store i8 %1387, i8* %52, align 1, !tbaa !2447
  %1388 = xor i32 %1373, %1378
  %1389 = xor i32 %1388, %1379
  %1390 = lshr i32 %1389, 4
  %1391 = trunc i32 %1390 to i8
  %1392 = and i8 %1391, 1
  store i8 %1392, i8* %53, align 1, !tbaa !2451
  %1393 = icmp eq i32 %1379, 0
  %1394 = zext i1 %1393 to i8
  store i8 %1394, i8* %54, align 1, !tbaa !2448
  %1395 = lshr i32 %1379, 31
  %1396 = trunc i32 %1395 to i8
  store i8 %1396, i8* %55, align 1, !tbaa !2449
  %1397 = lshr i32 %1378, 31
  %1398 = lshr i32 %1373, 31
  %1399 = xor i32 %1398, %1397
  %1400 = xor i32 %1395, %1397
  %1401 = add nuw nsw i32 %1400, %1399
  %1402 = icmp eq i32 %1401, 2
  %1403 = zext i1 %1402 to i8
  store i8 %1403, i8* %56, align 1, !tbaa !2450
  %1404 = add i64 %1370, 11
  store i64 %1404, i64* %PC, align 8
  store i32 %1379, i32* %1377, align 4
  %1405 = load i64, i64* %RBP, align 8
  %1406 = add i64 %1405, -24
  %1407 = load i64, i64* %PC, align 8
  %1408 = add i64 %1407, 4
  store i64 %1408, i64* %PC, align 8
  %1409 = inttoptr i64 %1406 to i64*
  %1410 = load i64, i64* %1409, align 8
  store i64 %1410, i64* %RDX, align 8, !tbaa !2428
  %1411 = add i64 %1405, -32
  %1412 = add i64 %1407, 8
  store i64 %1412, i64* %PC, align 8
  %1413 = inttoptr i64 %1411 to i32*
  %1414 = load i32, i32* %1413, align 4
  %1415 = sext i32 %1414 to i64
  store i64 %1415, i64* %RSI, align 8, !tbaa !2428
  %1416 = shl nsw i64 %1415, 3
  %1417 = add i64 %1416, %1410
  %1418 = add i64 %1407, 13
  store i64 %1418, i64* %PC, align 8
  %1419 = inttoptr i64 %1417 to i64*
  %1420 = load i64, i64* %1419, align 8
  store i64 %1420, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1421 = add i64 %1405, -64
  %1422 = add i64 %1407, 18
  store i64 %1422, i64* %PC, align 8
  %1423 = inttoptr i64 %1421 to i64*
  store i64 %1420, i64* %1423, align 8
  %1424 = load i64, i64* %RBP, align 8
  %1425 = add i64 %1424, -24
  %1426 = load i64, i64* %PC, align 8
  %1427 = add i64 %1426, 4
  store i64 %1427, i64* %PC, align 8
  %1428 = inttoptr i64 %1425 to i64*
  %1429 = load i64, i64* %1428, align 8
  store i64 %1429, i64* %RDX, align 8, !tbaa !2428
  %1430 = add i64 %1424, -32
  %1431 = add i64 %1426, 7
  store i64 %1431, i64* %PC, align 8
  %1432 = inttoptr i64 %1430 to i32*
  %1433 = load i32, i32* %1432, align 4
  %1434 = add i32 %1433, 1
  %1435 = zext i32 %1434 to i64
  store i64 %1435, i64* %RCX, align 8, !tbaa !2428
  %1436 = icmp eq i32 %1433, -1
  %1437 = icmp eq i32 %1434, 0
  %1438 = or i1 %1436, %1437
  %1439 = zext i1 %1438 to i8
  store i8 %1439, i8* %51, align 1, !tbaa !2433
  %1440 = and i32 %1434, 255
  %1441 = tail call i32 @llvm.ctpop.i32(i32 %1440) #11
  %1442 = trunc i32 %1441 to i8
  %1443 = and i8 %1442, 1
  %1444 = xor i8 %1443, 1
  store i8 %1444, i8* %52, align 1, !tbaa !2447
  %1445 = xor i32 %1433, %1434
  %1446 = lshr i32 %1445, 4
  %1447 = trunc i32 %1446 to i8
  %1448 = and i8 %1447, 1
  store i8 %1448, i8* %53, align 1, !tbaa !2451
  %1449 = zext i1 %1437 to i8
  store i8 %1449, i8* %54, align 1, !tbaa !2448
  %1450 = lshr i32 %1434, 31
  %1451 = trunc i32 %1450 to i8
  store i8 %1451, i8* %55, align 1, !tbaa !2449
  %1452 = lshr i32 %1433, 31
  %1453 = xor i32 %1450, %1452
  %1454 = add nuw nsw i32 %1453, %1450
  %1455 = icmp eq i32 %1454, 2
  %1456 = zext i1 %1455 to i8
  store i8 %1456, i8* %56, align 1, !tbaa !2450
  %1457 = sext i32 %1434 to i64
  store i64 %1457, i64* %RSI, align 8, !tbaa !2428
  %1458 = shl nsw i64 %1457, 3
  %1459 = add i64 %1458, %1429
  %1460 = add i64 %1426, 18
  store i64 %1460, i64* %PC, align 8
  %1461 = inttoptr i64 %1459 to i64*
  %1462 = load i64, i64* %1461, align 8
  %1463 = load i64, i64* %RAX, align 8
  %1464 = xor i64 %1463, %1462
  store i64 %1464, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %1465 = trunc i64 %1464 to i32
  %1466 = and i32 %1465, 255
  %1467 = tail call i32 @llvm.ctpop.i32(i32 %1466) #11
  %1468 = trunc i32 %1467 to i8
  %1469 = and i8 %1468, 1
  %1470 = xor i8 %1469, 1
  store i8 %1470, i8* %52, align 1, !tbaa !2447
  %1471 = icmp eq i64 %1464, 0
  %1472 = zext i1 %1471 to i8
  store i8 %1472, i8* %54, align 1, !tbaa !2448
  %1473 = lshr i64 %1464, 63
  %1474 = trunc i64 %1473 to i8
  store i8 %1474, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %1464, i64* %3844, align 1, !tbaa !2428
  store i64 0, i64* %3842, align 1, !tbaa !2428
  %1475 = add i64 %1424, -72
  %1476 = add i64 %1426, 36
  store i64 %1476, i64* %PC, align 8
  %1477 = inttoptr i64 %1475 to i64*
  store i64 %1464, i64* %1477, align 8
  %1478 = load i64, i64* %RBP, align 8
  %1479 = add i64 %1478, -24
  %1480 = load i64, i64* %PC, align 8
  %1481 = add i64 %1480, 4
  store i64 %1481, i64* %PC, align 8
  %1482 = inttoptr i64 %1479 to i64*
  %1483 = load i64, i64* %1482, align 8
  store i64 %1483, i64* %RDX, align 8, !tbaa !2428
  %1484 = add i64 %1478, -40
  %1485 = add i64 %1480, 8
  store i64 %1485, i64* %PC, align 8
  %1486 = inttoptr i64 %1484 to i32*
  %1487 = load i32, i32* %1486, align 4
  %1488 = sext i32 %1487 to i64
  store i64 %1488, i64* %RSI, align 8, !tbaa !2428
  %1489 = shl nsw i64 %1488, 3
  %1490 = add i64 %1489, %1483
  %1491 = add i64 %1480, 13
  store i64 %1491, i64* %PC, align 8
  %1492 = inttoptr i64 %1490 to i64*
  %1493 = load i64, i64* %1492, align 8
  store i64 %1493, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1494 = add i64 %1478, -80
  %1495 = add i64 %1480, 18
  store i64 %1495, i64* %PC, align 8
  %1496 = inttoptr i64 %1494 to i64*
  store i64 %1493, i64* %1496, align 8
  %1497 = load i64, i64* %RBP, align 8
  %1498 = add i64 %1497, -24
  %1499 = load i64, i64* %PC, align 8
  %1500 = add i64 %1499, 4
  store i64 %1500, i64* %PC, align 8
  %1501 = inttoptr i64 %1498 to i64*
  %1502 = load i64, i64* %1501, align 8
  store i64 %1502, i64* %RDX, align 8, !tbaa !2428
  %1503 = add i64 %1497, -40
  %1504 = add i64 %1499, 7
  store i64 %1504, i64* %PC, align 8
  %1505 = inttoptr i64 %1503 to i32*
  %1506 = load i32, i32* %1505, align 4
  %1507 = add i32 %1506, 1
  %1508 = zext i32 %1507 to i64
  store i64 %1508, i64* %RCX, align 8, !tbaa !2428
  %1509 = icmp eq i32 %1506, -1
  %1510 = icmp eq i32 %1507, 0
  %1511 = or i1 %1509, %1510
  %1512 = zext i1 %1511 to i8
  store i8 %1512, i8* %51, align 1, !tbaa !2433
  %1513 = and i32 %1507, 255
  %1514 = tail call i32 @llvm.ctpop.i32(i32 %1513) #11
  %1515 = trunc i32 %1514 to i8
  %1516 = and i8 %1515, 1
  %1517 = xor i8 %1516, 1
  store i8 %1517, i8* %52, align 1, !tbaa !2447
  %1518 = xor i32 %1506, %1507
  %1519 = lshr i32 %1518, 4
  %1520 = trunc i32 %1519 to i8
  %1521 = and i8 %1520, 1
  store i8 %1521, i8* %53, align 1, !tbaa !2451
  %1522 = zext i1 %1510 to i8
  store i8 %1522, i8* %54, align 1, !tbaa !2448
  %1523 = lshr i32 %1507, 31
  %1524 = trunc i32 %1523 to i8
  store i8 %1524, i8* %55, align 1, !tbaa !2449
  %1525 = lshr i32 %1506, 31
  %1526 = xor i32 %1523, %1525
  %1527 = add nuw nsw i32 %1526, %1523
  %1528 = icmp eq i32 %1527, 2
  %1529 = zext i1 %1528 to i8
  store i8 %1529, i8* %56, align 1, !tbaa !2450
  %1530 = sext i32 %1507 to i64
  store i64 %1530, i64* %RSI, align 8, !tbaa !2428
  %1531 = shl nsw i64 %1530, 3
  %1532 = add i64 %1531, %1502
  %1533 = add i64 %1499, 18
  store i64 %1533, i64* %PC, align 8
  %1534 = inttoptr i64 %1532 to i64*
  %1535 = load i64, i64* %1534, align 8
  %1536 = load i64, i64* %RAX, align 8
  %1537 = xor i64 %1536, %1535
  store i64 %1537, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %1538 = trunc i64 %1537 to i32
  %1539 = and i32 %1538, 255
  %1540 = tail call i32 @llvm.ctpop.i32(i32 %1539) #11
  %1541 = trunc i32 %1540 to i8
  %1542 = and i8 %1541, 1
  %1543 = xor i8 %1542, 1
  store i8 %1543, i8* %52, align 1, !tbaa !2447
  %1544 = icmp eq i64 %1537, 0
  %1545 = zext i1 %1544 to i8
  store i8 %1545, i8* %54, align 1, !tbaa !2448
  %1546 = lshr i64 %1537, 63
  %1547 = trunc i64 %1546 to i8
  store i8 %1547, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %1537, i64* %3844, align 1, !tbaa !2428
  store i64 0, i64* %3842, align 1, !tbaa !2428
  %1548 = add i64 %1497, -88
  %1549 = add i64 %1499, 36
  store i64 %1549, i64* %PC, align 8
  %1550 = inttoptr i64 %1548 to i64*
  store i64 %1537, i64* %1550, align 8
  %1551 = load i64, i64* %RBP, align 8
  %1552 = add i64 %1551, -80
  %1553 = load i64, i64* %PC, align 8
  %1554 = add i64 %1553, 5
  store i64 %1554, i64* %PC, align 8
  %1555 = inttoptr i64 %1552 to i64*
  %1556 = load i64, i64* %1555, align 8
  store i64 %1556, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1557 = add i64 %1551, -24
  %1558 = add i64 %1553, 9
  store i64 %1558, i64* %PC, align 8
  %1559 = inttoptr i64 %1557 to i64*
  %1560 = load i64, i64* %1559, align 8
  store i64 %1560, i64* %RDX, align 8, !tbaa !2428
  %1561 = add i64 %1551, -32
  %1562 = add i64 %1553, 13
  store i64 %1562, i64* %PC, align 8
  %1563 = inttoptr i64 %1561 to i32*
  %1564 = load i32, i32* %1563, align 4
  %1565 = sext i32 %1564 to i64
  store i64 %1565, i64* %RSI, align 8, !tbaa !2428
  %1566 = shl nsw i64 %1565, 3
  %1567 = add i64 %1566, %1560
  %1568 = add i64 %1553, 18
  store i64 %1568, i64* %PC, align 8
  %1569 = inttoptr i64 %1567 to i64*
  store i64 %1556, i64* %1569, align 8
  %1570 = load i64, i64* %RBP, align 8
  %1571 = add i64 %1570, -88
  %1572 = load i64, i64* %PC, align 8
  %1573 = add i64 %1572, 5
  store i64 %1573, i64* %PC, align 8
  %1574 = inttoptr i64 %1571 to i64*
  %1575 = load i64, i64* %1574, align 8
  store i64 %1575, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1576 = add i64 %1570, -24
  %1577 = add i64 %1572, 9
  store i64 %1577, i64* %PC, align 8
  %1578 = inttoptr i64 %1576 to i64*
  %1579 = load i64, i64* %1578, align 8
  store i64 %1579, i64* %RDX, align 8, !tbaa !2428
  %1580 = add i64 %1570, -32
  %1581 = add i64 %1572, 12
  store i64 %1581, i64* %PC, align 8
  %1582 = inttoptr i64 %1580 to i32*
  %1583 = load i32, i32* %1582, align 4
  %1584 = add i32 %1583, 1
  %1585 = zext i32 %1584 to i64
  store i64 %1585, i64* %RCX, align 8, !tbaa !2428
  %1586 = icmp eq i32 %1583, -1
  %1587 = icmp eq i32 %1584, 0
  %1588 = or i1 %1586, %1587
  %1589 = zext i1 %1588 to i8
  store i8 %1589, i8* %51, align 1, !tbaa !2433
  %1590 = and i32 %1584, 255
  %1591 = tail call i32 @llvm.ctpop.i32(i32 %1590) #11
  %1592 = trunc i32 %1591 to i8
  %1593 = and i8 %1592, 1
  %1594 = xor i8 %1593, 1
  store i8 %1594, i8* %52, align 1, !tbaa !2447
  %1595 = xor i32 %1583, %1584
  %1596 = lshr i32 %1595, 4
  %1597 = trunc i32 %1596 to i8
  %1598 = and i8 %1597, 1
  store i8 %1598, i8* %53, align 1, !tbaa !2451
  %1599 = zext i1 %1587 to i8
  store i8 %1599, i8* %54, align 1, !tbaa !2448
  %1600 = lshr i32 %1584, 31
  %1601 = trunc i32 %1600 to i8
  store i8 %1601, i8* %55, align 1, !tbaa !2449
  %1602 = lshr i32 %1583, 31
  %1603 = xor i32 %1600, %1602
  %1604 = add nuw nsw i32 %1603, %1600
  %1605 = icmp eq i32 %1604, 2
  %1606 = zext i1 %1605 to i8
  store i8 %1606, i8* %56, align 1, !tbaa !2450
  %1607 = sext i32 %1584 to i64
  store i64 %1607, i64* %RSI, align 8, !tbaa !2428
  %1608 = shl nsw i64 %1607, 3
  %1609 = add i64 %1608, %1579
  %1610 = add i64 %1572, 23
  store i64 %1610, i64* %PC, align 8
  %1611 = inttoptr i64 %1609 to i64*
  store i64 %1575, i64* %1611, align 8
  %1612 = load i64, i64* %RBP, align 8
  %1613 = add i64 %1612, -64
  %1614 = load i64, i64* %PC, align 8
  %1615 = add i64 %1614, 5
  store i64 %1615, i64* %PC, align 8
  %1616 = inttoptr i64 %1613 to i64*
  %1617 = load i64, i64* %1616, align 8
  store i64 %1617, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1618 = add i64 %1612, -24
  %1619 = add i64 %1614, 9
  store i64 %1619, i64* %PC, align 8
  %1620 = inttoptr i64 %1618 to i64*
  %1621 = load i64, i64* %1620, align 8
  store i64 %1621, i64* %RDX, align 8, !tbaa !2428
  %1622 = add i64 %1612, -40
  %1623 = add i64 %1614, 13
  store i64 %1623, i64* %PC, align 8
  %1624 = inttoptr i64 %1622 to i32*
  %1625 = load i32, i32* %1624, align 4
  %1626 = sext i32 %1625 to i64
  store i64 %1626, i64* %RSI, align 8, !tbaa !2428
  %1627 = shl nsw i64 %1626, 3
  %1628 = add i64 %1627, %1621
  %1629 = add i64 %1614, 18
  store i64 %1629, i64* %PC, align 8
  %1630 = inttoptr i64 %1628 to i64*
  store i64 %1617, i64* %1630, align 8
  %1631 = load i64, i64* %RBP, align 8
  %1632 = add i64 %1631, -72
  %1633 = load i64, i64* %PC, align 8
  %1634 = add i64 %1633, 5
  store i64 %1634, i64* %PC, align 8
  %1635 = inttoptr i64 %1632 to i64*
  %1636 = load i64, i64* %1635, align 8
  store i64 %1636, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1637 = add i64 %1631, -24
  %1638 = add i64 %1633, 9
  store i64 %1638, i64* %PC, align 8
  %1639 = inttoptr i64 %1637 to i64*
  %1640 = load i64, i64* %1639, align 8
  store i64 %1640, i64* %RDX, align 8, !tbaa !2428
  %1641 = add i64 %1631, -40
  %1642 = add i64 %1633, 12
  store i64 %1642, i64* %PC, align 8
  %1643 = inttoptr i64 %1641 to i32*
  %1644 = load i32, i32* %1643, align 4
  %1645 = add i32 %1644, 1
  %1646 = zext i32 %1645 to i64
  store i64 %1646, i64* %RCX, align 8, !tbaa !2428
  %1647 = icmp eq i32 %1644, -1
  %1648 = icmp eq i32 %1645, 0
  %1649 = or i1 %1647, %1648
  %1650 = zext i1 %1649 to i8
  store i8 %1650, i8* %51, align 1, !tbaa !2433
  %1651 = and i32 %1645, 255
  %1652 = tail call i32 @llvm.ctpop.i32(i32 %1651) #11
  %1653 = trunc i32 %1652 to i8
  %1654 = and i8 %1653, 1
  %1655 = xor i8 %1654, 1
  store i8 %1655, i8* %52, align 1, !tbaa !2447
  %1656 = xor i32 %1644, %1645
  %1657 = lshr i32 %1656, 4
  %1658 = trunc i32 %1657 to i8
  %1659 = and i8 %1658, 1
  store i8 %1659, i8* %53, align 1, !tbaa !2451
  %1660 = zext i1 %1648 to i8
  store i8 %1660, i8* %54, align 1, !tbaa !2448
  %1661 = lshr i32 %1645, 31
  %1662 = trunc i32 %1661 to i8
  store i8 %1662, i8* %55, align 1, !tbaa !2449
  %1663 = lshr i32 %1644, 31
  %1664 = xor i32 %1661, %1663
  %1665 = add nuw nsw i32 %1664, %1661
  %1666 = icmp eq i32 %1665, 2
  %1667 = zext i1 %1666 to i8
  store i8 %1667, i8* %56, align 1, !tbaa !2450
  %1668 = sext i32 %1645 to i64
  store i64 %1668, i64* %RSI, align 8, !tbaa !2428
  %1669 = shl nsw i64 %1668, 3
  %1670 = add i64 %1669, %1640
  %1671 = add i64 %1633, 23
  store i64 %1671, i64* %PC, align 8
  %1672 = inttoptr i64 %1670 to i64*
  store i64 %1636, i64* %1672, align 8
  %1673 = load i64, i64* %RBP, align 8
  %1674 = add i64 %1673, -52
  %1675 = load i64, i64* %PC, align 8
  %1676 = add i64 %1675, 3
  store i64 %1676, i64* %PC, align 8
  %1677 = inttoptr i64 %1674 to i32*
  %1678 = load i32, i32* %1677, align 4
  %1679 = zext i32 %1678 to i64
  store i64 %1679, i64* %RCX, align 8, !tbaa !2428
  %1680 = add i64 %1673, -32
  %1681 = add i64 %1675, 6
  store i64 %1681, i64* %PC, align 8
  %1682 = inttoptr i64 %1680 to i32*
  %1683 = load i32, i32* %1682, align 4
  %1684 = add i32 %1683, %1678
  %1685 = zext i32 %1684 to i64
  store i64 %1685, i64* %RCX, align 8, !tbaa !2428
  %1686 = icmp ult i32 %1684, %1678
  %1687 = icmp ult i32 %1684, %1683
  %1688 = or i1 %1686, %1687
  %1689 = zext i1 %1688 to i8
  store i8 %1689, i8* %51, align 1, !tbaa !2433
  %1690 = and i32 %1684, 255
  %1691 = tail call i32 @llvm.ctpop.i32(i32 %1690) #11
  %1692 = trunc i32 %1691 to i8
  %1693 = and i8 %1692, 1
  %1694 = xor i8 %1693, 1
  store i8 %1694, i8* %52, align 1, !tbaa !2447
  %1695 = xor i32 %1683, %1678
  %1696 = xor i32 %1695, %1684
  %1697 = lshr i32 %1696, 4
  %1698 = trunc i32 %1697 to i8
  %1699 = and i8 %1698, 1
  store i8 %1699, i8* %53, align 1, !tbaa !2451
  %1700 = icmp eq i32 %1684, 0
  %1701 = zext i1 %1700 to i8
  store i8 %1701, i8* %54, align 1, !tbaa !2448
  %1702 = lshr i32 %1684, 31
  %1703 = trunc i32 %1702 to i8
  store i8 %1703, i8* %55, align 1, !tbaa !2449
  %1704 = lshr i32 %1678, 31
  %1705 = lshr i32 %1683, 31
  %1706 = xor i32 %1702, %1704
  %1707 = xor i32 %1702, %1705
  %1708 = add nuw nsw i32 %1706, %1707
  %1709 = icmp eq i32 %1708, 2
  %1710 = zext i1 %1709 to i8
  store i8 %1710, i8* %56, align 1, !tbaa !2450
  %1711 = add i64 %1675, 9
  store i64 %1711, i64* %PC, align 8
  store i32 %1684, i32* %1682, align 4
  %1712 = load i64, i64* %RBP, align 8
  %1713 = add i64 %1712, -52
  %1714 = load i64, i64* %PC, align 8
  %1715 = add i64 %1714, 3
  store i64 %1715, i64* %PC, align 8
  %1716 = inttoptr i64 %1713 to i32*
  %1717 = load i32, i32* %1716, align 4
  %1718 = shl i32 %1717, 1
  %1719 = icmp slt i32 %1717, 0
  %1720 = icmp slt i32 %1718, 0
  %1721 = xor i1 %1719, %1720
  %1722 = zext i32 %1718 to i64
  store i64 %1722, i64* %RCX, align 8, !tbaa !2428
  %.lobit19 = lshr i32 %1717, 31
  %1723 = trunc i32 %.lobit19 to i8
  store i8 %1723, i8* %51, align 1, !tbaa !2432
  %1724 = and i32 %1718, 254
  %1725 = tail call i32 @llvm.ctpop.i32(i32 %1724) #11
  %1726 = trunc i32 %1725 to i8
  %1727 = and i8 %1726, 1
  %1728 = xor i8 %1727, 1
  store i8 %1728, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %1729 = icmp eq i32 %1718, 0
  %1730 = zext i1 %1729 to i8
  store i8 %1730, i8* %54, align 1, !tbaa !2432
  %1731 = lshr i32 %1717, 30
  %1732 = and i32 %1731, 1
  %1733 = trunc i32 %1732 to i8
  store i8 %1733, i8* %55, align 1, !tbaa !2432
  %1734 = zext i1 %1721 to i8
  store i8 %1734, i8* %56, align 1, !tbaa !2432
  %1735 = add i64 %1712, -40
  %1736 = add i64 %1714, 9
  store i64 %1736, i64* %PC, align 8
  %1737 = inttoptr i64 %1735 to i32*
  %1738 = load i32, i32* %1737, align 4
  %1739 = add i32 %1738, %1718
  %1740 = zext i32 %1739 to i64
  store i64 %1740, i64* %RCX, align 8, !tbaa !2428
  %1741 = icmp ult i32 %1739, %1718
  %1742 = icmp ult i32 %1739, %1738
  %1743 = or i1 %1741, %1742
  %1744 = zext i1 %1743 to i8
  store i8 %1744, i8* %51, align 1, !tbaa !2433
  %1745 = and i32 %1739, 255
  %1746 = tail call i32 @llvm.ctpop.i32(i32 %1745) #11
  %1747 = trunc i32 %1746 to i8
  %1748 = and i8 %1747, 1
  %1749 = xor i8 %1748, 1
  store i8 %1749, i8* %52, align 1, !tbaa !2447
  %1750 = xor i32 %1738, %1718
  %1751 = xor i32 %1750, %1739
  %1752 = lshr i32 %1751, 4
  %1753 = trunc i32 %1752 to i8
  %1754 = and i8 %1753, 1
  store i8 %1754, i8* %53, align 1, !tbaa !2451
  %1755 = icmp eq i32 %1739, 0
  %1756 = zext i1 %1755 to i8
  store i8 %1756, i8* %54, align 1, !tbaa !2448
  %1757 = lshr i32 %1739, 31
  %1758 = trunc i32 %1757 to i8
  store i8 %1758, i8* %55, align 1, !tbaa !2449
  %1759 = lshr i32 %1738, 31
  %1760 = xor i32 %1757, %1732
  %1761 = xor i32 %1757, %1759
  %1762 = add nuw nsw i32 %1760, %1761
  %1763 = icmp eq i32 %1762, 2
  %1764 = zext i1 %1763 to i8
  store i8 %1764, i8* %56, align 1, !tbaa !2450
  %1765 = add i64 %1714, 12
  store i64 %1765, i64* %PC, align 8
  store i32 %1739, i32* %1737, align 4
  %1766 = load i64, i64* %RBP, align 8
  %1767 = add i64 %1766, -24
  %1768 = load i64, i64* %PC, align 8
  %1769 = add i64 %1768, 4
  store i64 %1769, i64* %PC, align 8
  %1770 = inttoptr i64 %1767 to i64*
  %1771 = load i64, i64* %1770, align 8
  store i64 %1771, i64* %RDX, align 8, !tbaa !2428
  %1772 = add i64 %1766, -32
  %1773 = add i64 %1768, 8
  store i64 %1773, i64* %PC, align 8
  %1774 = inttoptr i64 %1772 to i32*
  %1775 = load i32, i32* %1774, align 4
  %1776 = sext i32 %1775 to i64
  store i64 %1776, i64* %RSI, align 8, !tbaa !2428
  %1777 = shl nsw i64 %1776, 3
  %1778 = add i64 %1777, %1771
  %1779 = add i64 %1768, 13
  store i64 %1779, i64* %PC, align 8
  %1780 = inttoptr i64 %1778 to i64*
  %1781 = load i64, i64* %1780, align 8
  store i64 %1781, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1782 = add i64 %1766, -64
  %1783 = add i64 %1768, 18
  store i64 %1783, i64* %PC, align 8
  %1784 = inttoptr i64 %1782 to i64*
  store i64 %1781, i64* %1784, align 8
  %1785 = load i64, i64* %RBP, align 8
  %1786 = add i64 %1785, -24
  %1787 = load i64, i64* %PC, align 8
  %1788 = add i64 %1787, 4
  store i64 %1788, i64* %PC, align 8
  %1789 = inttoptr i64 %1786 to i64*
  %1790 = load i64, i64* %1789, align 8
  store i64 %1790, i64* %RDX, align 8, !tbaa !2428
  %1791 = add i64 %1785, -32
  %1792 = add i64 %1787, 7
  store i64 %1792, i64* %PC, align 8
  %1793 = inttoptr i64 %1791 to i32*
  %1794 = load i32, i32* %1793, align 4
  %1795 = add i32 %1794, 1
  %1796 = zext i32 %1795 to i64
  store i64 %1796, i64* %RCX, align 8, !tbaa !2428
  %1797 = icmp eq i32 %1794, -1
  %1798 = icmp eq i32 %1795, 0
  %1799 = or i1 %1797, %1798
  %1800 = zext i1 %1799 to i8
  store i8 %1800, i8* %51, align 1, !tbaa !2433
  %1801 = and i32 %1795, 255
  %1802 = tail call i32 @llvm.ctpop.i32(i32 %1801) #11
  %1803 = trunc i32 %1802 to i8
  %1804 = and i8 %1803, 1
  %1805 = xor i8 %1804, 1
  store i8 %1805, i8* %52, align 1, !tbaa !2447
  %1806 = xor i32 %1794, %1795
  %1807 = lshr i32 %1806, 4
  %1808 = trunc i32 %1807 to i8
  %1809 = and i8 %1808, 1
  store i8 %1809, i8* %53, align 1, !tbaa !2451
  %1810 = zext i1 %1798 to i8
  store i8 %1810, i8* %54, align 1, !tbaa !2448
  %1811 = lshr i32 %1795, 31
  %1812 = trunc i32 %1811 to i8
  store i8 %1812, i8* %55, align 1, !tbaa !2449
  %1813 = lshr i32 %1794, 31
  %1814 = xor i32 %1811, %1813
  %1815 = add nuw nsw i32 %1814, %1811
  %1816 = icmp eq i32 %1815, 2
  %1817 = zext i1 %1816 to i8
  store i8 %1817, i8* %56, align 1, !tbaa !2450
  %1818 = sext i32 %1795 to i64
  store i64 %1818, i64* %RSI, align 8, !tbaa !2428
  %1819 = shl nsw i64 %1818, 3
  %1820 = add i64 %1819, %1790
  %1821 = add i64 %1787, 18
  store i64 %1821, i64* %PC, align 8
  %1822 = inttoptr i64 %1820 to i64*
  %1823 = load i64, i64* %1822, align 8
  %1824 = load i64, i64* %RAX, align 8
  %1825 = xor i64 %1824, %1823
  store i64 %1825, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %1826 = trunc i64 %1825 to i32
  %1827 = and i32 %1826, 255
  %1828 = tail call i32 @llvm.ctpop.i32(i32 %1827) #11
  %1829 = trunc i32 %1828 to i8
  %1830 = and i8 %1829, 1
  %1831 = xor i8 %1830, 1
  store i8 %1831, i8* %52, align 1, !tbaa !2447
  %1832 = icmp eq i64 %1825, 0
  %1833 = zext i1 %1832 to i8
  store i8 %1833, i8* %54, align 1, !tbaa !2448
  %1834 = lshr i64 %1825, 63
  %1835 = trunc i64 %1834 to i8
  store i8 %1835, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %1825, i64* %3844, align 1, !tbaa !2428
  store i64 0, i64* %3842, align 1, !tbaa !2428
  %1836 = add i64 %1785, -72
  %1837 = add i64 %1787, 36
  store i64 %1837, i64* %PC, align 8
  %1838 = inttoptr i64 %1836 to i64*
  store i64 %1825, i64* %1838, align 8
  %1839 = load i64, i64* %RBP, align 8
  %1840 = add i64 %1839, -24
  %1841 = load i64, i64* %PC, align 8
  %1842 = add i64 %1841, 4
  store i64 %1842, i64* %PC, align 8
  %1843 = inttoptr i64 %1840 to i64*
  %1844 = load i64, i64* %1843, align 8
  store i64 %1844, i64* %RDX, align 8, !tbaa !2428
  %1845 = add i64 %1839, -40
  %1846 = add i64 %1841, 8
  store i64 %1846, i64* %PC, align 8
  %1847 = inttoptr i64 %1845 to i32*
  %1848 = load i32, i32* %1847, align 4
  %1849 = sext i32 %1848 to i64
  store i64 %1849, i64* %RSI, align 8, !tbaa !2428
  %1850 = shl nsw i64 %1849, 3
  %1851 = add i64 %1850, %1844
  %1852 = add i64 %1841, 13
  store i64 %1852, i64* %PC, align 8
  %1853 = inttoptr i64 %1851 to i64*
  %1854 = load i64, i64* %1853, align 8
  store i64 %1854, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1855 = add i64 %1839, -80
  %1856 = add i64 %1841, 18
  store i64 %1856, i64* %PC, align 8
  %1857 = inttoptr i64 %1855 to i64*
  store i64 %1854, i64* %1857, align 8
  %1858 = load i64, i64* %RBP, align 8
  %1859 = add i64 %1858, -24
  %1860 = load i64, i64* %PC, align 8
  %1861 = add i64 %1860, 4
  store i64 %1861, i64* %PC, align 8
  %1862 = inttoptr i64 %1859 to i64*
  %1863 = load i64, i64* %1862, align 8
  store i64 %1863, i64* %RDX, align 8, !tbaa !2428
  %1864 = add i64 %1858, -40
  %1865 = add i64 %1860, 7
  store i64 %1865, i64* %PC, align 8
  %1866 = inttoptr i64 %1864 to i32*
  %1867 = load i32, i32* %1866, align 4
  %1868 = add i32 %1867, 1
  %1869 = zext i32 %1868 to i64
  store i64 %1869, i64* %RCX, align 8, !tbaa !2428
  %1870 = icmp eq i32 %1867, -1
  %1871 = icmp eq i32 %1868, 0
  %1872 = or i1 %1870, %1871
  %1873 = zext i1 %1872 to i8
  store i8 %1873, i8* %51, align 1, !tbaa !2433
  %1874 = and i32 %1868, 255
  %1875 = tail call i32 @llvm.ctpop.i32(i32 %1874) #11
  %1876 = trunc i32 %1875 to i8
  %1877 = and i8 %1876, 1
  %1878 = xor i8 %1877, 1
  store i8 %1878, i8* %52, align 1, !tbaa !2447
  %1879 = xor i32 %1867, %1868
  %1880 = lshr i32 %1879, 4
  %1881 = trunc i32 %1880 to i8
  %1882 = and i8 %1881, 1
  store i8 %1882, i8* %53, align 1, !tbaa !2451
  %1883 = zext i1 %1871 to i8
  store i8 %1883, i8* %54, align 1, !tbaa !2448
  %1884 = lshr i32 %1868, 31
  %1885 = trunc i32 %1884 to i8
  store i8 %1885, i8* %55, align 1, !tbaa !2449
  %1886 = lshr i32 %1867, 31
  %1887 = xor i32 %1884, %1886
  %1888 = add nuw nsw i32 %1887, %1884
  %1889 = icmp eq i32 %1888, 2
  %1890 = zext i1 %1889 to i8
  store i8 %1890, i8* %56, align 1, !tbaa !2450
  %1891 = sext i32 %1868 to i64
  store i64 %1891, i64* %RSI, align 8, !tbaa !2428
  %1892 = shl nsw i64 %1891, 3
  %1893 = add i64 %1892, %1863
  %1894 = add i64 %1860, 18
  store i64 %1894, i64* %PC, align 8
  %1895 = inttoptr i64 %1893 to i64*
  %1896 = load i64, i64* %1895, align 8
  %1897 = load i64, i64* %RAX, align 8
  %1898 = xor i64 %1897, %1896
  store i64 %1898, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %1899 = trunc i64 %1898 to i32
  %1900 = and i32 %1899, 255
  %1901 = tail call i32 @llvm.ctpop.i32(i32 %1900) #11
  %1902 = trunc i32 %1901 to i8
  %1903 = and i8 %1902, 1
  %1904 = xor i8 %1903, 1
  store i8 %1904, i8* %52, align 1, !tbaa !2447
  %1905 = icmp eq i64 %1898, 0
  %1906 = zext i1 %1905 to i8
  store i8 %1906, i8* %54, align 1, !tbaa !2448
  %1907 = lshr i64 %1898, 63
  %1908 = trunc i64 %1907 to i8
  store i8 %1908, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %1898, i64* %3844, align 1, !tbaa !2428
  store i64 0, i64* %3842, align 1, !tbaa !2428
  %1909 = add i64 %1858, -88
  %1910 = add i64 %1860, 36
  store i64 %1910, i64* %PC, align 8
  %1911 = inttoptr i64 %1909 to i64*
  store i64 %1898, i64* %1911, align 8
  %1912 = load i64, i64* %RBP, align 8
  %1913 = add i64 %1912, -80
  %1914 = load i64, i64* %PC, align 8
  %1915 = add i64 %1914, 5
  store i64 %1915, i64* %PC, align 8
  %1916 = inttoptr i64 %1913 to i64*
  %1917 = load i64, i64* %1916, align 8
  store i64 %1917, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1918 = add i64 %1912, -24
  %1919 = add i64 %1914, 9
  store i64 %1919, i64* %PC, align 8
  %1920 = inttoptr i64 %1918 to i64*
  %1921 = load i64, i64* %1920, align 8
  store i64 %1921, i64* %RAX, align 8, !tbaa !2428
  %1922 = add i64 %1912, -32
  %1923 = add i64 %1914, 13
  store i64 %1923, i64* %PC, align 8
  %1924 = inttoptr i64 %1922 to i32*
  %1925 = load i32, i32* %1924, align 4
  %1926 = sext i32 %1925 to i64
  store i64 %1926, i64* %RDX, align 8, !tbaa !2428
  %1927 = shl nsw i64 %1926, 3
  %1928 = add i64 %1927, %1921
  %1929 = add i64 %1914, 18
  store i64 %1929, i64* %PC, align 8
  %1930 = inttoptr i64 %1928 to i64*
  store i64 %1917, i64* %1930, align 8
  %1931 = load i64, i64* %RBP, align 8
  %1932 = add i64 %1931, -88
  %1933 = load i64, i64* %PC, align 8
  %1934 = add i64 %1933, 5
  store i64 %1934, i64* %PC, align 8
  %1935 = inttoptr i64 %1932 to i64*
  %1936 = load i64, i64* %1935, align 8
  store i64 %1936, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1937 = add i64 %1931, -24
  %1938 = add i64 %1933, 9
  store i64 %1938, i64* %PC, align 8
  %1939 = inttoptr i64 %1937 to i64*
  %1940 = load i64, i64* %1939, align 8
  store i64 %1940, i64* %RAX, align 8, !tbaa !2428
  %1941 = add i64 %1931, -32
  %1942 = add i64 %1933, 12
  store i64 %1942, i64* %PC, align 8
  %1943 = inttoptr i64 %1941 to i32*
  %1944 = load i32, i32* %1943, align 4
  %1945 = add i32 %1944, 1
  %1946 = zext i32 %1945 to i64
  store i64 %1946, i64* %RCX, align 8, !tbaa !2428
  %1947 = icmp eq i32 %1944, -1
  %1948 = icmp eq i32 %1945, 0
  %1949 = or i1 %1947, %1948
  %1950 = zext i1 %1949 to i8
  store i8 %1950, i8* %51, align 1, !tbaa !2433
  %1951 = and i32 %1945, 255
  %1952 = tail call i32 @llvm.ctpop.i32(i32 %1951) #11
  %1953 = trunc i32 %1952 to i8
  %1954 = and i8 %1953, 1
  %1955 = xor i8 %1954, 1
  store i8 %1955, i8* %52, align 1, !tbaa !2447
  %1956 = xor i32 %1944, %1945
  %1957 = lshr i32 %1956, 4
  %1958 = trunc i32 %1957 to i8
  %1959 = and i8 %1958, 1
  store i8 %1959, i8* %53, align 1, !tbaa !2451
  %1960 = zext i1 %1948 to i8
  store i8 %1960, i8* %54, align 1, !tbaa !2448
  %1961 = lshr i32 %1945, 31
  %1962 = trunc i32 %1961 to i8
  store i8 %1962, i8* %55, align 1, !tbaa !2449
  %1963 = lshr i32 %1944, 31
  %1964 = xor i32 %1961, %1963
  %1965 = add nuw nsw i32 %1964, %1961
  %1966 = icmp eq i32 %1965, 2
  %1967 = zext i1 %1966 to i8
  store i8 %1967, i8* %56, align 1, !tbaa !2450
  %1968 = sext i32 %1945 to i64
  store i64 %1968, i64* %RDX, align 8, !tbaa !2428
  %1969 = shl nsw i64 %1968, 3
  %1970 = add i64 %1969, %1940
  %1971 = add i64 %1933, 23
  store i64 %1971, i64* %PC, align 8
  %1972 = inttoptr i64 %1970 to i64*
  store i64 %1936, i64* %1972, align 8
  %1973 = load i64, i64* %RBP, align 8
  %1974 = add i64 %1973, -64
  %1975 = load i64, i64* %PC, align 8
  %1976 = add i64 %1975, 5
  store i64 %1976, i64* %PC, align 8
  %1977 = inttoptr i64 %1974 to i64*
  %1978 = load i64, i64* %1977, align 8
  store i64 %1978, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1979 = add i64 %1973, -24
  %1980 = add i64 %1975, 9
  store i64 %1980, i64* %PC, align 8
  %1981 = inttoptr i64 %1979 to i64*
  %1982 = load i64, i64* %1981, align 8
  store i64 %1982, i64* %RAX, align 8, !tbaa !2428
  %1983 = add i64 %1973, -40
  %1984 = add i64 %1975, 13
  store i64 %1984, i64* %PC, align 8
  %1985 = inttoptr i64 %1983 to i32*
  %1986 = load i32, i32* %1985, align 4
  %1987 = sext i32 %1986 to i64
  store i64 %1987, i64* %RDX, align 8, !tbaa !2428
  %1988 = shl nsw i64 %1987, 3
  %1989 = add i64 %1988, %1982
  %1990 = add i64 %1975, 18
  store i64 %1990, i64* %PC, align 8
  %1991 = inttoptr i64 %1989 to i64*
  store i64 %1978, i64* %1991, align 8
  %1992 = load i64, i64* %RBP, align 8
  %1993 = add i64 %1992, -72
  %1994 = load i64, i64* %PC, align 8
  %1995 = add i64 %1994, 5
  store i64 %1995, i64* %PC, align 8
  %1996 = inttoptr i64 %1993 to i64*
  %1997 = load i64, i64* %1996, align 8
  store i64 %1997, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %1998 = add i64 %1992, -24
  %1999 = add i64 %1994, 9
  store i64 %1999, i64* %PC, align 8
  %2000 = inttoptr i64 %1998 to i64*
  %2001 = load i64, i64* %2000, align 8
  store i64 %2001, i64* %RAX, align 8, !tbaa !2428
  %2002 = add i64 %1992, -40
  %2003 = add i64 %1994, 12
  store i64 %2003, i64* %PC, align 8
  %2004 = inttoptr i64 %2002 to i32*
  %2005 = load i32, i32* %2004, align 4
  %2006 = add i32 %2005, 1
  %2007 = zext i32 %2006 to i64
  store i64 %2007, i64* %RCX, align 8, !tbaa !2428
  %2008 = icmp eq i32 %2005, -1
  %2009 = icmp eq i32 %2006, 0
  %2010 = or i1 %2008, %2009
  %2011 = zext i1 %2010 to i8
  store i8 %2011, i8* %51, align 1, !tbaa !2433
  %2012 = and i32 %2006, 255
  %2013 = tail call i32 @llvm.ctpop.i32(i32 %2012) #11
  %2014 = trunc i32 %2013 to i8
  %2015 = and i8 %2014, 1
  %2016 = xor i8 %2015, 1
  store i8 %2016, i8* %52, align 1, !tbaa !2447
  %2017 = xor i32 %2005, %2006
  %2018 = lshr i32 %2017, 4
  %2019 = trunc i32 %2018 to i8
  %2020 = and i8 %2019, 1
  store i8 %2020, i8* %53, align 1, !tbaa !2451
  %2021 = zext i1 %2009 to i8
  store i8 %2021, i8* %54, align 1, !tbaa !2448
  %2022 = lshr i32 %2006, 31
  %2023 = trunc i32 %2022 to i8
  store i8 %2023, i8* %55, align 1, !tbaa !2449
  %2024 = lshr i32 %2005, 31
  %2025 = xor i32 %2022, %2024
  %2026 = add nuw nsw i32 %2025, %2022
  %2027 = icmp eq i32 %2026, 2
  %2028 = zext i1 %2027 to i8
  store i8 %2028, i8* %56, align 1, !tbaa !2450
  %2029 = sext i32 %2006 to i64
  store i64 %2029, i64* %RDX, align 8, !tbaa !2428
  %2030 = shl nsw i64 %2029, 3
  %2031 = add i64 %2030, %2001
  %2032 = add i64 %1994, 23
  store i64 %2032, i64* %PC, align 8
  %2033 = inttoptr i64 %2031 to i64*
  store i64 %1997, i64* %2033, align 8
  %2034 = load i64, i64* %RBP, align 8
  %2035 = add i64 %2034, -28
  %2036 = load i64, i64* %PC, align 8
  %2037 = add i64 %2036, 3
  store i64 %2037, i64* %PC, align 8
  %2038 = inttoptr i64 %2035 to i32*
  %2039 = load i32, i32* %2038, align 4
  %2040 = add i32 %2039, 1
  %2041 = zext i32 %2040 to i64
  store i64 %2041, i64* %RAX, align 8, !tbaa !2428
  %2042 = icmp eq i32 %2039, -1
  %2043 = icmp eq i32 %2040, 0
  %2044 = or i1 %2042, %2043
  %2045 = zext i1 %2044 to i8
  store i8 %2045, i8* %51, align 1, !tbaa !2433
  %2046 = and i32 %2040, 255
  %2047 = tail call i32 @llvm.ctpop.i32(i32 %2046) #11
  %2048 = trunc i32 %2047 to i8
  %2049 = and i8 %2048, 1
  %2050 = xor i8 %2049, 1
  store i8 %2050, i8* %52, align 1, !tbaa !2447
  %2051 = xor i32 %2039, %2040
  %2052 = lshr i32 %2051, 4
  %2053 = trunc i32 %2052 to i8
  %2054 = and i8 %2053, 1
  store i8 %2054, i8* %53, align 1, !tbaa !2451
  %2055 = zext i1 %2043 to i8
  store i8 %2055, i8* %54, align 1, !tbaa !2448
  %2056 = lshr i32 %2040, 31
  %2057 = trunc i32 %2056 to i8
  store i8 %2057, i8* %55, align 1, !tbaa !2449
  %2058 = lshr i32 %2039, 31
  %2059 = xor i32 %2056, %2058
  %2060 = add nuw nsw i32 %2059, %2056
  %2061 = icmp eq i32 %2060, 2
  %2062 = zext i1 %2061 to i8
  store i8 %2062, i8* %56, align 1, !tbaa !2450
  %2063 = add i64 %2036, 9
  store i64 %2063, i64* %PC, align 8
  store i32 %2040, i32* %2038, align 4
  %2064 = load i64, i64* %PC, align 8
  %2065 = add i64 %2064, -893
  store i64 %2065, i64* %PC, align 8, !tbaa !2428
  br label %block_401c9d

block_401c25:                                     ; preds = %block_401c15, %block_401c31
  %2066 = phi i64 [ %.pre4, %block_401c15 ], [ %307, %block_401c31 ]
  %2067 = load i64, i64* %RBP, align 8
  %2068 = add i64 %2067, -28
  %2069 = add i64 %2066, 3
  store i64 %2069, i64* %PC, align 8
  %2070 = inttoptr i64 %2068 to i32*
  %2071 = load i32, i32* %2070, align 4
  %2072 = zext i32 %2071 to i64
  store i64 %2072, i64* %RAX, align 8, !tbaa !2428
  %2073 = add i64 %2067, -48
  %2074 = add i64 %2066, 6
  store i64 %2074, i64* %PC, align 8
  %2075 = inttoptr i64 %2073 to i32*
  %2076 = load i32, i32* %2075, align 4
  %2077 = sub i32 %2071, %2076
  %2078 = icmp ult i32 %2071, %2076
  %2079 = zext i1 %2078 to i8
  store i8 %2079, i8* %51, align 1, !tbaa !2433
  %2080 = and i32 %2077, 255
  %2081 = tail call i32 @llvm.ctpop.i32(i32 %2080) #11
  %2082 = trunc i32 %2081 to i8
  %2083 = and i8 %2082, 1
  %2084 = xor i8 %2083, 1
  store i8 %2084, i8* %52, align 1, !tbaa !2447
  %2085 = xor i32 %2076, %2071
  %2086 = xor i32 %2085, %2077
  %2087 = lshr i32 %2086, 4
  %2088 = trunc i32 %2087 to i8
  %2089 = and i8 %2088, 1
  store i8 %2089, i8* %53, align 1, !tbaa !2451
  %2090 = icmp eq i32 %2077, 0
  %2091 = zext i1 %2090 to i8
  store i8 %2091, i8* %54, align 1, !tbaa !2448
  %2092 = lshr i32 %2077, 31
  %2093 = trunc i32 %2092 to i8
  store i8 %2093, i8* %55, align 1, !tbaa !2449
  %2094 = lshr i32 %2071, 31
  %2095 = lshr i32 %2076, 31
  %2096 = xor i32 %2095, %2094
  %2097 = xor i32 %2092, %2094
  %2098 = add nuw nsw i32 %2097, %2096
  %2099 = icmp eq i32 %2098, 2
  %2100 = zext i1 %2099 to i8
  store i8 %2100, i8* %56, align 1, !tbaa !2450
  %2101 = icmp ne i8 %2093, 0
  %2102 = xor i1 %2101, %2099
  %.v10 = select i1 %2102, i64 12, i64 56
  %2103 = add i64 %2066, %.v10
  store i64 %2103, i64* %PC, align 8, !tbaa !2428
  br i1 %2102, label %block_401c31, label %block_401c5d

block_40201f:                                     ; preds = %block_401c9d
  %2104 = load i32, i32* %2759, align 4
  %2105 = shl i32 %2104, 1
  %2106 = icmp slt i32 %2104, 0
  %2107 = icmp slt i32 %2105, 0
  %2108 = xor i1 %2106, %2107
  %2109 = zext i32 %2105 to i64
  store i64 %2109, i64* %RCX, align 8, !tbaa !2428
  %.lobit20 = lshr i32 %2104, 31
  %2110 = trunc i32 %.lobit20 to i8
  store i8 %2110, i8* %51, align 1, !tbaa !2432
  %2111 = and i32 %2105, 254
  %2112 = tail call i32 @llvm.ctpop.i32(i32 %2111) #11
  %2113 = trunc i32 %2112 to i8
  %2114 = and i8 %2113, 1
  %2115 = xor i8 %2114, 1
  store i8 %2115, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %2116 = icmp eq i32 %2105, 0
  %2117 = zext i1 %2116 to i8
  store i8 %2117, i8* %54, align 1, !tbaa !2432
  %2118 = lshr i32 %2104, 30
  %2119 = and i32 %2118, 1
  %2120 = trunc i32 %2119 to i8
  store i8 %2120, i8* %55, align 1, !tbaa !2432
  %2121 = zext i1 %2108 to i8
  store i8 %2121, i8* %56, align 1, !tbaa !2432
  %2122 = add i64 %2751, -16
  %2123 = add i64 %2787, 20
  store i64 %2123, i64* %PC, align 8
  %2124 = inttoptr i64 %2122 to i64*
  %2125 = load i64, i64* %2124, align 8
  store i64 %2125, i64* %RDX, align 8, !tbaa !2428
  %2126 = add i64 %2787, 24
  store i64 %2126, i64* %PC, align 8
  %2127 = load i32, i32* %2759, align 4
  %2128 = sext i32 %2127 to i64
  store i64 %2128, i64* %RSI, align 8, !tbaa !2428
  %2129 = shl nsw i64 %2128, 2
  %2130 = add i64 %2129, %2125
  %2131 = add i64 %2787, 27
  store i64 %2131, i64* %PC, align 8
  %2132 = inttoptr i64 %2130 to i32*
  %2133 = load i32, i32* %2132, align 4
  %2134 = add i32 %2133, %2105
  %2135 = zext i32 %2134 to i64
  store i64 %2135, i64* %RCX, align 8, !tbaa !2428
  %2136 = icmp ult i32 %2134, %2105
  %2137 = icmp ult i32 %2134, %2133
  %2138 = or i1 %2136, %2137
  %2139 = zext i1 %2138 to i8
  store i8 %2139, i8* %51, align 1, !tbaa !2433
  %2140 = and i32 %2134, 255
  %2141 = tail call i32 @llvm.ctpop.i32(i32 %2140) #11
  %2142 = trunc i32 %2141 to i8
  %2143 = and i8 %2142, 1
  %2144 = xor i8 %2143, 1
  store i8 %2144, i8* %52, align 1, !tbaa !2447
  %2145 = xor i32 %2133, %2105
  %2146 = xor i32 %2145, %2134
  %2147 = lshr i32 %2146, 4
  %2148 = trunc i32 %2147 to i8
  %2149 = and i8 %2148, 1
  store i8 %2149, i8* %53, align 1, !tbaa !2451
  %2150 = icmp eq i32 %2134, 0
  %2151 = zext i1 %2150 to i8
  store i8 %2151, i8* %54, align 1, !tbaa !2448
  %2152 = lshr i32 %2134, 31
  %2153 = trunc i32 %2152 to i8
  store i8 %2153, i8* %55, align 1, !tbaa !2449
  %2154 = lshr i32 %2133, 31
  %2155 = xor i32 %2152, %2119
  %2156 = xor i32 %2152, %2154
  %2157 = add nuw nsw i32 %2155, %2156
  %2158 = icmp eq i32 %2157, 2
  %2159 = zext i1 %2158 to i8
  store i8 %2159, i8* %56, align 1, !tbaa !2450
  %2160 = add i64 %2751, -40
  %2161 = add i64 %2787, 30
  store i64 %2161, i64* %PC, align 8
  %2162 = inttoptr i64 %2160 to i32*
  store i32 %2134, i32* %2162, align 4
  %2163 = load i64, i64* %RBP, align 8
  %2164 = add i64 %2163, -24
  %2165 = load i64, i64* %PC, align 8
  %2166 = add i64 %2165, 4
  store i64 %2166, i64* %PC, align 8
  %2167 = inttoptr i64 %2164 to i64*
  %2168 = load i64, i64* %2167, align 8
  store i64 %2168, i64* %RDX, align 8, !tbaa !2428
  %2169 = add i64 %2163, -40
  %2170 = add i64 %2165, 7
  store i64 %2170, i64* %PC, align 8
  %2171 = inttoptr i64 %2169 to i32*
  %2172 = load i32, i32* %2171, align 4
  %2173 = add i32 %2172, 1
  %2174 = zext i32 %2173 to i64
  store i64 %2174, i64* %RCX, align 8, !tbaa !2428
  %2175 = icmp eq i32 %2172, -1
  %2176 = icmp eq i32 %2173, 0
  %2177 = or i1 %2175, %2176
  %2178 = zext i1 %2177 to i8
  store i8 %2178, i8* %51, align 1, !tbaa !2433
  %2179 = and i32 %2173, 255
  %2180 = tail call i32 @llvm.ctpop.i32(i32 %2179) #11
  %2181 = trunc i32 %2180 to i8
  %2182 = and i8 %2181, 1
  %2183 = xor i8 %2182, 1
  store i8 %2183, i8* %52, align 1, !tbaa !2447
  %2184 = xor i32 %2172, %2173
  %2185 = lshr i32 %2184, 4
  %2186 = trunc i32 %2185 to i8
  %2187 = and i8 %2186, 1
  store i8 %2187, i8* %53, align 1, !tbaa !2451
  %2188 = zext i1 %2176 to i8
  store i8 %2188, i8* %54, align 1, !tbaa !2448
  %2189 = lshr i32 %2173, 31
  %2190 = trunc i32 %2189 to i8
  store i8 %2190, i8* %55, align 1, !tbaa !2449
  %2191 = lshr i32 %2172, 31
  %2192 = xor i32 %2189, %2191
  %2193 = add nuw nsw i32 %2192, %2189
  %2194 = icmp eq i32 %2193, 2
  %2195 = zext i1 %2194 to i8
  store i8 %2195, i8* %56, align 1, !tbaa !2450
  %2196 = sext i32 %2173 to i64
  store i64 %2196, i64* %RSI, align 8, !tbaa !2428
  %2197 = shl nsw i64 %2196, 3
  %2198 = add i64 %2197, %2168
  %2199 = add i64 %2165, 18
  store i64 %2199, i64* %PC, align 8
  %2200 = inttoptr i64 %2198 to i64*
  %2201 = load i64, i64* %2200, align 8
  %2202 = load i64, i64* %RAX, align 8
  %2203 = xor i64 %2202, %2201
  store i64 %2203, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %2204 = trunc i64 %2203 to i32
  %2205 = and i32 %2204, 255
  %2206 = tail call i32 @llvm.ctpop.i32(i32 %2205) #11
  %2207 = trunc i32 %2206 to i8
  %2208 = and i8 %2207, 1
  %2209 = xor i8 %2208, 1
  store i8 %2209, i8* %52, align 1, !tbaa !2447
  %2210 = icmp eq i64 %2203, 0
  %2211 = zext i1 %2210 to i8
  store i8 %2211, i8* %54, align 1, !tbaa !2448
  %2212 = lshr i64 %2203, 63
  %2213 = trunc i64 %2212 to i8
  store i8 %2213, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %2203, i64* %3844, align 1, !tbaa !2428
  store i64 0, i64* %3842, align 1, !tbaa !2428
  %2214 = add i64 %2165, 35
  store i64 %2214, i64* %PC, align 8
  %2215 = load i64, i64* %2167, align 8
  store i64 %2215, i64* %RDX, align 8, !tbaa !2428
  %2216 = add i64 %2165, 38
  store i64 %2216, i64* %PC, align 8
  %2217 = load i32, i32* %2171, align 4
  %2218 = add i32 %2217, 1
  %2219 = zext i32 %2218 to i64
  store i64 %2219, i64* %RCX, align 8, !tbaa !2428
  %2220 = icmp eq i32 %2217, -1
  %2221 = icmp eq i32 %2218, 0
  %2222 = or i1 %2220, %2221
  %2223 = zext i1 %2222 to i8
  store i8 %2223, i8* %51, align 1, !tbaa !2433
  %2224 = and i32 %2218, 255
  %2225 = tail call i32 @llvm.ctpop.i32(i32 %2224) #11
  %2226 = trunc i32 %2225 to i8
  %2227 = and i8 %2226, 1
  %2228 = xor i8 %2227, 1
  store i8 %2228, i8* %52, align 1, !tbaa !2447
  %2229 = xor i32 %2217, %2218
  %2230 = lshr i32 %2229, 4
  %2231 = trunc i32 %2230 to i8
  %2232 = and i8 %2231, 1
  store i8 %2232, i8* %53, align 1, !tbaa !2451
  %2233 = zext i1 %2221 to i8
  store i8 %2233, i8* %54, align 1, !tbaa !2448
  %2234 = lshr i32 %2218, 31
  %2235 = trunc i32 %2234 to i8
  store i8 %2235, i8* %55, align 1, !tbaa !2449
  %2236 = lshr i32 %2217, 31
  %2237 = xor i32 %2234, %2236
  %2238 = add nuw nsw i32 %2237, %2234
  %2239 = icmp eq i32 %2238, 2
  %2240 = zext i1 %2239 to i8
  store i8 %2240, i8* %56, align 1, !tbaa !2450
  %2241 = sext i32 %2218 to i64
  store i64 %2241, i64* %RSI, align 8, !tbaa !2428
  %2242 = shl nsw i64 %2241, 3
  %2243 = add i64 %2242, %2215
  %2244 = add i64 %2165, 49
  store i64 %2244, i64* %PC, align 8
  %2245 = inttoptr i64 %2243 to i64*
  store i64 %2203, i64* %2245, align 8
  %2246 = load i64, i64* %RBP, align 8
  %2247 = add i64 %2246, -40
  %2248 = load i64, i64* %PC, align 8
  %2249 = add i64 %2248, 3
  store i64 %2249, i64* %PC, align 8
  %2250 = inttoptr i64 %2247 to i32*
  %2251 = load i32, i32* %2250, align 4
  %2252 = zext i32 %2251 to i64
  store i64 %2252, i64* %RCX, align 8, !tbaa !2428
  %2253 = add i64 %2246, -52
  %2254 = add i64 %2248, 6
  store i64 %2254, i64* %PC, align 8
  %2255 = inttoptr i64 %2253 to i32*
  %2256 = load i32, i32* %2255, align 4
  %2257 = add i32 %2256, %2251
  %2258 = zext i32 %2257 to i64
  store i64 %2258, i64* %RCX, align 8, !tbaa !2428
  %2259 = icmp ult i32 %2257, %2251
  %2260 = icmp ult i32 %2257, %2256
  %2261 = or i1 %2259, %2260
  %2262 = zext i1 %2261 to i8
  store i8 %2262, i8* %51, align 1, !tbaa !2433
  %2263 = and i32 %2257, 255
  %2264 = tail call i32 @llvm.ctpop.i32(i32 %2263) #11
  %2265 = trunc i32 %2264 to i8
  %2266 = and i8 %2265, 1
  %2267 = xor i8 %2266, 1
  store i8 %2267, i8* %52, align 1, !tbaa !2447
  %2268 = xor i32 %2256, %2251
  %2269 = xor i32 %2268, %2257
  %2270 = lshr i32 %2269, 4
  %2271 = trunc i32 %2270 to i8
  %2272 = and i8 %2271, 1
  store i8 %2272, i8* %53, align 1, !tbaa !2451
  %2273 = icmp eq i32 %2257, 0
  %2274 = zext i1 %2273 to i8
  store i8 %2274, i8* %54, align 1, !tbaa !2448
  %2275 = lshr i32 %2257, 31
  %2276 = trunc i32 %2275 to i8
  store i8 %2276, i8* %55, align 1, !tbaa !2449
  %2277 = lshr i32 %2251, 31
  %2278 = lshr i32 %2256, 31
  %2279 = xor i32 %2275, %2277
  %2280 = xor i32 %2275, %2278
  %2281 = add nuw nsw i32 %2279, %2280
  %2282 = icmp eq i32 %2281, 2
  %2283 = zext i1 %2282 to i8
  store i8 %2283, i8* %56, align 1, !tbaa !2450
  %2284 = add i64 %2246, -32
  %2285 = add i64 %2248, 9
  store i64 %2285, i64* %PC, align 8
  %2286 = inttoptr i64 %2284 to i32*
  store i32 %2257, i32* %2286, align 4
  %2287 = load i64, i64* %RBP, align 8
  %2288 = add i64 %2287, -32
  %2289 = load i64, i64* %PC, align 8
  %2290 = add i64 %2289, 3
  store i64 %2290, i64* %PC, align 8
  %2291 = inttoptr i64 %2288 to i32*
  %2292 = load i32, i32* %2291, align 4
  %2293 = zext i32 %2292 to i64
  store i64 %2293, i64* %RCX, align 8, !tbaa !2428
  %2294 = add i64 %2287, -52
  %2295 = add i64 %2289, 6
  store i64 %2295, i64* %PC, align 8
  %2296 = inttoptr i64 %2294 to i32*
  %2297 = load i32, i32* %2296, align 4
  %2298 = add i32 %2297, %2292
  %2299 = zext i32 %2298 to i64
  store i64 %2299, i64* %RCX, align 8, !tbaa !2428
  %2300 = icmp ult i32 %2298, %2292
  %2301 = icmp ult i32 %2298, %2297
  %2302 = or i1 %2300, %2301
  %2303 = zext i1 %2302 to i8
  store i8 %2303, i8* %51, align 1, !tbaa !2433
  %2304 = and i32 %2298, 255
  %2305 = tail call i32 @llvm.ctpop.i32(i32 %2304) #11
  %2306 = trunc i32 %2305 to i8
  %2307 = and i8 %2306, 1
  %2308 = xor i8 %2307, 1
  store i8 %2308, i8* %52, align 1, !tbaa !2447
  %2309 = xor i32 %2297, %2292
  %2310 = xor i32 %2309, %2298
  %2311 = lshr i32 %2310, 4
  %2312 = trunc i32 %2311 to i8
  %2313 = and i8 %2312, 1
  store i8 %2313, i8* %53, align 1, !tbaa !2451
  %2314 = icmp eq i32 %2298, 0
  %2315 = zext i1 %2314 to i8
  store i8 %2315, i8* %54, align 1, !tbaa !2448
  %2316 = lshr i32 %2298, 31
  %2317 = trunc i32 %2316 to i8
  store i8 %2317, i8* %55, align 1, !tbaa !2449
  %2318 = lshr i32 %2292, 31
  %2319 = lshr i32 %2297, 31
  %2320 = xor i32 %2316, %2318
  %2321 = xor i32 %2316, %2319
  %2322 = add nuw nsw i32 %2320, %2321
  %2323 = icmp eq i32 %2322, 2
  %2324 = zext i1 %2323 to i8
  store i8 %2324, i8* %56, align 1, !tbaa !2450
  %2325 = add i64 %2287, -40
  %2326 = add i64 %2289, 9
  store i64 %2326, i64* %PC, align 8
  %2327 = inttoptr i64 %2325 to i32*
  store i32 %2298, i32* %2327, align 4
  %2328 = load i64, i64* %RBP, align 8
  %2329 = add i64 %2328, -24
  %2330 = load i64, i64* %PC, align 8
  %2331 = add i64 %2330, 4
  store i64 %2331, i64* %PC, align 8
  %2332 = inttoptr i64 %2329 to i64*
  %2333 = load i64, i64* %2332, align 8
  store i64 %2333, i64* %RDX, align 8, !tbaa !2428
  %2334 = add i64 %2328, -32
  %2335 = add i64 %2330, 8
  store i64 %2335, i64* %PC, align 8
  %2336 = inttoptr i64 %2334 to i32*
  %2337 = load i32, i32* %2336, align 4
  %2338 = sext i32 %2337 to i64
  store i64 %2338, i64* %RSI, align 8, !tbaa !2428
  %2339 = shl nsw i64 %2338, 3
  %2340 = add i64 %2339, %2333
  %2341 = add i64 %2330, 13
  store i64 %2341, i64* %PC, align 8
  %2342 = inttoptr i64 %2340 to i64*
  %2343 = load i64, i64* %2342, align 8
  store i64 %2343, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %2344 = add i64 %2328, -64
  %2345 = add i64 %2330, 18
  store i64 %2345, i64* %PC, align 8
  %2346 = inttoptr i64 %2344 to i64*
  store i64 %2343, i64* %2346, align 8
  %2347 = load i64, i64* %RBP, align 8
  %2348 = add i64 %2347, -24
  %2349 = load i64, i64* %PC, align 8
  %2350 = add i64 %2349, 4
  store i64 %2350, i64* %PC, align 8
  %2351 = inttoptr i64 %2348 to i64*
  %2352 = load i64, i64* %2351, align 8
  store i64 %2352, i64* %RDX, align 8, !tbaa !2428
  %2353 = add i64 %2347, -32
  %2354 = add i64 %2349, 7
  store i64 %2354, i64* %PC, align 8
  %2355 = inttoptr i64 %2353 to i32*
  %2356 = load i32, i32* %2355, align 4
  %2357 = add i32 %2356, 1
  %2358 = zext i32 %2357 to i64
  store i64 %2358, i64* %RCX, align 8, !tbaa !2428
  %2359 = icmp eq i32 %2356, -1
  %2360 = icmp eq i32 %2357, 0
  %2361 = or i1 %2359, %2360
  %2362 = zext i1 %2361 to i8
  store i8 %2362, i8* %51, align 1, !tbaa !2433
  %2363 = and i32 %2357, 255
  %2364 = tail call i32 @llvm.ctpop.i32(i32 %2363) #11
  %2365 = trunc i32 %2364 to i8
  %2366 = and i8 %2365, 1
  %2367 = xor i8 %2366, 1
  store i8 %2367, i8* %52, align 1, !tbaa !2447
  %2368 = xor i32 %2356, %2357
  %2369 = lshr i32 %2368, 4
  %2370 = trunc i32 %2369 to i8
  %2371 = and i8 %2370, 1
  store i8 %2371, i8* %53, align 1, !tbaa !2451
  %2372 = zext i1 %2360 to i8
  store i8 %2372, i8* %54, align 1, !tbaa !2448
  %2373 = lshr i32 %2357, 31
  %2374 = trunc i32 %2373 to i8
  store i8 %2374, i8* %55, align 1, !tbaa !2449
  %2375 = lshr i32 %2356, 31
  %2376 = xor i32 %2373, %2375
  %2377 = add nuw nsw i32 %2376, %2373
  %2378 = icmp eq i32 %2377, 2
  %2379 = zext i1 %2378 to i8
  store i8 %2379, i8* %56, align 1, !tbaa !2450
  %2380 = sext i32 %2357 to i64
  store i64 %2380, i64* %RSI, align 8, !tbaa !2428
  %2381 = shl nsw i64 %2380, 3
  %2382 = add i64 %2381, %2352
  %2383 = add i64 %2349, 18
  store i64 %2383, i64* %PC, align 8
  %2384 = inttoptr i64 %2382 to i64*
  %2385 = load i64, i64* %2384, align 8
  %2386 = load i64, i64* %RAX, align 8
  %2387 = xor i64 %2386, %2385
  store i64 %2387, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %2388 = trunc i64 %2387 to i32
  %2389 = and i32 %2388, 255
  %2390 = tail call i32 @llvm.ctpop.i32(i32 %2389) #11
  %2391 = trunc i32 %2390 to i8
  %2392 = and i8 %2391, 1
  %2393 = xor i8 %2392, 1
  store i8 %2393, i8* %52, align 1, !tbaa !2447
  %2394 = icmp eq i64 %2387, 0
  %2395 = zext i1 %2394 to i8
  store i8 %2395, i8* %54, align 1, !tbaa !2448
  %2396 = lshr i64 %2387, 63
  %2397 = trunc i64 %2396 to i8
  store i8 %2397, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %2387, i64* %3844, align 1, !tbaa !2428
  store i64 0, i64* %3842, align 1, !tbaa !2428
  %2398 = add i64 %2347, -72
  %2399 = add i64 %2349, 36
  store i64 %2399, i64* %PC, align 8
  %2400 = inttoptr i64 %2398 to i64*
  store i64 %2387, i64* %2400, align 8
  %2401 = load i64, i64* %RBP, align 8
  %2402 = add i64 %2401, -24
  %2403 = load i64, i64* %PC, align 8
  %2404 = add i64 %2403, 4
  store i64 %2404, i64* %PC, align 8
  %2405 = inttoptr i64 %2402 to i64*
  %2406 = load i64, i64* %2405, align 8
  store i64 %2406, i64* %RDX, align 8, !tbaa !2428
  %2407 = add i64 %2401, -40
  %2408 = add i64 %2403, 8
  store i64 %2408, i64* %PC, align 8
  %2409 = inttoptr i64 %2407 to i32*
  %2410 = load i32, i32* %2409, align 4
  %2411 = sext i32 %2410 to i64
  store i64 %2411, i64* %RSI, align 8, !tbaa !2428
  %2412 = shl nsw i64 %2411, 3
  %2413 = add i64 %2412, %2406
  %2414 = add i64 %2403, 13
  store i64 %2414, i64* %PC, align 8
  %2415 = inttoptr i64 %2413 to i64*
  %2416 = load i64, i64* %2415, align 8
  store i64 %2416, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %2417 = add i64 %2401, -80
  %2418 = add i64 %2403, 18
  store i64 %2418, i64* %PC, align 8
  %2419 = inttoptr i64 %2417 to i64*
  store i64 %2416, i64* %2419, align 8
  %2420 = load i64, i64* %RBP, align 8
  %2421 = add i64 %2420, -24
  %2422 = load i64, i64* %PC, align 8
  %2423 = add i64 %2422, 4
  store i64 %2423, i64* %PC, align 8
  %2424 = inttoptr i64 %2421 to i64*
  %2425 = load i64, i64* %2424, align 8
  store i64 %2425, i64* %RDX, align 8, !tbaa !2428
  %2426 = add i64 %2420, -40
  %2427 = add i64 %2422, 7
  store i64 %2427, i64* %PC, align 8
  %2428 = inttoptr i64 %2426 to i32*
  %2429 = load i32, i32* %2428, align 4
  %2430 = add i32 %2429, 1
  %2431 = zext i32 %2430 to i64
  store i64 %2431, i64* %RCX, align 8, !tbaa !2428
  %2432 = icmp eq i32 %2429, -1
  %2433 = icmp eq i32 %2430, 0
  %2434 = or i1 %2432, %2433
  %2435 = zext i1 %2434 to i8
  store i8 %2435, i8* %51, align 1, !tbaa !2433
  %2436 = and i32 %2430, 255
  %2437 = tail call i32 @llvm.ctpop.i32(i32 %2436) #11
  %2438 = trunc i32 %2437 to i8
  %2439 = and i8 %2438, 1
  %2440 = xor i8 %2439, 1
  store i8 %2440, i8* %52, align 1, !tbaa !2447
  %2441 = xor i32 %2429, %2430
  %2442 = lshr i32 %2441, 4
  %2443 = trunc i32 %2442 to i8
  %2444 = and i8 %2443, 1
  store i8 %2444, i8* %53, align 1, !tbaa !2451
  %2445 = zext i1 %2433 to i8
  store i8 %2445, i8* %54, align 1, !tbaa !2448
  %2446 = lshr i32 %2430, 31
  %2447 = trunc i32 %2446 to i8
  store i8 %2447, i8* %55, align 1, !tbaa !2449
  %2448 = lshr i32 %2429, 31
  %2449 = xor i32 %2446, %2448
  %2450 = add nuw nsw i32 %2449, %2446
  %2451 = icmp eq i32 %2450, 2
  %2452 = zext i1 %2451 to i8
  store i8 %2452, i8* %56, align 1, !tbaa !2450
  %2453 = sext i32 %2430 to i64
  store i64 %2453, i64* %RSI, align 8, !tbaa !2428
  %2454 = shl nsw i64 %2453, 3
  %2455 = add i64 %2454, %2425
  %2456 = add i64 %2422, 18
  store i64 %2456, i64* %PC, align 8
  %2457 = inttoptr i64 %2455 to i64*
  %2458 = load i64, i64* %2457, align 8
  %2459 = load i64, i64* %RAX, align 8
  %2460 = xor i64 %2459, %2458
  store i64 %2460, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %2461 = trunc i64 %2460 to i32
  %2462 = and i32 %2461, 255
  %2463 = tail call i32 @llvm.ctpop.i32(i32 %2462) #11
  %2464 = trunc i32 %2463 to i8
  %2465 = and i8 %2464, 1
  %2466 = xor i8 %2465, 1
  store i8 %2466, i8* %52, align 1, !tbaa !2447
  %2467 = icmp eq i64 %2460, 0
  %2468 = zext i1 %2467 to i8
  store i8 %2468, i8* %54, align 1, !tbaa !2448
  %2469 = lshr i64 %2460, 63
  %2470 = trunc i64 %2469 to i8
  store i8 %2470, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %2460, i64* %3844, align 1, !tbaa !2428
  store i64 0, i64* %3842, align 1, !tbaa !2428
  %2471 = add i64 %2420, -88
  %2472 = add i64 %2422, 36
  store i64 %2472, i64* %PC, align 8
  %2473 = inttoptr i64 %2471 to i64*
  store i64 %2460, i64* %2473, align 8
  %2474 = load i64, i64* %RBP, align 8
  %2475 = add i64 %2474, -80
  %2476 = load i64, i64* %PC, align 8
  %2477 = add i64 %2476, 5
  store i64 %2477, i64* %PC, align 8
  %2478 = inttoptr i64 %2475 to i64*
  %2479 = load i64, i64* %2478, align 8
  store i64 %2479, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %2480 = add i64 %2474, -24
  %2481 = add i64 %2476, 9
  store i64 %2481, i64* %PC, align 8
  %2482 = inttoptr i64 %2480 to i64*
  %2483 = load i64, i64* %2482, align 8
  store i64 %2483, i64* %RDX, align 8, !tbaa !2428
  %2484 = add i64 %2474, -32
  %2485 = add i64 %2476, 13
  store i64 %2485, i64* %PC, align 8
  %2486 = inttoptr i64 %2484 to i32*
  %2487 = load i32, i32* %2486, align 4
  %2488 = sext i32 %2487 to i64
  store i64 %2488, i64* %RSI, align 8, !tbaa !2428
  %2489 = shl nsw i64 %2488, 3
  %2490 = add i64 %2489, %2483
  %2491 = add i64 %2476, 18
  store i64 %2491, i64* %PC, align 8
  %2492 = inttoptr i64 %2490 to i64*
  store i64 %2479, i64* %2492, align 8
  %2493 = load i64, i64* %RBP, align 8
  %2494 = add i64 %2493, -88
  %2495 = load i64, i64* %PC, align 8
  %2496 = add i64 %2495, 5
  store i64 %2496, i64* %PC, align 8
  %2497 = inttoptr i64 %2494 to i64*
  %2498 = load i64, i64* %2497, align 8
  store i64 %2498, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %2499 = add i64 %2493, -24
  %2500 = add i64 %2495, 9
  store i64 %2500, i64* %PC, align 8
  %2501 = inttoptr i64 %2499 to i64*
  %2502 = load i64, i64* %2501, align 8
  store i64 %2502, i64* %RDX, align 8, !tbaa !2428
  %2503 = add i64 %2493, -32
  %2504 = add i64 %2495, 12
  store i64 %2504, i64* %PC, align 8
  %2505 = inttoptr i64 %2503 to i32*
  %2506 = load i32, i32* %2505, align 4
  %2507 = add i32 %2506, 1
  %2508 = zext i32 %2507 to i64
  store i64 %2508, i64* %RCX, align 8, !tbaa !2428
  %2509 = icmp eq i32 %2506, -1
  %2510 = icmp eq i32 %2507, 0
  %2511 = or i1 %2509, %2510
  %2512 = zext i1 %2511 to i8
  store i8 %2512, i8* %51, align 1, !tbaa !2433
  %2513 = and i32 %2507, 255
  %2514 = tail call i32 @llvm.ctpop.i32(i32 %2513) #11
  %2515 = trunc i32 %2514 to i8
  %2516 = and i8 %2515, 1
  %2517 = xor i8 %2516, 1
  store i8 %2517, i8* %52, align 1, !tbaa !2447
  %2518 = xor i32 %2506, %2507
  %2519 = lshr i32 %2518, 4
  %2520 = trunc i32 %2519 to i8
  %2521 = and i8 %2520, 1
  store i8 %2521, i8* %53, align 1, !tbaa !2451
  %2522 = zext i1 %2510 to i8
  store i8 %2522, i8* %54, align 1, !tbaa !2448
  %2523 = lshr i32 %2507, 31
  %2524 = trunc i32 %2523 to i8
  store i8 %2524, i8* %55, align 1, !tbaa !2449
  %2525 = lshr i32 %2506, 31
  %2526 = xor i32 %2523, %2525
  %2527 = add nuw nsw i32 %2526, %2523
  %2528 = icmp eq i32 %2527, 2
  %2529 = zext i1 %2528 to i8
  store i8 %2529, i8* %56, align 1, !tbaa !2450
  %2530 = sext i32 %2507 to i64
  store i64 %2530, i64* %RSI, align 8, !tbaa !2428
  %2531 = shl nsw i64 %2530, 3
  %2532 = add i64 %2531, %2502
  %2533 = add i64 %2495, 23
  store i64 %2533, i64* %PC, align 8
  %2534 = inttoptr i64 %2532 to i64*
  store i64 %2498, i64* %2534, align 8
  %2535 = load i64, i64* %RBP, align 8
  %2536 = add i64 %2535, -64
  %2537 = load i64, i64* %PC, align 8
  %2538 = add i64 %2537, 5
  store i64 %2538, i64* %PC, align 8
  %2539 = inttoptr i64 %2536 to i64*
  %2540 = load i64, i64* %2539, align 8
  store i64 %2540, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %2541 = add i64 %2535, -24
  %2542 = add i64 %2537, 9
  store i64 %2542, i64* %PC, align 8
  %2543 = inttoptr i64 %2541 to i64*
  %2544 = load i64, i64* %2543, align 8
  store i64 %2544, i64* %RDX, align 8, !tbaa !2428
  %2545 = add i64 %2535, -40
  %2546 = add i64 %2537, 13
  store i64 %2546, i64* %PC, align 8
  %2547 = inttoptr i64 %2545 to i32*
  %2548 = load i32, i32* %2547, align 4
  %2549 = sext i32 %2548 to i64
  store i64 %2549, i64* %RSI, align 8, !tbaa !2428
  %2550 = shl nsw i64 %2549, 3
  %2551 = add i64 %2550, %2544
  %2552 = add i64 %2537, 18
  store i64 %2552, i64* %PC, align 8
  %2553 = inttoptr i64 %2551 to i64*
  store i64 %2540, i64* %2553, align 8
  %2554 = load i64, i64* %RBP, align 8
  %2555 = add i64 %2554, -72
  %2556 = load i64, i64* %PC, align 8
  %2557 = add i64 %2556, 5
  store i64 %2557, i64* %PC, align 8
  %2558 = inttoptr i64 %2555 to i64*
  %2559 = load i64, i64* %2558, align 8
  store i64 %2559, i64* %3844, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3843, align 1, !tbaa !2452
  %2560 = add i64 %2554, -24
  %2561 = add i64 %2556, 9
  store i64 %2561, i64* %PC, align 8
  %2562 = inttoptr i64 %2560 to i64*
  %2563 = load i64, i64* %2562, align 8
  store i64 %2563, i64* %RDX, align 8, !tbaa !2428
  %2564 = add i64 %2554, -40
  %2565 = add i64 %2556, 12
  store i64 %2565, i64* %PC, align 8
  %2566 = inttoptr i64 %2564 to i32*
  %2567 = load i32, i32* %2566, align 4
  %2568 = add i32 %2567, 1
  %2569 = zext i32 %2568 to i64
  store i64 %2569, i64* %RCX, align 8, !tbaa !2428
  %2570 = icmp eq i32 %2567, -1
  %2571 = icmp eq i32 %2568, 0
  %2572 = or i1 %2570, %2571
  %2573 = zext i1 %2572 to i8
  store i8 %2573, i8* %51, align 1, !tbaa !2433
  %2574 = and i32 %2568, 255
  %2575 = tail call i32 @llvm.ctpop.i32(i32 %2574) #11
  %2576 = trunc i32 %2575 to i8
  %2577 = and i8 %2576, 1
  %2578 = xor i8 %2577, 1
  store i8 %2578, i8* %52, align 1, !tbaa !2447
  %2579 = xor i32 %2567, %2568
  %2580 = lshr i32 %2579, 4
  %2581 = trunc i32 %2580 to i8
  %2582 = and i8 %2581, 1
  store i8 %2582, i8* %53, align 1, !tbaa !2451
  %2583 = zext i1 %2571 to i8
  store i8 %2583, i8* %54, align 1, !tbaa !2448
  %2584 = lshr i32 %2568, 31
  %2585 = trunc i32 %2584 to i8
  store i8 %2585, i8* %55, align 1, !tbaa !2449
  %2586 = lshr i32 %2567, 31
  %2587 = xor i32 %2584, %2586
  %2588 = add nuw nsw i32 %2587, %2584
  %2589 = icmp eq i32 %2588, 2
  %2590 = zext i1 %2589 to i8
  store i8 %2590, i8* %56, align 1, !tbaa !2450
  %2591 = sext i32 %2568 to i64
  store i64 %2591, i64* %RSI, align 8, !tbaa !2428
  %2592 = shl nsw i64 %2591, 3
  %2593 = add i64 %2592, %2563
  %2594 = add i64 %2556, 23
  store i64 %2594, i64* %PC, align 8
  %2595 = inttoptr i64 %2593 to i64*
  store i64 %2559, i64* %2595, align 8
  %2596 = load i64, i64* %RBP, align 8
  %2597 = add i64 %2596, -52
  %2598 = load i64, i64* %PC, align 8
  %2599 = add i64 %2598, 3
  store i64 %2599, i64* %PC, align 8
  %2600 = inttoptr i64 %2597 to i32*
  %2601 = load i32, i32* %2600, align 4
  %2602 = zext i32 %2601 to i64
  store i64 %2602, i64* %RCX, align 8, !tbaa !2428
  %2603 = add i64 %2596, -40
  %2604 = add i64 %2598, 6
  store i64 %2604, i64* %PC, align 8
  %2605 = inttoptr i64 %2603 to i32*
  %2606 = load i32, i32* %2605, align 4
  %2607 = add i32 %2606, %2601
  %2608 = zext i32 %2607 to i64
  store i64 %2608, i64* %RCX, align 8, !tbaa !2428
  %2609 = icmp ult i32 %2607, %2601
  %2610 = icmp ult i32 %2607, %2606
  %2611 = or i1 %2609, %2610
  %2612 = zext i1 %2611 to i8
  store i8 %2612, i8* %51, align 1, !tbaa !2433
  %2613 = and i32 %2607, 255
  %2614 = tail call i32 @llvm.ctpop.i32(i32 %2613) #11
  %2615 = trunc i32 %2614 to i8
  %2616 = and i8 %2615, 1
  %2617 = xor i8 %2616, 1
  store i8 %2617, i8* %52, align 1, !tbaa !2447
  %2618 = xor i32 %2606, %2601
  %2619 = xor i32 %2618, %2607
  %2620 = lshr i32 %2619, 4
  %2621 = trunc i32 %2620 to i8
  %2622 = and i8 %2621, 1
  store i8 %2622, i8* %53, align 1, !tbaa !2451
  %2623 = icmp eq i32 %2607, 0
  %2624 = zext i1 %2623 to i8
  store i8 %2624, i8* %54, align 1, !tbaa !2448
  %2625 = lshr i32 %2607, 31
  %2626 = trunc i32 %2625 to i8
  store i8 %2626, i8* %55, align 1, !tbaa !2449
  %2627 = lshr i32 %2601, 31
  %2628 = lshr i32 %2606, 31
  %2629 = xor i32 %2625, %2627
  %2630 = xor i32 %2625, %2628
  %2631 = add nuw nsw i32 %2629, %2630
  %2632 = icmp eq i32 %2631, 2
  %2633 = zext i1 %2632 to i8
  store i8 %2633, i8* %56, align 1, !tbaa !2450
  %2634 = add i64 %2598, 9
  store i64 %2634, i64* %PC, align 8
  store i32 %2607, i32* %2605, align 4
  %2635 = load i64, i64* %RBP, align 8
  %2636 = add i64 %2635, -24
  %2637 = load i64, i64* %PC, align 8
  %2638 = add i64 %2637, 4
  store i64 %2638, i64* %PC, align 8
  %2639 = inttoptr i64 %2636 to i64*
  %2640 = load i64, i64* %2639, align 8
  store i64 %2640, i64* %RDX, align 8, !tbaa !2428
  %2641 = add i64 %2635, -40
  %2642 = add i64 %2637, 7
  store i64 %2642, i64* %PC, align 8
  %2643 = inttoptr i64 %2641 to i32*
  %2644 = load i32, i32* %2643, align 4
  %2645 = add i32 %2644, 1
  %2646 = zext i32 %2645 to i64
  store i64 %2646, i64* %RCX, align 8, !tbaa !2428
  %2647 = icmp eq i32 %2644, -1
  %2648 = icmp eq i32 %2645, 0
  %2649 = or i1 %2647, %2648
  %2650 = zext i1 %2649 to i8
  store i8 %2650, i8* %51, align 1, !tbaa !2433
  %2651 = and i32 %2645, 255
  %2652 = tail call i32 @llvm.ctpop.i32(i32 %2651) #11
  %2653 = trunc i32 %2652 to i8
  %2654 = and i8 %2653, 1
  %2655 = xor i8 %2654, 1
  store i8 %2655, i8* %52, align 1, !tbaa !2447
  %2656 = xor i32 %2644, %2645
  %2657 = lshr i32 %2656, 4
  %2658 = trunc i32 %2657 to i8
  %2659 = and i8 %2658, 1
  store i8 %2659, i8* %53, align 1, !tbaa !2451
  %2660 = zext i1 %2648 to i8
  store i8 %2660, i8* %54, align 1, !tbaa !2448
  %2661 = lshr i32 %2645, 31
  %2662 = trunc i32 %2661 to i8
  store i8 %2662, i8* %55, align 1, !tbaa !2449
  %2663 = lshr i32 %2644, 31
  %2664 = xor i32 %2661, %2663
  %2665 = add nuw nsw i32 %2664, %2661
  %2666 = icmp eq i32 %2665, 2
  %2667 = zext i1 %2666 to i8
  store i8 %2667, i8* %56, align 1, !tbaa !2450
  %2668 = sext i32 %2645 to i64
  store i64 %2668, i64* %RSI, align 8, !tbaa !2428
  %2669 = shl nsw i64 %2668, 3
  %2670 = add i64 %2669, %2640
  %2671 = add i64 %2637, 18
  store i64 %2671, i64* %PC, align 8
  %2672 = inttoptr i64 %2670 to i64*
  %2673 = load i64, i64* %2672, align 8
  %2674 = load i64, i64* %RAX, align 8
  %2675 = xor i64 %2674, %2673
  store i64 %2675, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %2676 = trunc i64 %2675 to i32
  %2677 = and i32 %2676, 255
  %2678 = tail call i32 @llvm.ctpop.i32(i32 %2677) #11
  %2679 = trunc i32 %2678 to i8
  %2680 = and i8 %2679, 1
  %2681 = xor i8 %2680, 1
  store i8 %2681, i8* %52, align 1, !tbaa !2447
  %2682 = icmp eq i64 %2675, 0
  %2683 = zext i1 %2682 to i8
  store i8 %2683, i8* %54, align 1, !tbaa !2448
  %2684 = lshr i64 %2675, 63
  %2685 = trunc i64 %2684 to i8
  store i8 %2685, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %2675, i64* %3844, align 1, !tbaa !2428
  store i64 0, i64* %3842, align 1, !tbaa !2428
  %2686 = add i64 %2637, 35
  store i64 %2686, i64* %PC, align 8
  %2687 = load i64, i64* %2639, align 8
  store i64 %2687, i64* %RAX, align 8, !tbaa !2428
  %2688 = add i64 %2637, 38
  store i64 %2688, i64* %PC, align 8
  %2689 = load i32, i32* %2643, align 4
  %2690 = add i32 %2689, 1
  %2691 = zext i32 %2690 to i64
  store i64 %2691, i64* %RCX, align 8, !tbaa !2428
  %2692 = icmp eq i32 %2689, -1
  %2693 = icmp eq i32 %2690, 0
  %2694 = or i1 %2692, %2693
  %2695 = zext i1 %2694 to i8
  store i8 %2695, i8* %51, align 1, !tbaa !2433
  %2696 = and i32 %2690, 255
  %2697 = tail call i32 @llvm.ctpop.i32(i32 %2696) #11
  %2698 = trunc i32 %2697 to i8
  %2699 = and i8 %2698, 1
  %2700 = xor i8 %2699, 1
  store i8 %2700, i8* %52, align 1, !tbaa !2447
  %2701 = xor i32 %2689, %2690
  %2702 = lshr i32 %2701, 4
  %2703 = trunc i32 %2702 to i8
  %2704 = and i8 %2703, 1
  store i8 %2704, i8* %53, align 1, !tbaa !2451
  %2705 = zext i1 %2693 to i8
  store i8 %2705, i8* %54, align 1, !tbaa !2448
  %2706 = lshr i32 %2690, 31
  %2707 = trunc i32 %2706 to i8
  store i8 %2707, i8* %55, align 1, !tbaa !2449
  %2708 = lshr i32 %2689, 31
  %2709 = xor i32 %2706, %2708
  %2710 = add nuw nsw i32 %2709, %2706
  %2711 = icmp eq i32 %2710, 2
  %2712 = zext i1 %2711 to i8
  store i8 %2712, i8* %56, align 1, !tbaa !2450
  %2713 = sext i32 %2690 to i64
  store i64 %2713, i64* %RDX, align 8, !tbaa !2428
  %2714 = shl nsw i64 %2713, 3
  %2715 = add i64 %2714, %2687
  %2716 = add i64 %2637, 49
  store i64 %2716, i64* %PC, align 8
  %2717 = inttoptr i64 %2715 to i64*
  store i64 %2675, i64* %2717, align 8
  %2718 = load i64, i64* %RBP, align 8
  %2719 = add i64 %2718, -36
  %2720 = load i64, i64* %PC, align 8
  %2721 = add i64 %2720, 3
  store i64 %2721, i64* %PC, align 8
  %2722 = inttoptr i64 %2719 to i32*
  %2723 = load i32, i32* %2722, align 4
  %2724 = add i32 %2723, 1
  %2725 = zext i32 %2724 to i64
  store i64 %2725, i64* %RAX, align 8, !tbaa !2428
  %2726 = icmp eq i32 %2723, -1
  %2727 = icmp eq i32 %2724, 0
  %2728 = or i1 %2726, %2727
  %2729 = zext i1 %2728 to i8
  store i8 %2729, i8* %51, align 1, !tbaa !2433
  %2730 = and i32 %2724, 255
  %2731 = tail call i32 @llvm.ctpop.i32(i32 %2730) #11
  %2732 = trunc i32 %2731 to i8
  %2733 = and i8 %2732, 1
  %2734 = xor i8 %2733, 1
  store i8 %2734, i8* %52, align 1, !tbaa !2447
  %2735 = xor i32 %2723, %2724
  %2736 = lshr i32 %2735, 4
  %2737 = trunc i32 %2736 to i8
  %2738 = and i8 %2737, 1
  store i8 %2738, i8* %53, align 1, !tbaa !2451
  %2739 = zext i1 %2727 to i8
  store i8 %2739, i8* %54, align 1, !tbaa !2448
  %2740 = lshr i32 %2724, 31
  %2741 = trunc i32 %2740 to i8
  store i8 %2741, i8* %55, align 1, !tbaa !2449
  %2742 = lshr i32 %2723, 31
  %2743 = xor i32 %2740, %2742
  %2744 = add nuw nsw i32 %2743, %2740
  %2745 = icmp eq i32 %2744, 2
  %2746 = zext i1 %2745 to i8
  store i8 %2746, i8* %56, align 1, !tbaa !2450
  %2747 = add i64 %2720, 9
  store i64 %2747, i64* %PC, align 8
  store i32 %2724, i32* %2722, align 4
  %2748 = load i64, i64* %PC, align 8
  %2749 = add i64 %2748, -1271
  store i64 %2749, i64* %PC, align 8, !tbaa !2428
  br label %block_401c8a

block_401c9d:                                     ; preds = %block_401c96, %block_401ca9
  %2750 = phi i64 [ %.pre6, %block_401c96 ], [ %2065, %block_401ca9 ]
  %2751 = load i64, i64* %RBP, align 8
  %2752 = add i64 %2751, -28
  %2753 = add i64 %2750, 3
  store i64 %2753, i64* %PC, align 8
  %2754 = inttoptr i64 %2752 to i32*
  %2755 = load i32, i32* %2754, align 4
  %2756 = zext i32 %2755 to i64
  store i64 %2756, i64* %RAX, align 8, !tbaa !2428
  %2757 = add i64 %2751, -36
  %2758 = add i64 %2750, 6
  store i64 %2758, i64* %PC, align 8
  %2759 = inttoptr i64 %2757 to i32*
  %2760 = load i32, i32* %2759, align 4
  %2761 = sub i32 %2755, %2760
  %2762 = icmp ult i32 %2755, %2760
  %2763 = zext i1 %2762 to i8
  store i8 %2763, i8* %51, align 1, !tbaa !2433
  %2764 = and i32 %2761, 255
  %2765 = tail call i32 @llvm.ctpop.i32(i32 %2764) #11
  %2766 = trunc i32 %2765 to i8
  %2767 = and i8 %2766, 1
  %2768 = xor i8 %2767, 1
  store i8 %2768, i8* %52, align 1, !tbaa !2447
  %2769 = xor i32 %2760, %2755
  %2770 = xor i32 %2769, %2761
  %2771 = lshr i32 %2770, 4
  %2772 = trunc i32 %2771 to i8
  %2773 = and i8 %2772, 1
  store i8 %2773, i8* %53, align 1, !tbaa !2451
  %2774 = icmp eq i32 %2761, 0
  %2775 = zext i1 %2774 to i8
  store i8 %2775, i8* %54, align 1, !tbaa !2448
  %2776 = lshr i32 %2761, 31
  %2777 = trunc i32 %2776 to i8
  store i8 %2777, i8* %55, align 1, !tbaa !2449
  %2778 = lshr i32 %2755, 31
  %2779 = lshr i32 %2760, 31
  %2780 = xor i32 %2779, %2778
  %2781 = xor i32 %2776, %2778
  %2782 = add nuw nsw i32 %2781, %2780
  %2783 = icmp eq i32 %2782, 2
  %2784 = zext i1 %2783 to i8
  store i8 %2784, i8* %56, align 1, !tbaa !2450
  %2785 = icmp ne i8 %2777, 0
  %2786 = xor i1 %2785, %2783
  %.v15 = select i1 %2786, i64 12, i64 898
  %2787 = add i64 %2750, %.v15
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %2788 = add i64 %2787, 13
  store i64 %2788, i64* %PC, align 8
  br i1 %2786, label %block_401ca9, label %block_40201f

block_401c96:                                     ; preds = %block_401c8a
  %2789 = add i64 %2864, -28
  %2790 = add i64 %2900, 7
  store i64 %2790, i64* %PC, align 8
  %2791 = inttoptr i64 %2789 to i32*
  store i32 0, i32* %2791, align 4
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_401c9d

block_4021ec:                                     ; preds = %block_40218b, %block_4023d9
  %2792 = phi i64 [ %.pre7, %block_40218b ], [ %574, %block_4023d9 ]
  %2793 = load i64, i64* %RBP, align 8
  %2794 = add i64 %2793, -36
  %2795 = add i64 %2792, 3
  store i64 %2795, i64* %PC, align 8
  %2796 = inttoptr i64 %2794 to i32*
  %2797 = load i32, i32* %2796, align 4
  %2798 = zext i32 %2797 to i64
  store i64 %2798, i64* %RAX, align 8, !tbaa !2428
  %2799 = add i64 %2793, -48
  %2800 = add i64 %2792, 6
  store i64 %2800, i64* %PC, align 8
  %2801 = inttoptr i64 %2799 to i32*
  %2802 = load i32, i32* %2801, align 4
  %2803 = sub i32 %2797, %2802
  %2804 = icmp ult i32 %2797, %2802
  %2805 = zext i1 %2804 to i8
  store i8 %2805, i8* %51, align 1, !tbaa !2433
  %2806 = and i32 %2803, 255
  %2807 = tail call i32 @llvm.ctpop.i32(i32 %2806) #11
  %2808 = trunc i32 %2807 to i8
  %2809 = and i8 %2808, 1
  %2810 = xor i8 %2809, 1
  store i8 %2810, i8* %52, align 1, !tbaa !2447
  %2811 = xor i32 %2802, %2797
  %2812 = xor i32 %2811, %2803
  %2813 = lshr i32 %2812, 4
  %2814 = trunc i32 %2813 to i8
  %2815 = and i8 %2814, 1
  store i8 %2815, i8* %53, align 1, !tbaa !2451
  %2816 = icmp eq i32 %2803, 0
  %2817 = zext i1 %2816 to i8
  store i8 %2817, i8* %54, align 1, !tbaa !2448
  %2818 = lshr i32 %2803, 31
  %2819 = trunc i32 %2818 to i8
  store i8 %2819, i8* %55, align 1, !tbaa !2449
  %2820 = lshr i32 %2797, 31
  %2821 = lshr i32 %2802, 31
  %2822 = xor i32 %2821, %2820
  %2823 = xor i32 %2818, %2820
  %2824 = add nuw nsw i32 %2823, %2822
  %2825 = icmp eq i32 %2824, 2
  %2826 = zext i1 %2825 to i8
  store i8 %2826, i8* %56, align 1, !tbaa !2450
  %2827 = icmp ne i8 %2819, 0
  %2828 = xor i1 %2827, %2825
  %.v21 = select i1 %2828, i64 12, i64 641
  %2829 = add i64 %2792, %.v21
  store i64 %2829, i64* %PC, align 8, !tbaa !2428
  br i1 %2828, label %block_4021f8, label %block_40246d

block_401c15:                                     ; preds = %block_401c06
  %2830 = load i32, i32* %3695, align 4
  %2831 = zext i32 %2830 to i64
  %2832 = shl nuw i64 %2831, 32
  %2833 = ashr i64 %2832, 33
  %2834 = trunc i32 %2830 to i8
  %2835 = and i8 %2834, 1
  %2836 = trunc i64 %2833 to i32
  %2837 = and i64 %2833, 4294967295
  store i64 %2837, i64* %RAX, align 8, !tbaa !2428
  store i8 %2835, i8* %51, align 1, !tbaa !2432
  %2838 = and i32 %2836, 255
  %2839 = tail call i32 @llvm.ctpop.i32(i32 %2838) #11
  %2840 = trunc i32 %2839 to i8
  %2841 = and i8 %2840, 1
  %2842 = xor i8 %2841, 1
  store i8 %2842, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %2843 = icmp eq i32 %2836, 0
  %2844 = zext i1 %2843 to i8
  store i8 %2844, i8* %54, align 1, !tbaa !2432
  %2845 = lshr i64 %2833, 31
  %2846 = trunc i64 %2845 to i8
  %2847 = and i8 %2846, 1
  store i8 %2847, i8* %55, align 1, !tbaa !2432
  store i8 0, i8* %56, align 1, !tbaa !2432
  %2848 = add i64 %3722, 9
  store i64 %2848, i64* %PC, align 8
  store i32 %2836, i32* %3695, align 4
  %2849 = load i64, i64* %RBP, align 8
  %2850 = add i64 %2849, -28
  %2851 = load i64, i64* %PC, align 8
  %2852 = add i64 %2851, 7
  store i64 %2852, i64* %PC, align 8
  %2853 = inttoptr i64 %2850 to i32*
  store i32 0, i32* %2853, align 4
  %.pre4 = load i64, i64* %PC, align 8
  br label %block_401c25

block_402472:                                     ; preds = %block_402186, %block_40246d
  %.sink = phi i64 [ %192, %block_402186 ], [ %99, %block_40246d ]
  %2854 = add i64 %.sink, 1
  store i64 %2854, i64* %PC, align 8
  %2855 = load i64, i64* %7, align 8, !tbaa !2428
  %2856 = add i64 %2855, 8
  %2857 = inttoptr i64 %2855 to i64*
  %2858 = load i64, i64* %2857, align 8
  store i64 %2858, i64* %RBP, align 8, !tbaa !2428
  store i64 %2856, i64* %7, align 8, !tbaa !2428
  %2859 = add i64 %.sink, 2
  store i64 %2859, i64* %PC, align 8
  %2860 = inttoptr i64 %2856 to i64*
  %2861 = load i64, i64* %2860, align 8
  store i64 %2861, i64* %PC, align 8, !tbaa !2428
  %2862 = add i64 %2855, 16
  store i64 %2862, i64* %7, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_401c8a:                                     ; preds = %block_401c83, %block_40201f
  %2863 = phi i64 [ %.pre5, %block_401c83 ], [ %2749, %block_40201f ]
  %2864 = load i64, i64* %RBP, align 8
  %2865 = add i64 %2864, -36
  %2866 = add i64 %2863, 3
  store i64 %2866, i64* %PC, align 8
  %2867 = inttoptr i64 %2865 to i32*
  %2868 = load i32, i32* %2867, align 4
  %2869 = zext i32 %2868 to i64
  store i64 %2869, i64* %RAX, align 8, !tbaa !2428
  %2870 = add i64 %2864, -48
  %2871 = add i64 %2863, 6
  store i64 %2871, i64* %PC, align 8
  %2872 = inttoptr i64 %2870 to i32*
  %2873 = load i32, i32* %2872, align 4
  %2874 = sub i32 %2868, %2873
  %2875 = icmp ult i32 %2868, %2873
  %2876 = zext i1 %2875 to i8
  store i8 %2876, i8* %51, align 1, !tbaa !2433
  %2877 = and i32 %2874, 255
  %2878 = tail call i32 @llvm.ctpop.i32(i32 %2877) #11
  %2879 = trunc i32 %2878 to i8
  %2880 = and i8 %2879, 1
  %2881 = xor i8 %2880, 1
  store i8 %2881, i8* %52, align 1, !tbaa !2447
  %2882 = xor i32 %2873, %2868
  %2883 = xor i32 %2882, %2874
  %2884 = lshr i32 %2883, 4
  %2885 = trunc i32 %2884 to i8
  %2886 = and i8 %2885, 1
  store i8 %2886, i8* %53, align 1, !tbaa !2451
  %2887 = icmp eq i32 %2874, 0
  %2888 = zext i1 %2887 to i8
  store i8 %2888, i8* %54, align 1, !tbaa !2448
  %2889 = lshr i32 %2874, 31
  %2890 = trunc i32 %2889 to i8
  store i8 %2890, i8* %55, align 1, !tbaa !2449
  %2891 = lshr i32 %2868, 31
  %2892 = lshr i32 %2873, 31
  %2893 = xor i32 %2892, %2891
  %2894 = xor i32 %2889, %2891
  %2895 = add nuw nsw i32 %2894, %2893
  %2896 = icmp eq i32 %2895, 2
  %2897 = zext i1 %2896 to i8
  store i8 %2897, i8* %56, align 1, !tbaa !2450
  %2898 = icmp ne i8 %2890, 0
  %2899 = xor i1 %2898, %2896
  %.v14 = select i1 %2899, i64 12, i64 1276
  %2900 = add i64 %2863, %.v14
  store i64 %2900, i64* %PC, align 8, !tbaa !2428
  br i1 %2899, label %block_401c96, label %block_402186

block_40220b:                                     ; preds = %block_4021ff
  %2901 = load i32, i32* %61, align 4
  %2902 = shl i32 %2901, 1
  %2903 = icmp slt i32 %2901, 0
  %2904 = icmp slt i32 %2902, 0
  %2905 = xor i1 %2903, %2904
  %2906 = zext i32 %2902 to i64
  store i64 %2906, i64* %RCX, align 8, !tbaa !2428
  %.lobit23 = lshr i32 %2901, 31
  %2907 = trunc i32 %.lobit23 to i8
  store i8 %2907, i8* %51, align 1, !tbaa !2432
  %2908 = and i32 %2902, 254
  %2909 = tail call i32 @llvm.ctpop.i32(i32 %2908) #11
  %2910 = trunc i32 %2909 to i8
  %2911 = and i8 %2910, 1
  %2912 = xor i8 %2911, 1
  store i8 %2912, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %2913 = icmp eq i32 %2902, 0
  %2914 = zext i1 %2913 to i8
  store i8 %2914, i8* %54, align 1, !tbaa !2432
  %2915 = lshr i32 %2901, 30
  %2916 = and i32 %2915, 1
  %2917 = trunc i32 %2916 to i8
  store i8 %2917, i8* %55, align 1, !tbaa !2432
  %2918 = zext i1 %2905 to i8
  store i8 %2918, i8* %56, align 1, !tbaa !2432
  %2919 = add i64 %58, -16
  %2920 = add i64 %94, 20
  store i64 %2920, i64* %PC, align 8
  %2921 = inttoptr i64 %2919 to i64*
  %2922 = load i64, i64* %2921, align 8
  store i64 %2922, i64* %RDX, align 8, !tbaa !2428
  %2923 = add i64 %94, 24
  store i64 %2923, i64* %PC, align 8
  %2924 = load i32, i32* %66, align 4
  %2925 = sext i32 %2924 to i64
  store i64 %2925, i64* %RSI, align 8, !tbaa !2428
  %2926 = shl nsw i64 %2925, 2
  %2927 = add i64 %2926, %2922
  %2928 = add i64 %94, 27
  store i64 %2928, i64* %PC, align 8
  %2929 = inttoptr i64 %2927 to i32*
  %2930 = load i32, i32* %2929, align 4
  %2931 = add i32 %2930, %2902
  %2932 = zext i32 %2931 to i64
  store i64 %2932, i64* %RCX, align 8, !tbaa !2428
  %2933 = icmp ult i32 %2931, %2902
  %2934 = icmp ult i32 %2931, %2930
  %2935 = or i1 %2933, %2934
  %2936 = zext i1 %2935 to i8
  store i8 %2936, i8* %51, align 1, !tbaa !2433
  %2937 = and i32 %2931, 255
  %2938 = tail call i32 @llvm.ctpop.i32(i32 %2937) #11
  %2939 = trunc i32 %2938 to i8
  %2940 = and i8 %2939, 1
  %2941 = xor i8 %2940, 1
  store i8 %2941, i8* %52, align 1, !tbaa !2447
  %2942 = xor i32 %2930, %2902
  %2943 = xor i32 %2942, %2931
  %2944 = lshr i32 %2943, 4
  %2945 = trunc i32 %2944 to i8
  %2946 = and i8 %2945, 1
  store i8 %2946, i8* %53, align 1, !tbaa !2451
  %2947 = icmp eq i32 %2931, 0
  %2948 = zext i1 %2947 to i8
  store i8 %2948, i8* %54, align 1, !tbaa !2448
  %2949 = lshr i32 %2931, 31
  %2950 = trunc i32 %2949 to i8
  store i8 %2950, i8* %55, align 1, !tbaa !2449
  %2951 = lshr i32 %2930, 31
  %2952 = xor i32 %2949, %2916
  %2953 = xor i32 %2949, %2951
  %2954 = add nuw nsw i32 %2952, %2953
  %2955 = icmp eq i32 %2954, 2
  %2956 = zext i1 %2955 to i8
  store i8 %2956, i8* %56, align 1, !tbaa !2450
  %2957 = add i64 %58, -32
  %2958 = add i64 %94, 30
  store i64 %2958, i64* %PC, align 8
  %2959 = inttoptr i64 %2957 to i32*
  store i32 %2931, i32* %2959, align 4
  %2960 = load i64, i64* %RBP, align 8
  %2961 = add i64 %2960, -36
  %2962 = load i64, i64* %PC, align 8
  %2963 = add i64 %2962, 3
  store i64 %2963, i64* %PC, align 8
  %2964 = inttoptr i64 %2961 to i32*
  %2965 = load i32, i32* %2964, align 4
  %2966 = shl i32 %2965, 1
  %2967 = icmp slt i32 %2965, 0
  %2968 = icmp slt i32 %2966, 0
  %2969 = xor i1 %2967, %2968
  %2970 = zext i32 %2966 to i64
  store i64 %2970, i64* %RCX, align 8, !tbaa !2428
  %.lobit24 = lshr i32 %2965, 31
  %2971 = trunc i32 %.lobit24 to i8
  store i8 %2971, i8* %51, align 1, !tbaa !2432
  %2972 = and i32 %2966, 254
  %2973 = tail call i32 @llvm.ctpop.i32(i32 %2972) #11
  %2974 = trunc i32 %2973 to i8
  %2975 = and i8 %2974, 1
  %2976 = xor i8 %2975, 1
  store i8 %2976, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %2977 = icmp eq i32 %2966, 0
  %2978 = zext i1 %2977 to i8
  store i8 %2978, i8* %54, align 1, !tbaa !2432
  %2979 = lshr i32 %2965, 30
  %2980 = and i32 %2979, 1
  %2981 = trunc i32 %2980 to i8
  store i8 %2981, i8* %55, align 1, !tbaa !2432
  %2982 = zext i1 %2969 to i8
  store i8 %2982, i8* %56, align 1, !tbaa !2432
  %2983 = add i64 %2960, -16
  %2984 = add i64 %2962, 10
  store i64 %2984, i64* %PC, align 8
  %2985 = inttoptr i64 %2983 to i64*
  %2986 = load i64, i64* %2985, align 8
  store i64 %2986, i64* %RDX, align 8, !tbaa !2428
  %2987 = add i64 %2960, -28
  %2988 = add i64 %2962, 14
  store i64 %2988, i64* %PC, align 8
  %2989 = inttoptr i64 %2987 to i32*
  %2990 = load i32, i32* %2989, align 4
  %2991 = sext i32 %2990 to i64
  store i64 %2991, i64* %RSI, align 8, !tbaa !2428
  %2992 = shl nsw i64 %2991, 2
  %2993 = add i64 %2992, %2986
  %2994 = add i64 %2962, 17
  store i64 %2994, i64* %PC, align 8
  %2995 = inttoptr i64 %2993 to i32*
  %2996 = load i32, i32* %2995, align 4
  %2997 = add i32 %2996, %2966
  %2998 = zext i32 %2997 to i64
  store i64 %2998, i64* %RCX, align 8, !tbaa !2428
  %2999 = icmp ult i32 %2997, %2966
  %3000 = icmp ult i32 %2997, %2996
  %3001 = or i1 %2999, %3000
  %3002 = zext i1 %3001 to i8
  store i8 %3002, i8* %51, align 1, !tbaa !2433
  %3003 = and i32 %2997, 255
  %3004 = tail call i32 @llvm.ctpop.i32(i32 %3003) #11
  %3005 = trunc i32 %3004 to i8
  %3006 = and i8 %3005, 1
  %3007 = xor i8 %3006, 1
  store i8 %3007, i8* %52, align 1, !tbaa !2447
  %3008 = xor i32 %2996, %2966
  %3009 = xor i32 %3008, %2997
  %3010 = lshr i32 %3009, 4
  %3011 = trunc i32 %3010 to i8
  %3012 = and i8 %3011, 1
  store i8 %3012, i8* %53, align 1, !tbaa !2451
  %3013 = icmp eq i32 %2997, 0
  %3014 = zext i1 %3013 to i8
  store i8 %3014, i8* %54, align 1, !tbaa !2448
  %3015 = lshr i32 %2997, 31
  %3016 = trunc i32 %3015 to i8
  store i8 %3016, i8* %55, align 1, !tbaa !2449
  %3017 = lshr i32 %2996, 31
  %3018 = xor i32 %3015, %2980
  %3019 = xor i32 %3015, %3017
  %3020 = add nuw nsw i32 %3018, %3019
  %3021 = icmp eq i32 %3020, 2
  %3022 = zext i1 %3021 to i8
  store i8 %3022, i8* %56, align 1, !tbaa !2450
  %3023 = add i64 %2960, -40
  %3024 = add i64 %2962, 20
  store i64 %3024, i64* %PC, align 8
  %3025 = inttoptr i64 %3023 to i32*
  store i32 %2997, i32* %3025, align 4
  %3026 = load i64, i64* %RBP, align 8
  %3027 = add i64 %3026, -24
  %3028 = load i64, i64* %PC, align 8
  %3029 = add i64 %3028, 4
  store i64 %3029, i64* %PC, align 8
  %3030 = inttoptr i64 %3027 to i64*
  %3031 = load i64, i64* %3030, align 8
  store i64 %3031, i64* %RDX, align 8, !tbaa !2428
  %3032 = add i64 %3026, -32
  %3033 = add i64 %3028, 8
  store i64 %3033, i64* %PC, align 8
  %3034 = inttoptr i64 %3032 to i32*
  %3035 = load i32, i32* %3034, align 4
  %3036 = sext i32 %3035 to i64
  store i64 %3036, i64* %RSI, align 8, !tbaa !2428
  %3037 = shl nsw i64 %3036, 3
  %3038 = add i64 %3037, %3031
  %3039 = add i64 %3028, 13
  store i64 %3039, i64* %PC, align 8
  %3040 = inttoptr i64 %3038 to i64*
  %3041 = load i64, i64* %3040, align 8
  store i64 %3041, i64* %3745, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3733, align 1, !tbaa !2452
  %3042 = add i64 %3026, -64
  %3043 = add i64 %3028, 18
  store i64 %3043, i64* %PC, align 8
  %3044 = inttoptr i64 %3042 to i64*
  store i64 %3041, i64* %3044, align 8
  %3045 = load i64, i64* %RBP, align 8
  %3046 = add i64 %3045, -24
  %3047 = load i64, i64* %PC, align 8
  %3048 = add i64 %3047, 4
  store i64 %3048, i64* %PC, align 8
  %3049 = inttoptr i64 %3046 to i64*
  %3050 = load i64, i64* %3049, align 8
  store i64 %3050, i64* %RDX, align 8, !tbaa !2428
  %3051 = add i64 %3045, -32
  %3052 = add i64 %3047, 7
  store i64 %3052, i64* %PC, align 8
  %3053 = inttoptr i64 %3051 to i32*
  %3054 = load i32, i32* %3053, align 4
  %3055 = add i32 %3054, 1
  %3056 = zext i32 %3055 to i64
  store i64 %3056, i64* %RCX, align 8, !tbaa !2428
  %3057 = icmp eq i32 %3054, -1
  %3058 = icmp eq i32 %3055, 0
  %3059 = or i1 %3057, %3058
  %3060 = zext i1 %3059 to i8
  store i8 %3060, i8* %51, align 1, !tbaa !2433
  %3061 = and i32 %3055, 255
  %3062 = tail call i32 @llvm.ctpop.i32(i32 %3061) #11
  %3063 = trunc i32 %3062 to i8
  %3064 = and i8 %3063, 1
  %3065 = xor i8 %3064, 1
  store i8 %3065, i8* %52, align 1, !tbaa !2447
  %3066 = xor i32 %3054, %3055
  %3067 = lshr i32 %3066, 4
  %3068 = trunc i32 %3067 to i8
  %3069 = and i8 %3068, 1
  store i8 %3069, i8* %53, align 1, !tbaa !2451
  %3070 = zext i1 %3058 to i8
  store i8 %3070, i8* %54, align 1, !tbaa !2448
  %3071 = lshr i32 %3055, 31
  %3072 = trunc i32 %3071 to i8
  store i8 %3072, i8* %55, align 1, !tbaa !2449
  %3073 = lshr i32 %3054, 31
  %3074 = xor i32 %3071, %3073
  %3075 = add nuw nsw i32 %3074, %3071
  %3076 = icmp eq i32 %3075, 2
  %3077 = zext i1 %3076 to i8
  store i8 %3077, i8* %56, align 1, !tbaa !2450
  %3078 = sext i32 %3055 to i64
  store i64 %3078, i64* %RSI, align 8, !tbaa !2428
  %3079 = shl nsw i64 %3078, 3
  %3080 = add i64 %3079, %3050
  %3081 = add i64 %3047, 18
  store i64 %3081, i64* %PC, align 8
  %3082 = inttoptr i64 %3080 to i64*
  %3083 = load i64, i64* %3082, align 8
  %3084 = load i64, i64* %RAX, align 8
  %3085 = xor i64 %3084, %3083
  store i64 %3085, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %3086 = trunc i64 %3085 to i32
  %3087 = and i32 %3086, 255
  %3088 = tail call i32 @llvm.ctpop.i32(i32 %3087) #11
  %3089 = trunc i32 %3088 to i8
  %3090 = and i8 %3089, 1
  %3091 = xor i8 %3090, 1
  store i8 %3091, i8* %52, align 1, !tbaa !2447
  %3092 = icmp eq i64 %3085, 0
  %3093 = zext i1 %3092 to i8
  store i8 %3093, i8* %54, align 1, !tbaa !2448
  %3094 = lshr i64 %3085, 63
  %3095 = trunc i64 %3094 to i8
  store i8 %3095, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %3085, i64* %3745, align 1, !tbaa !2428
  store i64 0, i64* %3732, align 1, !tbaa !2428
  %3096 = add i64 %3045, -72
  %3097 = add i64 %3047, 36
  store i64 %3097, i64* %PC, align 8
  %3098 = inttoptr i64 %3096 to i64*
  store i64 %3085, i64* %3098, align 8
  %3099 = load i64, i64* %RBP, align 8
  %3100 = add i64 %3099, -24
  %3101 = load i64, i64* %PC, align 8
  %3102 = add i64 %3101, 4
  store i64 %3102, i64* %PC, align 8
  %3103 = inttoptr i64 %3100 to i64*
  %3104 = load i64, i64* %3103, align 8
  store i64 %3104, i64* %RDX, align 8, !tbaa !2428
  %3105 = add i64 %3099, -40
  %3106 = add i64 %3101, 8
  store i64 %3106, i64* %PC, align 8
  %3107 = inttoptr i64 %3105 to i32*
  %3108 = load i32, i32* %3107, align 4
  %3109 = sext i32 %3108 to i64
  store i64 %3109, i64* %RSI, align 8, !tbaa !2428
  %3110 = shl nsw i64 %3109, 3
  %3111 = add i64 %3110, %3104
  %3112 = add i64 %3101, 13
  store i64 %3112, i64* %PC, align 8
  %3113 = inttoptr i64 %3111 to i64*
  %3114 = load i64, i64* %3113, align 8
  store i64 %3114, i64* %3745, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3733, align 1, !tbaa !2452
  %3115 = add i64 %3099, -80
  %3116 = add i64 %3101, 18
  store i64 %3116, i64* %PC, align 8
  %3117 = inttoptr i64 %3115 to i64*
  store i64 %3114, i64* %3117, align 8
  %3118 = load i64, i64* %RBP, align 8
  %3119 = add i64 %3118, -24
  %3120 = load i64, i64* %PC, align 8
  %3121 = add i64 %3120, 4
  store i64 %3121, i64* %PC, align 8
  %3122 = inttoptr i64 %3119 to i64*
  %3123 = load i64, i64* %3122, align 8
  store i64 %3123, i64* %RDX, align 8, !tbaa !2428
  %3124 = add i64 %3118, -40
  %3125 = add i64 %3120, 7
  store i64 %3125, i64* %PC, align 8
  %3126 = inttoptr i64 %3124 to i32*
  %3127 = load i32, i32* %3126, align 4
  %3128 = add i32 %3127, 1
  %3129 = zext i32 %3128 to i64
  store i64 %3129, i64* %RCX, align 8, !tbaa !2428
  %3130 = icmp eq i32 %3127, -1
  %3131 = icmp eq i32 %3128, 0
  %3132 = or i1 %3130, %3131
  %3133 = zext i1 %3132 to i8
  store i8 %3133, i8* %51, align 1, !tbaa !2433
  %3134 = and i32 %3128, 255
  %3135 = tail call i32 @llvm.ctpop.i32(i32 %3134) #11
  %3136 = trunc i32 %3135 to i8
  %3137 = and i8 %3136, 1
  %3138 = xor i8 %3137, 1
  store i8 %3138, i8* %52, align 1, !tbaa !2447
  %3139 = xor i32 %3127, %3128
  %3140 = lshr i32 %3139, 4
  %3141 = trunc i32 %3140 to i8
  %3142 = and i8 %3141, 1
  store i8 %3142, i8* %53, align 1, !tbaa !2451
  %3143 = zext i1 %3131 to i8
  store i8 %3143, i8* %54, align 1, !tbaa !2448
  %3144 = lshr i32 %3128, 31
  %3145 = trunc i32 %3144 to i8
  store i8 %3145, i8* %55, align 1, !tbaa !2449
  %3146 = lshr i32 %3127, 31
  %3147 = xor i32 %3144, %3146
  %3148 = add nuw nsw i32 %3147, %3144
  %3149 = icmp eq i32 %3148, 2
  %3150 = zext i1 %3149 to i8
  store i8 %3150, i8* %56, align 1, !tbaa !2450
  %3151 = sext i32 %3128 to i64
  store i64 %3151, i64* %RSI, align 8, !tbaa !2428
  %3152 = shl nsw i64 %3151, 3
  %3153 = add i64 %3152, %3123
  %3154 = add i64 %3120, 18
  store i64 %3154, i64* %PC, align 8
  %3155 = inttoptr i64 %3153 to i64*
  %3156 = load i64, i64* %3155, align 8
  %3157 = load i64, i64* %RAX, align 8
  %3158 = xor i64 %3157, %3156
  store i64 %3158, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %3159 = trunc i64 %3158 to i32
  %3160 = and i32 %3159, 255
  %3161 = tail call i32 @llvm.ctpop.i32(i32 %3160) #11
  %3162 = trunc i32 %3161 to i8
  %3163 = and i8 %3162, 1
  %3164 = xor i8 %3163, 1
  store i8 %3164, i8* %52, align 1, !tbaa !2447
  %3165 = icmp eq i64 %3158, 0
  %3166 = zext i1 %3165 to i8
  store i8 %3166, i8* %54, align 1, !tbaa !2448
  %3167 = lshr i64 %3158, 63
  %3168 = trunc i64 %3167 to i8
  store i8 %3168, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %3158, i64* %3745, align 1, !tbaa !2428
  store i64 0, i64* %3732, align 1, !tbaa !2428
  %3169 = add i64 %3118, -88
  %3170 = add i64 %3120, 36
  store i64 %3170, i64* %PC, align 8
  %3171 = inttoptr i64 %3169 to i64*
  store i64 %3158, i64* %3171, align 8
  %3172 = load i64, i64* %RBP, align 8
  %3173 = add i64 %3172, -80
  %3174 = load i64, i64* %PC, align 8
  %3175 = add i64 %3174, 5
  store i64 %3175, i64* %PC, align 8
  %3176 = inttoptr i64 %3173 to i64*
  %3177 = load i64, i64* %3176, align 8
  store i64 %3177, i64* %3745, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3733, align 1, !tbaa !2452
  %3178 = add i64 %3172, -24
  %3179 = add i64 %3174, 9
  store i64 %3179, i64* %PC, align 8
  %3180 = inttoptr i64 %3178 to i64*
  %3181 = load i64, i64* %3180, align 8
  store i64 %3181, i64* %RDX, align 8, !tbaa !2428
  %3182 = add i64 %3172, -32
  %3183 = add i64 %3174, 13
  store i64 %3183, i64* %PC, align 8
  %3184 = inttoptr i64 %3182 to i32*
  %3185 = load i32, i32* %3184, align 4
  %3186 = sext i32 %3185 to i64
  store i64 %3186, i64* %RSI, align 8, !tbaa !2428
  %3187 = shl nsw i64 %3186, 3
  %3188 = add i64 %3187, %3181
  %3189 = add i64 %3174, 18
  store i64 %3189, i64* %PC, align 8
  %3190 = inttoptr i64 %3188 to i64*
  store i64 %3177, i64* %3190, align 8
  %3191 = load i64, i64* %RBP, align 8
  %3192 = add i64 %3191, -88
  %3193 = load i64, i64* %PC, align 8
  %3194 = add i64 %3193, 5
  store i64 %3194, i64* %PC, align 8
  %3195 = inttoptr i64 %3192 to i64*
  %3196 = load i64, i64* %3195, align 8
  store i64 %3196, i64* %3745, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3733, align 1, !tbaa !2452
  %3197 = add i64 %3191, -24
  %3198 = add i64 %3193, 9
  store i64 %3198, i64* %PC, align 8
  %3199 = inttoptr i64 %3197 to i64*
  %3200 = load i64, i64* %3199, align 8
  store i64 %3200, i64* %RDX, align 8, !tbaa !2428
  %3201 = add i64 %3191, -32
  %3202 = add i64 %3193, 12
  store i64 %3202, i64* %PC, align 8
  %3203 = inttoptr i64 %3201 to i32*
  %3204 = load i32, i32* %3203, align 4
  %3205 = add i32 %3204, 1
  %3206 = zext i32 %3205 to i64
  store i64 %3206, i64* %RCX, align 8, !tbaa !2428
  %3207 = icmp eq i32 %3204, -1
  %3208 = icmp eq i32 %3205, 0
  %3209 = or i1 %3207, %3208
  %3210 = zext i1 %3209 to i8
  store i8 %3210, i8* %51, align 1, !tbaa !2433
  %3211 = and i32 %3205, 255
  %3212 = tail call i32 @llvm.ctpop.i32(i32 %3211) #11
  %3213 = trunc i32 %3212 to i8
  %3214 = and i8 %3213, 1
  %3215 = xor i8 %3214, 1
  store i8 %3215, i8* %52, align 1, !tbaa !2447
  %3216 = xor i32 %3204, %3205
  %3217 = lshr i32 %3216, 4
  %3218 = trunc i32 %3217 to i8
  %3219 = and i8 %3218, 1
  store i8 %3219, i8* %53, align 1, !tbaa !2451
  %3220 = zext i1 %3208 to i8
  store i8 %3220, i8* %54, align 1, !tbaa !2448
  %3221 = lshr i32 %3205, 31
  %3222 = trunc i32 %3221 to i8
  store i8 %3222, i8* %55, align 1, !tbaa !2449
  %3223 = lshr i32 %3204, 31
  %3224 = xor i32 %3221, %3223
  %3225 = add nuw nsw i32 %3224, %3221
  %3226 = icmp eq i32 %3225, 2
  %3227 = zext i1 %3226 to i8
  store i8 %3227, i8* %56, align 1, !tbaa !2450
  %3228 = sext i32 %3205 to i64
  store i64 %3228, i64* %RSI, align 8, !tbaa !2428
  %3229 = shl nsw i64 %3228, 3
  %3230 = add i64 %3229, %3200
  %3231 = add i64 %3193, 23
  store i64 %3231, i64* %PC, align 8
  %3232 = inttoptr i64 %3230 to i64*
  store i64 %3196, i64* %3232, align 8
  %3233 = load i64, i64* %RBP, align 8
  %3234 = add i64 %3233, -64
  %3235 = load i64, i64* %PC, align 8
  %3236 = add i64 %3235, 5
  store i64 %3236, i64* %PC, align 8
  %3237 = inttoptr i64 %3234 to i64*
  %3238 = load i64, i64* %3237, align 8
  store i64 %3238, i64* %3745, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3733, align 1, !tbaa !2452
  %3239 = add i64 %3233, -24
  %3240 = add i64 %3235, 9
  store i64 %3240, i64* %PC, align 8
  %3241 = inttoptr i64 %3239 to i64*
  %3242 = load i64, i64* %3241, align 8
  store i64 %3242, i64* %RDX, align 8, !tbaa !2428
  %3243 = add i64 %3233, -40
  %3244 = add i64 %3235, 13
  store i64 %3244, i64* %PC, align 8
  %3245 = inttoptr i64 %3243 to i32*
  %3246 = load i32, i32* %3245, align 4
  %3247 = sext i32 %3246 to i64
  store i64 %3247, i64* %RSI, align 8, !tbaa !2428
  %3248 = shl nsw i64 %3247, 3
  %3249 = add i64 %3248, %3242
  %3250 = add i64 %3235, 18
  store i64 %3250, i64* %PC, align 8
  %3251 = inttoptr i64 %3249 to i64*
  store i64 %3238, i64* %3251, align 8
  %3252 = load i64, i64* %RBP, align 8
  %3253 = add i64 %3252, -72
  %3254 = load i64, i64* %PC, align 8
  %3255 = add i64 %3254, 5
  store i64 %3255, i64* %PC, align 8
  %3256 = inttoptr i64 %3253 to i64*
  %3257 = load i64, i64* %3256, align 8
  store i64 %3257, i64* %3745, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3733, align 1, !tbaa !2452
  %3258 = add i64 %3252, -24
  %3259 = add i64 %3254, 9
  store i64 %3259, i64* %PC, align 8
  %3260 = inttoptr i64 %3258 to i64*
  %3261 = load i64, i64* %3260, align 8
  store i64 %3261, i64* %RDX, align 8, !tbaa !2428
  %3262 = add i64 %3252, -40
  %3263 = add i64 %3254, 12
  store i64 %3263, i64* %PC, align 8
  %3264 = inttoptr i64 %3262 to i32*
  %3265 = load i32, i32* %3264, align 4
  %3266 = add i32 %3265, 1
  %3267 = zext i32 %3266 to i64
  store i64 %3267, i64* %RCX, align 8, !tbaa !2428
  %3268 = icmp eq i32 %3265, -1
  %3269 = icmp eq i32 %3266, 0
  %3270 = or i1 %3268, %3269
  %3271 = zext i1 %3270 to i8
  store i8 %3271, i8* %51, align 1, !tbaa !2433
  %3272 = and i32 %3266, 255
  %3273 = tail call i32 @llvm.ctpop.i32(i32 %3272) #11
  %3274 = trunc i32 %3273 to i8
  %3275 = and i8 %3274, 1
  %3276 = xor i8 %3275, 1
  store i8 %3276, i8* %52, align 1, !tbaa !2447
  %3277 = xor i32 %3265, %3266
  %3278 = lshr i32 %3277, 4
  %3279 = trunc i32 %3278 to i8
  %3280 = and i8 %3279, 1
  store i8 %3280, i8* %53, align 1, !tbaa !2451
  %3281 = zext i1 %3269 to i8
  store i8 %3281, i8* %54, align 1, !tbaa !2448
  %3282 = lshr i32 %3266, 31
  %3283 = trunc i32 %3282 to i8
  store i8 %3283, i8* %55, align 1, !tbaa !2449
  %3284 = lshr i32 %3265, 31
  %3285 = xor i32 %3282, %3284
  %3286 = add nuw nsw i32 %3285, %3282
  %3287 = icmp eq i32 %3286, 2
  %3288 = zext i1 %3287 to i8
  store i8 %3288, i8* %56, align 1, !tbaa !2450
  %3289 = sext i32 %3266 to i64
  store i64 %3289, i64* %RSI, align 8, !tbaa !2428
  %3290 = shl nsw i64 %3289, 3
  %3291 = add i64 %3290, %3261
  %3292 = add i64 %3254, 23
  store i64 %3292, i64* %PC, align 8
  %3293 = inttoptr i64 %3291 to i64*
  store i64 %3257, i64* %3293, align 8
  %3294 = load i64, i64* %RBP, align 8
  %3295 = add i64 %3294, -52
  %3296 = load i64, i64* %PC, align 8
  %3297 = add i64 %3296, 3
  store i64 %3297, i64* %PC, align 8
  %3298 = inttoptr i64 %3295 to i32*
  %3299 = load i32, i32* %3298, align 4
  %3300 = zext i32 %3299 to i64
  store i64 %3300, i64* %RCX, align 8, !tbaa !2428
  %3301 = add i64 %3294, -32
  %3302 = add i64 %3296, 6
  store i64 %3302, i64* %PC, align 8
  %3303 = inttoptr i64 %3301 to i32*
  %3304 = load i32, i32* %3303, align 4
  %3305 = add i32 %3304, %3299
  %3306 = zext i32 %3305 to i64
  store i64 %3306, i64* %RCX, align 8, !tbaa !2428
  %3307 = icmp ult i32 %3305, %3299
  %3308 = icmp ult i32 %3305, %3304
  %3309 = or i1 %3307, %3308
  %3310 = zext i1 %3309 to i8
  store i8 %3310, i8* %51, align 1, !tbaa !2433
  %3311 = and i32 %3305, 255
  %3312 = tail call i32 @llvm.ctpop.i32(i32 %3311) #11
  %3313 = trunc i32 %3312 to i8
  %3314 = and i8 %3313, 1
  %3315 = xor i8 %3314, 1
  store i8 %3315, i8* %52, align 1, !tbaa !2447
  %3316 = xor i32 %3304, %3299
  %3317 = xor i32 %3316, %3305
  %3318 = lshr i32 %3317, 4
  %3319 = trunc i32 %3318 to i8
  %3320 = and i8 %3319, 1
  store i8 %3320, i8* %53, align 1, !tbaa !2451
  %3321 = icmp eq i32 %3305, 0
  %3322 = zext i1 %3321 to i8
  store i8 %3322, i8* %54, align 1, !tbaa !2448
  %3323 = lshr i32 %3305, 31
  %3324 = trunc i32 %3323 to i8
  store i8 %3324, i8* %55, align 1, !tbaa !2449
  %3325 = lshr i32 %3299, 31
  %3326 = lshr i32 %3304, 31
  %3327 = xor i32 %3323, %3325
  %3328 = xor i32 %3323, %3326
  %3329 = add nuw nsw i32 %3327, %3328
  %3330 = icmp eq i32 %3329, 2
  %3331 = zext i1 %3330 to i8
  store i8 %3331, i8* %56, align 1, !tbaa !2450
  %3332 = add i64 %3296, 9
  store i64 %3332, i64* %PC, align 8
  store i32 %3305, i32* %3303, align 4
  %3333 = load i64, i64* %RBP, align 8
  %3334 = add i64 %3333, -52
  %3335 = load i64, i64* %PC, align 8
  %3336 = add i64 %3335, 3
  store i64 %3336, i64* %PC, align 8
  %3337 = inttoptr i64 %3334 to i32*
  %3338 = load i32, i32* %3337, align 4
  %3339 = zext i32 %3338 to i64
  store i64 %3339, i64* %RCX, align 8, !tbaa !2428
  %3340 = add i64 %3333, -40
  %3341 = add i64 %3335, 6
  store i64 %3341, i64* %PC, align 8
  %3342 = inttoptr i64 %3340 to i32*
  %3343 = load i32, i32* %3342, align 4
  %3344 = add i32 %3343, %3338
  %3345 = zext i32 %3344 to i64
  store i64 %3345, i64* %RCX, align 8, !tbaa !2428
  %3346 = icmp ult i32 %3344, %3338
  %3347 = icmp ult i32 %3344, %3343
  %3348 = or i1 %3346, %3347
  %3349 = zext i1 %3348 to i8
  store i8 %3349, i8* %51, align 1, !tbaa !2433
  %3350 = and i32 %3344, 255
  %3351 = tail call i32 @llvm.ctpop.i32(i32 %3350) #11
  %3352 = trunc i32 %3351 to i8
  %3353 = and i8 %3352, 1
  %3354 = xor i8 %3353, 1
  store i8 %3354, i8* %52, align 1, !tbaa !2447
  %3355 = xor i32 %3343, %3338
  %3356 = xor i32 %3355, %3344
  %3357 = lshr i32 %3356, 4
  %3358 = trunc i32 %3357 to i8
  %3359 = and i8 %3358, 1
  store i8 %3359, i8* %53, align 1, !tbaa !2451
  %3360 = icmp eq i32 %3344, 0
  %3361 = zext i1 %3360 to i8
  store i8 %3361, i8* %54, align 1, !tbaa !2448
  %3362 = lshr i32 %3344, 31
  %3363 = trunc i32 %3362 to i8
  store i8 %3363, i8* %55, align 1, !tbaa !2449
  %3364 = lshr i32 %3338, 31
  %3365 = lshr i32 %3343, 31
  %3366 = xor i32 %3362, %3364
  %3367 = xor i32 %3362, %3365
  %3368 = add nuw nsw i32 %3366, %3367
  %3369 = icmp eq i32 %3368, 2
  %3370 = zext i1 %3369 to i8
  store i8 %3370, i8* %56, align 1, !tbaa !2450
  %3371 = add i64 %3335, 9
  store i64 %3371, i64* %PC, align 8
  store i32 %3344, i32* %3342, align 4
  %3372 = load i64, i64* %RBP, align 8
  %3373 = add i64 %3372, -24
  %3374 = load i64, i64* %PC, align 8
  %3375 = add i64 %3374, 4
  store i64 %3375, i64* %PC, align 8
  %3376 = inttoptr i64 %3373 to i64*
  %3377 = load i64, i64* %3376, align 8
  store i64 %3377, i64* %RDX, align 8, !tbaa !2428
  %3378 = add i64 %3372, -32
  %3379 = add i64 %3374, 8
  store i64 %3379, i64* %PC, align 8
  %3380 = inttoptr i64 %3378 to i32*
  %3381 = load i32, i32* %3380, align 4
  %3382 = sext i32 %3381 to i64
  store i64 %3382, i64* %RSI, align 8, !tbaa !2428
  %3383 = shl nsw i64 %3382, 3
  %3384 = add i64 %3383, %3377
  %3385 = add i64 %3374, 13
  store i64 %3385, i64* %PC, align 8
  %3386 = inttoptr i64 %3384 to i64*
  %3387 = load i64, i64* %3386, align 8
  store i64 %3387, i64* %3745, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3733, align 1, !tbaa !2452
  %3388 = add i64 %3372, -64
  %3389 = add i64 %3374, 18
  store i64 %3389, i64* %PC, align 8
  %3390 = inttoptr i64 %3388 to i64*
  store i64 %3387, i64* %3390, align 8
  %3391 = load i64, i64* %RBP, align 8
  %3392 = add i64 %3391, -24
  %3393 = load i64, i64* %PC, align 8
  %3394 = add i64 %3393, 4
  store i64 %3394, i64* %PC, align 8
  %3395 = inttoptr i64 %3392 to i64*
  %3396 = load i64, i64* %3395, align 8
  store i64 %3396, i64* %RDX, align 8, !tbaa !2428
  %3397 = add i64 %3391, -32
  %3398 = add i64 %3393, 7
  store i64 %3398, i64* %PC, align 8
  %3399 = inttoptr i64 %3397 to i32*
  %3400 = load i32, i32* %3399, align 4
  %3401 = add i32 %3400, 1
  %3402 = zext i32 %3401 to i64
  store i64 %3402, i64* %RCX, align 8, !tbaa !2428
  %3403 = icmp eq i32 %3400, -1
  %3404 = icmp eq i32 %3401, 0
  %3405 = or i1 %3403, %3404
  %3406 = zext i1 %3405 to i8
  store i8 %3406, i8* %51, align 1, !tbaa !2433
  %3407 = and i32 %3401, 255
  %3408 = tail call i32 @llvm.ctpop.i32(i32 %3407) #11
  %3409 = trunc i32 %3408 to i8
  %3410 = and i8 %3409, 1
  %3411 = xor i8 %3410, 1
  store i8 %3411, i8* %52, align 1, !tbaa !2447
  %3412 = xor i32 %3400, %3401
  %3413 = lshr i32 %3412, 4
  %3414 = trunc i32 %3413 to i8
  %3415 = and i8 %3414, 1
  store i8 %3415, i8* %53, align 1, !tbaa !2451
  %3416 = zext i1 %3404 to i8
  store i8 %3416, i8* %54, align 1, !tbaa !2448
  %3417 = lshr i32 %3401, 31
  %3418 = trunc i32 %3417 to i8
  store i8 %3418, i8* %55, align 1, !tbaa !2449
  %3419 = lshr i32 %3400, 31
  %3420 = xor i32 %3417, %3419
  %3421 = add nuw nsw i32 %3420, %3417
  %3422 = icmp eq i32 %3421, 2
  %3423 = zext i1 %3422 to i8
  store i8 %3423, i8* %56, align 1, !tbaa !2450
  %3424 = sext i32 %3401 to i64
  store i64 %3424, i64* %RSI, align 8, !tbaa !2428
  %3425 = shl nsw i64 %3424, 3
  %3426 = add i64 %3425, %3396
  %3427 = add i64 %3393, 18
  store i64 %3427, i64* %PC, align 8
  %3428 = inttoptr i64 %3426 to i64*
  %3429 = load i64, i64* %3428, align 8
  %3430 = load i64, i64* %RAX, align 8
  %3431 = xor i64 %3430, %3429
  store i64 %3431, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %3432 = trunc i64 %3431 to i32
  %3433 = and i32 %3432, 255
  %3434 = tail call i32 @llvm.ctpop.i32(i32 %3433) #11
  %3435 = trunc i32 %3434 to i8
  %3436 = and i8 %3435, 1
  %3437 = xor i8 %3436, 1
  store i8 %3437, i8* %52, align 1, !tbaa !2447
  %3438 = icmp eq i64 %3431, 0
  %3439 = zext i1 %3438 to i8
  store i8 %3439, i8* %54, align 1, !tbaa !2448
  %3440 = lshr i64 %3431, 63
  %3441 = trunc i64 %3440 to i8
  store i8 %3441, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %3431, i64* %3745, align 1, !tbaa !2428
  store i64 0, i64* %3732, align 1, !tbaa !2428
  %3442 = add i64 %3391, -72
  %3443 = add i64 %3393, 36
  store i64 %3443, i64* %PC, align 8
  %3444 = inttoptr i64 %3442 to i64*
  store i64 %3431, i64* %3444, align 8
  %3445 = load i64, i64* %RBP, align 8
  %3446 = add i64 %3445, -24
  %3447 = load i64, i64* %PC, align 8
  %3448 = add i64 %3447, 4
  store i64 %3448, i64* %PC, align 8
  %3449 = inttoptr i64 %3446 to i64*
  %3450 = load i64, i64* %3449, align 8
  store i64 %3450, i64* %RDX, align 8, !tbaa !2428
  %3451 = add i64 %3445, -40
  %3452 = add i64 %3447, 8
  store i64 %3452, i64* %PC, align 8
  %3453 = inttoptr i64 %3451 to i32*
  %3454 = load i32, i32* %3453, align 4
  %3455 = sext i32 %3454 to i64
  store i64 %3455, i64* %RSI, align 8, !tbaa !2428
  %3456 = shl nsw i64 %3455, 3
  %3457 = add i64 %3456, %3450
  %3458 = add i64 %3447, 13
  store i64 %3458, i64* %PC, align 8
  %3459 = inttoptr i64 %3457 to i64*
  %3460 = load i64, i64* %3459, align 8
  store i64 %3460, i64* %3745, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3733, align 1, !tbaa !2452
  %3461 = add i64 %3445, -80
  %3462 = add i64 %3447, 18
  store i64 %3462, i64* %PC, align 8
  %3463 = inttoptr i64 %3461 to i64*
  store i64 %3460, i64* %3463, align 8
  %3464 = load i64, i64* %RBP, align 8
  %3465 = add i64 %3464, -24
  %3466 = load i64, i64* %PC, align 8
  %3467 = add i64 %3466, 4
  store i64 %3467, i64* %PC, align 8
  %3468 = inttoptr i64 %3465 to i64*
  %3469 = load i64, i64* %3468, align 8
  store i64 %3469, i64* %RDX, align 8, !tbaa !2428
  %3470 = add i64 %3464, -40
  %3471 = add i64 %3466, 7
  store i64 %3471, i64* %PC, align 8
  %3472 = inttoptr i64 %3470 to i32*
  %3473 = load i32, i32* %3472, align 4
  %3474 = add i32 %3473, 1
  %3475 = zext i32 %3474 to i64
  store i64 %3475, i64* %RCX, align 8, !tbaa !2428
  %3476 = icmp eq i32 %3473, -1
  %3477 = icmp eq i32 %3474, 0
  %3478 = or i1 %3476, %3477
  %3479 = zext i1 %3478 to i8
  store i8 %3479, i8* %51, align 1, !tbaa !2433
  %3480 = and i32 %3474, 255
  %3481 = tail call i32 @llvm.ctpop.i32(i32 %3480) #11
  %3482 = trunc i32 %3481 to i8
  %3483 = and i8 %3482, 1
  %3484 = xor i8 %3483, 1
  store i8 %3484, i8* %52, align 1, !tbaa !2447
  %3485 = xor i32 %3473, %3474
  %3486 = lshr i32 %3485, 4
  %3487 = trunc i32 %3486 to i8
  %3488 = and i8 %3487, 1
  store i8 %3488, i8* %53, align 1, !tbaa !2451
  %3489 = zext i1 %3477 to i8
  store i8 %3489, i8* %54, align 1, !tbaa !2448
  %3490 = lshr i32 %3474, 31
  %3491 = trunc i32 %3490 to i8
  store i8 %3491, i8* %55, align 1, !tbaa !2449
  %3492 = lshr i32 %3473, 31
  %3493 = xor i32 %3490, %3492
  %3494 = add nuw nsw i32 %3493, %3490
  %3495 = icmp eq i32 %3494, 2
  %3496 = zext i1 %3495 to i8
  store i8 %3496, i8* %56, align 1, !tbaa !2450
  %3497 = sext i32 %3474 to i64
  store i64 %3497, i64* %RSI, align 8, !tbaa !2428
  %3498 = shl nsw i64 %3497, 3
  %3499 = add i64 %3498, %3469
  %3500 = add i64 %3466, 18
  store i64 %3500, i64* %PC, align 8
  %3501 = inttoptr i64 %3499 to i64*
  %3502 = load i64, i64* %3501, align 8
  %3503 = load i64, i64* %RAX, align 8
  %3504 = xor i64 %3503, %3502
  store i64 %3504, i64* %RDX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %3505 = trunc i64 %3504 to i32
  %3506 = and i32 %3505, 255
  %3507 = tail call i32 @llvm.ctpop.i32(i32 %3506) #11
  %3508 = trunc i32 %3507 to i8
  %3509 = and i8 %3508, 1
  %3510 = xor i8 %3509, 1
  store i8 %3510, i8* %52, align 1, !tbaa !2447
  %3511 = icmp eq i64 %3504, 0
  %3512 = zext i1 %3511 to i8
  store i8 %3512, i8* %54, align 1, !tbaa !2448
  %3513 = lshr i64 %3504, 63
  %3514 = trunc i64 %3513 to i8
  store i8 %3514, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %3504, i64* %3745, align 1, !tbaa !2428
  store i64 0, i64* %3732, align 1, !tbaa !2428
  %3515 = add i64 %3464, -88
  %3516 = add i64 %3466, 36
  store i64 %3516, i64* %PC, align 8
  %3517 = inttoptr i64 %3515 to i64*
  store i64 %3504, i64* %3517, align 8
  %3518 = load i64, i64* %RBP, align 8
  %3519 = add i64 %3518, -80
  %3520 = load i64, i64* %PC, align 8
  %3521 = add i64 %3520, 5
  store i64 %3521, i64* %PC, align 8
  %3522 = inttoptr i64 %3519 to i64*
  %3523 = load i64, i64* %3522, align 8
  store i64 %3523, i64* %3745, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3733, align 1, !tbaa !2452
  %3524 = add i64 %3518, -24
  %3525 = add i64 %3520, 9
  store i64 %3525, i64* %PC, align 8
  %3526 = inttoptr i64 %3524 to i64*
  %3527 = load i64, i64* %3526, align 8
  store i64 %3527, i64* %RAX, align 8, !tbaa !2428
  %3528 = add i64 %3518, -32
  %3529 = add i64 %3520, 13
  store i64 %3529, i64* %PC, align 8
  %3530 = inttoptr i64 %3528 to i32*
  %3531 = load i32, i32* %3530, align 4
  %3532 = sext i32 %3531 to i64
  store i64 %3532, i64* %RDX, align 8, !tbaa !2428
  %3533 = shl nsw i64 %3532, 3
  %3534 = add i64 %3533, %3527
  %3535 = add i64 %3520, 18
  store i64 %3535, i64* %PC, align 8
  %3536 = inttoptr i64 %3534 to i64*
  store i64 %3523, i64* %3536, align 8
  %3537 = load i64, i64* %RBP, align 8
  %3538 = add i64 %3537, -88
  %3539 = load i64, i64* %PC, align 8
  %3540 = add i64 %3539, 5
  store i64 %3540, i64* %PC, align 8
  %3541 = inttoptr i64 %3538 to i64*
  %3542 = load i64, i64* %3541, align 8
  store i64 %3542, i64* %3745, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3733, align 1, !tbaa !2452
  %3543 = add i64 %3537, -24
  %3544 = add i64 %3539, 9
  store i64 %3544, i64* %PC, align 8
  %3545 = inttoptr i64 %3543 to i64*
  %3546 = load i64, i64* %3545, align 8
  store i64 %3546, i64* %RAX, align 8, !tbaa !2428
  %3547 = add i64 %3537, -32
  %3548 = add i64 %3539, 12
  store i64 %3548, i64* %PC, align 8
  %3549 = inttoptr i64 %3547 to i32*
  %3550 = load i32, i32* %3549, align 4
  %3551 = add i32 %3550, 1
  %3552 = zext i32 %3551 to i64
  store i64 %3552, i64* %RCX, align 8, !tbaa !2428
  %3553 = icmp eq i32 %3550, -1
  %3554 = icmp eq i32 %3551, 0
  %3555 = or i1 %3553, %3554
  %3556 = zext i1 %3555 to i8
  store i8 %3556, i8* %51, align 1, !tbaa !2433
  %3557 = and i32 %3551, 255
  %3558 = tail call i32 @llvm.ctpop.i32(i32 %3557) #11
  %3559 = trunc i32 %3558 to i8
  %3560 = and i8 %3559, 1
  %3561 = xor i8 %3560, 1
  store i8 %3561, i8* %52, align 1, !tbaa !2447
  %3562 = xor i32 %3550, %3551
  %3563 = lshr i32 %3562, 4
  %3564 = trunc i32 %3563 to i8
  %3565 = and i8 %3564, 1
  store i8 %3565, i8* %53, align 1, !tbaa !2451
  %3566 = zext i1 %3554 to i8
  store i8 %3566, i8* %54, align 1, !tbaa !2448
  %3567 = lshr i32 %3551, 31
  %3568 = trunc i32 %3567 to i8
  store i8 %3568, i8* %55, align 1, !tbaa !2449
  %3569 = lshr i32 %3550, 31
  %3570 = xor i32 %3567, %3569
  %3571 = add nuw nsw i32 %3570, %3567
  %3572 = icmp eq i32 %3571, 2
  %3573 = zext i1 %3572 to i8
  store i8 %3573, i8* %56, align 1, !tbaa !2450
  %3574 = sext i32 %3551 to i64
  store i64 %3574, i64* %RDX, align 8, !tbaa !2428
  %3575 = shl nsw i64 %3574, 3
  %3576 = add i64 %3575, %3546
  %3577 = add i64 %3539, 23
  store i64 %3577, i64* %PC, align 8
  %3578 = inttoptr i64 %3576 to i64*
  store i64 %3542, i64* %3578, align 8
  %3579 = load i64, i64* %RBP, align 8
  %3580 = add i64 %3579, -64
  %3581 = load i64, i64* %PC, align 8
  %3582 = add i64 %3581, 5
  store i64 %3582, i64* %PC, align 8
  %3583 = inttoptr i64 %3580 to i64*
  %3584 = load i64, i64* %3583, align 8
  store i64 %3584, i64* %3745, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3733, align 1, !tbaa !2452
  %3585 = add i64 %3579, -24
  %3586 = add i64 %3581, 9
  store i64 %3586, i64* %PC, align 8
  %3587 = inttoptr i64 %3585 to i64*
  %3588 = load i64, i64* %3587, align 8
  store i64 %3588, i64* %RAX, align 8, !tbaa !2428
  %3589 = add i64 %3579, -40
  %3590 = add i64 %3581, 13
  store i64 %3590, i64* %PC, align 8
  %3591 = inttoptr i64 %3589 to i32*
  %3592 = load i32, i32* %3591, align 4
  %3593 = sext i32 %3592 to i64
  store i64 %3593, i64* %RDX, align 8, !tbaa !2428
  %3594 = shl nsw i64 %3593, 3
  %3595 = add i64 %3594, %3588
  %3596 = add i64 %3581, 18
  store i64 %3596, i64* %PC, align 8
  %3597 = inttoptr i64 %3595 to i64*
  store i64 %3584, i64* %3597, align 8
  %3598 = load i64, i64* %RBP, align 8
  %3599 = add i64 %3598, -72
  %3600 = load i64, i64* %PC, align 8
  %3601 = add i64 %3600, 5
  store i64 %3601, i64* %PC, align 8
  %3602 = inttoptr i64 %3599 to i64*
  %3603 = load i64, i64* %3602, align 8
  store i64 %3603, i64* %3745, align 1, !tbaa !2452
  store double 0.000000e+00, double* %3733, align 1, !tbaa !2452
  %3604 = add i64 %3598, -24
  %3605 = add i64 %3600, 9
  store i64 %3605, i64* %PC, align 8
  %3606 = inttoptr i64 %3604 to i64*
  %3607 = load i64, i64* %3606, align 8
  store i64 %3607, i64* %RAX, align 8, !tbaa !2428
  %3608 = add i64 %3598, -40
  %3609 = add i64 %3600, 12
  store i64 %3609, i64* %PC, align 8
  %3610 = inttoptr i64 %3608 to i32*
  %3611 = load i32, i32* %3610, align 4
  %3612 = add i32 %3611, 1
  %3613 = zext i32 %3612 to i64
  store i64 %3613, i64* %RCX, align 8, !tbaa !2428
  %3614 = icmp eq i32 %3611, -1
  %3615 = icmp eq i32 %3612, 0
  %3616 = or i1 %3614, %3615
  %3617 = zext i1 %3616 to i8
  store i8 %3617, i8* %51, align 1, !tbaa !2433
  %3618 = and i32 %3612, 255
  %3619 = tail call i32 @llvm.ctpop.i32(i32 %3618) #11
  %3620 = trunc i32 %3619 to i8
  %3621 = and i8 %3620, 1
  %3622 = xor i8 %3621, 1
  store i8 %3622, i8* %52, align 1, !tbaa !2447
  %3623 = xor i32 %3611, %3612
  %3624 = lshr i32 %3623, 4
  %3625 = trunc i32 %3624 to i8
  %3626 = and i8 %3625, 1
  store i8 %3626, i8* %53, align 1, !tbaa !2451
  %3627 = zext i1 %3615 to i8
  store i8 %3627, i8* %54, align 1, !tbaa !2448
  %3628 = lshr i32 %3612, 31
  %3629 = trunc i32 %3628 to i8
  store i8 %3629, i8* %55, align 1, !tbaa !2449
  %3630 = lshr i32 %3611, 31
  %3631 = xor i32 %3628, %3630
  %3632 = add nuw nsw i32 %3631, %3628
  %3633 = icmp eq i32 %3632, 2
  %3634 = zext i1 %3633 to i8
  store i8 %3634, i8* %56, align 1, !tbaa !2450
  %3635 = sext i32 %3612 to i64
  store i64 %3635, i64* %RDX, align 8, !tbaa !2428
  %3636 = shl nsw i64 %3635, 3
  %3637 = add i64 %3636, %3607
  %3638 = add i64 %3600, 23
  store i64 %3638, i64* %PC, align 8
  %3639 = inttoptr i64 %3637 to i64*
  store i64 %3603, i64* %3639, align 8
  %3640 = load i64, i64* %RBP, align 8
  %3641 = add i64 %3640, -28
  %3642 = load i64, i64* %PC, align 8
  %3643 = add i64 %3642, 3
  store i64 %3643, i64* %PC, align 8
  %3644 = inttoptr i64 %3641 to i32*
  %3645 = load i32, i32* %3644, align 4
  %3646 = add i32 %3645, 1
  %3647 = zext i32 %3646 to i64
  store i64 %3647, i64* %RAX, align 8, !tbaa !2428
  %3648 = icmp eq i32 %3645, -1
  %3649 = icmp eq i32 %3646, 0
  %3650 = or i1 %3648, %3649
  %3651 = zext i1 %3650 to i8
  store i8 %3651, i8* %51, align 1, !tbaa !2433
  %3652 = and i32 %3646, 255
  %3653 = tail call i32 @llvm.ctpop.i32(i32 %3652) #11
  %3654 = trunc i32 %3653 to i8
  %3655 = and i8 %3654, 1
  %3656 = xor i8 %3655, 1
  store i8 %3656, i8* %52, align 1, !tbaa !2447
  %3657 = xor i32 %3645, %3646
  %3658 = lshr i32 %3657, 4
  %3659 = trunc i32 %3658 to i8
  %3660 = and i8 %3659, 1
  store i8 %3660, i8* %53, align 1, !tbaa !2451
  %3661 = zext i1 %3649 to i8
  store i8 %3661, i8* %54, align 1, !tbaa !2448
  %3662 = lshr i32 %3646, 31
  %3663 = trunc i32 %3662 to i8
  store i8 %3663, i8* %55, align 1, !tbaa !2449
  %3664 = lshr i32 %3645, 31
  %3665 = xor i32 %3662, %3664
  %3666 = add nuw nsw i32 %3665, %3662
  %3667 = icmp eq i32 %3666, 2
  %3668 = zext i1 %3667 to i8
  store i8 %3668, i8* %56, align 1, !tbaa !2450
  %3669 = add i64 %3642, 9
  store i64 %3669, i64* %PC, align 8
  store i32 %3646, i32* %3644, align 4
  %3670 = load i64, i64* %PC, align 8
  %3671 = add i64 %3670, -469
  store i64 %3671, i64* %PC, align 8, !tbaa !2428
  br label %block_4021ff

block_401c06:                                     ; preds = %block_401c5d, %block_401be0
  %3672 = phi i64 [ %191, %block_401c5d ], [ %.pre, %block_401be0 ]
  %3673 = load i64, i64* %RBP, align 8
  %3674 = add i64 %3673, -48
  %3675 = add i64 %3672, 3
  store i64 %3675, i64* %PC, align 8
  %3676 = inttoptr i64 %3674 to i32*
  %3677 = load i32, i32* %3676, align 4
  %3678 = shl i32 %3677, 3
  %3679 = zext i32 %3678 to i64
  store i64 %3679, i64* %RAX, align 8, !tbaa !2428
  %3680 = lshr i32 %3677, 29
  %3681 = trunc i32 %3680 to i8
  %3682 = and i8 %3681, 1
  store i8 %3682, i8* %51, align 1, !tbaa !2432
  %3683 = and i32 %3678, 248
  %3684 = tail call i32 @llvm.ctpop.i32(i32 %3683) #11
  %3685 = trunc i32 %3684 to i8
  %3686 = and i8 %3685, 1
  %3687 = xor i8 %3686, 1
  store i8 %3687, i8* %52, align 1, !tbaa !2432
  store i8 0, i8* %53, align 1, !tbaa !2432
  %3688 = icmp eq i32 %3678, 0
  %3689 = zext i1 %3688 to i8
  store i8 %3689, i8* %54, align 1, !tbaa !2432
  %3690 = lshr i32 %3677, 28
  %3691 = and i32 %3690, 1
  %3692 = trunc i32 %3691 to i8
  store i8 %3692, i8* %55, align 1, !tbaa !2432
  store i8 0, i8* %56, align 1, !tbaa !2432
  %3693 = add i64 %3673, -44
  %3694 = add i64 %3672, 9
  store i64 %3694, i64* %PC, align 8
  %3695 = inttoptr i64 %3693 to i32*
  %3696 = load i32, i32* %3695, align 4
  %3697 = sub i32 %3678, %3696
  %3698 = icmp ult i32 %3678, %3696
  %3699 = zext i1 %3698 to i8
  store i8 %3699, i8* %51, align 1, !tbaa !2433
  %3700 = and i32 %3697, 255
  %3701 = tail call i32 @llvm.ctpop.i32(i32 %3700) #11
  %3702 = trunc i32 %3701 to i8
  %3703 = and i8 %3702, 1
  %3704 = xor i8 %3703, 1
  store i8 %3704, i8* %52, align 1, !tbaa !2447
  %3705 = xor i32 %3696, %3678
  %3706 = xor i32 %3705, %3697
  %3707 = lshr i32 %3706, 4
  %3708 = trunc i32 %3707 to i8
  %3709 = and i8 %3708, 1
  store i8 %3709, i8* %53, align 1, !tbaa !2451
  %3710 = icmp eq i32 %3697, 0
  %3711 = zext i1 %3710 to i8
  store i8 %3711, i8* %54, align 1, !tbaa !2448
  %3712 = lshr i32 %3697, 31
  %3713 = trunc i32 %3712 to i8
  store i8 %3713, i8* %55, align 1, !tbaa !2449
  %3714 = lshr i32 %3696, 31
  %3715 = xor i32 %3714, %3691
  %3716 = xor i32 %3712, %3691
  %3717 = add nuw nsw i32 %3716, %3715
  %3718 = icmp eq i32 %3717, 2
  %3719 = zext i1 %3718 to i8
  store i8 %3719, i8* %56, align 1, !tbaa !2450
  %3720 = icmp ne i8 %3713, 0
  %3721 = xor i1 %3720, %3718
  %.v = select i1 %3721, i64 15, i64 101
  %3722 = add i64 %3672, %.v
  %3723 = add i64 %3722, 3
  store i64 %3723, i64* %PC, align 8
  br i1 %3721, label %block_401c15, label %block_401c6b

block_40218b:                                     ; preds = %block_401c6b
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %3724 = add i64 %121, -24
  %3725 = add i64 %169, 14
  store i64 %3725, i64* %PC, align 8
  %3726 = inttoptr i64 %3724 to i64*
  %3727 = load i64, i64* %3726, align 8
  store i64 %3727, i64* %RCX, align 8, !tbaa !2428
  %3728 = add i64 %3727, 8
  %3729 = add i64 %169, 19
  store i64 %3729, i64* %PC, align 8
  %3730 = inttoptr i64 %3728 to i64*
  %3731 = load i64, i64* %3730, align 8
  %3732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %3733 = bitcast i64* %3732 to double*
  %3734 = xor i64 %3731, -9223372036854775808
  store i64 %3734, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %3735 = trunc i64 %3731 to i32
  %3736 = and i32 %3735, 255
  %3737 = tail call i32 @llvm.ctpop.i32(i32 %3736) #11
  %3738 = trunc i32 %3737 to i8
  %3739 = and i8 %3738, 1
  %3740 = xor i8 %3739, 1
  store i8 %3740, i8* %52, align 1, !tbaa !2447
  %3741 = icmp eq i64 %3734, 0
  %3742 = zext i1 %3741 to i8
  store i8 %3742, i8* %54, align 1, !tbaa !2448
  %3743 = lshr i64 %3734, 63
  %3744 = trunc i64 %3743 to i8
  store i8 %3744, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  %3745 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  store i64 %3734, i64* %3745, align 1, !tbaa !2428
  store i64 0, i64* %3732, align 1, !tbaa !2428
  %3746 = add i64 %169, 36
  store i64 %3746, i64* %PC, align 8
  %3747 = load i64, i64* %3726, align 8
  store i64 %3747, i64* %RCX, align 8, !tbaa !2428
  %3748 = add i64 %3747, 8
  %3749 = add i64 %169, 41
  store i64 %3749, i64* %PC, align 8
  %3750 = inttoptr i64 %3748 to i64*
  store i64 %3734, i64* %3750, align 8
  %3751 = load i64, i64* %RBP, align 8
  %3752 = add i64 %3751, -24
  %3753 = load i64, i64* %PC, align 8
  %3754 = add i64 %3753, 4
  store i64 %3754, i64* %PC, align 8
  %3755 = inttoptr i64 %3752 to i64*
  %3756 = load i64, i64* %3755, align 8
  store i64 %3756, i64* %RCX, align 8, !tbaa !2428
  %3757 = add i64 %3751, -52
  %3758 = add i64 %3753, 7
  store i64 %3758, i64* %PC, align 8
  %3759 = inttoptr i64 %3757 to i32*
  %3760 = load i32, i32* %3759, align 4
  %3761 = add i32 %3760, 1
  %3762 = zext i32 %3761 to i64
  store i64 %3762, i64* %RDX, align 8, !tbaa !2428
  %3763 = icmp eq i32 %3760, -1
  %3764 = icmp eq i32 %3761, 0
  %3765 = or i1 %3763, %3764
  %3766 = zext i1 %3765 to i8
  store i8 %3766, i8* %51, align 1, !tbaa !2433
  %3767 = and i32 %3761, 255
  %3768 = tail call i32 @llvm.ctpop.i32(i32 %3767) #11
  %3769 = trunc i32 %3768 to i8
  %3770 = and i8 %3769, 1
  %3771 = xor i8 %3770, 1
  store i8 %3771, i8* %52, align 1, !tbaa !2447
  %3772 = xor i32 %3760, %3761
  %3773 = lshr i32 %3772, 4
  %3774 = trunc i32 %3773 to i8
  %3775 = and i8 %3774, 1
  store i8 %3775, i8* %53, align 1, !tbaa !2451
  %3776 = zext i1 %3764 to i8
  store i8 %3776, i8* %54, align 1, !tbaa !2448
  %3777 = lshr i32 %3761, 31
  %3778 = trunc i32 %3777 to i8
  store i8 %3778, i8* %55, align 1, !tbaa !2449
  %3779 = lshr i32 %3760, 31
  %3780 = xor i32 %3777, %3779
  %3781 = add nuw nsw i32 %3780, %3777
  %3782 = icmp eq i32 %3781, 2
  %3783 = zext i1 %3782 to i8
  store i8 %3783, i8* %56, align 1, !tbaa !2450
  %3784 = sext i32 %3761 to i64
  store i64 %3784, i64* %RSI, align 8, !tbaa !2428
  %3785 = shl nsw i64 %3784, 3
  %3786 = add i64 %3785, %3756
  %3787 = add i64 %3753, 18
  store i64 %3787, i64* %PC, align 8
  %3788 = inttoptr i64 %3786 to i64*
  %3789 = load i64, i64* %3788, align 8
  %3790 = load i64, i64* %RAX, align 8
  %3791 = xor i64 %3790, %3789
  store i64 %3791, i64* %RCX, align 8, !tbaa !2428
  store i8 0, i8* %51, align 1, !tbaa !2433
  %3792 = trunc i64 %3791 to i32
  %3793 = and i32 %3792, 255
  %3794 = tail call i32 @llvm.ctpop.i32(i32 %3793) #11
  %3795 = trunc i32 %3794 to i8
  %3796 = and i8 %3795, 1
  %3797 = xor i8 %3796, 1
  store i8 %3797, i8* %52, align 1, !tbaa !2447
  %3798 = icmp eq i64 %3791, 0
  %3799 = zext i1 %3798 to i8
  store i8 %3799, i8* %54, align 1, !tbaa !2448
  %3800 = lshr i64 %3791, 63
  %3801 = trunc i64 %3800 to i8
  store i8 %3801, i8* %55, align 1, !tbaa !2449
  store i8 0, i8* %56, align 1, !tbaa !2450
  store i8 0, i8* %53, align 1, !tbaa !2451
  store i64 %3791, i64* %3745, align 1, !tbaa !2428
  store i64 0, i64* %3732, align 1, !tbaa !2428
  %3802 = add i64 %3753, 35
  store i64 %3802, i64* %PC, align 8
  %3803 = load i64, i64* %3755, align 8
  store i64 %3803, i64* %RAX, align 8, !tbaa !2428
  %3804 = add i64 %3753, 38
  store i64 %3804, i64* %PC, align 8
  %3805 = load i32, i32* %3759, align 4
  %3806 = add i32 %3805, 1
  %3807 = zext i32 %3806 to i64
  store i64 %3807, i64* %RDX, align 8, !tbaa !2428
  %3808 = icmp eq i32 %3805, -1
  %3809 = icmp eq i32 %3806, 0
  %3810 = or i1 %3808, %3809
  %3811 = zext i1 %3810 to i8
  store i8 %3811, i8* %51, align 1, !tbaa !2433
  %3812 = and i32 %3806, 255
  %3813 = tail call i32 @llvm.ctpop.i32(i32 %3812) #11
  %3814 = trunc i32 %3813 to i8
  %3815 = and i8 %3814, 1
  %3816 = xor i8 %3815, 1
  store i8 %3816, i8* %52, align 1, !tbaa !2447
  %3817 = xor i32 %3805, %3806
  %3818 = lshr i32 %3817, 4
  %3819 = trunc i32 %3818 to i8
  %3820 = and i8 %3819, 1
  store i8 %3820, i8* %53, align 1, !tbaa !2451
  %3821 = zext i1 %3809 to i8
  store i8 %3821, i8* %54, align 1, !tbaa !2448
  %3822 = lshr i32 %3806, 31
  %3823 = trunc i32 %3822 to i8
  store i8 %3823, i8* %55, align 1, !tbaa !2449
  %3824 = lshr i32 %3805, 31
  %3825 = xor i32 %3822, %3824
  %3826 = add nuw nsw i32 %3825, %3822
  %3827 = icmp eq i32 %3826, 2
  %3828 = zext i1 %3827 to i8
  store i8 %3828, i8* %56, align 1, !tbaa !2450
  %3829 = sext i32 %3806 to i64
  store i64 %3829, i64* %RCX, align 8, !tbaa !2428
  %3830 = shl nsw i64 %3829, 3
  %3831 = add i64 %3830, %3803
  %3832 = add i64 %3753, 49
  store i64 %3832, i64* %PC, align 8
  %3833 = inttoptr i64 %3831 to i64*
  store i64 %3791, i64* %3833, align 8
  %3834 = load i64, i64* %RBP, align 8
  %3835 = add i64 %3834, -36
  %3836 = load i64, i64* %PC, align 8
  %3837 = add i64 %3836, 7
  store i64 %3837, i64* %PC, align 8
  %3838 = inttoptr i64 %3835 to i32*
  store i32 1, i32* %3838, align 4
  %.pre7 = load i64, i64* %PC, align 8
  br label %block_4021ec

block_401c83:                                     ; preds = %block_401c6b
  %3839 = add i64 %121, -36
  %3840 = add i64 %169, 7
  store i64 %3840, i64* %PC, align 8
  %3841 = inttoptr i64 %3839 to i32*
  store i32 0, i32* %3841, align 4
  %3842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %3843 = bitcast i64* %3842 to double*
  %3844 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  %.pre5 = load i64, i64* %PC, align 8
  br label %block_401c8a
}

; Function Attrs: noinline
define %struct.Memory* @sub_4010d0_errorcheck(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4010d0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0
  %ECX = bitcast %union.anon* %3 to i32*
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0
  %EDX = bitcast %union.anon* %4 to i32*
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0
  %ESI = bitcast %union.anon* %5 to i32*
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0
  %EDI = bitcast %union.anon* %6 to i32*
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  %RDX = getelementptr inbounds %union.anon, %union.anon* %4, i64 0, i32 0
  %RSI = getelementptr inbounds %union.anon, %union.anon* %5, i64 0, i32 0
  %RDI = getelementptr inbounds %union.anon, %union.anon* %6, i64 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2
  %10 = load i64, i64* %RBP, align 8
  %11 = add i64 %1, 1
  store i64 %11, i64* %PC, align 8
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13 = load i64, i64* %12, align 8, !tbaa !2428
  %14 = add i64 %13, -8
  %15 = inttoptr i64 %14 to i64*
  store i64 %10, i64* %15, align 8
  store i64 %14, i64* %12, align 8, !tbaa !2428
  %16 = load i64, i64* %PC, align 8
  store i64 %14, i64* %RBP, align 8, !tbaa !2428
  %17 = bitcast %union.VectorReg* %8 to i8*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 1, i32 0, i32 0, i32 0, i64 1
  %19 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %8, i64 0, i32 0, i32 0, i32 0, i64 0
  %20 = bitcast %union.VectorReg* %8 to i32*
  store i32 0, i32* %20, align 1, !tbaa !2459
  %21 = getelementptr inbounds i8, i8* %17, i64 4
  %22 = bitcast i8* %21 to i32*
  store i32 0, i32* %22, align 1, !tbaa !2459
  %23 = bitcast i64* %18 to i32*
  store i32 0, i32* %23, align 1, !tbaa !2459
  %24 = getelementptr inbounds i8, i8* %17, i64 12
  %25 = bitcast i8* %24 to i32*
  store i32 0, i32* %25, align 1, !tbaa !2459
  %26 = add i64 %13, -12
  %27 = load i32, i32* %EDI, align 4
  %28 = add i64 %16, 9
  store i64 %28, i64* %PC, align 8
  %29 = inttoptr i64 %26 to i32*
  store i32 %27, i32* %29, align 4
  %30 = load i64, i64* %RBP, align 8
  %31 = add i64 %30, -8
  %32 = load i32, i32* %ESI, align 4
  %33 = load i64, i64* %PC, align 8
  %34 = add i64 %33, 3
  store i64 %34, i64* %PC, align 8
  %35 = inttoptr i64 %31 to i32*
  store i32 %32, i32* %35, align 4
  %36 = load i64, i64* %RBP, align 8
  %37 = add i64 %36, -16
  %38 = load i64, i64* %PC, align 8
  %39 = add i64 %38, 5
  store i64 %39, i64* %PC, align 8
  %40 = bitcast [32 x %union.VectorReg]* %7 to double*
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %7, i64 0, i64 0, i32 0, i32 0, i32 0, i64 0
  %42 = load i64, i64* %41, align 1
  %43 = inttoptr i64 %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = load i64, i64* %RBP, align 8
  %45 = add i64 %44, -24
  %46 = load i64, i64* %RDX, align 8
  %47 = load i64, i64* %PC, align 8
  %48 = add i64 %47, 4
  store i64 %48, i64* %PC, align 8
  %49 = inttoptr i64 %45 to i64*
  store i64 %46, i64* %49, align 8
  %50 = load i64, i64* %RBP, align 8
  %51 = add i64 %50, -32
  %52 = load i64, i64* %PC, align 8
  %53 = add i64 %52, 7
  store i64 %53, i64* %PC, align 8
  %54 = inttoptr i64 %51 to i32*
  store i32 0, i32* %54, align 4
  %55 = load i64, i64* %RBP, align 8
  %56 = add i64 %55, -40
  %57 = load i64, i64* %PC, align 8
  %58 = add i64 %57, 5
  store i64 %58, i64* %PC, align 8
  %59 = bitcast %union.VectorReg* %8 to double*
  %60 = load i64, i64* %19, align 1
  %61 = inttoptr i64 %56 to i64*
  store i64 %60, i64* %61, align 8
  %62 = load i64, i64* %RBP, align 8
  %63 = add i64 %62, -4
  %64 = load i64, i64* %PC, align 8
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC, align 8
  %66 = inttoptr i64 %63 to i32*
  %67 = load i32, i32* %66, align 4
  %68 = zext i32 %67 to i64
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  %69 = add i64 %62, -28
  %70 = add i64 %64, 6
  store i64 %70, i64* %PC, align 8
  %71 = inttoptr i64 %69 to i32*
  store i32 %67, i32* %71, align 4
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %73 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %78 = bitcast [32 x %union.VectorReg]* %7 to i8*
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %80 = bitcast i64* %79 to double*
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %82 = bitcast %union.VectorReg* %9 to i8*
  %83 = getelementptr inbounds i8, i8* %82, i64 4
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 2, i32 0, i32 0, i32 0, i64 1
  %85 = getelementptr inbounds i8, i8* %82, i64 12
  %86 = getelementptr inbounds %union.VectorReg, %union.VectorReg* %9, i64 0, i32 0, i32 0, i32 0, i64 0
  %87 = bitcast [32 x %union.VectorReg]* %7 to i32*
  %88 = getelementptr inbounds i8, i8* %78, i64 4
  %89 = bitcast i8* %88 to i32*
  %90 = bitcast i64* %79 to i32*
  %91 = getelementptr inbounds i8, i8* %78, i64 12
  %92 = bitcast i8* %91 to i32*
  %.pre = load i64, i64* %PC, align 8
  br label %block_4010f8

block_4010f8:                                     ; preds = %block_401192, %block_4010d0
  %93 = phi i64 [ %.pre, %block_4010d0 ], [ %171, %block_401192 ]
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4010d0 ], [ %356, %block_401192 ]
  %94 = load i64, i64* %RBP, align 8
  %95 = add i64 %94, -28
  %96 = add i64 %93, 3
  store i64 %96, i64* %PC, align 8
  %97 = inttoptr i64 %95 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = zext i32 %98 to i64
  store i64 %99, i64* %RAX, align 8, !tbaa !2428
  %100 = add i64 %94, -8
  %101 = add i64 %93, 6
  store i64 %101, i64* %PC, align 8
  %102 = inttoptr i64 %100 to i32*
  %103 = load i32, i32* %102, align 4
  %104 = sub i32 %98, %103
  %105 = icmp ult i32 %98, %103
  %106 = zext i1 %105 to i8
  store i8 %106, i8* %72, align 1, !tbaa !2433
  %107 = and i32 %104, 255
  %108 = tail call i32 @llvm.ctpop.i32(i32 %107) #11
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %73, align 1, !tbaa !2447
  %112 = xor i32 %103, %98
  %113 = xor i32 %112, %104
  %114 = lshr i32 %113, 4
  %115 = trunc i32 %114 to i8
  %116 = and i8 %115, 1
  store i8 %116, i8* %74, align 1, !tbaa !2451
  %117 = icmp eq i32 %104, 0
  %118 = zext i1 %117 to i8
  store i8 %118, i8* %75, align 1, !tbaa !2448
  %119 = lshr i32 %104, 31
  %120 = trunc i32 %119 to i8
  store i8 %120, i8* %76, align 1, !tbaa !2449
  %121 = lshr i32 %98, 31
  %122 = lshr i32 %103, 31
  %123 = xor i32 %122, %121
  %124 = xor i32 %119, %121
  %125 = add nuw nsw i32 %124, %123
  %126 = icmp eq i32 %125, 2
  %127 = zext i1 %126 to i8
  store i8 %127, i8* %77, align 1, !tbaa !2450
  %128 = icmp ne i8 %120, 0
  %129 = xor i1 %128, %126
  %.demorgan = or i1 %117, %129
  %.v = select i1 %.demorgan, i64 12, i64 178
  %130 = add i64 %93, %.v
  store i64 %130, i64* %PC, align 8, !tbaa !2428
  br i1 %.demorgan, label %block_401104, label %block_4011aa

block_401192:                                     ; preds = %block_40117d, %block_40116e
  %131 = phi i64 [ %.pre6, %block_40117d ], [ %180, %block_40116e ]
  %132 = load i64, i64* %RBP, align 8
  %133 = add i64 %132, -64
  %134 = add i64 %131, 5
  store i64 %134, i64* %PC, align 8
  %135 = inttoptr i64 %133 to i64*
  %136 = load i64, i64* %135, align 8
  store i64 %136, i64* %41, align 1, !tbaa !2452
  store double 0.000000e+00, double* %80, align 1, !tbaa !2452
  %137 = add i64 %132, -40
  %138 = add i64 %131, 10
  store i64 %138, i64* %PC, align 8
  %139 = inttoptr i64 %137 to i64*
  store i64 %136, i64* %139, align 8
  %140 = load i64, i64* %RBP, align 8
  %141 = add i64 %140, -28
  %142 = load i64, i64* %PC, align 8
  %143 = add i64 %142, 3
  store i64 %143, i64* %PC, align 8
  %144 = inttoptr i64 %141 to i32*
  %145 = load i32, i32* %144, align 4
  %146 = add i32 %145, 1
  %147 = zext i32 %146 to i64
  store i64 %147, i64* %RAX, align 8, !tbaa !2428
  %148 = icmp eq i32 %145, -1
  %149 = icmp eq i32 %146, 0
  %150 = or i1 %148, %149
  %151 = zext i1 %150 to i8
  store i8 %151, i8* %72, align 1, !tbaa !2433
  %152 = and i32 %146, 255
  %153 = tail call i32 @llvm.ctpop.i32(i32 %152) #11
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  store i8 %156, i8* %73, align 1, !tbaa !2447
  %157 = xor i32 %145, %146
  %158 = lshr i32 %157, 4
  %159 = trunc i32 %158 to i8
  %160 = and i8 %159, 1
  store i8 %160, i8* %74, align 1, !tbaa !2451
  %161 = zext i1 %149 to i8
  store i8 %161, i8* %75, align 1, !tbaa !2448
  %162 = lshr i32 %146, 31
  %163 = trunc i32 %162 to i8
  store i8 %163, i8* %76, align 1, !tbaa !2449
  %164 = lshr i32 %145, 31
  %165 = xor i32 %162, %164
  %166 = add nuw nsw i32 %165, %162
  %167 = icmp eq i32 %166, 2
  %168 = zext i1 %167 to i8
  store i8 %168, i8* %77, align 1, !tbaa !2450
  %169 = add i64 %142, 9
  store i64 %169, i64* %PC, align 8
  store i32 %146, i32* %144, align 4
  %170 = load i64, i64* %PC, align 8
  %171 = add i64 %170, -173
  store i64 %171, i64* %PC, align 8, !tbaa !2428
  br label %block_4010f8

block_40116e:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %172 = add i64 %354, -40
  %173 = add i64 %361, 5
  store i64 %173, i64* %PC, align 8
  %174 = inttoptr i64 %172 to i64*
  %175 = load i64, i64* %174, align 8
  store i64 %175, i64* %41, align 1, !tbaa !2452
  store double 0.000000e+00, double* %80, align 1, !tbaa !2452
  %176 = add i64 %354, -64
  %177 = add i64 %361, 10
  store i64 %177, i64* %PC, align 8
  %178 = inttoptr i64 %176 to i64*
  store i64 %175, i64* %178, align 8
  %179 = load i64, i64* %PC, align 8
  %180 = add i64 %179, 26
  store i64 %180, i64* %PC, align 8, !tbaa !2428
  br label %block_401192

block_4011aa:                                     ; preds = %block_4010f8
  %181 = add i64 %94, -40
  %182 = add i64 %130, 5
  store i64 %182, i64* %PC, align 8
  %183 = inttoptr i64 %181 to i64*
  %184 = load i64, i64* %183, align 8
  store i64 %184, i64* %41, align 1, !tbaa !2452
  store double 0.000000e+00, double* %80, align 1, !tbaa !2452
  %185 = add i64 %130, 6
  store i64 %185, i64* %PC, align 8
  %186 = load i64, i64* %12, align 8, !tbaa !2428
  %187 = add i64 %186, 8
  %188 = inttoptr i64 %186 to i64*
  %189 = load i64, i64* %188, align 8
  store i64 %189, i64* %RBP, align 8, !tbaa !2428
  store i64 %187, i64* %12, align 8, !tbaa !2428
  %190 = add i64 %130, 7
  store i64 %190, i64* %PC, align 8
  %191 = inttoptr i64 %187 to i64*
  %192 = load i64, i64* %191, align 8
  store i64 %192, i64* %PC, align 8, !tbaa !2428
  %193 = add i64 %186, 16
  store i64 %193, i64* %12, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40117d:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %194 = add i64 %354, -48
  %195 = add i64 %361, 5
  store i64 %195, i64* %PC, align 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 96) to i32*), align 16
  %199 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 100) to i32*), align 4
  %200 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 104) to i32*), align 8
  %201 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 108) to i32*), align 4
  store i32 %198, i32* %20, align 1, !tbaa !2475
  store i32 %199, i32* %22, align 1, !tbaa !2475
  store i32 %200, i32* %23, align 1, !tbaa !2475
  store i32 %201, i32* %25, align 1, !tbaa !2475
  %202 = load i64, i64* %19, align 1
  %203 = and i64 %202, %197
  %204 = trunc i64 %203 to i32
  %205 = lshr i64 %203, 32
  %206 = trunc i64 %205 to i32
  store i32 %204, i32* %87, align 1, !tbaa !2459
  store i32 %206, i32* %89, align 1, !tbaa !2459
  store i32 0, i32* %90, align 1, !tbaa !2459
  store i32 0, i32* %92, align 1, !tbaa !2459
  %207 = add i64 %354, -64
  %208 = add i64 %361, 21
  store i64 %208, i64* %PC, align 8
  %209 = load i64, i64* %41, align 1
  %210 = inttoptr i64 %207 to i64*
  store i64 %209, i64* %210, align 8
  %.pre6 = load i64, i64* %PC, align 8
  br label %block_401192

block_401104:                                     ; preds = %block_4010f8
  %211 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 72) to i64*), align 8
  store i64 %211, i64* %41, align 1, !tbaa !2452
  store double 0.000000e+00, double* %80, align 1, !tbaa !2452
  store i64 259200, i64* %RAX, align 8, !tbaa !2428
  %212 = add i64 %94, -32
  %213 = add i64 %130, 20
  store i64 %213, i64* %PC, align 8
  %214 = inttoptr i64 %212 to i32*
  %215 = load i32, i32* %214, align 4
  %216 = sext i32 %215 to i64
  %217 = mul nsw i64 %216, 7141
  %218 = trunc i64 %217 to i32
  %219 = add i32 %218, 54773
  %220 = zext i32 %219 to i64
  store i64 %220, i64* %RCX, align 8, !tbaa !2428
  %221 = icmp ugt i32 %218, -54774
  %222 = zext i1 %221 to i8
  store i8 %222, i8* %72, align 1, !tbaa !2433
  %223 = and i32 %219, 255
  %224 = tail call i32 @llvm.ctpop.i32(i32 %223) #11
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  store i8 %227, i8* %73, align 1, !tbaa !2447
  %228 = xor i32 %218, 16
  %229 = xor i32 %228, %219
  %230 = lshr i32 %229, 4
  %231 = trunc i32 %230 to i8
  %232 = and i8 %231, 1
  store i8 %232, i8* %74, align 1, !tbaa !2451
  %233 = icmp eq i32 %219, 0
  %234 = zext i1 %233 to i8
  store i8 %234, i8* %75, align 1, !tbaa !2448
  %235 = lshr i32 %219, 31
  %236 = trunc i32 %235 to i8
  store i8 %236, i8* %76, align 1, !tbaa !2449
  %237 = lshr i32 %218, 31
  %238 = xor i32 %235, %237
  %239 = add nuw nsw i32 %238, %235
  %240 = icmp eq i32 %239, 2
  %241 = zext i1 %240 to i8
  store i8 %241, i8* %77, align 1, !tbaa !2450
  %242 = add i64 %94, -52
  %243 = add i64 %130, 29
  store i64 %243, i64* %PC, align 8
  %244 = inttoptr i64 %242 to i32*
  store i32 259200, i32* %244, align 4
  %245 = load i32, i32* %ECX, align 4
  %246 = zext i32 %245 to i64
  %247 = load i64, i64* %PC, align 8
  store i64 %246, i64* %RAX, align 8, !tbaa !2428
  %248 = sext i32 %245 to i64
  %249 = lshr i64 %248, 32
  store i64 %249, i64* %81, align 8, !tbaa !2428
  %250 = load i64, i64* %RBP, align 8
  %251 = add i64 %250, -52
  %252 = add i64 %247, 6
  store i64 %252, i64* %PC, align 8
  %253 = inttoptr i64 %251 to i32*
  %254 = load i32, i32* %253, align 4
  %255 = zext i32 %254 to i64
  store i64 %255, i64* %RCX, align 8, !tbaa !2428
  %256 = add i64 %247, 8
  store i64 %256, i64* %PC, align 8
  %257 = sext i32 %254 to i64
  %258 = shl nuw i64 %249, 32
  %259 = or i64 %258, %246
  %260 = sdiv i64 %259, %257
  %261 = shl i64 %260, 32
  %262 = ashr exact i64 %261, 32
  %263 = icmp eq i64 %260, %262
  br i1 %263, label %266, label %264

; <label>:264:                                    ; preds = %block_401104
  %265 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %256, %struct.Memory* %MEMORY.0) #12
  %.pre1 = load i64, i64* %RBP, align 8
  %.pre2 = load i32, i32* %EDX, align 4
  %.pre3 = load i64, i64* %PC, align 8
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

; <label>:266:                                    ; preds = %block_401104
  %267 = srem i64 %259, %257
  %268 = and i64 %260, 4294967295
  store i64 %268, i64* %RAX, align 8, !tbaa !2428
  %269 = and i64 %267, 4294967295
  store i64 %269, i64* %81, align 8, !tbaa !2428
  store i8 0, i8* %72, align 1, !tbaa !2433
  store i8 0, i8* %73, align 1, !tbaa !2447
  store i8 0, i8* %74, align 1, !tbaa !2451
  store i8 0, i8* %75, align 1, !tbaa !2448
  store i8 0, i8* %76, align 1, !tbaa !2449
  store i8 0, i8* %77, align 1, !tbaa !2450
  %270 = trunc i64 %267 to i32
  br label %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit

_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit: ; preds = %266, %264
  %271 = phi i64 [ %.pre3, %264 ], [ %256, %266 ]
  %272 = phi i32 [ %.pre2, %264 ], [ %270, %266 ]
  %273 = phi i64 [ %.pre1, %264 ], [ %250, %266 ]
  %274 = phi %struct.Memory* [ %265, %264 ], [ %MEMORY.0, %266 ]
  %275 = add i64 %273, -32
  %276 = add i64 %271, 3
  store i64 %276, i64* %PC, align 8
  %277 = inttoptr i64 %275 to i32*
  store i32 %272, i32* %277, align 4
  %278 = load i32, i32* %EDX, align 4
  %279 = load i64, i64* %PC, align 8
  %280 = sitofp i32 %278 to double
  %281 = load double, double* %40, align 1
  %282 = fmul double %280, %281
  store double %282, double* %59, align 1, !tbaa !2452
  %283 = load i64, i64* %RBP, align 8
  %284 = add i64 %283, -24
  %285 = add i64 %279, 12
  store i64 %285, i64* %PC, align 8
  %286 = inttoptr i64 %284 to i64*
  %287 = load i64, i64* %286, align 8
  store i64 %287, i64* %RSI, align 8, !tbaa !2428
  %288 = add i64 %283, -28
  %289 = add i64 %279, 16
  store i64 %289, i64* %PC, align 8
  %290 = inttoptr i64 %288 to i32*
  %291 = load i32, i32* %290, align 4
  %292 = sext i32 %291 to i64
  store i64 %292, i64* %RDI, align 8, !tbaa !2428
  %293 = shl nsw i64 %292, 3
  %294 = add i64 %293, %287
  %295 = add i64 %279, 21
  store i64 %295, i64* %PC, align 8
  %296 = inttoptr i64 %294 to double*
  %297 = load double, double* %296, align 8
  store double %297, double* %40, align 1, !tbaa !2452
  store double 0.000000e+00, double* %80, align 1, !tbaa !2452
  %298 = add i64 %283, -16
  %299 = add i64 %279, 26
  store i64 %299, i64* %PC, align 8
  %300 = inttoptr i64 %298 to double*
  %301 = load double, double* %300, align 8
  %302 = fmul double %297, %301
  store double %302, double* %40, align 1, !tbaa !2452
  store i64 0, i64* %79, align 1, !tbaa !2452
  %303 = fsub double %282, %302
  store double %303, double* %59, align 1, !tbaa !2452
  %304 = add i64 %283, -48
  %305 = add i64 %279, 35
  store i64 %305, i64* %PC, align 8
  %306 = inttoptr i64 %304 to double*
  store double %303, double* %306, align 8
  %307 = load i64, i64* %RBP, align 8
  %308 = add i64 %307, -40
  %309 = load i64, i64* %PC, align 8
  %310 = add i64 %309, 5
  store i64 %310, i64* %PC, align 8
  %311 = inttoptr i64 %308 to double*
  %312 = load double, double* %311, align 8
  store double %312, double* %40, align 1, !tbaa !2452
  store double 0.000000e+00, double* %80, align 1, !tbaa !2452
  %313 = add i64 %307, -48
  %314 = add i64 %309, 10
  store i64 %314, i64* %PC, align 8
  %315 = inttoptr i64 %313 to i64*
  %316 = load i64, i64* %315, align 8
  %317 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 96) to i32*), align 16
  %318 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 100) to i32*), align 4
  %319 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 104) to i32*), align 8
  %320 = load i32, i32* inttoptr (i64 add (i64 ptrtoint (%seg_404070__rodata_type* @seg_404070__rodata to i64), i64 108) to i32*), align 4
  %321 = bitcast %union.VectorReg* %9 to i32*
  store i32 %317, i32* %321, align 1, !tbaa !2475
  %322 = bitcast i8* %83 to i32*
  store i32 %318, i32* %322, align 1, !tbaa !2475
  %323 = bitcast i64* %84 to i32*
  store i32 %319, i32* %323, align 1, !tbaa !2475
  %324 = bitcast i8* %85 to i32*
  store i32 %320, i32* %324, align 1, !tbaa !2475
  %325 = load i64, i64* %86, align 1
  %326 = and i64 %325, %316
  %327 = trunc i64 %326 to i32
  %328 = lshr i64 %326, 32
  %329 = trunc i64 %328 to i32
  store i32 %327, i32* %20, align 1, !tbaa !2459
  store i32 %329, i32* %22, align 1, !tbaa !2459
  store i32 0, i32* %23, align 1, !tbaa !2459
  store i32 0, i32* %25, align 1, !tbaa !2459
  %330 = add i64 %309, 25
  store i64 %330, i64* %PC, align 8
  %331 = load double, double* %59, align 1
  %332 = fcmp uno double %312, %331
  br i1 %332, label %333, label %343

; <label>:333:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %334 = fadd double %312, %331
  %335 = bitcast double %334 to i64
  %336 = and i64 %335, 9221120237041090560
  %337 = icmp eq i64 %336, 9218868437227405312
  %338 = and i64 %335, 2251799813685247
  %339 = icmp ne i64 %338, 0
  %340 = and i1 %337, %339
  br i1 %340, label %341, label %349

; <label>:341:                                    ; preds = %333
  %342 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %330, %struct.Memory* %274) #12
  %.pre4 = load i64, i64* %PC, align 8
  %.pre5 = load i64, i64* %RBP, align 8
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:343:                                    ; preds = %_ZN12_GLOBAL__N_1L10IDIVedxeaxI2RnIjEEEP6MemoryS4_R5StateT_.exit
  %344 = fcmp ogt double %312, %331
  br i1 %344, label %349, label %345

; <label>:345:                                    ; preds = %343
  %346 = fcmp olt double %312, %331
  br i1 %346, label %349, label %347

; <label>:347:                                    ; preds = %345
  %348 = fcmp oeq double %312, %331
  br i1 %348, label %349, label %353

; <label>:349:                                    ; preds = %347, %345, %343, %333
  %350 = phi i8 [ 0, %343 ], [ 0, %345 ], [ 1, %347 ], [ 1, %333 ]
  %351 = phi i8 [ 0, %343 ], [ 0, %345 ], [ 0, %347 ], [ 1, %333 ]
  %352 = phi i8 [ 0, %343 ], [ 1, %345 ], [ 0, %347 ], [ 1, %333 ]
  store i8 %350, i8* %75, align 1, !tbaa !2432
  store i8 %351, i8* %73, align 1, !tbaa !2432
  store i8 %352, i8* %72, align 1, !tbaa !2432
  br label %353

; <label>:353:                                    ; preds = %349, %347
  store i8 0, i8* %77, align 1, !tbaa !2432
  store i8 0, i8* %76, align 1, !tbaa !2432
  store i8 0, i8* %74, align 1, !tbaa !2432
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %353, %341
  %354 = phi i64 [ %.pre5, %341 ], [ %307, %353 ]
  %355 = phi i64 [ %.pre4, %341 ], [ %330, %353 ]
  %356 = phi %struct.Memory* [ %342, %341 ], [ %274, %353 ]
  %357 = load i8, i8* %72, align 1, !tbaa !2433
  %358 = load i8, i8* %75, align 1, !tbaa !2448
  %359 = or i8 %358, %357
  %360 = icmp ne i8 %359, 0
  %.v7 = select i1 %360, i64 21, i64 6
  %361 = add i64 %355, %.v7
  store i64 %361, i64* %PC, align 8, !tbaa !2428
  br i1 %360, label %block_40117d, label %block_40116e
}

; Function Attrs: noinline
define %struct.Memory* @sub_400710__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_400710:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RAX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 1, i32 0, i32 0
  %RCX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 5, i32 0, i32 0
  %RDX = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 7, i32 0, i32 0
  %RSI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 9, i32 0, i32 0
  %RDI = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 11, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %R8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 17, i32 0, i32 0
  %R9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 19, i32 0, i32 0
  store i64 0, i64* %RBP, align 8, !tbaa !2428
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3, align 1, !tbaa !2433
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 1, i8* %4, align 1, !tbaa !2447
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 1, i8* %5, align 1, !tbaa !2448
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6, align 1, !tbaa !2449
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7, align 1, !tbaa !2450
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8, align 1, !tbaa !2451
  %9 = load i64, i64* %RDX, align 8
  store i64 %9, i64* %R9, align 8, !tbaa !2428
  %10 = add i64 %1, 6
  store i64 %10, i64* %PC, align 8
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12 = load i64, i64* %11, align 8, !tbaa !2428
  %13 = add i64 %12, 8
  %14 = inttoptr i64 %12 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %RSI, align 8, !tbaa !2428
  store i64 %13, i64* %RDX, align 8, !tbaa !2428
  %16 = and i64 %13, -16
  store i8 0, i8* %3, align 1, !tbaa !2433
  %17 = trunc i64 %13 to i32
  %18 = and i32 %17, 240
  %19 = tail call i32 @llvm.ctpop.i32(i32 %18) #11
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 1
  %22 = xor i8 %21, 1
  store i8 %22, i8* %4, align 1, !tbaa !2447
  %23 = icmp eq i64 %16, 0
  %24 = zext i1 %23 to i8
  store i8 %24, i8* %5, align 1, !tbaa !2448
  %25 = lshr i64 %13, 63
  %26 = trunc i64 %25 to i8
  store i8 %26, i8* %6, align 1, !tbaa !2449
  store i8 0, i8* %7, align 1, !tbaa !2450
  store i8 0, i8* %8, align 1, !tbaa !2451
  %27 = load i64, i64* %RAX, align 8
  %28 = add i64 %1, 14
  store i64 %28, i64* %PC, align 8
  %29 = add i64 %16, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %27, i64* %30, align 8
  %31 = load i64, i64* %PC, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC, align 8
  %33 = add i64 %16, -16
  %34 = inttoptr i64 %33 to i64*
  store i64 %29, i64* %34, align 16
  %35 = load i64, i64* %PC, align 8
  store i64 ptrtoint (void ()* @callback_sub_404060___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @callback_sub_403ff0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %36 = add i64 %35, 27
  %37 = add i64 %16, -24
  %38 = inttoptr i64 %37 to i64*
  store i64 %36, i64* %38, align 8
  store i64 %37, i64* %11, align 8, !tbaa !2428
  %39 = load i64, i64* getelementptr inbounds (%seg_604ff0__got_type, %seg_604ff0__got_type* @seg_604ff0__got, i64 0, i32 0), align 8
  store i64 %39, i64* %PC, align 8, !tbaa !2428
  %40 = tail call fastcc %struct.Memory* @ext_605120___libc_start_main(%struct.State* nonnull %0, %struct.Memory* %2)
  %41 = load i64, i64* %PC, align 8
  %42 = add i64 %41, 1
  store i64 %42, i64* %PC, align 8
  %43 = tail call %struct.Memory* @__remill_error(%struct.State* nonnull %0, i64 %42, %struct.Memory* %40)
  ret %struct.Memory* %43
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007f0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #7 {
block_4007f0:
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %RBP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 15, i32 0, i32 0
  %3 = load i64, i64* %RBP, align 8
  %4 = add i64 %1, 1
  store i64 %4, i64* %PC, align 8
  %5 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6 = load i64, i64* %5, align 8, !tbaa !2428
  %7 = add i64 %6, -8
  %8 = inttoptr i64 %7 to i64*
  store i64 %3, i64* %8, align 8
  store i64 %7, i64* %5, align 8, !tbaa !2428
  %9 = load i64, i64* %PC, align 8
  store i64 %7, i64* %RBP, align 8, !tbaa !2428
  %10 = add i64 %9, 4
  store i64 %10, i64* %PC, align 8
  %11 = load i64, i64* %8, align 8
  store i64 %11, i64* %RBP, align 8, !tbaa !2428
  store i64 %6, i64* %5, align 8, !tbaa !2428
  %12 = add i64 %9, -113
  store i64 %12, i64* %PC, align 8, !tbaa !2428
  %13 = tail call %struct.Memory* @sub_400780_register_tm_clones(%struct.State* nonnull %0, i64 %12, %struct.Memory* %2)
  ret %struct.Memory* %13
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #6

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4007f0_frame_dummy() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4007f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @1, void ()** nonnull @2) #11
  ret void
}

define internal %struct.Memory* @callback_sub_4007f0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4007f0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4007c0___do_global_dtors_aux() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4007c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @3, void ()** nonnull @2) #11
  ret void
}

define internal %struct.Memory* @callback_sub_4007c0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4007c0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_6050f8_atan(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #9 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = bitcast %union.VectorReg* %4 to double*
  %6 = load double, double* %5, align 8
  %7 = load i64, i64* %RSP, align 8
  %8 = inttoptr i64 %7 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %PC, align 8
  %10 = add i64 %7, 8
  store i64 %10, i64* %RSP, align 8
  %11 = tail call double @atan(double %6)
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 2
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 3
  %15 = bitcast i64* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 24, i32 8, i1 false)
  store double %11, double* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_6050b8_cos(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #9 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = bitcast %union.VectorReg* %4 to double*
  %6 = load double, double* %5, align 8
  %7 = load i64, i64* %RSP, align 8
  %8 = inttoptr i64 %7 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %PC, align 8
  %10 = add i64 %7, 8
  store i64 %10, i64* %RSP, align 8
  %11 = tail call double @cos(double %6)
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 2
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 3
  %15 = bitcast i64* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 24, i32 8, i1 false)
  store double %11, double* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_4006f0_sin(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #9 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = bitcast %union.VectorReg* %4 to double*
  %6 = load double, double* %5, align 8
  %7 = load i64, i64* %RSP, align 8
  %8 = inttoptr i64 %7 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %PC, align 8
  %10 = add i64 %7, 8
  store i64 %10, i64* %RSP, align 8
  %11 = tail call double @sin(double %6)
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 2
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 3
  %15 = bitcast i64* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 24, i32 8, i1 false)
  store double %11, double* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_605128_memcpy(%struct.State*, %struct.Memory*) unnamed_addr #6 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memcpy to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6050a0_printf(%struct.State*, %struct.Memory*) unnamed_addr #6 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_400670_abort(%struct.State*, %struct.Memory*) unnamed_addr #6 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 ()* @abort to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_6050e8_free(%struct.State*, %struct.Memory*) unnamed_addr #6 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64)* @free to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_605110_memset(%struct.State*, %struct.Memory*) unnamed_addr #6 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64)* @memset to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: alwaysinline inlinehint
define %struct.Memory* @ext_605140_sqrt(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) local_unnamed_addr #9 {
  %PC = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1, i64* %PC, align 8
  %RSP = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0
  %5 = bitcast %union.VectorReg* %4 to double*
  %6 = load double, double* %5, align 8
  %7 = load i64, i64* %RSP, align 8
  %8 = inttoptr i64 %7 to i64*
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %PC, align 8
  %10 = add i64 %7, 8
  store i64 %10, i64* %RSP, align 8
  %11 = tail call double @sqrt(double %6)
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 1
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 2
  %14 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 1, i64 0, i32 0, i32 0, i32 0, i64 3
  %15 = bitcast i64* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 24, i32 8, i1 false)
  store double %11, double* %5, align 8
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_4006e0_memalign(%struct.State*, %struct.Memory*) unnamed_addr #6 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @memalign to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_4006a0_gettimeofday(%struct.State*, %struct.Memory*) unnamed_addr #6 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_404060___libc_csu_fini() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404060;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @4, void ()** nonnull @2) #11
  ret void
}

define internal %struct.Memory* @callback_sub_404060___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404060___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_403ff0___libc_csu_init() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x403ff0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @5, void ()** nonnull @2) #11
  ret void
}

define internal %struct.Memory* @callback_sub_403ff0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_403ff0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400800;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @6, void ()** nonnull @2) #11
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400800_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: noinline
define internal fastcc %struct.Memory* @ext_605120___libc_start_main(%struct.State*, %struct.Memory*) unnamed_addr #6 {
  %3 = tail call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %1)
  ret %struct.Memory* %3
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @errorcheck() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x4010d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @7, void ()** nonnull @2) #11
  ret void
}

define internal %struct.Memory* @errorcheck_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_4010d0_errorcheck(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x404064;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @8, void ()** nonnull @2) #11
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_404064__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @get_time() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400de0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @9, void ()** nonnull @2) #11
  ret void
}

define internal %struct.Memory* @get_time_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400de0_get_time(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @makewt() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400e30;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @10, void ()** nonnull @2) #11
  ret void
}

define internal %struct.Memory* @makewt_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400e30_makewt(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400638;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @11, void ()** nonnull @2) #11
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400638__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @cdft() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x401030;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @12, void ()** nonnull @2) #11
  ret void
}

define internal %struct.Memory* @cdft_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_401030_cdft(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @putdata() local_unnamed_addr #8 {
  tail call void asm sideeffect "pushq $0;pushq $$0x400fb0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** nonnull @13, void ()** nonnull @2) #11
  ret void
}

define internal %struct.Memory* @putdata_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0, align 1
  br i1 %4, label %__mcsema_early_init.exit, label %5

; <label>:5:                                      ; preds = %3
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %5
  %6 = tail call %struct.Memory* @sub_400fb0_putdata(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %6
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0, align 1
  br i1 %1, label %__mcsema_early_init.exit, label %2

; <label>:2:                                      ; preds = %0
  store volatile i1 true, i1* @0, align 1
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %0, %2
  tail call void @callback_sub_403ff0___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  tail call void @callback_sub_404060___libc_csu_fini()
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #10

attributes #0 = { nounwind readnone }
attributes #1 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline }
attributes #7 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { naked nobuiltin noinline }
attributes #9 = { alwaysinline inlinehint "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { argmemonly nounwind }
attributes #11 = { nounwind }
attributes #12 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2430, !2430, i64 0}
!2433 = !{!2434, !2430, i64 2065}
!2434 = !{!"_ZTS5State", !2430, i64 16, !2435, i64 2064, !2430, i64 2080, !2436, i64 2088, !2438, i64 2112, !2440, i64 2208, !2441, i64 2480, !2442, i64 2608, !2443, i64 2736, !2430, i64 2760, !2430, i64 2768, !2444, i64 3280}
!2435 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2436 = !{!"_ZTS8Segments", !2437, i64 0, !2430, i64 2, !2437, i64 4, !2430, i64 6, !2437, i64 8, !2430, i64 10, !2437, i64 12, !2430, i64 14, !2437, i64 16, !2430, i64 18, !2437, i64 20, !2430, i64 22}
!2437 = !{!"short", !2430, i64 0}
!2438 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2439, i64 8, !2429, i64 16, !2439, i64 24, !2429, i64 32, !2439, i64 40, !2429, i64 48, !2439, i64 56, !2429, i64 64, !2439, i64 72, !2429, i64 80, !2439, i64 88}
!2439 = !{!"_ZTS3Reg", !2430, i64 0}
!2440 = !{!"_ZTS3GPR", !2429, i64 0, !2439, i64 8, !2429, i64 16, !2439, i64 24, !2429, i64 32, !2439, i64 40, !2429, i64 48, !2439, i64 56, !2429, i64 64, !2439, i64 72, !2429, i64 80, !2439, i64 88, !2429, i64 96, !2439, i64 104, !2429, i64 112, !2439, i64 120, !2429, i64 128, !2439, i64 136, !2429, i64 144, !2439, i64 152, !2429, i64 160, !2439, i64 168, !2429, i64 176, !2439, i64 184, !2429, i64 192, !2439, i64 200, !2429, i64 208, !2439, i64 216, !2429, i64 224, !2439, i64 232, !2429, i64 240, !2439, i64 248, !2429, i64 256, !2439, i64 264}
!2441 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2442 = !{!"_ZTS3MMX", !2430, i64 0}
!2443 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2444 = !{!"_ZTS13SegmentCaches", !2445, i64 0, !2445, i64 16, !2445, i64 32, !2445, i64 48, !2445, i64 64, !2445, i64 80}
!2445 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2446, i64 8, !2446, i64 12}
!2446 = !{!"int", !2430, i64 0}
!2447 = !{!2434, !2430, i64 2067}
!2448 = !{!2434, !2430, i64 2071}
!2449 = !{!2434, !2430, i64 2073}
!2450 = !{!2434, !2430, i64 2077}
!2451 = !{!2434, !2430, i64 2069}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"double", !2430, i64 0}
!2454 = !{!2455}
!2455 = distinct !{!2455, !2456, !"ext_6050f8_atan: argument 0"}
!2456 = distinct !{!2456, !"ext_6050f8_atan"}
!2457 = !{!2458}
!2458 = distinct !{!2458, !2456, !"ext_6050f8_atan: argument 1"}
!2459 = !{!2446, !2446, i64 0}
!2460 = !{!2461}
!2461 = distinct !{!2461, !2462, !"ext_6050b8_cos: argument 0"}
!2462 = distinct !{!2462, !"ext_6050b8_cos"}
!2463 = !{!2464}
!2464 = distinct !{!2464, !2462, !"ext_6050b8_cos: argument 1"}
!2465 = !{!2466}
!2466 = distinct !{!2466, !2467, !"ext_6050b8_cos: argument 0"}
!2467 = distinct !{!2467, !"ext_6050b8_cos"}
!2468 = !{!2469}
!2469 = distinct !{!2469, !2467, !"ext_6050b8_cos: argument 1"}
!2470 = !{!2471}
!2471 = distinct !{!2471, !2472, !"ext_4006f0_sin: argument 0"}
!2472 = distinct !{!2472, !"ext_4006f0_sin"}
!2473 = !{!2474}
!2474 = distinct !{!2474, !2472, !"ext_4006f0_sin: argument 1"}
!2475 = !{!2476, !2476, i64 0}
!2476 = !{!"float", !2430, i64 0}
!2477 = !{!2478}
!2478 = distinct !{!2478, !2479, !"ext_605140_sqrt: argument 0"}
!2479 = distinct !{!2479, !"ext_605140_sqrt"}
!2480 = !{!2481}
!2481 = distinct !{!2481, !2479, !"ext_605140_sqrt: argument 1"}
