; ModuleID = '../binary/test.mcsema.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_4003e0__init_type = type <{ [23 x i8] }>
%seg_400400__plt_type = type <{ [32 x i8] }>
%seg_400420__text_type = type <{ [3890 x i8] }>
%seg_401354__fini_type = type <{ [9 x i8] }>
%seg_401360__rodata_type = type <{ [4 x i8], [18 x i8], [19 x i8], [19 x i8], [4 x i8] }>
%seg_4013a0__eh_frame_hdr_type = type <{ [116 x i8] }>
%seg_401418__eh_frame_type = type <{ [448 x i8] }>
%seg_601df0__init_array_type = type <{ i64, i64 }>
%seg_601ff0__got_type = type <{ i64, i64 }>
%seg_602000__got_plt_type = type <{ [24 x i8], i64 }>
%seg_602020__data_type = type <{ [16 x i8] }>
%__bss_start_type = type <{ [16 x i8] }>
%fixed_type = type <{ [16 x i8] }>
%imb_type = type <{ [6724 x i8] }>
%n_type = type <{ [12 x i8] }>
%p_type = type <{ [26624 x i8] }>
%imr_type = type <{ [6736 x i8] }>
%rmr_type = type <{ [6736 x i8] }>
%z_type = type <{ [2064 x i8] }>
%puzzl_type = type <{ [2048 x i8] }>
%rmb_type = type <{ [6724 x i8] }>
%zi_type = type <{ [12 x i8] }>
%cellspace_type = type <{ [152 x i8] }>
%seed_type = type <{ [8 x i8] }>
%movesdone_type = type <{ [16 x i8] }>
%piecemax_type = type <{ [64 x i8] }>
%sortlist_type = type <{ [20004 x i8] }>
%value_type = type <{ [4 x i8] }>
%top_type = type <{ [4 x i8] }>
%floated_type = type <{ [4 x i8] }>
%pctr_type = type <{ [4 x i8] }>
%zr_type = type <{ [12 x i8] }>
%ima_type = type <{ [6724 x i8] }>
%littlest_type = type <{ [12 x i8] }>
%e_type = type <{ [1040 x i8] }>
%freelist_type = type <{ [16 x i8] }>
%w_type = type <{ [2064 x i8] }>
%permarray_type = type <{ [44 x i8] }>
%biggest_type = type <{ [4 x i8] }>
%rma_type = type <{ [6724 x i8] }>
%kount_type = type <{ [4 x i8] }>
%tree_type = type <{ [8 x i8] }>
%stack_type = type <{ [16 x i8] }>
%piececount_type = type <{ [16 x i8] }>
%class_type = type <{ [56 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_4003e0__init = internal constant %seg_4003e0__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\0D\1C \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400400__plt = internal constant %seg_400400__plt_type <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\02\1C \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400420__text = internal constant %seg_400420__text_type <{ [3890 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0P\13@\00H\C7\C1\E0\12@\00H\C7\C7\A0\12@\00\FF\15\A6\1B \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B80 `\00H=0 `\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF0 `\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE0 `\00UH\81\EE0 `\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF0 `\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=Y\1B \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05G\1B \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\C7\04%8\02a\00\03$\01\00]\C3fffff.\0F\1F\84\00\00\00\00\00UH\89\E5Hi\04%8\02a\00\1D\05\00\00H\05\196\00\00H%\FF\FF\00\00H\89\04%8\02a\00H\8B\04%8\02a\00\89\C1\89\C8]\C3fffff.\0F\1F\84\00\00\00\00\00UH\89\E5\89}\F8\89u\F4\C7E\F0\00\00\00\00\8BE\F0HcM\F8;\04\8DP\02a\00\0F\8F^\00\00\00H\B8\A0:`\00\00\00\00\00HcM\F8H\C1\E1\0BH\01\C8HcM\F0\83<\88\00\0F\84(\00\00\00\8BE\F4\03E\F0Hc\C8\83<\8DP\DF`\00\00\0F\84\0C\00\00\00\C7E\FC\00\00\00\00\E9\1F\00\00\00\E9\00\00\00\00\E9\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\8E\FF\FF\FF\C7E\FC\01\00\00\00\8BE\FC]\C3\90UH\89\E5\89}\F8\89u\F4\C7E\F0\00\00\00\00\8BE\F0HcM\F8;\04\8DP\02a\00\0F\8FJ\00\00\00H\B8\A0:`\00\00\00\00\00HcM\F8H\C1\E1\0BH\01\C8HcM\F0\83<\88\00\0F\84\14\00\00\00\8BE\F4\03E\F0Hc\C8\C7\04\8DP\DF`\00\01\00\00\00\E9\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\A2\FF\FF\FFHcE\F8Hc\04\85\F0\91a\00\8B\0C\85\E0\91a\00\83\E9\01HcE\F8Hc\04\85\F0\91a\00\89\0C\85\E0\91a\00\8BM\F4\89M\F0\81}\F0\FF\01\00\00\0F\8F0\00\00\00HcE\F0\83<\85P\DF`\00\00\0F\85\0B\00\00\00\8BE\F0\89E\FC\E9\1A\00\00\00\E9\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\C3\FF\FF\FF\C7E\FC\00\00\00\00\8BE\FC]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5\89}\FC\89u\F8\C7E\F4\00\00\00\00\8BE\F4HcM\FC;\04\8DP\02a\00\0F\8FJ\00\00\00H\B8\A0:`\00\00\00\00\00HcM\FCH\C1\E1\0BH\01\C8HcM\F4\83<\88\00\0F\84\14\00\00\00\8BE\F8\03E\F4Hc\C8\C7\04\8DP\DF`\00\00\00\00\00\E9\00\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\A2\FF\FF\FFHcE\FCHc\04\85\F0\91a\00\8B\0C\85\E0\91a\00\83\C1\01HcE\FCHc\04\85\F0\91a\00\89\0C\85\E0\91a\00]\C3f\0F\1FD\00\00UH\89\E5H\83\EC\10\89}\F8\8B<%\C4\91a\00\83\C7\01\89<%\C4\91a\00\C7E\F4\00\00\00\00\83}\F4\0C\0F\8F\8B\00\00\00HcE\F4Hc\04\85\F0\91a\00\83<\85\E0\91a\00\00\0F\84^\00\00\00\8B}\F4\8Bu\F8\E8\8E\FD\FF\FF\83\F8\00\0F\84E\00\00\00\8B}\F4\8Bu\F8\E8\0A\FE\FF\FF\89E\F0\8B}\F0\E8\8F\FF\FF\FF\83\F8\00\0F\85\0A\00\00\00\83}\F0\00\0F\85\0C\00\00\00\C7E\FC\01\00\00\00\E9/\00\00\00\8B}\F4\8Bu\F8\E8\C5\FE\FF\FF\E9\00\00\00\00\E9\00\00\00\00\E9\00\00\00\00\8BE\F4\83\C0\01\89E\F4\E9k\FF\FF\FF\C7E\FC\00\00\00\00\8BE\FCH\83\C4\10]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC0\C7E\F0\00\00\00\00\81}\F0\FF\01\00\00\0F\8F\1D\00\00\00HcE\F0\C7\04\85P\DF`\00\01\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\D6\FF\FF\FF\C7E\FC\01\00\00\00\83}\FC\05\0F\8Fw\00\00\00\C7E\F8\01\00\00\00\83}\F8\05\0F\8FS\00\00\00\C7E\F4\01\00\00\00\83}\F4\05\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5P\DF`\00\00\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7E\FC\00\00\00\00\83}\FC\0C\0F\8FU\00\00\00\C7E\F0\00\00\00\00\81}\F0\FF\01\00\00\0F\8F.\00\00\00H\B8\A0:`\00\00\00\00\00HcM\FCH\C1\E1\0BH\01\C8HcM\F0\C7\04\88\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\C5\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\A1\FF\FF\FF\C7E\FC\00\00\00\00\83}\FC\03\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\01\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\00\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0:`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\F0\91a\00\00\00\00\00\C7\04%P\02a\00\0B\00\00\00\C7E\FC\00\00\00\00\83}\FC\01\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\00\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\03\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0B`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\F4\91a\00\00\00\00\00\C7\04%T\02a\00\C1\00\00\00\C7E\FC\00\00\00\00\83}\FC\00\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\03\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\01\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0J`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\F8\91a\00\00\00\00\00\C7\04%X\02a\00X\00\00\00\C7E\FC\00\00\00\00\83}\FC\01\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\03\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\00\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0R`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\FC\91a\00\00\00\00\00\C7\04%\5C\02a\00\19\00\00\00\C7E\FC\00\00\00\00\83}\FC\03\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\00\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\01\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0Z`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\00\92a\00\00\00\00\00\C7\04%`\02a\00C\00\00\00\C7E\FC\00\00\00\00\83}\FC\00\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\01\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\03\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0b`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\04\92a\00\00\00\00\00\C7\04%d\02a\00\C8\00\00\00\C7E\FC\00\00\00\00\83}\FC\02\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\00\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\00\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0j`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\08\92a\00\01\00\00\00\C7\04%h\02a\00\02\00\00\00\C7E\FC\00\00\00\00\83}\FC\00\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\02\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\00\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0r`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\0C\92a\00\01\00\00\00\C7\04%l\02a\00\10\00\00\00\C7E\FC\00\00\00\00\83}\FC\00\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\00\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\02\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0z`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\10\92a\00\01\00\00\00\C7\04%p\02a\00\80\00\00\00\C7E\FC\00\00\00\00\83}\FC\01\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\01\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\00\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0\82`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\14\92a\00\02\00\00\00\C7\04%t\02a\00\09\00\00\00\C7E\FC\00\00\00\00\83}\FC\01\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\00\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\01\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0\8A`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\18\92a\00\02\00\00\00\C7\04%x\02a\00A\00\00\00\C7E\FC\00\00\00\00\83}\FC\00\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\01\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\01\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0\92`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\1C\92a\00\02\00\00\00\C7\04%|\02a\00H\00\00\00\C7E\FC\00\00\00\00\83}\FC\01\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\01\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\01\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0\9A`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF1\FF\C7\04% \92a\00\03\00\00\00\C7\04%\80\02a\00I\00\00\00\C7\04%\E0\91a\00\0D\00\00\00\C7\04%\E4\91a\00\03\00\00\00\C7\04%\E8\91a\00\01\00\00\00\C7\04%\EC\91a\00\01\00\00\00\C7E\F0I\00\00\00\C7\04%\C4\91a\00\00\00\00\00\8Bu\F0\E8\9B\F3\FF\FF\83\F8\00\0F\84\16\00\00\001\FF\8Bu\F0\E8\18\F4\FF\FF\89\04%\94:`\00\E9\14\00\00\00H\BFd\13@\00\00\00\00\00\B0\00\E8\0B\F2\FF\FF\89E\EC\8B<%\94:`\00\E8|\F5\FF\FF\83\F8\00\0F\85\19\00\00\00H\BFv\13@\00\00\00\00\00\B0\00\E8\E2\F1\FF\FF\89E\E8\E9*\00\00\00\81<%\C4\91a\00\D5\07\00\00\0F\84\14\00\00\00H\BF\89\13@\00\00\00\00\00\B0\00\E8\B8\F1\FF\FF\89E\E4\E9\00\00\00\00H\BF\9C\13@\00\00\00\00\00\8B4%\94:`\00\B0\00\E8\98\F1\FF\FFH\BF\9C\13@\00\00\00\00\00\8B4%\C4\91a\00\89E\E0\B0\00\E8}\F1\FF\FF\89E\DCH\83\C40]\C3\0F\1F@\00UH\89\E5H\83\EC\10\C7E\FC\00\00\00\00\C7E\F8\00\00\00\00\83}\F8d\0F\8D\13\00\00\00\E8\9B\F5\FF\FF\8BE\F8\83\C0\01\89E\F8\E9\E3\FF\FF\FF1\C0H\83\C4\10]\C3\0F\1FD\00\00AWAVI\89\D7AUATL\8D%\FE\0A \00UH\8D-\FE\0A \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\CF\F0\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_401354__fini = internal constant %seg_401354__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_401360__rodata = internal constant %seg_401360__rodata_type <{ [4 x i8] c"\01\00\02\00", [18 x i8] c"Error1 in Puzzle\0A\00", [19 x i8] c"Error2 in Puzzle.\0A\00", [19 x i8] c"Error3 in Puzzle.\0A\00", [4 x i8] c"%d\0A\00" }>
@seg_4013a0__eh_frame_hdr = internal constant %seg_4013a0__eh_frame_hdr_type <{ [116 x i8] c"\01\1B\03;t\00\00\00\0D\00\00\00`\F0\FF\FF\D0\00\00\00\80\F0\FF\FF\90\00\00\00\B0\F0\FF\FF\BC\00\00\00p\F1\FF\FF\F8\00\00\00\90\F1\FF\FF\14\01\00\00\D0\F1\FF\FF0\01\00\00`\F2\FF\FFL\01\00\00P\F3\FF\FFh\01\00\00\F0\F3\FF\FF\84\01\00\00\C0\F4\FF\FF\A0\01\00\00\00\FF\FF\FF\BC\01\00\00@\FF\FF\FF\D8\01\00\00\B0\FF\FF\FF \02\00\00" }>
@seg_401418__eh_frame = internal constant %seg_401418__eh_frame_type <{ [448 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\E8\EF\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\EC\EF\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00\88\EF\FF\FF \00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00p\F0\FF\FF\12\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00t\F0\FF\FF2\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00\98\F0\FF\FF\8F\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00\0C\F1\FF\FF\E7\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00\E0\F1\FF\FF\9A\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00d\F2\FF\FF\C8\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\01\00\00\18\F3\FF\FF<\0A\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\01\00\00<\FD\FF\FF;\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00D\00\00\008\01\00\00`\FD\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\80\01\00\00\88\FD\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_601df0__init_array = internal global %seg_601df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400500_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004d0___do_global_dtors_aux to i64) }>
@seg_601ff0__got = internal global %seg_601ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_602000__got_plt = internal global %seg_602000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64) }>
@seg_602020__data = internal global %seg_602020__data_type zeroinitializer
@__bss_start = global %__bss_start_type zeroinitializer
@fixed = global %fixed_type zeroinitializer
@imb = global %imb_type zeroinitializer
@n = global %n_type zeroinitializer
@p = global %p_type zeroinitializer
@imr = global %imr_type zeroinitializer
@rmr = global %rmr_type zeroinitializer
@z = global %z_type zeroinitializer
@puzzl = global %puzzl_type zeroinitializer
@rmb = global %rmb_type zeroinitializer
@zi = global %zi_type zeroinitializer
@cellspace = global %cellspace_type zeroinitializer
@seed = global %seed_type zeroinitializer
@movesdone = global %movesdone_type zeroinitializer
@piecemax = global %piecemax_type zeroinitializer
@sortlist = global %sortlist_type zeroinitializer
@value = global %value_type zeroinitializer
@top = global %top_type zeroinitializer
@floated = global %floated_type zeroinitializer
@pctr = global %pctr_type zeroinitializer
@zr = global %zr_type zeroinitializer
@ima = global %ima_type zeroinitializer
@littlest = global %littlest_type zeroinitializer
@e = global %e_type zeroinitializer
@freelist = global %freelist_type zeroinitializer
@w = global %w_type zeroinitializer
@permarray = global %permarray_type zeroinitializer
@biggest = global %biggest_type zeroinitializer
@rma = global %rma_type zeroinitializer
@kount = global %kount_type zeroinitializer
@tree = global %tree_type zeroinitializer
@stack = global %stack_type zeroinitializer
@piececount = global %piececount_type zeroinitializer
@class = global %class_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400500_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004d0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401350___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4012e0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Remove_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Puzzle_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Place_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Trial_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Initrand_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Fit_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Rand_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_400570_Fit(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400570:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ESI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 8
  %39 = load i32, i32* %EDI
  %40 = zext i32 %39 to i64
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %38 to i32*
  store i32 %39, i32* %43
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 12
  %46 = load i32, i32* %ESI
  %47 = zext i32 %46 to i64
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 3
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %45 to i32*
  store i32 %46, i32* %50
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 16
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 7
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i32*
  store i32 0, i32* %55
  br label %block_400581

block_4005db:                                     ; preds = %block_4005b8
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 5
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 5
  store i64 %59, i64* %PC
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %57, i64* %60, align 8, !tbaa !2428
  br label %block_4005e0

block_400595:                                     ; preds = %block_400581
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 10
  store i64 %62, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RAX, align 8, !tbaa !2428
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i32*
  %68 = load i32, i32* %67
  %69 = sext i32 %68 to i64
  store i64 %69, i64* %RCX, align 8, !tbaa !2428
  %70 = load i64, i64* %RCX
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 4
  store i64 %72, i64* %PC
  %73 = shl i64 %70, 10
  %74 = icmp slt i64 %73, 0
  %75 = shl i64 %73, 1
  store i64 %75, i64* %RCX, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %77 = zext i1 %74 to i8
  store i8 %77, i8* %76, align 1, !tbaa !2432
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %79 = trunc i64 %75 to i32
  %80 = and i32 %79, 254
  %81 = call i32 @llvm.ctpop.i32(i32 %80) #16
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  %84 = xor i8 %83, 1
  store i8 %84, i8* %78, align 1, !tbaa !2432
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %85, align 1, !tbaa !2432
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %87 = icmp eq i64 %75, 0
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %86, align 1, !tbaa !2432
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %90 = lshr i64 %75, 63
  %91 = trunc i64 %90 to i8
  store i8 %91, i8* %89, align 1, !tbaa !2432
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %92, align 1, !tbaa !2432
  %93 = load i64, i64* %RAX
  %94 = load i64, i64* %RCX
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  %97 = add i64 %94, %93
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = icmp ult i64 %97, %93
  %99 = icmp ult i64 %97, %94
  %100 = or i1 %98, %99
  %101 = zext i1 %100 to i8
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %101, i8* %102, align 1, !tbaa !2433
  %103 = trunc i64 %97 to i32
  %104 = and i32 %103, 255
  %105 = call i32 @llvm.ctpop.i32(i32 %104) #16
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = xor i8 %107, 1
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %108, i8* %109, align 1, !tbaa !2447
  %110 = xor i64 %94, %93
  %111 = xor i64 %110, %97
  %112 = lshr i64 %111, 4
  %113 = trunc i64 %112 to i8
  %114 = and i8 %113, 1
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %114, i8* %115, align 1, !tbaa !2448
  %116 = icmp eq i64 %97, 0
  %117 = zext i1 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %117, i8* %118, align 1, !tbaa !2449
  %119 = lshr i64 %97, 63
  %120 = trunc i64 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %120, i8* %121, align 1, !tbaa !2450
  %122 = lshr i64 %93, 63
  %123 = lshr i64 %94, 63
  %124 = xor i64 %119, %122
  %125 = xor i64 %119, %123
  %126 = add nuw nsw i64 %124, %125
  %127 = icmp eq i64 %126, 2
  %128 = zext i1 %127 to i8
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %128, i8* %129, align 1, !tbaa !2451
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 16
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %131 to i32*
  %135 = load i32, i32* %134
  %136 = sext i32 %135 to i64
  store i64 %136, i64* %RCX, align 8, !tbaa !2428
  %137 = load i64, i64* %RAX
  %138 = load i64, i64* %RCX
  %139 = mul i64 %138, 4
  %140 = add i64 %139, %137
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %140 to i32*
  %144 = load i32, i32* %143
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %145, align 1, !tbaa !2433
  %146 = and i32 %144, 255
  %147 = call i32 @llvm.ctpop.i32(i32 %146) #16
  %148 = trunc i32 %147 to i8
  %149 = and i8 %148, 1
  %150 = xor i8 %149, 1
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %150, i8* %151, align 1, !tbaa !2447
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %152, align 1, !tbaa !2448
  %153 = icmp eq i32 %144, 0
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %154, i8* %155, align 1, !tbaa !2449
  %156 = lshr i32 %144, 31
  %157 = trunc i32 %156 to i8
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %157, i8* %158, align 1, !tbaa !2450
  %159 = lshr i32 %144, 31
  %160 = xor i32 %156, %159
  %161 = add nuw nsw i32 %160, %159
  %162 = icmp eq i32 %161, 2
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %163, i8* %164, align 1, !tbaa !2451
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 46
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 6
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 6
  store i64 %170, i64* %PC
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = load i8, i8* %171, align 1, !tbaa !2449
  store i8 %172, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %174 = icmp ne i8 %172, 0
  %175 = select i1 %174, i64 %166, i64 %168
  store i64 %175, i64* %173, align 8, !tbaa !2428
  %176 = load i8, i8* %BRANCH_TAKEN
  %177 = icmp eq i8 %176, 1
  br i1 %177, label %block_4005e0, label %block_4005b8

block_4005f3:                                     ; preds = %block_400581
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 4
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 7
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %179 to i32*
  store i32 1, i32* %182
  br label %block_4005fa

block_4005cf:                                     ; preds = %block_4005b8
  %183 = load i64, i64* %RBP
  %184 = sub i64 %183, 4
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 7
  store i64 %186, i64* %PC
  %187 = inttoptr i64 %184 to i32*
  store i32 0, i32* %187
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 36
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 5
  store i64 %191, i64* %PC
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %189, i64* %192, align 8, !tbaa !2428
  br label %block_4005fa

block_4005fa:                                     ; preds = %block_4005cf, %block_4005f3
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4005f3 ], [ %MEMORY.1, %block_4005cf ]
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 4
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 3
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i32*
  %198 = load i32, i32* %197
  %199 = zext i32 %198 to i64
  store i64 %199, i64* %RAX, align 8, !tbaa !2428
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 1
  store i64 %201, i64* %PC
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %203 = load i64, i64* %202, align 8, !tbaa !2428
  %204 = add i64 %203, 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %RBP, align 8, !tbaa !2428
  store i64 %204, i64* %202, align 8, !tbaa !2428
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 1
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %211 = load i64, i64* %210, align 8, !tbaa !2428
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %209, align 8, !tbaa !2428
  %214 = add i64 %211, 8
  store i64 %214, i64* %210, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4005b8:                                     ; preds = %block_400595
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 12
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 3
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  %220 = load i32, i32* %219
  %221 = zext i32 %220 to i64
  store i64 %221, i64* %RAX, align 8, !tbaa !2428
  %222 = load i64, i64* %RAX
  %223 = load i64, i64* %RBP
  %224 = sub i64 %223, 16
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC
  %227 = trunc i64 %222 to i32
  %228 = inttoptr i64 %224 to i32*
  %229 = load i32, i32* %228
  %230 = add i32 %229, %227
  %231 = zext i32 %230 to i64
  store i64 %231, i64* %RAX, align 8, !tbaa !2428
  %232 = icmp ult i32 %230, %227
  %233 = icmp ult i32 %230, %229
  %234 = or i1 %232, %233
  %235 = zext i1 %234 to i8
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %235, i8* %236, align 1, !tbaa !2433
  %237 = and i32 %230, 255
  %238 = call i32 @llvm.ctpop.i32(i32 %237) #16
  %239 = trunc i32 %238 to i8
  %240 = and i8 %239, 1
  %241 = xor i8 %240, 1
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %241, i8* %242, align 1, !tbaa !2447
  %243 = xor i32 %229, %227
  %244 = xor i32 %243, %230
  %245 = lshr i32 %244, 4
  %246 = trunc i32 %245 to i8
  %247 = and i8 %246, 1
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %247, i8* %248, align 1, !tbaa !2448
  %249 = icmp eq i32 %230, 0
  %250 = zext i1 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %250, i8* %251, align 1, !tbaa !2449
  %252 = lshr i32 %230, 31
  %253 = trunc i32 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %253, i8* %254, align 1, !tbaa !2450
  %255 = lshr i32 %227, 31
  %256 = lshr i32 %229, 31
  %257 = xor i32 %252, %255
  %258 = xor i32 %252, %256
  %259 = add nuw nsw i32 %257, %258
  %260 = icmp eq i32 %259, 2
  %261 = zext i1 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %261, i8* %262, align 1, !tbaa !2451
  %263 = load i32, i32* %EAX
  %264 = zext i32 %263 to i64
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 3
  store i64 %266, i64* %PC
  %267 = shl i64 %264, 32
  %268 = ashr exact i64 %267, 32
  store i64 %268, i64* %RCX, align 8, !tbaa !2428
  %269 = load i64, i64* %RCX
  %270 = mul i64 %269, 4
  %271 = add i64 %270, ptrtoint (%puzzl_type* @puzzl to i64)
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 8
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %271 to i32*
  %275 = load i32, i32* %274
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %276, align 1, !tbaa !2433
  %277 = and i32 %275, 255
  %278 = call i32 @llvm.ctpop.i32(i32 %277) #16
  %279 = trunc i32 %278 to i8
  %280 = and i8 %279, 1
  %281 = xor i8 %280, 1
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %281, i8* %282, align 1, !tbaa !2447
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %283, align 1, !tbaa !2448
  %284 = icmp eq i32 %275, 0
  %285 = zext i1 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i32 %275, 31
  %288 = trunc i32 %287 to i8
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %288, i8* %289, align 1, !tbaa !2450
  %290 = lshr i32 %275, 31
  %291 = xor i32 %287, %290
  %292 = add nuw nsw i32 %291, %290
  %293 = icmp eq i32 %292, 2
  %294 = zext i1 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %294, i8* %295, align 1, !tbaa !2451
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 18
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 6
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 6
  store i64 %301, i64* %PC
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %303 = load i8, i8* %302, align 1, !tbaa !2449
  store i8 %303, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %305 = icmp ne i8 %303, 0
  %306 = select i1 %305, i64 %297, i64 %299
  store i64 %306, i64* %304, align 8, !tbaa !2428
  %307 = load i8, i8* %BRANCH_TAKEN
  %308 = icmp eq i8 %307, 1
  br i1 %308, label %block_4005db, label %block_4005cf

block_400581:                                     ; preds = %block_4005e0, %block_400570
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_400570 ], [ %MEMORY.2, %block_4005e0 ]
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 16
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 3
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i32*
  %314 = load i32, i32* %313
  %315 = zext i32 %314 to i64
  store i64 %315, i64* %RAX, align 8, !tbaa !2428
  %316 = load i64, i64* %RBP
  %317 = sub i64 %316, 8
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 4
  store i64 %319, i64* %PC
  %320 = inttoptr i64 %317 to i32*
  %321 = load i32, i32* %320
  %322 = sext i32 %321 to i64
  store i64 %322, i64* %RCX, align 8, !tbaa !2428
  %323 = load i32, i32* %EAX
  %324 = zext i32 %323 to i64
  %325 = load i64, i64* %RCX
  %326 = mul i64 %325, 4
  %327 = add i64 %326, ptrtoint (%piecemax_type* @piecemax to i64)
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 7
  store i64 %329, i64* %PC
  %330 = inttoptr i64 %327 to i32*
  %331 = load i32, i32* %330
  %332 = sub i32 %323, %331
  %333 = icmp ult i32 %323, %331
  %334 = zext i1 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %334, i8* %335, align 1, !tbaa !2433
  %336 = and i32 %332, 255
  %337 = call i32 @llvm.ctpop.i32(i32 %336) #16
  %338 = trunc i32 %337 to i8
  %339 = and i8 %338, 1
  %340 = xor i8 %339, 1
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %340, i8* %341, align 1, !tbaa !2447
  %342 = xor i32 %331, %323
  %343 = xor i32 %342, %332
  %344 = lshr i32 %343, 4
  %345 = trunc i32 %344 to i8
  %346 = and i8 %345, 1
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = icmp eq i32 %332, 0
  %349 = zext i1 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = lshr i32 %332, 31
  %352 = trunc i32 %351 to i8
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %352, i8* %353, align 1, !tbaa !2450
  %354 = lshr i32 %323, 31
  %355 = lshr i32 %331, 31
  %356 = xor i32 %355, %354
  %357 = xor i32 %351, %354
  %358 = add nuw nsw i32 %357, %356
  %359 = icmp eq i32 %358, 2
  %360 = zext i1 %359 to i8
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %360, i8* %361, align 1, !tbaa !2451
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 100
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 6
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 6
  store i64 %367, i64* %PC
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %369 = load i8, i8* %368, align 1, !tbaa !2449
  %370 = icmp eq i8 %369, 0
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %372 = load i8, i8* %371, align 1, !tbaa !2450
  %373 = icmp ne i8 %372, 0
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %375 = load i8, i8* %374, align 1, !tbaa !2451
  %376 = icmp ne i8 %375, 0
  %377 = xor i1 %373, %376
  %378 = xor i1 %377, true
  %379 = and i1 %370, %378
  %380 = zext i1 %379 to i8
  store i8 %380, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %382 = select i1 %379, i64 %363, i64 %365
  store i64 %382, i64* %381, align 8, !tbaa !2428
  %383 = load i8, i8* %BRANCH_TAKEN
  %384 = icmp eq i8 %383, 1
  br i1 %384, label %block_4005f3, label %block_400595

block_4005e0:                                     ; preds = %block_400595, %block_4005db
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_400595 ], [ %MEMORY.1, %block_4005db ]
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 5
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 5
  store i64 %388, i64* %PC
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %386, i64* %389, align 8, !tbaa !2428
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 16
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 3
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i32*
  %395 = load i32, i32* %394
  %396 = zext i32 %395 to i64
  store i64 %396, i64* %RAX, align 8, !tbaa !2428
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = trunc i64 %397 to i32
  %401 = add i32 1, %400
  %402 = zext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = icmp ult i32 %401, %400
  %404 = icmp ult i32 %401, 1
  %405 = or i1 %403, %404
  %406 = zext i1 %405 to i8
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %406, i8* %407, align 1, !tbaa !2433
  %408 = and i32 %401, 255
  %409 = call i32 @llvm.ctpop.i32(i32 %408) #16
  %410 = trunc i32 %409 to i8
  %411 = and i8 %410, 1
  %412 = xor i8 %411, 1
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %412, i8* %413, align 1, !tbaa !2447
  %414 = xor i64 1, %397
  %415 = trunc i64 %414 to i32
  %416 = xor i32 %415, %401
  %417 = lshr i32 %416, 4
  %418 = trunc i32 %417 to i8
  %419 = and i8 %418, 1
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %419, i8* %420, align 1, !tbaa !2448
  %421 = icmp eq i32 %401, 0
  %422 = zext i1 %421 to i8
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %422, i8* %423, align 1, !tbaa !2449
  %424 = lshr i32 %401, 31
  %425 = trunc i32 %424 to i8
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %425, i8* %426, align 1, !tbaa !2450
  %427 = lshr i32 %400, 31
  %428 = xor i32 %424, %427
  %429 = add nuw nsw i32 %428, %424
  %430 = icmp eq i32 %429, 2
  %431 = zext i1 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %431, i8* %432, align 1, !tbaa !2451
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 16
  %435 = load i32, i32* %EAX
  %436 = zext i32 %435 to i64
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 3
  store i64 %438, i64* %PC
  %439 = inttoptr i64 %434 to i32*
  store i32 %435, i32* %439
  %440 = load i64, i64* %PC
  %441 = sub i64 %440, 109
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 5
  store i64 %443, i64* %PC
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %441, i64* %444, align 8, !tbaa !2428
  br label %block_400581
}

; Function Attrs: noinline
define %struct.Memory* @sub_400500_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400500:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400490_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_400790_Trial(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400790:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC
  %40 = sub i64 %37, 16
  store i64 %40, i64* %RSP, align 8, !tbaa !2428
  %41 = icmp ult i64 %37, 16
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %42, i8* %43, align 1, !tbaa !2433
  %44 = trunc i64 %40 to i32
  %45 = and i32 %44, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2447
  %51 = xor i64 16, %37
  %52 = xor i64 %51, %40
  %53 = lshr i64 %52, 4
  %54 = trunc i64 %53 to i8
  %55 = and i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %55, i8* %56, align 1, !tbaa !2448
  %57 = icmp eq i64 %40, 0
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %58, i8* %59, align 1, !tbaa !2449
  %60 = lshr i64 %40, 63
  %61 = trunc i64 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %61, i8* %62, align 1, !tbaa !2450
  %63 = lshr i64 %37, 63
  %64 = xor i64 %60, %63
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2451
  %69 = load i64, i64* %RBP
  %70 = sub i64 %69, 8
  %71 = load i32, i32* %EDI
  %72 = zext i32 %71 to i64
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 3
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %70 to i32*
  store i32 %71, i32* %75
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 7
  store i64 %77, i64* %PC
  %78 = load i32, i32* bitcast (%kount_type* @kount to i32*)
  %79 = zext i32 %78 to i64
  store i64 %79, i64* %RDI, align 8, !tbaa !2428
  %80 = load i64, i64* %RDI
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC
  %83 = trunc i64 %80 to i32
  %84 = add i32 1, %83
  %85 = zext i32 %84 to i64
  store i64 %85, i64* %RDI, align 8, !tbaa !2428
  %86 = icmp ult i32 %84, %83
  %87 = icmp ult i32 %84, 1
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = and i32 %84, 255
  %92 = call i32 @llvm.ctpop.i32(i32 %91) #16
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %95, i8* %96, align 1, !tbaa !2447
  %97 = xor i64 1, %80
  %98 = trunc i64 %97 to i32
  %99 = xor i32 %98, %84
  %100 = lshr i32 %99, 4
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i32 %84, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i32 %84, 31
  %108 = trunc i32 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i32 %83, 31
  %111 = xor i32 %107, %110
  %112 = add nuw nsw i32 %111, %107
  %113 = icmp eq i32 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i32, i32* %EDI
  %117 = zext i32 %116 to i64
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 7
  store i64 %119, i64* %PC
  store i32 %116, i32* bitcast (%kount_type* @kount to i32*)
  %120 = load i64, i64* %RBP
  %121 = sub i64 %120, 12
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 7
  store i64 %123, i64* %PC
  %124 = inttoptr i64 %121 to i32*
  store i32 0, i32* %124
  br label %block_4007b3

block_4007bd:                                     ; preds = %block_4007b3
  %125 = sub i64 %306, 12
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 4
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i32*
  %129 = load i32, i32* %128
  %130 = sext i32 %129 to i64
  store i64 %130, i64* %RAX, align 8, !tbaa !2428
  %131 = load i64, i64* %RAX
  %132 = mul i64 %131, 4
  %133 = add i64 %132, ptrtoint (%class_type* @class to i64)
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 8
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = sext i32 %137 to i64
  store i64 %138, i64* %RAX, align 8, !tbaa !2428
  %139 = load i64, i64* %RAX
  %140 = mul i64 %139, 4
  %141 = add i64 %140, ptrtoint (%piececount_type* @piececount to i64)
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 8
  store i64 %143, i64* %PC
  %144 = inttoptr i64 %141 to i32*
  %145 = load i32, i32* %144
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %146, align 1, !tbaa !2433
  %147 = and i32 %145, 255
  %148 = call i32 @llvm.ctpop.i32(i32 %147) #16
  %149 = trunc i32 %148 to i8
  %150 = and i8 %149, 1
  %151 = xor i8 %150, 1
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %151, i8* %152, align 1, !tbaa !2447
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %153, align 1, !tbaa !2448
  %154 = icmp eq i32 %145, 0
  %155 = zext i1 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %155, i8* %156, align 1, !tbaa !2449
  %157 = lshr i32 %145, 31
  %158 = trunc i32 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %158, i8* %159, align 1, !tbaa !2450
  %160 = lshr i32 %145, 31
  %161 = xor i32 %157, %160
  %162 = add nuw nsw i32 %161, %160
  %163 = icmp eq i32 %162, 2
  %164 = zext i1 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %164, i8* %165, align 1, !tbaa !2451
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 100
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 6
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 6
  store i64 %171, i64* %PC
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %173 = load i8, i8* %172, align 1, !tbaa !2449
  store i8 %173, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %175 = icmp ne i8 %173, 0
  %176 = select i1 %175, i64 %167, i64 %169
  store i64 %176, i64* %174, align 8, !tbaa !2428
  %177 = load i8, i8* %BRANCH_TAKEN
  %178 = icmp eq i8 %177, 1
  br i1 %178, label %block_400835, label %block_4007d7

block_400835:                                     ; preds = %block_400830, %block_4007bd
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_4007bd ], [ %MEMORY.3, %block_400830 ]
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 5
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 5
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %180, i64* %183, align 8, !tbaa !2428
  %184 = load i64, i64* %RBP
  %185 = sub i64 %184, 12
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 3
  store i64 %187, i64* %PC
  %188 = inttoptr i64 %185 to i32*
  %189 = load i32, i32* %188
  %190 = zext i32 %189 to i64
  store i64 %190, i64* %RAX, align 8, !tbaa !2428
  %191 = load i64, i64* %RAX
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC
  %194 = trunc i64 %191 to i32
  %195 = add i32 1, %194
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = icmp ult i32 %195, %194
  %198 = icmp ult i32 %195, 1
  %199 = or i1 %197, %198
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %200, i8* %201, align 1, !tbaa !2433
  %202 = and i32 %195, 255
  %203 = call i32 @llvm.ctpop.i32(i32 %202) #16
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  %206 = xor i8 %205, 1
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %206, i8* %207, align 1, !tbaa !2447
  %208 = xor i64 1, %191
  %209 = trunc i64 %208 to i32
  %210 = xor i32 %209, %195
  %211 = lshr i32 %210, 4
  %212 = trunc i32 %211 to i8
  %213 = and i8 %212, 1
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %213, i8* %214, align 1, !tbaa !2448
  %215 = icmp eq i32 %195, 0
  %216 = zext i1 %215 to i8
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %216, i8* %217, align 1, !tbaa !2449
  %218 = lshr i32 %195, 31
  %219 = trunc i32 %218 to i8
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %219, i8* %220, align 1, !tbaa !2450
  %221 = lshr i32 %194, 31
  %222 = xor i32 %218, %221
  %223 = add nuw nsw i32 %222, %218
  %224 = icmp eq i32 %223, 2
  %225 = zext i1 %224 to i8
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %225, i8* %226, align 1, !tbaa !2451
  %227 = load i64, i64* %RBP
  %228 = sub i64 %227, 12
  %229 = load i32, i32* %EAX
  %230 = zext i32 %229 to i64
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 3
  store i64 %232, i64* %PC
  %233 = inttoptr i64 %228 to i32*
  store i32 %229, i32* %233
  %234 = load i64, i64* %PC
  %235 = sub i64 %234, 144
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 5
  store i64 %237, i64* %PC
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %235, i64* %238, align 8, !tbaa !2428
  br label %block_4007b3

block_400814:                                     ; preds = %block_40080a, %block_4007eb
  %MEMORY.1 = phi %struct.Memory* [ %421, %block_4007eb ], [ %421, %block_40080a ]
  %239 = load i64, i64* %RBP
  %240 = sub i64 %239, 4
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 7
  store i64 %242, i64* %PC
  %243 = inttoptr i64 %240 to i32*
  store i32 1, i32* %243
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 52
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 5
  store i64 %247, i64* %PC
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %245, i64* %248, align 8, !tbaa !2428
  br label %block_40084f

block_4007b3:                                     ; preds = %block_400835, %block_400790
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_400790 ], [ %MEMORY.0, %block_400835 ]
  %249 = load i64, i64* %RBP
  %250 = sub i64 %249, 12
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 4
  store i64 %252, i64* %PC
  %253 = inttoptr i64 %250 to i32*
  %254 = load i32, i32* %253
  %255 = sub i32 %254, 12
  %256 = icmp ult i32 %254, 12
  %257 = zext i1 %256 to i8
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %257, i8* %258, align 1, !tbaa !2433
  %259 = and i32 %255, 255
  %260 = call i32 @llvm.ctpop.i32(i32 %259) #16
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %263, i8* %264, align 1, !tbaa !2447
  %265 = xor i32 %254, 12
  %266 = xor i32 %265, %255
  %267 = lshr i32 %266, 4
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = icmp eq i32 %255, 0
  %272 = zext i1 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i32 %255, 31
  %275 = trunc i32 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %275, i8* %276, align 1, !tbaa !2450
  %277 = lshr i32 %254, 31
  %278 = xor i32 %274, %277
  %279 = add nuw nsw i32 %278, %277
  %280 = icmp eq i32 %279, 2
  %281 = zext i1 %280 to i8
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %281, i8* %282, align 1, !tbaa !2451
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 145
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 6
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 6
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %290 = load i8, i8* %289, align 1, !tbaa !2449
  %291 = icmp eq i8 %290, 0
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %293 = load i8, i8* %292, align 1, !tbaa !2450
  %294 = icmp ne i8 %293, 0
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %296 = load i8, i8* %295, align 1, !tbaa !2451
  %297 = icmp ne i8 %296, 0
  %298 = xor i1 %294, %297
  %299 = xor i1 %298, true
  %300 = and i1 %291, %299
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %303 = select i1 %300, i64 %284, i64 %286
  store i64 %303, i64* %302, align 8, !tbaa !2428
  %304 = load i8, i8* %BRANCH_TAKEN
  %305 = icmp eq i8 %304, 1
  %306 = load i64, i64* %RBP
  br i1 %305, label %block_400848, label %block_4007bd

block_400830:                                     ; preds = %block_400820, %block_4007d7
  %MEMORY.3 = phi %struct.Memory* [ %486, %block_4007d7 ], [ %594, %block_400820 ]
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 5
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 5
  store i64 %310, i64* %PC
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %308, i64* %311, align 8, !tbaa !2428
  br label %block_400835

block_40084f:                                     ; preds = %block_400848, %block_400814
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.2, %block_400848 ], [ %MEMORY.1, %block_400814 ]
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 4
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 3
  store i64 %315, i64* %PC
  %316 = inttoptr i64 %313 to i32*
  %317 = load i32, i32* %316
  %318 = zext i32 %317 to i64
  store i64 %318, i64* %RAX, align 8, !tbaa !2428
  %319 = load i64, i64* %RSP
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 4
  store i64 %321, i64* %PC
  %322 = add i64 16, %319
  store i64 %322, i64* %RSP, align 8, !tbaa !2428
  %323 = icmp ult i64 %322, %319
  %324 = icmp ult i64 %322, 16
  %325 = or i1 %323, %324
  %326 = zext i1 %325 to i8
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %326, i8* %327, align 1, !tbaa !2433
  %328 = trunc i64 %322 to i32
  %329 = and i32 %328, 255
  %330 = call i32 @llvm.ctpop.i32(i32 %329) #16
  %331 = trunc i32 %330 to i8
  %332 = and i8 %331, 1
  %333 = xor i8 %332, 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %333, i8* %334, align 1, !tbaa !2447
  %335 = xor i64 16, %319
  %336 = xor i64 %335, %322
  %337 = lshr i64 %336, 4
  %338 = trunc i64 %337 to i8
  %339 = and i8 %338, 1
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %339, i8* %340, align 1, !tbaa !2448
  %341 = icmp eq i64 %322, 0
  %342 = zext i1 %341 to i8
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %342, i8* %343, align 1, !tbaa !2449
  %344 = lshr i64 %322, 63
  %345 = trunc i64 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %345, i8* %346, align 1, !tbaa !2450
  %347 = lshr i64 %319, 63
  %348 = xor i64 %344, %347
  %349 = add nuw nsw i64 %348, %344
  %350 = icmp eq i64 %349, 2
  %351 = zext i1 %350 to i8
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %351, i8* %352, align 1, !tbaa !2451
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 1
  store i64 %354, i64* %PC
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %356 = load i64, i64* %355, align 8, !tbaa !2428
  %357 = add i64 %356, 8
  %358 = inttoptr i64 %356 to i64*
  %359 = load i64, i64* %358
  store i64 %359, i64* %RBP, align 8, !tbaa !2428
  store i64 %357, i64* %355, align 8, !tbaa !2428
  %360 = load i64, i64* %PC
  %361 = add i64 %360, 1
  store i64 %361, i64* %PC
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %364 = load i64, i64* %363, align 8, !tbaa !2428
  %365 = inttoptr i64 %364 to i64*
  %366 = load i64, i64* %365
  store i64 %366, i64* %362, align 8, !tbaa !2428
  %367 = add i64 %364, 8
  store i64 %367, i64* %363, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_4007eb:                                     ; preds = %block_4007d7
  %368 = load i64, i64* %RBP
  %369 = sub i64 %368, 12
  %370 = load i64, i64* %PC
  %371 = add i64 %370, 3
  store i64 %371, i64* %PC
  %372 = inttoptr i64 %369 to i32*
  %373 = load i32, i32* %372
  %374 = zext i32 %373 to i64
  store i64 %374, i64* %RDI, align 8, !tbaa !2428
  %375 = load i64, i64* %RBP
  %376 = sub i64 %375, 8
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 3
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %376 to i32*
  %380 = load i32, i32* %379
  %381 = zext i32 %380 to i64
  store i64 %381, i64* %RSI, align 8, !tbaa !2428
  %382 = load i64, i64* %PC
  %383 = sub i64 %382, 497
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 5
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  store i64 %387, i64* %PC
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %389 = load i64, i64* %388, align 8, !tbaa !2428
  %390 = add i64 %389, -8
  %391 = inttoptr i64 %390 to i64*
  store i64 %385, i64* %391
  store i64 %390, i64* %388, align 8, !tbaa !2428
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %383, i64* %392, align 8, !tbaa !2428
  %393 = load i64, i64* %PC
  %394 = call %struct.Memory* @sub_400600_Place(%struct.State* %0, i64 %393, %struct.Memory* %486)
  %395 = load i64, i64* %RBP
  %396 = sub i64 %395, 16
  %397 = load i32, i32* %EAX
  %398 = zext i32 %397 to i64
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 3
  store i64 %400, i64* %PC
  %401 = inttoptr i64 %396 to i32*
  store i32 %397, i32* %401
  %402 = load i64, i64* %RBP
  %403 = sub i64 %402, 16
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 3
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i32*
  %407 = load i32, i32* %406
  %408 = zext i32 %407 to i64
  store i64 %408, i64* %RDI, align 8, !tbaa !2428
  %409 = load i64, i64* %PC
  %410 = sub i64 %409, 108
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 5
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 5
  store i64 %414, i64* %PC
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %416 = load i64, i64* %415, align 8, !tbaa !2428
  %417 = add i64 %416, -8
  %418 = inttoptr i64 %417 to i64*
  store i64 %412, i64* %418
  store i64 %417, i64* %415, align 8, !tbaa !2428
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %410, i64* %419, align 8, !tbaa !2428
  %420 = load i64, i64* %PC
  %421 = call %struct.Memory* @sub_400790_Trial(%struct.State* %0, i64 %420, %struct.Memory* %394)
  %422 = load i32, i32* %EAX
  %423 = zext i32 %422 to i64
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %426, align 1, !tbaa !2433
  %427 = and i32 %422, 255
  %428 = call i32 @llvm.ctpop.i32(i32 %427) #16
  %429 = trunc i32 %428 to i8
  %430 = and i8 %429, 1
  %431 = xor i8 %430, 1
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %431, i8* %432, align 1, !tbaa !2447
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %433, align 1, !tbaa !2448
  %434 = icmp eq i32 %422, 0
  %435 = zext i1 %434 to i8
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %435, i8* %436, align 1, !tbaa !2449
  %437 = lshr i32 %422, 31
  %438 = trunc i32 %437 to i8
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %438, i8* %439, align 1, !tbaa !2450
  %440 = lshr i32 %422, 31
  %441 = xor i32 %437, %440
  %442 = add nuw nsw i32 %441, %440
  %443 = icmp eq i32 %442, 2
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %444, i8* %445, align 1, !tbaa !2451
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 16
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 6
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 6
  store i64 %451, i64* %PC
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %453 = load i8, i8* %452, align 1, !tbaa !2449
  %454 = icmp eq i8 %453, 0
  %455 = zext i1 %454 to i8
  store i8 %455, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %457 = select i1 %454, i64 %447, i64 %449
  store i64 %457, i64* %456, align 8, !tbaa !2428
  %458 = load i8, i8* %BRANCH_TAKEN
  %459 = icmp eq i8 %458, 1
  br i1 %459, label %block_400814, label %block_40080a

block_4007d7:                                     ; preds = %block_4007bd
  %460 = load i64, i64* %RBP
  %461 = sub i64 %460, 12
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 3
  store i64 %463, i64* %PC
  %464 = inttoptr i64 %461 to i32*
  %465 = load i32, i32* %464
  %466 = zext i32 %465 to i64
  store i64 %466, i64* %RDI, align 8, !tbaa !2428
  %467 = load i64, i64* %RBP
  %468 = sub i64 %467, 8
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 3
  store i64 %470, i64* %PC
  %471 = inttoptr i64 %468 to i32*
  %472 = load i32, i32* %471
  %473 = zext i32 %472 to i64
  store i64 %473, i64* %RSI, align 8, !tbaa !2428
  %474 = load i64, i64* %PC
  %475 = sub i64 %474, 621
  %476 = load i64, i64* %PC
  %477 = add i64 %476, 5
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 5
  store i64 %479, i64* %PC
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %481 = load i64, i64* %480, align 8, !tbaa !2428
  %482 = add i64 %481, -8
  %483 = inttoptr i64 %482 to i64*
  store i64 %477, i64* %483
  store i64 %482, i64* %480, align 8, !tbaa !2428
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %475, i64* %484, align 8, !tbaa !2428
  %485 = load i64, i64* %PC
  %486 = call %struct.Memory* @sub_400570_Fit(%struct.State* %0, i64 %485, %struct.Memory* %MEMORY.2)
  %487 = load i32, i32* %EAX
  %488 = zext i32 %487 to i64
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 3
  store i64 %490, i64* %PC
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %491, align 1, !tbaa !2433
  %492 = and i32 %487, 255
  %493 = call i32 @llvm.ctpop.i32(i32 %492) #16
  %494 = trunc i32 %493 to i8
  %495 = and i8 %494, 1
  %496 = xor i8 %495, 1
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %496, i8* %497, align 1, !tbaa !2447
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %498, align 1, !tbaa !2448
  %499 = icmp eq i32 %487, 0
  %500 = zext i1 %499 to i8
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %500, i8* %501, align 1, !tbaa !2449
  %502 = lshr i32 %487, 31
  %503 = trunc i32 %502 to i8
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %503, i8* %504, align 1, !tbaa !2450
  %505 = lshr i32 %487, 31
  %506 = xor i32 %502, %505
  %507 = add nuw nsw i32 %506, %505
  %508 = icmp eq i32 %507, 2
  %509 = zext i1 %508 to i8
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %509, i8* %510, align 1, !tbaa !2451
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 75
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 6
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 6
  store i64 %516, i64* %PC
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %518 = load i8, i8* %517, align 1, !tbaa !2449
  store i8 %518, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %520 = icmp ne i8 %518, 0
  %521 = select i1 %520, i64 %512, i64 %514
  store i64 %521, i64* %519, align 8, !tbaa !2428
  %522 = load i8, i8* %BRANCH_TAKEN
  %523 = icmp eq i8 %522, 1
  br i1 %523, label %block_400830, label %block_4007eb

block_40080a:                                     ; preds = %block_4007eb
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 16
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 4
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %530, align 1, !tbaa !2433
  %531 = and i32 %529, 255
  %532 = call i32 @llvm.ctpop.i32(i32 %531) #16
  %533 = trunc i32 %532 to i8
  %534 = and i8 %533, 1
  %535 = xor i8 %534, 1
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %535, i8* %536, align 1, !tbaa !2447
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %537, align 1, !tbaa !2448
  %538 = icmp eq i32 %529, 0
  %539 = zext i1 %538 to i8
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %539, i8* %540, align 1, !tbaa !2449
  %541 = lshr i32 %529, 31
  %542 = trunc i32 %541 to i8
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %542, i8* %543, align 1, !tbaa !2450
  %544 = lshr i32 %529, 31
  %545 = xor i32 %541, %544
  %546 = add nuw nsw i32 %545, %544
  %547 = icmp eq i32 %546, 2
  %548 = zext i1 %547 to i8
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %548, i8* %549, align 1, !tbaa !2451
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 18
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 6
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 6
  store i64 %555, i64* %PC
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %557 = load i8, i8* %556, align 1, !tbaa !2449
  %558 = icmp eq i8 %557, 0
  %559 = zext i1 %558 to i8
  store i8 %559, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %561 = select i1 %558, i64 %551, i64 %553
  store i64 %561, i64* %560, align 8, !tbaa !2428
  %562 = load i8, i8* %BRANCH_TAKEN
  %563 = icmp eq i8 %562, 1
  br i1 %563, label %block_400820, label %block_400814

block_400848:                                     ; preds = %block_4007b3
  %564 = sub i64 %306, 4
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 7
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i32*
  store i32 0, i32* %567
  br label %block_40084f

block_400820:                                     ; preds = %block_40080a
  %568 = load i64, i64* %RBP
  %569 = sub i64 %568, 12
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 3
  store i64 %571, i64* %PC
  %572 = inttoptr i64 %569 to i32*
  %573 = load i32, i32* %572
  %574 = zext i32 %573 to i64
  store i64 %574, i64* %RDI, align 8, !tbaa !2428
  %575 = load i64, i64* %RBP
  %576 = sub i64 %575, 8
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 3
  store i64 %578, i64* %PC
  %579 = inttoptr i64 %576 to i32*
  %580 = load i32, i32* %579
  %581 = zext i32 %580 to i64
  store i64 %581, i64* %RSI, align 8, !tbaa !2428
  %582 = load i64, i64* %PC
  %583 = sub i64 %582, 310
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 5
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 5
  store i64 %587, i64* %PC
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %589 = load i64, i64* %588, align 8, !tbaa !2428
  %590 = add i64 %589, -8
  %591 = inttoptr i64 %590 to i64*
  store i64 %585, i64* %591
  store i64 %590, i64* %588, align 8, !tbaa !2428
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %583, i64* %592, align 8, !tbaa !2428
  %593 = load i64, i64* %PC
  %594 = call %struct.Memory* @sub_4006f0_Remove(%struct.State* %0, i64 %593, %struct.Memory* %421)
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 5
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 5
  store i64 %598, i64* %PC
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %596, i64* %599, align 8, !tbaa !2428
  br label %block_400830
}

; Function Attrs: noinline
define %struct.Memory* @sub_400600_Place(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400600:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = load i64, i64* %RBP
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %34 = load i64, i64* %33, align 8, !tbaa !2428
  %35 = add i64 %34, -8
  %36 = inttoptr i64 %35 to i64*
  store i64 %30, i64* %36
  store i64 %35, i64* %33, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 3
  store i64 %39, i64* %PC
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i32, i32* %EDI
  %43 = zext i32 %42 to i64
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  %46 = inttoptr i64 %41 to i32*
  store i32 %42, i32* %46
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 12
  %49 = load i32, i32* %ESI
  %50 = zext i32 %49 to i64
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  %53 = inttoptr i64 %48 to i32*
  store i32 %49, i32* %53
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 16
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 7
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i32*
  store i32 0, i32* %58
  br label %block_400611

block_4006bd:                                     ; preds = %block_4006ab
  %59 = load i64, i64* %RBP
  %60 = sub i64 %59, 16
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to i32*
  %64 = load i32, i32* %63
  %65 = zext i32 %64 to i64
  store i64 %65, i64* %RAX, align 8, !tbaa !2428
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 4
  %68 = load i32, i32* %EAX
  %69 = zext i32 %68 to i64
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %67 to i32*
  store i32 %68, i32* %72
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 31
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 5
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %74, i64* %77, align 8, !tbaa !2428
  br label %block_4006e2

block_40065c:                                     ; preds = %block_400625, %block_400648
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.3, %block_400625 ], [ %MEMORY.3, %block_400648 ]
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 5
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %79, i64* %82, align 8, !tbaa !2428
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 3
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %84 to i32*
  %88 = load i32, i32* %87
  %89 = zext i32 %88 to i64
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %90 = load i64, i64* %RAX
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 3
  store i64 %92, i64* %PC
  %93 = trunc i64 %90 to i32
  %94 = add i32 1, %93
  %95 = zext i32 %94 to i64
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %96 = icmp ult i32 %94, %93
  %97 = icmp ult i32 %94, 1
  %98 = or i1 %96, %97
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %99, i8* %100, align 1, !tbaa !2433
  %101 = and i32 %94, 255
  %102 = call i32 @llvm.ctpop.i32(i32 %101) #16
  %103 = trunc i32 %102 to i8
  %104 = and i8 %103, 1
  %105 = xor i8 %104, 1
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %105, i8* %106, align 1, !tbaa !2447
  %107 = xor i64 1, %90
  %108 = trunc i64 %107 to i32
  %109 = xor i32 %108, %94
  %110 = lshr i32 %109, 4
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %112, i8* %113, align 1, !tbaa !2448
  %114 = icmp eq i32 %94, 0
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %115, i8* %116, align 1, !tbaa !2449
  %117 = lshr i32 %94, 31
  %118 = trunc i32 %117 to i8
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %118, i8* %119, align 1, !tbaa !2450
  %120 = lshr i32 %93, 31
  %121 = xor i32 %117, %120
  %122 = add nuw nsw i32 %121, %117
  %123 = icmp eq i32 %122, 2
  %124 = zext i1 %123 to i8
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %124, i8* %125, align 1, !tbaa !2451
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 16
  %128 = load i32, i32* %EAX
  %129 = zext i32 %128 to i64
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 3
  store i64 %131, i64* %PC
  %132 = inttoptr i64 %127 to i32*
  store i32 %128, i32* %132
  %133 = load i64, i64* %PC
  %134 = sub i64 %133, 89
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 5
  store i64 %136, i64* %PC
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %134, i64* %137, align 8, !tbaa !2428
  br label %block_400611

block_4006db:                                     ; preds = %block_40069e
  %138 = sub i64 %577, 4
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 7
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i32*
  store i32 0, i32* %141
  br label %block_4006e2

block_4006c8:                                     ; preds = %block_4006ab
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 5
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 5
  store i64 %145, i64* %PC
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %143, i64* %146, align 8, !tbaa !2428
  %147 = load i64, i64* %RBP
  %148 = sub i64 %147, 16
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 3
  store i64 %150, i64* %PC
  %151 = inttoptr i64 %148 to i32*
  %152 = load i32, i32* %151
  %153 = zext i32 %152 to i64
  store i64 %153, i64* %RAX, align 8, !tbaa !2428
  %154 = load i64, i64* %RAX
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 3
  store i64 %156, i64* %PC
  %157 = trunc i64 %154 to i32
  %158 = add i32 1, %157
  %159 = zext i32 %158 to i64
  store i64 %159, i64* %RAX, align 8, !tbaa !2428
  %160 = icmp ult i32 %158, %157
  %161 = icmp ult i32 %158, 1
  %162 = or i1 %160, %161
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %163, i8* %164, align 1, !tbaa !2433
  %165 = and i32 %158, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #16
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %169, i8* %170, align 1, !tbaa !2447
  %171 = xor i64 1, %154
  %172 = trunc i64 %171 to i32
  %173 = xor i32 %172, %158
  %174 = lshr i32 %173, 4
  %175 = trunc i32 %174 to i8
  %176 = and i8 %175, 1
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %176, i8* %177, align 1, !tbaa !2448
  %178 = icmp eq i32 %158, 0
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %179, i8* %180, align 1, !tbaa !2449
  %181 = lshr i32 %158, 31
  %182 = trunc i32 %181 to i8
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %182, i8* %183, align 1, !tbaa !2450
  %184 = lshr i32 %157, 31
  %185 = xor i32 %181, %184
  %186 = add nuw nsw i32 %185, %181
  %187 = icmp eq i32 %186, 2
  %188 = zext i1 %187 to i8
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %188, i8* %189, align 1, !tbaa !2451
  %190 = load i64, i64* %RBP
  %191 = sub i64 %190, 16
  %192 = load i32, i32* %EAX
  %193 = zext i32 %192 to i64
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 3
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %191 to i32*
  store i32 %192, i32* %196
  %197 = load i64, i64* %PC
  %198 = sub i64 %197, 56
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 5
  store i64 %200, i64* %PC
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %198, i64* %201, align 8, !tbaa !2428
  br label %block_40069e

block_40066f:                                     ; preds = %block_400611
  %202 = load i64, i64* %RBP
  %203 = sub i64 %202, 8
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 4
  store i64 %205, i64* %PC
  %206 = inttoptr i64 %203 to i32*
  %207 = load i32, i32* %206
  %208 = sext i32 %207 to i64
  store i64 %208, i64* %RAX, align 8, !tbaa !2428
  %209 = load i64, i64* %RAX
  %210 = mul i64 %209, 4
  %211 = add i64 %210, ptrtoint (%class_type* @class to i64)
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 8
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %211 to i32*
  %215 = load i32, i32* %214
  %216 = sext i32 %215 to i64
  store i64 %216, i64* %RAX, align 8, !tbaa !2428
  %217 = load i64, i64* %RAX
  %218 = mul i64 %217, 4
  %219 = add i64 %218, ptrtoint (%piececount_type* @piececount to i64)
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 7
  store i64 %221, i64* %PC
  %222 = inttoptr i64 %219 to i32*
  %223 = load i32, i32* %222
  %224 = zext i32 %223 to i64
  store i64 %224, i64* %RCX, align 8, !tbaa !2428
  %225 = load i64, i64* %RCX
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 3
  store i64 %227, i64* %PC
  %228 = trunc i64 %225 to i32
  %229 = sub i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RCX, align 8, !tbaa !2428
  %231 = icmp ult i32 %228, 1
  %232 = zext i1 %231 to i8
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %232, i8* %233, align 1, !tbaa !2433
  %234 = and i32 %229, 255
  %235 = call i32 @llvm.ctpop.i32(i32 %234) #16
  %236 = trunc i32 %235 to i8
  %237 = and i8 %236, 1
  %238 = xor i8 %237, 1
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %238, i8* %239, align 1, !tbaa !2447
  %240 = xor i64 1, %225
  %241 = trunc i64 %240 to i32
  %242 = xor i32 %241, %229
  %243 = lshr i32 %242, 4
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %245, i8* %246, align 1, !tbaa !2448
  %247 = icmp eq i32 %229, 0
  %248 = zext i1 %247 to i8
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %248, i8* %249, align 1, !tbaa !2449
  %250 = lshr i32 %229, 31
  %251 = trunc i32 %250 to i8
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %251, i8* %252, align 1, !tbaa !2450
  %253 = lshr i32 %228, 31
  %254 = xor i32 %250, %253
  %255 = add nuw nsw i32 %254, %253
  %256 = icmp eq i32 %255, 2
  %257 = zext i1 %256 to i8
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %257, i8* %258, align 1, !tbaa !2451
  %259 = load i64, i64* %RBP
  %260 = sub i64 %259, 8
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 4
  store i64 %262, i64* %PC
  %263 = inttoptr i64 %260 to i32*
  %264 = load i32, i32* %263
  %265 = sext i32 %264 to i64
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = load i64, i64* %RAX
  %267 = mul i64 %266, 4
  %268 = add i64 %267, ptrtoint (%class_type* @class to i64)
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 8
  store i64 %270, i64* %PC
  %271 = inttoptr i64 %268 to i32*
  %272 = load i32, i32* %271
  %273 = sext i32 %272 to i64
  store i64 %273, i64* %RAX, align 8, !tbaa !2428
  %274 = load i64, i64* %RAX
  %275 = mul i64 %274, 4
  %276 = add i64 %275, ptrtoint (%piececount_type* @piececount to i64)
  %277 = load i32, i32* %ECX
  %278 = zext i32 %277 to i64
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 7
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %276 to i32*
  store i32 %277, i32* %281
  %282 = load i64, i64* %RBP
  %283 = sub i64 %282, 12
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 3
  store i64 %285, i64* %PC
  %286 = inttoptr i64 %283 to i32*
  %287 = load i32, i32* %286
  %288 = zext i32 %287 to i64
  store i64 %288, i64* %RCX, align 8, !tbaa !2428
  %289 = load i64, i64* %RBP
  %290 = sub i64 %289, 16
  %291 = load i32, i32* %ECX
  %292 = zext i32 %291 to i64
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 3
  store i64 %294, i64* %PC
  %295 = inttoptr i64 %290 to i32*
  store i32 %291, i32* %295
  br label %block_40069e

block_4006ab:                                     ; preds = %block_40069e
  %296 = sub i64 %577, 16
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 4
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %296 to i32*
  %300 = load i32, i32* %299
  %301 = sext i32 %300 to i64
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = load i64, i64* %RAX
  %303 = mul i64 %302, 4
  %304 = add i64 %303, ptrtoint (%puzzl_type* @puzzl to i64)
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 8
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %304 to i32*
  %308 = load i32, i32* %307
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %309, align 1, !tbaa !2433
  %310 = and i32 %308, 255
  %311 = call i32 @llvm.ctpop.i32(i32 %310) #16
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  %314 = xor i8 %313, 1
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %314, i8* %315, align 1, !tbaa !2447
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %316, align 1, !tbaa !2448
  %317 = icmp eq i32 %308, 0
  %318 = zext i1 %317 to i8
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %318, i8* %319, align 1, !tbaa !2449
  %320 = lshr i32 %308, 31
  %321 = trunc i32 %320 to i8
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %321, i8* %322, align 1, !tbaa !2450
  %323 = lshr i32 %308, 31
  %324 = xor i32 %320, %323
  %325 = add nuw nsw i32 %324, %323
  %326 = icmp eq i32 %325, 2
  %327 = zext i1 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %327, i8* %328, align 1, !tbaa !2451
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 17
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 6
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 6
  store i64 %334, i64* %PC
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %336 = load i8, i8* %335, align 1, !tbaa !2449
  %337 = icmp eq i8 %336, 0
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %340 = select i1 %337, i64 %330, i64 %332
  store i64 %340, i64* %339, align 8, !tbaa !2428
  %341 = load i8, i8* %BRANCH_TAKEN
  %342 = icmp eq i8 %341, 1
  br i1 %342, label %block_4006c8, label %block_4006bd

block_400648:                                     ; preds = %block_400625
  %343 = load i64, i64* %RBP
  %344 = sub i64 %343, 12
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 3
  store i64 %346, i64* %PC
  %347 = inttoptr i64 %344 to i32*
  %348 = load i32, i32* %347
  %349 = zext i32 %348 to i64
  store i64 %349, i64* %RAX, align 8, !tbaa !2428
  %350 = load i64, i64* %RAX
  %351 = load i64, i64* %RBP
  %352 = sub i64 %351, 16
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 3
  store i64 %354, i64* %PC
  %355 = trunc i64 %350 to i32
  %356 = inttoptr i64 %352 to i32*
  %357 = load i32, i32* %356
  %358 = add i32 %357, %355
  %359 = zext i32 %358 to i64
  store i64 %359, i64* %RAX, align 8, !tbaa !2428
  %360 = icmp ult i32 %358, %355
  %361 = icmp ult i32 %358, %357
  %362 = or i1 %360, %361
  %363 = zext i1 %362 to i8
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %363, i8* %364, align 1, !tbaa !2433
  %365 = and i32 %358, 255
  %366 = call i32 @llvm.ctpop.i32(i32 %365) #16
  %367 = trunc i32 %366 to i8
  %368 = and i8 %367, 1
  %369 = xor i8 %368, 1
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %369, i8* %370, align 1, !tbaa !2447
  %371 = xor i32 %357, %355
  %372 = xor i32 %371, %358
  %373 = lshr i32 %372, 4
  %374 = trunc i32 %373 to i8
  %375 = and i8 %374, 1
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %375, i8* %376, align 1, !tbaa !2448
  %377 = icmp eq i32 %358, 0
  %378 = zext i1 %377 to i8
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %378, i8* %379, align 1, !tbaa !2449
  %380 = lshr i32 %358, 31
  %381 = trunc i32 %380 to i8
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %381, i8* %382, align 1, !tbaa !2450
  %383 = lshr i32 %355, 31
  %384 = lshr i32 %357, 31
  %385 = xor i32 %380, %383
  %386 = xor i32 %380, %384
  %387 = add nuw nsw i32 %385, %386
  %388 = icmp eq i32 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2451
  %391 = load i32, i32* %EAX
  %392 = zext i32 %391 to i64
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 3
  store i64 %394, i64* %PC
  %395 = shl i64 %392, 32
  %396 = ashr exact i64 %395, 32
  store i64 %396, i64* %RCX, align 8, !tbaa !2428
  %397 = load i64, i64* %RCX
  %398 = mul i64 %397, 4
  %399 = add i64 %398, ptrtoint (%puzzl_type* @puzzl to i64)
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 11
  store i64 %401, i64* %PC
  %402 = inttoptr i64 %399 to i32*
  store i32 1, i32* %402
  br label %block_40065c

block_400625:                                     ; preds = %block_400611
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 10
  store i64 %404, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RAX, align 8, !tbaa !2428
  %405 = load i64, i64* %RBP
  %406 = sub i64 %405, 8
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 4
  store i64 %408, i64* %PC
  %409 = inttoptr i64 %406 to i32*
  %410 = load i32, i32* %409
  %411 = sext i32 %410 to i64
  store i64 %411, i64* %RCX, align 8, !tbaa !2428
  %412 = load i64, i64* %RCX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = shl i64 %412, 10
  %416 = icmp slt i64 %415, 0
  %417 = shl i64 %415, 1
  store i64 %417, i64* %RCX, align 8, !tbaa !2428
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %419 = zext i1 %416 to i8
  store i8 %419, i8* %418, align 1, !tbaa !2432
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %421 = trunc i64 %417 to i32
  %422 = and i32 %421, 254
  %423 = call i32 @llvm.ctpop.i32(i32 %422) #16
  %424 = trunc i32 %423 to i8
  %425 = and i8 %424, 1
  %426 = xor i8 %425, 1
  store i8 %426, i8* %420, align 1, !tbaa !2432
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %427, align 1, !tbaa !2432
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %429 = icmp eq i64 %417, 0
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %428, align 1, !tbaa !2432
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %432 = lshr i64 %417, 63
  %433 = trunc i64 %432 to i8
  store i8 %433, i8* %431, align 1, !tbaa !2432
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %434, align 1, !tbaa !2432
  %435 = load i64, i64* %RAX
  %436 = load i64, i64* %RCX
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 3
  store i64 %438, i64* %PC
  %439 = add i64 %436, %435
  store i64 %439, i64* %RAX, align 8, !tbaa !2428
  %440 = icmp ult i64 %439, %435
  %441 = icmp ult i64 %439, %436
  %442 = or i1 %440, %441
  %443 = zext i1 %442 to i8
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %443, i8* %444, align 1, !tbaa !2433
  %445 = trunc i64 %439 to i32
  %446 = and i32 %445, 255
  %447 = call i32 @llvm.ctpop.i32(i32 %446) #16
  %448 = trunc i32 %447 to i8
  %449 = and i8 %448, 1
  %450 = xor i8 %449, 1
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %450, i8* %451, align 1, !tbaa !2447
  %452 = xor i64 %436, %435
  %453 = xor i64 %452, %439
  %454 = lshr i64 %453, 4
  %455 = trunc i64 %454 to i8
  %456 = and i8 %455, 1
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %456, i8* %457, align 1, !tbaa !2448
  %458 = icmp eq i64 %439, 0
  %459 = zext i1 %458 to i8
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %459, i8* %460, align 1, !tbaa !2449
  %461 = lshr i64 %439, 63
  %462 = trunc i64 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %462, i8* %463, align 1, !tbaa !2450
  %464 = lshr i64 %435, 63
  %465 = lshr i64 %436, 63
  %466 = xor i64 %461, %464
  %467 = xor i64 %461, %465
  %468 = add nuw nsw i64 %466, %467
  %469 = icmp eq i64 %468, 2
  %470 = zext i1 %469 to i8
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %470, i8* %471, align 1, !tbaa !2451
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 16
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 4
  store i64 %475, i64* %PC
  %476 = inttoptr i64 %473 to i32*
  %477 = load i32, i32* %476
  %478 = sext i32 %477 to i64
  store i64 %478, i64* %RCX, align 8, !tbaa !2428
  %479 = load i64, i64* %RAX
  %480 = load i64, i64* %RCX
  %481 = mul i64 %480, 4
  %482 = add i64 %481, %479
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 4
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to i32*
  %486 = load i32, i32* %485
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %487, align 1, !tbaa !2433
  %488 = and i32 %486, 255
  %489 = call i32 @llvm.ctpop.i32(i32 %488) #16
  %490 = trunc i32 %489 to i8
  %491 = and i8 %490, 1
  %492 = xor i8 %491, 1
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %492, i8* %493, align 1, !tbaa !2447
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %494, align 1, !tbaa !2448
  %495 = icmp eq i32 %486, 0
  %496 = zext i1 %495 to i8
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %496, i8* %497, align 1, !tbaa !2449
  %498 = lshr i32 %486, 31
  %499 = trunc i32 %498 to i8
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %499, i8* %500, align 1, !tbaa !2450
  %501 = lshr i32 %486, 31
  %502 = xor i32 %498, %501
  %503 = add nuw nsw i32 %502, %501
  %504 = icmp eq i32 %503, 2
  %505 = zext i1 %504 to i8
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %505, i8* %506, align 1, !tbaa !2451
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 26
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 6
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 6
  store i64 %512, i64* %PC
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %514 = load i8, i8* %513, align 1, !tbaa !2449
  store i8 %514, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %516 = icmp ne i8 %514, 0
  %517 = select i1 %516, i64 %508, i64 %510
  store i64 %517, i64* %515, align 8, !tbaa !2428
  %518 = load i8, i8* %BRANCH_TAKEN
  %519 = icmp eq i8 %518, 1
  br i1 %519, label %block_40065c, label %block_400648

block_40069e:                                     ; preds = %block_40066f, %block_4006c8
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_40066f ], [ %MEMORY.1, %block_4006c8 ]
  %520 = load i64, i64* %RBP
  %521 = sub i64 %520, 16
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 7
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %521 to i32*
  %525 = load i32, i32* %524
  %526 = sub i32 %525, 511
  %527 = icmp ult i32 %525, 511
  %528 = zext i1 %527 to i8
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %528, i8* %529, align 1, !tbaa !2433
  %530 = and i32 %526, 255
  %531 = call i32 @llvm.ctpop.i32(i32 %530) #16
  %532 = trunc i32 %531 to i8
  %533 = and i8 %532, 1
  %534 = xor i8 %533, 1
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %534, i8* %535, align 1, !tbaa !2447
  %536 = xor i32 %525, 511
  %537 = xor i32 %536, %526
  %538 = lshr i32 %537, 4
  %539 = trunc i32 %538 to i8
  %540 = and i8 %539, 1
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %540, i8* %541, align 1, !tbaa !2448
  %542 = icmp eq i32 %526, 0
  %543 = zext i1 %542 to i8
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %543, i8* %544, align 1, !tbaa !2449
  %545 = lshr i32 %526, 31
  %546 = trunc i32 %545 to i8
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %546, i8* %547, align 1, !tbaa !2450
  %548 = lshr i32 %525, 31
  %549 = xor i32 %545, %548
  %550 = add nuw nsw i32 %549, %548
  %551 = icmp eq i32 %550, 2
  %552 = zext i1 %551 to i8
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %552, i8* %553, align 1, !tbaa !2451
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 54
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 6
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 6
  store i64 %559, i64* %PC
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %561 = load i8, i8* %560, align 1, !tbaa !2449
  %562 = icmp eq i8 %561, 0
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %564 = load i8, i8* %563, align 1, !tbaa !2450
  %565 = icmp ne i8 %564, 0
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %567 = load i8, i8* %566, align 1, !tbaa !2451
  %568 = icmp ne i8 %567, 0
  %569 = xor i1 %565, %568
  %570 = xor i1 %569, true
  %571 = and i1 %562, %570
  %572 = zext i1 %571 to i8
  store i8 %572, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %574 = select i1 %571, i64 %555, i64 %557
  store i64 %574, i64* %573, align 8, !tbaa !2428
  %575 = load i8, i8* %BRANCH_TAKEN
  %576 = icmp eq i8 %575, 1
  %577 = load i64, i64* %RBP
  br i1 %576, label %block_4006db, label %block_4006ab

block_4006e2:                                     ; preds = %block_4006db, %block_4006bd
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_4006db ], [ %MEMORY.1, %block_4006bd ]
  %578 = load i64, i64* %RBP
  %579 = sub i64 %578, 4
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 3
  store i64 %581, i64* %PC
  %582 = inttoptr i64 %579 to i32*
  %583 = load i32, i32* %582
  %584 = zext i32 %583 to i64
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 1
  store i64 %586, i64* %PC
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %588 = load i64, i64* %587, align 8, !tbaa !2428
  %589 = add i64 %588, 8
  %590 = inttoptr i64 %588 to i64*
  %591 = load i64, i64* %590
  store i64 %591, i64* %RBP, align 8, !tbaa !2428
  store i64 %589, i64* %587, align 8, !tbaa !2428
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 1
  store i64 %593, i64* %PC
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %596 = load i64, i64* %595, align 8, !tbaa !2428
  %597 = inttoptr i64 %596 to i64*
  %598 = load i64, i64* %597
  store i64 %598, i64* %594, align 8, !tbaa !2428
  %599 = add i64 %596, 8
  store i64 %599, i64* %595, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_400611:                                     ; preds = %block_40065c, %block_400600
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_400600 ], [ %MEMORY.0, %block_40065c ]
  %600 = load i64, i64* %RBP
  %601 = sub i64 %600, 16
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 3
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i32*
  %605 = load i32, i32* %604
  %606 = zext i32 %605 to i64
  store i64 %606, i64* %RAX, align 8, !tbaa !2428
  %607 = load i64, i64* %RBP
  %608 = sub i64 %607, 8
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %608 to i32*
  %612 = load i32, i32* %611
  %613 = sext i32 %612 to i64
  store i64 %613, i64* %RCX, align 8, !tbaa !2428
  %614 = load i32, i32* %EAX
  %615 = zext i32 %614 to i64
  %616 = load i64, i64* %RCX
  %617 = mul i64 %616, 4
  %618 = add i64 %617, ptrtoint (%piecemax_type* @piecemax to i64)
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  %622 = load i32, i32* %621
  %623 = sub i32 %614, %622
  %624 = icmp ult i32 %614, %622
  %625 = zext i1 %624 to i8
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %625, i8* %626, align 1, !tbaa !2433
  %627 = and i32 %623, 255
  %628 = call i32 @llvm.ctpop.i32(i32 %627) #16
  %629 = trunc i32 %628 to i8
  %630 = and i8 %629, 1
  %631 = xor i8 %630, 1
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %631, i8* %632, align 1, !tbaa !2447
  %633 = xor i32 %622, %614
  %634 = xor i32 %633, %623
  %635 = lshr i32 %634, 4
  %636 = trunc i32 %635 to i8
  %637 = and i8 %636, 1
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %637, i8* %638, align 1, !tbaa !2448
  %639 = icmp eq i32 %623, 0
  %640 = zext i1 %639 to i8
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %640, i8* %641, align 1, !tbaa !2449
  %642 = lshr i32 %623, 31
  %643 = trunc i32 %642 to i8
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %643, i8* %644, align 1, !tbaa !2450
  %645 = lshr i32 %614, 31
  %646 = lshr i32 %622, 31
  %647 = xor i32 %646, %645
  %648 = xor i32 %642, %645
  %649 = add nuw nsw i32 %648, %647
  %650 = icmp eq i32 %649, 2
  %651 = zext i1 %650 to i8
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %651, i8* %652, align 1, !tbaa !2451
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 80
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 6
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 6
  store i64 %658, i64* %PC
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %660 = load i8, i8* %659, align 1, !tbaa !2449
  %661 = icmp eq i8 %660, 0
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %663 = load i8, i8* %662, align 1, !tbaa !2450
  %664 = icmp ne i8 %663, 0
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %666 = load i8, i8* %665, align 1, !tbaa !2451
  %667 = icmp ne i8 %666, 0
  %668 = xor i1 %664, %667
  %669 = xor i1 %668, true
  %670 = and i1 %661, %669
  %671 = zext i1 %670 to i8
  store i8 %671, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %673 = select i1 %670, i64 %654, i64 %656
  store i64 %673, i64* %672, align 8, !tbaa !2428
  %674 = load i8, i8* %BRANCH_TAKEN
  %675 = icmp eq i8 %674, 1
  br i1 %675, label %block_40066f, label %block_400625
}

; Function Attrs: noinline
define %struct.Memory* @sub_4006f0_Remove(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4006f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = load i64, i64* %RBP
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %34 = load i64, i64* %33, align 8, !tbaa !2428
  %35 = add i64 %34, -8
  %36 = inttoptr i64 %35 to i64*
  store i64 %30, i64* %36
  store i64 %35, i64* %33, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 3
  store i64 %39, i64* %PC
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 4
  %42 = load i32, i32* %EDI
  %43 = zext i32 %42 to i64
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  %46 = inttoptr i64 %41 to i32*
  store i32 %42, i32* %46
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 8
  %49 = load i32, i32* %ESI
  %50 = zext i32 %49 to i64
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  %53 = inttoptr i64 %48 to i32*
  store i32 %49, i32* %53
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 12
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 7
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i32*
  store i32 0, i32* %58
  br label %block_400701

block_40075f:                                     ; preds = %block_400701
  %59 = load i64, i64* %RBP
  %60 = sub i64 %59, 4
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to i32*
  %64 = load i32, i32* %63
  %65 = sext i32 %64 to i64
  store i64 %65, i64* %RAX, align 8, !tbaa !2428
  %66 = load i64, i64* %RAX
  %67 = mul i64 %66, 4
  %68 = add i64 %67, ptrtoint (%class_type* @class to i64)
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 8
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %68 to i32*
  %72 = load i32, i32* %71
  %73 = sext i32 %72 to i64
  store i64 %73, i64* %RAX, align 8, !tbaa !2428
  %74 = load i64, i64* %RAX
  %75 = mul i64 %74, 4
  %76 = add i64 %75, ptrtoint (%piececount_type* @piececount to i64)
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 7
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %76 to i32*
  %80 = load i32, i32* %79
  %81 = zext i32 %80 to i64
  store i64 %81, i64* %RCX, align 8, !tbaa !2428
  %82 = load i64, i64* %RCX
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 3
  store i64 %84, i64* %PC
  %85 = trunc i64 %82 to i32
  %86 = add i32 1, %85
  %87 = zext i32 %86 to i64
  store i64 %87, i64* %RCX, align 8, !tbaa !2428
  %88 = icmp ult i32 %86, %85
  %89 = icmp ult i32 %86, 1
  %90 = or i1 %88, %89
  %91 = zext i1 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %91, i8* %92, align 1, !tbaa !2433
  %93 = and i32 %86, 255
  %94 = call i32 @llvm.ctpop.i32(i32 %93) #16
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = xor i8 %96, 1
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %97, i8* %98, align 1, !tbaa !2447
  %99 = xor i64 1, %82
  %100 = trunc i64 %99 to i32
  %101 = xor i32 %100, %86
  %102 = lshr i32 %101, 4
  %103 = trunc i32 %102 to i8
  %104 = and i8 %103, 1
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %104, i8* %105, align 1, !tbaa !2448
  %106 = icmp eq i32 %86, 0
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %107, i8* %108, align 1, !tbaa !2449
  %109 = lshr i32 %86, 31
  %110 = trunc i32 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %110, i8* %111, align 1, !tbaa !2450
  %112 = lshr i32 %85, 31
  %113 = xor i32 %109, %112
  %114 = add nuw nsw i32 %113, %109
  %115 = icmp eq i32 %114, 2
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %116, i8* %117, align 1, !tbaa !2451
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 4
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %119 to i32*
  %123 = load i32, i32* %122
  %124 = sext i32 %123 to i64
  store i64 %124, i64* %RAX, align 8, !tbaa !2428
  %125 = load i64, i64* %RAX
  %126 = mul i64 %125, 4
  %127 = add i64 %126, ptrtoint (%class_type* @class to i64)
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 8
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i32*
  %131 = load i32, i32* %130
  %132 = sext i32 %131 to i64
  store i64 %132, i64* %RAX, align 8, !tbaa !2428
  %133 = load i64, i64* %RAX
  %134 = mul i64 %133, 4
  %135 = add i64 %134, ptrtoint (%piececount_type* @piececount to i64)
  %136 = load i32, i32* %ECX
  %137 = zext i32 %136 to i64
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 7
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %135 to i32*
  store i32 %136, i32* %140
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 1
  store i64 %142, i64* %PC
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %144 = load i64, i64* %143, align 8, !tbaa !2428
  %145 = add i64 %144, 8
  %146 = inttoptr i64 %144 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RBP, align 8, !tbaa !2428
  store i64 %145, i64* %143, align 8, !tbaa !2428
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 1
  store i64 %149, i64* %PC
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %152 = load i64, i64* %151, align 8, !tbaa !2428
  %153 = inttoptr i64 %152 to i64*
  %154 = load i64, i64* %153
  store i64 %154, i64* %150, align 8, !tbaa !2428
  %155 = add i64 %152, 8
  store i64 %155, i64* %151, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_400715:                                     ; preds = %block_400701
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 10
  store i64 %157, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RBP
  %159 = sub i64 %158, 4
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 4
  store i64 %161, i64* %PC
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162
  %164 = sext i32 %163 to i64
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = load i64, i64* %RCX
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC
  %168 = shl i64 %165, 10
  %169 = icmp slt i64 %168, 0
  %170 = shl i64 %168, 1
  store i64 %170, i64* %RCX, align 8, !tbaa !2428
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %172 = zext i1 %169 to i8
  store i8 %172, i8* %171, align 1, !tbaa !2432
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %174 = trunc i64 %170 to i32
  %175 = and i32 %174, 254
  %176 = call i32 @llvm.ctpop.i32(i32 %175) #16
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  store i8 %179, i8* %173, align 1, !tbaa !2432
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %180, align 1, !tbaa !2432
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %182 = icmp eq i64 %170, 0
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %181, align 1, !tbaa !2432
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %185 = lshr i64 %170, 63
  %186 = trunc i64 %185 to i8
  store i8 %186, i8* %184, align 1, !tbaa !2432
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %187, align 1, !tbaa !2432
  %188 = load i64, i64* %RAX
  %189 = load i64, i64* %RCX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 3
  store i64 %191, i64* %PC
  %192 = add i64 %189, %188
  store i64 %192, i64* %RAX, align 8, !tbaa !2428
  %193 = icmp ult i64 %192, %188
  %194 = icmp ult i64 %192, %189
  %195 = or i1 %193, %194
  %196 = zext i1 %195 to i8
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %196, i8* %197, align 1, !tbaa !2433
  %198 = trunc i64 %192 to i32
  %199 = and i32 %198, 255
  %200 = call i32 @llvm.ctpop.i32(i32 %199) #16
  %201 = trunc i32 %200 to i8
  %202 = and i8 %201, 1
  %203 = xor i8 %202, 1
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %203, i8* %204, align 1, !tbaa !2447
  %205 = xor i64 %189, %188
  %206 = xor i64 %205, %192
  %207 = lshr i64 %206, 4
  %208 = trunc i64 %207 to i8
  %209 = and i8 %208, 1
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %209, i8* %210, align 1, !tbaa !2448
  %211 = icmp eq i64 %192, 0
  %212 = zext i1 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %212, i8* %213, align 1, !tbaa !2449
  %214 = lshr i64 %192, 63
  %215 = trunc i64 %214 to i8
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %215, i8* %216, align 1, !tbaa !2450
  %217 = lshr i64 %188, 63
  %218 = lshr i64 %189, 63
  %219 = xor i64 %214, %217
  %220 = xor i64 %214, %218
  %221 = add nuw nsw i64 %219, %220
  %222 = icmp eq i64 %221, 2
  %223 = zext i1 %222 to i8
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %223, i8* %224, align 1, !tbaa !2451
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  %230 = load i32, i32* %229
  %231 = sext i32 %230 to i64
  store i64 %231, i64* %RCX, align 8, !tbaa !2428
  %232 = load i64, i64* %RAX
  %233 = load i64, i64* %RCX
  %234 = mul i64 %233, 4
  %235 = add i64 %234, %232
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 4
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %235 to i32*
  %239 = load i32, i32* %238
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %240, align 1, !tbaa !2433
  %241 = and i32 %239, 255
  %242 = call i32 @llvm.ctpop.i32(i32 %241) #16
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = xor i8 %244, 1
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %245, i8* %246, align 1, !tbaa !2447
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %247, align 1, !tbaa !2448
  %248 = icmp eq i32 %239, 0
  %249 = zext i1 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %249, i8* %250, align 1, !tbaa !2449
  %251 = lshr i32 %239, 31
  %252 = trunc i32 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %252, i8* %253, align 1, !tbaa !2450
  %254 = lshr i32 %239, 31
  %255 = xor i32 %251, %254
  %256 = add nuw nsw i32 %255, %254
  %257 = icmp eq i32 %256, 2
  %258 = zext i1 %257 to i8
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %258, i8* %259, align 1, !tbaa !2451
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 26
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 6
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 6
  store i64 %265, i64* %PC
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %267 = load i8, i8* %266, align 1, !tbaa !2449
  store i8 %267, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %269 = icmp ne i8 %267, 0
  %270 = select i1 %269, i64 %261, i64 %263
  store i64 %270, i64* %268, align 8, !tbaa !2428
  %271 = load i8, i8* %BRANCH_TAKEN
  %272 = icmp eq i8 %271, 1
  br i1 %272, label %block_40074c, label %block_400738

block_40074c:                                     ; preds = %block_400738, %block_400715
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_400715 ], [ %MEMORY.1, %block_400738 ]
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 5
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 5
  store i64 %276, i64* %PC
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %274, i64* %277, align 8, !tbaa !2428
  %278 = load i64, i64* %RBP
  %279 = sub i64 %278, 12
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 3
  store i64 %281, i64* %PC
  %282 = inttoptr i64 %279 to i32*
  %283 = load i32, i32* %282
  %284 = zext i32 %283 to i64
  store i64 %284, i64* %RAX, align 8, !tbaa !2428
  %285 = load i64, i64* %RAX
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 3
  store i64 %287, i64* %PC
  %288 = trunc i64 %285 to i32
  %289 = add i32 1, %288
  %290 = zext i32 %289 to i64
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = icmp ult i32 %289, %288
  %292 = icmp ult i32 %289, 1
  %293 = or i1 %291, %292
  %294 = zext i1 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %294, i8* %295, align 1, !tbaa !2433
  %296 = and i32 %289, 255
  %297 = call i32 @llvm.ctpop.i32(i32 %296) #16
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  %300 = xor i8 %299, 1
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %300, i8* %301, align 1, !tbaa !2447
  %302 = xor i64 1, %285
  %303 = trunc i64 %302 to i32
  %304 = xor i32 %303, %289
  %305 = lshr i32 %304, 4
  %306 = trunc i32 %305 to i8
  %307 = and i8 %306, 1
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %307, i8* %308, align 1, !tbaa !2448
  %309 = icmp eq i32 %289, 0
  %310 = zext i1 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %310, i8* %311, align 1, !tbaa !2449
  %312 = lshr i32 %289, 31
  %313 = trunc i32 %312 to i8
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %313, i8* %314, align 1, !tbaa !2450
  %315 = lshr i32 %288, 31
  %316 = xor i32 %312, %315
  %317 = add nuw nsw i32 %316, %312
  %318 = icmp eq i32 %317, 2
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %319, i8* %320, align 1, !tbaa !2451
  %321 = load i64, i64* %RBP
  %322 = sub i64 %321, 12
  %323 = load i32, i32* %EAX
  %324 = zext i32 %323 to i64
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 3
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %322 to i32*
  store i32 %323, i32* %327
  %328 = load i64, i64* %PC
  %329 = sub i64 %328, 89
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 5
  store i64 %331, i64* %PC
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %329, i64* %332, align 8, !tbaa !2428
  br label %block_400701

block_400738:                                     ; preds = %block_400715
  %333 = load i64, i64* %RBP
  %334 = sub i64 %333, 8
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 3
  store i64 %336, i64* %PC
  %337 = inttoptr i64 %334 to i32*
  %338 = load i32, i32* %337
  %339 = zext i32 %338 to i64
  store i64 %339, i64* %RAX, align 8, !tbaa !2428
  %340 = load i64, i64* %RAX
  %341 = load i64, i64* %RBP
  %342 = sub i64 %341, 12
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 3
  store i64 %344, i64* %PC
  %345 = trunc i64 %340 to i32
  %346 = inttoptr i64 %342 to i32*
  %347 = load i32, i32* %346
  %348 = add i32 %347, %345
  %349 = zext i32 %348 to i64
  store i64 %349, i64* %RAX, align 8, !tbaa !2428
  %350 = icmp ult i32 %348, %345
  %351 = icmp ult i32 %348, %347
  %352 = or i1 %350, %351
  %353 = zext i1 %352 to i8
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %353, i8* %354, align 1, !tbaa !2433
  %355 = and i32 %348, 255
  %356 = call i32 @llvm.ctpop.i32(i32 %355) #16
  %357 = trunc i32 %356 to i8
  %358 = and i8 %357, 1
  %359 = xor i8 %358, 1
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %359, i8* %360, align 1, !tbaa !2447
  %361 = xor i32 %347, %345
  %362 = xor i32 %361, %348
  %363 = lshr i32 %362, 4
  %364 = trunc i32 %363 to i8
  %365 = and i8 %364, 1
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %365, i8* %366, align 1, !tbaa !2448
  %367 = icmp eq i32 %348, 0
  %368 = zext i1 %367 to i8
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %368, i8* %369, align 1, !tbaa !2449
  %370 = lshr i32 %348, 31
  %371 = trunc i32 %370 to i8
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %371, i8* %372, align 1, !tbaa !2450
  %373 = lshr i32 %345, 31
  %374 = lshr i32 %347, 31
  %375 = xor i32 %370, %373
  %376 = xor i32 %370, %374
  %377 = add nuw nsw i32 %375, %376
  %378 = icmp eq i32 %377, 2
  %379 = zext i1 %378 to i8
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %379, i8* %380, align 1, !tbaa !2451
  %381 = load i32, i32* %EAX
  %382 = zext i32 %381 to i64
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 3
  store i64 %384, i64* %PC
  %385 = shl i64 %382, 32
  %386 = ashr exact i64 %385, 32
  store i64 %386, i64* %RCX, align 8, !tbaa !2428
  %387 = load i64, i64* %RCX
  %388 = mul i64 %387, 4
  %389 = add i64 %388, ptrtoint (%puzzl_type* @puzzl to i64)
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 11
  store i64 %391, i64* %PC
  %392 = inttoptr i64 %389 to i32*
  store i32 0, i32* %392
  br label %block_40074c

block_400701:                                     ; preds = %block_40074c, %block_4006f0
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_4006f0 ], [ %MEMORY.0, %block_40074c ]
  %393 = load i64, i64* %RBP
  %394 = sub i64 %393, 12
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 3
  store i64 %396, i64* %PC
  %397 = inttoptr i64 %394 to i32*
  %398 = load i32, i32* %397
  %399 = zext i32 %398 to i64
  store i64 %399, i64* %RAX, align 8, !tbaa !2428
  %400 = load i64, i64* %RBP
  %401 = sub i64 %400, 4
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 4
  store i64 %403, i64* %PC
  %404 = inttoptr i64 %401 to i32*
  %405 = load i32, i32* %404
  %406 = sext i32 %405 to i64
  store i64 %406, i64* %RCX, align 8, !tbaa !2428
  %407 = load i32, i32* %EAX
  %408 = zext i32 %407 to i64
  %409 = load i64, i64* %RCX
  %410 = mul i64 %409, 4
  %411 = add i64 %410, ptrtoint (%piecemax_type* @piecemax to i64)
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 7
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %411 to i32*
  %415 = load i32, i32* %414
  %416 = sub i32 %407, %415
  %417 = icmp ult i32 %407, %415
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %418, i8* %419, align 1, !tbaa !2433
  %420 = and i32 %416, 255
  %421 = call i32 @llvm.ctpop.i32(i32 %420) #16
  %422 = trunc i32 %421 to i8
  %423 = and i8 %422, 1
  %424 = xor i8 %423, 1
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %424, i8* %425, align 1, !tbaa !2447
  %426 = xor i32 %415, %407
  %427 = xor i32 %426, %416
  %428 = lshr i32 %427, 4
  %429 = trunc i32 %428 to i8
  %430 = and i8 %429, 1
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %430, i8* %431, align 1, !tbaa !2448
  %432 = icmp eq i32 %416, 0
  %433 = zext i1 %432 to i8
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %433, i8* %434, align 1, !tbaa !2449
  %435 = lshr i32 %416, 31
  %436 = trunc i32 %435 to i8
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %436, i8* %437, align 1, !tbaa !2450
  %438 = lshr i32 %407, 31
  %439 = lshr i32 %415, 31
  %440 = xor i32 %439, %438
  %441 = xor i32 %435, %438
  %442 = add nuw nsw i32 %441, %440
  %443 = icmp eq i32 %442, 2
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %444, i8* %445, align 1, !tbaa !2451
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 80
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 6
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 6
  store i64 %451, i64* %PC
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %453 = load i8, i8* %452, align 1, !tbaa !2449
  %454 = icmp eq i8 %453, 0
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %456 = load i8, i8* %455, align 1, !tbaa !2450
  %457 = icmp ne i8 %456, 0
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %459 = load i8, i8* %458, align 1, !tbaa !2451
  %460 = icmp ne i8 %459, 0
  %461 = xor i1 %457, %460
  %462 = xor i1 %461, true
  %463 = and i1 %454, %462
  %464 = zext i1 %463 to i8
  store i8 %464, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %466 = select i1 %463, i64 %447, i64 %449
  store i64 %466, i64* %465, align 8, !tbaa !2428
  %467 = load i8, i8* %BRANCH_TAKEN
  %468 = icmp eq i8 %467, 1
  br i1 %468, label %block_40075f, label %block_400715
}

; Function Attrs: noinline
define %struct.Memory* @sub_401354__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401354:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2433
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2447
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2450
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2451
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2433
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2447
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2451
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4012e0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4012e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_601df0__init_array_type* @seg_601df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_601df0__init_array_type* @seg_601df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2433
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2447
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2448
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2449
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2450
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2451
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2433
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2447
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2448
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2449
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2450
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2451
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2432
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2432
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2432
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2432
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2432
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2432
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 3884
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_4003e0__init_proc(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2433
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2447
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2449
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2450
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2451
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2448
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2449
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_401336, label %block_401316

block_401336:                                     ; preds = %block_401320, %block_4012e0
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_4012e0 ], [ %387, %block_401320 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2433
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2447
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2448
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2449
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2450
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2451
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401316:                                     ; preds = %block_4012e0
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2433
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2447
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2449
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2450
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2451
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2448
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_401320

block_401320:                                     ; preds = %block_401320, %block_401316
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_401316 ], [ %387, %block_401320 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2433
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2447
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2448
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2449
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2450
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2451
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2433
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2447
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2448
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2449
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2450
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2451
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2449
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_401320, label %block_401336
}

; Function Attrs: noinline
define %struct.Memory* @sub_400460_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400460:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %37 = icmp ult i64 %33, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2433
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2447
  %47 = xor i64 ptrtoint (%__bss_start_type* @__bss_start to i64), %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2448
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2449
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2450
  %59 = lshr i64 %33, 63
  %60 = xor i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), %59
  %61 = xor i64 %56, %59
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2451
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 25
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 2
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %76 = load i8, i8* %75, align 1, !tbaa !2449
  store i8 %76, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = icmp ne i8 %76, 0
  %79 = select i1 %78, i64 %70, i64 %72
  store i64 %79, i64* %77, align 8, !tbaa !2428
  %80 = load i8, i8* %BRANCH_TAKEN
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %block_400488, label %block_400471

block_40047b:                                     ; preds = %block_400471
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 1
  store i64 %83, i64* %PC
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %85 = load i64, i64* %84, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RBP, align 8, !tbaa !2428
  store i64 %86, i64* %84, align 8, !tbaa !2428
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 5
  store i64 %90, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %91 = load i64, i64* %RAX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 2
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %91, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  switch i64 %95, label %163 [
    i64 4195466, label %block_40048a
    i64 4195459, label %block_400483
  ]

block_400471:                                     ; preds = %block_400460
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 5
  store i64 %97, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %RAX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 3
  store i64 %101, i64* %PC
  %102 = and i64 %99, %98
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %103, align 1, !tbaa !2433
  %104 = trunc i64 %102 to i32
  %105 = and i32 %104, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2447
  %111 = icmp eq i64 %102, 0
  %112 = zext i1 %111 to i8
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %112, i8* %113, align 1, !tbaa !2449
  %114 = lshr i64 %102, 63
  %115 = trunc i64 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %115, i8* %116, align 1, !tbaa !2450
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %118, align 1, !tbaa !2448
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 15
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 2
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 2
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %126 = load i8, i8* %125, align 1, !tbaa !2449
  store i8 %126, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %128 = icmp ne i8 %126, 0
  %129 = select i1 %128, i64 %120, i64 %122
  store i64 %129, i64* %127, align 8, !tbaa !2428
  %130 = load i8, i8* %BRANCH_TAKEN
  %131 = icmp eq i8 %130, 1
  br i1 %131, label %block_400488, label %block_40047b

block_400488:                                     ; preds = %block_400483, %block_400471, %block_400460
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400460 ], [ %2, %block_400471 ], [ %2, %block_400483 ]
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 1
  store i64 %133, i64* %PC
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %135 = load i64, i64* %134, align 8, !tbaa !2428
  %136 = add i64 %135, 8
  %137 = inttoptr i64 %135 to i64*
  %138 = load i64, i64* %137
  store i64 %138, i64* %RBP, align 8, !tbaa !2428
  store i64 %136, i64* %134, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 1
  store i64 %140, i64* %PC
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %143 = load i64, i64* %142, align 8, !tbaa !2428
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %141, align 8, !tbaa !2428
  %146 = add i64 %143, 8
  store i64 %146, i64* %142, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40048a:                                     ; preds = %block_40047b
  %147 = load i64, i64* %RAX
  %148 = load i64, i64* %RAX
  %149 = add i64 %148, %147
  %150 = load i16, i16* %AX
  %151 = zext i16 %150 to i64
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 6
  store i64 %153, i64* %PC
  %154 = load i64, i64* %PC
  %155 = tail call %struct.Memory* @sub_400490_register_tm_clones(%struct.State* %0, i64 %154, %struct.Memory* %2)
  ret %struct.Memory* %155

block_400483:                                     ; preds = %block_40047b
  %156 = load i64, i64* %RAX
  %157 = load i64, i64* %RAX
  %158 = add i64 %157, %156
  %159 = load i32, i32* %EAX
  %160 = zext i32 %159 to i64
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 5
  store i64 %162, i64* %PC
  br label %block_400488

; <label>:163:                                    ; preds = %block_40047b
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %164, %struct.Memory* %2)
  ret %struct.Memory* %165
}

; Function Attrs: noinline
define %struct.Memory* @sub_400490_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400490:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, ptrtoint (%__bss_start_type* @__bss_start to i64)
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2433
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2447
  %50 = xor i64 ptrtoint (%__bss_start_type* @__bss_start to i64), %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2450
  %62 = lshr i64 %36, 63
  %63 = xor i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), %62
  %64 = xor i64 %59, %62
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2451
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RBP, align 8, !tbaa !2428
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = ashr i64 %72, 2
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = ashr i64 %75, 1
  store i64 %78, i64* %RSI, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %77, i8* %79, align 1, !tbaa !2432
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = call i32 @llvm.ctpop.i32(i32 %82) #16
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %80, align 1, !tbaa !2432
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %87, align 1, !tbaa !2432
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %88, align 1, !tbaa !2432
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %92 = lshr i64 %78, 63
  %93 = trunc i64 %92 to i8
  store i8 %93, i8* %91, align 1, !tbaa !2432
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %94, align 1, !tbaa !2432
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = lshr i64 %98, 62
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  %104 = lshr i64 %101, 1
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %103, i8* %105, align 1, !tbaa !2432
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %106, align 1, !tbaa !2432
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %113, align 1, !tbaa !2432
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %115 = icmp eq i64 %104, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %114, align 1, !tbaa !2432
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %117, align 1, !tbaa !2432
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %118, align 1, !tbaa !2432
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = add i64 %120, %119
  store i64 %123, i64* %RSI, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %119
  %125 = icmp ult i64 %123, %120
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 %120, %119
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %119, 63
  %149 = lshr i64 %120, 63
  %150 = xor i64 %145, %148
  %151 = xor i64 %145, %149
  %152 = add nuw nsw i64 %150, %151
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %154, i8* %155, align 1, !tbaa !2451
  %156 = load i64, i64* %RSI
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = trunc i64 %156 to i8
  %160 = and i8 %159, 1
  %161 = ashr i64 %156, 1
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %162, align 1, !tbaa !2432
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #16
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %163, align 1, !tbaa !2432
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2432
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = icmp eq i64 %161, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %171, align 1, !tbaa !2432
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %175 = lshr i64 %161, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %174, align 1, !tbaa !2432
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %177, align 1, !tbaa !2432
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 23
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 2
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 2
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %185 = load i8, i8* %184, align 1, !tbaa !2449
  store i8 %185, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %187 = icmp ne i8 %185, 0
  %188 = select i1 %187, i64 %179, i64 %181
  store i64 %188, i64* %186, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  br i1 %190, label %block_4004c8, label %block_4004b3

block_4004bd:                                     ; preds = %block_4004b3
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 1
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %RBP, align 8, !tbaa !2428
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 5
  store i64 %199, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %200 = load i64, i64* %RAX
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 2
  store i64 %202, i64* %PC
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %203, align 8, !tbaa !2428
  %204 = load i64, i64* %PC
  switch i64 %204, label %270 [
    i64 4195530, label %block_4004ca
    i64 4195525, label %block_4004c5
  ]

block_4004ca:                                     ; preds = %block_4004bd
  %205 = load i64, i64* %RAX
  %206 = load i64, i64* %RAX
  %207 = add i64 %206, %205
  %208 = load i16, i16* %AX
  %209 = zext i16 %208 to i64
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 6
  store i64 %211, i64* %PC
  %212 = load i64, i64* %PC
  %213 = tail call %struct.Memory* @sub_4004d0___do_global_dtors_aux(%struct.State* %0, i64 %212, %struct.Memory* %2)
  ret %struct.Memory* %213

block_4004b3:                                     ; preds = %block_400490
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %RAX
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 3
  store i64 %219, i64* %PC
  %220 = and i64 %217, %216
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %221, align 1, !tbaa !2433
  %222 = trunc i64 %220 to i32
  %223 = and i32 %222, 255
  %224 = call i32 @llvm.ctpop.i32(i32 %223) #16
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %227, i8* %228, align 1, !tbaa !2447
  %229 = icmp eq i64 %220, 0
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %230, i8* %231, align 1, !tbaa !2449
  %232 = lshr i64 %220, 63
  %233 = trunc i64 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %233, i8* %234, align 1, !tbaa !2450
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %235, align 1, !tbaa !2451
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %236, align 1, !tbaa !2448
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 13
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 2
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 2
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %244 = load i8, i8* %243, align 1, !tbaa !2449
  store i8 %244, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %246 = icmp ne i8 %244, 0
  %247 = select i1 %246, i64 %238, i64 %240
  store i64 %247, i64* %245, align 8, !tbaa !2428
  %248 = load i8, i8* %BRANCH_TAKEN
  %249 = icmp eq i8 %248, 1
  br i1 %249, label %block_4004c8, label %block_4004bd

block_4004c8:                                     ; preds = %block_4004c5, %block_4004b3, %block_400490
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400490 ], [ %2, %block_4004b3 ], [ %2, %block_4004c5 ]
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 1
  store i64 %251, i64* %PC
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %253 = load i64, i64* %252, align 8, !tbaa !2428
  %254 = add i64 %253, 8
  %255 = inttoptr i64 %253 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %RBP, align 8, !tbaa !2428
  store i64 %254, i64* %252, align 8, !tbaa !2428
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 1
  store i64 %258, i64* %PC
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %261 = load i64, i64* %260, align 8, !tbaa !2428
  %262 = inttoptr i64 %261 to i64*
  %263 = load i64, i64* %262
  store i64 %263, i64* %259, align 8, !tbaa !2428
  %264 = add i64 %261, 8
  store i64 %264, i64* %260, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4004c5:                                     ; preds = %block_4004bd
  %265 = load i64, i64* %RAX
  %266 = load i32, i32* %EAX
  %267 = zext i32 %266 to i64
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 3
  store i64 %269, i64* %PC
  br label %block_4004c8

; <label>:270:                                    ; preds = %block_4004bd
  %271 = load i64, i64* %PC
  %272 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %271, %struct.Memory* %2)
  ret %struct.Memory* %272
}

; Function Attrs: noinline
define %struct.Memory* @sub_4012a0_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4012a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2433
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2447
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2448
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2449
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 4
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 7
  store i64 %63, i64* %PC
  %64 = inttoptr i64 %61 to i32*
  store i32 0, i32* %64
  %65 = load i64, i64* %RBP
  %66 = sub i64 %65, 8
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 7
  store i64 %68, i64* %PC
  %69 = inttoptr i64 %66 to i32*
  store i32 0, i32* %69
  br label %block_4012b6

block_4012d3:                                     ; preds = %block_4012b6
  %70 = load i64, i64* %RAX
  %71 = load i32, i32* %EAX
  %72 = zext i32 %71 to i64
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = xor i64 %72, %70
  %76 = trunc i64 %75 to i32
  %77 = and i64 %75, 4294967295
  store i64 %77, i64* %RAX, align 8, !tbaa !2428
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %78, align 1, !tbaa !2433
  %79 = and i32 %76, 255
  %80 = call i32 @llvm.ctpop.i32(i32 %79) #16
  %81 = trunc i32 %80 to i8
  %82 = and i8 %81, 1
  %83 = xor i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i32 %76, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2449
  %88 = lshr i32 %76, 31
  %89 = trunc i32 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %91, align 1, !tbaa !2451
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %92, align 1, !tbaa !2448
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 16, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 16
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2433
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2447
  %109 = xor i64 16, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2450
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2451
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %130 = load i64, i64* %129, align 8, !tbaa !2428
  %131 = add i64 %130, 8
  %132 = inttoptr i64 %130 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %RBP, align 8, !tbaa !2428
  store i64 %131, i64* %129, align 8, !tbaa !2428
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 1
  store i64 %135, i64* %PC
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %138 = load i64, i64* %137, align 8, !tbaa !2428
  %139 = inttoptr i64 %138 to i64*
  %140 = load i64, i64* %139
  store i64 %140, i64* %136, align 8, !tbaa !2428
  %141 = add i64 %138, 8
  store i64 %141, i64* %137, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4012b6:                                     ; preds = %block_4012c0, %block_4012a0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4012a0 ], [ %207, %block_4012c0 ]
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 8
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i32*
  %147 = load i32, i32* %146
  %148 = sub i32 %147, 100
  %149 = icmp ult i32 %147, 100
  %150 = zext i1 %149 to i8
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %150, i8* %151, align 1, !tbaa !2433
  %152 = and i32 %148, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2447
  %158 = xor i32 %147, 100
  %159 = xor i32 %158, %148
  %160 = lshr i32 %159, 4
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2448
  %164 = icmp eq i32 %148, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2449
  %167 = lshr i32 %148, 31
  %168 = trunc i32 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2450
  %170 = lshr i32 %147, 31
  %171 = xor i32 %167, %170
  %172 = add nuw nsw i32 %171, %170
  %173 = icmp eq i32 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2451
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 25
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 6
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 6
  store i64 %181, i64* %PC
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %183 = load i8, i8* %182, align 1, !tbaa !2450
  %184 = icmp ne i8 %183, 0
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %186 = load i8, i8* %185, align 1, !tbaa !2451
  %187 = icmp ne i8 %186, 0
  %188 = xor i1 %184, %187
  %189 = xor i1 %188, true
  %190 = zext i1 %189 to i8
  store i8 %190, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %192 = select i1 %188, i64 %179, i64 %177
  store i64 %192, i64* %191, align 8, !tbaa !2428
  %193 = load i8, i8* %BRANCH_TAKEN
  %194 = icmp eq i8 %193, 1
  br i1 %194, label %block_4012d3, label %block_4012c0

block_4012c0:                                     ; preds = %block_4012b6
  %195 = load i64, i64* %PC
  %196 = sub i64 %195, 2656
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 5
  store i64 %200, i64* %PC
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %202 = load i64, i64* %201, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %198, i64* %204
  store i64 %203, i64* %201, align 8, !tbaa !2428
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %196, i64* %205, align 8, !tbaa !2428
  %206 = load i64, i64* %PC
  %207 = call %struct.Memory* @sub_400860_Puzzle(%struct.State* %0, i64 %206, %struct.Memory* %MEMORY.0)
  %208 = load i64, i64* %RBP
  %209 = sub i64 %208, 8
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 3
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i32*
  %213 = load i32, i32* %212
  %214 = zext i32 %213 to i64
  store i64 %214, i64* %RAX, align 8, !tbaa !2428
  %215 = load i64, i64* %RAX
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 3
  store i64 %217, i64* %PC
  %218 = trunc i64 %215 to i32
  %219 = add i32 1, %218
  %220 = zext i32 %219 to i64
  store i64 %220, i64* %RAX, align 8, !tbaa !2428
  %221 = icmp ult i32 %219, %218
  %222 = icmp ult i32 %219, 1
  %223 = or i1 %221, %222
  %224 = zext i1 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %224, i8* %225, align 1, !tbaa !2433
  %226 = and i32 %219, 255
  %227 = call i32 @llvm.ctpop.i32(i32 %226) #16
  %228 = trunc i32 %227 to i8
  %229 = and i8 %228, 1
  %230 = xor i8 %229, 1
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %230, i8* %231, align 1, !tbaa !2447
  %232 = xor i64 1, %215
  %233 = trunc i64 %232 to i32
  %234 = xor i32 %233, %219
  %235 = lshr i32 %234, 4
  %236 = trunc i32 %235 to i8
  %237 = and i8 %236, 1
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %237, i8* %238, align 1, !tbaa !2448
  %239 = icmp eq i32 %219, 0
  %240 = zext i1 %239 to i8
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %240, i8* %241, align 1, !tbaa !2449
  %242 = lshr i32 %219, 31
  %243 = trunc i32 %242 to i8
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %243, i8* %244, align 1, !tbaa !2450
  %245 = lshr i32 %218, 31
  %246 = xor i32 %242, %245
  %247 = add nuw nsw i32 %246, %242
  %248 = icmp eq i32 %247, 2
  %249 = zext i1 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %249, i8* %250, align 1, !tbaa !2451
  %251 = load i64, i64* %RBP
  %252 = sub i64 %251, 8
  %253 = load i32, i32* %EAX
  %254 = zext i32 %253 to i64
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 3
  store i64 %256, i64* %PC
  %257 = inttoptr i64 %252 to i32*
  store i32 %253, i32* %257
  %258 = load i64, i64* %PC
  %259 = sub i64 %258, 24
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 5
  store i64 %261, i64* %PC
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %259, i64* %262, align 8, !tbaa !2428
  br label %block_4012b6
}

; Function Attrs: noinline
define %struct.Memory* @sub_400420__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400420:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2433
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2447
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2449
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2450
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2451
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2448
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2433
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2447
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2449
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2450
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2451
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2448
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401350___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_4012e0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_601ff0__got_type, %seg_601ff0__got_type* @seg_601ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_619230___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_400530_Rand(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400530:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC
  store i64 %31, i64* %RBP, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 12
  store i64 %35, i64* %PC
  %36 = load i64, i64* bitcast (%seed_type* @seed to i64*)
  %37 = sext i64 %36 to i128
  %38 = and i128 %37, -18446744073709551616
  %39 = zext i64 %36 to i128
  %40 = or i128 %38, %39
  %41 = mul nsw i128 %40, 1309
  %42 = trunc i128 %41 to i64
  store i64 %42, i64* %RAX, align 8, !tbaa !2428
  %43 = sext i64 %42 to i128
  %44 = icmp ne i128 %43, %41
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %45, i8* %46, align 1, !tbaa !2433
  %47 = trunc i128 %41 to i32
  %48 = and i32 %47, 255
  %49 = call i32 @llvm.ctpop.i32(i32 %48) #16
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = xor i8 %51, 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %52, i8* %53, align 1, !tbaa !2447
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %54, align 1, !tbaa !2448
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %55, align 1, !tbaa !2449
  %56 = lshr i64 %42, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2450
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 6
  store i64 %62, i64* %PC
  %63 = add i64 13849, %60
  store i64 %63, i64* %RAX, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %60
  %65 = icmp ult i64 %63, 13849
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %67, i8* %68, align 1, !tbaa !2433
  %69 = trunc i64 %63 to i32
  %70 = and i32 %69, 255
  %71 = call i32 @llvm.ctpop.i32(i32 %70) #16
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %74, i8* %75, align 1, !tbaa !2447
  %76 = xor i64 13849, %60
  %77 = xor i64 %76, %63
  %78 = lshr i64 %77, 4
  %79 = trunc i64 %78 to i8
  %80 = and i8 %79, 1
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %80, i8* %81, align 1, !tbaa !2448
  %82 = icmp eq i64 %63, 0
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %83, i8* %84, align 1, !tbaa !2449
  %85 = lshr i64 %63, 63
  %86 = trunc i64 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %86, i8* %87, align 1, !tbaa !2450
  %88 = lshr i64 %60, 63
  %89 = xor i64 %85, %88
  %90 = add nuw nsw i64 %89, %85
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %92, i8* %93, align 1, !tbaa !2451
  %94 = load i64, i64* %RAX
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 6
  store i64 %96, i64* %PC
  %97 = and i64 65535, %94
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %98, align 1, !tbaa !2433
  %99 = trunc i64 %97 to i32
  %100 = and i32 %99, 255
  %101 = call i32 @llvm.ctpop.i32(i32 %100) #16
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %104, i8* %105, align 1, !tbaa !2447
  %106 = icmp eq i64 %97, 0
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %107, i8* %108, align 1, !tbaa !2449
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %109, align 1, !tbaa !2450
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %110, align 1, !tbaa !2451
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %111, align 1, !tbaa !2448
  %112 = load i64, i64* %RAX
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 8
  store i64 %114, i64* %PC
  store i64 %112, i64* bitcast (%seed_type* @seed to i64*)
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 8
  store i64 %116, i64* %PC
  %117 = load i64, i64* bitcast (%seed_type* @seed to i64*)
  store i64 %117, i64* %RAX, align 8, !tbaa !2428
  %118 = load i32, i32* %EAX
  %119 = zext i32 %118 to i64
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 2
  store i64 %121, i64* %PC
  %122 = and i64 %119, 4294967295
  store i64 %122, i64* %RCX, align 8, !tbaa !2428
  %123 = load i32, i32* %ECX
  %124 = zext i32 %123 to i64
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 2
  store i64 %126, i64* %PC
  %127 = and i64 %124, 4294967295
  store i64 %127, i64* %RAX, align 8, !tbaa !2428
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 1
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = add i64 %131, 8
  %133 = inttoptr i64 %131 to i64*
  %134 = load i64, i64* %133
  store i64 %134, i64* %RBP, align 8, !tbaa !2428
  store i64 %132, i64* %130, align 8, !tbaa !2428
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 1
  store i64 %136, i64* %PC
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %139 = load i64, i64* %138, align 8, !tbaa !2428
  %140 = inttoptr i64 %139 to i64*
  %141 = load i64, i64* %140
  store i64 %141, i64* %137, align 8, !tbaa !2428
  %142 = add i64 %139, 8
  store i64 %142, i64* %138, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400450__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400450:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400510_Initrand(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400510:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 12
  store i64 %23, i64* %PC
  store i64 74755, i64* bitcast (%seed_type* @seed to i64*)
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 1
  store i64 %25, i64* %PC
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %27 = load i64, i64* %26, align 8, !tbaa !2428
  %28 = add i64 %27, 8
  %29 = inttoptr i64 %27 to i64*
  %30 = load i64, i64* %29
  store i64 %30, i64* %RBP, align 8, !tbaa !2428
  store i64 %28, i64* %26, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  store i64 %37, i64* %33, align 8, !tbaa !2428
  %38 = add i64 %35, 8
  store i64 %38, i64* %34, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004d0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004d0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2433
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2448
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2449
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2450
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2451
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2449
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_4004f0, label %block_4004d9

block_4004f0:                                     ; preds = %block_4004d0
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4004d9:                                     ; preds = %block_4004d0
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400460_deregister_tm_clones(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_401350___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401350:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4003e0__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4003e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2433
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2451
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_601ff0__got_type* @seg_601ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2433
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2447
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2449
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2451
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2448
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2449
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_4003f2, label %block_4003f0

block_4003f0:                                     ; preds = %block_4003e0
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_4003f2

block_4003f2:                                     ; preds = %block_4003f0, %block_4003e0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4003e0 ], [ %92, %block_4003f0 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2433
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2447
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2450
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2451
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_400860_Puzzle(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400860:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %EDI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 1
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RAX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 5
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RCX = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 7
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 9
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSI = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 11
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDI = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 13
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSP = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 15
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RBP = bitcast %union.anon* %42 to i64*
  %43 = load i64, i64* %RBP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 1
  store i64 %45, i64* %PC
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %43, i64* %49
  store i64 %48, i64* %46, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = sub i64 %53, 48
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ult i64 %53, 48
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %58, i8* %59, align 1, !tbaa !2433
  %60 = trunc i64 %56 to i32
  %61 = and i32 %60, 255
  %62 = call i32 @llvm.ctpop.i32(i32 %61) #16
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %65, i8* %66, align 1, !tbaa !2447
  %67 = xor i64 48, %53
  %68 = xor i64 %67, %56
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %71, i8* %72, align 1, !tbaa !2448
  %73 = icmp eq i64 %56, 0
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %74, i8* %75, align 1, !tbaa !2449
  %76 = lshr i64 %56, 63
  %77 = trunc i64 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %77, i8* %78, align 1, !tbaa !2450
  %79 = lshr i64 %53, 63
  %80 = xor i64 %76, %79
  %81 = add nuw nsw i64 %80, %79
  %82 = icmp eq i64 %81, 2
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %83, i8* %84, align 1, !tbaa !2451
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 7
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i32*
  store i32 0, i32* %89
  br label %block_40086f

block_400eaa:                                     ; preds = %block_400ea0
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 4
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 3
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %91 to i32*
  %95 = load i32, i32* %94
  %96 = zext i32 %95 to i64
  store i64 %96, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RBP
  %98 = sub i64 %97, 8
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 3
  store i64 %100, i64* %PC
  %101 = inttoptr i64 %98 to i32*
  %102 = load i32, i32* %101
  %103 = zext i32 %102 to i64
  store i64 %103, i64* %RCX, align 8, !tbaa !2428
  %104 = load i64, i64* %RBP
  %105 = sub i64 %104, 12
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 3
  store i64 %107, i64* %PC
  %108 = inttoptr i64 %105 to i32*
  %109 = load i32, i32* %108
  %110 = zext i32 %109 to i64
  store i64 %110, i64* %RDX, align 8, !tbaa !2428
  %111 = load i64, i64* %RDX
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 3
  store i64 %113, i64* %PC
  %114 = and i64 %111, 4294967295
  %115 = shl i64 %114, 2
  %116 = trunc i64 %115 to i32
  %117 = icmp slt i32 %116, 0
  %118 = shl i32 %116, 1
  %119 = zext i32 %118 to i64
  store i64 %119, i64* %RDX, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %121 = zext i1 %117 to i8
  store i8 %121, i8* %120, align 1, !tbaa !2432
  %122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %123 = and i32 %118, 254
  %124 = call i32 @llvm.ctpop.i32(i32 %123) #16
  %125 = trunc i32 %124 to i8
  %126 = and i8 %125, 1
  %127 = xor i8 %126, 1
  store i8 %127, i8* %122, align 1, !tbaa !2432
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %128, align 1, !tbaa !2432
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %130 = icmp eq i32 %118, 0
  %131 = zext i1 %130 to i8
  store i8 %131, i8* %129, align 1, !tbaa !2432
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %133 = lshr i32 %118, 31
  %134 = trunc i32 %133 to i8
  store i8 %134, i8* %132, align 1, !tbaa !2432
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %135, align 1, !tbaa !2432
  %136 = load i64, i64* %RCX
  %137 = load i32, i32* %EDX
  %138 = zext i32 %137 to i64
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 2
  store i64 %140, i64* %PC
  %141 = trunc i64 %136 to i32
  %142 = add i32 %137, %141
  %143 = zext i32 %142 to i64
  store i64 %143, i64* %RCX, align 8, !tbaa !2428
  %144 = icmp ult i32 %142, %141
  %145 = icmp ult i32 %142, %137
  %146 = or i1 %144, %145
  %147 = zext i1 %146 to i8
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %147, i8* %148, align 1, !tbaa !2433
  %149 = and i32 %142, 255
  %150 = call i32 @llvm.ctpop.i32(i32 %149) #16
  %151 = trunc i32 %150 to i8
  %152 = and i8 %151, 1
  %153 = xor i8 %152, 1
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %153, i8* %154, align 1, !tbaa !2447
  %155 = xor i64 %138, %136
  %156 = trunc i64 %155 to i32
  %157 = xor i32 %156, %142
  %158 = lshr i32 %157, 4
  %159 = trunc i32 %158 to i8
  %160 = and i8 %159, 1
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %160, i8* %161, align 1, !tbaa !2448
  %162 = icmp eq i32 %142, 0
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %163, i8* %164, align 1, !tbaa !2449
  %165 = lshr i32 %142, 31
  %166 = trunc i32 %165 to i8
  %167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %166, i8* %167, align 1, !tbaa !2450
  %168 = lshr i32 %141, 31
  %169 = lshr i32 %137, 31
  %170 = xor i32 %165, %168
  %171 = xor i32 %165, %169
  %172 = add nuw nsw i32 %170, %171
  %173 = icmp eq i32 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2451
  %176 = load i64, i64* %RCX
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 3
  store i64 %178, i64* %PC
  %179 = and i64 %176, 4294967295
  %180 = shl i64 %179, 2
  %181 = trunc i64 %180 to i32
  %182 = icmp slt i32 %181, 0
  %183 = shl i32 %181, 1
  %184 = zext i32 %183 to i64
  store i64 %184, i64* %RCX, align 8, !tbaa !2428
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %186 = zext i1 %182 to i8
  store i8 %186, i8* %185, align 1, !tbaa !2432
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %188 = and i32 %183, 254
  %189 = call i32 @llvm.ctpop.i32(i32 %188) #16
  %190 = trunc i32 %189 to i8
  %191 = and i8 %190, 1
  %192 = xor i8 %191, 1
  store i8 %192, i8* %187, align 1, !tbaa !2432
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %193, align 1, !tbaa !2432
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %195 = icmp eq i32 %183, 0
  %196 = zext i1 %195 to i8
  store i8 %196, i8* %194, align 1, !tbaa !2432
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %198 = lshr i32 %183, 31
  %199 = trunc i32 %198 to i8
  store i8 %199, i8* %197, align 1, !tbaa !2432
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %200, align 1, !tbaa !2432
  %201 = load i64, i64* %RAX
  %202 = load i32, i32* %ECX
  %203 = zext i32 %202 to i64
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 2
  store i64 %205, i64* %PC
  %206 = trunc i64 %201 to i32
  %207 = add i32 %202, %206
  %208 = zext i32 %207 to i64
  store i64 %208, i64* %RAX, align 8, !tbaa !2428
  %209 = icmp ult i32 %207, %206
  %210 = icmp ult i32 %207, %202
  %211 = or i1 %209, %210
  %212 = zext i1 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %212, i8* %213, align 1, !tbaa !2433
  %214 = and i32 %207, 255
  %215 = call i32 @llvm.ctpop.i32(i32 %214) #16
  %216 = trunc i32 %215 to i8
  %217 = and i8 %216, 1
  %218 = xor i8 %217, 1
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %218, i8* %219, align 1, !tbaa !2447
  %220 = xor i64 %203, %201
  %221 = trunc i64 %220 to i32
  %222 = xor i32 %221, %207
  %223 = lshr i32 %222, 4
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %225, i8* %226, align 1, !tbaa !2448
  %227 = icmp eq i32 %207, 0
  %228 = zext i1 %227 to i8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %228, i8* %229, align 1, !tbaa !2449
  %230 = lshr i32 %207, 31
  %231 = trunc i32 %230 to i8
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %231, i8* %232, align 1, !tbaa !2450
  %233 = lshr i32 %206, 31
  %234 = lshr i32 %202, 31
  %235 = xor i32 %230, %233
  %236 = xor i32 %230, %234
  %237 = add nuw nsw i32 %235, %236
  %238 = icmp eq i32 %237, 2
  %239 = zext i1 %238 to i8
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %239, i8* %240, align 1, !tbaa !2451
  %241 = load i32, i32* %EAX
  %242 = zext i32 %241 to i64
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 3
  store i64 %244, i64* %PC
  %245 = shl i64 %242, 32
  %246 = ashr exact i64 %245, 32
  store i64 %246, i64* %RSI, align 8, !tbaa !2428
  %247 = load i64, i64* %RSI
  %248 = mul i64 %247, 4
  %249 = add i64 %248, add (i64 ptrtoint (%p_type* @p to i64), i64 16384)
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 11
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i32*
  store i32 1, i32* %252
  %253 = load i64, i64* %RBP
  %254 = sub i64 %253, 12
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 3
  store i64 %256, i64* %PC
  %257 = inttoptr i64 %254 to i32*
  %258 = load i32, i32* %257
  %259 = zext i32 %258 to i64
  store i64 %259, i64* %RAX, align 8, !tbaa !2428
  %260 = load i64, i64* %RAX
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 3
  store i64 %262, i64* %PC
  %263 = trunc i64 %260 to i32
  %264 = add i32 1, %263
  %265 = zext i32 %264 to i64
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = icmp ult i32 %264, %263
  %267 = icmp ult i32 %264, 1
  %268 = or i1 %266, %267
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %269, i8* %270, align 1, !tbaa !2433
  %271 = and i32 %264, 255
  %272 = call i32 @llvm.ctpop.i32(i32 %271) #16
  %273 = trunc i32 %272 to i8
  %274 = and i8 %273, 1
  %275 = xor i8 %274, 1
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %275, i8* %276, align 1, !tbaa !2447
  %277 = xor i64 1, %260
  %278 = trunc i64 %277 to i32
  %279 = xor i32 %278, %264
  %280 = lshr i32 %279, 4
  %281 = trunc i32 %280 to i8
  %282 = and i8 %281, 1
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %282, i8* %283, align 1, !tbaa !2448
  %284 = icmp eq i32 %264, 0
  %285 = zext i1 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i32 %264, 31
  %288 = trunc i32 %287 to i8
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %288, i8* %289, align 1, !tbaa !2450
  %290 = lshr i32 %263, 31
  %291 = xor i32 %287, %290
  %292 = add nuw nsw i32 %291, %287
  %293 = icmp eq i32 %292, 2
  %294 = zext i1 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %294, i8* %295, align 1, !tbaa !2451
  %296 = load i64, i64* %RBP
  %297 = sub i64 %296, 12
  %298 = load i32, i32* %EAX
  %299 = zext i32 %298 to i64
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 3
  store i64 %301, i64* %PC
  %302 = inttoptr i64 %297 to i32*
  store i32 %298, i32* %302
  %303 = load i64, i64* %PC
  %304 = sub i64 %303, 52
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 5
  store i64 %306, i64* %PC
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %304, i64* %307, align 8, !tbaa !2428
  br label %block_400ea0

block_400dfb:                                     ; preds = %block_400df1
  %308 = load i64, i64* %RBP
  %309 = sub i64 %308, 12
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 7
  store i64 %311, i64* %PC
  %312 = inttoptr i64 %309 to i32*
  store i32 0, i32* %312
  br label %block_400e02

block_4011de:                                     ; preds = %block_401177
  %313 = load i64, i64* %RDI
  %314 = load i32, i32* %EDI
  %315 = zext i32 %314 to i64
  %316 = load i64, i64* %PC
  %317 = add i64 %316, 2
  store i64 %317, i64* %PC
  %318 = xor i64 %315, %313
  %319 = trunc i64 %318 to i32
  %320 = and i64 %318, 4294967295
  store i64 %320, i64* %RDI, align 8, !tbaa !2428
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %321, align 1, !tbaa !2433
  %322 = and i32 %319, 255
  %323 = call i32 @llvm.ctpop.i32(i32 %322) #16
  %324 = trunc i32 %323 to i8
  %325 = and i8 %324, 1
  %326 = xor i8 %325, 1
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %326, i8* %327, align 1, !tbaa !2447
  %328 = icmp eq i32 %319, 0
  %329 = zext i1 %328 to i8
  %330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %329, i8* %330, align 1, !tbaa !2449
  %331 = lshr i32 %319, 31
  %332 = trunc i32 %331 to i8
  %333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %332, i8* %333, align 1, !tbaa !2450
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %334, align 1, !tbaa !2451
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %335, align 1, !tbaa !2448
  %336 = load i64, i64* %RBP
  %337 = sub i64 %336, 16
  %338 = load i64, i64* %PC
  %339 = add i64 %338, 3
  store i64 %339, i64* %PC
  %340 = inttoptr i64 %337 to i32*
  %341 = load i32, i32* %340
  %342 = zext i32 %341 to i64
  store i64 %342, i64* %RSI, align 8, !tbaa !2428
  %343 = load i64, i64* %PC
  %344 = sub i64 %343, 3043
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 5
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 5
  store i64 %348, i64* %PC
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %350 = load i64, i64* %349, align 8, !tbaa !2428
  %351 = add i64 %350, -8
  %352 = inttoptr i64 %351 to i64*
  store i64 %346, i64* %352
  store i64 %351, i64* %349, align 8, !tbaa !2428
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %344, i64* %353, align 8, !tbaa !2428
  %354 = load i64, i64* %PC
  %355 = call %struct.Memory* @sub_400600_Place(%struct.State* %0, i64 %354, %struct.Memory* %5938)
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 7
  store i64 %359, i64* %PC
  store i32 %356, i32* bitcast (%n_type* @n to i32*)
  %360 = load i64, i64* %PC
  %361 = add i64 %360, 25
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 5
  store i64 %363, i64* %PC
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %361, i64* %364, align 8, !tbaa !2428
  br label %block_401208

block_400bd6:                                     ; preds = %block_400b79
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 5
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 5
  store i64 %368, i64* %PC
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %366, i64* %369, align 8, !tbaa !2428
  %370 = load i64, i64* %RBP
  %371 = sub i64 %370, 4
  %372 = load i64, i64* %PC
  %373 = add i64 %372, 3
  store i64 %373, i64* %PC
  %374 = inttoptr i64 %371 to i32*
  %375 = load i32, i32* %374
  %376 = zext i32 %375 to i64
  store i64 %376, i64* %RAX, align 8, !tbaa !2428
  %377 = load i64, i64* %RAX
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 3
  store i64 %379, i64* %PC
  %380 = trunc i64 %377 to i32
  %381 = add i32 1, %380
  %382 = zext i32 %381 to i64
  store i64 %382, i64* %RAX, align 8, !tbaa !2428
  %383 = icmp ult i32 %381, %380
  %384 = icmp ult i32 %381, 1
  %385 = or i1 %383, %384
  %386 = zext i1 %385 to i8
  %387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %386, i8* %387, align 1, !tbaa !2433
  %388 = and i32 %381, 255
  %389 = call i32 @llvm.ctpop.i32(i32 %388) #16
  %390 = trunc i32 %389 to i8
  %391 = and i8 %390, 1
  %392 = xor i8 %391, 1
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %392, i8* %393, align 1, !tbaa !2447
  %394 = xor i64 1, %377
  %395 = trunc i64 %394 to i32
  %396 = xor i32 %395, %381
  %397 = lshr i32 %396, 4
  %398 = trunc i32 %397 to i8
  %399 = and i8 %398, 1
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %399, i8* %400, align 1, !tbaa !2448
  %401 = icmp eq i32 %381, 0
  %402 = zext i1 %401 to i8
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %402, i8* %403, align 1, !tbaa !2449
  %404 = lshr i32 %381, 31
  %405 = trunc i32 %404 to i8
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %405, i8* %406, align 1, !tbaa !2450
  %407 = lshr i32 %380, 31
  %408 = xor i32 %404, %407
  %409 = add nuw nsw i32 %408, %404
  %410 = icmp eq i32 %409, 2
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %411, i8* %412, align 1, !tbaa !2451
  %413 = load i64, i64* %RBP
  %414 = sub i64 %413, 4
  %415 = load i32, i32* %EAX
  %416 = zext i32 %415 to i64
  %417 = load i64, i64* %PC
  %418 = add i64 %417, 3
  store i64 %418, i64* %PC
  %419 = inttoptr i64 %414 to i32*
  store i32 %415, i32* %419
  %420 = load i64, i64* %PC
  %421 = sub i64 %420, 124
  %422 = load i64, i64* %PC
  %423 = add i64 %422, 5
  store i64 %423, i64* %PC
  %424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %421, i64* %424, align 8, !tbaa !2428
  br label %block_400b68

block_4010f6:                                     ; preds = %block_4010d9, %block_401164
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.42, %block_4010d9 ], [ %MEMORY.39, %block_401164 ]
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 4
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 4
  store i64 %428, i64* %PC
  %429 = inttoptr i64 %426 to i32*
  %430 = load i32, i32* %429
  %431 = sub i32 %430, 1
  %432 = icmp ult i32 %430, 1
  %433 = zext i1 %432 to i8
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %433, i8* %434, align 1, !tbaa !2433
  %435 = and i32 %431, 255
  %436 = call i32 @llvm.ctpop.i32(i32 %435) #16
  %437 = trunc i32 %436 to i8
  %438 = and i8 %437, 1
  %439 = xor i8 %438, 1
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %439, i8* %440, align 1, !tbaa !2447
  %441 = xor i32 %430, 1
  %442 = xor i32 %441, %431
  %443 = lshr i32 %442, 4
  %444 = trunc i32 %443 to i8
  %445 = and i8 %444, 1
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %445, i8* %446, align 1, !tbaa !2448
  %447 = icmp eq i32 %431, 0
  %448 = zext i1 %447 to i8
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %448, i8* %449, align 1, !tbaa !2449
  %450 = lshr i32 %431, 31
  %451 = trunc i32 %450 to i8
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %451, i8* %452, align 1, !tbaa !2450
  %453 = lshr i32 %430, 31
  %454 = xor i32 %450, %453
  %455 = add nuw nsw i32 %454, %453
  %456 = icmp eq i32 %455, 2
  %457 = zext i1 %456 to i8
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %457, i8* %458, align 1, !tbaa !2451
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 125
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 6
  %463 = load i64, i64* %PC
  %464 = add i64 %463, 6
  store i64 %464, i64* %PC
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %466 = load i8, i8* %465, align 1, !tbaa !2449
  %467 = icmp eq i8 %466, 0
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %469 = load i8, i8* %468, align 1, !tbaa !2450
  %470 = icmp ne i8 %469, 0
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %472 = load i8, i8* %471, align 1, !tbaa !2451
  %473 = icmp ne i8 %472, 0
  %474 = xor i1 %470, %473
  %475 = xor i1 %474, true
  %476 = and i1 %467, %475
  %477 = zext i1 %476 to i8
  store i8 %477, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %479 = select i1 %476, i64 %460, i64 %462
  store i64 %479, i64* %478, align 8, !tbaa !2428
  %480 = load i8, i8* %BRANCH_TAKEN
  %481 = icmp eq i8 %480, 1
  br i1 %481, label %block_401177, label %block_401100

block_400fdc:                                     ; preds = %block_400fd5, %block_400fe6
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.12, %block_400fd5 ], [ %MEMORY.1, %block_400fe6 ]
  %482 = load i64, i64* %RBP
  %483 = sub i64 %482, 12
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 4
  store i64 %485, i64* %PC
  %486 = inttoptr i64 %483 to i32*
  %487 = load i32, i32* %486
  %488 = sub i32 %487, 1
  %489 = icmp ult i32 %487, 1
  %490 = zext i1 %489 to i8
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %490, i8* %491, align 1, !tbaa !2433
  %492 = and i32 %488, 255
  %493 = call i32 @llvm.ctpop.i32(i32 %492) #16
  %494 = trunc i32 %493 to i8
  %495 = and i8 %494, 1
  %496 = xor i8 %495, 1
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %496, i8* %497, align 1, !tbaa !2447
  %498 = xor i32 %487, 1
  %499 = xor i32 %498, %488
  %500 = lshr i32 %499, 4
  %501 = trunc i32 %500 to i8
  %502 = and i8 %501, 1
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %502, i8* %503, align 1, !tbaa !2448
  %504 = icmp eq i32 %488, 0
  %505 = zext i1 %504 to i8
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %505, i8* %506, align 1, !tbaa !2449
  %507 = lshr i32 %488, 31
  %508 = trunc i32 %507 to i8
  %509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %508, i8* %509, align 1, !tbaa !2450
  %510 = lshr i32 %487, 31
  %511 = xor i32 %507, %510
  %512 = add nuw nsw i32 %511, %510
  %513 = icmp eq i32 %512, 2
  %514 = zext i1 %513 to i8
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %514, i8* %515, align 1, !tbaa !2451
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 53
  %518 = load i64, i64* %PC
  %519 = add i64 %518, 6
  %520 = load i64, i64* %PC
  %521 = add i64 %520, 6
  store i64 %521, i64* %PC
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %523 = load i8, i8* %522, align 1, !tbaa !2449
  %524 = icmp eq i8 %523, 0
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %526 = load i8, i8* %525, align 1, !tbaa !2450
  %527 = icmp ne i8 %526, 0
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %529 = load i8, i8* %528, align 1, !tbaa !2451
  %530 = icmp ne i8 %529, 0
  %531 = xor i1 %527, %530
  %532 = xor i1 %531, true
  %533 = and i1 %524, %532
  %534 = zext i1 %533 to i8
  store i8 %534, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %536 = select i1 %533, i64 %517, i64 %519
  store i64 %536, i64* %535, align 8, !tbaa !2428
  %537 = load i8, i8* %BRANCH_TAKEN
  %538 = icmp eq i8 %537, 1
  br i1 %538, label %block_401015, label %block_400fe6

block_400dc3:                                     ; preds = %block_400d42
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 11
  store i64 %540, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 24) to i32*)
  %541 = load i64, i64* %PC
  %542 = add i64 %541, 11
  store i64 %542, i64* %PC
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 24) to i32*)
  %543 = load i64, i64* %RBP
  %544 = sub i64 %543, 4
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 7
  store i64 %546, i64* %PC
  %547 = inttoptr i64 %544 to i32*
  store i32 0, i32* %547
  br label %block_400de0

block_400fba:                                     ; preds = %block_401028, %block_400f9d
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.9, %block_400f9d ], [ %MEMORY.12, %block_401028 ]
  %548 = load i64, i64* %RBP
  %549 = sub i64 %548, 4
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 4
  store i64 %551, i64* %PC
  %552 = inttoptr i64 %549 to i32*
  %553 = load i32, i32* %552
  %554 = sub i32 %553, 1
  %555 = icmp ult i32 %553, 1
  %556 = zext i1 %555 to i8
  %557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %556, i8* %557, align 1, !tbaa !2433
  %558 = and i32 %554, 255
  %559 = call i32 @llvm.ctpop.i32(i32 %558) #16
  %560 = trunc i32 %559 to i8
  %561 = and i8 %560, 1
  %562 = xor i8 %561, 1
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %562, i8* %563, align 1, !tbaa !2447
  %564 = xor i32 %553, 1
  %565 = xor i32 %564, %554
  %566 = lshr i32 %565, 4
  %567 = trunc i32 %566 to i8
  %568 = and i8 %567, 1
  %569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %568, i8* %569, align 1, !tbaa !2448
  %570 = icmp eq i32 %554, 0
  %571 = zext i1 %570 to i8
  %572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %571, i8* %572, align 1, !tbaa !2449
  %573 = lshr i32 %554, 31
  %574 = trunc i32 %573 to i8
  %575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %574, i8* %575, align 1, !tbaa !2450
  %576 = lshr i32 %553, 31
  %577 = xor i32 %573, %576
  %578 = add nuw nsw i32 %577, %576
  %579 = icmp eq i32 %578, 2
  %580 = zext i1 %579 to i8
  %581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %580, i8* %581, align 1, !tbaa !2451
  %582 = load i64, i64* %PC
  %583 = add i64 %582, 125
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 6
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 6
  store i64 %587, i64* %PC
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %589 = load i8, i8* %588, align 1, !tbaa !2449
  %590 = icmp eq i8 %589, 0
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %592 = load i8, i8* %591, align 1, !tbaa !2450
  %593 = icmp ne i8 %592, 0
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %595 = load i8, i8* %594, align 1, !tbaa !2451
  %596 = icmp ne i8 %595, 0
  %597 = xor i1 %593, %596
  %598 = xor i1 %597, true
  %599 = and i1 %590, %598
  %600 = zext i1 %599 to i8
  store i8 %600, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %602 = select i1 %599, i64 %583, i64 %585
  store i64 %602, i64* %601, align 8, !tbaa !2428
  %603 = load i8, i8* %BRANCH_TAKEN
  %604 = icmp eq i8 %603, 1
  br i1 %604, label %block_40103b, label %block_400fc4

block_400db0:                                     ; preds = %block_400d53
  %605 = load i64, i64* %PC
  %606 = add i64 %605, 5
  %607 = load i64, i64* %PC
  %608 = add i64 %607, 5
  store i64 %608, i64* %PC
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %606, i64* %609, align 8, !tbaa !2428
  %610 = load i64, i64* %RBP
  %611 = sub i64 %610, 4
  %612 = load i64, i64* %PC
  %613 = add i64 %612, 3
  store i64 %613, i64* %PC
  %614 = inttoptr i64 %611 to i32*
  %615 = load i32, i32* %614
  %616 = zext i32 %615 to i64
  store i64 %616, i64* %RAX, align 8, !tbaa !2428
  %617 = load i64, i64* %RAX
  %618 = load i64, i64* %PC
  %619 = add i64 %618, 3
  store i64 %619, i64* %PC
  %620 = trunc i64 %617 to i32
  %621 = add i32 1, %620
  %622 = zext i32 %621 to i64
  store i64 %622, i64* %RAX, align 8, !tbaa !2428
  %623 = icmp ult i32 %621, %620
  %624 = icmp ult i32 %621, 1
  %625 = or i1 %623, %624
  %626 = zext i1 %625 to i8
  %627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %626, i8* %627, align 1, !tbaa !2433
  %628 = and i32 %621, 255
  %629 = call i32 @llvm.ctpop.i32(i32 %628) #16
  %630 = trunc i32 %629 to i8
  %631 = and i8 %630, 1
  %632 = xor i8 %631, 1
  %633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %632, i8* %633, align 1, !tbaa !2447
  %634 = xor i64 1, %617
  %635 = trunc i64 %634 to i32
  %636 = xor i32 %635, %621
  %637 = lshr i32 %636, 4
  %638 = trunc i32 %637 to i8
  %639 = and i8 %638, 1
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %639, i8* %640, align 1, !tbaa !2448
  %641 = icmp eq i32 %621, 0
  %642 = zext i1 %641 to i8
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %642, i8* %643, align 1, !tbaa !2449
  %644 = lshr i32 %621, 31
  %645 = trunc i32 %644 to i8
  %646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %645, i8* %646, align 1, !tbaa !2450
  %647 = lshr i32 %620, 31
  %648 = xor i32 %644, %647
  %649 = add nuw nsw i32 %648, %644
  %650 = icmp eq i32 %649, 2
  %651 = zext i1 %650 to i8
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %651, i8* %652, align 1, !tbaa !2451
  %653 = load i64, i64* %RBP
  %654 = sub i64 %653, 4
  %655 = load i32, i32* %EAX
  %656 = zext i32 %655 to i64
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 3
  store i64 %658, i64* %PC
  %659 = inttoptr i64 %654 to i32*
  store i32 %655, i32* %659
  %660 = load i64, i64* %PC
  %661 = sub i64 %660, 124
  %662 = load i64, i64* %PC
  %663 = add i64 %662, 5
  store i64 %663, i64* %PC
  %664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %661, i64* %664, align 8, !tbaa !2428
  br label %block_400d42

block_400f9d:                                     ; preds = %block_400f1c
  %665 = load i64, i64* %PC
  %666 = add i64 %665, 11
  store i64 %666, i64* %PC
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 36) to i32*)
  %667 = load i64, i64* %PC
  %668 = add i64 %667, 11
  store i64 %668, i64* %PC
  store i32 9, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 36) to i32*)
  %669 = load i64, i64* %RBP
  %670 = sub i64 %669, 4
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 7
  store i64 %672, i64* %PC
  %673 = inttoptr i64 %670 to i32*
  store i32 0, i32* %673
  br label %block_400fba

block_401247:                                     ; preds = %block_401236
  %674 = load i64, i64* %PC
  %675 = add i64 %674, 10
  store i64 %675, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401360__rodata_type* @seg_401360__rodata to i64), i64 41), i64* %RDI, align 8, !tbaa !2428
  %676 = load i64, i64* %PC
  %677 = add i64 %676, 2
  store i64 %677, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %678 = load i64, i64* %PC
  %679 = sub i64 %678, 3651
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 5
  %682 = load i64, i64* %PC
  %683 = add i64 %682, 5
  store i64 %683, i64* %PC
  %684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %685 = load i64, i64* %684, align 8, !tbaa !2428
  %686 = add i64 %685, -8
  %687 = inttoptr i64 %686 to i64*
  store i64 %681, i64* %687
  store i64 %686, i64* %684, align 8, !tbaa !2428
  %688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %679, i64* %688, align 8, !tbaa !2428
  %689 = load i64, i64* %PC
  %690 = call %struct.Memory* @ext_619238_printf(%struct.State* %0, i64 %689, %struct.Memory* %8078)
  %691 = load i64, i64* %RBP
  %692 = sub i64 %691, 28
  %693 = load i32, i32* %EAX
  %694 = zext i32 %693 to i64
  %695 = load i64, i64* %PC
  %696 = add i64 %695, 3
  store i64 %696, i64* %PC
  %697 = inttoptr i64 %692 to i32*
  store i32 %693, i32* %697
  br label %block_40125b

block_4009a9:                                     ; preds = %block_40099f
  %698 = load i64, i64* %RBP
  %699 = sub i64 %698, 12
  %700 = load i64, i64* %PC
  %701 = add i64 %700, 7
  store i64 %701, i64* %PC
  %702 = inttoptr i64 %699 to i32*
  store i32 0, i32* %702
  br label %block_4009b0

block_400e4e:                                     ; preds = %block_400df1
  %703 = load i64, i64* %PC
  %704 = add i64 %703, 5
  %705 = load i64, i64* %PC
  %706 = add i64 %705, 5
  store i64 %706, i64* %PC
  %707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %704, i64* %707, align 8, !tbaa !2428
  %708 = load i64, i64* %RBP
  %709 = sub i64 %708, 4
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 3
  store i64 %711, i64* %PC
  %712 = inttoptr i64 %709 to i32*
  %713 = load i32, i32* %712
  %714 = zext i32 %713 to i64
  store i64 %714, i64* %RAX, align 8, !tbaa !2428
  %715 = load i64, i64* %RAX
  %716 = load i64, i64* %PC
  %717 = add i64 %716, 3
  store i64 %717, i64* %PC
  %718 = trunc i64 %715 to i32
  %719 = add i32 1, %718
  %720 = zext i32 %719 to i64
  store i64 %720, i64* %RAX, align 8, !tbaa !2428
  %721 = icmp ult i32 %719, %718
  %722 = icmp ult i32 %719, 1
  %723 = or i1 %721, %722
  %724 = zext i1 %723 to i8
  %725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %724, i8* %725, align 1, !tbaa !2433
  %726 = and i32 %719, 255
  %727 = call i32 @llvm.ctpop.i32(i32 %726) #16
  %728 = trunc i32 %727 to i8
  %729 = and i8 %728, 1
  %730 = xor i8 %729, 1
  %731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %730, i8* %731, align 1, !tbaa !2447
  %732 = xor i64 1, %715
  %733 = trunc i64 %732 to i32
  %734 = xor i32 %733, %719
  %735 = lshr i32 %734, 4
  %736 = trunc i32 %735 to i8
  %737 = and i8 %736, 1
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %737, i8* %738, align 1, !tbaa !2448
  %739 = icmp eq i32 %719, 0
  %740 = zext i1 %739 to i8
  %741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %740, i8* %741, align 1, !tbaa !2449
  %742 = lshr i32 %719, 31
  %743 = trunc i32 %742 to i8
  %744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %743, i8* %744, align 1, !tbaa !2450
  %745 = lshr i32 %718, 31
  %746 = xor i32 %742, %745
  %747 = add nuw nsw i32 %746, %742
  %748 = icmp eq i32 %747, 2
  %749 = zext i1 %748 to i8
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %749, i8* %750, align 1, !tbaa !2451
  %751 = load i64, i64* %RBP
  %752 = sub i64 %751, 4
  %753 = load i32, i32* %EAX
  %754 = zext i32 %753 to i64
  %755 = load i64, i64* %PC
  %756 = add i64 %755, 3
  store i64 %756, i64* %PC
  %757 = inttoptr i64 %752 to i32*
  store i32 %753, i32* %757
  %758 = load i64, i64* %PC
  %759 = sub i64 %758, 124
  %760 = load i64, i64* %PC
  %761 = add i64 %760, 5
  store i64 %761, i64* %PC
  %762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %759, i64* %762, align 8, !tbaa !2428
  br label %block_400de0

block_400e99:                                     ; preds = %block_400e8f
  %763 = load i64, i64* %RBP
  %764 = sub i64 %763, 12
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 7
  store i64 %766, i64* %PC
  %767 = inttoptr i64 %764 to i32*
  store i32 0, i32* %767
  br label %block_400ea0

block_400b94:                                     ; preds = %block_400b8a
  %768 = load i64, i64* %RBP
  %769 = sub i64 %768, 4
  %770 = load i64, i64* %PC
  %771 = add i64 %770, 3
  store i64 %771, i64* %PC
  %772 = inttoptr i64 %769 to i32*
  %773 = load i32, i32* %772
  %774 = zext i32 %773 to i64
  store i64 %774, i64* %RAX, align 8, !tbaa !2428
  %775 = load i64, i64* %RBP
  %776 = sub i64 %775, 8
  %777 = load i64, i64* %PC
  %778 = add i64 %777, 3
  store i64 %778, i64* %PC
  %779 = inttoptr i64 %776 to i32*
  %780 = load i32, i32* %779
  %781 = zext i32 %780 to i64
  store i64 %781, i64* %RCX, align 8, !tbaa !2428
  %782 = load i64, i64* %RBP
  %783 = sub i64 %782, 12
  %784 = load i64, i64* %PC
  %785 = add i64 %784, 3
  store i64 %785, i64* %PC
  %786 = inttoptr i64 %783 to i32*
  %787 = load i32, i32* %786
  %788 = zext i32 %787 to i64
  store i64 %788, i64* %RDX, align 8, !tbaa !2428
  %789 = load i64, i64* %RDX
  %790 = load i64, i64* %PC
  %791 = add i64 %790, 3
  store i64 %791, i64* %PC
  %792 = and i64 %789, 4294967295
  %793 = shl i64 %792, 2
  %794 = trunc i64 %793 to i32
  %795 = icmp slt i32 %794, 0
  %796 = shl i32 %794, 1
  %797 = zext i32 %796 to i64
  store i64 %797, i64* %RDX, align 8, !tbaa !2428
  %798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %799 = zext i1 %795 to i8
  store i8 %799, i8* %798, align 1, !tbaa !2432
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %801 = and i32 %796, 254
  %802 = call i32 @llvm.ctpop.i32(i32 %801) #16
  %803 = trunc i32 %802 to i8
  %804 = and i8 %803, 1
  %805 = xor i8 %804, 1
  store i8 %805, i8* %800, align 1, !tbaa !2432
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %806, align 1, !tbaa !2432
  %807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %808 = icmp eq i32 %796, 0
  %809 = zext i1 %808 to i8
  store i8 %809, i8* %807, align 1, !tbaa !2432
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %811 = lshr i32 %796, 31
  %812 = trunc i32 %811 to i8
  store i8 %812, i8* %810, align 1, !tbaa !2432
  %813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %813, align 1, !tbaa !2432
  %814 = load i64, i64* %RCX
  %815 = load i32, i32* %EDX
  %816 = zext i32 %815 to i64
  %817 = load i64, i64* %PC
  %818 = add i64 %817, 2
  store i64 %818, i64* %PC
  %819 = trunc i64 %814 to i32
  %820 = add i32 %815, %819
  %821 = zext i32 %820 to i64
  store i64 %821, i64* %RCX, align 8, !tbaa !2428
  %822 = icmp ult i32 %820, %819
  %823 = icmp ult i32 %820, %815
  %824 = or i1 %822, %823
  %825 = zext i1 %824 to i8
  %826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %825, i8* %826, align 1, !tbaa !2433
  %827 = and i32 %820, 255
  %828 = call i32 @llvm.ctpop.i32(i32 %827) #16
  %829 = trunc i32 %828 to i8
  %830 = and i8 %829, 1
  %831 = xor i8 %830, 1
  %832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %831, i8* %832, align 1, !tbaa !2447
  %833 = xor i64 %816, %814
  %834 = trunc i64 %833 to i32
  %835 = xor i32 %834, %820
  %836 = lshr i32 %835, 4
  %837 = trunc i32 %836 to i8
  %838 = and i8 %837, 1
  %839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %838, i8* %839, align 1, !tbaa !2448
  %840 = icmp eq i32 %820, 0
  %841 = zext i1 %840 to i8
  %842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %841, i8* %842, align 1, !tbaa !2449
  %843 = lshr i32 %820, 31
  %844 = trunc i32 %843 to i8
  %845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %844, i8* %845, align 1, !tbaa !2450
  %846 = lshr i32 %819, 31
  %847 = lshr i32 %815, 31
  %848 = xor i32 %843, %846
  %849 = xor i32 %843, %847
  %850 = add nuw nsw i32 %848, %849
  %851 = icmp eq i32 %850, 2
  %852 = zext i1 %851 to i8
  %853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %852, i8* %853, align 1, !tbaa !2451
  %854 = load i64, i64* %RCX
  %855 = load i64, i64* %PC
  %856 = add i64 %855, 3
  store i64 %856, i64* %PC
  %857 = and i64 %854, 4294967295
  %858 = shl i64 %857, 2
  %859 = trunc i64 %858 to i32
  %860 = icmp slt i32 %859, 0
  %861 = shl i32 %859, 1
  %862 = zext i32 %861 to i64
  store i64 %862, i64* %RCX, align 8, !tbaa !2428
  %863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %864 = zext i1 %860 to i8
  store i8 %864, i8* %863, align 1, !tbaa !2432
  %865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %866 = and i32 %861, 254
  %867 = call i32 @llvm.ctpop.i32(i32 %866) #16
  %868 = trunc i32 %867 to i8
  %869 = and i8 %868, 1
  %870 = xor i8 %869, 1
  store i8 %870, i8* %865, align 1, !tbaa !2432
  %871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %871, align 1, !tbaa !2432
  %872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %873 = icmp eq i32 %861, 0
  %874 = zext i1 %873 to i8
  store i8 %874, i8* %872, align 1, !tbaa !2432
  %875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %876 = lshr i32 %861, 31
  %877 = trunc i32 %876 to i8
  store i8 %877, i8* %875, align 1, !tbaa !2432
  %878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %878, align 1, !tbaa !2432
  %879 = load i64, i64* %RAX
  %880 = load i32, i32* %ECX
  %881 = zext i32 %880 to i64
  %882 = load i64, i64* %PC
  %883 = add i64 %882, 2
  store i64 %883, i64* %PC
  %884 = trunc i64 %879 to i32
  %885 = add i32 %880, %884
  %886 = zext i32 %885 to i64
  store i64 %886, i64* %RAX, align 8, !tbaa !2428
  %887 = icmp ult i32 %885, %884
  %888 = icmp ult i32 %885, %880
  %889 = or i1 %887, %888
  %890 = zext i1 %889 to i8
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %890, i8* %891, align 1, !tbaa !2433
  %892 = and i32 %885, 255
  %893 = call i32 @llvm.ctpop.i32(i32 %892) #16
  %894 = trunc i32 %893 to i8
  %895 = and i8 %894, 1
  %896 = xor i8 %895, 1
  %897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %896, i8* %897, align 1, !tbaa !2447
  %898 = xor i64 %881, %879
  %899 = trunc i64 %898 to i32
  %900 = xor i32 %899, %885
  %901 = lshr i32 %900, 4
  %902 = trunc i32 %901 to i8
  %903 = and i8 %902, 1
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %903, i8* %904, align 1, !tbaa !2448
  %905 = icmp eq i32 %885, 0
  %906 = zext i1 %905 to i8
  %907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %906, i8* %907, align 1, !tbaa !2449
  %908 = lshr i32 %885, 31
  %909 = trunc i32 %908 to i8
  %910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %909, i8* %910, align 1, !tbaa !2450
  %911 = lshr i32 %884, 31
  %912 = lshr i32 %880, 31
  %913 = xor i32 %908, %911
  %914 = xor i32 %908, %912
  %915 = add nuw nsw i32 %913, %914
  %916 = icmp eq i32 %915, 2
  %917 = zext i1 %916 to i8
  %918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %917, i8* %918, align 1, !tbaa !2451
  %919 = load i32, i32* %EAX
  %920 = zext i32 %919 to i64
  %921 = load i64, i64* %PC
  %922 = add i64 %921, 3
  store i64 %922, i64* %PC
  %923 = shl i64 %920, 32
  %924 = ashr exact i64 %923, 32
  store i64 %924, i64* %RSI, align 8, !tbaa !2428
  %925 = load i64, i64* %RSI
  %926 = mul i64 %925, 4
  %927 = add i64 %926, add (i64 ptrtoint (%p_type* @p to i64), i64 6144)
  %928 = load i64, i64* %PC
  %929 = add i64 %928, 11
  store i64 %929, i64* %PC
  %930 = inttoptr i64 %927 to i32*
  store i32 1, i32* %930
  %931 = load i64, i64* %RBP
  %932 = sub i64 %931, 12
  %933 = load i64, i64* %PC
  %934 = add i64 %933, 3
  store i64 %934, i64* %PC
  %935 = inttoptr i64 %932 to i32*
  %936 = load i32, i32* %935
  %937 = zext i32 %936 to i64
  store i64 %937, i64* %RAX, align 8, !tbaa !2428
  %938 = load i64, i64* %RAX
  %939 = load i64, i64* %PC
  %940 = add i64 %939, 3
  store i64 %940, i64* %PC
  %941 = trunc i64 %938 to i32
  %942 = add i32 1, %941
  %943 = zext i32 %942 to i64
  store i64 %943, i64* %RAX, align 8, !tbaa !2428
  %944 = icmp ult i32 %942, %941
  %945 = icmp ult i32 %942, 1
  %946 = or i1 %944, %945
  %947 = zext i1 %946 to i8
  %948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %947, i8* %948, align 1, !tbaa !2433
  %949 = and i32 %942, 255
  %950 = call i32 @llvm.ctpop.i32(i32 %949) #16
  %951 = trunc i32 %950 to i8
  %952 = and i8 %951, 1
  %953 = xor i8 %952, 1
  %954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %953, i8* %954, align 1, !tbaa !2447
  %955 = xor i64 1, %938
  %956 = trunc i64 %955 to i32
  %957 = xor i32 %956, %942
  %958 = lshr i32 %957, 4
  %959 = trunc i32 %958 to i8
  %960 = and i8 %959, 1
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %960, i8* %961, align 1, !tbaa !2448
  %962 = icmp eq i32 %942, 0
  %963 = zext i1 %962 to i8
  %964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %963, i8* %964, align 1, !tbaa !2449
  %965 = lshr i32 %942, 31
  %966 = trunc i32 %965 to i8
  %967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %966, i8* %967, align 1, !tbaa !2450
  %968 = lshr i32 %941, 31
  %969 = xor i32 %965, %968
  %970 = add nuw nsw i32 %969, %965
  %971 = icmp eq i32 %970, 2
  %972 = zext i1 %971 to i8
  %973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %972, i8* %973, align 1, !tbaa !2451
  %974 = load i64, i64* %RBP
  %975 = sub i64 %974, 12
  %976 = load i32, i32* %EAX
  %977 = zext i32 %976 to i64
  %978 = load i64, i64* %PC
  %979 = add i64 %978, 3
  store i64 %979, i64* %PC
  %980 = inttoptr i64 %975 to i32*
  store i32 %976, i32* %980
  %981 = load i64, i64* %PC
  %982 = sub i64 %981, 52
  %983 = load i64, i64* %PC
  %984 = add i64 %983, 5
  store i64 %984, i64* %PC
  %985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %982, i64* %985, align 8, !tbaa !2428
  br label %block_400b8a

block_400f8a:                                     ; preds = %block_400f2d
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 5
  %988 = load i64, i64* %PC
  %989 = add i64 %988, 5
  store i64 %989, i64* %PC
  %990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %987, i64* %990, align 8, !tbaa !2428
  %991 = load i64, i64* %RBP
  %992 = sub i64 %991, 4
  %993 = load i64, i64* %PC
  %994 = add i64 %993, 3
  store i64 %994, i64* %PC
  %995 = inttoptr i64 %992 to i32*
  %996 = load i32, i32* %995
  %997 = zext i32 %996 to i64
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = load i64, i64* %RAX
  %999 = load i64, i64* %PC
  %1000 = add i64 %999, 3
  store i64 %1000, i64* %PC
  %1001 = trunc i64 %998 to i32
  %1002 = add i32 1, %1001
  %1003 = zext i32 %1002 to i64
  store i64 %1003, i64* %RAX, align 8, !tbaa !2428
  %1004 = icmp ult i32 %1002, %1001
  %1005 = icmp ult i32 %1002, 1
  %1006 = or i1 %1004, %1005
  %1007 = zext i1 %1006 to i8
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1007, i8* %1008, align 1, !tbaa !2433
  %1009 = and i32 %1002, 255
  %1010 = call i32 @llvm.ctpop.i32(i32 %1009) #16
  %1011 = trunc i32 %1010 to i8
  %1012 = and i8 %1011, 1
  %1013 = xor i8 %1012, 1
  %1014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1013, i8* %1014, align 1, !tbaa !2447
  %1015 = xor i64 1, %998
  %1016 = trunc i64 %1015 to i32
  %1017 = xor i32 %1016, %1002
  %1018 = lshr i32 %1017, 4
  %1019 = trunc i32 %1018 to i8
  %1020 = and i8 %1019, 1
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1020, i8* %1021, align 1, !tbaa !2448
  %1022 = icmp eq i32 %1002, 0
  %1023 = zext i1 %1022 to i8
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1023, i8* %1024, align 1, !tbaa !2449
  %1025 = lshr i32 %1002, 31
  %1026 = trunc i32 %1025 to i8
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1026, i8* %1027, align 1, !tbaa !2450
  %1028 = lshr i32 %1001, 31
  %1029 = xor i32 %1025, %1028
  %1030 = add nuw nsw i32 %1029, %1025
  %1031 = icmp eq i32 %1030, 2
  %1032 = zext i1 %1031 to i8
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1032, i8* %1033, align 1, !tbaa !2451
  %1034 = load i64, i64* %RBP
  %1035 = sub i64 %1034, 4
  %1036 = load i32, i32* %EAX
  %1037 = zext i32 %1036 to i64
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 3
  store i64 %1039, i64* %PC
  %1040 = inttoptr i64 %1035 to i32*
  store i32 %1036, i32* %1040
  %1041 = load i64, i64* %PC
  %1042 = sub i64 %1041, 124
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 5
  store i64 %1044, i64* %PC
  %1045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1042, i64* %1045, align 8, !tbaa !2428
  br label %block_400f1c

block_400987:                                     ; preds = %block_400928
  %1046 = sub i64 %1885, 4
  %1047 = load i64, i64* %PC
  %1048 = add i64 %1047, 7
  store i64 %1048, i64* %PC
  %1049 = inttoptr i64 %1046 to i32*
  store i32 0, i32* %1049
  br label %block_40098e

block_400b83:                                     ; preds = %block_400b79
  %1050 = load i64, i64* %RBP
  %1051 = sub i64 %1050, 12
  %1052 = load i64, i64* %PC
  %1053 = add i64 %1052, 7
  store i64 %1053, i64* %PC
  %1054 = inttoptr i64 %1051 to i32*
  store i32 0, i32* %1054
  br label %block_400b8a

block_400f77:                                     ; preds = %block_400f3e
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 5
  %1057 = load i64, i64* %PC
  %1058 = add i64 %1057, 5
  store i64 %1058, i64* %PC
  %1059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1056, i64* %1059, align 8, !tbaa !2428
  %1060 = load i64, i64* %RBP
  %1061 = sub i64 %1060, 8
  %1062 = load i64, i64* %PC
  %1063 = add i64 %1062, 3
  store i64 %1063, i64* %PC
  %1064 = inttoptr i64 %1061 to i32*
  %1065 = load i32, i32* %1064
  %1066 = zext i32 %1065 to i64
  store i64 %1066, i64* %RAX, align 8, !tbaa !2428
  %1067 = load i64, i64* %RAX
  %1068 = load i64, i64* %PC
  %1069 = add i64 %1068, 3
  store i64 %1069, i64* %PC
  %1070 = trunc i64 %1067 to i32
  %1071 = add i32 1, %1070
  %1072 = zext i32 %1071 to i64
  store i64 %1072, i64* %RAX, align 8, !tbaa !2428
  %1073 = icmp ult i32 %1071, %1070
  %1074 = icmp ult i32 %1071, 1
  %1075 = or i1 %1073, %1074
  %1076 = zext i1 %1075 to i8
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1076, i8* %1077, align 1, !tbaa !2433
  %1078 = and i32 %1071, 255
  %1079 = call i32 @llvm.ctpop.i32(i32 %1078) #16
  %1080 = trunc i32 %1079 to i8
  %1081 = and i8 %1080, 1
  %1082 = xor i8 %1081, 1
  %1083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1082, i8* %1083, align 1, !tbaa !2447
  %1084 = xor i64 1, %1067
  %1085 = trunc i64 %1084 to i32
  %1086 = xor i32 %1085, %1071
  %1087 = lshr i32 %1086, 4
  %1088 = trunc i32 %1087 to i8
  %1089 = and i8 %1088, 1
  %1090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1089, i8* %1090, align 1, !tbaa !2448
  %1091 = icmp eq i32 %1071, 0
  %1092 = zext i1 %1091 to i8
  %1093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1092, i8* %1093, align 1, !tbaa !2449
  %1094 = lshr i32 %1071, 31
  %1095 = trunc i32 %1094 to i8
  %1096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1095, i8* %1096, align 1, !tbaa !2450
  %1097 = lshr i32 %1070, 31
  %1098 = xor i32 %1094, %1097
  %1099 = add nuw nsw i32 %1098, %1094
  %1100 = icmp eq i32 %1099, 2
  %1101 = zext i1 %1100 to i8
  %1102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1101, i8* %1102, align 1, !tbaa !2451
  %1103 = load i64, i64* %RBP
  %1104 = sub i64 %1103, 8
  %1105 = load i32, i32* %EAX
  %1106 = zext i32 %1105 to i64
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 3
  store i64 %1108, i64* %PC
  %1109 = inttoptr i64 %1104 to i32*
  store i32 %1105, i32* %1109
  %1110 = load i64, i64* %PC
  %1111 = sub i64 %1110, 88
  %1112 = load i64, i64* %PC
  %1113 = add i64 %1112, 5
  store i64 %1113, i64* %PC
  %1114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1111, i64* %1114, align 8, !tbaa !2428
  br label %block_400f2d

block_400974:                                     ; preds = %block_400939
  %1115 = add i64 %4341, 5
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 5
  store i64 %1117, i64* %PC
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1115, i64* %1118, align 8, !tbaa !2428
  %1119 = load i64, i64* %RBP
  %1120 = sub i64 %1119, 4
  %1121 = load i64, i64* %PC
  %1122 = add i64 %1121, 3
  store i64 %1122, i64* %PC
  %1123 = inttoptr i64 %1120 to i32*
  %1124 = load i32, i32* %1123
  %1125 = zext i32 %1124 to i64
  store i64 %1125, i64* %RAX, align 8, !tbaa !2428
  %1126 = load i64, i64* %RAX
  %1127 = load i64, i64* %PC
  %1128 = add i64 %1127, 3
  store i64 %1128, i64* %PC
  %1129 = trunc i64 %1126 to i32
  %1130 = add i32 1, %1129
  %1131 = zext i32 %1130 to i64
  store i64 %1131, i64* %RAX, align 8, !tbaa !2428
  %1132 = icmp ult i32 %1130, %1129
  %1133 = icmp ult i32 %1130, 1
  %1134 = or i1 %1132, %1133
  %1135 = zext i1 %1134 to i8
  %1136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1135, i8* %1136, align 1, !tbaa !2433
  %1137 = and i32 %1130, 255
  %1138 = call i32 @llvm.ctpop.i32(i32 %1137) #16
  %1139 = trunc i32 %1138 to i8
  %1140 = and i8 %1139, 1
  %1141 = xor i8 %1140, 1
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1141, i8* %1142, align 1, !tbaa !2447
  %1143 = xor i64 1, %1126
  %1144 = trunc i64 %1143 to i32
  %1145 = xor i32 %1144, %1130
  %1146 = lshr i32 %1145, 4
  %1147 = trunc i32 %1146 to i8
  %1148 = and i8 %1147, 1
  %1149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1148, i8* %1149, align 1, !tbaa !2448
  %1150 = icmp eq i32 %1130, 0
  %1151 = zext i1 %1150 to i8
  %1152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1151, i8* %1152, align 1, !tbaa !2449
  %1153 = lshr i32 %1130, 31
  %1154 = trunc i32 %1153 to i8
  %1155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1154, i8* %1155, align 1, !tbaa !2450
  %1156 = lshr i32 %1129, 31
  %1157 = xor i32 %1153, %1156
  %1158 = add nuw nsw i32 %1157, %1153
  %1159 = icmp eq i32 %1158, 2
  %1160 = zext i1 %1159 to i8
  %1161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1160, i8* %1161, align 1, !tbaa !2451
  %1162 = load i64, i64* %RBP
  %1163 = sub i64 %1162, 4
  %1164 = load i32, i32* %EAX
  %1165 = zext i32 %1164 to i64
  %1166 = load i64, i64* %PC
  %1167 = add i64 %1166, 3
  store i64 %1167, i64* %PC
  %1168 = inttoptr i64 %1163 to i32*
  store i32 %1164, i32* %1168
  %1169 = load i64, i64* %PC
  %1170 = sub i64 %1169, 90
  %1171 = load i64, i64* %PC
  %1172 = add i64 %1171, 5
  store i64 %1172, i64* %PC
  %1173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1170, i64* %1173, align 8, !tbaa !2428
  br label %block_400928

block_400d6e:                                     ; preds = %block_400d64
  %1174 = load i64, i64* %RBP
  %1175 = sub i64 %1174, 4
  %1176 = load i64, i64* %PC
  %1177 = add i64 %1176, 3
  store i64 %1177, i64* %PC
  %1178 = inttoptr i64 %1175 to i32*
  %1179 = load i32, i32* %1178
  %1180 = zext i32 %1179 to i64
  store i64 %1180, i64* %RAX, align 8, !tbaa !2428
  %1181 = load i64, i64* %RBP
  %1182 = sub i64 %1181, 8
  %1183 = load i64, i64* %PC
  %1184 = add i64 %1183, 3
  store i64 %1184, i64* %PC
  %1185 = inttoptr i64 %1182 to i32*
  %1186 = load i32, i32* %1185
  %1187 = zext i32 %1186 to i64
  store i64 %1187, i64* %RCX, align 8, !tbaa !2428
  %1188 = load i64, i64* %RBP
  %1189 = sub i64 %1188, 12
  %1190 = load i64, i64* %PC
  %1191 = add i64 %1190, 3
  store i64 %1191, i64* %PC
  %1192 = inttoptr i64 %1189 to i32*
  %1193 = load i32, i32* %1192
  %1194 = zext i32 %1193 to i64
  store i64 %1194, i64* %RDX, align 8, !tbaa !2428
  %1195 = load i64, i64* %RDX
  %1196 = load i64, i64* %PC
  %1197 = add i64 %1196, 3
  store i64 %1197, i64* %PC
  %1198 = and i64 %1195, 4294967295
  %1199 = shl i64 %1198, 2
  %1200 = trunc i64 %1199 to i32
  %1201 = icmp slt i32 %1200, 0
  %1202 = shl i32 %1200, 1
  %1203 = zext i32 %1202 to i64
  store i64 %1203, i64* %RDX, align 8, !tbaa !2428
  %1204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1205 = zext i1 %1201 to i8
  store i8 %1205, i8* %1204, align 1, !tbaa !2432
  %1206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1207 = and i32 %1202, 254
  %1208 = call i32 @llvm.ctpop.i32(i32 %1207) #16
  %1209 = trunc i32 %1208 to i8
  %1210 = and i8 %1209, 1
  %1211 = xor i8 %1210, 1
  store i8 %1211, i8* %1206, align 1, !tbaa !2432
  %1212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1212, align 1, !tbaa !2432
  %1213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1214 = icmp eq i32 %1202, 0
  %1215 = zext i1 %1214 to i8
  store i8 %1215, i8* %1213, align 1, !tbaa !2432
  %1216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1217 = lshr i32 %1202, 31
  %1218 = trunc i32 %1217 to i8
  store i8 %1218, i8* %1216, align 1, !tbaa !2432
  %1219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1219, align 1, !tbaa !2432
  %1220 = load i64, i64* %RCX
  %1221 = load i32, i32* %EDX
  %1222 = zext i32 %1221 to i64
  %1223 = load i64, i64* %PC
  %1224 = add i64 %1223, 2
  store i64 %1224, i64* %PC
  %1225 = trunc i64 %1220 to i32
  %1226 = add i32 %1221, %1225
  %1227 = zext i32 %1226 to i64
  store i64 %1227, i64* %RCX, align 8, !tbaa !2428
  %1228 = icmp ult i32 %1226, %1225
  %1229 = icmp ult i32 %1226, %1221
  %1230 = or i1 %1228, %1229
  %1231 = zext i1 %1230 to i8
  %1232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1231, i8* %1232, align 1, !tbaa !2433
  %1233 = and i32 %1226, 255
  %1234 = call i32 @llvm.ctpop.i32(i32 %1233) #16
  %1235 = trunc i32 %1234 to i8
  %1236 = and i8 %1235, 1
  %1237 = xor i8 %1236, 1
  %1238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1237, i8* %1238, align 1, !tbaa !2447
  %1239 = xor i64 %1222, %1220
  %1240 = trunc i64 %1239 to i32
  %1241 = xor i32 %1240, %1226
  %1242 = lshr i32 %1241, 4
  %1243 = trunc i32 %1242 to i8
  %1244 = and i8 %1243, 1
  %1245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1244, i8* %1245, align 1, !tbaa !2448
  %1246 = icmp eq i32 %1226, 0
  %1247 = zext i1 %1246 to i8
  %1248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1247, i8* %1248, align 1, !tbaa !2449
  %1249 = lshr i32 %1226, 31
  %1250 = trunc i32 %1249 to i8
  %1251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1250, i8* %1251, align 1, !tbaa !2450
  %1252 = lshr i32 %1225, 31
  %1253 = lshr i32 %1221, 31
  %1254 = xor i32 %1249, %1252
  %1255 = xor i32 %1249, %1253
  %1256 = add nuw nsw i32 %1254, %1255
  %1257 = icmp eq i32 %1256, 2
  %1258 = zext i1 %1257 to i8
  %1259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1258, i8* %1259, align 1, !tbaa !2451
  %1260 = load i64, i64* %RCX
  %1261 = load i64, i64* %PC
  %1262 = add i64 %1261, 3
  store i64 %1262, i64* %PC
  %1263 = and i64 %1260, 4294967295
  %1264 = shl i64 %1263, 2
  %1265 = trunc i64 %1264 to i32
  %1266 = icmp slt i32 %1265, 0
  %1267 = shl i32 %1265, 1
  %1268 = zext i32 %1267 to i64
  store i64 %1268, i64* %RCX, align 8, !tbaa !2428
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1270 = zext i1 %1266 to i8
  store i8 %1270, i8* %1269, align 1, !tbaa !2432
  %1271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1272 = and i32 %1267, 254
  %1273 = call i32 @llvm.ctpop.i32(i32 %1272) #16
  %1274 = trunc i32 %1273 to i8
  %1275 = and i8 %1274, 1
  %1276 = xor i8 %1275, 1
  store i8 %1276, i8* %1271, align 1, !tbaa !2432
  %1277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1277, align 1, !tbaa !2432
  %1278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1279 = icmp eq i32 %1267, 0
  %1280 = zext i1 %1279 to i8
  store i8 %1280, i8* %1278, align 1, !tbaa !2432
  %1281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1282 = lshr i32 %1267, 31
  %1283 = trunc i32 %1282 to i8
  store i8 %1283, i8* %1281, align 1, !tbaa !2432
  %1284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1284, align 1, !tbaa !2432
  %1285 = load i64, i64* %RAX
  %1286 = load i32, i32* %ECX
  %1287 = zext i32 %1286 to i64
  %1288 = load i64, i64* %PC
  %1289 = add i64 %1288, 2
  store i64 %1289, i64* %PC
  %1290 = trunc i64 %1285 to i32
  %1291 = add i32 %1286, %1290
  %1292 = zext i32 %1291 to i64
  store i64 %1292, i64* %RAX, align 8, !tbaa !2428
  %1293 = icmp ult i32 %1291, %1290
  %1294 = icmp ult i32 %1291, %1286
  %1295 = or i1 %1293, %1294
  %1296 = zext i1 %1295 to i8
  %1297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1296, i8* %1297, align 1, !tbaa !2433
  %1298 = and i32 %1291, 255
  %1299 = call i32 @llvm.ctpop.i32(i32 %1298) #16
  %1300 = trunc i32 %1299 to i8
  %1301 = and i8 %1300, 1
  %1302 = xor i8 %1301, 1
  %1303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1302, i8* %1303, align 1, !tbaa !2447
  %1304 = xor i64 %1287, %1285
  %1305 = trunc i64 %1304 to i32
  %1306 = xor i32 %1305, %1291
  %1307 = lshr i32 %1306, 4
  %1308 = trunc i32 %1307 to i8
  %1309 = and i8 %1308, 1
  %1310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1309, i8* %1310, align 1, !tbaa !2448
  %1311 = icmp eq i32 %1291, 0
  %1312 = zext i1 %1311 to i8
  %1313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1312, i8* %1313, align 1, !tbaa !2449
  %1314 = lshr i32 %1291, 31
  %1315 = trunc i32 %1314 to i8
  %1316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1315, i8* %1316, align 1, !tbaa !2450
  %1317 = lshr i32 %1290, 31
  %1318 = lshr i32 %1286, 31
  %1319 = xor i32 %1314, %1317
  %1320 = xor i32 %1314, %1318
  %1321 = add nuw nsw i32 %1319, %1320
  %1322 = icmp eq i32 %1321, 2
  %1323 = zext i1 %1322 to i8
  %1324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1323, i8* %1324, align 1, !tbaa !2451
  %1325 = load i32, i32* %EAX
  %1326 = zext i32 %1325 to i64
  %1327 = load i64, i64* %PC
  %1328 = add i64 %1327, 3
  store i64 %1328, i64* %PC
  %1329 = shl i64 %1326, 32
  %1330 = ashr exact i64 %1329, 32
  store i64 %1330, i64* %RSI, align 8, !tbaa !2428
  %1331 = load i64, i64* %RSI
  %1332 = mul i64 %1331, 4
  %1333 = add i64 %1332, add (i64 ptrtoint (%p_type* @p to i64), i64 12288)
  %1334 = load i64, i64* %PC
  %1335 = add i64 %1334, 11
  store i64 %1335, i64* %PC
  %1336 = inttoptr i64 %1333 to i32*
  store i32 1, i32* %1336
  %1337 = load i64, i64* %RBP
  %1338 = sub i64 %1337, 12
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 3
  store i64 %1340, i64* %PC
  %1341 = inttoptr i64 %1338 to i32*
  %1342 = load i32, i32* %1341
  %1343 = zext i32 %1342 to i64
  store i64 %1343, i64* %RAX, align 8, !tbaa !2428
  %1344 = load i64, i64* %RAX
  %1345 = load i64, i64* %PC
  %1346 = add i64 %1345, 3
  store i64 %1346, i64* %PC
  %1347 = trunc i64 %1344 to i32
  %1348 = add i32 1, %1347
  %1349 = zext i32 %1348 to i64
  store i64 %1349, i64* %RAX, align 8, !tbaa !2428
  %1350 = icmp ult i32 %1348, %1347
  %1351 = icmp ult i32 %1348, 1
  %1352 = or i1 %1350, %1351
  %1353 = zext i1 %1352 to i8
  %1354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1353, i8* %1354, align 1, !tbaa !2433
  %1355 = and i32 %1348, 255
  %1356 = call i32 @llvm.ctpop.i32(i32 %1355) #16
  %1357 = trunc i32 %1356 to i8
  %1358 = and i8 %1357, 1
  %1359 = xor i8 %1358, 1
  %1360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1359, i8* %1360, align 1, !tbaa !2447
  %1361 = xor i64 1, %1344
  %1362 = trunc i64 %1361 to i32
  %1363 = xor i32 %1362, %1348
  %1364 = lshr i32 %1363, 4
  %1365 = trunc i32 %1364 to i8
  %1366 = and i8 %1365, 1
  %1367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1366, i8* %1367, align 1, !tbaa !2448
  %1368 = icmp eq i32 %1348, 0
  %1369 = zext i1 %1368 to i8
  %1370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1369, i8* %1370, align 1, !tbaa !2449
  %1371 = lshr i32 %1348, 31
  %1372 = trunc i32 %1371 to i8
  %1373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1372, i8* %1373, align 1, !tbaa !2450
  %1374 = lshr i32 %1347, 31
  %1375 = xor i32 %1371, %1374
  %1376 = add nuw nsw i32 %1375, %1371
  %1377 = icmp eq i32 %1376, 2
  %1378 = zext i1 %1377 to i8
  %1379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1378, i8* %1379, align 1, !tbaa !2451
  %1380 = load i64, i64* %RBP
  %1381 = sub i64 %1380, 12
  %1382 = load i32, i32* %EAX
  %1383 = zext i32 %1382 to i64
  %1384 = load i64, i64* %PC
  %1385 = add i64 %1384, 3
  store i64 %1385, i64* %PC
  %1386 = inttoptr i64 %1381 to i32*
  store i32 %1382, i32* %1386
  %1387 = load i64, i64* %PC
  %1388 = sub i64 %1387, 52
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 5
  store i64 %1390, i64* %PC
  %1391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1388, i64* %1391, align 8, !tbaa !2428
  br label %block_400d64

block_400dea:                                     ; preds = %block_400de0
  %1392 = load i64, i64* %RBP
  %1393 = sub i64 %1392, 8
  %1394 = load i64, i64* %PC
  %1395 = add i64 %1394, 7
  store i64 %1395, i64* %PC
  %1396 = inttoptr i64 %1393 to i32*
  store i32 0, i32* %1396
  br label %block_400df1

block_401164:                                     ; preds = %block_401107
  %1397 = load i64, i64* %PC
  %1398 = add i64 %1397, 5
  %1399 = load i64, i64* %PC
  %1400 = add i64 %1399, 5
  store i64 %1400, i64* %PC
  %1401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1398, i64* %1401, align 8, !tbaa !2428
  %1402 = load i64, i64* %RBP
  %1403 = sub i64 %1402, 4
  %1404 = load i64, i64* %PC
  %1405 = add i64 %1404, 3
  store i64 %1405, i64* %PC
  %1406 = inttoptr i64 %1403 to i32*
  %1407 = load i32, i32* %1406
  %1408 = zext i32 %1407 to i64
  store i64 %1408, i64* %RAX, align 8, !tbaa !2428
  %1409 = load i64, i64* %RAX
  %1410 = load i64, i64* %PC
  %1411 = add i64 %1410, 3
  store i64 %1411, i64* %PC
  %1412 = trunc i64 %1409 to i32
  %1413 = add i32 1, %1412
  %1414 = zext i32 %1413 to i64
  store i64 %1414, i64* %RAX, align 8, !tbaa !2428
  %1415 = icmp ult i32 %1413, %1412
  %1416 = icmp ult i32 %1413, 1
  %1417 = or i1 %1415, %1416
  %1418 = zext i1 %1417 to i8
  %1419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1418, i8* %1419, align 1, !tbaa !2433
  %1420 = and i32 %1413, 255
  %1421 = call i32 @llvm.ctpop.i32(i32 %1420) #16
  %1422 = trunc i32 %1421 to i8
  %1423 = and i8 %1422, 1
  %1424 = xor i8 %1423, 1
  %1425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1424, i8* %1425, align 1, !tbaa !2447
  %1426 = xor i64 1, %1409
  %1427 = trunc i64 %1426 to i32
  %1428 = xor i32 %1427, %1413
  %1429 = lshr i32 %1428, 4
  %1430 = trunc i32 %1429 to i8
  %1431 = and i8 %1430, 1
  %1432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1431, i8* %1432, align 1, !tbaa !2448
  %1433 = icmp eq i32 %1413, 0
  %1434 = zext i1 %1433 to i8
  %1435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1434, i8* %1435, align 1, !tbaa !2449
  %1436 = lshr i32 %1413, 31
  %1437 = trunc i32 %1436 to i8
  %1438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1437, i8* %1438, align 1, !tbaa !2450
  %1439 = lshr i32 %1412, 31
  %1440 = xor i32 %1436, %1439
  %1441 = add nuw nsw i32 %1440, %1436
  %1442 = icmp eq i32 %1441, 2
  %1443 = zext i1 %1442 to i8
  %1444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1443, i8* %1444, align 1, !tbaa !2451
  %1445 = load i64, i64* %RBP
  %1446 = sub i64 %1445, 4
  %1447 = load i32, i32* %EAX
  %1448 = zext i32 %1447 to i64
  %1449 = load i64, i64* %PC
  %1450 = add i64 %1449, 3
  store i64 %1450, i64* %PC
  %1451 = inttoptr i64 %1446 to i32*
  store i32 %1447, i32* %1451
  %1452 = load i64, i64* %PC
  %1453 = sub i64 %1452, 124
  %1454 = load i64, i64* %PC
  %1455 = add i64 %1454, 5
  store i64 %1455, i64* %PC
  %1456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1453, i64* %1456, align 8, !tbaa !2428
  br label %block_4010f6

block_40103b:                                     ; preds = %block_400fba
  %1457 = load i64, i64* %PC
  %1458 = add i64 %1457, 11
  store i64 %1458, i64* %PC
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 40) to i32*)
  %1459 = load i64, i64* %PC
  %1460 = add i64 %1459, 11
  store i64 %1460, i64* %PC
  store i32 65, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 40) to i32*)
  %1461 = load i64, i64* %RBP
  %1462 = sub i64 %1461, 4
  %1463 = load i64, i64* %PC
  %1464 = add i64 %1463, 7
  store i64 %1464, i64* %PC
  %1465 = inttoptr i64 %1462 to i32*
  store i32 0, i32* %1465
  br label %block_401058

block_400d5d:                                     ; preds = %block_400d53
  %1466 = load i64, i64* %RBP
  %1467 = sub i64 %1466, 12
  %1468 = load i64, i64* %PC
  %1469 = add i64 %1468, 7
  store i64 %1469, i64* %PC
  %1470 = inttoptr i64 %1467 to i32*
  store i32 0, i32* %1470
  br label %block_400d64

block_401151:                                     ; preds = %block_401118
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 5
  %1473 = load i64, i64* %PC
  %1474 = add i64 %1473, 5
  store i64 %1474, i64* %PC
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1472, i64* %1475, align 8, !tbaa !2428
  %1476 = load i64, i64* %RBP
  %1477 = sub i64 %1476, 8
  %1478 = load i64, i64* %PC
  %1479 = add i64 %1478, 3
  store i64 %1479, i64* %PC
  %1480 = inttoptr i64 %1477 to i32*
  %1481 = load i32, i32* %1480
  %1482 = zext i32 %1481 to i64
  store i64 %1482, i64* %RAX, align 8, !tbaa !2428
  %1483 = load i64, i64* %RAX
  %1484 = load i64, i64* %PC
  %1485 = add i64 %1484, 3
  store i64 %1485, i64* %PC
  %1486 = trunc i64 %1483 to i32
  %1487 = add i32 1, %1486
  %1488 = zext i32 %1487 to i64
  store i64 %1488, i64* %RAX, align 8, !tbaa !2428
  %1489 = icmp ult i32 %1487, %1486
  %1490 = icmp ult i32 %1487, 1
  %1491 = or i1 %1489, %1490
  %1492 = zext i1 %1491 to i8
  %1493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1492, i8* %1493, align 1, !tbaa !2433
  %1494 = and i32 %1487, 255
  %1495 = call i32 @llvm.ctpop.i32(i32 %1494) #16
  %1496 = trunc i32 %1495 to i8
  %1497 = and i8 %1496, 1
  %1498 = xor i8 %1497, 1
  %1499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1498, i8* %1499, align 1, !tbaa !2447
  %1500 = xor i64 1, %1483
  %1501 = trunc i64 %1500 to i32
  %1502 = xor i32 %1501, %1487
  %1503 = lshr i32 %1502, 4
  %1504 = trunc i32 %1503 to i8
  %1505 = and i8 %1504, 1
  %1506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1505, i8* %1506, align 1, !tbaa !2448
  %1507 = icmp eq i32 %1487, 0
  %1508 = zext i1 %1507 to i8
  %1509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1508, i8* %1509, align 1, !tbaa !2449
  %1510 = lshr i32 %1487, 31
  %1511 = trunc i32 %1510 to i8
  %1512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1511, i8* %1512, align 1, !tbaa !2450
  %1513 = lshr i32 %1486, 31
  %1514 = xor i32 %1510, %1513
  %1515 = add nuw nsw i32 %1514, %1510
  %1516 = icmp eq i32 %1515, 2
  %1517 = zext i1 %1516 to i8
  %1518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1517, i8* %1518, align 1, !tbaa !2451
  %1519 = load i64, i64* %RBP
  %1520 = sub i64 %1519, 8
  %1521 = load i32, i32* %EAX
  %1522 = zext i32 %1521 to i64
  %1523 = load i64, i64* %PC
  %1524 = add i64 %1523, 3
  store i64 %1524, i64* %PC
  %1525 = inttoptr i64 %1520 to i32*
  store i32 %1521, i32* %1525
  %1526 = load i64, i64* %PC
  %1527 = sub i64 %1526, 88
  %1528 = load i64, i64* %PC
  %1529 = add i64 %1528, 5
  store i64 %1529, i64* %PC
  %1530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1527, i64* %1530, align 8, !tbaa !2428
  br label %block_401107

block_400d42:                                     ; preds = %block_400d25, %block_400db0
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.19, %block_400d25 ], [ %MEMORY.24, %block_400db0 ]
  %1531 = load i64, i64* %RBP
  %1532 = sub i64 %1531, 4
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 4
  store i64 %1534, i64* %PC
  %1535 = inttoptr i64 %1532 to i32*
  %1536 = load i32, i32* %1535
  %1537 = sub i32 %1536, 2
  %1538 = icmp ult i32 %1536, 2
  %1539 = zext i1 %1538 to i8
  %1540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1539, i8* %1540, align 1, !tbaa !2433
  %1541 = and i32 %1537, 255
  %1542 = call i32 @llvm.ctpop.i32(i32 %1541) #16
  %1543 = trunc i32 %1542 to i8
  %1544 = and i8 %1543, 1
  %1545 = xor i8 %1544, 1
  %1546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1545, i8* %1546, align 1, !tbaa !2447
  %1547 = xor i32 %1536, 2
  %1548 = xor i32 %1547, %1537
  %1549 = lshr i32 %1548, 4
  %1550 = trunc i32 %1549 to i8
  %1551 = and i8 %1550, 1
  %1552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1551, i8* %1552, align 1, !tbaa !2448
  %1553 = icmp eq i32 %1537, 0
  %1554 = zext i1 %1553 to i8
  %1555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1554, i8* %1555, align 1, !tbaa !2449
  %1556 = lshr i32 %1537, 31
  %1557 = trunc i32 %1556 to i8
  %1558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1557, i8* %1558, align 1, !tbaa !2450
  %1559 = lshr i32 %1536, 31
  %1560 = xor i32 %1556, %1559
  %1561 = add nuw nsw i32 %1560, %1559
  %1562 = icmp eq i32 %1561, 2
  %1563 = zext i1 %1562 to i8
  %1564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1563, i8* %1564, align 1, !tbaa !2451
  %1565 = load i64, i64* %PC
  %1566 = add i64 %1565, 125
  %1567 = load i64, i64* %PC
  %1568 = add i64 %1567, 6
  %1569 = load i64, i64* %PC
  %1570 = add i64 %1569, 6
  store i64 %1570, i64* %PC
  %1571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1572 = load i8, i8* %1571, align 1, !tbaa !2449
  %1573 = icmp eq i8 %1572, 0
  %1574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1575 = load i8, i8* %1574, align 1, !tbaa !2450
  %1576 = icmp ne i8 %1575, 0
  %1577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1578 = load i8, i8* %1577, align 1, !tbaa !2451
  %1579 = icmp ne i8 %1578, 0
  %1580 = xor i1 %1576, %1579
  %1581 = xor i1 %1580, true
  %1582 = and i1 %1573, %1581
  %1583 = zext i1 %1582 to i8
  store i8 %1583, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1585 = select i1 %1582, i64 %1566, i64 %1568
  store i64 %1585, i64* %1584, align 8, !tbaa !2428
  %1586 = load i8, i8* %BRANCH_TAKEN
  %1587 = icmp eq i8 %1586, 1
  br i1 %1587, label %block_400dc3, label %block_400d4c

block_401236:                                     ; preds = %block_401208
  %1588 = add i64 %8117, 11
  store i64 %1588, i64* %PC
  %1589 = load i32, i32* bitcast (%kount_type* @kount to i32*)
  %1590 = sub i32 %1589, 2005
  %1591 = icmp ult i32 %1589, 2005
  %1592 = zext i1 %1591 to i8
  %1593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1592, i8* %1593, align 1, !tbaa !2433
  %1594 = and i32 %1590, 255
  %1595 = call i32 @llvm.ctpop.i32(i32 %1594) #16
  %1596 = trunc i32 %1595 to i8
  %1597 = and i8 %1596, 1
  %1598 = xor i8 %1597, 1
  %1599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1598, i8* %1599, align 1, !tbaa !2447
  %1600 = xor i32 %1589, 2005
  %1601 = xor i32 %1600, %1590
  %1602 = lshr i32 %1601, 4
  %1603 = trunc i32 %1602 to i8
  %1604 = and i8 %1603, 1
  %1605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1604, i8* %1605, align 1, !tbaa !2448
  %1606 = icmp eq i32 %1590, 0
  %1607 = zext i1 %1606 to i8
  %1608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1607, i8* %1608, align 1, !tbaa !2449
  %1609 = lshr i32 %1590, 31
  %1610 = trunc i32 %1609 to i8
  %1611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1610, i8* %1611, align 1, !tbaa !2450
  %1612 = lshr i32 %1589, 31
  %1613 = xor i32 %1609, %1612
  %1614 = add nuw nsw i32 %1613, %1612
  %1615 = icmp eq i32 %1614, 2
  %1616 = zext i1 %1615 to i8
  %1617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1616, i8* %1617, align 1, !tbaa !2451
  %1618 = load i64, i64* %PC
  %1619 = add i64 %1618, 26
  %1620 = load i64, i64* %PC
  %1621 = add i64 %1620, 6
  %1622 = load i64, i64* %PC
  %1623 = add i64 %1622, 6
  store i64 %1623, i64* %PC
  %1624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1625 = load i8, i8* %1624, align 1, !tbaa !2449
  store i8 %1625, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1627 = icmp ne i8 %1625, 0
  %1628 = select i1 %1627, i64 %1619, i64 %1621
  store i64 %1628, i64* %1626, align 8, !tbaa !2428
  %1629 = load i8, i8* %BRANCH_TAKEN
  %1630 = icmp eq i8 %1629, 1
  br i1 %1630, label %block_40125b, label %block_401247

block_400b38:                                     ; preds = %block_400adb
  %1631 = load i64, i64* %PC
  %1632 = add i64 %1631, 5
  %1633 = load i64, i64* %PC
  %1634 = add i64 %1633, 5
  store i64 %1634, i64* %PC
  %1635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1632, i64* %1635, align 8, !tbaa !2428
  %1636 = load i64, i64* %RBP
  %1637 = sub i64 %1636, 4
  %1638 = load i64, i64* %PC
  %1639 = add i64 %1638, 3
  store i64 %1639, i64* %PC
  %1640 = inttoptr i64 %1637 to i32*
  %1641 = load i32, i32* %1640
  %1642 = zext i32 %1641 to i64
  store i64 %1642, i64* %RAX, align 8, !tbaa !2428
  %1643 = load i64, i64* %RAX
  %1644 = load i64, i64* %PC
  %1645 = add i64 %1644, 3
  store i64 %1645, i64* %PC
  %1646 = trunc i64 %1643 to i32
  %1647 = add i32 1, %1646
  %1648 = zext i32 %1647 to i64
  store i64 %1648, i64* %RAX, align 8, !tbaa !2428
  %1649 = icmp ult i32 %1647, %1646
  %1650 = icmp ult i32 %1647, 1
  %1651 = or i1 %1649, %1650
  %1652 = zext i1 %1651 to i8
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1652, i8* %1653, align 1, !tbaa !2433
  %1654 = and i32 %1647, 255
  %1655 = call i32 @llvm.ctpop.i32(i32 %1654) #16
  %1656 = trunc i32 %1655 to i8
  %1657 = and i8 %1656, 1
  %1658 = xor i8 %1657, 1
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1658, i8* %1659, align 1, !tbaa !2447
  %1660 = xor i64 1, %1643
  %1661 = trunc i64 %1660 to i32
  %1662 = xor i32 %1661, %1647
  %1663 = lshr i32 %1662, 4
  %1664 = trunc i32 %1663 to i8
  %1665 = and i8 %1664, 1
  %1666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1665, i8* %1666, align 1, !tbaa !2448
  %1667 = icmp eq i32 %1647, 0
  %1668 = zext i1 %1667 to i8
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1668, i8* %1669, align 1, !tbaa !2449
  %1670 = lshr i32 %1647, 31
  %1671 = trunc i32 %1670 to i8
  %1672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1671, i8* %1672, align 1, !tbaa !2450
  %1673 = lshr i32 %1646, 31
  %1674 = xor i32 %1670, %1673
  %1675 = add nuw nsw i32 %1674, %1670
  %1676 = icmp eq i32 %1675, 2
  %1677 = zext i1 %1676 to i8
  %1678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1677, i8* %1678, align 1, !tbaa !2451
  %1679 = load i64, i64* %RBP
  %1680 = sub i64 %1679, 4
  %1681 = load i32, i32* %EAX
  %1682 = zext i32 %1681 to i64
  %1683 = load i64, i64* %PC
  %1684 = add i64 %1683, 3
  store i64 %1684, i64* %PC
  %1685 = inttoptr i64 %1680 to i32*
  store i32 %1681, i32* %1685
  %1686 = load i64, i64* %PC
  %1687 = sub i64 %1686, 124
  %1688 = load i64, i64* %PC
  %1689 = add i64 %1688, 5
  store i64 %1689, i64* %PC
  %1690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1687, i64* %1690, align 8, !tbaa !2428
  br label %block_400aca

block_40099f:                                     ; preds = %block_400998, %block_4009e9
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.7, %block_400998 ], [ %MEMORY.14, %block_4009e9 ]
  %1691 = load i64, i64* %RBP
  %1692 = sub i64 %1691, 8
  %1693 = load i64, i64* %PC
  %1694 = add i64 %1693, 4
  store i64 %1694, i64* %PC
  %1695 = inttoptr i64 %1692 to i32*
  %1696 = load i32, i32* %1695
  %1697 = sub i32 %1696, 1
  %1698 = icmp ult i32 %1696, 1
  %1699 = zext i1 %1698 to i8
  %1700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1699, i8* %1700, align 1, !tbaa !2433
  %1701 = and i32 %1697, 255
  %1702 = call i32 @llvm.ctpop.i32(i32 %1701) #16
  %1703 = trunc i32 %1702 to i8
  %1704 = and i8 %1703, 1
  %1705 = xor i8 %1704, 1
  %1706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1705, i8* %1706, align 1, !tbaa !2447
  %1707 = xor i32 %1696, 1
  %1708 = xor i32 %1707, %1697
  %1709 = lshr i32 %1708, 4
  %1710 = trunc i32 %1709 to i8
  %1711 = and i8 %1710, 1
  %1712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1711, i8* %1712, align 1, !tbaa !2448
  %1713 = icmp eq i32 %1697, 0
  %1714 = zext i1 %1713 to i8
  %1715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1714, i8* %1715, align 1, !tbaa !2449
  %1716 = lshr i32 %1697, 31
  %1717 = trunc i32 %1716 to i8
  %1718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1717, i8* %1718, align 1, !tbaa !2450
  %1719 = lshr i32 %1696, 31
  %1720 = xor i32 %1716, %1719
  %1721 = add nuw nsw i32 %1720, %1719
  %1722 = icmp eq i32 %1721, 2
  %1723 = zext i1 %1722 to i8
  %1724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1723, i8* %1724, align 1, !tbaa !2451
  %1725 = load i64, i64* %PC
  %1726 = add i64 %1725, 89
  %1727 = load i64, i64* %PC
  %1728 = add i64 %1727, 6
  %1729 = load i64, i64* %PC
  %1730 = add i64 %1729, 6
  store i64 %1730, i64* %PC
  %1731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1732 = load i8, i8* %1731, align 1, !tbaa !2449
  %1733 = icmp eq i8 %1732, 0
  %1734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1735 = load i8, i8* %1734, align 1, !tbaa !2450
  %1736 = icmp ne i8 %1735, 0
  %1737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1738 = load i8, i8* %1737, align 1, !tbaa !2451
  %1739 = icmp ne i8 %1738, 0
  %1740 = xor i1 %1736, %1739
  %1741 = xor i1 %1740, true
  %1742 = and i1 %1733, %1741
  %1743 = zext i1 %1742 to i8
  store i8 %1743, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1745 = select i1 %1742, i64 %1726, i64 %1728
  store i64 %1745, i64* %1744, align 8, !tbaa !2428
  %1746 = load i8, i8* %BRANCH_TAKEN
  %1747 = icmp eq i8 %1746, 1
  br i1 %1747, label %block_4009fc, label %block_4009a9

block_400f37:                                     ; preds = %block_400f2d
  %1748 = load i64, i64* %RBP
  %1749 = sub i64 %1748, 12
  %1750 = load i64, i64* %PC
  %1751 = add i64 %1750, 7
  store i64 %1751, i64* %PC
  %1752 = inttoptr i64 %1749 to i32*
  store i32 0, i32* %1752
  br label %block_400f3e

block_400ea0:                                     ; preds = %block_400e99, %block_400eaa
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.22, %block_400e99 ], [ %MEMORY.5, %block_400eaa ]
  %1753 = load i64, i64* %RBP
  %1754 = sub i64 %1753, 12
  %1755 = load i64, i64* %PC
  %1756 = add i64 %1755, 4
  store i64 %1756, i64* %PC
  %1757 = inttoptr i64 %1754 to i32*
  %1758 = load i32, i32* %1757
  %1759 = sub i32 %1758, 2
  %1760 = icmp ult i32 %1758, 2
  %1761 = zext i1 %1760 to i8
  %1762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1761, i8* %1762, align 1, !tbaa !2433
  %1763 = and i32 %1759, 255
  %1764 = call i32 @llvm.ctpop.i32(i32 %1763) #16
  %1765 = trunc i32 %1764 to i8
  %1766 = and i8 %1765, 1
  %1767 = xor i8 %1766, 1
  %1768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1767, i8* %1768, align 1, !tbaa !2447
  %1769 = xor i32 %1758, 2
  %1770 = xor i32 %1769, %1759
  %1771 = lshr i32 %1770, 4
  %1772 = trunc i32 %1771 to i8
  %1773 = and i8 %1772, 1
  %1774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1773, i8* %1774, align 1, !tbaa !2448
  %1775 = icmp eq i32 %1759, 0
  %1776 = zext i1 %1775 to i8
  %1777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1776, i8* %1777, align 1, !tbaa !2449
  %1778 = lshr i32 %1759, 31
  %1779 = trunc i32 %1778 to i8
  %1780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1779, i8* %1780, align 1, !tbaa !2450
  %1781 = lshr i32 %1758, 31
  %1782 = xor i32 %1778, %1781
  %1783 = add nuw nsw i32 %1782, %1781
  %1784 = icmp eq i32 %1783, 2
  %1785 = zext i1 %1784 to i8
  %1786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1785, i8* %1786, align 1, !tbaa !2451
  %1787 = load i64, i64* %PC
  %1788 = add i64 %1787, 53
  %1789 = load i64, i64* %PC
  %1790 = add i64 %1789, 6
  %1791 = load i64, i64* %PC
  %1792 = add i64 %1791, 6
  store i64 %1792, i64* %PC
  %1793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1794 = load i8, i8* %1793, align 1, !tbaa !2449
  %1795 = icmp eq i8 %1794, 0
  %1796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1797 = load i8, i8* %1796, align 1, !tbaa !2450
  %1798 = icmp ne i8 %1797, 0
  %1799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1800 = load i8, i8* %1799, align 1, !tbaa !2451
  %1801 = icmp ne i8 %1800, 0
  %1802 = xor i1 %1798, %1801
  %1803 = xor i1 %1802, true
  %1804 = and i1 %1795, %1803
  %1805 = zext i1 %1804 to i8
  store i8 %1805, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1807 = select i1 %1804, i64 %1788, i64 %1790
  store i64 %1807, i64* %1806, align 8, !tbaa !2428
  %1808 = load i8, i8* %BRANCH_TAKEN
  %1809 = icmp eq i8 %1808, 1
  br i1 %1809, label %block_400ed9, label %block_400eaa

block_400c87:                                     ; preds = %block_400c06
  %1810 = load i64, i64* %PC
  %1811 = add i64 %1810, 11
  store i64 %1811, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 16) to i32*)
  %1812 = load i64, i64* %PC
  %1813 = add i64 %1812, 11
  store i64 %1813, i64* %PC
  store i32 67, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 16) to i32*)
  %1814 = load i64, i64* %RBP
  %1815 = sub i64 %1814, 4
  %1816 = load i64, i64* %PC
  %1817 = add i64 %1816, 7
  store i64 %1817, i64* %PC
  %1818 = inttoptr i64 %1815 to i32*
  store i32 0, i32* %1818
  br label %block_400ca4

block_4010d9:                                     ; preds = %block_401058
  %1819 = load i64, i64* %PC
  %1820 = add i64 %1819, 11
  store i64 %1820, i64* %PC
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 44) to i32*)
  %1821 = load i64, i64* %PC
  %1822 = add i64 %1821, 11
  store i64 %1822, i64* %PC
  store i32 72, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 44) to i32*)
  %1823 = load i64, i64* %RBP
  %1824 = sub i64 %1823, 4
  %1825 = load i64, i64* %PC
  %1826 = add i64 %1825, 7
  store i64 %1826, i64* %PC
  %1827 = inttoptr i64 %1824 to i32*
  store i32 0, i32* %1827
  br label %block_4010f6

block_400928:                                     ; preds = %block_400921, %block_400974
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.20, %block_400921 ], [ %MEMORY.21, %block_400974 ]
  %1828 = load i64, i64* %RBP
  %1829 = sub i64 %1828, 4
  %1830 = load i64, i64* %PC
  %1831 = add i64 %1830, 4
  store i64 %1831, i64* %PC
  %1832 = inttoptr i64 %1829 to i32*
  %1833 = load i32, i32* %1832
  %1834 = sub i32 %1833, 12
  %1835 = icmp ult i32 %1833, 12
  %1836 = zext i1 %1835 to i8
  %1837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1836, i8* %1837, align 1, !tbaa !2433
  %1838 = and i32 %1834, 255
  %1839 = call i32 @llvm.ctpop.i32(i32 %1838) #16
  %1840 = trunc i32 %1839 to i8
  %1841 = and i8 %1840, 1
  %1842 = xor i8 %1841, 1
  %1843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1842, i8* %1843, align 1, !tbaa !2447
  %1844 = xor i32 %1833, 12
  %1845 = xor i32 %1844, %1834
  %1846 = lshr i32 %1845, 4
  %1847 = trunc i32 %1846 to i8
  %1848 = and i8 %1847, 1
  %1849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1848, i8* %1849, align 1, !tbaa !2448
  %1850 = icmp eq i32 %1834, 0
  %1851 = zext i1 %1850 to i8
  %1852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1851, i8* %1852, align 1, !tbaa !2449
  %1853 = lshr i32 %1834, 31
  %1854 = trunc i32 %1853 to i8
  %1855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1854, i8* %1855, align 1, !tbaa !2450
  %1856 = lshr i32 %1833, 31
  %1857 = xor i32 %1853, %1856
  %1858 = add nuw nsw i32 %1857, %1856
  %1859 = icmp eq i32 %1858, 2
  %1860 = zext i1 %1859 to i8
  %1861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1860, i8* %1861, align 1, !tbaa !2451
  %1862 = load i64, i64* %PC
  %1863 = add i64 %1862, 91
  %1864 = load i64, i64* %PC
  %1865 = add i64 %1864, 6
  %1866 = load i64, i64* %PC
  %1867 = add i64 %1866, 6
  store i64 %1867, i64* %PC
  %1868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1869 = load i8, i8* %1868, align 1, !tbaa !2449
  %1870 = icmp eq i8 %1869, 0
  %1871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1872 = load i8, i8* %1871, align 1, !tbaa !2450
  %1873 = icmp ne i8 %1872, 0
  %1874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1875 = load i8, i8* %1874, align 1, !tbaa !2451
  %1876 = icmp ne i8 %1875, 0
  %1877 = xor i1 %1873, %1876
  %1878 = xor i1 %1877, true
  %1879 = and i1 %1870, %1878
  %1880 = zext i1 %1879 to i8
  store i8 %1880, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1882 = select i1 %1879, i64 %1863, i64 %1865
  store i64 %1882, i64* %1881, align 8, !tbaa !2428
  %1883 = load i8, i8* %BRANCH_TAKEN
  %1884 = icmp eq i8 %1883, 1
  %1885 = load i64, i64* %RBP
  br i1 %1884, label %block_400987, label %block_400932

block_40098e:                                     ; preds = %block_4009fc, %block_400987
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.6, %block_400987 ], [ %MEMORY.4, %block_4009fc ]
  %1886 = load i64, i64* %RBP
  %1887 = sub i64 %1886, 4
  %1888 = load i64, i64* %PC
  %1889 = add i64 %1888, 4
  store i64 %1889, i64* %PC
  %1890 = inttoptr i64 %1887 to i32*
  %1891 = load i32, i32* %1890
  %1892 = sub i32 %1891, 3
  %1893 = icmp ult i32 %1891, 3
  %1894 = zext i1 %1893 to i8
  %1895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1894, i8* %1895, align 1, !tbaa !2433
  %1896 = and i32 %1892, 255
  %1897 = call i32 @llvm.ctpop.i32(i32 %1896) #16
  %1898 = trunc i32 %1897 to i8
  %1899 = and i8 %1898, 1
  %1900 = xor i8 %1899, 1
  %1901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1900, i8* %1901, align 1, !tbaa !2447
  %1902 = xor i32 %1891, 3
  %1903 = xor i32 %1902, %1892
  %1904 = lshr i32 %1903, 4
  %1905 = trunc i32 %1904 to i8
  %1906 = and i8 %1905, 1
  %1907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1906, i8* %1907, align 1, !tbaa !2448
  %1908 = icmp eq i32 %1892, 0
  %1909 = zext i1 %1908 to i8
  %1910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1909, i8* %1910, align 1, !tbaa !2449
  %1911 = lshr i32 %1892, 31
  %1912 = trunc i32 %1911 to i8
  %1913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1912, i8* %1913, align 1, !tbaa !2450
  %1914 = lshr i32 %1891, 31
  %1915 = xor i32 %1911, %1914
  %1916 = add nuw nsw i32 %1915, %1914
  %1917 = icmp eq i32 %1916, 2
  %1918 = zext i1 %1917 to i8
  %1919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1918, i8* %1919, align 1, !tbaa !2451
  %1920 = load i64, i64* %PC
  %1921 = add i64 %1920, 125
  %1922 = load i64, i64* %PC
  %1923 = add i64 %1922, 6
  %1924 = load i64, i64* %PC
  %1925 = add i64 %1924, 6
  store i64 %1925, i64* %PC
  %1926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1927 = load i8, i8* %1926, align 1, !tbaa !2449
  %1928 = icmp eq i8 %1927, 0
  %1929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1930 = load i8, i8* %1929, align 1, !tbaa !2450
  %1931 = icmp ne i8 %1930, 0
  %1932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1933 = load i8, i8* %1932, align 1, !tbaa !2451
  %1934 = icmp ne i8 %1933, 0
  %1935 = xor i1 %1931, %1934
  %1936 = xor i1 %1935, true
  %1937 = and i1 %1928, %1936
  %1938 = zext i1 %1937 to i8
  store i8 %1938, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1940 = select i1 %1937, i64 %1921, i64 %1923
  store i64 %1940, i64* %1939, align 8, !tbaa !2428
  %1941 = load i8, i8* %BRANCH_TAKEN
  %1942 = icmp eq i8 %1941, 1
  br i1 %1942, label %block_400a0f, label %block_400998

block_400f26:                                     ; preds = %block_400f1c
  %1943 = load i64, i64* %RBP
  %1944 = sub i64 %1943, 8
  %1945 = load i64, i64* %PC
  %1946 = add i64 %1945, 7
  store i64 %1946, i64* %PC
  %1947 = inttoptr i64 %1944 to i32*
  store i32 0, i32* %1947
  br label %block_400f2d

block_400f3e:                                     ; preds = %block_400f48, %block_400f37
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.34, %block_400f37 ], [ %MEMORY.8, %block_400f48 ]
  %1948 = load i64, i64* %RBP
  %1949 = sub i64 %1948, 12
  %1950 = load i64, i64* %PC
  %1951 = add i64 %1950, 4
  store i64 %1951, i64* %PC
  %1952 = inttoptr i64 %1949 to i32*
  %1953 = load i32, i32* %1952
  %1954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1954, align 1, !tbaa !2433
  %1955 = and i32 %1953, 255
  %1956 = call i32 @llvm.ctpop.i32(i32 %1955) #16
  %1957 = trunc i32 %1956 to i8
  %1958 = and i8 %1957, 1
  %1959 = xor i8 %1958, 1
  %1960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1959, i8* %1960, align 1, !tbaa !2447
  %1961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1961, align 1, !tbaa !2448
  %1962 = icmp eq i32 %1953, 0
  %1963 = zext i1 %1962 to i8
  %1964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1963, i8* %1964, align 1, !tbaa !2449
  %1965 = lshr i32 %1953, 31
  %1966 = trunc i32 %1965 to i8
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1966, i8* %1967, align 1, !tbaa !2450
  %1968 = lshr i32 %1953, 31
  %1969 = xor i32 %1965, %1968
  %1970 = add nuw nsw i32 %1969, %1968
  %1971 = icmp eq i32 %1970, 2
  %1972 = zext i1 %1971 to i8
  %1973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1972, i8* %1973, align 1, !tbaa !2451
  %1974 = load i64, i64* %PC
  %1975 = add i64 %1974, 53
  %1976 = load i64, i64* %PC
  %1977 = add i64 %1976, 6
  %1978 = load i64, i64* %PC
  %1979 = add i64 %1978, 6
  store i64 %1979, i64* %PC
  %1980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1981 = load i8, i8* %1980, align 1, !tbaa !2449
  %1982 = icmp eq i8 %1981, 0
  %1983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1984 = load i8, i8* %1983, align 1, !tbaa !2450
  %1985 = icmp ne i8 %1984, 0
  %1986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1987 = load i8, i8* %1986, align 1, !tbaa !2451
  %1988 = icmp ne i8 %1987, 0
  %1989 = xor i1 %1985, %1988
  %1990 = xor i1 %1989, true
  %1991 = and i1 %1982, %1990
  %1992 = zext i1 %1991 to i8
  store i8 %1992, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1994 = select i1 %1991, i64 %1975, i64 %1977
  store i64 %1994, i64* %1993, align 8, !tbaa !2428
  %1995 = load i8, i8* %BRANCH_TAKEN
  %1996 = icmp eq i8 %1995, 1
  br i1 %1996, label %block_400f77, label %block_400f48

block_400d25:                                     ; preds = %block_400ca4
  %1997 = load i64, i64* %PC
  %1998 = add i64 %1997, 11
  store i64 %1998, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 20) to i32*)
  %1999 = load i64, i64* %PC
  %2000 = add i64 %1999, 11
  store i64 %2000, i64* %PC
  store i32 200, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 20) to i32*)
  %2001 = load i64, i64* %RBP
  %2002 = sub i64 %2001, 4
  %2003 = load i64, i64* %PC
  %2004 = add i64 %2003, 7
  store i64 %2004, i64* %PC
  %2005 = inttoptr i64 %2002 to i32*
  store i32 0, i32* %2005
  br label %block_400d42

block_400f1c:                                     ; preds = %block_400eff, %block_400f8a
  %MEMORY.9 = phi %struct.Memory* [ %MEMORY.26, %block_400eff ], [ %MEMORY.34, %block_400f8a ]
  %2006 = load i64, i64* %RBP
  %2007 = sub i64 %2006, 4
  %2008 = load i64, i64* %PC
  %2009 = add i64 %2008, 4
  store i64 %2009, i64* %PC
  %2010 = inttoptr i64 %2007 to i32*
  %2011 = load i32, i32* %2010
  %2012 = sub i32 %2011, 1
  %2013 = icmp ult i32 %2011, 1
  %2014 = zext i1 %2013 to i8
  %2015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2014, i8* %2015, align 1, !tbaa !2433
  %2016 = and i32 %2012, 255
  %2017 = call i32 @llvm.ctpop.i32(i32 %2016) #16
  %2018 = trunc i32 %2017 to i8
  %2019 = and i8 %2018, 1
  %2020 = xor i8 %2019, 1
  %2021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2020, i8* %2021, align 1, !tbaa !2447
  %2022 = xor i32 %2011, 1
  %2023 = xor i32 %2022, %2012
  %2024 = lshr i32 %2023, 4
  %2025 = trunc i32 %2024 to i8
  %2026 = and i8 %2025, 1
  %2027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2026, i8* %2027, align 1, !tbaa !2448
  %2028 = icmp eq i32 %2012, 0
  %2029 = zext i1 %2028 to i8
  %2030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2029, i8* %2030, align 1, !tbaa !2449
  %2031 = lshr i32 %2012, 31
  %2032 = trunc i32 %2031 to i8
  %2033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2032, i8* %2033, align 1, !tbaa !2450
  %2034 = lshr i32 %2011, 31
  %2035 = xor i32 %2031, %2034
  %2036 = add nuw nsw i32 %2035, %2034
  %2037 = icmp eq i32 %2036, 2
  %2038 = zext i1 %2037 to i8
  %2039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2038, i8* %2039, align 1, !tbaa !2451
  %2040 = load i64, i64* %PC
  %2041 = add i64 %2040, 125
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 6
  %2044 = load i64, i64* %PC
  %2045 = add i64 %2044, 6
  store i64 %2045, i64* %PC
  %2046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2047 = load i8, i8* %2046, align 1, !tbaa !2449
  %2048 = icmp eq i8 %2047, 0
  %2049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2050 = load i8, i8* %2049, align 1, !tbaa !2450
  %2051 = icmp ne i8 %2050, 0
  %2052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2053 = load i8, i8* %2052, align 1, !tbaa !2451
  %2054 = icmp ne i8 %2053, 0
  %2055 = xor i1 %2051, %2054
  %2056 = xor i1 %2055, true
  %2057 = and i1 %2048, %2056
  %2058 = zext i1 %2057 to i8
  store i8 %2058, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %2059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2060 = select i1 %2057, i64 %2041, i64 %2043
  store i64 %2060, i64* %2059, align 8, !tbaa !2428
  %2061 = load i8, i8* %BRANCH_TAKEN
  %2062 = icmp eq i8 %2061, 1
  br i1 %2062, label %block_400f9d, label %block_400f26

block_400eff:                                     ; preds = %block_400e7e
  %2063 = load i64, i64* %PC
  %2064 = add i64 %2063, 11
  store i64 %2064, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 32) to i32*)
  %2065 = load i64, i64* %PC
  %2066 = add i64 %2065, 11
  store i64 %2066, i64* %PC
  store i32 128, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 32) to i32*)
  %2067 = load i64, i64* %RBP
  %2068 = sub i64 %2067, 4
  %2069 = load i64, i64* %PC
  %2070 = add i64 %2069, 7
  store i64 %2070, i64* %PC
  %2071 = inttoptr i64 %2068 to i32*
  store i32 0, i32* %2071
  br label %block_400f1c

block_401118:                                     ; preds = %block_401122, %block_401111
  %MEMORY.10 = phi %struct.Memory* [ %MEMORY.39, %block_401111 ], [ %MEMORY.10, %block_401122 ]
  %2072 = load i64, i64* %RBP
  %2073 = sub i64 %2072, 12
  %2074 = load i64, i64* %PC
  %2075 = add i64 %2074, 4
  store i64 %2075, i64* %PC
  %2076 = inttoptr i64 %2073 to i32*
  %2077 = load i32, i32* %2076
  %2078 = sub i32 %2077, 1
  %2079 = icmp ult i32 %2077, 1
  %2080 = zext i1 %2079 to i8
  %2081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2080, i8* %2081, align 1, !tbaa !2433
  %2082 = and i32 %2078, 255
  %2083 = call i32 @llvm.ctpop.i32(i32 %2082) #16
  %2084 = trunc i32 %2083 to i8
  %2085 = and i8 %2084, 1
  %2086 = xor i8 %2085, 1
  %2087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2086, i8* %2087, align 1, !tbaa !2447
  %2088 = xor i32 %2077, 1
  %2089 = xor i32 %2088, %2078
  %2090 = lshr i32 %2089, 4
  %2091 = trunc i32 %2090 to i8
  %2092 = and i8 %2091, 1
  %2093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2092, i8* %2093, align 1, !tbaa !2448
  %2094 = icmp eq i32 %2078, 0
  %2095 = zext i1 %2094 to i8
  %2096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2095, i8* %2096, align 1, !tbaa !2449
  %2097 = lshr i32 %2078, 31
  %2098 = trunc i32 %2097 to i8
  %2099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2098, i8* %2099, align 1, !tbaa !2450
  %2100 = lshr i32 %2077, 31
  %2101 = xor i32 %2097, %2100
  %2102 = add nuw nsw i32 %2101, %2100
  %2103 = icmp eq i32 %2102, 2
  %2104 = zext i1 %2103 to i8
  %2105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2104, i8* %2105, align 1, !tbaa !2451
  %2106 = load i64, i64* %PC
  %2107 = add i64 %2106, 53
  %2108 = load i64, i64* %PC
  %2109 = add i64 %2108, 6
  %2110 = load i64, i64* %PC
  %2111 = add i64 %2110, 6
  store i64 %2111, i64* %PC
  %2112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2113 = load i8, i8* %2112, align 1, !tbaa !2449
  %2114 = icmp eq i8 %2113, 0
  %2115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2116 = load i8, i8* %2115, align 1, !tbaa !2450
  %2117 = icmp ne i8 %2116, 0
  %2118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2119 = load i8, i8* %2118, align 1, !tbaa !2451
  %2120 = icmp ne i8 %2119, 0
  %2121 = xor i1 %2117, %2120
  %2122 = xor i1 %2121, true
  %2123 = and i1 %2114, %2122
  %2124 = zext i1 %2123 to i8
  store i8 %2124, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %2125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2126 = select i1 %2123, i64 %2107, i64 %2109
  store i64 %2126, i64* %2125, align 8, !tbaa !2428
  %2127 = load i8, i8* %BRANCH_TAKEN
  %2128 = icmp eq i8 %2127, 1
  br i1 %2128, label %block_401151, label %block_401122

block_400d12:                                     ; preds = %block_400cb5
  %2129 = load i64, i64* %PC
  %2130 = add i64 %2129, 5
  %2131 = load i64, i64* %PC
  %2132 = add i64 %2131, 5
  store i64 %2132, i64* %PC
  %2133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2130, i64* %2133, align 8, !tbaa !2428
  %2134 = load i64, i64* %RBP
  %2135 = sub i64 %2134, 4
  %2136 = load i64, i64* %PC
  %2137 = add i64 %2136, 3
  store i64 %2137, i64* %PC
  %2138 = inttoptr i64 %2135 to i32*
  %2139 = load i32, i32* %2138
  %2140 = zext i32 %2139 to i64
  store i64 %2140, i64* %RAX, align 8, !tbaa !2428
  %2141 = load i64, i64* %RAX
  %2142 = load i64, i64* %PC
  %2143 = add i64 %2142, 3
  store i64 %2143, i64* %PC
  %2144 = trunc i64 %2141 to i32
  %2145 = add i32 1, %2144
  %2146 = zext i32 %2145 to i64
  store i64 %2146, i64* %RAX, align 8, !tbaa !2428
  %2147 = icmp ult i32 %2145, %2144
  %2148 = icmp ult i32 %2145, 1
  %2149 = or i1 %2147, %2148
  %2150 = zext i1 %2149 to i8
  %2151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2150, i8* %2151, align 1, !tbaa !2433
  %2152 = and i32 %2145, 255
  %2153 = call i32 @llvm.ctpop.i32(i32 %2152) #16
  %2154 = trunc i32 %2153 to i8
  %2155 = and i8 %2154, 1
  %2156 = xor i8 %2155, 1
  %2157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2156, i8* %2157, align 1, !tbaa !2447
  %2158 = xor i64 1, %2141
  %2159 = trunc i64 %2158 to i32
  %2160 = xor i32 %2159, %2145
  %2161 = lshr i32 %2160, 4
  %2162 = trunc i32 %2161 to i8
  %2163 = and i8 %2162, 1
  %2164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2163, i8* %2164, align 1, !tbaa !2448
  %2165 = icmp eq i32 %2145, 0
  %2166 = zext i1 %2165 to i8
  %2167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2166, i8* %2167, align 1, !tbaa !2449
  %2168 = lshr i32 %2145, 31
  %2169 = trunc i32 %2168 to i8
  %2170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2169, i8* %2170, align 1, !tbaa !2450
  %2171 = lshr i32 %2144, 31
  %2172 = xor i32 %2168, %2171
  %2173 = add nuw nsw i32 %2172, %2168
  %2174 = icmp eq i32 %2173, 2
  %2175 = zext i1 %2174 to i8
  %2176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2175, i8* %2176, align 1, !tbaa !2451
  %2177 = load i64, i64* %RBP
  %2178 = sub i64 %2177, 4
  %2179 = load i32, i32* %EAX
  %2180 = zext i32 %2179 to i64
  %2181 = load i64, i64* %PC
  %2182 = add i64 %2181, 3
  store i64 %2182, i64* %PC
  %2183 = inttoptr i64 %2178 to i32*
  store i32 %2179, i32* %2183
  %2184 = load i64, i64* %PC
  %2185 = sub i64 %2184, 124
  %2186 = load i64, i64* %PC
  %2187 = add i64 %2186, 5
  store i64 %2187, i64* %PC
  %2188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2185, i64* %2188, align 8, !tbaa !2428
  br label %block_400ca4

block_40090e:                                     ; preds = %block_4008b1
  %2189 = load i64, i64* %PC
  %2190 = add i64 %2189, 5
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 5
  store i64 %2192, i64* %PC
  %2193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2190, i64* %2193, align 8, !tbaa !2428
  %2194 = load i64, i64* %RBP
  %2195 = sub i64 %2194, 4
  %2196 = load i64, i64* %PC
  %2197 = add i64 %2196, 3
  store i64 %2197, i64* %PC
  %2198 = inttoptr i64 %2195 to i32*
  %2199 = load i32, i32* %2198
  %2200 = zext i32 %2199 to i64
  store i64 %2200, i64* %RAX, align 8, !tbaa !2428
  %2201 = load i64, i64* %RAX
  %2202 = load i64, i64* %PC
  %2203 = add i64 %2202, 3
  store i64 %2203, i64* %PC
  %2204 = trunc i64 %2201 to i32
  %2205 = add i32 1, %2204
  %2206 = zext i32 %2205 to i64
  store i64 %2206, i64* %RAX, align 8, !tbaa !2428
  %2207 = icmp ult i32 %2205, %2204
  %2208 = icmp ult i32 %2205, 1
  %2209 = or i1 %2207, %2208
  %2210 = zext i1 %2209 to i8
  %2211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2210, i8* %2211, align 1, !tbaa !2433
  %2212 = and i32 %2205, 255
  %2213 = call i32 @llvm.ctpop.i32(i32 %2212) #16
  %2214 = trunc i32 %2213 to i8
  %2215 = and i8 %2214, 1
  %2216 = xor i8 %2215, 1
  %2217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2216, i8* %2217, align 1, !tbaa !2447
  %2218 = xor i64 1, %2201
  %2219 = trunc i64 %2218 to i32
  %2220 = xor i32 %2219, %2205
  %2221 = lshr i32 %2220, 4
  %2222 = trunc i32 %2221 to i8
  %2223 = and i8 %2222, 1
  %2224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2223, i8* %2224, align 1, !tbaa !2448
  %2225 = icmp eq i32 %2205, 0
  %2226 = zext i1 %2225 to i8
  %2227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2226, i8* %2227, align 1, !tbaa !2449
  %2228 = lshr i32 %2205, 31
  %2229 = trunc i32 %2228 to i8
  %2230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2229, i8* %2230, align 1, !tbaa !2450
  %2231 = lshr i32 %2204, 31
  %2232 = xor i32 %2228, %2231
  %2233 = add nuw nsw i32 %2232, %2228
  %2234 = icmp eq i32 %2233, 2
  %2235 = zext i1 %2234 to i8
  %2236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2235, i8* %2236, align 1, !tbaa !2451
  %2237 = load i64, i64* %RBP
  %2238 = sub i64 %2237, 4
  %2239 = load i32, i32* %EAX
  %2240 = zext i32 %2239 to i64
  %2241 = load i64, i64* %PC
  %2242 = add i64 %2241, 3
  store i64 %2242, i64* %PC
  %2243 = inttoptr i64 %2238 to i32*
  store i32 %2239, i32* %2243
  %2244 = load i64, i64* %PC
  %2245 = sub i64 %2244, 124
  %2246 = load i64, i64* %PC
  %2247 = add i64 %2246, 5
  store i64 %2247, i64* %PC
  %2248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2245, i64* %2248, align 8, !tbaa !2428
  br label %block_4008a0

block_400b68:                                     ; preds = %block_400b4b, %block_400bd6
  %MEMORY.11 = phi %struct.Memory* [ %MEMORY.32, %block_400b4b ], [ %MEMORY.16, %block_400bd6 ]
  %2249 = load i64, i64* %RBP
  %2250 = sub i64 %2249, 4
  %2251 = load i64, i64* %PC
  %2252 = add i64 %2251, 4
  store i64 %2252, i64* %PC
  %2253 = inttoptr i64 %2250 to i32*
  %2254 = load i32, i32* %2253
  %2255 = sub i32 %2254, 1
  %2256 = icmp ult i32 %2254, 1
  %2257 = zext i1 %2256 to i8
  %2258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2257, i8* %2258, align 1, !tbaa !2433
  %2259 = and i32 %2255, 255
  %2260 = call i32 @llvm.ctpop.i32(i32 %2259) #16
  %2261 = trunc i32 %2260 to i8
  %2262 = and i8 %2261, 1
  %2263 = xor i8 %2262, 1
  %2264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2263, i8* %2264, align 1, !tbaa !2447
  %2265 = xor i32 %2254, 1
  %2266 = xor i32 %2265, %2255
  %2267 = lshr i32 %2266, 4
  %2268 = trunc i32 %2267 to i8
  %2269 = and i8 %2268, 1
  %2270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2269, i8* %2270, align 1, !tbaa !2448
  %2271 = icmp eq i32 %2255, 0
  %2272 = zext i1 %2271 to i8
  %2273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2272, i8* %2273, align 1, !tbaa !2449
  %2274 = lshr i32 %2255, 31
  %2275 = trunc i32 %2274 to i8
  %2276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2275, i8* %2276, align 1, !tbaa !2450
  %2277 = lshr i32 %2254, 31
  %2278 = xor i32 %2274, %2277
  %2279 = add nuw nsw i32 %2278, %2277
  %2280 = icmp eq i32 %2279, 2
  %2281 = zext i1 %2280 to i8
  %2282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2281, i8* %2282, align 1, !tbaa !2451
  %2283 = load i64, i64* %PC
  %2284 = add i64 %2283, 125
  %2285 = load i64, i64* %PC
  %2286 = add i64 %2285, 6
  %2287 = load i64, i64* %PC
  %2288 = add i64 %2287, 6
  store i64 %2288, i64* %PC
  %2289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2290 = load i8, i8* %2289, align 1, !tbaa !2449
  %2291 = icmp eq i8 %2290, 0
  %2292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2293 = load i8, i8* %2292, align 1, !tbaa !2450
  %2294 = icmp ne i8 %2293, 0
  %2295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2296 = load i8, i8* %2295, align 1, !tbaa !2451
  %2297 = icmp ne i8 %2296, 0
  %2298 = xor i1 %2294, %2297
  %2299 = xor i1 %2298, true
  %2300 = and i1 %2291, %2299
  %2301 = zext i1 %2300 to i8
  store i8 %2301, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %2302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2303 = select i1 %2300, i64 %2284, i64 %2286
  store i64 %2303, i64* %2302, align 8, !tbaa !2428
  %2304 = load i8, i8* %BRANCH_TAKEN
  %2305 = icmp eq i8 %2304, 1
  br i1 %2305, label %block_400be9, label %block_400b72

block_401100:                                     ; preds = %block_4010f6
  %2306 = load i64, i64* %RBP
  %2307 = sub i64 %2306, 8
  %2308 = load i64, i64* %PC
  %2309 = add i64 %2308, 7
  store i64 %2309, i64* %PC
  %2310 = inttoptr i64 %2307 to i32*
  store i32 0, i32* %2310
  br label %block_401107

block_400fcb:                                     ; preds = %block_401015, %block_400fc4
  %MEMORY.12 = phi %struct.Memory* [ %MEMORY.2, %block_400fc4 ], [ %MEMORY.1, %block_401015 ]
  %2311 = load i64, i64* %RBP
  %2312 = sub i64 %2311, 8
  %2313 = load i64, i64* %PC
  %2314 = add i64 %2313, 4
  store i64 %2314, i64* %PC
  %2315 = inttoptr i64 %2312 to i32*
  %2316 = load i32, i32* %2315
  %2317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2317, align 1, !tbaa !2433
  %2318 = and i32 %2316, 255
  %2319 = call i32 @llvm.ctpop.i32(i32 %2318) #16
  %2320 = trunc i32 %2319 to i8
  %2321 = and i8 %2320, 1
  %2322 = xor i8 %2321, 1
  %2323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2322, i8* %2323, align 1, !tbaa !2447
  %2324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2324, align 1, !tbaa !2448
  %2325 = icmp eq i32 %2316, 0
  %2326 = zext i1 %2325 to i8
  %2327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2326, i8* %2327, align 1, !tbaa !2449
  %2328 = lshr i32 %2316, 31
  %2329 = trunc i32 %2328 to i8
  %2330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2329, i8* %2330, align 1, !tbaa !2450
  %2331 = lshr i32 %2316, 31
  %2332 = xor i32 %2328, %2331
  %2333 = add nuw nsw i32 %2332, %2331
  %2334 = icmp eq i32 %2333, 2
  %2335 = zext i1 %2334 to i8
  %2336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2335, i8* %2336, align 1, !tbaa !2451
  %2337 = load i64, i64* %PC
  %2338 = add i64 %2337, 89
  %2339 = load i64, i64* %PC
  %2340 = add i64 %2339, 6
  %2341 = load i64, i64* %PC
  %2342 = add i64 %2341, 6
  store i64 %2342, i64* %PC
  %2343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2344 = load i8, i8* %2343, align 1, !tbaa !2449
  %2345 = icmp eq i8 %2344, 0
  %2346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2347 = load i8, i8* %2346, align 1, !tbaa !2450
  %2348 = icmp ne i8 %2347, 0
  %2349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2350 = load i8, i8* %2349, align 1, !tbaa !2451
  %2351 = icmp ne i8 %2350, 0
  %2352 = xor i1 %2348, %2351
  %2353 = xor i1 %2352, true
  %2354 = and i1 %2345, %2353
  %2355 = zext i1 %2354 to i8
  store i8 %2355, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %2356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2357 = select i1 %2354, i64 %2338, i64 %2340
  store i64 %2357, i64* %2356, align 8, !tbaa !2428
  %2358 = load i8, i8* %BRANCH_TAKEN
  %2359 = icmp eq i8 %2358, 1
  br i1 %2359, label %block_401028, label %block_400fd5

block_400cff:                                     ; preds = %block_400cc6
  %2360 = load i64, i64* %PC
  %2361 = add i64 %2360, 5
  %2362 = load i64, i64* %PC
  %2363 = add i64 %2362, 5
  store i64 %2363, i64* %PC
  %2364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2361, i64* %2364, align 8, !tbaa !2428
  %2365 = load i64, i64* %RBP
  %2366 = sub i64 %2365, 8
  %2367 = load i64, i64* %PC
  %2368 = add i64 %2367, 3
  store i64 %2368, i64* %PC
  %2369 = inttoptr i64 %2366 to i32*
  %2370 = load i32, i32* %2369
  %2371 = zext i32 %2370 to i64
  store i64 %2371, i64* %RAX, align 8, !tbaa !2428
  %2372 = load i64, i64* %RAX
  %2373 = load i64, i64* %PC
  %2374 = add i64 %2373, 3
  store i64 %2374, i64* %PC
  %2375 = trunc i64 %2372 to i32
  %2376 = add i32 1, %2375
  %2377 = zext i32 %2376 to i64
  store i64 %2377, i64* %RAX, align 8, !tbaa !2428
  %2378 = icmp ult i32 %2376, %2375
  %2379 = icmp ult i32 %2376, 1
  %2380 = or i1 %2378, %2379
  %2381 = zext i1 %2380 to i8
  %2382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2381, i8* %2382, align 1, !tbaa !2433
  %2383 = and i32 %2376, 255
  %2384 = call i32 @llvm.ctpop.i32(i32 %2383) #16
  %2385 = trunc i32 %2384 to i8
  %2386 = and i8 %2385, 1
  %2387 = xor i8 %2386, 1
  %2388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2387, i8* %2388, align 1, !tbaa !2447
  %2389 = xor i64 1, %2372
  %2390 = trunc i64 %2389 to i32
  %2391 = xor i32 %2390, %2376
  %2392 = lshr i32 %2391, 4
  %2393 = trunc i32 %2392 to i8
  %2394 = and i8 %2393, 1
  %2395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2394, i8* %2395, align 1, !tbaa !2448
  %2396 = icmp eq i32 %2376, 0
  %2397 = zext i1 %2396 to i8
  %2398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2397, i8* %2398, align 1, !tbaa !2449
  %2399 = lshr i32 %2376, 31
  %2400 = trunc i32 %2399 to i8
  %2401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2400, i8* %2401, align 1, !tbaa !2450
  %2402 = lshr i32 %2375, 31
  %2403 = xor i32 %2399, %2402
  %2404 = add nuw nsw i32 %2403, %2399
  %2405 = icmp eq i32 %2404, 2
  %2406 = zext i1 %2405 to i8
  %2407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2406, i8* %2407, align 1, !tbaa !2451
  %2408 = load i64, i64* %RBP
  %2409 = sub i64 %2408, 8
  %2410 = load i32, i32* %EAX
  %2411 = zext i32 %2410 to i64
  %2412 = load i64, i64* %PC
  %2413 = add i64 %2412, 3
  store i64 %2413, i64* %PC
  %2414 = inttoptr i64 %2409 to i32*
  store i32 %2410, i32* %2414
  %2415 = load i64, i64* %PC
  %2416 = sub i64 %2415, 88
  %2417 = load i64, i64* %PC
  %2418 = add i64 %2417, 5
  store i64 %2418, i64* %PC
  %2419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2416, i64* %2419, align 8, !tbaa !2428
  br label %block_400cb5

block_400de0:                                     ; preds = %block_400e4e, %block_400dc3
  %MEMORY.13 = phi %struct.Memory* [ %MEMORY.3, %block_400dc3 ], [ %MEMORY.15, %block_400e4e ]
  %2420 = load i64, i64* %RBP
  %2421 = sub i64 %2420, 4
  %2422 = load i64, i64* %PC
  %2423 = add i64 %2422, 4
  store i64 %2423, i64* %PC
  %2424 = inttoptr i64 %2421 to i32*
  %2425 = load i32, i32* %2424
  %2426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2426, align 1, !tbaa !2433
  %2427 = and i32 %2425, 255
  %2428 = call i32 @llvm.ctpop.i32(i32 %2427) #16
  %2429 = trunc i32 %2428 to i8
  %2430 = and i8 %2429, 1
  %2431 = xor i8 %2430, 1
  %2432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2431, i8* %2432, align 1, !tbaa !2447
  %2433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2433, align 1, !tbaa !2448
  %2434 = icmp eq i32 %2425, 0
  %2435 = zext i1 %2434 to i8
  %2436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2435, i8* %2436, align 1, !tbaa !2449
  %2437 = lshr i32 %2425, 31
  %2438 = trunc i32 %2437 to i8
  %2439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2438, i8* %2439, align 1, !tbaa !2450
  %2440 = lshr i32 %2425, 31
  %2441 = xor i32 %2437, %2440
  %2442 = add nuw nsw i32 %2441, %2440
  %2443 = icmp eq i32 %2442, 2
  %2444 = zext i1 %2443 to i8
  %2445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2444, i8* %2445, align 1, !tbaa !2451
  %2446 = load i64, i64* %PC
  %2447 = add i64 %2446, 125
  %2448 = load i64, i64* %PC
  %2449 = add i64 %2448, 6
  %2450 = load i64, i64* %PC
  %2451 = add i64 %2450, 6
  store i64 %2451, i64* %PC
  %2452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2453 = load i8, i8* %2452, align 1, !tbaa !2449
  %2454 = icmp eq i8 %2453, 0
  %2455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2456 = load i8, i8* %2455, align 1, !tbaa !2450
  %2457 = icmp ne i8 %2456, 0
  %2458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2459 = load i8, i8* %2458, align 1, !tbaa !2451
  %2460 = icmp ne i8 %2459, 0
  %2461 = xor i1 %2457, %2460
  %2462 = xor i1 %2461, true
  %2463 = and i1 %2454, %2462
  %2464 = zext i1 %2463 to i8
  store i8 %2464, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %2465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2466 = select i1 %2463, i64 %2447, i64 %2449
  store i64 %2466, i64* %2465, align 8, !tbaa !2428
  %2467 = load i8, i8* %BRANCH_TAKEN
  %2468 = icmp eq i8 %2467, 1
  br i1 %2468, label %block_400e61, label %block_400dea

block_4008fb:                                     ; preds = %block_4008c2
  %2469 = load i64, i64* %PC
  %2470 = add i64 %2469, 5
  %2471 = load i64, i64* %PC
  %2472 = add i64 %2471, 5
  store i64 %2472, i64* %PC
  %2473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2470, i64* %2473, align 8, !tbaa !2428
  %2474 = load i64, i64* %RBP
  %2475 = sub i64 %2474, 8
  %2476 = load i64, i64* %PC
  %2477 = add i64 %2476, 3
  store i64 %2477, i64* %PC
  %2478 = inttoptr i64 %2475 to i32*
  %2479 = load i32, i32* %2478
  %2480 = zext i32 %2479 to i64
  store i64 %2480, i64* %RAX, align 8, !tbaa !2428
  %2481 = load i64, i64* %RAX
  %2482 = load i64, i64* %PC
  %2483 = add i64 %2482, 3
  store i64 %2483, i64* %PC
  %2484 = trunc i64 %2481 to i32
  %2485 = add i32 1, %2484
  %2486 = zext i32 %2485 to i64
  store i64 %2486, i64* %RAX, align 8, !tbaa !2428
  %2487 = icmp ult i32 %2485, %2484
  %2488 = icmp ult i32 %2485, 1
  %2489 = or i1 %2487, %2488
  %2490 = zext i1 %2489 to i8
  %2491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2490, i8* %2491, align 1, !tbaa !2433
  %2492 = and i32 %2485, 255
  %2493 = call i32 @llvm.ctpop.i32(i32 %2492) #16
  %2494 = trunc i32 %2493 to i8
  %2495 = and i8 %2494, 1
  %2496 = xor i8 %2495, 1
  %2497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2496, i8* %2497, align 1, !tbaa !2447
  %2498 = xor i64 1, %2481
  %2499 = trunc i64 %2498 to i32
  %2500 = xor i32 %2499, %2485
  %2501 = lshr i32 %2500, 4
  %2502 = trunc i32 %2501 to i8
  %2503 = and i8 %2502, 1
  %2504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2503, i8* %2504, align 1, !tbaa !2448
  %2505 = icmp eq i32 %2485, 0
  %2506 = zext i1 %2505 to i8
  %2507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2506, i8* %2507, align 1, !tbaa !2449
  %2508 = lshr i32 %2485, 31
  %2509 = trunc i32 %2508 to i8
  %2510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2509, i8* %2510, align 1, !tbaa !2450
  %2511 = lshr i32 %2484, 31
  %2512 = xor i32 %2508, %2511
  %2513 = add nuw nsw i32 %2512, %2508
  %2514 = icmp eq i32 %2513, 2
  %2515 = zext i1 %2514 to i8
  %2516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2515, i8* %2516, align 1, !tbaa !2451
  %2517 = load i64, i64* %RBP
  %2518 = sub i64 %2517, 8
  %2519 = load i32, i32* %EAX
  %2520 = zext i32 %2519 to i64
  %2521 = load i64, i64* %PC
  %2522 = add i64 %2521, 3
  store i64 %2522, i64* %PC
  %2523 = inttoptr i64 %2518 to i32*
  store i32 %2519, i32* %2523
  %2524 = load i64, i64* %PC
  %2525 = sub i64 %2524, 88
  %2526 = load i64, i64* %PC
  %2527 = add i64 %2526, 5
  store i64 %2527, i64* %PC
  %2528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2525, i64* %2528, align 8, !tbaa !2428
  br label %block_4008b1

block_4011f4:                                     ; preds = %block_401177
  %2529 = load i64, i64* %PC
  %2530 = add i64 %2529, 10
  store i64 %2530, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401360__rodata_type* @seg_401360__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !2428
  %2531 = load i64, i64* %PC
  %2532 = add i64 %2531, 2
  store i64 %2532, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %2533 = load i64, i64* %PC
  %2534 = sub i64 %2533, 3568
  %2535 = load i64, i64* %PC
  %2536 = add i64 %2535, 5
  %2537 = load i64, i64* %PC
  %2538 = add i64 %2537, 5
  store i64 %2538, i64* %PC
  %2539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2540 = load i64, i64* %2539, align 8, !tbaa !2428
  %2541 = add i64 %2540, -8
  %2542 = inttoptr i64 %2541 to i64*
  store i64 %2536, i64* %2542
  store i64 %2541, i64* %2539, align 8, !tbaa !2428
  %2543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2534, i64* %2543, align 8, !tbaa !2428
  %2544 = load i64, i64* %PC
  %2545 = call %struct.Memory* @ext_619238_printf(%struct.State* %0, i64 %2544, %struct.Memory* %5938)
  %2546 = load i64, i64* %RBP
  %2547 = sub i64 %2546, 20
  %2548 = load i32, i32* %EAX
  %2549 = zext i32 %2548 to i64
  %2550 = load i64, i64* %PC
  %2551 = add i64 %2550, 3
  store i64 %2551, i64* %PC
  %2552 = inttoptr i64 %2547 to i32*
  store i32 %2548, i32* %2552
  br label %block_401208

block_400af6:                                     ; preds = %block_400aec
  %2553 = load i64, i64* %RBP
  %2554 = sub i64 %2553, 4
  %2555 = load i64, i64* %PC
  %2556 = add i64 %2555, 3
  store i64 %2556, i64* %PC
  %2557 = inttoptr i64 %2554 to i32*
  %2558 = load i32, i32* %2557
  %2559 = zext i32 %2558 to i64
  store i64 %2559, i64* %RAX, align 8, !tbaa !2428
  %2560 = load i64, i64* %RBP
  %2561 = sub i64 %2560, 8
  %2562 = load i64, i64* %PC
  %2563 = add i64 %2562, 3
  store i64 %2563, i64* %PC
  %2564 = inttoptr i64 %2561 to i32*
  %2565 = load i32, i32* %2564
  %2566 = zext i32 %2565 to i64
  store i64 %2566, i64* %RCX, align 8, !tbaa !2428
  %2567 = load i64, i64* %RBP
  %2568 = sub i64 %2567, 12
  %2569 = load i64, i64* %PC
  %2570 = add i64 %2569, 3
  store i64 %2570, i64* %PC
  %2571 = inttoptr i64 %2568 to i32*
  %2572 = load i32, i32* %2571
  %2573 = zext i32 %2572 to i64
  store i64 %2573, i64* %RDX, align 8, !tbaa !2428
  %2574 = load i64, i64* %RDX
  %2575 = load i64, i64* %PC
  %2576 = add i64 %2575, 3
  store i64 %2576, i64* %PC
  %2577 = and i64 %2574, 4294967295
  %2578 = shl i64 %2577, 2
  %2579 = trunc i64 %2578 to i32
  %2580 = icmp slt i32 %2579, 0
  %2581 = shl i32 %2579, 1
  %2582 = zext i32 %2581 to i64
  store i64 %2582, i64* %RDX, align 8, !tbaa !2428
  %2583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2584 = zext i1 %2580 to i8
  store i8 %2584, i8* %2583, align 1, !tbaa !2432
  %2585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2586 = and i32 %2581, 254
  %2587 = call i32 @llvm.ctpop.i32(i32 %2586) #16
  %2588 = trunc i32 %2587 to i8
  %2589 = and i8 %2588, 1
  %2590 = xor i8 %2589, 1
  store i8 %2590, i8* %2585, align 1, !tbaa !2432
  %2591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2591, align 1, !tbaa !2432
  %2592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2593 = icmp eq i32 %2581, 0
  %2594 = zext i1 %2593 to i8
  store i8 %2594, i8* %2592, align 1, !tbaa !2432
  %2595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2596 = lshr i32 %2581, 31
  %2597 = trunc i32 %2596 to i8
  store i8 %2597, i8* %2595, align 1, !tbaa !2432
  %2598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2598, align 1, !tbaa !2432
  %2599 = load i64, i64* %RCX
  %2600 = load i32, i32* %EDX
  %2601 = zext i32 %2600 to i64
  %2602 = load i64, i64* %PC
  %2603 = add i64 %2602, 2
  store i64 %2603, i64* %PC
  %2604 = trunc i64 %2599 to i32
  %2605 = add i32 %2600, %2604
  %2606 = zext i32 %2605 to i64
  store i64 %2606, i64* %RCX, align 8, !tbaa !2428
  %2607 = icmp ult i32 %2605, %2604
  %2608 = icmp ult i32 %2605, %2600
  %2609 = or i1 %2607, %2608
  %2610 = zext i1 %2609 to i8
  %2611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2610, i8* %2611, align 1, !tbaa !2433
  %2612 = and i32 %2605, 255
  %2613 = call i32 @llvm.ctpop.i32(i32 %2612) #16
  %2614 = trunc i32 %2613 to i8
  %2615 = and i8 %2614, 1
  %2616 = xor i8 %2615, 1
  %2617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2616, i8* %2617, align 1, !tbaa !2447
  %2618 = xor i64 %2601, %2599
  %2619 = trunc i64 %2618 to i32
  %2620 = xor i32 %2619, %2605
  %2621 = lshr i32 %2620, 4
  %2622 = trunc i32 %2621 to i8
  %2623 = and i8 %2622, 1
  %2624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2623, i8* %2624, align 1, !tbaa !2448
  %2625 = icmp eq i32 %2605, 0
  %2626 = zext i1 %2625 to i8
  %2627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2626, i8* %2627, align 1, !tbaa !2449
  %2628 = lshr i32 %2605, 31
  %2629 = trunc i32 %2628 to i8
  %2630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2629, i8* %2630, align 1, !tbaa !2450
  %2631 = lshr i32 %2604, 31
  %2632 = lshr i32 %2600, 31
  %2633 = xor i32 %2628, %2631
  %2634 = xor i32 %2628, %2632
  %2635 = add nuw nsw i32 %2633, %2634
  %2636 = icmp eq i32 %2635, 2
  %2637 = zext i1 %2636 to i8
  %2638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2637, i8* %2638, align 1, !tbaa !2451
  %2639 = load i64, i64* %RCX
  %2640 = load i64, i64* %PC
  %2641 = add i64 %2640, 3
  store i64 %2641, i64* %PC
  %2642 = and i64 %2639, 4294967295
  %2643 = shl i64 %2642, 2
  %2644 = trunc i64 %2643 to i32
  %2645 = icmp slt i32 %2644, 0
  %2646 = shl i32 %2644, 1
  %2647 = zext i32 %2646 to i64
  store i64 %2647, i64* %RCX, align 8, !tbaa !2428
  %2648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2649 = zext i1 %2645 to i8
  store i8 %2649, i8* %2648, align 1, !tbaa !2432
  %2650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2651 = and i32 %2646, 254
  %2652 = call i32 @llvm.ctpop.i32(i32 %2651) #16
  %2653 = trunc i32 %2652 to i8
  %2654 = and i8 %2653, 1
  %2655 = xor i8 %2654, 1
  store i8 %2655, i8* %2650, align 1, !tbaa !2432
  %2656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2656, align 1, !tbaa !2432
  %2657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2658 = icmp eq i32 %2646, 0
  %2659 = zext i1 %2658 to i8
  store i8 %2659, i8* %2657, align 1, !tbaa !2432
  %2660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2661 = lshr i32 %2646, 31
  %2662 = trunc i32 %2661 to i8
  store i8 %2662, i8* %2660, align 1, !tbaa !2432
  %2663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2663, align 1, !tbaa !2432
  %2664 = load i64, i64* %RAX
  %2665 = load i32, i32* %ECX
  %2666 = zext i32 %2665 to i64
  %2667 = load i64, i64* %PC
  %2668 = add i64 %2667, 2
  store i64 %2668, i64* %PC
  %2669 = trunc i64 %2664 to i32
  %2670 = add i32 %2665, %2669
  %2671 = zext i32 %2670 to i64
  store i64 %2671, i64* %RAX, align 8, !tbaa !2428
  %2672 = icmp ult i32 %2670, %2669
  %2673 = icmp ult i32 %2670, %2665
  %2674 = or i1 %2672, %2673
  %2675 = zext i1 %2674 to i8
  %2676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2675, i8* %2676, align 1, !tbaa !2433
  %2677 = and i32 %2670, 255
  %2678 = call i32 @llvm.ctpop.i32(i32 %2677) #16
  %2679 = trunc i32 %2678 to i8
  %2680 = and i8 %2679, 1
  %2681 = xor i8 %2680, 1
  %2682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2681, i8* %2682, align 1, !tbaa !2447
  %2683 = xor i64 %2666, %2664
  %2684 = trunc i64 %2683 to i32
  %2685 = xor i32 %2684, %2670
  %2686 = lshr i32 %2685, 4
  %2687 = trunc i32 %2686 to i8
  %2688 = and i8 %2687, 1
  %2689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2688, i8* %2689, align 1, !tbaa !2448
  %2690 = icmp eq i32 %2670, 0
  %2691 = zext i1 %2690 to i8
  %2692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2691, i8* %2692, align 1, !tbaa !2449
  %2693 = lshr i32 %2670, 31
  %2694 = trunc i32 %2693 to i8
  %2695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2694, i8* %2695, align 1, !tbaa !2450
  %2696 = lshr i32 %2669, 31
  %2697 = lshr i32 %2665, 31
  %2698 = xor i32 %2693, %2696
  %2699 = xor i32 %2693, %2697
  %2700 = add nuw nsw i32 %2698, %2699
  %2701 = icmp eq i32 %2700, 2
  %2702 = zext i1 %2701 to i8
  %2703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2702, i8* %2703, align 1, !tbaa !2451
  %2704 = load i32, i32* %EAX
  %2705 = zext i32 %2704 to i64
  %2706 = load i64, i64* %PC
  %2707 = add i64 %2706, 3
  store i64 %2707, i64* %PC
  %2708 = shl i64 %2705, 32
  %2709 = ashr exact i64 %2708, 32
  store i64 %2709, i64* %RSI, align 8, !tbaa !2428
  %2710 = load i64, i64* %RSI
  %2711 = mul i64 %2710, 4
  %2712 = add i64 %2711, add (i64 ptrtoint (%p_type* @p to i64), i64 4096)
  %2713 = load i64, i64* %PC
  %2714 = add i64 %2713, 11
  store i64 %2714, i64* %PC
  %2715 = inttoptr i64 %2712 to i32*
  store i32 1, i32* %2715
  %2716 = load i64, i64* %RBP
  %2717 = sub i64 %2716, 12
  %2718 = load i64, i64* %PC
  %2719 = add i64 %2718, 3
  store i64 %2719, i64* %PC
  %2720 = inttoptr i64 %2717 to i32*
  %2721 = load i32, i32* %2720
  %2722 = zext i32 %2721 to i64
  store i64 %2722, i64* %RAX, align 8, !tbaa !2428
  %2723 = load i64, i64* %RAX
  %2724 = load i64, i64* %PC
  %2725 = add i64 %2724, 3
  store i64 %2725, i64* %PC
  %2726 = trunc i64 %2723 to i32
  %2727 = add i32 1, %2726
  %2728 = zext i32 %2727 to i64
  store i64 %2728, i64* %RAX, align 8, !tbaa !2428
  %2729 = icmp ult i32 %2727, %2726
  %2730 = icmp ult i32 %2727, 1
  %2731 = or i1 %2729, %2730
  %2732 = zext i1 %2731 to i8
  %2733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2732, i8* %2733, align 1, !tbaa !2433
  %2734 = and i32 %2727, 255
  %2735 = call i32 @llvm.ctpop.i32(i32 %2734) #16
  %2736 = trunc i32 %2735 to i8
  %2737 = and i8 %2736, 1
  %2738 = xor i8 %2737, 1
  %2739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2738, i8* %2739, align 1, !tbaa !2447
  %2740 = xor i64 1, %2723
  %2741 = trunc i64 %2740 to i32
  %2742 = xor i32 %2741, %2727
  %2743 = lshr i32 %2742, 4
  %2744 = trunc i32 %2743 to i8
  %2745 = and i8 %2744, 1
  %2746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2745, i8* %2746, align 1, !tbaa !2448
  %2747 = icmp eq i32 %2727, 0
  %2748 = zext i1 %2747 to i8
  %2749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2748, i8* %2749, align 1, !tbaa !2449
  %2750 = lshr i32 %2727, 31
  %2751 = trunc i32 %2750 to i8
  %2752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2751, i8* %2752, align 1, !tbaa !2450
  %2753 = lshr i32 %2726, 31
  %2754 = xor i32 %2750, %2753
  %2755 = add nuw nsw i32 %2754, %2750
  %2756 = icmp eq i32 %2755, 2
  %2757 = zext i1 %2756 to i8
  %2758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2757, i8* %2758, align 1, !tbaa !2451
  %2759 = load i64, i64* %RBP
  %2760 = sub i64 %2759, 12
  %2761 = load i32, i32* %EAX
  %2762 = zext i32 %2761 to i64
  %2763 = load i64, i64* %PC
  %2764 = add i64 %2763, 3
  store i64 %2764, i64* %PC
  %2765 = inttoptr i64 %2760 to i32*
  store i32 %2761, i32* %2765
  %2766 = load i64, i64* %PC
  %2767 = sub i64 %2766, 52
  %2768 = load i64, i64* %PC
  %2769 = add i64 %2768, 5
  store i64 %2769, i64* %PC
  %2770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2767, i64* %2770, align 8, !tbaa !2428
  br label %block_400aec

block_400f48:                                     ; preds = %block_400f3e
  %2771 = load i64, i64* %RBP
  %2772 = sub i64 %2771, 4
  %2773 = load i64, i64* %PC
  %2774 = add i64 %2773, 3
  store i64 %2774, i64* %PC
  %2775 = inttoptr i64 %2772 to i32*
  %2776 = load i32, i32* %2775
  %2777 = zext i32 %2776 to i64
  store i64 %2777, i64* %RAX, align 8, !tbaa !2428
  %2778 = load i64, i64* %RBP
  %2779 = sub i64 %2778, 8
  %2780 = load i64, i64* %PC
  %2781 = add i64 %2780, 3
  store i64 %2781, i64* %PC
  %2782 = inttoptr i64 %2779 to i32*
  %2783 = load i32, i32* %2782
  %2784 = zext i32 %2783 to i64
  store i64 %2784, i64* %RCX, align 8, !tbaa !2428
  %2785 = load i64, i64* %RBP
  %2786 = sub i64 %2785, 12
  %2787 = load i64, i64* %PC
  %2788 = add i64 %2787, 3
  store i64 %2788, i64* %PC
  %2789 = inttoptr i64 %2786 to i32*
  %2790 = load i32, i32* %2789
  %2791 = zext i32 %2790 to i64
  store i64 %2791, i64* %RDX, align 8, !tbaa !2428
  %2792 = load i64, i64* %RDX
  %2793 = load i64, i64* %PC
  %2794 = add i64 %2793, 3
  store i64 %2794, i64* %PC
  %2795 = and i64 %2792, 4294967295
  %2796 = shl i64 %2795, 2
  %2797 = trunc i64 %2796 to i32
  %2798 = icmp slt i32 %2797, 0
  %2799 = shl i32 %2797, 1
  %2800 = zext i32 %2799 to i64
  store i64 %2800, i64* %RDX, align 8, !tbaa !2428
  %2801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2802 = zext i1 %2798 to i8
  store i8 %2802, i8* %2801, align 1, !tbaa !2432
  %2803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2804 = and i32 %2799, 254
  %2805 = call i32 @llvm.ctpop.i32(i32 %2804) #16
  %2806 = trunc i32 %2805 to i8
  %2807 = and i8 %2806, 1
  %2808 = xor i8 %2807, 1
  store i8 %2808, i8* %2803, align 1, !tbaa !2432
  %2809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2809, align 1, !tbaa !2432
  %2810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2811 = icmp eq i32 %2799, 0
  %2812 = zext i1 %2811 to i8
  store i8 %2812, i8* %2810, align 1, !tbaa !2432
  %2813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2814 = lshr i32 %2799, 31
  %2815 = trunc i32 %2814 to i8
  store i8 %2815, i8* %2813, align 1, !tbaa !2432
  %2816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2816, align 1, !tbaa !2432
  %2817 = load i64, i64* %RCX
  %2818 = load i32, i32* %EDX
  %2819 = zext i32 %2818 to i64
  %2820 = load i64, i64* %PC
  %2821 = add i64 %2820, 2
  store i64 %2821, i64* %PC
  %2822 = trunc i64 %2817 to i32
  %2823 = add i32 %2818, %2822
  %2824 = zext i32 %2823 to i64
  store i64 %2824, i64* %RCX, align 8, !tbaa !2428
  %2825 = icmp ult i32 %2823, %2822
  %2826 = icmp ult i32 %2823, %2818
  %2827 = or i1 %2825, %2826
  %2828 = zext i1 %2827 to i8
  %2829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2828, i8* %2829, align 1, !tbaa !2433
  %2830 = and i32 %2823, 255
  %2831 = call i32 @llvm.ctpop.i32(i32 %2830) #16
  %2832 = trunc i32 %2831 to i8
  %2833 = and i8 %2832, 1
  %2834 = xor i8 %2833, 1
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2834, i8* %2835, align 1, !tbaa !2447
  %2836 = xor i64 %2819, %2817
  %2837 = trunc i64 %2836 to i32
  %2838 = xor i32 %2837, %2823
  %2839 = lshr i32 %2838, 4
  %2840 = trunc i32 %2839 to i8
  %2841 = and i8 %2840, 1
  %2842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2841, i8* %2842, align 1, !tbaa !2448
  %2843 = icmp eq i32 %2823, 0
  %2844 = zext i1 %2843 to i8
  %2845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2844, i8* %2845, align 1, !tbaa !2449
  %2846 = lshr i32 %2823, 31
  %2847 = trunc i32 %2846 to i8
  %2848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2847, i8* %2848, align 1, !tbaa !2450
  %2849 = lshr i32 %2822, 31
  %2850 = lshr i32 %2818, 31
  %2851 = xor i32 %2846, %2849
  %2852 = xor i32 %2846, %2850
  %2853 = add nuw nsw i32 %2851, %2852
  %2854 = icmp eq i32 %2853, 2
  %2855 = zext i1 %2854 to i8
  %2856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2855, i8* %2856, align 1, !tbaa !2451
  %2857 = load i64, i64* %RCX
  %2858 = load i64, i64* %PC
  %2859 = add i64 %2858, 3
  store i64 %2859, i64* %PC
  %2860 = and i64 %2857, 4294967295
  %2861 = shl i64 %2860, 2
  %2862 = trunc i64 %2861 to i32
  %2863 = icmp slt i32 %2862, 0
  %2864 = shl i32 %2862, 1
  %2865 = zext i32 %2864 to i64
  store i64 %2865, i64* %RCX, align 8, !tbaa !2428
  %2866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2867 = zext i1 %2863 to i8
  store i8 %2867, i8* %2866, align 1, !tbaa !2432
  %2868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2869 = and i32 %2864, 254
  %2870 = call i32 @llvm.ctpop.i32(i32 %2869) #16
  %2871 = trunc i32 %2870 to i8
  %2872 = and i8 %2871, 1
  %2873 = xor i8 %2872, 1
  store i8 %2873, i8* %2868, align 1, !tbaa !2432
  %2874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2874, align 1, !tbaa !2432
  %2875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2876 = icmp eq i32 %2864, 0
  %2877 = zext i1 %2876 to i8
  store i8 %2877, i8* %2875, align 1, !tbaa !2432
  %2878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2879 = lshr i32 %2864, 31
  %2880 = trunc i32 %2879 to i8
  store i8 %2880, i8* %2878, align 1, !tbaa !2432
  %2881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2881, align 1, !tbaa !2432
  %2882 = load i64, i64* %RAX
  %2883 = load i32, i32* %ECX
  %2884 = zext i32 %2883 to i64
  %2885 = load i64, i64* %PC
  %2886 = add i64 %2885, 2
  store i64 %2886, i64* %PC
  %2887 = trunc i64 %2882 to i32
  %2888 = add i32 %2883, %2887
  %2889 = zext i32 %2888 to i64
  store i64 %2889, i64* %RAX, align 8, !tbaa !2428
  %2890 = icmp ult i32 %2888, %2887
  %2891 = icmp ult i32 %2888, %2883
  %2892 = or i1 %2890, %2891
  %2893 = zext i1 %2892 to i8
  %2894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2893, i8* %2894, align 1, !tbaa !2433
  %2895 = and i32 %2888, 255
  %2896 = call i32 @llvm.ctpop.i32(i32 %2895) #16
  %2897 = trunc i32 %2896 to i8
  %2898 = and i8 %2897, 1
  %2899 = xor i8 %2898, 1
  %2900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2899, i8* %2900, align 1, !tbaa !2447
  %2901 = xor i64 %2884, %2882
  %2902 = trunc i64 %2901 to i32
  %2903 = xor i32 %2902, %2888
  %2904 = lshr i32 %2903, 4
  %2905 = trunc i32 %2904 to i8
  %2906 = and i8 %2905, 1
  %2907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2906, i8* %2907, align 1, !tbaa !2448
  %2908 = icmp eq i32 %2888, 0
  %2909 = zext i1 %2908 to i8
  %2910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2909, i8* %2910, align 1, !tbaa !2449
  %2911 = lshr i32 %2888, 31
  %2912 = trunc i32 %2911 to i8
  %2913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2912, i8* %2913, align 1, !tbaa !2450
  %2914 = lshr i32 %2887, 31
  %2915 = lshr i32 %2883, 31
  %2916 = xor i32 %2911, %2914
  %2917 = xor i32 %2911, %2915
  %2918 = add nuw nsw i32 %2916, %2917
  %2919 = icmp eq i32 %2918, 2
  %2920 = zext i1 %2919 to i8
  %2921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2920, i8* %2921, align 1, !tbaa !2451
  %2922 = load i32, i32* %EAX
  %2923 = zext i32 %2922 to i64
  %2924 = load i64, i64* %PC
  %2925 = add i64 %2924, 3
  store i64 %2925, i64* %PC
  %2926 = shl i64 %2923, 32
  %2927 = ashr exact i64 %2926, 32
  store i64 %2927, i64* %RSI, align 8, !tbaa !2428
  %2928 = load i64, i64* %RSI
  %2929 = mul i64 %2928, 4
  %2930 = add i64 %2929, add (i64 ptrtoint (%p_type* @p to i64), i64 18432)
  %2931 = load i64, i64* %PC
  %2932 = add i64 %2931, 11
  store i64 %2932, i64* %PC
  %2933 = inttoptr i64 %2930 to i32*
  store i32 1, i32* %2933
  %2934 = load i64, i64* %RBP
  %2935 = sub i64 %2934, 12
  %2936 = load i64, i64* %PC
  %2937 = add i64 %2936, 3
  store i64 %2937, i64* %PC
  %2938 = inttoptr i64 %2935 to i32*
  %2939 = load i32, i32* %2938
  %2940 = zext i32 %2939 to i64
  store i64 %2940, i64* %RAX, align 8, !tbaa !2428
  %2941 = load i64, i64* %RAX
  %2942 = load i64, i64* %PC
  %2943 = add i64 %2942, 3
  store i64 %2943, i64* %PC
  %2944 = trunc i64 %2941 to i32
  %2945 = add i32 1, %2944
  %2946 = zext i32 %2945 to i64
  store i64 %2946, i64* %RAX, align 8, !tbaa !2428
  %2947 = icmp ult i32 %2945, %2944
  %2948 = icmp ult i32 %2945, 1
  %2949 = or i1 %2947, %2948
  %2950 = zext i1 %2949 to i8
  %2951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2950, i8* %2951, align 1, !tbaa !2433
  %2952 = and i32 %2945, 255
  %2953 = call i32 @llvm.ctpop.i32(i32 %2952) #16
  %2954 = trunc i32 %2953 to i8
  %2955 = and i8 %2954, 1
  %2956 = xor i8 %2955, 1
  %2957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2956, i8* %2957, align 1, !tbaa !2447
  %2958 = xor i64 1, %2941
  %2959 = trunc i64 %2958 to i32
  %2960 = xor i32 %2959, %2945
  %2961 = lshr i32 %2960, 4
  %2962 = trunc i32 %2961 to i8
  %2963 = and i8 %2962, 1
  %2964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2963, i8* %2964, align 1, !tbaa !2448
  %2965 = icmp eq i32 %2945, 0
  %2966 = zext i1 %2965 to i8
  %2967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2966, i8* %2967, align 1, !tbaa !2449
  %2968 = lshr i32 %2945, 31
  %2969 = trunc i32 %2968 to i8
  %2970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2969, i8* %2970, align 1, !tbaa !2450
  %2971 = lshr i32 %2944, 31
  %2972 = xor i32 %2968, %2971
  %2973 = add nuw nsw i32 %2972, %2968
  %2974 = icmp eq i32 %2973, 2
  %2975 = zext i1 %2974 to i8
  %2976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2975, i8* %2976, align 1, !tbaa !2451
  %2977 = load i64, i64* %RBP
  %2978 = sub i64 %2977, 12
  %2979 = load i32, i32* %EAX
  %2980 = zext i32 %2979 to i64
  %2981 = load i64, i64* %PC
  %2982 = add i64 %2981, 3
  store i64 %2982, i64* %PC
  %2983 = inttoptr i64 %2978 to i32*
  store i32 %2979, i32* %2983
  %2984 = load i64, i64* %PC
  %2985 = sub i64 %2984, 52
  %2986 = load i64, i64* %PC
  %2987 = add i64 %2986, 5
  store i64 %2987, i64* %PC
  %2988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2985, i64* %2988, align 8, !tbaa !2428
  br label %block_400f3e

block_4009b0:                                     ; preds = %block_4009ba, %block_4009a9
  %MEMORY.14 = phi %struct.Memory* [ %MEMORY.4, %block_4009a9 ], [ %MEMORY.14, %block_4009ba ]
  %2989 = load i64, i64* %RBP
  %2990 = sub i64 %2989, 12
  %2991 = load i64, i64* %PC
  %2992 = add i64 %2991, 4
  store i64 %2992, i64* %PC
  %2993 = inttoptr i64 %2990 to i32*
  %2994 = load i32, i32* %2993
  %2995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2995, align 1, !tbaa !2433
  %2996 = and i32 %2994, 255
  %2997 = call i32 @llvm.ctpop.i32(i32 %2996) #16
  %2998 = trunc i32 %2997 to i8
  %2999 = and i8 %2998, 1
  %3000 = xor i8 %2999, 1
  %3001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3000, i8* %3001, align 1, !tbaa !2447
  %3002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3002, align 1, !tbaa !2448
  %3003 = icmp eq i32 %2994, 0
  %3004 = zext i1 %3003 to i8
  %3005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3004, i8* %3005, align 1, !tbaa !2449
  %3006 = lshr i32 %2994, 31
  %3007 = trunc i32 %3006 to i8
  %3008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3007, i8* %3008, align 1, !tbaa !2450
  %3009 = lshr i32 %2994, 31
  %3010 = xor i32 %3006, %3009
  %3011 = add nuw nsw i32 %3010, %3009
  %3012 = icmp eq i32 %3011, 2
  %3013 = zext i1 %3012 to i8
  %3014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3013, i8* %3014, align 1, !tbaa !2451
  %3015 = load i64, i64* %PC
  %3016 = add i64 %3015, 53
  %3017 = load i64, i64* %PC
  %3018 = add i64 %3017, 6
  %3019 = load i64, i64* %PC
  %3020 = add i64 %3019, 6
  store i64 %3020, i64* %PC
  %3021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3022 = load i8, i8* %3021, align 1, !tbaa !2449
  %3023 = icmp eq i8 %3022, 0
  %3024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3025 = load i8, i8* %3024, align 1, !tbaa !2450
  %3026 = icmp ne i8 %3025, 0
  %3027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3028 = load i8, i8* %3027, align 1, !tbaa !2451
  %3029 = icmp ne i8 %3028, 0
  %3030 = xor i1 %3026, %3029
  %3031 = xor i1 %3030, true
  %3032 = and i1 %3023, %3031
  %3033 = zext i1 %3032 to i8
  store i8 %3033, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %3034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3035 = select i1 %3032, i64 %3016, i64 %3018
  store i64 %3035, i64* %3034, align 8, !tbaa !2428
  %3036 = load i8, i8* %BRANCH_TAKEN
  %3037 = icmp eq i8 %3036, 1
  br i1 %3037, label %block_4009e9, label %block_4009ba

block_400b72:                                     ; preds = %block_400b68
  %3038 = load i64, i64* %RBP
  %3039 = sub i64 %3038, 8
  %3040 = load i64, i64* %PC
  %3041 = add i64 %3040, 7
  store i64 %3041, i64* %PC
  %3042 = inttoptr i64 %3039 to i32*
  store i32 0, i32* %3042
  br label %block_400b79

block_400df1:                                     ; preds = %block_400e3b, %block_400dea
  %MEMORY.15 = phi %struct.Memory* [ %MEMORY.13, %block_400dea ], [ %MEMORY.47, %block_400e3b ]
  %3043 = load i64, i64* %RBP
  %3044 = sub i64 %3043, 8
  %3045 = load i64, i64* %PC
  %3046 = add i64 %3045, 4
  store i64 %3046, i64* %PC
  %3047 = inttoptr i64 %3044 to i32*
  %3048 = load i32, i32* %3047
  %3049 = sub i32 %3048, 2
  %3050 = icmp ult i32 %3048, 2
  %3051 = zext i1 %3050 to i8
  %3052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3051, i8* %3052, align 1, !tbaa !2433
  %3053 = and i32 %3049, 255
  %3054 = call i32 @llvm.ctpop.i32(i32 %3053) #16
  %3055 = trunc i32 %3054 to i8
  %3056 = and i8 %3055, 1
  %3057 = xor i8 %3056, 1
  %3058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3057, i8* %3058, align 1, !tbaa !2447
  %3059 = xor i32 %3048, 2
  %3060 = xor i32 %3059, %3049
  %3061 = lshr i32 %3060, 4
  %3062 = trunc i32 %3061 to i8
  %3063 = and i8 %3062, 1
  %3064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3063, i8* %3064, align 1, !tbaa !2448
  %3065 = icmp eq i32 %3049, 0
  %3066 = zext i1 %3065 to i8
  %3067 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3066, i8* %3067, align 1, !tbaa !2449
  %3068 = lshr i32 %3049, 31
  %3069 = trunc i32 %3068 to i8
  %3070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3069, i8* %3070, align 1, !tbaa !2450
  %3071 = lshr i32 %3048, 31
  %3072 = xor i32 %3068, %3071
  %3073 = add nuw nsw i32 %3072, %3071
  %3074 = icmp eq i32 %3073, 2
  %3075 = zext i1 %3074 to i8
  %3076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3075, i8* %3076, align 1, !tbaa !2451
  %3077 = load i64, i64* %PC
  %3078 = add i64 %3077, 89
  %3079 = load i64, i64* %PC
  %3080 = add i64 %3079, 6
  %3081 = load i64, i64* %PC
  %3082 = add i64 %3081, 6
  store i64 %3082, i64* %PC
  %3083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3084 = load i8, i8* %3083, align 1, !tbaa !2449
  %3085 = icmp eq i8 %3084, 0
  %3086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3087 = load i8, i8* %3086, align 1, !tbaa !2450
  %3088 = icmp ne i8 %3087, 0
  %3089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3090 = load i8, i8* %3089, align 1, !tbaa !2451
  %3091 = icmp ne i8 %3090, 0
  %3092 = xor i1 %3088, %3091
  %3093 = xor i1 %3092, true
  %3094 = and i1 %3085, %3093
  %3095 = zext i1 %3094 to i8
  store i8 %3095, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %3096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3097 = select i1 %3094, i64 %3078, i64 %3080
  store i64 %3097, i64* %3096, align 8, !tbaa !2428
  %3098 = load i8, i8* %BRANCH_TAKEN
  %3099 = icmp eq i8 %3098, 1
  br i1 %3099, label %block_400e4e, label %block_400dfb

block_400b25:                                     ; preds = %block_400aec
  %3100 = load i64, i64* %PC
  %3101 = add i64 %3100, 5
  %3102 = load i64, i64* %PC
  %3103 = add i64 %3102, 5
  store i64 %3103, i64* %PC
  %3104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3101, i64* %3104, align 8, !tbaa !2428
  %3105 = load i64, i64* %RBP
  %3106 = sub i64 %3105, 8
  %3107 = load i64, i64* %PC
  %3108 = add i64 %3107, 3
  store i64 %3108, i64* %PC
  %3109 = inttoptr i64 %3106 to i32*
  %3110 = load i32, i32* %3109
  %3111 = zext i32 %3110 to i64
  store i64 %3111, i64* %RAX, align 8, !tbaa !2428
  %3112 = load i64, i64* %RAX
  %3113 = load i64, i64* %PC
  %3114 = add i64 %3113, 3
  store i64 %3114, i64* %PC
  %3115 = trunc i64 %3112 to i32
  %3116 = add i32 1, %3115
  %3117 = zext i32 %3116 to i64
  store i64 %3117, i64* %RAX, align 8, !tbaa !2428
  %3118 = icmp ult i32 %3116, %3115
  %3119 = icmp ult i32 %3116, 1
  %3120 = or i1 %3118, %3119
  %3121 = zext i1 %3120 to i8
  %3122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3121, i8* %3122, align 1, !tbaa !2433
  %3123 = and i32 %3116, 255
  %3124 = call i32 @llvm.ctpop.i32(i32 %3123) #16
  %3125 = trunc i32 %3124 to i8
  %3126 = and i8 %3125, 1
  %3127 = xor i8 %3126, 1
  %3128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3127, i8* %3128, align 1, !tbaa !2447
  %3129 = xor i64 1, %3112
  %3130 = trunc i64 %3129 to i32
  %3131 = xor i32 %3130, %3116
  %3132 = lshr i32 %3131, 4
  %3133 = trunc i32 %3132 to i8
  %3134 = and i8 %3133, 1
  %3135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3134, i8* %3135, align 1, !tbaa !2448
  %3136 = icmp eq i32 %3116, 0
  %3137 = zext i1 %3136 to i8
  %3138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3137, i8* %3138, align 1, !tbaa !2449
  %3139 = lshr i32 %3116, 31
  %3140 = trunc i32 %3139 to i8
  %3141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3140, i8* %3141, align 1, !tbaa !2450
  %3142 = lshr i32 %3115, 31
  %3143 = xor i32 %3139, %3142
  %3144 = add nuw nsw i32 %3143, %3139
  %3145 = icmp eq i32 %3144, 2
  %3146 = zext i1 %3145 to i8
  %3147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3146, i8* %3147, align 1, !tbaa !2451
  %3148 = load i64, i64* %RBP
  %3149 = sub i64 %3148, 8
  %3150 = load i32, i32* %EAX
  %3151 = zext i32 %3150 to i64
  %3152 = load i64, i64* %PC
  %3153 = add i64 %3152, 3
  store i64 %3153, i64* %PC
  %3154 = inttoptr i64 %3149 to i32*
  store i32 %3150, i32* %3154
  %3155 = load i64, i64* %PC
  %3156 = sub i64 %3155, 88
  %3157 = load i64, i64* %PC
  %3158 = add i64 %3157, 5
  store i64 %3158, i64* %PC
  %3159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3156, i64* %3159, align 8, !tbaa !2428
  br label %block_400adb

block_400946:                                     ; preds = %block_400939
  %3160 = add i64 %4341, 10
  store i64 %3160, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RAX, align 8, !tbaa !2428
  %3161 = load i64, i64* %RBP
  %3162 = sub i64 %3161, 4
  %3163 = load i64, i64* %PC
  %3164 = add i64 %3163, 4
  store i64 %3164, i64* %PC
  %3165 = inttoptr i64 %3162 to i32*
  %3166 = load i32, i32* %3165
  %3167 = sext i32 %3166 to i64
  store i64 %3167, i64* %RCX, align 8, !tbaa !2428
  %3168 = load i64, i64* %RCX
  %3169 = load i64, i64* %PC
  %3170 = add i64 %3169, 4
  store i64 %3170, i64* %PC
  %3171 = shl i64 %3168, 10
  %3172 = icmp slt i64 %3171, 0
  %3173 = shl i64 %3171, 1
  store i64 %3173, i64* %RCX, align 8, !tbaa !2428
  %3174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3175 = zext i1 %3172 to i8
  store i8 %3175, i8* %3174, align 1, !tbaa !2432
  %3176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3177 = trunc i64 %3173 to i32
  %3178 = and i32 %3177, 254
  %3179 = call i32 @llvm.ctpop.i32(i32 %3178) #16
  %3180 = trunc i32 %3179 to i8
  %3181 = and i8 %3180, 1
  %3182 = xor i8 %3181, 1
  store i8 %3182, i8* %3176, align 1, !tbaa !2432
  %3183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3183, align 1, !tbaa !2432
  %3184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3185 = icmp eq i64 %3173, 0
  %3186 = zext i1 %3185 to i8
  store i8 %3186, i8* %3184, align 1, !tbaa !2432
  %3187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3188 = lshr i64 %3173, 63
  %3189 = trunc i64 %3188 to i8
  store i8 %3189, i8* %3187, align 1, !tbaa !2432
  %3190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3190, align 1, !tbaa !2432
  %3191 = load i64, i64* %RAX
  %3192 = load i64, i64* %RCX
  %3193 = load i64, i64* %PC
  %3194 = add i64 %3193, 3
  store i64 %3194, i64* %PC
  %3195 = add i64 %3192, %3191
  store i64 %3195, i64* %RAX, align 8, !tbaa !2428
  %3196 = icmp ult i64 %3195, %3191
  %3197 = icmp ult i64 %3195, %3192
  %3198 = or i1 %3196, %3197
  %3199 = zext i1 %3198 to i8
  %3200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3199, i8* %3200, align 1, !tbaa !2433
  %3201 = trunc i64 %3195 to i32
  %3202 = and i32 %3201, 255
  %3203 = call i32 @llvm.ctpop.i32(i32 %3202) #16
  %3204 = trunc i32 %3203 to i8
  %3205 = and i8 %3204, 1
  %3206 = xor i8 %3205, 1
  %3207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3206, i8* %3207, align 1, !tbaa !2447
  %3208 = xor i64 %3192, %3191
  %3209 = xor i64 %3208, %3195
  %3210 = lshr i64 %3209, 4
  %3211 = trunc i64 %3210 to i8
  %3212 = and i8 %3211, 1
  %3213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3212, i8* %3213, align 1, !tbaa !2448
  %3214 = icmp eq i64 %3195, 0
  %3215 = zext i1 %3214 to i8
  %3216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3215, i8* %3216, align 1, !tbaa !2449
  %3217 = lshr i64 %3195, 63
  %3218 = trunc i64 %3217 to i8
  %3219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3218, i8* %3219, align 1, !tbaa !2450
  %3220 = lshr i64 %3191, 63
  %3221 = lshr i64 %3192, 63
  %3222 = xor i64 %3217, %3220
  %3223 = xor i64 %3217, %3221
  %3224 = add nuw nsw i64 %3222, %3223
  %3225 = icmp eq i64 %3224, 2
  %3226 = zext i1 %3225 to i8
  %3227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3226, i8* %3227, align 1, !tbaa !2451
  %3228 = load i64, i64* %RBP
  %3229 = sub i64 %3228, 16
  %3230 = load i64, i64* %PC
  %3231 = add i64 %3230, 4
  store i64 %3231, i64* %PC
  %3232 = inttoptr i64 %3229 to i32*
  %3233 = load i32, i32* %3232
  %3234 = sext i32 %3233 to i64
  store i64 %3234, i64* %RCX, align 8, !tbaa !2428
  %3235 = load i64, i64* %RAX
  %3236 = load i64, i64* %RCX
  %3237 = mul i64 %3236, 4
  %3238 = add i64 %3237, %3235
  %3239 = load i64, i64* %PC
  %3240 = add i64 %3239, 7
  store i64 %3240, i64* %PC
  %3241 = inttoptr i64 %3238 to i32*
  store i32 0, i32* %3241
  %3242 = load i64, i64* %RBP
  %3243 = sub i64 %3242, 16
  %3244 = load i64, i64* %PC
  %3245 = add i64 %3244, 3
  store i64 %3245, i64* %PC
  %3246 = inttoptr i64 %3243 to i32*
  %3247 = load i32, i32* %3246
  %3248 = zext i32 %3247 to i64
  store i64 %3248, i64* %RAX, align 8, !tbaa !2428
  %3249 = load i64, i64* %RAX
  %3250 = load i64, i64* %PC
  %3251 = add i64 %3250, 3
  store i64 %3251, i64* %PC
  %3252 = trunc i64 %3249 to i32
  %3253 = add i32 1, %3252
  %3254 = zext i32 %3253 to i64
  store i64 %3254, i64* %RAX, align 8, !tbaa !2428
  %3255 = icmp ult i32 %3253, %3252
  %3256 = icmp ult i32 %3253, 1
  %3257 = or i1 %3255, %3256
  %3258 = zext i1 %3257 to i8
  %3259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3258, i8* %3259, align 1, !tbaa !2433
  %3260 = and i32 %3253, 255
  %3261 = call i32 @llvm.ctpop.i32(i32 %3260) #16
  %3262 = trunc i32 %3261 to i8
  %3263 = and i8 %3262, 1
  %3264 = xor i8 %3263, 1
  %3265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3264, i8* %3265, align 1, !tbaa !2447
  %3266 = xor i64 1, %3249
  %3267 = trunc i64 %3266 to i32
  %3268 = xor i32 %3267, %3253
  %3269 = lshr i32 %3268, 4
  %3270 = trunc i32 %3269 to i8
  %3271 = and i8 %3270, 1
  %3272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3271, i8* %3272, align 1, !tbaa !2448
  %3273 = icmp eq i32 %3253, 0
  %3274 = zext i1 %3273 to i8
  %3275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3274, i8* %3275, align 1, !tbaa !2449
  %3276 = lshr i32 %3253, 31
  %3277 = trunc i32 %3276 to i8
  %3278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3277, i8* %3278, align 1, !tbaa !2450
  %3279 = lshr i32 %3252, 31
  %3280 = xor i32 %3276, %3279
  %3281 = add nuw nsw i32 %3280, %3276
  %3282 = icmp eq i32 %3281, 2
  %3283 = zext i1 %3282 to i8
  %3284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3283, i8* %3284, align 1, !tbaa !2451
  %3285 = load i64, i64* %RBP
  %3286 = sub i64 %3285, 16
  %3287 = load i32, i32* %EAX
  %3288 = zext i32 %3287 to i64
  %3289 = load i64, i64* %PC
  %3290 = add i64 %3289, 3
  store i64 %3290, i64* %PC
  %3291 = inttoptr i64 %3286 to i32*
  store i32 %3287, i32* %3291
  %3292 = load i64, i64* %PC
  %3293 = sub i64 %3292, 54
  %3294 = load i64, i64* %PC
  %3295 = add i64 %3294, 5
  store i64 %3295, i64* %PC
  %3296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3293, i64* %3296, align 8, !tbaa !2428
  br label %block_400939

block_400ed9:                                     ; preds = %block_400ea0
  %3297 = load i64, i64* %PC
  %3298 = add i64 %3297, 5
  %3299 = load i64, i64* %PC
  %3300 = add i64 %3299, 5
  store i64 %3300, i64* %PC
  %3301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3298, i64* %3301, align 8, !tbaa !2428
  %3302 = load i64, i64* %RBP
  %3303 = sub i64 %3302, 8
  %3304 = load i64, i64* %PC
  %3305 = add i64 %3304, 3
  store i64 %3305, i64* %PC
  %3306 = inttoptr i64 %3303 to i32*
  %3307 = load i32, i32* %3306
  %3308 = zext i32 %3307 to i64
  store i64 %3308, i64* %RAX, align 8, !tbaa !2428
  %3309 = load i64, i64* %RAX
  %3310 = load i64, i64* %PC
  %3311 = add i64 %3310, 3
  store i64 %3311, i64* %PC
  %3312 = trunc i64 %3309 to i32
  %3313 = add i32 1, %3312
  %3314 = zext i32 %3313 to i64
  store i64 %3314, i64* %RAX, align 8, !tbaa !2428
  %3315 = icmp ult i32 %3313, %3312
  %3316 = icmp ult i32 %3313, 1
  %3317 = or i1 %3315, %3316
  %3318 = zext i1 %3317 to i8
  %3319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3318, i8* %3319, align 1, !tbaa !2433
  %3320 = and i32 %3313, 255
  %3321 = call i32 @llvm.ctpop.i32(i32 %3320) #16
  %3322 = trunc i32 %3321 to i8
  %3323 = and i8 %3322, 1
  %3324 = xor i8 %3323, 1
  %3325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3324, i8* %3325, align 1, !tbaa !2447
  %3326 = xor i64 1, %3309
  %3327 = trunc i64 %3326 to i32
  %3328 = xor i32 %3327, %3313
  %3329 = lshr i32 %3328, 4
  %3330 = trunc i32 %3329 to i8
  %3331 = and i8 %3330, 1
  %3332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3331, i8* %3332, align 1, !tbaa !2448
  %3333 = icmp eq i32 %3313, 0
  %3334 = zext i1 %3333 to i8
  %3335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3334, i8* %3335, align 1, !tbaa !2449
  %3336 = lshr i32 %3313, 31
  %3337 = trunc i32 %3336 to i8
  %3338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3337, i8* %3338, align 1, !tbaa !2450
  %3339 = lshr i32 %3312, 31
  %3340 = xor i32 %3336, %3339
  %3341 = add nuw nsw i32 %3340, %3336
  %3342 = icmp eq i32 %3341, 2
  %3343 = zext i1 %3342 to i8
  %3344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3343, i8* %3344, align 1, !tbaa !2451
  %3345 = load i64, i64* %RBP
  %3346 = sub i64 %3345, 8
  %3347 = load i32, i32* %EAX
  %3348 = zext i32 %3347 to i64
  %3349 = load i64, i64* %PC
  %3350 = add i64 %3349, 3
  store i64 %3350, i64* %PC
  %3351 = inttoptr i64 %3346 to i32*
  store i32 %3347, i32* %3351
  %3352 = load i64, i64* %PC
  %3353 = sub i64 %3352, 88
  %3354 = load i64, i64* %PC
  %3355 = add i64 %3354, 5
  store i64 %3355, i64* %PC
  %3356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3353, i64* %3356, align 8, !tbaa !2428
  br label %block_400e8f

block_401111:                                     ; preds = %block_401107
  %3357 = load i64, i64* %RBP
  %3358 = sub i64 %3357, 12
  %3359 = load i64, i64* %PC
  %3360 = add i64 %3359, 7
  store i64 %3360, i64* %PC
  %3361 = inttoptr i64 %3358 to i32*
  store i32 0, i32* %3361
  br label %block_401118

block_400b79:                                     ; preds = %block_400bc3, %block_400b72
  %MEMORY.16 = phi %struct.Memory* [ %MEMORY.11, %block_400b72 ], [ %MEMORY.23, %block_400bc3 ]
  %3362 = load i64, i64* %RBP
  %3363 = sub i64 %3362, 8
  %3364 = load i64, i64* %PC
  %3365 = add i64 %3364, 4
  store i64 %3365, i64* %PC
  %3366 = inttoptr i64 %3363 to i32*
  %3367 = load i32, i32* %3366
  %3368 = sub i32 %3367, 3
  %3369 = icmp ult i32 %3367, 3
  %3370 = zext i1 %3369 to i8
  %3371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3370, i8* %3371, align 1, !tbaa !2433
  %3372 = and i32 %3368, 255
  %3373 = call i32 @llvm.ctpop.i32(i32 %3372) #16
  %3374 = trunc i32 %3373 to i8
  %3375 = and i8 %3374, 1
  %3376 = xor i8 %3375, 1
  %3377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3376, i8* %3377, align 1, !tbaa !2447
  %3378 = xor i32 %3367, 3
  %3379 = xor i32 %3378, %3368
  %3380 = lshr i32 %3379, 4
  %3381 = trunc i32 %3380 to i8
  %3382 = and i8 %3381, 1
  %3383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3382, i8* %3383, align 1, !tbaa !2448
  %3384 = icmp eq i32 %3368, 0
  %3385 = zext i1 %3384 to i8
  %3386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3385, i8* %3386, align 1, !tbaa !2449
  %3387 = lshr i32 %3368, 31
  %3388 = trunc i32 %3387 to i8
  %3389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3388, i8* %3389, align 1, !tbaa !2450
  %3390 = lshr i32 %3367, 31
  %3391 = xor i32 %3387, %3390
  %3392 = add nuw nsw i32 %3391, %3390
  %3393 = icmp eq i32 %3392, 2
  %3394 = zext i1 %3393 to i8
  %3395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3394, i8* %3395, align 1, !tbaa !2451
  %3396 = load i64, i64* %PC
  %3397 = add i64 %3396, 89
  %3398 = load i64, i64* %PC
  %3399 = add i64 %3398, 6
  %3400 = load i64, i64* %PC
  %3401 = add i64 %3400, 6
  store i64 %3401, i64* %PC
  %3402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3403 = load i8, i8* %3402, align 1, !tbaa !2449
  %3404 = icmp eq i8 %3403, 0
  %3405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3406 = load i8, i8* %3405, align 1, !tbaa !2450
  %3407 = icmp ne i8 %3406, 0
  %3408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3409 = load i8, i8* %3408, align 1, !tbaa !2451
  %3410 = icmp ne i8 %3409, 0
  %3411 = xor i1 %3407, %3410
  %3412 = xor i1 %3411, true
  %3413 = and i1 %3404, %3412
  %3414 = zext i1 %3413 to i8
  store i8 %3414, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %3415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3416 = select i1 %3413, i64 %3397, i64 %3399
  store i64 %3416, i64* %3415, align 8, !tbaa !2428
  %3417 = load i8, i8* %BRANCH_TAKEN
  %3418 = icmp eq i8 %3417, 1
  br i1 %3418, label %block_400bd6, label %block_400b83

block_400cd0:                                     ; preds = %block_400cc6
  %3419 = load i64, i64* %RBP
  %3420 = sub i64 %3419, 4
  %3421 = load i64, i64* %PC
  %3422 = add i64 %3421, 3
  store i64 %3422, i64* %PC
  %3423 = inttoptr i64 %3420 to i32*
  %3424 = load i32, i32* %3423
  %3425 = zext i32 %3424 to i64
  store i64 %3425, i64* %RAX, align 8, !tbaa !2428
  %3426 = load i64, i64* %RBP
  %3427 = sub i64 %3426, 8
  %3428 = load i64, i64* %PC
  %3429 = add i64 %3428, 3
  store i64 %3429, i64* %PC
  %3430 = inttoptr i64 %3427 to i32*
  %3431 = load i32, i32* %3430
  %3432 = zext i32 %3431 to i64
  store i64 %3432, i64* %RCX, align 8, !tbaa !2428
  %3433 = load i64, i64* %RBP
  %3434 = sub i64 %3433, 12
  %3435 = load i64, i64* %PC
  %3436 = add i64 %3435, 3
  store i64 %3436, i64* %PC
  %3437 = inttoptr i64 %3434 to i32*
  %3438 = load i32, i32* %3437
  %3439 = zext i32 %3438 to i64
  store i64 %3439, i64* %RDX, align 8, !tbaa !2428
  %3440 = load i64, i64* %RDX
  %3441 = load i64, i64* %PC
  %3442 = add i64 %3441, 3
  store i64 %3442, i64* %PC
  %3443 = and i64 %3440, 4294967295
  %3444 = shl i64 %3443, 2
  %3445 = trunc i64 %3444 to i32
  %3446 = icmp slt i32 %3445, 0
  %3447 = shl i32 %3445, 1
  %3448 = zext i32 %3447 to i64
  store i64 %3448, i64* %RDX, align 8, !tbaa !2428
  %3449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3450 = zext i1 %3446 to i8
  store i8 %3450, i8* %3449, align 1, !tbaa !2432
  %3451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3452 = and i32 %3447, 254
  %3453 = call i32 @llvm.ctpop.i32(i32 %3452) #16
  %3454 = trunc i32 %3453 to i8
  %3455 = and i8 %3454, 1
  %3456 = xor i8 %3455, 1
  store i8 %3456, i8* %3451, align 1, !tbaa !2432
  %3457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3457, align 1, !tbaa !2432
  %3458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3459 = icmp eq i32 %3447, 0
  %3460 = zext i1 %3459 to i8
  store i8 %3460, i8* %3458, align 1, !tbaa !2432
  %3461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3462 = lshr i32 %3447, 31
  %3463 = trunc i32 %3462 to i8
  store i8 %3463, i8* %3461, align 1, !tbaa !2432
  %3464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3464, align 1, !tbaa !2432
  %3465 = load i64, i64* %RCX
  %3466 = load i32, i32* %EDX
  %3467 = zext i32 %3466 to i64
  %3468 = load i64, i64* %PC
  %3469 = add i64 %3468, 2
  store i64 %3469, i64* %PC
  %3470 = trunc i64 %3465 to i32
  %3471 = add i32 %3466, %3470
  %3472 = zext i32 %3471 to i64
  store i64 %3472, i64* %RCX, align 8, !tbaa !2428
  %3473 = icmp ult i32 %3471, %3470
  %3474 = icmp ult i32 %3471, %3466
  %3475 = or i1 %3473, %3474
  %3476 = zext i1 %3475 to i8
  %3477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3476, i8* %3477, align 1, !tbaa !2433
  %3478 = and i32 %3471, 255
  %3479 = call i32 @llvm.ctpop.i32(i32 %3478) #16
  %3480 = trunc i32 %3479 to i8
  %3481 = and i8 %3480, 1
  %3482 = xor i8 %3481, 1
  %3483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3482, i8* %3483, align 1, !tbaa !2447
  %3484 = xor i64 %3467, %3465
  %3485 = trunc i64 %3484 to i32
  %3486 = xor i32 %3485, %3471
  %3487 = lshr i32 %3486, 4
  %3488 = trunc i32 %3487 to i8
  %3489 = and i8 %3488, 1
  %3490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3489, i8* %3490, align 1, !tbaa !2448
  %3491 = icmp eq i32 %3471, 0
  %3492 = zext i1 %3491 to i8
  %3493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3492, i8* %3493, align 1, !tbaa !2449
  %3494 = lshr i32 %3471, 31
  %3495 = trunc i32 %3494 to i8
  %3496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3495, i8* %3496, align 1, !tbaa !2450
  %3497 = lshr i32 %3470, 31
  %3498 = lshr i32 %3466, 31
  %3499 = xor i32 %3494, %3497
  %3500 = xor i32 %3494, %3498
  %3501 = add nuw nsw i32 %3499, %3500
  %3502 = icmp eq i32 %3501, 2
  %3503 = zext i1 %3502 to i8
  %3504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3503, i8* %3504, align 1, !tbaa !2451
  %3505 = load i64, i64* %RCX
  %3506 = load i64, i64* %PC
  %3507 = add i64 %3506, 3
  store i64 %3507, i64* %PC
  %3508 = and i64 %3505, 4294967295
  %3509 = shl i64 %3508, 2
  %3510 = trunc i64 %3509 to i32
  %3511 = icmp slt i32 %3510, 0
  %3512 = shl i32 %3510, 1
  %3513 = zext i32 %3512 to i64
  store i64 %3513, i64* %RCX, align 8, !tbaa !2428
  %3514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3515 = zext i1 %3511 to i8
  store i8 %3515, i8* %3514, align 1, !tbaa !2432
  %3516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3517 = and i32 %3512, 254
  %3518 = call i32 @llvm.ctpop.i32(i32 %3517) #16
  %3519 = trunc i32 %3518 to i8
  %3520 = and i8 %3519, 1
  %3521 = xor i8 %3520, 1
  store i8 %3521, i8* %3516, align 1, !tbaa !2432
  %3522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3522, align 1, !tbaa !2432
  %3523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3524 = icmp eq i32 %3512, 0
  %3525 = zext i1 %3524 to i8
  store i8 %3525, i8* %3523, align 1, !tbaa !2432
  %3526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3527 = lshr i32 %3512, 31
  %3528 = trunc i32 %3527 to i8
  store i8 %3528, i8* %3526, align 1, !tbaa !2432
  %3529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3529, align 1, !tbaa !2432
  %3530 = load i64, i64* %RAX
  %3531 = load i32, i32* %ECX
  %3532 = zext i32 %3531 to i64
  %3533 = load i64, i64* %PC
  %3534 = add i64 %3533, 2
  store i64 %3534, i64* %PC
  %3535 = trunc i64 %3530 to i32
  %3536 = add i32 %3531, %3535
  %3537 = zext i32 %3536 to i64
  store i64 %3537, i64* %RAX, align 8, !tbaa !2428
  %3538 = icmp ult i32 %3536, %3535
  %3539 = icmp ult i32 %3536, %3531
  %3540 = or i1 %3538, %3539
  %3541 = zext i1 %3540 to i8
  %3542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3541, i8* %3542, align 1, !tbaa !2433
  %3543 = and i32 %3536, 255
  %3544 = call i32 @llvm.ctpop.i32(i32 %3543) #16
  %3545 = trunc i32 %3544 to i8
  %3546 = and i8 %3545, 1
  %3547 = xor i8 %3546, 1
  %3548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3547, i8* %3548, align 1, !tbaa !2447
  %3549 = xor i64 %3532, %3530
  %3550 = trunc i64 %3549 to i32
  %3551 = xor i32 %3550, %3536
  %3552 = lshr i32 %3551, 4
  %3553 = trunc i32 %3552 to i8
  %3554 = and i8 %3553, 1
  %3555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3554, i8* %3555, align 1, !tbaa !2448
  %3556 = icmp eq i32 %3536, 0
  %3557 = zext i1 %3556 to i8
  %3558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3557, i8* %3558, align 1, !tbaa !2449
  %3559 = lshr i32 %3536, 31
  %3560 = trunc i32 %3559 to i8
  %3561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3560, i8* %3561, align 1, !tbaa !2450
  %3562 = lshr i32 %3535, 31
  %3563 = lshr i32 %3531, 31
  %3564 = xor i32 %3559, %3562
  %3565 = xor i32 %3559, %3563
  %3566 = add nuw nsw i32 %3564, %3565
  %3567 = icmp eq i32 %3566, 2
  %3568 = zext i1 %3567 to i8
  %3569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3568, i8* %3569, align 1, !tbaa !2451
  %3570 = load i32, i32* %EAX
  %3571 = zext i32 %3570 to i64
  %3572 = load i64, i64* %PC
  %3573 = add i64 %3572, 3
  store i64 %3573, i64* %PC
  %3574 = shl i64 %3571, 32
  %3575 = ashr exact i64 %3574, 32
  store i64 %3575, i64* %RSI, align 8, !tbaa !2428
  %3576 = load i64, i64* %RSI
  %3577 = mul i64 %3576, 4
  %3578 = add i64 %3577, add (i64 ptrtoint (%p_type* @p to i64), i64 10240)
  %3579 = load i64, i64* %PC
  %3580 = add i64 %3579, 11
  store i64 %3580, i64* %PC
  %3581 = inttoptr i64 %3578 to i32*
  store i32 1, i32* %3581
  %3582 = load i64, i64* %RBP
  %3583 = sub i64 %3582, 12
  %3584 = load i64, i64* %PC
  %3585 = add i64 %3584, 3
  store i64 %3585, i64* %PC
  %3586 = inttoptr i64 %3583 to i32*
  %3587 = load i32, i32* %3586
  %3588 = zext i32 %3587 to i64
  store i64 %3588, i64* %RAX, align 8, !tbaa !2428
  %3589 = load i64, i64* %RAX
  %3590 = load i64, i64* %PC
  %3591 = add i64 %3590, 3
  store i64 %3591, i64* %PC
  %3592 = trunc i64 %3589 to i32
  %3593 = add i32 1, %3592
  %3594 = zext i32 %3593 to i64
  store i64 %3594, i64* %RAX, align 8, !tbaa !2428
  %3595 = icmp ult i32 %3593, %3592
  %3596 = icmp ult i32 %3593, 1
  %3597 = or i1 %3595, %3596
  %3598 = zext i1 %3597 to i8
  %3599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3598, i8* %3599, align 1, !tbaa !2433
  %3600 = and i32 %3593, 255
  %3601 = call i32 @llvm.ctpop.i32(i32 %3600) #16
  %3602 = trunc i32 %3601 to i8
  %3603 = and i8 %3602, 1
  %3604 = xor i8 %3603, 1
  %3605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3604, i8* %3605, align 1, !tbaa !2447
  %3606 = xor i64 1, %3589
  %3607 = trunc i64 %3606 to i32
  %3608 = xor i32 %3607, %3593
  %3609 = lshr i32 %3608, 4
  %3610 = trunc i32 %3609 to i8
  %3611 = and i8 %3610, 1
  %3612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3611, i8* %3612, align 1, !tbaa !2448
  %3613 = icmp eq i32 %3593, 0
  %3614 = zext i1 %3613 to i8
  %3615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3614, i8* %3615, align 1, !tbaa !2449
  %3616 = lshr i32 %3593, 31
  %3617 = trunc i32 %3616 to i8
  %3618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3617, i8* %3618, align 1, !tbaa !2450
  %3619 = lshr i32 %3592, 31
  %3620 = xor i32 %3616, %3619
  %3621 = add nuw nsw i32 %3620, %3616
  %3622 = icmp eq i32 %3621, 2
  %3623 = zext i1 %3622 to i8
  %3624 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3623, i8* %3624, align 1, !tbaa !2451
  %3625 = load i64, i64* %RBP
  %3626 = sub i64 %3625, 12
  %3627 = load i32, i32* %EAX
  %3628 = zext i32 %3627 to i64
  %3629 = load i64, i64* %PC
  %3630 = add i64 %3629, 3
  store i64 %3630, i64* %PC
  %3631 = inttoptr i64 %3626 to i32*
  store i32 %3627, i32* %3631
  %3632 = load i64, i64* %PC
  %3633 = sub i64 %3632, 52
  %3634 = load i64, i64* %PC
  %3635 = add i64 %3634, 5
  store i64 %3635, i64* %PC
  %3636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3633, i64* %3636, align 8, !tbaa !2428
  br label %block_400cc6

block_400ae5:                                     ; preds = %block_400adb
  %3637 = load i64, i64* %RBP
  %3638 = sub i64 %3637, 12
  %3639 = load i64, i64* %PC
  %3640 = add i64 %3639, 7
  store i64 %3640, i64* %PC
  %3641 = inttoptr i64 %3638 to i32*
  store i32 0, i32* %3641
  br label %block_400aec

block_4008cc:                                     ; preds = %block_4008c2
  %3642 = load i64, i64* %RBP
  %3643 = sub i64 %3642, 4
  %3644 = load i64, i64* %PC
  %3645 = add i64 %3644, 3
  store i64 %3645, i64* %PC
  %3646 = inttoptr i64 %3643 to i32*
  %3647 = load i32, i32* %3646
  %3648 = zext i32 %3647 to i64
  store i64 %3648, i64* %RAX, align 8, !tbaa !2428
  %3649 = load i64, i64* %RBP
  %3650 = sub i64 %3649, 8
  %3651 = load i64, i64* %PC
  %3652 = add i64 %3651, 3
  store i64 %3652, i64* %PC
  %3653 = inttoptr i64 %3650 to i32*
  %3654 = load i32, i32* %3653
  %3655 = zext i32 %3654 to i64
  store i64 %3655, i64* %RCX, align 8, !tbaa !2428
  %3656 = load i64, i64* %RBP
  %3657 = sub i64 %3656, 12
  %3658 = load i64, i64* %PC
  %3659 = add i64 %3658, 3
  store i64 %3659, i64* %PC
  %3660 = inttoptr i64 %3657 to i32*
  %3661 = load i32, i32* %3660
  %3662 = zext i32 %3661 to i64
  store i64 %3662, i64* %RDX, align 8, !tbaa !2428
  %3663 = load i64, i64* %RDX
  %3664 = load i64, i64* %PC
  %3665 = add i64 %3664, 3
  store i64 %3665, i64* %PC
  %3666 = and i64 %3663, 4294967295
  %3667 = shl i64 %3666, 2
  %3668 = trunc i64 %3667 to i32
  %3669 = icmp slt i32 %3668, 0
  %3670 = shl i32 %3668, 1
  %3671 = zext i32 %3670 to i64
  store i64 %3671, i64* %RDX, align 8, !tbaa !2428
  %3672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3673 = zext i1 %3669 to i8
  store i8 %3673, i8* %3672, align 1, !tbaa !2432
  %3674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3675 = and i32 %3670, 254
  %3676 = call i32 @llvm.ctpop.i32(i32 %3675) #16
  %3677 = trunc i32 %3676 to i8
  %3678 = and i8 %3677, 1
  %3679 = xor i8 %3678, 1
  store i8 %3679, i8* %3674, align 1, !tbaa !2432
  %3680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3680, align 1, !tbaa !2432
  %3681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3682 = icmp eq i32 %3670, 0
  %3683 = zext i1 %3682 to i8
  store i8 %3683, i8* %3681, align 1, !tbaa !2432
  %3684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3685 = lshr i32 %3670, 31
  %3686 = trunc i32 %3685 to i8
  store i8 %3686, i8* %3684, align 1, !tbaa !2432
  %3687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3687, align 1, !tbaa !2432
  %3688 = load i64, i64* %RCX
  %3689 = load i32, i32* %EDX
  %3690 = zext i32 %3689 to i64
  %3691 = load i64, i64* %PC
  %3692 = add i64 %3691, 2
  store i64 %3692, i64* %PC
  %3693 = trunc i64 %3688 to i32
  %3694 = add i32 %3689, %3693
  %3695 = zext i32 %3694 to i64
  store i64 %3695, i64* %RCX, align 8, !tbaa !2428
  %3696 = icmp ult i32 %3694, %3693
  %3697 = icmp ult i32 %3694, %3689
  %3698 = or i1 %3696, %3697
  %3699 = zext i1 %3698 to i8
  %3700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3699, i8* %3700, align 1, !tbaa !2433
  %3701 = and i32 %3694, 255
  %3702 = call i32 @llvm.ctpop.i32(i32 %3701) #16
  %3703 = trunc i32 %3702 to i8
  %3704 = and i8 %3703, 1
  %3705 = xor i8 %3704, 1
  %3706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3705, i8* %3706, align 1, !tbaa !2447
  %3707 = xor i64 %3690, %3688
  %3708 = trunc i64 %3707 to i32
  %3709 = xor i32 %3708, %3694
  %3710 = lshr i32 %3709, 4
  %3711 = trunc i32 %3710 to i8
  %3712 = and i8 %3711, 1
  %3713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3712, i8* %3713, align 1, !tbaa !2448
  %3714 = icmp eq i32 %3694, 0
  %3715 = zext i1 %3714 to i8
  %3716 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3715, i8* %3716, align 1, !tbaa !2449
  %3717 = lshr i32 %3694, 31
  %3718 = trunc i32 %3717 to i8
  %3719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3718, i8* %3719, align 1, !tbaa !2450
  %3720 = lshr i32 %3693, 31
  %3721 = lshr i32 %3689, 31
  %3722 = xor i32 %3717, %3720
  %3723 = xor i32 %3717, %3721
  %3724 = add nuw nsw i32 %3722, %3723
  %3725 = icmp eq i32 %3724, 2
  %3726 = zext i1 %3725 to i8
  %3727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3726, i8* %3727, align 1, !tbaa !2451
  %3728 = load i64, i64* %RCX
  %3729 = load i64, i64* %PC
  %3730 = add i64 %3729, 3
  store i64 %3730, i64* %PC
  %3731 = and i64 %3728, 4294967295
  %3732 = shl i64 %3731, 2
  %3733 = trunc i64 %3732 to i32
  %3734 = icmp slt i32 %3733, 0
  %3735 = shl i32 %3733, 1
  %3736 = zext i32 %3735 to i64
  store i64 %3736, i64* %RCX, align 8, !tbaa !2428
  %3737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3738 = zext i1 %3734 to i8
  store i8 %3738, i8* %3737, align 1, !tbaa !2432
  %3739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3740 = and i32 %3735, 254
  %3741 = call i32 @llvm.ctpop.i32(i32 %3740) #16
  %3742 = trunc i32 %3741 to i8
  %3743 = and i8 %3742, 1
  %3744 = xor i8 %3743, 1
  store i8 %3744, i8* %3739, align 1, !tbaa !2432
  %3745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3745, align 1, !tbaa !2432
  %3746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3747 = icmp eq i32 %3735, 0
  %3748 = zext i1 %3747 to i8
  store i8 %3748, i8* %3746, align 1, !tbaa !2432
  %3749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3750 = lshr i32 %3735, 31
  %3751 = trunc i32 %3750 to i8
  store i8 %3751, i8* %3749, align 1, !tbaa !2432
  %3752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3752, align 1, !tbaa !2432
  %3753 = load i64, i64* %RAX
  %3754 = load i32, i32* %ECX
  %3755 = zext i32 %3754 to i64
  %3756 = load i64, i64* %PC
  %3757 = add i64 %3756, 2
  store i64 %3757, i64* %PC
  %3758 = trunc i64 %3753 to i32
  %3759 = add i32 %3754, %3758
  %3760 = zext i32 %3759 to i64
  store i64 %3760, i64* %RAX, align 8, !tbaa !2428
  %3761 = icmp ult i32 %3759, %3758
  %3762 = icmp ult i32 %3759, %3754
  %3763 = or i1 %3761, %3762
  %3764 = zext i1 %3763 to i8
  %3765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3764, i8* %3765, align 1, !tbaa !2433
  %3766 = and i32 %3759, 255
  %3767 = call i32 @llvm.ctpop.i32(i32 %3766) #16
  %3768 = trunc i32 %3767 to i8
  %3769 = and i8 %3768, 1
  %3770 = xor i8 %3769, 1
  %3771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3770, i8* %3771, align 1, !tbaa !2447
  %3772 = xor i64 %3755, %3753
  %3773 = trunc i64 %3772 to i32
  %3774 = xor i32 %3773, %3759
  %3775 = lshr i32 %3774, 4
  %3776 = trunc i32 %3775 to i8
  %3777 = and i8 %3776, 1
  %3778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3777, i8* %3778, align 1, !tbaa !2448
  %3779 = icmp eq i32 %3759, 0
  %3780 = zext i1 %3779 to i8
  %3781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3780, i8* %3781, align 1, !tbaa !2449
  %3782 = lshr i32 %3759, 31
  %3783 = trunc i32 %3782 to i8
  %3784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3783, i8* %3784, align 1, !tbaa !2450
  %3785 = lshr i32 %3758, 31
  %3786 = lshr i32 %3754, 31
  %3787 = xor i32 %3782, %3785
  %3788 = xor i32 %3782, %3786
  %3789 = add nuw nsw i32 %3787, %3788
  %3790 = icmp eq i32 %3789, 2
  %3791 = zext i1 %3790 to i8
  %3792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3791, i8* %3792, align 1, !tbaa !2451
  %3793 = load i32, i32* %EAX
  %3794 = zext i32 %3793 to i64
  %3795 = load i64, i64* %PC
  %3796 = add i64 %3795, 3
  store i64 %3796, i64* %PC
  %3797 = shl i64 %3794, 32
  %3798 = ashr exact i64 %3797, 32
  store i64 %3798, i64* %RSI, align 8, !tbaa !2428
  %3799 = load i64, i64* %RSI
  %3800 = mul i64 %3799, 4
  %3801 = add i64 %3800, ptrtoint (%puzzl_type* @puzzl to i64)
  %3802 = load i64, i64* %PC
  %3803 = add i64 %3802, 11
  store i64 %3803, i64* %PC
  %3804 = inttoptr i64 %3801 to i32*
  store i32 0, i32* %3804
  %3805 = load i64, i64* %RBP
  %3806 = sub i64 %3805, 12
  %3807 = load i64, i64* %PC
  %3808 = add i64 %3807, 3
  store i64 %3808, i64* %PC
  %3809 = inttoptr i64 %3806 to i32*
  %3810 = load i32, i32* %3809
  %3811 = zext i32 %3810 to i64
  store i64 %3811, i64* %RAX, align 8, !tbaa !2428
  %3812 = load i64, i64* %RAX
  %3813 = load i64, i64* %PC
  %3814 = add i64 %3813, 3
  store i64 %3814, i64* %PC
  %3815 = trunc i64 %3812 to i32
  %3816 = add i32 1, %3815
  %3817 = zext i32 %3816 to i64
  store i64 %3817, i64* %RAX, align 8, !tbaa !2428
  %3818 = icmp ult i32 %3816, %3815
  %3819 = icmp ult i32 %3816, 1
  %3820 = or i1 %3818, %3819
  %3821 = zext i1 %3820 to i8
  %3822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3821, i8* %3822, align 1, !tbaa !2433
  %3823 = and i32 %3816, 255
  %3824 = call i32 @llvm.ctpop.i32(i32 %3823) #16
  %3825 = trunc i32 %3824 to i8
  %3826 = and i8 %3825, 1
  %3827 = xor i8 %3826, 1
  %3828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3827, i8* %3828, align 1, !tbaa !2447
  %3829 = xor i64 1, %3812
  %3830 = trunc i64 %3829 to i32
  %3831 = xor i32 %3830, %3816
  %3832 = lshr i32 %3831, 4
  %3833 = trunc i32 %3832 to i8
  %3834 = and i8 %3833, 1
  %3835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3834, i8* %3835, align 1, !tbaa !2448
  %3836 = icmp eq i32 %3816, 0
  %3837 = zext i1 %3836 to i8
  %3838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3837, i8* %3838, align 1, !tbaa !2449
  %3839 = lshr i32 %3816, 31
  %3840 = trunc i32 %3839 to i8
  %3841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3840, i8* %3841, align 1, !tbaa !2450
  %3842 = lshr i32 %3815, 31
  %3843 = xor i32 %3839, %3842
  %3844 = add nuw nsw i32 %3843, %3839
  %3845 = icmp eq i32 %3844, 2
  %3846 = zext i1 %3845 to i8
  %3847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3846, i8* %3847, align 1, !tbaa !2451
  %3848 = load i64, i64* %RBP
  %3849 = sub i64 %3848, 12
  %3850 = load i32, i32* %EAX
  %3851 = zext i32 %3850 to i64
  %3852 = load i64, i64* %PC
  %3853 = add i64 %3852, 3
  store i64 %3853, i64* %PC
  %3854 = inttoptr i64 %3849 to i32*
  store i32 %3850, i32* %3854
  %3855 = load i64, i64* %PC
  %3856 = sub i64 %3855, 52
  %3857 = load i64, i64* %PC
  %3858 = add i64 %3857, 5
  store i64 %3858, i64* %PC
  %3859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3856, i64* %3859, align 8, !tbaa !2428
  br label %block_4008c2

block_400d4c:                                     ; preds = %block_400d42
  %3860 = load i64, i64* %RBP
  %3861 = sub i64 %3860, 8
  %3862 = load i64, i64* %PC
  %3863 = add i64 %3862, 7
  store i64 %3863, i64* %PC
  %3864 = inttoptr i64 %3861 to i32*
  store i32 0, i32* %3864
  br label %block_400d53

block_400cbf:                                     ; preds = %block_400cb5
  %3865 = load i64, i64* %RBP
  %3866 = sub i64 %3865, 12
  %3867 = load i64, i64* %PC
  %3868 = add i64 %3867, 7
  store i64 %3868, i64* %PC
  %3869 = inttoptr i64 %3866 to i32*
  store i32 0, i32* %3869
  br label %block_400cc6

block_4009e9:                                     ; preds = %block_4009b0
  %3870 = load i64, i64* %PC
  %3871 = add i64 %3870, 5
  %3872 = load i64, i64* %PC
  %3873 = add i64 %3872, 5
  store i64 %3873, i64* %PC
  %3874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3871, i64* %3874, align 8, !tbaa !2428
  %3875 = load i64, i64* %RBP
  %3876 = sub i64 %3875, 8
  %3877 = load i64, i64* %PC
  %3878 = add i64 %3877, 3
  store i64 %3878, i64* %PC
  %3879 = inttoptr i64 %3876 to i32*
  %3880 = load i32, i32* %3879
  %3881 = zext i32 %3880 to i64
  store i64 %3881, i64* %RAX, align 8, !tbaa !2428
  %3882 = load i64, i64* %RAX
  %3883 = load i64, i64* %PC
  %3884 = add i64 %3883, 3
  store i64 %3884, i64* %PC
  %3885 = trunc i64 %3882 to i32
  %3886 = add i32 1, %3885
  %3887 = zext i32 %3886 to i64
  store i64 %3887, i64* %RAX, align 8, !tbaa !2428
  %3888 = icmp ult i32 %3886, %3885
  %3889 = icmp ult i32 %3886, 1
  %3890 = or i1 %3888, %3889
  %3891 = zext i1 %3890 to i8
  %3892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3891, i8* %3892, align 1, !tbaa !2433
  %3893 = and i32 %3886, 255
  %3894 = call i32 @llvm.ctpop.i32(i32 %3893) #16
  %3895 = trunc i32 %3894 to i8
  %3896 = and i8 %3895, 1
  %3897 = xor i8 %3896, 1
  %3898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3897, i8* %3898, align 1, !tbaa !2447
  %3899 = xor i64 1, %3882
  %3900 = trunc i64 %3899 to i32
  %3901 = xor i32 %3900, %3886
  %3902 = lshr i32 %3901, 4
  %3903 = trunc i32 %3902 to i8
  %3904 = and i8 %3903, 1
  %3905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3904, i8* %3905, align 1, !tbaa !2448
  %3906 = icmp eq i32 %3886, 0
  %3907 = zext i1 %3906 to i8
  %3908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3907, i8* %3908, align 1, !tbaa !2449
  %3909 = lshr i32 %3886, 31
  %3910 = trunc i32 %3909 to i8
  %3911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3910, i8* %3911, align 1, !tbaa !2450
  %3912 = lshr i32 %3885, 31
  %3913 = xor i32 %3909, %3912
  %3914 = add nuw nsw i32 %3913, %3909
  %3915 = icmp eq i32 %3914, 2
  %3916 = zext i1 %3915 to i8
  %3917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3916, i8* %3917, align 1, !tbaa !2451
  %3918 = load i64, i64* %RBP
  %3919 = sub i64 %3918, 8
  %3920 = load i32, i32* %EAX
  %3921 = zext i32 %3920 to i64
  %3922 = load i64, i64* %PC
  %3923 = add i64 %3922, 3
  store i64 %3923, i64* %PC
  %3924 = inttoptr i64 %3919 to i32*
  store i32 %3920, i32* %3924
  %3925 = load i64, i64* %PC
  %3926 = sub i64 %3925, 88
  %3927 = load i64, i64* %PC
  %3928 = add i64 %3927, 5
  store i64 %3928, i64* %PC
  %3929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3926, i64* %3929, align 8, !tbaa !2428
  br label %block_40099f

block_400cb5:                                     ; preds = %block_400cae, %block_400cff
  %MEMORY.17 = phi %struct.Memory* [ %MEMORY.19, %block_400cae ], [ %MEMORY.18, %block_400cff ]
  %3930 = load i64, i64* %RBP
  %3931 = sub i64 %3930, 8
  %3932 = load i64, i64* %PC
  %3933 = add i64 %3932, 4
  store i64 %3933, i64* %PC
  %3934 = inttoptr i64 %3931 to i32*
  %3935 = load i32, i32* %3934
  %3936 = sub i32 %3935, 1
  %3937 = icmp ult i32 %3935, 1
  %3938 = zext i1 %3937 to i8
  %3939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3938, i8* %3939, align 1, !tbaa !2433
  %3940 = and i32 %3936, 255
  %3941 = call i32 @llvm.ctpop.i32(i32 %3940) #16
  %3942 = trunc i32 %3941 to i8
  %3943 = and i8 %3942, 1
  %3944 = xor i8 %3943, 1
  %3945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3944, i8* %3945, align 1, !tbaa !2447
  %3946 = xor i32 %3935, 1
  %3947 = xor i32 %3946, %3936
  %3948 = lshr i32 %3947, 4
  %3949 = trunc i32 %3948 to i8
  %3950 = and i8 %3949, 1
  %3951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3950, i8* %3951, align 1, !tbaa !2448
  %3952 = icmp eq i32 %3936, 0
  %3953 = zext i1 %3952 to i8
  %3954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3953, i8* %3954, align 1, !tbaa !2449
  %3955 = lshr i32 %3936, 31
  %3956 = trunc i32 %3955 to i8
  %3957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3956, i8* %3957, align 1, !tbaa !2450
  %3958 = lshr i32 %3935, 31
  %3959 = xor i32 %3955, %3958
  %3960 = add nuw nsw i32 %3959, %3958
  %3961 = icmp eq i32 %3960, 2
  %3962 = zext i1 %3961 to i8
  %3963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3962, i8* %3963, align 1, !tbaa !2451
  %3964 = load i64, i64* %PC
  %3965 = add i64 %3964, 89
  %3966 = load i64, i64* %PC
  %3967 = add i64 %3966, 6
  %3968 = load i64, i64* %PC
  %3969 = add i64 %3968, 6
  store i64 %3969, i64* %PC
  %3970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3971 = load i8, i8* %3970, align 1, !tbaa !2449
  %3972 = icmp eq i8 %3971, 0
  %3973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3974 = load i8, i8* %3973, align 1, !tbaa !2450
  %3975 = icmp ne i8 %3974, 0
  %3976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3977 = load i8, i8* %3976, align 1, !tbaa !2451
  %3978 = icmp ne i8 %3977, 0
  %3979 = xor i1 %3975, %3978
  %3980 = xor i1 %3979, true
  %3981 = and i1 %3972, %3980
  %3982 = zext i1 %3981 to i8
  store i8 %3982, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %3983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3984 = select i1 %3981, i64 %3965, i64 %3967
  store i64 %3984, i64* %3983, align 8, !tbaa !2428
  %3985 = load i8, i8* %BRANCH_TAKEN
  %3986 = icmp eq i8 %3985, 1
  br i1 %3986, label %block_400d12, label %block_400cbf

block_4010b3:                                     ; preds = %block_40107a
  %3987 = load i64, i64* %PC
  %3988 = add i64 %3987, 5
  %3989 = load i64, i64* %PC
  %3990 = add i64 %3989, 5
  store i64 %3990, i64* %PC
  %3991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3988, i64* %3991, align 8, !tbaa !2428
  %3992 = load i64, i64* %RBP
  %3993 = sub i64 %3992, 8
  %3994 = load i64, i64* %PC
  %3995 = add i64 %3994, 3
  store i64 %3995, i64* %PC
  %3996 = inttoptr i64 %3993 to i32*
  %3997 = load i32, i32* %3996
  %3998 = zext i32 %3997 to i64
  store i64 %3998, i64* %RAX, align 8, !tbaa !2428
  %3999 = load i64, i64* %RAX
  %4000 = load i64, i64* %PC
  %4001 = add i64 %4000, 3
  store i64 %4001, i64* %PC
  %4002 = trunc i64 %3999 to i32
  %4003 = add i32 1, %4002
  %4004 = zext i32 %4003 to i64
  store i64 %4004, i64* %RAX, align 8, !tbaa !2428
  %4005 = icmp ult i32 %4003, %4002
  %4006 = icmp ult i32 %4003, 1
  %4007 = or i1 %4005, %4006
  %4008 = zext i1 %4007 to i8
  %4009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4008, i8* %4009, align 1, !tbaa !2433
  %4010 = and i32 %4003, 255
  %4011 = call i32 @llvm.ctpop.i32(i32 %4010) #16
  %4012 = trunc i32 %4011 to i8
  %4013 = and i8 %4012, 1
  %4014 = xor i8 %4013, 1
  %4015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4014, i8* %4015, align 1, !tbaa !2447
  %4016 = xor i64 1, %3999
  %4017 = trunc i64 %4016 to i32
  %4018 = xor i32 %4017, %4003
  %4019 = lshr i32 %4018, 4
  %4020 = trunc i32 %4019 to i8
  %4021 = and i8 %4020, 1
  %4022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4021, i8* %4022, align 1, !tbaa !2448
  %4023 = icmp eq i32 %4003, 0
  %4024 = zext i1 %4023 to i8
  %4025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4024, i8* %4025, align 1, !tbaa !2449
  %4026 = lshr i32 %4003, 31
  %4027 = trunc i32 %4026 to i8
  %4028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4027, i8* %4028, align 1, !tbaa !2450
  %4029 = lshr i32 %4002, 31
  %4030 = xor i32 %4026, %4029
  %4031 = add nuw nsw i32 %4030, %4026
  %4032 = icmp eq i32 %4031, 2
  %4033 = zext i1 %4032 to i8
  %4034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4033, i8* %4034, align 1, !tbaa !2451
  %4035 = load i64, i64* %RBP
  %4036 = sub i64 %4035, 8
  %4037 = load i32, i32* %EAX
  %4038 = zext i32 %4037 to i64
  %4039 = load i64, i64* %PC
  %4040 = add i64 %4039, 3
  store i64 %4040, i64* %PC
  %4041 = inttoptr i64 %4036 to i32*
  store i32 %4037, i32* %4041
  %4042 = load i64, i64* %PC
  %4043 = sub i64 %4042, 88
  %4044 = load i64, i64* %PC
  %4045 = add i64 %4044, 5
  store i64 %4045, i64* %PC
  %4046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4043, i64* %4046, align 8, !tbaa !2428
  br label %block_401069

block_400cc6:                                     ; preds = %block_400cbf, %block_400cd0
  %MEMORY.18 = phi %struct.Memory* [ %MEMORY.17, %block_400cbf ], [ %MEMORY.18, %block_400cd0 ]
  %4047 = load i64, i64* %RBP
  %4048 = sub i64 %4047, 12
  %4049 = load i64, i64* %PC
  %4050 = add i64 %4049, 4
  store i64 %4050, i64* %PC
  %4051 = inttoptr i64 %4048 to i32*
  %4052 = load i32, i32* %4051
  %4053 = sub i32 %4052, 3
  %4054 = icmp ult i32 %4052, 3
  %4055 = zext i1 %4054 to i8
  %4056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4055, i8* %4056, align 1, !tbaa !2433
  %4057 = and i32 %4053, 255
  %4058 = call i32 @llvm.ctpop.i32(i32 %4057) #16
  %4059 = trunc i32 %4058 to i8
  %4060 = and i8 %4059, 1
  %4061 = xor i8 %4060, 1
  %4062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4061, i8* %4062, align 1, !tbaa !2447
  %4063 = xor i32 %4052, 3
  %4064 = xor i32 %4063, %4053
  %4065 = lshr i32 %4064, 4
  %4066 = trunc i32 %4065 to i8
  %4067 = and i8 %4066, 1
  %4068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4067, i8* %4068, align 1, !tbaa !2448
  %4069 = icmp eq i32 %4053, 0
  %4070 = zext i1 %4069 to i8
  %4071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4070, i8* %4071, align 1, !tbaa !2449
  %4072 = lshr i32 %4053, 31
  %4073 = trunc i32 %4072 to i8
  %4074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4073, i8* %4074, align 1, !tbaa !2450
  %4075 = lshr i32 %4052, 31
  %4076 = xor i32 %4072, %4075
  %4077 = add nuw nsw i32 %4076, %4075
  %4078 = icmp eq i32 %4077, 2
  %4079 = zext i1 %4078 to i8
  %4080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4079, i8* %4080, align 1, !tbaa !2451
  %4081 = load i64, i64* %PC
  %4082 = add i64 %4081, 53
  %4083 = load i64, i64* %PC
  %4084 = add i64 %4083, 6
  %4085 = load i64, i64* %PC
  %4086 = add i64 %4085, 6
  store i64 %4086, i64* %PC
  %4087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4088 = load i8, i8* %4087, align 1, !tbaa !2449
  %4089 = icmp eq i8 %4088, 0
  %4090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4091 = load i8, i8* %4090, align 1, !tbaa !2450
  %4092 = icmp ne i8 %4091, 0
  %4093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4094 = load i8, i8* %4093, align 1, !tbaa !2451
  %4095 = icmp ne i8 %4094, 0
  %4096 = xor i1 %4092, %4095
  %4097 = xor i1 %4096, true
  %4098 = and i1 %4089, %4097
  %4099 = zext i1 %4098 to i8
  store i8 %4099, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %4100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4101 = select i1 %4098, i64 %4082, i64 %4084
  store i64 %4101, i64* %4100, align 8, !tbaa !2428
  %4102 = load i8, i8* %BRANCH_TAKEN
  %4103 = icmp eq i8 %4102, 1
  br i1 %4103, label %block_400cff, label %block_400cd0

block_400aad:                                     ; preds = %block_400a2c
  %4104 = load i64, i64* %PC
  %4105 = add i64 %4104, 11
  store i64 %4105, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 4) to i32*)
  %4106 = load i64, i64* %PC
  %4107 = add i64 %4106, 11
  store i64 %4107, i64* %PC
  store i32 193, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 4) to i32*)
  %4108 = load i64, i64* %RBP
  %4109 = sub i64 %4108, 4
  %4110 = load i64, i64* %PC
  %4111 = add i64 %4110, 7
  store i64 %4111, i64* %PC
  %4112 = inttoptr i64 %4109 to i32*
  store i32 0, i32* %4112
  br label %block_400aca

block_4008aa:                                     ; preds = %block_4008a0
  %4113 = sub i64 %4283, 8
  %4114 = load i64, i64* %PC
  %4115 = add i64 %4114, 7
  store i64 %4115, i64* %PC
  %4116 = inttoptr i64 %4113 to i32*
  store i32 1, i32* %4116
  br label %block_4008b1

block_4010c6:                                     ; preds = %block_401069
  %4117 = load i64, i64* %PC
  %4118 = add i64 %4117, 5
  %4119 = load i64, i64* %PC
  %4120 = add i64 %4119, 5
  store i64 %4120, i64* %PC
  %4121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4118, i64* %4121, align 8, !tbaa !2428
  %4122 = load i64, i64* %RBP
  %4123 = sub i64 %4122, 4
  %4124 = load i64, i64* %PC
  %4125 = add i64 %4124, 3
  store i64 %4125, i64* %PC
  %4126 = inttoptr i64 %4123 to i32*
  %4127 = load i32, i32* %4126
  %4128 = zext i32 %4127 to i64
  store i64 %4128, i64* %RAX, align 8, !tbaa !2428
  %4129 = load i64, i64* %RAX
  %4130 = load i64, i64* %PC
  %4131 = add i64 %4130, 3
  store i64 %4131, i64* %PC
  %4132 = trunc i64 %4129 to i32
  %4133 = add i32 1, %4132
  %4134 = zext i32 %4133 to i64
  store i64 %4134, i64* %RAX, align 8, !tbaa !2428
  %4135 = icmp ult i32 %4133, %4132
  %4136 = icmp ult i32 %4133, 1
  %4137 = or i1 %4135, %4136
  %4138 = zext i1 %4137 to i8
  %4139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4138, i8* %4139, align 1, !tbaa !2433
  %4140 = and i32 %4133, 255
  %4141 = call i32 @llvm.ctpop.i32(i32 %4140) #16
  %4142 = trunc i32 %4141 to i8
  %4143 = and i8 %4142, 1
  %4144 = xor i8 %4143, 1
  %4145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4144, i8* %4145, align 1, !tbaa !2447
  %4146 = xor i64 1, %4129
  %4147 = trunc i64 %4146 to i32
  %4148 = xor i32 %4147, %4133
  %4149 = lshr i32 %4148, 4
  %4150 = trunc i32 %4149 to i8
  %4151 = and i8 %4150, 1
  %4152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4151, i8* %4152, align 1, !tbaa !2448
  %4153 = icmp eq i32 %4133, 0
  %4154 = zext i1 %4153 to i8
  %4155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4154, i8* %4155, align 1, !tbaa !2449
  %4156 = lshr i32 %4133, 31
  %4157 = trunc i32 %4156 to i8
  %4158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4157, i8* %4158, align 1, !tbaa !2450
  %4159 = lshr i32 %4132, 31
  %4160 = xor i32 %4156, %4159
  %4161 = add nuw nsw i32 %4160, %4156
  %4162 = icmp eq i32 %4161, 2
  %4163 = zext i1 %4162 to i8
  %4164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4163, i8* %4164, align 1, !tbaa !2451
  %4165 = load i64, i64* %RBP
  %4166 = sub i64 %4165, 4
  %4167 = load i32, i32* %EAX
  %4168 = zext i32 %4167 to i64
  %4169 = load i64, i64* %PC
  %4170 = add i64 %4169, 3
  store i64 %4170, i64* %PC
  %4171 = inttoptr i64 %4166 to i32*
  store i32 %4167, i32* %4171
  %4172 = load i64, i64* %PC
  %4173 = sub i64 %4172, 124
  %4174 = load i64, i64* %PC
  %4175 = add i64 %4174, 5
  store i64 %4175, i64* %PC
  %4176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4173, i64* %4176, align 8, !tbaa !2428
  br label %block_401058

block_400ca4:                                     ; preds = %block_400d12, %block_400c87
  %MEMORY.19 = phi %struct.Memory* [ %MEMORY.46, %block_400c87 ], [ %MEMORY.17, %block_400d12 ]
  %4177 = load i64, i64* %RBP
  %4178 = sub i64 %4177, 4
  %4179 = load i64, i64* %PC
  %4180 = add i64 %4179, 4
  store i64 %4180, i64* %PC
  %4181 = inttoptr i64 %4178 to i32*
  %4182 = load i32, i32* %4181
  %4183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4183, align 1, !tbaa !2433
  %4184 = and i32 %4182, 255
  %4185 = call i32 @llvm.ctpop.i32(i32 %4184) #16
  %4186 = trunc i32 %4185 to i8
  %4187 = and i8 %4186, 1
  %4188 = xor i8 %4187, 1
  %4189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4188, i8* %4189, align 1, !tbaa !2447
  %4190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4190, align 1, !tbaa !2448
  %4191 = icmp eq i32 %4182, 0
  %4192 = zext i1 %4191 to i8
  %4193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4192, i8* %4193, align 1, !tbaa !2449
  %4194 = lshr i32 %4182, 31
  %4195 = trunc i32 %4194 to i8
  %4196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4195, i8* %4196, align 1, !tbaa !2450
  %4197 = lshr i32 %4182, 31
  %4198 = xor i32 %4194, %4197
  %4199 = add nuw nsw i32 %4198, %4197
  %4200 = icmp eq i32 %4199, 2
  %4201 = zext i1 %4200 to i8
  %4202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4201, i8* %4202, align 1, !tbaa !2451
  %4203 = load i64, i64* %PC
  %4204 = add i64 %4203, 125
  %4205 = load i64, i64* %PC
  %4206 = add i64 %4205, 6
  %4207 = load i64, i64* %PC
  %4208 = add i64 %4207, 6
  store i64 %4208, i64* %PC
  %4209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4210 = load i8, i8* %4209, align 1, !tbaa !2449
  %4211 = icmp eq i8 %4210, 0
  %4212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4213 = load i8, i8* %4212, align 1, !tbaa !2450
  %4214 = icmp ne i8 %4213, 0
  %4215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4216 = load i8, i8* %4215, align 1, !tbaa !2451
  %4217 = icmp ne i8 %4216, 0
  %4218 = xor i1 %4214, %4217
  %4219 = xor i1 %4218, true
  %4220 = and i1 %4211, %4219
  %4221 = zext i1 %4220 to i8
  store i8 %4221, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %4222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4223 = select i1 %4220, i64 %4204, i64 %4206
  store i64 %4223, i64* %4222, align 8, !tbaa !2428
  %4224 = load i8, i8* %BRANCH_TAKEN
  %4225 = icmp eq i8 %4224, 1
  br i1 %4225, label %block_400d25, label %block_400cae

block_4008a0:                                     ; preds = %block_400899, %block_40090e
  %MEMORY.20 = phi %struct.Memory* [ %MEMORY.30, %block_400899 ], [ %MEMORY.33, %block_40090e ]
  %4226 = load i64, i64* %RBP
  %4227 = sub i64 %4226, 4
  %4228 = load i64, i64* %PC
  %4229 = add i64 %4228, 4
  store i64 %4229, i64* %PC
  %4230 = inttoptr i64 %4227 to i32*
  %4231 = load i32, i32* %4230
  %4232 = sub i32 %4231, 5
  %4233 = icmp ult i32 %4231, 5
  %4234 = zext i1 %4233 to i8
  %4235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4234, i8* %4235, align 1, !tbaa !2433
  %4236 = and i32 %4232, 255
  %4237 = call i32 @llvm.ctpop.i32(i32 %4236) #16
  %4238 = trunc i32 %4237 to i8
  %4239 = and i8 %4238, 1
  %4240 = xor i8 %4239, 1
  %4241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4240, i8* %4241, align 1, !tbaa !2447
  %4242 = xor i32 %4231, 5
  %4243 = xor i32 %4242, %4232
  %4244 = lshr i32 %4243, 4
  %4245 = trunc i32 %4244 to i8
  %4246 = and i8 %4245, 1
  %4247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4246, i8* %4247, align 1, !tbaa !2448
  %4248 = icmp eq i32 %4232, 0
  %4249 = zext i1 %4248 to i8
  %4250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4249, i8* %4250, align 1, !tbaa !2449
  %4251 = lshr i32 %4232, 31
  %4252 = trunc i32 %4251 to i8
  %4253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4252, i8* %4253, align 1, !tbaa !2450
  %4254 = lshr i32 %4231, 31
  %4255 = xor i32 %4251, %4254
  %4256 = add nuw nsw i32 %4255, %4254
  %4257 = icmp eq i32 %4256, 2
  %4258 = zext i1 %4257 to i8
  %4259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4258, i8* %4259, align 1, !tbaa !2451
  %4260 = load i64, i64* %PC
  %4261 = add i64 %4260, 125
  %4262 = load i64, i64* %PC
  %4263 = add i64 %4262, 6
  %4264 = load i64, i64* %PC
  %4265 = add i64 %4264, 6
  store i64 %4265, i64* %PC
  %4266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4267 = load i8, i8* %4266, align 1, !tbaa !2449
  %4268 = icmp eq i8 %4267, 0
  %4269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4270 = load i8, i8* %4269, align 1, !tbaa !2450
  %4271 = icmp ne i8 %4270, 0
  %4272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4273 = load i8, i8* %4272, align 1, !tbaa !2451
  %4274 = icmp ne i8 %4273, 0
  %4275 = xor i1 %4271, %4274
  %4276 = xor i1 %4275, true
  %4277 = and i1 %4268, %4276
  %4278 = zext i1 %4277 to i8
  store i8 %4278, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %4279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4280 = select i1 %4277, i64 %4261, i64 %4263
  store i64 %4280, i64* %4279, align 8, !tbaa !2428
  %4281 = load i8, i8* %BRANCH_TAKEN
  %4282 = icmp eq i8 %4281, 1
  %4283 = load i64, i64* %RBP
  br i1 %4282, label %block_400921, label %block_4008aa

block_400939:                                     ; preds = %block_400932, %block_400946
  %MEMORY.21 = phi %struct.Memory* [ %MEMORY.6, %block_400932 ], [ %MEMORY.21, %block_400946 ]
  %4284 = load i64, i64* %RBP
  %4285 = sub i64 %4284, 16
  %4286 = load i64, i64* %PC
  %4287 = add i64 %4286, 7
  store i64 %4287, i64* %PC
  %4288 = inttoptr i64 %4285 to i32*
  %4289 = load i32, i32* %4288
  %4290 = sub i32 %4289, 511
  %4291 = icmp ult i32 %4289, 511
  %4292 = zext i1 %4291 to i8
  %4293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4292, i8* %4293, align 1, !tbaa !2433
  %4294 = and i32 %4290, 255
  %4295 = call i32 @llvm.ctpop.i32(i32 %4294) #16
  %4296 = trunc i32 %4295 to i8
  %4297 = and i8 %4296, 1
  %4298 = xor i8 %4297, 1
  %4299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4298, i8* %4299, align 1, !tbaa !2447
  %4300 = xor i32 %4289, 511
  %4301 = xor i32 %4300, %4290
  %4302 = lshr i32 %4301, 4
  %4303 = trunc i32 %4302 to i8
  %4304 = and i8 %4303, 1
  %4305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4304, i8* %4305, align 1, !tbaa !2448
  %4306 = icmp eq i32 %4290, 0
  %4307 = zext i1 %4306 to i8
  %4308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4307, i8* %4308, align 1, !tbaa !2449
  %4309 = lshr i32 %4290, 31
  %4310 = trunc i32 %4309 to i8
  %4311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4310, i8* %4311, align 1, !tbaa !2450
  %4312 = lshr i32 %4289, 31
  %4313 = xor i32 %4309, %4312
  %4314 = add nuw nsw i32 %4313, %4312
  %4315 = icmp eq i32 %4314, 2
  %4316 = zext i1 %4315 to i8
  %4317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4316, i8* %4317, align 1, !tbaa !2451
  %4318 = load i64, i64* %PC
  %4319 = add i64 %4318, 52
  %4320 = load i64, i64* %PC
  %4321 = add i64 %4320, 6
  %4322 = load i64, i64* %PC
  %4323 = add i64 %4322, 6
  store i64 %4323, i64* %PC
  %4324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4325 = load i8, i8* %4324, align 1, !tbaa !2449
  %4326 = icmp eq i8 %4325, 0
  %4327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4328 = load i8, i8* %4327, align 1, !tbaa !2450
  %4329 = icmp ne i8 %4328, 0
  %4330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4331 = load i8, i8* %4330, align 1, !tbaa !2451
  %4332 = icmp ne i8 %4331, 0
  %4333 = xor i1 %4329, %4332
  %4334 = xor i1 %4333, true
  %4335 = and i1 %4326, %4334
  %4336 = zext i1 %4335 to i8
  store i8 %4336, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %4337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4338 = select i1 %4335, i64 %4319, i64 %4321
  store i64 %4338, i64* %4337, align 8, !tbaa !2428
  %4339 = load i8, i8* %BRANCH_TAKEN
  %4340 = icmp eq i8 %4339, 1
  %4341 = load i64, i64* %PC
  br i1 %4340, label %block_400974, label %block_400946

block_400a9a:                                     ; preds = %block_400a3d
  %4342 = load i64, i64* %PC
  %4343 = add i64 %4342, 5
  %4344 = load i64, i64* %PC
  %4345 = add i64 %4344, 5
  store i64 %4345, i64* %PC
  %4346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4343, i64* %4346, align 8, !tbaa !2428
  %4347 = load i64, i64* %RBP
  %4348 = sub i64 %4347, 4
  %4349 = load i64, i64* %PC
  %4350 = add i64 %4349, 3
  store i64 %4350, i64* %PC
  %4351 = inttoptr i64 %4348 to i32*
  %4352 = load i32, i32* %4351
  %4353 = zext i32 %4352 to i64
  store i64 %4353, i64* %RAX, align 8, !tbaa !2428
  %4354 = load i64, i64* %RAX
  %4355 = load i64, i64* %PC
  %4356 = add i64 %4355, 3
  store i64 %4356, i64* %PC
  %4357 = trunc i64 %4354 to i32
  %4358 = add i32 1, %4357
  %4359 = zext i32 %4358 to i64
  store i64 %4359, i64* %RAX, align 8, !tbaa !2428
  %4360 = icmp ult i32 %4358, %4357
  %4361 = icmp ult i32 %4358, 1
  %4362 = or i1 %4360, %4361
  %4363 = zext i1 %4362 to i8
  %4364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4363, i8* %4364, align 1, !tbaa !2433
  %4365 = and i32 %4358, 255
  %4366 = call i32 @llvm.ctpop.i32(i32 %4365) #16
  %4367 = trunc i32 %4366 to i8
  %4368 = and i8 %4367, 1
  %4369 = xor i8 %4368, 1
  %4370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4369, i8* %4370, align 1, !tbaa !2447
  %4371 = xor i64 1, %4354
  %4372 = trunc i64 %4371 to i32
  %4373 = xor i32 %4372, %4358
  %4374 = lshr i32 %4373, 4
  %4375 = trunc i32 %4374 to i8
  %4376 = and i8 %4375, 1
  %4377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4376, i8* %4377, align 1, !tbaa !2448
  %4378 = icmp eq i32 %4358, 0
  %4379 = zext i1 %4378 to i8
  %4380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4379, i8* %4380, align 1, !tbaa !2449
  %4381 = lshr i32 %4358, 31
  %4382 = trunc i32 %4381 to i8
  %4383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4382, i8* %4383, align 1, !tbaa !2450
  %4384 = lshr i32 %4357, 31
  %4385 = xor i32 %4381, %4384
  %4386 = add nuw nsw i32 %4385, %4381
  %4387 = icmp eq i32 %4386, 2
  %4388 = zext i1 %4387 to i8
  %4389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4388, i8* %4389, align 1, !tbaa !2451
  %4390 = load i64, i64* %RBP
  %4391 = sub i64 %4390, 4
  %4392 = load i32, i32* %EAX
  %4393 = zext i32 %4392 to i64
  %4394 = load i64, i64* %PC
  %4395 = add i64 %4394, 3
  store i64 %4395, i64* %PC
  %4396 = inttoptr i64 %4391 to i32*
  store i32 %4392, i32* %4396
  %4397 = load i64, i64* %PC
  %4398 = sub i64 %4397, 124
  %4399 = load i64, i64* %PC
  %4400 = add i64 %4399, 5
  store i64 %4400, i64* %PC
  %4401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4398, i64* %4401, align 8, !tbaa !2428
  br label %block_400a2c

block_400899:                                     ; preds = %block_40086f
  %4402 = sub i64 %5531, 4
  %4403 = load i64, i64* %PC
  %4404 = add i64 %4403, 7
  store i64 %4404, i64* %PC
  %4405 = inttoptr i64 %4402 to i32*
  store i32 1, i32* %4405
  br label %block_4008a0

block_400bc3:                                     ; preds = %block_400b8a
  %4406 = load i64, i64* %PC
  %4407 = add i64 %4406, 5
  %4408 = load i64, i64* %PC
  %4409 = add i64 %4408, 5
  store i64 %4409, i64* %PC
  %4410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4407, i64* %4410, align 8, !tbaa !2428
  %4411 = load i64, i64* %RBP
  %4412 = sub i64 %4411, 8
  %4413 = load i64, i64* %PC
  %4414 = add i64 %4413, 3
  store i64 %4414, i64* %PC
  %4415 = inttoptr i64 %4412 to i32*
  %4416 = load i32, i32* %4415
  %4417 = zext i32 %4416 to i64
  store i64 %4417, i64* %RAX, align 8, !tbaa !2428
  %4418 = load i64, i64* %RAX
  %4419 = load i64, i64* %PC
  %4420 = add i64 %4419, 3
  store i64 %4420, i64* %PC
  %4421 = trunc i64 %4418 to i32
  %4422 = add i32 1, %4421
  %4423 = zext i32 %4422 to i64
  store i64 %4423, i64* %RAX, align 8, !tbaa !2428
  %4424 = icmp ult i32 %4422, %4421
  %4425 = icmp ult i32 %4422, 1
  %4426 = or i1 %4424, %4425
  %4427 = zext i1 %4426 to i8
  %4428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4427, i8* %4428, align 1, !tbaa !2433
  %4429 = and i32 %4422, 255
  %4430 = call i32 @llvm.ctpop.i32(i32 %4429) #16
  %4431 = trunc i32 %4430 to i8
  %4432 = and i8 %4431, 1
  %4433 = xor i8 %4432, 1
  %4434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4433, i8* %4434, align 1, !tbaa !2447
  %4435 = xor i64 1, %4418
  %4436 = trunc i64 %4435 to i32
  %4437 = xor i32 %4436, %4422
  %4438 = lshr i32 %4437, 4
  %4439 = trunc i32 %4438 to i8
  %4440 = and i8 %4439, 1
  %4441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4440, i8* %4441, align 1, !tbaa !2448
  %4442 = icmp eq i32 %4422, 0
  %4443 = zext i1 %4442 to i8
  %4444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4443, i8* %4444, align 1, !tbaa !2449
  %4445 = lshr i32 %4422, 31
  %4446 = trunc i32 %4445 to i8
  %4447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4446, i8* %4447, align 1, !tbaa !2450
  %4448 = lshr i32 %4421, 31
  %4449 = xor i32 %4445, %4448
  %4450 = add nuw nsw i32 %4449, %4445
  %4451 = icmp eq i32 %4450, 2
  %4452 = zext i1 %4451 to i8
  %4453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4452, i8* %4453, align 1, !tbaa !2451
  %4454 = load i64, i64* %RBP
  %4455 = sub i64 %4454, 8
  %4456 = load i32, i32* %EAX
  %4457 = zext i32 %4456 to i64
  %4458 = load i64, i64* %PC
  %4459 = add i64 %4458, 3
  store i64 %4459, i64* %PC
  %4460 = inttoptr i64 %4455 to i32*
  store i32 %4456, i32* %4460
  %4461 = load i64, i64* %PC
  %4462 = sub i64 %4461, 88
  %4463 = load i64, i64* %PC
  %4464 = add i64 %4463, 5
  store i64 %4464, i64* %PC
  %4465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4462, i64* %4465, align 8, !tbaa !2428
  br label %block_400b79

block_400e8f:                                     ; preds = %block_400e88, %block_400ed9
  %MEMORY.22 = phi %struct.Memory* [ %MEMORY.26, %block_400e88 ], [ %MEMORY.5, %block_400ed9 ]
  %4466 = load i64, i64* %RBP
  %4467 = sub i64 %4466, 8
  %4468 = load i64, i64* %PC
  %4469 = add i64 %4468, 4
  store i64 %4469, i64* %PC
  %4470 = inttoptr i64 %4467 to i32*
  %4471 = load i32, i32* %4470
  %4472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4472, align 1, !tbaa !2433
  %4473 = and i32 %4471, 255
  %4474 = call i32 @llvm.ctpop.i32(i32 %4473) #16
  %4475 = trunc i32 %4474 to i8
  %4476 = and i8 %4475, 1
  %4477 = xor i8 %4476, 1
  %4478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4477, i8* %4478, align 1, !tbaa !2447
  %4479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4479, align 1, !tbaa !2448
  %4480 = icmp eq i32 %4471, 0
  %4481 = zext i1 %4480 to i8
  %4482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4481, i8* %4482, align 1, !tbaa !2449
  %4483 = lshr i32 %4471, 31
  %4484 = trunc i32 %4483 to i8
  %4485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4484, i8* %4485, align 1, !tbaa !2450
  %4486 = lshr i32 %4471, 31
  %4487 = xor i32 %4483, %4486
  %4488 = add nuw nsw i32 %4487, %4486
  %4489 = icmp eq i32 %4488, 2
  %4490 = zext i1 %4489 to i8
  %4491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4490, i8* %4491, align 1, !tbaa !2451
  %4492 = load i64, i64* %PC
  %4493 = add i64 %4492, 89
  %4494 = load i64, i64* %PC
  %4495 = add i64 %4494, 6
  %4496 = load i64, i64* %PC
  %4497 = add i64 %4496, 6
  store i64 %4497, i64* %PC
  %4498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4499 = load i8, i8* %4498, align 1, !tbaa !2449
  %4500 = icmp eq i8 %4499, 0
  %4501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4502 = load i8, i8* %4501, align 1, !tbaa !2450
  %4503 = icmp ne i8 %4502, 0
  %4504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4505 = load i8, i8* %4504, align 1, !tbaa !2451
  %4506 = icmp ne i8 %4505, 0
  %4507 = xor i1 %4503, %4506
  %4508 = xor i1 %4507, true
  %4509 = and i1 %4500, %4508
  %4510 = zext i1 %4509 to i8
  store i8 %4510, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %4511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4512 = select i1 %4509, i64 %4493, i64 %4495
  store i64 %4512, i64* %4511, align 8, !tbaa !2428
  %4513 = load i8, i8* %BRANCH_TAKEN
  %4514 = icmp eq i8 %4513, 1
  br i1 %4514, label %block_400eec, label %block_400e99

block_401122:                                     ; preds = %block_401118
  %4515 = load i64, i64* %RBP
  %4516 = sub i64 %4515, 4
  %4517 = load i64, i64* %PC
  %4518 = add i64 %4517, 3
  store i64 %4518, i64* %PC
  %4519 = inttoptr i64 %4516 to i32*
  %4520 = load i32, i32* %4519
  %4521 = zext i32 %4520 to i64
  store i64 %4521, i64* %RAX, align 8, !tbaa !2428
  %4522 = load i64, i64* %RBP
  %4523 = sub i64 %4522, 8
  %4524 = load i64, i64* %PC
  %4525 = add i64 %4524, 3
  store i64 %4525, i64* %PC
  %4526 = inttoptr i64 %4523 to i32*
  %4527 = load i32, i32* %4526
  %4528 = zext i32 %4527 to i64
  store i64 %4528, i64* %RCX, align 8, !tbaa !2428
  %4529 = load i64, i64* %RBP
  %4530 = sub i64 %4529, 12
  %4531 = load i64, i64* %PC
  %4532 = add i64 %4531, 3
  store i64 %4532, i64* %PC
  %4533 = inttoptr i64 %4530 to i32*
  %4534 = load i32, i32* %4533
  %4535 = zext i32 %4534 to i64
  store i64 %4535, i64* %RDX, align 8, !tbaa !2428
  %4536 = load i64, i64* %RDX
  %4537 = load i64, i64* %PC
  %4538 = add i64 %4537, 3
  store i64 %4538, i64* %PC
  %4539 = and i64 %4536, 4294967295
  %4540 = shl i64 %4539, 2
  %4541 = trunc i64 %4540 to i32
  %4542 = icmp slt i32 %4541, 0
  %4543 = shl i32 %4541, 1
  %4544 = zext i32 %4543 to i64
  store i64 %4544, i64* %RDX, align 8, !tbaa !2428
  %4545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4546 = zext i1 %4542 to i8
  store i8 %4546, i8* %4545, align 1, !tbaa !2432
  %4547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4548 = and i32 %4543, 254
  %4549 = call i32 @llvm.ctpop.i32(i32 %4548) #16
  %4550 = trunc i32 %4549 to i8
  %4551 = and i8 %4550, 1
  %4552 = xor i8 %4551, 1
  store i8 %4552, i8* %4547, align 1, !tbaa !2432
  %4553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4553, align 1, !tbaa !2432
  %4554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4555 = icmp eq i32 %4543, 0
  %4556 = zext i1 %4555 to i8
  store i8 %4556, i8* %4554, align 1, !tbaa !2432
  %4557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4558 = lshr i32 %4543, 31
  %4559 = trunc i32 %4558 to i8
  store i8 %4559, i8* %4557, align 1, !tbaa !2432
  %4560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4560, align 1, !tbaa !2432
  %4561 = load i64, i64* %RCX
  %4562 = load i32, i32* %EDX
  %4563 = zext i32 %4562 to i64
  %4564 = load i64, i64* %PC
  %4565 = add i64 %4564, 2
  store i64 %4565, i64* %PC
  %4566 = trunc i64 %4561 to i32
  %4567 = add i32 %4562, %4566
  %4568 = zext i32 %4567 to i64
  store i64 %4568, i64* %RCX, align 8, !tbaa !2428
  %4569 = icmp ult i32 %4567, %4566
  %4570 = icmp ult i32 %4567, %4562
  %4571 = or i1 %4569, %4570
  %4572 = zext i1 %4571 to i8
  %4573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4572, i8* %4573, align 1, !tbaa !2433
  %4574 = and i32 %4567, 255
  %4575 = call i32 @llvm.ctpop.i32(i32 %4574) #16
  %4576 = trunc i32 %4575 to i8
  %4577 = and i8 %4576, 1
  %4578 = xor i8 %4577, 1
  %4579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4578, i8* %4579, align 1, !tbaa !2447
  %4580 = xor i64 %4563, %4561
  %4581 = trunc i64 %4580 to i32
  %4582 = xor i32 %4581, %4567
  %4583 = lshr i32 %4582, 4
  %4584 = trunc i32 %4583 to i8
  %4585 = and i8 %4584, 1
  %4586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4585, i8* %4586, align 1, !tbaa !2448
  %4587 = icmp eq i32 %4567, 0
  %4588 = zext i1 %4587 to i8
  %4589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4588, i8* %4589, align 1, !tbaa !2449
  %4590 = lshr i32 %4567, 31
  %4591 = trunc i32 %4590 to i8
  %4592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4591, i8* %4592, align 1, !tbaa !2450
  %4593 = lshr i32 %4566, 31
  %4594 = lshr i32 %4562, 31
  %4595 = xor i32 %4590, %4593
  %4596 = xor i32 %4590, %4594
  %4597 = add nuw nsw i32 %4595, %4596
  %4598 = icmp eq i32 %4597, 2
  %4599 = zext i1 %4598 to i8
  %4600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4599, i8* %4600, align 1, !tbaa !2451
  %4601 = load i64, i64* %RCX
  %4602 = load i64, i64* %PC
  %4603 = add i64 %4602, 3
  store i64 %4603, i64* %PC
  %4604 = and i64 %4601, 4294967295
  %4605 = shl i64 %4604, 2
  %4606 = trunc i64 %4605 to i32
  %4607 = icmp slt i32 %4606, 0
  %4608 = shl i32 %4606, 1
  %4609 = zext i32 %4608 to i64
  store i64 %4609, i64* %RCX, align 8, !tbaa !2428
  %4610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4611 = zext i1 %4607 to i8
  store i8 %4611, i8* %4610, align 1, !tbaa !2432
  %4612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4613 = and i32 %4608, 254
  %4614 = call i32 @llvm.ctpop.i32(i32 %4613) #16
  %4615 = trunc i32 %4614 to i8
  %4616 = and i8 %4615, 1
  %4617 = xor i8 %4616, 1
  store i8 %4617, i8* %4612, align 1, !tbaa !2432
  %4618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4618, align 1, !tbaa !2432
  %4619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4620 = icmp eq i32 %4608, 0
  %4621 = zext i1 %4620 to i8
  store i8 %4621, i8* %4619, align 1, !tbaa !2432
  %4622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4623 = lshr i32 %4608, 31
  %4624 = trunc i32 %4623 to i8
  store i8 %4624, i8* %4622, align 1, !tbaa !2432
  %4625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4625, align 1, !tbaa !2432
  %4626 = load i64, i64* %RAX
  %4627 = load i32, i32* %ECX
  %4628 = zext i32 %4627 to i64
  %4629 = load i64, i64* %PC
  %4630 = add i64 %4629, 2
  store i64 %4630, i64* %PC
  %4631 = trunc i64 %4626 to i32
  %4632 = add i32 %4627, %4631
  %4633 = zext i32 %4632 to i64
  store i64 %4633, i64* %RAX, align 8, !tbaa !2428
  %4634 = icmp ult i32 %4632, %4631
  %4635 = icmp ult i32 %4632, %4627
  %4636 = or i1 %4634, %4635
  %4637 = zext i1 %4636 to i8
  %4638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4637, i8* %4638, align 1, !tbaa !2433
  %4639 = and i32 %4632, 255
  %4640 = call i32 @llvm.ctpop.i32(i32 %4639) #16
  %4641 = trunc i32 %4640 to i8
  %4642 = and i8 %4641, 1
  %4643 = xor i8 %4642, 1
  %4644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4643, i8* %4644, align 1, !tbaa !2447
  %4645 = xor i64 %4628, %4626
  %4646 = trunc i64 %4645 to i32
  %4647 = xor i32 %4646, %4632
  %4648 = lshr i32 %4647, 4
  %4649 = trunc i32 %4648 to i8
  %4650 = and i8 %4649, 1
  %4651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4650, i8* %4651, align 1, !tbaa !2448
  %4652 = icmp eq i32 %4632, 0
  %4653 = zext i1 %4652 to i8
  %4654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4653, i8* %4654, align 1, !tbaa !2449
  %4655 = lshr i32 %4632, 31
  %4656 = trunc i32 %4655 to i8
  %4657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4656, i8* %4657, align 1, !tbaa !2450
  %4658 = lshr i32 %4631, 31
  %4659 = lshr i32 %4627, 31
  %4660 = xor i32 %4655, %4658
  %4661 = xor i32 %4655, %4659
  %4662 = add nuw nsw i32 %4660, %4661
  %4663 = icmp eq i32 %4662, 2
  %4664 = zext i1 %4663 to i8
  %4665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4664, i8* %4665, align 1, !tbaa !2451
  %4666 = load i32, i32* %EAX
  %4667 = zext i32 %4666 to i64
  %4668 = load i64, i64* %PC
  %4669 = add i64 %4668, 3
  store i64 %4669, i64* %PC
  %4670 = shl i64 %4667, 32
  %4671 = ashr exact i64 %4670, 32
  store i64 %4671, i64* %RSI, align 8, !tbaa !2428
  %4672 = load i64, i64* %RSI
  %4673 = mul i64 %4672, 4
  %4674 = add i64 %4673, add (i64 ptrtoint (%p_type* @p to i64), i64 24576)
  %4675 = load i64, i64* %PC
  %4676 = add i64 %4675, 11
  store i64 %4676, i64* %PC
  %4677 = inttoptr i64 %4674 to i32*
  store i32 1, i32* %4677
  %4678 = load i64, i64* %RBP
  %4679 = sub i64 %4678, 12
  %4680 = load i64, i64* %PC
  %4681 = add i64 %4680, 3
  store i64 %4681, i64* %PC
  %4682 = inttoptr i64 %4679 to i32*
  %4683 = load i32, i32* %4682
  %4684 = zext i32 %4683 to i64
  store i64 %4684, i64* %RAX, align 8, !tbaa !2428
  %4685 = load i64, i64* %RAX
  %4686 = load i64, i64* %PC
  %4687 = add i64 %4686, 3
  store i64 %4687, i64* %PC
  %4688 = trunc i64 %4685 to i32
  %4689 = add i32 1, %4688
  %4690 = zext i32 %4689 to i64
  store i64 %4690, i64* %RAX, align 8, !tbaa !2428
  %4691 = icmp ult i32 %4689, %4688
  %4692 = icmp ult i32 %4689, 1
  %4693 = or i1 %4691, %4692
  %4694 = zext i1 %4693 to i8
  %4695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4694, i8* %4695, align 1, !tbaa !2433
  %4696 = and i32 %4689, 255
  %4697 = call i32 @llvm.ctpop.i32(i32 %4696) #16
  %4698 = trunc i32 %4697 to i8
  %4699 = and i8 %4698, 1
  %4700 = xor i8 %4699, 1
  %4701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4700, i8* %4701, align 1, !tbaa !2447
  %4702 = xor i64 1, %4685
  %4703 = trunc i64 %4702 to i32
  %4704 = xor i32 %4703, %4689
  %4705 = lshr i32 %4704, 4
  %4706 = trunc i32 %4705 to i8
  %4707 = and i8 %4706, 1
  %4708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4707, i8* %4708, align 1, !tbaa !2448
  %4709 = icmp eq i32 %4689, 0
  %4710 = zext i1 %4709 to i8
  %4711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4710, i8* %4711, align 1, !tbaa !2449
  %4712 = lshr i32 %4689, 31
  %4713 = trunc i32 %4712 to i8
  %4714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4713, i8* %4714, align 1, !tbaa !2450
  %4715 = lshr i32 %4688, 31
  %4716 = xor i32 %4712, %4715
  %4717 = add nuw nsw i32 %4716, %4712
  %4718 = icmp eq i32 %4717, 2
  %4719 = zext i1 %4718 to i8
  %4720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4719, i8* %4720, align 1, !tbaa !2451
  %4721 = load i64, i64* %RBP
  %4722 = sub i64 %4721, 12
  %4723 = load i32, i32* %EAX
  %4724 = zext i32 %4723 to i64
  %4725 = load i64, i64* %PC
  %4726 = add i64 %4725, 3
  store i64 %4726, i64* %PC
  %4727 = inttoptr i64 %4722 to i32*
  store i32 %4723, i32* %4727
  %4728 = load i64, i64* %PC
  %4729 = sub i64 %4728, 52
  %4730 = load i64, i64* %PC
  %4731 = add i64 %4730, 5
  store i64 %4731, i64* %PC
  %4732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4729, i64* %4732, align 8, !tbaa !2428
  br label %block_401118

block_400b8a:                                     ; preds = %block_400b83, %block_400b94
  %MEMORY.23 = phi %struct.Memory* [ %MEMORY.16, %block_400b83 ], [ %MEMORY.23, %block_400b94 ]
  %4733 = load i64, i64* %RBP
  %4734 = sub i64 %4733, 12
  %4735 = load i64, i64* %PC
  %4736 = add i64 %4735, 4
  store i64 %4736, i64* %PC
  %4737 = inttoptr i64 %4734 to i32*
  %4738 = load i32, i32* %4737
  %4739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4739, align 1, !tbaa !2433
  %4740 = and i32 %4738, 255
  %4741 = call i32 @llvm.ctpop.i32(i32 %4740) #16
  %4742 = trunc i32 %4741 to i8
  %4743 = and i8 %4742, 1
  %4744 = xor i8 %4743, 1
  %4745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4744, i8* %4745, align 1, !tbaa !2447
  %4746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4746, align 1, !tbaa !2448
  %4747 = icmp eq i32 %4738, 0
  %4748 = zext i1 %4747 to i8
  %4749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4748, i8* %4749, align 1, !tbaa !2449
  %4750 = lshr i32 %4738, 31
  %4751 = trunc i32 %4750 to i8
  %4752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4751, i8* %4752, align 1, !tbaa !2450
  %4753 = lshr i32 %4738, 31
  %4754 = xor i32 %4750, %4753
  %4755 = add nuw nsw i32 %4754, %4753
  %4756 = icmp eq i32 %4755, 2
  %4757 = zext i1 %4756 to i8
  %4758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4757, i8* %4758, align 1, !tbaa !2451
  %4759 = load i64, i64* %PC
  %4760 = add i64 %4759, 53
  %4761 = load i64, i64* %PC
  %4762 = add i64 %4761, 6
  %4763 = load i64, i64* %PC
  %4764 = add i64 %4763, 6
  store i64 %4764, i64* %PC
  %4765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4766 = load i8, i8* %4765, align 1, !tbaa !2449
  %4767 = icmp eq i8 %4766, 0
  %4768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4769 = load i8, i8* %4768, align 1, !tbaa !2450
  %4770 = icmp ne i8 %4769, 0
  %4771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4772 = load i8, i8* %4771, align 1, !tbaa !2451
  %4773 = icmp ne i8 %4772, 0
  %4774 = xor i1 %4770, %4773
  %4775 = xor i1 %4774, true
  %4776 = and i1 %4767, %4775
  %4777 = zext i1 %4776 to i8
  store i8 %4777, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %4778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4779 = select i1 %4776, i64 %4760, i64 %4762
  store i64 %4779, i64* %4778, align 8, !tbaa !2428
  %4780 = load i8, i8* %BRANCH_TAKEN
  %4781 = icmp eq i8 %4780, 1
  br i1 %4781, label %block_400bc3, label %block_400b94

block_400998:                                     ; preds = %block_40098e
  %4782 = load i64, i64* %RBP
  %4783 = sub i64 %4782, 8
  %4784 = load i64, i64* %PC
  %4785 = add i64 %4784, 7
  store i64 %4785, i64* %PC
  %4786 = inttoptr i64 %4783 to i32*
  store i32 0, i32* %4786
  br label %block_40099f

block_400e88:                                     ; preds = %block_400e7e
  %4787 = load i64, i64* %RBP
  %4788 = sub i64 %4787, 8
  %4789 = load i64, i64* %PC
  %4790 = add i64 %4789, 7
  store i64 %4790, i64* %PC
  %4791 = inttoptr i64 %4788 to i32*
  store i32 0, i32* %4791
  br label %block_400e8f

block_400d53:                                     ; preds = %block_400d9d, %block_400d4c
  %MEMORY.24 = phi %struct.Memory* [ %MEMORY.3, %block_400d4c ], [ %MEMORY.35, %block_400d9d ]
  %4792 = load i64, i64* %RBP
  %4793 = sub i64 %4792, 8
  %4794 = load i64, i64* %PC
  %4795 = add i64 %4794, 4
  store i64 %4795, i64* %PC
  %4796 = inttoptr i64 %4793 to i32*
  %4797 = load i32, i32* %4796
  %4798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4798, align 1, !tbaa !2433
  %4799 = and i32 %4797, 255
  %4800 = call i32 @llvm.ctpop.i32(i32 %4799) #16
  %4801 = trunc i32 %4800 to i8
  %4802 = and i8 %4801, 1
  %4803 = xor i8 %4802, 1
  %4804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4803, i8* %4804, align 1, !tbaa !2447
  %4805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4805, align 1, !tbaa !2448
  %4806 = icmp eq i32 %4797, 0
  %4807 = zext i1 %4806 to i8
  %4808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4807, i8* %4808, align 1, !tbaa !2449
  %4809 = lshr i32 %4797, 31
  %4810 = trunc i32 %4809 to i8
  %4811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4810, i8* %4811, align 1, !tbaa !2450
  %4812 = lshr i32 %4797, 31
  %4813 = xor i32 %4809, %4812
  %4814 = add nuw nsw i32 %4813, %4812
  %4815 = icmp eq i32 %4814, 2
  %4816 = zext i1 %4815 to i8
  %4817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4816, i8* %4817, align 1, !tbaa !2451
  %4818 = load i64, i64* %PC
  %4819 = add i64 %4818, 89
  %4820 = load i64, i64* %PC
  %4821 = add i64 %4820, 6
  %4822 = load i64, i64* %PC
  %4823 = add i64 %4822, 6
  store i64 %4823, i64* %PC
  %4824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4825 = load i8, i8* %4824, align 1, !tbaa !2449
  %4826 = icmp eq i8 %4825, 0
  %4827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4828 = load i8, i8* %4827, align 1, !tbaa !2450
  %4829 = icmp ne i8 %4828, 0
  %4830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4831 = load i8, i8* %4830, align 1, !tbaa !2451
  %4832 = icmp ne i8 %4831, 0
  %4833 = xor i1 %4829, %4832
  %4834 = xor i1 %4833, true
  %4835 = and i1 %4826, %4834
  %4836 = zext i1 %4835 to i8
  store i8 %4836, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %4837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4838 = select i1 %4835, i64 %4819, i64 %4821
  store i64 %4838, i64* %4837, align 8, !tbaa !2428
  %4839 = load i8, i8* %BRANCH_TAKEN
  %4840 = icmp eq i8 %4839, 1
  br i1 %4840, label %block_400db0, label %block_400d5d

block_400921:                                     ; preds = %block_4008a0
  %4841 = sub i64 %4283, 4
  %4842 = load i64, i64* %PC
  %4843 = add i64 %4842, 7
  store i64 %4843, i64* %PC
  %4844 = inttoptr i64 %4841 to i32*
  store i32 0, i32* %4844
  br label %block_400928

block_400a87:                                     ; preds = %block_400a4e
  %4845 = load i64, i64* %PC
  %4846 = add i64 %4845, 5
  %4847 = load i64, i64* %PC
  %4848 = add i64 %4847, 5
  store i64 %4848, i64* %PC
  %4849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4846, i64* %4849, align 8, !tbaa !2428
  %4850 = load i64, i64* %RBP
  %4851 = sub i64 %4850, 8
  %4852 = load i64, i64* %PC
  %4853 = add i64 %4852, 3
  store i64 %4853, i64* %PC
  %4854 = inttoptr i64 %4851 to i32*
  %4855 = load i32, i32* %4854
  %4856 = zext i32 %4855 to i64
  store i64 %4856, i64* %RAX, align 8, !tbaa !2428
  %4857 = load i64, i64* %RAX
  %4858 = load i64, i64* %PC
  %4859 = add i64 %4858, 3
  store i64 %4859, i64* %PC
  %4860 = trunc i64 %4857 to i32
  %4861 = add i32 1, %4860
  %4862 = zext i32 %4861 to i64
  store i64 %4862, i64* %RAX, align 8, !tbaa !2428
  %4863 = icmp ult i32 %4861, %4860
  %4864 = icmp ult i32 %4861, 1
  %4865 = or i1 %4863, %4864
  %4866 = zext i1 %4865 to i8
  %4867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4866, i8* %4867, align 1, !tbaa !2433
  %4868 = and i32 %4861, 255
  %4869 = call i32 @llvm.ctpop.i32(i32 %4868) #16
  %4870 = trunc i32 %4869 to i8
  %4871 = and i8 %4870, 1
  %4872 = xor i8 %4871, 1
  %4873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4872, i8* %4873, align 1, !tbaa !2447
  %4874 = xor i64 1, %4857
  %4875 = trunc i64 %4874 to i32
  %4876 = xor i32 %4875, %4861
  %4877 = lshr i32 %4876, 4
  %4878 = trunc i32 %4877 to i8
  %4879 = and i8 %4878, 1
  %4880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4879, i8* %4880, align 1, !tbaa !2448
  %4881 = icmp eq i32 %4861, 0
  %4882 = zext i1 %4881 to i8
  %4883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4882, i8* %4883, align 1, !tbaa !2449
  %4884 = lshr i32 %4861, 31
  %4885 = trunc i32 %4884 to i8
  %4886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4885, i8* %4886, align 1, !tbaa !2450
  %4887 = lshr i32 %4860, 31
  %4888 = xor i32 %4884, %4887
  %4889 = add nuw nsw i32 %4888, %4884
  %4890 = icmp eq i32 %4889, 2
  %4891 = zext i1 %4890 to i8
  %4892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4891, i8* %4892, align 1, !tbaa !2451
  %4893 = load i64, i64* %RBP
  %4894 = sub i64 %4893, 8
  %4895 = load i32, i32* %EAX
  %4896 = zext i32 %4895 to i64
  %4897 = load i64, i64* %PC
  %4898 = add i64 %4897, 3
  store i64 %4898, i64* %PC
  %4899 = inttoptr i64 %4894 to i32*
  store i32 %4895, i32* %4899
  %4900 = load i64, i64* %PC
  %4901 = sub i64 %4900, 88
  %4902 = load i64, i64* %PC
  %4903 = add i64 %4902, 5
  store i64 %4903, i64* %PC
  %4904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4901, i64* %4904, align 8, !tbaa !2428
  br label %block_400a3d

block_400aec:                                     ; preds = %block_400ae5, %block_400af6
  %MEMORY.25 = phi %struct.Memory* [ %MEMORY.28, %block_400ae5 ], [ %MEMORY.25, %block_400af6 ]
  %4905 = load i64, i64* %RBP
  %4906 = sub i64 %4905, 12
  %4907 = load i64, i64* %PC
  %4908 = add i64 %4907, 4
  store i64 %4908, i64* %PC
  %4909 = inttoptr i64 %4906 to i32*
  %4910 = load i32, i32* %4909
  %4911 = sub i32 %4910, 1
  %4912 = icmp ult i32 %4910, 1
  %4913 = zext i1 %4912 to i8
  %4914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4913, i8* %4914, align 1, !tbaa !2433
  %4915 = and i32 %4911, 255
  %4916 = call i32 @llvm.ctpop.i32(i32 %4915) #16
  %4917 = trunc i32 %4916 to i8
  %4918 = and i8 %4917, 1
  %4919 = xor i8 %4918, 1
  %4920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4919, i8* %4920, align 1, !tbaa !2447
  %4921 = xor i32 %4910, 1
  %4922 = xor i32 %4921, %4911
  %4923 = lshr i32 %4922, 4
  %4924 = trunc i32 %4923 to i8
  %4925 = and i8 %4924, 1
  %4926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4925, i8* %4926, align 1, !tbaa !2448
  %4927 = icmp eq i32 %4911, 0
  %4928 = zext i1 %4927 to i8
  %4929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4928, i8* %4929, align 1, !tbaa !2449
  %4930 = lshr i32 %4911, 31
  %4931 = trunc i32 %4930 to i8
  %4932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4931, i8* %4932, align 1, !tbaa !2450
  %4933 = lshr i32 %4910, 31
  %4934 = xor i32 %4930, %4933
  %4935 = add nuw nsw i32 %4934, %4933
  %4936 = icmp eq i32 %4935, 2
  %4937 = zext i1 %4936 to i8
  %4938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4937, i8* %4938, align 1, !tbaa !2451
  %4939 = load i64, i64* %PC
  %4940 = add i64 %4939, 53
  %4941 = load i64, i64* %PC
  %4942 = add i64 %4941, 6
  %4943 = load i64, i64* %PC
  %4944 = add i64 %4943, 6
  store i64 %4944, i64* %PC
  %4945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4946 = load i8, i8* %4945, align 1, !tbaa !2449
  %4947 = icmp eq i8 %4946, 0
  %4948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4949 = load i8, i8* %4948, align 1, !tbaa !2450
  %4950 = icmp ne i8 %4949, 0
  %4951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4952 = load i8, i8* %4951, align 1, !tbaa !2451
  %4953 = icmp ne i8 %4952, 0
  %4954 = xor i1 %4950, %4953
  %4955 = xor i1 %4954, true
  %4956 = and i1 %4947, %4955
  %4957 = zext i1 %4956 to i8
  store i8 %4957, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %4958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4959 = select i1 %4956, i64 %4940, i64 %4942
  store i64 %4959, i64* %4958, align 8, !tbaa !2428
  %4960 = load i8, i8* %BRANCH_TAKEN
  %4961 = icmp eq i8 %4960, 1
  br i1 %4961, label %block_400b25, label %block_400af6

block_401084:                                     ; preds = %block_40107a
  %4962 = load i64, i64* %RBP
  %4963 = sub i64 %4962, 4
  %4964 = load i64, i64* %PC
  %4965 = add i64 %4964, 3
  store i64 %4965, i64* %PC
  %4966 = inttoptr i64 %4963 to i32*
  %4967 = load i32, i32* %4966
  %4968 = zext i32 %4967 to i64
  store i64 %4968, i64* %RAX, align 8, !tbaa !2428
  %4969 = load i64, i64* %RBP
  %4970 = sub i64 %4969, 8
  %4971 = load i64, i64* %PC
  %4972 = add i64 %4971, 3
  store i64 %4972, i64* %PC
  %4973 = inttoptr i64 %4970 to i32*
  %4974 = load i32, i32* %4973
  %4975 = zext i32 %4974 to i64
  store i64 %4975, i64* %RCX, align 8, !tbaa !2428
  %4976 = load i64, i64* %RBP
  %4977 = sub i64 %4976, 12
  %4978 = load i64, i64* %PC
  %4979 = add i64 %4978, 3
  store i64 %4979, i64* %PC
  %4980 = inttoptr i64 %4977 to i32*
  %4981 = load i32, i32* %4980
  %4982 = zext i32 %4981 to i64
  store i64 %4982, i64* %RDX, align 8, !tbaa !2428
  %4983 = load i64, i64* %RDX
  %4984 = load i64, i64* %PC
  %4985 = add i64 %4984, 3
  store i64 %4985, i64* %PC
  %4986 = and i64 %4983, 4294967295
  %4987 = shl i64 %4986, 2
  %4988 = trunc i64 %4987 to i32
  %4989 = icmp slt i32 %4988, 0
  %4990 = shl i32 %4988, 1
  %4991 = zext i32 %4990 to i64
  store i64 %4991, i64* %RDX, align 8, !tbaa !2428
  %4992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4993 = zext i1 %4989 to i8
  store i8 %4993, i8* %4992, align 1, !tbaa !2432
  %4994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4995 = and i32 %4990, 254
  %4996 = call i32 @llvm.ctpop.i32(i32 %4995) #16
  %4997 = trunc i32 %4996 to i8
  %4998 = and i8 %4997, 1
  %4999 = xor i8 %4998, 1
  store i8 %4999, i8* %4994, align 1, !tbaa !2432
  %5000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5000, align 1, !tbaa !2432
  %5001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5002 = icmp eq i32 %4990, 0
  %5003 = zext i1 %5002 to i8
  store i8 %5003, i8* %5001, align 1, !tbaa !2432
  %5004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5005 = lshr i32 %4990, 31
  %5006 = trunc i32 %5005 to i8
  store i8 %5006, i8* %5004, align 1, !tbaa !2432
  %5007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5007, align 1, !tbaa !2432
  %5008 = load i64, i64* %RCX
  %5009 = load i32, i32* %EDX
  %5010 = zext i32 %5009 to i64
  %5011 = load i64, i64* %PC
  %5012 = add i64 %5011, 2
  store i64 %5012, i64* %PC
  %5013 = trunc i64 %5008 to i32
  %5014 = add i32 %5009, %5013
  %5015 = zext i32 %5014 to i64
  store i64 %5015, i64* %RCX, align 8, !tbaa !2428
  %5016 = icmp ult i32 %5014, %5013
  %5017 = icmp ult i32 %5014, %5009
  %5018 = or i1 %5016, %5017
  %5019 = zext i1 %5018 to i8
  %5020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5019, i8* %5020, align 1, !tbaa !2433
  %5021 = and i32 %5014, 255
  %5022 = call i32 @llvm.ctpop.i32(i32 %5021) #16
  %5023 = trunc i32 %5022 to i8
  %5024 = and i8 %5023, 1
  %5025 = xor i8 %5024, 1
  %5026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5025, i8* %5026, align 1, !tbaa !2447
  %5027 = xor i64 %5010, %5008
  %5028 = trunc i64 %5027 to i32
  %5029 = xor i32 %5028, %5014
  %5030 = lshr i32 %5029, 4
  %5031 = trunc i32 %5030 to i8
  %5032 = and i8 %5031, 1
  %5033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5032, i8* %5033, align 1, !tbaa !2448
  %5034 = icmp eq i32 %5014, 0
  %5035 = zext i1 %5034 to i8
  %5036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5035, i8* %5036, align 1, !tbaa !2449
  %5037 = lshr i32 %5014, 31
  %5038 = trunc i32 %5037 to i8
  %5039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5038, i8* %5039, align 1, !tbaa !2450
  %5040 = lshr i32 %5013, 31
  %5041 = lshr i32 %5009, 31
  %5042 = xor i32 %5037, %5040
  %5043 = xor i32 %5037, %5041
  %5044 = add nuw nsw i32 %5042, %5043
  %5045 = icmp eq i32 %5044, 2
  %5046 = zext i1 %5045 to i8
  %5047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5046, i8* %5047, align 1, !tbaa !2451
  %5048 = load i64, i64* %RCX
  %5049 = load i64, i64* %PC
  %5050 = add i64 %5049, 3
  store i64 %5050, i64* %PC
  %5051 = and i64 %5048, 4294967295
  %5052 = shl i64 %5051, 2
  %5053 = trunc i64 %5052 to i32
  %5054 = icmp slt i32 %5053, 0
  %5055 = shl i32 %5053, 1
  %5056 = zext i32 %5055 to i64
  store i64 %5056, i64* %RCX, align 8, !tbaa !2428
  %5057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5058 = zext i1 %5054 to i8
  store i8 %5058, i8* %5057, align 1, !tbaa !2432
  %5059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5060 = and i32 %5055, 254
  %5061 = call i32 @llvm.ctpop.i32(i32 %5060) #16
  %5062 = trunc i32 %5061 to i8
  %5063 = and i8 %5062, 1
  %5064 = xor i8 %5063, 1
  store i8 %5064, i8* %5059, align 1, !tbaa !2432
  %5065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5065, align 1, !tbaa !2432
  %5066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5067 = icmp eq i32 %5055, 0
  %5068 = zext i1 %5067 to i8
  store i8 %5068, i8* %5066, align 1, !tbaa !2432
  %5069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5070 = lshr i32 %5055, 31
  %5071 = trunc i32 %5070 to i8
  store i8 %5071, i8* %5069, align 1, !tbaa !2432
  %5072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5072, align 1, !tbaa !2432
  %5073 = load i64, i64* %RAX
  %5074 = load i32, i32* %ECX
  %5075 = zext i32 %5074 to i64
  %5076 = load i64, i64* %PC
  %5077 = add i64 %5076, 2
  store i64 %5077, i64* %PC
  %5078 = trunc i64 %5073 to i32
  %5079 = add i32 %5074, %5078
  %5080 = zext i32 %5079 to i64
  store i64 %5080, i64* %RAX, align 8, !tbaa !2428
  %5081 = icmp ult i32 %5079, %5078
  %5082 = icmp ult i32 %5079, %5074
  %5083 = or i1 %5081, %5082
  %5084 = zext i1 %5083 to i8
  %5085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5084, i8* %5085, align 1, !tbaa !2433
  %5086 = and i32 %5079, 255
  %5087 = call i32 @llvm.ctpop.i32(i32 %5086) #16
  %5088 = trunc i32 %5087 to i8
  %5089 = and i8 %5088, 1
  %5090 = xor i8 %5089, 1
  %5091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5090, i8* %5091, align 1, !tbaa !2447
  %5092 = xor i64 %5075, %5073
  %5093 = trunc i64 %5092 to i32
  %5094 = xor i32 %5093, %5079
  %5095 = lshr i32 %5094, 4
  %5096 = trunc i32 %5095 to i8
  %5097 = and i8 %5096, 1
  %5098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5097, i8* %5098, align 1, !tbaa !2448
  %5099 = icmp eq i32 %5079, 0
  %5100 = zext i1 %5099 to i8
  %5101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5100, i8* %5101, align 1, !tbaa !2449
  %5102 = lshr i32 %5079, 31
  %5103 = trunc i32 %5102 to i8
  %5104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5103, i8* %5104, align 1, !tbaa !2450
  %5105 = lshr i32 %5078, 31
  %5106 = lshr i32 %5074, 31
  %5107 = xor i32 %5102, %5105
  %5108 = xor i32 %5102, %5106
  %5109 = add nuw nsw i32 %5107, %5108
  %5110 = icmp eq i32 %5109, 2
  %5111 = zext i1 %5110 to i8
  %5112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5111, i8* %5112, align 1, !tbaa !2451
  %5113 = load i32, i32* %EAX
  %5114 = zext i32 %5113 to i64
  %5115 = load i64, i64* %PC
  %5116 = add i64 %5115, 3
  store i64 %5116, i64* %PC
  %5117 = shl i64 %5114, 32
  %5118 = ashr exact i64 %5117, 32
  store i64 %5118, i64* %RSI, align 8, !tbaa !2428
  %5119 = load i64, i64* %RSI
  %5120 = mul i64 %5119, 4
  %5121 = add i64 %5120, add (i64 ptrtoint (%p_type* @p to i64), i64 22528)
  %5122 = load i64, i64* %PC
  %5123 = add i64 %5122, 11
  store i64 %5123, i64* %PC
  %5124 = inttoptr i64 %5121 to i32*
  store i32 1, i32* %5124
  %5125 = load i64, i64* %RBP
  %5126 = sub i64 %5125, 12
  %5127 = load i64, i64* %PC
  %5128 = add i64 %5127, 3
  store i64 %5128, i64* %PC
  %5129 = inttoptr i64 %5126 to i32*
  %5130 = load i32, i32* %5129
  %5131 = zext i32 %5130 to i64
  store i64 %5131, i64* %RAX, align 8, !tbaa !2428
  %5132 = load i64, i64* %RAX
  %5133 = load i64, i64* %PC
  %5134 = add i64 %5133, 3
  store i64 %5134, i64* %PC
  %5135 = trunc i64 %5132 to i32
  %5136 = add i32 1, %5135
  %5137 = zext i32 %5136 to i64
  store i64 %5137, i64* %RAX, align 8, !tbaa !2428
  %5138 = icmp ult i32 %5136, %5135
  %5139 = icmp ult i32 %5136, 1
  %5140 = or i1 %5138, %5139
  %5141 = zext i1 %5140 to i8
  %5142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5141, i8* %5142, align 1, !tbaa !2433
  %5143 = and i32 %5136, 255
  %5144 = call i32 @llvm.ctpop.i32(i32 %5143) #16
  %5145 = trunc i32 %5144 to i8
  %5146 = and i8 %5145, 1
  %5147 = xor i8 %5146, 1
  %5148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5147, i8* %5148, align 1, !tbaa !2447
  %5149 = xor i64 1, %5132
  %5150 = trunc i64 %5149 to i32
  %5151 = xor i32 %5150, %5136
  %5152 = lshr i32 %5151, 4
  %5153 = trunc i32 %5152 to i8
  %5154 = and i8 %5153, 1
  %5155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5154, i8* %5155, align 1, !tbaa !2448
  %5156 = icmp eq i32 %5136, 0
  %5157 = zext i1 %5156 to i8
  %5158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5157, i8* %5158, align 1, !tbaa !2449
  %5159 = lshr i32 %5136, 31
  %5160 = trunc i32 %5159 to i8
  %5161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5160, i8* %5161, align 1, !tbaa !2450
  %5162 = lshr i32 %5135, 31
  %5163 = xor i32 %5159, %5162
  %5164 = add nuw nsw i32 %5163, %5159
  %5165 = icmp eq i32 %5164, 2
  %5166 = zext i1 %5165 to i8
  %5167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5166, i8* %5167, align 1, !tbaa !2451
  %5168 = load i64, i64* %RBP
  %5169 = sub i64 %5168, 12
  %5170 = load i32, i32* %EAX
  %5171 = zext i32 %5170 to i64
  %5172 = load i64, i64* %PC
  %5173 = add i64 %5172, 3
  store i64 %5173, i64* %PC
  %5174 = inttoptr i64 %5169 to i32*
  store i32 %5170, i32* %5174
  %5175 = load i64, i64* %PC
  %5176 = sub i64 %5175, 52
  %5177 = load i64, i64* %PC
  %5178 = add i64 %5177, 5
  store i64 %5178, i64* %PC
  %5179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5176, i64* %5179, align 8, !tbaa !2428
  br label %block_40107a

block_400e7e:                                     ; preds = %block_400eec, %block_400e61
  %MEMORY.26 = phi %struct.Memory* [ %MEMORY.13, %block_400e61 ], [ %MEMORY.22, %block_400eec ]
  %5180 = load i64, i64* %RBP
  %5181 = sub i64 %5180, 4
  %5182 = load i64, i64* %PC
  %5183 = add i64 %5182, 4
  store i64 %5183, i64* %PC
  %5184 = inttoptr i64 %5181 to i32*
  %5185 = load i32, i32* %5184
  %5186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5186, align 1, !tbaa !2433
  %5187 = and i32 %5185, 255
  %5188 = call i32 @llvm.ctpop.i32(i32 %5187) #16
  %5189 = trunc i32 %5188 to i8
  %5190 = and i8 %5189, 1
  %5191 = xor i8 %5190, 1
  %5192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5191, i8* %5192, align 1, !tbaa !2447
  %5193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5193, align 1, !tbaa !2448
  %5194 = icmp eq i32 %5185, 0
  %5195 = zext i1 %5194 to i8
  %5196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5195, i8* %5196, align 1, !tbaa !2449
  %5197 = lshr i32 %5185, 31
  %5198 = trunc i32 %5197 to i8
  %5199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5198, i8* %5199, align 1, !tbaa !2450
  %5200 = lshr i32 %5185, 31
  %5201 = xor i32 %5197, %5200
  %5202 = add nuw nsw i32 %5201, %5200
  %5203 = icmp eq i32 %5202, 2
  %5204 = zext i1 %5203 to i8
  %5205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5204, i8* %5205, align 1, !tbaa !2451
  %5206 = load i64, i64* %PC
  %5207 = add i64 %5206, 125
  %5208 = load i64, i64* %PC
  %5209 = add i64 %5208, 6
  %5210 = load i64, i64* %PC
  %5211 = add i64 %5210, 6
  store i64 %5211, i64* %PC
  %5212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5213 = load i8, i8* %5212, align 1, !tbaa !2449
  %5214 = icmp eq i8 %5213, 0
  %5215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5216 = load i8, i8* %5215, align 1, !tbaa !2450
  %5217 = icmp ne i8 %5216, 0
  %5218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5219 = load i8, i8* %5218, align 1, !tbaa !2451
  %5220 = icmp ne i8 %5219, 0
  %5221 = xor i1 %5217, %5220
  %5222 = xor i1 %5221, true
  %5223 = and i1 %5214, %5222
  %5224 = zext i1 %5223 to i8
  store i8 %5224, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5226 = select i1 %5223, i64 %5207, i64 %5209
  store i64 %5226, i64* %5225, align 8, !tbaa !2428
  %5227 = load i8, i8* %BRANCH_TAKEN
  %5228 = icmp eq i8 %5227, 1
  br i1 %5228, label %block_400eff, label %block_400e88

block_400e61:                                     ; preds = %block_400de0
  %5229 = load i64, i64* %PC
  %5230 = add i64 %5229, 11
  store i64 %5230, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 28) to i32*)
  %5231 = load i64, i64* %PC
  %5232 = add i64 %5231, 11
  store i64 %5232, i64* %PC
  store i32 16, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 28) to i32*)
  %5233 = load i64, i64* %RBP
  %5234 = sub i64 %5233, 4
  %5235 = load i64, i64* %PC
  %5236 = add i64 %5235, 7
  store i64 %5236, i64* %PC
  %5237 = inttoptr i64 %5234 to i32*
  store i32 0, i32* %5237
  br label %block_400e7e

block_40107a:                                     ; preds = %block_401073, %block_401084
  %MEMORY.27 = phi %struct.Memory* [ %MEMORY.31, %block_401073 ], [ %MEMORY.27, %block_401084 ]
  %5238 = load i64, i64* %RBP
  %5239 = sub i64 %5238, 12
  %5240 = load i64, i64* %PC
  %5241 = add i64 %5240, 4
  store i64 %5241, i64* %PC
  %5242 = inttoptr i64 %5239 to i32*
  %5243 = load i32, i32* %5242
  %5244 = sub i32 %5243, 1
  %5245 = icmp ult i32 %5243, 1
  %5246 = zext i1 %5245 to i8
  %5247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5246, i8* %5247, align 1, !tbaa !2433
  %5248 = and i32 %5244, 255
  %5249 = call i32 @llvm.ctpop.i32(i32 %5248) #16
  %5250 = trunc i32 %5249 to i8
  %5251 = and i8 %5250, 1
  %5252 = xor i8 %5251, 1
  %5253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5252, i8* %5253, align 1, !tbaa !2447
  %5254 = xor i32 %5243, 1
  %5255 = xor i32 %5254, %5244
  %5256 = lshr i32 %5255, 4
  %5257 = trunc i32 %5256 to i8
  %5258 = and i8 %5257, 1
  %5259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5258, i8* %5259, align 1, !tbaa !2448
  %5260 = icmp eq i32 %5244, 0
  %5261 = zext i1 %5260 to i8
  %5262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5261, i8* %5262, align 1, !tbaa !2449
  %5263 = lshr i32 %5244, 31
  %5264 = trunc i32 %5263 to i8
  %5265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5264, i8* %5265, align 1, !tbaa !2450
  %5266 = lshr i32 %5243, 31
  %5267 = xor i32 %5263, %5266
  %5268 = add nuw nsw i32 %5267, %5266
  %5269 = icmp eq i32 %5268, 2
  %5270 = zext i1 %5269 to i8
  %5271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5270, i8* %5271, align 1, !tbaa !2451
  %5272 = load i64, i64* %PC
  %5273 = add i64 %5272, 53
  %5274 = load i64, i64* %PC
  %5275 = add i64 %5274, 6
  %5276 = load i64, i64* %PC
  %5277 = add i64 %5276, 6
  store i64 %5277, i64* %PC
  %5278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5279 = load i8, i8* %5278, align 1, !tbaa !2449
  %5280 = icmp eq i8 %5279, 0
  %5281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5282 = load i8, i8* %5281, align 1, !tbaa !2450
  %5283 = icmp ne i8 %5282, 0
  %5284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5285 = load i8, i8* %5284, align 1, !tbaa !2451
  %5286 = icmp ne i8 %5285, 0
  %5287 = xor i1 %5283, %5286
  %5288 = xor i1 %5287, true
  %5289 = and i1 %5280, %5288
  %5290 = zext i1 %5289 to i8
  store i8 %5290, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5292 = select i1 %5289, i64 %5273, i64 %5275
  store i64 %5292, i64* %5291, align 8, !tbaa !2428
  %5293 = load i8, i8* %BRANCH_TAKEN
  %5294 = icmp eq i8 %5293, 1
  br i1 %5294, label %block_4010b3, label %block_401084

block_400c74:                                     ; preds = %block_400c17
  %5295 = load i64, i64* %PC
  %5296 = add i64 %5295, 5
  %5297 = load i64, i64* %PC
  %5298 = add i64 %5297, 5
  store i64 %5298, i64* %PC
  %5299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5296, i64* %5299, align 8, !tbaa !2428
  %5300 = load i64, i64* %RBP
  %5301 = sub i64 %5300, 4
  %5302 = load i64, i64* %PC
  %5303 = add i64 %5302, 3
  store i64 %5303, i64* %PC
  %5304 = inttoptr i64 %5301 to i32*
  %5305 = load i32, i32* %5304
  %5306 = zext i32 %5305 to i64
  store i64 %5306, i64* %RAX, align 8, !tbaa !2428
  %5307 = load i64, i64* %RAX
  %5308 = load i64, i64* %PC
  %5309 = add i64 %5308, 3
  store i64 %5309, i64* %PC
  %5310 = trunc i64 %5307 to i32
  %5311 = add i32 1, %5310
  %5312 = zext i32 %5311 to i64
  store i64 %5312, i64* %RAX, align 8, !tbaa !2428
  %5313 = icmp ult i32 %5311, %5310
  %5314 = icmp ult i32 %5311, 1
  %5315 = or i1 %5313, %5314
  %5316 = zext i1 %5315 to i8
  %5317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5316, i8* %5317, align 1, !tbaa !2433
  %5318 = and i32 %5311, 255
  %5319 = call i32 @llvm.ctpop.i32(i32 %5318) #16
  %5320 = trunc i32 %5319 to i8
  %5321 = and i8 %5320, 1
  %5322 = xor i8 %5321, 1
  %5323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5322, i8* %5323, align 1, !tbaa !2447
  %5324 = xor i64 1, %5307
  %5325 = trunc i64 %5324 to i32
  %5326 = xor i32 %5325, %5311
  %5327 = lshr i32 %5326, 4
  %5328 = trunc i32 %5327 to i8
  %5329 = and i8 %5328, 1
  %5330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5329, i8* %5330, align 1, !tbaa !2448
  %5331 = icmp eq i32 %5311, 0
  %5332 = zext i1 %5331 to i8
  %5333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5332, i8* %5333, align 1, !tbaa !2449
  %5334 = lshr i32 %5311, 31
  %5335 = trunc i32 %5334 to i8
  %5336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5335, i8* %5336, align 1, !tbaa !2450
  %5337 = lshr i32 %5310, 31
  %5338 = xor i32 %5334, %5337
  %5339 = add nuw nsw i32 %5338, %5334
  %5340 = icmp eq i32 %5339, 2
  %5341 = zext i1 %5340 to i8
  %5342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5341, i8* %5342, align 1, !tbaa !2451
  %5343 = load i64, i64* %RBP
  %5344 = sub i64 %5343, 4
  %5345 = load i32, i32* %EAX
  %5346 = zext i32 %5345 to i64
  %5347 = load i64, i64* %PC
  %5348 = add i64 %5347, 3
  store i64 %5348, i64* %PC
  %5349 = inttoptr i64 %5344 to i32*
  store i32 %5345, i32* %5349
  %5350 = load i64, i64* %PC
  %5351 = sub i64 %5350, 124
  %5352 = load i64, i64* %PC
  %5353 = add i64 %5352, 5
  store i64 %5353, i64* %PC
  %5354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5351, i64* %5354, align 8, !tbaa !2428
  br label %block_400c06

block_400adb:                                     ; preds = %block_400ad4, %block_400b25
  %MEMORY.28 = phi %struct.Memory* [ %MEMORY.32, %block_400ad4 ], [ %MEMORY.25, %block_400b25 ]
  %5355 = load i64, i64* %RBP
  %5356 = sub i64 %5355, 8
  %5357 = load i64, i64* %PC
  %5358 = add i64 %5357, 4
  store i64 %5358, i64* %PC
  %5359 = inttoptr i64 %5356 to i32*
  %5360 = load i32, i32* %5359
  %5361 = sub i32 %5360, 3
  %5362 = icmp ult i32 %5360, 3
  %5363 = zext i1 %5362 to i8
  %5364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5363, i8* %5364, align 1, !tbaa !2433
  %5365 = and i32 %5361, 255
  %5366 = call i32 @llvm.ctpop.i32(i32 %5365) #16
  %5367 = trunc i32 %5366 to i8
  %5368 = and i8 %5367, 1
  %5369 = xor i8 %5368, 1
  %5370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5369, i8* %5370, align 1, !tbaa !2447
  %5371 = xor i32 %5360, 3
  %5372 = xor i32 %5371, %5361
  %5373 = lshr i32 %5372, 4
  %5374 = trunc i32 %5373 to i8
  %5375 = and i8 %5374, 1
  %5376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5375, i8* %5376, align 1, !tbaa !2448
  %5377 = icmp eq i32 %5361, 0
  %5378 = zext i1 %5377 to i8
  %5379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5378, i8* %5379, align 1, !tbaa !2449
  %5380 = lshr i32 %5361, 31
  %5381 = trunc i32 %5380 to i8
  %5382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5381, i8* %5382, align 1, !tbaa !2450
  %5383 = lshr i32 %5360, 31
  %5384 = xor i32 %5380, %5383
  %5385 = add nuw nsw i32 %5384, %5383
  %5386 = icmp eq i32 %5385, 2
  %5387 = zext i1 %5386 to i8
  %5388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5387, i8* %5388, align 1, !tbaa !2451
  %5389 = load i64, i64* %PC
  %5390 = add i64 %5389, 89
  %5391 = load i64, i64* %PC
  %5392 = add i64 %5391, 6
  %5393 = load i64, i64* %PC
  %5394 = add i64 %5393, 6
  store i64 %5394, i64* %PC
  %5395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5396 = load i8, i8* %5395, align 1, !tbaa !2449
  %5397 = icmp eq i8 %5396, 0
  %5398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5399 = load i8, i8* %5398, align 1, !tbaa !2450
  %5400 = icmp ne i8 %5399, 0
  %5401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5402 = load i8, i8* %5401, align 1, !tbaa !2451
  %5403 = icmp ne i8 %5402, 0
  %5404 = xor i1 %5400, %5403
  %5405 = xor i1 %5404, true
  %5406 = and i1 %5397, %5405
  %5407 = zext i1 %5406 to i8
  store i8 %5407, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5409 = select i1 %5406, i64 %5390, i64 %5392
  store i64 %5409, i64* %5408, align 8, !tbaa !2428
  %5410 = load i8, i8* %BRANCH_TAKEN
  %5411 = icmp eq i8 %5410, 1
  br i1 %5411, label %block_400b38, label %block_400ae5

block_4008c2:                                     ; preds = %block_4008bb, %block_4008cc
  %MEMORY.29 = phi %struct.Memory* [ %MEMORY.33, %block_4008bb ], [ %MEMORY.29, %block_4008cc ]
  %5412 = load i64, i64* %RBP
  %5413 = sub i64 %5412, 12
  %5414 = load i64, i64* %PC
  %5415 = add i64 %5414, 4
  store i64 %5415, i64* %PC
  %5416 = inttoptr i64 %5413 to i32*
  %5417 = load i32, i32* %5416
  %5418 = sub i32 %5417, 5
  %5419 = icmp ult i32 %5417, 5
  %5420 = zext i1 %5419 to i8
  %5421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5420, i8* %5421, align 1, !tbaa !2433
  %5422 = and i32 %5418, 255
  %5423 = call i32 @llvm.ctpop.i32(i32 %5422) #16
  %5424 = trunc i32 %5423 to i8
  %5425 = and i8 %5424, 1
  %5426 = xor i8 %5425, 1
  %5427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5426, i8* %5427, align 1, !tbaa !2447
  %5428 = xor i32 %5417, 5
  %5429 = xor i32 %5428, %5418
  %5430 = lshr i32 %5429, 4
  %5431 = trunc i32 %5430 to i8
  %5432 = and i8 %5431, 1
  %5433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5432, i8* %5433, align 1, !tbaa !2448
  %5434 = icmp eq i32 %5418, 0
  %5435 = zext i1 %5434 to i8
  %5436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5435, i8* %5436, align 1, !tbaa !2449
  %5437 = lshr i32 %5418, 31
  %5438 = trunc i32 %5437 to i8
  %5439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5438, i8* %5439, align 1, !tbaa !2450
  %5440 = lshr i32 %5417, 31
  %5441 = xor i32 %5437, %5440
  %5442 = add nuw nsw i32 %5441, %5440
  %5443 = icmp eq i32 %5442, 2
  %5444 = zext i1 %5443 to i8
  %5445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5444, i8* %5445, align 1, !tbaa !2451
  %5446 = load i64, i64* %PC
  %5447 = add i64 %5446, 53
  %5448 = load i64, i64* %PC
  %5449 = add i64 %5448, 6
  %5450 = load i64, i64* %PC
  %5451 = add i64 %5450, 6
  store i64 %5451, i64* %PC
  %5452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5453 = load i8, i8* %5452, align 1, !tbaa !2449
  %5454 = icmp eq i8 %5453, 0
  %5455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5456 = load i8, i8* %5455, align 1, !tbaa !2450
  %5457 = icmp ne i8 %5456, 0
  %5458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5459 = load i8, i8* %5458, align 1, !tbaa !2451
  %5460 = icmp ne i8 %5459, 0
  %5461 = xor i1 %5457, %5460
  %5462 = xor i1 %5461, true
  %5463 = and i1 %5454, %5462
  %5464 = zext i1 %5463 to i8
  store i8 %5464, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5466 = select i1 %5463, i64 %5447, i64 %5449
  store i64 %5466, i64* %5465, align 8, !tbaa !2428
  %5467 = load i8, i8* %BRANCH_TAKEN
  %5468 = icmp eq i8 %5467, 1
  br i1 %5468, label %block_4008fb, label %block_4008cc

block_401073:                                     ; preds = %block_401069
  %5469 = load i64, i64* %RBP
  %5470 = sub i64 %5469, 12
  %5471 = load i64, i64* %PC
  %5472 = add i64 %5471, 7
  store i64 %5472, i64* %PC
  %5473 = inttoptr i64 %5470 to i32*
  store i32 0, i32* %5473
  br label %block_40107a

block_40086f:                                     ; preds = %block_40087c, %block_400860
  %MEMORY.30 = phi %struct.Memory* [ %2, %block_400860 ], [ %MEMORY.30, %block_40087c ]
  %5474 = load i64, i64* %RBP
  %5475 = sub i64 %5474, 16
  %5476 = load i64, i64* %PC
  %5477 = add i64 %5476, 7
  store i64 %5477, i64* %PC
  %5478 = inttoptr i64 %5475 to i32*
  %5479 = load i32, i32* %5478
  %5480 = sub i32 %5479, 511
  %5481 = icmp ult i32 %5479, 511
  %5482 = zext i1 %5481 to i8
  %5483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5482, i8* %5483, align 1, !tbaa !2433
  %5484 = and i32 %5480, 255
  %5485 = call i32 @llvm.ctpop.i32(i32 %5484) #16
  %5486 = trunc i32 %5485 to i8
  %5487 = and i8 %5486, 1
  %5488 = xor i8 %5487, 1
  %5489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5488, i8* %5489, align 1, !tbaa !2447
  %5490 = xor i32 %5479, 511
  %5491 = xor i32 %5490, %5480
  %5492 = lshr i32 %5491, 4
  %5493 = trunc i32 %5492 to i8
  %5494 = and i8 %5493, 1
  %5495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5494, i8* %5495, align 1, !tbaa !2448
  %5496 = icmp eq i32 %5480, 0
  %5497 = zext i1 %5496 to i8
  %5498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5497, i8* %5498, align 1, !tbaa !2449
  %5499 = lshr i32 %5480, 31
  %5500 = trunc i32 %5499 to i8
  %5501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5500, i8* %5501, align 1, !tbaa !2450
  %5502 = lshr i32 %5479, 31
  %5503 = xor i32 %5499, %5502
  %5504 = add nuw nsw i32 %5503, %5502
  %5505 = icmp eq i32 %5504, 2
  %5506 = zext i1 %5505 to i8
  %5507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5506, i8* %5507, align 1, !tbaa !2451
  %5508 = load i64, i64* %PC
  %5509 = add i64 %5508, 35
  %5510 = load i64, i64* %PC
  %5511 = add i64 %5510, 6
  %5512 = load i64, i64* %PC
  %5513 = add i64 %5512, 6
  store i64 %5513, i64* %PC
  %5514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5515 = load i8, i8* %5514, align 1, !tbaa !2449
  %5516 = icmp eq i8 %5515, 0
  %5517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5518 = load i8, i8* %5517, align 1, !tbaa !2450
  %5519 = icmp ne i8 %5518, 0
  %5520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5521 = load i8, i8* %5520, align 1, !tbaa !2451
  %5522 = icmp ne i8 %5521, 0
  %5523 = xor i1 %5519, %5522
  %5524 = xor i1 %5523, true
  %5525 = and i1 %5516, %5524
  %5526 = zext i1 %5525 to i8
  store i8 %5526, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5528 = select i1 %5525, i64 %5509, i64 %5511
  store i64 %5528, i64* %5527, align 8, !tbaa !2428
  %5529 = load i8, i8* %BRANCH_TAKEN
  %5530 = icmp eq i8 %5529, 1
  %5531 = load i64, i64* %RBP
  br i1 %5530, label %block_400899, label %block_40087c

block_400d9d:                                     ; preds = %block_400d64
  %5532 = load i64, i64* %PC
  %5533 = add i64 %5532, 5
  %5534 = load i64, i64* %PC
  %5535 = add i64 %5534, 5
  store i64 %5535, i64* %PC
  %5536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5533, i64* %5536, align 8, !tbaa !2428
  %5537 = load i64, i64* %RBP
  %5538 = sub i64 %5537, 8
  %5539 = load i64, i64* %PC
  %5540 = add i64 %5539, 3
  store i64 %5540, i64* %PC
  %5541 = inttoptr i64 %5538 to i32*
  %5542 = load i32, i32* %5541
  %5543 = zext i32 %5542 to i64
  store i64 %5543, i64* %RAX, align 8, !tbaa !2428
  %5544 = load i64, i64* %RAX
  %5545 = load i64, i64* %PC
  %5546 = add i64 %5545, 3
  store i64 %5546, i64* %PC
  %5547 = trunc i64 %5544 to i32
  %5548 = add i32 1, %5547
  %5549 = zext i32 %5548 to i64
  store i64 %5549, i64* %RAX, align 8, !tbaa !2428
  %5550 = icmp ult i32 %5548, %5547
  %5551 = icmp ult i32 %5548, 1
  %5552 = or i1 %5550, %5551
  %5553 = zext i1 %5552 to i8
  %5554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5553, i8* %5554, align 1, !tbaa !2433
  %5555 = and i32 %5548, 255
  %5556 = call i32 @llvm.ctpop.i32(i32 %5555) #16
  %5557 = trunc i32 %5556 to i8
  %5558 = and i8 %5557, 1
  %5559 = xor i8 %5558, 1
  %5560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5559, i8* %5560, align 1, !tbaa !2447
  %5561 = xor i64 1, %5544
  %5562 = trunc i64 %5561 to i32
  %5563 = xor i32 %5562, %5548
  %5564 = lshr i32 %5563, 4
  %5565 = trunc i32 %5564 to i8
  %5566 = and i8 %5565, 1
  %5567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5566, i8* %5567, align 1, !tbaa !2448
  %5568 = icmp eq i32 %5548, 0
  %5569 = zext i1 %5568 to i8
  %5570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5569, i8* %5570, align 1, !tbaa !2449
  %5571 = lshr i32 %5548, 31
  %5572 = trunc i32 %5571 to i8
  %5573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5572, i8* %5573, align 1, !tbaa !2450
  %5574 = lshr i32 %5547, 31
  %5575 = xor i32 %5571, %5574
  %5576 = add nuw nsw i32 %5575, %5571
  %5577 = icmp eq i32 %5576, 2
  %5578 = zext i1 %5577 to i8
  %5579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5578, i8* %5579, align 1, !tbaa !2451
  %5580 = load i64, i64* %RBP
  %5581 = sub i64 %5580, 8
  %5582 = load i32, i32* %EAX
  %5583 = zext i32 %5582 to i64
  %5584 = load i64, i64* %PC
  %5585 = add i64 %5584, 3
  store i64 %5585, i64* %PC
  %5586 = inttoptr i64 %5581 to i32*
  store i32 %5582, i32* %5586
  %5587 = load i64, i64* %PC
  %5588 = sub i64 %5587, 88
  %5589 = load i64, i64* %PC
  %5590 = add i64 %5589, 5
  store i64 %5590, i64* %PC
  %5591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5588, i64* %5591, align 8, !tbaa !2428
  br label %block_400d53

block_401069:                                     ; preds = %block_401062, %block_4010b3
  %MEMORY.31 = phi %struct.Memory* [ %MEMORY.42, %block_401062 ], [ %MEMORY.27, %block_4010b3 ]
  %5592 = load i64, i64* %RBP
  %5593 = sub i64 %5592, 8
  %5594 = load i64, i64* %PC
  %5595 = add i64 %5594, 4
  store i64 %5595, i64* %PC
  %5596 = inttoptr i64 %5593 to i32*
  %5597 = load i32, i32* %5596
  %5598 = sub i32 %5597, 1
  %5599 = icmp ult i32 %5597, 1
  %5600 = zext i1 %5599 to i8
  %5601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5600, i8* %5601, align 1, !tbaa !2433
  %5602 = and i32 %5598, 255
  %5603 = call i32 @llvm.ctpop.i32(i32 %5602) #16
  %5604 = trunc i32 %5603 to i8
  %5605 = and i8 %5604, 1
  %5606 = xor i8 %5605, 1
  %5607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5606, i8* %5607, align 1, !tbaa !2447
  %5608 = xor i32 %5597, 1
  %5609 = xor i32 %5608, %5598
  %5610 = lshr i32 %5609, 4
  %5611 = trunc i32 %5610 to i8
  %5612 = and i8 %5611, 1
  %5613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5612, i8* %5613, align 1, !tbaa !2448
  %5614 = icmp eq i32 %5598, 0
  %5615 = zext i1 %5614 to i8
  %5616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5615, i8* %5616, align 1, !tbaa !2449
  %5617 = lshr i32 %5598, 31
  %5618 = trunc i32 %5617 to i8
  %5619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5618, i8* %5619, align 1, !tbaa !2450
  %5620 = lshr i32 %5597, 31
  %5621 = xor i32 %5617, %5620
  %5622 = add nuw nsw i32 %5621, %5620
  %5623 = icmp eq i32 %5622, 2
  %5624 = zext i1 %5623 to i8
  %5625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5624, i8* %5625, align 1, !tbaa !2451
  %5626 = load i64, i64* %PC
  %5627 = add i64 %5626, 89
  %5628 = load i64, i64* %PC
  %5629 = add i64 %5628, 6
  %5630 = load i64, i64* %PC
  %5631 = add i64 %5630, 6
  store i64 %5631, i64* %PC
  %5632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5633 = load i8, i8* %5632, align 1, !tbaa !2449
  %5634 = icmp eq i8 %5633, 0
  %5635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5636 = load i8, i8* %5635, align 1, !tbaa !2450
  %5637 = icmp ne i8 %5636, 0
  %5638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5639 = load i8, i8* %5638, align 1, !tbaa !2451
  %5640 = icmp ne i8 %5639, 0
  %5641 = xor i1 %5637, %5640
  %5642 = xor i1 %5641, true
  %5643 = and i1 %5634, %5642
  %5644 = zext i1 %5643 to i8
  store i8 %5644, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5646 = select i1 %5643, i64 %5627, i64 %5629
  store i64 %5646, i64* %5645, align 8, !tbaa !2428
  %5647 = load i8, i8* %BRANCH_TAKEN
  %5648 = icmp eq i8 %5647, 1
  br i1 %5648, label %block_4010c6, label %block_401073

block_400aca:                                     ; preds = %block_400aad, %block_400b38
  %MEMORY.32 = phi %struct.Memory* [ %MEMORY.40, %block_400aad ], [ %MEMORY.28, %block_400b38 ]
  %5649 = load i64, i64* %RBP
  %5650 = sub i64 %5649, 4
  %5651 = load i64, i64* %PC
  %5652 = add i64 %5651, 4
  store i64 %5652, i64* %PC
  %5653 = inttoptr i64 %5650 to i32*
  %5654 = load i32, i32* %5653
  %5655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5655, align 1, !tbaa !2433
  %5656 = and i32 %5654, 255
  %5657 = call i32 @llvm.ctpop.i32(i32 %5656) #16
  %5658 = trunc i32 %5657 to i8
  %5659 = and i8 %5658, 1
  %5660 = xor i8 %5659, 1
  %5661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5660, i8* %5661, align 1, !tbaa !2447
  %5662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5662, align 1, !tbaa !2448
  %5663 = icmp eq i32 %5654, 0
  %5664 = zext i1 %5663 to i8
  %5665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5664, i8* %5665, align 1, !tbaa !2449
  %5666 = lshr i32 %5654, 31
  %5667 = trunc i32 %5666 to i8
  %5668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5667, i8* %5668, align 1, !tbaa !2450
  %5669 = lshr i32 %5654, 31
  %5670 = xor i32 %5666, %5669
  %5671 = add nuw nsw i32 %5670, %5669
  %5672 = icmp eq i32 %5671, 2
  %5673 = zext i1 %5672 to i8
  %5674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5673, i8* %5674, align 1, !tbaa !2451
  %5675 = load i64, i64* %PC
  %5676 = add i64 %5675, 125
  %5677 = load i64, i64* %PC
  %5678 = add i64 %5677, 6
  %5679 = load i64, i64* %PC
  %5680 = add i64 %5679, 6
  store i64 %5680, i64* %PC
  %5681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5682 = load i8, i8* %5681, align 1, !tbaa !2449
  %5683 = icmp eq i8 %5682, 0
  %5684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5685 = load i8, i8* %5684, align 1, !tbaa !2450
  %5686 = icmp ne i8 %5685, 0
  %5687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5688 = load i8, i8* %5687, align 1, !tbaa !2451
  %5689 = icmp ne i8 %5688, 0
  %5690 = xor i1 %5686, %5689
  %5691 = xor i1 %5690, true
  %5692 = and i1 %5683, %5691
  %5693 = zext i1 %5692 to i8
  store i8 %5693, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5695 = select i1 %5692, i64 %5676, i64 %5678
  store i64 %5695, i64* %5694, align 8, !tbaa !2428
  %5696 = load i8, i8* %BRANCH_TAKEN
  %5697 = icmp eq i8 %5696, 1
  br i1 %5697, label %block_400b4b, label %block_400ad4

block_4008b1:                                     ; preds = %block_4008aa, %block_4008fb
  %MEMORY.33 = phi %struct.Memory* [ %MEMORY.20, %block_4008aa ], [ %MEMORY.29, %block_4008fb ]
  %5698 = load i64, i64* %RBP
  %5699 = sub i64 %5698, 8
  %5700 = load i64, i64* %PC
  %5701 = add i64 %5700, 4
  store i64 %5701, i64* %PC
  %5702 = inttoptr i64 %5699 to i32*
  %5703 = load i32, i32* %5702
  %5704 = sub i32 %5703, 5
  %5705 = icmp ult i32 %5703, 5
  %5706 = zext i1 %5705 to i8
  %5707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5706, i8* %5707, align 1, !tbaa !2433
  %5708 = and i32 %5704, 255
  %5709 = call i32 @llvm.ctpop.i32(i32 %5708) #16
  %5710 = trunc i32 %5709 to i8
  %5711 = and i8 %5710, 1
  %5712 = xor i8 %5711, 1
  %5713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5712, i8* %5713, align 1, !tbaa !2447
  %5714 = xor i32 %5703, 5
  %5715 = xor i32 %5714, %5704
  %5716 = lshr i32 %5715, 4
  %5717 = trunc i32 %5716 to i8
  %5718 = and i8 %5717, 1
  %5719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5718, i8* %5719, align 1, !tbaa !2448
  %5720 = icmp eq i32 %5704, 0
  %5721 = zext i1 %5720 to i8
  %5722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5721, i8* %5722, align 1, !tbaa !2449
  %5723 = lshr i32 %5704, 31
  %5724 = trunc i32 %5723 to i8
  %5725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5724, i8* %5725, align 1, !tbaa !2450
  %5726 = lshr i32 %5703, 31
  %5727 = xor i32 %5723, %5726
  %5728 = add nuw nsw i32 %5727, %5726
  %5729 = icmp eq i32 %5728, 2
  %5730 = zext i1 %5729 to i8
  %5731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5730, i8* %5731, align 1, !tbaa !2451
  %5732 = load i64, i64* %PC
  %5733 = add i64 %5732, 89
  %5734 = load i64, i64* %PC
  %5735 = add i64 %5734, 6
  %5736 = load i64, i64* %PC
  %5737 = add i64 %5736, 6
  store i64 %5737, i64* %PC
  %5738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5739 = load i8, i8* %5738, align 1, !tbaa !2449
  %5740 = icmp eq i8 %5739, 0
  %5741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5742 = load i8, i8* %5741, align 1, !tbaa !2450
  %5743 = icmp ne i8 %5742, 0
  %5744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5745 = load i8, i8* %5744, align 1, !tbaa !2451
  %5746 = icmp ne i8 %5745, 0
  %5747 = xor i1 %5743, %5746
  %5748 = xor i1 %5747, true
  %5749 = and i1 %5740, %5748
  %5750 = zext i1 %5749 to i8
  store i8 %5750, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5752 = select i1 %5749, i64 %5733, i64 %5735
  store i64 %5752, i64* %5751, align 8, !tbaa !2428
  %5753 = load i8, i8* %BRANCH_TAKEN
  %5754 = icmp eq i8 %5753, 1
  br i1 %5754, label %block_40090e, label %block_4008bb

block_401062:                                     ; preds = %block_401058
  %5755 = load i64, i64* %RBP
  %5756 = sub i64 %5755, 8
  %5757 = load i64, i64* %PC
  %5758 = add i64 %5757, 7
  store i64 %5758, i64* %PC
  %5759 = inttoptr i64 %5756 to i32*
  store i32 0, i32* %5759
  br label %block_401069

block_400f2d:                                     ; preds = %block_400f26, %block_400f77
  %MEMORY.34 = phi %struct.Memory* [ %MEMORY.9, %block_400f26 ], [ %MEMORY.8, %block_400f77 ]
  %5760 = load i64, i64* %RBP
  %5761 = sub i64 %5760, 8
  %5762 = load i64, i64* %PC
  %5763 = add i64 %5762, 4
  store i64 %5763, i64* %PC
  %5764 = inttoptr i64 %5761 to i32*
  %5765 = load i32, i32* %5764
  %5766 = sub i32 %5765, 1
  %5767 = icmp ult i32 %5765, 1
  %5768 = zext i1 %5767 to i8
  %5769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5768, i8* %5769, align 1, !tbaa !2433
  %5770 = and i32 %5766, 255
  %5771 = call i32 @llvm.ctpop.i32(i32 %5770) #16
  %5772 = trunc i32 %5771 to i8
  %5773 = and i8 %5772, 1
  %5774 = xor i8 %5773, 1
  %5775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5774, i8* %5775, align 1, !tbaa !2447
  %5776 = xor i32 %5765, 1
  %5777 = xor i32 %5776, %5766
  %5778 = lshr i32 %5777, 4
  %5779 = trunc i32 %5778 to i8
  %5780 = and i8 %5779, 1
  %5781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5780, i8* %5781, align 1, !tbaa !2448
  %5782 = icmp eq i32 %5766, 0
  %5783 = zext i1 %5782 to i8
  %5784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5783, i8* %5784, align 1, !tbaa !2449
  %5785 = lshr i32 %5766, 31
  %5786 = trunc i32 %5785 to i8
  %5787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5786, i8* %5787, align 1, !tbaa !2450
  %5788 = lshr i32 %5765, 31
  %5789 = xor i32 %5785, %5788
  %5790 = add nuw nsw i32 %5789, %5788
  %5791 = icmp eq i32 %5790, 2
  %5792 = zext i1 %5791 to i8
  %5793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5792, i8* %5793, align 1, !tbaa !2451
  %5794 = load i64, i64* %PC
  %5795 = add i64 %5794, 89
  %5796 = load i64, i64* %PC
  %5797 = add i64 %5796, 6
  %5798 = load i64, i64* %PC
  %5799 = add i64 %5798, 6
  store i64 %5799, i64* %PC
  %5800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5801 = load i8, i8* %5800, align 1, !tbaa !2449
  %5802 = icmp eq i8 %5801, 0
  %5803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5804 = load i8, i8* %5803, align 1, !tbaa !2450
  %5805 = icmp ne i8 %5804, 0
  %5806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5807 = load i8, i8* %5806, align 1, !tbaa !2451
  %5808 = icmp ne i8 %5807, 0
  %5809 = xor i1 %5805, %5808
  %5810 = xor i1 %5809, true
  %5811 = and i1 %5802, %5810
  %5812 = zext i1 %5811 to i8
  store i8 %5812, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5814 = select i1 %5811, i64 %5795, i64 %5797
  store i64 %5814, i64* %5813, align 8, !tbaa !2428
  %5815 = load i8, i8* %BRANCH_TAKEN
  %5816 = icmp eq i8 %5815, 1
  br i1 %5816, label %block_400f8a, label %block_400f37

block_400c61:                                     ; preds = %block_400c28
  %5817 = load i64, i64* %PC
  %5818 = add i64 %5817, 5
  %5819 = load i64, i64* %PC
  %5820 = add i64 %5819, 5
  store i64 %5820, i64* %PC
  %5821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5818, i64* %5821, align 8, !tbaa !2428
  %5822 = load i64, i64* %RBP
  %5823 = sub i64 %5822, 8
  %5824 = load i64, i64* %PC
  %5825 = add i64 %5824, 3
  store i64 %5825, i64* %PC
  %5826 = inttoptr i64 %5823 to i32*
  %5827 = load i32, i32* %5826
  %5828 = zext i32 %5827 to i64
  store i64 %5828, i64* %RAX, align 8, !tbaa !2428
  %5829 = load i64, i64* %RAX
  %5830 = load i64, i64* %PC
  %5831 = add i64 %5830, 3
  store i64 %5831, i64* %PC
  %5832 = trunc i64 %5829 to i32
  %5833 = add i32 1, %5832
  %5834 = zext i32 %5833 to i64
  store i64 %5834, i64* %RAX, align 8, !tbaa !2428
  %5835 = icmp ult i32 %5833, %5832
  %5836 = icmp ult i32 %5833, 1
  %5837 = or i1 %5835, %5836
  %5838 = zext i1 %5837 to i8
  %5839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5838, i8* %5839, align 1, !tbaa !2433
  %5840 = and i32 %5833, 255
  %5841 = call i32 @llvm.ctpop.i32(i32 %5840) #16
  %5842 = trunc i32 %5841 to i8
  %5843 = and i8 %5842, 1
  %5844 = xor i8 %5843, 1
  %5845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5844, i8* %5845, align 1, !tbaa !2447
  %5846 = xor i64 1, %5829
  %5847 = trunc i64 %5846 to i32
  %5848 = xor i32 %5847, %5833
  %5849 = lshr i32 %5848, 4
  %5850 = trunc i32 %5849 to i8
  %5851 = and i8 %5850, 1
  %5852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5851, i8* %5852, align 1, !tbaa !2448
  %5853 = icmp eq i32 %5833, 0
  %5854 = zext i1 %5853 to i8
  %5855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5854, i8* %5855, align 1, !tbaa !2449
  %5856 = lshr i32 %5833, 31
  %5857 = trunc i32 %5856 to i8
  %5858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5857, i8* %5858, align 1, !tbaa !2450
  %5859 = lshr i32 %5832, 31
  %5860 = xor i32 %5856, %5859
  %5861 = add nuw nsw i32 %5860, %5856
  %5862 = icmp eq i32 %5861, 2
  %5863 = zext i1 %5862 to i8
  %5864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5863, i8* %5864, align 1, !tbaa !2451
  %5865 = load i64, i64* %RBP
  %5866 = sub i64 %5865, 8
  %5867 = load i32, i32* %EAX
  %5868 = zext i32 %5867 to i64
  %5869 = load i64, i64* %PC
  %5870 = add i64 %5869, 3
  store i64 %5870, i64* %PC
  %5871 = inttoptr i64 %5866 to i32*
  store i32 %5867, i32* %5871
  %5872 = load i64, i64* %PC
  %5873 = sub i64 %5872, 88
  %5874 = load i64, i64* %PC
  %5875 = add i64 %5874, 5
  store i64 %5875, i64* %PC
  %5876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5873, i64* %5876, align 8, !tbaa !2428
  br label %block_400c17

block_401177:                                     ; preds = %block_4010f6
  %5877 = load i64, i64* %RDI
  %5878 = load i32, i32* %EDI
  %5879 = zext i32 %5878 to i64
  %5880 = load i64, i64* %PC
  %5881 = add i64 %5880, 2
  store i64 %5881, i64* %PC
  %5882 = xor i64 %5879, %5877
  %5883 = trunc i64 %5882 to i32
  %5884 = and i64 %5882, 4294967295
  store i64 %5884, i64* %RDI, align 8, !tbaa !2428
  %5885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5885, align 1, !tbaa !2433
  %5886 = and i32 %5883, 255
  %5887 = call i32 @llvm.ctpop.i32(i32 %5886) #16
  %5888 = trunc i32 %5887 to i8
  %5889 = and i8 %5888, 1
  %5890 = xor i8 %5889, 1
  %5891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5890, i8* %5891, align 1, !tbaa !2447
  %5892 = icmp eq i32 %5883, 0
  %5893 = zext i1 %5892 to i8
  %5894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5893, i8* %5894, align 1, !tbaa !2449
  %5895 = lshr i32 %5883, 31
  %5896 = trunc i32 %5895 to i8
  %5897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5896, i8* %5897, align 1, !tbaa !2450
  %5898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5898, align 1, !tbaa !2451
  %5899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5899, align 1, !tbaa !2448
  %5900 = load i64, i64* %PC
  %5901 = add i64 %5900, 11
  store i64 %5901, i64* %PC
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 48) to i32*)
  %5902 = load i64, i64* %PC
  %5903 = add i64 %5902, 11
  store i64 %5903, i64* %PC
  store i32 73, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 48) to i32*)
  %5904 = load i64, i64* %PC
  %5905 = add i64 %5904, 11
  store i64 %5905, i64* %PC
  store i32 13, i32* bitcast (%piececount_type* @piececount to i32*)
  %5906 = load i64, i64* %PC
  %5907 = add i64 %5906, 11
  store i64 %5907, i64* %PC
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%piececount_type* @piececount to i64), i64 4) to i32*)
  %5908 = load i64, i64* %PC
  %5909 = add i64 %5908, 11
  store i64 %5909, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%piececount_type* @piececount to i64), i64 8) to i32*)
  %5910 = load i64, i64* %PC
  %5911 = add i64 %5910, 11
  store i64 %5911, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%piececount_type* @piececount to i64), i64 12) to i32*)
  %5912 = load i64, i64* %RBP
  %5913 = sub i64 %5912, 16
  %5914 = load i64, i64* %PC
  %5915 = add i64 %5914, 7
  store i64 %5915, i64* %PC
  %5916 = inttoptr i64 %5913 to i32*
  store i32 73, i32* %5916
  %5917 = load i64, i64* %PC
  %5918 = add i64 %5917, 11
  store i64 %5918, i64* %PC
  store i32 0, i32* bitcast (%kount_type* @kount to i32*)
  %5919 = load i64, i64* %RBP
  %5920 = sub i64 %5919, 16
  %5921 = load i64, i64* %PC
  %5922 = add i64 %5921, 3
  store i64 %5922, i64* %PC
  %5923 = inttoptr i64 %5920 to i32*
  %5924 = load i32, i32* %5923
  %5925 = zext i32 %5924 to i64
  store i64 %5925, i64* %RSI, align 8, !tbaa !2428
  %5926 = load i64, i64* %PC
  %5927 = sub i64 %5926, 3168
  %5928 = load i64, i64* %PC
  %5929 = add i64 %5928, 5
  %5930 = load i64, i64* %PC
  %5931 = add i64 %5930, 5
  store i64 %5931, i64* %PC
  %5932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5933 = load i64, i64* %5932, align 8, !tbaa !2428
  %5934 = add i64 %5933, -8
  %5935 = inttoptr i64 %5934 to i64*
  store i64 %5929, i64* %5935
  store i64 %5934, i64* %5932, align 8, !tbaa !2428
  %5936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5927, i64* %5936, align 8, !tbaa !2428
  %5937 = load i64, i64* %PC
  %5938 = call %struct.Memory* @sub_400570_Fit(%struct.State* %0, i64 %5937, %struct.Memory* %MEMORY.0)
  %5939 = load i32, i32* %EAX
  %5940 = zext i32 %5939 to i64
  %5941 = load i64, i64* %PC
  %5942 = add i64 %5941, 3
  store i64 %5942, i64* %PC
  %5943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5943, align 1, !tbaa !2433
  %5944 = and i32 %5939, 255
  %5945 = call i32 @llvm.ctpop.i32(i32 %5944) #16
  %5946 = trunc i32 %5945 to i8
  %5947 = and i8 %5946, 1
  %5948 = xor i8 %5947, 1
  %5949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5948, i8* %5949, align 1, !tbaa !2447
  %5950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5950, align 1, !tbaa !2448
  %5951 = icmp eq i32 %5939, 0
  %5952 = zext i1 %5951 to i8
  %5953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5952, i8* %5953, align 1, !tbaa !2449
  %5954 = lshr i32 %5939, 31
  %5955 = trunc i32 %5954 to i8
  %5956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5955, i8* %5956, align 1, !tbaa !2450
  %5957 = lshr i32 %5939, 31
  %5958 = xor i32 %5954, %5957
  %5959 = add nuw nsw i32 %5958, %5957
  %5960 = icmp eq i32 %5959, 2
  %5961 = zext i1 %5960 to i8
  %5962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5961, i8* %5962, align 1, !tbaa !2451
  %5963 = load i64, i64* %PC
  %5964 = add i64 %5963, 28
  %5965 = load i64, i64* %PC
  %5966 = add i64 %5965, 6
  %5967 = load i64, i64* %PC
  %5968 = add i64 %5967, 6
  store i64 %5968, i64* %PC
  %5969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5970 = load i8, i8* %5969, align 1, !tbaa !2449
  store i8 %5970, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5972 = icmp ne i8 %5970, 0
  %5973 = select i1 %5972, i64 %5964, i64 %5966
  store i64 %5973, i64* %5971, align 8, !tbaa !2428
  %5974 = load i8, i8* %BRANCH_TAKEN
  %5975 = icmp eq i8 %5974, 1
  br i1 %5975, label %block_4011f4, label %block_4011de

block_4009ba:                                     ; preds = %block_4009b0
  %5976 = load i64, i64* %RBP
  %5977 = sub i64 %5976, 4
  %5978 = load i64, i64* %PC
  %5979 = add i64 %5978, 3
  store i64 %5979, i64* %PC
  %5980 = inttoptr i64 %5977 to i32*
  %5981 = load i32, i32* %5980
  %5982 = zext i32 %5981 to i64
  store i64 %5982, i64* %RAX, align 8, !tbaa !2428
  %5983 = load i64, i64* %RBP
  %5984 = sub i64 %5983, 8
  %5985 = load i64, i64* %PC
  %5986 = add i64 %5985, 3
  store i64 %5986, i64* %PC
  %5987 = inttoptr i64 %5984 to i32*
  %5988 = load i32, i32* %5987
  %5989 = zext i32 %5988 to i64
  store i64 %5989, i64* %RCX, align 8, !tbaa !2428
  %5990 = load i64, i64* %RBP
  %5991 = sub i64 %5990, 12
  %5992 = load i64, i64* %PC
  %5993 = add i64 %5992, 3
  store i64 %5993, i64* %PC
  %5994 = inttoptr i64 %5991 to i32*
  %5995 = load i32, i32* %5994
  %5996 = zext i32 %5995 to i64
  store i64 %5996, i64* %RDX, align 8, !tbaa !2428
  %5997 = load i64, i64* %RDX
  %5998 = load i64, i64* %PC
  %5999 = add i64 %5998, 3
  store i64 %5999, i64* %PC
  %6000 = and i64 %5997, 4294967295
  %6001 = shl i64 %6000, 2
  %6002 = trunc i64 %6001 to i32
  %6003 = icmp slt i32 %6002, 0
  %6004 = shl i32 %6002, 1
  %6005 = zext i32 %6004 to i64
  store i64 %6005, i64* %RDX, align 8, !tbaa !2428
  %6006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6007 = zext i1 %6003 to i8
  store i8 %6007, i8* %6006, align 1, !tbaa !2432
  %6008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6009 = and i32 %6004, 254
  %6010 = call i32 @llvm.ctpop.i32(i32 %6009) #16
  %6011 = trunc i32 %6010 to i8
  %6012 = and i8 %6011, 1
  %6013 = xor i8 %6012, 1
  store i8 %6013, i8* %6008, align 1, !tbaa !2432
  %6014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6014, align 1, !tbaa !2432
  %6015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6016 = icmp eq i32 %6004, 0
  %6017 = zext i1 %6016 to i8
  store i8 %6017, i8* %6015, align 1, !tbaa !2432
  %6018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6019 = lshr i32 %6004, 31
  %6020 = trunc i32 %6019 to i8
  store i8 %6020, i8* %6018, align 1, !tbaa !2432
  %6021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6021, align 1, !tbaa !2432
  %6022 = load i64, i64* %RCX
  %6023 = load i32, i32* %EDX
  %6024 = zext i32 %6023 to i64
  %6025 = load i64, i64* %PC
  %6026 = add i64 %6025, 2
  store i64 %6026, i64* %PC
  %6027 = trunc i64 %6022 to i32
  %6028 = add i32 %6023, %6027
  %6029 = zext i32 %6028 to i64
  store i64 %6029, i64* %RCX, align 8, !tbaa !2428
  %6030 = icmp ult i32 %6028, %6027
  %6031 = icmp ult i32 %6028, %6023
  %6032 = or i1 %6030, %6031
  %6033 = zext i1 %6032 to i8
  %6034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6033, i8* %6034, align 1, !tbaa !2433
  %6035 = and i32 %6028, 255
  %6036 = call i32 @llvm.ctpop.i32(i32 %6035) #16
  %6037 = trunc i32 %6036 to i8
  %6038 = and i8 %6037, 1
  %6039 = xor i8 %6038, 1
  %6040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6039, i8* %6040, align 1, !tbaa !2447
  %6041 = xor i64 %6024, %6022
  %6042 = trunc i64 %6041 to i32
  %6043 = xor i32 %6042, %6028
  %6044 = lshr i32 %6043, 4
  %6045 = trunc i32 %6044 to i8
  %6046 = and i8 %6045, 1
  %6047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6046, i8* %6047, align 1, !tbaa !2448
  %6048 = icmp eq i32 %6028, 0
  %6049 = zext i1 %6048 to i8
  %6050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6049, i8* %6050, align 1, !tbaa !2449
  %6051 = lshr i32 %6028, 31
  %6052 = trunc i32 %6051 to i8
  %6053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6052, i8* %6053, align 1, !tbaa !2450
  %6054 = lshr i32 %6027, 31
  %6055 = lshr i32 %6023, 31
  %6056 = xor i32 %6051, %6054
  %6057 = xor i32 %6051, %6055
  %6058 = add nuw nsw i32 %6056, %6057
  %6059 = icmp eq i32 %6058, 2
  %6060 = zext i1 %6059 to i8
  %6061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6060, i8* %6061, align 1, !tbaa !2451
  %6062 = load i64, i64* %RCX
  %6063 = load i64, i64* %PC
  %6064 = add i64 %6063, 3
  store i64 %6064, i64* %PC
  %6065 = and i64 %6062, 4294967295
  %6066 = shl i64 %6065, 2
  %6067 = trunc i64 %6066 to i32
  %6068 = icmp slt i32 %6067, 0
  %6069 = shl i32 %6067, 1
  %6070 = zext i32 %6069 to i64
  store i64 %6070, i64* %RCX, align 8, !tbaa !2428
  %6071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6072 = zext i1 %6068 to i8
  store i8 %6072, i8* %6071, align 1, !tbaa !2432
  %6073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6074 = and i32 %6069, 254
  %6075 = call i32 @llvm.ctpop.i32(i32 %6074) #16
  %6076 = trunc i32 %6075 to i8
  %6077 = and i8 %6076, 1
  %6078 = xor i8 %6077, 1
  store i8 %6078, i8* %6073, align 1, !tbaa !2432
  %6079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6079, align 1, !tbaa !2432
  %6080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6081 = icmp eq i32 %6069, 0
  %6082 = zext i1 %6081 to i8
  store i8 %6082, i8* %6080, align 1, !tbaa !2432
  %6083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6084 = lshr i32 %6069, 31
  %6085 = trunc i32 %6084 to i8
  store i8 %6085, i8* %6083, align 1, !tbaa !2432
  %6086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6086, align 1, !tbaa !2432
  %6087 = load i64, i64* %RAX
  %6088 = load i32, i32* %ECX
  %6089 = zext i32 %6088 to i64
  %6090 = load i64, i64* %PC
  %6091 = add i64 %6090, 2
  store i64 %6091, i64* %PC
  %6092 = trunc i64 %6087 to i32
  %6093 = add i32 %6088, %6092
  %6094 = zext i32 %6093 to i64
  store i64 %6094, i64* %RAX, align 8, !tbaa !2428
  %6095 = icmp ult i32 %6093, %6092
  %6096 = icmp ult i32 %6093, %6088
  %6097 = or i1 %6095, %6096
  %6098 = zext i1 %6097 to i8
  %6099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6098, i8* %6099, align 1, !tbaa !2433
  %6100 = and i32 %6093, 255
  %6101 = call i32 @llvm.ctpop.i32(i32 %6100) #16
  %6102 = trunc i32 %6101 to i8
  %6103 = and i8 %6102, 1
  %6104 = xor i8 %6103, 1
  %6105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6104, i8* %6105, align 1, !tbaa !2447
  %6106 = xor i64 %6089, %6087
  %6107 = trunc i64 %6106 to i32
  %6108 = xor i32 %6107, %6093
  %6109 = lshr i32 %6108, 4
  %6110 = trunc i32 %6109 to i8
  %6111 = and i8 %6110, 1
  %6112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6111, i8* %6112, align 1, !tbaa !2448
  %6113 = icmp eq i32 %6093, 0
  %6114 = zext i1 %6113 to i8
  %6115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6114, i8* %6115, align 1, !tbaa !2449
  %6116 = lshr i32 %6093, 31
  %6117 = trunc i32 %6116 to i8
  %6118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6117, i8* %6118, align 1, !tbaa !2450
  %6119 = lshr i32 %6092, 31
  %6120 = lshr i32 %6088, 31
  %6121 = xor i32 %6116, %6119
  %6122 = xor i32 %6116, %6120
  %6123 = add nuw nsw i32 %6121, %6122
  %6124 = icmp eq i32 %6123, 2
  %6125 = zext i1 %6124 to i8
  %6126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6125, i8* %6126, align 1, !tbaa !2451
  %6127 = load i32, i32* %EAX
  %6128 = zext i32 %6127 to i64
  %6129 = load i64, i64* %PC
  %6130 = add i64 %6129, 3
  store i64 %6130, i64* %PC
  %6131 = shl i64 %6128, 32
  %6132 = ashr exact i64 %6131, 32
  store i64 %6132, i64* %RSI, align 8, !tbaa !2428
  %6133 = load i64, i64* %RSI
  %6134 = mul i64 %6133, 4
  %6135 = add i64 %6134, ptrtoint (%p_type* @p to i64)
  %6136 = load i64, i64* %PC
  %6137 = add i64 %6136, 11
  store i64 %6137, i64* %PC
  %6138 = inttoptr i64 %6135 to i32*
  store i32 1, i32* %6138
  %6139 = load i64, i64* %RBP
  %6140 = sub i64 %6139, 12
  %6141 = load i64, i64* %PC
  %6142 = add i64 %6141, 3
  store i64 %6142, i64* %PC
  %6143 = inttoptr i64 %6140 to i32*
  %6144 = load i32, i32* %6143
  %6145 = zext i32 %6144 to i64
  store i64 %6145, i64* %RAX, align 8, !tbaa !2428
  %6146 = load i64, i64* %RAX
  %6147 = load i64, i64* %PC
  %6148 = add i64 %6147, 3
  store i64 %6148, i64* %PC
  %6149 = trunc i64 %6146 to i32
  %6150 = add i32 1, %6149
  %6151 = zext i32 %6150 to i64
  store i64 %6151, i64* %RAX, align 8, !tbaa !2428
  %6152 = icmp ult i32 %6150, %6149
  %6153 = icmp ult i32 %6150, 1
  %6154 = or i1 %6152, %6153
  %6155 = zext i1 %6154 to i8
  %6156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6155, i8* %6156, align 1, !tbaa !2433
  %6157 = and i32 %6150, 255
  %6158 = call i32 @llvm.ctpop.i32(i32 %6157) #16
  %6159 = trunc i32 %6158 to i8
  %6160 = and i8 %6159, 1
  %6161 = xor i8 %6160, 1
  %6162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6161, i8* %6162, align 1, !tbaa !2447
  %6163 = xor i64 1, %6146
  %6164 = trunc i64 %6163 to i32
  %6165 = xor i32 %6164, %6150
  %6166 = lshr i32 %6165, 4
  %6167 = trunc i32 %6166 to i8
  %6168 = and i8 %6167, 1
  %6169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6168, i8* %6169, align 1, !tbaa !2448
  %6170 = icmp eq i32 %6150, 0
  %6171 = zext i1 %6170 to i8
  %6172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6171, i8* %6172, align 1, !tbaa !2449
  %6173 = lshr i32 %6150, 31
  %6174 = trunc i32 %6173 to i8
  %6175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6174, i8* %6175, align 1, !tbaa !2450
  %6176 = lshr i32 %6149, 31
  %6177 = xor i32 %6173, %6176
  %6178 = add nuw nsw i32 %6177, %6173
  %6179 = icmp eq i32 %6178, 2
  %6180 = zext i1 %6179 to i8
  %6181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6180, i8* %6181, align 1, !tbaa !2451
  %6182 = load i64, i64* %RBP
  %6183 = sub i64 %6182, 12
  %6184 = load i32, i32* %EAX
  %6185 = zext i32 %6184 to i64
  %6186 = load i64, i64* %PC
  %6187 = add i64 %6186, 3
  store i64 %6187, i64* %PC
  %6188 = inttoptr i64 %6183 to i32*
  store i32 %6184, i32* %6188
  %6189 = load i64, i64* %PC
  %6190 = sub i64 %6189, 52
  %6191 = load i64, i64* %PC
  %6192 = add i64 %6191, 5
  store i64 %6192, i64* %PC
  %6193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6190, i64* %6193, align 8, !tbaa !2428
  br label %block_4009b0

block_400b4b:                                     ; preds = %block_400aca
  %6194 = load i64, i64* %PC
  %6195 = add i64 %6194, 11
  store i64 %6195, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 8) to i32*)
  %6196 = load i64, i64* %PC
  %6197 = add i64 %6196, 11
  store i64 %6197, i64* %PC
  store i32 88, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 8) to i32*)
  %6198 = load i64, i64* %RBP
  %6199 = sub i64 %6198, 4
  %6200 = load i64, i64* %PC
  %6201 = add i64 %6200, 7
  store i64 %6201, i64* %PC
  %6202 = inttoptr i64 %6199 to i32*
  store i32 0, i32* %6202
  br label %block_400b68

block_400932:                                     ; preds = %block_400928
  %6203 = sub i64 %1885, 16
  %6204 = load i64, i64* %PC
  %6205 = add i64 %6204, 7
  store i64 %6205, i64* %PC
  %6206 = inttoptr i64 %6203 to i32*
  store i32 0, i32* %6206
  br label %block_400939

block_400d64:                                     ; preds = %block_400d5d, %block_400d6e
  %MEMORY.35 = phi %struct.Memory* [ %MEMORY.24, %block_400d5d ], [ %MEMORY.35, %block_400d6e ]
  %6207 = load i64, i64* %RBP
  %6208 = sub i64 %6207, 12
  %6209 = load i64, i64* %PC
  %6210 = add i64 %6209, 4
  store i64 %6210, i64* %PC
  %6211 = inttoptr i64 %6208 to i32*
  %6212 = load i32, i32* %6211
  %6213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6213, align 1, !tbaa !2433
  %6214 = and i32 %6212, 255
  %6215 = call i32 @llvm.ctpop.i32(i32 %6214) #16
  %6216 = trunc i32 %6215 to i8
  %6217 = and i8 %6216, 1
  %6218 = xor i8 %6217, 1
  %6219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6218, i8* %6219, align 1, !tbaa !2447
  %6220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6220, align 1, !tbaa !2448
  %6221 = icmp eq i32 %6212, 0
  %6222 = zext i1 %6221 to i8
  %6223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6222, i8* %6223, align 1, !tbaa !2449
  %6224 = lshr i32 %6212, 31
  %6225 = trunc i32 %6224 to i8
  %6226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6225, i8* %6226, align 1, !tbaa !2450
  %6227 = lshr i32 %6212, 31
  %6228 = xor i32 %6224, %6227
  %6229 = add nuw nsw i32 %6228, %6227
  %6230 = icmp eq i32 %6229, 2
  %6231 = zext i1 %6230 to i8
  %6232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6231, i8* %6232, align 1, !tbaa !2451
  %6233 = load i64, i64* %PC
  %6234 = add i64 %6233, 53
  %6235 = load i64, i64* %PC
  %6236 = add i64 %6235, 6
  %6237 = load i64, i64* %PC
  %6238 = add i64 %6237, 6
  store i64 %6238, i64* %PC
  %6239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6240 = load i8, i8* %6239, align 1, !tbaa !2449
  %6241 = icmp eq i8 %6240, 0
  %6242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6243 = load i8, i8* %6242, align 1, !tbaa !2450
  %6244 = icmp ne i8 %6243, 0
  %6245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6246 = load i8, i8* %6245, align 1, !tbaa !2451
  %6247 = icmp ne i8 %6246, 0
  %6248 = xor i1 %6244, %6247
  %6249 = xor i1 %6248, true
  %6250 = and i1 %6241, %6249
  %6251 = zext i1 %6250 to i8
  store i8 %6251, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %6252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6253 = select i1 %6250, i64 %6234, i64 %6236
  store i64 %6253, i64* %6252, align 8, !tbaa !2428
  %6254 = load i8, i8* %BRANCH_TAKEN
  %6255 = icmp eq i8 %6254, 1
  br i1 %6255, label %block_400d9d, label %block_400d6e

block_400a58:                                     ; preds = %block_400a4e
  %6256 = load i64, i64* %RBP
  %6257 = sub i64 %6256, 4
  %6258 = load i64, i64* %PC
  %6259 = add i64 %6258, 3
  store i64 %6259, i64* %PC
  %6260 = inttoptr i64 %6257 to i32*
  %6261 = load i32, i32* %6260
  %6262 = zext i32 %6261 to i64
  store i64 %6262, i64* %RAX, align 8, !tbaa !2428
  %6263 = load i64, i64* %RBP
  %6264 = sub i64 %6263, 8
  %6265 = load i64, i64* %PC
  %6266 = add i64 %6265, 3
  store i64 %6266, i64* %PC
  %6267 = inttoptr i64 %6264 to i32*
  %6268 = load i32, i32* %6267
  %6269 = zext i32 %6268 to i64
  store i64 %6269, i64* %RCX, align 8, !tbaa !2428
  %6270 = load i64, i64* %RBP
  %6271 = sub i64 %6270, 12
  %6272 = load i64, i64* %PC
  %6273 = add i64 %6272, 3
  store i64 %6273, i64* %PC
  %6274 = inttoptr i64 %6271 to i32*
  %6275 = load i32, i32* %6274
  %6276 = zext i32 %6275 to i64
  store i64 %6276, i64* %RDX, align 8, !tbaa !2428
  %6277 = load i64, i64* %RDX
  %6278 = load i64, i64* %PC
  %6279 = add i64 %6278, 3
  store i64 %6279, i64* %PC
  %6280 = and i64 %6277, 4294967295
  %6281 = shl i64 %6280, 2
  %6282 = trunc i64 %6281 to i32
  %6283 = icmp slt i32 %6282, 0
  %6284 = shl i32 %6282, 1
  %6285 = zext i32 %6284 to i64
  store i64 %6285, i64* %RDX, align 8, !tbaa !2428
  %6286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6287 = zext i1 %6283 to i8
  store i8 %6287, i8* %6286, align 1, !tbaa !2432
  %6288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6289 = and i32 %6284, 254
  %6290 = call i32 @llvm.ctpop.i32(i32 %6289) #16
  %6291 = trunc i32 %6290 to i8
  %6292 = and i8 %6291, 1
  %6293 = xor i8 %6292, 1
  store i8 %6293, i8* %6288, align 1, !tbaa !2432
  %6294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6294, align 1, !tbaa !2432
  %6295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6296 = icmp eq i32 %6284, 0
  %6297 = zext i1 %6296 to i8
  store i8 %6297, i8* %6295, align 1, !tbaa !2432
  %6298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6299 = lshr i32 %6284, 31
  %6300 = trunc i32 %6299 to i8
  store i8 %6300, i8* %6298, align 1, !tbaa !2432
  %6301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6301, align 1, !tbaa !2432
  %6302 = load i64, i64* %RCX
  %6303 = load i32, i32* %EDX
  %6304 = zext i32 %6303 to i64
  %6305 = load i64, i64* %PC
  %6306 = add i64 %6305, 2
  store i64 %6306, i64* %PC
  %6307 = trunc i64 %6302 to i32
  %6308 = add i32 %6303, %6307
  %6309 = zext i32 %6308 to i64
  store i64 %6309, i64* %RCX, align 8, !tbaa !2428
  %6310 = icmp ult i32 %6308, %6307
  %6311 = icmp ult i32 %6308, %6303
  %6312 = or i1 %6310, %6311
  %6313 = zext i1 %6312 to i8
  %6314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6313, i8* %6314, align 1, !tbaa !2433
  %6315 = and i32 %6308, 255
  %6316 = call i32 @llvm.ctpop.i32(i32 %6315) #16
  %6317 = trunc i32 %6316 to i8
  %6318 = and i8 %6317, 1
  %6319 = xor i8 %6318, 1
  %6320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6319, i8* %6320, align 1, !tbaa !2447
  %6321 = xor i64 %6304, %6302
  %6322 = trunc i64 %6321 to i32
  %6323 = xor i32 %6322, %6308
  %6324 = lshr i32 %6323, 4
  %6325 = trunc i32 %6324 to i8
  %6326 = and i8 %6325, 1
  %6327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6326, i8* %6327, align 1, !tbaa !2448
  %6328 = icmp eq i32 %6308, 0
  %6329 = zext i1 %6328 to i8
  %6330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6329, i8* %6330, align 1, !tbaa !2449
  %6331 = lshr i32 %6308, 31
  %6332 = trunc i32 %6331 to i8
  %6333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6332, i8* %6333, align 1, !tbaa !2450
  %6334 = lshr i32 %6307, 31
  %6335 = lshr i32 %6303, 31
  %6336 = xor i32 %6331, %6334
  %6337 = xor i32 %6331, %6335
  %6338 = add nuw nsw i32 %6336, %6337
  %6339 = icmp eq i32 %6338, 2
  %6340 = zext i1 %6339 to i8
  %6341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6340, i8* %6341, align 1, !tbaa !2451
  %6342 = load i64, i64* %RCX
  %6343 = load i64, i64* %PC
  %6344 = add i64 %6343, 3
  store i64 %6344, i64* %PC
  %6345 = and i64 %6342, 4294967295
  %6346 = shl i64 %6345, 2
  %6347 = trunc i64 %6346 to i32
  %6348 = icmp slt i32 %6347, 0
  %6349 = shl i32 %6347, 1
  %6350 = zext i32 %6349 to i64
  store i64 %6350, i64* %RCX, align 8, !tbaa !2428
  %6351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6352 = zext i1 %6348 to i8
  store i8 %6352, i8* %6351, align 1, !tbaa !2432
  %6353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6354 = and i32 %6349, 254
  %6355 = call i32 @llvm.ctpop.i32(i32 %6354) #16
  %6356 = trunc i32 %6355 to i8
  %6357 = and i8 %6356, 1
  %6358 = xor i8 %6357, 1
  store i8 %6358, i8* %6353, align 1, !tbaa !2432
  %6359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6359, align 1, !tbaa !2432
  %6360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6361 = icmp eq i32 %6349, 0
  %6362 = zext i1 %6361 to i8
  store i8 %6362, i8* %6360, align 1, !tbaa !2432
  %6363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6364 = lshr i32 %6349, 31
  %6365 = trunc i32 %6364 to i8
  store i8 %6365, i8* %6363, align 1, !tbaa !2432
  %6366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6366, align 1, !tbaa !2432
  %6367 = load i64, i64* %RAX
  %6368 = load i32, i32* %ECX
  %6369 = zext i32 %6368 to i64
  %6370 = load i64, i64* %PC
  %6371 = add i64 %6370, 2
  store i64 %6371, i64* %PC
  %6372 = trunc i64 %6367 to i32
  %6373 = add i32 %6368, %6372
  %6374 = zext i32 %6373 to i64
  store i64 %6374, i64* %RAX, align 8, !tbaa !2428
  %6375 = icmp ult i32 %6373, %6372
  %6376 = icmp ult i32 %6373, %6368
  %6377 = or i1 %6375, %6376
  %6378 = zext i1 %6377 to i8
  %6379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6378, i8* %6379, align 1, !tbaa !2433
  %6380 = and i32 %6373, 255
  %6381 = call i32 @llvm.ctpop.i32(i32 %6380) #16
  %6382 = trunc i32 %6381 to i8
  %6383 = and i8 %6382, 1
  %6384 = xor i8 %6383, 1
  %6385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6384, i8* %6385, align 1, !tbaa !2447
  %6386 = xor i64 %6369, %6367
  %6387 = trunc i64 %6386 to i32
  %6388 = xor i32 %6387, %6373
  %6389 = lshr i32 %6388, 4
  %6390 = trunc i32 %6389 to i8
  %6391 = and i8 %6390, 1
  %6392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6391, i8* %6392, align 1, !tbaa !2448
  %6393 = icmp eq i32 %6373, 0
  %6394 = zext i1 %6393 to i8
  %6395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6394, i8* %6395, align 1, !tbaa !2449
  %6396 = lshr i32 %6373, 31
  %6397 = trunc i32 %6396 to i8
  %6398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6397, i8* %6398, align 1, !tbaa !2450
  %6399 = lshr i32 %6372, 31
  %6400 = lshr i32 %6368, 31
  %6401 = xor i32 %6396, %6399
  %6402 = xor i32 %6396, %6400
  %6403 = add nuw nsw i32 %6401, %6402
  %6404 = icmp eq i32 %6403, 2
  %6405 = zext i1 %6404 to i8
  %6406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6405, i8* %6406, align 1, !tbaa !2451
  %6407 = load i32, i32* %EAX
  %6408 = zext i32 %6407 to i64
  %6409 = load i64, i64* %PC
  %6410 = add i64 %6409, 3
  store i64 %6410, i64* %PC
  %6411 = shl i64 %6408, 32
  %6412 = ashr exact i64 %6411, 32
  store i64 %6412, i64* %RSI, align 8, !tbaa !2428
  %6413 = load i64, i64* %RSI
  %6414 = mul i64 %6413, 4
  %6415 = add i64 %6414, add (i64 ptrtoint (%p_type* @p to i64), i64 2048)
  %6416 = load i64, i64* %PC
  %6417 = add i64 %6416, 11
  store i64 %6417, i64* %PC
  %6418 = inttoptr i64 %6415 to i32*
  store i32 1, i32* %6418
  %6419 = load i64, i64* %RBP
  %6420 = sub i64 %6419, 12
  %6421 = load i64, i64* %PC
  %6422 = add i64 %6421, 3
  store i64 %6422, i64* %PC
  %6423 = inttoptr i64 %6420 to i32*
  %6424 = load i32, i32* %6423
  %6425 = zext i32 %6424 to i64
  store i64 %6425, i64* %RAX, align 8, !tbaa !2428
  %6426 = load i64, i64* %RAX
  %6427 = load i64, i64* %PC
  %6428 = add i64 %6427, 3
  store i64 %6428, i64* %PC
  %6429 = trunc i64 %6426 to i32
  %6430 = add i32 1, %6429
  %6431 = zext i32 %6430 to i64
  store i64 %6431, i64* %RAX, align 8, !tbaa !2428
  %6432 = icmp ult i32 %6430, %6429
  %6433 = icmp ult i32 %6430, 1
  %6434 = or i1 %6432, %6433
  %6435 = zext i1 %6434 to i8
  %6436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6435, i8* %6436, align 1, !tbaa !2433
  %6437 = and i32 %6430, 255
  %6438 = call i32 @llvm.ctpop.i32(i32 %6437) #16
  %6439 = trunc i32 %6438 to i8
  %6440 = and i8 %6439, 1
  %6441 = xor i8 %6440, 1
  %6442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6441, i8* %6442, align 1, !tbaa !2447
  %6443 = xor i64 1, %6426
  %6444 = trunc i64 %6443 to i32
  %6445 = xor i32 %6444, %6430
  %6446 = lshr i32 %6445, 4
  %6447 = trunc i32 %6446 to i8
  %6448 = and i8 %6447, 1
  %6449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6448, i8* %6449, align 1, !tbaa !2448
  %6450 = icmp eq i32 %6430, 0
  %6451 = zext i1 %6450 to i8
  %6452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6451, i8* %6452, align 1, !tbaa !2449
  %6453 = lshr i32 %6430, 31
  %6454 = trunc i32 %6453 to i8
  %6455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6454, i8* %6455, align 1, !tbaa !2450
  %6456 = lshr i32 %6429, 31
  %6457 = xor i32 %6453, %6456
  %6458 = add nuw nsw i32 %6457, %6453
  %6459 = icmp eq i32 %6458, 2
  %6460 = zext i1 %6459 to i8
  %6461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6460, i8* %6461, align 1, !tbaa !2451
  %6462 = load i64, i64* %RBP
  %6463 = sub i64 %6462, 12
  %6464 = load i32, i32* %EAX
  %6465 = zext i32 %6464 to i64
  %6466 = load i64, i64* %PC
  %6467 = add i64 %6466, 3
  store i64 %6467, i64* %PC
  %6468 = inttoptr i64 %6463 to i32*
  store i32 %6464, i32* %6468
  %6469 = load i64, i64* %PC
  %6470 = sub i64 %6469, 52
  %6471 = load i64, i64* %PC
  %6472 = add i64 %6471, 5
  store i64 %6472, i64* %PC
  %6473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6470, i64* %6473, align 8, !tbaa !2428
  br label %block_400a4e

block_400ad4:                                     ; preds = %block_400aca
  %6474 = load i64, i64* %RBP
  %6475 = sub i64 %6474, 8
  %6476 = load i64, i64* %PC
  %6477 = add i64 %6476, 7
  store i64 %6477, i64* %PC
  %6478 = inttoptr i64 %6475 to i32*
  store i32 0, i32* %6478
  br label %block_400adb

block_4008bb:                                     ; preds = %block_4008b1
  %6479 = load i64, i64* %RBP
  %6480 = sub i64 %6479, 12
  %6481 = load i64, i64* %PC
  %6482 = add i64 %6481, 7
  store i64 %6482, i64* %PC
  %6483 = inttoptr i64 %6480 to i32*
  store i32 1, i32* %6483
  br label %block_4008c2

block_400fe6:                                     ; preds = %block_400fdc
  %6484 = load i64, i64* %RBP
  %6485 = sub i64 %6484, 4
  %6486 = load i64, i64* %PC
  %6487 = add i64 %6486, 3
  store i64 %6487, i64* %PC
  %6488 = inttoptr i64 %6485 to i32*
  %6489 = load i32, i32* %6488
  %6490 = zext i32 %6489 to i64
  store i64 %6490, i64* %RAX, align 8, !tbaa !2428
  %6491 = load i64, i64* %RBP
  %6492 = sub i64 %6491, 8
  %6493 = load i64, i64* %PC
  %6494 = add i64 %6493, 3
  store i64 %6494, i64* %PC
  %6495 = inttoptr i64 %6492 to i32*
  %6496 = load i32, i32* %6495
  %6497 = zext i32 %6496 to i64
  store i64 %6497, i64* %RCX, align 8, !tbaa !2428
  %6498 = load i64, i64* %RBP
  %6499 = sub i64 %6498, 12
  %6500 = load i64, i64* %PC
  %6501 = add i64 %6500, 3
  store i64 %6501, i64* %PC
  %6502 = inttoptr i64 %6499 to i32*
  %6503 = load i32, i32* %6502
  %6504 = zext i32 %6503 to i64
  store i64 %6504, i64* %RDX, align 8, !tbaa !2428
  %6505 = load i64, i64* %RDX
  %6506 = load i64, i64* %PC
  %6507 = add i64 %6506, 3
  store i64 %6507, i64* %PC
  %6508 = and i64 %6505, 4294967295
  %6509 = shl i64 %6508, 2
  %6510 = trunc i64 %6509 to i32
  %6511 = icmp slt i32 %6510, 0
  %6512 = shl i32 %6510, 1
  %6513 = zext i32 %6512 to i64
  store i64 %6513, i64* %RDX, align 8, !tbaa !2428
  %6514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6515 = zext i1 %6511 to i8
  store i8 %6515, i8* %6514, align 1, !tbaa !2432
  %6516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6517 = and i32 %6512, 254
  %6518 = call i32 @llvm.ctpop.i32(i32 %6517) #16
  %6519 = trunc i32 %6518 to i8
  %6520 = and i8 %6519, 1
  %6521 = xor i8 %6520, 1
  store i8 %6521, i8* %6516, align 1, !tbaa !2432
  %6522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6522, align 1, !tbaa !2432
  %6523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6524 = icmp eq i32 %6512, 0
  %6525 = zext i1 %6524 to i8
  store i8 %6525, i8* %6523, align 1, !tbaa !2432
  %6526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6527 = lshr i32 %6512, 31
  %6528 = trunc i32 %6527 to i8
  store i8 %6528, i8* %6526, align 1, !tbaa !2432
  %6529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6529, align 1, !tbaa !2432
  %6530 = load i64, i64* %RCX
  %6531 = load i32, i32* %EDX
  %6532 = zext i32 %6531 to i64
  %6533 = load i64, i64* %PC
  %6534 = add i64 %6533, 2
  store i64 %6534, i64* %PC
  %6535 = trunc i64 %6530 to i32
  %6536 = add i32 %6531, %6535
  %6537 = zext i32 %6536 to i64
  store i64 %6537, i64* %RCX, align 8, !tbaa !2428
  %6538 = icmp ult i32 %6536, %6535
  %6539 = icmp ult i32 %6536, %6531
  %6540 = or i1 %6538, %6539
  %6541 = zext i1 %6540 to i8
  %6542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6541, i8* %6542, align 1, !tbaa !2433
  %6543 = and i32 %6536, 255
  %6544 = call i32 @llvm.ctpop.i32(i32 %6543) #16
  %6545 = trunc i32 %6544 to i8
  %6546 = and i8 %6545, 1
  %6547 = xor i8 %6546, 1
  %6548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6547, i8* %6548, align 1, !tbaa !2447
  %6549 = xor i64 %6532, %6530
  %6550 = trunc i64 %6549 to i32
  %6551 = xor i32 %6550, %6536
  %6552 = lshr i32 %6551, 4
  %6553 = trunc i32 %6552 to i8
  %6554 = and i8 %6553, 1
  %6555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6554, i8* %6555, align 1, !tbaa !2448
  %6556 = icmp eq i32 %6536, 0
  %6557 = zext i1 %6556 to i8
  %6558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6557, i8* %6558, align 1, !tbaa !2449
  %6559 = lshr i32 %6536, 31
  %6560 = trunc i32 %6559 to i8
  %6561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6560, i8* %6561, align 1, !tbaa !2450
  %6562 = lshr i32 %6535, 31
  %6563 = lshr i32 %6531, 31
  %6564 = xor i32 %6559, %6562
  %6565 = xor i32 %6559, %6563
  %6566 = add nuw nsw i32 %6564, %6565
  %6567 = icmp eq i32 %6566, 2
  %6568 = zext i1 %6567 to i8
  %6569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6568, i8* %6569, align 1, !tbaa !2451
  %6570 = load i64, i64* %RCX
  %6571 = load i64, i64* %PC
  %6572 = add i64 %6571, 3
  store i64 %6572, i64* %PC
  %6573 = and i64 %6570, 4294967295
  %6574 = shl i64 %6573, 2
  %6575 = trunc i64 %6574 to i32
  %6576 = icmp slt i32 %6575, 0
  %6577 = shl i32 %6575, 1
  %6578 = zext i32 %6577 to i64
  store i64 %6578, i64* %RCX, align 8, !tbaa !2428
  %6579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6580 = zext i1 %6576 to i8
  store i8 %6580, i8* %6579, align 1, !tbaa !2432
  %6581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6582 = and i32 %6577, 254
  %6583 = call i32 @llvm.ctpop.i32(i32 %6582) #16
  %6584 = trunc i32 %6583 to i8
  %6585 = and i8 %6584, 1
  %6586 = xor i8 %6585, 1
  store i8 %6586, i8* %6581, align 1, !tbaa !2432
  %6587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6587, align 1, !tbaa !2432
  %6588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6589 = icmp eq i32 %6577, 0
  %6590 = zext i1 %6589 to i8
  store i8 %6590, i8* %6588, align 1, !tbaa !2432
  %6591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6592 = lshr i32 %6577, 31
  %6593 = trunc i32 %6592 to i8
  store i8 %6593, i8* %6591, align 1, !tbaa !2432
  %6594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6594, align 1, !tbaa !2432
  %6595 = load i64, i64* %RAX
  %6596 = load i32, i32* %ECX
  %6597 = zext i32 %6596 to i64
  %6598 = load i64, i64* %PC
  %6599 = add i64 %6598, 2
  store i64 %6599, i64* %PC
  %6600 = trunc i64 %6595 to i32
  %6601 = add i32 %6596, %6600
  %6602 = zext i32 %6601 to i64
  store i64 %6602, i64* %RAX, align 8, !tbaa !2428
  %6603 = icmp ult i32 %6601, %6600
  %6604 = icmp ult i32 %6601, %6596
  %6605 = or i1 %6603, %6604
  %6606 = zext i1 %6605 to i8
  %6607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6606, i8* %6607, align 1, !tbaa !2433
  %6608 = and i32 %6601, 255
  %6609 = call i32 @llvm.ctpop.i32(i32 %6608) #16
  %6610 = trunc i32 %6609 to i8
  %6611 = and i8 %6610, 1
  %6612 = xor i8 %6611, 1
  %6613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6612, i8* %6613, align 1, !tbaa !2447
  %6614 = xor i64 %6597, %6595
  %6615 = trunc i64 %6614 to i32
  %6616 = xor i32 %6615, %6601
  %6617 = lshr i32 %6616, 4
  %6618 = trunc i32 %6617 to i8
  %6619 = and i8 %6618, 1
  %6620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6619, i8* %6620, align 1, !tbaa !2448
  %6621 = icmp eq i32 %6601, 0
  %6622 = zext i1 %6621 to i8
  %6623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6622, i8* %6623, align 1, !tbaa !2449
  %6624 = lshr i32 %6601, 31
  %6625 = trunc i32 %6624 to i8
  %6626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6625, i8* %6626, align 1, !tbaa !2450
  %6627 = lshr i32 %6600, 31
  %6628 = lshr i32 %6596, 31
  %6629 = xor i32 %6624, %6627
  %6630 = xor i32 %6624, %6628
  %6631 = add nuw nsw i32 %6629, %6630
  %6632 = icmp eq i32 %6631, 2
  %6633 = zext i1 %6632 to i8
  %6634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6633, i8* %6634, align 1, !tbaa !2451
  %6635 = load i32, i32* %EAX
  %6636 = zext i32 %6635 to i64
  %6637 = load i64, i64* %PC
  %6638 = add i64 %6637, 3
  store i64 %6638, i64* %PC
  %6639 = shl i64 %6636, 32
  %6640 = ashr exact i64 %6639, 32
  store i64 %6640, i64* %RSI, align 8, !tbaa !2428
  %6641 = load i64, i64* %RSI
  %6642 = mul i64 %6641, 4
  %6643 = add i64 %6642, add (i64 ptrtoint (%p_type* @p to i64), i64 20480)
  %6644 = load i64, i64* %PC
  %6645 = add i64 %6644, 11
  store i64 %6645, i64* %PC
  %6646 = inttoptr i64 %6643 to i32*
  store i32 1, i32* %6646
  %6647 = load i64, i64* %RBP
  %6648 = sub i64 %6647, 12
  %6649 = load i64, i64* %PC
  %6650 = add i64 %6649, 3
  store i64 %6650, i64* %PC
  %6651 = inttoptr i64 %6648 to i32*
  %6652 = load i32, i32* %6651
  %6653 = zext i32 %6652 to i64
  store i64 %6653, i64* %RAX, align 8, !tbaa !2428
  %6654 = load i64, i64* %RAX
  %6655 = load i64, i64* %PC
  %6656 = add i64 %6655, 3
  store i64 %6656, i64* %PC
  %6657 = trunc i64 %6654 to i32
  %6658 = add i32 1, %6657
  %6659 = zext i32 %6658 to i64
  store i64 %6659, i64* %RAX, align 8, !tbaa !2428
  %6660 = icmp ult i32 %6658, %6657
  %6661 = icmp ult i32 %6658, 1
  %6662 = or i1 %6660, %6661
  %6663 = zext i1 %6662 to i8
  %6664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6663, i8* %6664, align 1, !tbaa !2433
  %6665 = and i32 %6658, 255
  %6666 = call i32 @llvm.ctpop.i32(i32 %6665) #16
  %6667 = trunc i32 %6666 to i8
  %6668 = and i8 %6667, 1
  %6669 = xor i8 %6668, 1
  %6670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6669, i8* %6670, align 1, !tbaa !2447
  %6671 = xor i64 1, %6654
  %6672 = trunc i64 %6671 to i32
  %6673 = xor i32 %6672, %6658
  %6674 = lshr i32 %6673, 4
  %6675 = trunc i32 %6674 to i8
  %6676 = and i8 %6675, 1
  %6677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6676, i8* %6677, align 1, !tbaa !2448
  %6678 = icmp eq i32 %6658, 0
  %6679 = zext i1 %6678 to i8
  %6680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6679, i8* %6680, align 1, !tbaa !2449
  %6681 = lshr i32 %6658, 31
  %6682 = trunc i32 %6681 to i8
  %6683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6682, i8* %6683, align 1, !tbaa !2450
  %6684 = lshr i32 %6657, 31
  %6685 = xor i32 %6681, %6684
  %6686 = add nuw nsw i32 %6685, %6681
  %6687 = icmp eq i32 %6686, 2
  %6688 = zext i1 %6687 to i8
  %6689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6688, i8* %6689, align 1, !tbaa !2451
  %6690 = load i64, i64* %RBP
  %6691 = sub i64 %6690, 12
  %6692 = load i32, i32* %EAX
  %6693 = zext i32 %6692 to i64
  %6694 = load i64, i64* %PC
  %6695 = add i64 %6694, 3
  store i64 %6695, i64* %PC
  %6696 = inttoptr i64 %6691 to i32*
  store i32 %6692, i32* %6696
  %6697 = load i64, i64* %PC
  %6698 = sub i64 %6697, 52
  %6699 = load i64, i64* %PC
  %6700 = add i64 %6699, 5
  store i64 %6700, i64* %PC
  %6701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6698, i64* %6701, align 8, !tbaa !2428
  br label %block_400fdc

block_400a4e:                                     ; preds = %block_400a47, %block_400a58
  %MEMORY.36 = phi %struct.Memory* [ %MEMORY.38, %block_400a47 ], [ %MEMORY.36, %block_400a58 ]
  %6702 = load i64, i64* %RBP
  %6703 = sub i64 %6702, 12
  %6704 = load i64, i64* %PC
  %6705 = add i64 %6704, 4
  store i64 %6705, i64* %PC
  %6706 = inttoptr i64 %6703 to i32*
  %6707 = load i32, i32* %6706
  %6708 = sub i32 %6707, 3
  %6709 = icmp ult i32 %6707, 3
  %6710 = zext i1 %6709 to i8
  %6711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6710, i8* %6711, align 1, !tbaa !2433
  %6712 = and i32 %6708, 255
  %6713 = call i32 @llvm.ctpop.i32(i32 %6712) #16
  %6714 = trunc i32 %6713 to i8
  %6715 = and i8 %6714, 1
  %6716 = xor i8 %6715, 1
  %6717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6716, i8* %6717, align 1, !tbaa !2447
  %6718 = xor i32 %6707, 3
  %6719 = xor i32 %6718, %6708
  %6720 = lshr i32 %6719, 4
  %6721 = trunc i32 %6720 to i8
  %6722 = and i8 %6721, 1
  %6723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6722, i8* %6723, align 1, !tbaa !2448
  %6724 = icmp eq i32 %6708, 0
  %6725 = zext i1 %6724 to i8
  %6726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6725, i8* %6726, align 1, !tbaa !2449
  %6727 = lshr i32 %6708, 31
  %6728 = trunc i32 %6727 to i8
  %6729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6728, i8* %6729, align 1, !tbaa !2450
  %6730 = lshr i32 %6707, 31
  %6731 = xor i32 %6727, %6730
  %6732 = add nuw nsw i32 %6731, %6730
  %6733 = icmp eq i32 %6732, 2
  %6734 = zext i1 %6733 to i8
  %6735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6734, i8* %6735, align 1, !tbaa !2451
  %6736 = load i64, i64* %PC
  %6737 = add i64 %6736, 53
  %6738 = load i64, i64* %PC
  %6739 = add i64 %6738, 6
  %6740 = load i64, i64* %PC
  %6741 = add i64 %6740, 6
  store i64 %6741, i64* %PC
  %6742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6743 = load i8, i8* %6742, align 1, !tbaa !2449
  %6744 = icmp eq i8 %6743, 0
  %6745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6746 = load i8, i8* %6745, align 1, !tbaa !2450
  %6747 = icmp ne i8 %6746, 0
  %6748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6749 = load i8, i8* %6748, align 1, !tbaa !2451
  %6750 = icmp ne i8 %6749, 0
  %6751 = xor i1 %6747, %6750
  %6752 = xor i1 %6751, true
  %6753 = and i1 %6744, %6752
  %6754 = zext i1 %6753 to i8
  store i8 %6754, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %6755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6756 = select i1 %6753, i64 %6737, i64 %6739
  store i64 %6756, i64* %6755, align 8, !tbaa !2428
  %6757 = load i8, i8* %BRANCH_TAKEN
  %6758 = icmp eq i8 %6757, 1
  br i1 %6758, label %block_400a87, label %block_400a58

block_400a47:                                     ; preds = %block_400a3d
  %6759 = load i64, i64* %RBP
  %6760 = sub i64 %6759, 12
  %6761 = load i64, i64* %PC
  %6762 = add i64 %6761, 7
  store i64 %6762, i64* %PC
  %6763 = inttoptr i64 %6760 to i32*
  store i32 0, i32* %6763
  br label %block_400a4e

block_4009fc:                                     ; preds = %block_40099f
  %6764 = load i64, i64* %PC
  %6765 = add i64 %6764, 5
  %6766 = load i64, i64* %PC
  %6767 = add i64 %6766, 5
  store i64 %6767, i64* %PC
  %6768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6765, i64* %6768, align 8, !tbaa !2428
  %6769 = load i64, i64* %RBP
  %6770 = sub i64 %6769, 4
  %6771 = load i64, i64* %PC
  %6772 = add i64 %6771, 3
  store i64 %6772, i64* %PC
  %6773 = inttoptr i64 %6770 to i32*
  %6774 = load i32, i32* %6773
  %6775 = zext i32 %6774 to i64
  store i64 %6775, i64* %RAX, align 8, !tbaa !2428
  %6776 = load i64, i64* %RAX
  %6777 = load i64, i64* %PC
  %6778 = add i64 %6777, 3
  store i64 %6778, i64* %PC
  %6779 = trunc i64 %6776 to i32
  %6780 = add i32 1, %6779
  %6781 = zext i32 %6780 to i64
  store i64 %6781, i64* %RAX, align 8, !tbaa !2428
  %6782 = icmp ult i32 %6780, %6779
  %6783 = icmp ult i32 %6780, 1
  %6784 = or i1 %6782, %6783
  %6785 = zext i1 %6784 to i8
  %6786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6785, i8* %6786, align 1, !tbaa !2433
  %6787 = and i32 %6780, 255
  %6788 = call i32 @llvm.ctpop.i32(i32 %6787) #16
  %6789 = trunc i32 %6788 to i8
  %6790 = and i8 %6789, 1
  %6791 = xor i8 %6790, 1
  %6792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6791, i8* %6792, align 1, !tbaa !2447
  %6793 = xor i64 1, %6776
  %6794 = trunc i64 %6793 to i32
  %6795 = xor i32 %6794, %6780
  %6796 = lshr i32 %6795, 4
  %6797 = trunc i32 %6796 to i8
  %6798 = and i8 %6797, 1
  %6799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6798, i8* %6799, align 1, !tbaa !2448
  %6800 = icmp eq i32 %6780, 0
  %6801 = zext i1 %6800 to i8
  %6802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6801, i8* %6802, align 1, !tbaa !2449
  %6803 = lshr i32 %6780, 31
  %6804 = trunc i32 %6803 to i8
  %6805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6804, i8* %6805, align 1, !tbaa !2450
  %6806 = lshr i32 %6779, 31
  %6807 = xor i32 %6803, %6806
  %6808 = add nuw nsw i32 %6807, %6803
  %6809 = icmp eq i32 %6808, 2
  %6810 = zext i1 %6809 to i8
  %6811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6810, i8* %6811, align 1, !tbaa !2451
  %6812 = load i64, i64* %RBP
  %6813 = sub i64 %6812, 4
  %6814 = load i32, i32* %EAX
  %6815 = zext i32 %6814 to i64
  %6816 = load i64, i64* %PC
  %6817 = add i64 %6816, 3
  store i64 %6817, i64* %PC
  %6818 = inttoptr i64 %6813 to i32*
  store i32 %6814, i32* %6818
  %6819 = load i64, i64* %PC
  %6820 = sub i64 %6819, 124
  %6821 = load i64, i64* %PC
  %6822 = add i64 %6821, 5
  store i64 %6822, i64* %PC
  %6823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6820, i64* %6823, align 8, !tbaa !2428
  br label %block_40098e

block_401260:                                     ; preds = %block_40125b, %block_40121d
  %MEMORY.37 = phi %struct.Memory* [ %MEMORY.43, %block_40125b ], [ %7597, %block_40121d ]
  %6824 = load i64, i64* %PC
  %6825 = add i64 %6824, 10
  store i64 %6825, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401360__rodata_type* @seg_401360__rodata to i64), i64 60), i64* %RDI, align 8, !tbaa !2428
  %6826 = load i64, i64* %PC
  %6827 = add i64 %6826, 7
  store i64 %6827, i64* %PC
  %6828 = load i32, i32* bitcast (%n_type* @n to i32*)
  %6829 = zext i32 %6828 to i64
  store i64 %6829, i64* %RSI, align 8, !tbaa !2428
  %6830 = load i64, i64* %PC
  %6831 = add i64 %6830, 2
  store i64 %6831, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %6832 = load i64, i64* %PC
  %6833 = sub i64 %6832, 3683
  %6834 = load i64, i64* %PC
  %6835 = add i64 %6834, 5
  %6836 = load i64, i64* %PC
  %6837 = add i64 %6836, 5
  store i64 %6837, i64* %PC
  %6838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6839 = load i64, i64* %6838, align 8, !tbaa !2428
  %6840 = add i64 %6839, -8
  %6841 = inttoptr i64 %6840 to i64*
  store i64 %6835, i64* %6841
  store i64 %6840, i64* %6838, align 8, !tbaa !2428
  %6842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6833, i64* %6842, align 8, !tbaa !2428
  %6843 = load i64, i64* %PC
  %6844 = call %struct.Memory* @ext_619238_printf(%struct.State* %0, i64 %6843, %struct.Memory* %MEMORY.37)
  %6845 = load i64, i64* %PC
  %6846 = add i64 %6845, 10
  store i64 %6846, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401360__rodata_type* @seg_401360__rodata to i64), i64 60), i64* %RDI, align 8, !tbaa !2428
  %6847 = load i64, i64* %PC
  %6848 = add i64 %6847, 7
  store i64 %6848, i64* %PC
  %6849 = load i32, i32* bitcast (%kount_type* @kount to i32*)
  %6850 = zext i32 %6849 to i64
  store i64 %6850, i64* %RSI, align 8, !tbaa !2428
  %6851 = load i64, i64* %RBP
  %6852 = sub i64 %6851, 32
  %6853 = load i32, i32* %EAX
  %6854 = zext i32 %6853 to i64
  %6855 = load i64, i64* %PC
  %6856 = add i64 %6855, 3
  store i64 %6856, i64* %PC
  %6857 = inttoptr i64 %6852 to i32*
  store i32 %6853, i32* %6857
  %6858 = load i64, i64* %PC
  %6859 = add i64 %6858, 2
  store i64 %6859, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %6860 = load i64, i64* %PC
  %6861 = sub i64 %6860, 3710
  %6862 = load i64, i64* %PC
  %6863 = add i64 %6862, 5
  %6864 = load i64, i64* %PC
  %6865 = add i64 %6864, 5
  store i64 %6865, i64* %PC
  %6866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6867 = load i64, i64* %6866, align 8, !tbaa !2428
  %6868 = add i64 %6867, -8
  %6869 = inttoptr i64 %6868 to i64*
  store i64 %6863, i64* %6869
  store i64 %6868, i64* %6866, align 8, !tbaa !2428
  %6870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6861, i64* %6870, align 8, !tbaa !2428
  %6871 = load i64, i64* %PC
  %6872 = call %struct.Memory* @ext_619238_printf(%struct.State* %0, i64 %6871, %struct.Memory* %6844)
  %6873 = load i64, i64* %RBP
  %6874 = sub i64 %6873, 36
  %6875 = load i32, i32* %EAX
  %6876 = zext i32 %6875 to i64
  %6877 = load i64, i64* %PC
  %6878 = add i64 %6877, 3
  store i64 %6878, i64* %PC
  %6879 = inttoptr i64 %6874 to i32*
  store i32 %6875, i32* %6879
  %6880 = load i64, i64* %RSP
  %6881 = load i64, i64* %PC
  %6882 = add i64 %6881, 4
  store i64 %6882, i64* %PC
  %6883 = add i64 48, %6880
  store i64 %6883, i64* %RSP, align 8, !tbaa !2428
  %6884 = icmp ult i64 %6883, %6880
  %6885 = icmp ult i64 %6883, 48
  %6886 = or i1 %6884, %6885
  %6887 = zext i1 %6886 to i8
  %6888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6887, i8* %6888, align 1, !tbaa !2433
  %6889 = trunc i64 %6883 to i32
  %6890 = and i32 %6889, 255
  %6891 = call i32 @llvm.ctpop.i32(i32 %6890) #16
  %6892 = trunc i32 %6891 to i8
  %6893 = and i8 %6892, 1
  %6894 = xor i8 %6893, 1
  %6895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6894, i8* %6895, align 1, !tbaa !2447
  %6896 = xor i64 48, %6880
  %6897 = xor i64 %6896, %6883
  %6898 = lshr i64 %6897, 4
  %6899 = trunc i64 %6898 to i8
  %6900 = and i8 %6899, 1
  %6901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6900, i8* %6901, align 1, !tbaa !2448
  %6902 = icmp eq i64 %6883, 0
  %6903 = zext i1 %6902 to i8
  %6904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6903, i8* %6904, align 1, !tbaa !2449
  %6905 = lshr i64 %6883, 63
  %6906 = trunc i64 %6905 to i8
  %6907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6906, i8* %6907, align 1, !tbaa !2450
  %6908 = lshr i64 %6880, 63
  %6909 = xor i64 %6905, %6908
  %6910 = add nuw nsw i64 %6909, %6905
  %6911 = icmp eq i64 %6910, 2
  %6912 = zext i1 %6911 to i8
  %6913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6912, i8* %6913, align 1, !tbaa !2451
  %6914 = load i64, i64* %PC
  %6915 = add i64 %6914, 1
  store i64 %6915, i64* %PC
  %6916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6917 = load i64, i64* %6916, align 8, !tbaa !2428
  %6918 = add i64 %6917, 8
  %6919 = inttoptr i64 %6917 to i64*
  %6920 = load i64, i64* %6919
  store i64 %6920, i64* %RBP, align 8, !tbaa !2428
  store i64 %6918, i64* %6916, align 8, !tbaa !2428
  %6921 = load i64, i64* %PC
  %6922 = add i64 %6921, 1
  store i64 %6922, i64* %PC
  %6923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6925 = load i64, i64* %6924, align 8, !tbaa !2428
  %6926 = inttoptr i64 %6925 to i64*
  %6927 = load i64, i64* %6926
  store i64 %6927, i64* %6923, align 8, !tbaa !2428
  %6928 = add i64 %6925, 8
  store i64 %6928, i64* %6924, align 8, !tbaa !2428
  ret %struct.Memory* %6872

block_400fd5:                                     ; preds = %block_400fcb
  %6929 = load i64, i64* %RBP
  %6930 = sub i64 %6929, 12
  %6931 = load i64, i64* %PC
  %6932 = add i64 %6931, 7
  store i64 %6932, i64* %PC
  %6933 = inttoptr i64 %6930 to i32*
  store i32 0, i32* %6933
  br label %block_400fdc

block_400a3d:                                     ; preds = %block_400a36, %block_400a87
  %MEMORY.38 = phi %struct.Memory* [ %MEMORY.40, %block_400a36 ], [ %MEMORY.36, %block_400a87 ]
  %6934 = load i64, i64* %RBP
  %6935 = sub i64 %6934, 8
  %6936 = load i64, i64* %PC
  %6937 = add i64 %6936, 4
  store i64 %6937, i64* %PC
  %6938 = inttoptr i64 %6935 to i32*
  %6939 = load i32, i32* %6938
  %6940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6940, align 1, !tbaa !2433
  %6941 = and i32 %6939, 255
  %6942 = call i32 @llvm.ctpop.i32(i32 %6941) #16
  %6943 = trunc i32 %6942 to i8
  %6944 = and i8 %6943, 1
  %6945 = xor i8 %6944, 1
  %6946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6945, i8* %6946, align 1, !tbaa !2447
  %6947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6947, align 1, !tbaa !2448
  %6948 = icmp eq i32 %6939, 0
  %6949 = zext i1 %6948 to i8
  %6950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6949, i8* %6950, align 1, !tbaa !2449
  %6951 = lshr i32 %6939, 31
  %6952 = trunc i32 %6951 to i8
  %6953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6952, i8* %6953, align 1, !tbaa !2450
  %6954 = lshr i32 %6939, 31
  %6955 = xor i32 %6951, %6954
  %6956 = add nuw nsw i32 %6955, %6954
  %6957 = icmp eq i32 %6956, 2
  %6958 = zext i1 %6957 to i8
  %6959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6958, i8* %6959, align 1, !tbaa !2451
  %6960 = load i64, i64* %PC
  %6961 = add i64 %6960, 89
  %6962 = load i64, i64* %PC
  %6963 = add i64 %6962, 6
  %6964 = load i64, i64* %PC
  %6965 = add i64 %6964, 6
  store i64 %6965, i64* %PC
  %6966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6967 = load i8, i8* %6966, align 1, !tbaa !2449
  %6968 = icmp eq i8 %6967, 0
  %6969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6970 = load i8, i8* %6969, align 1, !tbaa !2450
  %6971 = icmp ne i8 %6970, 0
  %6972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6973 = load i8, i8* %6972, align 1, !tbaa !2451
  %6974 = icmp ne i8 %6973, 0
  %6975 = xor i1 %6971, %6974
  %6976 = xor i1 %6975, true
  %6977 = and i1 %6968, %6976
  %6978 = zext i1 %6977 to i8
  store i8 %6978, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %6979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6980 = select i1 %6977, i64 %6961, i64 %6963
  store i64 %6980, i64* %6979, align 8, !tbaa !2428
  %6981 = load i8, i8* %BRANCH_TAKEN
  %6982 = icmp eq i8 %6981, 1
  br i1 %6982, label %block_400a9a, label %block_400a47

block_401107:                                     ; preds = %block_401100, %block_401151
  %MEMORY.39 = phi %struct.Memory* [ %MEMORY.0, %block_401100 ], [ %MEMORY.10, %block_401151 ]
  %6983 = load i64, i64* %RBP
  %6984 = sub i64 %6983, 8
  %6985 = load i64, i64* %PC
  %6986 = add i64 %6985, 4
  store i64 %6986, i64* %PC
  %6987 = inttoptr i64 %6984 to i32*
  %6988 = load i32, i32* %6987
  %6989 = sub i32 %6988, 1
  %6990 = icmp ult i32 %6988, 1
  %6991 = zext i1 %6990 to i8
  %6992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6991, i8* %6992, align 1, !tbaa !2433
  %6993 = and i32 %6989, 255
  %6994 = call i32 @llvm.ctpop.i32(i32 %6993) #16
  %6995 = trunc i32 %6994 to i8
  %6996 = and i8 %6995, 1
  %6997 = xor i8 %6996, 1
  %6998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6997, i8* %6998, align 1, !tbaa !2447
  %6999 = xor i32 %6988, 1
  %7000 = xor i32 %6999, %6989
  %7001 = lshr i32 %7000, 4
  %7002 = trunc i32 %7001 to i8
  %7003 = and i8 %7002, 1
  %7004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7003, i8* %7004, align 1, !tbaa !2448
  %7005 = icmp eq i32 %6989, 0
  %7006 = zext i1 %7005 to i8
  %7007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7006, i8* %7007, align 1, !tbaa !2449
  %7008 = lshr i32 %6989, 31
  %7009 = trunc i32 %7008 to i8
  %7010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7009, i8* %7010, align 1, !tbaa !2450
  %7011 = lshr i32 %6988, 31
  %7012 = xor i32 %7008, %7011
  %7013 = add nuw nsw i32 %7012, %7011
  %7014 = icmp eq i32 %7013, 2
  %7015 = zext i1 %7014 to i8
  %7016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7015, i8* %7016, align 1, !tbaa !2451
  %7017 = load i64, i64* %PC
  %7018 = add i64 %7017, 89
  %7019 = load i64, i64* %PC
  %7020 = add i64 %7019, 6
  %7021 = load i64, i64* %PC
  %7022 = add i64 %7021, 6
  store i64 %7022, i64* %PC
  %7023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7024 = load i8, i8* %7023, align 1, !tbaa !2449
  %7025 = icmp eq i8 %7024, 0
  %7026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7027 = load i8, i8* %7026, align 1, !tbaa !2450
  %7028 = icmp ne i8 %7027, 0
  %7029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7030 = load i8, i8* %7029, align 1, !tbaa !2451
  %7031 = icmp ne i8 %7030, 0
  %7032 = xor i1 %7028, %7031
  %7033 = xor i1 %7032, true
  %7034 = and i1 %7025, %7033
  %7035 = zext i1 %7034 to i8
  store i8 %7035, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %7036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7037 = select i1 %7034, i64 %7018, i64 %7020
  store i64 %7037, i64* %7036, align 8, !tbaa !2428
  %7038 = load i8, i8* %BRANCH_TAKEN
  %7039 = icmp eq i8 %7038, 1
  br i1 %7039, label %block_401164, label %block_401111

block_400e3b:                                     ; preds = %block_400e02
  %7040 = load i64, i64* %PC
  %7041 = add i64 %7040, 5
  %7042 = load i64, i64* %PC
  %7043 = add i64 %7042, 5
  store i64 %7043, i64* %PC
  %7044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7041, i64* %7044, align 8, !tbaa !2428
  %7045 = load i64, i64* %RBP
  %7046 = sub i64 %7045, 8
  %7047 = load i64, i64* %PC
  %7048 = add i64 %7047, 3
  store i64 %7048, i64* %PC
  %7049 = inttoptr i64 %7046 to i32*
  %7050 = load i32, i32* %7049
  %7051 = zext i32 %7050 to i64
  store i64 %7051, i64* %RAX, align 8, !tbaa !2428
  %7052 = load i64, i64* %RAX
  %7053 = load i64, i64* %PC
  %7054 = add i64 %7053, 3
  store i64 %7054, i64* %PC
  %7055 = trunc i64 %7052 to i32
  %7056 = add i32 1, %7055
  %7057 = zext i32 %7056 to i64
  store i64 %7057, i64* %RAX, align 8, !tbaa !2428
  %7058 = icmp ult i32 %7056, %7055
  %7059 = icmp ult i32 %7056, 1
  %7060 = or i1 %7058, %7059
  %7061 = zext i1 %7060 to i8
  %7062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7061, i8* %7062, align 1, !tbaa !2433
  %7063 = and i32 %7056, 255
  %7064 = call i32 @llvm.ctpop.i32(i32 %7063) #16
  %7065 = trunc i32 %7064 to i8
  %7066 = and i8 %7065, 1
  %7067 = xor i8 %7066, 1
  %7068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7067, i8* %7068, align 1, !tbaa !2447
  %7069 = xor i64 1, %7052
  %7070 = trunc i64 %7069 to i32
  %7071 = xor i32 %7070, %7056
  %7072 = lshr i32 %7071, 4
  %7073 = trunc i32 %7072 to i8
  %7074 = and i8 %7073, 1
  %7075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7074, i8* %7075, align 1, !tbaa !2448
  %7076 = icmp eq i32 %7056, 0
  %7077 = zext i1 %7076 to i8
  %7078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7077, i8* %7078, align 1, !tbaa !2449
  %7079 = lshr i32 %7056, 31
  %7080 = trunc i32 %7079 to i8
  %7081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7080, i8* %7081, align 1, !tbaa !2450
  %7082 = lshr i32 %7055, 31
  %7083 = xor i32 %7079, %7082
  %7084 = add nuw nsw i32 %7083, %7079
  %7085 = icmp eq i32 %7084, 2
  %7086 = zext i1 %7085 to i8
  %7087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7086, i8* %7087, align 1, !tbaa !2451
  %7088 = load i64, i64* %RBP
  %7089 = sub i64 %7088, 8
  %7090 = load i32, i32* %EAX
  %7091 = zext i32 %7090 to i64
  %7092 = load i64, i64* %PC
  %7093 = add i64 %7092, 3
  store i64 %7093, i64* %PC
  %7094 = inttoptr i64 %7089 to i32*
  store i32 %7090, i32* %7094
  %7095 = load i64, i64* %PC
  %7096 = sub i64 %7095, 88
  %7097 = load i64, i64* %PC
  %7098 = add i64 %7097, 5
  store i64 %7098, i64* %PC
  %7099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7096, i64* %7099, align 8, !tbaa !2428
  br label %block_400df1

block_400a36:                                     ; preds = %block_400a2c
  %7100 = load i64, i64* %RBP
  %7101 = sub i64 %7100, 8
  %7102 = load i64, i64* %PC
  %7103 = add i64 %7102, 7
  store i64 %7103, i64* %PC
  %7104 = inttoptr i64 %7101 to i32*
  store i32 0, i32* %7104
  br label %block_400a3d

block_400c32:                                     ; preds = %block_400c28
  %7105 = load i64, i64* %RBP
  %7106 = sub i64 %7105, 4
  %7107 = load i64, i64* %PC
  %7108 = add i64 %7107, 3
  store i64 %7108, i64* %PC
  %7109 = inttoptr i64 %7106 to i32*
  %7110 = load i32, i32* %7109
  %7111 = zext i32 %7110 to i64
  store i64 %7111, i64* %RAX, align 8, !tbaa !2428
  %7112 = load i64, i64* %RBP
  %7113 = sub i64 %7112, 8
  %7114 = load i64, i64* %PC
  %7115 = add i64 %7114, 3
  store i64 %7115, i64* %PC
  %7116 = inttoptr i64 %7113 to i32*
  %7117 = load i32, i32* %7116
  %7118 = zext i32 %7117 to i64
  store i64 %7118, i64* %RCX, align 8, !tbaa !2428
  %7119 = load i64, i64* %RBP
  %7120 = sub i64 %7119, 12
  %7121 = load i64, i64* %PC
  %7122 = add i64 %7121, 3
  store i64 %7122, i64* %PC
  %7123 = inttoptr i64 %7120 to i32*
  %7124 = load i32, i32* %7123
  %7125 = zext i32 %7124 to i64
  store i64 %7125, i64* %RDX, align 8, !tbaa !2428
  %7126 = load i64, i64* %RDX
  %7127 = load i64, i64* %PC
  %7128 = add i64 %7127, 3
  store i64 %7128, i64* %PC
  %7129 = and i64 %7126, 4294967295
  %7130 = shl i64 %7129, 2
  %7131 = trunc i64 %7130 to i32
  %7132 = icmp slt i32 %7131, 0
  %7133 = shl i32 %7131, 1
  %7134 = zext i32 %7133 to i64
  store i64 %7134, i64* %RDX, align 8, !tbaa !2428
  %7135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7136 = zext i1 %7132 to i8
  store i8 %7136, i8* %7135, align 1, !tbaa !2432
  %7137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7138 = and i32 %7133, 254
  %7139 = call i32 @llvm.ctpop.i32(i32 %7138) #16
  %7140 = trunc i32 %7139 to i8
  %7141 = and i8 %7140, 1
  %7142 = xor i8 %7141, 1
  store i8 %7142, i8* %7137, align 1, !tbaa !2432
  %7143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7143, align 1, !tbaa !2432
  %7144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7145 = icmp eq i32 %7133, 0
  %7146 = zext i1 %7145 to i8
  store i8 %7146, i8* %7144, align 1, !tbaa !2432
  %7147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7148 = lshr i32 %7133, 31
  %7149 = trunc i32 %7148 to i8
  store i8 %7149, i8* %7147, align 1, !tbaa !2432
  %7150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7150, align 1, !tbaa !2432
  %7151 = load i64, i64* %RCX
  %7152 = load i32, i32* %EDX
  %7153 = zext i32 %7152 to i64
  %7154 = load i64, i64* %PC
  %7155 = add i64 %7154, 2
  store i64 %7155, i64* %PC
  %7156 = trunc i64 %7151 to i32
  %7157 = add i32 %7152, %7156
  %7158 = zext i32 %7157 to i64
  store i64 %7158, i64* %RCX, align 8, !tbaa !2428
  %7159 = icmp ult i32 %7157, %7156
  %7160 = icmp ult i32 %7157, %7152
  %7161 = or i1 %7159, %7160
  %7162 = zext i1 %7161 to i8
  %7163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7162, i8* %7163, align 1, !tbaa !2433
  %7164 = and i32 %7157, 255
  %7165 = call i32 @llvm.ctpop.i32(i32 %7164) #16
  %7166 = trunc i32 %7165 to i8
  %7167 = and i8 %7166, 1
  %7168 = xor i8 %7167, 1
  %7169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7168, i8* %7169, align 1, !tbaa !2447
  %7170 = xor i64 %7153, %7151
  %7171 = trunc i64 %7170 to i32
  %7172 = xor i32 %7171, %7157
  %7173 = lshr i32 %7172, 4
  %7174 = trunc i32 %7173 to i8
  %7175 = and i8 %7174, 1
  %7176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7175, i8* %7176, align 1, !tbaa !2448
  %7177 = icmp eq i32 %7157, 0
  %7178 = zext i1 %7177 to i8
  %7179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7178, i8* %7179, align 1, !tbaa !2449
  %7180 = lshr i32 %7157, 31
  %7181 = trunc i32 %7180 to i8
  %7182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7181, i8* %7182, align 1, !tbaa !2450
  %7183 = lshr i32 %7156, 31
  %7184 = lshr i32 %7152, 31
  %7185 = xor i32 %7180, %7183
  %7186 = xor i32 %7180, %7184
  %7187 = add nuw nsw i32 %7185, %7186
  %7188 = icmp eq i32 %7187, 2
  %7189 = zext i1 %7188 to i8
  %7190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7189, i8* %7190, align 1, !tbaa !2451
  %7191 = load i64, i64* %RCX
  %7192 = load i64, i64* %PC
  %7193 = add i64 %7192, 3
  store i64 %7193, i64* %PC
  %7194 = and i64 %7191, 4294967295
  %7195 = shl i64 %7194, 2
  %7196 = trunc i64 %7195 to i32
  %7197 = icmp slt i32 %7196, 0
  %7198 = shl i32 %7196, 1
  %7199 = zext i32 %7198 to i64
  store i64 %7199, i64* %RCX, align 8, !tbaa !2428
  %7200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7201 = zext i1 %7197 to i8
  store i8 %7201, i8* %7200, align 1, !tbaa !2432
  %7202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7203 = and i32 %7198, 254
  %7204 = call i32 @llvm.ctpop.i32(i32 %7203) #16
  %7205 = trunc i32 %7204 to i8
  %7206 = and i8 %7205, 1
  %7207 = xor i8 %7206, 1
  store i8 %7207, i8* %7202, align 1, !tbaa !2432
  %7208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7208, align 1, !tbaa !2432
  %7209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7210 = icmp eq i32 %7198, 0
  %7211 = zext i1 %7210 to i8
  store i8 %7211, i8* %7209, align 1, !tbaa !2432
  %7212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7213 = lshr i32 %7198, 31
  %7214 = trunc i32 %7213 to i8
  store i8 %7214, i8* %7212, align 1, !tbaa !2432
  %7215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7215, align 1, !tbaa !2432
  %7216 = load i64, i64* %RAX
  %7217 = load i32, i32* %ECX
  %7218 = zext i32 %7217 to i64
  %7219 = load i64, i64* %PC
  %7220 = add i64 %7219, 2
  store i64 %7220, i64* %PC
  %7221 = trunc i64 %7216 to i32
  %7222 = add i32 %7217, %7221
  %7223 = zext i32 %7222 to i64
  store i64 %7223, i64* %RAX, align 8, !tbaa !2428
  %7224 = icmp ult i32 %7222, %7221
  %7225 = icmp ult i32 %7222, %7217
  %7226 = or i1 %7224, %7225
  %7227 = zext i1 %7226 to i8
  %7228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7227, i8* %7228, align 1, !tbaa !2433
  %7229 = and i32 %7222, 255
  %7230 = call i32 @llvm.ctpop.i32(i32 %7229) #16
  %7231 = trunc i32 %7230 to i8
  %7232 = and i8 %7231, 1
  %7233 = xor i8 %7232, 1
  %7234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7233, i8* %7234, align 1, !tbaa !2447
  %7235 = xor i64 %7218, %7216
  %7236 = trunc i64 %7235 to i32
  %7237 = xor i32 %7236, %7222
  %7238 = lshr i32 %7237, 4
  %7239 = trunc i32 %7238 to i8
  %7240 = and i8 %7239, 1
  %7241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7240, i8* %7241, align 1, !tbaa !2448
  %7242 = icmp eq i32 %7222, 0
  %7243 = zext i1 %7242 to i8
  %7244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7243, i8* %7244, align 1, !tbaa !2449
  %7245 = lshr i32 %7222, 31
  %7246 = trunc i32 %7245 to i8
  %7247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7246, i8* %7247, align 1, !tbaa !2450
  %7248 = lshr i32 %7221, 31
  %7249 = lshr i32 %7217, 31
  %7250 = xor i32 %7245, %7248
  %7251 = xor i32 %7245, %7249
  %7252 = add nuw nsw i32 %7250, %7251
  %7253 = icmp eq i32 %7252, 2
  %7254 = zext i1 %7253 to i8
  %7255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7254, i8* %7255, align 1, !tbaa !2451
  %7256 = load i32, i32* %EAX
  %7257 = zext i32 %7256 to i64
  %7258 = load i64, i64* %PC
  %7259 = add i64 %7258, 3
  store i64 %7259, i64* %PC
  %7260 = shl i64 %7257, 32
  %7261 = ashr exact i64 %7260, 32
  store i64 %7261, i64* %RSI, align 8, !tbaa !2428
  %7262 = load i64, i64* %RSI
  %7263 = mul i64 %7262, 4
  %7264 = add i64 %7263, add (i64 ptrtoint (%p_type* @p to i64), i64 8192)
  %7265 = load i64, i64* %PC
  %7266 = add i64 %7265, 11
  store i64 %7266, i64* %PC
  %7267 = inttoptr i64 %7264 to i32*
  store i32 1, i32* %7267
  %7268 = load i64, i64* %RBP
  %7269 = sub i64 %7268, 12
  %7270 = load i64, i64* %PC
  %7271 = add i64 %7270, 3
  store i64 %7271, i64* %PC
  %7272 = inttoptr i64 %7269 to i32*
  %7273 = load i32, i32* %7272
  %7274 = zext i32 %7273 to i64
  store i64 %7274, i64* %RAX, align 8, !tbaa !2428
  %7275 = load i64, i64* %RAX
  %7276 = load i64, i64* %PC
  %7277 = add i64 %7276, 3
  store i64 %7277, i64* %PC
  %7278 = trunc i64 %7275 to i32
  %7279 = add i32 1, %7278
  %7280 = zext i32 %7279 to i64
  store i64 %7280, i64* %RAX, align 8, !tbaa !2428
  %7281 = icmp ult i32 %7279, %7278
  %7282 = icmp ult i32 %7279, 1
  %7283 = or i1 %7281, %7282
  %7284 = zext i1 %7283 to i8
  %7285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7284, i8* %7285, align 1, !tbaa !2433
  %7286 = and i32 %7279, 255
  %7287 = call i32 @llvm.ctpop.i32(i32 %7286) #16
  %7288 = trunc i32 %7287 to i8
  %7289 = and i8 %7288, 1
  %7290 = xor i8 %7289, 1
  %7291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7290, i8* %7291, align 1, !tbaa !2447
  %7292 = xor i64 1, %7275
  %7293 = trunc i64 %7292 to i32
  %7294 = xor i32 %7293, %7279
  %7295 = lshr i32 %7294, 4
  %7296 = trunc i32 %7295 to i8
  %7297 = and i8 %7296, 1
  %7298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7297, i8* %7298, align 1, !tbaa !2448
  %7299 = icmp eq i32 %7279, 0
  %7300 = zext i1 %7299 to i8
  %7301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7300, i8* %7301, align 1, !tbaa !2449
  %7302 = lshr i32 %7279, 31
  %7303 = trunc i32 %7302 to i8
  %7304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7303, i8* %7304, align 1, !tbaa !2450
  %7305 = lshr i32 %7278, 31
  %7306 = xor i32 %7302, %7305
  %7307 = add nuw nsw i32 %7306, %7302
  %7308 = icmp eq i32 %7307, 2
  %7309 = zext i1 %7308 to i8
  %7310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7309, i8* %7310, align 1, !tbaa !2451
  %7311 = load i64, i64* %RBP
  %7312 = sub i64 %7311, 12
  %7313 = load i32, i32* %EAX
  %7314 = zext i32 %7313 to i64
  %7315 = load i64, i64* %PC
  %7316 = add i64 %7315, 3
  store i64 %7316, i64* %PC
  %7317 = inttoptr i64 %7312 to i32*
  store i32 %7313, i32* %7317
  %7318 = load i64, i64* %PC
  %7319 = sub i64 %7318, 52
  %7320 = load i64, i64* %PC
  %7321 = add i64 %7320, 5
  store i64 %7321, i64* %PC
  %7322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7319, i64* %7322, align 8, !tbaa !2428
  br label %block_400c28

block_400cae:                                     ; preds = %block_400ca4
  %7323 = load i64, i64* %RBP
  %7324 = sub i64 %7323, 8
  %7325 = load i64, i64* %PC
  %7326 = add i64 %7325, 7
  store i64 %7326, i64* %PC
  %7327 = inttoptr i64 %7324 to i32*
  store i32 0, i32* %7327
  br label %block_400cb5

block_40087c:                                     ; preds = %block_40086f
  %7328 = sub i64 %5531, 16
  %7329 = load i64, i64* %PC
  %7330 = add i64 %7329, 4
  store i64 %7330, i64* %PC
  %7331 = inttoptr i64 %7328 to i32*
  %7332 = load i32, i32* %7331
  %7333 = sext i32 %7332 to i64
  store i64 %7333, i64* %RAX, align 8, !tbaa !2428
  %7334 = load i64, i64* %RAX
  %7335 = mul i64 %7334, 4
  %7336 = add i64 %7335, ptrtoint (%puzzl_type* @puzzl to i64)
  %7337 = load i64, i64* %PC
  %7338 = add i64 %7337, 11
  store i64 %7338, i64* %PC
  %7339 = inttoptr i64 %7336 to i32*
  store i32 1, i32* %7339
  %7340 = load i64, i64* %RBP
  %7341 = sub i64 %7340, 16
  %7342 = load i64, i64* %PC
  %7343 = add i64 %7342, 3
  store i64 %7343, i64* %PC
  %7344 = inttoptr i64 %7341 to i32*
  %7345 = load i32, i32* %7344
  %7346 = zext i32 %7345 to i64
  store i64 %7346, i64* %RAX, align 8, !tbaa !2428
  %7347 = load i64, i64* %RAX
  %7348 = load i64, i64* %PC
  %7349 = add i64 %7348, 3
  store i64 %7349, i64* %PC
  %7350 = trunc i64 %7347 to i32
  %7351 = add i32 1, %7350
  %7352 = zext i32 %7351 to i64
  store i64 %7352, i64* %RAX, align 8, !tbaa !2428
  %7353 = icmp ult i32 %7351, %7350
  %7354 = icmp ult i32 %7351, 1
  %7355 = or i1 %7353, %7354
  %7356 = zext i1 %7355 to i8
  %7357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7356, i8* %7357, align 1, !tbaa !2433
  %7358 = and i32 %7351, 255
  %7359 = call i32 @llvm.ctpop.i32(i32 %7358) #16
  %7360 = trunc i32 %7359 to i8
  %7361 = and i8 %7360, 1
  %7362 = xor i8 %7361, 1
  %7363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7362, i8* %7363, align 1, !tbaa !2447
  %7364 = xor i64 1, %7347
  %7365 = trunc i64 %7364 to i32
  %7366 = xor i32 %7365, %7351
  %7367 = lshr i32 %7366, 4
  %7368 = trunc i32 %7367 to i8
  %7369 = and i8 %7368, 1
  %7370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7369, i8* %7370, align 1, !tbaa !2448
  %7371 = icmp eq i32 %7351, 0
  %7372 = zext i1 %7371 to i8
  %7373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7372, i8* %7373, align 1, !tbaa !2449
  %7374 = lshr i32 %7351, 31
  %7375 = trunc i32 %7374 to i8
  %7376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7375, i8* %7376, align 1, !tbaa !2450
  %7377 = lshr i32 %7350, 31
  %7378 = xor i32 %7374, %7377
  %7379 = add nuw nsw i32 %7378, %7374
  %7380 = icmp eq i32 %7379, 2
  %7381 = zext i1 %7380 to i8
  %7382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7381, i8* %7382, align 1, !tbaa !2451
  %7383 = load i64, i64* %RBP
  %7384 = sub i64 %7383, 16
  %7385 = load i32, i32* %EAX
  %7386 = zext i32 %7385 to i64
  %7387 = load i64, i64* %PC
  %7388 = add i64 %7387, 3
  store i64 %7388, i64* %PC
  %7389 = inttoptr i64 %7384 to i32*
  store i32 %7385, i32* %7389
  %7390 = load i64, i64* %PC
  %7391 = sub i64 %7390, 37
  %7392 = load i64, i64* %PC
  %7393 = add i64 %7392, 5
  store i64 %7393, i64* %PC
  %7394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7391, i64* %7394, align 8, !tbaa !2428
  br label %block_40086f

block_400fc4:                                     ; preds = %block_400fba
  %7395 = load i64, i64* %RBP
  %7396 = sub i64 %7395, 8
  %7397 = load i64, i64* %PC
  %7398 = add i64 %7397, 7
  store i64 %7398, i64* %PC
  %7399 = inttoptr i64 %7396 to i32*
  store i32 0, i32* %7399
  br label %block_400fcb

block_400a2c:                                     ; preds = %block_400a0f, %block_400a9a
  %MEMORY.40 = phi %struct.Memory* [ %MEMORY.7, %block_400a0f ], [ %MEMORY.38, %block_400a9a ]
  %7400 = load i64, i64* %RBP
  %7401 = sub i64 %7400, 4
  %7402 = load i64, i64* %PC
  %7403 = add i64 %7402, 4
  store i64 %7403, i64* %PC
  %7404 = inttoptr i64 %7401 to i32*
  %7405 = load i32, i32* %7404
  %7406 = sub i32 %7405, 1
  %7407 = icmp ult i32 %7405, 1
  %7408 = zext i1 %7407 to i8
  %7409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7408, i8* %7409, align 1, !tbaa !2433
  %7410 = and i32 %7406, 255
  %7411 = call i32 @llvm.ctpop.i32(i32 %7410) #16
  %7412 = trunc i32 %7411 to i8
  %7413 = and i8 %7412, 1
  %7414 = xor i8 %7413, 1
  %7415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7414, i8* %7415, align 1, !tbaa !2447
  %7416 = xor i32 %7405, 1
  %7417 = xor i32 %7416, %7406
  %7418 = lshr i32 %7417, 4
  %7419 = trunc i32 %7418 to i8
  %7420 = and i8 %7419, 1
  %7421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7420, i8* %7421, align 1, !tbaa !2448
  %7422 = icmp eq i32 %7406, 0
  %7423 = zext i1 %7422 to i8
  %7424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7423, i8* %7424, align 1, !tbaa !2449
  %7425 = lshr i32 %7406, 31
  %7426 = trunc i32 %7425 to i8
  %7427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7426, i8* %7427, align 1, !tbaa !2450
  %7428 = lshr i32 %7405, 31
  %7429 = xor i32 %7425, %7428
  %7430 = add nuw nsw i32 %7429, %7428
  %7431 = icmp eq i32 %7430, 2
  %7432 = zext i1 %7431 to i8
  %7433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7432, i8* %7433, align 1, !tbaa !2451
  %7434 = load i64, i64* %PC
  %7435 = add i64 %7434, 125
  %7436 = load i64, i64* %PC
  %7437 = add i64 %7436, 6
  %7438 = load i64, i64* %PC
  %7439 = add i64 %7438, 6
  store i64 %7439, i64* %PC
  %7440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7441 = load i8, i8* %7440, align 1, !tbaa !2449
  %7442 = icmp eq i8 %7441, 0
  %7443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7444 = load i8, i8* %7443, align 1, !tbaa !2450
  %7445 = icmp ne i8 %7444, 0
  %7446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7447 = load i8, i8* %7446, align 1, !tbaa !2451
  %7448 = icmp ne i8 %7447, 0
  %7449 = xor i1 %7445, %7448
  %7450 = xor i1 %7449, true
  %7451 = and i1 %7442, %7450
  %7452 = zext i1 %7451 to i8
  store i8 %7452, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %7453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7454 = select i1 %7451, i64 %7435, i64 %7437
  store i64 %7454, i64* %7453, align 8, !tbaa !2428
  %7455 = load i8, i8* %BRANCH_TAKEN
  %7456 = icmp eq i8 %7455, 1
  br i1 %7456, label %block_400aad, label %block_400a36

block_401028:                                     ; preds = %block_400fcb
  %7457 = load i64, i64* %PC
  %7458 = add i64 %7457, 5
  %7459 = load i64, i64* %PC
  %7460 = add i64 %7459, 5
  store i64 %7460, i64* %PC
  %7461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7458, i64* %7461, align 8, !tbaa !2428
  %7462 = load i64, i64* %RBP
  %7463 = sub i64 %7462, 4
  %7464 = load i64, i64* %PC
  %7465 = add i64 %7464, 3
  store i64 %7465, i64* %PC
  %7466 = inttoptr i64 %7463 to i32*
  %7467 = load i32, i32* %7466
  %7468 = zext i32 %7467 to i64
  store i64 %7468, i64* %RAX, align 8, !tbaa !2428
  %7469 = load i64, i64* %RAX
  %7470 = load i64, i64* %PC
  %7471 = add i64 %7470, 3
  store i64 %7471, i64* %PC
  %7472 = trunc i64 %7469 to i32
  %7473 = add i32 1, %7472
  %7474 = zext i32 %7473 to i64
  store i64 %7474, i64* %RAX, align 8, !tbaa !2428
  %7475 = icmp ult i32 %7473, %7472
  %7476 = icmp ult i32 %7473, 1
  %7477 = or i1 %7475, %7476
  %7478 = zext i1 %7477 to i8
  %7479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7478, i8* %7479, align 1, !tbaa !2433
  %7480 = and i32 %7473, 255
  %7481 = call i32 @llvm.ctpop.i32(i32 %7480) #16
  %7482 = trunc i32 %7481 to i8
  %7483 = and i8 %7482, 1
  %7484 = xor i8 %7483, 1
  %7485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7484, i8* %7485, align 1, !tbaa !2447
  %7486 = xor i64 1, %7469
  %7487 = trunc i64 %7486 to i32
  %7488 = xor i32 %7487, %7473
  %7489 = lshr i32 %7488, 4
  %7490 = trunc i32 %7489 to i8
  %7491 = and i8 %7490, 1
  %7492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7491, i8* %7492, align 1, !tbaa !2448
  %7493 = icmp eq i32 %7473, 0
  %7494 = zext i1 %7493 to i8
  %7495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7494, i8* %7495, align 1, !tbaa !2449
  %7496 = lshr i32 %7473, 31
  %7497 = trunc i32 %7496 to i8
  %7498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7497, i8* %7498, align 1, !tbaa !2450
  %7499 = lshr i32 %7472, 31
  %7500 = xor i32 %7496, %7499
  %7501 = add nuw nsw i32 %7500, %7496
  %7502 = icmp eq i32 %7501, 2
  %7503 = zext i1 %7502 to i8
  %7504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7503, i8* %7504, align 1, !tbaa !2451
  %7505 = load i64, i64* %RBP
  %7506 = sub i64 %7505, 4
  %7507 = load i32, i32* %EAX
  %7508 = zext i32 %7507 to i64
  %7509 = load i64, i64* %PC
  %7510 = add i64 %7509, 3
  store i64 %7510, i64* %PC
  %7511 = inttoptr i64 %7506 to i32*
  store i32 %7507, i32* %7511
  %7512 = load i64, i64* %PC
  %7513 = sub i64 %7512, 124
  %7514 = load i64, i64* %PC
  %7515 = add i64 %7514, 5
  store i64 %7515, i64* %PC
  %7516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7513, i64* %7516, align 8, !tbaa !2428
  br label %block_400fba

block_400eec:                                     ; preds = %block_400e8f
  %7517 = load i64, i64* %PC
  %7518 = add i64 %7517, 5
  %7519 = load i64, i64* %PC
  %7520 = add i64 %7519, 5
  store i64 %7520, i64* %PC
  %7521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7518, i64* %7521, align 8, !tbaa !2428
  %7522 = load i64, i64* %RBP
  %7523 = sub i64 %7522, 4
  %7524 = load i64, i64* %PC
  %7525 = add i64 %7524, 3
  store i64 %7525, i64* %PC
  %7526 = inttoptr i64 %7523 to i32*
  %7527 = load i32, i32* %7526
  %7528 = zext i32 %7527 to i64
  store i64 %7528, i64* %RAX, align 8, !tbaa !2428
  %7529 = load i64, i64* %RAX
  %7530 = load i64, i64* %PC
  %7531 = add i64 %7530, 3
  store i64 %7531, i64* %PC
  %7532 = trunc i64 %7529 to i32
  %7533 = add i32 1, %7532
  %7534 = zext i32 %7533 to i64
  store i64 %7534, i64* %RAX, align 8, !tbaa !2428
  %7535 = icmp ult i32 %7533, %7532
  %7536 = icmp ult i32 %7533, 1
  %7537 = or i1 %7535, %7536
  %7538 = zext i1 %7537 to i8
  %7539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7538, i8* %7539, align 1, !tbaa !2433
  %7540 = and i32 %7533, 255
  %7541 = call i32 @llvm.ctpop.i32(i32 %7540) #16
  %7542 = trunc i32 %7541 to i8
  %7543 = and i8 %7542, 1
  %7544 = xor i8 %7543, 1
  %7545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7544, i8* %7545, align 1, !tbaa !2447
  %7546 = xor i64 1, %7529
  %7547 = trunc i64 %7546 to i32
  %7548 = xor i32 %7547, %7533
  %7549 = lshr i32 %7548, 4
  %7550 = trunc i32 %7549 to i8
  %7551 = and i8 %7550, 1
  %7552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7551, i8* %7552, align 1, !tbaa !2448
  %7553 = icmp eq i32 %7533, 0
  %7554 = zext i1 %7553 to i8
  %7555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7554, i8* %7555, align 1, !tbaa !2449
  %7556 = lshr i32 %7533, 31
  %7557 = trunc i32 %7556 to i8
  %7558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7557, i8* %7558, align 1, !tbaa !2450
  %7559 = lshr i32 %7532, 31
  %7560 = xor i32 %7556, %7559
  %7561 = add nuw nsw i32 %7560, %7556
  %7562 = icmp eq i32 %7561, 2
  %7563 = zext i1 %7562 to i8
  %7564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7563, i8* %7564, align 1, !tbaa !2451
  %7565 = load i64, i64* %RBP
  %7566 = sub i64 %7565, 4
  %7567 = load i32, i32* %EAX
  %7568 = zext i32 %7567 to i64
  %7569 = load i64, i64* %PC
  %7570 = add i64 %7569, 3
  store i64 %7570, i64* %PC
  %7571 = inttoptr i64 %7566 to i32*
  store i32 %7567, i32* %7571
  %7572 = load i64, i64* %PC
  %7573 = sub i64 %7572, 124
  %7574 = load i64, i64* %PC
  %7575 = add i64 %7574, 5
  store i64 %7575, i64* %PC
  %7576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7573, i64* %7576, align 8, !tbaa !2428
  br label %block_400e7e

block_400c21:                                     ; preds = %block_400c17
  %7577 = load i64, i64* %RBP
  %7578 = sub i64 %7577, 12
  %7579 = load i64, i64* %PC
  %7580 = add i64 %7579, 7
  store i64 %7580, i64* %PC
  %7581 = inttoptr i64 %7578 to i32*
  store i32 0, i32* %7581
  br label %block_400c28

block_40121d:                                     ; preds = %block_401208
  %7582 = add i64 %8117, 10
  store i64 %7582, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401360__rodata_type* @seg_401360__rodata to i64), i64 22), i64* %RDI, align 8, !tbaa !2428
  %7583 = load i64, i64* %PC
  %7584 = add i64 %7583, 2
  store i64 %7584, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %7585 = load i64, i64* %PC
  %7586 = sub i64 %7585, 3609
  %7587 = load i64, i64* %PC
  %7588 = add i64 %7587, 5
  %7589 = load i64, i64* %PC
  %7590 = add i64 %7589, 5
  store i64 %7590, i64* %PC
  %7591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7592 = load i64, i64* %7591, align 8, !tbaa !2428
  %7593 = add i64 %7592, -8
  %7594 = inttoptr i64 %7593 to i64*
  store i64 %7588, i64* %7594
  store i64 %7593, i64* %7591, align 8, !tbaa !2428
  %7595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7586, i64* %7595, align 8, !tbaa !2428
  %7596 = load i64, i64* %PC
  %7597 = call %struct.Memory* @ext_619238_printf(%struct.State* %0, i64 %7596, %struct.Memory* %8078)
  %7598 = load i64, i64* %RBP
  %7599 = sub i64 %7598, 24
  %7600 = load i32, i32* %EAX
  %7601 = zext i32 %7600 to i64
  %7602 = load i64, i64* %PC
  %7603 = add i64 %7602, 3
  store i64 %7603, i64* %PC
  %7604 = inttoptr i64 %7599 to i32*
  store i32 %7600, i32* %7604
  %7605 = load i64, i64* %PC
  %7606 = add i64 %7605, 47
  %7607 = load i64, i64* %PC
  %7608 = add i64 %7607, 5
  store i64 %7608, i64* %PC
  %7609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7606, i64* %7609, align 8, !tbaa !2428
  br label %block_401260

block_400c17:                                     ; preds = %block_400c10, %block_400c61
  %MEMORY.41 = phi %struct.Memory* [ %MEMORY.46, %block_400c10 ], [ %MEMORY.44, %block_400c61 ]
  %7610 = load i64, i64* %RBP
  %7611 = sub i64 %7610, 8
  %7612 = load i64, i64* %PC
  %7613 = add i64 %7612, 4
  store i64 %7613, i64* %PC
  %7614 = inttoptr i64 %7611 to i32*
  %7615 = load i32, i32* %7614
  %7616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7616, align 1, !tbaa !2433
  %7617 = and i32 %7615, 255
  %7618 = call i32 @llvm.ctpop.i32(i32 %7617) #16
  %7619 = trunc i32 %7618 to i8
  %7620 = and i8 %7619, 1
  %7621 = xor i8 %7620, 1
  %7622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7621, i8* %7622, align 1, !tbaa !2447
  %7623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7623, align 1, !tbaa !2448
  %7624 = icmp eq i32 %7615, 0
  %7625 = zext i1 %7624 to i8
  %7626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7625, i8* %7626, align 1, !tbaa !2449
  %7627 = lshr i32 %7615, 31
  %7628 = trunc i32 %7627 to i8
  %7629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7628, i8* %7629, align 1, !tbaa !2450
  %7630 = lshr i32 %7615, 31
  %7631 = xor i32 %7627, %7630
  %7632 = add nuw nsw i32 %7631, %7630
  %7633 = icmp eq i32 %7632, 2
  %7634 = zext i1 %7633 to i8
  %7635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7634, i8* %7635, align 1, !tbaa !2451
  %7636 = load i64, i64* %PC
  %7637 = add i64 %7636, 89
  %7638 = load i64, i64* %PC
  %7639 = add i64 %7638, 6
  %7640 = load i64, i64* %PC
  %7641 = add i64 %7640, 6
  store i64 %7641, i64* %PC
  %7642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7643 = load i8, i8* %7642, align 1, !tbaa !2449
  %7644 = icmp eq i8 %7643, 0
  %7645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7646 = load i8, i8* %7645, align 1, !tbaa !2450
  %7647 = icmp ne i8 %7646, 0
  %7648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7649 = load i8, i8* %7648, align 1, !tbaa !2451
  %7650 = icmp ne i8 %7649, 0
  %7651 = xor i1 %7647, %7650
  %7652 = xor i1 %7651, true
  %7653 = and i1 %7644, %7652
  %7654 = zext i1 %7653 to i8
  store i8 %7654, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %7655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7656 = select i1 %7653, i64 %7637, i64 %7639
  store i64 %7656, i64* %7655, align 8, !tbaa !2428
  %7657 = load i8, i8* %BRANCH_TAKEN
  %7658 = icmp eq i8 %7657, 1
  br i1 %7658, label %block_400c74, label %block_400c21

block_401015:                                     ; preds = %block_400fdc
  %7659 = load i64, i64* %PC
  %7660 = add i64 %7659, 5
  %7661 = load i64, i64* %PC
  %7662 = add i64 %7661, 5
  store i64 %7662, i64* %PC
  %7663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7660, i64* %7663, align 8, !tbaa !2428
  %7664 = load i64, i64* %RBP
  %7665 = sub i64 %7664, 8
  %7666 = load i64, i64* %PC
  %7667 = add i64 %7666, 3
  store i64 %7667, i64* %PC
  %7668 = inttoptr i64 %7665 to i32*
  %7669 = load i32, i32* %7668
  %7670 = zext i32 %7669 to i64
  store i64 %7670, i64* %RAX, align 8, !tbaa !2428
  %7671 = load i64, i64* %RAX
  %7672 = load i64, i64* %PC
  %7673 = add i64 %7672, 3
  store i64 %7673, i64* %PC
  %7674 = trunc i64 %7671 to i32
  %7675 = add i32 1, %7674
  %7676 = zext i32 %7675 to i64
  store i64 %7676, i64* %RAX, align 8, !tbaa !2428
  %7677 = icmp ult i32 %7675, %7674
  %7678 = icmp ult i32 %7675, 1
  %7679 = or i1 %7677, %7678
  %7680 = zext i1 %7679 to i8
  %7681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7680, i8* %7681, align 1, !tbaa !2433
  %7682 = and i32 %7675, 255
  %7683 = call i32 @llvm.ctpop.i32(i32 %7682) #16
  %7684 = trunc i32 %7683 to i8
  %7685 = and i8 %7684, 1
  %7686 = xor i8 %7685, 1
  %7687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7686, i8* %7687, align 1, !tbaa !2447
  %7688 = xor i64 1, %7671
  %7689 = trunc i64 %7688 to i32
  %7690 = xor i32 %7689, %7675
  %7691 = lshr i32 %7690, 4
  %7692 = trunc i32 %7691 to i8
  %7693 = and i8 %7692, 1
  %7694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7693, i8* %7694, align 1, !tbaa !2448
  %7695 = icmp eq i32 %7675, 0
  %7696 = zext i1 %7695 to i8
  %7697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7696, i8* %7697, align 1, !tbaa !2449
  %7698 = lshr i32 %7675, 31
  %7699 = trunc i32 %7698 to i8
  %7700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7699, i8* %7700, align 1, !tbaa !2450
  %7701 = lshr i32 %7674, 31
  %7702 = xor i32 %7698, %7701
  %7703 = add nuw nsw i32 %7702, %7698
  %7704 = icmp eq i32 %7703, 2
  %7705 = zext i1 %7704 to i8
  %7706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7705, i8* %7706, align 1, !tbaa !2451
  %7707 = load i64, i64* %RBP
  %7708 = sub i64 %7707, 8
  %7709 = load i32, i32* %EAX
  %7710 = zext i32 %7709 to i64
  %7711 = load i64, i64* %PC
  %7712 = add i64 %7711, 3
  store i64 %7712, i64* %PC
  %7713 = inttoptr i64 %7708 to i32*
  store i32 %7709, i32* %7713
  %7714 = load i64, i64* %PC
  %7715 = sub i64 %7714, 88
  %7716 = load i64, i64* %PC
  %7717 = add i64 %7716, 5
  store i64 %7717, i64* %PC
  %7718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7715, i64* %7718, align 8, !tbaa !2428
  br label %block_400fcb

block_401058:                                     ; preds = %block_4010c6, %block_40103b
  %MEMORY.42 = phi %struct.Memory* [ %MEMORY.2, %block_40103b ], [ %MEMORY.31, %block_4010c6 ]
  %7719 = load i64, i64* %RBP
  %7720 = sub i64 %7719, 4
  %7721 = load i64, i64* %PC
  %7722 = add i64 %7721, 4
  store i64 %7722, i64* %PC
  %7723 = inttoptr i64 %7720 to i32*
  %7724 = load i32, i32* %7723
  %7725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7725, align 1, !tbaa !2433
  %7726 = and i32 %7724, 255
  %7727 = call i32 @llvm.ctpop.i32(i32 %7726) #16
  %7728 = trunc i32 %7727 to i8
  %7729 = and i8 %7728, 1
  %7730 = xor i8 %7729, 1
  %7731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7730, i8* %7731, align 1, !tbaa !2447
  %7732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7732, align 1, !tbaa !2448
  %7733 = icmp eq i32 %7724, 0
  %7734 = zext i1 %7733 to i8
  %7735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7734, i8* %7735, align 1, !tbaa !2449
  %7736 = lshr i32 %7724, 31
  %7737 = trunc i32 %7736 to i8
  %7738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7737, i8* %7738, align 1, !tbaa !2450
  %7739 = lshr i32 %7724, 31
  %7740 = xor i32 %7736, %7739
  %7741 = add nuw nsw i32 %7740, %7739
  %7742 = icmp eq i32 %7741, 2
  %7743 = zext i1 %7742 to i8
  %7744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7743, i8* %7744, align 1, !tbaa !2451
  %7745 = load i64, i64* %PC
  %7746 = add i64 %7745, 125
  %7747 = load i64, i64* %PC
  %7748 = add i64 %7747, 6
  %7749 = load i64, i64* %PC
  %7750 = add i64 %7749, 6
  store i64 %7750, i64* %PC
  %7751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7752 = load i8, i8* %7751, align 1, !tbaa !2449
  %7753 = icmp eq i8 %7752, 0
  %7754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7755 = load i8, i8* %7754, align 1, !tbaa !2450
  %7756 = icmp ne i8 %7755, 0
  %7757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7758 = load i8, i8* %7757, align 1, !tbaa !2451
  %7759 = icmp ne i8 %7758, 0
  %7760 = xor i1 %7756, %7759
  %7761 = xor i1 %7760, true
  %7762 = and i1 %7753, %7761
  %7763 = zext i1 %7762 to i8
  store i8 %7763, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %7764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7765 = select i1 %7762, i64 %7746, i64 %7748
  store i64 %7765, i64* %7764, align 8, !tbaa !2428
  %7766 = load i8, i8* %BRANCH_TAKEN
  %7767 = icmp eq i8 %7766, 1
  br i1 %7767, label %block_4010d9, label %block_401062

block_40125b:                                     ; preds = %block_401236, %block_401247
  %MEMORY.43 = phi %struct.Memory* [ %8078, %block_401236 ], [ %690, %block_401247 ]
  %7768 = load i64, i64* %PC
  %7769 = add i64 %7768, 5
  %7770 = load i64, i64* %PC
  %7771 = add i64 %7770, 5
  store i64 %7771, i64* %PC
  %7772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7769, i64* %7772, align 8, !tbaa !2428
  br label %block_401260

block_400c10:                                     ; preds = %block_400c06
  %7773 = load i64, i64* %RBP
  %7774 = sub i64 %7773, 8
  %7775 = load i64, i64* %PC
  %7776 = add i64 %7775, 7
  store i64 %7776, i64* %PC
  %7777 = inttoptr i64 %7774 to i32*
  store i32 0, i32* %7777
  br label %block_400c17

block_400c28:                                     ; preds = %block_400c21, %block_400c32
  %MEMORY.44 = phi %struct.Memory* [ %MEMORY.41, %block_400c21 ], [ %MEMORY.44, %block_400c32 ]
  %7778 = load i64, i64* %RBP
  %7779 = sub i64 %7778, 12
  %7780 = load i64, i64* %PC
  %7781 = add i64 %7780, 4
  store i64 %7781, i64* %PC
  %7782 = inttoptr i64 %7779 to i32*
  %7783 = load i32, i32* %7782
  %7784 = sub i32 %7783, 1
  %7785 = icmp ult i32 %7783, 1
  %7786 = zext i1 %7785 to i8
  %7787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7786, i8* %7787, align 1, !tbaa !2433
  %7788 = and i32 %7784, 255
  %7789 = call i32 @llvm.ctpop.i32(i32 %7788) #16
  %7790 = trunc i32 %7789 to i8
  %7791 = and i8 %7790, 1
  %7792 = xor i8 %7791, 1
  %7793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7792, i8* %7793, align 1, !tbaa !2447
  %7794 = xor i32 %7783, 1
  %7795 = xor i32 %7794, %7784
  %7796 = lshr i32 %7795, 4
  %7797 = trunc i32 %7796 to i8
  %7798 = and i8 %7797, 1
  %7799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7798, i8* %7799, align 1, !tbaa !2448
  %7800 = icmp eq i32 %7784, 0
  %7801 = zext i1 %7800 to i8
  %7802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7801, i8* %7802, align 1, !tbaa !2449
  %7803 = lshr i32 %7784, 31
  %7804 = trunc i32 %7803 to i8
  %7805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7804, i8* %7805, align 1, !tbaa !2450
  %7806 = lshr i32 %7783, 31
  %7807 = xor i32 %7803, %7806
  %7808 = add nuw nsw i32 %7807, %7806
  %7809 = icmp eq i32 %7808, 2
  %7810 = zext i1 %7809 to i8
  %7811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7810, i8* %7811, align 1, !tbaa !2451
  %7812 = load i64, i64* %PC
  %7813 = add i64 %7812, 53
  %7814 = load i64, i64* %PC
  %7815 = add i64 %7814, 6
  %7816 = load i64, i64* %PC
  %7817 = add i64 %7816, 6
  store i64 %7817, i64* %PC
  %7818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7819 = load i8, i8* %7818, align 1, !tbaa !2449
  %7820 = icmp eq i8 %7819, 0
  %7821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7822 = load i8, i8* %7821, align 1, !tbaa !2450
  %7823 = icmp ne i8 %7822, 0
  %7824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7825 = load i8, i8* %7824, align 1, !tbaa !2451
  %7826 = icmp ne i8 %7825, 0
  %7827 = xor i1 %7823, %7826
  %7828 = xor i1 %7827, true
  %7829 = and i1 %7820, %7828
  %7830 = zext i1 %7829 to i8
  store i8 %7830, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %7831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7832 = select i1 %7829, i64 %7813, i64 %7815
  store i64 %7832, i64* %7831, align 8, !tbaa !2428
  %7833 = load i8, i8* %BRANCH_TAKEN
  %7834 = icmp eq i8 %7833, 1
  br i1 %7834, label %block_400c61, label %block_400c32

block_400a0f:                                     ; preds = %block_40098e
  %7835 = load i64, i64* %PC
  %7836 = add i64 %7835, 11
  store i64 %7836, i64* %PC
  store i32 0, i32* bitcast (%class_type* @class to i32*)
  %7837 = load i64, i64* %PC
  %7838 = add i64 %7837, 11
  store i64 %7838, i64* %PC
  store i32 11, i32* bitcast (%piecemax_type* @piecemax to i32*)
  %7839 = load i64, i64* %RBP
  %7840 = sub i64 %7839, 4
  %7841 = load i64, i64* %PC
  %7842 = add i64 %7841, 7
  store i64 %7842, i64* %PC
  %7843 = inttoptr i64 %7840 to i32*
  store i32 0, i32* %7843
  br label %block_400a2c

block_400e0c:                                     ; preds = %block_400e02
  %7844 = load i64, i64* %RBP
  %7845 = sub i64 %7844, 4
  %7846 = load i64, i64* %PC
  %7847 = add i64 %7846, 3
  store i64 %7847, i64* %PC
  %7848 = inttoptr i64 %7845 to i32*
  %7849 = load i32, i32* %7848
  %7850 = zext i32 %7849 to i64
  store i64 %7850, i64* %RAX, align 8, !tbaa !2428
  %7851 = load i64, i64* %RBP
  %7852 = sub i64 %7851, 8
  %7853 = load i64, i64* %PC
  %7854 = add i64 %7853, 3
  store i64 %7854, i64* %PC
  %7855 = inttoptr i64 %7852 to i32*
  %7856 = load i32, i32* %7855
  %7857 = zext i32 %7856 to i64
  store i64 %7857, i64* %RCX, align 8, !tbaa !2428
  %7858 = load i64, i64* %RBP
  %7859 = sub i64 %7858, 12
  %7860 = load i64, i64* %PC
  %7861 = add i64 %7860, 3
  store i64 %7861, i64* %PC
  %7862 = inttoptr i64 %7859 to i32*
  %7863 = load i32, i32* %7862
  %7864 = zext i32 %7863 to i64
  store i64 %7864, i64* %RDX, align 8, !tbaa !2428
  %7865 = load i64, i64* %RDX
  %7866 = load i64, i64* %PC
  %7867 = add i64 %7866, 3
  store i64 %7867, i64* %PC
  %7868 = and i64 %7865, 4294967295
  %7869 = shl i64 %7868, 2
  %7870 = trunc i64 %7869 to i32
  %7871 = icmp slt i32 %7870, 0
  %7872 = shl i32 %7870, 1
  %7873 = zext i32 %7872 to i64
  store i64 %7873, i64* %RDX, align 8, !tbaa !2428
  %7874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7875 = zext i1 %7871 to i8
  store i8 %7875, i8* %7874, align 1, !tbaa !2432
  %7876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7877 = and i32 %7872, 254
  %7878 = call i32 @llvm.ctpop.i32(i32 %7877) #16
  %7879 = trunc i32 %7878 to i8
  %7880 = and i8 %7879, 1
  %7881 = xor i8 %7880, 1
  store i8 %7881, i8* %7876, align 1, !tbaa !2432
  %7882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7882, align 1, !tbaa !2432
  %7883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7884 = icmp eq i32 %7872, 0
  %7885 = zext i1 %7884 to i8
  store i8 %7885, i8* %7883, align 1, !tbaa !2432
  %7886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7887 = lshr i32 %7872, 31
  %7888 = trunc i32 %7887 to i8
  store i8 %7888, i8* %7886, align 1, !tbaa !2432
  %7889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7889, align 1, !tbaa !2432
  %7890 = load i64, i64* %RCX
  %7891 = load i32, i32* %EDX
  %7892 = zext i32 %7891 to i64
  %7893 = load i64, i64* %PC
  %7894 = add i64 %7893, 2
  store i64 %7894, i64* %PC
  %7895 = trunc i64 %7890 to i32
  %7896 = add i32 %7891, %7895
  %7897 = zext i32 %7896 to i64
  store i64 %7897, i64* %RCX, align 8, !tbaa !2428
  %7898 = icmp ult i32 %7896, %7895
  %7899 = icmp ult i32 %7896, %7891
  %7900 = or i1 %7898, %7899
  %7901 = zext i1 %7900 to i8
  %7902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7901, i8* %7902, align 1, !tbaa !2433
  %7903 = and i32 %7896, 255
  %7904 = call i32 @llvm.ctpop.i32(i32 %7903) #16
  %7905 = trunc i32 %7904 to i8
  %7906 = and i8 %7905, 1
  %7907 = xor i8 %7906, 1
  %7908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7907, i8* %7908, align 1, !tbaa !2447
  %7909 = xor i64 %7892, %7890
  %7910 = trunc i64 %7909 to i32
  %7911 = xor i32 %7910, %7896
  %7912 = lshr i32 %7911, 4
  %7913 = trunc i32 %7912 to i8
  %7914 = and i8 %7913, 1
  %7915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7914, i8* %7915, align 1, !tbaa !2448
  %7916 = icmp eq i32 %7896, 0
  %7917 = zext i1 %7916 to i8
  %7918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7917, i8* %7918, align 1, !tbaa !2449
  %7919 = lshr i32 %7896, 31
  %7920 = trunc i32 %7919 to i8
  %7921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7920, i8* %7921, align 1, !tbaa !2450
  %7922 = lshr i32 %7895, 31
  %7923 = lshr i32 %7891, 31
  %7924 = xor i32 %7919, %7922
  %7925 = xor i32 %7919, %7923
  %7926 = add nuw nsw i32 %7924, %7925
  %7927 = icmp eq i32 %7926, 2
  %7928 = zext i1 %7927 to i8
  %7929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7928, i8* %7929, align 1, !tbaa !2451
  %7930 = load i64, i64* %RCX
  %7931 = load i64, i64* %PC
  %7932 = add i64 %7931, 3
  store i64 %7932, i64* %PC
  %7933 = and i64 %7930, 4294967295
  %7934 = shl i64 %7933, 2
  %7935 = trunc i64 %7934 to i32
  %7936 = icmp slt i32 %7935, 0
  %7937 = shl i32 %7935, 1
  %7938 = zext i32 %7937 to i64
  store i64 %7938, i64* %RCX, align 8, !tbaa !2428
  %7939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7940 = zext i1 %7936 to i8
  store i8 %7940, i8* %7939, align 1, !tbaa !2432
  %7941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7942 = and i32 %7937, 254
  %7943 = call i32 @llvm.ctpop.i32(i32 %7942) #16
  %7944 = trunc i32 %7943 to i8
  %7945 = and i8 %7944, 1
  %7946 = xor i8 %7945, 1
  store i8 %7946, i8* %7941, align 1, !tbaa !2432
  %7947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7947, align 1, !tbaa !2432
  %7948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7949 = icmp eq i32 %7937, 0
  %7950 = zext i1 %7949 to i8
  store i8 %7950, i8* %7948, align 1, !tbaa !2432
  %7951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7952 = lshr i32 %7937, 31
  %7953 = trunc i32 %7952 to i8
  store i8 %7953, i8* %7951, align 1, !tbaa !2432
  %7954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7954, align 1, !tbaa !2432
  %7955 = load i64, i64* %RAX
  %7956 = load i32, i32* %ECX
  %7957 = zext i32 %7956 to i64
  %7958 = load i64, i64* %PC
  %7959 = add i64 %7958, 2
  store i64 %7959, i64* %PC
  %7960 = trunc i64 %7955 to i32
  %7961 = add i32 %7956, %7960
  %7962 = zext i32 %7961 to i64
  store i64 %7962, i64* %RAX, align 8, !tbaa !2428
  %7963 = icmp ult i32 %7961, %7960
  %7964 = icmp ult i32 %7961, %7956
  %7965 = or i1 %7963, %7964
  %7966 = zext i1 %7965 to i8
  %7967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7966, i8* %7967, align 1, !tbaa !2433
  %7968 = and i32 %7961, 255
  %7969 = call i32 @llvm.ctpop.i32(i32 %7968) #16
  %7970 = trunc i32 %7969 to i8
  %7971 = and i8 %7970, 1
  %7972 = xor i8 %7971, 1
  %7973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7972, i8* %7973, align 1, !tbaa !2447
  %7974 = xor i64 %7957, %7955
  %7975 = trunc i64 %7974 to i32
  %7976 = xor i32 %7975, %7961
  %7977 = lshr i32 %7976, 4
  %7978 = trunc i32 %7977 to i8
  %7979 = and i8 %7978, 1
  %7980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7979, i8* %7980, align 1, !tbaa !2448
  %7981 = icmp eq i32 %7961, 0
  %7982 = zext i1 %7981 to i8
  %7983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7982, i8* %7983, align 1, !tbaa !2449
  %7984 = lshr i32 %7961, 31
  %7985 = trunc i32 %7984 to i8
  %7986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7985, i8* %7986, align 1, !tbaa !2450
  %7987 = lshr i32 %7960, 31
  %7988 = lshr i32 %7956, 31
  %7989 = xor i32 %7984, %7987
  %7990 = xor i32 %7984, %7988
  %7991 = add nuw nsw i32 %7989, %7990
  %7992 = icmp eq i32 %7991, 2
  %7993 = zext i1 %7992 to i8
  %7994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7993, i8* %7994, align 1, !tbaa !2451
  %7995 = load i32, i32* %EAX
  %7996 = zext i32 %7995 to i64
  %7997 = load i64, i64* %PC
  %7998 = add i64 %7997, 3
  store i64 %7998, i64* %PC
  %7999 = shl i64 %7996, 32
  %8000 = ashr exact i64 %7999, 32
  store i64 %8000, i64* %RSI, align 8, !tbaa !2428
  %8001 = load i64, i64* %RSI
  %8002 = mul i64 %8001, 4
  %8003 = add i64 %8002, add (i64 ptrtoint (%p_type* @p to i64), i64 14336)
  %8004 = load i64, i64* %PC
  %8005 = add i64 %8004, 11
  store i64 %8005, i64* %PC
  %8006 = inttoptr i64 %8003 to i32*
  store i32 1, i32* %8006
  %8007 = load i64, i64* %RBP
  %8008 = sub i64 %8007, 12
  %8009 = load i64, i64* %PC
  %8010 = add i64 %8009, 3
  store i64 %8010, i64* %PC
  %8011 = inttoptr i64 %8008 to i32*
  %8012 = load i32, i32* %8011
  %8013 = zext i32 %8012 to i64
  store i64 %8013, i64* %RAX, align 8, !tbaa !2428
  %8014 = load i64, i64* %RAX
  %8015 = load i64, i64* %PC
  %8016 = add i64 %8015, 3
  store i64 %8016, i64* %PC
  %8017 = trunc i64 %8014 to i32
  %8018 = add i32 1, %8017
  %8019 = zext i32 %8018 to i64
  store i64 %8019, i64* %RAX, align 8, !tbaa !2428
  %8020 = icmp ult i32 %8018, %8017
  %8021 = icmp ult i32 %8018, 1
  %8022 = or i1 %8020, %8021
  %8023 = zext i1 %8022 to i8
  %8024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8023, i8* %8024, align 1, !tbaa !2433
  %8025 = and i32 %8018, 255
  %8026 = call i32 @llvm.ctpop.i32(i32 %8025) #16
  %8027 = trunc i32 %8026 to i8
  %8028 = and i8 %8027, 1
  %8029 = xor i8 %8028, 1
  %8030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8029, i8* %8030, align 1, !tbaa !2447
  %8031 = xor i64 1, %8014
  %8032 = trunc i64 %8031 to i32
  %8033 = xor i32 %8032, %8018
  %8034 = lshr i32 %8033, 4
  %8035 = trunc i32 %8034 to i8
  %8036 = and i8 %8035, 1
  %8037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8036, i8* %8037, align 1, !tbaa !2448
  %8038 = icmp eq i32 %8018, 0
  %8039 = zext i1 %8038 to i8
  %8040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8039, i8* %8040, align 1, !tbaa !2449
  %8041 = lshr i32 %8018, 31
  %8042 = trunc i32 %8041 to i8
  %8043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8042, i8* %8043, align 1, !tbaa !2450
  %8044 = lshr i32 %8017, 31
  %8045 = xor i32 %8041, %8044
  %8046 = add nuw nsw i32 %8045, %8041
  %8047 = icmp eq i32 %8046, 2
  %8048 = zext i1 %8047 to i8
  %8049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8048, i8* %8049, align 1, !tbaa !2451
  %8050 = load i64, i64* %RBP
  %8051 = sub i64 %8050, 12
  %8052 = load i32, i32* %EAX
  %8053 = zext i32 %8052 to i64
  %8054 = load i64, i64* %PC
  %8055 = add i64 %8054, 3
  store i64 %8055, i64* %PC
  %8056 = inttoptr i64 %8051 to i32*
  store i32 %8052, i32* %8056
  %8057 = load i64, i64* %PC
  %8058 = sub i64 %8057, 52
  %8059 = load i64, i64* %PC
  %8060 = add i64 %8059, 5
  store i64 %8060, i64* %PC
  %8061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8058, i64* %8061, align 8, !tbaa !2428
  br label %block_400e02

block_401208:                                     ; preds = %block_4011f4, %block_4011de
  %MEMORY.45 = phi %struct.Memory* [ %2545, %block_4011f4 ], [ %355, %block_4011de ]
  %8062 = load i64, i64* %PC
  %8063 = add i64 %8062, 7
  store i64 %8063, i64* %PC
  %8064 = load i32, i32* bitcast (%n_type* @n to i32*)
  %8065 = zext i32 %8064 to i64
  store i64 %8065, i64* %RDI, align 8, !tbaa !2428
  %8066 = load i64, i64* %PC
  %8067 = sub i64 %8066, 2687
  %8068 = load i64, i64* %PC
  %8069 = add i64 %8068, 5
  %8070 = load i64, i64* %PC
  %8071 = add i64 %8070, 5
  store i64 %8071, i64* %PC
  %8072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8073 = load i64, i64* %8072, align 8, !tbaa !2428
  %8074 = add i64 %8073, -8
  %8075 = inttoptr i64 %8074 to i64*
  store i64 %8069, i64* %8075
  store i64 %8074, i64* %8072, align 8, !tbaa !2428
  %8076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8067, i64* %8076, align 8, !tbaa !2428
  %8077 = load i64, i64* %PC
  %8078 = call %struct.Memory* @sub_400790_Trial(%struct.State* %0, i64 %8077, %struct.Memory* %MEMORY.45)
  %8079 = load i32, i32* %EAX
  %8080 = zext i32 %8079 to i64
  %8081 = load i64, i64* %PC
  %8082 = add i64 %8081, 3
  store i64 %8082, i64* %PC
  %8083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8083, align 1, !tbaa !2433
  %8084 = and i32 %8079, 255
  %8085 = call i32 @llvm.ctpop.i32(i32 %8084) #16
  %8086 = trunc i32 %8085 to i8
  %8087 = and i8 %8086, 1
  %8088 = xor i8 %8087, 1
  %8089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8088, i8* %8089, align 1, !tbaa !2447
  %8090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8090, align 1, !tbaa !2448
  %8091 = icmp eq i32 %8079, 0
  %8092 = zext i1 %8091 to i8
  %8093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8092, i8* %8093, align 1, !tbaa !2449
  %8094 = lshr i32 %8079, 31
  %8095 = trunc i32 %8094 to i8
  %8096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8095, i8* %8096, align 1, !tbaa !2450
  %8097 = lshr i32 %8079, 31
  %8098 = xor i32 %8094, %8097
  %8099 = add nuw nsw i32 %8098, %8097
  %8100 = icmp eq i32 %8099, 2
  %8101 = zext i1 %8100 to i8
  %8102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8101, i8* %8102, align 1, !tbaa !2451
  %8103 = load i64, i64* %PC
  %8104 = add i64 %8103, 31
  %8105 = load i64, i64* %PC
  %8106 = add i64 %8105, 6
  %8107 = load i64, i64* %PC
  %8108 = add i64 %8107, 6
  store i64 %8108, i64* %PC
  %8109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8110 = load i8, i8* %8109, align 1, !tbaa !2449
  %8111 = icmp eq i8 %8110, 0
  %8112 = zext i1 %8111 to i8
  store i8 %8112, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %8113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8114 = select i1 %8111, i64 %8104, i64 %8106
  store i64 %8114, i64* %8113, align 8, !tbaa !2428
  %8115 = load i8, i8* %BRANCH_TAKEN
  %8116 = icmp eq i8 %8115, 1
  %8117 = load i64, i64* %PC
  br i1 %8116, label %block_401236, label %block_40121d

block_400c06:                                     ; preds = %block_400be9, %block_400c74
  %MEMORY.46 = phi %struct.Memory* [ %MEMORY.11, %block_400be9 ], [ %MEMORY.41, %block_400c74 ]
  %8118 = load i64, i64* %RBP
  %8119 = sub i64 %8118, 4
  %8120 = load i64, i64* %PC
  %8121 = add i64 %8120, 4
  store i64 %8121, i64* %PC
  %8122 = inttoptr i64 %8119 to i32*
  %8123 = load i32, i32* %8122
  %8124 = sub i32 %8123, 3
  %8125 = icmp ult i32 %8123, 3
  %8126 = zext i1 %8125 to i8
  %8127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8126, i8* %8127, align 1, !tbaa !2433
  %8128 = and i32 %8124, 255
  %8129 = call i32 @llvm.ctpop.i32(i32 %8128) #16
  %8130 = trunc i32 %8129 to i8
  %8131 = and i8 %8130, 1
  %8132 = xor i8 %8131, 1
  %8133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8132, i8* %8133, align 1, !tbaa !2447
  %8134 = xor i32 %8123, 3
  %8135 = xor i32 %8134, %8124
  %8136 = lshr i32 %8135, 4
  %8137 = trunc i32 %8136 to i8
  %8138 = and i8 %8137, 1
  %8139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8138, i8* %8139, align 1, !tbaa !2448
  %8140 = icmp eq i32 %8124, 0
  %8141 = zext i1 %8140 to i8
  %8142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8141, i8* %8142, align 1, !tbaa !2449
  %8143 = lshr i32 %8124, 31
  %8144 = trunc i32 %8143 to i8
  %8145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8144, i8* %8145, align 1, !tbaa !2450
  %8146 = lshr i32 %8123, 31
  %8147 = xor i32 %8143, %8146
  %8148 = add nuw nsw i32 %8147, %8146
  %8149 = icmp eq i32 %8148, 2
  %8150 = zext i1 %8149 to i8
  %8151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8150, i8* %8151, align 1, !tbaa !2451
  %8152 = load i64, i64* %PC
  %8153 = add i64 %8152, 125
  %8154 = load i64, i64* %PC
  %8155 = add i64 %8154, 6
  %8156 = load i64, i64* %PC
  %8157 = add i64 %8156, 6
  store i64 %8157, i64* %PC
  %8158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8159 = load i8, i8* %8158, align 1, !tbaa !2449
  %8160 = icmp eq i8 %8159, 0
  %8161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8162 = load i8, i8* %8161, align 1, !tbaa !2450
  %8163 = icmp ne i8 %8162, 0
  %8164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8165 = load i8, i8* %8164, align 1, !tbaa !2451
  %8166 = icmp ne i8 %8165, 0
  %8167 = xor i1 %8163, %8166
  %8168 = xor i1 %8167, true
  %8169 = and i1 %8160, %8168
  %8170 = zext i1 %8169 to i8
  store i8 %8170, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %8171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8172 = select i1 %8169, i64 %8153, i64 %8155
  store i64 %8172, i64* %8171, align 8, !tbaa !2428
  %8173 = load i8, i8* %BRANCH_TAKEN
  %8174 = icmp eq i8 %8173, 1
  br i1 %8174, label %block_400c87, label %block_400c10

block_400be9:                                     ; preds = %block_400b68
  %8175 = load i64, i64* %PC
  %8176 = add i64 %8175, 11
  store i64 %8176, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 12) to i32*)
  %8177 = load i64, i64* %PC
  %8178 = add i64 %8177, 11
  store i64 %8178, i64* %PC
  store i32 25, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 12) to i32*)
  %8179 = load i64, i64* %RBP
  %8180 = sub i64 %8179, 4
  %8181 = load i64, i64* %PC
  %8182 = add i64 %8181, 7
  store i64 %8182, i64* %PC
  %8183 = inttoptr i64 %8180 to i32*
  store i32 0, i32* %8183
  br label %block_400c06

block_400e02:                                     ; preds = %block_400e0c, %block_400dfb
  %MEMORY.47 = phi %struct.Memory* [ %MEMORY.15, %block_400dfb ], [ %MEMORY.47, %block_400e0c ]
  %8184 = load i64, i64* %RBP
  %8185 = sub i64 %8184, 12
  %8186 = load i64, i64* %PC
  %8187 = add i64 %8186, 4
  store i64 %8187, i64* %PC
  %8188 = inttoptr i64 %8185 to i32*
  %8189 = load i32, i32* %8188
  %8190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8190, align 1, !tbaa !2433
  %8191 = and i32 %8189, 255
  %8192 = call i32 @llvm.ctpop.i32(i32 %8191) #16
  %8193 = trunc i32 %8192 to i8
  %8194 = and i8 %8193, 1
  %8195 = xor i8 %8194, 1
  %8196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8195, i8* %8196, align 1, !tbaa !2447
  %8197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8197, align 1, !tbaa !2448
  %8198 = icmp eq i32 %8189, 0
  %8199 = zext i1 %8198 to i8
  %8200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8199, i8* %8200, align 1, !tbaa !2449
  %8201 = lshr i32 %8189, 31
  %8202 = trunc i32 %8201 to i8
  %8203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8202, i8* %8203, align 1, !tbaa !2450
  %8204 = lshr i32 %8189, 31
  %8205 = xor i32 %8201, %8204
  %8206 = add nuw nsw i32 %8205, %8204
  %8207 = icmp eq i32 %8206, 2
  %8208 = zext i1 %8207 to i8
  %8209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8208, i8* %8209, align 1, !tbaa !2451
  %8210 = load i64, i64* %PC
  %8211 = add i64 %8210, 53
  %8212 = load i64, i64* %PC
  %8213 = add i64 %8212, 6
  %8214 = load i64, i64* %PC
  %8215 = add i64 %8214, 6
  store i64 %8215, i64* %PC
  %8216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8217 = load i8, i8* %8216, align 1, !tbaa !2449
  %8218 = icmp eq i8 %8217, 0
  %8219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8220 = load i8, i8* %8219, align 1, !tbaa !2450
  %8221 = icmp ne i8 %8220, 0
  %8222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8223 = load i8, i8* %8222, align 1, !tbaa !2451
  %8224 = icmp ne i8 %8223, 0
  %8225 = xor i1 %8221, %8224
  %8226 = xor i1 %8225, true
  %8227 = and i1 %8218, %8226
  %8228 = zext i1 %8227 to i8
  store i8 %8228, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %8229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8230 = select i1 %8227, i64 %8211, i64 %8213
  store i64 %8230, i64* %8229, align 8, !tbaa !2428
  %8231 = load i8, i8* %BRANCH_TAKEN
  %8232 = icmp eq i8 %8231, 1
  br i1 %8232, label %block_400e3b, label %block_400e0c
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400500_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400500;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400500_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400500_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4004d0___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4004d0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004d0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401350___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401350;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401350___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401350___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4012e0___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4012e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4012e0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4012e0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4012a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4012a0_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_619230___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_619238_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Remove() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4006f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @Remove_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4006f0_Remove(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Puzzle() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400860;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @Puzzle_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400860_Puzzle(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Place() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400600;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @Place_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400600_Place(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Trial() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400790;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @Trial_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400790_Trial(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401354;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401354__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Initrand() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400510;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @Initrand_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400510_Initrand(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4003e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4003e0__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Fit() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400570;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @14, void ()** @2)
  ret void
}

define internal %struct.Memory* @Fit_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400570_Fit(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Rand() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400530;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @15, void ()** @2)
  ret void
}

define internal %struct.Memory* @Rand_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400530_Rand(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_4012e0___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_401350___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2430, !2430, i64 0}
!2433 = !{!2434, !2430, i64 2065}
!2434 = !{!"_ZTS5State", !2430, i64 16, !2435, i64 2064, !2430, i64 2080, !2436, i64 2088, !2438, i64 2112, !2440, i64 2208, !2441, i64 2480, !2442, i64 2608, !2443, i64 2736, !2430, i64 2760, !2430, i64 2768, !2444, i64 3280}
!2435 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2436 = !{!"_ZTS8Segments", !2437, i64 0, !2430, i64 2, !2437, i64 4, !2430, i64 6, !2437, i64 8, !2430, i64 10, !2437, i64 12, !2430, i64 14, !2437, i64 16, !2430, i64 18, !2437, i64 20, !2430, i64 22}
!2437 = !{!"short", !2430, i64 0}
!2438 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2439, i64 8, !2429, i64 16, !2439, i64 24, !2429, i64 32, !2439, i64 40, !2429, i64 48, !2439, i64 56, !2429, i64 64, !2439, i64 72, !2429, i64 80, !2439, i64 88}
!2439 = !{!"_ZTS3Reg", !2430, i64 0}
!2440 = !{!"_ZTS3GPR", !2429, i64 0, !2439, i64 8, !2429, i64 16, !2439, i64 24, !2429, i64 32, !2439, i64 40, !2429, i64 48, !2439, i64 56, !2429, i64 64, !2439, i64 72, !2429, i64 80, !2439, i64 88, !2429, i64 96, !2439, i64 104, !2429, i64 112, !2439, i64 120, !2429, i64 128, !2439, i64 136, !2429, i64 144, !2439, i64 152, !2429, i64 160, !2439, i64 168, !2429, i64 176, !2439, i64 184, !2429, i64 192, !2439, i64 200, !2429, i64 208, !2439, i64 216, !2429, i64 224, !2439, i64 232, !2429, i64 240, !2439, i64 248, !2429, i64 256, !2439, i64 264}
!2441 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2442 = !{!"_ZTS3MMX", !2430, i64 0}
!2443 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2444 = !{!"_ZTS13SegmentCaches", !2445, i64 0, !2445, i64 16, !2445, i64 32, !2445, i64 48, !2445, i64 64, !2445, i64 80}
!2445 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2446, i64 8, !2446, i64 12}
!2446 = !{!"int", !2430, i64 0}
!2447 = !{!2434, !2430, i64 2067}
!2448 = !{!2434, !2430, i64 2069}
!2449 = !{!2434, !2430, i64 2071}
!2450 = !{!2434, !2430, i64 2073}
!2451 = !{!2434, !2430, i64 2077}
