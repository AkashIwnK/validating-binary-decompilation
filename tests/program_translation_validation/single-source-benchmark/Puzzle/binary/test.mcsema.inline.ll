; ModuleID = 'binary/test.mcsema.calls_renamed.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_4003f0__init_type = type <{ [23 x i8] }>
%seg_400410__plt_type = type <{ [32 x i8] }>
%seg_400430__text_type = type <{ [3890 x i8] }>
%seg_401364__fini_type = type <{ [9 x i8] }>
%seg_401370__rodata_type = type <{ [4 x i8], [18 x i8], [19 x i8], [19 x i8], [4 x i8] }>
%seg_4013b0__eh_frame_hdr_type = type <{ [116 x i8] }>
%seg_401428__eh_frame_type = type <{ [448 x i8] }>
%seg_601de0__init_array_type = type <{ i64, i64 }>
%seg_601ff0__got_type = type <{ i64, i64 }>
%seg_602000__got_plt_type = type <{ [24 x i8], i64 }>
%seg_602020__data_type = type <{ [16 x i8] }>
%__bss_start_type = type <{ [16 x i8] }>
%fixed_type = type <{ [16 x i8] }>
%imb_type = type <{ [6724 x i8] }>
%n_type = type <{ [12 x i8] }>
%p_type = type <{ [26624 x i8] }>
%imr_type = type <{ [6736 x i8] }>
%rmr_type = type <{ [6736 x i8] }>
%z_type = type <{ [2064 x i8] }>
%puzzl_type = type <{ [2048 x i8] }>
%rmb_type = type <{ [6724 x i8] }>
%zi_type = type <{ [12 x i8] }>
%cellspace_type = type <{ [152 x i8] }>
%seed_type = type <{ [8 x i8] }>
%movesdone_type = type <{ [16 x i8] }>
%piecemax_type = type <{ [64 x i8] }>
%sortlist_type = type <{ [20004 x i8] }>
%value_type = type <{ [4 x i8] }>
%top_type = type <{ [4 x i8] }>
%floated_type = type <{ [4 x i8] }>
%pctr_type = type <{ [4 x i8] }>
%zr_type = type <{ [12 x i8] }>
%ima_type = type <{ [6724 x i8] }>
%littlest_type = type <{ [12 x i8] }>
%e_type = type <{ [1040 x i8] }>
%freelist_type = type <{ [16 x i8] }>
%w_type = type <{ [2064 x i8] }>
%permarray_type = type <{ [44 x i8] }>
%biggest_type = type <{ [4 x i8] }>
%rma_type = type <{ [6724 x i8] }>
%kount_type = type <{ [4 x i8] }>
%tree_type = type <{ [8 x i8] }>
%stack_type = type <{ [16 x i8] }>
%piececount_type = type <{ [16 x i8] }>
%class_type = type <{ [56 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_4003f0__init = internal constant %seg_4003f0__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\FD\1B \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400410__plt = internal constant %seg_400410__plt_type <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\F2\1B \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400430__text = internal constant %seg_400430__text_type <{ [3890 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0`\13@\00H\C7\C1\F0\12@\00H\C7\C7\B0\12@\00\FF\15\96\1B \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B80 `\00H=0 `\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF0 `\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE0 `\00UH\81\EE0 `\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF0 `\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=I\1B \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\057\1B \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\C7\04%8\02a\00\03$\01\00]\C3fffff.\0F\1F\84\00\00\00\00\00UH\89\E5Hi\04%8\02a\00\1D\05\00\00H\05\196\00\00H%\FF\FF\00\00H\89\04%8\02a\00H\8B\04%8\02a\00\89\C1\89\C8]\C3fffff.\0F\1F\84\00\00\00\00\00UH\89\E5\89}\F8\89u\F4\C7E\F0\00\00\00\00\8BE\F0HcM\F8;\04\8DP\02a\00\0F\8F^\00\00\00H\B8\A0:`\00\00\00\00\00HcM\F8H\C1\E1\0BH\01\C8HcM\F0\83<\88\00\0F\84(\00\00\00\8BE\F4\03E\F0Hc\C8\83<\8DP\DF`\00\00\0F\84\0C\00\00\00\C7E\FC\00\00\00\00\E9\1F\00\00\00\E9\00\00\00\00\E9\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\8E\FF\FF\FF\C7E\FC\01\00\00\00\8BE\FC]\C3\90UH\89\E5\89}\F8\89u\F4\C7E\F0\00\00\00\00\8BE\F0HcM\F8;\04\8DP\02a\00\0F\8FJ\00\00\00H\B8\A0:`\00\00\00\00\00HcM\F8H\C1\E1\0BH\01\C8HcM\F0\83<\88\00\0F\84\14\00\00\00\8BE\F4\03E\F0Hc\C8\C7\04\8DP\DF`\00\01\00\00\00\E9\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\A2\FF\FF\FFHcE\F8Hc\04\85\F0\91a\00\8B\0C\85\E0\91a\00\83\E9\01HcE\F8Hc\04\85\F0\91a\00\89\0C\85\E0\91a\00\8BM\F4\89M\F0\81}\F0\FF\01\00\00\0F\8F0\00\00\00HcE\F0\83<\85P\DF`\00\00\0F\85\0B\00\00\00\8BE\F0\89E\FC\E9\1A\00\00\00\E9\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\C3\FF\FF\FF\C7E\FC\00\00\00\00\8BE\FC]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5\89}\FC\89u\F8\C7E\F4\00\00\00\00\8BE\F4HcM\FC;\04\8DP\02a\00\0F\8FJ\00\00\00H\B8\A0:`\00\00\00\00\00HcM\FCH\C1\E1\0BH\01\C8HcM\F4\83<\88\00\0F\84\14\00\00\00\8BE\F8\03E\F4Hc\C8\C7\04\8DP\DF`\00\00\00\00\00\E9\00\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\A2\FF\FF\FFHcE\FCHc\04\85\F0\91a\00\8B\0C\85\E0\91a\00\83\C1\01HcE\FCHc\04\85\F0\91a\00\89\0C\85\E0\91a\00]\C3f\0F\1FD\00\00UH\89\E5H\83\EC\10\89}\F8\8B<%\C4\91a\00\83\C7\01\89<%\C4\91a\00\C7E\F4\00\00\00\00\83}\F4\0C\0F\8F\8B\00\00\00HcE\F4Hc\04\85\F0\91a\00\83<\85\E0\91a\00\00\0F\84^\00\00\00\8B}\F4\8Bu\F8\E8\8E\FD\FF\FF\83\F8\00\0F\84E\00\00\00\8B}\F4\8Bu\F8\E8\0A\FE\FF\FF\89E\F0\8B}\F0\E8\8F\FF\FF\FF\83\F8\00\0F\85\0A\00\00\00\83}\F0\00\0F\85\0C\00\00\00\C7E\FC\01\00\00\00\E9/\00\00\00\8B}\F4\8Bu\F8\E8\C5\FE\FF\FF\E9\00\00\00\00\E9\00\00\00\00\E9\00\00\00\00\8BE\F4\83\C0\01\89E\F4\E9k\FF\FF\FF\C7E\FC\00\00\00\00\8BE\FCH\83\C4\10]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC0\C7E\F0\00\00\00\00\81}\F0\FF\01\00\00\0F\8F\1D\00\00\00HcE\F0\C7\04\85P\DF`\00\01\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\D6\FF\FF\FF\C7E\FC\01\00\00\00\83}\FC\05\0F\8Fw\00\00\00\C7E\F8\01\00\00\00\83}\F8\05\0F\8FS\00\00\00\C7E\F4\01\00\00\00\83}\F4\05\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5P\DF`\00\00\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7E\FC\00\00\00\00\83}\FC\0C\0F\8FU\00\00\00\C7E\F0\00\00\00\00\81}\F0\FF\01\00\00\0F\8F.\00\00\00H\B8\A0:`\00\00\00\00\00HcM\FCH\C1\E1\0BH\01\C8HcM\F0\C7\04\88\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\C5\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\A1\FF\FF\FF\C7E\FC\00\00\00\00\83}\FC\03\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\01\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\00\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0:`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\F0\91a\00\00\00\00\00\C7\04%P\02a\00\0B\00\00\00\C7E\FC\00\00\00\00\83}\FC\01\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\00\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\03\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0B`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\F4\91a\00\00\00\00\00\C7\04%T\02a\00\C1\00\00\00\C7E\FC\00\00\00\00\83}\FC\00\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\03\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\01\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0J`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\F8\91a\00\00\00\00\00\C7\04%X\02a\00X\00\00\00\C7E\FC\00\00\00\00\83}\FC\01\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\03\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\00\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0R`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\FC\91a\00\00\00\00\00\C7\04%\5C\02a\00\19\00\00\00\C7E\FC\00\00\00\00\83}\FC\03\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\00\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\01\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0Z`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\00\92a\00\00\00\00\00\C7\04%`\02a\00C\00\00\00\C7E\FC\00\00\00\00\83}\FC\00\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\01\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\03\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0b`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\04\92a\00\00\00\00\00\C7\04%d\02a\00\C8\00\00\00\C7E\FC\00\00\00\00\83}\FC\02\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\00\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\00\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0j`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\08\92a\00\01\00\00\00\C7\04%h\02a\00\02\00\00\00\C7E\FC\00\00\00\00\83}\FC\00\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\02\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\00\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0r`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\0C\92a\00\01\00\00\00\C7\04%l\02a\00\10\00\00\00\C7E\FC\00\00\00\00\83}\FC\00\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\00\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\02\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0z`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\10\92a\00\01\00\00\00\C7\04%p\02a\00\80\00\00\00\C7E\FC\00\00\00\00\83}\FC\01\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\01\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\00\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0\82`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\14\92a\00\02\00\00\00\C7\04%t\02a\00\09\00\00\00\C7E\FC\00\00\00\00\83}\FC\01\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\00\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\01\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0\8A`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\18\92a\00\02\00\00\00\C7\04%x\02a\00A\00\00\00\C7E\FC\00\00\00\00\83}\FC\00\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\01\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\01\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0\92`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\1C\92a\00\02\00\00\00\C7\04%|\02a\00H\00\00\00\C7E\FC\00\00\00\00\83}\FC\01\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\01\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\01\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0\9A`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF1\FF\C7\04% \92a\00\03\00\00\00\C7\04%\80\02a\00I\00\00\00\C7\04%\E0\91a\00\0D\00\00\00\C7\04%\E4\91a\00\03\00\00\00\C7\04%\E8\91a\00\01\00\00\00\C7\04%\EC\91a\00\01\00\00\00\C7E\F0I\00\00\00\C7\04%\C4\91a\00\00\00\00\00\8Bu\F0\E8\9B\F3\FF\FF\83\F8\00\0F\84\16\00\00\001\FF\8Bu\F0\E8\18\F4\FF\FF\89\04%\94:`\00\E9\14\00\00\00H\BFt\13@\00\00\00\00\00\B0\00\E8\0B\F2\FF\FF\89E\EC\8B<%\94:`\00\E8|\F5\FF\FF\83\F8\00\0F\85\19\00\00\00H\BF\86\13@\00\00\00\00\00\B0\00\E8\E2\F1\FF\FF\89E\E8\E9*\00\00\00\81<%\C4\91a\00\D5\07\00\00\0F\84\14\00\00\00H\BF\99\13@\00\00\00\00\00\B0\00\E8\B8\F1\FF\FF\89E\E4\E9\00\00\00\00H\BF\AC\13@\00\00\00\00\00\8B4%\94:`\00\B0\00\E8\98\F1\FF\FFH\BF\AC\13@\00\00\00\00\00\8B4%\C4\91a\00\89E\E0\B0\00\E8}\F1\FF\FF\89E\DCH\83\C40]\C3\0F\1F@\00UH\89\E5H\83\EC\10\C7E\FC\00\00\00\00\C7E\F8\00\00\00\00\83}\F8d\0F\8D\13\00\00\00\E8\9B\F5\FF\FF\8BE\F8\83\C0\01\89E\F8\E9\E3\FF\FF\FF1\C0H\83\C4\10]\C3\0F\1FD\00\00AWAVI\89\D7AUATL\8D%\DE\0A \00UH\8D-\DE\0A \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\CF\F0\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_401364__fini = internal constant %seg_401364__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_401370__rodata = internal constant %seg_401370__rodata_type <{ [4 x i8] c"\01\00\02\00", [18 x i8] c"Error1 in Puzzle\0A\00", [19 x i8] c"Error2 in Puzzle.\0A\00", [19 x i8] c"Error3 in Puzzle.\0A\00", [4 x i8] c"%d\0A\00" }>
@seg_4013b0__eh_frame_hdr = internal constant %seg_4013b0__eh_frame_hdr_type <{ [116 x i8] c"\01\1B\03;t\00\00\00\0D\00\00\00`\F0\FF\FF\D0\00\00\00\80\F0\FF\FF\90\00\00\00\B0\F0\FF\FF\BC\00\00\00p\F1\FF\FF\F8\00\00\00\90\F1\FF\FF\14\01\00\00\D0\F1\FF\FF0\01\00\00`\F2\FF\FFL\01\00\00P\F3\FF\FFh\01\00\00\F0\F3\FF\FF\84\01\00\00\C0\F4\FF\FF\A0\01\00\00\00\FF\FF\FF\BC\01\00\00@\FF\FF\FF\D8\01\00\00\B0\FF\FF\FF \02\00\00" }>
@seg_401428__eh_frame = internal constant %seg_401428__eh_frame_type <{ [448 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\E8\EF\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\EC\EF\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00\88\EF\FF\FF \00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00p\F0\FF\FF\12\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00t\F0\FF\FF2\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00\98\F0\FF\FF\8F\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00\0C\F1\FF\FF\E7\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00\E0\F1\FF\FF\9A\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00d\F2\FF\FF\C8\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\01\00\00\18\F3\FF\FF<\0A\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\01\00\00<\FD\FF\FF;\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00D\00\00\008\01\00\00`\FD\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\80\01\00\00\88\FD\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_601de0__init_array = internal global %seg_601de0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400510_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004e0___do_global_dtors_aux to i64) }>
@seg_601ff0__got = internal global %seg_601ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_602000__got_plt = internal global %seg_602000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64) }>
@seg_602020__data = internal global %seg_602020__data_type zeroinitializer
@__bss_start = global %__bss_start_type zeroinitializer
@fixed = global %fixed_type zeroinitializer
@imb = global %imb_type zeroinitializer
@n = global %n_type zeroinitializer
@p = global %p_type zeroinitializer
@imr = global %imr_type zeroinitializer
@rmr = global %rmr_type zeroinitializer
@z = global %z_type zeroinitializer
@puzzl = global %puzzl_type zeroinitializer
@rmb = global %rmb_type zeroinitializer
@zi = global %zi_type zeroinitializer
@cellspace = global %cellspace_type zeroinitializer
@seed = global %seed_type zeroinitializer
@movesdone = global %movesdone_type zeroinitializer
@piecemax = global %piecemax_type zeroinitializer
@sortlist = global %sortlist_type zeroinitializer
@value = global %value_type zeroinitializer
@top = global %top_type zeroinitializer
@floated = global %floated_type zeroinitializer
@pctr = global %pctr_type zeroinitializer
@zr = global %zr_type zeroinitializer
@ima = global %ima_type zeroinitializer
@littlest = global %littlest_type zeroinitializer
@e = global %e_type zeroinitializer
@freelist = global %freelist_type zeroinitializer
@w = global %w_type zeroinitializer
@permarray = global %permarray_type zeroinitializer
@biggest = global %biggest_type zeroinitializer
@rma = global %rma_type zeroinitializer
@kount = global %kount_type zeroinitializer
@tree = global %tree_type zeroinitializer
@stack = global %stack_type zeroinitializer
@piececount = global %piececount_type zeroinitializer
@class = global %class_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400510_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004e0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401360___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4012f0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Fit_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Remove_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Place_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Rand_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Trial_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Initrand_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Puzzle_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @sub_400700_Remove_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400870_Puzzle_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400610_Place_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4007a0_Trial_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4003f0__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400470_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400580_Fit_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_400580_Fit(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400580:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ESI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 8
  %39 = load i32, i32* %EDI
  %40 = zext i32 %39 to i64
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %38 to i32*
  store i32 %39, i32* %43
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 12
  %46 = load i32, i32* %ESI
  %47 = zext i32 %46 to i64
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 3
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %45 to i32*
  store i32 %46, i32* %50
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 16
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 7
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i32*
  store i32 0, i32* %55
  br label %block_400591

block_4005df:                                     ; preds = %block_4005c8
  %56 = load i64, i64* %RBP
  %57 = sub i64 %56, 4
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 7
  store i64 %59, i64* %PC
  %60 = inttoptr i64 %57 to i32*
  store i32 0, i32* %60
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 36
  %63 = load i64, i64* %PC
  %64 = add i64 %63, 5
  store i64 %64, i64* %PC
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %62, i64* %65, align 8, !tbaa !2428
  br label %block_40060a

block_4005f0:                                     ; preds = %block_4005a5, %block_4005eb
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4005a5 ], [ %MEMORY.1, %block_4005eb ]
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 5
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  store i64 %69, i64* %PC
  %70 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %70, align 8, !tbaa !2428
  %71 = load i64, i64* %RBP
  %72 = sub i64 %71, 16
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 3
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %72 to i32*
  %76 = load i32, i32* %75
  %77 = zext i32 %76 to i64
  store i64 %77, i64* %RAX, align 8, !tbaa !2428
  %78 = load i64, i64* %RAX
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 3
  store i64 %80, i64* %PC
  %81 = trunc i64 %78 to i32
  %82 = add i32 1, %81
  %83 = zext i32 %82 to i64
  store i64 %83, i64* %RAX, align 8, !tbaa !2428
  %84 = icmp ult i32 %82, %81
  %85 = icmp ult i32 %82, 1
  %86 = or i1 %84, %85
  %87 = zext i1 %86 to i8
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %87, i8* %88, align 1, !tbaa !2432
  %89 = and i32 %82, 255
  %90 = call i32 @llvm.ctpop.i32(i32 %89) #16
  %91 = trunc i32 %90 to i8
  %92 = and i8 %91, 1
  %93 = xor i8 %92, 1
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %93, i8* %94, align 1, !tbaa !2446
  %95 = xor i64 1, %78
  %96 = trunc i64 %95 to i32
  %97 = xor i32 %96, %82
  %98 = lshr i32 %97, 4
  %99 = trunc i32 %98 to i8
  %100 = and i8 %99, 1
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %100, i8* %101, align 1, !tbaa !2447
  %102 = icmp eq i32 %82, 0
  %103 = zext i1 %102 to i8
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %103, i8* %104, align 1, !tbaa !2448
  %105 = lshr i32 %82, 31
  %106 = trunc i32 %105 to i8
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %106, i8* %107, align 1, !tbaa !2449
  %108 = lshr i32 %81, 31
  %109 = xor i32 %105, %108
  %110 = add nuw nsw i32 %109, %105
  %111 = icmp eq i32 %110, 2
  %112 = zext i1 %111 to i8
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %112, i8* %113, align 1, !tbaa !2450
  %114 = load i64, i64* %RBP
  %115 = sub i64 %114, 16
  %116 = load i32, i32* %EAX
  %117 = zext i32 %116 to i64
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 3
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %115 to i32*
  store i32 %116, i32* %120
  %121 = load i64, i64* %PC
  %122 = sub i64 %121, 109
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 5
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %122, i64* %125, align 8, !tbaa !2428
  br label %block_400591

block_4005eb:                                     ; preds = %block_4005c8
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 5
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 5
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %127, i64* %130, align 8, !tbaa !2428
  br label %block_4005f0

block_400591:                                     ; preds = %block_4005f0, %block_400580
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_400580 ], [ %MEMORY.0, %block_4005f0 ]
  %131 = load i64, i64* %RBP
  %132 = sub i64 %131, 16
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 3
  store i64 %134, i64* %PC
  %135 = inttoptr i64 %132 to i32*
  %136 = load i32, i32* %135
  %137 = zext i32 %136 to i64
  store i64 %137, i64* %RAX, align 8, !tbaa !2428
  %138 = load i64, i64* %RBP
  %139 = sub i64 %138, 8
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 4
  store i64 %141, i64* %PC
  %142 = inttoptr i64 %139 to i32*
  %143 = load i32, i32* %142
  %144 = sext i32 %143 to i64
  store i64 %144, i64* %RCX, align 8, !tbaa !2428
  %145 = load i32, i32* %EAX
  %146 = zext i32 %145 to i64
  %147 = load i64, i64* %RCX
  %148 = mul i64 %147, 4
  %149 = add i64 %148, ptrtoint (%piecemax_type* @piecemax to i64)
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 7
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %149 to i32*
  %153 = load i32, i32* %152
  %154 = sub i32 %145, %153
  %155 = icmp ult i32 %145, %153
  %156 = zext i1 %155 to i8
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %156, i8* %157, align 1, !tbaa !2432
  %158 = and i32 %154, 255
  %159 = call i32 @llvm.ctpop.i32(i32 %158) #16
  %160 = trunc i32 %159 to i8
  %161 = and i8 %160, 1
  %162 = xor i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %162, i8* %163, align 1, !tbaa !2446
  %164 = xor i32 %153, %145
  %165 = xor i32 %164, %154
  %166 = lshr i32 %165, 4
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %168, i8* %169, align 1, !tbaa !2447
  %170 = icmp eq i32 %154, 0
  %171 = zext i1 %170 to i8
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %171, i8* %172, align 1, !tbaa !2448
  %173 = lshr i32 %154, 31
  %174 = trunc i32 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %174, i8* %175, align 1, !tbaa !2449
  %176 = lshr i32 %145, 31
  %177 = lshr i32 %153, 31
  %178 = xor i32 %177, %176
  %179 = xor i32 %173, %176
  %180 = add nuw nsw i32 %179, %178
  %181 = icmp eq i32 %180, 2
  %182 = zext i1 %181 to i8
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %182, i8* %183, align 1, !tbaa !2450
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 100
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 6
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 6
  store i64 %189, i64* %PC
  %190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %191 = load i8, i8* %190, align 1, !tbaa !2448
  %192 = icmp eq i8 %191, 0
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %194 = load i8, i8* %193, align 1, !tbaa !2449
  %195 = icmp ne i8 %194, 0
  %196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %197 = load i8, i8* %196, align 1, !tbaa !2450
  %198 = icmp ne i8 %197, 0
  %199 = xor i1 %195, %198
  %200 = xor i1 %199, true
  %201 = and i1 %192, %200
  %202 = zext i1 %201 to i8
  store i8 %202, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %204 = select i1 %201, i64 %185, i64 %187
  store i64 %204, i64* %203, align 8, !tbaa !2428
  %205 = load i8, i8* %BRANCH_TAKEN
  %206 = icmp eq i8 %205, 1
  br i1 %206, label %block_400603, label %block_4005a5

block_40060a:                                     ; preds = %block_400603, %block_4005df
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_400603 ], [ %MEMORY.1, %block_4005df ]
  %207 = load i64, i64* %RBP
  %208 = sub i64 %207, 4
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 3
  store i64 %210, i64* %PC
  %211 = inttoptr i64 %208 to i32*
  %212 = load i32, i32* %211
  %213 = zext i32 %212 to i64
  store i64 %213, i64* %RAX, align 8, !tbaa !2428
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 1
  store i64 %215, i64* %PC
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %217 = load i64, i64* %216, align 8, !tbaa !2428
  %218 = add i64 %217, 8
  %219 = inttoptr i64 %217 to i64*
  %220 = load i64, i64* %219
  store i64 %220, i64* %RBP, align 8, !tbaa !2428
  store i64 %218, i64* %216, align 8, !tbaa !2428
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 1
  store i64 %222, i64* %PC
  %223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %225 = load i64, i64* %224, align 8, !tbaa !2428
  %226 = inttoptr i64 %225 to i64*
  %227 = load i64, i64* %226
  store i64 %227, i64* %223, align 8, !tbaa !2428
  %228 = add i64 %225, 8
  store i64 %228, i64* %224, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_4005c8:                                     ; preds = %block_4005a5
  %229 = load i64, i64* %RBP
  %230 = sub i64 %229, 12
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 3
  store i64 %232, i64* %PC
  %233 = inttoptr i64 %230 to i32*
  %234 = load i32, i32* %233
  %235 = zext i32 %234 to i64
  store i64 %235, i64* %RAX, align 8, !tbaa !2428
  %236 = load i64, i64* %RAX
  %237 = load i64, i64* %RBP
  %238 = sub i64 %237, 16
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 3
  store i64 %240, i64* %PC
  %241 = trunc i64 %236 to i32
  %242 = inttoptr i64 %238 to i32*
  %243 = load i32, i32* %242
  %244 = add i32 %243, %241
  %245 = zext i32 %244 to i64
  store i64 %245, i64* %RAX, align 8, !tbaa !2428
  %246 = icmp ult i32 %244, %241
  %247 = icmp ult i32 %244, %243
  %248 = or i1 %246, %247
  %249 = zext i1 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %249, i8* %250, align 1, !tbaa !2432
  %251 = and i32 %244, 255
  %252 = call i32 @llvm.ctpop.i32(i32 %251) #16
  %253 = trunc i32 %252 to i8
  %254 = and i8 %253, 1
  %255 = xor i8 %254, 1
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %255, i8* %256, align 1, !tbaa !2446
  %257 = xor i32 %243, %241
  %258 = xor i32 %257, %244
  %259 = lshr i32 %258, 4
  %260 = trunc i32 %259 to i8
  %261 = and i8 %260, 1
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %261, i8* %262, align 1, !tbaa !2447
  %263 = icmp eq i32 %244, 0
  %264 = zext i1 %263 to i8
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %264, i8* %265, align 1, !tbaa !2448
  %266 = lshr i32 %244, 31
  %267 = trunc i32 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %267, i8* %268, align 1, !tbaa !2449
  %269 = lshr i32 %241, 31
  %270 = lshr i32 %243, 31
  %271 = xor i32 %266, %269
  %272 = xor i32 %266, %270
  %273 = add nuw nsw i32 %271, %272
  %274 = icmp eq i32 %273, 2
  %275 = zext i1 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %275, i8* %276, align 1, !tbaa !2450
  %277 = load i32, i32* %EAX
  %278 = zext i32 %277 to i64
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 3
  store i64 %280, i64* %PC
  %281 = shl i64 %278, 32
  %282 = ashr exact i64 %281, 32
  store i64 %282, i64* %RCX, align 8, !tbaa !2428
  %283 = load i64, i64* %RCX
  %284 = mul i64 %283, 4
  %285 = add i64 %284, ptrtoint (%puzzl_type* @puzzl to i64)
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 8
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %285 to i32*
  %289 = load i32, i32* %288
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %290, align 1, !tbaa !2432
  %291 = and i32 %289, 255
  %292 = call i32 @llvm.ctpop.i32(i32 %291) #16
  %293 = trunc i32 %292 to i8
  %294 = and i8 %293, 1
  %295 = xor i8 %294, 1
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %295, i8* %296, align 1, !tbaa !2446
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %297, align 1, !tbaa !2447
  %298 = icmp eq i32 %289, 0
  %299 = zext i1 %298 to i8
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %299, i8* %300, align 1, !tbaa !2448
  %301 = lshr i32 %289, 31
  %302 = trunc i32 %301 to i8
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %302, i8* %303, align 1, !tbaa !2449
  %304 = lshr i32 %289, 31
  %305 = xor i32 %301, %304
  %306 = add nuw nsw i32 %305, %304
  %307 = icmp eq i32 %306, 2
  %308 = zext i1 %307 to i8
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %308, i8* %309, align 1, !tbaa !2450
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 18
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 6
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 6
  store i64 %315, i64* %PC
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %317 = load i8, i8* %316, align 1, !tbaa !2448
  store i8 %317, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %319 = icmp ne i8 %317, 0
  %320 = select i1 %319, i64 %311, i64 %313
  store i64 %320, i64* %318, align 8, !tbaa !2428
  %321 = load i8, i8* %BRANCH_TAKEN
  %322 = icmp eq i8 %321, 1
  br i1 %322, label %block_4005eb, label %block_4005df

block_4005a5:                                     ; preds = %block_400591
  %323 = load i64, i64* %PC
  %324 = add i64 %323, 10
  store i64 %324, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RAX, align 8, !tbaa !2428
  %325 = load i64, i64* %RBP
  %326 = sub i64 %325, 8
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 4
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %326 to i32*
  %330 = load i32, i32* %329
  %331 = sext i32 %330 to i64
  store i64 %331, i64* %RCX, align 8, !tbaa !2428
  %332 = load i64, i64* %RCX
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 4
  store i64 %334, i64* %PC
  %335 = shl i64 %332, 10
  %336 = icmp slt i64 %335, 0
  %337 = shl i64 %335, 1
  store i64 %337, i64* %RCX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %339 = zext i1 %336 to i8
  store i8 %339, i8* %338, align 1, !tbaa !2451
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %341 = trunc i64 %337 to i32
  %342 = and i32 %341, 254
  %343 = call i32 @llvm.ctpop.i32(i32 %342) #16
  %344 = trunc i32 %343 to i8
  %345 = and i8 %344, 1
  %346 = xor i8 %345, 1
  store i8 %346, i8* %340, align 1, !tbaa !2451
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %347, align 1, !tbaa !2451
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %349 = icmp eq i64 %337, 0
  %350 = zext i1 %349 to i8
  store i8 %350, i8* %348, align 1, !tbaa !2451
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %352 = lshr i64 %337, 63
  %353 = trunc i64 %352 to i8
  store i8 %353, i8* %351, align 1, !tbaa !2451
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %354, align 1, !tbaa !2451
  %355 = load i64, i64* %RAX
  %356 = load i64, i64* %RCX
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 3
  store i64 %358, i64* %PC
  %359 = add i64 %356, %355
  store i64 %359, i64* %RAX, align 8, !tbaa !2428
  %360 = icmp ult i64 %359, %355
  %361 = icmp ult i64 %359, %356
  %362 = or i1 %360, %361
  %363 = zext i1 %362 to i8
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %363, i8* %364, align 1, !tbaa !2432
  %365 = trunc i64 %359 to i32
  %366 = and i32 %365, 255
  %367 = call i32 @llvm.ctpop.i32(i32 %366) #16
  %368 = trunc i32 %367 to i8
  %369 = and i8 %368, 1
  %370 = xor i8 %369, 1
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %370, i8* %371, align 1, !tbaa !2446
  %372 = xor i64 %356, %355
  %373 = xor i64 %372, %359
  %374 = lshr i64 %373, 4
  %375 = trunc i64 %374 to i8
  %376 = and i8 %375, 1
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %376, i8* %377, align 1, !tbaa !2447
  %378 = icmp eq i64 %359, 0
  %379 = zext i1 %378 to i8
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %379, i8* %380, align 1, !tbaa !2448
  %381 = lshr i64 %359, 63
  %382 = trunc i64 %381 to i8
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %382, i8* %383, align 1, !tbaa !2449
  %384 = lshr i64 %355, 63
  %385 = lshr i64 %356, 63
  %386 = xor i64 %381, %384
  %387 = xor i64 %381, %385
  %388 = add nuw nsw i64 %386, %387
  %389 = icmp eq i64 %388, 2
  %390 = zext i1 %389 to i8
  %391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %390, i8* %391, align 1, !tbaa !2450
  %392 = load i64, i64* %RBP
  %393 = sub i64 %392, 16
  %394 = load i64, i64* %PC
  %395 = add i64 %394, 4
  store i64 %395, i64* %PC
  %396 = inttoptr i64 %393 to i32*
  %397 = load i32, i32* %396
  %398 = sext i32 %397 to i64
  store i64 %398, i64* %RCX, align 8, !tbaa !2428
  %399 = load i64, i64* %RAX
  %400 = load i64, i64* %RCX
  %401 = mul i64 %400, 4
  %402 = add i64 %401, %399
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 4
  store i64 %404, i64* %PC
  %405 = inttoptr i64 %402 to i32*
  %406 = load i32, i32* %405
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %407, align 1, !tbaa !2432
  %408 = and i32 %406, 255
  %409 = call i32 @llvm.ctpop.i32(i32 %408) #16
  %410 = trunc i32 %409 to i8
  %411 = and i8 %410, 1
  %412 = xor i8 %411, 1
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %412, i8* %413, align 1, !tbaa !2446
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %414, align 1, !tbaa !2447
  %415 = icmp eq i32 %406, 0
  %416 = zext i1 %415 to i8
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %416, i8* %417, align 1, !tbaa !2448
  %418 = lshr i32 %406, 31
  %419 = trunc i32 %418 to i8
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %419, i8* %420, align 1, !tbaa !2449
  %421 = lshr i32 %406, 31
  %422 = xor i32 %418, %421
  %423 = add nuw nsw i32 %422, %421
  %424 = icmp eq i32 %423, 2
  %425 = zext i1 %424 to i8
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %425, i8* %426, align 1, !tbaa !2450
  %427 = load i64, i64* %PC
  %428 = add i64 %427, 46
  %429 = load i64, i64* %PC
  %430 = add i64 %429, 6
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 6
  store i64 %432, i64* %PC
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %434 = load i8, i8* %433, align 1, !tbaa !2448
  store i8 %434, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %436 = icmp ne i8 %434, 0
  %437 = select i1 %436, i64 %428, i64 %430
  store i64 %437, i64* %435, align 8, !tbaa !2428
  %438 = load i8, i8* %BRANCH_TAKEN
  %439 = icmp eq i8 %438, 1
  br i1 %439, label %block_4005f0, label %block_4005c8

block_400603:                                     ; preds = %block_400591
  %440 = load i64, i64* %RBP
  %441 = sub i64 %440, 4
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 7
  store i64 %443, i64* %PC
  %444 = inttoptr i64 %441 to i32*
  store i32 1, i32* %444
  br label %block_40060a
}

; Function Attrs: noinline
define %struct.Memory* @sub_400700_Remove(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400700:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = load i64, i64* %RBP
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %34 = load i64, i64* %33, align 8, !tbaa !2428
  %35 = add i64 %34, -8
  %36 = inttoptr i64 %35 to i64*
  store i64 %30, i64* %36
  store i64 %35, i64* %33, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 3
  store i64 %39, i64* %PC
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 4
  %42 = load i32, i32* %EDI
  %43 = zext i32 %42 to i64
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  %46 = inttoptr i64 %41 to i32*
  store i32 %42, i32* %46
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 8
  %49 = load i32, i32* %ESI
  %50 = zext i32 %49 to i64
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  %53 = inttoptr i64 %48 to i32*
  store i32 %49, i32* %53
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 12
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 7
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i32*
  store i32 0, i32* %58
  br label %block_400711

block_40076f:                                     ; preds = %block_400711
  %59 = load i64, i64* %RBP
  %60 = sub i64 %59, 4
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to i32*
  %64 = load i32, i32* %63
  %65 = sext i32 %64 to i64
  store i64 %65, i64* %RAX, align 8, !tbaa !2428
  %66 = load i64, i64* %RAX
  %67 = mul i64 %66, 4
  %68 = add i64 %67, ptrtoint (%class_type* @class to i64)
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 8
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %68 to i32*
  %72 = load i32, i32* %71
  %73 = sext i32 %72 to i64
  store i64 %73, i64* %RAX, align 8, !tbaa !2428
  %74 = load i64, i64* %RAX
  %75 = mul i64 %74, 4
  %76 = add i64 %75, ptrtoint (%piececount_type* @piececount to i64)
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 7
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %76 to i32*
  %80 = load i32, i32* %79
  %81 = zext i32 %80 to i64
  store i64 %81, i64* %RCX, align 8, !tbaa !2428
  %82 = load i64, i64* %RCX
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 3
  store i64 %84, i64* %PC
  %85 = trunc i64 %82 to i32
  %86 = add i32 1, %85
  %87 = zext i32 %86 to i64
  store i64 %87, i64* %RCX, align 8, !tbaa !2428
  %88 = icmp ult i32 %86, %85
  %89 = icmp ult i32 %86, 1
  %90 = or i1 %88, %89
  %91 = zext i1 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %91, i8* %92, align 1, !tbaa !2432
  %93 = and i32 %86, 255
  %94 = call i32 @llvm.ctpop.i32(i32 %93) #16
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = xor i8 %96, 1
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %97, i8* %98, align 1, !tbaa !2446
  %99 = xor i64 1, %82
  %100 = trunc i64 %99 to i32
  %101 = xor i32 %100, %86
  %102 = lshr i32 %101, 4
  %103 = trunc i32 %102 to i8
  %104 = and i8 %103, 1
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %104, i8* %105, align 1, !tbaa !2447
  %106 = icmp eq i32 %86, 0
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %107, i8* %108, align 1, !tbaa !2448
  %109 = lshr i32 %86, 31
  %110 = trunc i32 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %110, i8* %111, align 1, !tbaa !2449
  %112 = lshr i32 %85, 31
  %113 = xor i32 %109, %112
  %114 = add nuw nsw i32 %113, %109
  %115 = icmp eq i32 %114, 2
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %116, i8* %117, align 1, !tbaa !2450
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 4
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %119 to i32*
  %123 = load i32, i32* %122
  %124 = sext i32 %123 to i64
  store i64 %124, i64* %RAX, align 8, !tbaa !2428
  %125 = load i64, i64* %RAX
  %126 = mul i64 %125, 4
  %127 = add i64 %126, ptrtoint (%class_type* @class to i64)
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 8
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i32*
  %131 = load i32, i32* %130
  %132 = sext i32 %131 to i64
  store i64 %132, i64* %RAX, align 8, !tbaa !2428
  %133 = load i64, i64* %RAX
  %134 = mul i64 %133, 4
  %135 = add i64 %134, ptrtoint (%piececount_type* @piececount to i64)
  %136 = load i32, i32* %ECX
  %137 = zext i32 %136 to i64
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 7
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %135 to i32*
  store i32 %136, i32* %140
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 1
  store i64 %142, i64* %PC
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %144 = load i64, i64* %143, align 8, !tbaa !2428
  %145 = add i64 %144, 8
  %146 = inttoptr i64 %144 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RBP, align 8, !tbaa !2428
  store i64 %145, i64* %143, align 8, !tbaa !2428
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 1
  store i64 %149, i64* %PC
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %152 = load i64, i64* %151, align 8, !tbaa !2428
  %153 = inttoptr i64 %152 to i64*
  %154 = load i64, i64* %153
  store i64 %154, i64* %150, align 8, !tbaa !2428
  %155 = add i64 %152, 8
  store i64 %155, i64* %151, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400711:                                     ; preds = %block_40075c, %block_400700
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400700 ], [ %MEMORY.1, %block_40075c ]
  %156 = load i64, i64* %RBP
  %157 = sub i64 %156, 12
  %158 = load i64, i64* %PC
  %159 = add i64 %158, 3
  store i64 %159, i64* %PC
  %160 = inttoptr i64 %157 to i32*
  %161 = load i32, i32* %160
  %162 = zext i32 %161 to i64
  store i64 %162, i64* %RAX, align 8, !tbaa !2428
  %163 = load i64, i64* %RBP
  %164 = sub i64 %163, 4
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 4
  store i64 %166, i64* %PC
  %167 = inttoptr i64 %164 to i32*
  %168 = load i32, i32* %167
  %169 = sext i32 %168 to i64
  store i64 %169, i64* %RCX, align 8, !tbaa !2428
  %170 = load i32, i32* %EAX
  %171 = zext i32 %170 to i64
  %172 = load i64, i64* %RCX
  %173 = mul i64 %172, 4
  %174 = add i64 %173, ptrtoint (%piecemax_type* @piecemax to i64)
  %175 = load i64, i64* %PC
  %176 = add i64 %175, 7
  store i64 %176, i64* %PC
  %177 = inttoptr i64 %174 to i32*
  %178 = load i32, i32* %177
  %179 = sub i32 %170, %178
  %180 = icmp ult i32 %170, %178
  %181 = zext i1 %180 to i8
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %182, align 1, !tbaa !2432
  %183 = and i32 %179, 255
  %184 = call i32 @llvm.ctpop.i32(i32 %183) #16
  %185 = trunc i32 %184 to i8
  %186 = and i8 %185, 1
  %187 = xor i8 %186, 1
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %187, i8* %188, align 1, !tbaa !2446
  %189 = xor i32 %178, %170
  %190 = xor i32 %189, %179
  %191 = lshr i32 %190, 4
  %192 = trunc i32 %191 to i8
  %193 = and i8 %192, 1
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %193, i8* %194, align 1, !tbaa !2447
  %195 = icmp eq i32 %179, 0
  %196 = zext i1 %195 to i8
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %196, i8* %197, align 1, !tbaa !2448
  %198 = lshr i32 %179, 31
  %199 = trunc i32 %198 to i8
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %199, i8* %200, align 1, !tbaa !2449
  %201 = lshr i32 %170, 31
  %202 = lshr i32 %178, 31
  %203 = xor i32 %202, %201
  %204 = xor i32 %198, %201
  %205 = add nuw nsw i32 %204, %203
  %206 = icmp eq i32 %205, 2
  %207 = zext i1 %206 to i8
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %207, i8* %208, align 1, !tbaa !2450
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 80
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 6
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 6
  store i64 %214, i64* %PC
  %215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %216 = load i8, i8* %215, align 1, !tbaa !2448
  %217 = icmp eq i8 %216, 0
  %218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %219 = load i8, i8* %218, align 1, !tbaa !2449
  %220 = icmp ne i8 %219, 0
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %222 = load i8, i8* %221, align 1, !tbaa !2450
  %223 = icmp ne i8 %222, 0
  %224 = xor i1 %220, %223
  %225 = xor i1 %224, true
  %226 = and i1 %217, %225
  %227 = zext i1 %226 to i8
  store i8 %227, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %229 = select i1 %226, i64 %210, i64 %212
  store i64 %229, i64* %228, align 8, !tbaa !2428
  %230 = load i8, i8* %BRANCH_TAKEN
  %231 = icmp eq i8 %230, 1
  br i1 %231, label %block_40076f, label %block_400725

block_400748:                                     ; preds = %block_400725
  %232 = load i64, i64* %RBP
  %233 = sub i64 %232, 8
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 3
  store i64 %235, i64* %PC
  %236 = inttoptr i64 %233 to i32*
  %237 = load i32, i32* %236
  %238 = zext i32 %237 to i64
  store i64 %238, i64* %RAX, align 8, !tbaa !2428
  %239 = load i64, i64* %RAX
  %240 = load i64, i64* %RBP
  %241 = sub i64 %240, 12
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 3
  store i64 %243, i64* %PC
  %244 = trunc i64 %239 to i32
  %245 = inttoptr i64 %241 to i32*
  %246 = load i32, i32* %245
  %247 = add i32 %246, %244
  %248 = zext i32 %247 to i64
  store i64 %248, i64* %RAX, align 8, !tbaa !2428
  %249 = icmp ult i32 %247, %244
  %250 = icmp ult i32 %247, %246
  %251 = or i1 %249, %250
  %252 = zext i1 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %252, i8* %253, align 1, !tbaa !2432
  %254 = and i32 %247, 255
  %255 = call i32 @llvm.ctpop.i32(i32 %254) #16
  %256 = trunc i32 %255 to i8
  %257 = and i8 %256, 1
  %258 = xor i8 %257, 1
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %258, i8* %259, align 1, !tbaa !2446
  %260 = xor i32 %246, %244
  %261 = xor i32 %260, %247
  %262 = lshr i32 %261, 4
  %263 = trunc i32 %262 to i8
  %264 = and i8 %263, 1
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %264, i8* %265, align 1, !tbaa !2447
  %266 = icmp eq i32 %247, 0
  %267 = zext i1 %266 to i8
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %267, i8* %268, align 1, !tbaa !2448
  %269 = lshr i32 %247, 31
  %270 = trunc i32 %269 to i8
  %271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %270, i8* %271, align 1, !tbaa !2449
  %272 = lshr i32 %244, 31
  %273 = lshr i32 %246, 31
  %274 = xor i32 %269, %272
  %275 = xor i32 %269, %273
  %276 = add nuw nsw i32 %274, %275
  %277 = icmp eq i32 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i32, i32* %EAX
  %281 = zext i32 %280 to i64
  %282 = load i64, i64* %PC
  %283 = add i64 %282, 3
  store i64 %283, i64* %PC
  %284 = shl i64 %281, 32
  %285 = ashr exact i64 %284, 32
  store i64 %285, i64* %RCX, align 8, !tbaa !2428
  %286 = load i64, i64* %RCX
  %287 = mul i64 %286, 4
  %288 = add i64 %287, ptrtoint (%puzzl_type* @puzzl to i64)
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 11
  store i64 %290, i64* %PC
  %291 = inttoptr i64 %288 to i32*
  store i32 0, i32* %291
  br label %block_40075c

block_40075c:                                     ; preds = %block_400725, %block_400748
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.0, %block_400725 ], [ %MEMORY.0, %block_400748 ]
  %292 = load i64, i64* %PC
  %293 = add i64 %292, 5
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 5
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %293, i64* %296, align 8, !tbaa !2428
  %297 = load i64, i64* %RBP
  %298 = sub i64 %297, 12
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 3
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %298 to i32*
  %302 = load i32, i32* %301
  %303 = zext i32 %302 to i64
  store i64 %303, i64* %RAX, align 8, !tbaa !2428
  %304 = load i64, i64* %RAX
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 3
  store i64 %306, i64* %PC
  %307 = trunc i64 %304 to i32
  %308 = add i32 1, %307
  %309 = zext i32 %308 to i64
  store i64 %309, i64* %RAX, align 8, !tbaa !2428
  %310 = icmp ult i32 %308, %307
  %311 = icmp ult i32 %308, 1
  %312 = or i1 %310, %311
  %313 = zext i1 %312 to i8
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %313, i8* %314, align 1, !tbaa !2432
  %315 = and i32 %308, 255
  %316 = call i32 @llvm.ctpop.i32(i32 %315) #16
  %317 = trunc i32 %316 to i8
  %318 = and i8 %317, 1
  %319 = xor i8 %318, 1
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %319, i8* %320, align 1, !tbaa !2446
  %321 = xor i64 1, %304
  %322 = trunc i64 %321 to i32
  %323 = xor i32 %322, %308
  %324 = lshr i32 %323, 4
  %325 = trunc i32 %324 to i8
  %326 = and i8 %325, 1
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %326, i8* %327, align 1, !tbaa !2447
  %328 = icmp eq i32 %308, 0
  %329 = zext i1 %328 to i8
  %330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %329, i8* %330, align 1, !tbaa !2448
  %331 = lshr i32 %308, 31
  %332 = trunc i32 %331 to i8
  %333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %332, i8* %333, align 1, !tbaa !2449
  %334 = lshr i32 %307, 31
  %335 = xor i32 %331, %334
  %336 = add nuw nsw i32 %335, %331
  %337 = icmp eq i32 %336, 2
  %338 = zext i1 %337 to i8
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %338, i8* %339, align 1, !tbaa !2450
  %340 = load i64, i64* %RBP
  %341 = sub i64 %340, 12
  %342 = load i32, i32* %EAX
  %343 = zext i32 %342 to i64
  %344 = load i64, i64* %PC
  %345 = add i64 %344, 3
  store i64 %345, i64* %PC
  %346 = inttoptr i64 %341 to i32*
  store i32 %342, i32* %346
  %347 = load i64, i64* %PC
  %348 = sub i64 %347, 89
  %349 = load i64, i64* %PC
  %350 = add i64 %349, 5
  store i64 %350, i64* %PC
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %348, i64* %351, align 8, !tbaa !2428
  br label %block_400711

block_400725:                                     ; preds = %block_400711
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 10
  store i64 %353, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RAX, align 8, !tbaa !2428
  %354 = load i64, i64* %RBP
  %355 = sub i64 %354, 4
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 4
  store i64 %357, i64* %PC
  %358 = inttoptr i64 %355 to i32*
  %359 = load i32, i32* %358
  %360 = sext i32 %359 to i64
  store i64 %360, i64* %RCX, align 8, !tbaa !2428
  %361 = load i64, i64* %RCX
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 4
  store i64 %363, i64* %PC
  %364 = shl i64 %361, 10
  %365 = icmp slt i64 %364, 0
  %366 = shl i64 %364, 1
  store i64 %366, i64* %RCX, align 8, !tbaa !2428
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %368 = zext i1 %365 to i8
  store i8 %368, i8* %367, align 1, !tbaa !2451
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %370 = trunc i64 %366 to i32
  %371 = and i32 %370, 254
  %372 = call i32 @llvm.ctpop.i32(i32 %371) #16
  %373 = trunc i32 %372 to i8
  %374 = and i8 %373, 1
  %375 = xor i8 %374, 1
  store i8 %375, i8* %369, align 1, !tbaa !2451
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %376, align 1, !tbaa !2451
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %378 = icmp eq i64 %366, 0
  %379 = zext i1 %378 to i8
  store i8 %379, i8* %377, align 1, !tbaa !2451
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %381 = lshr i64 %366, 63
  %382 = trunc i64 %381 to i8
  store i8 %382, i8* %380, align 1, !tbaa !2451
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %383, align 1, !tbaa !2451
  %384 = load i64, i64* %RAX
  %385 = load i64, i64* %RCX
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 3
  store i64 %387, i64* %PC
  %388 = add i64 %385, %384
  store i64 %388, i64* %RAX, align 8, !tbaa !2428
  %389 = icmp ult i64 %388, %384
  %390 = icmp ult i64 %388, %385
  %391 = or i1 %389, %390
  %392 = zext i1 %391 to i8
  %393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %392, i8* %393, align 1, !tbaa !2432
  %394 = trunc i64 %388 to i32
  %395 = and i32 %394, 255
  %396 = call i32 @llvm.ctpop.i32(i32 %395) #16
  %397 = trunc i32 %396 to i8
  %398 = and i8 %397, 1
  %399 = xor i8 %398, 1
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %399, i8* %400, align 1, !tbaa !2446
  %401 = xor i64 %385, %384
  %402 = xor i64 %401, %388
  %403 = lshr i64 %402, 4
  %404 = trunc i64 %403 to i8
  %405 = and i8 %404, 1
  %406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %405, i8* %406, align 1, !tbaa !2447
  %407 = icmp eq i64 %388, 0
  %408 = zext i1 %407 to i8
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %408, i8* %409, align 1, !tbaa !2448
  %410 = lshr i64 %388, 63
  %411 = trunc i64 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %411, i8* %412, align 1, !tbaa !2449
  %413 = lshr i64 %384, 63
  %414 = lshr i64 %385, 63
  %415 = xor i64 %410, %413
  %416 = xor i64 %410, %414
  %417 = add nuw nsw i64 %415, %416
  %418 = icmp eq i64 %417, 2
  %419 = zext i1 %418 to i8
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %419, i8* %420, align 1, !tbaa !2450
  %421 = load i64, i64* %RBP
  %422 = sub i64 %421, 12
  %423 = load i64, i64* %PC
  %424 = add i64 %423, 4
  store i64 %424, i64* %PC
  %425 = inttoptr i64 %422 to i32*
  %426 = load i32, i32* %425
  %427 = sext i32 %426 to i64
  store i64 %427, i64* %RCX, align 8, !tbaa !2428
  %428 = load i64, i64* %RAX
  %429 = load i64, i64* %RCX
  %430 = mul i64 %429, 4
  %431 = add i64 %430, %428
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 4
  store i64 %433, i64* %PC
  %434 = inttoptr i64 %431 to i32*
  %435 = load i32, i32* %434
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %436, align 1, !tbaa !2432
  %437 = and i32 %435, 255
  %438 = call i32 @llvm.ctpop.i32(i32 %437) #16
  %439 = trunc i32 %438 to i8
  %440 = and i8 %439, 1
  %441 = xor i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %441, i8* %442, align 1, !tbaa !2446
  %443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %443, align 1, !tbaa !2447
  %444 = icmp eq i32 %435, 0
  %445 = zext i1 %444 to i8
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %445, i8* %446, align 1, !tbaa !2448
  %447 = lshr i32 %435, 31
  %448 = trunc i32 %447 to i8
  %449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %448, i8* %449, align 1, !tbaa !2449
  %450 = lshr i32 %435, 31
  %451 = xor i32 %447, %450
  %452 = add nuw nsw i32 %451, %450
  %453 = icmp eq i32 %452, 2
  %454 = zext i1 %453 to i8
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %454, i8* %455, align 1, !tbaa !2450
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 26
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 6
  %460 = load i64, i64* %PC
  %461 = add i64 %460, 6
  store i64 %461, i64* %PC
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %463 = load i8, i8* %462, align 1, !tbaa !2448
  store i8 %463, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %465 = icmp ne i8 %463, 0
  %466 = select i1 %465, i64 %457, i64 %459
  store i64 %466, i64* %464, align 8, !tbaa !2428
  %467 = load i8, i8* %BRANCH_TAKEN
  %468 = icmp eq i8 %467, 1
  br i1 %468, label %block_40075c, label %block_400748
}

; Function Attrs: noinline
define %struct.Memory* @sub_400510_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400510:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_4004a0_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_4007a0_Trial(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4007a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC
  %40 = sub i64 %37, 16
  store i64 %40, i64* %RSP, align 8, !tbaa !2428
  %41 = icmp ult i64 %37, 16
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %42, i8* %43, align 1, !tbaa !2432
  %44 = trunc i64 %40 to i32
  %45 = and i32 %44, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = xor i64 16, %37
  %52 = xor i64 %51, %40
  %53 = lshr i64 %52, 4
  %54 = trunc i64 %53 to i8
  %55 = and i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %55, i8* %56, align 1, !tbaa !2447
  %57 = icmp eq i64 %40, 0
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %58, i8* %59, align 1, !tbaa !2448
  %60 = lshr i64 %40, 63
  %61 = trunc i64 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %61, i8* %62, align 1, !tbaa !2449
  %63 = lshr i64 %37, 63
  %64 = xor i64 %60, %63
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = load i64, i64* %RBP
  %70 = sub i64 %69, 8
  %71 = load i32, i32* %EDI
  %72 = zext i32 %71 to i64
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 3
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %70 to i32*
  store i32 %71, i32* %75
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 7
  store i64 %77, i64* %PC
  %78 = load i32, i32* bitcast (%kount_type* @kount to i32*)
  %79 = zext i32 %78 to i64
  store i64 %79, i64* %RDI, align 8, !tbaa !2428
  %80 = load i64, i64* %RDI
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC
  %83 = trunc i64 %80 to i32
  %84 = add i32 1, %83
  %85 = zext i32 %84 to i64
  store i64 %85, i64* %RDI, align 8, !tbaa !2428
  %86 = icmp ult i32 %84, %83
  %87 = icmp ult i32 %84, 1
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2432
  %91 = and i32 %84, 255
  %92 = call i32 @llvm.ctpop.i32(i32 %91) #16
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %95, i8* %96, align 1, !tbaa !2446
  %97 = xor i64 1, %80
  %98 = trunc i64 %97 to i32
  %99 = xor i32 %98, %84
  %100 = lshr i32 %99, 4
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2447
  %104 = icmp eq i32 %84, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2448
  %107 = lshr i32 %84, 31
  %108 = trunc i32 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2449
  %110 = lshr i32 %83, 31
  %111 = xor i32 %107, %110
  %112 = add nuw nsw i32 %111, %107
  %113 = icmp eq i32 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2450
  %116 = load i32, i32* %EDI
  %117 = zext i32 %116 to i64
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 7
  store i64 %119, i64* %PC
  store i32 %116, i32* bitcast (%kount_type* @kount to i32*)
  %120 = load i64, i64* %RBP
  %121 = sub i64 %120, 12
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 7
  store i64 %123, i64* %PC
  %124 = inttoptr i64 %121 to i32*
  store i32 0, i32* %124
  br label %block_4007c3

block_40085f:                                     ; preds = %block_400824, %block_400858
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.3, %block_400858 ], [ %MEMORY.2, %block_400824 ]
  %125 = load i64, i64* %RBP
  %126 = sub i64 %125, 4
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 3
  store i64 %128, i64* %PC
  %129 = inttoptr i64 %126 to i32*
  %130 = load i32, i32* %129
  %131 = zext i32 %130 to i64
  store i64 %131, i64* %RAX, align 8, !tbaa !2428
  %132 = load i64, i64* %RSP
  %133 = load i64, i64* %PC
  %134 = add i64 %133, 4
  store i64 %134, i64* %PC
  %135 = add i64 16, %132
  store i64 %135, i64* %RSP, align 8, !tbaa !2428
  %136 = icmp ult i64 %135, %132
  %137 = icmp ult i64 %135, 16
  %138 = or i1 %136, %137
  %139 = zext i1 %138 to i8
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %139, i8* %140, align 1, !tbaa !2432
  %141 = trunc i64 %135 to i32
  %142 = and i32 %141, 255
  %143 = call i32 @llvm.ctpop.i32(i32 %142) #16
  %144 = trunc i32 %143 to i8
  %145 = and i8 %144, 1
  %146 = xor i8 %145, 1
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %146, i8* %147, align 1, !tbaa !2446
  %148 = xor i64 16, %132
  %149 = xor i64 %148, %135
  %150 = lshr i64 %149, 4
  %151 = trunc i64 %150 to i8
  %152 = and i8 %151, 1
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %152, i8* %153, align 1, !tbaa !2447
  %154 = icmp eq i64 %135, 0
  %155 = zext i1 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %155, i8* %156, align 1, !tbaa !2448
  %157 = lshr i64 %135, 63
  %158 = trunc i64 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %158, i8* %159, align 1, !tbaa !2449
  %160 = lshr i64 %132, 63
  %161 = xor i64 %157, %160
  %162 = add nuw nsw i64 %161, %157
  %163 = icmp eq i64 %162, 2
  %164 = zext i1 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %164, i8* %165, align 1, !tbaa !2450
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 1
  store i64 %167, i64* %PC
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %169 = load i64, i64* %168, align 8, !tbaa !2428
  %170 = add i64 %169, 8
  %171 = inttoptr i64 %169 to i64*
  %172 = load i64, i64* %171
  store i64 %172, i64* %RBP, align 8, !tbaa !2428
  store i64 %170, i64* %168, align 8, !tbaa !2428
  %173 = load i64, i64* %PC
  %174 = add i64 %173, 1
  store i64 %174, i64* %PC
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %177 = load i64, i64* %176, align 8, !tbaa !2428
  %178 = inttoptr i64 %177 to i64*
  %179 = load i64, i64* %178
  store i64 %179, i64* %175, align 8, !tbaa !2428
  %180 = add i64 %177, 8
  store i64 %180, i64* %176, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4007fb:                                     ; preds = %block_4007e7
  %181 = load i64, i64* %RBP
  %182 = sub i64 %181, 12
  %183 = load i64, i64* %PC
  %184 = add i64 %183, 3
  store i64 %184, i64* %PC
  %185 = inttoptr i64 %182 to i32*
  %186 = load i32, i32* %185
  %187 = zext i32 %186 to i64
  store i64 %187, i64* %RDI, align 8, !tbaa !2428
  %188 = load i64, i64* %RBP
  %189 = sub i64 %188, 8
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 3
  store i64 %191, i64* %PC
  %192 = inttoptr i64 %189 to i32*
  %193 = load i32, i32* %192
  %194 = zext i32 %193 to i64
  store i64 %194, i64* %RSI, align 8, !tbaa !2428
  %195 = load i64, i64* %PC
  %196 = sub i64 %195, 497
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 5
  store i64 %200, i64* %PC
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %202 = load i64, i64* %201, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %198, i64* %204
  store i64 %203, i64* %201, align 8, !tbaa !2428
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %196, i64* %205, align 8, !tbaa !2428
  %206 = load i64, i64* %PC
  %207 = call %struct.Memory* @sub_400610_Place_renamed_(%struct.State* %0, i64 %206, %struct.Memory* %429)
  %208 = load i64, i64* %RBP
  %209 = sub i64 %208, 16
  %210 = load i32, i32* %EAX
  %211 = zext i32 %210 to i64
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 3
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %209 to i32*
  store i32 %210, i32* %214
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 16
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 3
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  %220 = load i32, i32* %219
  %221 = zext i32 %220 to i64
  store i64 %221, i64* %RDI, align 8, !tbaa !2428
  %222 = load i64, i64* %PC
  %223 = sub i64 %222, 108
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 5
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 5
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = add i64 %229, -8
  %231 = inttoptr i64 %230 to i64*
  store i64 %225, i64* %231
  store i64 %230, i64* %228, align 8, !tbaa !2428
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %223, i64* %232, align 8, !tbaa !2428
  %233 = load i64, i64* %PC
  %234 = call %struct.Memory* @sub_4007a0_Trial_renamed_(%struct.State* %0, i64 %233, %struct.Memory* %207)
  %235 = load i32, i32* %EAX
  %236 = zext i32 %235 to i64
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %239, align 1, !tbaa !2432
  %240 = and i32 %235, 255
  %241 = call i32 @llvm.ctpop.i32(i32 %240) #16
  %242 = trunc i32 %241 to i8
  %243 = and i8 %242, 1
  %244 = xor i8 %243, 1
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %244, i8* %245, align 1, !tbaa !2446
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %246, align 1, !tbaa !2447
  %247 = icmp eq i32 %235, 0
  %248 = zext i1 %247 to i8
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %248, i8* %249, align 1, !tbaa !2448
  %250 = lshr i32 %235, 31
  %251 = trunc i32 %250 to i8
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %251, i8* %252, align 1, !tbaa !2449
  %253 = lshr i32 %235, 31
  %254 = xor i32 %250, %253
  %255 = add nuw nsw i32 %254, %253
  %256 = icmp eq i32 %255, 2
  %257 = zext i1 %256 to i8
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %257, i8* %258, align 1, !tbaa !2450
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 16
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 6
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 6
  store i64 %264, i64* %PC
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %266 = load i8, i8* %265, align 1, !tbaa !2448
  %267 = icmp eq i8 %266, 0
  %268 = zext i1 %267 to i8
  store i8 %268, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %270 = select i1 %267, i64 %260, i64 %262
  store i64 %270, i64* %269, align 8, !tbaa !2428
  %271 = load i8, i8* %BRANCH_TAKEN
  %272 = icmp eq i8 %271, 1
  br i1 %272, label %block_400824, label %block_40081a

block_400858:                                     ; preds = %block_4007c3
  %273 = sub i64 %594, 4
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 7
  store i64 %275, i64* %PC
  %276 = inttoptr i64 %273 to i32*
  store i32 0, i32* %276
  br label %block_40085f

block_400830:                                     ; preds = %block_40081a
  %277 = load i64, i64* %RBP
  %278 = sub i64 %277, 12
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 3
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %278 to i32*
  %282 = load i32, i32* %281
  %283 = zext i32 %282 to i64
  store i64 %283, i64* %RDI, align 8, !tbaa !2428
  %284 = load i64, i64* %RBP
  %285 = sub i64 %284, 8
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 3
  store i64 %287, i64* %PC
  %288 = inttoptr i64 %285 to i32*
  %289 = load i32, i32* %288
  %290 = zext i32 %289 to i64
  store i64 %290, i64* %RSI, align 8, !tbaa !2428
  %291 = load i64, i64* %PC
  %292 = sub i64 %291, 310
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 5
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 5
  store i64 %296, i64* %PC
  %297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %298 = load i64, i64* %297, align 8, !tbaa !2428
  %299 = add i64 %298, -8
  %300 = inttoptr i64 %299 to i64*
  store i64 %294, i64* %300
  store i64 %299, i64* %297, align 8, !tbaa !2428
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %292, i64* %301, align 8, !tbaa !2428
  %302 = load i64, i64* %PC
  %303 = call %struct.Memory* @sub_400700_Remove_renamed_(%struct.State* %0, i64 %302, %struct.Memory* %234)
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 5
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 5
  store i64 %307, i64* %PC
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %305, i64* %308, align 8, !tbaa !2428
  br label %block_400840

block_4007cd:                                     ; preds = %block_4007c3
  %309 = sub i64 %594, 12
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 4
  store i64 %311, i64* %PC
  %312 = inttoptr i64 %309 to i32*
  %313 = load i32, i32* %312
  %314 = sext i32 %313 to i64
  store i64 %314, i64* %RAX, align 8, !tbaa !2428
  %315 = load i64, i64* %RAX
  %316 = mul i64 %315, 4
  %317 = add i64 %316, ptrtoint (%class_type* @class to i64)
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 8
  store i64 %319, i64* %PC
  %320 = inttoptr i64 %317 to i32*
  %321 = load i32, i32* %320
  %322 = sext i32 %321 to i64
  store i64 %322, i64* %RAX, align 8, !tbaa !2428
  %323 = load i64, i64* %RAX
  %324 = mul i64 %323, 4
  %325 = add i64 %324, ptrtoint (%piececount_type* @piececount to i64)
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 8
  store i64 %327, i64* %PC
  %328 = inttoptr i64 %325 to i32*
  %329 = load i32, i32* %328
  %330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %330, align 1, !tbaa !2432
  %331 = and i32 %329, 255
  %332 = call i32 @llvm.ctpop.i32(i32 %331) #16
  %333 = trunc i32 %332 to i8
  %334 = and i8 %333, 1
  %335 = xor i8 %334, 1
  %336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %335, i8* %336, align 1, !tbaa !2446
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %337, align 1, !tbaa !2447
  %338 = icmp eq i32 %329, 0
  %339 = zext i1 %338 to i8
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %339, i8* %340, align 1, !tbaa !2448
  %341 = lshr i32 %329, 31
  %342 = trunc i32 %341 to i8
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %342, i8* %343, align 1, !tbaa !2449
  %344 = lshr i32 %329, 31
  %345 = xor i32 %341, %344
  %346 = add nuw nsw i32 %345, %344
  %347 = icmp eq i32 %346, 2
  %348 = zext i1 %347 to i8
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %348, i8* %349, align 1, !tbaa !2450
  %350 = load i64, i64* %PC
  %351 = add i64 %350, 100
  %352 = load i64, i64* %PC
  %353 = add i64 %352, 6
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 6
  store i64 %355, i64* %PC
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %357 = load i8, i8* %356, align 1, !tbaa !2448
  store i8 %357, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %359 = icmp ne i8 %357, 0
  %360 = select i1 %359, i64 %351, i64 %353
  store i64 %360, i64* %358, align 8, !tbaa !2428
  %361 = load i8, i8* %BRANCH_TAKEN
  %362 = icmp eq i8 %361, 1
  br i1 %362, label %block_400845, label %block_4007e7

block_40081a:                                     ; preds = %block_4007fb
  %363 = load i64, i64* %RBP
  %364 = sub i64 %363, 16
  %365 = load i64, i64* %PC
  %366 = add i64 %365, 4
  store i64 %366, i64* %PC
  %367 = inttoptr i64 %364 to i32*
  %368 = load i32, i32* %367
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %369, align 1, !tbaa !2432
  %370 = and i32 %368, 255
  %371 = call i32 @llvm.ctpop.i32(i32 %370) #16
  %372 = trunc i32 %371 to i8
  %373 = and i8 %372, 1
  %374 = xor i8 %373, 1
  %375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %374, i8* %375, align 1, !tbaa !2446
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %376, align 1, !tbaa !2447
  %377 = icmp eq i32 %368, 0
  %378 = zext i1 %377 to i8
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %378, i8* %379, align 1, !tbaa !2448
  %380 = lshr i32 %368, 31
  %381 = trunc i32 %380 to i8
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %381, i8* %382, align 1, !tbaa !2449
  %383 = lshr i32 %368, 31
  %384 = xor i32 %380, %383
  %385 = add nuw nsw i32 %384, %383
  %386 = icmp eq i32 %385, 2
  %387 = zext i1 %386 to i8
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %387, i8* %388, align 1, !tbaa !2450
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 18
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 6
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 6
  store i64 %394, i64* %PC
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %396 = load i8, i8* %395, align 1, !tbaa !2448
  %397 = icmp eq i8 %396, 0
  %398 = zext i1 %397 to i8
  store i8 %398, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %400 = select i1 %397, i64 %390, i64 %392
  store i64 %400, i64* %399, align 8, !tbaa !2428
  %401 = load i8, i8* %BRANCH_TAKEN
  %402 = icmp eq i8 %401, 1
  br i1 %402, label %block_400830, label %block_400824

block_4007e7:                                     ; preds = %block_4007cd
  %403 = load i64, i64* %RBP
  %404 = sub i64 %403, 12
  %405 = load i64, i64* %PC
  %406 = add i64 %405, 3
  store i64 %406, i64* %PC
  %407 = inttoptr i64 %404 to i32*
  %408 = load i32, i32* %407
  %409 = zext i32 %408 to i64
  store i64 %409, i64* %RDI, align 8, !tbaa !2428
  %410 = load i64, i64* %RBP
  %411 = sub i64 %410, 8
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 3
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %411 to i32*
  %415 = load i32, i32* %414
  %416 = zext i32 %415 to i64
  store i64 %416, i64* %RSI, align 8, !tbaa !2428
  %417 = load i64, i64* %PC
  %418 = sub i64 %417, 621
  %419 = load i64, i64* %PC
  %420 = add i64 %419, 5
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 5
  store i64 %422, i64* %PC
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %424 = load i64, i64* %423, align 8, !tbaa !2428
  %425 = add i64 %424, -8
  %426 = inttoptr i64 %425 to i64*
  store i64 %420, i64* %426
  store i64 %425, i64* %423, align 8, !tbaa !2428
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %418, i64* %427, align 8, !tbaa !2428
  %428 = load i64, i64* %PC
  %429 = call %struct.Memory* @sub_400580_Fit_renamed_(%struct.State* %0, i64 %428, %struct.Memory* %MEMORY.3)
  %430 = load i32, i32* %EAX
  %431 = zext i32 %430 to i64
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 3
  store i64 %433, i64* %PC
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %434, align 1, !tbaa !2432
  %435 = and i32 %430, 255
  %436 = call i32 @llvm.ctpop.i32(i32 %435) #16
  %437 = trunc i32 %436 to i8
  %438 = and i8 %437, 1
  %439 = xor i8 %438, 1
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %439, i8* %440, align 1, !tbaa !2446
  %441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %441, align 1, !tbaa !2447
  %442 = icmp eq i32 %430, 0
  %443 = zext i1 %442 to i8
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %443, i8* %444, align 1, !tbaa !2448
  %445 = lshr i32 %430, 31
  %446 = trunc i32 %445 to i8
  %447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %446, i8* %447, align 1, !tbaa !2449
  %448 = lshr i32 %430, 31
  %449 = xor i32 %445, %448
  %450 = add nuw nsw i32 %449, %448
  %451 = icmp eq i32 %450, 2
  %452 = zext i1 %451 to i8
  %453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %452, i8* %453, align 1, !tbaa !2450
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 75
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 6
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 6
  store i64 %459, i64* %PC
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %461 = load i8, i8* %460, align 1, !tbaa !2448
  store i8 %461, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %463 = icmp ne i8 %461, 0
  %464 = select i1 %463, i64 %455, i64 %457
  store i64 %464, i64* %462, align 8, !tbaa !2428
  %465 = load i8, i8* %BRANCH_TAKEN
  %466 = icmp eq i8 %465, 1
  br i1 %466, label %block_400840, label %block_4007fb

block_400845:                                     ; preds = %block_400840, %block_4007cd
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_4007cd ], [ %MEMORY.4, %block_400840 ]
  %467 = load i64, i64* %PC
  %468 = add i64 %467, 5
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 5
  store i64 %470, i64* %PC
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %468, i64* %471, align 8, !tbaa !2428
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 12
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 3
  store i64 %475, i64* %PC
  %476 = inttoptr i64 %473 to i32*
  %477 = load i32, i32* %476
  %478 = zext i32 %477 to i64
  store i64 %478, i64* %RAX, align 8, !tbaa !2428
  %479 = load i64, i64* %RAX
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 3
  store i64 %481, i64* %PC
  %482 = trunc i64 %479 to i32
  %483 = add i32 1, %482
  %484 = zext i32 %483 to i64
  store i64 %484, i64* %RAX, align 8, !tbaa !2428
  %485 = icmp ult i32 %483, %482
  %486 = icmp ult i32 %483, 1
  %487 = or i1 %485, %486
  %488 = zext i1 %487 to i8
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %488, i8* %489, align 1, !tbaa !2432
  %490 = and i32 %483, 255
  %491 = call i32 @llvm.ctpop.i32(i32 %490) #16
  %492 = trunc i32 %491 to i8
  %493 = and i8 %492, 1
  %494 = xor i8 %493, 1
  %495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %494, i8* %495, align 1, !tbaa !2446
  %496 = xor i64 1, %479
  %497 = trunc i64 %496 to i32
  %498 = xor i32 %497, %483
  %499 = lshr i32 %498, 4
  %500 = trunc i32 %499 to i8
  %501 = and i8 %500, 1
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %501, i8* %502, align 1, !tbaa !2447
  %503 = icmp eq i32 %483, 0
  %504 = zext i1 %503 to i8
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %504, i8* %505, align 1, !tbaa !2448
  %506 = lshr i32 %483, 31
  %507 = trunc i32 %506 to i8
  %508 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %507, i8* %508, align 1, !tbaa !2449
  %509 = lshr i32 %482, 31
  %510 = xor i32 %506, %509
  %511 = add nuw nsw i32 %510, %506
  %512 = icmp eq i32 %511, 2
  %513 = zext i1 %512 to i8
  %514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %513, i8* %514, align 1, !tbaa !2450
  %515 = load i64, i64* %RBP
  %516 = sub i64 %515, 12
  %517 = load i32, i32* %EAX
  %518 = zext i32 %517 to i64
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 3
  store i64 %520, i64* %PC
  %521 = inttoptr i64 %516 to i32*
  store i32 %517, i32* %521
  %522 = load i64, i64* %PC
  %523 = sub i64 %522, 144
  %524 = load i64, i64* %PC
  %525 = add i64 %524, 5
  store i64 %525, i64* %PC
  %526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %523, i64* %526, align 8, !tbaa !2428
  br label %block_4007c3

block_400824:                                     ; preds = %block_40081a, %block_4007fb
  %MEMORY.2 = phi %struct.Memory* [ %234, %block_4007fb ], [ %234, %block_40081a ]
  %527 = load i64, i64* %RBP
  %528 = sub i64 %527, 4
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 7
  store i64 %530, i64* %PC
  %531 = inttoptr i64 %528 to i32*
  store i32 1, i32* %531
  %532 = load i64, i64* %PC
  %533 = add i64 %532, 52
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 5
  store i64 %535, i64* %PC
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %533, i64* %536, align 8, !tbaa !2428
  br label %block_40085f

block_4007c3:                                     ; preds = %block_400845, %block_4007a0
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_4007a0 ], [ %MEMORY.1, %block_400845 ]
  %537 = load i64, i64* %RBP
  %538 = sub i64 %537, 12
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 4
  store i64 %540, i64* %PC
  %541 = inttoptr i64 %538 to i32*
  %542 = load i32, i32* %541
  %543 = sub i32 %542, 12
  %544 = icmp ult i32 %542, 12
  %545 = zext i1 %544 to i8
  %546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %545, i8* %546, align 1, !tbaa !2432
  %547 = and i32 %543, 255
  %548 = call i32 @llvm.ctpop.i32(i32 %547) #16
  %549 = trunc i32 %548 to i8
  %550 = and i8 %549, 1
  %551 = xor i8 %550, 1
  %552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %551, i8* %552, align 1, !tbaa !2446
  %553 = xor i32 %542, 12
  %554 = xor i32 %553, %543
  %555 = lshr i32 %554, 4
  %556 = trunc i32 %555 to i8
  %557 = and i8 %556, 1
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %557, i8* %558, align 1, !tbaa !2447
  %559 = icmp eq i32 %543, 0
  %560 = zext i1 %559 to i8
  %561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %560, i8* %561, align 1, !tbaa !2448
  %562 = lshr i32 %543, 31
  %563 = trunc i32 %562 to i8
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %563, i8* %564, align 1, !tbaa !2449
  %565 = lshr i32 %542, 31
  %566 = xor i32 %562, %565
  %567 = add nuw nsw i32 %566, %565
  %568 = icmp eq i32 %567, 2
  %569 = zext i1 %568 to i8
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %569, i8* %570, align 1, !tbaa !2450
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 145
  %573 = load i64, i64* %PC
  %574 = add i64 %573, 6
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 6
  store i64 %576, i64* %PC
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %578 = load i8, i8* %577, align 1, !tbaa !2448
  %579 = icmp eq i8 %578, 0
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %581 = load i8, i8* %580, align 1, !tbaa !2449
  %582 = icmp ne i8 %581, 0
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %584 = load i8, i8* %583, align 1, !tbaa !2450
  %585 = icmp ne i8 %584, 0
  %586 = xor i1 %582, %585
  %587 = xor i1 %586, true
  %588 = and i1 %579, %587
  %589 = zext i1 %588 to i8
  store i8 %589, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %591 = select i1 %588, i64 %572, i64 %574
  store i64 %591, i64* %590, align 8, !tbaa !2428
  %592 = load i8, i8* %BRANCH_TAKEN
  %593 = icmp eq i8 %592, 1
  %594 = load i64, i64* %RBP
  br i1 %593, label %block_400858, label %block_4007cd

block_400840:                                     ; preds = %block_4007e7, %block_400830
  %MEMORY.4 = phi %struct.Memory* [ %429, %block_4007e7 ], [ %303, %block_400830 ]
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 5
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 5
  store i64 %598, i64* %PC
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %596, i64* %599, align 8, !tbaa !2428
  br label %block_400845
}

; Function Attrs: noinline
define %struct.Memory* @sub_400610_Place(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400610:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = load i64, i64* %RBP
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %34 = load i64, i64* %33, align 8, !tbaa !2428
  %35 = add i64 %34, -8
  %36 = inttoptr i64 %35 to i64*
  store i64 %30, i64* %36
  store i64 %35, i64* %33, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 3
  store i64 %39, i64* %PC
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i32, i32* %EDI
  %43 = zext i32 %42 to i64
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  %46 = inttoptr i64 %41 to i32*
  store i32 %42, i32* %46
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 12
  %49 = load i32, i32* %ESI
  %50 = zext i32 %49 to i64
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  %53 = inttoptr i64 %48 to i32*
  store i32 %49, i32* %53
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 16
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 7
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i32*
  store i32 0, i32* %58
  br label %block_400621

block_40067f:                                     ; preds = %block_400621
  %59 = load i64, i64* %RBP
  %60 = sub i64 %59, 8
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to i32*
  %64 = load i32, i32* %63
  %65 = sext i32 %64 to i64
  store i64 %65, i64* %RAX, align 8, !tbaa !2428
  %66 = load i64, i64* %RAX
  %67 = mul i64 %66, 4
  %68 = add i64 %67, ptrtoint (%class_type* @class to i64)
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 8
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %68 to i32*
  %72 = load i32, i32* %71
  %73 = sext i32 %72 to i64
  store i64 %73, i64* %RAX, align 8, !tbaa !2428
  %74 = load i64, i64* %RAX
  %75 = mul i64 %74, 4
  %76 = add i64 %75, ptrtoint (%piececount_type* @piececount to i64)
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 7
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %76 to i32*
  %80 = load i32, i32* %79
  %81 = zext i32 %80 to i64
  store i64 %81, i64* %RCX, align 8, !tbaa !2428
  %82 = load i64, i64* %RCX
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 3
  store i64 %84, i64* %PC
  %85 = trunc i64 %82 to i32
  %86 = sub i32 %85, 1
  %87 = zext i32 %86 to i64
  store i64 %87, i64* %RCX, align 8, !tbaa !2428
  %88 = icmp ult i32 %85, 1
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2432
  %91 = and i32 %86, 255
  %92 = call i32 @llvm.ctpop.i32(i32 %91) #16
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %95, i8* %96, align 1, !tbaa !2446
  %97 = xor i64 1, %82
  %98 = trunc i64 %97 to i32
  %99 = xor i32 %98, %86
  %100 = lshr i32 %99, 4
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2447
  %104 = icmp eq i32 %86, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2448
  %107 = lshr i32 %86, 31
  %108 = trunc i32 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2449
  %110 = lshr i32 %85, 31
  %111 = xor i32 %107, %110
  %112 = add nuw nsw i32 %111, %110
  %113 = icmp eq i32 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2450
  %116 = load i64, i64* %RBP
  %117 = sub i64 %116, 8
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 4
  store i64 %119, i64* %PC
  %120 = inttoptr i64 %117 to i32*
  %121 = load i32, i32* %120
  %122 = sext i32 %121 to i64
  store i64 %122, i64* %RAX, align 8, !tbaa !2428
  %123 = load i64, i64* %RAX
  %124 = mul i64 %123, 4
  %125 = add i64 %124, ptrtoint (%class_type* @class to i64)
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 8
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i32*
  %129 = load i32, i32* %128
  %130 = sext i32 %129 to i64
  store i64 %130, i64* %RAX, align 8, !tbaa !2428
  %131 = load i64, i64* %RAX
  %132 = mul i64 %131, 4
  %133 = add i64 %132, ptrtoint (%piececount_type* @piececount to i64)
  %134 = load i32, i32* %ECX
  %135 = zext i32 %134 to i64
  %136 = load i64, i64* %PC
  %137 = add i64 %136, 7
  store i64 %137, i64* %PC
  %138 = inttoptr i64 %133 to i32*
  store i32 %134, i32* %138
  %139 = load i64, i64* %RBP
  %140 = sub i64 %139, 12
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 3
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %140 to i32*
  %144 = load i32, i32* %143
  %145 = zext i32 %144 to i64
  store i64 %145, i64* %RCX, align 8, !tbaa !2428
  %146 = load i64, i64* %RBP
  %147 = sub i64 %146, 16
  %148 = load i32, i32* %ECX
  %149 = zext i32 %148 to i64
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 3
  store i64 %151, i64* %PC
  %152 = inttoptr i64 %147 to i32*
  store i32 %148, i32* %152
  br label %block_4006ae

block_4006d8:                                     ; preds = %block_4006bb
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 5
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 5
  store i64 %156, i64* %PC
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %154, i64* %157, align 8, !tbaa !2428
  %158 = load i64, i64* %RBP
  %159 = sub i64 %158, 16
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162
  %164 = zext i32 %163 to i64
  store i64 %164, i64* %RAX, align 8, !tbaa !2428
  %165 = load i64, i64* %RAX
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 3
  store i64 %167, i64* %PC
  %168 = trunc i64 %165 to i32
  %169 = add i32 1, %168
  %170 = zext i32 %169 to i64
  store i64 %170, i64* %RAX, align 8, !tbaa !2428
  %171 = icmp ult i32 %169, %168
  %172 = icmp ult i32 %169, 1
  %173 = or i1 %171, %172
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %174, i8* %175, align 1, !tbaa !2432
  %176 = and i32 %169, 255
  %177 = call i32 @llvm.ctpop.i32(i32 %176) #16
  %178 = trunc i32 %177 to i8
  %179 = and i8 %178, 1
  %180 = xor i8 %179, 1
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %180, i8* %181, align 1, !tbaa !2446
  %182 = xor i64 1, %165
  %183 = trunc i64 %182 to i32
  %184 = xor i32 %183, %169
  %185 = lshr i32 %184, 4
  %186 = trunc i32 %185 to i8
  %187 = and i8 %186, 1
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %187, i8* %188, align 1, !tbaa !2447
  %189 = icmp eq i32 %169, 0
  %190 = zext i1 %189 to i8
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %190, i8* %191, align 1, !tbaa !2448
  %192 = lshr i32 %169, 31
  %193 = trunc i32 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %193, i8* %194, align 1, !tbaa !2449
  %195 = lshr i32 %168, 31
  %196 = xor i32 %192, %195
  %197 = add nuw nsw i32 %196, %192
  %198 = icmp eq i32 %197, 2
  %199 = zext i1 %198 to i8
  %200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %199, i8* %200, align 1, !tbaa !2450
  %201 = load i64, i64* %RBP
  %202 = sub i64 %201, 16
  %203 = load i32, i32* %EAX
  %204 = zext i32 %203 to i64
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 3
  store i64 %206, i64* %PC
  %207 = inttoptr i64 %202 to i32*
  store i32 %203, i32* %207
  %208 = load i64, i64* %PC
  %209 = sub i64 %208, 56
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 5
  store i64 %211, i64* %PC
  %212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %209, i64* %212, align 8, !tbaa !2428
  br label %block_4006ae

block_4006bb:                                     ; preds = %block_4006ae
  %213 = sub i64 %516, 16
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 4
  store i64 %215, i64* %PC
  %216 = inttoptr i64 %213 to i32*
  %217 = load i32, i32* %216
  %218 = sext i32 %217 to i64
  store i64 %218, i64* %RAX, align 8, !tbaa !2428
  %219 = load i64, i64* %RAX
  %220 = mul i64 %219, 4
  %221 = add i64 %220, ptrtoint (%puzzl_type* @puzzl to i64)
  %222 = load i64, i64* %PC
  %223 = add i64 %222, 8
  store i64 %223, i64* %PC
  %224 = inttoptr i64 %221 to i32*
  %225 = load i32, i32* %224
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %226, align 1, !tbaa !2432
  %227 = and i32 %225, 255
  %228 = call i32 @llvm.ctpop.i32(i32 %227) #16
  %229 = trunc i32 %228 to i8
  %230 = and i8 %229, 1
  %231 = xor i8 %230, 1
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %231, i8* %232, align 1, !tbaa !2446
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %233, align 1, !tbaa !2447
  %234 = icmp eq i32 %225, 0
  %235 = zext i1 %234 to i8
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %235, i8* %236, align 1, !tbaa !2448
  %237 = lshr i32 %225, 31
  %238 = trunc i32 %237 to i8
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %238, i8* %239, align 1, !tbaa !2449
  %240 = lshr i32 %225, 31
  %241 = xor i32 %237, %240
  %242 = add nuw nsw i32 %241, %240
  %243 = icmp eq i32 %242, 2
  %244 = zext i1 %243 to i8
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %244, i8* %245, align 1, !tbaa !2450
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 17
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 6
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 6
  store i64 %251, i64* %PC
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %253 = load i8, i8* %252, align 1, !tbaa !2448
  %254 = icmp eq i8 %253, 0
  %255 = zext i1 %254 to i8
  store i8 %255, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %257 = select i1 %254, i64 %247, i64 %249
  store i64 %257, i64* %256, align 8, !tbaa !2428
  %258 = load i8, i8* %BRANCH_TAKEN
  %259 = icmp eq i8 %258, 1
  br i1 %259, label %block_4006d8, label %block_4006cd

block_400658:                                     ; preds = %block_400635
  %260 = load i64, i64* %RBP
  %261 = sub i64 %260, 12
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 3
  store i64 %263, i64* %PC
  %264 = inttoptr i64 %261 to i32*
  %265 = load i32, i32* %264
  %266 = zext i32 %265 to i64
  store i64 %266, i64* %RAX, align 8, !tbaa !2428
  %267 = load i64, i64* %RAX
  %268 = load i64, i64* %RBP
  %269 = sub i64 %268, 16
  %270 = load i64, i64* %PC
  %271 = add i64 %270, 3
  store i64 %271, i64* %PC
  %272 = trunc i64 %267 to i32
  %273 = inttoptr i64 %269 to i32*
  %274 = load i32, i32* %273
  %275 = add i32 %274, %272
  %276 = zext i32 %275 to i64
  store i64 %276, i64* %RAX, align 8, !tbaa !2428
  %277 = icmp ult i32 %275, %272
  %278 = icmp ult i32 %275, %274
  %279 = or i1 %277, %278
  %280 = zext i1 %279 to i8
  %281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %280, i8* %281, align 1, !tbaa !2432
  %282 = and i32 %275, 255
  %283 = call i32 @llvm.ctpop.i32(i32 %282) #16
  %284 = trunc i32 %283 to i8
  %285 = and i8 %284, 1
  %286 = xor i8 %285, 1
  %287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %286, i8* %287, align 1, !tbaa !2446
  %288 = xor i32 %274, %272
  %289 = xor i32 %288, %275
  %290 = lshr i32 %289, 4
  %291 = trunc i32 %290 to i8
  %292 = and i8 %291, 1
  %293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %292, i8* %293, align 1, !tbaa !2447
  %294 = icmp eq i32 %275, 0
  %295 = zext i1 %294 to i8
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %295, i8* %296, align 1, !tbaa !2448
  %297 = lshr i32 %275, 31
  %298 = trunc i32 %297 to i8
  %299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %298, i8* %299, align 1, !tbaa !2449
  %300 = lshr i32 %272, 31
  %301 = lshr i32 %274, 31
  %302 = xor i32 %297, %300
  %303 = xor i32 %297, %301
  %304 = add nuw nsw i32 %302, %303
  %305 = icmp eq i32 %304, 2
  %306 = zext i1 %305 to i8
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %306, i8* %307, align 1, !tbaa !2450
  %308 = load i32, i32* %EAX
  %309 = zext i32 %308 to i64
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 3
  store i64 %311, i64* %PC
  %312 = shl i64 %309, 32
  %313 = ashr exact i64 %312, 32
  store i64 %313, i64* %RCX, align 8, !tbaa !2428
  %314 = load i64, i64* %RCX
  %315 = mul i64 %314, 4
  %316 = add i64 %315, ptrtoint (%puzzl_type* @puzzl to i64)
  %317 = load i64, i64* %PC
  %318 = add i64 %317, 11
  store i64 %318, i64* %PC
  %319 = inttoptr i64 %316 to i32*
  store i32 1, i32* %319
  br label %block_40066c

block_400635:                                     ; preds = %block_400621
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 10
  store i64 %321, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RAX, align 8, !tbaa !2428
  %322 = load i64, i64* %RBP
  %323 = sub i64 %322, 8
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 4
  store i64 %325, i64* %PC
  %326 = inttoptr i64 %323 to i32*
  %327 = load i32, i32* %326
  %328 = sext i32 %327 to i64
  store i64 %328, i64* %RCX, align 8, !tbaa !2428
  %329 = load i64, i64* %RCX
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 4
  store i64 %331, i64* %PC
  %332 = shl i64 %329, 10
  %333 = icmp slt i64 %332, 0
  %334 = shl i64 %332, 1
  store i64 %334, i64* %RCX, align 8, !tbaa !2428
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %336 = zext i1 %333 to i8
  store i8 %336, i8* %335, align 1, !tbaa !2451
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %338 = trunc i64 %334 to i32
  %339 = and i32 %338, 254
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  store i8 %343, i8* %337, align 1, !tbaa !2451
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %344, align 1, !tbaa !2451
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %346 = icmp eq i64 %334, 0
  %347 = zext i1 %346 to i8
  store i8 %347, i8* %345, align 1, !tbaa !2451
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %349 = lshr i64 %334, 63
  %350 = trunc i64 %349 to i8
  store i8 %350, i8* %348, align 1, !tbaa !2451
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2451
  %352 = load i64, i64* %RAX
  %353 = load i64, i64* %RCX
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 3
  store i64 %355, i64* %PC
  %356 = add i64 %353, %352
  store i64 %356, i64* %RAX, align 8, !tbaa !2428
  %357 = icmp ult i64 %356, %352
  %358 = icmp ult i64 %356, %353
  %359 = or i1 %357, %358
  %360 = zext i1 %359 to i8
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %360, i8* %361, align 1, !tbaa !2432
  %362 = trunc i64 %356 to i32
  %363 = and i32 %362, 255
  %364 = call i32 @llvm.ctpop.i32(i32 %363) #16
  %365 = trunc i32 %364 to i8
  %366 = and i8 %365, 1
  %367 = xor i8 %366, 1
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %367, i8* %368, align 1, !tbaa !2446
  %369 = xor i64 %353, %352
  %370 = xor i64 %369, %356
  %371 = lshr i64 %370, 4
  %372 = trunc i64 %371 to i8
  %373 = and i8 %372, 1
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %373, i8* %374, align 1, !tbaa !2447
  %375 = icmp eq i64 %356, 0
  %376 = zext i1 %375 to i8
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %376, i8* %377, align 1, !tbaa !2448
  %378 = lshr i64 %356, 63
  %379 = trunc i64 %378 to i8
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %379, i8* %380, align 1, !tbaa !2449
  %381 = lshr i64 %352, 63
  %382 = lshr i64 %353, 63
  %383 = xor i64 %378, %381
  %384 = xor i64 %378, %382
  %385 = add nuw nsw i64 %383, %384
  %386 = icmp eq i64 %385, 2
  %387 = zext i1 %386 to i8
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %387, i8* %388, align 1, !tbaa !2450
  %389 = load i64, i64* %RBP
  %390 = sub i64 %389, 16
  %391 = load i64, i64* %PC
  %392 = add i64 %391, 4
  store i64 %392, i64* %PC
  %393 = inttoptr i64 %390 to i32*
  %394 = load i32, i32* %393
  %395 = sext i32 %394 to i64
  store i64 %395, i64* %RCX, align 8, !tbaa !2428
  %396 = load i64, i64* %RAX
  %397 = load i64, i64* %RCX
  %398 = mul i64 %397, 4
  %399 = add i64 %398, %396
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 4
  store i64 %401, i64* %PC
  %402 = inttoptr i64 %399 to i32*
  %403 = load i32, i32* %402
  %404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %404, align 1, !tbaa !2432
  %405 = and i32 %403, 255
  %406 = call i32 @llvm.ctpop.i32(i32 %405) #16
  %407 = trunc i32 %406 to i8
  %408 = and i8 %407, 1
  %409 = xor i8 %408, 1
  %410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %409, i8* %410, align 1, !tbaa !2446
  %411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %411, align 1, !tbaa !2447
  %412 = icmp eq i32 %403, 0
  %413 = zext i1 %412 to i8
  %414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %413, i8* %414, align 1, !tbaa !2448
  %415 = lshr i32 %403, 31
  %416 = trunc i32 %415 to i8
  %417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %416, i8* %417, align 1, !tbaa !2449
  %418 = lshr i32 %403, 31
  %419 = xor i32 %415, %418
  %420 = add nuw nsw i32 %419, %418
  %421 = icmp eq i32 %420, 2
  %422 = zext i1 %421 to i8
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %422, i8* %423, align 1, !tbaa !2450
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 26
  %426 = load i64, i64* %PC
  %427 = add i64 %426, 6
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 6
  store i64 %429, i64* %PC
  %430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %431 = load i8, i8* %430, align 1, !tbaa !2448
  store i8 %431, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %433 = icmp ne i8 %431, 0
  %434 = select i1 %433, i64 %425, i64 %427
  store i64 %434, i64* %432, align 8, !tbaa !2428
  %435 = load i8, i8* %BRANCH_TAKEN
  %436 = icmp eq i8 %435, 1
  br i1 %436, label %block_40066c, label %block_400658

block_4006f2:                                     ; preds = %block_4006eb, %block_4006cd
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4006eb ], [ %MEMORY.1, %block_4006cd ]
  %437 = load i64, i64* %RBP
  %438 = sub i64 %437, 4
  %439 = load i64, i64* %PC
  %440 = add i64 %439, 3
  store i64 %440, i64* %PC
  %441 = inttoptr i64 %438 to i32*
  %442 = load i32, i32* %441
  %443 = zext i32 %442 to i64
  store i64 %443, i64* %RAX, align 8, !tbaa !2428
  %444 = load i64, i64* %PC
  %445 = add i64 %444, 1
  store i64 %445, i64* %PC
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %447 = load i64, i64* %446, align 8, !tbaa !2428
  %448 = add i64 %447, 8
  %449 = inttoptr i64 %447 to i64*
  %450 = load i64, i64* %449
  store i64 %450, i64* %RBP, align 8, !tbaa !2428
  store i64 %448, i64* %446, align 8, !tbaa !2428
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 1
  store i64 %452, i64* %PC
  %453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %455 = load i64, i64* %454, align 8, !tbaa !2428
  %456 = inttoptr i64 %455 to i64*
  %457 = load i64, i64* %456
  store i64 %457, i64* %453, align 8, !tbaa !2428
  %458 = add i64 %455, 8
  store i64 %458, i64* %454, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4006ae:                                     ; preds = %block_4006d8, %block_40067f
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_40067f ], [ %MEMORY.1, %block_4006d8 ]
  %459 = load i64, i64* %RBP
  %460 = sub i64 %459, 16
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 7
  store i64 %462, i64* %PC
  %463 = inttoptr i64 %460 to i32*
  %464 = load i32, i32* %463
  %465 = sub i32 %464, 511
  %466 = icmp ult i32 %464, 511
  %467 = zext i1 %466 to i8
  %468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %467, i8* %468, align 1, !tbaa !2432
  %469 = and i32 %465, 255
  %470 = call i32 @llvm.ctpop.i32(i32 %469) #16
  %471 = trunc i32 %470 to i8
  %472 = and i8 %471, 1
  %473 = xor i8 %472, 1
  %474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %473, i8* %474, align 1, !tbaa !2446
  %475 = xor i32 %464, 511
  %476 = xor i32 %475, %465
  %477 = lshr i32 %476, 4
  %478 = trunc i32 %477 to i8
  %479 = and i8 %478, 1
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %479, i8* %480, align 1, !tbaa !2447
  %481 = icmp eq i32 %465, 0
  %482 = zext i1 %481 to i8
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %482, i8* %483, align 1, !tbaa !2448
  %484 = lshr i32 %465, 31
  %485 = trunc i32 %484 to i8
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %485, i8* %486, align 1, !tbaa !2449
  %487 = lshr i32 %464, 31
  %488 = xor i32 %484, %487
  %489 = add nuw nsw i32 %488, %487
  %490 = icmp eq i32 %489, 2
  %491 = zext i1 %490 to i8
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %491, i8* %492, align 1, !tbaa !2450
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 54
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 6
  %497 = load i64, i64* %PC
  %498 = add i64 %497, 6
  store i64 %498, i64* %PC
  %499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %500 = load i8, i8* %499, align 1, !tbaa !2448
  %501 = icmp eq i8 %500, 0
  %502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %503 = load i8, i8* %502, align 1, !tbaa !2449
  %504 = icmp ne i8 %503, 0
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %506 = load i8, i8* %505, align 1, !tbaa !2450
  %507 = icmp ne i8 %506, 0
  %508 = xor i1 %504, %507
  %509 = xor i1 %508, true
  %510 = and i1 %501, %509
  %511 = zext i1 %510 to i8
  store i8 %511, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %513 = select i1 %510, i64 %494, i64 %496
  store i64 %513, i64* %512, align 8, !tbaa !2428
  %514 = load i8, i8* %BRANCH_TAKEN
  %515 = icmp eq i8 %514, 1
  %516 = load i64, i64* %RBP
  br i1 %515, label %block_4006eb, label %block_4006bb

block_4006cd:                                     ; preds = %block_4006bb
  %517 = load i64, i64* %RBP
  %518 = sub i64 %517, 16
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 3
  store i64 %520, i64* %PC
  %521 = inttoptr i64 %518 to i32*
  %522 = load i32, i32* %521
  %523 = zext i32 %522 to i64
  store i64 %523, i64* %RAX, align 8, !tbaa !2428
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 4
  %526 = load i32, i32* %EAX
  %527 = zext i32 %526 to i64
  %528 = load i64, i64* %PC
  %529 = add i64 %528, 3
  store i64 %529, i64* %PC
  %530 = inttoptr i64 %525 to i32*
  store i32 %526, i32* %530
  %531 = load i64, i64* %PC
  %532 = add i64 %531, 31
  %533 = load i64, i64* %PC
  %534 = add i64 %533, 5
  store i64 %534, i64* %PC
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %532, i64* %535, align 8, !tbaa !2428
  br label %block_4006f2

block_40066c:                                     ; preds = %block_400635, %block_400658
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.3, %block_400635 ], [ %MEMORY.3, %block_400658 ]
  %536 = load i64, i64* %PC
  %537 = add i64 %536, 5
  %538 = load i64, i64* %PC
  %539 = add i64 %538, 5
  store i64 %539, i64* %PC
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %537, i64* %540, align 8, !tbaa !2428
  %541 = load i64, i64* %RBP
  %542 = sub i64 %541, 16
  %543 = load i64, i64* %PC
  %544 = add i64 %543, 3
  store i64 %544, i64* %PC
  %545 = inttoptr i64 %542 to i32*
  %546 = load i32, i32* %545
  %547 = zext i32 %546 to i64
  store i64 %547, i64* %RAX, align 8, !tbaa !2428
  %548 = load i64, i64* %RAX
  %549 = load i64, i64* %PC
  %550 = add i64 %549, 3
  store i64 %550, i64* %PC
  %551 = trunc i64 %548 to i32
  %552 = add i32 1, %551
  %553 = zext i32 %552 to i64
  store i64 %553, i64* %RAX, align 8, !tbaa !2428
  %554 = icmp ult i32 %552, %551
  %555 = icmp ult i32 %552, 1
  %556 = or i1 %554, %555
  %557 = zext i1 %556 to i8
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %557, i8* %558, align 1, !tbaa !2432
  %559 = and i32 %552, 255
  %560 = call i32 @llvm.ctpop.i32(i32 %559) #16
  %561 = trunc i32 %560 to i8
  %562 = and i8 %561, 1
  %563 = xor i8 %562, 1
  %564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %563, i8* %564, align 1, !tbaa !2446
  %565 = xor i64 1, %548
  %566 = trunc i64 %565 to i32
  %567 = xor i32 %566, %552
  %568 = lshr i32 %567, 4
  %569 = trunc i32 %568 to i8
  %570 = and i8 %569, 1
  %571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %570, i8* %571, align 1, !tbaa !2447
  %572 = icmp eq i32 %552, 0
  %573 = zext i1 %572 to i8
  %574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %573, i8* %574, align 1, !tbaa !2448
  %575 = lshr i32 %552, 31
  %576 = trunc i32 %575 to i8
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %576, i8* %577, align 1, !tbaa !2449
  %578 = lshr i32 %551, 31
  %579 = xor i32 %575, %578
  %580 = add nuw nsw i32 %579, %575
  %581 = icmp eq i32 %580, 2
  %582 = zext i1 %581 to i8
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %582, i8* %583, align 1, !tbaa !2450
  %584 = load i64, i64* %RBP
  %585 = sub i64 %584, 16
  %586 = load i32, i32* %EAX
  %587 = zext i32 %586 to i64
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 3
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %585 to i32*
  store i32 %586, i32* %590
  %591 = load i64, i64* %PC
  %592 = sub i64 %591, 89
  %593 = load i64, i64* %PC
  %594 = add i64 %593, 5
  store i64 %594, i64* %PC
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %592, i64* %595, align 8, !tbaa !2428
  br label %block_400621

block_4006eb:                                     ; preds = %block_4006ae
  %596 = sub i64 %516, 4
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 7
  store i64 %598, i64* %PC
  %599 = inttoptr i64 %596 to i32*
  store i32 0, i32* %599
  br label %block_4006f2

block_400621:                                     ; preds = %block_40066c, %block_400610
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_400610 ], [ %MEMORY.2, %block_40066c ]
  %600 = load i64, i64* %RBP
  %601 = sub i64 %600, 16
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 3
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i32*
  %605 = load i32, i32* %604
  %606 = zext i32 %605 to i64
  store i64 %606, i64* %RAX, align 8, !tbaa !2428
  %607 = load i64, i64* %RBP
  %608 = sub i64 %607, 8
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %608 to i32*
  %612 = load i32, i32* %611
  %613 = sext i32 %612 to i64
  store i64 %613, i64* %RCX, align 8, !tbaa !2428
  %614 = load i32, i32* %EAX
  %615 = zext i32 %614 to i64
  %616 = load i64, i64* %RCX
  %617 = mul i64 %616, 4
  %618 = add i64 %617, ptrtoint (%piecemax_type* @piecemax to i64)
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  %622 = load i32, i32* %621
  %623 = sub i32 %614, %622
  %624 = icmp ult i32 %614, %622
  %625 = zext i1 %624 to i8
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %625, i8* %626, align 1, !tbaa !2432
  %627 = and i32 %623, 255
  %628 = call i32 @llvm.ctpop.i32(i32 %627) #16
  %629 = trunc i32 %628 to i8
  %630 = and i8 %629, 1
  %631 = xor i8 %630, 1
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %631, i8* %632, align 1, !tbaa !2446
  %633 = xor i32 %622, %614
  %634 = xor i32 %633, %623
  %635 = lshr i32 %634, 4
  %636 = trunc i32 %635 to i8
  %637 = and i8 %636, 1
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %637, i8* %638, align 1, !tbaa !2447
  %639 = icmp eq i32 %623, 0
  %640 = zext i1 %639 to i8
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %640, i8* %641, align 1, !tbaa !2448
  %642 = lshr i32 %623, 31
  %643 = trunc i32 %642 to i8
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %643, i8* %644, align 1, !tbaa !2449
  %645 = lshr i32 %614, 31
  %646 = lshr i32 %622, 31
  %647 = xor i32 %646, %645
  %648 = xor i32 %642, %645
  %649 = add nuw nsw i32 %648, %647
  %650 = icmp eq i32 %649, 2
  %651 = zext i1 %650 to i8
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %651, i8* %652, align 1, !tbaa !2450
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 80
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 6
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 6
  store i64 %658, i64* %PC
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %660 = load i8, i8* %659, align 1, !tbaa !2448
  %661 = icmp eq i8 %660, 0
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %663 = load i8, i8* %662, align 1, !tbaa !2449
  %664 = icmp ne i8 %663, 0
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %666 = load i8, i8* %665, align 1, !tbaa !2450
  %667 = icmp ne i8 %666, 0
  %668 = xor i1 %664, %667
  %669 = xor i1 %668, true
  %670 = and i1 %661, %669
  %671 = zext i1 %670 to i8
  store i8 %671, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %673 = select i1 %670, i64 %654, i64 %656
  store i64 %673, i64* %672, align 8, !tbaa !2428
  %674 = load i8, i8* %BRANCH_TAKEN
  %675 = icmp eq i8 %674, 1
  br i1 %675, label %block_40067f, label %block_400635
}

; Function Attrs: noinline
define %struct.Memory* @sub_400460__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400460:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4012b0_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4012b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2432
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2446
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2447
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2448
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2449
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2450
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 4
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 7
  store i64 %63, i64* %PC
  %64 = inttoptr i64 %61 to i32*
  store i32 0, i32* %64
  %65 = load i64, i64* %RBP
  %66 = sub i64 %65, 8
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 7
  store i64 %68, i64* %PC
  %69 = inttoptr i64 %66 to i32*
  store i32 0, i32* %69
  br label %block_4012c6

block_4012e3:                                     ; preds = %block_4012c6
  %70 = load i64, i64* %RAX
  %71 = load i32, i32* %EAX
  %72 = zext i32 %71 to i64
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = xor i64 %72, %70
  %76 = trunc i64 %75 to i32
  %77 = and i64 %75, 4294967295
  store i64 %77, i64* %RAX, align 8, !tbaa !2428
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %78, align 1, !tbaa !2432
  %79 = and i32 %76, 255
  %80 = call i32 @llvm.ctpop.i32(i32 %79) #16
  %81 = trunc i32 %80 to i8
  %82 = and i8 %81, 1
  %83 = xor i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %83, i8* %84, align 1, !tbaa !2446
  %85 = icmp eq i32 %76, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2448
  %88 = lshr i32 %76, 31
  %89 = trunc i32 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2449
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %91, align 1, !tbaa !2450
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %92, align 1, !tbaa !2447
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 16, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 16
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 16, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %130 = load i64, i64* %129, align 8, !tbaa !2428
  %131 = add i64 %130, 8
  %132 = inttoptr i64 %130 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %RBP, align 8, !tbaa !2428
  store i64 %131, i64* %129, align 8, !tbaa !2428
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 1
  store i64 %135, i64* %PC
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %138 = load i64, i64* %137, align 8, !tbaa !2428
  %139 = inttoptr i64 %138 to i64*
  %140 = load i64, i64* %139
  store i64 %140, i64* %136, align 8, !tbaa !2428
  %141 = add i64 %138, 8
  store i64 %141, i64* %137, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4012c6:                                     ; preds = %block_4012d0, %block_4012b0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4012b0 ], [ %207, %block_4012d0 ]
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 8
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i32*
  %147 = load i32, i32* %146
  %148 = sub i32 %147, 100
  %149 = icmp ult i32 %147, 100
  %150 = zext i1 %149 to i8
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %150, i8* %151, align 1, !tbaa !2432
  %152 = and i32 %148, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i32 %147, 100
  %159 = xor i32 %158, %148
  %160 = lshr i32 %159, 4
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i32 %148, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i32 %148, 31
  %168 = trunc i32 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i32 %147, 31
  %171 = xor i32 %167, %170
  %172 = add nuw nsw i32 %171, %170
  %173 = icmp eq i32 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 25
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 6
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 6
  store i64 %181, i64* %PC
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %183 = load i8, i8* %182, align 1, !tbaa !2449
  %184 = icmp ne i8 %183, 0
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %186 = load i8, i8* %185, align 1, !tbaa !2450
  %187 = icmp ne i8 %186, 0
  %188 = xor i1 %184, %187
  %189 = xor i1 %188, true
  %190 = zext i1 %189 to i8
  store i8 %190, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %192 = select i1 %188, i64 %179, i64 %177
  store i64 %192, i64* %191, align 8, !tbaa !2428
  %193 = load i8, i8* %BRANCH_TAKEN
  %194 = icmp eq i8 %193, 1
  br i1 %194, label %block_4012e3, label %block_4012d0

block_4012d0:                                     ; preds = %block_4012c6
  %195 = load i64, i64* %PC
  %196 = sub i64 %195, 2656
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 5
  store i64 %200, i64* %PC
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %202 = load i64, i64* %201, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %198, i64* %204
  store i64 %203, i64* %201, align 8, !tbaa !2428
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %196, i64* %205, align 8, !tbaa !2428
  %206 = load i64, i64* %PC
  %207 = call %struct.Memory* @sub_400870_Puzzle_renamed_(%struct.State* %0, i64 %206, %struct.Memory* %MEMORY.0)
  %208 = load i64, i64* %RBP
  %209 = sub i64 %208, 8
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 3
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i32*
  %213 = load i32, i32* %212
  %214 = zext i32 %213 to i64
  store i64 %214, i64* %RAX, align 8, !tbaa !2428
  %215 = load i64, i64* %RAX
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 3
  store i64 %217, i64* %PC
  %218 = trunc i64 %215 to i32
  %219 = add i32 1, %218
  %220 = zext i32 %219 to i64
  store i64 %220, i64* %RAX, align 8, !tbaa !2428
  %221 = icmp ult i32 %219, %218
  %222 = icmp ult i32 %219, 1
  %223 = or i1 %221, %222
  %224 = zext i1 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %224, i8* %225, align 1, !tbaa !2432
  %226 = and i32 %219, 255
  %227 = call i32 @llvm.ctpop.i32(i32 %226) #16
  %228 = trunc i32 %227 to i8
  %229 = and i8 %228, 1
  %230 = xor i8 %229, 1
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %230, i8* %231, align 1, !tbaa !2446
  %232 = xor i64 1, %215
  %233 = trunc i64 %232 to i32
  %234 = xor i32 %233, %219
  %235 = lshr i32 %234, 4
  %236 = trunc i32 %235 to i8
  %237 = and i8 %236, 1
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %237, i8* %238, align 1, !tbaa !2447
  %239 = icmp eq i32 %219, 0
  %240 = zext i1 %239 to i8
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %240, i8* %241, align 1, !tbaa !2448
  %242 = lshr i32 %219, 31
  %243 = trunc i32 %242 to i8
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %243, i8* %244, align 1, !tbaa !2449
  %245 = lshr i32 %218, 31
  %246 = xor i32 %242, %245
  %247 = add nuw nsw i32 %246, %242
  %248 = icmp eq i32 %247, 2
  %249 = zext i1 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %249, i8* %250, align 1, !tbaa !2450
  %251 = load i64, i64* %RBP
  %252 = sub i64 %251, 8
  %253 = load i32, i32* %EAX
  %254 = zext i32 %253 to i64
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 3
  store i64 %256, i64* %PC
  %257 = inttoptr i64 %252 to i32*
  store i32 %253, i32* %257
  %258 = load i64, i64* %PC
  %259 = sub i64 %258, 24
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 5
  store i64 %261, i64* %PC
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %259, i64* %262, align 8, !tbaa !2428
  br label %block_4012c6
}

; Function Attrs: noinline
define %struct.Memory* @sub_400430__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400430:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401360___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_4012f0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_601ff0__got_type, %seg_601ff0__got_type* @seg_601ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_619230___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_4012f0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4012f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_601de0__init_array_type* @seg_601de0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_601de0__init_array_type* @seg_601de0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 3884
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_4003f0__init_proc_renamed_(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_401346, label %block_401326

block_401346:                                     ; preds = %block_401330, %block_4012f0
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_4012f0 ], [ %387, %block_401330 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401326:                                     ; preds = %block_4012f0
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_401330

block_401330:                                     ; preds = %block_401330, %block_401326
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_401326 ], [ %387, %block_401330 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_401330, label %block_401346
}

; Function Attrs: noinline
define %struct.Memory* @sub_400470_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400470:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %37 = icmp ult i64 %33, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 ptrtoint (%__bss_start_type* @__bss_start to i64), %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), %59
  %61 = xor i64 %56, %59
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 25
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 2
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %76 = load i8, i8* %75, align 1, !tbaa !2448
  store i8 %76, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = icmp ne i8 %76, 0
  %79 = select i1 %78, i64 %70, i64 %72
  store i64 %79, i64* %77, align 8, !tbaa !2428
  %80 = load i8, i8* %BRANCH_TAKEN
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %block_400498, label %block_400481

block_400498:                                     ; preds = %block_400481, %block_400493, %block_400470
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400470 ], [ %2, %block_400481 ], [ %2, %block_400493 ]
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 1
  store i64 %83, i64* %PC
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %85 = load i64, i64* %84, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RBP, align 8, !tbaa !2428
  store i64 %86, i64* %84, align 8, !tbaa !2428
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 1
  store i64 %90, i64* %PC
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %93 = load i64, i64* %92, align 8, !tbaa !2428
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94
  store i64 %95, i64* %91, align 8, !tbaa !2428
  %96 = add i64 %93, 8
  store i64 %96, i64* %92, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40049a:                                     ; preds = %block_40048b
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %RAX
  %99 = add i64 %98, %97
  %100 = load i16, i16* %AX
  %101 = zext i16 %100 to i64
  %102 = load i64, i64* %PC
  %103 = add i64 %102, 6
  store i64 %103, i64* %PC
  %104 = load i64, i64* %PC
  %105 = tail call %struct.Memory* @sub_4004a0_register_tm_clones(%struct.State* %0, i64 %104, %struct.Memory* %2)
  ret %struct.Memory* %105

block_400493:                                     ; preds = %block_40048b
  %106 = load i64, i64* %RAX
  %107 = load i64, i64* %RAX
  %108 = add i64 %107, %106
  %109 = load i32, i32* %EAX
  %110 = zext i32 %109 to i64
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 5
  store i64 %112, i64* %PC
  br label %block_400498

block_40048b:                                     ; preds = %block_400481
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 1
  store i64 %114, i64* %PC
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %116 = load i64, i64* %115, align 8, !tbaa !2428
  %117 = add i64 %116, 8
  %118 = inttoptr i64 %116 to i64*
  %119 = load i64, i64* %118
  store i64 %119, i64* %RBP, align 8, !tbaa !2428
  store i64 %117, i64* %115, align 8, !tbaa !2428
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 5
  store i64 %121, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %122 = load i64, i64* %RAX
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 2
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %122, i64* %125, align 8, !tbaa !2428
  %126 = load i64, i64* %PC
  switch i64 %126, label %163 [
    i64 4195482, label %block_40049a
    i64 4195475, label %block_400493
  ]

block_400481:                                     ; preds = %block_400470
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 5
  store i64 %128, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %129 = load i64, i64* %RAX
  %130 = load i64, i64* %RAX
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 3
  store i64 %132, i64* %PC
  %133 = and i64 %130, %129
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %134, align 1, !tbaa !2432
  %135 = trunc i64 %133 to i32
  %136 = and i32 %135, 255
  %137 = call i32 @llvm.ctpop.i32(i32 %136) #16
  %138 = trunc i32 %137 to i8
  %139 = and i8 %138, 1
  %140 = xor i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %140, i8* %141, align 1, !tbaa !2446
  %142 = icmp eq i64 %133, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %133, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %148, align 1, !tbaa !2450
  %149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %149, align 1, !tbaa !2447
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 15
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 2
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 2
  store i64 %155, i64* %PC
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %157 = load i8, i8* %156, align 1, !tbaa !2448
  store i8 %157, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %159 = icmp ne i8 %157, 0
  %160 = select i1 %159, i64 %151, i64 %153
  store i64 %160, i64* %158, align 8, !tbaa !2428
  %161 = load i8, i8* %BRANCH_TAKEN
  %162 = icmp eq i8 %161, 1
  br i1 %162, label %block_400498, label %block_40048b

; <label>:163:                                    ; preds = %block_40048b
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %164, %struct.Memory* %2)
  ret %struct.Memory* %165
}

; Function Attrs: noinline
define %struct.Memory* @sub_401364__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401364:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400540_Rand(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400540:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC
  store i64 %31, i64* %RBP, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 12
  store i64 %35, i64* %PC
  %36 = load i64, i64* bitcast (%seed_type* @seed to i64*)
  %37 = sext i64 %36 to i128
  %38 = and i128 %37, -18446744073709551616
  %39 = zext i64 %36 to i128
  %40 = or i128 %38, %39
  %41 = mul nsw i128 %40, 1309
  %42 = trunc i128 %41 to i64
  store i64 %42, i64* %RAX, align 8, !tbaa !2428
  %43 = sext i64 %42 to i128
  %44 = icmp ne i128 %43, %41
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %45, i8* %46, align 1, !tbaa !2432
  %47 = trunc i128 %41 to i32
  %48 = and i32 %47, 255
  %49 = call i32 @llvm.ctpop.i32(i32 %48) #16
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = xor i8 %51, 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %52, i8* %53, align 1, !tbaa !2446
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %54, align 1, !tbaa !2447
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %42, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %59, align 1, !tbaa !2450
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 6
  store i64 %62, i64* %PC
  %63 = add i64 13849, %60
  store i64 %63, i64* %RAX, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %60
  %65 = icmp ult i64 %63, 13849
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %67, i8* %68, align 1, !tbaa !2432
  %69 = trunc i64 %63 to i32
  %70 = and i32 %69, 255
  %71 = call i32 @llvm.ctpop.i32(i32 %70) #16
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %74, i8* %75, align 1, !tbaa !2446
  %76 = xor i64 13849, %60
  %77 = xor i64 %76, %63
  %78 = lshr i64 %77, 4
  %79 = trunc i64 %78 to i8
  %80 = and i8 %79, 1
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %80, i8* %81, align 1, !tbaa !2447
  %82 = icmp eq i64 %63, 0
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %83, i8* %84, align 1, !tbaa !2448
  %85 = lshr i64 %63, 63
  %86 = trunc i64 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %86, i8* %87, align 1, !tbaa !2449
  %88 = lshr i64 %60, 63
  %89 = xor i64 %85, %88
  %90 = add nuw nsw i64 %89, %85
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %92, i8* %93, align 1, !tbaa !2450
  %94 = load i64, i64* %RAX
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 6
  store i64 %96, i64* %PC
  %97 = and i64 65535, %94
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %98, align 1, !tbaa !2432
  %99 = trunc i64 %97 to i32
  %100 = and i32 %99, 255
  %101 = call i32 @llvm.ctpop.i32(i32 %100) #16
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %104, i8* %105, align 1, !tbaa !2446
  %106 = icmp eq i64 %97, 0
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %107, i8* %108, align 1, !tbaa !2448
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %109, align 1, !tbaa !2449
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %110, align 1, !tbaa !2450
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %111, align 1, !tbaa !2447
  %112 = load i64, i64* %RAX
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 8
  store i64 %114, i64* %PC
  store i64 %112, i64* bitcast (%seed_type* @seed to i64*)
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 8
  store i64 %116, i64* %PC
  %117 = load i64, i64* bitcast (%seed_type* @seed to i64*)
  store i64 %117, i64* %RAX, align 8, !tbaa !2428
  %118 = load i32, i32* %EAX
  %119 = zext i32 %118 to i64
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 2
  store i64 %121, i64* %PC
  %122 = and i64 %119, 4294967295
  store i64 %122, i64* %RCX, align 8, !tbaa !2428
  %123 = load i32, i32* %ECX
  %124 = zext i32 %123 to i64
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 2
  store i64 %126, i64* %PC
  %127 = and i64 %124, 4294967295
  store i64 %127, i64* %RAX, align 8, !tbaa !2428
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 1
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = add i64 %131, 8
  %133 = inttoptr i64 %131 to i64*
  %134 = load i64, i64* %133
  store i64 %134, i64* %RBP, align 8, !tbaa !2428
  store i64 %132, i64* %130, align 8, !tbaa !2428
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 1
  store i64 %136, i64* %PC
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %139 = load i64, i64* %138, align 8, !tbaa !2428
  %140 = inttoptr i64 %139 to i64*
  %141 = load i64, i64* %140
  store i64 %141, i64* %137, align 8, !tbaa !2428
  %142 = add i64 %139, 8
  store i64 %142, i64* %138, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4003f0__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4003f0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_601ff0__got_type* @seg_601ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_400402, label %block_400400

block_400400:                                     ; preds = %block_4003f0
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_400402

block_400402:                                     ; preds = %block_400400, %block_4003f0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4003f0 ], [ %92, %block_400400 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004e0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_400500, label %block_4004e9

block_400500:                                     ; preds = %block_4004e0
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4004e9:                                     ; preds = %block_4004e0
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400470_deregister_tm_clones_renamed_(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_401360___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401360:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400520_Initrand(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400520:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 12
  store i64 %23, i64* %PC
  store i64 74755, i64* bitcast (%seed_type* @seed to i64*)
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 1
  store i64 %25, i64* %PC
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %27 = load i64, i64* %26, align 8, !tbaa !2428
  %28 = add i64 %27, 8
  %29 = inttoptr i64 %27 to i64*
  %30 = load i64, i64* %29
  store i64 %30, i64* %RBP, align 8, !tbaa !2428
  store i64 %28, i64* %26, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  store i64 %37, i64* %33, align 8, !tbaa !2428
  %38 = add i64 %35, 8
  store i64 %38, i64* %34, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004a0_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, ptrtoint (%__bss_start_type* @__bss_start to i64)
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 ptrtoint (%__bss_start_type* @__bss_start to i64), %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), %62
  %64 = xor i64 %59, %62
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RBP, align 8, !tbaa !2428
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = ashr i64 %72, 2
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = ashr i64 %75, 1
  store i64 %78, i64* %RSI, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %77, i8* %79, align 1, !tbaa !2451
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = call i32 @llvm.ctpop.i32(i32 %82) #16
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %80, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %87, align 1, !tbaa !2451
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %88, align 1, !tbaa !2451
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %92 = lshr i64 %78, 63
  %93 = trunc i64 %92 to i8
  store i8 %93, i8* %91, align 1, !tbaa !2451
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %94, align 1, !tbaa !2451
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = lshr i64 %98, 62
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  %104 = lshr i64 %101, 1
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %103, i8* %105, align 1, !tbaa !2451
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %106, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %113, align 1, !tbaa !2451
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %115 = icmp eq i64 %104, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %114, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %118, align 1, !tbaa !2451
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = add i64 %120, %119
  store i64 %123, i64* %RSI, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %119
  %125 = icmp ult i64 %123, %120
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2432
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2446
  %136 = xor i64 %120, %119
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2447
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2448
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2449
  %148 = lshr i64 %119, 63
  %149 = lshr i64 %120, 63
  %150 = xor i64 %145, %148
  %151 = xor i64 %145, %149
  %152 = add nuw nsw i64 %150, %151
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %154, i8* %155, align 1, !tbaa !2450
  %156 = load i64, i64* %RSI
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = trunc i64 %156 to i8
  %160 = and i8 %159, 1
  %161 = ashr i64 %156, 1
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %162, align 1, !tbaa !2451
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #16
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %163, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2451
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = icmp eq i64 %161, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %171, align 1, !tbaa !2451
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %175 = lshr i64 %161, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %174, align 1, !tbaa !2451
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %177, align 1, !tbaa !2451
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 23
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 2
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 2
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %185 = load i8, i8* %184, align 1, !tbaa !2448
  store i8 %185, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %187 = icmp ne i8 %185, 0
  %188 = select i1 %187, i64 %179, i64 %181
  store i64 %188, i64* %186, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  br i1 %190, label %block_4004d8, label %block_4004c3

block_4004da:                                     ; preds = %block_4004cd
  %191 = load i64, i64* %RAX
  %192 = load i64, i64* %RAX
  %193 = add i64 %192, %191
  %194 = load i16, i16* %AX
  %195 = zext i16 %194 to i64
  %196 = load i64, i64* %PC
  %197 = add i64 %196, 6
  store i64 %197, i64* %PC
  %198 = load i64, i64* %PC
  %199 = tail call %struct.Memory* @sub_4004e0___do_global_dtors_aux(%struct.State* %0, i64 %198, %struct.Memory* %2)
  ret %struct.Memory* %199

block_4004d5:                                     ; preds = %block_4004cd
  %200 = load i64, i64* %RAX
  %201 = load i32, i32* %EAX
  %202 = zext i32 %201 to i64
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 3
  store i64 %204, i64* %PC
  br label %block_4004d8

block_4004cd:                                     ; preds = %block_4004c3
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 1
  store i64 %206, i64* %PC
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %208 = load i64, i64* %207, align 8, !tbaa !2428
  %209 = add i64 %208, 8
  %210 = inttoptr i64 %208 to i64*
  %211 = load i64, i64* %210
  store i64 %211, i64* %RBP, align 8, !tbaa !2428
  store i64 %209, i64* %207, align 8, !tbaa !2428
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 5
  store i64 %213, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %214 = load i64, i64* %RAX
  %215 = load i64, i64* %PC
  %216 = add i64 %215, 2
  store i64 %216, i64* %PC
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %214, i64* %217, align 8, !tbaa !2428
  %218 = load i64, i64* %PC
  switch i64 %218, label %270 [
    i64 4195546, label %block_4004da
    i64 4195541, label %block_4004d5
  ]

block_4004d8:                                     ; preds = %block_4004c3, %block_4004d5, %block_4004a0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4004a0 ], [ %2, %block_4004c3 ], [ %2, %block_4004d5 ]
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 1
  store i64 %220, i64* %PC
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %222 = load i64, i64* %221, align 8, !tbaa !2428
  %223 = add i64 %222, 8
  %224 = inttoptr i64 %222 to i64*
  %225 = load i64, i64* %224
  store i64 %225, i64* %RBP, align 8, !tbaa !2428
  store i64 %223, i64* %221, align 8, !tbaa !2428
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 1
  store i64 %227, i64* %PC
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %230 = load i64, i64* %229, align 8, !tbaa !2428
  %231 = inttoptr i64 %230 to i64*
  %232 = load i64, i64* %231
  store i64 %232, i64* %228, align 8, !tbaa !2428
  %233 = add i64 %230, 8
  store i64 %233, i64* %229, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4004c3:                                     ; preds = %block_4004a0
  %234 = load i64, i64* %PC
  %235 = add i64 %234, 5
  store i64 %235, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %236 = load i64, i64* %RAX
  %237 = load i64, i64* %RAX
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 3
  store i64 %239, i64* %PC
  %240 = and i64 %237, %236
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %241, align 1, !tbaa !2432
  %242 = trunc i64 %240 to i32
  %243 = and i32 %242, 255
  %244 = call i32 @llvm.ctpop.i32(i32 %243) #16
  %245 = trunc i32 %244 to i8
  %246 = and i8 %245, 1
  %247 = xor i8 %246, 1
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %247, i8* %248, align 1, !tbaa !2446
  %249 = icmp eq i64 %240, 0
  %250 = zext i1 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %250, i8* %251, align 1, !tbaa !2448
  %252 = lshr i64 %240, 63
  %253 = trunc i64 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %253, i8* %254, align 1, !tbaa !2449
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %255, align 1, !tbaa !2450
  %256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %256, align 1, !tbaa !2447
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 13
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 2
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 2
  store i64 %262, i64* %PC
  %263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %264 = load i8, i8* %263, align 1, !tbaa !2448
  store i8 %264, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %266 = icmp ne i8 %264, 0
  %267 = select i1 %266, i64 %258, i64 %260
  store i64 %267, i64* %265, align 8, !tbaa !2428
  %268 = load i8, i8* %BRANCH_TAKEN
  %269 = icmp eq i8 %268, 1
  br i1 %269, label %block_4004d8, label %block_4004cd

; <label>:270:                                    ; preds = %block_4004cd
  %271 = load i64, i64* %PC
  %272 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %271, %struct.Memory* %2)
  ret %struct.Memory* %272
}

; Function Attrs: noinline
define %struct.Memory* @sub_400870_Puzzle(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400870:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %EDI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 1
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RAX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 5
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RCX = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 7
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 9
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSI = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 11
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDI = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 13
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSP = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 15
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RBP = bitcast %union.anon* %42 to i64*
  %43 = load i64, i64* %RBP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 1
  store i64 %45, i64* %PC
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %43, i64* %49
  store i64 %48, i64* %46, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = sub i64 %53, 48
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ult i64 %53, 48
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %58, i8* %59, align 1, !tbaa !2432
  %60 = trunc i64 %56 to i32
  %61 = and i32 %60, 255
  %62 = call i32 @llvm.ctpop.i32(i32 %61) #16
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %65, i8* %66, align 1, !tbaa !2446
  %67 = xor i64 48, %53
  %68 = xor i64 %67, %56
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %71, i8* %72, align 1, !tbaa !2447
  %73 = icmp eq i64 %56, 0
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %74, i8* %75, align 1, !tbaa !2448
  %76 = lshr i64 %56, 63
  %77 = trunc i64 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %77, i8* %78, align 1, !tbaa !2449
  %79 = lshr i64 %53, 63
  %80 = xor i64 %76, %79
  %81 = add nuw nsw i64 %80, %79
  %82 = icmp eq i64 %81, 2
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %83, i8* %84, align 1, !tbaa !2450
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 7
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i32*
  store i32 0, i32* %89
  br label %block_40087f

block_400ea9:                                     ; preds = %block_400e9f
  %90 = load i64, i64* %RBP
  %91 = sub i64 %90, 12
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 7
  store i64 %93, i64* %PC
  %94 = inttoptr i64 %91 to i32*
  store i32 0, i32* %94
  br label %block_400eb0

block_4011ee:                                     ; preds = %block_401187
  %95 = load i64, i64* %RDI
  %96 = load i32, i32* %EDI
  %97 = zext i32 %96 to i64
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 2
  store i64 %99, i64* %PC
  %100 = xor i64 %97, %95
  %101 = trunc i64 %100 to i32
  %102 = and i64 %100, 4294967295
  store i64 %102, i64* %RDI, align 8, !tbaa !2428
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %103, align 1, !tbaa !2432
  %104 = and i32 %101, 255
  %105 = call i32 @llvm.ctpop.i32(i32 %104) #16
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = xor i8 %107, 1
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %108, i8* %109, align 1, !tbaa !2446
  %110 = icmp eq i32 %101, 0
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %111, i8* %112, align 1, !tbaa !2448
  %113 = lshr i32 %101, 31
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %114, i8* %115, align 1, !tbaa !2449
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %116, align 1, !tbaa !2450
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %117, align 1, !tbaa !2447
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 16
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 3
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %119 to i32*
  %123 = load i32, i32* %122
  %124 = zext i32 %123 to i64
  store i64 %124, i64* %RSI, align 8, !tbaa !2428
  %125 = load i64, i64* %PC
  %126 = sub i64 %125, 3043
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 5
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 5
  store i64 %130, i64* %PC
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %132 = load i64, i64* %131, align 8, !tbaa !2428
  %133 = add i64 %132, -8
  %134 = inttoptr i64 %133 to i64*
  store i64 %128, i64* %134
  store i64 %133, i64* %131, align 8, !tbaa !2428
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %126, i64* %135, align 8, !tbaa !2428
  %136 = load i64, i64* %PC
  %137 = call %struct.Memory* @sub_400610_Place_renamed_(%struct.State* %0, i64 %136, %struct.Memory* %4307)
  %138 = load i32, i32* %EAX
  %139 = zext i32 %138 to i64
  %140 = load i64, i64* %PC
  %141 = add i64 %140, 7
  store i64 %141, i64* %PC
  store i32 %138, i32* bitcast (%n_type* @n to i32*)
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 25
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 5
  store i64 %145, i64* %PC
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %143, i64* %146, align 8, !tbaa !2428
  br label %block_401218

block_400efc:                                     ; preds = %block_400e9f
  %147 = load i64, i64* %PC
  %148 = add i64 %147, 5
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 5
  store i64 %150, i64* %PC
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %148, i64* %151, align 8, !tbaa !2428
  %152 = load i64, i64* %RBP
  %153 = sub i64 %152, 4
  %154 = load i64, i64* %PC
  %155 = add i64 %154, 3
  store i64 %155, i64* %PC
  %156 = inttoptr i64 %153 to i32*
  %157 = load i32, i32* %156
  %158 = zext i32 %157 to i64
  store i64 %158, i64* %RAX, align 8, !tbaa !2428
  %159 = load i64, i64* %RAX
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 3
  store i64 %161, i64* %PC
  %162 = trunc i64 %159 to i32
  %163 = add i32 1, %162
  %164 = zext i32 %163 to i64
  store i64 %164, i64* %RAX, align 8, !tbaa !2428
  %165 = icmp ult i32 %163, %162
  %166 = icmp ult i32 %163, 1
  %167 = or i1 %165, %166
  %168 = zext i1 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %168, i8* %169, align 1, !tbaa !2432
  %170 = and i32 %163, 255
  %171 = call i32 @llvm.ctpop.i32(i32 %170) #16
  %172 = trunc i32 %171 to i8
  %173 = and i8 %172, 1
  %174 = xor i8 %173, 1
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %174, i8* %175, align 1, !tbaa !2446
  %176 = xor i64 1, %159
  %177 = trunc i64 %176 to i32
  %178 = xor i32 %177, %163
  %179 = lshr i32 %178, 4
  %180 = trunc i32 %179 to i8
  %181 = and i8 %180, 1
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %181, i8* %182, align 1, !tbaa !2447
  %183 = icmp eq i32 %163, 0
  %184 = zext i1 %183 to i8
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %184, i8* %185, align 1, !tbaa !2448
  %186 = lshr i32 %163, 31
  %187 = trunc i32 %186 to i8
  %188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %187, i8* %188, align 1, !tbaa !2449
  %189 = lshr i32 %162, 31
  %190 = xor i32 %186, %189
  %191 = add nuw nsw i32 %190, %186
  %192 = icmp eq i32 %191, 2
  %193 = zext i1 %192 to i8
  %194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %193, i8* %194, align 1, !tbaa !2450
  %195 = load i64, i64* %RBP
  %196 = sub i64 %195, 4
  %197 = load i32, i32* %EAX
  %198 = zext i32 %197 to i64
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 3
  store i64 %200, i64* %PC
  %201 = inttoptr i64 %196 to i32*
  store i32 %197, i32* %201
  %202 = load i64, i64* %PC
  %203 = sub i64 %202, 124
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 5
  store i64 %205, i64* %PC
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %203, i64* %206, align 8, !tbaa !2428
  br label %block_400e8e

block_400be6:                                     ; preds = %block_400b89
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 5
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 5
  store i64 %210, i64* %PC
  %211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %208, i64* %211, align 8, !tbaa !2428
  %212 = load i64, i64* %RBP
  %213 = sub i64 %212, 4
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = inttoptr i64 %213 to i32*
  %217 = load i32, i32* %216
  %218 = zext i32 %217 to i64
  store i64 %218, i64* %RAX, align 8, !tbaa !2428
  %219 = load i64, i64* %RAX
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 3
  store i64 %221, i64* %PC
  %222 = trunc i64 %219 to i32
  %223 = add i32 1, %222
  %224 = zext i32 %223 to i64
  store i64 %224, i64* %RAX, align 8, !tbaa !2428
  %225 = icmp ult i32 %223, %222
  %226 = icmp ult i32 %223, 1
  %227 = or i1 %225, %226
  %228 = zext i1 %227 to i8
  %229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %228, i8* %229, align 1, !tbaa !2432
  %230 = and i32 %223, 255
  %231 = call i32 @llvm.ctpop.i32(i32 %230) #16
  %232 = trunc i32 %231 to i8
  %233 = and i8 %232, 1
  %234 = xor i8 %233, 1
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %234, i8* %235, align 1, !tbaa !2446
  %236 = xor i64 1, %219
  %237 = trunc i64 %236 to i32
  %238 = xor i32 %237, %223
  %239 = lshr i32 %238, 4
  %240 = trunc i32 %239 to i8
  %241 = and i8 %240, 1
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %241, i8* %242, align 1, !tbaa !2447
  %243 = icmp eq i32 %223, 0
  %244 = zext i1 %243 to i8
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %244, i8* %245, align 1, !tbaa !2448
  %246 = lshr i32 %223, 31
  %247 = trunc i32 %246 to i8
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %247, i8* %248, align 1, !tbaa !2449
  %249 = lshr i32 %222, 31
  %250 = xor i32 %246, %249
  %251 = add nuw nsw i32 %250, %246
  %252 = icmp eq i32 %251, 2
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %253, i8* %254, align 1, !tbaa !2450
  %255 = load i64, i64* %RBP
  %256 = sub i64 %255, 4
  %257 = load i32, i32* %EAX
  %258 = zext i32 %257 to i64
  %259 = load i64, i64* %PC
  %260 = add i64 %259, 3
  store i64 %260, i64* %PC
  %261 = inttoptr i64 %256 to i32*
  store i32 %257, i32* %261
  %262 = load i64, i64* %PC
  %263 = sub i64 %262, 124
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 5
  store i64 %265, i64* %PC
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %263, i64* %266, align 8, !tbaa !2428
  br label %block_400b78

block_400fec:                                     ; preds = %block_400fe5, %block_400ff6
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.34, %block_400fe5 ], [ %MEMORY.0, %block_400ff6 ]
  %267 = load i64, i64* %RBP
  %268 = sub i64 %267, 12
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 4
  store i64 %270, i64* %PC
  %271 = inttoptr i64 %268 to i32*
  %272 = load i32, i32* %271
  %273 = sub i32 %272, 1
  %274 = icmp ult i32 %272, 1
  %275 = zext i1 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %275, i8* %276, align 1, !tbaa !2432
  %277 = and i32 %273, 255
  %278 = call i32 @llvm.ctpop.i32(i32 %277) #16
  %279 = trunc i32 %278 to i8
  %280 = and i8 %279, 1
  %281 = xor i8 %280, 1
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %281, i8* %282, align 1, !tbaa !2446
  %283 = xor i32 %272, 1
  %284 = xor i32 %283, %273
  %285 = lshr i32 %284, 4
  %286 = trunc i32 %285 to i8
  %287 = and i8 %286, 1
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %287, i8* %288, align 1, !tbaa !2447
  %289 = icmp eq i32 %273, 0
  %290 = zext i1 %289 to i8
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %290, i8* %291, align 1, !tbaa !2448
  %292 = lshr i32 %273, 31
  %293 = trunc i32 %292 to i8
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %293, i8* %294, align 1, !tbaa !2449
  %295 = lshr i32 %272, 31
  %296 = xor i32 %292, %295
  %297 = add nuw nsw i32 %296, %295
  %298 = icmp eq i32 %297, 2
  %299 = zext i1 %298 to i8
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %299, i8* %300, align 1, !tbaa !2450
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 53
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 6
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 6
  store i64 %306, i64* %PC
  %307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %308 = load i8, i8* %307, align 1, !tbaa !2448
  %309 = icmp eq i8 %308, 0
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %311 = load i8, i8* %310, align 1, !tbaa !2449
  %312 = icmp ne i8 %311, 0
  %313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %314 = load i8, i8* %313, align 1, !tbaa !2450
  %315 = icmp ne i8 %314, 0
  %316 = xor i1 %312, %315
  %317 = xor i1 %316, true
  %318 = and i1 %309, %317
  %319 = zext i1 %318 to i8
  store i8 %319, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %321 = select i1 %318, i64 %302, i64 %304
  store i64 %321, i64* %320, align 8, !tbaa !2428
  %322 = load i8, i8* %BRANCH_TAKEN
  %323 = icmp eq i8 %322, 1
  br i1 %323, label %block_401025, label %block_400ff6

block_400dd3:                                     ; preds = %block_400d52
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 11
  store i64 %325, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 24) to i32*)
  %326 = load i64, i64* %PC
  %327 = add i64 %326, 11
  store i64 %327, i64* %PC
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 24) to i32*)
  %328 = load i64, i64* %RBP
  %329 = sub i64 %328, 4
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 7
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %329 to i32*
  store i32 0, i32* %332
  br label %block_400df0

block_400fca:                                     ; preds = %block_401038, %block_400fad
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.8, %block_400fad ], [ %MEMORY.34, %block_401038 ]
  %333 = load i64, i64* %RBP
  %334 = sub i64 %333, 4
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 4
  store i64 %336, i64* %PC
  %337 = inttoptr i64 %334 to i32*
  %338 = load i32, i32* %337
  %339 = sub i32 %338, 1
  %340 = icmp ult i32 %338, 1
  %341 = zext i1 %340 to i8
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %341, i8* %342, align 1, !tbaa !2432
  %343 = and i32 %339, 255
  %344 = call i32 @llvm.ctpop.i32(i32 %343) #16
  %345 = trunc i32 %344 to i8
  %346 = and i8 %345, 1
  %347 = xor i8 %346, 1
  %348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %347, i8* %348, align 1, !tbaa !2446
  %349 = xor i32 %338, 1
  %350 = xor i32 %349, %339
  %351 = lshr i32 %350, 4
  %352 = trunc i32 %351 to i8
  %353 = and i8 %352, 1
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %353, i8* %354, align 1, !tbaa !2447
  %355 = icmp eq i32 %339, 0
  %356 = zext i1 %355 to i8
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %356, i8* %357, align 1, !tbaa !2448
  %358 = lshr i32 %339, 31
  %359 = trunc i32 %358 to i8
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %359, i8* %360, align 1, !tbaa !2449
  %361 = lshr i32 %338, 31
  %362 = xor i32 %358, %361
  %363 = add nuw nsw i32 %362, %361
  %364 = icmp eq i32 %363, 2
  %365 = zext i1 %364 to i8
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %365, i8* %366, align 1, !tbaa !2450
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 125
  %369 = load i64, i64* %PC
  %370 = add i64 %369, 6
  %371 = load i64, i64* %PC
  %372 = add i64 %371, 6
  store i64 %372, i64* %PC
  %373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %374 = load i8, i8* %373, align 1, !tbaa !2448
  %375 = icmp eq i8 %374, 0
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %377 = load i8, i8* %376, align 1, !tbaa !2449
  %378 = icmp ne i8 %377, 0
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %380 = load i8, i8* %379, align 1, !tbaa !2450
  %381 = icmp ne i8 %380, 0
  %382 = xor i1 %378, %381
  %383 = xor i1 %382, true
  %384 = and i1 %375, %383
  %385 = zext i1 %384 to i8
  store i8 %385, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %387 = select i1 %384, i64 %368, i64 %370
  store i64 %387, i64* %386, align 8, !tbaa !2428
  %388 = load i8, i8* %BRANCH_TAKEN
  %389 = icmp eq i8 %388, 1
  br i1 %389, label %block_40104b, label %block_400fd4

block_40104b:                                     ; preds = %block_400fca
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 11
  store i64 %391, i64* %PC
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 40) to i32*)
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 11
  store i64 %393, i64* %PC
  store i32 65, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 40) to i32*)
  %394 = load i64, i64* %RBP
  %395 = sub i64 %394, 4
  %396 = load i64, i64* %PC
  %397 = add i64 %396, 7
  store i64 %397, i64* %PC
  %398 = inttoptr i64 %395 to i32*
  store i32 0, i32* %398
  br label %block_401068

block_400dc0:                                     ; preds = %block_400d63
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 5
  %401 = load i64, i64* %PC
  %402 = add i64 %401, 5
  store i64 %402, i64* %PC
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %400, i64* %403, align 8, !tbaa !2428
  %404 = load i64, i64* %RBP
  %405 = sub i64 %404, 4
  %406 = load i64, i64* %PC
  %407 = add i64 %406, 3
  store i64 %407, i64* %PC
  %408 = inttoptr i64 %405 to i32*
  %409 = load i32, i32* %408
  %410 = zext i32 %409 to i64
  store i64 %410, i64* %RAX, align 8, !tbaa !2428
  %411 = load i64, i64* %RAX
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 3
  store i64 %413, i64* %PC
  %414 = trunc i64 %411 to i32
  %415 = add i32 1, %414
  %416 = zext i32 %415 to i64
  store i64 %416, i64* %RAX, align 8, !tbaa !2428
  %417 = icmp ult i32 %415, %414
  %418 = icmp ult i32 %415, 1
  %419 = or i1 %417, %418
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %420, i8* %421, align 1, !tbaa !2432
  %422 = and i32 %415, 255
  %423 = call i32 @llvm.ctpop.i32(i32 %422) #16
  %424 = trunc i32 %423 to i8
  %425 = and i8 %424, 1
  %426 = xor i8 %425, 1
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %426, i8* %427, align 1, !tbaa !2446
  %428 = xor i64 1, %411
  %429 = trunc i64 %428 to i32
  %430 = xor i32 %429, %415
  %431 = lshr i32 %430, 4
  %432 = trunc i32 %431 to i8
  %433 = and i8 %432, 1
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %433, i8* %434, align 1, !tbaa !2447
  %435 = icmp eq i32 %415, 0
  %436 = zext i1 %435 to i8
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %436, i8* %437, align 1, !tbaa !2448
  %438 = lshr i32 %415, 31
  %439 = trunc i32 %438 to i8
  %440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %439, i8* %440, align 1, !tbaa !2449
  %441 = lshr i32 %414, 31
  %442 = xor i32 %438, %441
  %443 = add nuw nsw i32 %442, %438
  %444 = icmp eq i32 %443, 2
  %445 = zext i1 %444 to i8
  %446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %445, i8* %446, align 1, !tbaa !2450
  %447 = load i64, i64* %RBP
  %448 = sub i64 %447, 4
  %449 = load i32, i32* %EAX
  %450 = zext i32 %449 to i64
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 3
  store i64 %452, i64* %PC
  %453 = inttoptr i64 %448 to i32*
  store i32 %449, i32* %453
  %454 = load i64, i64* %PC
  %455 = sub i64 %454, 124
  %456 = load i64, i64* %PC
  %457 = add i64 %456, 5
  store i64 %457, i64* %PC
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %455, i64* %458, align 8, !tbaa !2428
  br label %block_400d52

block_4009b9:                                     ; preds = %block_4009af
  %459 = load i64, i64* %RBP
  %460 = sub i64 %459, 12
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 7
  store i64 %462, i64* %PC
  %463 = inttoptr i64 %460 to i32*
  store i32 0, i32* %463
  br label %block_4009c0

block_400fad:                                     ; preds = %block_400f2c
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 11
  store i64 %465, i64* %PC
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 36) to i32*)
  %466 = load i64, i64* %PC
  %467 = add i64 %466, 11
  store i64 %467, i64* %PC
  store i32 9, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 36) to i32*)
  %468 = load i64, i64* %RBP
  %469 = sub i64 %468, 4
  %470 = load i64, i64* %PC
  %471 = add i64 %470, 7
  store i64 %471, i64* %PC
  %472 = inttoptr i64 %469 to i32*
  store i32 0, i32* %472
  br label %block_400fca

block_400ba4:                                     ; preds = %block_400b9a
  %473 = load i64, i64* %RBP
  %474 = sub i64 %473, 4
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 3
  store i64 %476, i64* %PC
  %477 = inttoptr i64 %474 to i32*
  %478 = load i32, i32* %477
  %479 = zext i32 %478 to i64
  store i64 %479, i64* %RAX, align 8, !tbaa !2428
  %480 = load i64, i64* %RBP
  %481 = sub i64 %480, 8
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 3
  store i64 %483, i64* %PC
  %484 = inttoptr i64 %481 to i32*
  %485 = load i32, i32* %484
  %486 = zext i32 %485 to i64
  store i64 %486, i64* %RCX, align 8, !tbaa !2428
  %487 = load i64, i64* %RBP
  %488 = sub i64 %487, 12
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 3
  store i64 %490, i64* %PC
  %491 = inttoptr i64 %488 to i32*
  %492 = load i32, i32* %491
  %493 = zext i32 %492 to i64
  store i64 %493, i64* %RDX, align 8, !tbaa !2428
  %494 = load i64, i64* %RDX
  %495 = load i64, i64* %PC
  %496 = add i64 %495, 3
  store i64 %496, i64* %PC
  %497 = and i64 %494, 4294967295
  %498 = shl i64 %497, 2
  %499 = trunc i64 %498 to i32
  %500 = icmp slt i32 %499, 0
  %501 = shl i32 %499, 1
  %502 = zext i32 %501 to i64
  store i64 %502, i64* %RDX, align 8, !tbaa !2428
  %503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %504 = zext i1 %500 to i8
  store i8 %504, i8* %503, align 1, !tbaa !2451
  %505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %506 = and i32 %501, 254
  %507 = call i32 @llvm.ctpop.i32(i32 %506) #16
  %508 = trunc i32 %507 to i8
  %509 = and i8 %508, 1
  %510 = xor i8 %509, 1
  store i8 %510, i8* %505, align 1, !tbaa !2451
  %511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %511, align 1, !tbaa !2451
  %512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %513 = icmp eq i32 %501, 0
  %514 = zext i1 %513 to i8
  store i8 %514, i8* %512, align 1, !tbaa !2451
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %516 = lshr i32 %501, 31
  %517 = trunc i32 %516 to i8
  store i8 %517, i8* %515, align 1, !tbaa !2451
  %518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %518, align 1, !tbaa !2451
  %519 = load i64, i64* %RCX
  %520 = load i32, i32* %EDX
  %521 = zext i32 %520 to i64
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 2
  store i64 %523, i64* %PC
  %524 = trunc i64 %519 to i32
  %525 = add i32 %520, %524
  %526 = zext i32 %525 to i64
  store i64 %526, i64* %RCX, align 8, !tbaa !2428
  %527 = icmp ult i32 %525, %524
  %528 = icmp ult i32 %525, %520
  %529 = or i1 %527, %528
  %530 = zext i1 %529 to i8
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %530, i8* %531, align 1, !tbaa !2432
  %532 = and i32 %525, 255
  %533 = call i32 @llvm.ctpop.i32(i32 %532) #16
  %534 = trunc i32 %533 to i8
  %535 = and i8 %534, 1
  %536 = xor i8 %535, 1
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %536, i8* %537, align 1, !tbaa !2446
  %538 = xor i64 %521, %519
  %539 = trunc i64 %538 to i32
  %540 = xor i32 %539, %525
  %541 = lshr i32 %540, 4
  %542 = trunc i32 %541 to i8
  %543 = and i8 %542, 1
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %543, i8* %544, align 1, !tbaa !2447
  %545 = icmp eq i32 %525, 0
  %546 = zext i1 %545 to i8
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %546, i8* %547, align 1, !tbaa !2448
  %548 = lshr i32 %525, 31
  %549 = trunc i32 %548 to i8
  %550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %549, i8* %550, align 1, !tbaa !2449
  %551 = lshr i32 %524, 31
  %552 = lshr i32 %520, 31
  %553 = xor i32 %548, %551
  %554 = xor i32 %548, %552
  %555 = add nuw nsw i32 %553, %554
  %556 = icmp eq i32 %555, 2
  %557 = zext i1 %556 to i8
  %558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %557, i8* %558, align 1, !tbaa !2450
  %559 = load i64, i64* %RCX
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 3
  store i64 %561, i64* %PC
  %562 = and i64 %559, 4294967295
  %563 = shl i64 %562, 2
  %564 = trunc i64 %563 to i32
  %565 = icmp slt i32 %564, 0
  %566 = shl i32 %564, 1
  %567 = zext i32 %566 to i64
  store i64 %567, i64* %RCX, align 8, !tbaa !2428
  %568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %569 = zext i1 %565 to i8
  store i8 %569, i8* %568, align 1, !tbaa !2451
  %570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %571 = and i32 %566, 254
  %572 = call i32 @llvm.ctpop.i32(i32 %571) #16
  %573 = trunc i32 %572 to i8
  %574 = and i8 %573, 1
  %575 = xor i8 %574, 1
  store i8 %575, i8* %570, align 1, !tbaa !2451
  %576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %576, align 1, !tbaa !2451
  %577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %578 = icmp eq i32 %566, 0
  %579 = zext i1 %578 to i8
  store i8 %579, i8* %577, align 1, !tbaa !2451
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %581 = lshr i32 %566, 31
  %582 = trunc i32 %581 to i8
  store i8 %582, i8* %580, align 1, !tbaa !2451
  %583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %583, align 1, !tbaa !2451
  %584 = load i64, i64* %RAX
  %585 = load i32, i32* %ECX
  %586 = zext i32 %585 to i64
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 2
  store i64 %588, i64* %PC
  %589 = trunc i64 %584 to i32
  %590 = add i32 %585, %589
  %591 = zext i32 %590 to i64
  store i64 %591, i64* %RAX, align 8, !tbaa !2428
  %592 = icmp ult i32 %590, %589
  %593 = icmp ult i32 %590, %585
  %594 = or i1 %592, %593
  %595 = zext i1 %594 to i8
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %595, i8* %596, align 1, !tbaa !2432
  %597 = and i32 %590, 255
  %598 = call i32 @llvm.ctpop.i32(i32 %597) #16
  %599 = trunc i32 %598 to i8
  %600 = and i8 %599, 1
  %601 = xor i8 %600, 1
  %602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %601, i8* %602, align 1, !tbaa !2446
  %603 = xor i64 %586, %584
  %604 = trunc i64 %603 to i32
  %605 = xor i32 %604, %590
  %606 = lshr i32 %605, 4
  %607 = trunc i32 %606 to i8
  %608 = and i8 %607, 1
  %609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %608, i8* %609, align 1, !tbaa !2447
  %610 = icmp eq i32 %590, 0
  %611 = zext i1 %610 to i8
  %612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %611, i8* %612, align 1, !tbaa !2448
  %613 = lshr i32 %590, 31
  %614 = trunc i32 %613 to i8
  %615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %614, i8* %615, align 1, !tbaa !2449
  %616 = lshr i32 %589, 31
  %617 = lshr i32 %585, 31
  %618 = xor i32 %613, %616
  %619 = xor i32 %613, %617
  %620 = add nuw nsw i32 %618, %619
  %621 = icmp eq i32 %620, 2
  %622 = zext i1 %621 to i8
  %623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %622, i8* %623, align 1, !tbaa !2450
  %624 = load i32, i32* %EAX
  %625 = zext i32 %624 to i64
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 3
  store i64 %627, i64* %PC
  %628 = shl i64 %625, 32
  %629 = ashr exact i64 %628, 32
  store i64 %629, i64* %RSI, align 8, !tbaa !2428
  %630 = load i64, i64* %RSI
  %631 = mul i64 %630, 4
  %632 = add i64 %631, add (i64 ptrtoint (%p_type* @p to i64), i64 6144)
  %633 = load i64, i64* %PC
  %634 = add i64 %633, 11
  store i64 %634, i64* %PC
  %635 = inttoptr i64 %632 to i32*
  store i32 1, i32* %635
  %636 = load i64, i64* %RBP
  %637 = sub i64 %636, 12
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 3
  store i64 %639, i64* %PC
  %640 = inttoptr i64 %637 to i32*
  %641 = load i32, i32* %640
  %642 = zext i32 %641 to i64
  store i64 %642, i64* %RAX, align 8, !tbaa !2428
  %643 = load i64, i64* %RAX
  %644 = load i64, i64* %PC
  %645 = add i64 %644, 3
  store i64 %645, i64* %PC
  %646 = trunc i64 %643 to i32
  %647 = add i32 1, %646
  %648 = zext i32 %647 to i64
  store i64 %648, i64* %RAX, align 8, !tbaa !2428
  %649 = icmp ult i32 %647, %646
  %650 = icmp ult i32 %647, 1
  %651 = or i1 %649, %650
  %652 = zext i1 %651 to i8
  %653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %652, i8* %653, align 1, !tbaa !2432
  %654 = and i32 %647, 255
  %655 = call i32 @llvm.ctpop.i32(i32 %654) #16
  %656 = trunc i32 %655 to i8
  %657 = and i8 %656, 1
  %658 = xor i8 %657, 1
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %658, i8* %659, align 1, !tbaa !2446
  %660 = xor i64 1, %643
  %661 = trunc i64 %660 to i32
  %662 = xor i32 %661, %647
  %663 = lshr i32 %662, 4
  %664 = trunc i32 %663 to i8
  %665 = and i8 %664, 1
  %666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %665, i8* %666, align 1, !tbaa !2447
  %667 = icmp eq i32 %647, 0
  %668 = zext i1 %667 to i8
  %669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %668, i8* %669, align 1, !tbaa !2448
  %670 = lshr i32 %647, 31
  %671 = trunc i32 %670 to i8
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %671, i8* %672, align 1, !tbaa !2449
  %673 = lshr i32 %646, 31
  %674 = xor i32 %670, %673
  %675 = add nuw nsw i32 %674, %670
  %676 = icmp eq i32 %675, 2
  %677 = zext i1 %676 to i8
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %677, i8* %678, align 1, !tbaa !2450
  %679 = load i64, i64* %RBP
  %680 = sub i64 %679, 12
  %681 = load i32, i32* %EAX
  %682 = zext i32 %681 to i64
  %683 = load i64, i64* %PC
  %684 = add i64 %683, 3
  store i64 %684, i64* %PC
  %685 = inttoptr i64 %680 to i32*
  store i32 %681, i32* %685
  %686 = load i64, i64* %PC
  %687 = sub i64 %686, 52
  %688 = load i64, i64* %PC
  %689 = add i64 %688, 5
  store i64 %689, i64* %PC
  %690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %687, i64* %690, align 8, !tbaa !2428
  br label %block_400b9a

block_400f9a:                                     ; preds = %block_400f3d
  %691 = load i64, i64* %PC
  %692 = add i64 %691, 5
  %693 = load i64, i64* %PC
  %694 = add i64 %693, 5
  store i64 %694, i64* %PC
  %695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %692, i64* %695, align 8, !tbaa !2428
  %696 = load i64, i64* %RBP
  %697 = sub i64 %696, 4
  %698 = load i64, i64* %PC
  %699 = add i64 %698, 3
  store i64 %699, i64* %PC
  %700 = inttoptr i64 %697 to i32*
  %701 = load i32, i32* %700
  %702 = zext i32 %701 to i64
  store i64 %702, i64* %RAX, align 8, !tbaa !2428
  %703 = load i64, i64* %RAX
  %704 = load i64, i64* %PC
  %705 = add i64 %704, 3
  store i64 %705, i64* %PC
  %706 = trunc i64 %703 to i32
  %707 = add i32 1, %706
  %708 = zext i32 %707 to i64
  store i64 %708, i64* %RAX, align 8, !tbaa !2428
  %709 = icmp ult i32 %707, %706
  %710 = icmp ult i32 %707, 1
  %711 = or i1 %709, %710
  %712 = zext i1 %711 to i8
  %713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %712, i8* %713, align 1, !tbaa !2432
  %714 = and i32 %707, 255
  %715 = call i32 @llvm.ctpop.i32(i32 %714) #16
  %716 = trunc i32 %715 to i8
  %717 = and i8 %716, 1
  %718 = xor i8 %717, 1
  %719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %718, i8* %719, align 1, !tbaa !2446
  %720 = xor i64 1, %703
  %721 = trunc i64 %720 to i32
  %722 = xor i32 %721, %707
  %723 = lshr i32 %722, 4
  %724 = trunc i32 %723 to i8
  %725 = and i8 %724, 1
  %726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %725, i8* %726, align 1, !tbaa !2447
  %727 = icmp eq i32 %707, 0
  %728 = zext i1 %727 to i8
  %729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %728, i8* %729, align 1, !tbaa !2448
  %730 = lshr i32 %707, 31
  %731 = trunc i32 %730 to i8
  %732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %731, i8* %732, align 1, !tbaa !2449
  %733 = lshr i32 %706, 31
  %734 = xor i32 %730, %733
  %735 = add nuw nsw i32 %734, %730
  %736 = icmp eq i32 %735, 2
  %737 = zext i1 %736 to i8
  %738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %737, i8* %738, align 1, !tbaa !2450
  %739 = load i64, i64* %RBP
  %740 = sub i64 %739, 4
  %741 = load i32, i32* %EAX
  %742 = zext i32 %741 to i64
  %743 = load i64, i64* %PC
  %744 = add i64 %743, 3
  store i64 %744, i64* %PC
  %745 = inttoptr i64 %740 to i32*
  store i32 %741, i32* %745
  %746 = load i64, i64* %PC
  %747 = sub i64 %746, 124
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 5
  store i64 %749, i64* %PC
  %750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %747, i64* %750, align 8, !tbaa !2428
  br label %block_400f2c

block_400997:                                     ; preds = %block_400938
  %751 = sub i64 %1731, 4
  %752 = load i64, i64* %PC
  %753 = add i64 %752, 7
  store i64 %753, i64* %PC
  %754 = inttoptr i64 %751 to i32*
  store i32 0, i32* %754
  br label %block_40099e

block_400b93:                                     ; preds = %block_400b89
  %755 = load i64, i64* %RBP
  %756 = sub i64 %755, 12
  %757 = load i64, i64* %PC
  %758 = add i64 %757, 7
  store i64 %758, i64* %PC
  %759 = inttoptr i64 %756 to i32*
  store i32 0, i32* %759
  br label %block_400b9a

block_400984:                                     ; preds = %block_400949
  %760 = add i64 %4064, 5
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 5
  store i64 %762, i64* %PC
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %760, i64* %763, align 8, !tbaa !2428
  %764 = load i64, i64* %RBP
  %765 = sub i64 %764, 4
  %766 = load i64, i64* %PC
  %767 = add i64 %766, 3
  store i64 %767, i64* %PC
  %768 = inttoptr i64 %765 to i32*
  %769 = load i32, i32* %768
  %770 = zext i32 %769 to i64
  store i64 %770, i64* %RAX, align 8, !tbaa !2428
  %771 = load i64, i64* %RAX
  %772 = load i64, i64* %PC
  %773 = add i64 %772, 3
  store i64 %773, i64* %PC
  %774 = trunc i64 %771 to i32
  %775 = add i32 1, %774
  %776 = zext i32 %775 to i64
  store i64 %776, i64* %RAX, align 8, !tbaa !2428
  %777 = icmp ult i32 %775, %774
  %778 = icmp ult i32 %775, 1
  %779 = or i1 %777, %778
  %780 = zext i1 %779 to i8
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %780, i8* %781, align 1, !tbaa !2432
  %782 = and i32 %775, 255
  %783 = call i32 @llvm.ctpop.i32(i32 %782) #16
  %784 = trunc i32 %783 to i8
  %785 = and i8 %784, 1
  %786 = xor i8 %785, 1
  %787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %786, i8* %787, align 1, !tbaa !2446
  %788 = xor i64 1, %771
  %789 = trunc i64 %788 to i32
  %790 = xor i32 %789, %775
  %791 = lshr i32 %790, 4
  %792 = trunc i32 %791 to i8
  %793 = and i8 %792, 1
  %794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %793, i8* %794, align 1, !tbaa !2447
  %795 = icmp eq i32 %775, 0
  %796 = zext i1 %795 to i8
  %797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %796, i8* %797, align 1, !tbaa !2448
  %798 = lshr i32 %775, 31
  %799 = trunc i32 %798 to i8
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %799, i8* %800, align 1, !tbaa !2449
  %801 = lshr i32 %774, 31
  %802 = xor i32 %798, %801
  %803 = add nuw nsw i32 %802, %798
  %804 = icmp eq i32 %803, 2
  %805 = zext i1 %804 to i8
  %806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %805, i8* %806, align 1, !tbaa !2450
  %807 = load i64, i64* %RBP
  %808 = sub i64 %807, 4
  %809 = load i32, i32* %EAX
  %810 = zext i32 %809 to i64
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 3
  store i64 %812, i64* %PC
  %813 = inttoptr i64 %808 to i32*
  store i32 %809, i32* %813
  %814 = load i64, i64* %PC
  %815 = sub i64 %814, 90
  %816 = load i64, i64* %PC
  %817 = add i64 %816, 5
  store i64 %817, i64* %PC
  %818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %815, i64* %818, align 8, !tbaa !2428
  br label %block_400938

block_400d7e:                                     ; preds = %block_400d74
  %819 = load i64, i64* %RBP
  %820 = sub i64 %819, 4
  %821 = load i64, i64* %PC
  %822 = add i64 %821, 3
  store i64 %822, i64* %PC
  %823 = inttoptr i64 %820 to i32*
  %824 = load i32, i32* %823
  %825 = zext i32 %824 to i64
  store i64 %825, i64* %RAX, align 8, !tbaa !2428
  %826 = load i64, i64* %RBP
  %827 = sub i64 %826, 8
  %828 = load i64, i64* %PC
  %829 = add i64 %828, 3
  store i64 %829, i64* %PC
  %830 = inttoptr i64 %827 to i32*
  %831 = load i32, i32* %830
  %832 = zext i32 %831 to i64
  store i64 %832, i64* %RCX, align 8, !tbaa !2428
  %833 = load i64, i64* %RBP
  %834 = sub i64 %833, 12
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 3
  store i64 %836, i64* %PC
  %837 = inttoptr i64 %834 to i32*
  %838 = load i32, i32* %837
  %839 = zext i32 %838 to i64
  store i64 %839, i64* %RDX, align 8, !tbaa !2428
  %840 = load i64, i64* %RDX
  %841 = load i64, i64* %PC
  %842 = add i64 %841, 3
  store i64 %842, i64* %PC
  %843 = and i64 %840, 4294967295
  %844 = shl i64 %843, 2
  %845 = trunc i64 %844 to i32
  %846 = icmp slt i32 %845, 0
  %847 = shl i32 %845, 1
  %848 = zext i32 %847 to i64
  store i64 %848, i64* %RDX, align 8, !tbaa !2428
  %849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %850 = zext i1 %846 to i8
  store i8 %850, i8* %849, align 1, !tbaa !2451
  %851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %852 = and i32 %847, 254
  %853 = call i32 @llvm.ctpop.i32(i32 %852) #16
  %854 = trunc i32 %853 to i8
  %855 = and i8 %854, 1
  %856 = xor i8 %855, 1
  store i8 %856, i8* %851, align 1, !tbaa !2451
  %857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %857, align 1, !tbaa !2451
  %858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %859 = icmp eq i32 %847, 0
  %860 = zext i1 %859 to i8
  store i8 %860, i8* %858, align 1, !tbaa !2451
  %861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %862 = lshr i32 %847, 31
  %863 = trunc i32 %862 to i8
  store i8 %863, i8* %861, align 1, !tbaa !2451
  %864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %864, align 1, !tbaa !2451
  %865 = load i64, i64* %RCX
  %866 = load i32, i32* %EDX
  %867 = zext i32 %866 to i64
  %868 = load i64, i64* %PC
  %869 = add i64 %868, 2
  store i64 %869, i64* %PC
  %870 = trunc i64 %865 to i32
  %871 = add i32 %866, %870
  %872 = zext i32 %871 to i64
  store i64 %872, i64* %RCX, align 8, !tbaa !2428
  %873 = icmp ult i32 %871, %870
  %874 = icmp ult i32 %871, %866
  %875 = or i1 %873, %874
  %876 = zext i1 %875 to i8
  %877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %876, i8* %877, align 1, !tbaa !2432
  %878 = and i32 %871, 255
  %879 = call i32 @llvm.ctpop.i32(i32 %878) #16
  %880 = trunc i32 %879 to i8
  %881 = and i8 %880, 1
  %882 = xor i8 %881, 1
  %883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %882, i8* %883, align 1, !tbaa !2446
  %884 = xor i64 %867, %865
  %885 = trunc i64 %884 to i32
  %886 = xor i32 %885, %871
  %887 = lshr i32 %886, 4
  %888 = trunc i32 %887 to i8
  %889 = and i8 %888, 1
  %890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %889, i8* %890, align 1, !tbaa !2447
  %891 = icmp eq i32 %871, 0
  %892 = zext i1 %891 to i8
  %893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %892, i8* %893, align 1, !tbaa !2448
  %894 = lshr i32 %871, 31
  %895 = trunc i32 %894 to i8
  %896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %895, i8* %896, align 1, !tbaa !2449
  %897 = lshr i32 %870, 31
  %898 = lshr i32 %866, 31
  %899 = xor i32 %894, %897
  %900 = xor i32 %894, %898
  %901 = add nuw nsw i32 %899, %900
  %902 = icmp eq i32 %901, 2
  %903 = zext i1 %902 to i8
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %903, i8* %904, align 1, !tbaa !2450
  %905 = load i64, i64* %RCX
  %906 = load i64, i64* %PC
  %907 = add i64 %906, 3
  store i64 %907, i64* %PC
  %908 = and i64 %905, 4294967295
  %909 = shl i64 %908, 2
  %910 = trunc i64 %909 to i32
  %911 = icmp slt i32 %910, 0
  %912 = shl i32 %910, 1
  %913 = zext i32 %912 to i64
  store i64 %913, i64* %RCX, align 8, !tbaa !2428
  %914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %915 = zext i1 %911 to i8
  store i8 %915, i8* %914, align 1, !tbaa !2451
  %916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %917 = and i32 %912, 254
  %918 = call i32 @llvm.ctpop.i32(i32 %917) #16
  %919 = trunc i32 %918 to i8
  %920 = and i8 %919, 1
  %921 = xor i8 %920, 1
  store i8 %921, i8* %916, align 1, !tbaa !2451
  %922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %922, align 1, !tbaa !2451
  %923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %924 = icmp eq i32 %912, 0
  %925 = zext i1 %924 to i8
  store i8 %925, i8* %923, align 1, !tbaa !2451
  %926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %927 = lshr i32 %912, 31
  %928 = trunc i32 %927 to i8
  store i8 %928, i8* %926, align 1, !tbaa !2451
  %929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %929, align 1, !tbaa !2451
  %930 = load i64, i64* %RAX
  %931 = load i32, i32* %ECX
  %932 = zext i32 %931 to i64
  %933 = load i64, i64* %PC
  %934 = add i64 %933, 2
  store i64 %934, i64* %PC
  %935 = trunc i64 %930 to i32
  %936 = add i32 %931, %935
  %937 = zext i32 %936 to i64
  store i64 %937, i64* %RAX, align 8, !tbaa !2428
  %938 = icmp ult i32 %936, %935
  %939 = icmp ult i32 %936, %931
  %940 = or i1 %938, %939
  %941 = zext i1 %940 to i8
  %942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %941, i8* %942, align 1, !tbaa !2432
  %943 = and i32 %936, 255
  %944 = call i32 @llvm.ctpop.i32(i32 %943) #16
  %945 = trunc i32 %944 to i8
  %946 = and i8 %945, 1
  %947 = xor i8 %946, 1
  %948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %947, i8* %948, align 1, !tbaa !2446
  %949 = xor i64 %932, %930
  %950 = trunc i64 %949 to i32
  %951 = xor i32 %950, %936
  %952 = lshr i32 %951, 4
  %953 = trunc i32 %952 to i8
  %954 = and i8 %953, 1
  %955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %954, i8* %955, align 1, !tbaa !2447
  %956 = icmp eq i32 %936, 0
  %957 = zext i1 %956 to i8
  %958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %957, i8* %958, align 1, !tbaa !2448
  %959 = lshr i32 %936, 31
  %960 = trunc i32 %959 to i8
  %961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %960, i8* %961, align 1, !tbaa !2449
  %962 = lshr i32 %935, 31
  %963 = lshr i32 %931, 31
  %964 = xor i32 %959, %962
  %965 = xor i32 %959, %963
  %966 = add nuw nsw i32 %964, %965
  %967 = icmp eq i32 %966, 2
  %968 = zext i1 %967 to i8
  %969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %968, i8* %969, align 1, !tbaa !2450
  %970 = load i32, i32* %EAX
  %971 = zext i32 %970 to i64
  %972 = load i64, i64* %PC
  %973 = add i64 %972, 3
  store i64 %973, i64* %PC
  %974 = shl i64 %971, 32
  %975 = ashr exact i64 %974, 32
  store i64 %975, i64* %RSI, align 8, !tbaa !2428
  %976 = load i64, i64* %RSI
  %977 = mul i64 %976, 4
  %978 = add i64 %977, add (i64 ptrtoint (%p_type* @p to i64), i64 12288)
  %979 = load i64, i64* %PC
  %980 = add i64 %979, 11
  store i64 %980, i64* %PC
  %981 = inttoptr i64 %978 to i32*
  store i32 1, i32* %981
  %982 = load i64, i64* %RBP
  %983 = sub i64 %982, 12
  %984 = load i64, i64* %PC
  %985 = add i64 %984, 3
  store i64 %985, i64* %PC
  %986 = inttoptr i64 %983 to i32*
  %987 = load i32, i32* %986
  %988 = zext i32 %987 to i64
  store i64 %988, i64* %RAX, align 8, !tbaa !2428
  %989 = load i64, i64* %RAX
  %990 = load i64, i64* %PC
  %991 = add i64 %990, 3
  store i64 %991, i64* %PC
  %992 = trunc i64 %989 to i32
  %993 = add i32 1, %992
  %994 = zext i32 %993 to i64
  store i64 %994, i64* %RAX, align 8, !tbaa !2428
  %995 = icmp ult i32 %993, %992
  %996 = icmp ult i32 %993, 1
  %997 = or i1 %995, %996
  %998 = zext i1 %997 to i8
  %999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %998, i8* %999, align 1, !tbaa !2432
  %1000 = and i32 %993, 255
  %1001 = call i32 @llvm.ctpop.i32(i32 %1000) #16
  %1002 = trunc i32 %1001 to i8
  %1003 = and i8 %1002, 1
  %1004 = xor i8 %1003, 1
  %1005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1004, i8* %1005, align 1, !tbaa !2446
  %1006 = xor i64 1, %989
  %1007 = trunc i64 %1006 to i32
  %1008 = xor i32 %1007, %993
  %1009 = lshr i32 %1008, 4
  %1010 = trunc i32 %1009 to i8
  %1011 = and i8 %1010, 1
  %1012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1011, i8* %1012, align 1, !tbaa !2447
  %1013 = icmp eq i32 %993, 0
  %1014 = zext i1 %1013 to i8
  %1015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1014, i8* %1015, align 1, !tbaa !2448
  %1016 = lshr i32 %993, 31
  %1017 = trunc i32 %1016 to i8
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1017, i8* %1018, align 1, !tbaa !2449
  %1019 = lshr i32 %992, 31
  %1020 = xor i32 %1016, %1019
  %1021 = add nuw nsw i32 %1020, %1016
  %1022 = icmp eq i32 %1021, 2
  %1023 = zext i1 %1022 to i8
  %1024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1023, i8* %1024, align 1, !tbaa !2450
  %1025 = load i64, i64* %RBP
  %1026 = sub i64 %1025, 12
  %1027 = load i32, i32* %EAX
  %1028 = zext i32 %1027 to i64
  %1029 = load i64, i64* %PC
  %1030 = add i64 %1029, 3
  store i64 %1030, i64* %PC
  %1031 = inttoptr i64 %1026 to i32*
  store i32 %1027, i32* %1031
  %1032 = load i64, i64* %PC
  %1033 = sub i64 %1032, 52
  %1034 = load i64, i64* %PC
  %1035 = add i64 %1034, 5
  store i64 %1035, i64* %PC
  %1036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1033, i64* %1036, align 8, !tbaa !2428
  br label %block_400d74

block_400dfa:                                     ; preds = %block_400df0
  %1037 = load i64, i64* %RBP
  %1038 = sub i64 %1037, 8
  %1039 = load i64, i64* %PC
  %1040 = add i64 %1039, 7
  store i64 %1040, i64* %PC
  %1041 = inttoptr i64 %1038 to i32*
  store i32 0, i32* %1041
  br label %block_400e01

block_400d6d:                                     ; preds = %block_400d63
  %1042 = load i64, i64* %RBP
  %1043 = sub i64 %1042, 12
  %1044 = load i64, i64* %PC
  %1045 = add i64 %1044, 7
  store i64 %1045, i64* %PC
  %1046 = inttoptr i64 %1043 to i32*
  store i32 0, i32* %1046
  br label %block_400d74

block_400a68:                                     ; preds = %block_400a5e
  %1047 = load i64, i64* %RBP
  %1048 = sub i64 %1047, 4
  %1049 = load i64, i64* %PC
  %1050 = add i64 %1049, 3
  store i64 %1050, i64* %PC
  %1051 = inttoptr i64 %1048 to i32*
  %1052 = load i32, i32* %1051
  %1053 = zext i32 %1052 to i64
  store i64 %1053, i64* %RAX, align 8, !tbaa !2428
  %1054 = load i64, i64* %RBP
  %1055 = sub i64 %1054, 8
  %1056 = load i64, i64* %PC
  %1057 = add i64 %1056, 3
  store i64 %1057, i64* %PC
  %1058 = inttoptr i64 %1055 to i32*
  %1059 = load i32, i32* %1058
  %1060 = zext i32 %1059 to i64
  store i64 %1060, i64* %RCX, align 8, !tbaa !2428
  %1061 = load i64, i64* %RBP
  %1062 = sub i64 %1061, 12
  %1063 = load i64, i64* %PC
  %1064 = add i64 %1063, 3
  store i64 %1064, i64* %PC
  %1065 = inttoptr i64 %1062 to i32*
  %1066 = load i32, i32* %1065
  %1067 = zext i32 %1066 to i64
  store i64 %1067, i64* %RDX, align 8, !tbaa !2428
  %1068 = load i64, i64* %RDX
  %1069 = load i64, i64* %PC
  %1070 = add i64 %1069, 3
  store i64 %1070, i64* %PC
  %1071 = and i64 %1068, 4294967295
  %1072 = shl i64 %1071, 2
  %1073 = trunc i64 %1072 to i32
  %1074 = icmp slt i32 %1073, 0
  %1075 = shl i32 %1073, 1
  %1076 = zext i32 %1075 to i64
  store i64 %1076, i64* %RDX, align 8, !tbaa !2428
  %1077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1078 = zext i1 %1074 to i8
  store i8 %1078, i8* %1077, align 1, !tbaa !2451
  %1079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1080 = and i32 %1075, 254
  %1081 = call i32 @llvm.ctpop.i32(i32 %1080) #16
  %1082 = trunc i32 %1081 to i8
  %1083 = and i8 %1082, 1
  %1084 = xor i8 %1083, 1
  store i8 %1084, i8* %1079, align 1, !tbaa !2451
  %1085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1085, align 1, !tbaa !2451
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1087 = icmp eq i32 %1075, 0
  %1088 = zext i1 %1087 to i8
  store i8 %1088, i8* %1086, align 1, !tbaa !2451
  %1089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1090 = lshr i32 %1075, 31
  %1091 = trunc i32 %1090 to i8
  store i8 %1091, i8* %1089, align 1, !tbaa !2451
  %1092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1092, align 1, !tbaa !2451
  %1093 = load i64, i64* %RCX
  %1094 = load i32, i32* %EDX
  %1095 = zext i32 %1094 to i64
  %1096 = load i64, i64* %PC
  %1097 = add i64 %1096, 2
  store i64 %1097, i64* %PC
  %1098 = trunc i64 %1093 to i32
  %1099 = add i32 %1094, %1098
  %1100 = zext i32 %1099 to i64
  store i64 %1100, i64* %RCX, align 8, !tbaa !2428
  %1101 = icmp ult i32 %1099, %1098
  %1102 = icmp ult i32 %1099, %1094
  %1103 = or i1 %1101, %1102
  %1104 = zext i1 %1103 to i8
  %1105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1104, i8* %1105, align 1, !tbaa !2432
  %1106 = and i32 %1099, 255
  %1107 = call i32 @llvm.ctpop.i32(i32 %1106) #16
  %1108 = trunc i32 %1107 to i8
  %1109 = and i8 %1108, 1
  %1110 = xor i8 %1109, 1
  %1111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1110, i8* %1111, align 1, !tbaa !2446
  %1112 = xor i64 %1095, %1093
  %1113 = trunc i64 %1112 to i32
  %1114 = xor i32 %1113, %1099
  %1115 = lshr i32 %1114, 4
  %1116 = trunc i32 %1115 to i8
  %1117 = and i8 %1116, 1
  %1118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1117, i8* %1118, align 1, !tbaa !2447
  %1119 = icmp eq i32 %1099, 0
  %1120 = zext i1 %1119 to i8
  %1121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1120, i8* %1121, align 1, !tbaa !2448
  %1122 = lshr i32 %1099, 31
  %1123 = trunc i32 %1122 to i8
  %1124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1123, i8* %1124, align 1, !tbaa !2449
  %1125 = lshr i32 %1098, 31
  %1126 = lshr i32 %1094, 31
  %1127 = xor i32 %1122, %1125
  %1128 = xor i32 %1122, %1126
  %1129 = add nuw nsw i32 %1127, %1128
  %1130 = icmp eq i32 %1129, 2
  %1131 = zext i1 %1130 to i8
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1131, i8* %1132, align 1, !tbaa !2450
  %1133 = load i64, i64* %RCX
  %1134 = load i64, i64* %PC
  %1135 = add i64 %1134, 3
  store i64 %1135, i64* %PC
  %1136 = and i64 %1133, 4294967295
  %1137 = shl i64 %1136, 2
  %1138 = trunc i64 %1137 to i32
  %1139 = icmp slt i32 %1138, 0
  %1140 = shl i32 %1138, 1
  %1141 = zext i32 %1140 to i64
  store i64 %1141, i64* %RCX, align 8, !tbaa !2428
  %1142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1143 = zext i1 %1139 to i8
  store i8 %1143, i8* %1142, align 1, !tbaa !2451
  %1144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1145 = and i32 %1140, 254
  %1146 = call i32 @llvm.ctpop.i32(i32 %1145) #16
  %1147 = trunc i32 %1146 to i8
  %1148 = and i8 %1147, 1
  %1149 = xor i8 %1148, 1
  store i8 %1149, i8* %1144, align 1, !tbaa !2451
  %1150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1150, align 1, !tbaa !2451
  %1151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1152 = icmp eq i32 %1140, 0
  %1153 = zext i1 %1152 to i8
  store i8 %1153, i8* %1151, align 1, !tbaa !2451
  %1154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1155 = lshr i32 %1140, 31
  %1156 = trunc i32 %1155 to i8
  store i8 %1156, i8* %1154, align 1, !tbaa !2451
  %1157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1157, align 1, !tbaa !2451
  %1158 = load i64, i64* %RAX
  %1159 = load i32, i32* %ECX
  %1160 = zext i32 %1159 to i64
  %1161 = load i64, i64* %PC
  %1162 = add i64 %1161, 2
  store i64 %1162, i64* %PC
  %1163 = trunc i64 %1158 to i32
  %1164 = add i32 %1159, %1163
  %1165 = zext i32 %1164 to i64
  store i64 %1165, i64* %RAX, align 8, !tbaa !2428
  %1166 = icmp ult i32 %1164, %1163
  %1167 = icmp ult i32 %1164, %1159
  %1168 = or i1 %1166, %1167
  %1169 = zext i1 %1168 to i8
  %1170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1169, i8* %1170, align 1, !tbaa !2432
  %1171 = and i32 %1164, 255
  %1172 = call i32 @llvm.ctpop.i32(i32 %1171) #16
  %1173 = trunc i32 %1172 to i8
  %1174 = and i8 %1173, 1
  %1175 = xor i8 %1174, 1
  %1176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1175, i8* %1176, align 1, !tbaa !2446
  %1177 = xor i64 %1160, %1158
  %1178 = trunc i64 %1177 to i32
  %1179 = xor i32 %1178, %1164
  %1180 = lshr i32 %1179, 4
  %1181 = trunc i32 %1180 to i8
  %1182 = and i8 %1181, 1
  %1183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1182, i8* %1183, align 1, !tbaa !2447
  %1184 = icmp eq i32 %1164, 0
  %1185 = zext i1 %1184 to i8
  %1186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1185, i8* %1186, align 1, !tbaa !2448
  %1187 = lshr i32 %1164, 31
  %1188 = trunc i32 %1187 to i8
  %1189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1188, i8* %1189, align 1, !tbaa !2449
  %1190 = lshr i32 %1163, 31
  %1191 = lshr i32 %1159, 31
  %1192 = xor i32 %1187, %1190
  %1193 = xor i32 %1187, %1191
  %1194 = add nuw nsw i32 %1192, %1193
  %1195 = icmp eq i32 %1194, 2
  %1196 = zext i1 %1195 to i8
  %1197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1196, i8* %1197, align 1, !tbaa !2450
  %1198 = load i32, i32* %EAX
  %1199 = zext i32 %1198 to i64
  %1200 = load i64, i64* %PC
  %1201 = add i64 %1200, 3
  store i64 %1201, i64* %PC
  %1202 = shl i64 %1199, 32
  %1203 = ashr exact i64 %1202, 32
  store i64 %1203, i64* %RSI, align 8, !tbaa !2428
  %1204 = load i64, i64* %RSI
  %1205 = mul i64 %1204, 4
  %1206 = add i64 %1205, add (i64 ptrtoint (%p_type* @p to i64), i64 2048)
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 11
  store i64 %1208, i64* %PC
  %1209 = inttoptr i64 %1206 to i32*
  store i32 1, i32* %1209
  %1210 = load i64, i64* %RBP
  %1211 = sub i64 %1210, 12
  %1212 = load i64, i64* %PC
  %1213 = add i64 %1212, 3
  store i64 %1213, i64* %PC
  %1214 = inttoptr i64 %1211 to i32*
  %1215 = load i32, i32* %1214
  %1216 = zext i32 %1215 to i64
  store i64 %1216, i64* %RAX, align 8, !tbaa !2428
  %1217 = load i64, i64* %RAX
  %1218 = load i64, i64* %PC
  %1219 = add i64 %1218, 3
  store i64 %1219, i64* %PC
  %1220 = trunc i64 %1217 to i32
  %1221 = add i32 1, %1220
  %1222 = zext i32 %1221 to i64
  store i64 %1222, i64* %RAX, align 8, !tbaa !2428
  %1223 = icmp ult i32 %1221, %1220
  %1224 = icmp ult i32 %1221, 1
  %1225 = or i1 %1223, %1224
  %1226 = zext i1 %1225 to i8
  %1227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1226, i8* %1227, align 1, !tbaa !2432
  %1228 = and i32 %1221, 255
  %1229 = call i32 @llvm.ctpop.i32(i32 %1228) #16
  %1230 = trunc i32 %1229 to i8
  %1231 = and i8 %1230, 1
  %1232 = xor i8 %1231, 1
  %1233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1232, i8* %1233, align 1, !tbaa !2446
  %1234 = xor i64 1, %1217
  %1235 = trunc i64 %1234 to i32
  %1236 = xor i32 %1235, %1221
  %1237 = lshr i32 %1236, 4
  %1238 = trunc i32 %1237 to i8
  %1239 = and i8 %1238, 1
  %1240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1239, i8* %1240, align 1, !tbaa !2447
  %1241 = icmp eq i32 %1221, 0
  %1242 = zext i1 %1241 to i8
  %1243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1242, i8* %1243, align 1, !tbaa !2448
  %1244 = lshr i32 %1221, 31
  %1245 = trunc i32 %1244 to i8
  %1246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1245, i8* %1246, align 1, !tbaa !2449
  %1247 = lshr i32 %1220, 31
  %1248 = xor i32 %1244, %1247
  %1249 = add nuw nsw i32 %1248, %1244
  %1250 = icmp eq i32 %1249, 2
  %1251 = zext i1 %1250 to i8
  %1252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1251, i8* %1252, align 1, !tbaa !2450
  %1253 = load i64, i64* %RBP
  %1254 = sub i64 %1253, 12
  %1255 = load i32, i32* %EAX
  %1256 = zext i32 %1255 to i64
  %1257 = load i64, i64* %PC
  %1258 = add i64 %1257, 3
  store i64 %1258, i64* %PC
  %1259 = inttoptr i64 %1254 to i32*
  store i32 %1255, i32* %1259
  %1260 = load i64, i64* %PC
  %1261 = sub i64 %1260, 52
  %1262 = load i64, i64* %PC
  %1263 = add i64 %1262, 5
  store i64 %1263, i64* %PC
  %1264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1261, i64* %1264, align 8, !tbaa !2428
  br label %block_400a5e

block_401161:                                     ; preds = %block_401128
  %1265 = load i64, i64* %PC
  %1266 = add i64 %1265, 5
  %1267 = load i64, i64* %PC
  %1268 = add i64 %1267, 5
  store i64 %1268, i64* %PC
  %1269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1266, i64* %1269, align 8, !tbaa !2428
  %1270 = load i64, i64* %RBP
  %1271 = sub i64 %1270, 8
  %1272 = load i64, i64* %PC
  %1273 = add i64 %1272, 3
  store i64 %1273, i64* %PC
  %1274 = inttoptr i64 %1271 to i32*
  %1275 = load i32, i32* %1274
  %1276 = zext i32 %1275 to i64
  store i64 %1276, i64* %RAX, align 8, !tbaa !2428
  %1277 = load i64, i64* %RAX
  %1278 = load i64, i64* %PC
  %1279 = add i64 %1278, 3
  store i64 %1279, i64* %PC
  %1280 = trunc i64 %1277 to i32
  %1281 = add i32 1, %1280
  %1282 = zext i32 %1281 to i64
  store i64 %1282, i64* %RAX, align 8, !tbaa !2428
  %1283 = icmp ult i32 %1281, %1280
  %1284 = icmp ult i32 %1281, 1
  %1285 = or i1 %1283, %1284
  %1286 = zext i1 %1285 to i8
  %1287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1286, i8* %1287, align 1, !tbaa !2432
  %1288 = and i32 %1281, 255
  %1289 = call i32 @llvm.ctpop.i32(i32 %1288) #16
  %1290 = trunc i32 %1289 to i8
  %1291 = and i8 %1290, 1
  %1292 = xor i8 %1291, 1
  %1293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1292, i8* %1293, align 1, !tbaa !2446
  %1294 = xor i64 1, %1277
  %1295 = trunc i64 %1294 to i32
  %1296 = xor i32 %1295, %1281
  %1297 = lshr i32 %1296, 4
  %1298 = trunc i32 %1297 to i8
  %1299 = and i8 %1298, 1
  %1300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1299, i8* %1300, align 1, !tbaa !2447
  %1301 = icmp eq i32 %1281, 0
  %1302 = zext i1 %1301 to i8
  %1303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1302, i8* %1303, align 1, !tbaa !2448
  %1304 = lshr i32 %1281, 31
  %1305 = trunc i32 %1304 to i8
  %1306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1305, i8* %1306, align 1, !tbaa !2449
  %1307 = lshr i32 %1280, 31
  %1308 = xor i32 %1304, %1307
  %1309 = add nuw nsw i32 %1308, %1304
  %1310 = icmp eq i32 %1309, 2
  %1311 = zext i1 %1310 to i8
  %1312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1311, i8* %1312, align 1, !tbaa !2450
  %1313 = load i64, i64* %RBP
  %1314 = sub i64 %1313, 8
  %1315 = load i32, i32* %EAX
  %1316 = zext i32 %1315 to i64
  %1317 = load i64, i64* %PC
  %1318 = add i64 %1317, 3
  store i64 %1318, i64* %PC
  %1319 = inttoptr i64 %1314 to i32*
  store i32 %1315, i32* %1319
  %1320 = load i64, i64* %PC
  %1321 = sub i64 %1320, 88
  %1322 = load i64, i64* %PC
  %1323 = add i64 %1322, 5
  store i64 %1323, i64* %PC
  %1324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1321, i64* %1324, align 8, !tbaa !2428
  br label %block_401117

block_400d52:                                     ; preds = %block_400d35, %block_400dc0
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.17, %block_400d35 ], [ %MEMORY.22, %block_400dc0 ]
  %1325 = load i64, i64* %RBP
  %1326 = sub i64 %1325, 4
  %1327 = load i64, i64* %PC
  %1328 = add i64 %1327, 4
  store i64 %1328, i64* %PC
  %1329 = inttoptr i64 %1326 to i32*
  %1330 = load i32, i32* %1329
  %1331 = sub i32 %1330, 2
  %1332 = icmp ult i32 %1330, 2
  %1333 = zext i1 %1332 to i8
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1333, i8* %1334, align 1, !tbaa !2432
  %1335 = and i32 %1331, 255
  %1336 = call i32 @llvm.ctpop.i32(i32 %1335) #16
  %1337 = trunc i32 %1336 to i8
  %1338 = and i8 %1337, 1
  %1339 = xor i8 %1338, 1
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1339, i8* %1340, align 1, !tbaa !2446
  %1341 = xor i32 %1330, 2
  %1342 = xor i32 %1341, %1331
  %1343 = lshr i32 %1342, 4
  %1344 = trunc i32 %1343 to i8
  %1345 = and i8 %1344, 1
  %1346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1345, i8* %1346, align 1, !tbaa !2447
  %1347 = icmp eq i32 %1331, 0
  %1348 = zext i1 %1347 to i8
  %1349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1348, i8* %1349, align 1, !tbaa !2448
  %1350 = lshr i32 %1331, 31
  %1351 = trunc i32 %1350 to i8
  %1352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1351, i8* %1352, align 1, !tbaa !2449
  %1353 = lshr i32 %1330, 31
  %1354 = xor i32 %1350, %1353
  %1355 = add nuw nsw i32 %1354, %1353
  %1356 = icmp eq i32 %1355, 2
  %1357 = zext i1 %1356 to i8
  %1358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1357, i8* %1358, align 1, !tbaa !2450
  %1359 = load i64, i64* %PC
  %1360 = add i64 %1359, 125
  %1361 = load i64, i64* %PC
  %1362 = add i64 %1361, 6
  %1363 = load i64, i64* %PC
  %1364 = add i64 %1363, 6
  store i64 %1364, i64* %PC
  %1365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1366 = load i8, i8* %1365, align 1, !tbaa !2448
  %1367 = icmp eq i8 %1366, 0
  %1368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1369 = load i8, i8* %1368, align 1, !tbaa !2449
  %1370 = icmp ne i8 %1369, 0
  %1371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1372 = load i8, i8* %1371, align 1, !tbaa !2450
  %1373 = icmp ne i8 %1372, 0
  %1374 = xor i1 %1370, %1373
  %1375 = xor i1 %1374, true
  %1376 = and i1 %1367, %1375
  %1377 = zext i1 %1376 to i8
  store i8 %1377, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1379 = select i1 %1376, i64 %1360, i64 %1362
  store i64 %1379, i64* %1378, align 8, !tbaa !2428
  %1380 = load i8, i8* %BRANCH_TAKEN
  %1381 = icmp eq i8 %1380, 1
  br i1 %1381, label %block_400dd3, label %block_400d5c

block_401038:                                     ; preds = %block_400fdb
  %1382 = load i64, i64* %PC
  %1383 = add i64 %1382, 5
  %1384 = load i64, i64* %PC
  %1385 = add i64 %1384, 5
  store i64 %1385, i64* %PC
  %1386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1383, i64* %1386, align 8, !tbaa !2428
  %1387 = load i64, i64* %RBP
  %1388 = sub i64 %1387, 4
  %1389 = load i64, i64* %PC
  %1390 = add i64 %1389, 3
  store i64 %1390, i64* %PC
  %1391 = inttoptr i64 %1388 to i32*
  %1392 = load i32, i32* %1391
  %1393 = zext i32 %1392 to i64
  store i64 %1393, i64* %RAX, align 8, !tbaa !2428
  %1394 = load i64, i64* %RAX
  %1395 = load i64, i64* %PC
  %1396 = add i64 %1395, 3
  store i64 %1396, i64* %PC
  %1397 = trunc i64 %1394 to i32
  %1398 = add i32 1, %1397
  %1399 = zext i32 %1398 to i64
  store i64 %1399, i64* %RAX, align 8, !tbaa !2428
  %1400 = icmp ult i32 %1398, %1397
  %1401 = icmp ult i32 %1398, 1
  %1402 = or i1 %1400, %1401
  %1403 = zext i1 %1402 to i8
  %1404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1403, i8* %1404, align 1, !tbaa !2432
  %1405 = and i32 %1398, 255
  %1406 = call i32 @llvm.ctpop.i32(i32 %1405) #16
  %1407 = trunc i32 %1406 to i8
  %1408 = and i8 %1407, 1
  %1409 = xor i8 %1408, 1
  %1410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1409, i8* %1410, align 1, !tbaa !2446
  %1411 = xor i64 1, %1394
  %1412 = trunc i64 %1411 to i32
  %1413 = xor i32 %1412, %1398
  %1414 = lshr i32 %1413, 4
  %1415 = trunc i32 %1414 to i8
  %1416 = and i8 %1415, 1
  %1417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1416, i8* %1417, align 1, !tbaa !2447
  %1418 = icmp eq i32 %1398, 0
  %1419 = zext i1 %1418 to i8
  %1420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1419, i8* %1420, align 1, !tbaa !2448
  %1421 = lshr i32 %1398, 31
  %1422 = trunc i32 %1421 to i8
  %1423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1422, i8* %1423, align 1, !tbaa !2449
  %1424 = lshr i32 %1397, 31
  %1425 = xor i32 %1421, %1424
  %1426 = add nuw nsw i32 %1425, %1421
  %1427 = icmp eq i32 %1426, 2
  %1428 = zext i1 %1427 to i8
  %1429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1428, i8* %1429, align 1, !tbaa !2450
  %1430 = load i64, i64* %RBP
  %1431 = sub i64 %1430, 4
  %1432 = load i32, i32* %EAX
  %1433 = zext i32 %1432 to i64
  %1434 = load i64, i64* %PC
  %1435 = add i64 %1434, 3
  store i64 %1435, i64* %PC
  %1436 = inttoptr i64 %1431 to i32*
  store i32 %1432, i32* %1436
  %1437 = load i64, i64* %PC
  %1438 = sub i64 %1437, 124
  %1439 = load i64, i64* %PC
  %1440 = add i64 %1439, 5
  store i64 %1440, i64* %PC
  %1441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1438, i64* %1441, align 8, !tbaa !2428
  br label %block_400fca

block_401246:                                     ; preds = %block_401218
  %1442 = add i64 %7253, 11
  store i64 %1442, i64* %PC
  %1443 = load i32, i32* bitcast (%kount_type* @kount to i32*)
  %1444 = sub i32 %1443, 2005
  %1445 = icmp ult i32 %1443, 2005
  %1446 = zext i1 %1445 to i8
  %1447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1446, i8* %1447, align 1, !tbaa !2432
  %1448 = and i32 %1444, 255
  %1449 = call i32 @llvm.ctpop.i32(i32 %1448) #16
  %1450 = trunc i32 %1449 to i8
  %1451 = and i8 %1450, 1
  %1452 = xor i8 %1451, 1
  %1453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1452, i8* %1453, align 1, !tbaa !2446
  %1454 = xor i32 %1443, 2005
  %1455 = xor i32 %1454, %1444
  %1456 = lshr i32 %1455, 4
  %1457 = trunc i32 %1456 to i8
  %1458 = and i8 %1457, 1
  %1459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1458, i8* %1459, align 1, !tbaa !2447
  %1460 = icmp eq i32 %1444, 0
  %1461 = zext i1 %1460 to i8
  %1462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1461, i8* %1462, align 1, !tbaa !2448
  %1463 = lshr i32 %1444, 31
  %1464 = trunc i32 %1463 to i8
  %1465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1464, i8* %1465, align 1, !tbaa !2449
  %1466 = lshr i32 %1443, 31
  %1467 = xor i32 %1463, %1466
  %1468 = add nuw nsw i32 %1467, %1466
  %1469 = icmp eq i32 %1468, 2
  %1470 = zext i1 %1469 to i8
  %1471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1470, i8* %1471, align 1, !tbaa !2450
  %1472 = load i64, i64* %PC
  %1473 = add i64 %1472, 26
  %1474 = load i64, i64* %PC
  %1475 = add i64 %1474, 6
  %1476 = load i64, i64* %PC
  %1477 = add i64 %1476, 6
  store i64 %1477, i64* %PC
  %1478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1479 = load i8, i8* %1478, align 1, !tbaa !2448
  store i8 %1479, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1481 = icmp ne i8 %1479, 0
  %1482 = select i1 %1481, i64 %1473, i64 %1475
  store i64 %1482, i64* %1480, align 8, !tbaa !2428
  %1483 = load i8, i8* %BRANCH_TAKEN
  %1484 = icmp eq i8 %1483, 1
  br i1 %1484, label %block_40126b, label %block_401257

block_400b48:                                     ; preds = %block_400aeb
  %1485 = load i64, i64* %PC
  %1486 = add i64 %1485, 5
  %1487 = load i64, i64* %PC
  %1488 = add i64 %1487, 5
  store i64 %1488, i64* %PC
  %1489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1486, i64* %1489, align 8, !tbaa !2428
  %1490 = load i64, i64* %RBP
  %1491 = sub i64 %1490, 4
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 3
  store i64 %1493, i64* %PC
  %1494 = inttoptr i64 %1491 to i32*
  %1495 = load i32, i32* %1494
  %1496 = zext i32 %1495 to i64
  store i64 %1496, i64* %RAX, align 8, !tbaa !2428
  %1497 = load i64, i64* %RAX
  %1498 = load i64, i64* %PC
  %1499 = add i64 %1498, 3
  store i64 %1499, i64* %PC
  %1500 = trunc i64 %1497 to i32
  %1501 = add i32 1, %1500
  %1502 = zext i32 %1501 to i64
  store i64 %1502, i64* %RAX, align 8, !tbaa !2428
  %1503 = icmp ult i32 %1501, %1500
  %1504 = icmp ult i32 %1501, 1
  %1505 = or i1 %1503, %1504
  %1506 = zext i1 %1505 to i8
  %1507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1506, i8* %1507, align 1, !tbaa !2432
  %1508 = and i32 %1501, 255
  %1509 = call i32 @llvm.ctpop.i32(i32 %1508) #16
  %1510 = trunc i32 %1509 to i8
  %1511 = and i8 %1510, 1
  %1512 = xor i8 %1511, 1
  %1513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1512, i8* %1513, align 1, !tbaa !2446
  %1514 = xor i64 1, %1497
  %1515 = trunc i64 %1514 to i32
  %1516 = xor i32 %1515, %1501
  %1517 = lshr i32 %1516, 4
  %1518 = trunc i32 %1517 to i8
  %1519 = and i8 %1518, 1
  %1520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1519, i8* %1520, align 1, !tbaa !2447
  %1521 = icmp eq i32 %1501, 0
  %1522 = zext i1 %1521 to i8
  %1523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1522, i8* %1523, align 1, !tbaa !2448
  %1524 = lshr i32 %1501, 31
  %1525 = trunc i32 %1524 to i8
  %1526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1525, i8* %1526, align 1, !tbaa !2449
  %1527 = lshr i32 %1500, 31
  %1528 = xor i32 %1524, %1527
  %1529 = add nuw nsw i32 %1528, %1524
  %1530 = icmp eq i32 %1529, 2
  %1531 = zext i1 %1530 to i8
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1531, i8* %1532, align 1, !tbaa !2450
  %1533 = load i64, i64* %RBP
  %1534 = sub i64 %1533, 4
  %1535 = load i32, i32* %EAX
  %1536 = zext i32 %1535 to i64
  %1537 = load i64, i64* %PC
  %1538 = add i64 %1537, 3
  store i64 %1538, i64* %PC
  %1539 = inttoptr i64 %1534 to i32*
  store i32 %1535, i32* %1539
  %1540 = load i64, i64* %PC
  %1541 = sub i64 %1540, 124
  %1542 = load i64, i64* %PC
  %1543 = add i64 %1542, 5
  store i64 %1543, i64* %PC
  %1544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1541, i64* %1544, align 8, !tbaa !2428
  br label %block_400ada

block_4009af:                                     ; preds = %block_4009f9, %block_4009a8
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.6, %block_4009a8 ], [ %MEMORY.27, %block_4009f9 ]
  %1545 = load i64, i64* %RBP
  %1546 = sub i64 %1545, 8
  %1547 = load i64, i64* %PC
  %1548 = add i64 %1547, 4
  store i64 %1548, i64* %PC
  %1549 = inttoptr i64 %1546 to i32*
  %1550 = load i32, i32* %1549
  %1551 = sub i32 %1550, 1
  %1552 = icmp ult i32 %1550, 1
  %1553 = zext i1 %1552 to i8
  %1554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1553, i8* %1554, align 1, !tbaa !2432
  %1555 = and i32 %1551, 255
  %1556 = call i32 @llvm.ctpop.i32(i32 %1555) #16
  %1557 = trunc i32 %1556 to i8
  %1558 = and i8 %1557, 1
  %1559 = xor i8 %1558, 1
  %1560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1559, i8* %1560, align 1, !tbaa !2446
  %1561 = xor i32 %1550, 1
  %1562 = xor i32 %1561, %1551
  %1563 = lshr i32 %1562, 4
  %1564 = trunc i32 %1563 to i8
  %1565 = and i8 %1564, 1
  %1566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1565, i8* %1566, align 1, !tbaa !2447
  %1567 = icmp eq i32 %1551, 0
  %1568 = zext i1 %1567 to i8
  %1569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1568, i8* %1569, align 1, !tbaa !2448
  %1570 = lshr i32 %1551, 31
  %1571 = trunc i32 %1570 to i8
  %1572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1571, i8* %1572, align 1, !tbaa !2449
  %1573 = lshr i32 %1550, 31
  %1574 = xor i32 %1570, %1573
  %1575 = add nuw nsw i32 %1574, %1573
  %1576 = icmp eq i32 %1575, 2
  %1577 = zext i1 %1576 to i8
  %1578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1577, i8* %1578, align 1, !tbaa !2450
  %1579 = load i64, i64* %PC
  %1580 = add i64 %1579, 89
  %1581 = load i64, i64* %PC
  %1582 = add i64 %1581, 6
  %1583 = load i64, i64* %PC
  %1584 = add i64 %1583, 6
  store i64 %1584, i64* %PC
  %1585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1586 = load i8, i8* %1585, align 1, !tbaa !2448
  %1587 = icmp eq i8 %1586, 0
  %1588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1589 = load i8, i8* %1588, align 1, !tbaa !2449
  %1590 = icmp ne i8 %1589, 0
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1592 = load i8, i8* %1591, align 1, !tbaa !2450
  %1593 = icmp ne i8 %1592, 0
  %1594 = xor i1 %1590, %1593
  %1595 = xor i1 %1594, true
  %1596 = and i1 %1587, %1595
  %1597 = zext i1 %1596 to i8
  store i8 %1597, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1599 = select i1 %1596, i64 %1580, i64 %1582
  store i64 %1599, i64* %1598, align 8, !tbaa !2428
  %1600 = load i8, i8* %BRANCH_TAKEN
  %1601 = icmp eq i8 %1600, 1
  br i1 %1601, label %block_400a0c, label %block_4009b9

block_400f47:                                     ; preds = %block_400f3d
  %1602 = load i64, i64* %RBP
  %1603 = sub i64 %1602, 12
  %1604 = load i64, i64* %PC
  %1605 = add i64 %1604, 7
  store i64 %1605, i64* %PC
  %1606 = inttoptr i64 %1603 to i32*
  store i32 0, i32* %1606
  br label %block_400f4e

block_400f4e:                                     ; preds = %block_400f58, %block_400f47
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.20, %block_400f47 ], [ %MEMORY.4, %block_400f58 ]
  %1607 = load i64, i64* %RBP
  %1608 = sub i64 %1607, 12
  %1609 = load i64, i64* %PC
  %1610 = add i64 %1609, 4
  store i64 %1610, i64* %PC
  %1611 = inttoptr i64 %1608 to i32*
  %1612 = load i32, i32* %1611
  %1613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1613, align 1, !tbaa !2432
  %1614 = and i32 %1612, 255
  %1615 = call i32 @llvm.ctpop.i32(i32 %1614) #16
  %1616 = trunc i32 %1615 to i8
  %1617 = and i8 %1616, 1
  %1618 = xor i8 %1617, 1
  %1619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1618, i8* %1619, align 1, !tbaa !2446
  %1620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1620, align 1, !tbaa !2447
  %1621 = icmp eq i32 %1612, 0
  %1622 = zext i1 %1621 to i8
  %1623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1622, i8* %1623, align 1, !tbaa !2448
  %1624 = lshr i32 %1612, 31
  %1625 = trunc i32 %1624 to i8
  %1626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1625, i8* %1626, align 1, !tbaa !2449
  %1627 = lshr i32 %1612, 31
  %1628 = xor i32 %1624, %1627
  %1629 = add nuw nsw i32 %1628, %1627
  %1630 = icmp eq i32 %1629, 2
  %1631 = zext i1 %1630 to i8
  %1632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1631, i8* %1632, align 1, !tbaa !2450
  %1633 = load i64, i64* %PC
  %1634 = add i64 %1633, 53
  %1635 = load i64, i64* %PC
  %1636 = add i64 %1635, 6
  %1637 = load i64, i64* %PC
  %1638 = add i64 %1637, 6
  store i64 %1638, i64* %PC
  %1639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1640 = load i8, i8* %1639, align 1, !tbaa !2448
  %1641 = icmp eq i8 %1640, 0
  %1642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1643 = load i8, i8* %1642, align 1, !tbaa !2449
  %1644 = icmp ne i8 %1643, 0
  %1645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1646 = load i8, i8* %1645, align 1, !tbaa !2450
  %1647 = icmp ne i8 %1646, 0
  %1648 = xor i1 %1644, %1647
  %1649 = xor i1 %1648, true
  %1650 = and i1 %1641, %1649
  %1651 = zext i1 %1650 to i8
  store i8 %1651, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1653 = select i1 %1650, i64 %1634, i64 %1636
  store i64 %1653, i64* %1652, align 8, !tbaa !2428
  %1654 = load i8, i8* %BRANCH_TAKEN
  %1655 = icmp eq i8 %1654, 1
  br i1 %1655, label %block_400f87, label %block_400f58

block_400d35:                                     ; preds = %block_400cb4
  %1656 = load i64, i64* %PC
  %1657 = add i64 %1656, 11
  store i64 %1657, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 20) to i32*)
  %1658 = load i64, i64* %PC
  %1659 = add i64 %1658, 11
  store i64 %1659, i64* %PC
  store i32 200, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 20) to i32*)
  %1660 = load i64, i64* %RBP
  %1661 = sub i64 %1660, 4
  %1662 = load i64, i64* %PC
  %1663 = add i64 %1662, 7
  store i64 %1663, i64* %PC
  %1664 = inttoptr i64 %1661 to i32*
  store i32 0, i32* %1664
  br label %block_400d52

block_4010e9:                                     ; preds = %block_401068
  %1665 = load i64, i64* %PC
  %1666 = add i64 %1665, 11
  store i64 %1666, i64* %PC
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 44) to i32*)
  %1667 = load i64, i64* %PC
  %1668 = add i64 %1667, 11
  store i64 %1668, i64* %PC
  store i32 72, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 44) to i32*)
  %1669 = load i64, i64* %RBP
  %1670 = sub i64 %1669, 4
  %1671 = load i64, i64* %PC
  %1672 = add i64 %1671, 7
  store i64 %1672, i64* %PC
  %1673 = inttoptr i64 %1670 to i32*
  store i32 0, i32* %1673
  br label %block_401106

block_400938:                                     ; preds = %block_400931, %block_400984
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.18, %block_400931 ], [ %MEMORY.19, %block_400984 ]
  %1674 = load i64, i64* %RBP
  %1675 = sub i64 %1674, 4
  %1676 = load i64, i64* %PC
  %1677 = add i64 %1676, 4
  store i64 %1677, i64* %PC
  %1678 = inttoptr i64 %1675 to i32*
  %1679 = load i32, i32* %1678
  %1680 = sub i32 %1679, 12
  %1681 = icmp ult i32 %1679, 12
  %1682 = zext i1 %1681 to i8
  %1683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1682, i8* %1683, align 1, !tbaa !2432
  %1684 = and i32 %1680, 255
  %1685 = call i32 @llvm.ctpop.i32(i32 %1684) #16
  %1686 = trunc i32 %1685 to i8
  %1687 = and i8 %1686, 1
  %1688 = xor i8 %1687, 1
  %1689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1688, i8* %1689, align 1, !tbaa !2446
  %1690 = xor i32 %1679, 12
  %1691 = xor i32 %1690, %1680
  %1692 = lshr i32 %1691, 4
  %1693 = trunc i32 %1692 to i8
  %1694 = and i8 %1693, 1
  %1695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1694, i8* %1695, align 1, !tbaa !2447
  %1696 = icmp eq i32 %1680, 0
  %1697 = zext i1 %1696 to i8
  %1698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1697, i8* %1698, align 1, !tbaa !2448
  %1699 = lshr i32 %1680, 31
  %1700 = trunc i32 %1699 to i8
  %1701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1700, i8* %1701, align 1, !tbaa !2449
  %1702 = lshr i32 %1679, 31
  %1703 = xor i32 %1699, %1702
  %1704 = add nuw nsw i32 %1703, %1702
  %1705 = icmp eq i32 %1704, 2
  %1706 = zext i1 %1705 to i8
  %1707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1706, i8* %1707, align 1, !tbaa !2450
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 91
  %1710 = load i64, i64* %PC
  %1711 = add i64 %1710, 6
  %1712 = load i64, i64* %PC
  %1713 = add i64 %1712, 6
  store i64 %1713, i64* %PC
  %1714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1715 = load i8, i8* %1714, align 1, !tbaa !2448
  %1716 = icmp eq i8 %1715, 0
  %1717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1718 = load i8, i8* %1717, align 1, !tbaa !2449
  %1719 = icmp ne i8 %1718, 0
  %1720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1721 = load i8, i8* %1720, align 1, !tbaa !2450
  %1722 = icmp ne i8 %1721, 0
  %1723 = xor i1 %1719, %1722
  %1724 = xor i1 %1723, true
  %1725 = and i1 %1716, %1724
  %1726 = zext i1 %1725 to i8
  store i8 %1726, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1728 = select i1 %1725, i64 %1709, i64 %1711
  store i64 %1728, i64* %1727, align 8, !tbaa !2428
  %1729 = load i8, i8* %BRANCH_TAKEN
  %1730 = icmp eq i8 %1729, 1
  %1731 = load i64, i64* %RBP
  br i1 %1730, label %block_400997, label %block_400942

block_40099e:                                     ; preds = %block_400a0c, %block_400997
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.5, %block_400997 ], [ %MEMORY.3, %block_400a0c ]
  %1732 = load i64, i64* %RBP
  %1733 = sub i64 %1732, 4
  %1734 = load i64, i64* %PC
  %1735 = add i64 %1734, 4
  store i64 %1735, i64* %PC
  %1736 = inttoptr i64 %1733 to i32*
  %1737 = load i32, i32* %1736
  %1738 = sub i32 %1737, 3
  %1739 = icmp ult i32 %1737, 3
  %1740 = zext i1 %1739 to i8
  %1741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1740, i8* %1741, align 1, !tbaa !2432
  %1742 = and i32 %1738, 255
  %1743 = call i32 @llvm.ctpop.i32(i32 %1742) #16
  %1744 = trunc i32 %1743 to i8
  %1745 = and i8 %1744, 1
  %1746 = xor i8 %1745, 1
  %1747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1746, i8* %1747, align 1, !tbaa !2446
  %1748 = xor i32 %1737, 3
  %1749 = xor i32 %1748, %1738
  %1750 = lshr i32 %1749, 4
  %1751 = trunc i32 %1750 to i8
  %1752 = and i8 %1751, 1
  %1753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1752, i8* %1753, align 1, !tbaa !2447
  %1754 = icmp eq i32 %1738, 0
  %1755 = zext i1 %1754 to i8
  %1756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1755, i8* %1756, align 1, !tbaa !2448
  %1757 = lshr i32 %1738, 31
  %1758 = trunc i32 %1757 to i8
  %1759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1758, i8* %1759, align 1, !tbaa !2449
  %1760 = lshr i32 %1737, 31
  %1761 = xor i32 %1757, %1760
  %1762 = add nuw nsw i32 %1761, %1760
  %1763 = icmp eq i32 %1762, 2
  %1764 = zext i1 %1763 to i8
  %1765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1764, i8* %1765, align 1, !tbaa !2450
  %1766 = load i64, i64* %PC
  %1767 = add i64 %1766, 125
  %1768 = load i64, i64* %PC
  %1769 = add i64 %1768, 6
  %1770 = load i64, i64* %PC
  %1771 = add i64 %1770, 6
  store i64 %1771, i64* %PC
  %1772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1773 = load i8, i8* %1772, align 1, !tbaa !2448
  %1774 = icmp eq i8 %1773, 0
  %1775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1776 = load i8, i8* %1775, align 1, !tbaa !2449
  %1777 = icmp ne i8 %1776, 0
  %1778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1779 = load i8, i8* %1778, align 1, !tbaa !2450
  %1780 = icmp ne i8 %1779, 0
  %1781 = xor i1 %1777, %1780
  %1782 = xor i1 %1781, true
  %1783 = and i1 %1774, %1782
  %1784 = zext i1 %1783 to i8
  store i8 %1784, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1786 = select i1 %1783, i64 %1767, i64 %1769
  store i64 %1786, i64* %1785, align 8, !tbaa !2428
  %1787 = load i8, i8* %BRANCH_TAKEN
  %1788 = icmp eq i8 %1787, 1
  br i1 %1788, label %block_400a1f, label %block_4009a8

block_400f36:                                     ; preds = %block_400f2c
  %1789 = load i64, i64* %RBP
  %1790 = sub i64 %1789, 8
  %1791 = load i64, i64* %PC
  %1792 = add i64 %1791, 7
  store i64 %1792, i64* %PC
  %1793 = inttoptr i64 %1790 to i32*
  store i32 0, i32* %1793
  br label %block_400f3d

block_400b9a:                                     ; preds = %block_400b93, %block_400ba4
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.9, %block_400b93 ], [ %MEMORY.7, %block_400ba4 ]
  %1794 = load i64, i64* %RBP
  %1795 = sub i64 %1794, 12
  %1796 = load i64, i64* %PC
  %1797 = add i64 %1796, 4
  store i64 %1797, i64* %PC
  %1798 = inttoptr i64 %1795 to i32*
  %1799 = load i32, i32* %1798
  %1800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1800, align 1, !tbaa !2432
  %1801 = and i32 %1799, 255
  %1802 = call i32 @llvm.ctpop.i32(i32 %1801) #16
  %1803 = trunc i32 %1802 to i8
  %1804 = and i8 %1803, 1
  %1805 = xor i8 %1804, 1
  %1806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1805, i8* %1806, align 1, !tbaa !2446
  %1807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1807, align 1, !tbaa !2447
  %1808 = icmp eq i32 %1799, 0
  %1809 = zext i1 %1808 to i8
  %1810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1809, i8* %1810, align 1, !tbaa !2448
  %1811 = lshr i32 %1799, 31
  %1812 = trunc i32 %1811 to i8
  %1813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1812, i8* %1813, align 1, !tbaa !2449
  %1814 = lshr i32 %1799, 31
  %1815 = xor i32 %1811, %1814
  %1816 = add nuw nsw i32 %1815, %1814
  %1817 = icmp eq i32 %1816, 2
  %1818 = zext i1 %1817 to i8
  %1819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1818, i8* %1819, align 1, !tbaa !2450
  %1820 = load i64, i64* %PC
  %1821 = add i64 %1820, 53
  %1822 = load i64, i64* %PC
  %1823 = add i64 %1822, 6
  %1824 = load i64, i64* %PC
  %1825 = add i64 %1824, 6
  store i64 %1825, i64* %PC
  %1826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1827 = load i8, i8* %1826, align 1, !tbaa !2448
  %1828 = icmp eq i8 %1827, 0
  %1829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1830 = load i8, i8* %1829, align 1, !tbaa !2449
  %1831 = icmp ne i8 %1830, 0
  %1832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1833 = load i8, i8* %1832, align 1, !tbaa !2450
  %1834 = icmp ne i8 %1833, 0
  %1835 = xor i1 %1831, %1834
  %1836 = xor i1 %1835, true
  %1837 = and i1 %1828, %1836
  %1838 = zext i1 %1837 to i8
  store i8 %1838, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1840 = select i1 %1837, i64 %1821, i64 %1823
  store i64 %1840, i64* %1839, align 8, !tbaa !2428
  %1841 = load i8, i8* %BRANCH_TAKEN
  %1842 = icmp eq i8 %1841, 1
  br i1 %1842, label %block_400bd3, label %block_400ba4

block_401132:                                     ; preds = %block_401128
  %1843 = load i64, i64* %RBP
  %1844 = sub i64 %1843, 4
  %1845 = load i64, i64* %PC
  %1846 = add i64 %1845, 3
  store i64 %1846, i64* %PC
  %1847 = inttoptr i64 %1844 to i32*
  %1848 = load i32, i32* %1847
  %1849 = zext i32 %1848 to i64
  store i64 %1849, i64* %RAX, align 8, !tbaa !2428
  %1850 = load i64, i64* %RBP
  %1851 = sub i64 %1850, 8
  %1852 = load i64, i64* %PC
  %1853 = add i64 %1852, 3
  store i64 %1853, i64* %PC
  %1854 = inttoptr i64 %1851 to i32*
  %1855 = load i32, i32* %1854
  %1856 = zext i32 %1855 to i64
  store i64 %1856, i64* %RCX, align 8, !tbaa !2428
  %1857 = load i64, i64* %RBP
  %1858 = sub i64 %1857, 12
  %1859 = load i64, i64* %PC
  %1860 = add i64 %1859, 3
  store i64 %1860, i64* %PC
  %1861 = inttoptr i64 %1858 to i32*
  %1862 = load i32, i32* %1861
  %1863 = zext i32 %1862 to i64
  store i64 %1863, i64* %RDX, align 8, !tbaa !2428
  %1864 = load i64, i64* %RDX
  %1865 = load i64, i64* %PC
  %1866 = add i64 %1865, 3
  store i64 %1866, i64* %PC
  %1867 = and i64 %1864, 4294967295
  %1868 = shl i64 %1867, 2
  %1869 = trunc i64 %1868 to i32
  %1870 = icmp slt i32 %1869, 0
  %1871 = shl i32 %1869, 1
  %1872 = zext i32 %1871 to i64
  store i64 %1872, i64* %RDX, align 8, !tbaa !2428
  %1873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1874 = zext i1 %1870 to i8
  store i8 %1874, i8* %1873, align 1, !tbaa !2451
  %1875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1876 = and i32 %1871, 254
  %1877 = call i32 @llvm.ctpop.i32(i32 %1876) #16
  %1878 = trunc i32 %1877 to i8
  %1879 = and i8 %1878, 1
  %1880 = xor i8 %1879, 1
  store i8 %1880, i8* %1875, align 1, !tbaa !2451
  %1881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1881, align 1, !tbaa !2451
  %1882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1883 = icmp eq i32 %1871, 0
  %1884 = zext i1 %1883 to i8
  store i8 %1884, i8* %1882, align 1, !tbaa !2451
  %1885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1886 = lshr i32 %1871, 31
  %1887 = trunc i32 %1886 to i8
  store i8 %1887, i8* %1885, align 1, !tbaa !2451
  %1888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1888, align 1, !tbaa !2451
  %1889 = load i64, i64* %RCX
  %1890 = load i32, i32* %EDX
  %1891 = zext i32 %1890 to i64
  %1892 = load i64, i64* %PC
  %1893 = add i64 %1892, 2
  store i64 %1893, i64* %PC
  %1894 = trunc i64 %1889 to i32
  %1895 = add i32 %1890, %1894
  %1896 = zext i32 %1895 to i64
  store i64 %1896, i64* %RCX, align 8, !tbaa !2428
  %1897 = icmp ult i32 %1895, %1894
  %1898 = icmp ult i32 %1895, %1890
  %1899 = or i1 %1897, %1898
  %1900 = zext i1 %1899 to i8
  %1901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1900, i8* %1901, align 1, !tbaa !2432
  %1902 = and i32 %1895, 255
  %1903 = call i32 @llvm.ctpop.i32(i32 %1902) #16
  %1904 = trunc i32 %1903 to i8
  %1905 = and i8 %1904, 1
  %1906 = xor i8 %1905, 1
  %1907 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1906, i8* %1907, align 1, !tbaa !2446
  %1908 = xor i64 %1891, %1889
  %1909 = trunc i64 %1908 to i32
  %1910 = xor i32 %1909, %1895
  %1911 = lshr i32 %1910, 4
  %1912 = trunc i32 %1911 to i8
  %1913 = and i8 %1912, 1
  %1914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1913, i8* %1914, align 1, !tbaa !2447
  %1915 = icmp eq i32 %1895, 0
  %1916 = zext i1 %1915 to i8
  %1917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1916, i8* %1917, align 1, !tbaa !2448
  %1918 = lshr i32 %1895, 31
  %1919 = trunc i32 %1918 to i8
  %1920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1919, i8* %1920, align 1, !tbaa !2449
  %1921 = lshr i32 %1894, 31
  %1922 = lshr i32 %1890, 31
  %1923 = xor i32 %1918, %1921
  %1924 = xor i32 %1918, %1922
  %1925 = add nuw nsw i32 %1923, %1924
  %1926 = icmp eq i32 %1925, 2
  %1927 = zext i1 %1926 to i8
  %1928 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1927, i8* %1928, align 1, !tbaa !2450
  %1929 = load i64, i64* %RCX
  %1930 = load i64, i64* %PC
  %1931 = add i64 %1930, 3
  store i64 %1931, i64* %PC
  %1932 = and i64 %1929, 4294967295
  %1933 = shl i64 %1932, 2
  %1934 = trunc i64 %1933 to i32
  %1935 = icmp slt i32 %1934, 0
  %1936 = shl i32 %1934, 1
  %1937 = zext i32 %1936 to i64
  store i64 %1937, i64* %RCX, align 8, !tbaa !2428
  %1938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1939 = zext i1 %1935 to i8
  store i8 %1939, i8* %1938, align 1, !tbaa !2451
  %1940 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1941 = and i32 %1936, 254
  %1942 = call i32 @llvm.ctpop.i32(i32 %1941) #16
  %1943 = trunc i32 %1942 to i8
  %1944 = and i8 %1943, 1
  %1945 = xor i8 %1944, 1
  store i8 %1945, i8* %1940, align 1, !tbaa !2451
  %1946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1946, align 1, !tbaa !2451
  %1947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1948 = icmp eq i32 %1936, 0
  %1949 = zext i1 %1948 to i8
  store i8 %1949, i8* %1947, align 1, !tbaa !2451
  %1950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1951 = lshr i32 %1936, 31
  %1952 = trunc i32 %1951 to i8
  store i8 %1952, i8* %1950, align 1, !tbaa !2451
  %1953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1953, align 1, !tbaa !2451
  %1954 = load i64, i64* %RAX
  %1955 = load i32, i32* %ECX
  %1956 = zext i32 %1955 to i64
  %1957 = load i64, i64* %PC
  %1958 = add i64 %1957, 2
  store i64 %1958, i64* %PC
  %1959 = trunc i64 %1954 to i32
  %1960 = add i32 %1955, %1959
  %1961 = zext i32 %1960 to i64
  store i64 %1961, i64* %RAX, align 8, !tbaa !2428
  %1962 = icmp ult i32 %1960, %1959
  %1963 = icmp ult i32 %1960, %1955
  %1964 = or i1 %1962, %1963
  %1965 = zext i1 %1964 to i8
  %1966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1965, i8* %1966, align 1, !tbaa !2432
  %1967 = and i32 %1960, 255
  %1968 = call i32 @llvm.ctpop.i32(i32 %1967) #16
  %1969 = trunc i32 %1968 to i8
  %1970 = and i8 %1969, 1
  %1971 = xor i8 %1970, 1
  %1972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1971, i8* %1972, align 1, !tbaa !2446
  %1973 = xor i64 %1956, %1954
  %1974 = trunc i64 %1973 to i32
  %1975 = xor i32 %1974, %1960
  %1976 = lshr i32 %1975, 4
  %1977 = trunc i32 %1976 to i8
  %1978 = and i8 %1977, 1
  %1979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1978, i8* %1979, align 1, !tbaa !2447
  %1980 = icmp eq i32 %1960, 0
  %1981 = zext i1 %1980 to i8
  %1982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1981, i8* %1982, align 1, !tbaa !2448
  %1983 = lshr i32 %1960, 31
  %1984 = trunc i32 %1983 to i8
  %1985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1984, i8* %1985, align 1, !tbaa !2449
  %1986 = lshr i32 %1959, 31
  %1987 = lshr i32 %1955, 31
  %1988 = xor i32 %1983, %1986
  %1989 = xor i32 %1983, %1987
  %1990 = add nuw nsw i32 %1988, %1989
  %1991 = icmp eq i32 %1990, 2
  %1992 = zext i1 %1991 to i8
  %1993 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1992, i8* %1993, align 1, !tbaa !2450
  %1994 = load i32, i32* %EAX
  %1995 = zext i32 %1994 to i64
  %1996 = load i64, i64* %PC
  %1997 = add i64 %1996, 3
  store i64 %1997, i64* %PC
  %1998 = shl i64 %1995, 32
  %1999 = ashr exact i64 %1998, 32
  store i64 %1999, i64* %RSI, align 8, !tbaa !2428
  %2000 = load i64, i64* %RSI
  %2001 = mul i64 %2000, 4
  %2002 = add i64 %2001, add (i64 ptrtoint (%p_type* @p to i64), i64 24576)
  %2003 = load i64, i64* %PC
  %2004 = add i64 %2003, 11
  store i64 %2004, i64* %PC
  %2005 = inttoptr i64 %2002 to i32*
  store i32 1, i32* %2005
  %2006 = load i64, i64* %RBP
  %2007 = sub i64 %2006, 12
  %2008 = load i64, i64* %PC
  %2009 = add i64 %2008, 3
  store i64 %2009, i64* %PC
  %2010 = inttoptr i64 %2007 to i32*
  %2011 = load i32, i32* %2010
  %2012 = zext i32 %2011 to i64
  store i64 %2012, i64* %RAX, align 8, !tbaa !2428
  %2013 = load i64, i64* %RAX
  %2014 = load i64, i64* %PC
  %2015 = add i64 %2014, 3
  store i64 %2015, i64* %PC
  %2016 = trunc i64 %2013 to i32
  %2017 = add i32 1, %2016
  %2018 = zext i32 %2017 to i64
  store i64 %2018, i64* %RAX, align 8, !tbaa !2428
  %2019 = icmp ult i32 %2017, %2016
  %2020 = icmp ult i32 %2017, 1
  %2021 = or i1 %2019, %2020
  %2022 = zext i1 %2021 to i8
  %2023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2022, i8* %2023, align 1, !tbaa !2432
  %2024 = and i32 %2017, 255
  %2025 = call i32 @llvm.ctpop.i32(i32 %2024) #16
  %2026 = trunc i32 %2025 to i8
  %2027 = and i8 %2026, 1
  %2028 = xor i8 %2027, 1
  %2029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2028, i8* %2029, align 1, !tbaa !2446
  %2030 = xor i64 1, %2013
  %2031 = trunc i64 %2030 to i32
  %2032 = xor i32 %2031, %2017
  %2033 = lshr i32 %2032, 4
  %2034 = trunc i32 %2033 to i8
  %2035 = and i8 %2034, 1
  %2036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2035, i8* %2036, align 1, !tbaa !2447
  %2037 = icmp eq i32 %2017, 0
  %2038 = zext i1 %2037 to i8
  %2039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2038, i8* %2039, align 1, !tbaa !2448
  %2040 = lshr i32 %2017, 31
  %2041 = trunc i32 %2040 to i8
  %2042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2041, i8* %2042, align 1, !tbaa !2449
  %2043 = lshr i32 %2016, 31
  %2044 = xor i32 %2040, %2043
  %2045 = add nuw nsw i32 %2044, %2040
  %2046 = icmp eq i32 %2045, 2
  %2047 = zext i1 %2046 to i8
  %2048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2047, i8* %2048, align 1, !tbaa !2450
  %2049 = load i64, i64* %RBP
  %2050 = sub i64 %2049, 12
  %2051 = load i32, i32* %EAX
  %2052 = zext i32 %2051 to i64
  %2053 = load i64, i64* %PC
  %2054 = add i64 %2053, 3
  store i64 %2054, i64* %PC
  %2055 = inttoptr i64 %2050 to i32*
  store i32 %2051, i32* %2055
  %2056 = load i64, i64* %PC
  %2057 = sub i64 %2056, 52
  %2058 = load i64, i64* %PC
  %2059 = add i64 %2058, 5
  store i64 %2059, i64* %PC
  %2060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2057, i64* %2060, align 8, !tbaa !2428
  br label %block_401128

block_400f2c:                                     ; preds = %block_400f0f, %block_400f9a
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.24, %block_400f0f ], [ %MEMORY.20, %block_400f9a ]
  %2061 = load i64, i64* %RBP
  %2062 = sub i64 %2061, 4
  %2063 = load i64, i64* %PC
  %2064 = add i64 %2063, 4
  store i64 %2064, i64* %PC
  %2065 = inttoptr i64 %2062 to i32*
  %2066 = load i32, i32* %2065
  %2067 = sub i32 %2066, 1
  %2068 = icmp ult i32 %2066, 1
  %2069 = zext i1 %2068 to i8
  %2070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2069, i8* %2070, align 1, !tbaa !2432
  %2071 = and i32 %2067, 255
  %2072 = call i32 @llvm.ctpop.i32(i32 %2071) #16
  %2073 = trunc i32 %2072 to i8
  %2074 = and i8 %2073, 1
  %2075 = xor i8 %2074, 1
  %2076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2075, i8* %2076, align 1, !tbaa !2446
  %2077 = xor i32 %2066, 1
  %2078 = xor i32 %2077, %2067
  %2079 = lshr i32 %2078, 4
  %2080 = trunc i32 %2079 to i8
  %2081 = and i8 %2080, 1
  %2082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2081, i8* %2082, align 1, !tbaa !2447
  %2083 = icmp eq i32 %2067, 0
  %2084 = zext i1 %2083 to i8
  %2085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2084, i8* %2085, align 1, !tbaa !2448
  %2086 = lshr i32 %2067, 31
  %2087 = trunc i32 %2086 to i8
  %2088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2087, i8* %2088, align 1, !tbaa !2449
  %2089 = lshr i32 %2066, 31
  %2090 = xor i32 %2086, %2089
  %2091 = add nuw nsw i32 %2090, %2089
  %2092 = icmp eq i32 %2091, 2
  %2093 = zext i1 %2092 to i8
  %2094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2093, i8* %2094, align 1, !tbaa !2450
  %2095 = load i64, i64* %PC
  %2096 = add i64 %2095, 125
  %2097 = load i64, i64* %PC
  %2098 = add i64 %2097, 6
  %2099 = load i64, i64* %PC
  %2100 = add i64 %2099, 6
  store i64 %2100, i64* %PC
  %2101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2102 = load i8, i8* %2101, align 1, !tbaa !2448
  %2103 = icmp eq i8 %2102, 0
  %2104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2105 = load i8, i8* %2104, align 1, !tbaa !2449
  %2106 = icmp ne i8 %2105, 0
  %2107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2108 = load i8, i8* %2107, align 1, !tbaa !2450
  %2109 = icmp ne i8 %2108, 0
  %2110 = xor i1 %2106, %2109
  %2111 = xor i1 %2110, true
  %2112 = and i1 %2103, %2111
  %2113 = zext i1 %2112 to i8
  store i8 %2113, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2115 = select i1 %2112, i64 %2096, i64 %2098
  store i64 %2115, i64* %2114, align 8, !tbaa !2428
  %2116 = load i8, i8* %BRANCH_TAKEN
  %2117 = icmp eq i8 %2116, 1
  br i1 %2117, label %block_400fad, label %block_400f36

block_400f87:                                     ; preds = %block_400f4e
  %2118 = load i64, i64* %PC
  %2119 = add i64 %2118, 5
  %2120 = load i64, i64* %PC
  %2121 = add i64 %2120, 5
  store i64 %2121, i64* %PC
  %2122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2119, i64* %2122, align 8, !tbaa !2428
  %2123 = load i64, i64* %RBP
  %2124 = sub i64 %2123, 8
  %2125 = load i64, i64* %PC
  %2126 = add i64 %2125, 3
  store i64 %2126, i64* %PC
  %2127 = inttoptr i64 %2124 to i32*
  %2128 = load i32, i32* %2127
  %2129 = zext i32 %2128 to i64
  store i64 %2129, i64* %RAX, align 8, !tbaa !2428
  %2130 = load i64, i64* %RAX
  %2131 = load i64, i64* %PC
  %2132 = add i64 %2131, 3
  store i64 %2132, i64* %PC
  %2133 = trunc i64 %2130 to i32
  %2134 = add i32 1, %2133
  %2135 = zext i32 %2134 to i64
  store i64 %2135, i64* %RAX, align 8, !tbaa !2428
  %2136 = icmp ult i32 %2134, %2133
  %2137 = icmp ult i32 %2134, 1
  %2138 = or i1 %2136, %2137
  %2139 = zext i1 %2138 to i8
  %2140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2139, i8* %2140, align 1, !tbaa !2432
  %2141 = and i32 %2134, 255
  %2142 = call i32 @llvm.ctpop.i32(i32 %2141) #16
  %2143 = trunc i32 %2142 to i8
  %2144 = and i8 %2143, 1
  %2145 = xor i8 %2144, 1
  %2146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2145, i8* %2146, align 1, !tbaa !2446
  %2147 = xor i64 1, %2130
  %2148 = trunc i64 %2147 to i32
  %2149 = xor i32 %2148, %2134
  %2150 = lshr i32 %2149, 4
  %2151 = trunc i32 %2150 to i8
  %2152 = and i8 %2151, 1
  %2153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2152, i8* %2153, align 1, !tbaa !2447
  %2154 = icmp eq i32 %2134, 0
  %2155 = zext i1 %2154 to i8
  %2156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2155, i8* %2156, align 1, !tbaa !2448
  %2157 = lshr i32 %2134, 31
  %2158 = trunc i32 %2157 to i8
  %2159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2158, i8* %2159, align 1, !tbaa !2449
  %2160 = lshr i32 %2133, 31
  %2161 = xor i32 %2157, %2160
  %2162 = add nuw nsw i32 %2161, %2157
  %2163 = icmp eq i32 %2162, 2
  %2164 = zext i1 %2163 to i8
  %2165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2164, i8* %2165, align 1, !tbaa !2450
  %2166 = load i64, i64* %RBP
  %2167 = sub i64 %2166, 8
  %2168 = load i32, i32* %EAX
  %2169 = zext i32 %2168 to i64
  %2170 = load i64, i64* %PC
  %2171 = add i64 %2170, 3
  store i64 %2171, i64* %PC
  %2172 = inttoptr i64 %2167 to i32*
  store i32 %2168, i32* %2172
  %2173 = load i64, i64* %PC
  %2174 = sub i64 %2173, 88
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 5
  store i64 %2176, i64* %PC
  %2177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2174, i64* %2177, align 8, !tbaa !2428
  br label %block_400f3d

block_4009a8:                                     ; preds = %block_40099e
  %2178 = load i64, i64* %RBP
  %2179 = sub i64 %2178, 8
  %2180 = load i64, i64* %PC
  %2181 = add i64 %2180, 7
  store i64 %2181, i64* %PC
  %2182 = inttoptr i64 %2179 to i32*
  store i32 0, i32* %2182
  br label %block_4009af

block_400d22:                                     ; preds = %block_400cc5
  %2183 = load i64, i64* %PC
  %2184 = add i64 %2183, 5
  %2185 = load i64, i64* %PC
  %2186 = add i64 %2185, 5
  store i64 %2186, i64* %PC
  %2187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2184, i64* %2187, align 8, !tbaa !2428
  %2188 = load i64, i64* %RBP
  %2189 = sub i64 %2188, 4
  %2190 = load i64, i64* %PC
  %2191 = add i64 %2190, 3
  store i64 %2191, i64* %PC
  %2192 = inttoptr i64 %2189 to i32*
  %2193 = load i32, i32* %2192
  %2194 = zext i32 %2193 to i64
  store i64 %2194, i64* %RAX, align 8, !tbaa !2428
  %2195 = load i64, i64* %RAX
  %2196 = load i64, i64* %PC
  %2197 = add i64 %2196, 3
  store i64 %2197, i64* %PC
  %2198 = trunc i64 %2195 to i32
  %2199 = add i32 1, %2198
  %2200 = zext i32 %2199 to i64
  store i64 %2200, i64* %RAX, align 8, !tbaa !2428
  %2201 = icmp ult i32 %2199, %2198
  %2202 = icmp ult i32 %2199, 1
  %2203 = or i1 %2201, %2202
  %2204 = zext i1 %2203 to i8
  %2205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2204, i8* %2205, align 1, !tbaa !2432
  %2206 = and i32 %2199, 255
  %2207 = call i32 @llvm.ctpop.i32(i32 %2206) #16
  %2208 = trunc i32 %2207 to i8
  %2209 = and i8 %2208, 1
  %2210 = xor i8 %2209, 1
  %2211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2210, i8* %2211, align 1, !tbaa !2446
  %2212 = xor i64 1, %2195
  %2213 = trunc i64 %2212 to i32
  %2214 = xor i32 %2213, %2199
  %2215 = lshr i32 %2214, 4
  %2216 = trunc i32 %2215 to i8
  %2217 = and i8 %2216, 1
  %2218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2217, i8* %2218, align 1, !tbaa !2447
  %2219 = icmp eq i32 %2199, 0
  %2220 = zext i1 %2219 to i8
  %2221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2220, i8* %2221, align 1, !tbaa !2448
  %2222 = lshr i32 %2199, 31
  %2223 = trunc i32 %2222 to i8
  %2224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2223, i8* %2224, align 1, !tbaa !2449
  %2225 = lshr i32 %2198, 31
  %2226 = xor i32 %2222, %2225
  %2227 = add nuw nsw i32 %2226, %2222
  %2228 = icmp eq i32 %2227, 2
  %2229 = zext i1 %2228 to i8
  %2230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2229, i8* %2230, align 1, !tbaa !2450
  %2231 = load i64, i64* %RBP
  %2232 = sub i64 %2231, 4
  %2233 = load i32, i32* %EAX
  %2234 = zext i32 %2233 to i64
  %2235 = load i64, i64* %PC
  %2236 = add i64 %2235, 3
  store i64 %2236, i64* %PC
  %2237 = inttoptr i64 %2232 to i32*
  store i32 %2233, i32* %2237
  %2238 = load i64, i64* %PC
  %2239 = sub i64 %2238, 124
  %2240 = load i64, i64* %PC
  %2241 = add i64 %2240, 5
  store i64 %2241, i64* %PC
  %2242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2239, i64* %2242, align 8, !tbaa !2428
  br label %block_400cb4

block_400b89:                                     ; preds = %block_400bd3, %block_400b82
  %MEMORY.9 = phi %struct.Memory* [ %MEMORY.10, %block_400b82 ], [ %MEMORY.7, %block_400bd3 ]
  %2243 = load i64, i64* %RBP
  %2244 = sub i64 %2243, 8
  %2245 = load i64, i64* %PC
  %2246 = add i64 %2245, 4
  store i64 %2246, i64* %PC
  %2247 = inttoptr i64 %2244 to i32*
  %2248 = load i32, i32* %2247
  %2249 = sub i32 %2248, 3
  %2250 = icmp ult i32 %2248, 3
  %2251 = zext i1 %2250 to i8
  %2252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2251, i8* %2252, align 1, !tbaa !2432
  %2253 = and i32 %2249, 255
  %2254 = call i32 @llvm.ctpop.i32(i32 %2253) #16
  %2255 = trunc i32 %2254 to i8
  %2256 = and i8 %2255, 1
  %2257 = xor i8 %2256, 1
  %2258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2257, i8* %2258, align 1, !tbaa !2446
  %2259 = xor i32 %2248, 3
  %2260 = xor i32 %2259, %2249
  %2261 = lshr i32 %2260, 4
  %2262 = trunc i32 %2261 to i8
  %2263 = and i8 %2262, 1
  %2264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2263, i8* %2264, align 1, !tbaa !2447
  %2265 = icmp eq i32 %2249, 0
  %2266 = zext i1 %2265 to i8
  %2267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2266, i8* %2267, align 1, !tbaa !2448
  %2268 = lshr i32 %2249, 31
  %2269 = trunc i32 %2268 to i8
  %2270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2269, i8* %2270, align 1, !tbaa !2449
  %2271 = lshr i32 %2248, 31
  %2272 = xor i32 %2268, %2271
  %2273 = add nuw nsw i32 %2272, %2271
  %2274 = icmp eq i32 %2273, 2
  %2275 = zext i1 %2274 to i8
  %2276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2275, i8* %2276, align 1, !tbaa !2450
  %2277 = load i64, i64* %PC
  %2278 = add i64 %2277, 89
  %2279 = load i64, i64* %PC
  %2280 = add i64 %2279, 6
  %2281 = load i64, i64* %PC
  %2282 = add i64 %2281, 6
  store i64 %2282, i64* %PC
  %2283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2284 = load i8, i8* %2283, align 1, !tbaa !2448
  %2285 = icmp eq i8 %2284, 0
  %2286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2287 = load i8, i8* %2286, align 1, !tbaa !2449
  %2288 = icmp ne i8 %2287, 0
  %2289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2290 = load i8, i8* %2289, align 1, !tbaa !2450
  %2291 = icmp ne i8 %2290, 0
  %2292 = xor i1 %2288, %2291
  %2293 = xor i1 %2292, true
  %2294 = and i1 %2285, %2293
  %2295 = zext i1 %2294 to i8
  store i8 %2295, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2297 = select i1 %2294, i64 %2278, i64 %2280
  store i64 %2297, i64* %2296, align 8, !tbaa !2428
  %2298 = load i8, i8* %BRANCH_TAKEN
  %2299 = icmp eq i8 %2298, 1
  br i1 %2299, label %block_400be6, label %block_400b93

block_401121:                                     ; preds = %block_401117
  %2300 = load i64, i64* %RBP
  %2301 = sub i64 %2300, 12
  %2302 = load i64, i64* %PC
  %2303 = add i64 %2302, 7
  store i64 %2303, i64* %PC
  %2304 = inttoptr i64 %2301 to i32*
  store i32 0, i32* %2304
  br label %block_401128

block_40091e:                                     ; preds = %block_4008c1
  %2305 = load i64, i64* %PC
  %2306 = add i64 %2305, 5
  %2307 = load i64, i64* %PC
  %2308 = add i64 %2307, 5
  store i64 %2308, i64* %PC
  %2309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2306, i64* %2309, align 8, !tbaa !2428
  %2310 = load i64, i64* %RBP
  %2311 = sub i64 %2310, 4
  %2312 = load i64, i64* %PC
  %2313 = add i64 %2312, 3
  store i64 %2313, i64* %PC
  %2314 = inttoptr i64 %2311 to i32*
  %2315 = load i32, i32* %2314
  %2316 = zext i32 %2315 to i64
  store i64 %2316, i64* %RAX, align 8, !tbaa !2428
  %2317 = load i64, i64* %RAX
  %2318 = load i64, i64* %PC
  %2319 = add i64 %2318, 3
  store i64 %2319, i64* %PC
  %2320 = trunc i64 %2317 to i32
  %2321 = add i32 1, %2320
  %2322 = zext i32 %2321 to i64
  store i64 %2322, i64* %RAX, align 8, !tbaa !2428
  %2323 = icmp ult i32 %2321, %2320
  %2324 = icmp ult i32 %2321, 1
  %2325 = or i1 %2323, %2324
  %2326 = zext i1 %2325 to i8
  %2327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2326, i8* %2327, align 1, !tbaa !2432
  %2328 = and i32 %2321, 255
  %2329 = call i32 @llvm.ctpop.i32(i32 %2328) #16
  %2330 = trunc i32 %2329 to i8
  %2331 = and i8 %2330, 1
  %2332 = xor i8 %2331, 1
  %2333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2332, i8* %2333, align 1, !tbaa !2446
  %2334 = xor i64 1, %2317
  %2335 = trunc i64 %2334 to i32
  %2336 = xor i32 %2335, %2321
  %2337 = lshr i32 %2336, 4
  %2338 = trunc i32 %2337 to i8
  %2339 = and i8 %2338, 1
  %2340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2339, i8* %2340, align 1, !tbaa !2447
  %2341 = icmp eq i32 %2321, 0
  %2342 = zext i1 %2341 to i8
  %2343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2342, i8* %2343, align 1, !tbaa !2448
  %2344 = lshr i32 %2321, 31
  %2345 = trunc i32 %2344 to i8
  %2346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2345, i8* %2346, align 1, !tbaa !2449
  %2347 = lshr i32 %2320, 31
  %2348 = xor i32 %2344, %2347
  %2349 = add nuw nsw i32 %2348, %2344
  %2350 = icmp eq i32 %2349, 2
  %2351 = zext i1 %2350 to i8
  %2352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2351, i8* %2352, align 1, !tbaa !2450
  %2353 = load i64, i64* %RBP
  %2354 = sub i64 %2353, 4
  %2355 = load i32, i32* %EAX
  %2356 = zext i32 %2355 to i64
  %2357 = load i64, i64* %PC
  %2358 = add i64 %2357, 3
  store i64 %2358, i64* %PC
  %2359 = inttoptr i64 %2354 to i32*
  store i32 %2355, i32* %2359
  %2360 = load i64, i64* %PC
  %2361 = sub i64 %2360, 124
  %2362 = load i64, i64* %PC
  %2363 = add i64 %2362, 5
  store i64 %2363, i64* %PC
  %2364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2361, i64* %2364, align 8, !tbaa !2428
  br label %block_4008b0

block_400b78:                                     ; preds = %block_400b5b, %block_400be6
  %MEMORY.10 = phi %struct.Memory* [ %MEMORY.29, %block_400b5b ], [ %MEMORY.9, %block_400be6 ]
  %2365 = load i64, i64* %RBP
  %2366 = sub i64 %2365, 4
  %2367 = load i64, i64* %PC
  %2368 = add i64 %2367, 4
  store i64 %2368, i64* %PC
  %2369 = inttoptr i64 %2366 to i32*
  %2370 = load i32, i32* %2369
  %2371 = sub i32 %2370, 1
  %2372 = icmp ult i32 %2370, 1
  %2373 = zext i1 %2372 to i8
  %2374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2373, i8* %2374, align 1, !tbaa !2432
  %2375 = and i32 %2371, 255
  %2376 = call i32 @llvm.ctpop.i32(i32 %2375) #16
  %2377 = trunc i32 %2376 to i8
  %2378 = and i8 %2377, 1
  %2379 = xor i8 %2378, 1
  %2380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2379, i8* %2380, align 1, !tbaa !2446
  %2381 = xor i32 %2370, 1
  %2382 = xor i32 %2381, %2371
  %2383 = lshr i32 %2382, 4
  %2384 = trunc i32 %2383 to i8
  %2385 = and i8 %2384, 1
  %2386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2385, i8* %2386, align 1, !tbaa !2447
  %2387 = icmp eq i32 %2371, 0
  %2388 = zext i1 %2387 to i8
  %2389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2388, i8* %2389, align 1, !tbaa !2448
  %2390 = lshr i32 %2371, 31
  %2391 = trunc i32 %2390 to i8
  %2392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2391, i8* %2392, align 1, !tbaa !2449
  %2393 = lshr i32 %2370, 31
  %2394 = xor i32 %2390, %2393
  %2395 = add nuw nsw i32 %2394, %2393
  %2396 = icmp eq i32 %2395, 2
  %2397 = zext i1 %2396 to i8
  %2398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2397, i8* %2398, align 1, !tbaa !2450
  %2399 = load i64, i64* %PC
  %2400 = add i64 %2399, 125
  %2401 = load i64, i64* %PC
  %2402 = add i64 %2401, 6
  %2403 = load i64, i64* %PC
  %2404 = add i64 %2403, 6
  store i64 %2404, i64* %PC
  %2405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2406 = load i8, i8* %2405, align 1, !tbaa !2448
  %2407 = icmp eq i8 %2406, 0
  %2408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2409 = load i8, i8* %2408, align 1, !tbaa !2449
  %2410 = icmp ne i8 %2409, 0
  %2411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2412 = load i8, i8* %2411, align 1, !tbaa !2450
  %2413 = icmp ne i8 %2412, 0
  %2414 = xor i1 %2410, %2413
  %2415 = xor i1 %2414, true
  %2416 = and i1 %2407, %2415
  %2417 = zext i1 %2416 to i8
  store i8 %2417, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2419 = select i1 %2416, i64 %2400, i64 %2402
  store i64 %2419, i64* %2418, align 8, !tbaa !2428
  %2420 = load i8, i8* %BRANCH_TAKEN
  %2421 = icmp eq i8 %2420, 1
  br i1 %2421, label %block_400bf9, label %block_400b82

block_401110:                                     ; preds = %block_401106
  %2422 = load i64, i64* %RBP
  %2423 = sub i64 %2422, 8
  %2424 = load i64, i64* %PC
  %2425 = add i64 %2424, 7
  store i64 %2425, i64* %PC
  %2426 = inttoptr i64 %2423 to i32*
  store i32 0, i32* %2426
  br label %block_401117

block_401128:                                     ; preds = %block_401121, %block_401132
  %MEMORY.11 = phi %struct.Memory* [ %MEMORY.36, %block_401121 ], [ %MEMORY.11, %block_401132 ]
  %2427 = load i64, i64* %RBP
  %2428 = sub i64 %2427, 12
  %2429 = load i64, i64* %PC
  %2430 = add i64 %2429, 4
  store i64 %2430, i64* %PC
  %2431 = inttoptr i64 %2428 to i32*
  %2432 = load i32, i32* %2431
  %2433 = sub i32 %2432, 1
  %2434 = icmp ult i32 %2432, 1
  %2435 = zext i1 %2434 to i8
  %2436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2435, i8* %2436, align 1, !tbaa !2432
  %2437 = and i32 %2433, 255
  %2438 = call i32 @llvm.ctpop.i32(i32 %2437) #16
  %2439 = trunc i32 %2438 to i8
  %2440 = and i8 %2439, 1
  %2441 = xor i8 %2440, 1
  %2442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2441, i8* %2442, align 1, !tbaa !2446
  %2443 = xor i32 %2432, 1
  %2444 = xor i32 %2443, %2433
  %2445 = lshr i32 %2444, 4
  %2446 = trunc i32 %2445 to i8
  %2447 = and i8 %2446, 1
  %2448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2447, i8* %2448, align 1, !tbaa !2447
  %2449 = icmp eq i32 %2433, 0
  %2450 = zext i1 %2449 to i8
  %2451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2450, i8* %2451, align 1, !tbaa !2448
  %2452 = lshr i32 %2433, 31
  %2453 = trunc i32 %2452 to i8
  %2454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2453, i8* %2454, align 1, !tbaa !2449
  %2455 = lshr i32 %2432, 31
  %2456 = xor i32 %2452, %2455
  %2457 = add nuw nsw i32 %2456, %2455
  %2458 = icmp eq i32 %2457, 2
  %2459 = zext i1 %2458 to i8
  %2460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2459, i8* %2460, align 1, !tbaa !2450
  %2461 = load i64, i64* %PC
  %2462 = add i64 %2461, 53
  %2463 = load i64, i64* %PC
  %2464 = add i64 %2463, 6
  %2465 = load i64, i64* %PC
  %2466 = add i64 %2465, 6
  store i64 %2466, i64* %PC
  %2467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2468 = load i8, i8* %2467, align 1, !tbaa !2448
  %2469 = icmp eq i8 %2468, 0
  %2470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2471 = load i8, i8* %2470, align 1, !tbaa !2449
  %2472 = icmp ne i8 %2471, 0
  %2473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2474 = load i8, i8* %2473, align 1, !tbaa !2450
  %2475 = icmp ne i8 %2474, 0
  %2476 = xor i1 %2472, %2475
  %2477 = xor i1 %2476, true
  %2478 = and i1 %2469, %2477
  %2479 = zext i1 %2478 to i8
  store i8 %2479, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2481 = select i1 %2478, i64 %2462, i64 %2464
  store i64 %2481, i64* %2480, align 8, !tbaa !2428
  %2482 = load i8, i8* %BRANCH_TAKEN
  %2483 = icmp eq i8 %2482, 1
  br i1 %2483, label %block_401161, label %block_401132

block_400f0f:                                     ; preds = %block_400e8e
  %2484 = load i64, i64* %PC
  %2485 = add i64 %2484, 11
  store i64 %2485, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 32) to i32*)
  %2486 = load i64, i64* %PC
  %2487 = add i64 %2486, 11
  store i64 %2487, i64* %PC
  store i32 128, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 32) to i32*)
  %2488 = load i64, i64* %RBP
  %2489 = sub i64 %2488, 4
  %2490 = load i64, i64* %PC
  %2491 = add i64 %2490, 7
  store i64 %2491, i64* %PC
  %2492 = inttoptr i64 %2489 to i32*
  store i32 0, i32* %2492
  br label %block_400f2c

block_400df0:                                     ; preds = %block_400e5e, %block_400dd3
  %MEMORY.12 = phi %struct.Memory* [ %MEMORY.2, %block_400dd3 ], [ %MEMORY.47, %block_400e5e ]
  %2493 = load i64, i64* %RBP
  %2494 = sub i64 %2493, 4
  %2495 = load i64, i64* %PC
  %2496 = add i64 %2495, 4
  store i64 %2496, i64* %PC
  %2497 = inttoptr i64 %2494 to i32*
  %2498 = load i32, i32* %2497
  %2499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2499, align 1, !tbaa !2432
  %2500 = and i32 %2498, 255
  %2501 = call i32 @llvm.ctpop.i32(i32 %2500) #16
  %2502 = trunc i32 %2501 to i8
  %2503 = and i8 %2502, 1
  %2504 = xor i8 %2503, 1
  %2505 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2504, i8* %2505, align 1, !tbaa !2446
  %2506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2506, align 1, !tbaa !2447
  %2507 = icmp eq i32 %2498, 0
  %2508 = zext i1 %2507 to i8
  %2509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2508, i8* %2509, align 1, !tbaa !2448
  %2510 = lshr i32 %2498, 31
  %2511 = trunc i32 %2510 to i8
  %2512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2511, i8* %2512, align 1, !tbaa !2449
  %2513 = lshr i32 %2498, 31
  %2514 = xor i32 %2510, %2513
  %2515 = add nuw nsw i32 %2514, %2513
  %2516 = icmp eq i32 %2515, 2
  %2517 = zext i1 %2516 to i8
  %2518 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2517, i8* %2518, align 1, !tbaa !2450
  %2519 = load i64, i64* %PC
  %2520 = add i64 %2519, 125
  %2521 = load i64, i64* %PC
  %2522 = add i64 %2521, 6
  %2523 = load i64, i64* %PC
  %2524 = add i64 %2523, 6
  store i64 %2524, i64* %PC
  %2525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2526 = load i8, i8* %2525, align 1, !tbaa !2448
  %2527 = icmp eq i8 %2526, 0
  %2528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2529 = load i8, i8* %2528, align 1, !tbaa !2449
  %2530 = icmp ne i8 %2529, 0
  %2531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2532 = load i8, i8* %2531, align 1, !tbaa !2450
  %2533 = icmp ne i8 %2532, 0
  %2534 = xor i1 %2530, %2533
  %2535 = xor i1 %2534, true
  %2536 = and i1 %2527, %2535
  %2537 = zext i1 %2536 to i8
  store i8 %2537, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2539 = select i1 %2536, i64 %2520, i64 %2522
  store i64 %2539, i64* %2538, align 8, !tbaa !2428
  %2540 = load i8, i8* %BRANCH_TAKEN
  %2541 = icmp eq i8 %2540, 1
  br i1 %2541, label %block_400e71, label %block_400dfa

block_40090b:                                     ; preds = %block_4008d2
  %2542 = load i64, i64* %PC
  %2543 = add i64 %2542, 5
  %2544 = load i64, i64* %PC
  %2545 = add i64 %2544, 5
  store i64 %2545, i64* %PC
  %2546 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2543, i64* %2546, align 8, !tbaa !2428
  %2547 = load i64, i64* %RBP
  %2548 = sub i64 %2547, 8
  %2549 = load i64, i64* %PC
  %2550 = add i64 %2549, 3
  store i64 %2550, i64* %PC
  %2551 = inttoptr i64 %2548 to i32*
  %2552 = load i32, i32* %2551
  %2553 = zext i32 %2552 to i64
  store i64 %2553, i64* %RAX, align 8, !tbaa !2428
  %2554 = load i64, i64* %RAX
  %2555 = load i64, i64* %PC
  %2556 = add i64 %2555, 3
  store i64 %2556, i64* %PC
  %2557 = trunc i64 %2554 to i32
  %2558 = add i32 1, %2557
  %2559 = zext i32 %2558 to i64
  store i64 %2559, i64* %RAX, align 8, !tbaa !2428
  %2560 = icmp ult i32 %2558, %2557
  %2561 = icmp ult i32 %2558, 1
  %2562 = or i1 %2560, %2561
  %2563 = zext i1 %2562 to i8
  %2564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2563, i8* %2564, align 1, !tbaa !2432
  %2565 = and i32 %2558, 255
  %2566 = call i32 @llvm.ctpop.i32(i32 %2565) #16
  %2567 = trunc i32 %2566 to i8
  %2568 = and i8 %2567, 1
  %2569 = xor i8 %2568, 1
  %2570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2569, i8* %2570, align 1, !tbaa !2446
  %2571 = xor i64 1, %2554
  %2572 = trunc i64 %2571 to i32
  %2573 = xor i32 %2572, %2558
  %2574 = lshr i32 %2573, 4
  %2575 = trunc i32 %2574 to i8
  %2576 = and i8 %2575, 1
  %2577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2576, i8* %2577, align 1, !tbaa !2447
  %2578 = icmp eq i32 %2558, 0
  %2579 = zext i1 %2578 to i8
  %2580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2579, i8* %2580, align 1, !tbaa !2448
  %2581 = lshr i32 %2558, 31
  %2582 = trunc i32 %2581 to i8
  %2583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2582, i8* %2583, align 1, !tbaa !2449
  %2584 = lshr i32 %2557, 31
  %2585 = xor i32 %2581, %2584
  %2586 = add nuw nsw i32 %2585, %2581
  %2587 = icmp eq i32 %2586, 2
  %2588 = zext i1 %2587 to i8
  %2589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2588, i8* %2589, align 1, !tbaa !2450
  %2590 = load i64, i64* %RBP
  %2591 = sub i64 %2590, 8
  %2592 = load i32, i32* %EAX
  %2593 = zext i32 %2592 to i64
  %2594 = load i64, i64* %PC
  %2595 = add i64 %2594, 3
  store i64 %2595, i64* %PC
  %2596 = inttoptr i64 %2591 to i32*
  store i32 %2592, i32* %2596
  %2597 = load i64, i64* %PC
  %2598 = sub i64 %2597, 88
  %2599 = load i64, i64* %PC
  %2600 = add i64 %2599, 5
  store i64 %2600, i64* %PC
  %2601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2598, i64* %2601, align 8, !tbaa !2428
  br label %block_4008c1

block_401106:                                     ; preds = %block_401174, %block_4010e9
  %MEMORY.13 = phi %struct.Memory* [ %MEMORY.32, %block_4010e9 ], [ %MEMORY.36, %block_401174 ]
  %2602 = load i64, i64* %RBP
  %2603 = sub i64 %2602, 4
  %2604 = load i64, i64* %PC
  %2605 = add i64 %2604, 4
  store i64 %2605, i64* %PC
  %2606 = inttoptr i64 %2603 to i32*
  %2607 = load i32, i32* %2606
  %2608 = sub i32 %2607, 1
  %2609 = icmp ult i32 %2607, 1
  %2610 = zext i1 %2609 to i8
  %2611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2610, i8* %2611, align 1, !tbaa !2432
  %2612 = and i32 %2608, 255
  %2613 = call i32 @llvm.ctpop.i32(i32 %2612) #16
  %2614 = trunc i32 %2613 to i8
  %2615 = and i8 %2614, 1
  %2616 = xor i8 %2615, 1
  %2617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2616, i8* %2617, align 1, !tbaa !2446
  %2618 = xor i32 %2607, 1
  %2619 = xor i32 %2618, %2608
  %2620 = lshr i32 %2619, 4
  %2621 = trunc i32 %2620 to i8
  %2622 = and i8 %2621, 1
  %2623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2622, i8* %2623, align 1, !tbaa !2447
  %2624 = icmp eq i32 %2608, 0
  %2625 = zext i1 %2624 to i8
  %2626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2625, i8* %2626, align 1, !tbaa !2448
  %2627 = lshr i32 %2608, 31
  %2628 = trunc i32 %2627 to i8
  %2629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2628, i8* %2629, align 1, !tbaa !2449
  %2630 = lshr i32 %2607, 31
  %2631 = xor i32 %2627, %2630
  %2632 = add nuw nsw i32 %2631, %2630
  %2633 = icmp eq i32 %2632, 2
  %2634 = zext i1 %2633 to i8
  %2635 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2634, i8* %2635, align 1, !tbaa !2450
  %2636 = load i64, i64* %PC
  %2637 = add i64 %2636, 125
  %2638 = load i64, i64* %PC
  %2639 = add i64 %2638, 6
  %2640 = load i64, i64* %PC
  %2641 = add i64 %2640, 6
  store i64 %2641, i64* %PC
  %2642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2643 = load i8, i8* %2642, align 1, !tbaa !2448
  %2644 = icmp eq i8 %2643, 0
  %2645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2646 = load i8, i8* %2645, align 1, !tbaa !2449
  %2647 = icmp ne i8 %2646, 0
  %2648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2649 = load i8, i8* %2648, align 1, !tbaa !2450
  %2650 = icmp ne i8 %2649, 0
  %2651 = xor i1 %2647, %2650
  %2652 = xor i1 %2651, true
  %2653 = and i1 %2644, %2652
  %2654 = zext i1 %2653 to i8
  store i8 %2654, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %2655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2656 = select i1 %2653, i64 %2637, i64 %2639
  store i64 %2656, i64* %2655, align 8, !tbaa !2428
  %2657 = load i8, i8* %BRANCH_TAKEN
  %2658 = icmp eq i8 %2657, 1
  br i1 %2658, label %block_401187, label %block_401110

block_4010d6:                                     ; preds = %block_401079
  %2659 = load i64, i64* %PC
  %2660 = add i64 %2659, 5
  %2661 = load i64, i64* %PC
  %2662 = add i64 %2661, 5
  store i64 %2662, i64* %PC
  %2663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2660, i64* %2663, align 8, !tbaa !2428
  %2664 = load i64, i64* %RBP
  %2665 = sub i64 %2664, 4
  %2666 = load i64, i64* %PC
  %2667 = add i64 %2666, 3
  store i64 %2667, i64* %PC
  %2668 = inttoptr i64 %2665 to i32*
  %2669 = load i32, i32* %2668
  %2670 = zext i32 %2669 to i64
  store i64 %2670, i64* %RAX, align 8, !tbaa !2428
  %2671 = load i64, i64* %RAX
  %2672 = load i64, i64* %PC
  %2673 = add i64 %2672, 3
  store i64 %2673, i64* %PC
  %2674 = trunc i64 %2671 to i32
  %2675 = add i32 1, %2674
  %2676 = zext i32 %2675 to i64
  store i64 %2676, i64* %RAX, align 8, !tbaa !2428
  %2677 = icmp ult i32 %2675, %2674
  %2678 = icmp ult i32 %2675, 1
  %2679 = or i1 %2677, %2678
  %2680 = zext i1 %2679 to i8
  %2681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2680, i8* %2681, align 1, !tbaa !2432
  %2682 = and i32 %2675, 255
  %2683 = call i32 @llvm.ctpop.i32(i32 %2682) #16
  %2684 = trunc i32 %2683 to i8
  %2685 = and i8 %2684, 1
  %2686 = xor i8 %2685, 1
  %2687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2686, i8* %2687, align 1, !tbaa !2446
  %2688 = xor i64 1, %2671
  %2689 = trunc i64 %2688 to i32
  %2690 = xor i32 %2689, %2675
  %2691 = lshr i32 %2690, 4
  %2692 = trunc i32 %2691 to i8
  %2693 = and i8 %2692, 1
  %2694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2693, i8* %2694, align 1, !tbaa !2447
  %2695 = icmp eq i32 %2675, 0
  %2696 = zext i1 %2695 to i8
  %2697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2696, i8* %2697, align 1, !tbaa !2448
  %2698 = lshr i32 %2675, 31
  %2699 = trunc i32 %2698 to i8
  %2700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2699, i8* %2700, align 1, !tbaa !2449
  %2701 = lshr i32 %2674, 31
  %2702 = xor i32 %2698, %2701
  %2703 = add nuw nsw i32 %2702, %2698
  %2704 = icmp eq i32 %2703, 2
  %2705 = zext i1 %2704 to i8
  %2706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2705, i8* %2706, align 1, !tbaa !2450
  %2707 = load i64, i64* %RBP
  %2708 = sub i64 %2707, 4
  %2709 = load i32, i32* %EAX
  %2710 = zext i32 %2709 to i64
  %2711 = load i64, i64* %PC
  %2712 = add i64 %2711, 3
  store i64 %2712, i64* %PC
  %2713 = inttoptr i64 %2708 to i32*
  store i32 %2709, i32* %2713
  %2714 = load i64, i64* %PC
  %2715 = sub i64 %2714, 124
  %2716 = load i64, i64* %PC
  %2717 = add i64 %2716, 5
  store i64 %2717, i64* %PC
  %2718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2715, i64* %2718, align 8, !tbaa !2428
  br label %block_401068

block_400b82:                                     ; preds = %block_400b78
  %2719 = load i64, i64* %RBP
  %2720 = sub i64 %2719, 8
  %2721 = load i64, i64* %PC
  %2722 = add i64 %2721, 7
  store i64 %2722, i64* %PC
  %2723 = inttoptr i64 %2720 to i32*
  store i32 0, i32* %2723
  br label %block_400b89

block_400956:                                     ; preds = %block_400949
  %2724 = add i64 %4064, 10
  store i64 %2724, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RAX, align 8, !tbaa !2428
  %2725 = load i64, i64* %RBP
  %2726 = sub i64 %2725, 4
  %2727 = load i64, i64* %PC
  %2728 = add i64 %2727, 4
  store i64 %2728, i64* %PC
  %2729 = inttoptr i64 %2726 to i32*
  %2730 = load i32, i32* %2729
  %2731 = sext i32 %2730 to i64
  store i64 %2731, i64* %RCX, align 8, !tbaa !2428
  %2732 = load i64, i64* %RCX
  %2733 = load i64, i64* %PC
  %2734 = add i64 %2733, 4
  store i64 %2734, i64* %PC
  %2735 = shl i64 %2732, 10
  %2736 = icmp slt i64 %2735, 0
  %2737 = shl i64 %2735, 1
  store i64 %2737, i64* %RCX, align 8, !tbaa !2428
  %2738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2739 = zext i1 %2736 to i8
  store i8 %2739, i8* %2738, align 1, !tbaa !2451
  %2740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2741 = trunc i64 %2737 to i32
  %2742 = and i32 %2741, 254
  %2743 = call i32 @llvm.ctpop.i32(i32 %2742) #16
  %2744 = trunc i32 %2743 to i8
  %2745 = and i8 %2744, 1
  %2746 = xor i8 %2745, 1
  store i8 %2746, i8* %2740, align 1, !tbaa !2451
  %2747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2747, align 1, !tbaa !2451
  %2748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2749 = icmp eq i64 %2737, 0
  %2750 = zext i1 %2749 to i8
  store i8 %2750, i8* %2748, align 1, !tbaa !2451
  %2751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2752 = lshr i64 %2737, 63
  %2753 = trunc i64 %2752 to i8
  store i8 %2753, i8* %2751, align 1, !tbaa !2451
  %2754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2754, align 1, !tbaa !2451
  %2755 = load i64, i64* %RAX
  %2756 = load i64, i64* %RCX
  %2757 = load i64, i64* %PC
  %2758 = add i64 %2757, 3
  store i64 %2758, i64* %PC
  %2759 = add i64 %2756, %2755
  store i64 %2759, i64* %RAX, align 8, !tbaa !2428
  %2760 = icmp ult i64 %2759, %2755
  %2761 = icmp ult i64 %2759, %2756
  %2762 = or i1 %2760, %2761
  %2763 = zext i1 %2762 to i8
  %2764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2763, i8* %2764, align 1, !tbaa !2432
  %2765 = trunc i64 %2759 to i32
  %2766 = and i32 %2765, 255
  %2767 = call i32 @llvm.ctpop.i32(i32 %2766) #16
  %2768 = trunc i32 %2767 to i8
  %2769 = and i8 %2768, 1
  %2770 = xor i8 %2769, 1
  %2771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2770, i8* %2771, align 1, !tbaa !2446
  %2772 = xor i64 %2756, %2755
  %2773 = xor i64 %2772, %2759
  %2774 = lshr i64 %2773, 4
  %2775 = trunc i64 %2774 to i8
  %2776 = and i8 %2775, 1
  %2777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2776, i8* %2777, align 1, !tbaa !2447
  %2778 = icmp eq i64 %2759, 0
  %2779 = zext i1 %2778 to i8
  %2780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2779, i8* %2780, align 1, !tbaa !2448
  %2781 = lshr i64 %2759, 63
  %2782 = trunc i64 %2781 to i8
  %2783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2782, i8* %2783, align 1, !tbaa !2449
  %2784 = lshr i64 %2755, 63
  %2785 = lshr i64 %2756, 63
  %2786 = xor i64 %2781, %2784
  %2787 = xor i64 %2781, %2785
  %2788 = add nuw nsw i64 %2786, %2787
  %2789 = icmp eq i64 %2788, 2
  %2790 = zext i1 %2789 to i8
  %2791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2790, i8* %2791, align 1, !tbaa !2450
  %2792 = load i64, i64* %RBP
  %2793 = sub i64 %2792, 16
  %2794 = load i64, i64* %PC
  %2795 = add i64 %2794, 4
  store i64 %2795, i64* %PC
  %2796 = inttoptr i64 %2793 to i32*
  %2797 = load i32, i32* %2796
  %2798 = sext i32 %2797 to i64
  store i64 %2798, i64* %RCX, align 8, !tbaa !2428
  %2799 = load i64, i64* %RAX
  %2800 = load i64, i64* %RCX
  %2801 = mul i64 %2800, 4
  %2802 = add i64 %2801, %2799
  %2803 = load i64, i64* %PC
  %2804 = add i64 %2803, 7
  store i64 %2804, i64* %PC
  %2805 = inttoptr i64 %2802 to i32*
  store i32 0, i32* %2805
  %2806 = load i64, i64* %RBP
  %2807 = sub i64 %2806, 16
  %2808 = load i64, i64* %PC
  %2809 = add i64 %2808, 3
  store i64 %2809, i64* %PC
  %2810 = inttoptr i64 %2807 to i32*
  %2811 = load i32, i32* %2810
  %2812 = zext i32 %2811 to i64
  store i64 %2812, i64* %RAX, align 8, !tbaa !2428
  %2813 = load i64, i64* %RAX
  %2814 = load i64, i64* %PC
  %2815 = add i64 %2814, 3
  store i64 %2815, i64* %PC
  %2816 = trunc i64 %2813 to i32
  %2817 = add i32 1, %2816
  %2818 = zext i32 %2817 to i64
  store i64 %2818, i64* %RAX, align 8, !tbaa !2428
  %2819 = icmp ult i32 %2817, %2816
  %2820 = icmp ult i32 %2817, 1
  %2821 = or i1 %2819, %2820
  %2822 = zext i1 %2821 to i8
  %2823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2822, i8* %2823, align 1, !tbaa !2432
  %2824 = and i32 %2817, 255
  %2825 = call i32 @llvm.ctpop.i32(i32 %2824) #16
  %2826 = trunc i32 %2825 to i8
  %2827 = and i8 %2826, 1
  %2828 = xor i8 %2827, 1
  %2829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2828, i8* %2829, align 1, !tbaa !2446
  %2830 = xor i64 1, %2813
  %2831 = trunc i64 %2830 to i32
  %2832 = xor i32 %2831, %2817
  %2833 = lshr i32 %2832, 4
  %2834 = trunc i32 %2833 to i8
  %2835 = and i8 %2834, 1
  %2836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2835, i8* %2836, align 1, !tbaa !2447
  %2837 = icmp eq i32 %2817, 0
  %2838 = zext i1 %2837 to i8
  %2839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2838, i8* %2839, align 1, !tbaa !2448
  %2840 = lshr i32 %2817, 31
  %2841 = trunc i32 %2840 to i8
  %2842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2841, i8* %2842, align 1, !tbaa !2449
  %2843 = lshr i32 %2816, 31
  %2844 = xor i32 %2840, %2843
  %2845 = add nuw nsw i32 %2844, %2840
  %2846 = icmp eq i32 %2845, 2
  %2847 = zext i1 %2846 to i8
  %2848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2847, i8* %2848, align 1, !tbaa !2450
  %2849 = load i64, i64* %RBP
  %2850 = sub i64 %2849, 16
  %2851 = load i32, i32* %EAX
  %2852 = zext i32 %2851 to i64
  %2853 = load i64, i64* %PC
  %2854 = add i64 %2853, 3
  store i64 %2854, i64* %PC
  %2855 = inttoptr i64 %2850 to i32*
  store i32 %2851, i32* %2855
  %2856 = load i64, i64* %PC
  %2857 = sub i64 %2856, 54
  %2858 = load i64, i64* %PC
  %2859 = add i64 %2858, 5
  store i64 %2859, i64* %PC
  %2860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2857, i64* %2860, align 8, !tbaa !2428
  br label %block_400949

block_400ee9:                                     ; preds = %block_400eb0
  %2861 = load i64, i64* %PC
  %2862 = add i64 %2861, 5
  %2863 = load i64, i64* %PC
  %2864 = add i64 %2863, 5
  store i64 %2864, i64* %PC
  %2865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2862, i64* %2865, align 8, !tbaa !2428
  %2866 = load i64, i64* %RBP
  %2867 = sub i64 %2866, 8
  %2868 = load i64, i64* %PC
  %2869 = add i64 %2868, 3
  store i64 %2869, i64* %PC
  %2870 = inttoptr i64 %2867 to i32*
  %2871 = load i32, i32* %2870
  %2872 = zext i32 %2871 to i64
  store i64 %2872, i64* %RAX, align 8, !tbaa !2428
  %2873 = load i64, i64* %RAX
  %2874 = load i64, i64* %PC
  %2875 = add i64 %2874, 3
  store i64 %2875, i64* %PC
  %2876 = trunc i64 %2873 to i32
  %2877 = add i32 1, %2876
  %2878 = zext i32 %2877 to i64
  store i64 %2878, i64* %RAX, align 8, !tbaa !2428
  %2879 = icmp ult i32 %2877, %2876
  %2880 = icmp ult i32 %2877, 1
  %2881 = or i1 %2879, %2880
  %2882 = zext i1 %2881 to i8
  %2883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2882, i8* %2883, align 1, !tbaa !2432
  %2884 = and i32 %2877, 255
  %2885 = call i32 @llvm.ctpop.i32(i32 %2884) #16
  %2886 = trunc i32 %2885 to i8
  %2887 = and i8 %2886, 1
  %2888 = xor i8 %2887, 1
  %2889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2888, i8* %2889, align 1, !tbaa !2446
  %2890 = xor i64 1, %2873
  %2891 = trunc i64 %2890 to i32
  %2892 = xor i32 %2891, %2877
  %2893 = lshr i32 %2892, 4
  %2894 = trunc i32 %2893 to i8
  %2895 = and i8 %2894, 1
  %2896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2895, i8* %2896, align 1, !tbaa !2447
  %2897 = icmp eq i32 %2877, 0
  %2898 = zext i1 %2897 to i8
  %2899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2898, i8* %2899, align 1, !tbaa !2448
  %2900 = lshr i32 %2877, 31
  %2901 = trunc i32 %2900 to i8
  %2902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2901, i8* %2902, align 1, !tbaa !2449
  %2903 = lshr i32 %2876, 31
  %2904 = xor i32 %2900, %2903
  %2905 = add nuw nsw i32 %2904, %2900
  %2906 = icmp eq i32 %2905, 2
  %2907 = zext i1 %2906 to i8
  %2908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2907, i8* %2908, align 1, !tbaa !2450
  %2909 = load i64, i64* %RBP
  %2910 = sub i64 %2909, 8
  %2911 = load i32, i32* %EAX
  %2912 = zext i32 %2911 to i64
  %2913 = load i64, i64* %PC
  %2914 = add i64 %2913, 3
  store i64 %2914, i64* %PC
  %2915 = inttoptr i64 %2910 to i32*
  store i32 %2911, i32* %2915
  %2916 = load i64, i64* %PC
  %2917 = sub i64 %2916, 88
  %2918 = load i64, i64* %PC
  %2919 = add i64 %2918, 5
  store i64 %2919, i64* %PC
  %2920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2917, i64* %2920, align 8, !tbaa !2428
  br label %block_400e9f

block_400ce0:                                     ; preds = %block_400cd6
  %2921 = load i64, i64* %RBP
  %2922 = sub i64 %2921, 4
  %2923 = load i64, i64* %PC
  %2924 = add i64 %2923, 3
  store i64 %2924, i64* %PC
  %2925 = inttoptr i64 %2922 to i32*
  %2926 = load i32, i32* %2925
  %2927 = zext i32 %2926 to i64
  store i64 %2927, i64* %RAX, align 8, !tbaa !2428
  %2928 = load i64, i64* %RBP
  %2929 = sub i64 %2928, 8
  %2930 = load i64, i64* %PC
  %2931 = add i64 %2930, 3
  store i64 %2931, i64* %PC
  %2932 = inttoptr i64 %2929 to i32*
  %2933 = load i32, i32* %2932
  %2934 = zext i32 %2933 to i64
  store i64 %2934, i64* %RCX, align 8, !tbaa !2428
  %2935 = load i64, i64* %RBP
  %2936 = sub i64 %2935, 12
  %2937 = load i64, i64* %PC
  %2938 = add i64 %2937, 3
  store i64 %2938, i64* %PC
  %2939 = inttoptr i64 %2936 to i32*
  %2940 = load i32, i32* %2939
  %2941 = zext i32 %2940 to i64
  store i64 %2941, i64* %RDX, align 8, !tbaa !2428
  %2942 = load i64, i64* %RDX
  %2943 = load i64, i64* %PC
  %2944 = add i64 %2943, 3
  store i64 %2944, i64* %PC
  %2945 = and i64 %2942, 4294967295
  %2946 = shl i64 %2945, 2
  %2947 = trunc i64 %2946 to i32
  %2948 = icmp slt i32 %2947, 0
  %2949 = shl i32 %2947, 1
  %2950 = zext i32 %2949 to i64
  store i64 %2950, i64* %RDX, align 8, !tbaa !2428
  %2951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2952 = zext i1 %2948 to i8
  store i8 %2952, i8* %2951, align 1, !tbaa !2451
  %2953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2954 = and i32 %2949, 254
  %2955 = call i32 @llvm.ctpop.i32(i32 %2954) #16
  %2956 = trunc i32 %2955 to i8
  %2957 = and i8 %2956, 1
  %2958 = xor i8 %2957, 1
  store i8 %2958, i8* %2953, align 1, !tbaa !2451
  %2959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2959, align 1, !tbaa !2451
  %2960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2961 = icmp eq i32 %2949, 0
  %2962 = zext i1 %2961 to i8
  store i8 %2962, i8* %2960, align 1, !tbaa !2451
  %2963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2964 = lshr i32 %2949, 31
  %2965 = trunc i32 %2964 to i8
  store i8 %2965, i8* %2963, align 1, !tbaa !2451
  %2966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2966, align 1, !tbaa !2451
  %2967 = load i64, i64* %RCX
  %2968 = load i32, i32* %EDX
  %2969 = zext i32 %2968 to i64
  %2970 = load i64, i64* %PC
  %2971 = add i64 %2970, 2
  store i64 %2971, i64* %PC
  %2972 = trunc i64 %2967 to i32
  %2973 = add i32 %2968, %2972
  %2974 = zext i32 %2973 to i64
  store i64 %2974, i64* %RCX, align 8, !tbaa !2428
  %2975 = icmp ult i32 %2973, %2972
  %2976 = icmp ult i32 %2973, %2968
  %2977 = or i1 %2975, %2976
  %2978 = zext i1 %2977 to i8
  %2979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2978, i8* %2979, align 1, !tbaa !2432
  %2980 = and i32 %2973, 255
  %2981 = call i32 @llvm.ctpop.i32(i32 %2980) #16
  %2982 = trunc i32 %2981 to i8
  %2983 = and i8 %2982, 1
  %2984 = xor i8 %2983, 1
  %2985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2984, i8* %2985, align 1, !tbaa !2446
  %2986 = xor i64 %2969, %2967
  %2987 = trunc i64 %2986 to i32
  %2988 = xor i32 %2987, %2973
  %2989 = lshr i32 %2988, 4
  %2990 = trunc i32 %2989 to i8
  %2991 = and i8 %2990, 1
  %2992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2991, i8* %2992, align 1, !tbaa !2447
  %2993 = icmp eq i32 %2973, 0
  %2994 = zext i1 %2993 to i8
  %2995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2994, i8* %2995, align 1, !tbaa !2448
  %2996 = lshr i32 %2973, 31
  %2997 = trunc i32 %2996 to i8
  %2998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2997, i8* %2998, align 1, !tbaa !2449
  %2999 = lshr i32 %2972, 31
  %3000 = lshr i32 %2968, 31
  %3001 = xor i32 %2996, %2999
  %3002 = xor i32 %2996, %3000
  %3003 = add nuw nsw i32 %3001, %3002
  %3004 = icmp eq i32 %3003, 2
  %3005 = zext i1 %3004 to i8
  %3006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3005, i8* %3006, align 1, !tbaa !2450
  %3007 = load i64, i64* %RCX
  %3008 = load i64, i64* %PC
  %3009 = add i64 %3008, 3
  store i64 %3009, i64* %PC
  %3010 = and i64 %3007, 4294967295
  %3011 = shl i64 %3010, 2
  %3012 = trunc i64 %3011 to i32
  %3013 = icmp slt i32 %3012, 0
  %3014 = shl i32 %3012, 1
  %3015 = zext i32 %3014 to i64
  store i64 %3015, i64* %RCX, align 8, !tbaa !2428
  %3016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3017 = zext i1 %3013 to i8
  store i8 %3017, i8* %3016, align 1, !tbaa !2451
  %3018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3019 = and i32 %3014, 254
  %3020 = call i32 @llvm.ctpop.i32(i32 %3019) #16
  %3021 = trunc i32 %3020 to i8
  %3022 = and i8 %3021, 1
  %3023 = xor i8 %3022, 1
  store i8 %3023, i8* %3018, align 1, !tbaa !2451
  %3024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3024, align 1, !tbaa !2451
  %3025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3026 = icmp eq i32 %3014, 0
  %3027 = zext i1 %3026 to i8
  store i8 %3027, i8* %3025, align 1, !tbaa !2451
  %3028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3029 = lshr i32 %3014, 31
  %3030 = trunc i32 %3029 to i8
  store i8 %3030, i8* %3028, align 1, !tbaa !2451
  %3031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3031, align 1, !tbaa !2451
  %3032 = load i64, i64* %RAX
  %3033 = load i32, i32* %ECX
  %3034 = zext i32 %3033 to i64
  %3035 = load i64, i64* %PC
  %3036 = add i64 %3035, 2
  store i64 %3036, i64* %PC
  %3037 = trunc i64 %3032 to i32
  %3038 = add i32 %3033, %3037
  %3039 = zext i32 %3038 to i64
  store i64 %3039, i64* %RAX, align 8, !tbaa !2428
  %3040 = icmp ult i32 %3038, %3037
  %3041 = icmp ult i32 %3038, %3033
  %3042 = or i1 %3040, %3041
  %3043 = zext i1 %3042 to i8
  %3044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3043, i8* %3044, align 1, !tbaa !2432
  %3045 = and i32 %3038, 255
  %3046 = call i32 @llvm.ctpop.i32(i32 %3045) #16
  %3047 = trunc i32 %3046 to i8
  %3048 = and i8 %3047, 1
  %3049 = xor i8 %3048, 1
  %3050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3049, i8* %3050, align 1, !tbaa !2446
  %3051 = xor i64 %3034, %3032
  %3052 = trunc i64 %3051 to i32
  %3053 = xor i32 %3052, %3038
  %3054 = lshr i32 %3053, 4
  %3055 = trunc i32 %3054 to i8
  %3056 = and i8 %3055, 1
  %3057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3056, i8* %3057, align 1, !tbaa !2447
  %3058 = icmp eq i32 %3038, 0
  %3059 = zext i1 %3058 to i8
  %3060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3059, i8* %3060, align 1, !tbaa !2448
  %3061 = lshr i32 %3038, 31
  %3062 = trunc i32 %3061 to i8
  %3063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3062, i8* %3063, align 1, !tbaa !2449
  %3064 = lshr i32 %3037, 31
  %3065 = lshr i32 %3033, 31
  %3066 = xor i32 %3061, %3064
  %3067 = xor i32 %3061, %3065
  %3068 = add nuw nsw i32 %3066, %3067
  %3069 = icmp eq i32 %3068, 2
  %3070 = zext i1 %3069 to i8
  %3071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3070, i8* %3071, align 1, !tbaa !2450
  %3072 = load i32, i32* %EAX
  %3073 = zext i32 %3072 to i64
  %3074 = load i64, i64* %PC
  %3075 = add i64 %3074, 3
  store i64 %3075, i64* %PC
  %3076 = shl i64 %3073, 32
  %3077 = ashr exact i64 %3076, 32
  store i64 %3077, i64* %RSI, align 8, !tbaa !2428
  %3078 = load i64, i64* %RSI
  %3079 = mul i64 %3078, 4
  %3080 = add i64 %3079, add (i64 ptrtoint (%p_type* @p to i64), i64 10240)
  %3081 = load i64, i64* %PC
  %3082 = add i64 %3081, 11
  store i64 %3082, i64* %PC
  %3083 = inttoptr i64 %3080 to i32*
  store i32 1, i32* %3083
  %3084 = load i64, i64* %RBP
  %3085 = sub i64 %3084, 12
  %3086 = load i64, i64* %PC
  %3087 = add i64 %3086, 3
  store i64 %3087, i64* %PC
  %3088 = inttoptr i64 %3085 to i32*
  %3089 = load i32, i32* %3088
  %3090 = zext i32 %3089 to i64
  store i64 %3090, i64* %RAX, align 8, !tbaa !2428
  %3091 = load i64, i64* %RAX
  %3092 = load i64, i64* %PC
  %3093 = add i64 %3092, 3
  store i64 %3093, i64* %PC
  %3094 = trunc i64 %3091 to i32
  %3095 = add i32 1, %3094
  %3096 = zext i32 %3095 to i64
  store i64 %3096, i64* %RAX, align 8, !tbaa !2428
  %3097 = icmp ult i32 %3095, %3094
  %3098 = icmp ult i32 %3095, 1
  %3099 = or i1 %3097, %3098
  %3100 = zext i1 %3099 to i8
  %3101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3100, i8* %3101, align 1, !tbaa !2432
  %3102 = and i32 %3095, 255
  %3103 = call i32 @llvm.ctpop.i32(i32 %3102) #16
  %3104 = trunc i32 %3103 to i8
  %3105 = and i8 %3104, 1
  %3106 = xor i8 %3105, 1
  %3107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3106, i8* %3107, align 1, !tbaa !2446
  %3108 = xor i64 1, %3091
  %3109 = trunc i64 %3108 to i32
  %3110 = xor i32 %3109, %3095
  %3111 = lshr i32 %3110, 4
  %3112 = trunc i32 %3111 to i8
  %3113 = and i8 %3112, 1
  %3114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3113, i8* %3114, align 1, !tbaa !2447
  %3115 = icmp eq i32 %3095, 0
  %3116 = zext i1 %3115 to i8
  %3117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3116, i8* %3117, align 1, !tbaa !2448
  %3118 = lshr i32 %3095, 31
  %3119 = trunc i32 %3118 to i8
  %3120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3119, i8* %3120, align 1, !tbaa !2449
  %3121 = lshr i32 %3094, 31
  %3122 = xor i32 %3118, %3121
  %3123 = add nuw nsw i32 %3122, %3118
  %3124 = icmp eq i32 %3123, 2
  %3125 = zext i1 %3124 to i8
  %3126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3125, i8* %3126, align 1, !tbaa !2450
  %3127 = load i64, i64* %RBP
  %3128 = sub i64 %3127, 12
  %3129 = load i32, i32* %EAX
  %3130 = zext i32 %3129 to i64
  %3131 = load i64, i64* %PC
  %3132 = add i64 %3131, 3
  store i64 %3132, i64* %PC
  %3133 = inttoptr i64 %3128 to i32*
  store i32 %3129, i32* %3133
  %3134 = load i64, i64* %PC
  %3135 = sub i64 %3134, 52
  %3136 = load i64, i64* %PC
  %3137 = add i64 %3136, 5
  store i64 %3137, i64* %PC
  %3138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3135, i64* %3138, align 8, !tbaa !2428
  br label %block_400cd6

block_400af5:                                     ; preds = %block_400aeb
  %3139 = load i64, i64* %RBP
  %3140 = sub i64 %3139, 12
  %3141 = load i64, i64* %PC
  %3142 = add i64 %3141, 7
  store i64 %3142, i64* %PC
  %3143 = inttoptr i64 %3140 to i32*
  store i32 0, i32* %3143
  br label %block_400afc

block_4008dc:                                     ; preds = %block_4008d2
  %3144 = load i64, i64* %RBP
  %3145 = sub i64 %3144, 4
  %3146 = load i64, i64* %PC
  %3147 = add i64 %3146, 3
  store i64 %3147, i64* %PC
  %3148 = inttoptr i64 %3145 to i32*
  %3149 = load i32, i32* %3148
  %3150 = zext i32 %3149 to i64
  store i64 %3150, i64* %RAX, align 8, !tbaa !2428
  %3151 = load i64, i64* %RBP
  %3152 = sub i64 %3151, 8
  %3153 = load i64, i64* %PC
  %3154 = add i64 %3153, 3
  store i64 %3154, i64* %PC
  %3155 = inttoptr i64 %3152 to i32*
  %3156 = load i32, i32* %3155
  %3157 = zext i32 %3156 to i64
  store i64 %3157, i64* %RCX, align 8, !tbaa !2428
  %3158 = load i64, i64* %RBP
  %3159 = sub i64 %3158, 12
  %3160 = load i64, i64* %PC
  %3161 = add i64 %3160, 3
  store i64 %3161, i64* %PC
  %3162 = inttoptr i64 %3159 to i32*
  %3163 = load i32, i32* %3162
  %3164 = zext i32 %3163 to i64
  store i64 %3164, i64* %RDX, align 8, !tbaa !2428
  %3165 = load i64, i64* %RDX
  %3166 = load i64, i64* %PC
  %3167 = add i64 %3166, 3
  store i64 %3167, i64* %PC
  %3168 = and i64 %3165, 4294967295
  %3169 = shl i64 %3168, 2
  %3170 = trunc i64 %3169 to i32
  %3171 = icmp slt i32 %3170, 0
  %3172 = shl i32 %3170, 1
  %3173 = zext i32 %3172 to i64
  store i64 %3173, i64* %RDX, align 8, !tbaa !2428
  %3174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3175 = zext i1 %3171 to i8
  store i8 %3175, i8* %3174, align 1, !tbaa !2451
  %3176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3177 = and i32 %3172, 254
  %3178 = call i32 @llvm.ctpop.i32(i32 %3177) #16
  %3179 = trunc i32 %3178 to i8
  %3180 = and i8 %3179, 1
  %3181 = xor i8 %3180, 1
  store i8 %3181, i8* %3176, align 1, !tbaa !2451
  %3182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3182, align 1, !tbaa !2451
  %3183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3184 = icmp eq i32 %3172, 0
  %3185 = zext i1 %3184 to i8
  store i8 %3185, i8* %3183, align 1, !tbaa !2451
  %3186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3187 = lshr i32 %3172, 31
  %3188 = trunc i32 %3187 to i8
  store i8 %3188, i8* %3186, align 1, !tbaa !2451
  %3189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3189, align 1, !tbaa !2451
  %3190 = load i64, i64* %RCX
  %3191 = load i32, i32* %EDX
  %3192 = zext i32 %3191 to i64
  %3193 = load i64, i64* %PC
  %3194 = add i64 %3193, 2
  store i64 %3194, i64* %PC
  %3195 = trunc i64 %3190 to i32
  %3196 = add i32 %3191, %3195
  %3197 = zext i32 %3196 to i64
  store i64 %3197, i64* %RCX, align 8, !tbaa !2428
  %3198 = icmp ult i32 %3196, %3195
  %3199 = icmp ult i32 %3196, %3191
  %3200 = or i1 %3198, %3199
  %3201 = zext i1 %3200 to i8
  %3202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3201, i8* %3202, align 1, !tbaa !2432
  %3203 = and i32 %3196, 255
  %3204 = call i32 @llvm.ctpop.i32(i32 %3203) #16
  %3205 = trunc i32 %3204 to i8
  %3206 = and i8 %3205, 1
  %3207 = xor i8 %3206, 1
  %3208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3207, i8* %3208, align 1, !tbaa !2446
  %3209 = xor i64 %3192, %3190
  %3210 = trunc i64 %3209 to i32
  %3211 = xor i32 %3210, %3196
  %3212 = lshr i32 %3211, 4
  %3213 = trunc i32 %3212 to i8
  %3214 = and i8 %3213, 1
  %3215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3214, i8* %3215, align 1, !tbaa !2447
  %3216 = icmp eq i32 %3196, 0
  %3217 = zext i1 %3216 to i8
  %3218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3217, i8* %3218, align 1, !tbaa !2448
  %3219 = lshr i32 %3196, 31
  %3220 = trunc i32 %3219 to i8
  %3221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3220, i8* %3221, align 1, !tbaa !2449
  %3222 = lshr i32 %3195, 31
  %3223 = lshr i32 %3191, 31
  %3224 = xor i32 %3219, %3222
  %3225 = xor i32 %3219, %3223
  %3226 = add nuw nsw i32 %3224, %3225
  %3227 = icmp eq i32 %3226, 2
  %3228 = zext i1 %3227 to i8
  %3229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3228, i8* %3229, align 1, !tbaa !2450
  %3230 = load i64, i64* %RCX
  %3231 = load i64, i64* %PC
  %3232 = add i64 %3231, 3
  store i64 %3232, i64* %PC
  %3233 = and i64 %3230, 4294967295
  %3234 = shl i64 %3233, 2
  %3235 = trunc i64 %3234 to i32
  %3236 = icmp slt i32 %3235, 0
  %3237 = shl i32 %3235, 1
  %3238 = zext i32 %3237 to i64
  store i64 %3238, i64* %RCX, align 8, !tbaa !2428
  %3239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3240 = zext i1 %3236 to i8
  store i8 %3240, i8* %3239, align 1, !tbaa !2451
  %3241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3242 = and i32 %3237, 254
  %3243 = call i32 @llvm.ctpop.i32(i32 %3242) #16
  %3244 = trunc i32 %3243 to i8
  %3245 = and i8 %3244, 1
  %3246 = xor i8 %3245, 1
  store i8 %3246, i8* %3241, align 1, !tbaa !2451
  %3247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3247, align 1, !tbaa !2451
  %3248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3249 = icmp eq i32 %3237, 0
  %3250 = zext i1 %3249 to i8
  store i8 %3250, i8* %3248, align 1, !tbaa !2451
  %3251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3252 = lshr i32 %3237, 31
  %3253 = trunc i32 %3252 to i8
  store i8 %3253, i8* %3251, align 1, !tbaa !2451
  %3254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3254, align 1, !tbaa !2451
  %3255 = load i64, i64* %RAX
  %3256 = load i32, i32* %ECX
  %3257 = zext i32 %3256 to i64
  %3258 = load i64, i64* %PC
  %3259 = add i64 %3258, 2
  store i64 %3259, i64* %PC
  %3260 = trunc i64 %3255 to i32
  %3261 = add i32 %3256, %3260
  %3262 = zext i32 %3261 to i64
  store i64 %3262, i64* %RAX, align 8, !tbaa !2428
  %3263 = icmp ult i32 %3261, %3260
  %3264 = icmp ult i32 %3261, %3256
  %3265 = or i1 %3263, %3264
  %3266 = zext i1 %3265 to i8
  %3267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3266, i8* %3267, align 1, !tbaa !2432
  %3268 = and i32 %3261, 255
  %3269 = call i32 @llvm.ctpop.i32(i32 %3268) #16
  %3270 = trunc i32 %3269 to i8
  %3271 = and i8 %3270, 1
  %3272 = xor i8 %3271, 1
  %3273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3272, i8* %3273, align 1, !tbaa !2446
  %3274 = xor i64 %3257, %3255
  %3275 = trunc i64 %3274 to i32
  %3276 = xor i32 %3275, %3261
  %3277 = lshr i32 %3276, 4
  %3278 = trunc i32 %3277 to i8
  %3279 = and i8 %3278, 1
  %3280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3279, i8* %3280, align 1, !tbaa !2447
  %3281 = icmp eq i32 %3261, 0
  %3282 = zext i1 %3281 to i8
  %3283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3282, i8* %3283, align 1, !tbaa !2448
  %3284 = lshr i32 %3261, 31
  %3285 = trunc i32 %3284 to i8
  %3286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3285, i8* %3286, align 1, !tbaa !2449
  %3287 = lshr i32 %3260, 31
  %3288 = lshr i32 %3256, 31
  %3289 = xor i32 %3284, %3287
  %3290 = xor i32 %3284, %3288
  %3291 = add nuw nsw i32 %3289, %3290
  %3292 = icmp eq i32 %3291, 2
  %3293 = zext i1 %3292 to i8
  %3294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3293, i8* %3294, align 1, !tbaa !2450
  %3295 = load i32, i32* %EAX
  %3296 = zext i32 %3295 to i64
  %3297 = load i64, i64* %PC
  %3298 = add i64 %3297, 3
  store i64 %3298, i64* %PC
  %3299 = shl i64 %3296, 32
  %3300 = ashr exact i64 %3299, 32
  store i64 %3300, i64* %RSI, align 8, !tbaa !2428
  %3301 = load i64, i64* %RSI
  %3302 = mul i64 %3301, 4
  %3303 = add i64 %3302, ptrtoint (%puzzl_type* @puzzl to i64)
  %3304 = load i64, i64* %PC
  %3305 = add i64 %3304, 11
  store i64 %3305, i64* %PC
  %3306 = inttoptr i64 %3303 to i32*
  store i32 0, i32* %3306
  %3307 = load i64, i64* %RBP
  %3308 = sub i64 %3307, 12
  %3309 = load i64, i64* %PC
  %3310 = add i64 %3309, 3
  store i64 %3310, i64* %PC
  %3311 = inttoptr i64 %3308 to i32*
  %3312 = load i32, i32* %3311
  %3313 = zext i32 %3312 to i64
  store i64 %3313, i64* %RAX, align 8, !tbaa !2428
  %3314 = load i64, i64* %RAX
  %3315 = load i64, i64* %PC
  %3316 = add i64 %3315, 3
  store i64 %3316, i64* %PC
  %3317 = trunc i64 %3314 to i32
  %3318 = add i32 1, %3317
  %3319 = zext i32 %3318 to i64
  store i64 %3319, i64* %RAX, align 8, !tbaa !2428
  %3320 = icmp ult i32 %3318, %3317
  %3321 = icmp ult i32 %3318, 1
  %3322 = or i1 %3320, %3321
  %3323 = zext i1 %3322 to i8
  %3324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3323, i8* %3324, align 1, !tbaa !2432
  %3325 = and i32 %3318, 255
  %3326 = call i32 @llvm.ctpop.i32(i32 %3325) #16
  %3327 = trunc i32 %3326 to i8
  %3328 = and i8 %3327, 1
  %3329 = xor i8 %3328, 1
  %3330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3329, i8* %3330, align 1, !tbaa !2446
  %3331 = xor i64 1, %3314
  %3332 = trunc i64 %3331 to i32
  %3333 = xor i32 %3332, %3318
  %3334 = lshr i32 %3333, 4
  %3335 = trunc i32 %3334 to i8
  %3336 = and i8 %3335, 1
  %3337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3336, i8* %3337, align 1, !tbaa !2447
  %3338 = icmp eq i32 %3318, 0
  %3339 = zext i1 %3338 to i8
  %3340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3339, i8* %3340, align 1, !tbaa !2448
  %3341 = lshr i32 %3318, 31
  %3342 = trunc i32 %3341 to i8
  %3343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3342, i8* %3343, align 1, !tbaa !2449
  %3344 = lshr i32 %3317, 31
  %3345 = xor i32 %3341, %3344
  %3346 = add nuw nsw i32 %3345, %3341
  %3347 = icmp eq i32 %3346, 2
  %3348 = zext i1 %3347 to i8
  %3349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3348, i8* %3349, align 1, !tbaa !2450
  %3350 = load i64, i64* %RBP
  %3351 = sub i64 %3350, 12
  %3352 = load i32, i32* %EAX
  %3353 = zext i32 %3352 to i64
  %3354 = load i64, i64* %PC
  %3355 = add i64 %3354, 3
  store i64 %3355, i64* %PC
  %3356 = inttoptr i64 %3351 to i32*
  store i32 %3352, i32* %3356
  %3357 = load i64, i64* %PC
  %3358 = sub i64 %3357, 52
  %3359 = load i64, i64* %PC
  %3360 = add i64 %3359, 5
  store i64 %3360, i64* %PC
  %3361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3358, i64* %3361, align 8, !tbaa !2428
  br label %block_4008d2

block_400d5c:                                     ; preds = %block_400d52
  %3362 = load i64, i64* %RBP
  %3363 = sub i64 %3362, 8
  %3364 = load i64, i64* %PC
  %3365 = add i64 %3364, 7
  store i64 %3365, i64* %PC
  %3366 = inttoptr i64 %3363 to i32*
  store i32 0, i32* %3366
  br label %block_400d63

block_400ccf:                                     ; preds = %block_400cc5
  %3367 = load i64, i64* %RBP
  %3368 = sub i64 %3367, 12
  %3369 = load i64, i64* %PC
  %3370 = add i64 %3369, 7
  store i64 %3370, i64* %PC
  %3371 = inttoptr i64 %3368 to i32*
  store i32 0, i32* %3371
  br label %block_400cd6

block_4009f9:                                     ; preds = %block_4009c0
  %3372 = load i64, i64* %PC
  %3373 = add i64 %3372, 5
  %3374 = load i64, i64* %PC
  %3375 = add i64 %3374, 5
  store i64 %3375, i64* %PC
  %3376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3373, i64* %3376, align 8, !tbaa !2428
  %3377 = load i64, i64* %RBP
  %3378 = sub i64 %3377, 8
  %3379 = load i64, i64* %PC
  %3380 = add i64 %3379, 3
  store i64 %3380, i64* %PC
  %3381 = inttoptr i64 %3378 to i32*
  %3382 = load i32, i32* %3381
  %3383 = zext i32 %3382 to i64
  store i64 %3383, i64* %RAX, align 8, !tbaa !2428
  %3384 = load i64, i64* %RAX
  %3385 = load i64, i64* %PC
  %3386 = add i64 %3385, 3
  store i64 %3386, i64* %PC
  %3387 = trunc i64 %3384 to i32
  %3388 = add i32 1, %3387
  %3389 = zext i32 %3388 to i64
  store i64 %3389, i64* %RAX, align 8, !tbaa !2428
  %3390 = icmp ult i32 %3388, %3387
  %3391 = icmp ult i32 %3388, 1
  %3392 = or i1 %3390, %3391
  %3393 = zext i1 %3392 to i8
  %3394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3393, i8* %3394, align 1, !tbaa !2432
  %3395 = and i32 %3388, 255
  %3396 = call i32 @llvm.ctpop.i32(i32 %3395) #16
  %3397 = trunc i32 %3396 to i8
  %3398 = and i8 %3397, 1
  %3399 = xor i8 %3398, 1
  %3400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3399, i8* %3400, align 1, !tbaa !2446
  %3401 = xor i64 1, %3384
  %3402 = trunc i64 %3401 to i32
  %3403 = xor i32 %3402, %3388
  %3404 = lshr i32 %3403, 4
  %3405 = trunc i32 %3404 to i8
  %3406 = and i8 %3405, 1
  %3407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3406, i8* %3407, align 1, !tbaa !2447
  %3408 = icmp eq i32 %3388, 0
  %3409 = zext i1 %3408 to i8
  %3410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3409, i8* %3410, align 1, !tbaa !2448
  %3411 = lshr i32 %3388, 31
  %3412 = trunc i32 %3411 to i8
  %3413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3412, i8* %3413, align 1, !tbaa !2449
  %3414 = lshr i32 %3387, 31
  %3415 = xor i32 %3411, %3414
  %3416 = add nuw nsw i32 %3415, %3411
  %3417 = icmp eq i32 %3416, 2
  %3418 = zext i1 %3417 to i8
  %3419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3418, i8* %3419, align 1, !tbaa !2450
  %3420 = load i64, i64* %RBP
  %3421 = sub i64 %3420, 8
  %3422 = load i32, i32* %EAX
  %3423 = zext i32 %3422 to i64
  %3424 = load i64, i64* %PC
  %3425 = add i64 %3424, 3
  store i64 %3425, i64* %PC
  %3426 = inttoptr i64 %3421 to i32*
  store i32 %3422, i32* %3426
  %3427 = load i64, i64* %PC
  %3428 = sub i64 %3427, 88
  %3429 = load i64, i64* %PC
  %3430 = add i64 %3429, 5
  store i64 %3430, i64* %PC
  %3431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3428, i64* %3431, align 8, !tbaa !2428
  br label %block_4009af

block_400cc5:                                     ; preds = %block_400cbe, %block_400d0f
  %MEMORY.14 = phi %struct.Memory* [ %MEMORY.17, %block_400cbe ], [ %MEMORY.15, %block_400d0f ]
  %3432 = load i64, i64* %RBP
  %3433 = sub i64 %3432, 8
  %3434 = load i64, i64* %PC
  %3435 = add i64 %3434, 4
  store i64 %3435, i64* %PC
  %3436 = inttoptr i64 %3433 to i32*
  %3437 = load i32, i32* %3436
  %3438 = sub i32 %3437, 1
  %3439 = icmp ult i32 %3437, 1
  %3440 = zext i1 %3439 to i8
  %3441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3440, i8* %3441, align 1, !tbaa !2432
  %3442 = and i32 %3438, 255
  %3443 = call i32 @llvm.ctpop.i32(i32 %3442) #16
  %3444 = trunc i32 %3443 to i8
  %3445 = and i8 %3444, 1
  %3446 = xor i8 %3445, 1
  %3447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3446, i8* %3447, align 1, !tbaa !2446
  %3448 = xor i32 %3437, 1
  %3449 = xor i32 %3448, %3438
  %3450 = lshr i32 %3449, 4
  %3451 = trunc i32 %3450 to i8
  %3452 = and i8 %3451, 1
  %3453 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3452, i8* %3453, align 1, !tbaa !2447
  %3454 = icmp eq i32 %3438, 0
  %3455 = zext i1 %3454 to i8
  %3456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3455, i8* %3456, align 1, !tbaa !2448
  %3457 = lshr i32 %3438, 31
  %3458 = trunc i32 %3457 to i8
  %3459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3458, i8* %3459, align 1, !tbaa !2449
  %3460 = lshr i32 %3437, 31
  %3461 = xor i32 %3457, %3460
  %3462 = add nuw nsw i32 %3461, %3460
  %3463 = icmp eq i32 %3462, 2
  %3464 = zext i1 %3463 to i8
  %3465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3464, i8* %3465, align 1, !tbaa !2450
  %3466 = load i64, i64* %PC
  %3467 = add i64 %3466, 89
  %3468 = load i64, i64* %PC
  %3469 = add i64 %3468, 6
  %3470 = load i64, i64* %PC
  %3471 = add i64 %3470, 6
  store i64 %3471, i64* %PC
  %3472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3473 = load i8, i8* %3472, align 1, !tbaa !2448
  %3474 = icmp eq i8 %3473, 0
  %3475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3476 = load i8, i8* %3475, align 1, !tbaa !2449
  %3477 = icmp ne i8 %3476, 0
  %3478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3479 = load i8, i8* %3478, align 1, !tbaa !2450
  %3480 = icmp ne i8 %3479, 0
  %3481 = xor i1 %3477, %3480
  %3482 = xor i1 %3481, true
  %3483 = and i1 %3474, %3482
  %3484 = zext i1 %3483 to i8
  store i8 %3484, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3486 = select i1 %3483, i64 %3467, i64 %3469
  store i64 %3486, i64* %3485, align 8, !tbaa !2428
  %3487 = load i8, i8* %BRANCH_TAKEN
  %3488 = icmp eq i8 %3487, 1
  br i1 %3488, label %block_400d22, label %block_400ccf

block_4010c3:                                     ; preds = %block_40108a
  %3489 = load i64, i64* %PC
  %3490 = add i64 %3489, 5
  %3491 = load i64, i64* %PC
  %3492 = add i64 %3491, 5
  store i64 %3492, i64* %PC
  %3493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3490, i64* %3493, align 8, !tbaa !2428
  %3494 = load i64, i64* %RBP
  %3495 = sub i64 %3494, 8
  %3496 = load i64, i64* %PC
  %3497 = add i64 %3496, 3
  store i64 %3497, i64* %PC
  %3498 = inttoptr i64 %3495 to i32*
  %3499 = load i32, i32* %3498
  %3500 = zext i32 %3499 to i64
  store i64 %3500, i64* %RAX, align 8, !tbaa !2428
  %3501 = load i64, i64* %RAX
  %3502 = load i64, i64* %PC
  %3503 = add i64 %3502, 3
  store i64 %3503, i64* %PC
  %3504 = trunc i64 %3501 to i32
  %3505 = add i32 1, %3504
  %3506 = zext i32 %3505 to i64
  store i64 %3506, i64* %RAX, align 8, !tbaa !2428
  %3507 = icmp ult i32 %3505, %3504
  %3508 = icmp ult i32 %3505, 1
  %3509 = or i1 %3507, %3508
  %3510 = zext i1 %3509 to i8
  %3511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3510, i8* %3511, align 1, !tbaa !2432
  %3512 = and i32 %3505, 255
  %3513 = call i32 @llvm.ctpop.i32(i32 %3512) #16
  %3514 = trunc i32 %3513 to i8
  %3515 = and i8 %3514, 1
  %3516 = xor i8 %3515, 1
  %3517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3516, i8* %3517, align 1, !tbaa !2446
  %3518 = xor i64 1, %3501
  %3519 = trunc i64 %3518 to i32
  %3520 = xor i32 %3519, %3505
  %3521 = lshr i32 %3520, 4
  %3522 = trunc i32 %3521 to i8
  %3523 = and i8 %3522, 1
  %3524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3523, i8* %3524, align 1, !tbaa !2447
  %3525 = icmp eq i32 %3505, 0
  %3526 = zext i1 %3525 to i8
  %3527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3526, i8* %3527, align 1, !tbaa !2448
  %3528 = lshr i32 %3505, 31
  %3529 = trunc i32 %3528 to i8
  %3530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3529, i8* %3530, align 1, !tbaa !2449
  %3531 = lshr i32 %3504, 31
  %3532 = xor i32 %3528, %3531
  %3533 = add nuw nsw i32 %3532, %3528
  %3534 = icmp eq i32 %3533, 2
  %3535 = zext i1 %3534 to i8
  %3536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3535, i8* %3536, align 1, !tbaa !2450
  %3537 = load i64, i64* %RBP
  %3538 = sub i64 %3537, 8
  %3539 = load i32, i32* %EAX
  %3540 = zext i32 %3539 to i64
  %3541 = load i64, i64* %PC
  %3542 = add i64 %3541, 3
  store i64 %3542, i64* %PC
  %3543 = inttoptr i64 %3538 to i32*
  store i32 %3539, i32* %3543
  %3544 = load i64, i64* %PC
  %3545 = sub i64 %3544, 88
  %3546 = load i64, i64* %PC
  %3547 = add i64 %3546, 5
  store i64 %3547, i64* %PC
  %3548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3545, i64* %3548, align 8, !tbaa !2428
  br label %block_401079

block_400cd6:                                     ; preds = %block_400ccf, %block_400ce0
  %MEMORY.15 = phi %struct.Memory* [ %MEMORY.14, %block_400ccf ], [ %MEMORY.15, %block_400ce0 ]
  %3549 = load i64, i64* %RBP
  %3550 = sub i64 %3549, 12
  %3551 = load i64, i64* %PC
  %3552 = add i64 %3551, 4
  store i64 %3552, i64* %PC
  %3553 = inttoptr i64 %3550 to i32*
  %3554 = load i32, i32* %3553
  %3555 = sub i32 %3554, 3
  %3556 = icmp ult i32 %3554, 3
  %3557 = zext i1 %3556 to i8
  %3558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3557, i8* %3558, align 1, !tbaa !2432
  %3559 = and i32 %3555, 255
  %3560 = call i32 @llvm.ctpop.i32(i32 %3559) #16
  %3561 = trunc i32 %3560 to i8
  %3562 = and i8 %3561, 1
  %3563 = xor i8 %3562, 1
  %3564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3563, i8* %3564, align 1, !tbaa !2446
  %3565 = xor i32 %3554, 3
  %3566 = xor i32 %3565, %3555
  %3567 = lshr i32 %3566, 4
  %3568 = trunc i32 %3567 to i8
  %3569 = and i8 %3568, 1
  %3570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3569, i8* %3570, align 1, !tbaa !2447
  %3571 = icmp eq i32 %3555, 0
  %3572 = zext i1 %3571 to i8
  %3573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3572, i8* %3573, align 1, !tbaa !2448
  %3574 = lshr i32 %3555, 31
  %3575 = trunc i32 %3574 to i8
  %3576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3575, i8* %3576, align 1, !tbaa !2449
  %3577 = lshr i32 %3554, 31
  %3578 = xor i32 %3574, %3577
  %3579 = add nuw nsw i32 %3578, %3577
  %3580 = icmp eq i32 %3579, 2
  %3581 = zext i1 %3580 to i8
  %3582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3581, i8* %3582, align 1, !tbaa !2450
  %3583 = load i64, i64* %PC
  %3584 = add i64 %3583, 53
  %3585 = load i64, i64* %PC
  %3586 = add i64 %3585, 6
  %3587 = load i64, i64* %PC
  %3588 = add i64 %3587, 6
  store i64 %3588, i64* %PC
  %3589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3590 = load i8, i8* %3589, align 1, !tbaa !2448
  %3591 = icmp eq i8 %3590, 0
  %3592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3593 = load i8, i8* %3592, align 1, !tbaa !2449
  %3594 = icmp ne i8 %3593, 0
  %3595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3596 = load i8, i8* %3595, align 1, !tbaa !2450
  %3597 = icmp ne i8 %3596, 0
  %3598 = xor i1 %3594, %3597
  %3599 = xor i1 %3598, true
  %3600 = and i1 %3591, %3599
  %3601 = zext i1 %3600 to i8
  store i8 %3601, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3603 = select i1 %3600, i64 %3584, i64 %3586
  store i64 %3603, i64* %3602, align 8, !tbaa !2428
  %3604 = load i8, i8* %BRANCH_TAKEN
  %3605 = icmp eq i8 %3604, 1
  br i1 %3605, label %block_400d0f, label %block_400ce0

block_400abd:                                     ; preds = %block_400a3c
  %3606 = load i64, i64* %PC
  %3607 = add i64 %3606, 11
  store i64 %3607, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 4) to i32*)
  %3608 = load i64, i64* %PC
  %3609 = add i64 %3608, 11
  store i64 %3609, i64* %PC
  store i32 193, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 4) to i32*)
  %3610 = load i64, i64* %RBP
  %3611 = sub i64 %3610, 4
  %3612 = load i64, i64* %PC
  %3613 = add i64 %3612, 7
  store i64 %3613, i64* %PC
  %3614 = inttoptr i64 %3611 to i32*
  store i32 0, i32* %3614
  br label %block_400ada

block_400eba:                                     ; preds = %block_400eb0
  %3615 = load i64, i64* %RBP
  %3616 = sub i64 %3615, 4
  %3617 = load i64, i64* %PC
  %3618 = add i64 %3617, 3
  store i64 %3618, i64* %PC
  %3619 = inttoptr i64 %3616 to i32*
  %3620 = load i32, i32* %3619
  %3621 = zext i32 %3620 to i64
  store i64 %3621, i64* %RAX, align 8, !tbaa !2428
  %3622 = load i64, i64* %RBP
  %3623 = sub i64 %3622, 8
  %3624 = load i64, i64* %PC
  %3625 = add i64 %3624, 3
  store i64 %3625, i64* %PC
  %3626 = inttoptr i64 %3623 to i32*
  %3627 = load i32, i32* %3626
  %3628 = zext i32 %3627 to i64
  store i64 %3628, i64* %RCX, align 8, !tbaa !2428
  %3629 = load i64, i64* %RBP
  %3630 = sub i64 %3629, 12
  %3631 = load i64, i64* %PC
  %3632 = add i64 %3631, 3
  store i64 %3632, i64* %PC
  %3633 = inttoptr i64 %3630 to i32*
  %3634 = load i32, i32* %3633
  %3635 = zext i32 %3634 to i64
  store i64 %3635, i64* %RDX, align 8, !tbaa !2428
  %3636 = load i64, i64* %RDX
  %3637 = load i64, i64* %PC
  %3638 = add i64 %3637, 3
  store i64 %3638, i64* %PC
  %3639 = and i64 %3636, 4294967295
  %3640 = shl i64 %3639, 2
  %3641 = trunc i64 %3640 to i32
  %3642 = icmp slt i32 %3641, 0
  %3643 = shl i32 %3641, 1
  %3644 = zext i32 %3643 to i64
  store i64 %3644, i64* %RDX, align 8, !tbaa !2428
  %3645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3646 = zext i1 %3642 to i8
  store i8 %3646, i8* %3645, align 1, !tbaa !2451
  %3647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3648 = and i32 %3643, 254
  %3649 = call i32 @llvm.ctpop.i32(i32 %3648) #16
  %3650 = trunc i32 %3649 to i8
  %3651 = and i8 %3650, 1
  %3652 = xor i8 %3651, 1
  store i8 %3652, i8* %3647, align 1, !tbaa !2451
  %3653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3653, align 1, !tbaa !2451
  %3654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3655 = icmp eq i32 %3643, 0
  %3656 = zext i1 %3655 to i8
  store i8 %3656, i8* %3654, align 1, !tbaa !2451
  %3657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3658 = lshr i32 %3643, 31
  %3659 = trunc i32 %3658 to i8
  store i8 %3659, i8* %3657, align 1, !tbaa !2451
  %3660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3660, align 1, !tbaa !2451
  %3661 = load i64, i64* %RCX
  %3662 = load i32, i32* %EDX
  %3663 = zext i32 %3662 to i64
  %3664 = load i64, i64* %PC
  %3665 = add i64 %3664, 2
  store i64 %3665, i64* %PC
  %3666 = trunc i64 %3661 to i32
  %3667 = add i32 %3662, %3666
  %3668 = zext i32 %3667 to i64
  store i64 %3668, i64* %RCX, align 8, !tbaa !2428
  %3669 = icmp ult i32 %3667, %3666
  %3670 = icmp ult i32 %3667, %3662
  %3671 = or i1 %3669, %3670
  %3672 = zext i1 %3671 to i8
  %3673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3672, i8* %3673, align 1, !tbaa !2432
  %3674 = and i32 %3667, 255
  %3675 = call i32 @llvm.ctpop.i32(i32 %3674) #16
  %3676 = trunc i32 %3675 to i8
  %3677 = and i8 %3676, 1
  %3678 = xor i8 %3677, 1
  %3679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3678, i8* %3679, align 1, !tbaa !2446
  %3680 = xor i64 %3663, %3661
  %3681 = trunc i64 %3680 to i32
  %3682 = xor i32 %3681, %3667
  %3683 = lshr i32 %3682, 4
  %3684 = trunc i32 %3683 to i8
  %3685 = and i8 %3684, 1
  %3686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3685, i8* %3686, align 1, !tbaa !2447
  %3687 = icmp eq i32 %3667, 0
  %3688 = zext i1 %3687 to i8
  %3689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3688, i8* %3689, align 1, !tbaa !2448
  %3690 = lshr i32 %3667, 31
  %3691 = trunc i32 %3690 to i8
  %3692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3691, i8* %3692, align 1, !tbaa !2449
  %3693 = lshr i32 %3666, 31
  %3694 = lshr i32 %3662, 31
  %3695 = xor i32 %3690, %3693
  %3696 = xor i32 %3690, %3694
  %3697 = add nuw nsw i32 %3695, %3696
  %3698 = icmp eq i32 %3697, 2
  %3699 = zext i1 %3698 to i8
  %3700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3699, i8* %3700, align 1, !tbaa !2450
  %3701 = load i64, i64* %RCX
  %3702 = load i64, i64* %PC
  %3703 = add i64 %3702, 3
  store i64 %3703, i64* %PC
  %3704 = and i64 %3701, 4294967295
  %3705 = shl i64 %3704, 2
  %3706 = trunc i64 %3705 to i32
  %3707 = icmp slt i32 %3706, 0
  %3708 = shl i32 %3706, 1
  %3709 = zext i32 %3708 to i64
  store i64 %3709, i64* %RCX, align 8, !tbaa !2428
  %3710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3711 = zext i1 %3707 to i8
  store i8 %3711, i8* %3710, align 1, !tbaa !2451
  %3712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3713 = and i32 %3708, 254
  %3714 = call i32 @llvm.ctpop.i32(i32 %3713) #16
  %3715 = trunc i32 %3714 to i8
  %3716 = and i8 %3715, 1
  %3717 = xor i8 %3716, 1
  store i8 %3717, i8* %3712, align 1, !tbaa !2451
  %3718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3718, align 1, !tbaa !2451
  %3719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3720 = icmp eq i32 %3708, 0
  %3721 = zext i1 %3720 to i8
  store i8 %3721, i8* %3719, align 1, !tbaa !2451
  %3722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3723 = lshr i32 %3708, 31
  %3724 = trunc i32 %3723 to i8
  store i8 %3724, i8* %3722, align 1, !tbaa !2451
  %3725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3725, align 1, !tbaa !2451
  %3726 = load i64, i64* %RAX
  %3727 = load i32, i32* %ECX
  %3728 = zext i32 %3727 to i64
  %3729 = load i64, i64* %PC
  %3730 = add i64 %3729, 2
  store i64 %3730, i64* %PC
  %3731 = trunc i64 %3726 to i32
  %3732 = add i32 %3727, %3731
  %3733 = zext i32 %3732 to i64
  store i64 %3733, i64* %RAX, align 8, !tbaa !2428
  %3734 = icmp ult i32 %3732, %3731
  %3735 = icmp ult i32 %3732, %3727
  %3736 = or i1 %3734, %3735
  %3737 = zext i1 %3736 to i8
  %3738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3737, i8* %3738, align 1, !tbaa !2432
  %3739 = and i32 %3732, 255
  %3740 = call i32 @llvm.ctpop.i32(i32 %3739) #16
  %3741 = trunc i32 %3740 to i8
  %3742 = and i8 %3741, 1
  %3743 = xor i8 %3742, 1
  %3744 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3743, i8* %3744, align 1, !tbaa !2446
  %3745 = xor i64 %3728, %3726
  %3746 = trunc i64 %3745 to i32
  %3747 = xor i32 %3746, %3732
  %3748 = lshr i32 %3747, 4
  %3749 = trunc i32 %3748 to i8
  %3750 = and i8 %3749, 1
  %3751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3750, i8* %3751, align 1, !tbaa !2447
  %3752 = icmp eq i32 %3732, 0
  %3753 = zext i1 %3752 to i8
  %3754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3753, i8* %3754, align 1, !tbaa !2448
  %3755 = lshr i32 %3732, 31
  %3756 = trunc i32 %3755 to i8
  %3757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3756, i8* %3757, align 1, !tbaa !2449
  %3758 = lshr i32 %3731, 31
  %3759 = lshr i32 %3727, 31
  %3760 = xor i32 %3755, %3758
  %3761 = xor i32 %3755, %3759
  %3762 = add nuw nsw i32 %3760, %3761
  %3763 = icmp eq i32 %3762, 2
  %3764 = zext i1 %3763 to i8
  %3765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3764, i8* %3765, align 1, !tbaa !2450
  %3766 = load i32, i32* %EAX
  %3767 = zext i32 %3766 to i64
  %3768 = load i64, i64* %PC
  %3769 = add i64 %3768, 3
  store i64 %3769, i64* %PC
  %3770 = shl i64 %3767, 32
  %3771 = ashr exact i64 %3770, 32
  store i64 %3771, i64* %RSI, align 8, !tbaa !2428
  %3772 = load i64, i64* %RSI
  %3773 = mul i64 %3772, 4
  %3774 = add i64 %3773, add (i64 ptrtoint (%p_type* @p to i64), i64 16384)
  %3775 = load i64, i64* %PC
  %3776 = add i64 %3775, 11
  store i64 %3776, i64* %PC
  %3777 = inttoptr i64 %3774 to i32*
  store i32 1, i32* %3777
  %3778 = load i64, i64* %RBP
  %3779 = sub i64 %3778, 12
  %3780 = load i64, i64* %PC
  %3781 = add i64 %3780, 3
  store i64 %3781, i64* %PC
  %3782 = inttoptr i64 %3779 to i32*
  %3783 = load i32, i32* %3782
  %3784 = zext i32 %3783 to i64
  store i64 %3784, i64* %RAX, align 8, !tbaa !2428
  %3785 = load i64, i64* %RAX
  %3786 = load i64, i64* %PC
  %3787 = add i64 %3786, 3
  store i64 %3787, i64* %PC
  %3788 = trunc i64 %3785 to i32
  %3789 = add i32 1, %3788
  %3790 = zext i32 %3789 to i64
  store i64 %3790, i64* %RAX, align 8, !tbaa !2428
  %3791 = icmp ult i32 %3789, %3788
  %3792 = icmp ult i32 %3789, 1
  %3793 = or i1 %3791, %3792
  %3794 = zext i1 %3793 to i8
  %3795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3794, i8* %3795, align 1, !tbaa !2432
  %3796 = and i32 %3789, 255
  %3797 = call i32 @llvm.ctpop.i32(i32 %3796) #16
  %3798 = trunc i32 %3797 to i8
  %3799 = and i8 %3798, 1
  %3800 = xor i8 %3799, 1
  %3801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3800, i8* %3801, align 1, !tbaa !2446
  %3802 = xor i64 1, %3785
  %3803 = trunc i64 %3802 to i32
  %3804 = xor i32 %3803, %3789
  %3805 = lshr i32 %3804, 4
  %3806 = trunc i32 %3805 to i8
  %3807 = and i8 %3806, 1
  %3808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3807, i8* %3808, align 1, !tbaa !2447
  %3809 = icmp eq i32 %3789, 0
  %3810 = zext i1 %3809 to i8
  %3811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3810, i8* %3811, align 1, !tbaa !2448
  %3812 = lshr i32 %3789, 31
  %3813 = trunc i32 %3812 to i8
  %3814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3813, i8* %3814, align 1, !tbaa !2449
  %3815 = lshr i32 %3788, 31
  %3816 = xor i32 %3812, %3815
  %3817 = add nuw nsw i32 %3816, %3812
  %3818 = icmp eq i32 %3817, 2
  %3819 = zext i1 %3818 to i8
  %3820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3819, i8* %3820, align 1, !tbaa !2450
  %3821 = load i64, i64* %RBP
  %3822 = sub i64 %3821, 12
  %3823 = load i32, i32* %EAX
  %3824 = zext i32 %3823 to i64
  %3825 = load i64, i64* %PC
  %3826 = add i64 %3825, 3
  store i64 %3826, i64* %PC
  %3827 = inttoptr i64 %3822 to i32*
  store i32 %3823, i32* %3827
  %3828 = load i64, i64* %PC
  %3829 = sub i64 %3828, 52
  %3830 = load i64, i64* %PC
  %3831 = add i64 %3830, 5
  store i64 %3831, i64* %PC
  %3832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3829, i64* %3832, align 8, !tbaa !2428
  br label %block_400eb0

block_400b5b:                                     ; preds = %block_400ada
  %3833 = load i64, i64* %PC
  %3834 = add i64 %3833, 11
  store i64 %3834, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 8) to i32*)
  %3835 = load i64, i64* %PC
  %3836 = add i64 %3835, 11
  store i64 %3836, i64* %PC
  store i32 88, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 8) to i32*)
  %3837 = load i64, i64* %RBP
  %3838 = sub i64 %3837, 4
  %3839 = load i64, i64* %PC
  %3840 = add i64 %3839, 7
  store i64 %3840, i64* %PC
  %3841 = inttoptr i64 %3838 to i32*
  store i32 0, i32* %3841
  br label %block_400b78

block_400942:                                     ; preds = %block_400938
  %3842 = sub i64 %1731, 16
  %3843 = load i64, i64* %PC
  %3844 = add i64 %3843, 7
  store i64 %3844, i64* %PC
  %3845 = inttoptr i64 %3842 to i32*
  store i32 0, i32* %3845
  br label %block_400949

block_400d74:                                     ; preds = %block_400d6d, %block_400d7e
  %MEMORY.16 = phi %struct.Memory* [ %MEMORY.22, %block_400d6d ], [ %MEMORY.16, %block_400d7e ]
  %3846 = load i64, i64* %RBP
  %3847 = sub i64 %3846, 12
  %3848 = load i64, i64* %PC
  %3849 = add i64 %3848, 4
  store i64 %3849, i64* %PC
  %3850 = inttoptr i64 %3847 to i32*
  %3851 = load i32, i32* %3850
  %3852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3852, align 1, !tbaa !2432
  %3853 = and i32 %3851, 255
  %3854 = call i32 @llvm.ctpop.i32(i32 %3853) #16
  %3855 = trunc i32 %3854 to i8
  %3856 = and i8 %3855, 1
  %3857 = xor i8 %3856, 1
  %3858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3857, i8* %3858, align 1, !tbaa !2446
  %3859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3859, align 1, !tbaa !2447
  %3860 = icmp eq i32 %3851, 0
  %3861 = zext i1 %3860 to i8
  %3862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3861, i8* %3862, align 1, !tbaa !2448
  %3863 = lshr i32 %3851, 31
  %3864 = trunc i32 %3863 to i8
  %3865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3864, i8* %3865, align 1, !tbaa !2449
  %3866 = lshr i32 %3851, 31
  %3867 = xor i32 %3863, %3866
  %3868 = add nuw nsw i32 %3867, %3866
  %3869 = icmp eq i32 %3868, 2
  %3870 = zext i1 %3869 to i8
  %3871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3870, i8* %3871, align 1, !tbaa !2450
  %3872 = load i64, i64* %PC
  %3873 = add i64 %3872, 53
  %3874 = load i64, i64* %PC
  %3875 = add i64 %3874, 6
  %3876 = load i64, i64* %PC
  %3877 = add i64 %3876, 6
  store i64 %3877, i64* %PC
  %3878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3879 = load i8, i8* %3878, align 1, !tbaa !2448
  %3880 = icmp eq i8 %3879, 0
  %3881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3882 = load i8, i8* %3881, align 1, !tbaa !2449
  %3883 = icmp ne i8 %3882, 0
  %3884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3885 = load i8, i8* %3884, align 1, !tbaa !2450
  %3886 = icmp ne i8 %3885, 0
  %3887 = xor i1 %3883, %3886
  %3888 = xor i1 %3887, true
  %3889 = and i1 %3880, %3888
  %3890 = zext i1 %3889 to i8
  store i8 %3890, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3892 = select i1 %3889, i64 %3873, i64 %3875
  store i64 %3892, i64* %3891, align 8, !tbaa !2428
  %3893 = load i8, i8* %BRANCH_TAKEN
  %3894 = icmp eq i8 %3893, 1
  br i1 %3894, label %block_400dad, label %block_400d7e

block_400a57:                                     ; preds = %block_400a4d
  %3895 = load i64, i64* %RBP
  %3896 = sub i64 %3895, 12
  %3897 = load i64, i64* %PC
  %3898 = add i64 %3897, 7
  store i64 %3898, i64* %PC
  %3899 = inttoptr i64 %3896 to i32*
  store i32 0, i32* %3899
  br label %block_400a5e

block_400cb4:                                     ; preds = %block_400c97, %block_400d22
  %MEMORY.17 = phi %struct.Memory* [ %MEMORY.43, %block_400c97 ], [ %MEMORY.14, %block_400d22 ]
  %3900 = load i64, i64* %RBP
  %3901 = sub i64 %3900, 4
  %3902 = load i64, i64* %PC
  %3903 = add i64 %3902, 4
  store i64 %3903, i64* %PC
  %3904 = inttoptr i64 %3901 to i32*
  %3905 = load i32, i32* %3904
  %3906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3906, align 1, !tbaa !2432
  %3907 = and i32 %3905, 255
  %3908 = call i32 @llvm.ctpop.i32(i32 %3907) #16
  %3909 = trunc i32 %3908 to i8
  %3910 = and i8 %3909, 1
  %3911 = xor i8 %3910, 1
  %3912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3911, i8* %3912, align 1, !tbaa !2446
  %3913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3913, align 1, !tbaa !2447
  %3914 = icmp eq i32 %3905, 0
  %3915 = zext i1 %3914 to i8
  %3916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3915, i8* %3916, align 1, !tbaa !2448
  %3917 = lshr i32 %3905, 31
  %3918 = trunc i32 %3917 to i8
  %3919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3918, i8* %3919, align 1, !tbaa !2449
  %3920 = lshr i32 %3905, 31
  %3921 = xor i32 %3917, %3920
  %3922 = add nuw nsw i32 %3921, %3920
  %3923 = icmp eq i32 %3922, 2
  %3924 = zext i1 %3923 to i8
  %3925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3924, i8* %3925, align 1, !tbaa !2450
  %3926 = load i64, i64* %PC
  %3927 = add i64 %3926, 125
  %3928 = load i64, i64* %PC
  %3929 = add i64 %3928, 6
  %3930 = load i64, i64* %PC
  %3931 = add i64 %3930, 6
  store i64 %3931, i64* %PC
  %3932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3933 = load i8, i8* %3932, align 1, !tbaa !2448
  %3934 = icmp eq i8 %3933, 0
  %3935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3936 = load i8, i8* %3935, align 1, !tbaa !2449
  %3937 = icmp ne i8 %3936, 0
  %3938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3939 = load i8, i8* %3938, align 1, !tbaa !2450
  %3940 = icmp ne i8 %3939, 0
  %3941 = xor i1 %3937, %3940
  %3942 = xor i1 %3941, true
  %3943 = and i1 %3934, %3942
  %3944 = zext i1 %3943 to i8
  store i8 %3944, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3946 = select i1 %3943, i64 %3927, i64 %3929
  store i64 %3946, i64* %3945, align 8, !tbaa !2428
  %3947 = load i8, i8* %BRANCH_TAKEN
  %3948 = icmp eq i8 %3947, 1
  br i1 %3948, label %block_400d35, label %block_400cbe

block_4008b0:                                     ; preds = %block_4008a9, %block_40091e
  %MEMORY.18 = phi %struct.Memory* [ %MEMORY.28, %block_4008a9 ], [ %MEMORY.30, %block_40091e ]
  %3949 = load i64, i64* %RBP
  %3950 = sub i64 %3949, 4
  %3951 = load i64, i64* %PC
  %3952 = add i64 %3951, 4
  store i64 %3952, i64* %PC
  %3953 = inttoptr i64 %3950 to i32*
  %3954 = load i32, i32* %3953
  %3955 = sub i32 %3954, 5
  %3956 = icmp ult i32 %3954, 5
  %3957 = zext i1 %3956 to i8
  %3958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3957, i8* %3958, align 1, !tbaa !2432
  %3959 = and i32 %3955, 255
  %3960 = call i32 @llvm.ctpop.i32(i32 %3959) #16
  %3961 = trunc i32 %3960 to i8
  %3962 = and i8 %3961, 1
  %3963 = xor i8 %3962, 1
  %3964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3963, i8* %3964, align 1, !tbaa !2446
  %3965 = xor i32 %3954, 5
  %3966 = xor i32 %3965, %3955
  %3967 = lshr i32 %3966, 4
  %3968 = trunc i32 %3967 to i8
  %3969 = and i8 %3968, 1
  %3970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3969, i8* %3970, align 1, !tbaa !2447
  %3971 = icmp eq i32 %3955, 0
  %3972 = zext i1 %3971 to i8
  %3973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3972, i8* %3973, align 1, !tbaa !2448
  %3974 = lshr i32 %3955, 31
  %3975 = trunc i32 %3974 to i8
  %3976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3975, i8* %3976, align 1, !tbaa !2449
  %3977 = lshr i32 %3954, 31
  %3978 = xor i32 %3974, %3977
  %3979 = add nuw nsw i32 %3978, %3977
  %3980 = icmp eq i32 %3979, 2
  %3981 = zext i1 %3980 to i8
  %3982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3981, i8* %3982, align 1, !tbaa !2450
  %3983 = load i64, i64* %PC
  %3984 = add i64 %3983, 125
  %3985 = load i64, i64* %PC
  %3986 = add i64 %3985, 6
  %3987 = load i64, i64* %PC
  %3988 = add i64 %3987, 6
  store i64 %3988, i64* %PC
  %3989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3990 = load i8, i8* %3989, align 1, !tbaa !2448
  %3991 = icmp eq i8 %3990, 0
  %3992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3993 = load i8, i8* %3992, align 1, !tbaa !2449
  %3994 = icmp ne i8 %3993, 0
  %3995 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3996 = load i8, i8* %3995, align 1, !tbaa !2450
  %3997 = icmp ne i8 %3996, 0
  %3998 = xor i1 %3994, %3997
  %3999 = xor i1 %3998, true
  %4000 = and i1 %3991, %3999
  %4001 = zext i1 %4000 to i8
  store i8 %4001, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4003 = select i1 %4000, i64 %3984, i64 %3986
  store i64 %4003, i64* %4002, align 8, !tbaa !2428
  %4004 = load i8, i8* %BRANCH_TAKEN
  %4005 = icmp eq i8 %4004, 1
  %4006 = load i64, i64* %RBP
  br i1 %4005, label %block_400931, label %block_4008ba

block_400949:                                     ; preds = %block_400942, %block_400956
  %MEMORY.19 = phi %struct.Memory* [ %MEMORY.5, %block_400942 ], [ %MEMORY.19, %block_400956 ]
  %4007 = load i64, i64* %RBP
  %4008 = sub i64 %4007, 16
  %4009 = load i64, i64* %PC
  %4010 = add i64 %4009, 7
  store i64 %4010, i64* %PC
  %4011 = inttoptr i64 %4008 to i32*
  %4012 = load i32, i32* %4011
  %4013 = sub i32 %4012, 511
  %4014 = icmp ult i32 %4012, 511
  %4015 = zext i1 %4014 to i8
  %4016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4015, i8* %4016, align 1, !tbaa !2432
  %4017 = and i32 %4013, 255
  %4018 = call i32 @llvm.ctpop.i32(i32 %4017) #16
  %4019 = trunc i32 %4018 to i8
  %4020 = and i8 %4019, 1
  %4021 = xor i8 %4020, 1
  %4022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4021, i8* %4022, align 1, !tbaa !2446
  %4023 = xor i32 %4012, 511
  %4024 = xor i32 %4023, %4013
  %4025 = lshr i32 %4024, 4
  %4026 = trunc i32 %4025 to i8
  %4027 = and i8 %4026, 1
  %4028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4027, i8* %4028, align 1, !tbaa !2447
  %4029 = icmp eq i32 %4013, 0
  %4030 = zext i1 %4029 to i8
  %4031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4030, i8* %4031, align 1, !tbaa !2448
  %4032 = lshr i32 %4013, 31
  %4033 = trunc i32 %4032 to i8
  %4034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4033, i8* %4034, align 1, !tbaa !2449
  %4035 = lshr i32 %4012, 31
  %4036 = xor i32 %4032, %4035
  %4037 = add nuw nsw i32 %4036, %4035
  %4038 = icmp eq i32 %4037, 2
  %4039 = zext i1 %4038 to i8
  %4040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4039, i8* %4040, align 1, !tbaa !2450
  %4041 = load i64, i64* %PC
  %4042 = add i64 %4041, 52
  %4043 = load i64, i64* %PC
  %4044 = add i64 %4043, 6
  %4045 = load i64, i64* %PC
  %4046 = add i64 %4045, 6
  store i64 %4046, i64* %PC
  %4047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4048 = load i8, i8* %4047, align 1, !tbaa !2448
  %4049 = icmp eq i8 %4048, 0
  %4050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4051 = load i8, i8* %4050, align 1, !tbaa !2449
  %4052 = icmp ne i8 %4051, 0
  %4053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4054 = load i8, i8* %4053, align 1, !tbaa !2450
  %4055 = icmp ne i8 %4054, 0
  %4056 = xor i1 %4052, %4055
  %4057 = xor i1 %4056, true
  %4058 = and i1 %4049, %4057
  %4059 = zext i1 %4058 to i8
  store i8 %4059, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4061 = select i1 %4058, i64 %4042, i64 %4044
  store i64 %4061, i64* %4060, align 8, !tbaa !2428
  %4062 = load i8, i8* %BRANCH_TAKEN
  %4063 = icmp eq i8 %4062, 1
  %4064 = load i64, i64* %PC
  br i1 %4063, label %block_400984, label %block_400956

block_400aaa:                                     ; preds = %block_400a4d
  %4065 = load i64, i64* %PC
  %4066 = add i64 %4065, 5
  %4067 = load i64, i64* %PC
  %4068 = add i64 %4067, 5
  store i64 %4068, i64* %PC
  %4069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4066, i64* %4069, align 8, !tbaa !2428
  %4070 = load i64, i64* %RBP
  %4071 = sub i64 %4070, 4
  %4072 = load i64, i64* %PC
  %4073 = add i64 %4072, 3
  store i64 %4073, i64* %PC
  %4074 = inttoptr i64 %4071 to i32*
  %4075 = load i32, i32* %4074
  %4076 = zext i32 %4075 to i64
  store i64 %4076, i64* %RAX, align 8, !tbaa !2428
  %4077 = load i64, i64* %RAX
  %4078 = load i64, i64* %PC
  %4079 = add i64 %4078, 3
  store i64 %4079, i64* %PC
  %4080 = trunc i64 %4077 to i32
  %4081 = add i32 1, %4080
  %4082 = zext i32 %4081 to i64
  store i64 %4082, i64* %RAX, align 8, !tbaa !2428
  %4083 = icmp ult i32 %4081, %4080
  %4084 = icmp ult i32 %4081, 1
  %4085 = or i1 %4083, %4084
  %4086 = zext i1 %4085 to i8
  %4087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4086, i8* %4087, align 1, !tbaa !2432
  %4088 = and i32 %4081, 255
  %4089 = call i32 @llvm.ctpop.i32(i32 %4088) #16
  %4090 = trunc i32 %4089 to i8
  %4091 = and i8 %4090, 1
  %4092 = xor i8 %4091, 1
  %4093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4092, i8* %4093, align 1, !tbaa !2446
  %4094 = xor i64 1, %4077
  %4095 = trunc i64 %4094 to i32
  %4096 = xor i32 %4095, %4081
  %4097 = lshr i32 %4096, 4
  %4098 = trunc i32 %4097 to i8
  %4099 = and i8 %4098, 1
  %4100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4099, i8* %4100, align 1, !tbaa !2447
  %4101 = icmp eq i32 %4081, 0
  %4102 = zext i1 %4101 to i8
  %4103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4102, i8* %4103, align 1, !tbaa !2448
  %4104 = lshr i32 %4081, 31
  %4105 = trunc i32 %4104 to i8
  %4106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4105, i8* %4106, align 1, !tbaa !2449
  %4107 = lshr i32 %4080, 31
  %4108 = xor i32 %4104, %4107
  %4109 = add nuw nsw i32 %4108, %4104
  %4110 = icmp eq i32 %4109, 2
  %4111 = zext i1 %4110 to i8
  %4112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4111, i8* %4112, align 1, !tbaa !2450
  %4113 = load i64, i64* %RBP
  %4114 = sub i64 %4113, 4
  %4115 = load i32, i32* %EAX
  %4116 = zext i32 %4115 to i64
  %4117 = load i64, i64* %PC
  %4118 = add i64 %4117, 3
  store i64 %4118, i64* %PC
  %4119 = inttoptr i64 %4114 to i32*
  store i32 %4115, i32* %4119
  %4120 = load i64, i64* %PC
  %4121 = sub i64 %4120, 124
  %4122 = load i64, i64* %PC
  %4123 = add i64 %4122, 5
  store i64 %4123, i64* %PC
  %4124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4121, i64* %4124, align 8, !tbaa !2428
  br label %block_400a3c

block_4008a9:                                     ; preds = %block_40087f
  %4125 = sub i64 %5399, 4
  %4126 = load i64, i64* %PC
  %4127 = add i64 %4126, 7
  store i64 %4127, i64* %PC
  %4128 = inttoptr i64 %4125 to i32*
  store i32 1, i32* %4128
  br label %block_4008b0

block_400f3d:                                     ; preds = %block_400f87, %block_400f36
  %MEMORY.20 = phi %struct.Memory* [ %MEMORY.8, %block_400f36 ], [ %MEMORY.4, %block_400f87 ]
  %4129 = load i64, i64* %RBP
  %4130 = sub i64 %4129, 8
  %4131 = load i64, i64* %PC
  %4132 = add i64 %4131, 4
  store i64 %4132, i64* %PC
  %4133 = inttoptr i64 %4130 to i32*
  %4134 = load i32, i32* %4133
  %4135 = sub i32 %4134, 1
  %4136 = icmp ult i32 %4134, 1
  %4137 = zext i1 %4136 to i8
  %4138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4137, i8* %4138, align 1, !tbaa !2432
  %4139 = and i32 %4135, 255
  %4140 = call i32 @llvm.ctpop.i32(i32 %4139) #16
  %4141 = trunc i32 %4140 to i8
  %4142 = and i8 %4141, 1
  %4143 = xor i8 %4142, 1
  %4144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4143, i8* %4144, align 1, !tbaa !2446
  %4145 = xor i32 %4134, 1
  %4146 = xor i32 %4145, %4135
  %4147 = lshr i32 %4146, 4
  %4148 = trunc i32 %4147 to i8
  %4149 = and i8 %4148, 1
  %4150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4149, i8* %4150, align 1, !tbaa !2447
  %4151 = icmp eq i32 %4135, 0
  %4152 = zext i1 %4151 to i8
  %4153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4152, i8* %4153, align 1, !tbaa !2448
  %4154 = lshr i32 %4135, 31
  %4155 = trunc i32 %4154 to i8
  %4156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4155, i8* %4156, align 1, !tbaa !2449
  %4157 = lshr i32 %4134, 31
  %4158 = xor i32 %4154, %4157
  %4159 = add nuw nsw i32 %4158, %4157
  %4160 = icmp eq i32 %4159, 2
  %4161 = zext i1 %4160 to i8
  %4162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4161, i8* %4162, align 1, !tbaa !2450
  %4163 = load i64, i64* %PC
  %4164 = add i64 %4163, 89
  %4165 = load i64, i64* %PC
  %4166 = add i64 %4165, 6
  %4167 = load i64, i64* %PC
  %4168 = add i64 %4167, 6
  store i64 %4168, i64* %PC
  %4169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4170 = load i8, i8* %4169, align 1, !tbaa !2448
  %4171 = icmp eq i8 %4170, 0
  %4172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4173 = load i8, i8* %4172, align 1, !tbaa !2449
  %4174 = icmp ne i8 %4173, 0
  %4175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4176 = load i8, i8* %4175, align 1, !tbaa !2450
  %4177 = icmp ne i8 %4176, 0
  %4178 = xor i1 %4174, %4177
  %4179 = xor i1 %4178, true
  %4180 = and i1 %4171, %4179
  %4181 = zext i1 %4180 to i8
  store i8 %4181, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4183 = select i1 %4180, i64 %4164, i64 %4166
  store i64 %4183, i64* %4182, align 8, !tbaa !2428
  %4184 = load i8, i8* %BRANCH_TAKEN
  %4185 = icmp eq i8 %4184, 1
  br i1 %4185, label %block_400f9a, label %block_400f47

block_400c71:                                     ; preds = %block_400c38
  %4186 = load i64, i64* %PC
  %4187 = add i64 %4186, 5
  %4188 = load i64, i64* %PC
  %4189 = add i64 %4188, 5
  store i64 %4189, i64* %PC
  %4190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4187, i64* %4190, align 8, !tbaa !2428
  %4191 = load i64, i64* %RBP
  %4192 = sub i64 %4191, 8
  %4193 = load i64, i64* %PC
  %4194 = add i64 %4193, 3
  store i64 %4194, i64* %PC
  %4195 = inttoptr i64 %4192 to i32*
  %4196 = load i32, i32* %4195
  %4197 = zext i32 %4196 to i64
  store i64 %4197, i64* %RAX, align 8, !tbaa !2428
  %4198 = load i64, i64* %RAX
  %4199 = load i64, i64* %PC
  %4200 = add i64 %4199, 3
  store i64 %4200, i64* %PC
  %4201 = trunc i64 %4198 to i32
  %4202 = add i32 1, %4201
  %4203 = zext i32 %4202 to i64
  store i64 %4203, i64* %RAX, align 8, !tbaa !2428
  %4204 = icmp ult i32 %4202, %4201
  %4205 = icmp ult i32 %4202, 1
  %4206 = or i1 %4204, %4205
  %4207 = zext i1 %4206 to i8
  %4208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4207, i8* %4208, align 1, !tbaa !2432
  %4209 = and i32 %4202, 255
  %4210 = call i32 @llvm.ctpop.i32(i32 %4209) #16
  %4211 = trunc i32 %4210 to i8
  %4212 = and i8 %4211, 1
  %4213 = xor i8 %4212, 1
  %4214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4213, i8* %4214, align 1, !tbaa !2446
  %4215 = xor i64 1, %4198
  %4216 = trunc i64 %4215 to i32
  %4217 = xor i32 %4216, %4202
  %4218 = lshr i32 %4217, 4
  %4219 = trunc i32 %4218 to i8
  %4220 = and i8 %4219, 1
  %4221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4220, i8* %4221, align 1, !tbaa !2447
  %4222 = icmp eq i32 %4202, 0
  %4223 = zext i1 %4222 to i8
  %4224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4223, i8* %4224, align 1, !tbaa !2448
  %4225 = lshr i32 %4202, 31
  %4226 = trunc i32 %4225 to i8
  %4227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4226, i8* %4227, align 1, !tbaa !2449
  %4228 = lshr i32 %4201, 31
  %4229 = xor i32 %4225, %4228
  %4230 = add nuw nsw i32 %4229, %4225
  %4231 = icmp eq i32 %4230, 2
  %4232 = zext i1 %4231 to i8
  %4233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4232, i8* %4233, align 1, !tbaa !2450
  %4234 = load i64, i64* %RBP
  %4235 = sub i64 %4234, 8
  %4236 = load i32, i32* %EAX
  %4237 = zext i32 %4236 to i64
  %4238 = load i64, i64* %PC
  %4239 = add i64 %4238, 3
  store i64 %4239, i64* %PC
  %4240 = inttoptr i64 %4235 to i32*
  store i32 %4236, i32* %4240
  %4241 = load i64, i64* %PC
  %4242 = sub i64 %4241, 88
  %4243 = load i64, i64* %PC
  %4244 = add i64 %4243, 5
  store i64 %4244, i64* %PC
  %4245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4242, i64* %4245, align 8, !tbaa !2428
  br label %block_400c27

block_401187:                                     ; preds = %block_401106
  %4246 = load i64, i64* %RDI
  %4247 = load i32, i32* %EDI
  %4248 = zext i32 %4247 to i64
  %4249 = load i64, i64* %PC
  %4250 = add i64 %4249, 2
  store i64 %4250, i64* %PC
  %4251 = xor i64 %4248, %4246
  %4252 = trunc i64 %4251 to i32
  %4253 = and i64 %4251, 4294967295
  store i64 %4253, i64* %RDI, align 8, !tbaa !2428
  %4254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4254, align 1, !tbaa !2432
  %4255 = and i32 %4252, 255
  %4256 = call i32 @llvm.ctpop.i32(i32 %4255) #16
  %4257 = trunc i32 %4256 to i8
  %4258 = and i8 %4257, 1
  %4259 = xor i8 %4258, 1
  %4260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4259, i8* %4260, align 1, !tbaa !2446
  %4261 = icmp eq i32 %4252, 0
  %4262 = zext i1 %4261 to i8
  %4263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4262, i8* %4263, align 1, !tbaa !2448
  %4264 = lshr i32 %4252, 31
  %4265 = trunc i32 %4264 to i8
  %4266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4265, i8* %4266, align 1, !tbaa !2449
  %4267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4267, align 1, !tbaa !2450
  %4268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4268, align 1, !tbaa !2447
  %4269 = load i64, i64* %PC
  %4270 = add i64 %4269, 11
  store i64 %4270, i64* %PC
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 48) to i32*)
  %4271 = load i64, i64* %PC
  %4272 = add i64 %4271, 11
  store i64 %4272, i64* %PC
  store i32 73, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 48) to i32*)
  %4273 = load i64, i64* %PC
  %4274 = add i64 %4273, 11
  store i64 %4274, i64* %PC
  store i32 13, i32* bitcast (%piececount_type* @piececount to i32*)
  %4275 = load i64, i64* %PC
  %4276 = add i64 %4275, 11
  store i64 %4276, i64* %PC
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%piececount_type* @piececount to i64), i64 4) to i32*)
  %4277 = load i64, i64* %PC
  %4278 = add i64 %4277, 11
  store i64 %4278, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%piececount_type* @piececount to i64), i64 8) to i32*)
  %4279 = load i64, i64* %PC
  %4280 = add i64 %4279, 11
  store i64 %4280, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%piececount_type* @piececount to i64), i64 12) to i32*)
  %4281 = load i64, i64* %RBP
  %4282 = sub i64 %4281, 16
  %4283 = load i64, i64* %PC
  %4284 = add i64 %4283, 7
  store i64 %4284, i64* %PC
  %4285 = inttoptr i64 %4282 to i32*
  store i32 73, i32* %4285
  %4286 = load i64, i64* %PC
  %4287 = add i64 %4286, 11
  store i64 %4287, i64* %PC
  store i32 0, i32* bitcast (%kount_type* @kount to i32*)
  %4288 = load i64, i64* %RBP
  %4289 = sub i64 %4288, 16
  %4290 = load i64, i64* %PC
  %4291 = add i64 %4290, 3
  store i64 %4291, i64* %PC
  %4292 = inttoptr i64 %4289 to i32*
  %4293 = load i32, i32* %4292
  %4294 = zext i32 %4293 to i64
  store i64 %4294, i64* %RSI, align 8, !tbaa !2428
  %4295 = load i64, i64* %PC
  %4296 = sub i64 %4295, 3168
  %4297 = load i64, i64* %PC
  %4298 = add i64 %4297, 5
  %4299 = load i64, i64* %PC
  %4300 = add i64 %4299, 5
  store i64 %4300, i64* %PC
  %4301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4302 = load i64, i64* %4301, align 8, !tbaa !2428
  %4303 = add i64 %4302, -8
  %4304 = inttoptr i64 %4303 to i64*
  store i64 %4298, i64* %4304
  store i64 %4303, i64* %4301, align 8, !tbaa !2428
  %4305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4296, i64* %4305, align 8, !tbaa !2428
  %4306 = load i64, i64* %PC
  %4307 = call %struct.Memory* @sub_400580_Fit_renamed_(%struct.State* %0, i64 %4306, %struct.Memory* %MEMORY.13)
  %4308 = load i32, i32* %EAX
  %4309 = zext i32 %4308 to i64
  %4310 = load i64, i64* %PC
  %4311 = add i64 %4310, 3
  store i64 %4311, i64* %PC
  %4312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4312, align 1, !tbaa !2432
  %4313 = and i32 %4308, 255
  %4314 = call i32 @llvm.ctpop.i32(i32 %4313) #16
  %4315 = trunc i32 %4314 to i8
  %4316 = and i8 %4315, 1
  %4317 = xor i8 %4316, 1
  %4318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4317, i8* %4318, align 1, !tbaa !2446
  %4319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4319, align 1, !tbaa !2447
  %4320 = icmp eq i32 %4308, 0
  %4321 = zext i1 %4320 to i8
  %4322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4321, i8* %4322, align 1, !tbaa !2448
  %4323 = lshr i32 %4308, 31
  %4324 = trunc i32 %4323 to i8
  %4325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4324, i8* %4325, align 1, !tbaa !2449
  %4326 = lshr i32 %4308, 31
  %4327 = xor i32 %4323, %4326
  %4328 = add nuw nsw i32 %4327, %4326
  %4329 = icmp eq i32 %4328, 2
  %4330 = zext i1 %4329 to i8
  %4331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4330, i8* %4331, align 1, !tbaa !2450
  %4332 = load i64, i64* %PC
  %4333 = add i64 %4332, 28
  %4334 = load i64, i64* %PC
  %4335 = add i64 %4334, 6
  %4336 = load i64, i64* %PC
  %4337 = add i64 %4336, 6
  store i64 %4337, i64* %PC
  %4338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4339 = load i8, i8* %4338, align 1, !tbaa !2448
  store i8 %4339, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4341 = icmp ne i8 %4339, 0
  %4342 = select i1 %4341, i64 %4333, i64 %4335
  store i64 %4342, i64* %4340, align 8, !tbaa !2428
  %4343 = load i8, i8* %BRANCH_TAKEN
  %4344 = icmp eq i8 %4343, 1
  br i1 %4344, label %block_401204, label %block_4011ee

block_400bd3:                                     ; preds = %block_400b9a
  %4345 = load i64, i64* %PC
  %4346 = add i64 %4345, 5
  %4347 = load i64, i64* %PC
  %4348 = add i64 %4347, 5
  store i64 %4348, i64* %PC
  %4349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4346, i64* %4349, align 8, !tbaa !2428
  %4350 = load i64, i64* %RBP
  %4351 = sub i64 %4350, 8
  %4352 = load i64, i64* %PC
  %4353 = add i64 %4352, 3
  store i64 %4353, i64* %PC
  %4354 = inttoptr i64 %4351 to i32*
  %4355 = load i32, i32* %4354
  %4356 = zext i32 %4355 to i64
  store i64 %4356, i64* %RAX, align 8, !tbaa !2428
  %4357 = load i64, i64* %RAX
  %4358 = load i64, i64* %PC
  %4359 = add i64 %4358, 3
  store i64 %4359, i64* %PC
  %4360 = trunc i64 %4357 to i32
  %4361 = add i32 1, %4360
  %4362 = zext i32 %4361 to i64
  store i64 %4362, i64* %RAX, align 8, !tbaa !2428
  %4363 = icmp ult i32 %4361, %4360
  %4364 = icmp ult i32 %4361, 1
  %4365 = or i1 %4363, %4364
  %4366 = zext i1 %4365 to i8
  %4367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4366, i8* %4367, align 1, !tbaa !2432
  %4368 = and i32 %4361, 255
  %4369 = call i32 @llvm.ctpop.i32(i32 %4368) #16
  %4370 = trunc i32 %4369 to i8
  %4371 = and i8 %4370, 1
  %4372 = xor i8 %4371, 1
  %4373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4372, i8* %4373, align 1, !tbaa !2446
  %4374 = xor i64 1, %4357
  %4375 = trunc i64 %4374 to i32
  %4376 = xor i32 %4375, %4361
  %4377 = lshr i32 %4376, 4
  %4378 = trunc i32 %4377 to i8
  %4379 = and i8 %4378, 1
  %4380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4379, i8* %4380, align 1, !tbaa !2447
  %4381 = icmp eq i32 %4361, 0
  %4382 = zext i1 %4381 to i8
  %4383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4382, i8* %4383, align 1, !tbaa !2448
  %4384 = lshr i32 %4361, 31
  %4385 = trunc i32 %4384 to i8
  %4386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4385, i8* %4386, align 1, !tbaa !2449
  %4387 = lshr i32 %4360, 31
  %4388 = xor i32 %4384, %4387
  %4389 = add nuw nsw i32 %4388, %4384
  %4390 = icmp eq i32 %4389, 2
  %4391 = zext i1 %4390 to i8
  %4392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4391, i8* %4392, align 1, !tbaa !2450
  %4393 = load i64, i64* %RBP
  %4394 = sub i64 %4393, 8
  %4395 = load i32, i32* %EAX
  %4396 = zext i32 %4395 to i64
  %4397 = load i64, i64* %PC
  %4398 = add i64 %4397, 3
  store i64 %4398, i64* %PC
  %4399 = inttoptr i64 %4394 to i32*
  store i32 %4395, i32* %4399
  %4400 = load i64, i64* %PC
  %4401 = sub i64 %4400, 88
  %4402 = load i64, i64* %PC
  %4403 = add i64 %4402, 5
  store i64 %4403, i64* %PC
  %4404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4401, i64* %4404, align 8, !tbaa !2428
  br label %block_400b89

block_400e9f:                                     ; preds = %block_400e98, %block_400ee9
  %MEMORY.21 = phi %struct.Memory* [ %MEMORY.24, %block_400e98 ], [ %MEMORY.39, %block_400ee9 ]
  %4405 = load i64, i64* %RBP
  %4406 = sub i64 %4405, 8
  %4407 = load i64, i64* %PC
  %4408 = add i64 %4407, 4
  store i64 %4408, i64* %PC
  %4409 = inttoptr i64 %4406 to i32*
  %4410 = load i32, i32* %4409
  %4411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4411, align 1, !tbaa !2432
  %4412 = and i32 %4410, 255
  %4413 = call i32 @llvm.ctpop.i32(i32 %4412) #16
  %4414 = trunc i32 %4413 to i8
  %4415 = and i8 %4414, 1
  %4416 = xor i8 %4415, 1
  %4417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4416, i8* %4417, align 1, !tbaa !2446
  %4418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4418, align 1, !tbaa !2447
  %4419 = icmp eq i32 %4410, 0
  %4420 = zext i1 %4419 to i8
  %4421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4420, i8* %4421, align 1, !tbaa !2448
  %4422 = lshr i32 %4410, 31
  %4423 = trunc i32 %4422 to i8
  %4424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4423, i8* %4424, align 1, !tbaa !2449
  %4425 = lshr i32 %4410, 31
  %4426 = xor i32 %4422, %4425
  %4427 = add nuw nsw i32 %4426, %4425
  %4428 = icmp eq i32 %4427, 2
  %4429 = zext i1 %4428 to i8
  %4430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4429, i8* %4430, align 1, !tbaa !2450
  %4431 = load i64, i64* %PC
  %4432 = add i64 %4431, 89
  %4433 = load i64, i64* %PC
  %4434 = add i64 %4433, 6
  %4435 = load i64, i64* %PC
  %4436 = add i64 %4435, 6
  store i64 %4436, i64* %PC
  %4437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4438 = load i8, i8* %4437, align 1, !tbaa !2448
  %4439 = icmp eq i8 %4438, 0
  %4440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4441 = load i8, i8* %4440, align 1, !tbaa !2449
  %4442 = icmp ne i8 %4441, 0
  %4443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4444 = load i8, i8* %4443, align 1, !tbaa !2450
  %4445 = icmp ne i8 %4444, 0
  %4446 = xor i1 %4442, %4445
  %4447 = xor i1 %4446, true
  %4448 = and i1 %4439, %4447
  %4449 = zext i1 %4448 to i8
  store i8 %4449, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4451 = select i1 %4448, i64 %4432, i64 %4434
  store i64 %4451, i64* %4450, align 8, !tbaa !2428
  %4452 = load i8, i8* %BRANCH_TAKEN
  %4453 = icmp eq i8 %4452, 1
  br i1 %4453, label %block_400efc, label %block_400ea9

block_400e98:                                     ; preds = %block_400e8e
  %4454 = load i64, i64* %RBP
  %4455 = sub i64 %4454, 8
  %4456 = load i64, i64* %PC
  %4457 = add i64 %4456, 7
  store i64 %4457, i64* %PC
  %4458 = inttoptr i64 %4455 to i32*
  store i32 0, i32* %4458
  br label %block_400e9f

block_400d63:                                     ; preds = %block_400dad, %block_400d5c
  %MEMORY.22 = phi %struct.Memory* [ %MEMORY.2, %block_400d5c ], [ %MEMORY.16, %block_400dad ]
  %4459 = load i64, i64* %RBP
  %4460 = sub i64 %4459, 8
  %4461 = load i64, i64* %PC
  %4462 = add i64 %4461, 4
  store i64 %4462, i64* %PC
  %4463 = inttoptr i64 %4460 to i32*
  %4464 = load i32, i32* %4463
  %4465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4465, align 1, !tbaa !2432
  %4466 = and i32 %4464, 255
  %4467 = call i32 @llvm.ctpop.i32(i32 %4466) #16
  %4468 = trunc i32 %4467 to i8
  %4469 = and i8 %4468, 1
  %4470 = xor i8 %4469, 1
  %4471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4470, i8* %4471, align 1, !tbaa !2446
  %4472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4472, align 1, !tbaa !2447
  %4473 = icmp eq i32 %4464, 0
  %4474 = zext i1 %4473 to i8
  %4475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4474, i8* %4475, align 1, !tbaa !2448
  %4476 = lshr i32 %4464, 31
  %4477 = trunc i32 %4476 to i8
  %4478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4477, i8* %4478, align 1, !tbaa !2449
  %4479 = lshr i32 %4464, 31
  %4480 = xor i32 %4476, %4479
  %4481 = add nuw nsw i32 %4480, %4479
  %4482 = icmp eq i32 %4481, 2
  %4483 = zext i1 %4482 to i8
  %4484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4483, i8* %4484, align 1, !tbaa !2450
  %4485 = load i64, i64* %PC
  %4486 = add i64 %4485, 89
  %4487 = load i64, i64* %PC
  %4488 = add i64 %4487, 6
  %4489 = load i64, i64* %PC
  %4490 = add i64 %4489, 6
  store i64 %4490, i64* %PC
  %4491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4492 = load i8, i8* %4491, align 1, !tbaa !2448
  %4493 = icmp eq i8 %4492, 0
  %4494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4495 = load i8, i8* %4494, align 1, !tbaa !2449
  %4496 = icmp ne i8 %4495, 0
  %4497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4498 = load i8, i8* %4497, align 1, !tbaa !2450
  %4499 = icmp ne i8 %4498, 0
  %4500 = xor i1 %4496, %4499
  %4501 = xor i1 %4500, true
  %4502 = and i1 %4493, %4501
  %4503 = zext i1 %4502 to i8
  store i8 %4503, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4505 = select i1 %4502, i64 %4486, i64 %4488
  store i64 %4505, i64* %4504, align 8, !tbaa !2428
  %4506 = load i8, i8* %BRANCH_TAKEN
  %4507 = icmp eq i8 %4506, 1
  br i1 %4507, label %block_400dc0, label %block_400d6d

block_400931:                                     ; preds = %block_4008b0
  %4508 = sub i64 %4006, 4
  %4509 = load i64, i64* %PC
  %4510 = add i64 %4509, 7
  store i64 %4510, i64* %PC
  %4511 = inttoptr i64 %4508 to i32*
  store i32 0, i32* %4511
  br label %block_400938

block_400a97:                                     ; preds = %block_400a5e
  %4512 = load i64, i64* %PC
  %4513 = add i64 %4512, 5
  %4514 = load i64, i64* %PC
  %4515 = add i64 %4514, 5
  store i64 %4515, i64* %PC
  %4516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4513, i64* %4516, align 8, !tbaa !2428
  %4517 = load i64, i64* %RBP
  %4518 = sub i64 %4517, 8
  %4519 = load i64, i64* %PC
  %4520 = add i64 %4519, 3
  store i64 %4520, i64* %PC
  %4521 = inttoptr i64 %4518 to i32*
  %4522 = load i32, i32* %4521
  %4523 = zext i32 %4522 to i64
  store i64 %4523, i64* %RAX, align 8, !tbaa !2428
  %4524 = load i64, i64* %RAX
  %4525 = load i64, i64* %PC
  %4526 = add i64 %4525, 3
  store i64 %4526, i64* %PC
  %4527 = trunc i64 %4524 to i32
  %4528 = add i32 1, %4527
  %4529 = zext i32 %4528 to i64
  store i64 %4529, i64* %RAX, align 8, !tbaa !2428
  %4530 = icmp ult i32 %4528, %4527
  %4531 = icmp ult i32 %4528, 1
  %4532 = or i1 %4530, %4531
  %4533 = zext i1 %4532 to i8
  %4534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4533, i8* %4534, align 1, !tbaa !2432
  %4535 = and i32 %4528, 255
  %4536 = call i32 @llvm.ctpop.i32(i32 %4535) #16
  %4537 = trunc i32 %4536 to i8
  %4538 = and i8 %4537, 1
  %4539 = xor i8 %4538, 1
  %4540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4539, i8* %4540, align 1, !tbaa !2446
  %4541 = xor i64 1, %4524
  %4542 = trunc i64 %4541 to i32
  %4543 = xor i32 %4542, %4528
  %4544 = lshr i32 %4543, 4
  %4545 = trunc i32 %4544 to i8
  %4546 = and i8 %4545, 1
  %4547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4546, i8* %4547, align 1, !tbaa !2447
  %4548 = icmp eq i32 %4528, 0
  %4549 = zext i1 %4548 to i8
  %4550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4549, i8* %4550, align 1, !tbaa !2448
  %4551 = lshr i32 %4528, 31
  %4552 = trunc i32 %4551 to i8
  %4553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4552, i8* %4553, align 1, !tbaa !2449
  %4554 = lshr i32 %4527, 31
  %4555 = xor i32 %4551, %4554
  %4556 = add nuw nsw i32 %4555, %4551
  %4557 = icmp eq i32 %4556, 2
  %4558 = zext i1 %4557 to i8
  %4559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4558, i8* %4559, align 1, !tbaa !2450
  %4560 = load i64, i64* %RBP
  %4561 = sub i64 %4560, 8
  %4562 = load i32, i32* %EAX
  %4563 = zext i32 %4562 to i64
  %4564 = load i64, i64* %PC
  %4565 = add i64 %4564, 3
  store i64 %4565, i64* %PC
  %4566 = inttoptr i64 %4561 to i32*
  store i32 %4562, i32* %4566
  %4567 = load i64, i64* %PC
  %4568 = sub i64 %4567, 88
  %4569 = load i64, i64* %PC
  %4570 = add i64 %4569, 5
  store i64 %4570, i64* %PC
  %4571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4568, i64* %4571, align 8, !tbaa !2428
  br label %block_400a4d

block_400afc:                                     ; preds = %block_400b06, %block_400af5
  %MEMORY.23 = phi %struct.Memory* [ %MEMORY.25, %block_400af5 ], [ %MEMORY.23, %block_400b06 ]
  %4572 = load i64, i64* %RBP
  %4573 = sub i64 %4572, 12
  %4574 = load i64, i64* %PC
  %4575 = add i64 %4574, 4
  store i64 %4575, i64* %PC
  %4576 = inttoptr i64 %4573 to i32*
  %4577 = load i32, i32* %4576
  %4578 = sub i32 %4577, 1
  %4579 = icmp ult i32 %4577, 1
  %4580 = zext i1 %4579 to i8
  %4581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4580, i8* %4581, align 1, !tbaa !2432
  %4582 = and i32 %4578, 255
  %4583 = call i32 @llvm.ctpop.i32(i32 %4582) #16
  %4584 = trunc i32 %4583 to i8
  %4585 = and i8 %4584, 1
  %4586 = xor i8 %4585, 1
  %4587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4586, i8* %4587, align 1, !tbaa !2446
  %4588 = xor i32 %4577, 1
  %4589 = xor i32 %4588, %4578
  %4590 = lshr i32 %4589, 4
  %4591 = trunc i32 %4590 to i8
  %4592 = and i8 %4591, 1
  %4593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4592, i8* %4593, align 1, !tbaa !2447
  %4594 = icmp eq i32 %4578, 0
  %4595 = zext i1 %4594 to i8
  %4596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4595, i8* %4596, align 1, !tbaa !2448
  %4597 = lshr i32 %4578, 31
  %4598 = trunc i32 %4597 to i8
  %4599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4598, i8* %4599, align 1, !tbaa !2449
  %4600 = lshr i32 %4577, 31
  %4601 = xor i32 %4597, %4600
  %4602 = add nuw nsw i32 %4601, %4600
  %4603 = icmp eq i32 %4602, 2
  %4604 = zext i1 %4603 to i8
  %4605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4604, i8* %4605, align 1, !tbaa !2450
  %4606 = load i64, i64* %PC
  %4607 = add i64 %4606, 53
  %4608 = load i64, i64* %PC
  %4609 = add i64 %4608, 6
  %4610 = load i64, i64* %PC
  %4611 = add i64 %4610, 6
  store i64 %4611, i64* %PC
  %4612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4613 = load i8, i8* %4612, align 1, !tbaa !2448
  %4614 = icmp eq i8 %4613, 0
  %4615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4616 = load i8, i8* %4615, align 1, !tbaa !2449
  %4617 = icmp ne i8 %4616, 0
  %4618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4619 = load i8, i8* %4618, align 1, !tbaa !2450
  %4620 = icmp ne i8 %4619, 0
  %4621 = xor i1 %4617, %4620
  %4622 = xor i1 %4621, true
  %4623 = and i1 %4614, %4622
  %4624 = zext i1 %4623 to i8
  store i8 %4624, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4626 = select i1 %4623, i64 %4607, i64 %4609
  store i64 %4626, i64* %4625, align 8, !tbaa !2428
  %4627 = load i8, i8* %BRANCH_TAKEN
  %4628 = icmp eq i8 %4627, 1
  br i1 %4628, label %block_400b35, label %block_400b06

block_401094:                                     ; preds = %block_40108a
  %4629 = load i64, i64* %RBP
  %4630 = sub i64 %4629, 4
  %4631 = load i64, i64* %PC
  %4632 = add i64 %4631, 3
  store i64 %4632, i64* %PC
  %4633 = inttoptr i64 %4630 to i32*
  %4634 = load i32, i32* %4633
  %4635 = zext i32 %4634 to i64
  store i64 %4635, i64* %RAX, align 8, !tbaa !2428
  %4636 = load i64, i64* %RBP
  %4637 = sub i64 %4636, 8
  %4638 = load i64, i64* %PC
  %4639 = add i64 %4638, 3
  store i64 %4639, i64* %PC
  %4640 = inttoptr i64 %4637 to i32*
  %4641 = load i32, i32* %4640
  %4642 = zext i32 %4641 to i64
  store i64 %4642, i64* %RCX, align 8, !tbaa !2428
  %4643 = load i64, i64* %RBP
  %4644 = sub i64 %4643, 12
  %4645 = load i64, i64* %PC
  %4646 = add i64 %4645, 3
  store i64 %4646, i64* %PC
  %4647 = inttoptr i64 %4644 to i32*
  %4648 = load i32, i32* %4647
  %4649 = zext i32 %4648 to i64
  store i64 %4649, i64* %RDX, align 8, !tbaa !2428
  %4650 = load i64, i64* %RDX
  %4651 = load i64, i64* %PC
  %4652 = add i64 %4651, 3
  store i64 %4652, i64* %PC
  %4653 = and i64 %4650, 4294967295
  %4654 = shl i64 %4653, 2
  %4655 = trunc i64 %4654 to i32
  %4656 = icmp slt i32 %4655, 0
  %4657 = shl i32 %4655, 1
  %4658 = zext i32 %4657 to i64
  store i64 %4658, i64* %RDX, align 8, !tbaa !2428
  %4659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4660 = zext i1 %4656 to i8
  store i8 %4660, i8* %4659, align 1, !tbaa !2451
  %4661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4662 = and i32 %4657, 254
  %4663 = call i32 @llvm.ctpop.i32(i32 %4662) #16
  %4664 = trunc i32 %4663 to i8
  %4665 = and i8 %4664, 1
  %4666 = xor i8 %4665, 1
  store i8 %4666, i8* %4661, align 1, !tbaa !2451
  %4667 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4667, align 1, !tbaa !2451
  %4668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4669 = icmp eq i32 %4657, 0
  %4670 = zext i1 %4669 to i8
  store i8 %4670, i8* %4668, align 1, !tbaa !2451
  %4671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4672 = lshr i32 %4657, 31
  %4673 = trunc i32 %4672 to i8
  store i8 %4673, i8* %4671, align 1, !tbaa !2451
  %4674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4674, align 1, !tbaa !2451
  %4675 = load i64, i64* %RCX
  %4676 = load i32, i32* %EDX
  %4677 = zext i32 %4676 to i64
  %4678 = load i64, i64* %PC
  %4679 = add i64 %4678, 2
  store i64 %4679, i64* %PC
  %4680 = trunc i64 %4675 to i32
  %4681 = add i32 %4676, %4680
  %4682 = zext i32 %4681 to i64
  store i64 %4682, i64* %RCX, align 8, !tbaa !2428
  %4683 = icmp ult i32 %4681, %4680
  %4684 = icmp ult i32 %4681, %4676
  %4685 = or i1 %4683, %4684
  %4686 = zext i1 %4685 to i8
  %4687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4686, i8* %4687, align 1, !tbaa !2432
  %4688 = and i32 %4681, 255
  %4689 = call i32 @llvm.ctpop.i32(i32 %4688) #16
  %4690 = trunc i32 %4689 to i8
  %4691 = and i8 %4690, 1
  %4692 = xor i8 %4691, 1
  %4693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4692, i8* %4693, align 1, !tbaa !2446
  %4694 = xor i64 %4677, %4675
  %4695 = trunc i64 %4694 to i32
  %4696 = xor i32 %4695, %4681
  %4697 = lshr i32 %4696, 4
  %4698 = trunc i32 %4697 to i8
  %4699 = and i8 %4698, 1
  %4700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4699, i8* %4700, align 1, !tbaa !2447
  %4701 = icmp eq i32 %4681, 0
  %4702 = zext i1 %4701 to i8
  %4703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4702, i8* %4703, align 1, !tbaa !2448
  %4704 = lshr i32 %4681, 31
  %4705 = trunc i32 %4704 to i8
  %4706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4705, i8* %4706, align 1, !tbaa !2449
  %4707 = lshr i32 %4680, 31
  %4708 = lshr i32 %4676, 31
  %4709 = xor i32 %4704, %4707
  %4710 = xor i32 %4704, %4708
  %4711 = add nuw nsw i32 %4709, %4710
  %4712 = icmp eq i32 %4711, 2
  %4713 = zext i1 %4712 to i8
  %4714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4713, i8* %4714, align 1, !tbaa !2450
  %4715 = load i64, i64* %RCX
  %4716 = load i64, i64* %PC
  %4717 = add i64 %4716, 3
  store i64 %4717, i64* %PC
  %4718 = and i64 %4715, 4294967295
  %4719 = shl i64 %4718, 2
  %4720 = trunc i64 %4719 to i32
  %4721 = icmp slt i32 %4720, 0
  %4722 = shl i32 %4720, 1
  %4723 = zext i32 %4722 to i64
  store i64 %4723, i64* %RCX, align 8, !tbaa !2428
  %4724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4725 = zext i1 %4721 to i8
  store i8 %4725, i8* %4724, align 1, !tbaa !2451
  %4726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4727 = and i32 %4722, 254
  %4728 = call i32 @llvm.ctpop.i32(i32 %4727) #16
  %4729 = trunc i32 %4728 to i8
  %4730 = and i8 %4729, 1
  %4731 = xor i8 %4730, 1
  store i8 %4731, i8* %4726, align 1, !tbaa !2451
  %4732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4732, align 1, !tbaa !2451
  %4733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4734 = icmp eq i32 %4722, 0
  %4735 = zext i1 %4734 to i8
  store i8 %4735, i8* %4733, align 1, !tbaa !2451
  %4736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4737 = lshr i32 %4722, 31
  %4738 = trunc i32 %4737 to i8
  store i8 %4738, i8* %4736, align 1, !tbaa !2451
  %4739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4739, align 1, !tbaa !2451
  %4740 = load i64, i64* %RAX
  %4741 = load i32, i32* %ECX
  %4742 = zext i32 %4741 to i64
  %4743 = load i64, i64* %PC
  %4744 = add i64 %4743, 2
  store i64 %4744, i64* %PC
  %4745 = trunc i64 %4740 to i32
  %4746 = add i32 %4741, %4745
  %4747 = zext i32 %4746 to i64
  store i64 %4747, i64* %RAX, align 8, !tbaa !2428
  %4748 = icmp ult i32 %4746, %4745
  %4749 = icmp ult i32 %4746, %4741
  %4750 = or i1 %4748, %4749
  %4751 = zext i1 %4750 to i8
  %4752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4751, i8* %4752, align 1, !tbaa !2432
  %4753 = and i32 %4746, 255
  %4754 = call i32 @llvm.ctpop.i32(i32 %4753) #16
  %4755 = trunc i32 %4754 to i8
  %4756 = and i8 %4755, 1
  %4757 = xor i8 %4756, 1
  %4758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4757, i8* %4758, align 1, !tbaa !2446
  %4759 = xor i64 %4742, %4740
  %4760 = trunc i64 %4759 to i32
  %4761 = xor i32 %4760, %4746
  %4762 = lshr i32 %4761, 4
  %4763 = trunc i32 %4762 to i8
  %4764 = and i8 %4763, 1
  %4765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4764, i8* %4765, align 1, !tbaa !2447
  %4766 = icmp eq i32 %4746, 0
  %4767 = zext i1 %4766 to i8
  %4768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4767, i8* %4768, align 1, !tbaa !2448
  %4769 = lshr i32 %4746, 31
  %4770 = trunc i32 %4769 to i8
  %4771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4770, i8* %4771, align 1, !tbaa !2449
  %4772 = lshr i32 %4745, 31
  %4773 = lshr i32 %4741, 31
  %4774 = xor i32 %4769, %4772
  %4775 = xor i32 %4769, %4773
  %4776 = add nuw nsw i32 %4774, %4775
  %4777 = icmp eq i32 %4776, 2
  %4778 = zext i1 %4777 to i8
  %4779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4778, i8* %4779, align 1, !tbaa !2450
  %4780 = load i32, i32* %EAX
  %4781 = zext i32 %4780 to i64
  %4782 = load i64, i64* %PC
  %4783 = add i64 %4782, 3
  store i64 %4783, i64* %PC
  %4784 = shl i64 %4781, 32
  %4785 = ashr exact i64 %4784, 32
  store i64 %4785, i64* %RSI, align 8, !tbaa !2428
  %4786 = load i64, i64* %RSI
  %4787 = mul i64 %4786, 4
  %4788 = add i64 %4787, add (i64 ptrtoint (%p_type* @p to i64), i64 22528)
  %4789 = load i64, i64* %PC
  %4790 = add i64 %4789, 11
  store i64 %4790, i64* %PC
  %4791 = inttoptr i64 %4788 to i32*
  store i32 1, i32* %4791
  %4792 = load i64, i64* %RBP
  %4793 = sub i64 %4792, 12
  %4794 = load i64, i64* %PC
  %4795 = add i64 %4794, 3
  store i64 %4795, i64* %PC
  %4796 = inttoptr i64 %4793 to i32*
  %4797 = load i32, i32* %4796
  %4798 = zext i32 %4797 to i64
  store i64 %4798, i64* %RAX, align 8, !tbaa !2428
  %4799 = load i64, i64* %RAX
  %4800 = load i64, i64* %PC
  %4801 = add i64 %4800, 3
  store i64 %4801, i64* %PC
  %4802 = trunc i64 %4799 to i32
  %4803 = add i32 1, %4802
  %4804 = zext i32 %4803 to i64
  store i64 %4804, i64* %RAX, align 8, !tbaa !2428
  %4805 = icmp ult i32 %4803, %4802
  %4806 = icmp ult i32 %4803, 1
  %4807 = or i1 %4805, %4806
  %4808 = zext i1 %4807 to i8
  %4809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4808, i8* %4809, align 1, !tbaa !2432
  %4810 = and i32 %4803, 255
  %4811 = call i32 @llvm.ctpop.i32(i32 %4810) #16
  %4812 = trunc i32 %4811 to i8
  %4813 = and i8 %4812, 1
  %4814 = xor i8 %4813, 1
  %4815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4814, i8* %4815, align 1, !tbaa !2446
  %4816 = xor i64 1, %4799
  %4817 = trunc i64 %4816 to i32
  %4818 = xor i32 %4817, %4803
  %4819 = lshr i32 %4818, 4
  %4820 = trunc i32 %4819 to i8
  %4821 = and i8 %4820, 1
  %4822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4821, i8* %4822, align 1, !tbaa !2447
  %4823 = icmp eq i32 %4803, 0
  %4824 = zext i1 %4823 to i8
  %4825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4824, i8* %4825, align 1, !tbaa !2448
  %4826 = lshr i32 %4803, 31
  %4827 = trunc i32 %4826 to i8
  %4828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4827, i8* %4828, align 1, !tbaa !2449
  %4829 = lshr i32 %4802, 31
  %4830 = xor i32 %4826, %4829
  %4831 = add nuw nsw i32 %4830, %4826
  %4832 = icmp eq i32 %4831, 2
  %4833 = zext i1 %4832 to i8
  %4834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4833, i8* %4834, align 1, !tbaa !2450
  %4835 = load i64, i64* %RBP
  %4836 = sub i64 %4835, 12
  %4837 = load i32, i32* %EAX
  %4838 = zext i32 %4837 to i64
  %4839 = load i64, i64* %PC
  %4840 = add i64 %4839, 3
  store i64 %4840, i64* %PC
  %4841 = inttoptr i64 %4836 to i32*
  store i32 %4837, i32* %4841
  %4842 = load i64, i64* %PC
  %4843 = sub i64 %4842, 52
  %4844 = load i64, i64* %PC
  %4845 = add i64 %4844, 5
  store i64 %4845, i64* %PC
  %4846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4843, i64* %4846, align 8, !tbaa !2428
  br label %block_40108a

block_400e8e:                                     ; preds = %block_400e71, %block_400efc
  %MEMORY.24 = phi %struct.Memory* [ %MEMORY.12, %block_400e71 ], [ %MEMORY.21, %block_400efc ]
  %4847 = load i64, i64* %RBP
  %4848 = sub i64 %4847, 4
  %4849 = load i64, i64* %PC
  %4850 = add i64 %4849, 4
  store i64 %4850, i64* %PC
  %4851 = inttoptr i64 %4848 to i32*
  %4852 = load i32, i32* %4851
  %4853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4853, align 1, !tbaa !2432
  %4854 = and i32 %4852, 255
  %4855 = call i32 @llvm.ctpop.i32(i32 %4854) #16
  %4856 = trunc i32 %4855 to i8
  %4857 = and i8 %4856, 1
  %4858 = xor i8 %4857, 1
  %4859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4858, i8* %4859, align 1, !tbaa !2446
  %4860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4860, align 1, !tbaa !2447
  %4861 = icmp eq i32 %4852, 0
  %4862 = zext i1 %4861 to i8
  %4863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4862, i8* %4863, align 1, !tbaa !2448
  %4864 = lshr i32 %4852, 31
  %4865 = trunc i32 %4864 to i8
  %4866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4865, i8* %4866, align 1, !tbaa !2449
  %4867 = lshr i32 %4852, 31
  %4868 = xor i32 %4864, %4867
  %4869 = add nuw nsw i32 %4868, %4867
  %4870 = icmp eq i32 %4869, 2
  %4871 = zext i1 %4870 to i8
  %4872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4871, i8* %4872, align 1, !tbaa !2450
  %4873 = load i64, i64* %PC
  %4874 = add i64 %4873, 125
  %4875 = load i64, i64* %PC
  %4876 = add i64 %4875, 6
  %4877 = load i64, i64* %PC
  %4878 = add i64 %4877, 6
  store i64 %4878, i64* %PC
  %4879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4880 = load i8, i8* %4879, align 1, !tbaa !2448
  %4881 = icmp eq i8 %4880, 0
  %4882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4883 = load i8, i8* %4882, align 1, !tbaa !2449
  %4884 = icmp ne i8 %4883, 0
  %4885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4886 = load i8, i8* %4885, align 1, !tbaa !2450
  %4887 = icmp ne i8 %4886, 0
  %4888 = xor i1 %4884, %4887
  %4889 = xor i1 %4888, true
  %4890 = and i1 %4881, %4889
  %4891 = zext i1 %4890 to i8
  store i8 %4891, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4893 = select i1 %4890, i64 %4874, i64 %4876
  store i64 %4893, i64* %4892, align 8, !tbaa !2428
  %4894 = load i8, i8* %BRANCH_TAKEN
  %4895 = icmp eq i8 %4894, 1
  br i1 %4895, label %block_400f0f, label %block_400e98

block_400c84:                                     ; preds = %block_400c27
  %4896 = load i64, i64* %PC
  %4897 = add i64 %4896, 5
  %4898 = load i64, i64* %PC
  %4899 = add i64 %4898, 5
  store i64 %4899, i64* %PC
  %4900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4897, i64* %4900, align 8, !tbaa !2428
  %4901 = load i64, i64* %RBP
  %4902 = sub i64 %4901, 4
  %4903 = load i64, i64* %PC
  %4904 = add i64 %4903, 3
  store i64 %4904, i64* %PC
  %4905 = inttoptr i64 %4902 to i32*
  %4906 = load i32, i32* %4905
  %4907 = zext i32 %4906 to i64
  store i64 %4907, i64* %RAX, align 8, !tbaa !2428
  %4908 = load i64, i64* %RAX
  %4909 = load i64, i64* %PC
  %4910 = add i64 %4909, 3
  store i64 %4910, i64* %PC
  %4911 = trunc i64 %4908 to i32
  %4912 = add i32 1, %4911
  %4913 = zext i32 %4912 to i64
  store i64 %4913, i64* %RAX, align 8, !tbaa !2428
  %4914 = icmp ult i32 %4912, %4911
  %4915 = icmp ult i32 %4912, 1
  %4916 = or i1 %4914, %4915
  %4917 = zext i1 %4916 to i8
  %4918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4917, i8* %4918, align 1, !tbaa !2432
  %4919 = and i32 %4912, 255
  %4920 = call i32 @llvm.ctpop.i32(i32 %4919) #16
  %4921 = trunc i32 %4920 to i8
  %4922 = and i8 %4921, 1
  %4923 = xor i8 %4922, 1
  %4924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4923, i8* %4924, align 1, !tbaa !2446
  %4925 = xor i64 1, %4908
  %4926 = trunc i64 %4925 to i32
  %4927 = xor i32 %4926, %4912
  %4928 = lshr i32 %4927, 4
  %4929 = trunc i32 %4928 to i8
  %4930 = and i8 %4929, 1
  %4931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4930, i8* %4931, align 1, !tbaa !2447
  %4932 = icmp eq i32 %4912, 0
  %4933 = zext i1 %4932 to i8
  %4934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4933, i8* %4934, align 1, !tbaa !2448
  %4935 = lshr i32 %4912, 31
  %4936 = trunc i32 %4935 to i8
  %4937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4936, i8* %4937, align 1, !tbaa !2449
  %4938 = lshr i32 %4911, 31
  %4939 = xor i32 %4935, %4938
  %4940 = add nuw nsw i32 %4939, %4935
  %4941 = icmp eq i32 %4940, 2
  %4942 = zext i1 %4941 to i8
  %4943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4942, i8* %4943, align 1, !tbaa !2450
  %4944 = load i64, i64* %RBP
  %4945 = sub i64 %4944, 4
  %4946 = load i32, i32* %EAX
  %4947 = zext i32 %4946 to i64
  %4948 = load i64, i64* %PC
  %4949 = add i64 %4948, 3
  store i64 %4949, i64* %PC
  %4950 = inttoptr i64 %4945 to i32*
  store i32 %4946, i32* %4950
  %4951 = load i64, i64* %PC
  %4952 = sub i64 %4951, 124
  %4953 = load i64, i64* %PC
  %4954 = add i64 %4953, 5
  store i64 %4954, i64* %PC
  %4955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4952, i64* %4955, align 8, !tbaa !2428
  br label %block_400c16

block_400aeb:                                     ; preds = %block_400b35, %block_400ae4
  %MEMORY.25 = phi %struct.Memory* [ %MEMORY.29, %block_400ae4 ], [ %MEMORY.23, %block_400b35 ]
  %4956 = load i64, i64* %RBP
  %4957 = sub i64 %4956, 8
  %4958 = load i64, i64* %PC
  %4959 = add i64 %4958, 4
  store i64 %4959, i64* %PC
  %4960 = inttoptr i64 %4957 to i32*
  %4961 = load i32, i32* %4960
  %4962 = sub i32 %4961, 3
  %4963 = icmp ult i32 %4961, 3
  %4964 = zext i1 %4963 to i8
  %4965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4964, i8* %4965, align 1, !tbaa !2432
  %4966 = and i32 %4962, 255
  %4967 = call i32 @llvm.ctpop.i32(i32 %4966) #16
  %4968 = trunc i32 %4967 to i8
  %4969 = and i8 %4968, 1
  %4970 = xor i8 %4969, 1
  %4971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4970, i8* %4971, align 1, !tbaa !2446
  %4972 = xor i32 %4961, 3
  %4973 = xor i32 %4972, %4962
  %4974 = lshr i32 %4973, 4
  %4975 = trunc i32 %4974 to i8
  %4976 = and i8 %4975, 1
  %4977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4976, i8* %4977, align 1, !tbaa !2447
  %4978 = icmp eq i32 %4962, 0
  %4979 = zext i1 %4978 to i8
  %4980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4979, i8* %4980, align 1, !tbaa !2448
  %4981 = lshr i32 %4962, 31
  %4982 = trunc i32 %4981 to i8
  %4983 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4982, i8* %4983, align 1, !tbaa !2449
  %4984 = lshr i32 %4961, 31
  %4985 = xor i32 %4981, %4984
  %4986 = add nuw nsw i32 %4985, %4984
  %4987 = icmp eq i32 %4986, 2
  %4988 = zext i1 %4987 to i8
  %4989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4988, i8* %4989, align 1, !tbaa !2450
  %4990 = load i64, i64* %PC
  %4991 = add i64 %4990, 89
  %4992 = load i64, i64* %PC
  %4993 = add i64 %4992, 6
  %4994 = load i64, i64* %PC
  %4995 = add i64 %4994, 6
  store i64 %4995, i64* %PC
  %4996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4997 = load i8, i8* %4996, align 1, !tbaa !2448
  %4998 = icmp eq i8 %4997, 0
  %4999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5000 = load i8, i8* %4999, align 1, !tbaa !2449
  %5001 = icmp ne i8 %5000, 0
  %5002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5003 = load i8, i8* %5002, align 1, !tbaa !2450
  %5004 = icmp ne i8 %5003, 0
  %5005 = xor i1 %5001, %5004
  %5006 = xor i1 %5005, true
  %5007 = and i1 %4998, %5006
  %5008 = zext i1 %5007 to i8
  store i8 %5008, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5010 = select i1 %5007, i64 %4991, i64 %4993
  store i64 %5010, i64* %5009, align 8, !tbaa !2428
  %5011 = load i8, i8* %BRANCH_TAKEN
  %5012 = icmp eq i8 %5011, 1
  br i1 %5012, label %block_400b48, label %block_400af5

block_4008d2:                                     ; preds = %block_4008cb, %block_4008dc
  %MEMORY.26 = phi %struct.Memory* [ %MEMORY.30, %block_4008cb ], [ %MEMORY.26, %block_4008dc ]
  %5013 = load i64, i64* %RBP
  %5014 = sub i64 %5013, 12
  %5015 = load i64, i64* %PC
  %5016 = add i64 %5015, 4
  store i64 %5016, i64* %PC
  %5017 = inttoptr i64 %5014 to i32*
  %5018 = load i32, i32* %5017
  %5019 = sub i32 %5018, 5
  %5020 = icmp ult i32 %5018, 5
  %5021 = zext i1 %5020 to i8
  %5022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5021, i8* %5022, align 1, !tbaa !2432
  %5023 = and i32 %5019, 255
  %5024 = call i32 @llvm.ctpop.i32(i32 %5023) #16
  %5025 = trunc i32 %5024 to i8
  %5026 = and i8 %5025, 1
  %5027 = xor i8 %5026, 1
  %5028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5027, i8* %5028, align 1, !tbaa !2446
  %5029 = xor i32 %5018, 5
  %5030 = xor i32 %5029, %5019
  %5031 = lshr i32 %5030, 4
  %5032 = trunc i32 %5031 to i8
  %5033 = and i8 %5032, 1
  %5034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5033, i8* %5034, align 1, !tbaa !2447
  %5035 = icmp eq i32 %5019, 0
  %5036 = zext i1 %5035 to i8
  %5037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5036, i8* %5037, align 1, !tbaa !2448
  %5038 = lshr i32 %5019, 31
  %5039 = trunc i32 %5038 to i8
  %5040 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5039, i8* %5040, align 1, !tbaa !2449
  %5041 = lshr i32 %5018, 31
  %5042 = xor i32 %5038, %5041
  %5043 = add nuw nsw i32 %5042, %5041
  %5044 = icmp eq i32 %5043, 2
  %5045 = zext i1 %5044 to i8
  %5046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5045, i8* %5046, align 1, !tbaa !2450
  %5047 = load i64, i64* %PC
  %5048 = add i64 %5047, 53
  %5049 = load i64, i64* %PC
  %5050 = add i64 %5049, 6
  %5051 = load i64, i64* %PC
  %5052 = add i64 %5051, 6
  store i64 %5052, i64* %PC
  %5053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5054 = load i8, i8* %5053, align 1, !tbaa !2448
  %5055 = icmp eq i8 %5054, 0
  %5056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5057 = load i8, i8* %5056, align 1, !tbaa !2449
  %5058 = icmp ne i8 %5057, 0
  %5059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5060 = load i8, i8* %5059, align 1, !tbaa !2450
  %5061 = icmp ne i8 %5060, 0
  %5062 = xor i1 %5058, %5061
  %5063 = xor i1 %5062, true
  %5064 = and i1 %5055, %5063
  %5065 = zext i1 %5064 to i8
  store i8 %5065, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5067 = select i1 %5064, i64 %5048, i64 %5050
  store i64 %5067, i64* %5066, align 8, !tbaa !2428
  %5068 = load i8, i8* %BRANCH_TAKEN
  %5069 = icmp eq i8 %5068, 1
  br i1 %5069, label %block_40090b, label %block_4008dc

block_401083:                                     ; preds = %block_401079
  %5070 = load i64, i64* %RBP
  %5071 = sub i64 %5070, 12
  %5072 = load i64, i64* %PC
  %5073 = add i64 %5072, 7
  store i64 %5073, i64* %PC
  %5074 = inttoptr i64 %5071 to i32*
  store i32 0, i32* %5074
  br label %block_40108a

block_400f58:                                     ; preds = %block_400f4e
  %5075 = load i64, i64* %RBP
  %5076 = sub i64 %5075, 4
  %5077 = load i64, i64* %PC
  %5078 = add i64 %5077, 3
  store i64 %5078, i64* %PC
  %5079 = inttoptr i64 %5076 to i32*
  %5080 = load i32, i32* %5079
  %5081 = zext i32 %5080 to i64
  store i64 %5081, i64* %RAX, align 8, !tbaa !2428
  %5082 = load i64, i64* %RBP
  %5083 = sub i64 %5082, 8
  %5084 = load i64, i64* %PC
  %5085 = add i64 %5084, 3
  store i64 %5085, i64* %PC
  %5086 = inttoptr i64 %5083 to i32*
  %5087 = load i32, i32* %5086
  %5088 = zext i32 %5087 to i64
  store i64 %5088, i64* %RCX, align 8, !tbaa !2428
  %5089 = load i64, i64* %RBP
  %5090 = sub i64 %5089, 12
  %5091 = load i64, i64* %PC
  %5092 = add i64 %5091, 3
  store i64 %5092, i64* %PC
  %5093 = inttoptr i64 %5090 to i32*
  %5094 = load i32, i32* %5093
  %5095 = zext i32 %5094 to i64
  store i64 %5095, i64* %RDX, align 8, !tbaa !2428
  %5096 = load i64, i64* %RDX
  %5097 = load i64, i64* %PC
  %5098 = add i64 %5097, 3
  store i64 %5098, i64* %PC
  %5099 = and i64 %5096, 4294967295
  %5100 = shl i64 %5099, 2
  %5101 = trunc i64 %5100 to i32
  %5102 = icmp slt i32 %5101, 0
  %5103 = shl i32 %5101, 1
  %5104 = zext i32 %5103 to i64
  store i64 %5104, i64* %RDX, align 8, !tbaa !2428
  %5105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5106 = zext i1 %5102 to i8
  store i8 %5106, i8* %5105, align 1, !tbaa !2451
  %5107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5108 = and i32 %5103, 254
  %5109 = call i32 @llvm.ctpop.i32(i32 %5108) #16
  %5110 = trunc i32 %5109 to i8
  %5111 = and i8 %5110, 1
  %5112 = xor i8 %5111, 1
  store i8 %5112, i8* %5107, align 1, !tbaa !2451
  %5113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5113, align 1, !tbaa !2451
  %5114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5115 = icmp eq i32 %5103, 0
  %5116 = zext i1 %5115 to i8
  store i8 %5116, i8* %5114, align 1, !tbaa !2451
  %5117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5118 = lshr i32 %5103, 31
  %5119 = trunc i32 %5118 to i8
  store i8 %5119, i8* %5117, align 1, !tbaa !2451
  %5120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5120, align 1, !tbaa !2451
  %5121 = load i64, i64* %RCX
  %5122 = load i32, i32* %EDX
  %5123 = zext i32 %5122 to i64
  %5124 = load i64, i64* %PC
  %5125 = add i64 %5124, 2
  store i64 %5125, i64* %PC
  %5126 = trunc i64 %5121 to i32
  %5127 = add i32 %5122, %5126
  %5128 = zext i32 %5127 to i64
  store i64 %5128, i64* %RCX, align 8, !tbaa !2428
  %5129 = icmp ult i32 %5127, %5126
  %5130 = icmp ult i32 %5127, %5122
  %5131 = or i1 %5129, %5130
  %5132 = zext i1 %5131 to i8
  %5133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5132, i8* %5133, align 1, !tbaa !2432
  %5134 = and i32 %5127, 255
  %5135 = call i32 @llvm.ctpop.i32(i32 %5134) #16
  %5136 = trunc i32 %5135 to i8
  %5137 = and i8 %5136, 1
  %5138 = xor i8 %5137, 1
  %5139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5138, i8* %5139, align 1, !tbaa !2446
  %5140 = xor i64 %5123, %5121
  %5141 = trunc i64 %5140 to i32
  %5142 = xor i32 %5141, %5127
  %5143 = lshr i32 %5142, 4
  %5144 = trunc i32 %5143 to i8
  %5145 = and i8 %5144, 1
  %5146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5145, i8* %5146, align 1, !tbaa !2447
  %5147 = icmp eq i32 %5127, 0
  %5148 = zext i1 %5147 to i8
  %5149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5148, i8* %5149, align 1, !tbaa !2448
  %5150 = lshr i32 %5127, 31
  %5151 = trunc i32 %5150 to i8
  %5152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5151, i8* %5152, align 1, !tbaa !2449
  %5153 = lshr i32 %5126, 31
  %5154 = lshr i32 %5122, 31
  %5155 = xor i32 %5150, %5153
  %5156 = xor i32 %5150, %5154
  %5157 = add nuw nsw i32 %5155, %5156
  %5158 = icmp eq i32 %5157, 2
  %5159 = zext i1 %5158 to i8
  %5160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5159, i8* %5160, align 1, !tbaa !2450
  %5161 = load i64, i64* %RCX
  %5162 = load i64, i64* %PC
  %5163 = add i64 %5162, 3
  store i64 %5163, i64* %PC
  %5164 = and i64 %5161, 4294967295
  %5165 = shl i64 %5164, 2
  %5166 = trunc i64 %5165 to i32
  %5167 = icmp slt i32 %5166, 0
  %5168 = shl i32 %5166, 1
  %5169 = zext i32 %5168 to i64
  store i64 %5169, i64* %RCX, align 8, !tbaa !2428
  %5170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5171 = zext i1 %5167 to i8
  store i8 %5171, i8* %5170, align 1, !tbaa !2451
  %5172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5173 = and i32 %5168, 254
  %5174 = call i32 @llvm.ctpop.i32(i32 %5173) #16
  %5175 = trunc i32 %5174 to i8
  %5176 = and i8 %5175, 1
  %5177 = xor i8 %5176, 1
  store i8 %5177, i8* %5172, align 1, !tbaa !2451
  %5178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5178, align 1, !tbaa !2451
  %5179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5180 = icmp eq i32 %5168, 0
  %5181 = zext i1 %5180 to i8
  store i8 %5181, i8* %5179, align 1, !tbaa !2451
  %5182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5183 = lshr i32 %5168, 31
  %5184 = trunc i32 %5183 to i8
  store i8 %5184, i8* %5182, align 1, !tbaa !2451
  %5185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5185, align 1, !tbaa !2451
  %5186 = load i64, i64* %RAX
  %5187 = load i32, i32* %ECX
  %5188 = zext i32 %5187 to i64
  %5189 = load i64, i64* %PC
  %5190 = add i64 %5189, 2
  store i64 %5190, i64* %PC
  %5191 = trunc i64 %5186 to i32
  %5192 = add i32 %5187, %5191
  %5193 = zext i32 %5192 to i64
  store i64 %5193, i64* %RAX, align 8, !tbaa !2428
  %5194 = icmp ult i32 %5192, %5191
  %5195 = icmp ult i32 %5192, %5187
  %5196 = or i1 %5194, %5195
  %5197 = zext i1 %5196 to i8
  %5198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5197, i8* %5198, align 1, !tbaa !2432
  %5199 = and i32 %5192, 255
  %5200 = call i32 @llvm.ctpop.i32(i32 %5199) #16
  %5201 = trunc i32 %5200 to i8
  %5202 = and i8 %5201, 1
  %5203 = xor i8 %5202, 1
  %5204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5203, i8* %5204, align 1, !tbaa !2446
  %5205 = xor i64 %5188, %5186
  %5206 = trunc i64 %5205 to i32
  %5207 = xor i32 %5206, %5192
  %5208 = lshr i32 %5207, 4
  %5209 = trunc i32 %5208 to i8
  %5210 = and i8 %5209, 1
  %5211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5210, i8* %5211, align 1, !tbaa !2447
  %5212 = icmp eq i32 %5192, 0
  %5213 = zext i1 %5212 to i8
  %5214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5213, i8* %5214, align 1, !tbaa !2448
  %5215 = lshr i32 %5192, 31
  %5216 = trunc i32 %5215 to i8
  %5217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5216, i8* %5217, align 1, !tbaa !2449
  %5218 = lshr i32 %5191, 31
  %5219 = lshr i32 %5187, 31
  %5220 = xor i32 %5215, %5218
  %5221 = xor i32 %5215, %5219
  %5222 = add nuw nsw i32 %5220, %5221
  %5223 = icmp eq i32 %5222, 2
  %5224 = zext i1 %5223 to i8
  %5225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5224, i8* %5225, align 1, !tbaa !2450
  %5226 = load i32, i32* %EAX
  %5227 = zext i32 %5226 to i64
  %5228 = load i64, i64* %PC
  %5229 = add i64 %5228, 3
  store i64 %5229, i64* %PC
  %5230 = shl i64 %5227, 32
  %5231 = ashr exact i64 %5230, 32
  store i64 %5231, i64* %RSI, align 8, !tbaa !2428
  %5232 = load i64, i64* %RSI
  %5233 = mul i64 %5232, 4
  %5234 = add i64 %5233, add (i64 ptrtoint (%p_type* @p to i64), i64 18432)
  %5235 = load i64, i64* %PC
  %5236 = add i64 %5235, 11
  store i64 %5236, i64* %PC
  %5237 = inttoptr i64 %5234 to i32*
  store i32 1, i32* %5237
  %5238 = load i64, i64* %RBP
  %5239 = sub i64 %5238, 12
  %5240 = load i64, i64* %PC
  %5241 = add i64 %5240, 3
  store i64 %5241, i64* %PC
  %5242 = inttoptr i64 %5239 to i32*
  %5243 = load i32, i32* %5242
  %5244 = zext i32 %5243 to i64
  store i64 %5244, i64* %RAX, align 8, !tbaa !2428
  %5245 = load i64, i64* %RAX
  %5246 = load i64, i64* %PC
  %5247 = add i64 %5246, 3
  store i64 %5247, i64* %PC
  %5248 = trunc i64 %5245 to i32
  %5249 = add i32 1, %5248
  %5250 = zext i32 %5249 to i64
  store i64 %5250, i64* %RAX, align 8, !tbaa !2428
  %5251 = icmp ult i32 %5249, %5248
  %5252 = icmp ult i32 %5249, 1
  %5253 = or i1 %5251, %5252
  %5254 = zext i1 %5253 to i8
  %5255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5254, i8* %5255, align 1, !tbaa !2432
  %5256 = and i32 %5249, 255
  %5257 = call i32 @llvm.ctpop.i32(i32 %5256) #16
  %5258 = trunc i32 %5257 to i8
  %5259 = and i8 %5258, 1
  %5260 = xor i8 %5259, 1
  %5261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5260, i8* %5261, align 1, !tbaa !2446
  %5262 = xor i64 1, %5245
  %5263 = trunc i64 %5262 to i32
  %5264 = xor i32 %5263, %5249
  %5265 = lshr i32 %5264, 4
  %5266 = trunc i32 %5265 to i8
  %5267 = and i8 %5266, 1
  %5268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5267, i8* %5268, align 1, !tbaa !2447
  %5269 = icmp eq i32 %5249, 0
  %5270 = zext i1 %5269 to i8
  %5271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5270, i8* %5271, align 1, !tbaa !2448
  %5272 = lshr i32 %5249, 31
  %5273 = trunc i32 %5272 to i8
  %5274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5273, i8* %5274, align 1, !tbaa !2449
  %5275 = lshr i32 %5248, 31
  %5276 = xor i32 %5272, %5275
  %5277 = add nuw nsw i32 %5276, %5272
  %5278 = icmp eq i32 %5277, 2
  %5279 = zext i1 %5278 to i8
  %5280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5279, i8* %5280, align 1, !tbaa !2450
  %5281 = load i64, i64* %RBP
  %5282 = sub i64 %5281, 12
  %5283 = load i32, i32* %EAX
  %5284 = zext i32 %5283 to i64
  %5285 = load i64, i64* %PC
  %5286 = add i64 %5285, 3
  store i64 %5286, i64* %PC
  %5287 = inttoptr i64 %5282 to i32*
  store i32 %5283, i32* %5287
  %5288 = load i64, i64* %PC
  %5289 = sub i64 %5288, 52
  %5290 = load i64, i64* %PC
  %5291 = add i64 %5290, 5
  store i64 %5291, i64* %PC
  %5292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5289, i64* %5292, align 8, !tbaa !2428
  br label %block_400f4e

block_4009c0:                                     ; preds = %block_4009ca, %block_4009b9
  %MEMORY.27 = phi %struct.Memory* [ %MEMORY.3, %block_4009b9 ], [ %MEMORY.27, %block_4009ca ]
  %5293 = load i64, i64* %RBP
  %5294 = sub i64 %5293, 12
  %5295 = load i64, i64* %PC
  %5296 = add i64 %5295, 4
  store i64 %5296, i64* %PC
  %5297 = inttoptr i64 %5294 to i32*
  %5298 = load i32, i32* %5297
  %5299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5299, align 1, !tbaa !2432
  %5300 = and i32 %5298, 255
  %5301 = call i32 @llvm.ctpop.i32(i32 %5300) #16
  %5302 = trunc i32 %5301 to i8
  %5303 = and i8 %5302, 1
  %5304 = xor i8 %5303, 1
  %5305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5304, i8* %5305, align 1, !tbaa !2446
  %5306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5306, align 1, !tbaa !2447
  %5307 = icmp eq i32 %5298, 0
  %5308 = zext i1 %5307 to i8
  %5309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5308, i8* %5309, align 1, !tbaa !2448
  %5310 = lshr i32 %5298, 31
  %5311 = trunc i32 %5310 to i8
  %5312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5311, i8* %5312, align 1, !tbaa !2449
  %5313 = lshr i32 %5298, 31
  %5314 = xor i32 %5310, %5313
  %5315 = add nuw nsw i32 %5314, %5313
  %5316 = icmp eq i32 %5315, 2
  %5317 = zext i1 %5316 to i8
  %5318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5317, i8* %5318, align 1, !tbaa !2450
  %5319 = load i64, i64* %PC
  %5320 = add i64 %5319, 53
  %5321 = load i64, i64* %PC
  %5322 = add i64 %5321, 6
  %5323 = load i64, i64* %PC
  %5324 = add i64 %5323, 6
  store i64 %5324, i64* %PC
  %5325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5326 = load i8, i8* %5325, align 1, !tbaa !2448
  %5327 = icmp eq i8 %5326, 0
  %5328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5329 = load i8, i8* %5328, align 1, !tbaa !2449
  %5330 = icmp ne i8 %5329, 0
  %5331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5332 = load i8, i8* %5331, align 1, !tbaa !2450
  %5333 = icmp ne i8 %5332, 0
  %5334 = xor i1 %5330, %5333
  %5335 = xor i1 %5334, true
  %5336 = and i1 %5327, %5335
  %5337 = zext i1 %5336 to i8
  store i8 %5337, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5339 = select i1 %5336, i64 %5320, i64 %5322
  store i64 %5339, i64* %5338, align 8, !tbaa !2428
  %5340 = load i8, i8* %BRANCH_TAKEN
  %5341 = icmp eq i8 %5340, 1
  br i1 %5341, label %block_4009f9, label %block_4009ca

block_40087f:                                     ; preds = %block_40088c, %block_400870
  %MEMORY.28 = phi %struct.Memory* [ %2, %block_400870 ], [ %MEMORY.28, %block_40088c ]
  %5342 = load i64, i64* %RBP
  %5343 = sub i64 %5342, 16
  %5344 = load i64, i64* %PC
  %5345 = add i64 %5344, 7
  store i64 %5345, i64* %PC
  %5346 = inttoptr i64 %5343 to i32*
  %5347 = load i32, i32* %5346
  %5348 = sub i32 %5347, 511
  %5349 = icmp ult i32 %5347, 511
  %5350 = zext i1 %5349 to i8
  %5351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5350, i8* %5351, align 1, !tbaa !2432
  %5352 = and i32 %5348, 255
  %5353 = call i32 @llvm.ctpop.i32(i32 %5352) #16
  %5354 = trunc i32 %5353 to i8
  %5355 = and i8 %5354, 1
  %5356 = xor i8 %5355, 1
  %5357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5356, i8* %5357, align 1, !tbaa !2446
  %5358 = xor i32 %5347, 511
  %5359 = xor i32 %5358, %5348
  %5360 = lshr i32 %5359, 4
  %5361 = trunc i32 %5360 to i8
  %5362 = and i8 %5361, 1
  %5363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5362, i8* %5363, align 1, !tbaa !2447
  %5364 = icmp eq i32 %5348, 0
  %5365 = zext i1 %5364 to i8
  %5366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5365, i8* %5366, align 1, !tbaa !2448
  %5367 = lshr i32 %5348, 31
  %5368 = trunc i32 %5367 to i8
  %5369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5368, i8* %5369, align 1, !tbaa !2449
  %5370 = lshr i32 %5347, 31
  %5371 = xor i32 %5367, %5370
  %5372 = add nuw nsw i32 %5371, %5370
  %5373 = icmp eq i32 %5372, 2
  %5374 = zext i1 %5373 to i8
  %5375 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5374, i8* %5375, align 1, !tbaa !2450
  %5376 = load i64, i64* %PC
  %5377 = add i64 %5376, 35
  %5378 = load i64, i64* %PC
  %5379 = add i64 %5378, 6
  %5380 = load i64, i64* %PC
  %5381 = add i64 %5380, 6
  store i64 %5381, i64* %PC
  %5382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5383 = load i8, i8* %5382, align 1, !tbaa !2448
  %5384 = icmp eq i8 %5383, 0
  %5385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5386 = load i8, i8* %5385, align 1, !tbaa !2449
  %5387 = icmp ne i8 %5386, 0
  %5388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5389 = load i8, i8* %5388, align 1, !tbaa !2450
  %5390 = icmp ne i8 %5389, 0
  %5391 = xor i1 %5387, %5390
  %5392 = xor i1 %5391, true
  %5393 = and i1 %5384, %5392
  %5394 = zext i1 %5393 to i8
  store i8 %5394, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5396 = select i1 %5393, i64 %5377, i64 %5379
  store i64 %5396, i64* %5395, align 8, !tbaa !2428
  %5397 = load i8, i8* %BRANCH_TAKEN
  %5398 = icmp eq i8 %5397, 1
  %5399 = load i64, i64* %RBP
  br i1 %5398, label %block_4008a9, label %block_40088c

block_400ada:                                     ; preds = %block_400abd, %block_400b48
  %MEMORY.29 = phi %struct.Memory* [ %MEMORY.37, %block_400abd ], [ %MEMORY.25, %block_400b48 ]
  %5400 = load i64, i64* %RBP
  %5401 = sub i64 %5400, 4
  %5402 = load i64, i64* %PC
  %5403 = add i64 %5402, 4
  store i64 %5403, i64* %PC
  %5404 = inttoptr i64 %5401 to i32*
  %5405 = load i32, i32* %5404
  %5406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5406, align 1, !tbaa !2432
  %5407 = and i32 %5405, 255
  %5408 = call i32 @llvm.ctpop.i32(i32 %5407) #16
  %5409 = trunc i32 %5408 to i8
  %5410 = and i8 %5409, 1
  %5411 = xor i8 %5410, 1
  %5412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5411, i8* %5412, align 1, !tbaa !2446
  %5413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5413, align 1, !tbaa !2447
  %5414 = icmp eq i32 %5405, 0
  %5415 = zext i1 %5414 to i8
  %5416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5415, i8* %5416, align 1, !tbaa !2448
  %5417 = lshr i32 %5405, 31
  %5418 = trunc i32 %5417 to i8
  %5419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5418, i8* %5419, align 1, !tbaa !2449
  %5420 = lshr i32 %5405, 31
  %5421 = xor i32 %5417, %5420
  %5422 = add nuw nsw i32 %5421, %5420
  %5423 = icmp eq i32 %5422, 2
  %5424 = zext i1 %5423 to i8
  %5425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5424, i8* %5425, align 1, !tbaa !2450
  %5426 = load i64, i64* %PC
  %5427 = add i64 %5426, 125
  %5428 = load i64, i64* %PC
  %5429 = add i64 %5428, 6
  %5430 = load i64, i64* %PC
  %5431 = add i64 %5430, 6
  store i64 %5431, i64* %PC
  %5432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5433 = load i8, i8* %5432, align 1, !tbaa !2448
  %5434 = icmp eq i8 %5433, 0
  %5435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5436 = load i8, i8* %5435, align 1, !tbaa !2449
  %5437 = icmp ne i8 %5436, 0
  %5438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5439 = load i8, i8* %5438, align 1, !tbaa !2450
  %5440 = icmp ne i8 %5439, 0
  %5441 = xor i1 %5437, %5440
  %5442 = xor i1 %5441, true
  %5443 = and i1 %5434, %5442
  %5444 = zext i1 %5443 to i8
  store i8 %5444, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5446 = select i1 %5443, i64 %5427, i64 %5429
  store i64 %5446, i64* %5445, align 8, !tbaa !2428
  %5447 = load i8, i8* %BRANCH_TAKEN
  %5448 = icmp eq i8 %5447, 1
  br i1 %5448, label %block_400b5b, label %block_400ae4

block_4008c1:                                     ; preds = %block_4008ba, %block_40090b
  %MEMORY.30 = phi %struct.Memory* [ %MEMORY.18, %block_4008ba ], [ %MEMORY.26, %block_40090b ]
  %5449 = load i64, i64* %RBP
  %5450 = sub i64 %5449, 8
  %5451 = load i64, i64* %PC
  %5452 = add i64 %5451, 4
  store i64 %5452, i64* %PC
  %5453 = inttoptr i64 %5450 to i32*
  %5454 = load i32, i32* %5453
  %5455 = sub i32 %5454, 5
  %5456 = icmp ult i32 %5454, 5
  %5457 = zext i1 %5456 to i8
  %5458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5457, i8* %5458, align 1, !tbaa !2432
  %5459 = and i32 %5455, 255
  %5460 = call i32 @llvm.ctpop.i32(i32 %5459) #16
  %5461 = trunc i32 %5460 to i8
  %5462 = and i8 %5461, 1
  %5463 = xor i8 %5462, 1
  %5464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5463, i8* %5464, align 1, !tbaa !2446
  %5465 = xor i32 %5454, 5
  %5466 = xor i32 %5465, %5455
  %5467 = lshr i32 %5466, 4
  %5468 = trunc i32 %5467 to i8
  %5469 = and i8 %5468, 1
  %5470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5469, i8* %5470, align 1, !tbaa !2447
  %5471 = icmp eq i32 %5455, 0
  %5472 = zext i1 %5471 to i8
  %5473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5472, i8* %5473, align 1, !tbaa !2448
  %5474 = lshr i32 %5455, 31
  %5475 = trunc i32 %5474 to i8
  %5476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5475, i8* %5476, align 1, !tbaa !2449
  %5477 = lshr i32 %5454, 31
  %5478 = xor i32 %5474, %5477
  %5479 = add nuw nsw i32 %5478, %5477
  %5480 = icmp eq i32 %5479, 2
  %5481 = zext i1 %5480 to i8
  %5482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5481, i8* %5482, align 1, !tbaa !2450
  %5483 = load i64, i64* %PC
  %5484 = add i64 %5483, 89
  %5485 = load i64, i64* %PC
  %5486 = add i64 %5485, 6
  %5487 = load i64, i64* %PC
  %5488 = add i64 %5487, 6
  store i64 %5488, i64* %PC
  %5489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5490 = load i8, i8* %5489, align 1, !tbaa !2448
  %5491 = icmp eq i8 %5490, 0
  %5492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5493 = load i8, i8* %5492, align 1, !tbaa !2449
  %5494 = icmp ne i8 %5493, 0
  %5495 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5496 = load i8, i8* %5495, align 1, !tbaa !2450
  %5497 = icmp ne i8 %5496, 0
  %5498 = xor i1 %5494, %5497
  %5499 = xor i1 %5498, true
  %5500 = and i1 %5491, %5499
  %5501 = zext i1 %5500 to i8
  store i8 %5501, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5503 = select i1 %5500, i64 %5484, i64 %5486
  store i64 %5503, i64* %5502, align 8, !tbaa !2428
  %5504 = load i8, i8* %BRANCH_TAKEN
  %5505 = icmp eq i8 %5504, 1
  br i1 %5505, label %block_40091e, label %block_4008cb

block_401072:                                     ; preds = %block_401068
  %5506 = load i64, i64* %RBP
  %5507 = sub i64 %5506, 8
  %5508 = load i64, i64* %PC
  %5509 = add i64 %5508, 7
  store i64 %5509, i64* %PC
  %5510 = inttoptr i64 %5507 to i32*
  store i32 0, i32* %5510
  br label %block_401079

block_40108a:                                     ; preds = %block_401083, %block_401094
  %MEMORY.31 = phi %struct.Memory* [ %MEMORY.45, %block_401083 ], [ %MEMORY.31, %block_401094 ]
  %5511 = load i64, i64* %RBP
  %5512 = sub i64 %5511, 12
  %5513 = load i64, i64* %PC
  %5514 = add i64 %5513, 4
  store i64 %5514, i64* %PC
  %5515 = inttoptr i64 %5512 to i32*
  %5516 = load i32, i32* %5515
  %5517 = sub i32 %5516, 1
  %5518 = icmp ult i32 %5516, 1
  %5519 = zext i1 %5518 to i8
  %5520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5519, i8* %5520, align 1, !tbaa !2432
  %5521 = and i32 %5517, 255
  %5522 = call i32 @llvm.ctpop.i32(i32 %5521) #16
  %5523 = trunc i32 %5522 to i8
  %5524 = and i8 %5523, 1
  %5525 = xor i8 %5524, 1
  %5526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5525, i8* %5526, align 1, !tbaa !2446
  %5527 = xor i32 %5516, 1
  %5528 = xor i32 %5527, %5517
  %5529 = lshr i32 %5528, 4
  %5530 = trunc i32 %5529 to i8
  %5531 = and i8 %5530, 1
  %5532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5531, i8* %5532, align 1, !tbaa !2447
  %5533 = icmp eq i32 %5517, 0
  %5534 = zext i1 %5533 to i8
  %5535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5534, i8* %5535, align 1, !tbaa !2448
  %5536 = lshr i32 %5517, 31
  %5537 = trunc i32 %5536 to i8
  %5538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5537, i8* %5538, align 1, !tbaa !2449
  %5539 = lshr i32 %5516, 31
  %5540 = xor i32 %5536, %5539
  %5541 = add nuw nsw i32 %5540, %5539
  %5542 = icmp eq i32 %5541, 2
  %5543 = zext i1 %5542 to i8
  %5544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5543, i8* %5544, align 1, !tbaa !2450
  %5545 = load i64, i64* %PC
  %5546 = add i64 %5545, 53
  %5547 = load i64, i64* %PC
  %5548 = add i64 %5547, 6
  %5549 = load i64, i64* %PC
  %5550 = add i64 %5549, 6
  store i64 %5550, i64* %PC
  %5551 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5552 = load i8, i8* %5551, align 1, !tbaa !2448
  %5553 = icmp eq i8 %5552, 0
  %5554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5555 = load i8, i8* %5554, align 1, !tbaa !2449
  %5556 = icmp ne i8 %5555, 0
  %5557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5558 = load i8, i8* %5557, align 1, !tbaa !2450
  %5559 = icmp ne i8 %5558, 0
  %5560 = xor i1 %5556, %5559
  %5561 = xor i1 %5560, true
  %5562 = and i1 %5553, %5561
  %5563 = zext i1 %5562 to i8
  store i8 %5563, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5565 = select i1 %5562, i64 %5546, i64 %5548
  store i64 %5565, i64* %5564, align 8, !tbaa !2428
  %5566 = load i8, i8* %BRANCH_TAKEN
  %5567 = icmp eq i8 %5566, 1
  br i1 %5567, label %block_4010c3, label %block_401094

block_400e71:                                     ; preds = %block_400df0
  %5568 = load i64, i64* %PC
  %5569 = add i64 %5568, 11
  store i64 %5569, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 28) to i32*)
  %5570 = load i64, i64* %PC
  %5571 = add i64 %5570, 11
  store i64 %5571, i64* %PC
  store i32 16, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 28) to i32*)
  %5572 = load i64, i64* %RBP
  %5573 = sub i64 %5572, 4
  %5574 = load i64, i64* %PC
  %5575 = add i64 %5574, 7
  store i64 %5575, i64* %PC
  %5576 = inttoptr i64 %5573 to i32*
  store i32 0, i32* %5576
  br label %block_400e8e

block_401068:                                     ; preds = %block_4010d6, %block_40104b
  %MEMORY.32 = phi %struct.Memory* [ %MEMORY.1, %block_40104b ], [ %MEMORY.45, %block_4010d6 ]
  %5577 = load i64, i64* %RBP
  %5578 = sub i64 %5577, 4
  %5579 = load i64, i64* %PC
  %5580 = add i64 %5579, 4
  store i64 %5580, i64* %PC
  %5581 = inttoptr i64 %5578 to i32*
  %5582 = load i32, i32* %5581
  %5583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5583, align 1, !tbaa !2432
  %5584 = and i32 %5582, 255
  %5585 = call i32 @llvm.ctpop.i32(i32 %5584) #16
  %5586 = trunc i32 %5585 to i8
  %5587 = and i8 %5586, 1
  %5588 = xor i8 %5587, 1
  %5589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5588, i8* %5589, align 1, !tbaa !2446
  %5590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5590, align 1, !tbaa !2447
  %5591 = icmp eq i32 %5582, 0
  %5592 = zext i1 %5591 to i8
  %5593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5592, i8* %5593, align 1, !tbaa !2448
  %5594 = lshr i32 %5582, 31
  %5595 = trunc i32 %5594 to i8
  %5596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5595, i8* %5596, align 1, !tbaa !2449
  %5597 = lshr i32 %5582, 31
  %5598 = xor i32 %5594, %5597
  %5599 = add nuw nsw i32 %5598, %5597
  %5600 = icmp eq i32 %5599, 2
  %5601 = zext i1 %5600 to i8
  %5602 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5601, i8* %5602, align 1, !tbaa !2450
  %5603 = load i64, i64* %PC
  %5604 = add i64 %5603, 125
  %5605 = load i64, i64* %PC
  %5606 = add i64 %5605, 6
  %5607 = load i64, i64* %PC
  %5608 = add i64 %5607, 6
  store i64 %5608, i64* %PC
  %5609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5610 = load i8, i8* %5609, align 1, !tbaa !2448
  %5611 = icmp eq i8 %5610, 0
  %5612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5613 = load i8, i8* %5612, align 1, !tbaa !2449
  %5614 = icmp ne i8 %5613, 0
  %5615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5616 = load i8, i8* %5615, align 1, !tbaa !2450
  %5617 = icmp ne i8 %5616, 0
  %5618 = xor i1 %5614, %5617
  %5619 = xor i1 %5618, true
  %5620 = and i1 %5611, %5619
  %5621 = zext i1 %5620 to i8
  store i8 %5621, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5623 = select i1 %5620, i64 %5604, i64 %5606
  store i64 %5623, i64* %5622, align 8, !tbaa !2428
  %5624 = load i8, i8* %BRANCH_TAKEN
  %5625 = icmp eq i8 %5624, 1
  br i1 %5625, label %block_4010e9, label %block_401072

block_400ae4:                                     ; preds = %block_400ada
  %5626 = load i64, i64* %RBP
  %5627 = sub i64 %5626, 8
  %5628 = load i64, i64* %PC
  %5629 = add i64 %5628, 7
  store i64 %5629, i64* %PC
  %5630 = inttoptr i64 %5627 to i32*
  store i32 0, i32* %5630
  br label %block_400aeb

block_4008cb:                                     ; preds = %block_4008c1
  %5631 = load i64, i64* %RBP
  %5632 = sub i64 %5631, 12
  %5633 = load i64, i64* %PC
  %5634 = add i64 %5633, 7
  store i64 %5634, i64* %PC
  %5635 = inttoptr i64 %5632 to i32*
  store i32 1, i32* %5635
  br label %block_4008d2

block_401174:                                     ; preds = %block_401117
  %5636 = load i64, i64* %PC
  %5637 = add i64 %5636, 5
  %5638 = load i64, i64* %PC
  %5639 = add i64 %5638, 5
  store i64 %5639, i64* %PC
  %5640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5637, i64* %5640, align 8, !tbaa !2428
  %5641 = load i64, i64* %RBP
  %5642 = sub i64 %5641, 4
  %5643 = load i64, i64* %PC
  %5644 = add i64 %5643, 3
  store i64 %5644, i64* %PC
  %5645 = inttoptr i64 %5642 to i32*
  %5646 = load i32, i32* %5645
  %5647 = zext i32 %5646 to i64
  store i64 %5647, i64* %RAX, align 8, !tbaa !2428
  %5648 = load i64, i64* %RAX
  %5649 = load i64, i64* %PC
  %5650 = add i64 %5649, 3
  store i64 %5650, i64* %PC
  %5651 = trunc i64 %5648 to i32
  %5652 = add i32 1, %5651
  %5653 = zext i32 %5652 to i64
  store i64 %5653, i64* %RAX, align 8, !tbaa !2428
  %5654 = icmp ult i32 %5652, %5651
  %5655 = icmp ult i32 %5652, 1
  %5656 = or i1 %5654, %5655
  %5657 = zext i1 %5656 to i8
  %5658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5657, i8* %5658, align 1, !tbaa !2432
  %5659 = and i32 %5652, 255
  %5660 = call i32 @llvm.ctpop.i32(i32 %5659) #16
  %5661 = trunc i32 %5660 to i8
  %5662 = and i8 %5661, 1
  %5663 = xor i8 %5662, 1
  %5664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5663, i8* %5664, align 1, !tbaa !2446
  %5665 = xor i64 1, %5648
  %5666 = trunc i64 %5665 to i32
  %5667 = xor i32 %5666, %5652
  %5668 = lshr i32 %5667, 4
  %5669 = trunc i32 %5668 to i8
  %5670 = and i8 %5669, 1
  %5671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5670, i8* %5671, align 1, !tbaa !2447
  %5672 = icmp eq i32 %5652, 0
  %5673 = zext i1 %5672 to i8
  %5674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5673, i8* %5674, align 1, !tbaa !2448
  %5675 = lshr i32 %5652, 31
  %5676 = trunc i32 %5675 to i8
  %5677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5676, i8* %5677, align 1, !tbaa !2449
  %5678 = lshr i32 %5651, 31
  %5679 = xor i32 %5675, %5678
  %5680 = add nuw nsw i32 %5679, %5675
  %5681 = icmp eq i32 %5680, 2
  %5682 = zext i1 %5681 to i8
  %5683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5682, i8* %5683, align 1, !tbaa !2450
  %5684 = load i64, i64* %RBP
  %5685 = sub i64 %5684, 4
  %5686 = load i32, i32* %EAX
  %5687 = zext i32 %5686 to i64
  %5688 = load i64, i64* %PC
  %5689 = add i64 %5688, 3
  store i64 %5689, i64* %PC
  %5690 = inttoptr i64 %5685 to i32*
  store i32 %5686, i32* %5690
  %5691 = load i64, i64* %PC
  %5692 = sub i64 %5691, 124
  %5693 = load i64, i64* %PC
  %5694 = add i64 %5693, 5
  store i64 %5694, i64* %PC
  %5695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5692, i64* %5695, align 8, !tbaa !2428
  br label %block_401106

block_400ff6:                                     ; preds = %block_400fec
  %5696 = load i64, i64* %RBP
  %5697 = sub i64 %5696, 4
  %5698 = load i64, i64* %PC
  %5699 = add i64 %5698, 3
  store i64 %5699, i64* %PC
  %5700 = inttoptr i64 %5697 to i32*
  %5701 = load i32, i32* %5700
  %5702 = zext i32 %5701 to i64
  store i64 %5702, i64* %RAX, align 8, !tbaa !2428
  %5703 = load i64, i64* %RBP
  %5704 = sub i64 %5703, 8
  %5705 = load i64, i64* %PC
  %5706 = add i64 %5705, 3
  store i64 %5706, i64* %PC
  %5707 = inttoptr i64 %5704 to i32*
  %5708 = load i32, i32* %5707
  %5709 = zext i32 %5708 to i64
  store i64 %5709, i64* %RCX, align 8, !tbaa !2428
  %5710 = load i64, i64* %RBP
  %5711 = sub i64 %5710, 12
  %5712 = load i64, i64* %PC
  %5713 = add i64 %5712, 3
  store i64 %5713, i64* %PC
  %5714 = inttoptr i64 %5711 to i32*
  %5715 = load i32, i32* %5714
  %5716 = zext i32 %5715 to i64
  store i64 %5716, i64* %RDX, align 8, !tbaa !2428
  %5717 = load i64, i64* %RDX
  %5718 = load i64, i64* %PC
  %5719 = add i64 %5718, 3
  store i64 %5719, i64* %PC
  %5720 = and i64 %5717, 4294967295
  %5721 = shl i64 %5720, 2
  %5722 = trunc i64 %5721 to i32
  %5723 = icmp slt i32 %5722, 0
  %5724 = shl i32 %5722, 1
  %5725 = zext i32 %5724 to i64
  store i64 %5725, i64* %RDX, align 8, !tbaa !2428
  %5726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5727 = zext i1 %5723 to i8
  store i8 %5727, i8* %5726, align 1, !tbaa !2451
  %5728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5729 = and i32 %5724, 254
  %5730 = call i32 @llvm.ctpop.i32(i32 %5729) #16
  %5731 = trunc i32 %5730 to i8
  %5732 = and i8 %5731, 1
  %5733 = xor i8 %5732, 1
  store i8 %5733, i8* %5728, align 1, !tbaa !2451
  %5734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5734, align 1, !tbaa !2451
  %5735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5736 = icmp eq i32 %5724, 0
  %5737 = zext i1 %5736 to i8
  store i8 %5737, i8* %5735, align 1, !tbaa !2451
  %5738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5739 = lshr i32 %5724, 31
  %5740 = trunc i32 %5739 to i8
  store i8 %5740, i8* %5738, align 1, !tbaa !2451
  %5741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5741, align 1, !tbaa !2451
  %5742 = load i64, i64* %RCX
  %5743 = load i32, i32* %EDX
  %5744 = zext i32 %5743 to i64
  %5745 = load i64, i64* %PC
  %5746 = add i64 %5745, 2
  store i64 %5746, i64* %PC
  %5747 = trunc i64 %5742 to i32
  %5748 = add i32 %5743, %5747
  %5749 = zext i32 %5748 to i64
  store i64 %5749, i64* %RCX, align 8, !tbaa !2428
  %5750 = icmp ult i32 %5748, %5747
  %5751 = icmp ult i32 %5748, %5743
  %5752 = or i1 %5750, %5751
  %5753 = zext i1 %5752 to i8
  %5754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5753, i8* %5754, align 1, !tbaa !2432
  %5755 = and i32 %5748, 255
  %5756 = call i32 @llvm.ctpop.i32(i32 %5755) #16
  %5757 = trunc i32 %5756 to i8
  %5758 = and i8 %5757, 1
  %5759 = xor i8 %5758, 1
  %5760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5759, i8* %5760, align 1, !tbaa !2446
  %5761 = xor i64 %5744, %5742
  %5762 = trunc i64 %5761 to i32
  %5763 = xor i32 %5762, %5748
  %5764 = lshr i32 %5763, 4
  %5765 = trunc i32 %5764 to i8
  %5766 = and i8 %5765, 1
  %5767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5766, i8* %5767, align 1, !tbaa !2447
  %5768 = icmp eq i32 %5748, 0
  %5769 = zext i1 %5768 to i8
  %5770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5769, i8* %5770, align 1, !tbaa !2448
  %5771 = lshr i32 %5748, 31
  %5772 = trunc i32 %5771 to i8
  %5773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5772, i8* %5773, align 1, !tbaa !2449
  %5774 = lshr i32 %5747, 31
  %5775 = lshr i32 %5743, 31
  %5776 = xor i32 %5771, %5774
  %5777 = xor i32 %5771, %5775
  %5778 = add nuw nsw i32 %5776, %5777
  %5779 = icmp eq i32 %5778, 2
  %5780 = zext i1 %5779 to i8
  %5781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5780, i8* %5781, align 1, !tbaa !2450
  %5782 = load i64, i64* %RCX
  %5783 = load i64, i64* %PC
  %5784 = add i64 %5783, 3
  store i64 %5784, i64* %PC
  %5785 = and i64 %5782, 4294967295
  %5786 = shl i64 %5785, 2
  %5787 = trunc i64 %5786 to i32
  %5788 = icmp slt i32 %5787, 0
  %5789 = shl i32 %5787, 1
  %5790 = zext i32 %5789 to i64
  store i64 %5790, i64* %RCX, align 8, !tbaa !2428
  %5791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5792 = zext i1 %5788 to i8
  store i8 %5792, i8* %5791, align 1, !tbaa !2451
  %5793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5794 = and i32 %5789, 254
  %5795 = call i32 @llvm.ctpop.i32(i32 %5794) #16
  %5796 = trunc i32 %5795 to i8
  %5797 = and i8 %5796, 1
  %5798 = xor i8 %5797, 1
  store i8 %5798, i8* %5793, align 1, !tbaa !2451
  %5799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5799, align 1, !tbaa !2451
  %5800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5801 = icmp eq i32 %5789, 0
  %5802 = zext i1 %5801 to i8
  store i8 %5802, i8* %5800, align 1, !tbaa !2451
  %5803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5804 = lshr i32 %5789, 31
  %5805 = trunc i32 %5804 to i8
  store i8 %5805, i8* %5803, align 1, !tbaa !2451
  %5806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5806, align 1, !tbaa !2451
  %5807 = load i64, i64* %RAX
  %5808 = load i32, i32* %ECX
  %5809 = zext i32 %5808 to i64
  %5810 = load i64, i64* %PC
  %5811 = add i64 %5810, 2
  store i64 %5811, i64* %PC
  %5812 = trunc i64 %5807 to i32
  %5813 = add i32 %5808, %5812
  %5814 = zext i32 %5813 to i64
  store i64 %5814, i64* %RAX, align 8, !tbaa !2428
  %5815 = icmp ult i32 %5813, %5812
  %5816 = icmp ult i32 %5813, %5808
  %5817 = or i1 %5815, %5816
  %5818 = zext i1 %5817 to i8
  %5819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5818, i8* %5819, align 1, !tbaa !2432
  %5820 = and i32 %5813, 255
  %5821 = call i32 @llvm.ctpop.i32(i32 %5820) #16
  %5822 = trunc i32 %5821 to i8
  %5823 = and i8 %5822, 1
  %5824 = xor i8 %5823, 1
  %5825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5824, i8* %5825, align 1, !tbaa !2446
  %5826 = xor i64 %5809, %5807
  %5827 = trunc i64 %5826 to i32
  %5828 = xor i32 %5827, %5813
  %5829 = lshr i32 %5828, 4
  %5830 = trunc i32 %5829 to i8
  %5831 = and i8 %5830, 1
  %5832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5831, i8* %5832, align 1, !tbaa !2447
  %5833 = icmp eq i32 %5813, 0
  %5834 = zext i1 %5833 to i8
  %5835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5834, i8* %5835, align 1, !tbaa !2448
  %5836 = lshr i32 %5813, 31
  %5837 = trunc i32 %5836 to i8
  %5838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5837, i8* %5838, align 1, !tbaa !2449
  %5839 = lshr i32 %5812, 31
  %5840 = lshr i32 %5808, 31
  %5841 = xor i32 %5836, %5839
  %5842 = xor i32 %5836, %5840
  %5843 = add nuw nsw i32 %5841, %5842
  %5844 = icmp eq i32 %5843, 2
  %5845 = zext i1 %5844 to i8
  %5846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5845, i8* %5846, align 1, !tbaa !2450
  %5847 = load i32, i32* %EAX
  %5848 = zext i32 %5847 to i64
  %5849 = load i64, i64* %PC
  %5850 = add i64 %5849, 3
  store i64 %5850, i64* %PC
  %5851 = shl i64 %5848, 32
  %5852 = ashr exact i64 %5851, 32
  store i64 %5852, i64* %RSI, align 8, !tbaa !2428
  %5853 = load i64, i64* %RSI
  %5854 = mul i64 %5853, 4
  %5855 = add i64 %5854, add (i64 ptrtoint (%p_type* @p to i64), i64 20480)
  %5856 = load i64, i64* %PC
  %5857 = add i64 %5856, 11
  store i64 %5857, i64* %PC
  %5858 = inttoptr i64 %5855 to i32*
  store i32 1, i32* %5858
  %5859 = load i64, i64* %RBP
  %5860 = sub i64 %5859, 12
  %5861 = load i64, i64* %PC
  %5862 = add i64 %5861, 3
  store i64 %5862, i64* %PC
  %5863 = inttoptr i64 %5860 to i32*
  %5864 = load i32, i32* %5863
  %5865 = zext i32 %5864 to i64
  store i64 %5865, i64* %RAX, align 8, !tbaa !2428
  %5866 = load i64, i64* %RAX
  %5867 = load i64, i64* %PC
  %5868 = add i64 %5867, 3
  store i64 %5868, i64* %PC
  %5869 = trunc i64 %5866 to i32
  %5870 = add i32 1, %5869
  %5871 = zext i32 %5870 to i64
  store i64 %5871, i64* %RAX, align 8, !tbaa !2428
  %5872 = icmp ult i32 %5870, %5869
  %5873 = icmp ult i32 %5870, 1
  %5874 = or i1 %5872, %5873
  %5875 = zext i1 %5874 to i8
  %5876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5875, i8* %5876, align 1, !tbaa !2432
  %5877 = and i32 %5870, 255
  %5878 = call i32 @llvm.ctpop.i32(i32 %5877) #16
  %5879 = trunc i32 %5878 to i8
  %5880 = and i8 %5879, 1
  %5881 = xor i8 %5880, 1
  %5882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5881, i8* %5882, align 1, !tbaa !2446
  %5883 = xor i64 1, %5866
  %5884 = trunc i64 %5883 to i32
  %5885 = xor i32 %5884, %5870
  %5886 = lshr i32 %5885, 4
  %5887 = trunc i32 %5886 to i8
  %5888 = and i8 %5887, 1
  %5889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5888, i8* %5889, align 1, !tbaa !2447
  %5890 = icmp eq i32 %5870, 0
  %5891 = zext i1 %5890 to i8
  %5892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5891, i8* %5892, align 1, !tbaa !2448
  %5893 = lshr i32 %5870, 31
  %5894 = trunc i32 %5893 to i8
  %5895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5894, i8* %5895, align 1, !tbaa !2449
  %5896 = lshr i32 %5869, 31
  %5897 = xor i32 %5893, %5896
  %5898 = add nuw nsw i32 %5897, %5893
  %5899 = icmp eq i32 %5898, 2
  %5900 = zext i1 %5899 to i8
  %5901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5900, i8* %5901, align 1, !tbaa !2450
  %5902 = load i64, i64* %RBP
  %5903 = sub i64 %5902, 12
  %5904 = load i32, i32* %EAX
  %5905 = zext i32 %5904 to i64
  %5906 = load i64, i64* %PC
  %5907 = add i64 %5906, 3
  store i64 %5907, i64* %PC
  %5908 = inttoptr i64 %5903 to i32*
  store i32 %5904, i32* %5908
  %5909 = load i64, i64* %PC
  %5910 = sub i64 %5909, 52
  %5911 = load i64, i64* %PC
  %5912 = add i64 %5911, 5
  store i64 %5912, i64* %PC
  %5913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5910, i64* %5913, align 8, !tbaa !2428
  br label %block_400fec

block_400a5e:                                     ; preds = %block_400a57, %block_400a68
  %MEMORY.33 = phi %struct.Memory* [ %MEMORY.35, %block_400a57 ], [ %MEMORY.33, %block_400a68 ]
  %5914 = load i64, i64* %RBP
  %5915 = sub i64 %5914, 12
  %5916 = load i64, i64* %PC
  %5917 = add i64 %5916, 4
  store i64 %5917, i64* %PC
  %5918 = inttoptr i64 %5915 to i32*
  %5919 = load i32, i32* %5918
  %5920 = sub i32 %5919, 3
  %5921 = icmp ult i32 %5919, 3
  %5922 = zext i1 %5921 to i8
  %5923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5922, i8* %5923, align 1, !tbaa !2432
  %5924 = and i32 %5920, 255
  %5925 = call i32 @llvm.ctpop.i32(i32 %5924) #16
  %5926 = trunc i32 %5925 to i8
  %5927 = and i8 %5926, 1
  %5928 = xor i8 %5927, 1
  %5929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5928, i8* %5929, align 1, !tbaa !2446
  %5930 = xor i32 %5919, 3
  %5931 = xor i32 %5930, %5920
  %5932 = lshr i32 %5931, 4
  %5933 = trunc i32 %5932 to i8
  %5934 = and i8 %5933, 1
  %5935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5934, i8* %5935, align 1, !tbaa !2447
  %5936 = icmp eq i32 %5920, 0
  %5937 = zext i1 %5936 to i8
  %5938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5937, i8* %5938, align 1, !tbaa !2448
  %5939 = lshr i32 %5920, 31
  %5940 = trunc i32 %5939 to i8
  %5941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5940, i8* %5941, align 1, !tbaa !2449
  %5942 = lshr i32 %5919, 31
  %5943 = xor i32 %5939, %5942
  %5944 = add nuw nsw i32 %5943, %5942
  %5945 = icmp eq i32 %5944, 2
  %5946 = zext i1 %5945 to i8
  %5947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5946, i8* %5947, align 1, !tbaa !2450
  %5948 = load i64, i64* %PC
  %5949 = add i64 %5948, 53
  %5950 = load i64, i64* %PC
  %5951 = add i64 %5950, 6
  %5952 = load i64, i64* %PC
  %5953 = add i64 %5952, 6
  store i64 %5953, i64* %PC
  %5954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5955 = load i8, i8* %5954, align 1, !tbaa !2448
  %5956 = icmp eq i8 %5955, 0
  %5957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5958 = load i8, i8* %5957, align 1, !tbaa !2449
  %5959 = icmp ne i8 %5958, 0
  %5960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5961 = load i8, i8* %5960, align 1, !tbaa !2450
  %5962 = icmp ne i8 %5961, 0
  %5963 = xor i1 %5959, %5962
  %5964 = xor i1 %5963, true
  %5965 = and i1 %5956, %5964
  %5966 = zext i1 %5965 to i8
  store i8 %5966, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %5967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5968 = select i1 %5965, i64 %5949, i64 %5951
  store i64 %5968, i64* %5967, align 8, !tbaa !2428
  %5969 = load i8, i8* %BRANCH_TAKEN
  %5970 = icmp eq i8 %5969, 1
  br i1 %5970, label %block_400a97, label %block_400a68

block_4008ba:                                     ; preds = %block_4008b0
  %5971 = sub i64 %4006, 8
  %5972 = load i64, i64* %PC
  %5973 = add i64 %5972, 7
  store i64 %5973, i64* %PC
  %5974 = inttoptr i64 %5971 to i32*
  store i32 1, i32* %5974
  br label %block_4008c1

block_400fdb:                                     ; preds = %block_401025, %block_400fd4
  %MEMORY.34 = phi %struct.Memory* [ %MEMORY.1, %block_400fd4 ], [ %MEMORY.0, %block_401025 ]
  %5975 = load i64, i64* %RBP
  %5976 = sub i64 %5975, 8
  %5977 = load i64, i64* %PC
  %5978 = add i64 %5977, 4
  store i64 %5978, i64* %PC
  %5979 = inttoptr i64 %5976 to i32*
  %5980 = load i32, i32* %5979
  %5981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5981, align 1, !tbaa !2432
  %5982 = and i32 %5980, 255
  %5983 = call i32 @llvm.ctpop.i32(i32 %5982) #16
  %5984 = trunc i32 %5983 to i8
  %5985 = and i8 %5984, 1
  %5986 = xor i8 %5985, 1
  %5987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5986, i8* %5987, align 1, !tbaa !2446
  %5988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5988, align 1, !tbaa !2447
  %5989 = icmp eq i32 %5980, 0
  %5990 = zext i1 %5989 to i8
  %5991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5990, i8* %5991, align 1, !tbaa !2448
  %5992 = lshr i32 %5980, 31
  %5993 = trunc i32 %5992 to i8
  %5994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5993, i8* %5994, align 1, !tbaa !2449
  %5995 = lshr i32 %5980, 31
  %5996 = xor i32 %5992, %5995
  %5997 = add nuw nsw i32 %5996, %5995
  %5998 = icmp eq i32 %5997, 2
  %5999 = zext i1 %5998 to i8
  %6000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5999, i8* %6000, align 1, !tbaa !2450
  %6001 = load i64, i64* %PC
  %6002 = add i64 %6001, 89
  %6003 = load i64, i64* %PC
  %6004 = add i64 %6003, 6
  %6005 = load i64, i64* %PC
  %6006 = add i64 %6005, 6
  store i64 %6006, i64* %PC
  %6007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6008 = load i8, i8* %6007, align 1, !tbaa !2448
  %6009 = icmp eq i8 %6008, 0
  %6010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6011 = load i8, i8* %6010, align 1, !tbaa !2449
  %6012 = icmp ne i8 %6011, 0
  %6013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6014 = load i8, i8* %6013, align 1, !tbaa !2450
  %6015 = icmp ne i8 %6014, 0
  %6016 = xor i1 %6012, %6015
  %6017 = xor i1 %6016, true
  %6018 = and i1 %6009, %6017
  %6019 = zext i1 %6018 to i8
  store i8 %6019, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6021 = select i1 %6018, i64 %6002, i64 %6004
  store i64 %6021, i64* %6020, align 8, !tbaa !2428
  %6022 = load i8, i8* %BRANCH_TAKEN
  %6023 = icmp eq i8 %6022, 1
  br i1 %6023, label %block_401038, label %block_400fe5

block_400d0f:                                     ; preds = %block_400cd6
  %6024 = load i64, i64* %PC
  %6025 = add i64 %6024, 5
  %6026 = load i64, i64* %PC
  %6027 = add i64 %6026, 5
  store i64 %6027, i64* %PC
  %6028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6025, i64* %6028, align 8, !tbaa !2428
  %6029 = load i64, i64* %RBP
  %6030 = sub i64 %6029, 8
  %6031 = load i64, i64* %PC
  %6032 = add i64 %6031, 3
  store i64 %6032, i64* %PC
  %6033 = inttoptr i64 %6030 to i32*
  %6034 = load i32, i32* %6033
  %6035 = zext i32 %6034 to i64
  store i64 %6035, i64* %RAX, align 8, !tbaa !2428
  %6036 = load i64, i64* %RAX
  %6037 = load i64, i64* %PC
  %6038 = add i64 %6037, 3
  store i64 %6038, i64* %PC
  %6039 = trunc i64 %6036 to i32
  %6040 = add i32 1, %6039
  %6041 = zext i32 %6040 to i64
  store i64 %6041, i64* %RAX, align 8, !tbaa !2428
  %6042 = icmp ult i32 %6040, %6039
  %6043 = icmp ult i32 %6040, 1
  %6044 = or i1 %6042, %6043
  %6045 = zext i1 %6044 to i8
  %6046 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6045, i8* %6046, align 1, !tbaa !2432
  %6047 = and i32 %6040, 255
  %6048 = call i32 @llvm.ctpop.i32(i32 %6047) #16
  %6049 = trunc i32 %6048 to i8
  %6050 = and i8 %6049, 1
  %6051 = xor i8 %6050, 1
  %6052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6051, i8* %6052, align 1, !tbaa !2446
  %6053 = xor i64 1, %6036
  %6054 = trunc i64 %6053 to i32
  %6055 = xor i32 %6054, %6040
  %6056 = lshr i32 %6055, 4
  %6057 = trunc i32 %6056 to i8
  %6058 = and i8 %6057, 1
  %6059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6058, i8* %6059, align 1, !tbaa !2447
  %6060 = icmp eq i32 %6040, 0
  %6061 = zext i1 %6060 to i8
  %6062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6061, i8* %6062, align 1, !tbaa !2448
  %6063 = lshr i32 %6040, 31
  %6064 = trunc i32 %6063 to i8
  %6065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6064, i8* %6065, align 1, !tbaa !2449
  %6066 = lshr i32 %6039, 31
  %6067 = xor i32 %6063, %6066
  %6068 = add nuw nsw i32 %6067, %6063
  %6069 = icmp eq i32 %6068, 2
  %6070 = zext i1 %6069 to i8
  %6071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6070, i8* %6071, align 1, !tbaa !2450
  %6072 = load i64, i64* %RBP
  %6073 = sub i64 %6072, 8
  %6074 = load i32, i32* %EAX
  %6075 = zext i32 %6074 to i64
  %6076 = load i64, i64* %PC
  %6077 = add i64 %6076, 3
  store i64 %6077, i64* %PC
  %6078 = inttoptr i64 %6073 to i32*
  store i32 %6074, i32* %6078
  %6079 = load i64, i64* %PC
  %6080 = sub i64 %6079, 88
  %6081 = load i64, i64* %PC
  %6082 = add i64 %6081, 5
  store i64 %6082, i64* %PC
  %6083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6080, i64* %6083, align 8, !tbaa !2428
  br label %block_400cc5

block_401257:                                     ; preds = %block_401246
  %6084 = load i64, i64* %PC
  %6085 = add i64 %6084, 10
  store i64 %6085, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 41), i64* %RDI, align 8, !tbaa !2428
  %6086 = load i64, i64* %PC
  %6087 = add i64 %6086, 2
  store i64 %6087, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %6088 = load i64, i64* %PC
  %6089 = sub i64 %6088, 3651
  %6090 = load i64, i64* %PC
  %6091 = add i64 %6090, 5
  %6092 = load i64, i64* %PC
  %6093 = add i64 %6092, 5
  store i64 %6093, i64* %PC
  %6094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6095 = load i64, i64* %6094, align 8, !tbaa !2428
  %6096 = add i64 %6095, -8
  %6097 = inttoptr i64 %6096 to i64*
  store i64 %6091, i64* %6097
  store i64 %6096, i64* %6094, align 8, !tbaa !2428
  %6098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6089, i64* %6098, align 8, !tbaa !2428
  %6099 = load i64, i64* %PC
  %6100 = call %struct.Memory* @ext_619238_printf(%struct.State* %0, i64 %6099, %struct.Memory* %7214)
  %6101 = load i64, i64* %RBP
  %6102 = sub i64 %6101, 28
  %6103 = load i32, i32* %EAX
  %6104 = zext i32 %6103 to i64
  %6105 = load i64, i64* %PC
  %6106 = add i64 %6105, 3
  store i64 %6106, i64* %PC
  %6107 = inttoptr i64 %6102 to i32*
  store i32 %6103, i32* %6107
  br label %block_40126b

block_400fe5:                                     ; preds = %block_400fdb
  %6108 = load i64, i64* %RBP
  %6109 = sub i64 %6108, 12
  %6110 = load i64, i64* %PC
  %6111 = add i64 %6110, 7
  store i64 %6111, i64* %PC
  %6112 = inttoptr i64 %6109 to i32*
  store i32 0, i32* %6112
  br label %block_400fec

block_400a4d:                                     ; preds = %block_400a46, %block_400a97
  %MEMORY.35 = phi %struct.Memory* [ %MEMORY.37, %block_400a46 ], [ %MEMORY.33, %block_400a97 ]
  %6113 = load i64, i64* %RBP
  %6114 = sub i64 %6113, 8
  %6115 = load i64, i64* %PC
  %6116 = add i64 %6115, 4
  store i64 %6116, i64* %PC
  %6117 = inttoptr i64 %6114 to i32*
  %6118 = load i32, i32* %6117
  %6119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6119, align 1, !tbaa !2432
  %6120 = and i32 %6118, 255
  %6121 = call i32 @llvm.ctpop.i32(i32 %6120) #16
  %6122 = trunc i32 %6121 to i8
  %6123 = and i8 %6122, 1
  %6124 = xor i8 %6123, 1
  %6125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6124, i8* %6125, align 1, !tbaa !2446
  %6126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6126, align 1, !tbaa !2447
  %6127 = icmp eq i32 %6118, 0
  %6128 = zext i1 %6127 to i8
  %6129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6128, i8* %6129, align 1, !tbaa !2448
  %6130 = lshr i32 %6118, 31
  %6131 = trunc i32 %6130 to i8
  %6132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6131, i8* %6132, align 1, !tbaa !2449
  %6133 = lshr i32 %6118, 31
  %6134 = xor i32 %6130, %6133
  %6135 = add nuw nsw i32 %6134, %6133
  %6136 = icmp eq i32 %6135, 2
  %6137 = zext i1 %6136 to i8
  %6138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6137, i8* %6138, align 1, !tbaa !2450
  %6139 = load i64, i64* %PC
  %6140 = add i64 %6139, 89
  %6141 = load i64, i64* %PC
  %6142 = add i64 %6141, 6
  %6143 = load i64, i64* %PC
  %6144 = add i64 %6143, 6
  store i64 %6144, i64* %PC
  %6145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6146 = load i8, i8* %6145, align 1, !tbaa !2448
  %6147 = icmp eq i8 %6146, 0
  %6148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6149 = load i8, i8* %6148, align 1, !tbaa !2449
  %6150 = icmp ne i8 %6149, 0
  %6151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6152 = load i8, i8* %6151, align 1, !tbaa !2450
  %6153 = icmp ne i8 %6152, 0
  %6154 = xor i1 %6150, %6153
  %6155 = xor i1 %6154, true
  %6156 = and i1 %6147, %6155
  %6157 = zext i1 %6156 to i8
  store i8 %6157, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6159 = select i1 %6156, i64 %6140, i64 %6142
  store i64 %6159, i64* %6158, align 8, !tbaa !2428
  %6160 = load i8, i8* %BRANCH_TAKEN
  %6161 = icmp eq i8 %6160, 1
  br i1 %6161, label %block_400aaa, label %block_400a57

block_401117:                                     ; preds = %block_401110, %block_401161
  %MEMORY.36 = phi %struct.Memory* [ %MEMORY.13, %block_401110 ], [ %MEMORY.11, %block_401161 ]
  %6162 = load i64, i64* %RBP
  %6163 = sub i64 %6162, 8
  %6164 = load i64, i64* %PC
  %6165 = add i64 %6164, 4
  store i64 %6165, i64* %PC
  %6166 = inttoptr i64 %6163 to i32*
  %6167 = load i32, i32* %6166
  %6168 = sub i32 %6167, 1
  %6169 = icmp ult i32 %6167, 1
  %6170 = zext i1 %6169 to i8
  %6171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6170, i8* %6171, align 1, !tbaa !2432
  %6172 = and i32 %6168, 255
  %6173 = call i32 @llvm.ctpop.i32(i32 %6172) #16
  %6174 = trunc i32 %6173 to i8
  %6175 = and i8 %6174, 1
  %6176 = xor i8 %6175, 1
  %6177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6176, i8* %6177, align 1, !tbaa !2446
  %6178 = xor i32 %6167, 1
  %6179 = xor i32 %6178, %6168
  %6180 = lshr i32 %6179, 4
  %6181 = trunc i32 %6180 to i8
  %6182 = and i8 %6181, 1
  %6183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6182, i8* %6183, align 1, !tbaa !2447
  %6184 = icmp eq i32 %6168, 0
  %6185 = zext i1 %6184 to i8
  %6186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6185, i8* %6186, align 1, !tbaa !2448
  %6187 = lshr i32 %6168, 31
  %6188 = trunc i32 %6187 to i8
  %6189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6188, i8* %6189, align 1, !tbaa !2449
  %6190 = lshr i32 %6167, 31
  %6191 = xor i32 %6187, %6190
  %6192 = add nuw nsw i32 %6191, %6190
  %6193 = icmp eq i32 %6192, 2
  %6194 = zext i1 %6193 to i8
  %6195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6194, i8* %6195, align 1, !tbaa !2450
  %6196 = load i64, i64* %PC
  %6197 = add i64 %6196, 89
  %6198 = load i64, i64* %PC
  %6199 = add i64 %6198, 6
  %6200 = load i64, i64* %PC
  %6201 = add i64 %6200, 6
  store i64 %6201, i64* %PC
  %6202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6203 = load i8, i8* %6202, align 1, !tbaa !2448
  %6204 = icmp eq i8 %6203, 0
  %6205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6206 = load i8, i8* %6205, align 1, !tbaa !2449
  %6207 = icmp ne i8 %6206, 0
  %6208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6209 = load i8, i8* %6208, align 1, !tbaa !2450
  %6210 = icmp ne i8 %6209, 0
  %6211 = xor i1 %6207, %6210
  %6212 = xor i1 %6211, true
  %6213 = and i1 %6204, %6212
  %6214 = zext i1 %6213 to i8
  store i8 %6214, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6215 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6216 = select i1 %6213, i64 %6197, i64 %6199
  store i64 %6216, i64* %6215, align 8, !tbaa !2428
  %6217 = load i8, i8* %BRANCH_TAKEN
  %6218 = icmp eq i8 %6217, 1
  br i1 %6218, label %block_401174, label %block_401121

block_400e4b:                                     ; preds = %block_400e12
  %6219 = load i64, i64* %PC
  %6220 = add i64 %6219, 5
  %6221 = load i64, i64* %PC
  %6222 = add i64 %6221, 5
  store i64 %6222, i64* %PC
  %6223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6220, i64* %6223, align 8, !tbaa !2428
  %6224 = load i64, i64* %RBP
  %6225 = sub i64 %6224, 8
  %6226 = load i64, i64* %PC
  %6227 = add i64 %6226, 3
  store i64 %6227, i64* %PC
  %6228 = inttoptr i64 %6225 to i32*
  %6229 = load i32, i32* %6228
  %6230 = zext i32 %6229 to i64
  store i64 %6230, i64* %RAX, align 8, !tbaa !2428
  %6231 = load i64, i64* %RAX
  %6232 = load i64, i64* %PC
  %6233 = add i64 %6232, 3
  store i64 %6233, i64* %PC
  %6234 = trunc i64 %6231 to i32
  %6235 = add i32 1, %6234
  %6236 = zext i32 %6235 to i64
  store i64 %6236, i64* %RAX, align 8, !tbaa !2428
  %6237 = icmp ult i32 %6235, %6234
  %6238 = icmp ult i32 %6235, 1
  %6239 = or i1 %6237, %6238
  %6240 = zext i1 %6239 to i8
  %6241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6240, i8* %6241, align 1, !tbaa !2432
  %6242 = and i32 %6235, 255
  %6243 = call i32 @llvm.ctpop.i32(i32 %6242) #16
  %6244 = trunc i32 %6243 to i8
  %6245 = and i8 %6244, 1
  %6246 = xor i8 %6245, 1
  %6247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6246, i8* %6247, align 1, !tbaa !2446
  %6248 = xor i64 1, %6231
  %6249 = trunc i64 %6248 to i32
  %6250 = xor i32 %6249, %6235
  %6251 = lshr i32 %6250, 4
  %6252 = trunc i32 %6251 to i8
  %6253 = and i8 %6252, 1
  %6254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6253, i8* %6254, align 1, !tbaa !2447
  %6255 = icmp eq i32 %6235, 0
  %6256 = zext i1 %6255 to i8
  %6257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6256, i8* %6257, align 1, !tbaa !2448
  %6258 = lshr i32 %6235, 31
  %6259 = trunc i32 %6258 to i8
  %6260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6259, i8* %6260, align 1, !tbaa !2449
  %6261 = lshr i32 %6234, 31
  %6262 = xor i32 %6258, %6261
  %6263 = add nuw nsw i32 %6262, %6258
  %6264 = icmp eq i32 %6263, 2
  %6265 = zext i1 %6264 to i8
  %6266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6265, i8* %6266, align 1, !tbaa !2450
  %6267 = load i64, i64* %RBP
  %6268 = sub i64 %6267, 8
  %6269 = load i32, i32* %EAX
  %6270 = zext i32 %6269 to i64
  %6271 = load i64, i64* %PC
  %6272 = add i64 %6271, 3
  store i64 %6272, i64* %PC
  %6273 = inttoptr i64 %6268 to i32*
  store i32 %6269, i32* %6273
  %6274 = load i64, i64* %PC
  %6275 = sub i64 %6274, 88
  %6276 = load i64, i64* %PC
  %6277 = add i64 %6276, 5
  store i64 %6277, i64* %PC
  %6278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6275, i64* %6278, align 8, !tbaa !2428
  br label %block_400e01

block_400a46:                                     ; preds = %block_400a3c
  %6279 = load i64, i64* %RBP
  %6280 = sub i64 %6279, 8
  %6281 = load i64, i64* %PC
  %6282 = add i64 %6281, 7
  store i64 %6282, i64* %PC
  %6283 = inttoptr i64 %6280 to i32*
  store i32 0, i32* %6283
  br label %block_400a4d

block_400c42:                                     ; preds = %block_400c38
  %6284 = load i64, i64* %RBP
  %6285 = sub i64 %6284, 4
  %6286 = load i64, i64* %PC
  %6287 = add i64 %6286, 3
  store i64 %6287, i64* %PC
  %6288 = inttoptr i64 %6285 to i32*
  %6289 = load i32, i32* %6288
  %6290 = zext i32 %6289 to i64
  store i64 %6290, i64* %RAX, align 8, !tbaa !2428
  %6291 = load i64, i64* %RBP
  %6292 = sub i64 %6291, 8
  %6293 = load i64, i64* %PC
  %6294 = add i64 %6293, 3
  store i64 %6294, i64* %PC
  %6295 = inttoptr i64 %6292 to i32*
  %6296 = load i32, i32* %6295
  %6297 = zext i32 %6296 to i64
  store i64 %6297, i64* %RCX, align 8, !tbaa !2428
  %6298 = load i64, i64* %RBP
  %6299 = sub i64 %6298, 12
  %6300 = load i64, i64* %PC
  %6301 = add i64 %6300, 3
  store i64 %6301, i64* %PC
  %6302 = inttoptr i64 %6299 to i32*
  %6303 = load i32, i32* %6302
  %6304 = zext i32 %6303 to i64
  store i64 %6304, i64* %RDX, align 8, !tbaa !2428
  %6305 = load i64, i64* %RDX
  %6306 = load i64, i64* %PC
  %6307 = add i64 %6306, 3
  store i64 %6307, i64* %PC
  %6308 = and i64 %6305, 4294967295
  %6309 = shl i64 %6308, 2
  %6310 = trunc i64 %6309 to i32
  %6311 = icmp slt i32 %6310, 0
  %6312 = shl i32 %6310, 1
  %6313 = zext i32 %6312 to i64
  store i64 %6313, i64* %RDX, align 8, !tbaa !2428
  %6314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6315 = zext i1 %6311 to i8
  store i8 %6315, i8* %6314, align 1, !tbaa !2451
  %6316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6317 = and i32 %6312, 254
  %6318 = call i32 @llvm.ctpop.i32(i32 %6317) #16
  %6319 = trunc i32 %6318 to i8
  %6320 = and i8 %6319, 1
  %6321 = xor i8 %6320, 1
  store i8 %6321, i8* %6316, align 1, !tbaa !2451
  %6322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6322, align 1, !tbaa !2451
  %6323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6324 = icmp eq i32 %6312, 0
  %6325 = zext i1 %6324 to i8
  store i8 %6325, i8* %6323, align 1, !tbaa !2451
  %6326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6327 = lshr i32 %6312, 31
  %6328 = trunc i32 %6327 to i8
  store i8 %6328, i8* %6326, align 1, !tbaa !2451
  %6329 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6329, align 1, !tbaa !2451
  %6330 = load i64, i64* %RCX
  %6331 = load i32, i32* %EDX
  %6332 = zext i32 %6331 to i64
  %6333 = load i64, i64* %PC
  %6334 = add i64 %6333, 2
  store i64 %6334, i64* %PC
  %6335 = trunc i64 %6330 to i32
  %6336 = add i32 %6331, %6335
  %6337 = zext i32 %6336 to i64
  store i64 %6337, i64* %RCX, align 8, !tbaa !2428
  %6338 = icmp ult i32 %6336, %6335
  %6339 = icmp ult i32 %6336, %6331
  %6340 = or i1 %6338, %6339
  %6341 = zext i1 %6340 to i8
  %6342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6341, i8* %6342, align 1, !tbaa !2432
  %6343 = and i32 %6336, 255
  %6344 = call i32 @llvm.ctpop.i32(i32 %6343) #16
  %6345 = trunc i32 %6344 to i8
  %6346 = and i8 %6345, 1
  %6347 = xor i8 %6346, 1
  %6348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6347, i8* %6348, align 1, !tbaa !2446
  %6349 = xor i64 %6332, %6330
  %6350 = trunc i64 %6349 to i32
  %6351 = xor i32 %6350, %6336
  %6352 = lshr i32 %6351, 4
  %6353 = trunc i32 %6352 to i8
  %6354 = and i8 %6353, 1
  %6355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6354, i8* %6355, align 1, !tbaa !2447
  %6356 = icmp eq i32 %6336, 0
  %6357 = zext i1 %6356 to i8
  %6358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6357, i8* %6358, align 1, !tbaa !2448
  %6359 = lshr i32 %6336, 31
  %6360 = trunc i32 %6359 to i8
  %6361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6360, i8* %6361, align 1, !tbaa !2449
  %6362 = lshr i32 %6335, 31
  %6363 = lshr i32 %6331, 31
  %6364 = xor i32 %6359, %6362
  %6365 = xor i32 %6359, %6363
  %6366 = add nuw nsw i32 %6364, %6365
  %6367 = icmp eq i32 %6366, 2
  %6368 = zext i1 %6367 to i8
  %6369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6368, i8* %6369, align 1, !tbaa !2450
  %6370 = load i64, i64* %RCX
  %6371 = load i64, i64* %PC
  %6372 = add i64 %6371, 3
  store i64 %6372, i64* %PC
  %6373 = and i64 %6370, 4294967295
  %6374 = shl i64 %6373, 2
  %6375 = trunc i64 %6374 to i32
  %6376 = icmp slt i32 %6375, 0
  %6377 = shl i32 %6375, 1
  %6378 = zext i32 %6377 to i64
  store i64 %6378, i64* %RCX, align 8, !tbaa !2428
  %6379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6380 = zext i1 %6376 to i8
  store i8 %6380, i8* %6379, align 1, !tbaa !2451
  %6381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6382 = and i32 %6377, 254
  %6383 = call i32 @llvm.ctpop.i32(i32 %6382) #16
  %6384 = trunc i32 %6383 to i8
  %6385 = and i8 %6384, 1
  %6386 = xor i8 %6385, 1
  store i8 %6386, i8* %6381, align 1, !tbaa !2451
  %6387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6387, align 1, !tbaa !2451
  %6388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6389 = icmp eq i32 %6377, 0
  %6390 = zext i1 %6389 to i8
  store i8 %6390, i8* %6388, align 1, !tbaa !2451
  %6391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6392 = lshr i32 %6377, 31
  %6393 = trunc i32 %6392 to i8
  store i8 %6393, i8* %6391, align 1, !tbaa !2451
  %6394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6394, align 1, !tbaa !2451
  %6395 = load i64, i64* %RAX
  %6396 = load i32, i32* %ECX
  %6397 = zext i32 %6396 to i64
  %6398 = load i64, i64* %PC
  %6399 = add i64 %6398, 2
  store i64 %6399, i64* %PC
  %6400 = trunc i64 %6395 to i32
  %6401 = add i32 %6396, %6400
  %6402 = zext i32 %6401 to i64
  store i64 %6402, i64* %RAX, align 8, !tbaa !2428
  %6403 = icmp ult i32 %6401, %6400
  %6404 = icmp ult i32 %6401, %6396
  %6405 = or i1 %6403, %6404
  %6406 = zext i1 %6405 to i8
  %6407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6406, i8* %6407, align 1, !tbaa !2432
  %6408 = and i32 %6401, 255
  %6409 = call i32 @llvm.ctpop.i32(i32 %6408) #16
  %6410 = trunc i32 %6409 to i8
  %6411 = and i8 %6410, 1
  %6412 = xor i8 %6411, 1
  %6413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6412, i8* %6413, align 1, !tbaa !2446
  %6414 = xor i64 %6397, %6395
  %6415 = trunc i64 %6414 to i32
  %6416 = xor i32 %6415, %6401
  %6417 = lshr i32 %6416, 4
  %6418 = trunc i32 %6417 to i8
  %6419 = and i8 %6418, 1
  %6420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6419, i8* %6420, align 1, !tbaa !2447
  %6421 = icmp eq i32 %6401, 0
  %6422 = zext i1 %6421 to i8
  %6423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6422, i8* %6423, align 1, !tbaa !2448
  %6424 = lshr i32 %6401, 31
  %6425 = trunc i32 %6424 to i8
  %6426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6425, i8* %6426, align 1, !tbaa !2449
  %6427 = lshr i32 %6400, 31
  %6428 = lshr i32 %6396, 31
  %6429 = xor i32 %6424, %6427
  %6430 = xor i32 %6424, %6428
  %6431 = add nuw nsw i32 %6429, %6430
  %6432 = icmp eq i32 %6431, 2
  %6433 = zext i1 %6432 to i8
  %6434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6433, i8* %6434, align 1, !tbaa !2450
  %6435 = load i32, i32* %EAX
  %6436 = zext i32 %6435 to i64
  %6437 = load i64, i64* %PC
  %6438 = add i64 %6437, 3
  store i64 %6438, i64* %PC
  %6439 = shl i64 %6436, 32
  %6440 = ashr exact i64 %6439, 32
  store i64 %6440, i64* %RSI, align 8, !tbaa !2428
  %6441 = load i64, i64* %RSI
  %6442 = mul i64 %6441, 4
  %6443 = add i64 %6442, add (i64 ptrtoint (%p_type* @p to i64), i64 8192)
  %6444 = load i64, i64* %PC
  %6445 = add i64 %6444, 11
  store i64 %6445, i64* %PC
  %6446 = inttoptr i64 %6443 to i32*
  store i32 1, i32* %6446
  %6447 = load i64, i64* %RBP
  %6448 = sub i64 %6447, 12
  %6449 = load i64, i64* %PC
  %6450 = add i64 %6449, 3
  store i64 %6450, i64* %PC
  %6451 = inttoptr i64 %6448 to i32*
  %6452 = load i32, i32* %6451
  %6453 = zext i32 %6452 to i64
  store i64 %6453, i64* %RAX, align 8, !tbaa !2428
  %6454 = load i64, i64* %RAX
  %6455 = load i64, i64* %PC
  %6456 = add i64 %6455, 3
  store i64 %6456, i64* %PC
  %6457 = trunc i64 %6454 to i32
  %6458 = add i32 1, %6457
  %6459 = zext i32 %6458 to i64
  store i64 %6459, i64* %RAX, align 8, !tbaa !2428
  %6460 = icmp ult i32 %6458, %6457
  %6461 = icmp ult i32 %6458, 1
  %6462 = or i1 %6460, %6461
  %6463 = zext i1 %6462 to i8
  %6464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6463, i8* %6464, align 1, !tbaa !2432
  %6465 = and i32 %6458, 255
  %6466 = call i32 @llvm.ctpop.i32(i32 %6465) #16
  %6467 = trunc i32 %6466 to i8
  %6468 = and i8 %6467, 1
  %6469 = xor i8 %6468, 1
  %6470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6469, i8* %6470, align 1, !tbaa !2446
  %6471 = xor i64 1, %6454
  %6472 = trunc i64 %6471 to i32
  %6473 = xor i32 %6472, %6458
  %6474 = lshr i32 %6473, 4
  %6475 = trunc i32 %6474 to i8
  %6476 = and i8 %6475, 1
  %6477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6476, i8* %6477, align 1, !tbaa !2447
  %6478 = icmp eq i32 %6458, 0
  %6479 = zext i1 %6478 to i8
  %6480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6479, i8* %6480, align 1, !tbaa !2448
  %6481 = lshr i32 %6458, 31
  %6482 = trunc i32 %6481 to i8
  %6483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6482, i8* %6483, align 1, !tbaa !2449
  %6484 = lshr i32 %6457, 31
  %6485 = xor i32 %6481, %6484
  %6486 = add nuw nsw i32 %6485, %6481
  %6487 = icmp eq i32 %6486, 2
  %6488 = zext i1 %6487 to i8
  %6489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6488, i8* %6489, align 1, !tbaa !2450
  %6490 = load i64, i64* %RBP
  %6491 = sub i64 %6490, 12
  %6492 = load i32, i32* %EAX
  %6493 = zext i32 %6492 to i64
  %6494 = load i64, i64* %PC
  %6495 = add i64 %6494, 3
  store i64 %6495, i64* %PC
  %6496 = inttoptr i64 %6491 to i32*
  store i32 %6492, i32* %6496
  %6497 = load i64, i64* %PC
  %6498 = sub i64 %6497, 52
  %6499 = load i64, i64* %PC
  %6500 = add i64 %6499, 5
  store i64 %6500, i64* %PC
  %6501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6498, i64* %6501, align 8, !tbaa !2428
  br label %block_400c38

block_400cbe:                                     ; preds = %block_400cb4
  %6502 = load i64, i64* %RBP
  %6503 = sub i64 %6502, 8
  %6504 = load i64, i64* %PC
  %6505 = add i64 %6504, 7
  store i64 %6505, i64* %PC
  %6506 = inttoptr i64 %6503 to i32*
  store i32 0, i32* %6506
  br label %block_400cc5

block_40088c:                                     ; preds = %block_40087f
  %6507 = sub i64 %5399, 16
  %6508 = load i64, i64* %PC
  %6509 = add i64 %6508, 4
  store i64 %6509, i64* %PC
  %6510 = inttoptr i64 %6507 to i32*
  %6511 = load i32, i32* %6510
  %6512 = sext i32 %6511 to i64
  store i64 %6512, i64* %RAX, align 8, !tbaa !2428
  %6513 = load i64, i64* %RAX
  %6514 = mul i64 %6513, 4
  %6515 = add i64 %6514, ptrtoint (%puzzl_type* @puzzl to i64)
  %6516 = load i64, i64* %PC
  %6517 = add i64 %6516, 11
  store i64 %6517, i64* %PC
  %6518 = inttoptr i64 %6515 to i32*
  store i32 1, i32* %6518
  %6519 = load i64, i64* %RBP
  %6520 = sub i64 %6519, 16
  %6521 = load i64, i64* %PC
  %6522 = add i64 %6521, 3
  store i64 %6522, i64* %PC
  %6523 = inttoptr i64 %6520 to i32*
  %6524 = load i32, i32* %6523
  %6525 = zext i32 %6524 to i64
  store i64 %6525, i64* %RAX, align 8, !tbaa !2428
  %6526 = load i64, i64* %RAX
  %6527 = load i64, i64* %PC
  %6528 = add i64 %6527, 3
  store i64 %6528, i64* %PC
  %6529 = trunc i64 %6526 to i32
  %6530 = add i32 1, %6529
  %6531 = zext i32 %6530 to i64
  store i64 %6531, i64* %RAX, align 8, !tbaa !2428
  %6532 = icmp ult i32 %6530, %6529
  %6533 = icmp ult i32 %6530, 1
  %6534 = or i1 %6532, %6533
  %6535 = zext i1 %6534 to i8
  %6536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6535, i8* %6536, align 1, !tbaa !2432
  %6537 = and i32 %6530, 255
  %6538 = call i32 @llvm.ctpop.i32(i32 %6537) #16
  %6539 = trunc i32 %6538 to i8
  %6540 = and i8 %6539, 1
  %6541 = xor i8 %6540, 1
  %6542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6541, i8* %6542, align 1, !tbaa !2446
  %6543 = xor i64 1, %6526
  %6544 = trunc i64 %6543 to i32
  %6545 = xor i32 %6544, %6530
  %6546 = lshr i32 %6545, 4
  %6547 = trunc i32 %6546 to i8
  %6548 = and i8 %6547, 1
  %6549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6548, i8* %6549, align 1, !tbaa !2447
  %6550 = icmp eq i32 %6530, 0
  %6551 = zext i1 %6550 to i8
  %6552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6551, i8* %6552, align 1, !tbaa !2448
  %6553 = lshr i32 %6530, 31
  %6554 = trunc i32 %6553 to i8
  %6555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6554, i8* %6555, align 1, !tbaa !2449
  %6556 = lshr i32 %6529, 31
  %6557 = xor i32 %6553, %6556
  %6558 = add nuw nsw i32 %6557, %6553
  %6559 = icmp eq i32 %6558, 2
  %6560 = zext i1 %6559 to i8
  %6561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6560, i8* %6561, align 1, !tbaa !2450
  %6562 = load i64, i64* %RBP
  %6563 = sub i64 %6562, 16
  %6564 = load i32, i32* %EAX
  %6565 = zext i32 %6564 to i64
  %6566 = load i64, i64* %PC
  %6567 = add i64 %6566, 3
  store i64 %6567, i64* %PC
  %6568 = inttoptr i64 %6563 to i32*
  store i32 %6564, i32* %6568
  %6569 = load i64, i64* %PC
  %6570 = sub i64 %6569, 37
  %6571 = load i64, i64* %PC
  %6572 = add i64 %6571, 5
  store i64 %6572, i64* %PC
  %6573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6570, i64* %6573, align 8, !tbaa !2428
  br label %block_40087f

block_400fd4:                                     ; preds = %block_400fca
  %6574 = load i64, i64* %RBP
  %6575 = sub i64 %6574, 8
  %6576 = load i64, i64* %PC
  %6577 = add i64 %6576, 7
  store i64 %6577, i64* %PC
  %6578 = inttoptr i64 %6575 to i32*
  store i32 0, i32* %6578
  br label %block_400fdb

block_400a3c:                                     ; preds = %block_400a1f, %block_400aaa
  %MEMORY.37 = phi %struct.Memory* [ %MEMORY.6, %block_400a1f ], [ %MEMORY.35, %block_400aaa ]
  %6579 = load i64, i64* %RBP
  %6580 = sub i64 %6579, 4
  %6581 = load i64, i64* %PC
  %6582 = add i64 %6581, 4
  store i64 %6582, i64* %PC
  %6583 = inttoptr i64 %6580 to i32*
  %6584 = load i32, i32* %6583
  %6585 = sub i32 %6584, 1
  %6586 = icmp ult i32 %6584, 1
  %6587 = zext i1 %6586 to i8
  %6588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6587, i8* %6588, align 1, !tbaa !2432
  %6589 = and i32 %6585, 255
  %6590 = call i32 @llvm.ctpop.i32(i32 %6589) #16
  %6591 = trunc i32 %6590 to i8
  %6592 = and i8 %6591, 1
  %6593 = xor i8 %6592, 1
  %6594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6593, i8* %6594, align 1, !tbaa !2446
  %6595 = xor i32 %6584, 1
  %6596 = xor i32 %6595, %6585
  %6597 = lshr i32 %6596, 4
  %6598 = trunc i32 %6597 to i8
  %6599 = and i8 %6598, 1
  %6600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6599, i8* %6600, align 1, !tbaa !2447
  %6601 = icmp eq i32 %6585, 0
  %6602 = zext i1 %6601 to i8
  %6603 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6602, i8* %6603, align 1, !tbaa !2448
  %6604 = lshr i32 %6585, 31
  %6605 = trunc i32 %6604 to i8
  %6606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6605, i8* %6606, align 1, !tbaa !2449
  %6607 = lshr i32 %6584, 31
  %6608 = xor i32 %6604, %6607
  %6609 = add nuw nsw i32 %6608, %6607
  %6610 = icmp eq i32 %6609, 2
  %6611 = zext i1 %6610 to i8
  %6612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6611, i8* %6612, align 1, !tbaa !2450
  %6613 = load i64, i64* %PC
  %6614 = add i64 %6613, 125
  %6615 = load i64, i64* %PC
  %6616 = add i64 %6615, 6
  %6617 = load i64, i64* %PC
  %6618 = add i64 %6617, 6
  store i64 %6618, i64* %PC
  %6619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6620 = load i8, i8* %6619, align 1, !tbaa !2448
  %6621 = icmp eq i8 %6620, 0
  %6622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6623 = load i8, i8* %6622, align 1, !tbaa !2449
  %6624 = icmp ne i8 %6623, 0
  %6625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6626 = load i8, i8* %6625, align 1, !tbaa !2450
  %6627 = icmp ne i8 %6626, 0
  %6628 = xor i1 %6624, %6627
  %6629 = xor i1 %6628, true
  %6630 = and i1 %6621, %6629
  %6631 = zext i1 %6630 to i8
  store i8 %6631, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6633 = select i1 %6630, i64 %6614, i64 %6616
  store i64 %6633, i64* %6632, align 8, !tbaa !2428
  %6634 = load i8, i8* %BRANCH_TAKEN
  %6635 = icmp eq i8 %6634, 1
  br i1 %6635, label %block_400abd, label %block_400a46

block_400e5e:                                     ; preds = %block_400e01
  %6636 = load i64, i64* %PC
  %6637 = add i64 %6636, 5
  %6638 = load i64, i64* %PC
  %6639 = add i64 %6638, 5
  store i64 %6639, i64* %PC
  %6640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6637, i64* %6640, align 8, !tbaa !2428
  %6641 = load i64, i64* %RBP
  %6642 = sub i64 %6641, 4
  %6643 = load i64, i64* %PC
  %6644 = add i64 %6643, 3
  store i64 %6644, i64* %PC
  %6645 = inttoptr i64 %6642 to i32*
  %6646 = load i32, i32* %6645
  %6647 = zext i32 %6646 to i64
  store i64 %6647, i64* %RAX, align 8, !tbaa !2428
  %6648 = load i64, i64* %RAX
  %6649 = load i64, i64* %PC
  %6650 = add i64 %6649, 3
  store i64 %6650, i64* %PC
  %6651 = trunc i64 %6648 to i32
  %6652 = add i32 1, %6651
  %6653 = zext i32 %6652 to i64
  store i64 %6653, i64* %RAX, align 8, !tbaa !2428
  %6654 = icmp ult i32 %6652, %6651
  %6655 = icmp ult i32 %6652, 1
  %6656 = or i1 %6654, %6655
  %6657 = zext i1 %6656 to i8
  %6658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6657, i8* %6658, align 1, !tbaa !2432
  %6659 = and i32 %6652, 255
  %6660 = call i32 @llvm.ctpop.i32(i32 %6659) #16
  %6661 = trunc i32 %6660 to i8
  %6662 = and i8 %6661, 1
  %6663 = xor i8 %6662, 1
  %6664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6663, i8* %6664, align 1, !tbaa !2446
  %6665 = xor i64 1, %6648
  %6666 = trunc i64 %6665 to i32
  %6667 = xor i32 %6666, %6652
  %6668 = lshr i32 %6667, 4
  %6669 = trunc i32 %6668 to i8
  %6670 = and i8 %6669, 1
  %6671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6670, i8* %6671, align 1, !tbaa !2447
  %6672 = icmp eq i32 %6652, 0
  %6673 = zext i1 %6672 to i8
  %6674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6673, i8* %6674, align 1, !tbaa !2448
  %6675 = lshr i32 %6652, 31
  %6676 = trunc i32 %6675 to i8
  %6677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6676, i8* %6677, align 1, !tbaa !2449
  %6678 = lshr i32 %6651, 31
  %6679 = xor i32 %6675, %6678
  %6680 = add nuw nsw i32 %6679, %6675
  %6681 = icmp eq i32 %6680, 2
  %6682 = zext i1 %6681 to i8
  %6683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6682, i8* %6683, align 1, !tbaa !2450
  %6684 = load i64, i64* %RBP
  %6685 = sub i64 %6684, 4
  %6686 = load i32, i32* %EAX
  %6687 = zext i32 %6686 to i64
  %6688 = load i64, i64* %PC
  %6689 = add i64 %6688, 3
  store i64 %6689, i64* %PC
  %6690 = inttoptr i64 %6685 to i32*
  store i32 %6686, i32* %6690
  %6691 = load i64, i64* %PC
  %6692 = sub i64 %6691, 124
  %6693 = load i64, i64* %PC
  %6694 = add i64 %6693, 5
  store i64 %6694, i64* %PC
  %6695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6692, i64* %6695, align 8, !tbaa !2428
  br label %block_400df0

block_400c31:                                     ; preds = %block_400c27
  %6696 = load i64, i64* %RBP
  %6697 = sub i64 %6696, 12
  %6698 = load i64, i64* %PC
  %6699 = add i64 %6698, 7
  store i64 %6699, i64* %PC
  %6700 = inttoptr i64 %6697 to i32*
  store i32 0, i32* %6700
  br label %block_400c38

block_40122d:                                     ; preds = %block_401218
  %6701 = add i64 %7253, 10
  store i64 %6701, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 22), i64* %RDI, align 8, !tbaa !2428
  %6702 = load i64, i64* %PC
  %6703 = add i64 %6702, 2
  store i64 %6703, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %6704 = load i64, i64* %PC
  %6705 = sub i64 %6704, 3609
  %6706 = load i64, i64* %PC
  %6707 = add i64 %6706, 5
  %6708 = load i64, i64* %PC
  %6709 = add i64 %6708, 5
  store i64 %6709, i64* %PC
  %6710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6711 = load i64, i64* %6710, align 8, !tbaa !2428
  %6712 = add i64 %6711, -8
  %6713 = inttoptr i64 %6712 to i64*
  store i64 %6707, i64* %6713
  store i64 %6712, i64* %6710, align 8, !tbaa !2428
  %6714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6705, i64* %6714, align 8, !tbaa !2428
  %6715 = load i64, i64* %PC
  %6716 = call %struct.Memory* @ext_619238_printf(%struct.State* %0, i64 %6715, %struct.Memory* %7214)
  %6717 = load i64, i64* %RBP
  %6718 = sub i64 %6717, 24
  %6719 = load i32, i32* %EAX
  %6720 = zext i32 %6719 to i64
  %6721 = load i64, i64* %PC
  %6722 = add i64 %6721, 3
  store i64 %6722, i64* %PC
  %6723 = inttoptr i64 %6718 to i32*
  store i32 %6719, i32* %6723
  %6724 = load i64, i64* %PC
  %6725 = add i64 %6724, 47
  %6726 = load i64, i64* %PC
  %6727 = add i64 %6726, 5
  store i64 %6727, i64* %PC
  %6728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6725, i64* %6728, align 8, !tbaa !2428
  br label %block_401270

block_400c27:                                     ; preds = %block_400c20, %block_400c71
  %MEMORY.38 = phi %struct.Memory* [ %MEMORY.43, %block_400c20 ], [ %MEMORY.41, %block_400c71 ]
  %6729 = load i64, i64* %RBP
  %6730 = sub i64 %6729, 8
  %6731 = load i64, i64* %PC
  %6732 = add i64 %6731, 4
  store i64 %6732, i64* %PC
  %6733 = inttoptr i64 %6730 to i32*
  %6734 = load i32, i32* %6733
  %6735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6735, align 1, !tbaa !2432
  %6736 = and i32 %6734, 255
  %6737 = call i32 @llvm.ctpop.i32(i32 %6736) #16
  %6738 = trunc i32 %6737 to i8
  %6739 = and i8 %6738, 1
  %6740 = xor i8 %6739, 1
  %6741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6740, i8* %6741, align 1, !tbaa !2446
  %6742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6742, align 1, !tbaa !2447
  %6743 = icmp eq i32 %6734, 0
  %6744 = zext i1 %6743 to i8
  %6745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6744, i8* %6745, align 1, !tbaa !2448
  %6746 = lshr i32 %6734, 31
  %6747 = trunc i32 %6746 to i8
  %6748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6747, i8* %6748, align 1, !tbaa !2449
  %6749 = lshr i32 %6734, 31
  %6750 = xor i32 %6746, %6749
  %6751 = add nuw nsw i32 %6750, %6749
  %6752 = icmp eq i32 %6751, 2
  %6753 = zext i1 %6752 to i8
  %6754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6753, i8* %6754, align 1, !tbaa !2450
  %6755 = load i64, i64* %PC
  %6756 = add i64 %6755, 89
  %6757 = load i64, i64* %PC
  %6758 = add i64 %6757, 6
  %6759 = load i64, i64* %PC
  %6760 = add i64 %6759, 6
  store i64 %6760, i64* %PC
  %6761 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6762 = load i8, i8* %6761, align 1, !tbaa !2448
  %6763 = icmp eq i8 %6762, 0
  %6764 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6765 = load i8, i8* %6764, align 1, !tbaa !2449
  %6766 = icmp ne i8 %6765, 0
  %6767 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6768 = load i8, i8* %6767, align 1, !tbaa !2450
  %6769 = icmp ne i8 %6768, 0
  %6770 = xor i1 %6766, %6769
  %6771 = xor i1 %6770, true
  %6772 = and i1 %6763, %6771
  %6773 = zext i1 %6772 to i8
  store i8 %6773, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6775 = select i1 %6772, i64 %6756, i64 %6758
  store i64 %6775, i64* %6774, align 8, !tbaa !2428
  %6776 = load i8, i8* %BRANCH_TAKEN
  %6777 = icmp eq i8 %6776, 1
  br i1 %6777, label %block_400c84, label %block_400c31

block_401025:                                     ; preds = %block_400fec
  %6778 = load i64, i64* %PC
  %6779 = add i64 %6778, 5
  %6780 = load i64, i64* %PC
  %6781 = add i64 %6780, 5
  store i64 %6781, i64* %PC
  %6782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6779, i64* %6782, align 8, !tbaa !2428
  %6783 = load i64, i64* %RBP
  %6784 = sub i64 %6783, 8
  %6785 = load i64, i64* %PC
  %6786 = add i64 %6785, 3
  store i64 %6786, i64* %PC
  %6787 = inttoptr i64 %6784 to i32*
  %6788 = load i32, i32* %6787
  %6789 = zext i32 %6788 to i64
  store i64 %6789, i64* %RAX, align 8, !tbaa !2428
  %6790 = load i64, i64* %RAX
  %6791 = load i64, i64* %PC
  %6792 = add i64 %6791, 3
  store i64 %6792, i64* %PC
  %6793 = trunc i64 %6790 to i32
  %6794 = add i32 1, %6793
  %6795 = zext i32 %6794 to i64
  store i64 %6795, i64* %RAX, align 8, !tbaa !2428
  %6796 = icmp ult i32 %6794, %6793
  %6797 = icmp ult i32 %6794, 1
  %6798 = or i1 %6796, %6797
  %6799 = zext i1 %6798 to i8
  %6800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6799, i8* %6800, align 1, !tbaa !2432
  %6801 = and i32 %6794, 255
  %6802 = call i32 @llvm.ctpop.i32(i32 %6801) #16
  %6803 = trunc i32 %6802 to i8
  %6804 = and i8 %6803, 1
  %6805 = xor i8 %6804, 1
  %6806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6805, i8* %6806, align 1, !tbaa !2446
  %6807 = xor i64 1, %6790
  %6808 = trunc i64 %6807 to i32
  %6809 = xor i32 %6808, %6794
  %6810 = lshr i32 %6809, 4
  %6811 = trunc i32 %6810 to i8
  %6812 = and i8 %6811, 1
  %6813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6812, i8* %6813, align 1, !tbaa !2447
  %6814 = icmp eq i32 %6794, 0
  %6815 = zext i1 %6814 to i8
  %6816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6815, i8* %6816, align 1, !tbaa !2448
  %6817 = lshr i32 %6794, 31
  %6818 = trunc i32 %6817 to i8
  %6819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6818, i8* %6819, align 1, !tbaa !2449
  %6820 = lshr i32 %6793, 31
  %6821 = xor i32 %6817, %6820
  %6822 = add nuw nsw i32 %6821, %6817
  %6823 = icmp eq i32 %6822, 2
  %6824 = zext i1 %6823 to i8
  %6825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6824, i8* %6825, align 1, !tbaa !2450
  %6826 = load i64, i64* %RBP
  %6827 = sub i64 %6826, 8
  %6828 = load i32, i32* %EAX
  %6829 = zext i32 %6828 to i64
  %6830 = load i64, i64* %PC
  %6831 = add i64 %6830, 3
  store i64 %6831, i64* %PC
  %6832 = inttoptr i64 %6827 to i32*
  store i32 %6828, i32* %6832
  %6833 = load i64, i64* %PC
  %6834 = sub i64 %6833, 88
  %6835 = load i64, i64* %PC
  %6836 = add i64 %6835, 5
  store i64 %6836, i64* %PC
  %6837 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6834, i64* %6837, align 8, !tbaa !2428
  br label %block_400fdb

block_400c97:                                     ; preds = %block_400c16
  %6838 = load i64, i64* %PC
  %6839 = add i64 %6838, 11
  store i64 %6839, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 16) to i32*)
  %6840 = load i64, i64* %PC
  %6841 = add i64 %6840, 11
  store i64 %6841, i64* %PC
  store i32 67, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 16) to i32*)
  %6842 = load i64, i64* %RBP
  %6843 = sub i64 %6842, 4
  %6844 = load i64, i64* %PC
  %6845 = add i64 %6844, 7
  store i64 %6845, i64* %PC
  %6846 = inttoptr i64 %6843 to i32*
  store i32 0, i32* %6846
  br label %block_400cb4

block_400eb0:                                     ; preds = %block_400eba, %block_400ea9
  %MEMORY.39 = phi %struct.Memory* [ %MEMORY.21, %block_400ea9 ], [ %MEMORY.39, %block_400eba ]
  %6847 = load i64, i64* %RBP
  %6848 = sub i64 %6847, 12
  %6849 = load i64, i64* %PC
  %6850 = add i64 %6849, 4
  store i64 %6850, i64* %PC
  %6851 = inttoptr i64 %6848 to i32*
  %6852 = load i32, i32* %6851
  %6853 = sub i32 %6852, 2
  %6854 = icmp ult i32 %6852, 2
  %6855 = zext i1 %6854 to i8
  %6856 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6855, i8* %6856, align 1, !tbaa !2432
  %6857 = and i32 %6853, 255
  %6858 = call i32 @llvm.ctpop.i32(i32 %6857) #16
  %6859 = trunc i32 %6858 to i8
  %6860 = and i8 %6859, 1
  %6861 = xor i8 %6860, 1
  %6862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6861, i8* %6862, align 1, !tbaa !2446
  %6863 = xor i32 %6852, 2
  %6864 = xor i32 %6863, %6853
  %6865 = lshr i32 %6864, 4
  %6866 = trunc i32 %6865 to i8
  %6867 = and i8 %6866, 1
  %6868 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6867, i8* %6868, align 1, !tbaa !2447
  %6869 = icmp eq i32 %6853, 0
  %6870 = zext i1 %6869 to i8
  %6871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6870, i8* %6871, align 1, !tbaa !2448
  %6872 = lshr i32 %6853, 31
  %6873 = trunc i32 %6872 to i8
  %6874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6873, i8* %6874, align 1, !tbaa !2449
  %6875 = lshr i32 %6852, 31
  %6876 = xor i32 %6872, %6875
  %6877 = add nuw nsw i32 %6876, %6875
  %6878 = icmp eq i32 %6877, 2
  %6879 = zext i1 %6878 to i8
  %6880 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6879, i8* %6880, align 1, !tbaa !2450
  %6881 = load i64, i64* %PC
  %6882 = add i64 %6881, 53
  %6883 = load i64, i64* %PC
  %6884 = add i64 %6883, 6
  %6885 = load i64, i64* %PC
  %6886 = add i64 %6885, 6
  store i64 %6886, i64* %PC
  %6887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6888 = load i8, i8* %6887, align 1, !tbaa !2448
  %6889 = icmp eq i8 %6888, 0
  %6890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6891 = load i8, i8* %6890, align 1, !tbaa !2449
  %6892 = icmp ne i8 %6891, 0
  %6893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6894 = load i8, i8* %6893, align 1, !tbaa !2450
  %6895 = icmp ne i8 %6894, 0
  %6896 = xor i1 %6892, %6895
  %6897 = xor i1 %6896, true
  %6898 = and i1 %6889, %6897
  %6899 = zext i1 %6898 to i8
  store i8 %6899, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6901 = select i1 %6898, i64 %6882, i64 %6884
  store i64 %6901, i64* %6900, align 8, !tbaa !2428
  %6902 = load i8, i8* %BRANCH_TAKEN
  %6903 = icmp eq i8 %6902, 1
  br i1 %6903, label %block_400ee9, label %block_400eba

block_40126b:                                     ; preds = %block_401257, %block_401246
  %MEMORY.40 = phi %struct.Memory* [ %7214, %block_401246 ], [ %6100, %block_401257 ]
  %6904 = load i64, i64* %PC
  %6905 = add i64 %6904, 5
  %6906 = load i64, i64* %PC
  %6907 = add i64 %6906, 5
  store i64 %6907, i64* %PC
  %6908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6905, i64* %6908, align 8, !tbaa !2428
  br label %block_401270

block_400c20:                                     ; preds = %block_400c16
  %6909 = load i64, i64* %RBP
  %6910 = sub i64 %6909, 8
  %6911 = load i64, i64* %PC
  %6912 = add i64 %6911, 7
  store i64 %6912, i64* %PC
  %6913 = inttoptr i64 %6910 to i32*
  store i32 0, i32* %6913
  br label %block_400c27

block_400c38:                                     ; preds = %block_400c31, %block_400c42
  %MEMORY.41 = phi %struct.Memory* [ %MEMORY.38, %block_400c31 ], [ %MEMORY.41, %block_400c42 ]
  %6914 = load i64, i64* %RBP
  %6915 = sub i64 %6914, 12
  %6916 = load i64, i64* %PC
  %6917 = add i64 %6916, 4
  store i64 %6917, i64* %PC
  %6918 = inttoptr i64 %6915 to i32*
  %6919 = load i32, i32* %6918
  %6920 = sub i32 %6919, 1
  %6921 = icmp ult i32 %6919, 1
  %6922 = zext i1 %6921 to i8
  %6923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6922, i8* %6923, align 1, !tbaa !2432
  %6924 = and i32 %6920, 255
  %6925 = call i32 @llvm.ctpop.i32(i32 %6924) #16
  %6926 = trunc i32 %6925 to i8
  %6927 = and i8 %6926, 1
  %6928 = xor i8 %6927, 1
  %6929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6928, i8* %6929, align 1, !tbaa !2446
  %6930 = xor i32 %6919, 1
  %6931 = xor i32 %6930, %6920
  %6932 = lshr i32 %6931, 4
  %6933 = trunc i32 %6932 to i8
  %6934 = and i8 %6933, 1
  %6935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6934, i8* %6935, align 1, !tbaa !2447
  %6936 = icmp eq i32 %6920, 0
  %6937 = zext i1 %6936 to i8
  %6938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6937, i8* %6938, align 1, !tbaa !2448
  %6939 = lshr i32 %6920, 31
  %6940 = trunc i32 %6939 to i8
  %6941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6940, i8* %6941, align 1, !tbaa !2449
  %6942 = lshr i32 %6919, 31
  %6943 = xor i32 %6939, %6942
  %6944 = add nuw nsw i32 %6943, %6942
  %6945 = icmp eq i32 %6944, 2
  %6946 = zext i1 %6945 to i8
  %6947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6946, i8* %6947, align 1, !tbaa !2450
  %6948 = load i64, i64* %PC
  %6949 = add i64 %6948, 53
  %6950 = load i64, i64* %PC
  %6951 = add i64 %6950, 6
  %6952 = load i64, i64* %PC
  %6953 = add i64 %6952, 6
  store i64 %6953, i64* %PC
  %6954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6955 = load i8, i8* %6954, align 1, !tbaa !2448
  %6956 = icmp eq i8 %6955, 0
  %6957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6958 = load i8, i8* %6957, align 1, !tbaa !2449
  %6959 = icmp ne i8 %6958, 0
  %6960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6961 = load i8, i8* %6960, align 1, !tbaa !2450
  %6962 = icmp ne i8 %6961, 0
  %6963 = xor i1 %6959, %6962
  %6964 = xor i1 %6963, true
  %6965 = and i1 %6956, %6964
  %6966 = zext i1 %6965 to i8
  store i8 %6966, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6968 = select i1 %6965, i64 %6949, i64 %6951
  store i64 %6968, i64* %6967, align 8, !tbaa !2428
  %6969 = load i8, i8* %BRANCH_TAKEN
  %6970 = icmp eq i8 %6969, 1
  br i1 %6970, label %block_400c71, label %block_400c42

block_400a1f:                                     ; preds = %block_40099e
  %6971 = load i64, i64* %PC
  %6972 = add i64 %6971, 11
  store i64 %6972, i64* %PC
  store i32 0, i32* bitcast (%class_type* @class to i32*)
  %6973 = load i64, i64* %PC
  %6974 = add i64 %6973, 11
  store i64 %6974, i64* %PC
  store i32 11, i32* bitcast (%piecemax_type* @piecemax to i32*)
  %6975 = load i64, i64* %RBP
  %6976 = sub i64 %6975, 4
  %6977 = load i64, i64* %PC
  %6978 = add i64 %6977, 7
  store i64 %6978, i64* %PC
  %6979 = inttoptr i64 %6976 to i32*
  store i32 0, i32* %6979
  br label %block_400a3c

block_400e1c:                                     ; preds = %block_400e12
  %6980 = load i64, i64* %RBP
  %6981 = sub i64 %6980, 4
  %6982 = load i64, i64* %PC
  %6983 = add i64 %6982, 3
  store i64 %6983, i64* %PC
  %6984 = inttoptr i64 %6981 to i32*
  %6985 = load i32, i32* %6984
  %6986 = zext i32 %6985 to i64
  store i64 %6986, i64* %RAX, align 8, !tbaa !2428
  %6987 = load i64, i64* %RBP
  %6988 = sub i64 %6987, 8
  %6989 = load i64, i64* %PC
  %6990 = add i64 %6989, 3
  store i64 %6990, i64* %PC
  %6991 = inttoptr i64 %6988 to i32*
  %6992 = load i32, i32* %6991
  %6993 = zext i32 %6992 to i64
  store i64 %6993, i64* %RCX, align 8, !tbaa !2428
  %6994 = load i64, i64* %RBP
  %6995 = sub i64 %6994, 12
  %6996 = load i64, i64* %PC
  %6997 = add i64 %6996, 3
  store i64 %6997, i64* %PC
  %6998 = inttoptr i64 %6995 to i32*
  %6999 = load i32, i32* %6998
  %7000 = zext i32 %6999 to i64
  store i64 %7000, i64* %RDX, align 8, !tbaa !2428
  %7001 = load i64, i64* %RDX
  %7002 = load i64, i64* %PC
  %7003 = add i64 %7002, 3
  store i64 %7003, i64* %PC
  %7004 = and i64 %7001, 4294967295
  %7005 = shl i64 %7004, 2
  %7006 = trunc i64 %7005 to i32
  %7007 = icmp slt i32 %7006, 0
  %7008 = shl i32 %7006, 1
  %7009 = zext i32 %7008 to i64
  store i64 %7009, i64* %RDX, align 8, !tbaa !2428
  %7010 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7011 = zext i1 %7007 to i8
  store i8 %7011, i8* %7010, align 1, !tbaa !2451
  %7012 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7013 = and i32 %7008, 254
  %7014 = call i32 @llvm.ctpop.i32(i32 %7013) #16
  %7015 = trunc i32 %7014 to i8
  %7016 = and i8 %7015, 1
  %7017 = xor i8 %7016, 1
  store i8 %7017, i8* %7012, align 1, !tbaa !2451
  %7018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7018, align 1, !tbaa !2451
  %7019 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7020 = icmp eq i32 %7008, 0
  %7021 = zext i1 %7020 to i8
  store i8 %7021, i8* %7019, align 1, !tbaa !2451
  %7022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7023 = lshr i32 %7008, 31
  %7024 = trunc i32 %7023 to i8
  store i8 %7024, i8* %7022, align 1, !tbaa !2451
  %7025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7025, align 1, !tbaa !2451
  %7026 = load i64, i64* %RCX
  %7027 = load i32, i32* %EDX
  %7028 = zext i32 %7027 to i64
  %7029 = load i64, i64* %PC
  %7030 = add i64 %7029, 2
  store i64 %7030, i64* %PC
  %7031 = trunc i64 %7026 to i32
  %7032 = add i32 %7027, %7031
  %7033 = zext i32 %7032 to i64
  store i64 %7033, i64* %RCX, align 8, !tbaa !2428
  %7034 = icmp ult i32 %7032, %7031
  %7035 = icmp ult i32 %7032, %7027
  %7036 = or i1 %7034, %7035
  %7037 = zext i1 %7036 to i8
  %7038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7037, i8* %7038, align 1, !tbaa !2432
  %7039 = and i32 %7032, 255
  %7040 = call i32 @llvm.ctpop.i32(i32 %7039) #16
  %7041 = trunc i32 %7040 to i8
  %7042 = and i8 %7041, 1
  %7043 = xor i8 %7042, 1
  %7044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7043, i8* %7044, align 1, !tbaa !2446
  %7045 = xor i64 %7028, %7026
  %7046 = trunc i64 %7045 to i32
  %7047 = xor i32 %7046, %7032
  %7048 = lshr i32 %7047, 4
  %7049 = trunc i32 %7048 to i8
  %7050 = and i8 %7049, 1
  %7051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7050, i8* %7051, align 1, !tbaa !2447
  %7052 = icmp eq i32 %7032, 0
  %7053 = zext i1 %7052 to i8
  %7054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7053, i8* %7054, align 1, !tbaa !2448
  %7055 = lshr i32 %7032, 31
  %7056 = trunc i32 %7055 to i8
  %7057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7056, i8* %7057, align 1, !tbaa !2449
  %7058 = lshr i32 %7031, 31
  %7059 = lshr i32 %7027, 31
  %7060 = xor i32 %7055, %7058
  %7061 = xor i32 %7055, %7059
  %7062 = add nuw nsw i32 %7060, %7061
  %7063 = icmp eq i32 %7062, 2
  %7064 = zext i1 %7063 to i8
  %7065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7064, i8* %7065, align 1, !tbaa !2450
  %7066 = load i64, i64* %RCX
  %7067 = load i64, i64* %PC
  %7068 = add i64 %7067, 3
  store i64 %7068, i64* %PC
  %7069 = and i64 %7066, 4294967295
  %7070 = shl i64 %7069, 2
  %7071 = trunc i64 %7070 to i32
  %7072 = icmp slt i32 %7071, 0
  %7073 = shl i32 %7071, 1
  %7074 = zext i32 %7073 to i64
  store i64 %7074, i64* %RCX, align 8, !tbaa !2428
  %7075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7076 = zext i1 %7072 to i8
  store i8 %7076, i8* %7075, align 1, !tbaa !2451
  %7077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7078 = and i32 %7073, 254
  %7079 = call i32 @llvm.ctpop.i32(i32 %7078) #16
  %7080 = trunc i32 %7079 to i8
  %7081 = and i8 %7080, 1
  %7082 = xor i8 %7081, 1
  store i8 %7082, i8* %7077, align 1, !tbaa !2451
  %7083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7083, align 1, !tbaa !2451
  %7084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7085 = icmp eq i32 %7073, 0
  %7086 = zext i1 %7085 to i8
  store i8 %7086, i8* %7084, align 1, !tbaa !2451
  %7087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7088 = lshr i32 %7073, 31
  %7089 = trunc i32 %7088 to i8
  store i8 %7089, i8* %7087, align 1, !tbaa !2451
  %7090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7090, align 1, !tbaa !2451
  %7091 = load i64, i64* %RAX
  %7092 = load i32, i32* %ECX
  %7093 = zext i32 %7092 to i64
  %7094 = load i64, i64* %PC
  %7095 = add i64 %7094, 2
  store i64 %7095, i64* %PC
  %7096 = trunc i64 %7091 to i32
  %7097 = add i32 %7092, %7096
  %7098 = zext i32 %7097 to i64
  store i64 %7098, i64* %RAX, align 8, !tbaa !2428
  %7099 = icmp ult i32 %7097, %7096
  %7100 = icmp ult i32 %7097, %7092
  %7101 = or i1 %7099, %7100
  %7102 = zext i1 %7101 to i8
  %7103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7102, i8* %7103, align 1, !tbaa !2432
  %7104 = and i32 %7097, 255
  %7105 = call i32 @llvm.ctpop.i32(i32 %7104) #16
  %7106 = trunc i32 %7105 to i8
  %7107 = and i8 %7106, 1
  %7108 = xor i8 %7107, 1
  %7109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7108, i8* %7109, align 1, !tbaa !2446
  %7110 = xor i64 %7093, %7091
  %7111 = trunc i64 %7110 to i32
  %7112 = xor i32 %7111, %7097
  %7113 = lshr i32 %7112, 4
  %7114 = trunc i32 %7113 to i8
  %7115 = and i8 %7114, 1
  %7116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7115, i8* %7116, align 1, !tbaa !2447
  %7117 = icmp eq i32 %7097, 0
  %7118 = zext i1 %7117 to i8
  %7119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7118, i8* %7119, align 1, !tbaa !2448
  %7120 = lshr i32 %7097, 31
  %7121 = trunc i32 %7120 to i8
  %7122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7121, i8* %7122, align 1, !tbaa !2449
  %7123 = lshr i32 %7096, 31
  %7124 = lshr i32 %7092, 31
  %7125 = xor i32 %7120, %7123
  %7126 = xor i32 %7120, %7124
  %7127 = add nuw nsw i32 %7125, %7126
  %7128 = icmp eq i32 %7127, 2
  %7129 = zext i1 %7128 to i8
  %7130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7129, i8* %7130, align 1, !tbaa !2450
  %7131 = load i32, i32* %EAX
  %7132 = zext i32 %7131 to i64
  %7133 = load i64, i64* %PC
  %7134 = add i64 %7133, 3
  store i64 %7134, i64* %PC
  %7135 = shl i64 %7132, 32
  %7136 = ashr exact i64 %7135, 32
  store i64 %7136, i64* %RSI, align 8, !tbaa !2428
  %7137 = load i64, i64* %RSI
  %7138 = mul i64 %7137, 4
  %7139 = add i64 %7138, add (i64 ptrtoint (%p_type* @p to i64), i64 14336)
  %7140 = load i64, i64* %PC
  %7141 = add i64 %7140, 11
  store i64 %7141, i64* %PC
  %7142 = inttoptr i64 %7139 to i32*
  store i32 1, i32* %7142
  %7143 = load i64, i64* %RBP
  %7144 = sub i64 %7143, 12
  %7145 = load i64, i64* %PC
  %7146 = add i64 %7145, 3
  store i64 %7146, i64* %PC
  %7147 = inttoptr i64 %7144 to i32*
  %7148 = load i32, i32* %7147
  %7149 = zext i32 %7148 to i64
  store i64 %7149, i64* %RAX, align 8, !tbaa !2428
  %7150 = load i64, i64* %RAX
  %7151 = load i64, i64* %PC
  %7152 = add i64 %7151, 3
  store i64 %7152, i64* %PC
  %7153 = trunc i64 %7150 to i32
  %7154 = add i32 1, %7153
  %7155 = zext i32 %7154 to i64
  store i64 %7155, i64* %RAX, align 8, !tbaa !2428
  %7156 = icmp ult i32 %7154, %7153
  %7157 = icmp ult i32 %7154, 1
  %7158 = or i1 %7156, %7157
  %7159 = zext i1 %7158 to i8
  %7160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7159, i8* %7160, align 1, !tbaa !2432
  %7161 = and i32 %7154, 255
  %7162 = call i32 @llvm.ctpop.i32(i32 %7161) #16
  %7163 = trunc i32 %7162 to i8
  %7164 = and i8 %7163, 1
  %7165 = xor i8 %7164, 1
  %7166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7165, i8* %7166, align 1, !tbaa !2446
  %7167 = xor i64 1, %7150
  %7168 = trunc i64 %7167 to i32
  %7169 = xor i32 %7168, %7154
  %7170 = lshr i32 %7169, 4
  %7171 = trunc i32 %7170 to i8
  %7172 = and i8 %7171, 1
  %7173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7172, i8* %7173, align 1, !tbaa !2447
  %7174 = icmp eq i32 %7154, 0
  %7175 = zext i1 %7174 to i8
  %7176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7175, i8* %7176, align 1, !tbaa !2448
  %7177 = lshr i32 %7154, 31
  %7178 = trunc i32 %7177 to i8
  %7179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7178, i8* %7179, align 1, !tbaa !2449
  %7180 = lshr i32 %7153, 31
  %7181 = xor i32 %7177, %7180
  %7182 = add nuw nsw i32 %7181, %7177
  %7183 = icmp eq i32 %7182, 2
  %7184 = zext i1 %7183 to i8
  %7185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7184, i8* %7185, align 1, !tbaa !2450
  %7186 = load i64, i64* %RBP
  %7187 = sub i64 %7186, 12
  %7188 = load i32, i32* %EAX
  %7189 = zext i32 %7188 to i64
  %7190 = load i64, i64* %PC
  %7191 = add i64 %7190, 3
  store i64 %7191, i64* %PC
  %7192 = inttoptr i64 %7187 to i32*
  store i32 %7188, i32* %7192
  %7193 = load i64, i64* %PC
  %7194 = sub i64 %7193, 52
  %7195 = load i64, i64* %PC
  %7196 = add i64 %7195, 5
  store i64 %7196, i64* %PC
  %7197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7194, i64* %7197, align 8, !tbaa !2428
  br label %block_400e12

block_401218:                                     ; preds = %block_401204, %block_4011ee
  %MEMORY.42 = phi %struct.Memory* [ %7890, %block_401204 ], [ %137, %block_4011ee ]
  %7198 = load i64, i64* %PC
  %7199 = add i64 %7198, 7
  store i64 %7199, i64* %PC
  %7200 = load i32, i32* bitcast (%n_type* @n to i32*)
  %7201 = zext i32 %7200 to i64
  store i64 %7201, i64* %RDI, align 8, !tbaa !2428
  %7202 = load i64, i64* %PC
  %7203 = sub i64 %7202, 2687
  %7204 = load i64, i64* %PC
  %7205 = add i64 %7204, 5
  %7206 = load i64, i64* %PC
  %7207 = add i64 %7206, 5
  store i64 %7207, i64* %PC
  %7208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7209 = load i64, i64* %7208, align 8, !tbaa !2428
  %7210 = add i64 %7209, -8
  %7211 = inttoptr i64 %7210 to i64*
  store i64 %7205, i64* %7211
  store i64 %7210, i64* %7208, align 8, !tbaa !2428
  %7212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7203, i64* %7212, align 8, !tbaa !2428
  %7213 = load i64, i64* %PC
  %7214 = call %struct.Memory* @sub_4007a0_Trial_renamed_(%struct.State* %0, i64 %7213, %struct.Memory* %MEMORY.42)
  %7215 = load i32, i32* %EAX
  %7216 = zext i32 %7215 to i64
  %7217 = load i64, i64* %PC
  %7218 = add i64 %7217, 3
  store i64 %7218, i64* %PC
  %7219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7219, align 1, !tbaa !2432
  %7220 = and i32 %7215, 255
  %7221 = call i32 @llvm.ctpop.i32(i32 %7220) #16
  %7222 = trunc i32 %7221 to i8
  %7223 = and i8 %7222, 1
  %7224 = xor i8 %7223, 1
  %7225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7224, i8* %7225, align 1, !tbaa !2446
  %7226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7226, align 1, !tbaa !2447
  %7227 = icmp eq i32 %7215, 0
  %7228 = zext i1 %7227 to i8
  %7229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7228, i8* %7229, align 1, !tbaa !2448
  %7230 = lshr i32 %7215, 31
  %7231 = trunc i32 %7230 to i8
  %7232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7231, i8* %7232, align 1, !tbaa !2449
  %7233 = lshr i32 %7215, 31
  %7234 = xor i32 %7230, %7233
  %7235 = add nuw nsw i32 %7234, %7233
  %7236 = icmp eq i32 %7235, 2
  %7237 = zext i1 %7236 to i8
  %7238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7237, i8* %7238, align 1, !tbaa !2450
  %7239 = load i64, i64* %PC
  %7240 = add i64 %7239, 31
  %7241 = load i64, i64* %PC
  %7242 = add i64 %7241, 6
  %7243 = load i64, i64* %PC
  %7244 = add i64 %7243, 6
  store i64 %7244, i64* %PC
  %7245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7246 = load i8, i8* %7245, align 1, !tbaa !2448
  %7247 = icmp eq i8 %7246, 0
  %7248 = zext i1 %7247 to i8
  store i8 %7248, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7250 = select i1 %7247, i64 %7240, i64 %7242
  store i64 %7250, i64* %7249, align 8, !tbaa !2428
  %7251 = load i8, i8* %BRANCH_TAKEN
  %7252 = icmp eq i8 %7251, 1
  %7253 = load i64, i64* %PC
  br i1 %7252, label %block_401246, label %block_40122d

block_400c16:                                     ; preds = %block_400bf9, %block_400c84
  %MEMORY.43 = phi %struct.Memory* [ %MEMORY.10, %block_400bf9 ], [ %MEMORY.38, %block_400c84 ]
  %7254 = load i64, i64* %RBP
  %7255 = sub i64 %7254, 4
  %7256 = load i64, i64* %PC
  %7257 = add i64 %7256, 4
  store i64 %7257, i64* %PC
  %7258 = inttoptr i64 %7255 to i32*
  %7259 = load i32, i32* %7258
  %7260 = sub i32 %7259, 3
  %7261 = icmp ult i32 %7259, 3
  %7262 = zext i1 %7261 to i8
  %7263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7262, i8* %7263, align 1, !tbaa !2432
  %7264 = and i32 %7260, 255
  %7265 = call i32 @llvm.ctpop.i32(i32 %7264) #16
  %7266 = trunc i32 %7265 to i8
  %7267 = and i8 %7266, 1
  %7268 = xor i8 %7267, 1
  %7269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7268, i8* %7269, align 1, !tbaa !2446
  %7270 = xor i32 %7259, 3
  %7271 = xor i32 %7270, %7260
  %7272 = lshr i32 %7271, 4
  %7273 = trunc i32 %7272 to i8
  %7274 = and i8 %7273, 1
  %7275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7274, i8* %7275, align 1, !tbaa !2447
  %7276 = icmp eq i32 %7260, 0
  %7277 = zext i1 %7276 to i8
  %7278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7277, i8* %7278, align 1, !tbaa !2448
  %7279 = lshr i32 %7260, 31
  %7280 = trunc i32 %7279 to i8
  %7281 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7280, i8* %7281, align 1, !tbaa !2449
  %7282 = lshr i32 %7259, 31
  %7283 = xor i32 %7279, %7282
  %7284 = add nuw nsw i32 %7283, %7282
  %7285 = icmp eq i32 %7284, 2
  %7286 = zext i1 %7285 to i8
  %7287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7286, i8* %7287, align 1, !tbaa !2450
  %7288 = load i64, i64* %PC
  %7289 = add i64 %7288, 125
  %7290 = load i64, i64* %PC
  %7291 = add i64 %7290, 6
  %7292 = load i64, i64* %PC
  %7293 = add i64 %7292, 6
  store i64 %7293, i64* %PC
  %7294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7295 = load i8, i8* %7294, align 1, !tbaa !2448
  %7296 = icmp eq i8 %7295, 0
  %7297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7298 = load i8, i8* %7297, align 1, !tbaa !2449
  %7299 = icmp ne i8 %7298, 0
  %7300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7301 = load i8, i8* %7300, align 1, !tbaa !2450
  %7302 = icmp ne i8 %7301, 0
  %7303 = xor i1 %7299, %7302
  %7304 = xor i1 %7303, true
  %7305 = and i1 %7296, %7304
  %7306 = zext i1 %7305 to i8
  store i8 %7306, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7308 = select i1 %7305, i64 %7289, i64 %7291
  store i64 %7308, i64* %7307, align 8, !tbaa !2428
  %7309 = load i8, i8* %BRANCH_TAKEN
  %7310 = icmp eq i8 %7309, 1
  br i1 %7310, label %block_400c97, label %block_400c20

block_400bf9:                                     ; preds = %block_400b78
  %7311 = load i64, i64* %PC
  %7312 = add i64 %7311, 11
  store i64 %7312, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 12) to i32*)
  %7313 = load i64, i64* %PC
  %7314 = add i64 %7313, 11
  store i64 %7314, i64* %PC
  store i32 25, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 12) to i32*)
  %7315 = load i64, i64* %RBP
  %7316 = sub i64 %7315, 4
  %7317 = load i64, i64* %PC
  %7318 = add i64 %7317, 7
  store i64 %7318, i64* %PC
  %7319 = inttoptr i64 %7316 to i32*
  store i32 0, i32* %7319
  br label %block_400c16

block_400e12:                                     ; preds = %block_400e0b, %block_400e1c
  %MEMORY.44 = phi %struct.Memory* [ %MEMORY.47, %block_400e0b ], [ %MEMORY.44, %block_400e1c ]
  %7320 = load i64, i64* %RBP
  %7321 = sub i64 %7320, 12
  %7322 = load i64, i64* %PC
  %7323 = add i64 %7322, 4
  store i64 %7323, i64* %PC
  %7324 = inttoptr i64 %7321 to i32*
  %7325 = load i32, i32* %7324
  %7326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7326, align 1, !tbaa !2432
  %7327 = and i32 %7325, 255
  %7328 = call i32 @llvm.ctpop.i32(i32 %7327) #16
  %7329 = trunc i32 %7328 to i8
  %7330 = and i8 %7329, 1
  %7331 = xor i8 %7330, 1
  %7332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7331, i8* %7332, align 1, !tbaa !2446
  %7333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7333, align 1, !tbaa !2447
  %7334 = icmp eq i32 %7325, 0
  %7335 = zext i1 %7334 to i8
  %7336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7335, i8* %7336, align 1, !tbaa !2448
  %7337 = lshr i32 %7325, 31
  %7338 = trunc i32 %7337 to i8
  %7339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7338, i8* %7339, align 1, !tbaa !2449
  %7340 = lshr i32 %7325, 31
  %7341 = xor i32 %7337, %7340
  %7342 = add nuw nsw i32 %7341, %7340
  %7343 = icmp eq i32 %7342, 2
  %7344 = zext i1 %7343 to i8
  %7345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7344, i8* %7345, align 1, !tbaa !2450
  %7346 = load i64, i64* %PC
  %7347 = add i64 %7346, 53
  %7348 = load i64, i64* %PC
  %7349 = add i64 %7348, 6
  %7350 = load i64, i64* %PC
  %7351 = add i64 %7350, 6
  store i64 %7351, i64* %PC
  %7352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7353 = load i8, i8* %7352, align 1, !tbaa !2448
  %7354 = icmp eq i8 %7353, 0
  %7355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7356 = load i8, i8* %7355, align 1, !tbaa !2449
  %7357 = icmp ne i8 %7356, 0
  %7358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7359 = load i8, i8* %7358, align 1, !tbaa !2450
  %7360 = icmp ne i8 %7359, 0
  %7361 = xor i1 %7357, %7360
  %7362 = xor i1 %7361, true
  %7363 = and i1 %7354, %7362
  %7364 = zext i1 %7363 to i8
  store i8 %7364, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7366 = select i1 %7363, i64 %7347, i64 %7349
  store i64 %7366, i64* %7365, align 8, !tbaa !2428
  %7367 = load i8, i8* %BRANCH_TAKEN
  %7368 = icmp eq i8 %7367, 1
  br i1 %7368, label %block_400e4b, label %block_400e1c

block_401079:                                     ; preds = %block_401072, %block_4010c3
  %MEMORY.45 = phi %struct.Memory* [ %MEMORY.32, %block_401072 ], [ %MEMORY.31, %block_4010c3 ]
  %7369 = load i64, i64* %RBP
  %7370 = sub i64 %7369, 8
  %7371 = load i64, i64* %PC
  %7372 = add i64 %7371, 4
  store i64 %7372, i64* %PC
  %7373 = inttoptr i64 %7370 to i32*
  %7374 = load i32, i32* %7373
  %7375 = sub i32 %7374, 1
  %7376 = icmp ult i32 %7374, 1
  %7377 = zext i1 %7376 to i8
  %7378 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7377, i8* %7378, align 1, !tbaa !2432
  %7379 = and i32 %7375, 255
  %7380 = call i32 @llvm.ctpop.i32(i32 %7379) #16
  %7381 = trunc i32 %7380 to i8
  %7382 = and i8 %7381, 1
  %7383 = xor i8 %7382, 1
  %7384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7383, i8* %7384, align 1, !tbaa !2446
  %7385 = xor i32 %7374, 1
  %7386 = xor i32 %7385, %7375
  %7387 = lshr i32 %7386, 4
  %7388 = trunc i32 %7387 to i8
  %7389 = and i8 %7388, 1
  %7390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7389, i8* %7390, align 1, !tbaa !2447
  %7391 = icmp eq i32 %7375, 0
  %7392 = zext i1 %7391 to i8
  %7393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7392, i8* %7393, align 1, !tbaa !2448
  %7394 = lshr i32 %7375, 31
  %7395 = trunc i32 %7394 to i8
  %7396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7395, i8* %7396, align 1, !tbaa !2449
  %7397 = lshr i32 %7374, 31
  %7398 = xor i32 %7394, %7397
  %7399 = add nuw nsw i32 %7398, %7397
  %7400 = icmp eq i32 %7399, 2
  %7401 = zext i1 %7400 to i8
  %7402 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7401, i8* %7402, align 1, !tbaa !2450
  %7403 = load i64, i64* %PC
  %7404 = add i64 %7403, 89
  %7405 = load i64, i64* %PC
  %7406 = add i64 %7405, 6
  %7407 = load i64, i64* %PC
  %7408 = add i64 %7407, 6
  store i64 %7408, i64* %PC
  %7409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7410 = load i8, i8* %7409, align 1, !tbaa !2448
  %7411 = icmp eq i8 %7410, 0
  %7412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7413 = load i8, i8* %7412, align 1, !tbaa !2449
  %7414 = icmp ne i8 %7413, 0
  %7415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7416 = load i8, i8* %7415, align 1, !tbaa !2450
  %7417 = icmp ne i8 %7416, 0
  %7418 = xor i1 %7414, %7417
  %7419 = xor i1 %7418, true
  %7420 = and i1 %7411, %7419
  %7421 = zext i1 %7420 to i8
  store i8 %7421, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %7422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7423 = select i1 %7420, i64 %7404, i64 %7406
  store i64 %7423, i64* %7422, align 8, !tbaa !2428
  %7424 = load i8, i8* %BRANCH_TAKEN
  %7425 = icmp eq i8 %7424, 1
  br i1 %7425, label %block_4010d6, label %block_401083

block_400dad:                                     ; preds = %block_400d74
  %7426 = load i64, i64* %PC
  %7427 = add i64 %7426, 5
  %7428 = load i64, i64* %PC
  %7429 = add i64 %7428, 5
  store i64 %7429, i64* %PC
  %7430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7427, i64* %7430, align 8, !tbaa !2428
  %7431 = load i64, i64* %RBP
  %7432 = sub i64 %7431, 8
  %7433 = load i64, i64* %PC
  %7434 = add i64 %7433, 3
  store i64 %7434, i64* %PC
  %7435 = inttoptr i64 %7432 to i32*
  %7436 = load i32, i32* %7435
  %7437 = zext i32 %7436 to i64
  store i64 %7437, i64* %RAX, align 8, !tbaa !2428
  %7438 = load i64, i64* %RAX
  %7439 = load i64, i64* %PC
  %7440 = add i64 %7439, 3
  store i64 %7440, i64* %PC
  %7441 = trunc i64 %7438 to i32
  %7442 = add i32 1, %7441
  %7443 = zext i32 %7442 to i64
  store i64 %7443, i64* %RAX, align 8, !tbaa !2428
  %7444 = icmp ult i32 %7442, %7441
  %7445 = icmp ult i32 %7442, 1
  %7446 = or i1 %7444, %7445
  %7447 = zext i1 %7446 to i8
  %7448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7447, i8* %7448, align 1, !tbaa !2432
  %7449 = and i32 %7442, 255
  %7450 = call i32 @llvm.ctpop.i32(i32 %7449) #16
  %7451 = trunc i32 %7450 to i8
  %7452 = and i8 %7451, 1
  %7453 = xor i8 %7452, 1
  %7454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7453, i8* %7454, align 1, !tbaa !2446
  %7455 = xor i64 1, %7438
  %7456 = trunc i64 %7455 to i32
  %7457 = xor i32 %7456, %7442
  %7458 = lshr i32 %7457, 4
  %7459 = trunc i32 %7458 to i8
  %7460 = and i8 %7459, 1
  %7461 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7460, i8* %7461, align 1, !tbaa !2447
  %7462 = icmp eq i32 %7442, 0
  %7463 = zext i1 %7462 to i8
  %7464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7463, i8* %7464, align 1, !tbaa !2448
  %7465 = lshr i32 %7442, 31
  %7466 = trunc i32 %7465 to i8
  %7467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7466, i8* %7467, align 1, !tbaa !2449
  %7468 = lshr i32 %7441, 31
  %7469 = xor i32 %7465, %7468
  %7470 = add nuw nsw i32 %7469, %7465
  %7471 = icmp eq i32 %7470, 2
  %7472 = zext i1 %7471 to i8
  %7473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7472, i8* %7473, align 1, !tbaa !2450
  %7474 = load i64, i64* %RBP
  %7475 = sub i64 %7474, 8
  %7476 = load i32, i32* %EAX
  %7477 = zext i32 %7476 to i64
  %7478 = load i64, i64* %PC
  %7479 = add i64 %7478, 3
  store i64 %7479, i64* %PC
  %7480 = inttoptr i64 %7475 to i32*
  store i32 %7476, i32* %7480
  %7481 = load i64, i64* %PC
  %7482 = sub i64 %7481, 88
  %7483 = load i64, i64* %PC
  %7484 = add i64 %7483, 5
  store i64 %7484, i64* %PC
  %7485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7482, i64* %7485, align 8, !tbaa !2428
  br label %block_400d63

block_401270:                                     ; preds = %block_40126b, %block_40122d
  %MEMORY.46 = phi %struct.Memory* [ %MEMORY.40, %block_40126b ], [ %6716, %block_40122d ]
  %7486 = load i64, i64* %PC
  %7487 = add i64 %7486, 10
  store i64 %7487, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 60), i64* %RDI, align 8, !tbaa !2428
  %7488 = load i64, i64* %PC
  %7489 = add i64 %7488, 7
  store i64 %7489, i64* %PC
  %7490 = load i32, i32* bitcast (%n_type* @n to i32*)
  %7491 = zext i32 %7490 to i64
  store i64 %7491, i64* %RSI, align 8, !tbaa !2428
  %7492 = load i64, i64* %PC
  %7493 = add i64 %7492, 2
  store i64 %7493, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %7494 = load i64, i64* %PC
  %7495 = sub i64 %7494, 3683
  %7496 = load i64, i64* %PC
  %7497 = add i64 %7496, 5
  %7498 = load i64, i64* %PC
  %7499 = add i64 %7498, 5
  store i64 %7499, i64* %PC
  %7500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7501 = load i64, i64* %7500, align 8, !tbaa !2428
  %7502 = add i64 %7501, -8
  %7503 = inttoptr i64 %7502 to i64*
  store i64 %7497, i64* %7503
  store i64 %7502, i64* %7500, align 8, !tbaa !2428
  %7504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7495, i64* %7504, align 8, !tbaa !2428
  %7505 = load i64, i64* %PC
  %7506 = call %struct.Memory* @ext_619238_printf(%struct.State* %0, i64 %7505, %struct.Memory* %MEMORY.46)
  %7507 = load i64, i64* %PC
  %7508 = add i64 %7507, 10
  store i64 %7508, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 60), i64* %RDI, align 8, !tbaa !2428
  %7509 = load i64, i64* %PC
  %7510 = add i64 %7509, 7
  store i64 %7510, i64* %PC
  %7511 = load i32, i32* bitcast (%kount_type* @kount to i32*)
  %7512 = zext i32 %7511 to i64
  store i64 %7512, i64* %RSI, align 8, !tbaa !2428
  %7513 = load i64, i64* %RBP
  %7514 = sub i64 %7513, 32
  %7515 = load i32, i32* %EAX
  %7516 = zext i32 %7515 to i64
  %7517 = load i64, i64* %PC
  %7518 = add i64 %7517, 3
  store i64 %7518, i64* %PC
  %7519 = inttoptr i64 %7514 to i32*
  store i32 %7515, i32* %7519
  %7520 = load i64, i64* %PC
  %7521 = add i64 %7520, 2
  store i64 %7521, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %7522 = load i64, i64* %PC
  %7523 = sub i64 %7522, 3710
  %7524 = load i64, i64* %PC
  %7525 = add i64 %7524, 5
  %7526 = load i64, i64* %PC
  %7527 = add i64 %7526, 5
  store i64 %7527, i64* %PC
  %7528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7529 = load i64, i64* %7528, align 8, !tbaa !2428
  %7530 = add i64 %7529, -8
  %7531 = inttoptr i64 %7530 to i64*
  store i64 %7525, i64* %7531
  store i64 %7530, i64* %7528, align 8, !tbaa !2428
  %7532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7523, i64* %7532, align 8, !tbaa !2428
  %7533 = load i64, i64* %PC
  %7534 = call %struct.Memory* @ext_619238_printf(%struct.State* %0, i64 %7533, %struct.Memory* %7506)
  %7535 = load i64, i64* %RBP
  %7536 = sub i64 %7535, 36
  %7537 = load i32, i32* %EAX
  %7538 = zext i32 %7537 to i64
  %7539 = load i64, i64* %PC
  %7540 = add i64 %7539, 3
  store i64 %7540, i64* %PC
  %7541 = inttoptr i64 %7536 to i32*
  store i32 %7537, i32* %7541
  %7542 = load i64, i64* %RSP
  %7543 = load i64, i64* %PC
  %7544 = add i64 %7543, 4
  store i64 %7544, i64* %PC
  %7545 = add i64 48, %7542
  store i64 %7545, i64* %RSP, align 8, !tbaa !2428
  %7546 = icmp ult i64 %7545, %7542
  %7547 = icmp ult i64 %7545, 48
  %7548 = or i1 %7546, %7547
  %7549 = zext i1 %7548 to i8
  %7550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7549, i8* %7550, align 1, !tbaa !2432
  %7551 = trunc i64 %7545 to i32
  %7552 = and i32 %7551, 255
  %7553 = call i32 @llvm.ctpop.i32(i32 %7552) #16
  %7554 = trunc i32 %7553 to i8
  %7555 = and i8 %7554, 1
  %7556 = xor i8 %7555, 1
  %7557 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7556, i8* %7557, align 1, !tbaa !2446
  %7558 = xor i64 48, %7542
  %7559 = xor i64 %7558, %7545
  %7560 = lshr i64 %7559, 4
  %7561 = trunc i64 %7560 to i8
  %7562 = and i8 %7561, 1
  %7563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7562, i8* %7563, align 1, !tbaa !2447
  %7564 = icmp eq i64 %7545, 0
  %7565 = zext i1 %7564 to i8
  %7566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7565, i8* %7566, align 1, !tbaa !2448
  %7567 = lshr i64 %7545, 63
  %7568 = trunc i64 %7567 to i8
  %7569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7568, i8* %7569, align 1, !tbaa !2449
  %7570 = lshr i64 %7542, 63
  %7571 = xor i64 %7567, %7570
  %7572 = add nuw nsw i64 %7571, %7567
  %7573 = icmp eq i64 %7572, 2
  %7574 = zext i1 %7573 to i8
  %7575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7574, i8* %7575, align 1, !tbaa !2450
  %7576 = load i64, i64* %PC
  %7577 = add i64 %7576, 1
  store i64 %7577, i64* %PC
  %7578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7579 = load i64, i64* %7578, align 8, !tbaa !2428
  %7580 = add i64 %7579, 8
  %7581 = inttoptr i64 %7579 to i64*
  %7582 = load i64, i64* %7581
  store i64 %7582, i64* %RBP, align 8, !tbaa !2428
  store i64 %7580, i64* %7578, align 8, !tbaa !2428
  %7583 = load i64, i64* %PC
  %7584 = add i64 %7583, 1
  store i64 %7584, i64* %PC
  %7585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7587 = load i64, i64* %7586, align 8, !tbaa !2428
  %7588 = inttoptr i64 %7587 to i64*
  %7589 = load i64, i64* %7588
  store i64 %7589, i64* %7585, align 8, !tbaa !2428
  %7590 = add i64 %7587, 8
  store i64 %7590, i64* %7586, align 8, !tbaa !2428
  ret %struct.Memory* %7534

block_400a0c:                                     ; preds = %block_4009af
  %7591 = load i64, i64* %PC
  %7592 = add i64 %7591, 5
  %7593 = load i64, i64* %PC
  %7594 = add i64 %7593, 5
  store i64 %7594, i64* %PC
  %7595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7592, i64* %7595, align 8, !tbaa !2428
  %7596 = load i64, i64* %RBP
  %7597 = sub i64 %7596, 4
  %7598 = load i64, i64* %PC
  %7599 = add i64 %7598, 3
  store i64 %7599, i64* %PC
  %7600 = inttoptr i64 %7597 to i32*
  %7601 = load i32, i32* %7600
  %7602 = zext i32 %7601 to i64
  store i64 %7602, i64* %RAX, align 8, !tbaa !2428
  %7603 = load i64, i64* %RAX
  %7604 = load i64, i64* %PC
  %7605 = add i64 %7604, 3
  store i64 %7605, i64* %PC
  %7606 = trunc i64 %7603 to i32
  %7607 = add i32 1, %7606
  %7608 = zext i32 %7607 to i64
  store i64 %7608, i64* %RAX, align 8, !tbaa !2428
  %7609 = icmp ult i32 %7607, %7606
  %7610 = icmp ult i32 %7607, 1
  %7611 = or i1 %7609, %7610
  %7612 = zext i1 %7611 to i8
  %7613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7612, i8* %7613, align 1, !tbaa !2432
  %7614 = and i32 %7607, 255
  %7615 = call i32 @llvm.ctpop.i32(i32 %7614) #16
  %7616 = trunc i32 %7615 to i8
  %7617 = and i8 %7616, 1
  %7618 = xor i8 %7617, 1
  %7619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7618, i8* %7619, align 1, !tbaa !2446
  %7620 = xor i64 1, %7603
  %7621 = trunc i64 %7620 to i32
  %7622 = xor i32 %7621, %7607
  %7623 = lshr i32 %7622, 4
  %7624 = trunc i32 %7623 to i8
  %7625 = and i8 %7624, 1
  %7626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7625, i8* %7626, align 1, !tbaa !2447
  %7627 = icmp eq i32 %7607, 0
  %7628 = zext i1 %7627 to i8
  %7629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7628, i8* %7629, align 1, !tbaa !2448
  %7630 = lshr i32 %7607, 31
  %7631 = trunc i32 %7630 to i8
  %7632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7631, i8* %7632, align 1, !tbaa !2449
  %7633 = lshr i32 %7606, 31
  %7634 = xor i32 %7630, %7633
  %7635 = add nuw nsw i32 %7634, %7630
  %7636 = icmp eq i32 %7635, 2
  %7637 = zext i1 %7636 to i8
  %7638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7637, i8* %7638, align 1, !tbaa !2450
  %7639 = load i64, i64* %RBP
  %7640 = sub i64 %7639, 4
  %7641 = load i32, i32* %EAX
  %7642 = zext i32 %7641 to i64
  %7643 = load i64, i64* %PC
  %7644 = add i64 %7643, 3
  store i64 %7644, i64* %PC
  %7645 = inttoptr i64 %7640 to i32*
  store i32 %7641, i32* %7645
  %7646 = load i64, i64* %PC
  %7647 = sub i64 %7646, 124
  %7648 = load i64, i64* %PC
  %7649 = add i64 %7648, 5
  store i64 %7649, i64* %PC
  %7650 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7647, i64* %7650, align 8, !tbaa !2428
  br label %block_40099e

block_400e0b:                                     ; preds = %block_400e01
  %7651 = load i64, i64* %RBP
  %7652 = sub i64 %7651, 12
  %7653 = load i64, i64* %PC
  %7654 = add i64 %7653, 7
  store i64 %7654, i64* %PC
  %7655 = inttoptr i64 %7652 to i32*
  store i32 0, i32* %7655
  br label %block_400e12

block_400b06:                                     ; preds = %block_400afc
  %7656 = load i64, i64* %RBP
  %7657 = sub i64 %7656, 4
  %7658 = load i64, i64* %PC
  %7659 = add i64 %7658, 3
  store i64 %7659, i64* %PC
  %7660 = inttoptr i64 %7657 to i32*
  %7661 = load i32, i32* %7660
  %7662 = zext i32 %7661 to i64
  store i64 %7662, i64* %RAX, align 8, !tbaa !2428
  %7663 = load i64, i64* %RBP
  %7664 = sub i64 %7663, 8
  %7665 = load i64, i64* %PC
  %7666 = add i64 %7665, 3
  store i64 %7666, i64* %PC
  %7667 = inttoptr i64 %7664 to i32*
  %7668 = load i32, i32* %7667
  %7669 = zext i32 %7668 to i64
  store i64 %7669, i64* %RCX, align 8, !tbaa !2428
  %7670 = load i64, i64* %RBP
  %7671 = sub i64 %7670, 12
  %7672 = load i64, i64* %PC
  %7673 = add i64 %7672, 3
  store i64 %7673, i64* %PC
  %7674 = inttoptr i64 %7671 to i32*
  %7675 = load i32, i32* %7674
  %7676 = zext i32 %7675 to i64
  store i64 %7676, i64* %RDX, align 8, !tbaa !2428
  %7677 = load i64, i64* %RDX
  %7678 = load i64, i64* %PC
  %7679 = add i64 %7678, 3
  store i64 %7679, i64* %PC
  %7680 = and i64 %7677, 4294967295
  %7681 = shl i64 %7680, 2
  %7682 = trunc i64 %7681 to i32
  %7683 = icmp slt i32 %7682, 0
  %7684 = shl i32 %7682, 1
  %7685 = zext i32 %7684 to i64
  store i64 %7685, i64* %RDX, align 8, !tbaa !2428
  %7686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7687 = zext i1 %7683 to i8
  store i8 %7687, i8* %7686, align 1, !tbaa !2451
  %7688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7689 = and i32 %7684, 254
  %7690 = call i32 @llvm.ctpop.i32(i32 %7689) #16
  %7691 = trunc i32 %7690 to i8
  %7692 = and i8 %7691, 1
  %7693 = xor i8 %7692, 1
  store i8 %7693, i8* %7688, align 1, !tbaa !2451
  %7694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7694, align 1, !tbaa !2451
  %7695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7696 = icmp eq i32 %7684, 0
  %7697 = zext i1 %7696 to i8
  store i8 %7697, i8* %7695, align 1, !tbaa !2451
  %7698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7699 = lshr i32 %7684, 31
  %7700 = trunc i32 %7699 to i8
  store i8 %7700, i8* %7698, align 1, !tbaa !2451
  %7701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7701, align 1, !tbaa !2451
  %7702 = load i64, i64* %RCX
  %7703 = load i32, i32* %EDX
  %7704 = zext i32 %7703 to i64
  %7705 = load i64, i64* %PC
  %7706 = add i64 %7705, 2
  store i64 %7706, i64* %PC
  %7707 = trunc i64 %7702 to i32
  %7708 = add i32 %7703, %7707
  %7709 = zext i32 %7708 to i64
  store i64 %7709, i64* %RCX, align 8, !tbaa !2428
  %7710 = icmp ult i32 %7708, %7707
  %7711 = icmp ult i32 %7708, %7703
  %7712 = or i1 %7710, %7711
  %7713 = zext i1 %7712 to i8
  %7714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7713, i8* %7714, align 1, !tbaa !2432
  %7715 = and i32 %7708, 255
  %7716 = call i32 @llvm.ctpop.i32(i32 %7715) #16
  %7717 = trunc i32 %7716 to i8
  %7718 = and i8 %7717, 1
  %7719 = xor i8 %7718, 1
  %7720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7719, i8* %7720, align 1, !tbaa !2446
  %7721 = xor i64 %7704, %7702
  %7722 = trunc i64 %7721 to i32
  %7723 = xor i32 %7722, %7708
  %7724 = lshr i32 %7723, 4
  %7725 = trunc i32 %7724 to i8
  %7726 = and i8 %7725, 1
  %7727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7726, i8* %7727, align 1, !tbaa !2447
  %7728 = icmp eq i32 %7708, 0
  %7729 = zext i1 %7728 to i8
  %7730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7729, i8* %7730, align 1, !tbaa !2448
  %7731 = lshr i32 %7708, 31
  %7732 = trunc i32 %7731 to i8
  %7733 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7732, i8* %7733, align 1, !tbaa !2449
  %7734 = lshr i32 %7707, 31
  %7735 = lshr i32 %7703, 31
  %7736 = xor i32 %7731, %7734
  %7737 = xor i32 %7731, %7735
  %7738 = add nuw nsw i32 %7736, %7737
  %7739 = icmp eq i32 %7738, 2
  %7740 = zext i1 %7739 to i8
  %7741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7740, i8* %7741, align 1, !tbaa !2450
  %7742 = load i64, i64* %RCX
  %7743 = load i64, i64* %PC
  %7744 = add i64 %7743, 3
  store i64 %7744, i64* %PC
  %7745 = and i64 %7742, 4294967295
  %7746 = shl i64 %7745, 2
  %7747 = trunc i64 %7746 to i32
  %7748 = icmp slt i32 %7747, 0
  %7749 = shl i32 %7747, 1
  %7750 = zext i32 %7749 to i64
  store i64 %7750, i64* %RCX, align 8, !tbaa !2428
  %7751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7752 = zext i1 %7748 to i8
  store i8 %7752, i8* %7751, align 1, !tbaa !2451
  %7753 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7754 = and i32 %7749, 254
  %7755 = call i32 @llvm.ctpop.i32(i32 %7754) #16
  %7756 = trunc i32 %7755 to i8
  %7757 = and i8 %7756, 1
  %7758 = xor i8 %7757, 1
  store i8 %7758, i8* %7753, align 1, !tbaa !2451
  %7759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7759, align 1, !tbaa !2451
  %7760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7761 = icmp eq i32 %7749, 0
  %7762 = zext i1 %7761 to i8
  store i8 %7762, i8* %7760, align 1, !tbaa !2451
  %7763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7764 = lshr i32 %7749, 31
  %7765 = trunc i32 %7764 to i8
  store i8 %7765, i8* %7763, align 1, !tbaa !2451
  %7766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7766, align 1, !tbaa !2451
  %7767 = load i64, i64* %RAX
  %7768 = load i32, i32* %ECX
  %7769 = zext i32 %7768 to i64
  %7770 = load i64, i64* %PC
  %7771 = add i64 %7770, 2
  store i64 %7771, i64* %PC
  %7772 = trunc i64 %7767 to i32
  %7773 = add i32 %7768, %7772
  %7774 = zext i32 %7773 to i64
  store i64 %7774, i64* %RAX, align 8, !tbaa !2428
  %7775 = icmp ult i32 %7773, %7772
  %7776 = icmp ult i32 %7773, %7768
  %7777 = or i1 %7775, %7776
  %7778 = zext i1 %7777 to i8
  %7779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7778, i8* %7779, align 1, !tbaa !2432
  %7780 = and i32 %7773, 255
  %7781 = call i32 @llvm.ctpop.i32(i32 %7780) #16
  %7782 = trunc i32 %7781 to i8
  %7783 = and i8 %7782, 1
  %7784 = xor i8 %7783, 1
  %7785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7784, i8* %7785, align 1, !tbaa !2446
  %7786 = xor i64 %7769, %7767
  %7787 = trunc i64 %7786 to i32
  %7788 = xor i32 %7787, %7773
  %7789 = lshr i32 %7788, 4
  %7790 = trunc i32 %7789 to i8
  %7791 = and i8 %7790, 1
  %7792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7791, i8* %7792, align 1, !tbaa !2447
  %7793 = icmp eq i32 %7773, 0
  %7794 = zext i1 %7793 to i8
  %7795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7794, i8* %7795, align 1, !tbaa !2448
  %7796 = lshr i32 %7773, 31
  %7797 = trunc i32 %7796 to i8
  %7798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7797, i8* %7798, align 1, !tbaa !2449
  %7799 = lshr i32 %7772, 31
  %7800 = lshr i32 %7768, 31
  %7801 = xor i32 %7796, %7799
  %7802 = xor i32 %7796, %7800
  %7803 = add nuw nsw i32 %7801, %7802
  %7804 = icmp eq i32 %7803, 2
  %7805 = zext i1 %7804 to i8
  %7806 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7805, i8* %7806, align 1, !tbaa !2450
  %7807 = load i32, i32* %EAX
  %7808 = zext i32 %7807 to i64
  %7809 = load i64, i64* %PC
  %7810 = add i64 %7809, 3
  store i64 %7810, i64* %PC
  %7811 = shl i64 %7808, 32
  %7812 = ashr exact i64 %7811, 32
  store i64 %7812, i64* %RSI, align 8, !tbaa !2428
  %7813 = load i64, i64* %RSI
  %7814 = mul i64 %7813, 4
  %7815 = add i64 %7814, add (i64 ptrtoint (%p_type* @p to i64), i64 4096)
  %7816 = load i64, i64* %PC
  %7817 = add i64 %7816, 11
  store i64 %7817, i64* %PC
  %7818 = inttoptr i64 %7815 to i32*
  store i32 1, i32* %7818
  %7819 = load i64, i64* %RBP
  %7820 = sub i64 %7819, 12
  %7821 = load i64, i64* %PC
  %7822 = add i64 %7821, 3
  store i64 %7822, i64* %PC
  %7823 = inttoptr i64 %7820 to i32*
  %7824 = load i32, i32* %7823
  %7825 = zext i32 %7824 to i64
  store i64 %7825, i64* %RAX, align 8, !tbaa !2428
  %7826 = load i64, i64* %RAX
  %7827 = load i64, i64* %PC
  %7828 = add i64 %7827, 3
  store i64 %7828, i64* %PC
  %7829 = trunc i64 %7826 to i32
  %7830 = add i32 1, %7829
  %7831 = zext i32 %7830 to i64
  store i64 %7831, i64* %RAX, align 8, !tbaa !2428
  %7832 = icmp ult i32 %7830, %7829
  %7833 = icmp ult i32 %7830, 1
  %7834 = or i1 %7832, %7833
  %7835 = zext i1 %7834 to i8
  %7836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7835, i8* %7836, align 1, !tbaa !2432
  %7837 = and i32 %7830, 255
  %7838 = call i32 @llvm.ctpop.i32(i32 %7837) #16
  %7839 = trunc i32 %7838 to i8
  %7840 = and i8 %7839, 1
  %7841 = xor i8 %7840, 1
  %7842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7841, i8* %7842, align 1, !tbaa !2446
  %7843 = xor i64 1, %7826
  %7844 = trunc i64 %7843 to i32
  %7845 = xor i32 %7844, %7830
  %7846 = lshr i32 %7845, 4
  %7847 = trunc i32 %7846 to i8
  %7848 = and i8 %7847, 1
  %7849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7848, i8* %7849, align 1, !tbaa !2447
  %7850 = icmp eq i32 %7830, 0
  %7851 = zext i1 %7850 to i8
  %7852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7851, i8* %7852, align 1, !tbaa !2448
  %7853 = lshr i32 %7830, 31
  %7854 = trunc i32 %7853 to i8
  %7855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7854, i8* %7855, align 1, !tbaa !2449
  %7856 = lshr i32 %7829, 31
  %7857 = xor i32 %7853, %7856
  %7858 = add nuw nsw i32 %7857, %7853
  %7859 = icmp eq i32 %7858, 2
  %7860 = zext i1 %7859 to i8
  %7861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7860, i8* %7861, align 1, !tbaa !2450
  %7862 = load i64, i64* %RBP
  %7863 = sub i64 %7862, 12
  %7864 = load i32, i32* %EAX
  %7865 = zext i32 %7864 to i64
  %7866 = load i64, i64* %PC
  %7867 = add i64 %7866, 3
  store i64 %7867, i64* %PC
  %7868 = inttoptr i64 %7863 to i32*
  store i32 %7864, i32* %7868
  %7869 = load i64, i64* %PC
  %7870 = sub i64 %7869, 52
  %7871 = load i64, i64* %PC
  %7872 = add i64 %7871, 5
  store i64 %7872, i64* %PC
  %7873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7870, i64* %7873, align 8, !tbaa !2428
  br label %block_400afc

block_401204:                                     ; preds = %block_401187
  %7874 = load i64, i64* %PC
  %7875 = add i64 %7874, 10
  store i64 %7875, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401370__rodata_type* @seg_401370__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !2428
  %7876 = load i64, i64* %PC
  %7877 = add i64 %7876, 2
  store i64 %7877, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %7878 = load i64, i64* %PC
  %7879 = sub i64 %7878, 3568
  %7880 = load i64, i64* %PC
  %7881 = add i64 %7880, 5
  %7882 = load i64, i64* %PC
  %7883 = add i64 %7882, 5
  store i64 %7883, i64* %PC
  %7884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7885 = load i64, i64* %7884, align 8, !tbaa !2428
  %7886 = add i64 %7885, -8
  %7887 = inttoptr i64 %7886 to i64*
  store i64 %7881, i64* %7887
  store i64 %7886, i64* %7884, align 8, !tbaa !2428
  %7888 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7879, i64* %7888, align 8, !tbaa !2428
  %7889 = load i64, i64* %PC
  %7890 = call %struct.Memory* @ext_619238_printf(%struct.State* %0, i64 %7889, %struct.Memory* %4307)
  %7891 = load i64, i64* %RBP
  %7892 = sub i64 %7891, 20
  %7893 = load i32, i32* %EAX
  %7894 = zext i32 %7893 to i64
  %7895 = load i64, i64* %PC
  %7896 = add i64 %7895, 3
  store i64 %7896, i64* %PC
  %7897 = inttoptr i64 %7892 to i32*
  store i32 %7893, i32* %7897
  br label %block_401218

block_400b35:                                     ; preds = %block_400afc
  %7898 = load i64, i64* %PC
  %7899 = add i64 %7898, 5
  %7900 = load i64, i64* %PC
  %7901 = add i64 %7900, 5
  store i64 %7901, i64* %PC
  %7902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7899, i64* %7902, align 8, !tbaa !2428
  %7903 = load i64, i64* %RBP
  %7904 = sub i64 %7903, 8
  %7905 = load i64, i64* %PC
  %7906 = add i64 %7905, 3
  store i64 %7906, i64* %PC
  %7907 = inttoptr i64 %7904 to i32*
  %7908 = load i32, i32* %7907
  %7909 = zext i32 %7908 to i64
  store i64 %7909, i64* %RAX, align 8, !tbaa !2428
  %7910 = load i64, i64* %RAX
  %7911 = load i64, i64* %PC
  %7912 = add i64 %7911, 3
  store i64 %7912, i64* %PC
  %7913 = trunc i64 %7910 to i32
  %7914 = add i32 1, %7913
  %7915 = zext i32 %7914 to i64
  store i64 %7915, i64* %RAX, align 8, !tbaa !2428
  %7916 = icmp ult i32 %7914, %7913
  %7917 = icmp ult i32 %7914, 1
  %7918 = or i1 %7916, %7917
  %7919 = zext i1 %7918 to i8
  %7920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7919, i8* %7920, align 1, !tbaa !2432
  %7921 = and i32 %7914, 255
  %7922 = call i32 @llvm.ctpop.i32(i32 %7921) #16
  %7923 = trunc i32 %7922 to i8
  %7924 = and i8 %7923, 1
  %7925 = xor i8 %7924, 1
  %7926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7925, i8* %7926, align 1, !tbaa !2446
  %7927 = xor i64 1, %7910
  %7928 = trunc i64 %7927 to i32
  %7929 = xor i32 %7928, %7914
  %7930 = lshr i32 %7929, 4
  %7931 = trunc i32 %7930 to i8
  %7932 = and i8 %7931, 1
  %7933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7932, i8* %7933, align 1, !tbaa !2447
  %7934 = icmp eq i32 %7914, 0
  %7935 = zext i1 %7934 to i8
  %7936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7935, i8* %7936, align 1, !tbaa !2448
  %7937 = lshr i32 %7914, 31
  %7938 = trunc i32 %7937 to i8
  %7939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7938, i8* %7939, align 1, !tbaa !2449
  %7940 = lshr i32 %7913, 31
  %7941 = xor i32 %7937, %7940
  %7942 = add nuw nsw i32 %7941, %7937
  %7943 = icmp eq i32 %7942, 2
  %7944 = zext i1 %7943 to i8
  %7945 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7944, i8* %7945, align 1, !tbaa !2450
  %7946 = load i64, i64* %RBP
  %7947 = sub i64 %7946, 8
  %7948 = load i32, i32* %EAX
  %7949 = zext i32 %7948 to i64
  %7950 = load i64, i64* %PC
  %7951 = add i64 %7950, 3
  store i64 %7951, i64* %PC
  %7952 = inttoptr i64 %7947 to i32*
  store i32 %7948, i32* %7952
  %7953 = load i64, i64* %PC
  %7954 = sub i64 %7953, 88
  %7955 = load i64, i64* %PC
  %7956 = add i64 %7955, 5
  store i64 %7956, i64* %PC
  %7957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7954, i64* %7957, align 8, !tbaa !2428
  br label %block_400aeb

block_400e01:                                     ; preds = %block_400e4b, %block_400dfa
  %MEMORY.47 = phi %struct.Memory* [ %MEMORY.12, %block_400dfa ], [ %MEMORY.44, %block_400e4b ]
  %7958 = load i64, i64* %RBP
  %7959 = sub i64 %7958, 8
  %7960 = load i64, i64* %PC
  %7961 = add i64 %7960, 4
  store i64 %7961, i64* %PC
  %7962 = inttoptr i64 %7959 to i32*
  %7963 = load i32, i32* %7962
  %7964 = sub i32 %7963, 2
  %7965 = icmp ult i32 %7963, 2
  %7966 = zext i1 %7965 to i8
  %7967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7966, i8* %7967, align 1, !tbaa !2432
  %7968 = and i32 %7964, 255
  %7969 = call i32 @llvm.ctpop.i32(i32 %7968) #16
  %7970 = trunc i32 %7969 to i8
  %7971 = and i8 %7970, 1
  %7972 = xor i8 %7971, 1
  %7973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7972, i8* %7973, align 1, !tbaa !2446
  %7974 = xor i32 %7963, 2
  %7975 = xor i32 %7974, %7964
  %7976 = lshr i32 %7975, 4
  %7977 = trunc i32 %7976 to i8
  %7978 = and i8 %7977, 1
  %7979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7978, i8* %7979, align 1, !tbaa !2447
  %7980 = icmp eq i32 %7964, 0
  %7981 = zext i1 %7980 to i8
  %7982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7981, i8* %7982, align 1, !tbaa !2448
  %7983 = lshr i32 %7964, 31
  %7984 = trunc i32 %7983 to i8
  %7985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7984, i8* %7985, align 1, !tbaa !2449
  %7986 = lshr i32 %7963, 31
  %7987 = xor i32 %7983, %7986
  %7988 = add nuw nsw i32 %7987, %7986
  %7989 = icmp eq i32 %7988, 2
  %7990 = zext i1 %7989 to i8
  %7991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7990, i8* %7991, align 1, !tbaa !2450
  %7992 = load i64, i64* %PC
  %7993 = add i64 %7992, 89
  %7994 = load i64, i64* %PC
  %7995 = add i64 %7994, 6
  %7996 = load i64, i64* %PC
  %7997 = add i64 %7996, 6
  store i64 %7997, i64* %PC
  %7998 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7999 = load i8, i8* %7998, align 1, !tbaa !2448
  %8000 = icmp eq i8 %7999, 0
  %8001 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8002 = load i8, i8* %8001, align 1, !tbaa !2449
  %8003 = icmp ne i8 %8002, 0
  %8004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8005 = load i8, i8* %8004, align 1, !tbaa !2450
  %8006 = icmp ne i8 %8005, 0
  %8007 = xor i1 %8003, %8006
  %8008 = xor i1 %8007, true
  %8009 = and i1 %8000, %8008
  %8010 = zext i1 %8009 to i8
  store i8 %8010, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %8011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8012 = select i1 %8009, i64 %7993, i64 %7995
  store i64 %8012, i64* %8011, align 8, !tbaa !2428
  %8013 = load i8, i8* %BRANCH_TAKEN
  %8014 = icmp eq i8 %8013, 1
  br i1 %8014, label %block_400e5e, label %block_400e0b

block_4009ca:                                     ; preds = %block_4009c0
  %8015 = load i64, i64* %RBP
  %8016 = sub i64 %8015, 4
  %8017 = load i64, i64* %PC
  %8018 = add i64 %8017, 3
  store i64 %8018, i64* %PC
  %8019 = inttoptr i64 %8016 to i32*
  %8020 = load i32, i32* %8019
  %8021 = zext i32 %8020 to i64
  store i64 %8021, i64* %RAX, align 8, !tbaa !2428
  %8022 = load i64, i64* %RBP
  %8023 = sub i64 %8022, 8
  %8024 = load i64, i64* %PC
  %8025 = add i64 %8024, 3
  store i64 %8025, i64* %PC
  %8026 = inttoptr i64 %8023 to i32*
  %8027 = load i32, i32* %8026
  %8028 = zext i32 %8027 to i64
  store i64 %8028, i64* %RCX, align 8, !tbaa !2428
  %8029 = load i64, i64* %RBP
  %8030 = sub i64 %8029, 12
  %8031 = load i64, i64* %PC
  %8032 = add i64 %8031, 3
  store i64 %8032, i64* %PC
  %8033 = inttoptr i64 %8030 to i32*
  %8034 = load i32, i32* %8033
  %8035 = zext i32 %8034 to i64
  store i64 %8035, i64* %RDX, align 8, !tbaa !2428
  %8036 = load i64, i64* %RDX
  %8037 = load i64, i64* %PC
  %8038 = add i64 %8037, 3
  store i64 %8038, i64* %PC
  %8039 = and i64 %8036, 4294967295
  %8040 = shl i64 %8039, 2
  %8041 = trunc i64 %8040 to i32
  %8042 = icmp slt i32 %8041, 0
  %8043 = shl i32 %8041, 1
  %8044 = zext i32 %8043 to i64
  store i64 %8044, i64* %RDX, align 8, !tbaa !2428
  %8045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8046 = zext i1 %8042 to i8
  store i8 %8046, i8* %8045, align 1, !tbaa !2451
  %8047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8048 = and i32 %8043, 254
  %8049 = call i32 @llvm.ctpop.i32(i32 %8048) #16
  %8050 = trunc i32 %8049 to i8
  %8051 = and i8 %8050, 1
  %8052 = xor i8 %8051, 1
  store i8 %8052, i8* %8047, align 1, !tbaa !2451
  %8053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8053, align 1, !tbaa !2451
  %8054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8055 = icmp eq i32 %8043, 0
  %8056 = zext i1 %8055 to i8
  store i8 %8056, i8* %8054, align 1, !tbaa !2451
  %8057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8058 = lshr i32 %8043, 31
  %8059 = trunc i32 %8058 to i8
  store i8 %8059, i8* %8057, align 1, !tbaa !2451
  %8060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8060, align 1, !tbaa !2451
  %8061 = load i64, i64* %RCX
  %8062 = load i32, i32* %EDX
  %8063 = zext i32 %8062 to i64
  %8064 = load i64, i64* %PC
  %8065 = add i64 %8064, 2
  store i64 %8065, i64* %PC
  %8066 = trunc i64 %8061 to i32
  %8067 = add i32 %8062, %8066
  %8068 = zext i32 %8067 to i64
  store i64 %8068, i64* %RCX, align 8, !tbaa !2428
  %8069 = icmp ult i32 %8067, %8066
  %8070 = icmp ult i32 %8067, %8062
  %8071 = or i1 %8069, %8070
  %8072 = zext i1 %8071 to i8
  %8073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8072, i8* %8073, align 1, !tbaa !2432
  %8074 = and i32 %8067, 255
  %8075 = call i32 @llvm.ctpop.i32(i32 %8074) #16
  %8076 = trunc i32 %8075 to i8
  %8077 = and i8 %8076, 1
  %8078 = xor i8 %8077, 1
  %8079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8078, i8* %8079, align 1, !tbaa !2446
  %8080 = xor i64 %8063, %8061
  %8081 = trunc i64 %8080 to i32
  %8082 = xor i32 %8081, %8067
  %8083 = lshr i32 %8082, 4
  %8084 = trunc i32 %8083 to i8
  %8085 = and i8 %8084, 1
  %8086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8085, i8* %8086, align 1, !tbaa !2447
  %8087 = icmp eq i32 %8067, 0
  %8088 = zext i1 %8087 to i8
  %8089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8088, i8* %8089, align 1, !tbaa !2448
  %8090 = lshr i32 %8067, 31
  %8091 = trunc i32 %8090 to i8
  %8092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8091, i8* %8092, align 1, !tbaa !2449
  %8093 = lshr i32 %8066, 31
  %8094 = lshr i32 %8062, 31
  %8095 = xor i32 %8090, %8093
  %8096 = xor i32 %8090, %8094
  %8097 = add nuw nsw i32 %8095, %8096
  %8098 = icmp eq i32 %8097, 2
  %8099 = zext i1 %8098 to i8
  %8100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8099, i8* %8100, align 1, !tbaa !2450
  %8101 = load i64, i64* %RCX
  %8102 = load i64, i64* %PC
  %8103 = add i64 %8102, 3
  store i64 %8103, i64* %PC
  %8104 = and i64 %8101, 4294967295
  %8105 = shl i64 %8104, 2
  %8106 = trunc i64 %8105 to i32
  %8107 = icmp slt i32 %8106, 0
  %8108 = shl i32 %8106, 1
  %8109 = zext i32 %8108 to i64
  store i64 %8109, i64* %RCX, align 8, !tbaa !2428
  %8110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8111 = zext i1 %8107 to i8
  store i8 %8111, i8* %8110, align 1, !tbaa !2451
  %8112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8113 = and i32 %8108, 254
  %8114 = call i32 @llvm.ctpop.i32(i32 %8113) #16
  %8115 = trunc i32 %8114 to i8
  %8116 = and i8 %8115, 1
  %8117 = xor i8 %8116, 1
  store i8 %8117, i8* %8112, align 1, !tbaa !2451
  %8118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8118, align 1, !tbaa !2451
  %8119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8120 = icmp eq i32 %8108, 0
  %8121 = zext i1 %8120 to i8
  store i8 %8121, i8* %8119, align 1, !tbaa !2451
  %8122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8123 = lshr i32 %8108, 31
  %8124 = trunc i32 %8123 to i8
  store i8 %8124, i8* %8122, align 1, !tbaa !2451
  %8125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8125, align 1, !tbaa !2451
  %8126 = load i64, i64* %RAX
  %8127 = load i32, i32* %ECX
  %8128 = zext i32 %8127 to i64
  %8129 = load i64, i64* %PC
  %8130 = add i64 %8129, 2
  store i64 %8130, i64* %PC
  %8131 = trunc i64 %8126 to i32
  %8132 = add i32 %8127, %8131
  %8133 = zext i32 %8132 to i64
  store i64 %8133, i64* %RAX, align 8, !tbaa !2428
  %8134 = icmp ult i32 %8132, %8131
  %8135 = icmp ult i32 %8132, %8127
  %8136 = or i1 %8134, %8135
  %8137 = zext i1 %8136 to i8
  %8138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8137, i8* %8138, align 1, !tbaa !2432
  %8139 = and i32 %8132, 255
  %8140 = call i32 @llvm.ctpop.i32(i32 %8139) #16
  %8141 = trunc i32 %8140 to i8
  %8142 = and i8 %8141, 1
  %8143 = xor i8 %8142, 1
  %8144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8143, i8* %8144, align 1, !tbaa !2446
  %8145 = xor i64 %8128, %8126
  %8146 = trunc i64 %8145 to i32
  %8147 = xor i32 %8146, %8132
  %8148 = lshr i32 %8147, 4
  %8149 = trunc i32 %8148 to i8
  %8150 = and i8 %8149, 1
  %8151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8150, i8* %8151, align 1, !tbaa !2447
  %8152 = icmp eq i32 %8132, 0
  %8153 = zext i1 %8152 to i8
  %8154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8153, i8* %8154, align 1, !tbaa !2448
  %8155 = lshr i32 %8132, 31
  %8156 = trunc i32 %8155 to i8
  %8157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8156, i8* %8157, align 1, !tbaa !2449
  %8158 = lshr i32 %8131, 31
  %8159 = lshr i32 %8127, 31
  %8160 = xor i32 %8155, %8158
  %8161 = xor i32 %8155, %8159
  %8162 = add nuw nsw i32 %8160, %8161
  %8163 = icmp eq i32 %8162, 2
  %8164 = zext i1 %8163 to i8
  %8165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8164, i8* %8165, align 1, !tbaa !2450
  %8166 = load i32, i32* %EAX
  %8167 = zext i32 %8166 to i64
  %8168 = load i64, i64* %PC
  %8169 = add i64 %8168, 3
  store i64 %8169, i64* %PC
  %8170 = shl i64 %8167, 32
  %8171 = ashr exact i64 %8170, 32
  store i64 %8171, i64* %RSI, align 8, !tbaa !2428
  %8172 = load i64, i64* %RSI
  %8173 = mul i64 %8172, 4
  %8174 = add i64 %8173, ptrtoint (%p_type* @p to i64)
  %8175 = load i64, i64* %PC
  %8176 = add i64 %8175, 11
  store i64 %8176, i64* %PC
  %8177 = inttoptr i64 %8174 to i32*
  store i32 1, i32* %8177
  %8178 = load i64, i64* %RBP
  %8179 = sub i64 %8178, 12
  %8180 = load i64, i64* %PC
  %8181 = add i64 %8180, 3
  store i64 %8181, i64* %PC
  %8182 = inttoptr i64 %8179 to i32*
  %8183 = load i32, i32* %8182
  %8184 = zext i32 %8183 to i64
  store i64 %8184, i64* %RAX, align 8, !tbaa !2428
  %8185 = load i64, i64* %RAX
  %8186 = load i64, i64* %PC
  %8187 = add i64 %8186, 3
  store i64 %8187, i64* %PC
  %8188 = trunc i64 %8185 to i32
  %8189 = add i32 1, %8188
  %8190 = zext i32 %8189 to i64
  store i64 %8190, i64* %RAX, align 8, !tbaa !2428
  %8191 = icmp ult i32 %8189, %8188
  %8192 = icmp ult i32 %8189, 1
  %8193 = or i1 %8191, %8192
  %8194 = zext i1 %8193 to i8
  %8195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8194, i8* %8195, align 1, !tbaa !2432
  %8196 = and i32 %8189, 255
  %8197 = call i32 @llvm.ctpop.i32(i32 %8196) #16
  %8198 = trunc i32 %8197 to i8
  %8199 = and i8 %8198, 1
  %8200 = xor i8 %8199, 1
  %8201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8200, i8* %8201, align 1, !tbaa !2446
  %8202 = xor i64 1, %8185
  %8203 = trunc i64 %8202 to i32
  %8204 = xor i32 %8203, %8189
  %8205 = lshr i32 %8204, 4
  %8206 = trunc i32 %8205 to i8
  %8207 = and i8 %8206, 1
  %8208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8207, i8* %8208, align 1, !tbaa !2447
  %8209 = icmp eq i32 %8189, 0
  %8210 = zext i1 %8209 to i8
  %8211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8210, i8* %8211, align 1, !tbaa !2448
  %8212 = lshr i32 %8189, 31
  %8213 = trunc i32 %8212 to i8
  %8214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8213, i8* %8214, align 1, !tbaa !2449
  %8215 = lshr i32 %8188, 31
  %8216 = xor i32 %8212, %8215
  %8217 = add nuw nsw i32 %8216, %8212
  %8218 = icmp eq i32 %8217, 2
  %8219 = zext i1 %8218 to i8
  %8220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8219, i8* %8220, align 1, !tbaa !2450
  %8221 = load i64, i64* %RBP
  %8222 = sub i64 %8221, 12
  %8223 = load i32, i32* %EAX
  %8224 = zext i32 %8223 to i64
  %8225 = load i64, i64* %PC
  %8226 = add i64 %8225, 3
  store i64 %8226, i64* %PC
  %8227 = inttoptr i64 %8222 to i32*
  store i32 %8223, i32* %8227
  %8228 = load i64, i64* %PC
  %8229 = sub i64 %8228, 52
  %8230 = load i64, i64* %PC
  %8231 = add i64 %8230, 5
  store i64 %8231, i64* %PC
  %8232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8229, i64* %8232, align 8, !tbaa !2428
  br label %block_4009c0
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400510_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400510;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400510_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400510_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4004e0___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4004e0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004e0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401360___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401360;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401360___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401360___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4012f0___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4012f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4012f0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4012f0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4012b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4012b0_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_619230___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_619238_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Fit() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400580;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @Fit_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400580_Fit(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Remove() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400700;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @Remove_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400700_Remove(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Place() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400610;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @Place_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400610_Place(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Rand() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400540;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @Rand_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400540_Rand(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Trial() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4007a0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @Trial_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4007a0_Trial(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Initrand() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400520;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @Initrand_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400520_Initrand(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401364;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401364__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4003f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @14, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4003f0__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Puzzle() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400870;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @15, void ()** @2)
  ret void
}

define internal %struct.Memory* @Puzzle_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400870_Puzzle(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_4012f0___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_401360___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2430, !2430, i64 0}
