; ModuleID = 'binary/test.mcsema.calls_renamed.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_4003c8__init_type = type <{ [23 x i8] }>
%seg_4003e0__plt_type = type <{ [32 x i8] }>
%seg_400400__text_type = type <{ [3890 x i8] }>
%seg_401334__fini_type = type <{ [9 x i8] }>
%seg_401340__rodata_type = type <{ [4 x i8], [18 x i8], [19 x i8], [19 x i8], [4 x i8] }>
%seg_401380__eh_frame_hdr_type = type <{ [116 x i8] }>
%seg_4013f8__eh_frame_type = type <{ [448 x i8] }>
%seg_601df0__init_array_type = type <{ i64, i64 }>
%seg_601ff0__got_type = type <{ i64, i64 }>
%seg_602000__got_plt_type = type <{ [24 x i8], i64 }>
%seg_602020__data_type = type <{ [16 x i8] }>
%__bss_start_type = type <{ [16 x i8] }>
%fixed_type = type <{ [16 x i8] }>
%imb_type = type <{ [6724 x i8] }>
%n_type = type <{ [12 x i8] }>
%p_type = type <{ [26624 x i8] }>
%imr_type = type <{ [6736 x i8] }>
%rmr_type = type <{ [6736 x i8] }>
%z_type = type <{ [2064 x i8] }>
%puzzl_type = type <{ [2048 x i8] }>
%rmb_type = type <{ [6724 x i8] }>
%zi_type = type <{ [12 x i8] }>
%cellspace_type = type <{ [152 x i8] }>
%seed_type = type <{ [8 x i8] }>
%movesdone_type = type <{ [16 x i8] }>
%piecemax_type = type <{ [64 x i8] }>
%sortlist_type = type <{ [20004 x i8] }>
%value_type = type <{ [4 x i8] }>
%top_type = type <{ [4 x i8] }>
%floated_type = type <{ [4 x i8] }>
%pctr_type = type <{ [4 x i8] }>
%zr_type = type <{ [12 x i8] }>
%ima_type = type <{ [6724 x i8] }>
%littlest_type = type <{ [12 x i8] }>
%e_type = type <{ [1040 x i8] }>
%freelist_type = type <{ [16 x i8] }>
%w_type = type <{ [2064 x i8] }>
%permarray_type = type <{ [44 x i8] }>
%biggest_type = type <{ [4 x i8] }>
%rma_type = type <{ [6724 x i8] }>
%kount_type = type <{ [4 x i8] }>
%tree_type = type <{ [8 x i8] }>
%stack_type = type <{ [16 x i8] }>
%piececount_type = type <{ [16 x i8] }>
%class_type = type <{ [56 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_4003c8__init = internal constant %seg_4003c8__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05%\1C \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_4003e0__plt = internal constant %seg_4003e0__plt_type <{ [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\22\1C \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400400__text = internal constant %seg_400400__text_type <{ [3890 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C00\13@\00H\C7\C1\C0\12@\00H\C7\C7\80\12@\00\FF\15\C6\1B \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B80 `\00H=0 `\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF0 `\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE0 `\00UH\81\EE0 `\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF0 `\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=y\1B \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05g\1B \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\C7\04%8\02a\00\03$\01\00]\C3fffff.\0F\1F\84\00\00\00\00\00UH\89\E5Hi\04%8\02a\00\1D\05\00\00H\05\196\00\00H%\FF\FF\00\00H\89\04%8\02a\00H\8B\04%8\02a\00\89\C1\89\C8]\C3fffff.\0F\1F\84\00\00\00\00\00UH\89\E5\89}\F8\89u\F4\C7E\F0\00\00\00\00\8BE\F0HcM\F8;\04\8DP\02a\00\0F\8F^\00\00\00H\B8\A0:`\00\00\00\00\00HcM\F8H\C1\E1\0BH\01\C8HcM\F0\83<\88\00\0F\84(\00\00\00\8BE\F4\03E\F0Hc\C8\83<\8DP\DF`\00\00\0F\84\0C\00\00\00\C7E\FC\00\00\00\00\E9\1F\00\00\00\E9\00\00\00\00\E9\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\8E\FF\FF\FF\C7E\FC\01\00\00\00\8BE\FC]\C3\90UH\89\E5\89}\F8\89u\F4\C7E\F0\00\00\00\00\8BE\F0HcM\F8;\04\8DP\02a\00\0F\8FJ\00\00\00H\B8\A0:`\00\00\00\00\00HcM\F8H\C1\E1\0BH\01\C8HcM\F0\83<\88\00\0F\84\14\00\00\00\8BE\F4\03E\F0Hc\C8\C7\04\8DP\DF`\00\01\00\00\00\E9\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\A2\FF\FF\FFHcE\F8Hc\04\85\F0\91a\00\8B\0C\85\E0\91a\00\83\E9\01HcE\F8Hc\04\85\F0\91a\00\89\0C\85\E0\91a\00\8BM\F4\89M\F0\81}\F0\FF\01\00\00\0F\8F0\00\00\00HcE\F0\83<\85P\DF`\00\00\0F\85\0B\00\00\00\8BE\F0\89E\FC\E9\1A\00\00\00\E9\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\C3\FF\FF\FF\C7E\FC\00\00\00\00\8BE\FC]\C3f\0F\1F\84\00\00\00\00\00UH\89\E5\89}\FC\89u\F8\C7E\F4\00\00\00\00\8BE\F4HcM\FC;\04\8DP\02a\00\0F\8FJ\00\00\00H\B8\A0:`\00\00\00\00\00HcM\FCH\C1\E1\0BH\01\C8HcM\F4\83<\88\00\0F\84\14\00\00\00\8BE\F8\03E\F4Hc\C8\C7\04\8DP\DF`\00\00\00\00\00\E9\00\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\A2\FF\FF\FFHcE\FCHc\04\85\F0\91a\00\8B\0C\85\E0\91a\00\83\C1\01HcE\FCHc\04\85\F0\91a\00\89\0C\85\E0\91a\00]\C3f\0F\1FD\00\00UH\89\E5H\83\EC\10\89}\F8\8B<%\C4\91a\00\83\C7\01\89<%\C4\91a\00\C7E\F4\00\00\00\00\83}\F4\0C\0F\8F\8B\00\00\00HcE\F4Hc\04\85\F0\91a\00\83<\85\E0\91a\00\00\0F\84^\00\00\00\8B}\F4\8Bu\F8\E8\8E\FD\FF\FF\83\F8\00\0F\84E\00\00\00\8B}\F4\8Bu\F8\E8\0A\FE\FF\FF\89E\F0\8B}\F0\E8\8F\FF\FF\FF\83\F8\00\0F\85\0A\00\00\00\83}\F0\00\0F\85\0C\00\00\00\C7E\FC\01\00\00\00\E9/\00\00\00\8B}\F4\8Bu\F8\E8\C5\FE\FF\FF\E9\00\00\00\00\E9\00\00\00\00\E9\00\00\00\00\8BE\F4\83\C0\01\89E\F4\E9k\FF\FF\FF\C7E\FC\00\00\00\00\8BE\FCH\83\C4\10]\C3\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC0\C7E\F0\00\00\00\00\81}\F0\FF\01\00\00\0F\8F\1D\00\00\00HcE\F0\C7\04\85P\DF`\00\01\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\D6\FF\FF\FF\C7E\FC\01\00\00\00\83}\FC\05\0F\8Fw\00\00\00\C7E\F8\01\00\00\00\83}\F8\05\0F\8FS\00\00\00\C7E\F4\01\00\00\00\83}\F4\05\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5P\DF`\00\00\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7E\FC\00\00\00\00\83}\FC\0C\0F\8FU\00\00\00\C7E\F0\00\00\00\00\81}\F0\FF\01\00\00\0F\8F.\00\00\00H\B8\A0:`\00\00\00\00\00HcM\FCH\C1\E1\0BH\01\C8HcM\F0\C7\04\88\00\00\00\00\8BE\F0\83\C0\01\89E\F0\E9\C5\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\A1\FF\FF\FF\C7E\FC\00\00\00\00\83}\FC\03\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\01\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\00\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0:`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\F0\91a\00\00\00\00\00\C7\04%P\02a\00\0B\00\00\00\C7E\FC\00\00\00\00\83}\FC\01\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\00\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\03\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0B`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\F4\91a\00\00\00\00\00\C7\04%T\02a\00\C1\00\00\00\C7E\FC\00\00\00\00\83}\FC\00\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\03\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\01\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0J`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\F8\91a\00\00\00\00\00\C7\04%X\02a\00X\00\00\00\C7E\FC\00\00\00\00\83}\FC\01\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\03\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\00\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0R`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\FC\91a\00\00\00\00\00\C7\04%\5C\02a\00\19\00\00\00\C7E\FC\00\00\00\00\83}\FC\03\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\00\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\01\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0Z`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\00\92a\00\00\00\00\00\C7\04%`\02a\00C\00\00\00\C7E\FC\00\00\00\00\83}\FC\00\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\01\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\03\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0b`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\04\92a\00\00\00\00\00\C7\04%d\02a\00\C8\00\00\00\C7E\FC\00\00\00\00\83}\FC\02\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\00\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\00\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0j`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\08\92a\00\01\00\00\00\C7\04%h\02a\00\02\00\00\00\C7E\FC\00\00\00\00\83}\FC\00\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\02\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\00\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0r`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\0C\92a\00\01\00\00\00\C7\04%l\02a\00\10\00\00\00\C7E\FC\00\00\00\00\83}\FC\00\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\00\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\02\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0z`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\10\92a\00\01\00\00\00\C7\04%p\02a\00\80\00\00\00\C7E\FC\00\00\00\00\83}\FC\01\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\01\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\00\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0\82`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\14\92a\00\02\00\00\00\C7\04%t\02a\00\09\00\00\00\C7E\FC\00\00\00\00\83}\FC\01\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\00\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\01\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0\8A`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\18\92a\00\02\00\00\00\C7\04%x\02a\00A\00\00\00\C7E\FC\00\00\00\00\83}\FC\00\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\01\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\01\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0\92`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF\C7\04%\1C\92a\00\02\00\00\00\C7\04%|\02a\00H\00\00\00\C7E\FC\00\00\00\00\83}\FC\01\0F\8Fw\00\00\00\C7E\F8\00\00\00\00\83}\F8\01\0F\8FS\00\00\00\C7E\F4\00\00\00\00\83}\F4\01\0F\8F/\00\00\00\8BE\FC\8BM\F8\8BU\F4\C1\E2\03\01\D1\C1\E1\03\01\C8Hc\F0\C7\04\B5\A0\9A`\00\01\00\00\00\8BE\F4\83\C0\01\89E\F4\E9\C7\FF\FF\FF\E9\00\00\00\00\8BE\F8\83\C0\01\89E\F8\E9\A3\FF\FF\FF\E9\00\00\00\00\8BE\FC\83\C0\01\89E\FC\E9\7F\FF\FF\FF1\FF\C7\04% \92a\00\03\00\00\00\C7\04%\80\02a\00I\00\00\00\C7\04%\E0\91a\00\0D\00\00\00\C7\04%\E4\91a\00\03\00\00\00\C7\04%\E8\91a\00\01\00\00\00\C7\04%\EC\91a\00\01\00\00\00\C7E\F0I\00\00\00\C7\04%\C4\91a\00\00\00\00\00\8Bu\F0\E8\9B\F3\FF\FF\83\F8\00\0F\84\16\00\00\001\FF\8Bu\F0\E8\18\F4\FF\FF\89\04%\94:`\00\E9\14\00\00\00H\BFD\13@\00\00\00\00\00\B0\00\E8\0B\F2\FF\FF\89E\EC\8B<%\94:`\00\E8|\F5\FF\FF\83\F8\00\0F\85\19\00\00\00H\BFV\13@\00\00\00\00\00\B0\00\E8\E2\F1\FF\FF\89E\E8\E9*\00\00\00\81<%\C4\91a\00\D5\07\00\00\0F\84\14\00\00\00H\BFi\13@\00\00\00\00\00\B0\00\E8\B8\F1\FF\FF\89E\E4\E9\00\00\00\00H\BF|\13@\00\00\00\00\00\8B4%\94:`\00\B0\00\E8\98\F1\FF\FFH\BF|\13@\00\00\00\00\00\8B4%\C4\91a\00\89E\E0\B0\00\E8}\F1\FF\FF\89E\DCH\83\C40]\C3\0F\1F@\00UH\89\E5H\83\EC\10\C7E\FC\00\00\00\00\C7E\F8\00\00\00\00\83}\F8d\0F\8D\13\00\00\00\E8\9B\F5\FF\FF\8BE\F8\83\C0\01\89E\F8\E9\E3\FF\FF\FF1\C0H\83\C4\10]\C3\0F\1FD\00\00AWAVI\89\D7AUATL\8D%\1E\0B \00UH\8D-\1E\0B \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\D7\F0\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_401334__fini = internal constant %seg_401334__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_401340__rodata = internal constant %seg_401340__rodata_type <{ [4 x i8] c"\01\00\02\00", [18 x i8] c"Error1 in Puzzle\0A\00", [19 x i8] c"Error2 in Puzzle.\0A\00", [19 x i8] c"Error3 in Puzzle.\0A\00", [4 x i8] c"%d\0A\00" }>
@seg_401380__eh_frame_hdr = internal constant %seg_401380__eh_frame_hdr_type <{ [116 x i8] c"\01\1B\03;t\00\00\00\0D\00\00\00`\F0\FF\FF\D0\00\00\00\80\F0\FF\FF\90\00\00\00\B0\F0\FF\FF\BC\00\00\00p\F1\FF\FF\F8\00\00\00\90\F1\FF\FF\14\01\00\00\D0\F1\FF\FF0\01\00\00`\F2\FF\FFL\01\00\00P\F3\FF\FFh\01\00\00\F0\F3\FF\FF\84\01\00\00\C0\F4\FF\FF\A0\01\00\00\00\FF\FF\FF\BC\01\00\00@\FF\FF\FF\D8\01\00\00\B0\FF\FF\FF \02\00\00" }>
@seg_4013f8__eh_frame = internal constant %seg_4013f8__eh_frame_type <{ [448 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\E8\EF\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\EC\EF\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00\88\EF\FF\FF \00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00p\F0\FF\FF\12\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00t\F0\FF\FF2\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\90\00\00\00\98\F0\FF\FF\8F\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\AC\00\00\00\0C\F1\FF\FF\E7\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\C8\00\00\00\E0\F1\FF\FF\9A\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\E4\00\00\00d\F2\FF\FF\C8\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\00\01\00\00\18\F3\FF\FF<\0A\00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00\1C\01\00\00<\FD\FF\FF;\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00D\00\00\008\01\00\00`\FD\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\80\01\00\00\88\FD\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_601df0__init_array = internal global %seg_601df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_4004e0_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_4004b0___do_global_dtors_aux to i64) }>
@seg_601ff0__got = internal global %seg_601ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_602000__got_plt = internal global %seg_602000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64) }>
@seg_602020__data = internal global %seg_602020__data_type zeroinitializer
@__bss_start = global %__bss_start_type zeroinitializer
@fixed = global %fixed_type zeroinitializer
@imb = global %imb_type zeroinitializer
@n = global %n_type zeroinitializer
@p = global %p_type zeroinitializer
@imr = global %imr_type zeroinitializer
@rmr = global %rmr_type zeroinitializer
@z = global %z_type zeroinitializer
@puzzl = global %puzzl_type zeroinitializer
@rmb = global %rmb_type zeroinitializer
@zi = global %zi_type zeroinitializer
@cellspace = global %cellspace_type zeroinitializer
@seed = global %seed_type zeroinitializer
@movesdone = global %movesdone_type zeroinitializer
@piecemax = global %piecemax_type zeroinitializer
@sortlist = global %sortlist_type zeroinitializer
@value = global %value_type zeroinitializer
@top = global %top_type zeroinitializer
@floated = global %floated_type zeroinitializer
@pctr = global %pctr_type zeroinitializer
@zr = global %zr_type zeroinitializer
@ima = global %ima_type zeroinitializer
@littlest = global %littlest_type zeroinitializer
@e = global %e_type zeroinitializer
@freelist = global %freelist_type zeroinitializer
@w = global %w_type zeroinitializer
@permarray = global %permarray_type zeroinitializer
@biggest = global %biggest_type zeroinitializer
@rma = global %rma_type zeroinitializer
@kount = global %kount_type zeroinitializer
@tree = global %tree_type zeroinitializer
@stack = global %stack_type zeroinitializer
@piececount = global %piececount_type zeroinitializer
@class = global %class_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004e0_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4004b0___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_401330___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4012c0___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Remove_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Place_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Trial_wrapper
@10 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@11 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Initrand_wrapper
@12 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Puzzle_wrapper
@13 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@14 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Rand_wrapper
@15 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @Fit_wrapper
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

declare %struct.Memory* @sub_400840_Puzzle_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400440_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4006d0_Remove_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400550_Fit_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4005e0_Place_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4003c8__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400770_Trial_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_400550_Fit(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400550:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 9
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ESI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 1
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RAX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 5
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RCX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RBP
  %38 = sub i64 %37, 8
  %39 = load i32, i32* %EDI
  %40 = zext i32 %39 to i64
  %41 = load i64, i64* %PC
  %42 = add i64 %41, 3
  store i64 %42, i64* %PC
  %43 = inttoptr i64 %38 to i32*
  store i32 %39, i32* %43
  %44 = load i64, i64* %RBP
  %45 = sub i64 %44, 12
  %46 = load i32, i32* %ESI
  %47 = zext i32 %46 to i64
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 3
  store i64 %49, i64* %PC
  %50 = inttoptr i64 %45 to i32*
  store i32 %46, i32* %50
  %51 = load i64, i64* %RBP
  %52 = sub i64 %51, 16
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 7
  store i64 %54, i64* %PC
  %55 = inttoptr i64 %52 to i32*
  store i32 0, i32* %55
  br label %block_400561

block_4005bb:                                     ; preds = %block_400598
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 5
  %58 = load i64, i64* %PC
  %59 = add i64 %58, 5
  store i64 %59, i64* %PC
  %60 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %57, i64* %60, align 8, !tbaa !2428
  br label %block_4005c0

block_400575:                                     ; preds = %block_400561
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 10
  store i64 %62, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RAX, align 8, !tbaa !2428
  %63 = load i64, i64* %RBP
  %64 = sub i64 %63, 8
  %65 = load i64, i64* %PC
  %66 = add i64 %65, 4
  store i64 %66, i64* %PC
  %67 = inttoptr i64 %64 to i32*
  %68 = load i32, i32* %67
  %69 = sext i32 %68 to i64
  store i64 %69, i64* %RCX, align 8, !tbaa !2428
  %70 = load i64, i64* %RCX
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 4
  store i64 %72, i64* %PC
  %73 = shl i64 %70, 10
  %74 = icmp slt i64 %73, 0
  %75 = shl i64 %73, 1
  store i64 %75, i64* %RCX, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %77 = zext i1 %74 to i8
  store i8 %77, i8* %76, align 1, !tbaa !2432
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %79 = trunc i64 %75 to i32
  %80 = and i32 %79, 254
  %81 = call i32 @llvm.ctpop.i32(i32 %80) #16
  %82 = trunc i32 %81 to i8
  %83 = and i8 %82, 1
  %84 = xor i8 %83, 1
  store i8 %84, i8* %78, align 1, !tbaa !2432
  %85 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %85, align 1, !tbaa !2432
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %87 = icmp eq i64 %75, 0
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %86, align 1, !tbaa !2432
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %90 = lshr i64 %75, 63
  %91 = trunc i64 %90 to i8
  store i8 %91, i8* %89, align 1, !tbaa !2432
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %92, align 1, !tbaa !2432
  %93 = load i64, i64* %RAX
  %94 = load i64, i64* %RCX
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  %97 = add i64 %94, %93
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = icmp ult i64 %97, %93
  %99 = icmp ult i64 %97, %94
  %100 = or i1 %98, %99
  %101 = zext i1 %100 to i8
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %101, i8* %102, align 1, !tbaa !2433
  %103 = trunc i64 %97 to i32
  %104 = and i32 %103, 255
  %105 = call i32 @llvm.ctpop.i32(i32 %104) #16
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = xor i8 %107, 1
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %108, i8* %109, align 1, !tbaa !2447
  %110 = xor i64 %94, %93
  %111 = xor i64 %110, %97
  %112 = lshr i64 %111, 4
  %113 = trunc i64 %112 to i8
  %114 = and i8 %113, 1
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %114, i8* %115, align 1, !tbaa !2448
  %116 = icmp eq i64 %97, 0
  %117 = zext i1 %116 to i8
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %117, i8* %118, align 1, !tbaa !2449
  %119 = lshr i64 %97, 63
  %120 = trunc i64 %119 to i8
  %121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %120, i8* %121, align 1, !tbaa !2450
  %122 = lshr i64 %93, 63
  %123 = lshr i64 %94, 63
  %124 = xor i64 %119, %122
  %125 = xor i64 %119, %123
  %126 = add nuw nsw i64 %124, %125
  %127 = icmp eq i64 %126, 2
  %128 = zext i1 %127 to i8
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %128, i8* %129, align 1, !tbaa !2451
  %130 = load i64, i64* %RBP
  %131 = sub i64 %130, 16
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 4
  store i64 %133, i64* %PC
  %134 = inttoptr i64 %131 to i32*
  %135 = load i32, i32* %134
  %136 = sext i32 %135 to i64
  store i64 %136, i64* %RCX, align 8, !tbaa !2428
  %137 = load i64, i64* %RAX
  %138 = load i64, i64* %RCX
  %139 = mul i64 %138, 4
  %140 = add i64 %139, %137
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 4
  store i64 %142, i64* %PC
  %143 = inttoptr i64 %140 to i32*
  %144 = load i32, i32* %143
  %145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %145, align 1, !tbaa !2433
  %146 = and i32 %144, 255
  %147 = call i32 @llvm.ctpop.i32(i32 %146) #16
  %148 = trunc i32 %147 to i8
  %149 = and i8 %148, 1
  %150 = xor i8 %149, 1
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %150, i8* %151, align 1, !tbaa !2447
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %152, align 1, !tbaa !2448
  %153 = icmp eq i32 %144, 0
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %154, i8* %155, align 1, !tbaa !2449
  %156 = lshr i32 %144, 31
  %157 = trunc i32 %156 to i8
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %157, i8* %158, align 1, !tbaa !2450
  %159 = lshr i32 %144, 31
  %160 = xor i32 %156, %159
  %161 = add nuw nsw i32 %160, %159
  %162 = icmp eq i32 %161, 2
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %163, i8* %164, align 1, !tbaa !2451
  %165 = load i64, i64* %PC
  %166 = add i64 %165, 46
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 6
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 6
  store i64 %170, i64* %PC
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = load i8, i8* %171, align 1, !tbaa !2449
  store i8 %172, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %174 = icmp ne i8 %172, 0
  %175 = select i1 %174, i64 %166, i64 %168
  store i64 %175, i64* %173, align 8, !tbaa !2428
  %176 = load i8, i8* %BRANCH_TAKEN
  %177 = icmp eq i8 %176, 1
  br i1 %177, label %block_4005c0, label %block_400598

block_4005d3:                                     ; preds = %block_400561
  %178 = load i64, i64* %RBP
  %179 = sub i64 %178, 4
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 7
  store i64 %181, i64* %PC
  %182 = inttoptr i64 %179 to i32*
  store i32 1, i32* %182
  br label %block_4005da

block_4005af:                                     ; preds = %block_400598
  %183 = load i64, i64* %RBP
  %184 = sub i64 %183, 4
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 7
  store i64 %186, i64* %PC
  %187 = inttoptr i64 %184 to i32*
  store i32 0, i32* %187
  %188 = load i64, i64* %PC
  %189 = add i64 %188, 36
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 5
  store i64 %191, i64* %PC
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %189, i64* %192, align 8, !tbaa !2428
  br label %block_4005da

block_4005da:                                     ; preds = %block_4005af, %block_4005d3
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4005d3 ], [ %MEMORY.1, %block_4005af ]
  %193 = load i64, i64* %RBP
  %194 = sub i64 %193, 4
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 3
  store i64 %196, i64* %PC
  %197 = inttoptr i64 %194 to i32*
  %198 = load i32, i32* %197
  %199 = zext i32 %198 to i64
  store i64 %199, i64* %RAX, align 8, !tbaa !2428
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 1
  store i64 %201, i64* %PC
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %203 = load i64, i64* %202, align 8, !tbaa !2428
  %204 = add i64 %203, 8
  %205 = inttoptr i64 %203 to i64*
  %206 = load i64, i64* %205
  store i64 %206, i64* %RBP, align 8, !tbaa !2428
  store i64 %204, i64* %202, align 8, !tbaa !2428
  %207 = load i64, i64* %PC
  %208 = add i64 %207, 1
  store i64 %208, i64* %PC
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %211 = load i64, i64* %210, align 8, !tbaa !2428
  %212 = inttoptr i64 %211 to i64*
  %213 = load i64, i64* %212
  store i64 %213, i64* %209, align 8, !tbaa !2428
  %214 = add i64 %211, 8
  store i64 %214, i64* %210, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400598:                                     ; preds = %block_400575
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 12
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 3
  store i64 %218, i64* %PC
  %219 = inttoptr i64 %216 to i32*
  %220 = load i32, i32* %219
  %221 = zext i32 %220 to i64
  store i64 %221, i64* %RAX, align 8, !tbaa !2428
  %222 = load i64, i64* %RAX
  %223 = load i64, i64* %RBP
  %224 = sub i64 %223, 16
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 3
  store i64 %226, i64* %PC
  %227 = trunc i64 %222 to i32
  %228 = inttoptr i64 %224 to i32*
  %229 = load i32, i32* %228
  %230 = add i32 %229, %227
  %231 = zext i32 %230 to i64
  store i64 %231, i64* %RAX, align 8, !tbaa !2428
  %232 = icmp ult i32 %230, %227
  %233 = icmp ult i32 %230, %229
  %234 = or i1 %232, %233
  %235 = zext i1 %234 to i8
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %235, i8* %236, align 1, !tbaa !2433
  %237 = and i32 %230, 255
  %238 = call i32 @llvm.ctpop.i32(i32 %237) #16
  %239 = trunc i32 %238 to i8
  %240 = and i8 %239, 1
  %241 = xor i8 %240, 1
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %241, i8* %242, align 1, !tbaa !2447
  %243 = xor i32 %229, %227
  %244 = xor i32 %243, %230
  %245 = lshr i32 %244, 4
  %246 = trunc i32 %245 to i8
  %247 = and i8 %246, 1
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %247, i8* %248, align 1, !tbaa !2448
  %249 = icmp eq i32 %230, 0
  %250 = zext i1 %249 to i8
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %250, i8* %251, align 1, !tbaa !2449
  %252 = lshr i32 %230, 31
  %253 = trunc i32 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %253, i8* %254, align 1, !tbaa !2450
  %255 = lshr i32 %227, 31
  %256 = lshr i32 %229, 31
  %257 = xor i32 %252, %255
  %258 = xor i32 %252, %256
  %259 = add nuw nsw i32 %257, %258
  %260 = icmp eq i32 %259, 2
  %261 = zext i1 %260 to i8
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %261, i8* %262, align 1, !tbaa !2451
  %263 = load i32, i32* %EAX
  %264 = zext i32 %263 to i64
  %265 = load i64, i64* %PC
  %266 = add i64 %265, 3
  store i64 %266, i64* %PC
  %267 = shl i64 %264, 32
  %268 = ashr exact i64 %267, 32
  store i64 %268, i64* %RCX, align 8, !tbaa !2428
  %269 = load i64, i64* %RCX
  %270 = mul i64 %269, 4
  %271 = add i64 %270, ptrtoint (%puzzl_type* @puzzl to i64)
  %272 = load i64, i64* %PC
  %273 = add i64 %272, 8
  store i64 %273, i64* %PC
  %274 = inttoptr i64 %271 to i32*
  %275 = load i32, i32* %274
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %276, align 1, !tbaa !2433
  %277 = and i32 %275, 255
  %278 = call i32 @llvm.ctpop.i32(i32 %277) #16
  %279 = trunc i32 %278 to i8
  %280 = and i8 %279, 1
  %281 = xor i8 %280, 1
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %281, i8* %282, align 1, !tbaa !2447
  %283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %283, align 1, !tbaa !2448
  %284 = icmp eq i32 %275, 0
  %285 = zext i1 %284 to i8
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %285, i8* %286, align 1, !tbaa !2449
  %287 = lshr i32 %275, 31
  %288 = trunc i32 %287 to i8
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %288, i8* %289, align 1, !tbaa !2450
  %290 = lshr i32 %275, 31
  %291 = xor i32 %287, %290
  %292 = add nuw nsw i32 %291, %290
  %293 = icmp eq i32 %292, 2
  %294 = zext i1 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %294, i8* %295, align 1, !tbaa !2451
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 18
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 6
  %300 = load i64, i64* %PC
  %301 = add i64 %300, 6
  store i64 %301, i64* %PC
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %303 = load i8, i8* %302, align 1, !tbaa !2449
  store i8 %303, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %305 = icmp ne i8 %303, 0
  %306 = select i1 %305, i64 %297, i64 %299
  store i64 %306, i64* %304, align 8, !tbaa !2428
  %307 = load i8, i8* %BRANCH_TAKEN
  %308 = icmp eq i8 %307, 1
  br i1 %308, label %block_4005bb, label %block_4005af

block_400561:                                     ; preds = %block_4005c0, %block_400550
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_400550 ], [ %MEMORY.2, %block_4005c0 ]
  %309 = load i64, i64* %RBP
  %310 = sub i64 %309, 16
  %311 = load i64, i64* %PC
  %312 = add i64 %311, 3
  store i64 %312, i64* %PC
  %313 = inttoptr i64 %310 to i32*
  %314 = load i32, i32* %313
  %315 = zext i32 %314 to i64
  store i64 %315, i64* %RAX, align 8, !tbaa !2428
  %316 = load i64, i64* %RBP
  %317 = sub i64 %316, 8
  %318 = load i64, i64* %PC
  %319 = add i64 %318, 4
  store i64 %319, i64* %PC
  %320 = inttoptr i64 %317 to i32*
  %321 = load i32, i32* %320
  %322 = sext i32 %321 to i64
  store i64 %322, i64* %RCX, align 8, !tbaa !2428
  %323 = load i32, i32* %EAX
  %324 = zext i32 %323 to i64
  %325 = load i64, i64* %RCX
  %326 = mul i64 %325, 4
  %327 = add i64 %326, ptrtoint (%piecemax_type* @piecemax to i64)
  %328 = load i64, i64* %PC
  %329 = add i64 %328, 7
  store i64 %329, i64* %PC
  %330 = inttoptr i64 %327 to i32*
  %331 = load i32, i32* %330
  %332 = sub i32 %323, %331
  %333 = icmp ult i32 %323, %331
  %334 = zext i1 %333 to i8
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %334, i8* %335, align 1, !tbaa !2433
  %336 = and i32 %332, 255
  %337 = call i32 @llvm.ctpop.i32(i32 %336) #16
  %338 = trunc i32 %337 to i8
  %339 = and i8 %338, 1
  %340 = xor i8 %339, 1
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %340, i8* %341, align 1, !tbaa !2447
  %342 = xor i32 %331, %323
  %343 = xor i32 %342, %332
  %344 = lshr i32 %343, 4
  %345 = trunc i32 %344 to i8
  %346 = and i8 %345, 1
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = icmp eq i32 %332, 0
  %349 = zext i1 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = lshr i32 %332, 31
  %352 = trunc i32 %351 to i8
  %353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %352, i8* %353, align 1, !tbaa !2450
  %354 = lshr i32 %323, 31
  %355 = lshr i32 %331, 31
  %356 = xor i32 %355, %354
  %357 = xor i32 %351, %354
  %358 = add nuw nsw i32 %357, %356
  %359 = icmp eq i32 %358, 2
  %360 = zext i1 %359 to i8
  %361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %360, i8* %361, align 1, !tbaa !2451
  %362 = load i64, i64* %PC
  %363 = add i64 %362, 100
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 6
  %366 = load i64, i64* %PC
  %367 = add i64 %366, 6
  store i64 %367, i64* %PC
  %368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %369 = load i8, i8* %368, align 1, !tbaa !2449
  %370 = icmp eq i8 %369, 0
  %371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %372 = load i8, i8* %371, align 1, !tbaa !2450
  %373 = icmp ne i8 %372, 0
  %374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %375 = load i8, i8* %374, align 1, !tbaa !2451
  %376 = icmp ne i8 %375, 0
  %377 = xor i1 %373, %376
  %378 = xor i1 %377, true
  %379 = and i1 %370, %378
  %380 = zext i1 %379 to i8
  store i8 %380, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %382 = select i1 %379, i64 %363, i64 %365
  store i64 %382, i64* %381, align 8, !tbaa !2428
  %383 = load i8, i8* %BRANCH_TAKEN
  %384 = icmp eq i8 %383, 1
  br i1 %384, label %block_4005d3, label %block_400575

block_4005c0:                                     ; preds = %block_400575, %block_4005bb
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_400575 ], [ %MEMORY.1, %block_4005bb ]
  %385 = load i64, i64* %PC
  %386 = add i64 %385, 5
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 5
  store i64 %388, i64* %PC
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %386, i64* %389, align 8, !tbaa !2428
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 16
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 3
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i32*
  %395 = load i32, i32* %394
  %396 = zext i32 %395 to i64
  store i64 %396, i64* %RAX, align 8, !tbaa !2428
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = trunc i64 %397 to i32
  %401 = add i32 1, %400
  %402 = zext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = icmp ult i32 %401, %400
  %404 = icmp ult i32 %401, 1
  %405 = or i1 %403, %404
  %406 = zext i1 %405 to i8
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %406, i8* %407, align 1, !tbaa !2433
  %408 = and i32 %401, 255
  %409 = call i32 @llvm.ctpop.i32(i32 %408) #16
  %410 = trunc i32 %409 to i8
  %411 = and i8 %410, 1
  %412 = xor i8 %411, 1
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %412, i8* %413, align 1, !tbaa !2447
  %414 = xor i64 1, %397
  %415 = trunc i64 %414 to i32
  %416 = xor i32 %415, %401
  %417 = lshr i32 %416, 4
  %418 = trunc i32 %417 to i8
  %419 = and i8 %418, 1
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %419, i8* %420, align 1, !tbaa !2448
  %421 = icmp eq i32 %401, 0
  %422 = zext i1 %421 to i8
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %422, i8* %423, align 1, !tbaa !2449
  %424 = lshr i32 %401, 31
  %425 = trunc i32 %424 to i8
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %425, i8* %426, align 1, !tbaa !2450
  %427 = lshr i32 %400, 31
  %428 = xor i32 %424, %427
  %429 = add nuw nsw i32 %428, %424
  %430 = icmp eq i32 %429, 2
  %431 = zext i1 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %431, i8* %432, align 1, !tbaa !2451
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 16
  %435 = load i32, i32* %EAX
  %436 = zext i32 %435 to i64
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 3
  store i64 %438, i64* %PC
  %439 = inttoptr i64 %434 to i32*
  store i32 %435, i32* %439
  %440 = load i64, i64* %PC
  %441 = sub i64 %440, 109
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 5
  store i64 %443, i64* %PC
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %441, i64* %444, align 8, !tbaa !2428
  br label %block_400561
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004e0_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_400470_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_400770_Trial(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400770:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 11
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EDI = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %RBP
  %28 = load i64, i64* %PC
  %29 = add i64 %28, 1
  store i64 %29, i64* %PC
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %31 = load i64, i64* %30, align 8, !tbaa !2428
  %32 = add i64 %31, -8
  %33 = inttoptr i64 %32 to i64*
  store i64 %27, i64* %33
  store i64 %32, i64* %30, align 8, !tbaa !2428
  %34 = load i64, i64* %RSP
  %35 = load i64, i64* %PC
  %36 = add i64 %35, 3
  store i64 %36, i64* %PC
  store i64 %34, i64* %RBP, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 4
  store i64 %39, i64* %PC
  %40 = sub i64 %37, 16
  store i64 %40, i64* %RSP, align 8, !tbaa !2428
  %41 = icmp ult i64 %37, 16
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %42, i8* %43, align 1, !tbaa !2433
  %44 = trunc i64 %40 to i32
  %45 = and i32 %44, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2447
  %51 = xor i64 16, %37
  %52 = xor i64 %51, %40
  %53 = lshr i64 %52, 4
  %54 = trunc i64 %53 to i8
  %55 = and i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %55, i8* %56, align 1, !tbaa !2448
  %57 = icmp eq i64 %40, 0
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %58, i8* %59, align 1, !tbaa !2449
  %60 = lshr i64 %40, 63
  %61 = trunc i64 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %61, i8* %62, align 1, !tbaa !2450
  %63 = lshr i64 %37, 63
  %64 = xor i64 %60, %63
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2451
  %69 = load i64, i64* %RBP
  %70 = sub i64 %69, 8
  %71 = load i32, i32* %EDI
  %72 = zext i32 %71 to i64
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 3
  store i64 %74, i64* %PC
  %75 = inttoptr i64 %70 to i32*
  store i32 %71, i32* %75
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 7
  store i64 %77, i64* %PC
  %78 = load i32, i32* bitcast (%kount_type* @kount to i32*)
  %79 = zext i32 %78 to i64
  store i64 %79, i64* %RDI, align 8, !tbaa !2428
  %80 = load i64, i64* %RDI
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC
  %83 = trunc i64 %80 to i32
  %84 = add i32 1, %83
  %85 = zext i32 %84 to i64
  store i64 %85, i64* %RDI, align 8, !tbaa !2428
  %86 = icmp ult i32 %84, %83
  %87 = icmp ult i32 %84, 1
  %88 = or i1 %86, %87
  %89 = zext i1 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %89, i8* %90, align 1, !tbaa !2433
  %91 = and i32 %84, 255
  %92 = call i32 @llvm.ctpop.i32(i32 %91) #16
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %95, i8* %96, align 1, !tbaa !2447
  %97 = xor i64 1, %80
  %98 = trunc i64 %97 to i32
  %99 = xor i32 %98, %84
  %100 = lshr i32 %99, 4
  %101 = trunc i32 %100 to i8
  %102 = and i8 %101, 1
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = icmp eq i32 %84, 0
  %105 = zext i1 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = lshr i32 %84, 31
  %108 = trunc i32 %107 to i8
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %108, i8* %109, align 1, !tbaa !2450
  %110 = lshr i32 %83, 31
  %111 = xor i32 %107, %110
  %112 = add nuw nsw i32 %111, %107
  %113 = icmp eq i32 %112, 2
  %114 = zext i1 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %114, i8* %115, align 1, !tbaa !2451
  %116 = load i32, i32* %EDI
  %117 = zext i32 %116 to i64
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 7
  store i64 %119, i64* %PC
  store i32 %116, i32* bitcast (%kount_type* @kount to i32*)
  %120 = load i64, i64* %RBP
  %121 = sub i64 %120, 12
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 7
  store i64 %123, i64* %PC
  %124 = inttoptr i64 %121 to i32*
  store i32 0, i32* %124
  br label %block_400793

block_40079d:                                     ; preds = %block_400793
  %125 = sub i64 %306, 12
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 4
  store i64 %127, i64* %PC
  %128 = inttoptr i64 %125 to i32*
  %129 = load i32, i32* %128
  %130 = sext i32 %129 to i64
  store i64 %130, i64* %RAX, align 8, !tbaa !2428
  %131 = load i64, i64* %RAX
  %132 = mul i64 %131, 4
  %133 = add i64 %132, ptrtoint (%class_type* @class to i64)
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 8
  store i64 %135, i64* %PC
  %136 = inttoptr i64 %133 to i32*
  %137 = load i32, i32* %136
  %138 = sext i32 %137 to i64
  store i64 %138, i64* %RAX, align 8, !tbaa !2428
  %139 = load i64, i64* %RAX
  %140 = mul i64 %139, 4
  %141 = add i64 %140, ptrtoint (%piececount_type* @piececount to i64)
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 8
  store i64 %143, i64* %PC
  %144 = inttoptr i64 %141 to i32*
  %145 = load i32, i32* %144
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %146, align 1, !tbaa !2433
  %147 = and i32 %145, 255
  %148 = call i32 @llvm.ctpop.i32(i32 %147) #16
  %149 = trunc i32 %148 to i8
  %150 = and i8 %149, 1
  %151 = xor i8 %150, 1
  %152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %151, i8* %152, align 1, !tbaa !2447
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %153, align 1, !tbaa !2448
  %154 = icmp eq i32 %145, 0
  %155 = zext i1 %154 to i8
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %155, i8* %156, align 1, !tbaa !2449
  %157 = lshr i32 %145, 31
  %158 = trunc i32 %157 to i8
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %158, i8* %159, align 1, !tbaa !2450
  %160 = lshr i32 %145, 31
  %161 = xor i32 %157, %160
  %162 = add nuw nsw i32 %161, %160
  %163 = icmp eq i32 %162, 2
  %164 = zext i1 %163 to i8
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %164, i8* %165, align 1, !tbaa !2451
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 100
  %168 = load i64, i64* %PC
  %169 = add i64 %168, 6
  %170 = load i64, i64* %PC
  %171 = add i64 %170, 6
  store i64 %171, i64* %PC
  %172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %173 = load i8, i8* %172, align 1, !tbaa !2449
  store i8 %173, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %175 = icmp ne i8 %173, 0
  %176 = select i1 %175, i64 %167, i64 %169
  store i64 %176, i64* %174, align 8, !tbaa !2428
  %177 = load i8, i8* %BRANCH_TAKEN
  %178 = icmp eq i8 %177, 1
  br i1 %178, label %block_400815, label %block_4007b7

block_400815:                                     ; preds = %block_400810, %block_40079d
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_40079d ], [ %MEMORY.3, %block_400810 ]
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 5
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 5
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %180, i64* %183, align 8, !tbaa !2428
  %184 = load i64, i64* %RBP
  %185 = sub i64 %184, 12
  %186 = load i64, i64* %PC
  %187 = add i64 %186, 3
  store i64 %187, i64* %PC
  %188 = inttoptr i64 %185 to i32*
  %189 = load i32, i32* %188
  %190 = zext i32 %189 to i64
  store i64 %190, i64* %RAX, align 8, !tbaa !2428
  %191 = load i64, i64* %RAX
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 3
  store i64 %193, i64* %PC
  %194 = trunc i64 %191 to i32
  %195 = add i32 1, %194
  %196 = zext i32 %195 to i64
  store i64 %196, i64* %RAX, align 8, !tbaa !2428
  %197 = icmp ult i32 %195, %194
  %198 = icmp ult i32 %195, 1
  %199 = or i1 %197, %198
  %200 = zext i1 %199 to i8
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %200, i8* %201, align 1, !tbaa !2433
  %202 = and i32 %195, 255
  %203 = call i32 @llvm.ctpop.i32(i32 %202) #16
  %204 = trunc i32 %203 to i8
  %205 = and i8 %204, 1
  %206 = xor i8 %205, 1
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %206, i8* %207, align 1, !tbaa !2447
  %208 = xor i64 1, %191
  %209 = trunc i64 %208 to i32
  %210 = xor i32 %209, %195
  %211 = lshr i32 %210, 4
  %212 = trunc i32 %211 to i8
  %213 = and i8 %212, 1
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %213, i8* %214, align 1, !tbaa !2448
  %215 = icmp eq i32 %195, 0
  %216 = zext i1 %215 to i8
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %216, i8* %217, align 1, !tbaa !2449
  %218 = lshr i32 %195, 31
  %219 = trunc i32 %218 to i8
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %219, i8* %220, align 1, !tbaa !2450
  %221 = lshr i32 %194, 31
  %222 = xor i32 %218, %221
  %223 = add nuw nsw i32 %222, %218
  %224 = icmp eq i32 %223, 2
  %225 = zext i1 %224 to i8
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %225, i8* %226, align 1, !tbaa !2451
  %227 = load i64, i64* %RBP
  %228 = sub i64 %227, 12
  %229 = load i32, i32* %EAX
  %230 = zext i32 %229 to i64
  %231 = load i64, i64* %PC
  %232 = add i64 %231, 3
  store i64 %232, i64* %PC
  %233 = inttoptr i64 %228 to i32*
  store i32 %229, i32* %233
  %234 = load i64, i64* %PC
  %235 = sub i64 %234, 144
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 5
  store i64 %237, i64* %PC
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %235, i64* %238, align 8, !tbaa !2428
  br label %block_400793

block_4007f4:                                     ; preds = %block_4007ea, %block_4007cb
  %MEMORY.1 = phi %struct.Memory* [ %421, %block_4007cb ], [ %421, %block_4007ea ]
  %239 = load i64, i64* %RBP
  %240 = sub i64 %239, 4
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 7
  store i64 %242, i64* %PC
  %243 = inttoptr i64 %240 to i32*
  store i32 1, i32* %243
  %244 = load i64, i64* %PC
  %245 = add i64 %244, 52
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 5
  store i64 %247, i64* %PC
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %245, i64* %248, align 8, !tbaa !2428
  br label %block_40082f

block_400793:                                     ; preds = %block_400815, %block_400770
  %MEMORY.2 = phi %struct.Memory* [ %2, %block_400770 ], [ %MEMORY.0, %block_400815 ]
  %249 = load i64, i64* %RBP
  %250 = sub i64 %249, 12
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 4
  store i64 %252, i64* %PC
  %253 = inttoptr i64 %250 to i32*
  %254 = load i32, i32* %253
  %255 = sub i32 %254, 12
  %256 = icmp ult i32 %254, 12
  %257 = zext i1 %256 to i8
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %257, i8* %258, align 1, !tbaa !2433
  %259 = and i32 %255, 255
  %260 = call i32 @llvm.ctpop.i32(i32 %259) #16
  %261 = trunc i32 %260 to i8
  %262 = and i8 %261, 1
  %263 = xor i8 %262, 1
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %263, i8* %264, align 1, !tbaa !2447
  %265 = xor i32 %254, 12
  %266 = xor i32 %265, %255
  %267 = lshr i32 %266, 4
  %268 = trunc i32 %267 to i8
  %269 = and i8 %268, 1
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = icmp eq i32 %255, 0
  %272 = zext i1 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i32 %255, 31
  %275 = trunc i32 %274 to i8
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %275, i8* %276, align 1, !tbaa !2450
  %277 = lshr i32 %254, 31
  %278 = xor i32 %274, %277
  %279 = add nuw nsw i32 %278, %277
  %280 = icmp eq i32 %279, 2
  %281 = zext i1 %280 to i8
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %281, i8* %282, align 1, !tbaa !2451
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 145
  %285 = load i64, i64* %PC
  %286 = add i64 %285, 6
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 6
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %290 = load i8, i8* %289, align 1, !tbaa !2449
  %291 = icmp eq i8 %290, 0
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %293 = load i8, i8* %292, align 1, !tbaa !2450
  %294 = icmp ne i8 %293, 0
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %296 = load i8, i8* %295, align 1, !tbaa !2451
  %297 = icmp ne i8 %296, 0
  %298 = xor i1 %294, %297
  %299 = xor i1 %298, true
  %300 = and i1 %291, %299
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %303 = select i1 %300, i64 %284, i64 %286
  store i64 %303, i64* %302, align 8, !tbaa !2428
  %304 = load i8, i8* %BRANCH_TAKEN
  %305 = icmp eq i8 %304, 1
  %306 = load i64, i64* %RBP
  br i1 %305, label %block_400828, label %block_40079d

block_400810:                                     ; preds = %block_400800, %block_4007b7
  %MEMORY.3 = phi %struct.Memory* [ %486, %block_4007b7 ], [ %594, %block_400800 ]
  %307 = load i64, i64* %PC
  %308 = add i64 %307, 5
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 5
  store i64 %310, i64* %PC
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %308, i64* %311, align 8, !tbaa !2428
  br label %block_400815

block_40082f:                                     ; preds = %block_400828, %block_4007f4
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.2, %block_400828 ], [ %MEMORY.1, %block_4007f4 ]
  %312 = load i64, i64* %RBP
  %313 = sub i64 %312, 4
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 3
  store i64 %315, i64* %PC
  %316 = inttoptr i64 %313 to i32*
  %317 = load i32, i32* %316
  %318 = zext i32 %317 to i64
  store i64 %318, i64* %RAX, align 8, !tbaa !2428
  %319 = load i64, i64* %RSP
  %320 = load i64, i64* %PC
  %321 = add i64 %320, 4
  store i64 %321, i64* %PC
  %322 = add i64 16, %319
  store i64 %322, i64* %RSP, align 8, !tbaa !2428
  %323 = icmp ult i64 %322, %319
  %324 = icmp ult i64 %322, 16
  %325 = or i1 %323, %324
  %326 = zext i1 %325 to i8
  %327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %326, i8* %327, align 1, !tbaa !2433
  %328 = trunc i64 %322 to i32
  %329 = and i32 %328, 255
  %330 = call i32 @llvm.ctpop.i32(i32 %329) #16
  %331 = trunc i32 %330 to i8
  %332 = and i8 %331, 1
  %333 = xor i8 %332, 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %333, i8* %334, align 1, !tbaa !2447
  %335 = xor i64 16, %319
  %336 = xor i64 %335, %322
  %337 = lshr i64 %336, 4
  %338 = trunc i64 %337 to i8
  %339 = and i8 %338, 1
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %339, i8* %340, align 1, !tbaa !2448
  %341 = icmp eq i64 %322, 0
  %342 = zext i1 %341 to i8
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %342, i8* %343, align 1, !tbaa !2449
  %344 = lshr i64 %322, 63
  %345 = trunc i64 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %345, i8* %346, align 1, !tbaa !2450
  %347 = lshr i64 %319, 63
  %348 = xor i64 %344, %347
  %349 = add nuw nsw i64 %348, %344
  %350 = icmp eq i64 %349, 2
  %351 = zext i1 %350 to i8
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %351, i8* %352, align 1, !tbaa !2451
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 1
  store i64 %354, i64* %PC
  %355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %356 = load i64, i64* %355, align 8, !tbaa !2428
  %357 = add i64 %356, 8
  %358 = inttoptr i64 %356 to i64*
  %359 = load i64, i64* %358
  store i64 %359, i64* %RBP, align 8, !tbaa !2428
  store i64 %357, i64* %355, align 8, !tbaa !2428
  %360 = load i64, i64* %PC
  %361 = add i64 %360, 1
  store i64 %361, i64* %PC
  %362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %364 = load i64, i64* %363, align 8, !tbaa !2428
  %365 = inttoptr i64 %364 to i64*
  %366 = load i64, i64* %365
  store i64 %366, i64* %362, align 8, !tbaa !2428
  %367 = add i64 %364, 8
  store i64 %367, i64* %363, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.4

block_4007cb:                                     ; preds = %block_4007b7
  %368 = load i64, i64* %RBP
  %369 = sub i64 %368, 12
  %370 = load i64, i64* %PC
  %371 = add i64 %370, 3
  store i64 %371, i64* %PC
  %372 = inttoptr i64 %369 to i32*
  %373 = load i32, i32* %372
  %374 = zext i32 %373 to i64
  store i64 %374, i64* %RDI, align 8, !tbaa !2428
  %375 = load i64, i64* %RBP
  %376 = sub i64 %375, 8
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 3
  store i64 %378, i64* %PC
  %379 = inttoptr i64 %376 to i32*
  %380 = load i32, i32* %379
  %381 = zext i32 %380 to i64
  store i64 %381, i64* %RSI, align 8, !tbaa !2428
  %382 = load i64, i64* %PC
  %383 = sub i64 %382, 497
  %384 = load i64, i64* %PC
  %385 = add i64 %384, 5
  %386 = load i64, i64* %PC
  %387 = add i64 %386, 5
  store i64 %387, i64* %PC
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %389 = load i64, i64* %388, align 8, !tbaa !2428
  %390 = add i64 %389, -8
  %391 = inttoptr i64 %390 to i64*
  store i64 %385, i64* %391
  store i64 %390, i64* %388, align 8, !tbaa !2428
  %392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %383, i64* %392, align 8, !tbaa !2428
  %393 = load i64, i64* %PC
  %394 = call %struct.Memory* @sub_4005e0_Place_renamed_(%struct.State* %0, i64 %393, %struct.Memory* %486)
  %395 = load i64, i64* %RBP
  %396 = sub i64 %395, 16
  %397 = load i32, i32* %EAX
  %398 = zext i32 %397 to i64
  %399 = load i64, i64* %PC
  %400 = add i64 %399, 3
  store i64 %400, i64* %PC
  %401 = inttoptr i64 %396 to i32*
  store i32 %397, i32* %401
  %402 = load i64, i64* %RBP
  %403 = sub i64 %402, 16
  %404 = load i64, i64* %PC
  %405 = add i64 %404, 3
  store i64 %405, i64* %PC
  %406 = inttoptr i64 %403 to i32*
  %407 = load i32, i32* %406
  %408 = zext i32 %407 to i64
  store i64 %408, i64* %RDI, align 8, !tbaa !2428
  %409 = load i64, i64* %PC
  %410 = sub i64 %409, 108
  %411 = load i64, i64* %PC
  %412 = add i64 %411, 5
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 5
  store i64 %414, i64* %PC
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %416 = load i64, i64* %415, align 8, !tbaa !2428
  %417 = add i64 %416, -8
  %418 = inttoptr i64 %417 to i64*
  store i64 %412, i64* %418
  store i64 %417, i64* %415, align 8, !tbaa !2428
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %410, i64* %419, align 8, !tbaa !2428
  %420 = load i64, i64* %PC
  %421 = call %struct.Memory* @sub_400770_Trial_renamed_(%struct.State* %0, i64 %420, %struct.Memory* %394)
  %422 = load i32, i32* %EAX
  %423 = zext i32 %422 to i64
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %426, align 1, !tbaa !2433
  %427 = and i32 %422, 255
  %428 = call i32 @llvm.ctpop.i32(i32 %427) #16
  %429 = trunc i32 %428 to i8
  %430 = and i8 %429, 1
  %431 = xor i8 %430, 1
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %431, i8* %432, align 1, !tbaa !2447
  %433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %433, align 1, !tbaa !2448
  %434 = icmp eq i32 %422, 0
  %435 = zext i1 %434 to i8
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %435, i8* %436, align 1, !tbaa !2449
  %437 = lshr i32 %422, 31
  %438 = trunc i32 %437 to i8
  %439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %438, i8* %439, align 1, !tbaa !2450
  %440 = lshr i32 %422, 31
  %441 = xor i32 %437, %440
  %442 = add nuw nsw i32 %441, %440
  %443 = icmp eq i32 %442, 2
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %444, i8* %445, align 1, !tbaa !2451
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 16
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 6
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 6
  store i64 %451, i64* %PC
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %453 = load i8, i8* %452, align 1, !tbaa !2449
  %454 = icmp eq i8 %453, 0
  %455 = zext i1 %454 to i8
  store i8 %455, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %457 = select i1 %454, i64 %447, i64 %449
  store i64 %457, i64* %456, align 8, !tbaa !2428
  %458 = load i8, i8* %BRANCH_TAKEN
  %459 = icmp eq i8 %458, 1
  br i1 %459, label %block_4007f4, label %block_4007ea

block_4007b7:                                     ; preds = %block_40079d
  %460 = load i64, i64* %RBP
  %461 = sub i64 %460, 12
  %462 = load i64, i64* %PC
  %463 = add i64 %462, 3
  store i64 %463, i64* %PC
  %464 = inttoptr i64 %461 to i32*
  %465 = load i32, i32* %464
  %466 = zext i32 %465 to i64
  store i64 %466, i64* %RDI, align 8, !tbaa !2428
  %467 = load i64, i64* %RBP
  %468 = sub i64 %467, 8
  %469 = load i64, i64* %PC
  %470 = add i64 %469, 3
  store i64 %470, i64* %PC
  %471 = inttoptr i64 %468 to i32*
  %472 = load i32, i32* %471
  %473 = zext i32 %472 to i64
  store i64 %473, i64* %RSI, align 8, !tbaa !2428
  %474 = load i64, i64* %PC
  %475 = sub i64 %474, 621
  %476 = load i64, i64* %PC
  %477 = add i64 %476, 5
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 5
  store i64 %479, i64* %PC
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %481 = load i64, i64* %480, align 8, !tbaa !2428
  %482 = add i64 %481, -8
  %483 = inttoptr i64 %482 to i64*
  store i64 %477, i64* %483
  store i64 %482, i64* %480, align 8, !tbaa !2428
  %484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %475, i64* %484, align 8, !tbaa !2428
  %485 = load i64, i64* %PC
  %486 = call %struct.Memory* @sub_400550_Fit_renamed_(%struct.State* %0, i64 %485, %struct.Memory* %MEMORY.2)
  %487 = load i32, i32* %EAX
  %488 = zext i32 %487 to i64
  %489 = load i64, i64* %PC
  %490 = add i64 %489, 3
  store i64 %490, i64* %PC
  %491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %491, align 1, !tbaa !2433
  %492 = and i32 %487, 255
  %493 = call i32 @llvm.ctpop.i32(i32 %492) #16
  %494 = trunc i32 %493 to i8
  %495 = and i8 %494, 1
  %496 = xor i8 %495, 1
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %496, i8* %497, align 1, !tbaa !2447
  %498 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %498, align 1, !tbaa !2448
  %499 = icmp eq i32 %487, 0
  %500 = zext i1 %499 to i8
  %501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %500, i8* %501, align 1, !tbaa !2449
  %502 = lshr i32 %487, 31
  %503 = trunc i32 %502 to i8
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %503, i8* %504, align 1, !tbaa !2450
  %505 = lshr i32 %487, 31
  %506 = xor i32 %502, %505
  %507 = add nuw nsw i32 %506, %505
  %508 = icmp eq i32 %507, 2
  %509 = zext i1 %508 to i8
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %509, i8* %510, align 1, !tbaa !2451
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 75
  %513 = load i64, i64* %PC
  %514 = add i64 %513, 6
  %515 = load i64, i64* %PC
  %516 = add i64 %515, 6
  store i64 %516, i64* %PC
  %517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %518 = load i8, i8* %517, align 1, !tbaa !2449
  store i8 %518, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %520 = icmp ne i8 %518, 0
  %521 = select i1 %520, i64 %512, i64 %514
  store i64 %521, i64* %519, align 8, !tbaa !2428
  %522 = load i8, i8* %BRANCH_TAKEN
  %523 = icmp eq i8 %522, 1
  br i1 %523, label %block_400810, label %block_4007cb

block_4007ea:                                     ; preds = %block_4007cb
  %524 = load i64, i64* %RBP
  %525 = sub i64 %524, 16
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 4
  store i64 %527, i64* %PC
  %528 = inttoptr i64 %525 to i32*
  %529 = load i32, i32* %528
  %530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %530, align 1, !tbaa !2433
  %531 = and i32 %529, 255
  %532 = call i32 @llvm.ctpop.i32(i32 %531) #16
  %533 = trunc i32 %532 to i8
  %534 = and i8 %533, 1
  %535 = xor i8 %534, 1
  %536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %535, i8* %536, align 1, !tbaa !2447
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %537, align 1, !tbaa !2448
  %538 = icmp eq i32 %529, 0
  %539 = zext i1 %538 to i8
  %540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %539, i8* %540, align 1, !tbaa !2449
  %541 = lshr i32 %529, 31
  %542 = trunc i32 %541 to i8
  %543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %542, i8* %543, align 1, !tbaa !2450
  %544 = lshr i32 %529, 31
  %545 = xor i32 %541, %544
  %546 = add nuw nsw i32 %545, %544
  %547 = icmp eq i32 %546, 2
  %548 = zext i1 %547 to i8
  %549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %548, i8* %549, align 1, !tbaa !2451
  %550 = load i64, i64* %PC
  %551 = add i64 %550, 18
  %552 = load i64, i64* %PC
  %553 = add i64 %552, 6
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 6
  store i64 %555, i64* %PC
  %556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %557 = load i8, i8* %556, align 1, !tbaa !2449
  %558 = icmp eq i8 %557, 0
  %559 = zext i1 %558 to i8
  store i8 %559, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %561 = select i1 %558, i64 %551, i64 %553
  store i64 %561, i64* %560, align 8, !tbaa !2428
  %562 = load i8, i8* %BRANCH_TAKEN
  %563 = icmp eq i8 %562, 1
  br i1 %563, label %block_400800, label %block_4007f4

block_400828:                                     ; preds = %block_400793
  %564 = sub i64 %306, 4
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 7
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i32*
  store i32 0, i32* %567
  br label %block_40082f

block_400800:                                     ; preds = %block_4007ea
  %568 = load i64, i64* %RBP
  %569 = sub i64 %568, 12
  %570 = load i64, i64* %PC
  %571 = add i64 %570, 3
  store i64 %571, i64* %PC
  %572 = inttoptr i64 %569 to i32*
  %573 = load i32, i32* %572
  %574 = zext i32 %573 to i64
  store i64 %574, i64* %RDI, align 8, !tbaa !2428
  %575 = load i64, i64* %RBP
  %576 = sub i64 %575, 8
  %577 = load i64, i64* %PC
  %578 = add i64 %577, 3
  store i64 %578, i64* %PC
  %579 = inttoptr i64 %576 to i32*
  %580 = load i32, i32* %579
  %581 = zext i32 %580 to i64
  store i64 %581, i64* %RSI, align 8, !tbaa !2428
  %582 = load i64, i64* %PC
  %583 = sub i64 %582, 310
  %584 = load i64, i64* %PC
  %585 = add i64 %584, 5
  %586 = load i64, i64* %PC
  %587 = add i64 %586, 5
  store i64 %587, i64* %PC
  %588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %589 = load i64, i64* %588, align 8, !tbaa !2428
  %590 = add i64 %589, -8
  %591 = inttoptr i64 %590 to i64*
  store i64 %585, i64* %591
  store i64 %590, i64* %588, align 8, !tbaa !2428
  %592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %583, i64* %592, align 8, !tbaa !2428
  %593 = load i64, i64* %PC
  %594 = call %struct.Memory* @sub_4006d0_Remove_renamed_(%struct.State* %0, i64 %593, %struct.Memory* %421)
  %595 = load i64, i64* %PC
  %596 = add i64 %595, 5
  %597 = load i64, i64* %PC
  %598 = add i64 %597, 5
  store i64 %598, i64* %PC
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %596, i64* %599, align 8, !tbaa !2428
  br label %block_400810
}

; Function Attrs: noinline
define %struct.Memory* @sub_400840_Puzzle(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400840:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 7
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %EDX = bitcast %union.anon* %18 to i32*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 11
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %EDI = bitcast %union.anon* %21 to i32*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 1
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RAX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 5
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RCX = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 7
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDX = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 9
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSI = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 11
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RDI = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %38 = getelementptr inbounds %struct.GPR, %struct.GPR* %37, i32 0, i32 13
  %39 = getelementptr inbounds %struct.Reg, %struct.Reg* %38, i32 0, i32 0
  %RSP = bitcast %union.anon* %39 to i64*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %41 = getelementptr inbounds %struct.GPR, %struct.GPR* %40, i32 0, i32 15
  %42 = getelementptr inbounds %struct.Reg, %struct.Reg* %41, i32 0, i32 0
  %RBP = bitcast %union.anon* %42 to i64*
  %43 = load i64, i64* %RBP
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 1
  store i64 %45, i64* %PC
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !tbaa !2428
  %48 = add i64 %47, -8
  %49 = inttoptr i64 %48 to i64*
  store i64 %43, i64* %49
  store i64 %48, i64* %46, align 8, !tbaa !2428
  %50 = load i64, i64* %RSP
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  store i64 %50, i64* %RBP, align 8, !tbaa !2428
  %53 = load i64, i64* %RSP
  %54 = load i64, i64* %PC
  %55 = add i64 %54, 4
  store i64 %55, i64* %PC
  %56 = sub i64 %53, 48
  store i64 %56, i64* %RSP, align 8, !tbaa !2428
  %57 = icmp ult i64 %53, 48
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %58, i8* %59, align 1, !tbaa !2433
  %60 = trunc i64 %56 to i32
  %61 = and i32 %60, 255
  %62 = call i32 @llvm.ctpop.i32(i32 %61) #16
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 1
  %65 = xor i8 %64, 1
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %65, i8* %66, align 1, !tbaa !2447
  %67 = xor i64 48, %53
  %68 = xor i64 %67, %56
  %69 = lshr i64 %68, 4
  %70 = trunc i64 %69 to i8
  %71 = and i8 %70, 1
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %71, i8* %72, align 1, !tbaa !2448
  %73 = icmp eq i64 %56, 0
  %74 = zext i1 %73 to i8
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %74, i8* %75, align 1, !tbaa !2449
  %76 = lshr i64 %56, 63
  %77 = trunc i64 %76 to i8
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %77, i8* %78, align 1, !tbaa !2450
  %79 = lshr i64 %53, 63
  %80 = xor i64 %76, %79
  %81 = add nuw nsw i64 %80, %79
  %82 = icmp eq i64 %81, 2
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %83, i8* %84, align 1, !tbaa !2451
  %85 = load i64, i64* %RBP
  %86 = sub i64 %85, 16
  %87 = load i64, i64* %PC
  %88 = add i64 %87, 7
  store i64 %88, i64* %PC
  %89 = inttoptr i64 %86 to i32*
  store i32 0, i32* %89
  br label %block_40084f

block_4011fd:                                     ; preds = %block_4011e8
  %90 = add i64 %500, 10
  store i64 %90, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401340__rodata_type* @seg_401340__rodata to i64), i64 22), i64* %RDI, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 2
  store i64 %92, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %93 = load i64, i64* %PC
  %94 = sub i64 %93, 3609
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  %97 = load i64, i64* %PC
  %98 = add i64 %97, 5
  store i64 %98, i64* %PC
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %100 = load i64, i64* %99, align 8, !tbaa !2428
  %101 = add i64 %100, -8
  %102 = inttoptr i64 %101 to i64*
  store i64 %96, i64* %102
  store i64 %101, i64* %99, align 8, !tbaa !2428
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %94, i64* %103, align 8, !tbaa !2428
  %104 = load i64, i64* %PC
  %105 = call %struct.Memory* @ext_619238_printf(%struct.State* %0, i64 %104, %struct.Memory* %461)
  %106 = load i64, i64* %RBP
  %107 = sub i64 %106, 24
  %108 = load i32, i32* %EAX
  %109 = zext i32 %108 to i64
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 3
  store i64 %111, i64* %PC
  %112 = inttoptr i64 %107 to i32*
  store i32 %108, i32* %112
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 47
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 5
  store i64 %116, i64* %PC
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %114, i64* %117, align 8, !tbaa !2428
  br label %block_401240

block_400bf7:                                     ; preds = %block_400bf0, %block_400c41
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.2, %block_400bf0 ], [ %MEMORY.47, %block_400c41 ]
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 8
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %119 to i32*
  %123 = load i32, i32* %122
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %124, align 1, !tbaa !2433
  %125 = and i32 %123, 255
  %126 = call i32 @llvm.ctpop.i32(i32 %125) #16
  %127 = trunc i32 %126 to i8
  %128 = and i8 %127, 1
  %129 = xor i8 %128, 1
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %129, i8* %130, align 1, !tbaa !2447
  %131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %131, align 1, !tbaa !2448
  %132 = icmp eq i32 %123, 0
  %133 = zext i1 %132 to i8
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %133, i8* %134, align 1, !tbaa !2449
  %135 = lshr i32 %123, 31
  %136 = trunc i32 %135 to i8
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %136, i8* %137, align 1, !tbaa !2450
  %138 = lshr i32 %123, 31
  %139 = xor i32 %135, %138
  %140 = add nuw nsw i32 %139, %138
  %141 = icmp eq i32 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2451
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 89
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 6
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 6
  store i64 %149, i64* %PC
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %151 = load i8, i8* %150, align 1, !tbaa !2449
  %152 = icmp eq i8 %151, 0
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %154 = load i8, i8* %153, align 1, !tbaa !2450
  %155 = icmp ne i8 %154, 0
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %157 = load i8, i8* %156, align 1, !tbaa !2451
  %158 = icmp ne i8 %157, 0
  %159 = xor i1 %155, %158
  %160 = xor i1 %159, true
  %161 = and i1 %152, %160
  %162 = zext i1 %161 to i8
  store i8 %162, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %164 = select i1 %161, i64 %145, i64 %147
  store i64 %164, i64* %163, align 8, !tbaa !2428
  %165 = load i8, i8* %BRANCH_TAKEN
  %166 = icmp eq i8 %165, 1
  br i1 %166, label %block_400c54, label %block_400c01

block_400ff5:                                     ; preds = %block_400fbc
  %167 = load i64, i64* %PC
  %168 = add i64 %167, 5
  %169 = load i64, i64* %PC
  %170 = add i64 %169, 5
  store i64 %170, i64* %PC
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %168, i64* %171, align 8, !tbaa !2428
  %172 = load i64, i64* %RBP
  %173 = sub i64 %172, 8
  %174 = load i64, i64* %PC
  %175 = add i64 %174, 3
  store i64 %175, i64* %PC
  %176 = inttoptr i64 %173 to i32*
  %177 = load i32, i32* %176
  %178 = zext i32 %177 to i64
  store i64 %178, i64* %RAX, align 8, !tbaa !2428
  %179 = load i64, i64* %RAX
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 3
  store i64 %181, i64* %PC
  %182 = trunc i64 %179 to i32
  %183 = add i32 1, %182
  %184 = zext i32 %183 to i64
  store i64 %184, i64* %RAX, align 8, !tbaa !2428
  %185 = icmp ult i32 %183, %182
  %186 = icmp ult i32 %183, 1
  %187 = or i1 %185, %186
  %188 = zext i1 %187 to i8
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %188, i8* %189, align 1, !tbaa !2433
  %190 = and i32 %183, 255
  %191 = call i32 @llvm.ctpop.i32(i32 %190) #16
  %192 = trunc i32 %191 to i8
  %193 = and i8 %192, 1
  %194 = xor i8 %193, 1
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %194, i8* %195, align 1, !tbaa !2447
  %196 = xor i64 1, %179
  %197 = trunc i64 %196 to i32
  %198 = xor i32 %197, %183
  %199 = lshr i32 %198, 4
  %200 = trunc i32 %199 to i8
  %201 = and i8 %200, 1
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %201, i8* %202, align 1, !tbaa !2448
  %203 = icmp eq i32 %183, 0
  %204 = zext i1 %203 to i8
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %204, i8* %205, align 1, !tbaa !2449
  %206 = lshr i32 %183, 31
  %207 = trunc i32 %206 to i8
  %208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %207, i8* %208, align 1, !tbaa !2450
  %209 = lshr i32 %182, 31
  %210 = xor i32 %206, %209
  %211 = add nuw nsw i32 %210, %206
  %212 = icmp eq i32 %211, 2
  %213 = zext i1 %212 to i8
  %214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %213, i8* %214, align 1, !tbaa !2451
  %215 = load i64, i64* %RBP
  %216 = sub i64 %215, 8
  %217 = load i32, i32* %EAX
  %218 = zext i32 %217 to i64
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 3
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %216 to i32*
  store i32 %217, i32* %221
  %222 = load i64, i64* %PC
  %223 = sub i64 %222, 88
  %224 = load i64, i64* %PC
  %225 = add i64 %224, 5
  store i64 %225, i64* %PC
  %226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %223, i64* %226, align 8, !tbaa !2428
  br label %block_400fab

block_400dec:                                     ; preds = %block_400de2
  %227 = load i64, i64* %RBP
  %228 = sub i64 %227, 4
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 3
  store i64 %230, i64* %PC
  %231 = inttoptr i64 %228 to i32*
  %232 = load i32, i32* %231
  %233 = zext i32 %232 to i64
  store i64 %233, i64* %RAX, align 8, !tbaa !2428
  %234 = load i64, i64* %RBP
  %235 = sub i64 %234, 8
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 3
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %235 to i32*
  %239 = load i32, i32* %238
  %240 = zext i32 %239 to i64
  store i64 %240, i64* %RCX, align 8, !tbaa !2428
  %241 = load i64, i64* %RBP
  %242 = sub i64 %241, 12
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 3
  store i64 %244, i64* %PC
  %245 = inttoptr i64 %242 to i32*
  %246 = load i32, i32* %245
  %247 = zext i32 %246 to i64
  store i64 %247, i64* %RDX, align 8, !tbaa !2428
  %248 = load i64, i64* %RDX
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 3
  store i64 %250, i64* %PC
  %251 = and i64 %248, 4294967295
  %252 = shl i64 %251, 2
  %253 = trunc i64 %252 to i32
  %254 = icmp slt i32 %253, 0
  %255 = shl i32 %253, 1
  %256 = zext i32 %255 to i64
  store i64 %256, i64* %RDX, align 8, !tbaa !2428
  %257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %258 = zext i1 %254 to i8
  store i8 %258, i8* %257, align 1, !tbaa !2432
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %260 = and i32 %255, 254
  %261 = call i32 @llvm.ctpop.i32(i32 %260) #16
  %262 = trunc i32 %261 to i8
  %263 = and i8 %262, 1
  %264 = xor i8 %263, 1
  store i8 %264, i8* %259, align 1, !tbaa !2432
  %265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %265, align 1, !tbaa !2432
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %267 = icmp eq i32 %255, 0
  %268 = zext i1 %267 to i8
  store i8 %268, i8* %266, align 1, !tbaa !2432
  %269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %270 = lshr i32 %255, 31
  %271 = trunc i32 %270 to i8
  store i8 %271, i8* %269, align 1, !tbaa !2432
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %272, align 1, !tbaa !2432
  %273 = load i64, i64* %RCX
  %274 = load i32, i32* %EDX
  %275 = zext i32 %274 to i64
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 2
  store i64 %277, i64* %PC
  %278 = trunc i64 %273 to i32
  %279 = add i32 %274, %278
  %280 = zext i32 %279 to i64
  store i64 %280, i64* %RCX, align 8, !tbaa !2428
  %281 = icmp ult i32 %279, %278
  %282 = icmp ult i32 %279, %274
  %283 = or i1 %281, %282
  %284 = zext i1 %283 to i8
  %285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %284, i8* %285, align 1, !tbaa !2433
  %286 = and i32 %279, 255
  %287 = call i32 @llvm.ctpop.i32(i32 %286) #16
  %288 = trunc i32 %287 to i8
  %289 = and i8 %288, 1
  %290 = xor i8 %289, 1
  %291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %290, i8* %291, align 1, !tbaa !2447
  %292 = xor i64 %275, %273
  %293 = trunc i64 %292 to i32
  %294 = xor i32 %293, %279
  %295 = lshr i32 %294, 4
  %296 = trunc i32 %295 to i8
  %297 = and i8 %296, 1
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %297, i8* %298, align 1, !tbaa !2448
  %299 = icmp eq i32 %279, 0
  %300 = zext i1 %299 to i8
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %300, i8* %301, align 1, !tbaa !2449
  %302 = lshr i32 %279, 31
  %303 = trunc i32 %302 to i8
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %303, i8* %304, align 1, !tbaa !2450
  %305 = lshr i32 %278, 31
  %306 = lshr i32 %274, 31
  %307 = xor i32 %302, %305
  %308 = xor i32 %302, %306
  %309 = add nuw nsw i32 %307, %308
  %310 = icmp eq i32 %309, 2
  %311 = zext i1 %310 to i8
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %311, i8* %312, align 1, !tbaa !2451
  %313 = load i64, i64* %RCX
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 3
  store i64 %315, i64* %PC
  %316 = and i64 %313, 4294967295
  %317 = shl i64 %316, 2
  %318 = trunc i64 %317 to i32
  %319 = icmp slt i32 %318, 0
  %320 = shl i32 %318, 1
  %321 = zext i32 %320 to i64
  store i64 %321, i64* %RCX, align 8, !tbaa !2428
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %323 = zext i1 %319 to i8
  store i8 %323, i8* %322, align 1, !tbaa !2432
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %325 = and i32 %320, 254
  %326 = call i32 @llvm.ctpop.i32(i32 %325) #16
  %327 = trunc i32 %326 to i8
  %328 = and i8 %327, 1
  %329 = xor i8 %328, 1
  store i8 %329, i8* %324, align 1, !tbaa !2432
  %330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %330, align 1, !tbaa !2432
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %332 = icmp eq i32 %320, 0
  %333 = zext i1 %332 to i8
  store i8 %333, i8* %331, align 1, !tbaa !2432
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %335 = lshr i32 %320, 31
  %336 = trunc i32 %335 to i8
  store i8 %336, i8* %334, align 1, !tbaa !2432
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %337, align 1, !tbaa !2432
  %338 = load i64, i64* %RAX
  %339 = load i32, i32* %ECX
  %340 = zext i32 %339 to i64
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 2
  store i64 %342, i64* %PC
  %343 = trunc i64 %338 to i32
  %344 = add i32 %339, %343
  %345 = zext i32 %344 to i64
  store i64 %345, i64* %RAX, align 8, !tbaa !2428
  %346 = icmp ult i32 %344, %343
  %347 = icmp ult i32 %344, %339
  %348 = or i1 %346, %347
  %349 = zext i1 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %349, i8* %350, align 1, !tbaa !2433
  %351 = and i32 %344, 255
  %352 = call i32 @llvm.ctpop.i32(i32 %351) #16
  %353 = trunc i32 %352 to i8
  %354 = and i8 %353, 1
  %355 = xor i8 %354, 1
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %355, i8* %356, align 1, !tbaa !2447
  %357 = xor i64 %340, %338
  %358 = trunc i64 %357 to i32
  %359 = xor i32 %358, %344
  %360 = lshr i32 %359, 4
  %361 = trunc i32 %360 to i8
  %362 = and i8 %361, 1
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %362, i8* %363, align 1, !tbaa !2448
  %364 = icmp eq i32 %344, 0
  %365 = zext i1 %364 to i8
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %365, i8* %366, align 1, !tbaa !2449
  %367 = lshr i32 %344, 31
  %368 = trunc i32 %367 to i8
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %368, i8* %369, align 1, !tbaa !2450
  %370 = lshr i32 %343, 31
  %371 = lshr i32 %339, 31
  %372 = xor i32 %367, %370
  %373 = xor i32 %367, %371
  %374 = add nuw nsw i32 %372, %373
  %375 = icmp eq i32 %374, 2
  %376 = zext i1 %375 to i8
  %377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %376, i8* %377, align 1, !tbaa !2451
  %378 = load i32, i32* %EAX
  %379 = zext i32 %378 to i64
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 3
  store i64 %381, i64* %PC
  %382 = shl i64 %379, 32
  %383 = ashr exact i64 %382, 32
  store i64 %383, i64* %RSI, align 8, !tbaa !2428
  %384 = load i64, i64* %RSI
  %385 = mul i64 %384, 4
  %386 = add i64 %385, add (i64 ptrtoint (%p_type* @p to i64), i64 14336)
  %387 = load i64, i64* %PC
  %388 = add i64 %387, 11
  store i64 %388, i64* %PC
  %389 = inttoptr i64 %386 to i32*
  store i32 1, i32* %389
  %390 = load i64, i64* %RBP
  %391 = sub i64 %390, 12
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 3
  store i64 %393, i64* %PC
  %394 = inttoptr i64 %391 to i32*
  %395 = load i32, i32* %394
  %396 = zext i32 %395 to i64
  store i64 %396, i64* %RAX, align 8, !tbaa !2428
  %397 = load i64, i64* %RAX
  %398 = load i64, i64* %PC
  %399 = add i64 %398, 3
  store i64 %399, i64* %PC
  %400 = trunc i64 %397 to i32
  %401 = add i32 1, %400
  %402 = zext i32 %401 to i64
  store i64 %402, i64* %RAX, align 8, !tbaa !2428
  %403 = icmp ult i32 %401, %400
  %404 = icmp ult i32 %401, 1
  %405 = or i1 %403, %404
  %406 = zext i1 %405 to i8
  %407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %406, i8* %407, align 1, !tbaa !2433
  %408 = and i32 %401, 255
  %409 = call i32 @llvm.ctpop.i32(i32 %408) #16
  %410 = trunc i32 %409 to i8
  %411 = and i8 %410, 1
  %412 = xor i8 %411, 1
  %413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %412, i8* %413, align 1, !tbaa !2447
  %414 = xor i64 1, %397
  %415 = trunc i64 %414 to i32
  %416 = xor i32 %415, %401
  %417 = lshr i32 %416, 4
  %418 = trunc i32 %417 to i8
  %419 = and i8 %418, 1
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %419, i8* %420, align 1, !tbaa !2448
  %421 = icmp eq i32 %401, 0
  %422 = zext i1 %421 to i8
  %423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %422, i8* %423, align 1, !tbaa !2449
  %424 = lshr i32 %401, 31
  %425 = trunc i32 %424 to i8
  %426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %425, i8* %426, align 1, !tbaa !2450
  %427 = lshr i32 %400, 31
  %428 = xor i32 %424, %427
  %429 = add nuw nsw i32 %428, %424
  %430 = icmp eq i32 %429, 2
  %431 = zext i1 %430 to i8
  %432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %431, i8* %432, align 1, !tbaa !2451
  %433 = load i64, i64* %RBP
  %434 = sub i64 %433, 12
  %435 = load i32, i32* %EAX
  %436 = zext i32 %435 to i64
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 3
  store i64 %438, i64* %PC
  %439 = inttoptr i64 %434 to i32*
  store i32 %435, i32* %439
  %440 = load i64, i64* %PC
  %441 = sub i64 %440, 52
  %442 = load i64, i64* %PC
  %443 = add i64 %442, 5
  store i64 %443, i64* %PC
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %441, i64* %444, align 8, !tbaa !2428
  br label %block_400de2

block_4011e8:                                     ; preds = %block_4011d4, %block_4011be
  %MEMORY.1 = phi %struct.Memory* [ %3315, %block_4011d4 ], [ %665, %block_4011be ]
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 7
  store i64 %446, i64* %PC
  %447 = load i32, i32* bitcast (%n_type* @n to i32*)
  %448 = zext i32 %447 to i64
  store i64 %448, i64* %RDI, align 8, !tbaa !2428
  %449 = load i64, i64* %PC
  %450 = sub i64 %449, 2687
  %451 = load i64, i64* %PC
  %452 = add i64 %451, 5
  %453 = load i64, i64* %PC
  %454 = add i64 %453, 5
  store i64 %454, i64* %PC
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %456 = load i64, i64* %455, align 8, !tbaa !2428
  %457 = add i64 %456, -8
  %458 = inttoptr i64 %457 to i64*
  store i64 %452, i64* %458
  store i64 %457, i64* %455, align 8, !tbaa !2428
  %459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %450, i64* %459, align 8, !tbaa !2428
  %460 = load i64, i64* %PC
  %461 = call %struct.Memory* @sub_400770_Trial_renamed_(%struct.State* %0, i64 %460, %struct.Memory* %MEMORY.1)
  %462 = load i32, i32* %EAX
  %463 = zext i32 %462 to i64
  %464 = load i64, i64* %PC
  %465 = add i64 %464, 3
  store i64 %465, i64* %PC
  %466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %466, align 1, !tbaa !2433
  %467 = and i32 %462, 255
  %468 = call i32 @llvm.ctpop.i32(i32 %467) #16
  %469 = trunc i32 %468 to i8
  %470 = and i8 %469, 1
  %471 = xor i8 %470, 1
  %472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %471, i8* %472, align 1, !tbaa !2447
  %473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %473, align 1, !tbaa !2448
  %474 = icmp eq i32 %462, 0
  %475 = zext i1 %474 to i8
  %476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %475, i8* %476, align 1, !tbaa !2449
  %477 = lshr i32 %462, 31
  %478 = trunc i32 %477 to i8
  %479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %478, i8* %479, align 1, !tbaa !2450
  %480 = lshr i32 %462, 31
  %481 = xor i32 %477, %480
  %482 = add nuw nsw i32 %481, %480
  %483 = icmp eq i32 %482, 2
  %484 = zext i1 %483 to i8
  %485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %484, i8* %485, align 1, !tbaa !2451
  %486 = load i64, i64* %PC
  %487 = add i64 %486, 31
  %488 = load i64, i64* %PC
  %489 = add i64 %488, 6
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 6
  store i64 %491, i64* %PC
  %492 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %493 = load i8, i8* %492, align 1, !tbaa !2449
  %494 = icmp eq i8 %493, 0
  %495 = zext i1 %494 to i8
  store i8 %495, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %497 = select i1 %494, i64 %487, i64 %489
  store i64 %497, i64* %496, align 8, !tbaa !2428
  %498 = load i8, i8* %BRANCH_TAKEN
  %499 = icmp eq i8 %498, 1
  %500 = load i64, i64* %PC
  br i1 %499, label %block_401216, label %block_4011fd

block_400be6:                                     ; preds = %block_400c54, %block_400bc9
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.8, %block_400bc9 ], [ %MEMORY.0, %block_400c54 ]
  %501 = load i64, i64* %RBP
  %502 = sub i64 %501, 4
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 4
  store i64 %504, i64* %PC
  %505 = inttoptr i64 %502 to i32*
  %506 = load i32, i32* %505
  %507 = sub i32 %506, 3
  %508 = icmp ult i32 %506, 3
  %509 = zext i1 %508 to i8
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %509, i8* %510, align 1, !tbaa !2433
  %511 = and i32 %507, 255
  %512 = call i32 @llvm.ctpop.i32(i32 %511) #16
  %513 = trunc i32 %512 to i8
  %514 = and i8 %513, 1
  %515 = xor i8 %514, 1
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %515, i8* %516, align 1, !tbaa !2447
  %517 = xor i32 %506, 3
  %518 = xor i32 %517, %507
  %519 = lshr i32 %518, 4
  %520 = trunc i32 %519 to i8
  %521 = and i8 %520, 1
  %522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %521, i8* %522, align 1, !tbaa !2448
  %523 = icmp eq i32 %507, 0
  %524 = zext i1 %523 to i8
  %525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %524, i8* %525, align 1, !tbaa !2449
  %526 = lshr i32 %507, 31
  %527 = trunc i32 %526 to i8
  %528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %527, i8* %528, align 1, !tbaa !2450
  %529 = lshr i32 %506, 31
  %530 = xor i32 %526, %529
  %531 = add nuw nsw i32 %530, %529
  %532 = icmp eq i32 %531, 2
  %533 = zext i1 %532 to i8
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %533, i8* %534, align 1, !tbaa !2451
  %535 = load i64, i64* %PC
  %536 = add i64 %535, 125
  %537 = load i64, i64* %PC
  %538 = add i64 %537, 6
  %539 = load i64, i64* %PC
  %540 = add i64 %539, 6
  store i64 %540, i64* %PC
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %542 = load i8, i8* %541, align 1, !tbaa !2449
  %543 = icmp eq i8 %542, 0
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %545 = load i8, i8* %544, align 1, !tbaa !2450
  %546 = icmp ne i8 %545, 0
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %548 = load i8, i8* %547, align 1, !tbaa !2451
  %549 = icmp ne i8 %548, 0
  %550 = xor i1 %546, %549
  %551 = xor i1 %550, true
  %552 = and i1 %543, %551
  %553 = zext i1 %552 to i8
  store i8 %553, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %555 = select i1 %552, i64 %536, i64 %538
  store i64 %555, i64* %554, align 8, !tbaa !2428
  %556 = load i8, i8* %BRANCH_TAKEN
  %557 = icmp eq i8 %556, 1
  br i1 %557, label %block_400c67, label %block_400bf0

block_4010a6:                                     ; preds = %block_401049
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 5
  %560 = load i64, i64* %PC
  %561 = add i64 %560, 5
  store i64 %561, i64* %PC
  %562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %559, i64* %562, align 8, !tbaa !2428
  %563 = load i64, i64* %RBP
  %564 = sub i64 %563, 4
  %565 = load i64, i64* %PC
  %566 = add i64 %565, 3
  store i64 %566, i64* %PC
  %567 = inttoptr i64 %564 to i32*
  %568 = load i32, i32* %567
  %569 = zext i32 %568 to i64
  store i64 %569, i64* %RAX, align 8, !tbaa !2428
  %570 = load i64, i64* %RAX
  %571 = load i64, i64* %PC
  %572 = add i64 %571, 3
  store i64 %572, i64* %PC
  %573 = trunc i64 %570 to i32
  %574 = add i32 1, %573
  %575 = zext i32 %574 to i64
  store i64 %575, i64* %RAX, align 8, !tbaa !2428
  %576 = icmp ult i32 %574, %573
  %577 = icmp ult i32 %574, 1
  %578 = or i1 %576, %577
  %579 = zext i1 %578 to i8
  %580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %579, i8* %580, align 1, !tbaa !2433
  %581 = and i32 %574, 255
  %582 = call i32 @llvm.ctpop.i32(i32 %581) #16
  %583 = trunc i32 %582 to i8
  %584 = and i8 %583, 1
  %585 = xor i8 %584, 1
  %586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %585, i8* %586, align 1, !tbaa !2447
  %587 = xor i64 1, %570
  %588 = trunc i64 %587 to i32
  %589 = xor i32 %588, %574
  %590 = lshr i32 %589, 4
  %591 = trunc i32 %590 to i8
  %592 = and i8 %591, 1
  %593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %592, i8* %593, align 1, !tbaa !2448
  %594 = icmp eq i32 %574, 0
  %595 = zext i1 %594 to i8
  %596 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %595, i8* %596, align 1, !tbaa !2449
  %597 = lshr i32 %574, 31
  %598 = trunc i32 %597 to i8
  %599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %598, i8* %599, align 1, !tbaa !2450
  %600 = lshr i32 %573, 31
  %601 = xor i32 %597, %600
  %602 = add nuw nsw i32 %601, %597
  %603 = icmp eq i32 %602, 2
  %604 = zext i1 %603 to i8
  %605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %604, i8* %605, align 1, !tbaa !2451
  %606 = load i64, i64* %RBP
  %607 = sub i64 %606, 4
  %608 = load i32, i32* %EAX
  %609 = zext i32 %608 to i64
  %610 = load i64, i64* %PC
  %611 = add i64 %610, 3
  store i64 %611, i64* %PC
  %612 = inttoptr i64 %607 to i32*
  store i32 %608, i32* %612
  %613 = load i64, i64* %PC
  %614 = sub i64 %613, 124
  %615 = load i64, i64* %PC
  %616 = add i64 %615, 5
  store i64 %616, i64* %PC
  %617 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %614, i64* %617, align 8, !tbaa !2428
  br label %block_401038

block_400ddb:                                     ; preds = %block_400dd1
  %618 = load i64, i64* %RBP
  %619 = sub i64 %618, 12
  %620 = load i64, i64* %PC
  %621 = add i64 %620, 7
  store i64 %621, i64* %PC
  %622 = inttoptr i64 %619 to i32*
  store i32 0, i32* %622
  br label %block_400de2

block_4011be:                                     ; preds = %block_401157
  %623 = load i64, i64* %RDI
  %624 = load i32, i32* %EDI
  %625 = zext i32 %624 to i64
  %626 = load i64, i64* %PC
  %627 = add i64 %626, 2
  store i64 %627, i64* %PC
  %628 = xor i64 %625, %623
  %629 = trunc i64 %628 to i32
  %630 = and i64 %628, 4294967295
  store i64 %630, i64* %RDI, align 8, !tbaa !2428
  %631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %631, align 1, !tbaa !2433
  %632 = and i32 %629, 255
  %633 = call i32 @llvm.ctpop.i32(i32 %632) #16
  %634 = trunc i32 %633 to i8
  %635 = and i8 %634, 1
  %636 = xor i8 %635, 1
  %637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %636, i8* %637, align 1, !tbaa !2447
  %638 = icmp eq i32 %629, 0
  %639 = zext i1 %638 to i8
  %640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %639, i8* %640, align 1, !tbaa !2449
  %641 = lshr i32 %629, 31
  %642 = trunc i32 %641 to i8
  %643 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %642, i8* %643, align 1, !tbaa !2450
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %644, align 1, !tbaa !2451
  %645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %645, align 1, !tbaa !2448
  %646 = load i64, i64* %RBP
  %647 = sub i64 %646, 16
  %648 = load i64, i64* %PC
  %649 = add i64 %648, 3
  store i64 %649, i64* %PC
  %650 = inttoptr i64 %647 to i32*
  %651 = load i32, i32* %650
  %652 = zext i32 %651 to i64
  store i64 %652, i64* %RSI, align 8, !tbaa !2428
  %653 = load i64, i64* %PC
  %654 = sub i64 %653, 3043
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 5
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 5
  store i64 %658, i64* %PC
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %660 = load i64, i64* %659, align 8, !tbaa !2428
  %661 = add i64 %660, -8
  %662 = inttoptr i64 %661 to i64*
  store i64 %656, i64* %662
  store i64 %661, i64* %659, align 8, !tbaa !2428
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %654, i64* %663, align 8, !tbaa !2428
  %664 = load i64, i64* %PC
  %665 = call %struct.Memory* @sub_4005e0_Place_renamed_(%struct.State* %0, i64 %664, %struct.Memory* %6779)
  %666 = load i32, i32* %EAX
  %667 = zext i32 %666 to i64
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 7
  store i64 %669, i64* %PC
  store i32 %666, i32* bitcast (%n_type* @n to i32*)
  %670 = load i64, i64* %PC
  %671 = add i64 %670, 25
  %672 = load i64, i64* %PC
  %673 = add i64 %672, 5
  store i64 %673, i64* %PC
  %674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %671, i64* %674, align 8, !tbaa !2428
  br label %block_4011e8

block_400da3:                                     ; preds = %block_400d22
  %675 = load i64, i64* %PC
  %676 = add i64 %675, 11
  store i64 %676, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 24) to i32*)
  %677 = load i64, i64* %PC
  %678 = add i64 %677, 11
  store i64 %678, i64* %PC
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 24) to i32*)
  %679 = load i64, i64* %RBP
  %680 = sub i64 %679, 4
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 7
  store i64 %682, i64* %PC
  %683 = inttoptr i64 %680 to i32*
  store i32 0, i32* %683
  br label %block_400dc0

block_400fbc:                                     ; preds = %block_400fb5, %block_400fc6
  %MEMORY.3 = phi %struct.Memory* [ %MEMORY.17, %block_400fb5 ], [ %MEMORY.3, %block_400fc6 ]
  %684 = load i64, i64* %RBP
  %685 = sub i64 %684, 12
  %686 = load i64, i64* %PC
  %687 = add i64 %686, 4
  store i64 %687, i64* %PC
  %688 = inttoptr i64 %685 to i32*
  %689 = load i32, i32* %688
  %690 = sub i32 %689, 1
  %691 = icmp ult i32 %689, 1
  %692 = zext i1 %691 to i8
  %693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %692, i8* %693, align 1, !tbaa !2433
  %694 = and i32 %690, 255
  %695 = call i32 @llvm.ctpop.i32(i32 %694) #16
  %696 = trunc i32 %695 to i8
  %697 = and i8 %696, 1
  %698 = xor i8 %697, 1
  %699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %698, i8* %699, align 1, !tbaa !2447
  %700 = xor i32 %689, 1
  %701 = xor i32 %700, %690
  %702 = lshr i32 %701, 4
  %703 = trunc i32 %702 to i8
  %704 = and i8 %703, 1
  %705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %704, i8* %705, align 1, !tbaa !2448
  %706 = icmp eq i32 %690, 0
  %707 = zext i1 %706 to i8
  %708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %707, i8* %708, align 1, !tbaa !2449
  %709 = lshr i32 %690, 31
  %710 = trunc i32 %709 to i8
  %711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %710, i8* %711, align 1, !tbaa !2450
  %712 = lshr i32 %689, 31
  %713 = xor i32 %709, %712
  %714 = add nuw nsw i32 %713, %712
  %715 = icmp eq i32 %714, 2
  %716 = zext i1 %715 to i8
  %717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %716, i8* %717, align 1, !tbaa !2451
  %718 = load i64, i64* %PC
  %719 = add i64 %718, 53
  %720 = load i64, i64* %PC
  %721 = add i64 %720, 6
  %722 = load i64, i64* %PC
  %723 = add i64 %722, 6
  store i64 %723, i64* %PC
  %724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %725 = load i8, i8* %724, align 1, !tbaa !2449
  %726 = icmp eq i8 %725, 0
  %727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %728 = load i8, i8* %727, align 1, !tbaa !2450
  %729 = icmp ne i8 %728, 0
  %730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %731 = load i8, i8* %730, align 1, !tbaa !2451
  %732 = icmp ne i8 %731, 0
  %733 = xor i1 %729, %732
  %734 = xor i1 %733, true
  %735 = and i1 %726, %734
  %736 = zext i1 %735 to i8
  store i8 %736, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %738 = select i1 %735, i64 %719, i64 %721
  store i64 %738, i64* %737, align 8, !tbaa !2428
  %739 = load i8, i8* %BRANCH_TAKEN
  %740 = icmp eq i8 %739, 1
  br i1 %740, label %block_400ff5, label %block_400fc6

block_400bb6:                                     ; preds = %block_400b59
  %741 = load i64, i64* %PC
  %742 = add i64 %741, 5
  %743 = load i64, i64* %PC
  %744 = add i64 %743, 5
  store i64 %744, i64* %PC
  %745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %742, i64* %745, align 8, !tbaa !2428
  %746 = load i64, i64* %RBP
  %747 = sub i64 %746, 4
  %748 = load i64, i64* %PC
  %749 = add i64 %748, 3
  store i64 %749, i64* %PC
  %750 = inttoptr i64 %747 to i32*
  %751 = load i32, i32* %750
  %752 = zext i32 %751 to i64
  store i64 %752, i64* %RAX, align 8, !tbaa !2428
  %753 = load i64, i64* %RAX
  %754 = load i64, i64* %PC
  %755 = add i64 %754, 3
  store i64 %755, i64* %PC
  %756 = trunc i64 %753 to i32
  %757 = add i32 1, %756
  %758 = zext i32 %757 to i64
  store i64 %758, i64* %RAX, align 8, !tbaa !2428
  %759 = icmp ult i32 %757, %756
  %760 = icmp ult i32 %757, 1
  %761 = or i1 %759, %760
  %762 = zext i1 %761 to i8
  %763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %762, i8* %763, align 1, !tbaa !2433
  %764 = and i32 %757, 255
  %765 = call i32 @llvm.ctpop.i32(i32 %764) #16
  %766 = trunc i32 %765 to i8
  %767 = and i8 %766, 1
  %768 = xor i8 %767, 1
  %769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %768, i8* %769, align 1, !tbaa !2447
  %770 = xor i64 1, %753
  %771 = trunc i64 %770 to i32
  %772 = xor i32 %771, %757
  %773 = lshr i32 %772, 4
  %774 = trunc i32 %773 to i8
  %775 = and i8 %774, 1
  %776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %775, i8* %776, align 1, !tbaa !2448
  %777 = icmp eq i32 %757, 0
  %778 = zext i1 %777 to i8
  %779 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %778, i8* %779, align 1, !tbaa !2449
  %780 = lshr i32 %757, 31
  %781 = trunc i32 %780 to i8
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %781, i8* %782, align 1, !tbaa !2450
  %783 = lshr i32 %756, 31
  %784 = xor i32 %780, %783
  %785 = add nuw nsw i32 %784, %780
  %786 = icmp eq i32 %785, 2
  %787 = zext i1 %786 to i8
  %788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %787, i8* %788, align 1, !tbaa !2451
  %789 = load i64, i64* %RBP
  %790 = sub i64 %789, 4
  %791 = load i32, i32* %EAX
  %792 = zext i32 %791 to i64
  %793 = load i64, i64* %PC
  %794 = add i64 %793, 3
  store i64 %794, i64* %PC
  %795 = inttoptr i64 %790 to i32*
  store i32 %791, i32* %795
  %796 = load i64, i64* %PC
  %797 = sub i64 %796, 124
  %798 = load i64, i64* %PC
  %799 = add i64 %798, 5
  store i64 %799, i64* %PC
  %800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %797, i64* %800, align 8, !tbaa !2428
  br label %block_400b48

block_4010d6:                                     ; preds = %block_4010b9, %block_401144
  %MEMORY.4 = phi %struct.Memory* [ %MEMORY.7, %block_4010b9 ], [ %MEMORY.44, %block_401144 ]
  %801 = load i64, i64* %RBP
  %802 = sub i64 %801, 4
  %803 = load i64, i64* %PC
  %804 = add i64 %803, 4
  store i64 %804, i64* %PC
  %805 = inttoptr i64 %802 to i32*
  %806 = load i32, i32* %805
  %807 = sub i32 %806, 1
  %808 = icmp ult i32 %806, 1
  %809 = zext i1 %808 to i8
  %810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %809, i8* %810, align 1, !tbaa !2433
  %811 = and i32 %807, 255
  %812 = call i32 @llvm.ctpop.i32(i32 %811) #16
  %813 = trunc i32 %812 to i8
  %814 = and i8 %813, 1
  %815 = xor i8 %814, 1
  %816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %815, i8* %816, align 1, !tbaa !2447
  %817 = xor i32 %806, 1
  %818 = xor i32 %817, %807
  %819 = lshr i32 %818, 4
  %820 = trunc i32 %819 to i8
  %821 = and i8 %820, 1
  %822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %821, i8* %822, align 1, !tbaa !2448
  %823 = icmp eq i32 %807, 0
  %824 = zext i1 %823 to i8
  %825 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %824, i8* %825, align 1, !tbaa !2449
  %826 = lshr i32 %807, 31
  %827 = trunc i32 %826 to i8
  %828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %827, i8* %828, align 1, !tbaa !2450
  %829 = lshr i32 %806, 31
  %830 = xor i32 %826, %829
  %831 = add nuw nsw i32 %830, %829
  %832 = icmp eq i32 %831, 2
  %833 = zext i1 %832 to i8
  %834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %833, i8* %834, align 1, !tbaa !2451
  %835 = load i64, i64* %PC
  %836 = add i64 %835, 125
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 6
  %839 = load i64, i64* %PC
  %840 = add i64 %839, 6
  store i64 %840, i64* %PC
  %841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %842 = load i8, i8* %841, align 1, !tbaa !2449
  %843 = icmp eq i8 %842, 0
  %844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %845 = load i8, i8* %844, align 1, !tbaa !2450
  %846 = icmp ne i8 %845, 0
  %847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %848 = load i8, i8* %847, align 1, !tbaa !2451
  %849 = icmp ne i8 %848, 0
  %850 = xor i1 %846, %849
  %851 = xor i1 %850, true
  %852 = and i1 %843, %851
  %853 = zext i1 %852 to i8
  store i8 %853, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %855 = select i1 %852, i64 %836, i64 %838
  store i64 %855, i64* %854, align 8, !tbaa !2428
  %856 = load i8, i8* %BRANCH_TAKEN
  %857 = icmp eq i8 %856, 1
  br i1 %857, label %block_401157, label %block_4010e0

block_400f9a:                                     ; preds = %block_401008, %block_400f7d
  %MEMORY.5 = phi %struct.Memory* [ %MEMORY.15, %block_400f7d ], [ %MEMORY.17, %block_401008 ]
  %858 = load i64, i64* %RBP
  %859 = sub i64 %858, 4
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 4
  store i64 %861, i64* %PC
  %862 = inttoptr i64 %859 to i32*
  %863 = load i32, i32* %862
  %864 = sub i32 %863, 1
  %865 = icmp ult i32 %863, 1
  %866 = zext i1 %865 to i8
  %867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %866, i8* %867, align 1, !tbaa !2433
  %868 = and i32 %864, 255
  %869 = call i32 @llvm.ctpop.i32(i32 %868) #16
  %870 = trunc i32 %869 to i8
  %871 = and i8 %870, 1
  %872 = xor i8 %871, 1
  %873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %872, i8* %873, align 1, !tbaa !2447
  %874 = xor i32 %863, 1
  %875 = xor i32 %874, %864
  %876 = lshr i32 %875, 4
  %877 = trunc i32 %876 to i8
  %878 = and i8 %877, 1
  %879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %878, i8* %879, align 1, !tbaa !2448
  %880 = icmp eq i32 %864, 0
  %881 = zext i1 %880 to i8
  %882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %881, i8* %882, align 1, !tbaa !2449
  %883 = lshr i32 %864, 31
  %884 = trunc i32 %883 to i8
  %885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %884, i8* %885, align 1, !tbaa !2450
  %886 = lshr i32 %863, 31
  %887 = xor i32 %883, %886
  %888 = add nuw nsw i32 %887, %886
  %889 = icmp eq i32 %888, 2
  %890 = zext i1 %889 to i8
  %891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %890, i8* %891, align 1, !tbaa !2451
  %892 = load i64, i64* %PC
  %893 = add i64 %892, 125
  %894 = load i64, i64* %PC
  %895 = add i64 %894, 6
  %896 = load i64, i64* %PC
  %897 = add i64 %896, 6
  store i64 %897, i64* %PC
  %898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %899 = load i8, i8* %898, align 1, !tbaa !2449
  %900 = icmp eq i8 %899, 0
  %901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %902 = load i8, i8* %901, align 1, !tbaa !2450
  %903 = icmp ne i8 %902, 0
  %904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %905 = load i8, i8* %904, align 1, !tbaa !2451
  %906 = icmp ne i8 %905, 0
  %907 = xor i1 %903, %906
  %908 = xor i1 %907, true
  %909 = and i1 %900, %908
  %910 = zext i1 %909 to i8
  store i8 %910, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %912 = select i1 %909, i64 %893, i64 %895
  store i64 %912, i64* %911, align 8, !tbaa !2428
  %913 = load i8, i8* %BRANCH_TAKEN
  %914 = icmp eq i8 %913, 1
  br i1 %914, label %block_40101b, label %block_400fa4

block_400d90:                                     ; preds = %block_400d33
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 5
  %917 = load i64, i64* %PC
  %918 = add i64 %917, 5
  store i64 %918, i64* %PC
  %919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %916, i64* %919, align 8, !tbaa !2428
  %920 = load i64, i64* %RBP
  %921 = sub i64 %920, 4
  %922 = load i64, i64* %PC
  %923 = add i64 %922, 3
  store i64 %923, i64* %PC
  %924 = inttoptr i64 %921 to i32*
  %925 = load i32, i32* %924
  %926 = zext i32 %925 to i64
  store i64 %926, i64* %RAX, align 8, !tbaa !2428
  %927 = load i64, i64* %RAX
  %928 = load i64, i64* %PC
  %929 = add i64 %928, 3
  store i64 %929, i64* %PC
  %930 = trunc i64 %927 to i32
  %931 = add i32 1, %930
  %932 = zext i32 %931 to i64
  store i64 %932, i64* %RAX, align 8, !tbaa !2428
  %933 = icmp ult i32 %931, %930
  %934 = icmp ult i32 %931, 1
  %935 = or i1 %933, %934
  %936 = zext i1 %935 to i8
  %937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %936, i8* %937, align 1, !tbaa !2433
  %938 = and i32 %931, 255
  %939 = call i32 @llvm.ctpop.i32(i32 %938) #16
  %940 = trunc i32 %939 to i8
  %941 = and i8 %940, 1
  %942 = xor i8 %941, 1
  %943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %942, i8* %943, align 1, !tbaa !2447
  %944 = xor i64 1, %927
  %945 = trunc i64 %944 to i32
  %946 = xor i32 %945, %931
  %947 = lshr i32 %946, 4
  %948 = trunc i32 %947 to i8
  %949 = and i8 %948, 1
  %950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %949, i8* %950, align 1, !tbaa !2448
  %951 = icmp eq i32 %931, 0
  %952 = zext i1 %951 to i8
  %953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %952, i8* %953, align 1, !tbaa !2449
  %954 = lshr i32 %931, 31
  %955 = trunc i32 %954 to i8
  %956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %955, i8* %956, align 1, !tbaa !2450
  %957 = lshr i32 %930, 31
  %958 = xor i32 %954, %957
  %959 = add nuw nsw i32 %958, %954
  %960 = icmp eq i32 %959, 2
  %961 = zext i1 %960 to i8
  %962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %961, i8* %962, align 1, !tbaa !2451
  %963 = load i64, i64* %RBP
  %964 = sub i64 %963, 4
  %965 = load i32, i32* %EAX
  %966 = zext i32 %965 to i64
  %967 = load i64, i64* %PC
  %968 = add i64 %967, 3
  store i64 %968, i64* %PC
  %969 = inttoptr i64 %964 to i32*
  store i32 %965, i32* %969
  %970 = load i64, i64* %PC
  %971 = sub i64 %970, 124
  %972 = load i64, i64* %PC
  %973 = add i64 %972, 5
  store i64 %973, i64* %PC
  %974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %971, i64* %974, align 8, !tbaa !2428
  br label %block_400d22

block_400989:                                     ; preds = %block_40097f
  %975 = load i64, i64* %RBP
  %976 = sub i64 %975, 12
  %977 = load i64, i64* %PC
  %978 = add i64 %977, 7
  store i64 %978, i64* %PC
  %979 = inttoptr i64 %976 to i32*
  store i32 0, i32* %979
  br label %block_400990

block_4009dc:                                     ; preds = %block_40097f
  %980 = load i64, i64* %PC
  %981 = add i64 %980, 5
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 5
  store i64 %983, i64* %PC
  %984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %981, i64* %984, align 8, !tbaa !2428
  %985 = load i64, i64* %RBP
  %986 = sub i64 %985, 4
  %987 = load i64, i64* %PC
  %988 = add i64 %987, 3
  store i64 %988, i64* %PC
  %989 = inttoptr i64 %986 to i32*
  %990 = load i32, i32* %989
  %991 = zext i32 %990 to i64
  store i64 %991, i64* %RAX, align 8, !tbaa !2428
  %992 = load i64, i64* %RAX
  %993 = load i64, i64* %PC
  %994 = add i64 %993, 3
  store i64 %994, i64* %PC
  %995 = trunc i64 %992 to i32
  %996 = add i32 1, %995
  %997 = zext i32 %996 to i64
  store i64 %997, i64* %RAX, align 8, !tbaa !2428
  %998 = icmp ult i32 %996, %995
  %999 = icmp ult i32 %996, 1
  %1000 = or i1 %998, %999
  %1001 = zext i1 %1000 to i8
  %1002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1001, i8* %1002, align 1, !tbaa !2433
  %1003 = and i32 %996, 255
  %1004 = call i32 @llvm.ctpop.i32(i32 %1003) #16
  %1005 = trunc i32 %1004 to i8
  %1006 = and i8 %1005, 1
  %1007 = xor i8 %1006, 1
  %1008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1007, i8* %1008, align 1, !tbaa !2447
  %1009 = xor i64 1, %992
  %1010 = trunc i64 %1009 to i32
  %1011 = xor i32 %1010, %996
  %1012 = lshr i32 %1011, 4
  %1013 = trunc i32 %1012 to i8
  %1014 = and i8 %1013, 1
  %1015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1014, i8* %1015, align 1, !tbaa !2448
  %1016 = icmp eq i32 %996, 0
  %1017 = zext i1 %1016 to i8
  %1018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1017, i8* %1018, align 1, !tbaa !2449
  %1019 = lshr i32 %996, 31
  %1020 = trunc i32 %1019 to i8
  %1021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1020, i8* %1021, align 1, !tbaa !2450
  %1022 = lshr i32 %995, 31
  %1023 = xor i32 %1019, %1022
  %1024 = add nuw nsw i32 %1023, %1019
  %1025 = icmp eq i32 %1024, 2
  %1026 = zext i1 %1025 to i8
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1026, i8* %1027, align 1, !tbaa !2451
  %1028 = load i64, i64* %RBP
  %1029 = sub i64 %1028, 4
  %1030 = load i32, i32* %EAX
  %1031 = zext i32 %1030 to i64
  %1032 = load i64, i64* %PC
  %1033 = add i64 %1032, 3
  store i64 %1033, i64* %PC
  %1034 = inttoptr i64 %1029 to i32*
  store i32 %1030, i32* %1034
  %1035 = load i64, i64* %PC
  %1036 = sub i64 %1035, 124
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 5
  store i64 %1038, i64* %PC
  %1039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1036, i64* %1039, align 8, !tbaa !2428
  br label %block_40096e

block_401240:                                     ; preds = %block_40123b, %block_4011fd
  %MEMORY.6 = phi %struct.Memory* [ %MEMORY.40, %block_40123b ], [ %105, %block_4011fd ]
  %1040 = load i64, i64* %PC
  %1041 = add i64 %1040, 10
  store i64 %1041, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401340__rodata_type* @seg_401340__rodata to i64), i64 60), i64* %RDI, align 8, !tbaa !2428
  %1042 = load i64, i64* %PC
  %1043 = add i64 %1042, 7
  store i64 %1043, i64* %PC
  %1044 = load i32, i32* bitcast (%n_type* @n to i32*)
  %1045 = zext i32 %1044 to i64
  store i64 %1045, i64* %RSI, align 8, !tbaa !2428
  %1046 = load i64, i64* %PC
  %1047 = add i64 %1046, 2
  store i64 %1047, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %1048 = load i64, i64* %PC
  %1049 = sub i64 %1048, 3683
  %1050 = load i64, i64* %PC
  %1051 = add i64 %1050, 5
  %1052 = load i64, i64* %PC
  %1053 = add i64 %1052, 5
  store i64 %1053, i64* %PC
  %1054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1055 = load i64, i64* %1054, align 8, !tbaa !2428
  %1056 = add i64 %1055, -8
  %1057 = inttoptr i64 %1056 to i64*
  store i64 %1051, i64* %1057
  store i64 %1056, i64* %1054, align 8, !tbaa !2428
  %1058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1049, i64* %1058, align 8, !tbaa !2428
  %1059 = load i64, i64* %PC
  %1060 = call %struct.Memory* @ext_619238_printf(%struct.State* %0, i64 %1059, %struct.Memory* %MEMORY.6)
  %1061 = load i64, i64* %PC
  %1062 = add i64 %1061, 10
  store i64 %1062, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401340__rodata_type* @seg_401340__rodata to i64), i64 60), i64* %RDI, align 8, !tbaa !2428
  %1063 = load i64, i64* %PC
  %1064 = add i64 %1063, 7
  store i64 %1064, i64* %PC
  %1065 = load i32, i32* bitcast (%kount_type* @kount to i32*)
  %1066 = zext i32 %1065 to i64
  store i64 %1066, i64* %RSI, align 8, !tbaa !2428
  %1067 = load i64, i64* %RBP
  %1068 = sub i64 %1067, 32
  %1069 = load i32, i32* %EAX
  %1070 = zext i32 %1069 to i64
  %1071 = load i64, i64* %PC
  %1072 = add i64 %1071, 3
  store i64 %1072, i64* %PC
  %1073 = inttoptr i64 %1068 to i32*
  store i32 %1069, i32* %1073
  %1074 = load i64, i64* %PC
  %1075 = add i64 %1074, 2
  store i64 %1075, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %1076 = load i64, i64* %PC
  %1077 = sub i64 %1076, 3710
  %1078 = load i64, i64* %PC
  %1079 = add i64 %1078, 5
  %1080 = load i64, i64* %PC
  %1081 = add i64 %1080, 5
  store i64 %1081, i64* %PC
  %1082 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1083 = load i64, i64* %1082, align 8, !tbaa !2428
  %1084 = add i64 %1083, -8
  %1085 = inttoptr i64 %1084 to i64*
  store i64 %1079, i64* %1085
  store i64 %1084, i64* %1082, align 8, !tbaa !2428
  %1086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1077, i64* %1086, align 8, !tbaa !2428
  %1087 = load i64, i64* %PC
  %1088 = call %struct.Memory* @ext_619238_printf(%struct.State* %0, i64 %1087, %struct.Memory* %1060)
  %1089 = load i64, i64* %RBP
  %1090 = sub i64 %1089, 36
  %1091 = load i32, i32* %EAX
  %1092 = zext i32 %1091 to i64
  %1093 = load i64, i64* %PC
  %1094 = add i64 %1093, 3
  store i64 %1094, i64* %PC
  %1095 = inttoptr i64 %1090 to i32*
  store i32 %1091, i32* %1095
  %1096 = load i64, i64* %RSP
  %1097 = load i64, i64* %PC
  %1098 = add i64 %1097, 4
  store i64 %1098, i64* %PC
  %1099 = add i64 48, %1096
  store i64 %1099, i64* %RSP, align 8, !tbaa !2428
  %1100 = icmp ult i64 %1099, %1096
  %1101 = icmp ult i64 %1099, 48
  %1102 = or i1 %1100, %1101
  %1103 = zext i1 %1102 to i8
  %1104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1103, i8* %1104, align 1, !tbaa !2433
  %1105 = trunc i64 %1099 to i32
  %1106 = and i32 %1105, 255
  %1107 = call i32 @llvm.ctpop.i32(i32 %1106) #16
  %1108 = trunc i32 %1107 to i8
  %1109 = and i8 %1108, 1
  %1110 = xor i8 %1109, 1
  %1111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1110, i8* %1111, align 1, !tbaa !2447
  %1112 = xor i64 48, %1096
  %1113 = xor i64 %1112, %1099
  %1114 = lshr i64 %1113, 4
  %1115 = trunc i64 %1114 to i8
  %1116 = and i8 %1115, 1
  %1117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1116, i8* %1117, align 1, !tbaa !2448
  %1118 = icmp eq i64 %1099, 0
  %1119 = zext i1 %1118 to i8
  %1120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1119, i8* %1120, align 1, !tbaa !2449
  %1121 = lshr i64 %1099, 63
  %1122 = trunc i64 %1121 to i8
  %1123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1122, i8* %1123, align 1, !tbaa !2450
  %1124 = lshr i64 %1096, 63
  %1125 = xor i64 %1121, %1124
  %1126 = add nuw nsw i64 %1125, %1121
  %1127 = icmp eq i64 %1126, 2
  %1128 = zext i1 %1127 to i8
  %1129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1128, i8* %1129, align 1, !tbaa !2451
  %1130 = load i64, i64* %PC
  %1131 = add i64 %1130, 1
  store i64 %1131, i64* %PC
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1133 = load i64, i64* %1132, align 8, !tbaa !2428
  %1134 = add i64 %1133, 8
  %1135 = inttoptr i64 %1133 to i64*
  %1136 = load i64, i64* %1135
  store i64 %1136, i64* %RBP, align 8, !tbaa !2428
  store i64 %1134, i64* %1132, align 8, !tbaa !2428
  %1137 = load i64, i64* %PC
  %1138 = add i64 %1137, 1
  store i64 %1138, i64* %PC
  %1139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1141 = load i64, i64* %1140, align 8, !tbaa !2428
  %1142 = inttoptr i64 %1141 to i64*
  %1143 = load i64, i64* %1142
  store i64 %1143, i64* %1139, align 8, !tbaa !2428
  %1144 = add i64 %1141, 8
  store i64 %1144, i64* %1140, align 8, !tbaa !2428
  ret %struct.Memory* %1088

block_400f7d:                                     ; preds = %block_400efc
  %1145 = load i64, i64* %PC
  %1146 = add i64 %1145, 11
  store i64 %1146, i64* %PC
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 36) to i32*)
  %1147 = load i64, i64* %PC
  %1148 = add i64 %1147, 11
  store i64 %1148, i64* %PC
  store i32 9, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 36) to i32*)
  %1149 = load i64, i64* %RBP
  %1150 = sub i64 %1149, 4
  %1151 = load i64, i64* %PC
  %1152 = add i64 %1151, 7
  store i64 %1152, i64* %PC
  %1153 = inttoptr i64 %1150 to i32*
  store i32 0, i32* %1153
  br label %block_400f9a

block_400b74:                                     ; preds = %block_400b6a
  %1154 = load i64, i64* %RBP
  %1155 = sub i64 %1154, 4
  %1156 = load i64, i64* %PC
  %1157 = add i64 %1156, 3
  store i64 %1157, i64* %PC
  %1158 = inttoptr i64 %1155 to i32*
  %1159 = load i32, i32* %1158
  %1160 = zext i32 %1159 to i64
  store i64 %1160, i64* %RAX, align 8, !tbaa !2428
  %1161 = load i64, i64* %RBP
  %1162 = sub i64 %1161, 8
  %1163 = load i64, i64* %PC
  %1164 = add i64 %1163, 3
  store i64 %1164, i64* %PC
  %1165 = inttoptr i64 %1162 to i32*
  %1166 = load i32, i32* %1165
  %1167 = zext i32 %1166 to i64
  store i64 %1167, i64* %RCX, align 8, !tbaa !2428
  %1168 = load i64, i64* %RBP
  %1169 = sub i64 %1168, 12
  %1170 = load i64, i64* %PC
  %1171 = add i64 %1170, 3
  store i64 %1171, i64* %PC
  %1172 = inttoptr i64 %1169 to i32*
  %1173 = load i32, i32* %1172
  %1174 = zext i32 %1173 to i64
  store i64 %1174, i64* %RDX, align 8, !tbaa !2428
  %1175 = load i64, i64* %RDX
  %1176 = load i64, i64* %PC
  %1177 = add i64 %1176, 3
  store i64 %1177, i64* %PC
  %1178 = and i64 %1175, 4294967295
  %1179 = shl i64 %1178, 2
  %1180 = trunc i64 %1179 to i32
  %1181 = icmp slt i32 %1180, 0
  %1182 = shl i32 %1180, 1
  %1183 = zext i32 %1182 to i64
  store i64 %1183, i64* %RDX, align 8, !tbaa !2428
  %1184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1185 = zext i1 %1181 to i8
  store i8 %1185, i8* %1184, align 1, !tbaa !2432
  %1186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1187 = and i32 %1182, 254
  %1188 = call i32 @llvm.ctpop.i32(i32 %1187) #16
  %1189 = trunc i32 %1188 to i8
  %1190 = and i8 %1189, 1
  %1191 = xor i8 %1190, 1
  store i8 %1191, i8* %1186, align 1, !tbaa !2432
  %1192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1192, align 1, !tbaa !2432
  %1193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1194 = icmp eq i32 %1182, 0
  %1195 = zext i1 %1194 to i8
  store i8 %1195, i8* %1193, align 1, !tbaa !2432
  %1196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1197 = lshr i32 %1182, 31
  %1198 = trunc i32 %1197 to i8
  store i8 %1198, i8* %1196, align 1, !tbaa !2432
  %1199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1199, align 1, !tbaa !2432
  %1200 = load i64, i64* %RCX
  %1201 = load i32, i32* %EDX
  %1202 = zext i32 %1201 to i64
  %1203 = load i64, i64* %PC
  %1204 = add i64 %1203, 2
  store i64 %1204, i64* %PC
  %1205 = trunc i64 %1200 to i32
  %1206 = add i32 %1201, %1205
  %1207 = zext i32 %1206 to i64
  store i64 %1207, i64* %RCX, align 8, !tbaa !2428
  %1208 = icmp ult i32 %1206, %1205
  %1209 = icmp ult i32 %1206, %1201
  %1210 = or i1 %1208, %1209
  %1211 = zext i1 %1210 to i8
  %1212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1211, i8* %1212, align 1, !tbaa !2433
  %1213 = and i32 %1206, 255
  %1214 = call i32 @llvm.ctpop.i32(i32 %1213) #16
  %1215 = trunc i32 %1214 to i8
  %1216 = and i8 %1215, 1
  %1217 = xor i8 %1216, 1
  %1218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1217, i8* %1218, align 1, !tbaa !2447
  %1219 = xor i64 %1202, %1200
  %1220 = trunc i64 %1219 to i32
  %1221 = xor i32 %1220, %1206
  %1222 = lshr i32 %1221, 4
  %1223 = trunc i32 %1222 to i8
  %1224 = and i8 %1223, 1
  %1225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1224, i8* %1225, align 1, !tbaa !2448
  %1226 = icmp eq i32 %1206, 0
  %1227 = zext i1 %1226 to i8
  %1228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1227, i8* %1228, align 1, !tbaa !2449
  %1229 = lshr i32 %1206, 31
  %1230 = trunc i32 %1229 to i8
  %1231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1230, i8* %1231, align 1, !tbaa !2450
  %1232 = lshr i32 %1205, 31
  %1233 = lshr i32 %1201, 31
  %1234 = xor i32 %1229, %1232
  %1235 = xor i32 %1229, %1233
  %1236 = add nuw nsw i32 %1234, %1235
  %1237 = icmp eq i32 %1236, 2
  %1238 = zext i1 %1237 to i8
  %1239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1238, i8* %1239, align 1, !tbaa !2451
  %1240 = load i64, i64* %RCX
  %1241 = load i64, i64* %PC
  %1242 = add i64 %1241, 3
  store i64 %1242, i64* %PC
  %1243 = and i64 %1240, 4294967295
  %1244 = shl i64 %1243, 2
  %1245 = trunc i64 %1244 to i32
  %1246 = icmp slt i32 %1245, 0
  %1247 = shl i32 %1245, 1
  %1248 = zext i32 %1247 to i64
  store i64 %1248, i64* %RCX, align 8, !tbaa !2428
  %1249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1250 = zext i1 %1246 to i8
  store i8 %1250, i8* %1249, align 1, !tbaa !2432
  %1251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1252 = and i32 %1247, 254
  %1253 = call i32 @llvm.ctpop.i32(i32 %1252) #16
  %1254 = trunc i32 %1253 to i8
  %1255 = and i8 %1254, 1
  %1256 = xor i8 %1255, 1
  store i8 %1256, i8* %1251, align 1, !tbaa !2432
  %1257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1257, align 1, !tbaa !2432
  %1258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1259 = icmp eq i32 %1247, 0
  %1260 = zext i1 %1259 to i8
  store i8 %1260, i8* %1258, align 1, !tbaa !2432
  %1261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1262 = lshr i32 %1247, 31
  %1263 = trunc i32 %1262 to i8
  store i8 %1263, i8* %1261, align 1, !tbaa !2432
  %1264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1264, align 1, !tbaa !2432
  %1265 = load i64, i64* %RAX
  %1266 = load i32, i32* %ECX
  %1267 = zext i32 %1266 to i64
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 2
  store i64 %1269, i64* %PC
  %1270 = trunc i64 %1265 to i32
  %1271 = add i32 %1266, %1270
  %1272 = zext i32 %1271 to i64
  store i64 %1272, i64* %RAX, align 8, !tbaa !2428
  %1273 = icmp ult i32 %1271, %1270
  %1274 = icmp ult i32 %1271, %1266
  %1275 = or i1 %1273, %1274
  %1276 = zext i1 %1275 to i8
  %1277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1276, i8* %1277, align 1, !tbaa !2433
  %1278 = and i32 %1271, 255
  %1279 = call i32 @llvm.ctpop.i32(i32 %1278) #16
  %1280 = trunc i32 %1279 to i8
  %1281 = and i8 %1280, 1
  %1282 = xor i8 %1281, 1
  %1283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1282, i8* %1283, align 1, !tbaa !2447
  %1284 = xor i64 %1267, %1265
  %1285 = trunc i64 %1284 to i32
  %1286 = xor i32 %1285, %1271
  %1287 = lshr i32 %1286, 4
  %1288 = trunc i32 %1287 to i8
  %1289 = and i8 %1288, 1
  %1290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1289, i8* %1290, align 1, !tbaa !2448
  %1291 = icmp eq i32 %1271, 0
  %1292 = zext i1 %1291 to i8
  %1293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1292, i8* %1293, align 1, !tbaa !2449
  %1294 = lshr i32 %1271, 31
  %1295 = trunc i32 %1294 to i8
  %1296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1295, i8* %1296, align 1, !tbaa !2450
  %1297 = lshr i32 %1270, 31
  %1298 = lshr i32 %1266, 31
  %1299 = xor i32 %1294, %1297
  %1300 = xor i32 %1294, %1298
  %1301 = add nuw nsw i32 %1299, %1300
  %1302 = icmp eq i32 %1301, 2
  %1303 = zext i1 %1302 to i8
  %1304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1303, i8* %1304, align 1, !tbaa !2451
  %1305 = load i32, i32* %EAX
  %1306 = zext i32 %1305 to i64
  %1307 = load i64, i64* %PC
  %1308 = add i64 %1307, 3
  store i64 %1308, i64* %PC
  %1309 = shl i64 %1306, 32
  %1310 = ashr exact i64 %1309, 32
  store i64 %1310, i64* %RSI, align 8, !tbaa !2428
  %1311 = load i64, i64* %RSI
  %1312 = mul i64 %1311, 4
  %1313 = add i64 %1312, add (i64 ptrtoint (%p_type* @p to i64), i64 6144)
  %1314 = load i64, i64* %PC
  %1315 = add i64 %1314, 11
  store i64 %1315, i64* %PC
  %1316 = inttoptr i64 %1313 to i32*
  store i32 1, i32* %1316
  %1317 = load i64, i64* %RBP
  %1318 = sub i64 %1317, 12
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 3
  store i64 %1320, i64* %PC
  %1321 = inttoptr i64 %1318 to i32*
  %1322 = load i32, i32* %1321
  %1323 = zext i32 %1322 to i64
  store i64 %1323, i64* %RAX, align 8, !tbaa !2428
  %1324 = load i64, i64* %RAX
  %1325 = load i64, i64* %PC
  %1326 = add i64 %1325, 3
  store i64 %1326, i64* %PC
  %1327 = trunc i64 %1324 to i32
  %1328 = add i32 1, %1327
  %1329 = zext i32 %1328 to i64
  store i64 %1329, i64* %RAX, align 8, !tbaa !2428
  %1330 = icmp ult i32 %1328, %1327
  %1331 = icmp ult i32 %1328, 1
  %1332 = or i1 %1330, %1331
  %1333 = zext i1 %1332 to i8
  %1334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1333, i8* %1334, align 1, !tbaa !2433
  %1335 = and i32 %1328, 255
  %1336 = call i32 @llvm.ctpop.i32(i32 %1335) #16
  %1337 = trunc i32 %1336 to i8
  %1338 = and i8 %1337, 1
  %1339 = xor i8 %1338, 1
  %1340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1339, i8* %1340, align 1, !tbaa !2447
  %1341 = xor i64 1, %1324
  %1342 = trunc i64 %1341 to i32
  %1343 = xor i32 %1342, %1328
  %1344 = lshr i32 %1343, 4
  %1345 = trunc i32 %1344 to i8
  %1346 = and i8 %1345, 1
  %1347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1346, i8* %1347, align 1, !tbaa !2448
  %1348 = icmp eq i32 %1328, 0
  %1349 = zext i1 %1348 to i8
  %1350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1349, i8* %1350, align 1, !tbaa !2449
  %1351 = lshr i32 %1328, 31
  %1352 = trunc i32 %1351 to i8
  %1353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1352, i8* %1353, align 1, !tbaa !2450
  %1354 = lshr i32 %1327, 31
  %1355 = xor i32 %1351, %1354
  %1356 = add nuw nsw i32 %1355, %1351
  %1357 = icmp eq i32 %1356, 2
  %1358 = zext i1 %1357 to i8
  %1359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1358, i8* %1359, align 1, !tbaa !2451
  %1360 = load i64, i64* %RBP
  %1361 = sub i64 %1360, 12
  %1362 = load i32, i32* %EAX
  %1363 = zext i32 %1362 to i64
  %1364 = load i64, i64* %PC
  %1365 = add i64 %1364, 3
  store i64 %1365, i64* %PC
  %1366 = inttoptr i64 %1361 to i32*
  store i32 %1362, i32* %1366
  %1367 = load i64, i64* %PC
  %1368 = sub i64 %1367, 52
  %1369 = load i64, i64* %PC
  %1370 = add i64 %1369, 5
  store i64 %1370, i64* %PC
  %1371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1368, i64* %1371, align 8, !tbaa !2428
  br label %block_400b6a

block_400f6a:                                     ; preds = %block_400f0d
  %1372 = load i64, i64* %PC
  %1373 = add i64 %1372, 5
  %1374 = load i64, i64* %PC
  %1375 = add i64 %1374, 5
  store i64 %1375, i64* %PC
  %1376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1373, i64* %1376, align 8, !tbaa !2428
  %1377 = load i64, i64* %RBP
  %1378 = sub i64 %1377, 4
  %1379 = load i64, i64* %PC
  %1380 = add i64 %1379, 3
  store i64 %1380, i64* %PC
  %1381 = inttoptr i64 %1378 to i32*
  %1382 = load i32, i32* %1381
  %1383 = zext i32 %1382 to i64
  store i64 %1383, i64* %RAX, align 8, !tbaa !2428
  %1384 = load i64, i64* %RAX
  %1385 = load i64, i64* %PC
  %1386 = add i64 %1385, 3
  store i64 %1386, i64* %PC
  %1387 = trunc i64 %1384 to i32
  %1388 = add i32 1, %1387
  %1389 = zext i32 %1388 to i64
  store i64 %1389, i64* %RAX, align 8, !tbaa !2428
  %1390 = icmp ult i32 %1388, %1387
  %1391 = icmp ult i32 %1388, 1
  %1392 = or i1 %1390, %1391
  %1393 = zext i1 %1392 to i8
  %1394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1393, i8* %1394, align 1, !tbaa !2433
  %1395 = and i32 %1388, 255
  %1396 = call i32 @llvm.ctpop.i32(i32 %1395) #16
  %1397 = trunc i32 %1396 to i8
  %1398 = and i8 %1397, 1
  %1399 = xor i8 %1398, 1
  %1400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1399, i8* %1400, align 1, !tbaa !2447
  %1401 = xor i64 1, %1384
  %1402 = trunc i64 %1401 to i32
  %1403 = xor i32 %1402, %1388
  %1404 = lshr i32 %1403, 4
  %1405 = trunc i32 %1404 to i8
  %1406 = and i8 %1405, 1
  %1407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1406, i8* %1407, align 1, !tbaa !2448
  %1408 = icmp eq i32 %1388, 0
  %1409 = zext i1 %1408 to i8
  %1410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1409, i8* %1410, align 1, !tbaa !2449
  %1411 = lshr i32 %1388, 31
  %1412 = trunc i32 %1411 to i8
  %1413 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1412, i8* %1413, align 1, !tbaa !2450
  %1414 = lshr i32 %1387, 31
  %1415 = xor i32 %1411, %1414
  %1416 = add nuw nsw i32 %1415, %1411
  %1417 = icmp eq i32 %1416, 2
  %1418 = zext i1 %1417 to i8
  %1419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1418, i8* %1419, align 1, !tbaa !2451
  %1420 = load i64, i64* %RBP
  %1421 = sub i64 %1420, 4
  %1422 = load i32, i32* %EAX
  %1423 = zext i32 %1422 to i64
  %1424 = load i64, i64* %PC
  %1425 = add i64 %1424, 3
  store i64 %1425, i64* %PC
  %1426 = inttoptr i64 %1421 to i32*
  store i32 %1422, i32* %1426
  %1427 = load i64, i64* %PC
  %1428 = sub i64 %1427, 124
  %1429 = load i64, i64* %PC
  %1430 = add i64 %1429, 5
  store i64 %1430, i64* %PC
  %1431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1428, i64* %1431, align 8, !tbaa !2428
  br label %block_400efc

block_400967:                                     ; preds = %block_400908
  %1432 = sub i64 %6126, 4
  %1433 = load i64, i64* %PC
  %1434 = add i64 %1433, 7
  store i64 %1434, i64* %PC
  %1435 = inttoptr i64 %1432 to i32*
  store i32 0, i32* %1435
  br label %block_40096e

block_400b63:                                     ; preds = %block_400b59
  %1436 = load i64, i64* %RBP
  %1437 = sub i64 %1436, 12
  %1438 = load i64, i64* %PC
  %1439 = add i64 %1438, 7
  store i64 %1439, i64* %PC
  %1440 = inttoptr i64 %1437 to i32*
  store i32 0, i32* %1440
  br label %block_400b6a

block_400954:                                     ; preds = %block_400919
  %1441 = add i64 %5053, 5
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 5
  store i64 %1443, i64* %PC
  %1444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1441, i64* %1444, align 8, !tbaa !2428
  %1445 = load i64, i64* %RBP
  %1446 = sub i64 %1445, 4
  %1447 = load i64, i64* %PC
  %1448 = add i64 %1447, 3
  store i64 %1448, i64* %PC
  %1449 = inttoptr i64 %1446 to i32*
  %1450 = load i32, i32* %1449
  %1451 = zext i32 %1450 to i64
  store i64 %1451, i64* %RAX, align 8, !tbaa !2428
  %1452 = load i64, i64* %RAX
  %1453 = load i64, i64* %PC
  %1454 = add i64 %1453, 3
  store i64 %1454, i64* %PC
  %1455 = trunc i64 %1452 to i32
  %1456 = add i32 1, %1455
  %1457 = zext i32 %1456 to i64
  store i64 %1457, i64* %RAX, align 8, !tbaa !2428
  %1458 = icmp ult i32 %1456, %1455
  %1459 = icmp ult i32 %1456, 1
  %1460 = or i1 %1458, %1459
  %1461 = zext i1 %1460 to i8
  %1462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1461, i8* %1462, align 1, !tbaa !2433
  %1463 = and i32 %1456, 255
  %1464 = call i32 @llvm.ctpop.i32(i32 %1463) #16
  %1465 = trunc i32 %1464 to i8
  %1466 = and i8 %1465, 1
  %1467 = xor i8 %1466, 1
  %1468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1467, i8* %1468, align 1, !tbaa !2447
  %1469 = xor i64 1, %1452
  %1470 = trunc i64 %1469 to i32
  %1471 = xor i32 %1470, %1456
  %1472 = lshr i32 %1471, 4
  %1473 = trunc i32 %1472 to i8
  %1474 = and i8 %1473, 1
  %1475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1474, i8* %1475, align 1, !tbaa !2448
  %1476 = icmp eq i32 %1456, 0
  %1477 = zext i1 %1476 to i8
  %1478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1477, i8* %1478, align 1, !tbaa !2449
  %1479 = lshr i32 %1456, 31
  %1480 = trunc i32 %1479 to i8
  %1481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1480, i8* %1481, align 1, !tbaa !2450
  %1482 = lshr i32 %1455, 31
  %1483 = xor i32 %1479, %1482
  %1484 = add nuw nsw i32 %1483, %1479
  %1485 = icmp eq i32 %1484, 2
  %1486 = zext i1 %1485 to i8
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1486, i8* %1487, align 1, !tbaa !2451
  %1488 = load i64, i64* %RBP
  %1489 = sub i64 %1488, 4
  %1490 = load i32, i32* %EAX
  %1491 = zext i32 %1490 to i64
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 3
  store i64 %1493, i64* %PC
  %1494 = inttoptr i64 %1489 to i32*
  store i32 %1490, i32* %1494
  %1495 = load i64, i64* %PC
  %1496 = sub i64 %1495, 90
  %1497 = load i64, i64* %PC
  %1498 = add i64 %1497, 5
  store i64 %1498, i64* %PC
  %1499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1496, i64* %1499, align 8, !tbaa !2428
  br label %block_400908

block_401038:                                     ; preds = %block_40101b, %block_4010a6
  %MEMORY.7 = phi %struct.Memory* [ %MEMORY.5, %block_40101b ], [ %MEMORY.36, %block_4010a6 ]
  %1500 = load i64, i64* %RBP
  %1501 = sub i64 %1500, 4
  %1502 = load i64, i64* %PC
  %1503 = add i64 %1502, 4
  store i64 %1503, i64* %PC
  %1504 = inttoptr i64 %1501 to i32*
  %1505 = load i32, i32* %1504
  %1506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1506, align 1, !tbaa !2433
  %1507 = and i32 %1505, 255
  %1508 = call i32 @llvm.ctpop.i32(i32 %1507) #16
  %1509 = trunc i32 %1508 to i8
  %1510 = and i8 %1509, 1
  %1511 = xor i8 %1510, 1
  %1512 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1511, i8* %1512, align 1, !tbaa !2447
  %1513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1513, align 1, !tbaa !2448
  %1514 = icmp eq i32 %1505, 0
  %1515 = zext i1 %1514 to i8
  %1516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1515, i8* %1516, align 1, !tbaa !2449
  %1517 = lshr i32 %1505, 31
  %1518 = trunc i32 %1517 to i8
  %1519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1518, i8* %1519, align 1, !tbaa !2450
  %1520 = lshr i32 %1505, 31
  %1521 = xor i32 %1517, %1520
  %1522 = add nuw nsw i32 %1521, %1520
  %1523 = icmp eq i32 %1522, 2
  %1524 = zext i1 %1523 to i8
  %1525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1524, i8* %1525, align 1, !tbaa !2451
  %1526 = load i64, i64* %PC
  %1527 = add i64 %1526, 125
  %1528 = load i64, i64* %PC
  %1529 = add i64 %1528, 6
  %1530 = load i64, i64* %PC
  %1531 = add i64 %1530, 6
  store i64 %1531, i64* %PC
  %1532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1533 = load i8, i8* %1532, align 1, !tbaa !2449
  %1534 = icmp eq i8 %1533, 0
  %1535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1536 = load i8, i8* %1535, align 1, !tbaa !2450
  %1537 = icmp ne i8 %1536, 0
  %1538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1539 = load i8, i8* %1538, align 1, !tbaa !2451
  %1540 = icmp ne i8 %1539, 0
  %1541 = xor i1 %1537, %1540
  %1542 = xor i1 %1541, true
  %1543 = and i1 %1534, %1542
  %1544 = zext i1 %1543 to i8
  store i8 %1544, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %1545 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1546 = select i1 %1543, i64 %1527, i64 %1529
  store i64 %1546, i64* %1545, align 8, !tbaa !2428
  %1547 = load i8, i8* %BRANCH_TAKEN
  %1548 = icmp eq i8 %1547, 1
  br i1 %1548, label %block_4010b9, label %block_401042

block_400d4e:                                     ; preds = %block_400d44
  %1549 = load i64, i64* %RBP
  %1550 = sub i64 %1549, 4
  %1551 = load i64, i64* %PC
  %1552 = add i64 %1551, 3
  store i64 %1552, i64* %PC
  %1553 = inttoptr i64 %1550 to i32*
  %1554 = load i32, i32* %1553
  %1555 = zext i32 %1554 to i64
  store i64 %1555, i64* %RAX, align 8, !tbaa !2428
  %1556 = load i64, i64* %RBP
  %1557 = sub i64 %1556, 8
  %1558 = load i64, i64* %PC
  %1559 = add i64 %1558, 3
  store i64 %1559, i64* %PC
  %1560 = inttoptr i64 %1557 to i32*
  %1561 = load i32, i32* %1560
  %1562 = zext i32 %1561 to i64
  store i64 %1562, i64* %RCX, align 8, !tbaa !2428
  %1563 = load i64, i64* %RBP
  %1564 = sub i64 %1563, 12
  %1565 = load i64, i64* %PC
  %1566 = add i64 %1565, 3
  store i64 %1566, i64* %PC
  %1567 = inttoptr i64 %1564 to i32*
  %1568 = load i32, i32* %1567
  %1569 = zext i32 %1568 to i64
  store i64 %1569, i64* %RDX, align 8, !tbaa !2428
  %1570 = load i64, i64* %RDX
  %1571 = load i64, i64* %PC
  %1572 = add i64 %1571, 3
  store i64 %1572, i64* %PC
  %1573 = and i64 %1570, 4294967295
  %1574 = shl i64 %1573, 2
  %1575 = trunc i64 %1574 to i32
  %1576 = icmp slt i32 %1575, 0
  %1577 = shl i32 %1575, 1
  %1578 = zext i32 %1577 to i64
  store i64 %1578, i64* %RDX, align 8, !tbaa !2428
  %1579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1580 = zext i1 %1576 to i8
  store i8 %1580, i8* %1579, align 1, !tbaa !2432
  %1581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1582 = and i32 %1577, 254
  %1583 = call i32 @llvm.ctpop.i32(i32 %1582) #16
  %1584 = trunc i32 %1583 to i8
  %1585 = and i8 %1584, 1
  %1586 = xor i8 %1585, 1
  store i8 %1586, i8* %1581, align 1, !tbaa !2432
  %1587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1587, align 1, !tbaa !2432
  %1588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1589 = icmp eq i32 %1577, 0
  %1590 = zext i1 %1589 to i8
  store i8 %1590, i8* %1588, align 1, !tbaa !2432
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1592 = lshr i32 %1577, 31
  %1593 = trunc i32 %1592 to i8
  store i8 %1593, i8* %1591, align 1, !tbaa !2432
  %1594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1594, align 1, !tbaa !2432
  %1595 = load i64, i64* %RCX
  %1596 = load i32, i32* %EDX
  %1597 = zext i32 %1596 to i64
  %1598 = load i64, i64* %PC
  %1599 = add i64 %1598, 2
  store i64 %1599, i64* %PC
  %1600 = trunc i64 %1595 to i32
  %1601 = add i32 %1596, %1600
  %1602 = zext i32 %1601 to i64
  store i64 %1602, i64* %RCX, align 8, !tbaa !2428
  %1603 = icmp ult i32 %1601, %1600
  %1604 = icmp ult i32 %1601, %1596
  %1605 = or i1 %1603, %1604
  %1606 = zext i1 %1605 to i8
  %1607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1606, i8* %1607, align 1, !tbaa !2433
  %1608 = and i32 %1601, 255
  %1609 = call i32 @llvm.ctpop.i32(i32 %1608) #16
  %1610 = trunc i32 %1609 to i8
  %1611 = and i8 %1610, 1
  %1612 = xor i8 %1611, 1
  %1613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1612, i8* %1613, align 1, !tbaa !2447
  %1614 = xor i64 %1597, %1595
  %1615 = trunc i64 %1614 to i32
  %1616 = xor i32 %1615, %1601
  %1617 = lshr i32 %1616, 4
  %1618 = trunc i32 %1617 to i8
  %1619 = and i8 %1618, 1
  %1620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1619, i8* %1620, align 1, !tbaa !2448
  %1621 = icmp eq i32 %1601, 0
  %1622 = zext i1 %1621 to i8
  %1623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1622, i8* %1623, align 1, !tbaa !2449
  %1624 = lshr i32 %1601, 31
  %1625 = trunc i32 %1624 to i8
  %1626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1625, i8* %1626, align 1, !tbaa !2450
  %1627 = lshr i32 %1600, 31
  %1628 = lshr i32 %1596, 31
  %1629 = xor i32 %1624, %1627
  %1630 = xor i32 %1624, %1628
  %1631 = add nuw nsw i32 %1629, %1630
  %1632 = icmp eq i32 %1631, 2
  %1633 = zext i1 %1632 to i8
  %1634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1633, i8* %1634, align 1, !tbaa !2451
  %1635 = load i64, i64* %RCX
  %1636 = load i64, i64* %PC
  %1637 = add i64 %1636, 3
  store i64 %1637, i64* %PC
  %1638 = and i64 %1635, 4294967295
  %1639 = shl i64 %1638, 2
  %1640 = trunc i64 %1639 to i32
  %1641 = icmp slt i32 %1640, 0
  %1642 = shl i32 %1640, 1
  %1643 = zext i32 %1642 to i64
  store i64 %1643, i64* %RCX, align 8, !tbaa !2428
  %1644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1645 = zext i1 %1641 to i8
  store i8 %1645, i8* %1644, align 1, !tbaa !2432
  %1646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1647 = and i32 %1642, 254
  %1648 = call i32 @llvm.ctpop.i32(i32 %1647) #16
  %1649 = trunc i32 %1648 to i8
  %1650 = and i8 %1649, 1
  %1651 = xor i8 %1650, 1
  store i8 %1651, i8* %1646, align 1, !tbaa !2432
  %1652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1652, align 1, !tbaa !2432
  %1653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1654 = icmp eq i32 %1642, 0
  %1655 = zext i1 %1654 to i8
  store i8 %1655, i8* %1653, align 1, !tbaa !2432
  %1656 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1657 = lshr i32 %1642, 31
  %1658 = trunc i32 %1657 to i8
  store i8 %1658, i8* %1656, align 1, !tbaa !2432
  %1659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1659, align 1, !tbaa !2432
  %1660 = load i64, i64* %RAX
  %1661 = load i32, i32* %ECX
  %1662 = zext i32 %1661 to i64
  %1663 = load i64, i64* %PC
  %1664 = add i64 %1663, 2
  store i64 %1664, i64* %PC
  %1665 = trunc i64 %1660 to i32
  %1666 = add i32 %1661, %1665
  %1667 = zext i32 %1666 to i64
  store i64 %1667, i64* %RAX, align 8, !tbaa !2428
  %1668 = icmp ult i32 %1666, %1665
  %1669 = icmp ult i32 %1666, %1661
  %1670 = or i1 %1668, %1669
  %1671 = zext i1 %1670 to i8
  %1672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1671, i8* %1672, align 1, !tbaa !2433
  %1673 = and i32 %1666, 255
  %1674 = call i32 @llvm.ctpop.i32(i32 %1673) #16
  %1675 = trunc i32 %1674 to i8
  %1676 = and i8 %1675, 1
  %1677 = xor i8 %1676, 1
  %1678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1677, i8* %1678, align 1, !tbaa !2447
  %1679 = xor i64 %1662, %1660
  %1680 = trunc i64 %1679 to i32
  %1681 = xor i32 %1680, %1666
  %1682 = lshr i32 %1681, 4
  %1683 = trunc i32 %1682 to i8
  %1684 = and i8 %1683, 1
  %1685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1684, i8* %1685, align 1, !tbaa !2448
  %1686 = icmp eq i32 %1666, 0
  %1687 = zext i1 %1686 to i8
  %1688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1687, i8* %1688, align 1, !tbaa !2449
  %1689 = lshr i32 %1666, 31
  %1690 = trunc i32 %1689 to i8
  %1691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1690, i8* %1691, align 1, !tbaa !2450
  %1692 = lshr i32 %1665, 31
  %1693 = lshr i32 %1661, 31
  %1694 = xor i32 %1689, %1692
  %1695 = xor i32 %1689, %1693
  %1696 = add nuw nsw i32 %1694, %1695
  %1697 = icmp eq i32 %1696, 2
  %1698 = zext i1 %1697 to i8
  %1699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1698, i8* %1699, align 1, !tbaa !2451
  %1700 = load i32, i32* %EAX
  %1701 = zext i32 %1700 to i64
  %1702 = load i64, i64* %PC
  %1703 = add i64 %1702, 3
  store i64 %1703, i64* %PC
  %1704 = shl i64 %1701, 32
  %1705 = ashr exact i64 %1704, 32
  store i64 %1705, i64* %RSI, align 8, !tbaa !2428
  %1706 = load i64, i64* %RSI
  %1707 = mul i64 %1706, 4
  %1708 = add i64 %1707, add (i64 ptrtoint (%p_type* @p to i64), i64 12288)
  %1709 = load i64, i64* %PC
  %1710 = add i64 %1709, 11
  store i64 %1710, i64* %PC
  %1711 = inttoptr i64 %1708 to i32*
  store i32 1, i32* %1711
  %1712 = load i64, i64* %RBP
  %1713 = sub i64 %1712, 12
  %1714 = load i64, i64* %PC
  %1715 = add i64 %1714, 3
  store i64 %1715, i64* %PC
  %1716 = inttoptr i64 %1713 to i32*
  %1717 = load i32, i32* %1716
  %1718 = zext i32 %1717 to i64
  store i64 %1718, i64* %RAX, align 8, !tbaa !2428
  %1719 = load i64, i64* %RAX
  %1720 = load i64, i64* %PC
  %1721 = add i64 %1720, 3
  store i64 %1721, i64* %PC
  %1722 = trunc i64 %1719 to i32
  %1723 = add i32 1, %1722
  %1724 = zext i32 %1723 to i64
  store i64 %1724, i64* %RAX, align 8, !tbaa !2428
  %1725 = icmp ult i32 %1723, %1722
  %1726 = icmp ult i32 %1723, 1
  %1727 = or i1 %1725, %1726
  %1728 = zext i1 %1727 to i8
  %1729 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1728, i8* %1729, align 1, !tbaa !2433
  %1730 = and i32 %1723, 255
  %1731 = call i32 @llvm.ctpop.i32(i32 %1730) #16
  %1732 = trunc i32 %1731 to i8
  %1733 = and i8 %1732, 1
  %1734 = xor i8 %1733, 1
  %1735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1734, i8* %1735, align 1, !tbaa !2447
  %1736 = xor i64 1, %1719
  %1737 = trunc i64 %1736 to i32
  %1738 = xor i32 %1737, %1723
  %1739 = lshr i32 %1738, 4
  %1740 = trunc i32 %1739 to i8
  %1741 = and i8 %1740, 1
  %1742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1741, i8* %1742, align 1, !tbaa !2448
  %1743 = icmp eq i32 %1723, 0
  %1744 = zext i1 %1743 to i8
  %1745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1744, i8* %1745, align 1, !tbaa !2449
  %1746 = lshr i32 %1723, 31
  %1747 = trunc i32 %1746 to i8
  %1748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1747, i8* %1748, align 1, !tbaa !2450
  %1749 = lshr i32 %1722, 31
  %1750 = xor i32 %1746, %1749
  %1751 = add nuw nsw i32 %1750, %1746
  %1752 = icmp eq i32 %1751, 2
  %1753 = zext i1 %1752 to i8
  %1754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1753, i8* %1754, align 1, !tbaa !2451
  %1755 = load i64, i64* %RBP
  %1756 = sub i64 %1755, 12
  %1757 = load i32, i32* %EAX
  %1758 = zext i32 %1757 to i64
  %1759 = load i64, i64* %PC
  %1760 = add i64 %1759, 3
  store i64 %1760, i64* %PC
  %1761 = inttoptr i64 %1756 to i32*
  store i32 %1757, i32* %1761
  %1762 = load i64, i64* %PC
  %1763 = sub i64 %1762, 52
  %1764 = load i64, i64* %PC
  %1765 = add i64 %1764, 5
  store i64 %1765, i64* %PC
  %1766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1763, i64* %1766, align 8, !tbaa !2428
  br label %block_400d44

block_400dca:                                     ; preds = %block_400dc0
  %1767 = load i64, i64* %RBP
  %1768 = sub i64 %1767, 8
  %1769 = load i64, i64* %PC
  %1770 = add i64 %1769, 7
  store i64 %1770, i64* %PC
  %1771 = inttoptr i64 %1768 to i32*
  store i32 0, i32* %1771
  br label %block_400dd1

block_400e8a:                                     ; preds = %block_400e80
  %1772 = load i64, i64* %RBP
  %1773 = sub i64 %1772, 4
  %1774 = load i64, i64* %PC
  %1775 = add i64 %1774, 3
  store i64 %1775, i64* %PC
  %1776 = inttoptr i64 %1773 to i32*
  %1777 = load i32, i32* %1776
  %1778 = zext i32 %1777 to i64
  store i64 %1778, i64* %RAX, align 8, !tbaa !2428
  %1779 = load i64, i64* %RBP
  %1780 = sub i64 %1779, 8
  %1781 = load i64, i64* %PC
  %1782 = add i64 %1781, 3
  store i64 %1782, i64* %PC
  %1783 = inttoptr i64 %1780 to i32*
  %1784 = load i32, i32* %1783
  %1785 = zext i32 %1784 to i64
  store i64 %1785, i64* %RCX, align 8, !tbaa !2428
  %1786 = load i64, i64* %RBP
  %1787 = sub i64 %1786, 12
  %1788 = load i64, i64* %PC
  %1789 = add i64 %1788, 3
  store i64 %1789, i64* %PC
  %1790 = inttoptr i64 %1787 to i32*
  %1791 = load i32, i32* %1790
  %1792 = zext i32 %1791 to i64
  store i64 %1792, i64* %RDX, align 8, !tbaa !2428
  %1793 = load i64, i64* %RDX
  %1794 = load i64, i64* %PC
  %1795 = add i64 %1794, 3
  store i64 %1795, i64* %PC
  %1796 = and i64 %1793, 4294967295
  %1797 = shl i64 %1796, 2
  %1798 = trunc i64 %1797 to i32
  %1799 = icmp slt i32 %1798, 0
  %1800 = shl i32 %1798, 1
  %1801 = zext i32 %1800 to i64
  store i64 %1801, i64* %RDX, align 8, !tbaa !2428
  %1802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1803 = zext i1 %1799 to i8
  store i8 %1803, i8* %1802, align 1, !tbaa !2432
  %1804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1805 = and i32 %1800, 254
  %1806 = call i32 @llvm.ctpop.i32(i32 %1805) #16
  %1807 = trunc i32 %1806 to i8
  %1808 = and i8 %1807, 1
  %1809 = xor i8 %1808, 1
  store i8 %1809, i8* %1804, align 1, !tbaa !2432
  %1810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1810, align 1, !tbaa !2432
  %1811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1812 = icmp eq i32 %1800, 0
  %1813 = zext i1 %1812 to i8
  store i8 %1813, i8* %1811, align 1, !tbaa !2432
  %1814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1815 = lshr i32 %1800, 31
  %1816 = trunc i32 %1815 to i8
  store i8 %1816, i8* %1814, align 1, !tbaa !2432
  %1817 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1817, align 1, !tbaa !2432
  %1818 = load i64, i64* %RCX
  %1819 = load i32, i32* %EDX
  %1820 = zext i32 %1819 to i64
  %1821 = load i64, i64* %PC
  %1822 = add i64 %1821, 2
  store i64 %1822, i64* %PC
  %1823 = trunc i64 %1818 to i32
  %1824 = add i32 %1819, %1823
  %1825 = zext i32 %1824 to i64
  store i64 %1825, i64* %RCX, align 8, !tbaa !2428
  %1826 = icmp ult i32 %1824, %1823
  %1827 = icmp ult i32 %1824, %1819
  %1828 = or i1 %1826, %1827
  %1829 = zext i1 %1828 to i8
  %1830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1829, i8* %1830, align 1, !tbaa !2433
  %1831 = and i32 %1824, 255
  %1832 = call i32 @llvm.ctpop.i32(i32 %1831) #16
  %1833 = trunc i32 %1832 to i8
  %1834 = and i8 %1833, 1
  %1835 = xor i8 %1834, 1
  %1836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1835, i8* %1836, align 1, !tbaa !2447
  %1837 = xor i64 %1820, %1818
  %1838 = trunc i64 %1837 to i32
  %1839 = xor i32 %1838, %1824
  %1840 = lshr i32 %1839, 4
  %1841 = trunc i32 %1840 to i8
  %1842 = and i8 %1841, 1
  %1843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1842, i8* %1843, align 1, !tbaa !2448
  %1844 = icmp eq i32 %1824, 0
  %1845 = zext i1 %1844 to i8
  %1846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1845, i8* %1846, align 1, !tbaa !2449
  %1847 = lshr i32 %1824, 31
  %1848 = trunc i32 %1847 to i8
  %1849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1848, i8* %1849, align 1, !tbaa !2450
  %1850 = lshr i32 %1823, 31
  %1851 = lshr i32 %1819, 31
  %1852 = xor i32 %1847, %1850
  %1853 = xor i32 %1847, %1851
  %1854 = add nuw nsw i32 %1852, %1853
  %1855 = icmp eq i32 %1854, 2
  %1856 = zext i1 %1855 to i8
  %1857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1856, i8* %1857, align 1, !tbaa !2451
  %1858 = load i64, i64* %RCX
  %1859 = load i64, i64* %PC
  %1860 = add i64 %1859, 3
  store i64 %1860, i64* %PC
  %1861 = and i64 %1858, 4294967295
  %1862 = shl i64 %1861, 2
  %1863 = trunc i64 %1862 to i32
  %1864 = icmp slt i32 %1863, 0
  %1865 = shl i32 %1863, 1
  %1866 = zext i32 %1865 to i64
  store i64 %1866, i64* %RCX, align 8, !tbaa !2428
  %1867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %1868 = zext i1 %1864 to i8
  store i8 %1868, i8* %1867, align 1, !tbaa !2432
  %1869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %1870 = and i32 %1865, 254
  %1871 = call i32 @llvm.ctpop.i32(i32 %1870) #16
  %1872 = trunc i32 %1871 to i8
  %1873 = and i8 %1872, 1
  %1874 = xor i8 %1873, 1
  store i8 %1874, i8* %1869, align 1, !tbaa !2432
  %1875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1875, align 1, !tbaa !2432
  %1876 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1877 = icmp eq i32 %1865, 0
  %1878 = zext i1 %1877 to i8
  store i8 %1878, i8* %1876, align 1, !tbaa !2432
  %1879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1880 = lshr i32 %1865, 31
  %1881 = trunc i32 %1880 to i8
  store i8 %1881, i8* %1879, align 1, !tbaa !2432
  %1882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1882, align 1, !tbaa !2432
  %1883 = load i64, i64* %RAX
  %1884 = load i32, i32* %ECX
  %1885 = zext i32 %1884 to i64
  %1886 = load i64, i64* %PC
  %1887 = add i64 %1886, 2
  store i64 %1887, i64* %PC
  %1888 = trunc i64 %1883 to i32
  %1889 = add i32 %1884, %1888
  %1890 = zext i32 %1889 to i64
  store i64 %1890, i64* %RAX, align 8, !tbaa !2428
  %1891 = icmp ult i32 %1889, %1888
  %1892 = icmp ult i32 %1889, %1884
  %1893 = or i1 %1891, %1892
  %1894 = zext i1 %1893 to i8
  %1895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1894, i8* %1895, align 1, !tbaa !2433
  %1896 = and i32 %1889, 255
  %1897 = call i32 @llvm.ctpop.i32(i32 %1896) #16
  %1898 = trunc i32 %1897 to i8
  %1899 = and i8 %1898, 1
  %1900 = xor i8 %1899, 1
  %1901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1900, i8* %1901, align 1, !tbaa !2447
  %1902 = xor i64 %1885, %1883
  %1903 = trunc i64 %1902 to i32
  %1904 = xor i32 %1903, %1889
  %1905 = lshr i32 %1904, 4
  %1906 = trunc i32 %1905 to i8
  %1907 = and i8 %1906, 1
  %1908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1907, i8* %1908, align 1, !tbaa !2448
  %1909 = icmp eq i32 %1889, 0
  %1910 = zext i1 %1909 to i8
  %1911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1910, i8* %1911, align 1, !tbaa !2449
  %1912 = lshr i32 %1889, 31
  %1913 = trunc i32 %1912 to i8
  %1914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1913, i8* %1914, align 1, !tbaa !2450
  %1915 = lshr i32 %1888, 31
  %1916 = lshr i32 %1884, 31
  %1917 = xor i32 %1912, %1915
  %1918 = xor i32 %1912, %1916
  %1919 = add nuw nsw i32 %1917, %1918
  %1920 = icmp eq i32 %1919, 2
  %1921 = zext i1 %1920 to i8
  %1922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1921, i8* %1922, align 1, !tbaa !2451
  %1923 = load i32, i32* %EAX
  %1924 = zext i32 %1923 to i64
  %1925 = load i64, i64* %PC
  %1926 = add i64 %1925, 3
  store i64 %1926, i64* %PC
  %1927 = shl i64 %1924, 32
  %1928 = ashr exact i64 %1927, 32
  store i64 %1928, i64* %RSI, align 8, !tbaa !2428
  %1929 = load i64, i64* %RSI
  %1930 = mul i64 %1929, 4
  %1931 = add i64 %1930, add (i64 ptrtoint (%p_type* @p to i64), i64 16384)
  %1932 = load i64, i64* %PC
  %1933 = add i64 %1932, 11
  store i64 %1933, i64* %PC
  %1934 = inttoptr i64 %1931 to i32*
  store i32 1, i32* %1934
  %1935 = load i64, i64* %RBP
  %1936 = sub i64 %1935, 12
  %1937 = load i64, i64* %PC
  %1938 = add i64 %1937, 3
  store i64 %1938, i64* %PC
  %1939 = inttoptr i64 %1936 to i32*
  %1940 = load i32, i32* %1939
  %1941 = zext i32 %1940 to i64
  store i64 %1941, i64* %RAX, align 8, !tbaa !2428
  %1942 = load i64, i64* %RAX
  %1943 = load i64, i64* %PC
  %1944 = add i64 %1943, 3
  store i64 %1944, i64* %PC
  %1945 = trunc i64 %1942 to i32
  %1946 = add i32 1, %1945
  %1947 = zext i32 %1946 to i64
  store i64 %1947, i64* %RAX, align 8, !tbaa !2428
  %1948 = icmp ult i32 %1946, %1945
  %1949 = icmp ult i32 %1946, 1
  %1950 = or i1 %1948, %1949
  %1951 = zext i1 %1950 to i8
  %1952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1951, i8* %1952, align 1, !tbaa !2433
  %1953 = and i32 %1946, 255
  %1954 = call i32 @llvm.ctpop.i32(i32 %1953) #16
  %1955 = trunc i32 %1954 to i8
  %1956 = and i8 %1955, 1
  %1957 = xor i8 %1956, 1
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1957, i8* %1958, align 1, !tbaa !2447
  %1959 = xor i64 1, %1942
  %1960 = trunc i64 %1959 to i32
  %1961 = xor i32 %1960, %1946
  %1962 = lshr i32 %1961, 4
  %1963 = trunc i32 %1962 to i8
  %1964 = and i8 %1963, 1
  %1965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1964, i8* %1965, align 1, !tbaa !2448
  %1966 = icmp eq i32 %1946, 0
  %1967 = zext i1 %1966 to i8
  %1968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1967, i8* %1968, align 1, !tbaa !2449
  %1969 = lshr i32 %1946, 31
  %1970 = trunc i32 %1969 to i8
  %1971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1970, i8* %1971, align 1, !tbaa !2450
  %1972 = lshr i32 %1945, 31
  %1973 = xor i32 %1969, %1972
  %1974 = add nuw nsw i32 %1973, %1969
  %1975 = icmp eq i32 %1974, 2
  %1976 = zext i1 %1975 to i8
  %1977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1976, i8* %1977, align 1, !tbaa !2451
  %1978 = load i64, i64* %RBP
  %1979 = sub i64 %1978, 12
  %1980 = load i32, i32* %EAX
  %1981 = zext i32 %1980 to i64
  %1982 = load i64, i64* %PC
  %1983 = add i64 %1982, 3
  store i64 %1983, i64* %PC
  %1984 = inttoptr i64 %1979 to i32*
  store i32 %1980, i32* %1984
  %1985 = load i64, i64* %PC
  %1986 = sub i64 %1985, 52
  %1987 = load i64, i64* %PC
  %1988 = add i64 %1987, 5
  store i64 %1988, i64* %PC
  %1989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1986, i64* %1989, align 8, !tbaa !2428
  br label %block_400e80

block_400b48:                                     ; preds = %block_400b2b, %block_400bb6
  %MEMORY.8 = phi %struct.Memory* [ %MEMORY.37, %block_400b2b ], [ %MEMORY.45, %block_400bb6 ]
  %1990 = load i64, i64* %RBP
  %1991 = sub i64 %1990, 4
  %1992 = load i64, i64* %PC
  %1993 = add i64 %1992, 4
  store i64 %1993, i64* %PC
  %1994 = inttoptr i64 %1991 to i32*
  %1995 = load i32, i32* %1994
  %1996 = sub i32 %1995, 1
  %1997 = icmp ult i32 %1995, 1
  %1998 = zext i1 %1997 to i8
  %1999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1998, i8* %1999, align 1, !tbaa !2433
  %2000 = and i32 %1996, 255
  %2001 = call i32 @llvm.ctpop.i32(i32 %2000) #16
  %2002 = trunc i32 %2001 to i8
  %2003 = and i8 %2002, 1
  %2004 = xor i8 %2003, 1
  %2005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2004, i8* %2005, align 1, !tbaa !2447
  %2006 = xor i32 %1995, 1
  %2007 = xor i32 %2006, %1996
  %2008 = lshr i32 %2007, 4
  %2009 = trunc i32 %2008 to i8
  %2010 = and i8 %2009, 1
  %2011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2010, i8* %2011, align 1, !tbaa !2448
  %2012 = icmp eq i32 %1996, 0
  %2013 = zext i1 %2012 to i8
  %2014 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2013, i8* %2014, align 1, !tbaa !2449
  %2015 = lshr i32 %1996, 31
  %2016 = trunc i32 %2015 to i8
  %2017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2016, i8* %2017, align 1, !tbaa !2450
  %2018 = lshr i32 %1995, 31
  %2019 = xor i32 %2015, %2018
  %2020 = add nuw nsw i32 %2019, %2018
  %2021 = icmp eq i32 %2020, 2
  %2022 = zext i1 %2021 to i8
  %2023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2022, i8* %2023, align 1, !tbaa !2451
  %2024 = load i64, i64* %PC
  %2025 = add i64 %2024, 125
  %2026 = load i64, i64* %PC
  %2027 = add i64 %2026, 6
  %2028 = load i64, i64* %PC
  %2029 = add i64 %2028, 6
  store i64 %2029, i64* %PC
  %2030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2031 = load i8, i8* %2030, align 1, !tbaa !2449
  %2032 = icmp eq i8 %2031, 0
  %2033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2034 = load i8, i8* %2033, align 1, !tbaa !2450
  %2035 = icmp ne i8 %2034, 0
  %2036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2037 = load i8, i8* %2036, align 1, !tbaa !2451
  %2038 = icmp ne i8 %2037, 0
  %2039 = xor i1 %2035, %2038
  %2040 = xor i1 %2039, true
  %2041 = and i1 %2032, %2040
  %2042 = zext i1 %2041 to i8
  store i8 %2042, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %2043 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2044 = select i1 %2041, i64 %2025, i64 %2027
  store i64 %2044, i64* %2043, align 8, !tbaa !2428
  %2045 = load i8, i8* %BRANCH_TAKEN
  %2046 = icmp eq i8 %2045, 1
  br i1 %2046, label %block_400bc9, label %block_400b52

block_4010e0:                                     ; preds = %block_4010d6
  %2047 = load i64, i64* %RBP
  %2048 = sub i64 %2047, 8
  %2049 = load i64, i64* %PC
  %2050 = add i64 %2049, 7
  store i64 %2050, i64* %PC
  %2051 = inttoptr i64 %2048 to i32*
  store i32 0, i32* %2051
  br label %block_4010e7

block_400d3d:                                     ; preds = %block_400d33
  %2052 = load i64, i64* %RBP
  %2053 = sub i64 %2052, 12
  %2054 = load i64, i64* %PC
  %2055 = add i64 %2054, 7
  store i64 %2055, i64* %PC
  %2056 = inttoptr i64 %2053 to i32*
  store i32 0, i32* %2056
  br label %block_400d44

block_401131:                                     ; preds = %block_4010f8
  %2057 = load i64, i64* %PC
  %2058 = add i64 %2057, 5
  %2059 = load i64, i64* %PC
  %2060 = add i64 %2059, 5
  store i64 %2060, i64* %PC
  %2061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2058, i64* %2061, align 8, !tbaa !2428
  %2062 = load i64, i64* %RBP
  %2063 = sub i64 %2062, 8
  %2064 = load i64, i64* %PC
  %2065 = add i64 %2064, 3
  store i64 %2065, i64* %PC
  %2066 = inttoptr i64 %2063 to i32*
  %2067 = load i32, i32* %2066
  %2068 = zext i32 %2067 to i64
  store i64 %2068, i64* %RAX, align 8, !tbaa !2428
  %2069 = load i64, i64* %RAX
  %2070 = load i64, i64* %PC
  %2071 = add i64 %2070, 3
  store i64 %2071, i64* %PC
  %2072 = trunc i64 %2069 to i32
  %2073 = add i32 1, %2072
  %2074 = zext i32 %2073 to i64
  store i64 %2074, i64* %RAX, align 8, !tbaa !2428
  %2075 = icmp ult i32 %2073, %2072
  %2076 = icmp ult i32 %2073, 1
  %2077 = or i1 %2075, %2076
  %2078 = zext i1 %2077 to i8
  %2079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2078, i8* %2079, align 1, !tbaa !2433
  %2080 = and i32 %2073, 255
  %2081 = call i32 @llvm.ctpop.i32(i32 %2080) #16
  %2082 = trunc i32 %2081 to i8
  %2083 = and i8 %2082, 1
  %2084 = xor i8 %2083, 1
  %2085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2084, i8* %2085, align 1, !tbaa !2447
  %2086 = xor i64 1, %2069
  %2087 = trunc i64 %2086 to i32
  %2088 = xor i32 %2087, %2073
  %2089 = lshr i32 %2088, 4
  %2090 = trunc i32 %2089 to i8
  %2091 = and i8 %2090, 1
  %2092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2091, i8* %2092, align 1, !tbaa !2448
  %2093 = icmp eq i32 %2073, 0
  %2094 = zext i1 %2093 to i8
  %2095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2094, i8* %2095, align 1, !tbaa !2449
  %2096 = lshr i32 %2073, 31
  %2097 = trunc i32 %2096 to i8
  %2098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2097, i8* %2098, align 1, !tbaa !2450
  %2099 = lshr i32 %2072, 31
  %2100 = xor i32 %2096, %2099
  %2101 = add nuw nsw i32 %2100, %2096
  %2102 = icmp eq i32 %2101, 2
  %2103 = zext i1 %2102 to i8
  %2104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2103, i8* %2104, align 1, !tbaa !2451
  %2105 = load i64, i64* %RBP
  %2106 = sub i64 %2105, 8
  %2107 = load i32, i32* %EAX
  %2108 = zext i32 %2107 to i64
  %2109 = load i64, i64* %PC
  %2110 = add i64 %2109, 3
  store i64 %2110, i64* %PC
  %2111 = inttoptr i64 %2106 to i32*
  store i32 %2107, i32* %2111
  %2112 = load i64, i64* %PC
  %2113 = sub i64 %2112, 88
  %2114 = load i64, i64* %PC
  %2115 = add i64 %2114, 5
  store i64 %2115, i64* %PC
  %2116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2113, i64* %2116, align 8, !tbaa !2428
  br label %block_4010e7

block_400990:                                     ; preds = %block_40099a, %block_400989
  %MEMORY.9 = phi %struct.Memory* [ %MEMORY.11, %block_400989 ], [ %MEMORY.9, %block_40099a ]
  %2117 = load i64, i64* %RBP
  %2118 = sub i64 %2117, 12
  %2119 = load i64, i64* %PC
  %2120 = add i64 %2119, 4
  store i64 %2120, i64* %PC
  %2121 = inttoptr i64 %2118 to i32*
  %2122 = load i32, i32* %2121
  %2123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2123, align 1, !tbaa !2433
  %2124 = and i32 %2122, 255
  %2125 = call i32 @llvm.ctpop.i32(i32 %2124) #16
  %2126 = trunc i32 %2125 to i8
  %2127 = and i8 %2126, 1
  %2128 = xor i8 %2127, 1
  %2129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2128, i8* %2129, align 1, !tbaa !2447
  %2130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2130, align 1, !tbaa !2448
  %2131 = icmp eq i32 %2122, 0
  %2132 = zext i1 %2131 to i8
  %2133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2132, i8* %2133, align 1, !tbaa !2449
  %2134 = lshr i32 %2122, 31
  %2135 = trunc i32 %2134 to i8
  %2136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2135, i8* %2136, align 1, !tbaa !2450
  %2137 = lshr i32 %2122, 31
  %2138 = xor i32 %2134, %2137
  %2139 = add nuw nsw i32 %2138, %2137
  %2140 = icmp eq i32 %2139, 2
  %2141 = zext i1 %2140 to i8
  %2142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2141, i8* %2142, align 1, !tbaa !2451
  %2143 = load i64, i64* %PC
  %2144 = add i64 %2143, 53
  %2145 = load i64, i64* %PC
  %2146 = add i64 %2145, 6
  %2147 = load i64, i64* %PC
  %2148 = add i64 %2147, 6
  store i64 %2148, i64* %PC
  %2149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2150 = load i8, i8* %2149, align 1, !tbaa !2449
  %2151 = icmp eq i8 %2150, 0
  %2152 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2153 = load i8, i8* %2152, align 1, !tbaa !2450
  %2154 = icmp ne i8 %2153, 0
  %2155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2156 = load i8, i8* %2155, align 1, !tbaa !2451
  %2157 = icmp ne i8 %2156, 0
  %2158 = xor i1 %2154, %2157
  %2159 = xor i1 %2158, true
  %2160 = and i1 %2151, %2159
  %2161 = zext i1 %2160 to i8
  store i8 %2161, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %2162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2163 = select i1 %2160, i64 %2144, i64 %2146
  store i64 %2163, i64* %2162, align 8, !tbaa !2428
  %2164 = load i8, i8* %BRANCH_TAKEN
  %2165 = icmp eq i8 %2164, 1
  br i1 %2165, label %block_4009c9, label %block_40099a

block_400f28:                                     ; preds = %block_400f1e
  %2166 = load i64, i64* %RBP
  %2167 = sub i64 %2166, 4
  %2168 = load i64, i64* %PC
  %2169 = add i64 %2168, 3
  store i64 %2169, i64* %PC
  %2170 = inttoptr i64 %2167 to i32*
  %2171 = load i32, i32* %2170
  %2172 = zext i32 %2171 to i64
  store i64 %2172, i64* %RAX, align 8, !tbaa !2428
  %2173 = load i64, i64* %RBP
  %2174 = sub i64 %2173, 8
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 3
  store i64 %2176, i64* %PC
  %2177 = inttoptr i64 %2174 to i32*
  %2178 = load i32, i32* %2177
  %2179 = zext i32 %2178 to i64
  store i64 %2179, i64* %RCX, align 8, !tbaa !2428
  %2180 = load i64, i64* %RBP
  %2181 = sub i64 %2180, 12
  %2182 = load i64, i64* %PC
  %2183 = add i64 %2182, 3
  store i64 %2183, i64* %PC
  %2184 = inttoptr i64 %2181 to i32*
  %2185 = load i32, i32* %2184
  %2186 = zext i32 %2185 to i64
  store i64 %2186, i64* %RDX, align 8, !tbaa !2428
  %2187 = load i64, i64* %RDX
  %2188 = load i64, i64* %PC
  %2189 = add i64 %2188, 3
  store i64 %2189, i64* %PC
  %2190 = and i64 %2187, 4294967295
  %2191 = shl i64 %2190, 2
  %2192 = trunc i64 %2191 to i32
  %2193 = icmp slt i32 %2192, 0
  %2194 = shl i32 %2192, 1
  %2195 = zext i32 %2194 to i64
  store i64 %2195, i64* %RDX, align 8, !tbaa !2428
  %2196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2197 = zext i1 %2193 to i8
  store i8 %2197, i8* %2196, align 1, !tbaa !2432
  %2198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2199 = and i32 %2194, 254
  %2200 = call i32 @llvm.ctpop.i32(i32 %2199) #16
  %2201 = trunc i32 %2200 to i8
  %2202 = and i8 %2201, 1
  %2203 = xor i8 %2202, 1
  store i8 %2203, i8* %2198, align 1, !tbaa !2432
  %2204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2204, align 1, !tbaa !2432
  %2205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2206 = icmp eq i32 %2194, 0
  %2207 = zext i1 %2206 to i8
  store i8 %2207, i8* %2205, align 1, !tbaa !2432
  %2208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2209 = lshr i32 %2194, 31
  %2210 = trunc i32 %2209 to i8
  store i8 %2210, i8* %2208, align 1, !tbaa !2432
  %2211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2211, align 1, !tbaa !2432
  %2212 = load i64, i64* %RCX
  %2213 = load i32, i32* %EDX
  %2214 = zext i32 %2213 to i64
  %2215 = load i64, i64* %PC
  %2216 = add i64 %2215, 2
  store i64 %2216, i64* %PC
  %2217 = trunc i64 %2212 to i32
  %2218 = add i32 %2213, %2217
  %2219 = zext i32 %2218 to i64
  store i64 %2219, i64* %RCX, align 8, !tbaa !2428
  %2220 = icmp ult i32 %2218, %2217
  %2221 = icmp ult i32 %2218, %2213
  %2222 = or i1 %2220, %2221
  %2223 = zext i1 %2222 to i8
  %2224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2223, i8* %2224, align 1, !tbaa !2433
  %2225 = and i32 %2218, 255
  %2226 = call i32 @llvm.ctpop.i32(i32 %2225) #16
  %2227 = trunc i32 %2226 to i8
  %2228 = and i8 %2227, 1
  %2229 = xor i8 %2228, 1
  %2230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2229, i8* %2230, align 1, !tbaa !2447
  %2231 = xor i64 %2214, %2212
  %2232 = trunc i64 %2231 to i32
  %2233 = xor i32 %2232, %2218
  %2234 = lshr i32 %2233, 4
  %2235 = trunc i32 %2234 to i8
  %2236 = and i8 %2235, 1
  %2237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2236, i8* %2237, align 1, !tbaa !2448
  %2238 = icmp eq i32 %2218, 0
  %2239 = zext i1 %2238 to i8
  %2240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2239, i8* %2240, align 1, !tbaa !2449
  %2241 = lshr i32 %2218, 31
  %2242 = trunc i32 %2241 to i8
  %2243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2242, i8* %2243, align 1, !tbaa !2450
  %2244 = lshr i32 %2217, 31
  %2245 = lshr i32 %2213, 31
  %2246 = xor i32 %2241, %2244
  %2247 = xor i32 %2241, %2245
  %2248 = add nuw nsw i32 %2246, %2247
  %2249 = icmp eq i32 %2248, 2
  %2250 = zext i1 %2249 to i8
  %2251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2250, i8* %2251, align 1, !tbaa !2451
  %2252 = load i64, i64* %RCX
  %2253 = load i64, i64* %PC
  %2254 = add i64 %2253, 3
  store i64 %2254, i64* %PC
  %2255 = and i64 %2252, 4294967295
  %2256 = shl i64 %2255, 2
  %2257 = trunc i64 %2256 to i32
  %2258 = icmp slt i32 %2257, 0
  %2259 = shl i32 %2257, 1
  %2260 = zext i32 %2259 to i64
  store i64 %2260, i64* %RCX, align 8, !tbaa !2428
  %2261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %2262 = zext i1 %2258 to i8
  store i8 %2262, i8* %2261, align 1, !tbaa !2432
  %2263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %2264 = and i32 %2259, 254
  %2265 = call i32 @llvm.ctpop.i32(i32 %2264) #16
  %2266 = trunc i32 %2265 to i8
  %2267 = and i8 %2266, 1
  %2268 = xor i8 %2267, 1
  store i8 %2268, i8* %2263, align 1, !tbaa !2432
  %2269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2269, align 1, !tbaa !2432
  %2270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2271 = icmp eq i32 %2259, 0
  %2272 = zext i1 %2271 to i8
  store i8 %2272, i8* %2270, align 1, !tbaa !2432
  %2273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2274 = lshr i32 %2259, 31
  %2275 = trunc i32 %2274 to i8
  store i8 %2275, i8* %2273, align 1, !tbaa !2432
  %2276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2276, align 1, !tbaa !2432
  %2277 = load i64, i64* %RAX
  %2278 = load i32, i32* %ECX
  %2279 = zext i32 %2278 to i64
  %2280 = load i64, i64* %PC
  %2281 = add i64 %2280, 2
  store i64 %2281, i64* %PC
  %2282 = trunc i64 %2277 to i32
  %2283 = add i32 %2278, %2282
  %2284 = zext i32 %2283 to i64
  store i64 %2284, i64* %RAX, align 8, !tbaa !2428
  %2285 = icmp ult i32 %2283, %2282
  %2286 = icmp ult i32 %2283, %2278
  %2287 = or i1 %2285, %2286
  %2288 = zext i1 %2287 to i8
  %2289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2288, i8* %2289, align 1, !tbaa !2433
  %2290 = and i32 %2283, 255
  %2291 = call i32 @llvm.ctpop.i32(i32 %2290) #16
  %2292 = trunc i32 %2291 to i8
  %2293 = and i8 %2292, 1
  %2294 = xor i8 %2293, 1
  %2295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2294, i8* %2295, align 1, !tbaa !2447
  %2296 = xor i64 %2279, %2277
  %2297 = trunc i64 %2296 to i32
  %2298 = xor i32 %2297, %2283
  %2299 = lshr i32 %2298, 4
  %2300 = trunc i32 %2299 to i8
  %2301 = and i8 %2300, 1
  %2302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2301, i8* %2302, align 1, !tbaa !2448
  %2303 = icmp eq i32 %2283, 0
  %2304 = zext i1 %2303 to i8
  %2305 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2304, i8* %2305, align 1, !tbaa !2449
  %2306 = lshr i32 %2283, 31
  %2307 = trunc i32 %2306 to i8
  %2308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2307, i8* %2308, align 1, !tbaa !2450
  %2309 = lshr i32 %2282, 31
  %2310 = lshr i32 %2278, 31
  %2311 = xor i32 %2306, %2309
  %2312 = xor i32 %2306, %2310
  %2313 = add nuw nsw i32 %2311, %2312
  %2314 = icmp eq i32 %2313, 2
  %2315 = zext i1 %2314 to i8
  %2316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2315, i8* %2316, align 1, !tbaa !2451
  %2317 = load i32, i32* %EAX
  %2318 = zext i32 %2317 to i64
  %2319 = load i64, i64* %PC
  %2320 = add i64 %2319, 3
  store i64 %2320, i64* %PC
  %2321 = shl i64 %2318, 32
  %2322 = ashr exact i64 %2321, 32
  store i64 %2322, i64* %RSI, align 8, !tbaa !2428
  %2323 = load i64, i64* %RSI
  %2324 = mul i64 %2323, 4
  %2325 = add i64 %2324, add (i64 ptrtoint (%p_type* @p to i64), i64 18432)
  %2326 = load i64, i64* %PC
  %2327 = add i64 %2326, 11
  store i64 %2327, i64* %PC
  %2328 = inttoptr i64 %2325 to i32*
  store i32 1, i32* %2328
  %2329 = load i64, i64* %RBP
  %2330 = sub i64 %2329, 12
  %2331 = load i64, i64* %PC
  %2332 = add i64 %2331, 3
  store i64 %2332, i64* %PC
  %2333 = inttoptr i64 %2330 to i32*
  %2334 = load i32, i32* %2333
  %2335 = zext i32 %2334 to i64
  store i64 %2335, i64* %RAX, align 8, !tbaa !2428
  %2336 = load i64, i64* %RAX
  %2337 = load i64, i64* %PC
  %2338 = add i64 %2337, 3
  store i64 %2338, i64* %PC
  %2339 = trunc i64 %2336 to i32
  %2340 = add i32 1, %2339
  %2341 = zext i32 %2340 to i64
  store i64 %2341, i64* %RAX, align 8, !tbaa !2428
  %2342 = icmp ult i32 %2340, %2339
  %2343 = icmp ult i32 %2340, 1
  %2344 = or i1 %2342, %2343
  %2345 = zext i1 %2344 to i8
  %2346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2345, i8* %2346, align 1, !tbaa !2433
  %2347 = and i32 %2340, 255
  %2348 = call i32 @llvm.ctpop.i32(i32 %2347) #16
  %2349 = trunc i32 %2348 to i8
  %2350 = and i8 %2349, 1
  %2351 = xor i8 %2350, 1
  %2352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2351, i8* %2352, align 1, !tbaa !2447
  %2353 = xor i64 1, %2336
  %2354 = trunc i64 %2353 to i32
  %2355 = xor i32 %2354, %2340
  %2356 = lshr i32 %2355, 4
  %2357 = trunc i32 %2356 to i8
  %2358 = and i8 %2357, 1
  %2359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2358, i8* %2359, align 1, !tbaa !2448
  %2360 = icmp eq i32 %2340, 0
  %2361 = zext i1 %2360 to i8
  %2362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2361, i8* %2362, align 1, !tbaa !2449
  %2363 = lshr i32 %2340, 31
  %2364 = trunc i32 %2363 to i8
  %2365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2364, i8* %2365, align 1, !tbaa !2450
  %2366 = lshr i32 %2339, 31
  %2367 = xor i32 %2363, %2366
  %2368 = add nuw nsw i32 %2367, %2363
  %2369 = icmp eq i32 %2368, 2
  %2370 = zext i1 %2369 to i8
  %2371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2370, i8* %2371, align 1, !tbaa !2451
  %2372 = load i64, i64* %RBP
  %2373 = sub i64 %2372, 12
  %2374 = load i32, i32* %EAX
  %2375 = zext i32 %2374 to i64
  %2376 = load i64, i64* %PC
  %2377 = add i64 %2376, 3
  store i64 %2377, i64* %PC
  %2378 = inttoptr i64 %2373 to i32*
  store i32 %2374, i32* %2378
  %2379 = load i64, i64* %PC
  %2380 = sub i64 %2379, 52
  %2381 = load i64, i64* %PC
  %2382 = add i64 %2381, 5
  store i64 %2382, i64* %PC
  %2383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2380, i64* %2383, align 8, !tbaa !2428
  br label %block_400f1e

block_400d22:                                     ; preds = %block_400d05, %block_400d90
  %MEMORY.10 = phi %struct.Memory* [ %MEMORY.22, %block_400d05 ], [ %MEMORY.28, %block_400d90 ]
  %2384 = load i64, i64* %RBP
  %2385 = sub i64 %2384, 4
  %2386 = load i64, i64* %PC
  %2387 = add i64 %2386, 4
  store i64 %2387, i64* %PC
  %2388 = inttoptr i64 %2385 to i32*
  %2389 = load i32, i32* %2388
  %2390 = sub i32 %2389, 2
  %2391 = icmp ult i32 %2389, 2
  %2392 = zext i1 %2391 to i8
  %2393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2392, i8* %2393, align 1, !tbaa !2433
  %2394 = and i32 %2390, 255
  %2395 = call i32 @llvm.ctpop.i32(i32 %2394) #16
  %2396 = trunc i32 %2395 to i8
  %2397 = and i8 %2396, 1
  %2398 = xor i8 %2397, 1
  %2399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2398, i8* %2399, align 1, !tbaa !2447
  %2400 = xor i32 %2389, 2
  %2401 = xor i32 %2400, %2390
  %2402 = lshr i32 %2401, 4
  %2403 = trunc i32 %2402 to i8
  %2404 = and i8 %2403, 1
  %2405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2404, i8* %2405, align 1, !tbaa !2448
  %2406 = icmp eq i32 %2390, 0
  %2407 = zext i1 %2406 to i8
  %2408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2407, i8* %2408, align 1, !tbaa !2449
  %2409 = lshr i32 %2390, 31
  %2410 = trunc i32 %2409 to i8
  %2411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2410, i8* %2411, align 1, !tbaa !2450
  %2412 = lshr i32 %2389, 31
  %2413 = xor i32 %2409, %2412
  %2414 = add nuw nsw i32 %2413, %2412
  %2415 = icmp eq i32 %2414, 2
  %2416 = zext i1 %2415 to i8
  %2417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2416, i8* %2417, align 1, !tbaa !2451
  %2418 = load i64, i64* %PC
  %2419 = add i64 %2418, 125
  %2420 = load i64, i64* %PC
  %2421 = add i64 %2420, 6
  %2422 = load i64, i64* %PC
  %2423 = add i64 %2422, 6
  store i64 %2423, i64* %PC
  %2424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2425 = load i8, i8* %2424, align 1, !tbaa !2449
  %2426 = icmp eq i8 %2425, 0
  %2427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2428 = load i8, i8* %2427, align 1, !tbaa !2450
  %2429 = icmp ne i8 %2428, 0
  %2430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2431 = load i8, i8* %2430, align 1, !tbaa !2451
  %2432 = icmp ne i8 %2431, 0
  %2433 = xor i1 %2429, %2432
  %2434 = xor i1 %2433, true
  %2435 = and i1 %2426, %2434
  %2436 = zext i1 %2435 to i8
  store i8 %2436, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %2437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2438 = select i1 %2435, i64 %2419, i64 %2421
  store i64 %2438, i64* %2437, align 8, !tbaa !2428
  %2439 = load i8, i8* %BRANCH_TAKEN
  %2440 = icmp eq i8 %2439, 1
  br i1 %2440, label %block_400da3, label %block_400d2c

block_40097f:                                     ; preds = %block_4009c9, %block_400978
  %MEMORY.11 = phi %struct.Memory* [ %MEMORY.13, %block_400978 ], [ %MEMORY.9, %block_4009c9 ]
  %2441 = load i64, i64* %RBP
  %2442 = sub i64 %2441, 8
  %2443 = load i64, i64* %PC
  %2444 = add i64 %2443, 4
  store i64 %2444, i64* %PC
  %2445 = inttoptr i64 %2442 to i32*
  %2446 = load i32, i32* %2445
  %2447 = sub i32 %2446, 1
  %2448 = icmp ult i32 %2446, 1
  %2449 = zext i1 %2448 to i8
  %2450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2449, i8* %2450, align 1, !tbaa !2433
  %2451 = and i32 %2447, 255
  %2452 = call i32 @llvm.ctpop.i32(i32 %2451) #16
  %2453 = trunc i32 %2452 to i8
  %2454 = and i8 %2453, 1
  %2455 = xor i8 %2454, 1
  %2456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2455, i8* %2456, align 1, !tbaa !2447
  %2457 = xor i32 %2446, 1
  %2458 = xor i32 %2457, %2447
  %2459 = lshr i32 %2458, 4
  %2460 = trunc i32 %2459 to i8
  %2461 = and i8 %2460, 1
  %2462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2461, i8* %2462, align 1, !tbaa !2448
  %2463 = icmp eq i32 %2447, 0
  %2464 = zext i1 %2463 to i8
  %2465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2464, i8* %2465, align 1, !tbaa !2449
  %2466 = lshr i32 %2447, 31
  %2467 = trunc i32 %2466 to i8
  %2468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2467, i8* %2468, align 1, !tbaa !2450
  %2469 = lshr i32 %2446, 31
  %2470 = xor i32 %2466, %2469
  %2471 = add nuw nsw i32 %2470, %2469
  %2472 = icmp eq i32 %2471, 2
  %2473 = zext i1 %2472 to i8
  %2474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2473, i8* %2474, align 1, !tbaa !2451
  %2475 = load i64, i64* %PC
  %2476 = add i64 %2475, 89
  %2477 = load i64, i64* %PC
  %2478 = add i64 %2477, 6
  %2479 = load i64, i64* %PC
  %2480 = add i64 %2479, 6
  store i64 %2480, i64* %PC
  %2481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2482 = load i8, i8* %2481, align 1, !tbaa !2449
  %2483 = icmp eq i8 %2482, 0
  %2484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2485 = load i8, i8* %2484, align 1, !tbaa !2450
  %2486 = icmp ne i8 %2485, 0
  %2487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2488 = load i8, i8* %2487, align 1, !tbaa !2451
  %2489 = icmp ne i8 %2488, 0
  %2490 = xor i1 %2486, %2489
  %2491 = xor i1 %2490, true
  %2492 = and i1 %2483, %2491
  %2493 = zext i1 %2492 to i8
  store i8 %2493, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %2494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2495 = select i1 %2492, i64 %2476, i64 %2478
  store i64 %2495, i64* %2494, align 8, !tbaa !2428
  %2496 = load i8, i8* %BRANCH_TAKEN
  %2497 = icmp eq i8 %2496, 1
  br i1 %2497, label %block_4009dc, label %block_400989

block_400f17:                                     ; preds = %block_400f0d
  %2498 = load i64, i64* %RBP
  %2499 = sub i64 %2498, 12
  %2500 = load i64, i64* %PC
  %2501 = add i64 %2500, 7
  store i64 %2501, i64* %PC
  %2502 = inttoptr i64 %2499 to i32*
  store i32 0, i32* %2502
  br label %block_400f1e

block_400e2e:                                     ; preds = %block_400dd1
  %2503 = load i64, i64* %PC
  %2504 = add i64 %2503, 5
  %2505 = load i64, i64* %PC
  %2506 = add i64 %2505, 5
  store i64 %2506, i64* %PC
  %2507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2504, i64* %2507, align 8, !tbaa !2428
  %2508 = load i64, i64* %RBP
  %2509 = sub i64 %2508, 4
  %2510 = load i64, i64* %PC
  %2511 = add i64 %2510, 3
  store i64 %2511, i64* %PC
  %2512 = inttoptr i64 %2509 to i32*
  %2513 = load i32, i32* %2512
  %2514 = zext i32 %2513 to i64
  store i64 %2514, i64* %RAX, align 8, !tbaa !2428
  %2515 = load i64, i64* %RAX
  %2516 = load i64, i64* %PC
  %2517 = add i64 %2516, 3
  store i64 %2517, i64* %PC
  %2518 = trunc i64 %2515 to i32
  %2519 = add i32 1, %2518
  %2520 = zext i32 %2519 to i64
  store i64 %2520, i64* %RAX, align 8, !tbaa !2428
  %2521 = icmp ult i32 %2519, %2518
  %2522 = icmp ult i32 %2519, 1
  %2523 = or i1 %2521, %2522
  %2524 = zext i1 %2523 to i8
  %2525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2524, i8* %2525, align 1, !tbaa !2433
  %2526 = and i32 %2519, 255
  %2527 = call i32 @llvm.ctpop.i32(i32 %2526) #16
  %2528 = trunc i32 %2527 to i8
  %2529 = and i8 %2528, 1
  %2530 = xor i8 %2529, 1
  %2531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2530, i8* %2531, align 1, !tbaa !2447
  %2532 = xor i64 1, %2515
  %2533 = trunc i64 %2532 to i32
  %2534 = xor i32 %2533, %2519
  %2535 = lshr i32 %2534, 4
  %2536 = trunc i32 %2535 to i8
  %2537 = and i8 %2536, 1
  %2538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2537, i8* %2538, align 1, !tbaa !2448
  %2539 = icmp eq i32 %2519, 0
  %2540 = zext i1 %2539 to i8
  %2541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2540, i8* %2541, align 1, !tbaa !2449
  %2542 = lshr i32 %2519, 31
  %2543 = trunc i32 %2542 to i8
  %2544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2543, i8* %2544, align 1, !tbaa !2450
  %2545 = lshr i32 %2518, 31
  %2546 = xor i32 %2542, %2545
  %2547 = add nuw nsw i32 %2546, %2542
  %2548 = icmp eq i32 %2547, 2
  %2549 = zext i1 %2548 to i8
  %2550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2549, i8* %2550, align 1, !tbaa !2451
  %2551 = load i64, i64* %RBP
  %2552 = sub i64 %2551, 4
  %2553 = load i32, i32* %EAX
  %2554 = zext i32 %2553 to i64
  %2555 = load i64, i64* %PC
  %2556 = add i64 %2555, 3
  store i64 %2556, i64* %PC
  %2557 = inttoptr i64 %2552 to i32*
  store i32 %2553, i32* %2557
  %2558 = load i64, i64* %PC
  %2559 = sub i64 %2558, 124
  %2560 = load i64, i64* %PC
  %2561 = add i64 %2560, 5
  store i64 %2561, i64* %PC
  %2562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2559, i64* %2562, align 8, !tbaa !2428
  br label %block_400dc0

block_400d44:                                     ; preds = %block_400d3d, %block_400d4e
  %MEMORY.12 = phi %struct.Memory* [ %MEMORY.28, %block_400d3d ], [ %MEMORY.12, %block_400d4e ]
  %2563 = load i64, i64* %RBP
  %2564 = sub i64 %2563, 12
  %2565 = load i64, i64* %PC
  %2566 = add i64 %2565, 4
  store i64 %2566, i64* %PC
  %2567 = inttoptr i64 %2564 to i32*
  %2568 = load i32, i32* %2567
  %2569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2569, align 1, !tbaa !2433
  %2570 = and i32 %2568, 255
  %2571 = call i32 @llvm.ctpop.i32(i32 %2570) #16
  %2572 = trunc i32 %2571 to i8
  %2573 = and i8 %2572, 1
  %2574 = xor i8 %2573, 1
  %2575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2574, i8* %2575, align 1, !tbaa !2447
  %2576 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2576, align 1, !tbaa !2448
  %2577 = icmp eq i32 %2568, 0
  %2578 = zext i1 %2577 to i8
  %2579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2578, i8* %2579, align 1, !tbaa !2449
  %2580 = lshr i32 %2568, 31
  %2581 = trunc i32 %2580 to i8
  %2582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2581, i8* %2582, align 1, !tbaa !2450
  %2583 = lshr i32 %2568, 31
  %2584 = xor i32 %2580, %2583
  %2585 = add nuw nsw i32 %2584, %2583
  %2586 = icmp eq i32 %2585, 2
  %2587 = zext i1 %2586 to i8
  %2588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2587, i8* %2588, align 1, !tbaa !2451
  %2589 = load i64, i64* %PC
  %2590 = add i64 %2589, 53
  %2591 = load i64, i64* %PC
  %2592 = add i64 %2591, 6
  %2593 = load i64, i64* %PC
  %2594 = add i64 %2593, 6
  store i64 %2594, i64* %PC
  %2595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2596 = load i8, i8* %2595, align 1, !tbaa !2449
  %2597 = icmp eq i8 %2596, 0
  %2598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2599 = load i8, i8* %2598, align 1, !tbaa !2450
  %2600 = icmp ne i8 %2599, 0
  %2601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2602 = load i8, i8* %2601, align 1, !tbaa !2451
  %2603 = icmp ne i8 %2602, 0
  %2604 = xor i1 %2600, %2603
  %2605 = xor i1 %2604, true
  %2606 = and i1 %2597, %2605
  %2607 = zext i1 %2606 to i8
  store i8 %2607, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %2608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2609 = select i1 %2606, i64 %2590, i64 %2592
  store i64 %2609, i64* %2608, align 8, !tbaa !2428
  %2610 = load i8, i8* %BRANCH_TAKEN
  %2611 = icmp eq i8 %2610, 1
  br i1 %2611, label %block_400d7d, label %block_400d4e

block_400b2b:                                     ; preds = %block_400aaa
  %2612 = load i64, i64* %PC
  %2613 = add i64 %2612, 11
  store i64 %2613, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 8) to i32*)
  %2614 = load i64, i64* %PC
  %2615 = add i64 %2614, 11
  store i64 %2615, i64* %PC
  store i32 88, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 8) to i32*)
  %2616 = load i64, i64* %RBP
  %2617 = sub i64 %2616, 4
  %2618 = load i64, i64* %PC
  %2619 = add i64 %2618, 7
  store i64 %2619, i64* %PC
  %2620 = inttoptr i64 %2617 to i32*
  store i32 0, i32* %2620
  br label %block_400b48

block_400912:                                     ; preds = %block_400908
  %2621 = sub i64 %6126, 16
  %2622 = load i64, i64* %PC
  %2623 = add i64 %2622, 7
  store i64 %2623, i64* %PC
  %2624 = inttoptr i64 %2621 to i32*
  store i32 0, i32* %2624
  br label %block_400919

block_40096e:                                     ; preds = %block_400967, %block_4009dc
  %MEMORY.13 = phi %struct.Memory* [ %MEMORY.32, %block_400967 ], [ %MEMORY.11, %block_4009dc ]
  %2625 = load i64, i64* %RBP
  %2626 = sub i64 %2625, 4
  %2627 = load i64, i64* %PC
  %2628 = add i64 %2627, 4
  store i64 %2628, i64* %PC
  %2629 = inttoptr i64 %2626 to i32*
  %2630 = load i32, i32* %2629
  %2631 = sub i32 %2630, 3
  %2632 = icmp ult i32 %2630, 3
  %2633 = zext i1 %2632 to i8
  %2634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2633, i8* %2634, align 1, !tbaa !2433
  %2635 = and i32 %2631, 255
  %2636 = call i32 @llvm.ctpop.i32(i32 %2635) #16
  %2637 = trunc i32 %2636 to i8
  %2638 = and i8 %2637, 1
  %2639 = xor i8 %2638, 1
  %2640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2639, i8* %2640, align 1, !tbaa !2447
  %2641 = xor i32 %2630, 3
  %2642 = xor i32 %2641, %2631
  %2643 = lshr i32 %2642, 4
  %2644 = trunc i32 %2643 to i8
  %2645 = and i8 %2644, 1
  %2646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2645, i8* %2646, align 1, !tbaa !2448
  %2647 = icmp eq i32 %2631, 0
  %2648 = zext i1 %2647 to i8
  %2649 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2648, i8* %2649, align 1, !tbaa !2449
  %2650 = lshr i32 %2631, 31
  %2651 = trunc i32 %2650 to i8
  %2652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2651, i8* %2652, align 1, !tbaa !2450
  %2653 = lshr i32 %2630, 31
  %2654 = xor i32 %2650, %2653
  %2655 = add nuw nsw i32 %2654, %2653
  %2656 = icmp eq i32 %2655, 2
  %2657 = zext i1 %2656 to i8
  %2658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2657, i8* %2658, align 1, !tbaa !2451
  %2659 = load i64, i64* %PC
  %2660 = add i64 %2659, 125
  %2661 = load i64, i64* %PC
  %2662 = add i64 %2661, 6
  %2663 = load i64, i64* %PC
  %2664 = add i64 %2663, 6
  store i64 %2664, i64* %PC
  %2665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2666 = load i8, i8* %2665, align 1, !tbaa !2449
  %2667 = icmp eq i8 %2666, 0
  %2668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2669 = load i8, i8* %2668, align 1, !tbaa !2450
  %2670 = icmp ne i8 %2669, 0
  %2671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2672 = load i8, i8* %2671, align 1, !tbaa !2451
  %2673 = icmp ne i8 %2672, 0
  %2674 = xor i1 %2670, %2673
  %2675 = xor i1 %2674, true
  %2676 = and i1 %2667, %2675
  %2677 = zext i1 %2676 to i8
  store i8 %2677, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %2678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2679 = select i1 %2676, i64 %2660, i64 %2662
  store i64 %2679, i64* %2678, align 8, !tbaa !2428
  %2680 = load i8, i8* %BRANCH_TAKEN
  %2681 = icmp eq i8 %2680, 1
  br i1 %2681, label %block_4009ef, label %block_400978

block_400f06:                                     ; preds = %block_400efc
  %2682 = load i64, i64* %RBP
  %2683 = sub i64 %2682, 8
  %2684 = load i64, i64* %PC
  %2685 = add i64 %2684, 7
  store i64 %2685, i64* %PC
  %2686 = inttoptr i64 %2683 to i32*
  store i32 0, i32* %2686
  br label %block_400f0d

block_400f1e:                                     ; preds = %block_400f17, %block_400f28
  %MEMORY.14 = phi %struct.Memory* [ %MEMORY.39, %block_400f17 ], [ %MEMORY.14, %block_400f28 ]
  %2687 = load i64, i64* %RBP
  %2688 = sub i64 %2687, 12
  %2689 = load i64, i64* %PC
  %2690 = add i64 %2689, 4
  store i64 %2690, i64* %PC
  %2691 = inttoptr i64 %2688 to i32*
  %2692 = load i32, i32* %2691
  %2693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2693, align 1, !tbaa !2433
  %2694 = and i32 %2692, 255
  %2695 = call i32 @llvm.ctpop.i32(i32 %2694) #16
  %2696 = trunc i32 %2695 to i8
  %2697 = and i8 %2696, 1
  %2698 = xor i8 %2697, 1
  %2699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2698, i8* %2699, align 1, !tbaa !2447
  %2700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2700, align 1, !tbaa !2448
  %2701 = icmp eq i32 %2692, 0
  %2702 = zext i1 %2701 to i8
  %2703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2702, i8* %2703, align 1, !tbaa !2449
  %2704 = lshr i32 %2692, 31
  %2705 = trunc i32 %2704 to i8
  %2706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2705, i8* %2706, align 1, !tbaa !2450
  %2707 = lshr i32 %2692, 31
  %2708 = xor i32 %2704, %2707
  %2709 = add nuw nsw i32 %2708, %2707
  %2710 = icmp eq i32 %2709, 2
  %2711 = zext i1 %2710 to i8
  %2712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2711, i8* %2712, align 1, !tbaa !2451
  %2713 = load i64, i64* %PC
  %2714 = add i64 %2713, 53
  %2715 = load i64, i64* %PC
  %2716 = add i64 %2715, 6
  %2717 = load i64, i64* %PC
  %2718 = add i64 %2717, 6
  store i64 %2718, i64* %PC
  %2719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2720 = load i8, i8* %2719, align 1, !tbaa !2449
  %2721 = icmp eq i8 %2720, 0
  %2722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2723 = load i8, i8* %2722, align 1, !tbaa !2450
  %2724 = icmp ne i8 %2723, 0
  %2725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2726 = load i8, i8* %2725, align 1, !tbaa !2451
  %2727 = icmp ne i8 %2726, 0
  %2728 = xor i1 %2724, %2727
  %2729 = xor i1 %2728, true
  %2730 = and i1 %2721, %2729
  %2731 = zext i1 %2730 to i8
  store i8 %2731, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %2732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2733 = select i1 %2730, i64 %2714, i64 %2716
  store i64 %2733, i64* %2732, align 8, !tbaa !2428
  %2734 = load i8, i8* %BRANCH_TAKEN
  %2735 = icmp eq i8 %2734, 1
  br i1 %2735, label %block_400f57, label %block_400f28

block_400d05:                                     ; preds = %block_400c84
  %2736 = load i64, i64* %PC
  %2737 = add i64 %2736, 11
  store i64 %2737, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 20) to i32*)
  %2738 = load i64, i64* %PC
  %2739 = add i64 %2738, 11
  store i64 %2739, i64* %PC
  store i32 200, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 20) to i32*)
  %2740 = load i64, i64* %RBP
  %2741 = sub i64 %2740, 4
  %2742 = load i64, i64* %PC
  %2743 = add i64 %2742, 7
  store i64 %2743, i64* %PC
  %2744 = inttoptr i64 %2741 to i32*
  store i32 0, i32* %2744
  br label %block_400d22

block_400efc:                                     ; preds = %block_400edf, %block_400f6a
  %MEMORY.15 = phi %struct.Memory* [ %MEMORY.30, %block_400edf ], [ %MEMORY.39, %block_400f6a ]
  %2745 = load i64, i64* %RBP
  %2746 = sub i64 %2745, 4
  %2747 = load i64, i64* %PC
  %2748 = add i64 %2747, 4
  store i64 %2748, i64* %PC
  %2749 = inttoptr i64 %2746 to i32*
  %2750 = load i32, i32* %2749
  %2751 = sub i32 %2750, 1
  %2752 = icmp ult i32 %2750, 1
  %2753 = zext i1 %2752 to i8
  %2754 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2753, i8* %2754, align 1, !tbaa !2433
  %2755 = and i32 %2751, 255
  %2756 = call i32 @llvm.ctpop.i32(i32 %2755) #16
  %2757 = trunc i32 %2756 to i8
  %2758 = and i8 %2757, 1
  %2759 = xor i8 %2758, 1
  %2760 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2759, i8* %2760, align 1, !tbaa !2447
  %2761 = xor i32 %2750, 1
  %2762 = xor i32 %2761, %2751
  %2763 = lshr i32 %2762, 4
  %2764 = trunc i32 %2763 to i8
  %2765 = and i8 %2764, 1
  %2766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2765, i8* %2766, align 1, !tbaa !2448
  %2767 = icmp eq i32 %2751, 0
  %2768 = zext i1 %2767 to i8
  %2769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2768, i8* %2769, align 1, !tbaa !2449
  %2770 = lshr i32 %2751, 31
  %2771 = trunc i32 %2770 to i8
  %2772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2771, i8* %2772, align 1, !tbaa !2450
  %2773 = lshr i32 %2750, 31
  %2774 = xor i32 %2770, %2773
  %2775 = add nuw nsw i32 %2774, %2773
  %2776 = icmp eq i32 %2775, 2
  %2777 = zext i1 %2776 to i8
  %2778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2777, i8* %2778, align 1, !tbaa !2451
  %2779 = load i64, i64* %PC
  %2780 = add i64 %2779, 125
  %2781 = load i64, i64* %PC
  %2782 = add i64 %2781, 6
  %2783 = load i64, i64* %PC
  %2784 = add i64 %2783, 6
  store i64 %2784, i64* %PC
  %2785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2786 = load i8, i8* %2785, align 1, !tbaa !2449
  %2787 = icmp eq i8 %2786, 0
  %2788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2789 = load i8, i8* %2788, align 1, !tbaa !2450
  %2790 = icmp ne i8 %2789, 0
  %2791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2792 = load i8, i8* %2791, align 1, !tbaa !2451
  %2793 = icmp ne i8 %2792, 0
  %2794 = xor i1 %2790, %2793
  %2795 = xor i1 %2794, true
  %2796 = and i1 %2787, %2795
  %2797 = zext i1 %2796 to i8
  store i8 %2797, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %2798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2799 = select i1 %2796, i64 %2780, i64 %2782
  store i64 %2799, i64* %2798, align 8, !tbaa !2428
  %2800 = load i8, i8* %BRANCH_TAKEN
  %2801 = icmp eq i8 %2800, 1
  br i1 %2801, label %block_400f7d, label %block_400f06

block_400edf:                                     ; preds = %block_400e5e
  %2802 = load i64, i64* %PC
  %2803 = add i64 %2802, 11
  store i64 %2803, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 32) to i32*)
  %2804 = load i64, i64* %PC
  %2805 = add i64 %2804, 11
  store i64 %2805, i64* %PC
  store i32 128, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 32) to i32*)
  %2806 = load i64, i64* %RBP
  %2807 = sub i64 %2806, 4
  %2808 = load i64, i64* %PC
  %2809 = add i64 %2808, 7
  store i64 %2809, i64* %PC
  %2810 = inttoptr i64 %2807 to i32*
  store i32 0, i32* %2810
  br label %block_400efc

block_4010f8:                                     ; preds = %block_4010f1, %block_401102
  %MEMORY.16 = phi %struct.Memory* [ %MEMORY.44, %block_4010f1 ], [ %MEMORY.16, %block_401102 ]
  %2811 = load i64, i64* %RBP
  %2812 = sub i64 %2811, 12
  %2813 = load i64, i64* %PC
  %2814 = add i64 %2813, 4
  store i64 %2814, i64* %PC
  %2815 = inttoptr i64 %2812 to i32*
  %2816 = load i32, i32* %2815
  %2817 = sub i32 %2816, 1
  %2818 = icmp ult i32 %2816, 1
  %2819 = zext i1 %2818 to i8
  %2820 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2819, i8* %2820, align 1, !tbaa !2433
  %2821 = and i32 %2817, 255
  %2822 = call i32 @llvm.ctpop.i32(i32 %2821) #16
  %2823 = trunc i32 %2822 to i8
  %2824 = and i8 %2823, 1
  %2825 = xor i8 %2824, 1
  %2826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2825, i8* %2826, align 1, !tbaa !2447
  %2827 = xor i32 %2816, 1
  %2828 = xor i32 %2827, %2817
  %2829 = lshr i32 %2828, 4
  %2830 = trunc i32 %2829 to i8
  %2831 = and i8 %2830, 1
  %2832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2831, i8* %2832, align 1, !tbaa !2448
  %2833 = icmp eq i32 %2817, 0
  %2834 = zext i1 %2833 to i8
  %2835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2834, i8* %2835, align 1, !tbaa !2449
  %2836 = lshr i32 %2817, 31
  %2837 = trunc i32 %2836 to i8
  %2838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2837, i8* %2838, align 1, !tbaa !2450
  %2839 = lshr i32 %2816, 31
  %2840 = xor i32 %2836, %2839
  %2841 = add nuw nsw i32 %2840, %2839
  %2842 = icmp eq i32 %2841, 2
  %2843 = zext i1 %2842 to i8
  %2844 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2843, i8* %2844, align 1, !tbaa !2451
  %2845 = load i64, i64* %PC
  %2846 = add i64 %2845, 53
  %2847 = load i64, i64* %PC
  %2848 = add i64 %2847, 6
  %2849 = load i64, i64* %PC
  %2850 = add i64 %2849, 6
  store i64 %2850, i64* %PC
  %2851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2852 = load i8, i8* %2851, align 1, !tbaa !2449
  %2853 = icmp eq i8 %2852, 0
  %2854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2855 = load i8, i8* %2854, align 1, !tbaa !2450
  %2856 = icmp ne i8 %2855, 0
  %2857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2858 = load i8, i8* %2857, align 1, !tbaa !2451
  %2859 = icmp ne i8 %2858, 0
  %2860 = xor i1 %2856, %2859
  %2861 = xor i1 %2860, true
  %2862 = and i1 %2853, %2861
  %2863 = zext i1 %2862 to i8
  store i8 %2863, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %2864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2865 = select i1 %2862, i64 %2846, i64 %2848
  store i64 %2865, i64* %2864, align 8, !tbaa !2428
  %2866 = load i8, i8* %BRANCH_TAKEN
  %2867 = icmp eq i8 %2866, 1
  br i1 %2867, label %block_401131, label %block_401102

block_400978:                                     ; preds = %block_40096e
  %2868 = load i64, i64* %RBP
  %2869 = sub i64 %2868, 8
  %2870 = load i64, i64* %PC
  %2871 = add i64 %2870, 7
  store i64 %2871, i64* %PC
  %2872 = inttoptr i64 %2869 to i32*
  store i32 0, i32* %2872
  br label %block_40097f

block_400cf2:                                     ; preds = %block_400c95
  %2873 = load i64, i64* %PC
  %2874 = add i64 %2873, 5
  %2875 = load i64, i64* %PC
  %2876 = add i64 %2875, 5
  store i64 %2876, i64* %PC
  %2877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2874, i64* %2877, align 8, !tbaa !2428
  %2878 = load i64, i64* %RBP
  %2879 = sub i64 %2878, 4
  %2880 = load i64, i64* %PC
  %2881 = add i64 %2880, 3
  store i64 %2881, i64* %PC
  %2882 = inttoptr i64 %2879 to i32*
  %2883 = load i32, i32* %2882
  %2884 = zext i32 %2883 to i64
  store i64 %2884, i64* %RAX, align 8, !tbaa !2428
  %2885 = load i64, i64* %RAX
  %2886 = load i64, i64* %PC
  %2887 = add i64 %2886, 3
  store i64 %2887, i64* %PC
  %2888 = trunc i64 %2885 to i32
  %2889 = add i32 1, %2888
  %2890 = zext i32 %2889 to i64
  store i64 %2890, i64* %RAX, align 8, !tbaa !2428
  %2891 = icmp ult i32 %2889, %2888
  %2892 = icmp ult i32 %2889, 1
  %2893 = or i1 %2891, %2892
  %2894 = zext i1 %2893 to i8
  %2895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2894, i8* %2895, align 1, !tbaa !2433
  %2896 = and i32 %2889, 255
  %2897 = call i32 @llvm.ctpop.i32(i32 %2896) #16
  %2898 = trunc i32 %2897 to i8
  %2899 = and i8 %2898, 1
  %2900 = xor i8 %2899, 1
  %2901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2900, i8* %2901, align 1, !tbaa !2447
  %2902 = xor i64 1, %2885
  %2903 = trunc i64 %2902 to i32
  %2904 = xor i32 %2903, %2889
  %2905 = lshr i32 %2904, 4
  %2906 = trunc i32 %2905 to i8
  %2907 = and i8 %2906, 1
  %2908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2907, i8* %2908, align 1, !tbaa !2448
  %2909 = icmp eq i32 %2889, 0
  %2910 = zext i1 %2909 to i8
  %2911 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2910, i8* %2911, align 1, !tbaa !2449
  %2912 = lshr i32 %2889, 31
  %2913 = trunc i32 %2912 to i8
  %2914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2913, i8* %2914, align 1, !tbaa !2450
  %2915 = lshr i32 %2888, 31
  %2916 = xor i32 %2912, %2915
  %2917 = add nuw nsw i32 %2916, %2912
  %2918 = icmp eq i32 %2917, 2
  %2919 = zext i1 %2918 to i8
  %2920 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2919, i8* %2920, align 1, !tbaa !2451
  %2921 = load i64, i64* %RBP
  %2922 = sub i64 %2921, 4
  %2923 = load i32, i32* %EAX
  %2924 = zext i32 %2923 to i64
  %2925 = load i64, i64* %PC
  %2926 = add i64 %2925, 3
  store i64 %2926, i64* %PC
  %2927 = inttoptr i64 %2922 to i32*
  store i32 %2923, i32* %2927
  %2928 = load i64, i64* %PC
  %2929 = sub i64 %2928, 124
  %2930 = load i64, i64* %PC
  %2931 = add i64 %2930, 5
  store i64 %2931, i64* %PC
  %2932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2929, i64* %2932, align 8, !tbaa !2428
  br label %block_400c84

block_4008ee:                                     ; preds = %block_400891
  %2933 = load i64, i64* %PC
  %2934 = add i64 %2933, 5
  %2935 = load i64, i64* %PC
  %2936 = add i64 %2935, 5
  store i64 %2936, i64* %PC
  %2937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2934, i64* %2937, align 8, !tbaa !2428
  %2938 = load i64, i64* %RBP
  %2939 = sub i64 %2938, 4
  %2940 = load i64, i64* %PC
  %2941 = add i64 %2940, 3
  store i64 %2941, i64* %PC
  %2942 = inttoptr i64 %2939 to i32*
  %2943 = load i32, i32* %2942
  %2944 = zext i32 %2943 to i64
  store i64 %2944, i64* %RAX, align 8, !tbaa !2428
  %2945 = load i64, i64* %RAX
  %2946 = load i64, i64* %PC
  %2947 = add i64 %2946, 3
  store i64 %2947, i64* %PC
  %2948 = trunc i64 %2945 to i32
  %2949 = add i32 1, %2948
  %2950 = zext i32 %2949 to i64
  store i64 %2950, i64* %RAX, align 8, !tbaa !2428
  %2951 = icmp ult i32 %2949, %2948
  %2952 = icmp ult i32 %2949, 1
  %2953 = or i1 %2951, %2952
  %2954 = zext i1 %2953 to i8
  %2955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2954, i8* %2955, align 1, !tbaa !2433
  %2956 = and i32 %2949, 255
  %2957 = call i32 @llvm.ctpop.i32(i32 %2956) #16
  %2958 = trunc i32 %2957 to i8
  %2959 = and i8 %2958, 1
  %2960 = xor i8 %2959, 1
  %2961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2960, i8* %2961, align 1, !tbaa !2447
  %2962 = xor i64 1, %2945
  %2963 = trunc i64 %2962 to i32
  %2964 = xor i32 %2963, %2949
  %2965 = lshr i32 %2964, 4
  %2966 = trunc i32 %2965 to i8
  %2967 = and i8 %2966, 1
  %2968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2967, i8* %2968, align 1, !tbaa !2448
  %2969 = icmp eq i32 %2949, 0
  %2970 = zext i1 %2969 to i8
  %2971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2970, i8* %2971, align 1, !tbaa !2449
  %2972 = lshr i32 %2949, 31
  %2973 = trunc i32 %2972 to i8
  %2974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2973, i8* %2974, align 1, !tbaa !2450
  %2975 = lshr i32 %2948, 31
  %2976 = xor i32 %2972, %2975
  %2977 = add nuw nsw i32 %2976, %2972
  %2978 = icmp eq i32 %2977, 2
  %2979 = zext i1 %2978 to i8
  %2980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2979, i8* %2980, align 1, !tbaa !2451
  %2981 = load i64, i64* %RBP
  %2982 = sub i64 %2981, 4
  %2983 = load i32, i32* %EAX
  %2984 = zext i32 %2983 to i64
  %2985 = load i64, i64* %PC
  %2986 = add i64 %2985, 3
  store i64 %2986, i64* %PC
  %2987 = inttoptr i64 %2982 to i32*
  store i32 %2983, i32* %2987
  %2988 = load i64, i64* %PC
  %2989 = sub i64 %2988, 124
  %2990 = load i64, i64* %PC
  %2991 = add i64 %2990, 5
  store i64 %2991, i64* %PC
  %2992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2989, i64* %2992, align 8, !tbaa !2428
  br label %block_400880

block_401227:                                     ; preds = %block_401216
  %2993 = load i64, i64* %PC
  %2994 = add i64 %2993, 10
  store i64 %2994, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401340__rodata_type* @seg_401340__rodata to i64), i64 41), i64* %RDI, align 8, !tbaa !2428
  %2995 = load i64, i64* %PC
  %2996 = add i64 %2995, 2
  store i64 %2996, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %2997 = load i64, i64* %PC
  %2998 = sub i64 %2997, 3651
  %2999 = load i64, i64* %PC
  %3000 = add i64 %2999, 5
  %3001 = load i64, i64* %PC
  %3002 = add i64 %3001, 5
  store i64 %3002, i64* %PC
  %3003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3004 = load i64, i64* %3003, align 8, !tbaa !2428
  %3005 = add i64 %3004, -8
  %3006 = inttoptr i64 %3005 to i64*
  store i64 %3000, i64* %3006
  store i64 %3005, i64* %3003, align 8, !tbaa !2428
  %3007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2998, i64* %3007, align 8, !tbaa !2428
  %3008 = load i64, i64* %PC
  %3009 = call %struct.Memory* @ext_619238_printf(%struct.State* %0, i64 %3008, %struct.Memory* %461)
  %3010 = load i64, i64* %RBP
  %3011 = sub i64 %3010, 28
  %3012 = load i32, i32* %EAX
  %3013 = zext i32 %3012 to i64
  %3014 = load i64, i64* %PC
  %3015 = add i64 %3014, 3
  store i64 %3015, i64* %PC
  %3016 = inttoptr i64 %3011 to i32*
  store i32 %3012, i32* %3016
  br label %block_40123b

block_401144:                                     ; preds = %block_4010e7
  %3017 = load i64, i64* %PC
  %3018 = add i64 %3017, 5
  %3019 = load i64, i64* %PC
  %3020 = add i64 %3019, 5
  store i64 %3020, i64* %PC
  %3021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3018, i64* %3021, align 8, !tbaa !2428
  %3022 = load i64, i64* %RBP
  %3023 = sub i64 %3022, 4
  %3024 = load i64, i64* %PC
  %3025 = add i64 %3024, 3
  store i64 %3025, i64* %PC
  %3026 = inttoptr i64 %3023 to i32*
  %3027 = load i32, i32* %3026
  %3028 = zext i32 %3027 to i64
  store i64 %3028, i64* %RAX, align 8, !tbaa !2428
  %3029 = load i64, i64* %RAX
  %3030 = load i64, i64* %PC
  %3031 = add i64 %3030, 3
  store i64 %3031, i64* %PC
  %3032 = trunc i64 %3029 to i32
  %3033 = add i32 1, %3032
  %3034 = zext i32 %3033 to i64
  store i64 %3034, i64* %RAX, align 8, !tbaa !2428
  %3035 = icmp ult i32 %3033, %3032
  %3036 = icmp ult i32 %3033, 1
  %3037 = or i1 %3035, %3036
  %3038 = zext i1 %3037 to i8
  %3039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3038, i8* %3039, align 1, !tbaa !2433
  %3040 = and i32 %3033, 255
  %3041 = call i32 @llvm.ctpop.i32(i32 %3040) #16
  %3042 = trunc i32 %3041 to i8
  %3043 = and i8 %3042, 1
  %3044 = xor i8 %3043, 1
  %3045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3044, i8* %3045, align 1, !tbaa !2447
  %3046 = xor i64 1, %3029
  %3047 = trunc i64 %3046 to i32
  %3048 = xor i32 %3047, %3033
  %3049 = lshr i32 %3048, 4
  %3050 = trunc i32 %3049 to i8
  %3051 = and i8 %3050, 1
  %3052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3051, i8* %3052, align 1, !tbaa !2448
  %3053 = icmp eq i32 %3033, 0
  %3054 = zext i1 %3053 to i8
  %3055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3054, i8* %3055, align 1, !tbaa !2449
  %3056 = lshr i32 %3033, 31
  %3057 = trunc i32 %3056 to i8
  %3058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3057, i8* %3058, align 1, !tbaa !2450
  %3059 = lshr i32 %3032, 31
  %3060 = xor i32 %3056, %3059
  %3061 = add nuw nsw i32 %3060, %3056
  %3062 = icmp eq i32 %3061, 2
  %3063 = zext i1 %3062 to i8
  %3064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3063, i8* %3064, align 1, !tbaa !2451
  %3065 = load i64, i64* %RBP
  %3066 = sub i64 %3065, 4
  %3067 = load i32, i32* %EAX
  %3068 = zext i32 %3067 to i64
  %3069 = load i64, i64* %PC
  %3070 = add i64 %3069, 3
  store i64 %3070, i64* %PC
  %3071 = inttoptr i64 %3066 to i32*
  store i32 %3067, i32* %3071
  %3072 = load i64, i64* %PC
  %3073 = sub i64 %3072, 124
  %3074 = load i64, i64* %PC
  %3075 = add i64 %3074, 5
  store i64 %3075, i64* %PC
  %3076 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3073, i64* %3076, align 8, !tbaa !2428
  br label %block_4010d6

block_400fab:                                     ; preds = %block_400fa4, %block_400ff5
  %MEMORY.17 = phi %struct.Memory* [ %MEMORY.5, %block_400fa4 ], [ %MEMORY.3, %block_400ff5 ]
  %3077 = load i64, i64* %RBP
  %3078 = sub i64 %3077, 8
  %3079 = load i64, i64* %PC
  %3080 = add i64 %3079, 4
  store i64 %3080, i64* %PC
  %3081 = inttoptr i64 %3078 to i32*
  %3082 = load i32, i32* %3081
  %3083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3083, align 1, !tbaa !2433
  %3084 = and i32 %3082, 255
  %3085 = call i32 @llvm.ctpop.i32(i32 %3084) #16
  %3086 = trunc i32 %3085 to i8
  %3087 = and i8 %3086, 1
  %3088 = xor i8 %3087, 1
  %3089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3088, i8* %3089, align 1, !tbaa !2447
  %3090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3090, align 1, !tbaa !2448
  %3091 = icmp eq i32 %3082, 0
  %3092 = zext i1 %3091 to i8
  %3093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3092, i8* %3093, align 1, !tbaa !2449
  %3094 = lshr i32 %3082, 31
  %3095 = trunc i32 %3094 to i8
  %3096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3095, i8* %3096, align 1, !tbaa !2450
  %3097 = lshr i32 %3082, 31
  %3098 = xor i32 %3094, %3097
  %3099 = add nuw nsw i32 %3098, %3097
  %3100 = icmp eq i32 %3099, 2
  %3101 = zext i1 %3100 to i8
  %3102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3101, i8* %3102, align 1, !tbaa !2451
  %3103 = load i64, i64* %PC
  %3104 = add i64 %3103, 89
  %3105 = load i64, i64* %PC
  %3106 = add i64 %3105, 6
  %3107 = load i64, i64* %PC
  %3108 = add i64 %3107, 6
  store i64 %3108, i64* %PC
  %3109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3110 = load i8, i8* %3109, align 1, !tbaa !2449
  %3111 = icmp eq i8 %3110, 0
  %3112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3113 = load i8, i8* %3112, align 1, !tbaa !2450
  %3114 = icmp ne i8 %3113, 0
  %3115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3116 = load i8, i8* %3115, align 1, !tbaa !2451
  %3117 = icmp ne i8 %3116, 0
  %3118 = xor i1 %3114, %3117
  %3119 = xor i1 %3118, true
  %3120 = and i1 %3111, %3119
  %3121 = zext i1 %3120 to i8
  store i8 %3121, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %3122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3123 = select i1 %3120, i64 %3104, i64 %3106
  store i64 %3123, i64* %3122, align 8, !tbaa !2428
  %3124 = load i8, i8* %BRANCH_TAKEN
  %3125 = icmp eq i8 %3124, 1
  br i1 %3125, label %block_401008, label %block_400fb5

block_400cdf:                                     ; preds = %block_400ca6
  %3126 = load i64, i64* %PC
  %3127 = add i64 %3126, 5
  %3128 = load i64, i64* %PC
  %3129 = add i64 %3128, 5
  store i64 %3129, i64* %PC
  %3130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3127, i64* %3130, align 8, !tbaa !2428
  %3131 = load i64, i64* %RBP
  %3132 = sub i64 %3131, 8
  %3133 = load i64, i64* %PC
  %3134 = add i64 %3133, 3
  store i64 %3134, i64* %PC
  %3135 = inttoptr i64 %3132 to i32*
  %3136 = load i32, i32* %3135
  %3137 = zext i32 %3136 to i64
  store i64 %3137, i64* %RAX, align 8, !tbaa !2428
  %3138 = load i64, i64* %RAX
  %3139 = load i64, i64* %PC
  %3140 = add i64 %3139, 3
  store i64 %3140, i64* %PC
  %3141 = trunc i64 %3138 to i32
  %3142 = add i32 1, %3141
  %3143 = zext i32 %3142 to i64
  store i64 %3143, i64* %RAX, align 8, !tbaa !2428
  %3144 = icmp ult i32 %3142, %3141
  %3145 = icmp ult i32 %3142, 1
  %3146 = or i1 %3144, %3145
  %3147 = zext i1 %3146 to i8
  %3148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3147, i8* %3148, align 1, !tbaa !2433
  %3149 = and i32 %3142, 255
  %3150 = call i32 @llvm.ctpop.i32(i32 %3149) #16
  %3151 = trunc i32 %3150 to i8
  %3152 = and i8 %3151, 1
  %3153 = xor i8 %3152, 1
  %3154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3153, i8* %3154, align 1, !tbaa !2447
  %3155 = xor i64 1, %3138
  %3156 = trunc i64 %3155 to i32
  %3157 = xor i32 %3156, %3142
  %3158 = lshr i32 %3157, 4
  %3159 = trunc i32 %3158 to i8
  %3160 = and i8 %3159, 1
  %3161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3160, i8* %3161, align 1, !tbaa !2448
  %3162 = icmp eq i32 %3142, 0
  %3163 = zext i1 %3162 to i8
  %3164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3163, i8* %3164, align 1, !tbaa !2449
  %3165 = lshr i32 %3142, 31
  %3166 = trunc i32 %3165 to i8
  %3167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3166, i8* %3167, align 1, !tbaa !2450
  %3168 = lshr i32 %3141, 31
  %3169 = xor i32 %3165, %3168
  %3170 = add nuw nsw i32 %3169, %3165
  %3171 = icmp eq i32 %3170, 2
  %3172 = zext i1 %3171 to i8
  %3173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3172, i8* %3173, align 1, !tbaa !2451
  %3174 = load i64, i64* %RBP
  %3175 = sub i64 %3174, 8
  %3176 = load i32, i32* %EAX
  %3177 = zext i32 %3176 to i64
  %3178 = load i64, i64* %PC
  %3179 = add i64 %3178, 3
  store i64 %3179, i64* %PC
  %3180 = inttoptr i64 %3175 to i32*
  store i32 %3176, i32* %3180
  %3181 = load i64, i64* %PC
  %3182 = sub i64 %3181, 88
  %3183 = load i64, i64* %PC
  %3184 = add i64 %3183, 5
  store i64 %3184, i64* %PC
  %3185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3182, i64* %3185, align 8, !tbaa !2428
  br label %block_400c95

block_400dc0:                                     ; preds = %block_400e2e, %block_400da3
  %MEMORY.18 = phi %struct.Memory* [ %MEMORY.10, %block_400da3 ], [ %MEMORY.42, %block_400e2e ]
  %3186 = load i64, i64* %RBP
  %3187 = sub i64 %3186, 4
  %3188 = load i64, i64* %PC
  %3189 = add i64 %3188, 4
  store i64 %3189, i64* %PC
  %3190 = inttoptr i64 %3187 to i32*
  %3191 = load i32, i32* %3190
  %3192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3192, align 1, !tbaa !2433
  %3193 = and i32 %3191, 255
  %3194 = call i32 @llvm.ctpop.i32(i32 %3193) #16
  %3195 = trunc i32 %3194 to i8
  %3196 = and i8 %3195, 1
  %3197 = xor i8 %3196, 1
  %3198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3197, i8* %3198, align 1, !tbaa !2447
  %3199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3199, align 1, !tbaa !2448
  %3200 = icmp eq i32 %3191, 0
  %3201 = zext i1 %3200 to i8
  %3202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3201, i8* %3202, align 1, !tbaa !2449
  %3203 = lshr i32 %3191, 31
  %3204 = trunc i32 %3203 to i8
  %3205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3204, i8* %3205, align 1, !tbaa !2450
  %3206 = lshr i32 %3191, 31
  %3207 = xor i32 %3203, %3206
  %3208 = add nuw nsw i32 %3207, %3206
  %3209 = icmp eq i32 %3208, 2
  %3210 = zext i1 %3209 to i8
  %3211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3210, i8* %3211, align 1, !tbaa !2451
  %3212 = load i64, i64* %PC
  %3213 = add i64 %3212, 125
  %3214 = load i64, i64* %PC
  %3215 = add i64 %3214, 6
  %3216 = load i64, i64* %PC
  %3217 = add i64 %3216, 6
  store i64 %3217, i64* %PC
  %3218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3219 = load i8, i8* %3218, align 1, !tbaa !2449
  %3220 = icmp eq i8 %3219, 0
  %3221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3222 = load i8, i8* %3221, align 1, !tbaa !2450
  %3223 = icmp ne i8 %3222, 0
  %3224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3225 = load i8, i8* %3224, align 1, !tbaa !2451
  %3226 = icmp ne i8 %3225, 0
  %3227 = xor i1 %3223, %3226
  %3228 = xor i1 %3227, true
  %3229 = and i1 %3220, %3228
  %3230 = zext i1 %3229 to i8
  store i8 %3230, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %3231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3232 = select i1 %3229, i64 %3213, i64 %3215
  store i64 %3232, i64* %3231, align 8, !tbaa !2428
  %3233 = load i8, i8* %BRANCH_TAKEN
  %3234 = icmp eq i8 %3233, 1
  br i1 %3234, label %block_400e41, label %block_400dca

block_4008db:                                     ; preds = %block_4008a2
  %3235 = load i64, i64* %PC
  %3236 = add i64 %3235, 5
  %3237 = load i64, i64* %PC
  %3238 = add i64 %3237, 5
  store i64 %3238, i64* %PC
  %3239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3236, i64* %3239, align 8, !tbaa !2428
  %3240 = load i64, i64* %RBP
  %3241 = sub i64 %3240, 8
  %3242 = load i64, i64* %PC
  %3243 = add i64 %3242, 3
  store i64 %3243, i64* %PC
  %3244 = inttoptr i64 %3241 to i32*
  %3245 = load i32, i32* %3244
  %3246 = zext i32 %3245 to i64
  store i64 %3246, i64* %RAX, align 8, !tbaa !2428
  %3247 = load i64, i64* %RAX
  %3248 = load i64, i64* %PC
  %3249 = add i64 %3248, 3
  store i64 %3249, i64* %PC
  %3250 = trunc i64 %3247 to i32
  %3251 = add i32 1, %3250
  %3252 = zext i32 %3251 to i64
  store i64 %3252, i64* %RAX, align 8, !tbaa !2428
  %3253 = icmp ult i32 %3251, %3250
  %3254 = icmp ult i32 %3251, 1
  %3255 = or i1 %3253, %3254
  %3256 = zext i1 %3255 to i8
  %3257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3256, i8* %3257, align 1, !tbaa !2433
  %3258 = and i32 %3251, 255
  %3259 = call i32 @llvm.ctpop.i32(i32 %3258) #16
  %3260 = trunc i32 %3259 to i8
  %3261 = and i8 %3260, 1
  %3262 = xor i8 %3261, 1
  %3263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3262, i8* %3263, align 1, !tbaa !2447
  %3264 = xor i64 1, %3247
  %3265 = trunc i64 %3264 to i32
  %3266 = xor i32 %3265, %3251
  %3267 = lshr i32 %3266, 4
  %3268 = trunc i32 %3267 to i8
  %3269 = and i8 %3268, 1
  %3270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3269, i8* %3270, align 1, !tbaa !2448
  %3271 = icmp eq i32 %3251, 0
  %3272 = zext i1 %3271 to i8
  %3273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3272, i8* %3273, align 1, !tbaa !2449
  %3274 = lshr i32 %3251, 31
  %3275 = trunc i32 %3274 to i8
  %3276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3275, i8* %3276, align 1, !tbaa !2450
  %3277 = lshr i32 %3250, 31
  %3278 = xor i32 %3274, %3277
  %3279 = add nuw nsw i32 %3278, %3274
  %3280 = icmp eq i32 %3279, 2
  %3281 = zext i1 %3280 to i8
  %3282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3281, i8* %3282, align 1, !tbaa !2451
  %3283 = load i64, i64* %RBP
  %3284 = sub i64 %3283, 8
  %3285 = load i32, i32* %EAX
  %3286 = zext i32 %3285 to i64
  %3287 = load i64, i64* %PC
  %3288 = add i64 %3287, 3
  store i64 %3288, i64* %PC
  %3289 = inttoptr i64 %3284 to i32*
  store i32 %3285, i32* %3289
  %3290 = load i64, i64* %PC
  %3291 = sub i64 %3290, 88
  %3292 = load i64, i64* %PC
  %3293 = add i64 %3292, 5
  store i64 %3293, i64* %PC
  %3294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3291, i64* %3294, align 8, !tbaa !2428
  br label %block_400891

block_400879:                                     ; preds = %block_40084f
  %3295 = sub i64 %6372, 4
  %3296 = load i64, i64* %PC
  %3297 = add i64 %3296, 7
  store i64 %3297, i64* %PC
  %3298 = inttoptr i64 %3295 to i32*
  store i32 1, i32* %3298
  br label %block_400880

block_4011d4:                                     ; preds = %block_401157
  %3299 = load i64, i64* %PC
  %3300 = add i64 %3299, 10
  store i64 %3300, i64* %PC
  store i64 add (i64 ptrtoint (%seg_401340__rodata_type* @seg_401340__rodata to i64), i64 4), i64* %RDI, align 8, !tbaa !2428
  %3301 = load i64, i64* %PC
  %3302 = add i64 %3301, 2
  store i64 %3302, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2432
  %3303 = load i64, i64* %PC
  %3304 = sub i64 %3303, 3568
  %3305 = load i64, i64* %PC
  %3306 = add i64 %3305, 5
  %3307 = load i64, i64* %PC
  %3308 = add i64 %3307, 5
  store i64 %3308, i64* %PC
  %3309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3310 = load i64, i64* %3309, align 8, !tbaa !2428
  %3311 = add i64 %3310, -8
  %3312 = inttoptr i64 %3311 to i64*
  store i64 %3306, i64* %3312
  store i64 %3311, i64* %3309, align 8, !tbaa !2428
  %3313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3304, i64* %3313, align 8, !tbaa !2428
  %3314 = load i64, i64* %PC
  %3315 = call %struct.Memory* @ext_619238_printf(%struct.State* %0, i64 %3314, %struct.Memory* %6779)
  %3316 = load i64, i64* %RBP
  %3317 = sub i64 %3316, 20
  %3318 = load i32, i32* %EAX
  %3319 = zext i32 %3318 to i64
  %3320 = load i64, i64* %PC
  %3321 = add i64 %3320, 3
  store i64 %3321, i64* %PC
  %3322 = inttoptr i64 %3317 to i32*
  store i32 %3318, i32* %3322
  br label %block_4011e8

block_400ad6:                                     ; preds = %block_400acc
  %3323 = load i64, i64* %RBP
  %3324 = sub i64 %3323, 4
  %3325 = load i64, i64* %PC
  %3326 = add i64 %3325, 3
  store i64 %3326, i64* %PC
  %3327 = inttoptr i64 %3324 to i32*
  %3328 = load i32, i32* %3327
  %3329 = zext i32 %3328 to i64
  store i64 %3329, i64* %RAX, align 8, !tbaa !2428
  %3330 = load i64, i64* %RBP
  %3331 = sub i64 %3330, 8
  %3332 = load i64, i64* %PC
  %3333 = add i64 %3332, 3
  store i64 %3333, i64* %PC
  %3334 = inttoptr i64 %3331 to i32*
  %3335 = load i32, i32* %3334
  %3336 = zext i32 %3335 to i64
  store i64 %3336, i64* %RCX, align 8, !tbaa !2428
  %3337 = load i64, i64* %RBP
  %3338 = sub i64 %3337, 12
  %3339 = load i64, i64* %PC
  %3340 = add i64 %3339, 3
  store i64 %3340, i64* %PC
  %3341 = inttoptr i64 %3338 to i32*
  %3342 = load i32, i32* %3341
  %3343 = zext i32 %3342 to i64
  store i64 %3343, i64* %RDX, align 8, !tbaa !2428
  %3344 = load i64, i64* %RDX
  %3345 = load i64, i64* %PC
  %3346 = add i64 %3345, 3
  store i64 %3346, i64* %PC
  %3347 = and i64 %3344, 4294967295
  %3348 = shl i64 %3347, 2
  %3349 = trunc i64 %3348 to i32
  %3350 = icmp slt i32 %3349, 0
  %3351 = shl i32 %3349, 1
  %3352 = zext i32 %3351 to i64
  store i64 %3352, i64* %RDX, align 8, !tbaa !2428
  %3353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3354 = zext i1 %3350 to i8
  store i8 %3354, i8* %3353, align 1, !tbaa !2432
  %3355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3356 = and i32 %3351, 254
  %3357 = call i32 @llvm.ctpop.i32(i32 %3356) #16
  %3358 = trunc i32 %3357 to i8
  %3359 = and i8 %3358, 1
  %3360 = xor i8 %3359, 1
  store i8 %3360, i8* %3355, align 1, !tbaa !2432
  %3361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3361, align 1, !tbaa !2432
  %3362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3363 = icmp eq i32 %3351, 0
  %3364 = zext i1 %3363 to i8
  store i8 %3364, i8* %3362, align 1, !tbaa !2432
  %3365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3366 = lshr i32 %3351, 31
  %3367 = trunc i32 %3366 to i8
  store i8 %3367, i8* %3365, align 1, !tbaa !2432
  %3368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3368, align 1, !tbaa !2432
  %3369 = load i64, i64* %RCX
  %3370 = load i32, i32* %EDX
  %3371 = zext i32 %3370 to i64
  %3372 = load i64, i64* %PC
  %3373 = add i64 %3372, 2
  store i64 %3373, i64* %PC
  %3374 = trunc i64 %3369 to i32
  %3375 = add i32 %3370, %3374
  %3376 = zext i32 %3375 to i64
  store i64 %3376, i64* %RCX, align 8, !tbaa !2428
  %3377 = icmp ult i32 %3375, %3374
  %3378 = icmp ult i32 %3375, %3370
  %3379 = or i1 %3377, %3378
  %3380 = zext i1 %3379 to i8
  %3381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3380, i8* %3381, align 1, !tbaa !2433
  %3382 = and i32 %3375, 255
  %3383 = call i32 @llvm.ctpop.i32(i32 %3382) #16
  %3384 = trunc i32 %3383 to i8
  %3385 = and i8 %3384, 1
  %3386 = xor i8 %3385, 1
  %3387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3386, i8* %3387, align 1, !tbaa !2447
  %3388 = xor i64 %3371, %3369
  %3389 = trunc i64 %3388 to i32
  %3390 = xor i32 %3389, %3375
  %3391 = lshr i32 %3390, 4
  %3392 = trunc i32 %3391 to i8
  %3393 = and i8 %3392, 1
  %3394 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3393, i8* %3394, align 1, !tbaa !2448
  %3395 = icmp eq i32 %3375, 0
  %3396 = zext i1 %3395 to i8
  %3397 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3396, i8* %3397, align 1, !tbaa !2449
  %3398 = lshr i32 %3375, 31
  %3399 = trunc i32 %3398 to i8
  %3400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3399, i8* %3400, align 1, !tbaa !2450
  %3401 = lshr i32 %3374, 31
  %3402 = lshr i32 %3370, 31
  %3403 = xor i32 %3398, %3401
  %3404 = xor i32 %3398, %3402
  %3405 = add nuw nsw i32 %3403, %3404
  %3406 = icmp eq i32 %3405, 2
  %3407 = zext i1 %3406 to i8
  %3408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3407, i8* %3408, align 1, !tbaa !2451
  %3409 = load i64, i64* %RCX
  %3410 = load i64, i64* %PC
  %3411 = add i64 %3410, 3
  store i64 %3411, i64* %PC
  %3412 = and i64 %3409, 4294967295
  %3413 = shl i64 %3412, 2
  %3414 = trunc i64 %3413 to i32
  %3415 = icmp slt i32 %3414, 0
  %3416 = shl i32 %3414, 1
  %3417 = zext i32 %3416 to i64
  store i64 %3417, i64* %RCX, align 8, !tbaa !2428
  %3418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3419 = zext i1 %3415 to i8
  store i8 %3419, i8* %3418, align 1, !tbaa !2432
  %3420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3421 = and i32 %3416, 254
  %3422 = call i32 @llvm.ctpop.i32(i32 %3421) #16
  %3423 = trunc i32 %3422 to i8
  %3424 = and i8 %3423, 1
  %3425 = xor i8 %3424, 1
  store i8 %3425, i8* %3420, align 1, !tbaa !2432
  %3426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3426, align 1, !tbaa !2432
  %3427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3428 = icmp eq i32 %3416, 0
  %3429 = zext i1 %3428 to i8
  store i8 %3429, i8* %3427, align 1, !tbaa !2432
  %3430 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3431 = lshr i32 %3416, 31
  %3432 = trunc i32 %3431 to i8
  store i8 %3432, i8* %3430, align 1, !tbaa !2432
  %3433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3433, align 1, !tbaa !2432
  %3434 = load i64, i64* %RAX
  %3435 = load i32, i32* %ECX
  %3436 = zext i32 %3435 to i64
  %3437 = load i64, i64* %PC
  %3438 = add i64 %3437, 2
  store i64 %3438, i64* %PC
  %3439 = trunc i64 %3434 to i32
  %3440 = add i32 %3435, %3439
  %3441 = zext i32 %3440 to i64
  store i64 %3441, i64* %RAX, align 8, !tbaa !2428
  %3442 = icmp ult i32 %3440, %3439
  %3443 = icmp ult i32 %3440, %3435
  %3444 = or i1 %3442, %3443
  %3445 = zext i1 %3444 to i8
  %3446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3445, i8* %3446, align 1, !tbaa !2433
  %3447 = and i32 %3440, 255
  %3448 = call i32 @llvm.ctpop.i32(i32 %3447) #16
  %3449 = trunc i32 %3448 to i8
  %3450 = and i8 %3449, 1
  %3451 = xor i8 %3450, 1
  %3452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3451, i8* %3452, align 1, !tbaa !2447
  %3453 = xor i64 %3436, %3434
  %3454 = trunc i64 %3453 to i32
  %3455 = xor i32 %3454, %3440
  %3456 = lshr i32 %3455, 4
  %3457 = trunc i32 %3456 to i8
  %3458 = and i8 %3457, 1
  %3459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3458, i8* %3459, align 1, !tbaa !2448
  %3460 = icmp eq i32 %3440, 0
  %3461 = zext i1 %3460 to i8
  %3462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3461, i8* %3462, align 1, !tbaa !2449
  %3463 = lshr i32 %3440, 31
  %3464 = trunc i32 %3463 to i8
  %3465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3464, i8* %3465, align 1, !tbaa !2450
  %3466 = lshr i32 %3439, 31
  %3467 = lshr i32 %3435, 31
  %3468 = xor i32 %3463, %3466
  %3469 = xor i32 %3463, %3467
  %3470 = add nuw nsw i32 %3468, %3469
  %3471 = icmp eq i32 %3470, 2
  %3472 = zext i1 %3471 to i8
  %3473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3472, i8* %3473, align 1, !tbaa !2451
  %3474 = load i32, i32* %EAX
  %3475 = zext i32 %3474 to i64
  %3476 = load i64, i64* %PC
  %3477 = add i64 %3476, 3
  store i64 %3477, i64* %PC
  %3478 = shl i64 %3475, 32
  %3479 = ashr exact i64 %3478, 32
  store i64 %3479, i64* %RSI, align 8, !tbaa !2428
  %3480 = load i64, i64* %RSI
  %3481 = mul i64 %3480, 4
  %3482 = add i64 %3481, add (i64 ptrtoint (%p_type* @p to i64), i64 4096)
  %3483 = load i64, i64* %PC
  %3484 = add i64 %3483, 11
  store i64 %3484, i64* %PC
  %3485 = inttoptr i64 %3482 to i32*
  store i32 1, i32* %3485
  %3486 = load i64, i64* %RBP
  %3487 = sub i64 %3486, 12
  %3488 = load i64, i64* %PC
  %3489 = add i64 %3488, 3
  store i64 %3489, i64* %PC
  %3490 = inttoptr i64 %3487 to i32*
  %3491 = load i32, i32* %3490
  %3492 = zext i32 %3491 to i64
  store i64 %3492, i64* %RAX, align 8, !tbaa !2428
  %3493 = load i64, i64* %RAX
  %3494 = load i64, i64* %PC
  %3495 = add i64 %3494, 3
  store i64 %3495, i64* %PC
  %3496 = trunc i64 %3493 to i32
  %3497 = add i32 1, %3496
  %3498 = zext i32 %3497 to i64
  store i64 %3498, i64* %RAX, align 8, !tbaa !2428
  %3499 = icmp ult i32 %3497, %3496
  %3500 = icmp ult i32 %3497, 1
  %3501 = or i1 %3499, %3500
  %3502 = zext i1 %3501 to i8
  %3503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3502, i8* %3503, align 1, !tbaa !2433
  %3504 = and i32 %3497, 255
  %3505 = call i32 @llvm.ctpop.i32(i32 %3504) #16
  %3506 = trunc i32 %3505 to i8
  %3507 = and i8 %3506, 1
  %3508 = xor i8 %3507, 1
  %3509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3508, i8* %3509, align 1, !tbaa !2447
  %3510 = xor i64 1, %3493
  %3511 = trunc i64 %3510 to i32
  %3512 = xor i32 %3511, %3497
  %3513 = lshr i32 %3512, 4
  %3514 = trunc i32 %3513 to i8
  %3515 = and i8 %3514, 1
  %3516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3515, i8* %3516, align 1, !tbaa !2448
  %3517 = icmp eq i32 %3497, 0
  %3518 = zext i1 %3517 to i8
  %3519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3518, i8* %3519, align 1, !tbaa !2449
  %3520 = lshr i32 %3497, 31
  %3521 = trunc i32 %3520 to i8
  %3522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3521, i8* %3522, align 1, !tbaa !2450
  %3523 = lshr i32 %3496, 31
  %3524 = xor i32 %3520, %3523
  %3525 = add nuw nsw i32 %3524, %3520
  %3526 = icmp eq i32 %3525, 2
  %3527 = zext i1 %3526 to i8
  %3528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3527, i8* %3528, align 1, !tbaa !2451
  %3529 = load i64, i64* %RBP
  %3530 = sub i64 %3529, 12
  %3531 = load i32, i32* %EAX
  %3532 = zext i32 %3531 to i64
  %3533 = load i64, i64* %PC
  %3534 = add i64 %3533, 3
  store i64 %3534, i64* %PC
  %3535 = inttoptr i64 %3530 to i32*
  store i32 %3531, i32* %3535
  %3536 = load i64, i64* %PC
  %3537 = sub i64 %3536, 52
  %3538 = load i64, i64* %PC
  %3539 = add i64 %3538, 5
  store i64 %3539, i64* %PC
  %3540 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3537, i64* %3540, align 8, !tbaa !2428
  br label %block_400acc

block_400b52:                                     ; preds = %block_400b48
  %3541 = load i64, i64* %RBP
  %3542 = sub i64 %3541, 8
  %3543 = load i64, i64* %PC
  %3544 = add i64 %3543, 7
  store i64 %3544, i64* %PC
  %3545 = inttoptr i64 %3542 to i32*
  store i32 0, i32* %3545
  br label %block_400b59

block_400ecc:                                     ; preds = %block_400e6f
  %3546 = load i64, i64* %PC
  %3547 = add i64 %3546, 5
  %3548 = load i64, i64* %PC
  %3549 = add i64 %3548, 5
  store i64 %3549, i64* %PC
  %3550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3547, i64* %3550, align 8, !tbaa !2428
  %3551 = load i64, i64* %RBP
  %3552 = sub i64 %3551, 4
  %3553 = load i64, i64* %PC
  %3554 = add i64 %3553, 3
  store i64 %3554, i64* %PC
  %3555 = inttoptr i64 %3552 to i32*
  %3556 = load i32, i32* %3555
  %3557 = zext i32 %3556 to i64
  store i64 %3557, i64* %RAX, align 8, !tbaa !2428
  %3558 = load i64, i64* %RAX
  %3559 = load i64, i64* %PC
  %3560 = add i64 %3559, 3
  store i64 %3560, i64* %PC
  %3561 = trunc i64 %3558 to i32
  %3562 = add i32 1, %3561
  %3563 = zext i32 %3562 to i64
  store i64 %3563, i64* %RAX, align 8, !tbaa !2428
  %3564 = icmp ult i32 %3562, %3561
  %3565 = icmp ult i32 %3562, 1
  %3566 = or i1 %3564, %3565
  %3567 = zext i1 %3566 to i8
  %3568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3567, i8* %3568, align 1, !tbaa !2433
  %3569 = and i32 %3562, 255
  %3570 = call i32 @llvm.ctpop.i32(i32 %3569) #16
  %3571 = trunc i32 %3570 to i8
  %3572 = and i8 %3571, 1
  %3573 = xor i8 %3572, 1
  %3574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3573, i8* %3574, align 1, !tbaa !2447
  %3575 = xor i64 1, %3558
  %3576 = trunc i64 %3575 to i32
  %3577 = xor i32 %3576, %3562
  %3578 = lshr i32 %3577, 4
  %3579 = trunc i32 %3578 to i8
  %3580 = and i8 %3579, 1
  %3581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3580, i8* %3581, align 1, !tbaa !2448
  %3582 = icmp eq i32 %3562, 0
  %3583 = zext i1 %3582 to i8
  %3584 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3583, i8* %3584, align 1, !tbaa !2449
  %3585 = lshr i32 %3562, 31
  %3586 = trunc i32 %3585 to i8
  %3587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3586, i8* %3587, align 1, !tbaa !2450
  %3588 = lshr i32 %3561, 31
  %3589 = xor i32 %3585, %3588
  %3590 = add nuw nsw i32 %3589, %3585
  %3591 = icmp eq i32 %3590, 2
  %3592 = zext i1 %3591 to i8
  %3593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3592, i8* %3593, align 1, !tbaa !2451
  %3594 = load i64, i64* %RBP
  %3595 = sub i64 %3594, 4
  %3596 = load i32, i32* %EAX
  %3597 = zext i32 %3596 to i64
  %3598 = load i64, i64* %PC
  %3599 = add i64 %3598, 3
  store i64 %3599, i64* %PC
  %3600 = inttoptr i64 %3595 to i32*
  store i32 %3596, i32* %3600
  %3601 = load i64, i64* %PC
  %3602 = sub i64 %3601, 124
  %3603 = load i64, i64* %PC
  %3604 = add i64 %3603, 5
  store i64 %3604, i64* %PC
  %3605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3602, i64* %3605, align 8, !tbaa !2428
  br label %block_400e5e

block_400926:                                     ; preds = %block_400919
  %3606 = add i64 %5053, 10
  store i64 %3606, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RAX, align 8, !tbaa !2428
  %3607 = load i64, i64* %RBP
  %3608 = sub i64 %3607, 4
  %3609 = load i64, i64* %PC
  %3610 = add i64 %3609, 4
  store i64 %3610, i64* %PC
  %3611 = inttoptr i64 %3608 to i32*
  %3612 = load i32, i32* %3611
  %3613 = sext i32 %3612 to i64
  store i64 %3613, i64* %RCX, align 8, !tbaa !2428
  %3614 = load i64, i64* %RCX
  %3615 = load i64, i64* %PC
  %3616 = add i64 %3615, 4
  store i64 %3616, i64* %PC
  %3617 = shl i64 %3614, 10
  %3618 = icmp slt i64 %3617, 0
  %3619 = shl i64 %3617, 1
  store i64 %3619, i64* %RCX, align 8, !tbaa !2428
  %3620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3621 = zext i1 %3618 to i8
  store i8 %3621, i8* %3620, align 1, !tbaa !2432
  %3622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3623 = trunc i64 %3619 to i32
  %3624 = and i32 %3623, 254
  %3625 = call i32 @llvm.ctpop.i32(i32 %3624) #16
  %3626 = trunc i32 %3625 to i8
  %3627 = and i8 %3626, 1
  %3628 = xor i8 %3627, 1
  store i8 %3628, i8* %3622, align 1, !tbaa !2432
  %3629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3629, align 1, !tbaa !2432
  %3630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3631 = icmp eq i64 %3619, 0
  %3632 = zext i1 %3631 to i8
  store i8 %3632, i8* %3630, align 1, !tbaa !2432
  %3633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3634 = lshr i64 %3619, 63
  %3635 = trunc i64 %3634 to i8
  store i8 %3635, i8* %3633, align 1, !tbaa !2432
  %3636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3636, align 1, !tbaa !2432
  %3637 = load i64, i64* %RAX
  %3638 = load i64, i64* %RCX
  %3639 = load i64, i64* %PC
  %3640 = add i64 %3639, 3
  store i64 %3640, i64* %PC
  %3641 = add i64 %3638, %3637
  store i64 %3641, i64* %RAX, align 8, !tbaa !2428
  %3642 = icmp ult i64 %3641, %3637
  %3643 = icmp ult i64 %3641, %3638
  %3644 = or i1 %3642, %3643
  %3645 = zext i1 %3644 to i8
  %3646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3645, i8* %3646, align 1, !tbaa !2433
  %3647 = trunc i64 %3641 to i32
  %3648 = and i32 %3647, 255
  %3649 = call i32 @llvm.ctpop.i32(i32 %3648) #16
  %3650 = trunc i32 %3649 to i8
  %3651 = and i8 %3650, 1
  %3652 = xor i8 %3651, 1
  %3653 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3652, i8* %3653, align 1, !tbaa !2447
  %3654 = xor i64 %3638, %3637
  %3655 = xor i64 %3654, %3641
  %3656 = lshr i64 %3655, 4
  %3657 = trunc i64 %3656 to i8
  %3658 = and i8 %3657, 1
  %3659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3658, i8* %3659, align 1, !tbaa !2448
  %3660 = icmp eq i64 %3641, 0
  %3661 = zext i1 %3660 to i8
  %3662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3661, i8* %3662, align 1, !tbaa !2449
  %3663 = lshr i64 %3641, 63
  %3664 = trunc i64 %3663 to i8
  %3665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3664, i8* %3665, align 1, !tbaa !2450
  %3666 = lshr i64 %3637, 63
  %3667 = lshr i64 %3638, 63
  %3668 = xor i64 %3663, %3666
  %3669 = xor i64 %3663, %3667
  %3670 = add nuw nsw i64 %3668, %3669
  %3671 = icmp eq i64 %3670, 2
  %3672 = zext i1 %3671 to i8
  %3673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3672, i8* %3673, align 1, !tbaa !2451
  %3674 = load i64, i64* %RBP
  %3675 = sub i64 %3674, 16
  %3676 = load i64, i64* %PC
  %3677 = add i64 %3676, 4
  store i64 %3677, i64* %PC
  %3678 = inttoptr i64 %3675 to i32*
  %3679 = load i32, i32* %3678
  %3680 = sext i32 %3679 to i64
  store i64 %3680, i64* %RCX, align 8, !tbaa !2428
  %3681 = load i64, i64* %RAX
  %3682 = load i64, i64* %RCX
  %3683 = mul i64 %3682, 4
  %3684 = add i64 %3683, %3681
  %3685 = load i64, i64* %PC
  %3686 = add i64 %3685, 7
  store i64 %3686, i64* %PC
  %3687 = inttoptr i64 %3684 to i32*
  store i32 0, i32* %3687
  %3688 = load i64, i64* %RBP
  %3689 = sub i64 %3688, 16
  %3690 = load i64, i64* %PC
  %3691 = add i64 %3690, 3
  store i64 %3691, i64* %PC
  %3692 = inttoptr i64 %3689 to i32*
  %3693 = load i32, i32* %3692
  %3694 = zext i32 %3693 to i64
  store i64 %3694, i64* %RAX, align 8, !tbaa !2428
  %3695 = load i64, i64* %RAX
  %3696 = load i64, i64* %PC
  %3697 = add i64 %3696, 3
  store i64 %3697, i64* %PC
  %3698 = trunc i64 %3695 to i32
  %3699 = add i32 1, %3698
  %3700 = zext i32 %3699 to i64
  store i64 %3700, i64* %RAX, align 8, !tbaa !2428
  %3701 = icmp ult i32 %3699, %3698
  %3702 = icmp ult i32 %3699, 1
  %3703 = or i1 %3701, %3702
  %3704 = zext i1 %3703 to i8
  %3705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3704, i8* %3705, align 1, !tbaa !2433
  %3706 = and i32 %3699, 255
  %3707 = call i32 @llvm.ctpop.i32(i32 %3706) #16
  %3708 = trunc i32 %3707 to i8
  %3709 = and i8 %3708, 1
  %3710 = xor i8 %3709, 1
  %3711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3710, i8* %3711, align 1, !tbaa !2447
  %3712 = xor i64 1, %3695
  %3713 = trunc i64 %3712 to i32
  %3714 = xor i32 %3713, %3699
  %3715 = lshr i32 %3714, 4
  %3716 = trunc i32 %3715 to i8
  %3717 = and i8 %3716, 1
  %3718 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3717, i8* %3718, align 1, !tbaa !2448
  %3719 = icmp eq i32 %3699, 0
  %3720 = zext i1 %3719 to i8
  %3721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3720, i8* %3721, align 1, !tbaa !2449
  %3722 = lshr i32 %3699, 31
  %3723 = trunc i32 %3722 to i8
  %3724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3723, i8* %3724, align 1, !tbaa !2450
  %3725 = lshr i32 %3698, 31
  %3726 = xor i32 %3722, %3725
  %3727 = add nuw nsw i32 %3726, %3722
  %3728 = icmp eq i32 %3727, 2
  %3729 = zext i1 %3728 to i8
  %3730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3729, i8* %3730, align 1, !tbaa !2451
  %3731 = load i64, i64* %RBP
  %3732 = sub i64 %3731, 16
  %3733 = load i32, i32* %EAX
  %3734 = zext i32 %3733 to i64
  %3735 = load i64, i64* %PC
  %3736 = add i64 %3735, 3
  store i64 %3736, i64* %PC
  %3737 = inttoptr i64 %3732 to i32*
  store i32 %3733, i32* %3737
  %3738 = load i64, i64* %PC
  %3739 = sub i64 %3738, 54
  %3740 = load i64, i64* %PC
  %3741 = add i64 %3740, 5
  store i64 %3741, i64* %PC
  %3742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3739, i64* %3742, align 8, !tbaa !2428
  br label %block_400919

block_400eb9:                                     ; preds = %block_400e80
  %3743 = load i64, i64* %PC
  %3744 = add i64 %3743, 5
  %3745 = load i64, i64* %PC
  %3746 = add i64 %3745, 5
  store i64 %3746, i64* %PC
  %3747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3744, i64* %3747, align 8, !tbaa !2428
  %3748 = load i64, i64* %RBP
  %3749 = sub i64 %3748, 8
  %3750 = load i64, i64* %PC
  %3751 = add i64 %3750, 3
  store i64 %3751, i64* %PC
  %3752 = inttoptr i64 %3749 to i32*
  %3753 = load i32, i32* %3752
  %3754 = zext i32 %3753 to i64
  store i64 %3754, i64* %RAX, align 8, !tbaa !2428
  %3755 = load i64, i64* %RAX
  %3756 = load i64, i64* %PC
  %3757 = add i64 %3756, 3
  store i64 %3757, i64* %PC
  %3758 = trunc i64 %3755 to i32
  %3759 = add i32 1, %3758
  %3760 = zext i32 %3759 to i64
  store i64 %3760, i64* %RAX, align 8, !tbaa !2428
  %3761 = icmp ult i32 %3759, %3758
  %3762 = icmp ult i32 %3759, 1
  %3763 = or i1 %3761, %3762
  %3764 = zext i1 %3763 to i8
  %3765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3764, i8* %3765, align 1, !tbaa !2433
  %3766 = and i32 %3759, 255
  %3767 = call i32 @llvm.ctpop.i32(i32 %3766) #16
  %3768 = trunc i32 %3767 to i8
  %3769 = and i8 %3768, 1
  %3770 = xor i8 %3769, 1
  %3771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3770, i8* %3771, align 1, !tbaa !2447
  %3772 = xor i64 1, %3755
  %3773 = trunc i64 %3772 to i32
  %3774 = xor i32 %3773, %3759
  %3775 = lshr i32 %3774, 4
  %3776 = trunc i32 %3775 to i8
  %3777 = and i8 %3776, 1
  %3778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3777, i8* %3778, align 1, !tbaa !2448
  %3779 = icmp eq i32 %3759, 0
  %3780 = zext i1 %3779 to i8
  %3781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3780, i8* %3781, align 1, !tbaa !2449
  %3782 = lshr i32 %3759, 31
  %3783 = trunc i32 %3782 to i8
  %3784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3783, i8* %3784, align 1, !tbaa !2450
  %3785 = lshr i32 %3758, 31
  %3786 = xor i32 %3782, %3785
  %3787 = add nuw nsw i32 %3786, %3782
  %3788 = icmp eq i32 %3787, 2
  %3789 = zext i1 %3788 to i8
  %3790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3789, i8* %3790, align 1, !tbaa !2451
  %3791 = load i64, i64* %RBP
  %3792 = sub i64 %3791, 8
  %3793 = load i32, i32* %EAX
  %3794 = zext i32 %3793 to i64
  %3795 = load i64, i64* %PC
  %3796 = add i64 %3795, 3
  store i64 %3796, i64* %PC
  %3797 = inttoptr i64 %3792 to i32*
  store i32 %3793, i32* %3797
  %3798 = load i64, i64* %PC
  %3799 = sub i64 %3798, 88
  %3800 = load i64, i64* %PC
  %3801 = add i64 %3800, 5
  store i64 %3801, i64* %PC
  %3802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3799, i64* %3802, align 8, !tbaa !2428
  br label %block_400e6f

block_400de2:                                     ; preds = %block_400ddb, %block_400dec
  %MEMORY.19 = phi %struct.Memory* [ %MEMORY.42, %block_400ddb ], [ %MEMORY.19, %block_400dec ]
  %3803 = load i64, i64* %RBP
  %3804 = sub i64 %3803, 12
  %3805 = load i64, i64* %PC
  %3806 = add i64 %3805, 4
  store i64 %3806, i64* %PC
  %3807 = inttoptr i64 %3804 to i32*
  %3808 = load i32, i32* %3807
  %3809 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3809, align 1, !tbaa !2433
  %3810 = and i32 %3808, 255
  %3811 = call i32 @llvm.ctpop.i32(i32 %3810) #16
  %3812 = trunc i32 %3811 to i8
  %3813 = and i8 %3812, 1
  %3814 = xor i8 %3813, 1
  %3815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3814, i8* %3815, align 1, !tbaa !2447
  %3816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3816, align 1, !tbaa !2448
  %3817 = icmp eq i32 %3808, 0
  %3818 = zext i1 %3817 to i8
  %3819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3818, i8* %3819, align 1, !tbaa !2449
  %3820 = lshr i32 %3808, 31
  %3821 = trunc i32 %3820 to i8
  %3822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3821, i8* %3822, align 1, !tbaa !2450
  %3823 = lshr i32 %3808, 31
  %3824 = xor i32 %3820, %3823
  %3825 = add nuw nsw i32 %3824, %3823
  %3826 = icmp eq i32 %3825, 2
  %3827 = zext i1 %3826 to i8
  %3828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3827, i8* %3828, align 1, !tbaa !2451
  %3829 = load i64, i64* %PC
  %3830 = add i64 %3829, 53
  %3831 = load i64, i64* %PC
  %3832 = add i64 %3831, 6
  %3833 = load i64, i64* %PC
  %3834 = add i64 %3833, 6
  store i64 %3834, i64* %PC
  %3835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3836 = load i8, i8* %3835, align 1, !tbaa !2449
  %3837 = icmp eq i8 %3836, 0
  %3838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3839 = load i8, i8* %3838, align 1, !tbaa !2450
  %3840 = icmp ne i8 %3839, 0
  %3841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3842 = load i8, i8* %3841, align 1, !tbaa !2451
  %3843 = icmp ne i8 %3842, 0
  %3844 = xor i1 %3840, %3843
  %3845 = xor i1 %3844, true
  %3846 = and i1 %3837, %3845
  %3847 = zext i1 %3846 to i8
  store i8 %3847, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %3848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3849 = select i1 %3846, i64 %3830, i64 %3832
  store i64 %3849, i64* %3848, align 8, !tbaa !2428
  %3850 = load i8, i8* %BRANCH_TAKEN
  %3851 = icmp eq i8 %3850, 1
  br i1 %3851, label %block_400e1b, label %block_400dec

block_400bc9:                                     ; preds = %block_400b48
  %3852 = load i64, i64* %PC
  %3853 = add i64 %3852, 11
  store i64 %3853, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 12) to i32*)
  %3854 = load i64, i64* %PC
  %3855 = add i64 %3854, 11
  store i64 %3855, i64* %PC
  store i32 25, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 12) to i32*)
  %3856 = load i64, i64* %RBP
  %3857 = sub i64 %3856, 4
  %3858 = load i64, i64* %PC
  %3859 = add i64 %3858, 7
  store i64 %3859, i64* %PC
  %3860 = inttoptr i64 %3857 to i32*
  store i32 0, i32* %3860
  br label %block_400be6

block_400cb0:                                     ; preds = %block_400ca6
  %3861 = load i64, i64* %RBP
  %3862 = sub i64 %3861, 4
  %3863 = load i64, i64* %PC
  %3864 = add i64 %3863, 3
  store i64 %3864, i64* %PC
  %3865 = inttoptr i64 %3862 to i32*
  %3866 = load i32, i32* %3865
  %3867 = zext i32 %3866 to i64
  store i64 %3867, i64* %RAX, align 8, !tbaa !2428
  %3868 = load i64, i64* %RBP
  %3869 = sub i64 %3868, 8
  %3870 = load i64, i64* %PC
  %3871 = add i64 %3870, 3
  store i64 %3871, i64* %PC
  %3872 = inttoptr i64 %3869 to i32*
  %3873 = load i32, i32* %3872
  %3874 = zext i32 %3873 to i64
  store i64 %3874, i64* %RCX, align 8, !tbaa !2428
  %3875 = load i64, i64* %RBP
  %3876 = sub i64 %3875, 12
  %3877 = load i64, i64* %PC
  %3878 = add i64 %3877, 3
  store i64 %3878, i64* %PC
  %3879 = inttoptr i64 %3876 to i32*
  %3880 = load i32, i32* %3879
  %3881 = zext i32 %3880 to i64
  store i64 %3881, i64* %RDX, align 8, !tbaa !2428
  %3882 = load i64, i64* %RDX
  %3883 = load i64, i64* %PC
  %3884 = add i64 %3883, 3
  store i64 %3884, i64* %PC
  %3885 = and i64 %3882, 4294967295
  %3886 = shl i64 %3885, 2
  %3887 = trunc i64 %3886 to i32
  %3888 = icmp slt i32 %3887, 0
  %3889 = shl i32 %3887, 1
  %3890 = zext i32 %3889 to i64
  store i64 %3890, i64* %RDX, align 8, !tbaa !2428
  %3891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3892 = zext i1 %3888 to i8
  store i8 %3892, i8* %3891, align 1, !tbaa !2432
  %3893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3894 = and i32 %3889, 254
  %3895 = call i32 @llvm.ctpop.i32(i32 %3894) #16
  %3896 = trunc i32 %3895 to i8
  %3897 = and i8 %3896, 1
  %3898 = xor i8 %3897, 1
  store i8 %3898, i8* %3893, align 1, !tbaa !2432
  %3899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3899, align 1, !tbaa !2432
  %3900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3901 = icmp eq i32 %3889, 0
  %3902 = zext i1 %3901 to i8
  store i8 %3902, i8* %3900, align 1, !tbaa !2432
  %3903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3904 = lshr i32 %3889, 31
  %3905 = trunc i32 %3904 to i8
  store i8 %3905, i8* %3903, align 1, !tbaa !2432
  %3906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3906, align 1, !tbaa !2432
  %3907 = load i64, i64* %RCX
  %3908 = load i32, i32* %EDX
  %3909 = zext i32 %3908 to i64
  %3910 = load i64, i64* %PC
  %3911 = add i64 %3910, 2
  store i64 %3911, i64* %PC
  %3912 = trunc i64 %3907 to i32
  %3913 = add i32 %3908, %3912
  %3914 = zext i32 %3913 to i64
  store i64 %3914, i64* %RCX, align 8, !tbaa !2428
  %3915 = icmp ult i32 %3913, %3912
  %3916 = icmp ult i32 %3913, %3908
  %3917 = or i1 %3915, %3916
  %3918 = zext i1 %3917 to i8
  %3919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3918, i8* %3919, align 1, !tbaa !2433
  %3920 = and i32 %3913, 255
  %3921 = call i32 @llvm.ctpop.i32(i32 %3920) #16
  %3922 = trunc i32 %3921 to i8
  %3923 = and i8 %3922, 1
  %3924 = xor i8 %3923, 1
  %3925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3924, i8* %3925, align 1, !tbaa !2447
  %3926 = xor i64 %3909, %3907
  %3927 = trunc i64 %3926 to i32
  %3928 = xor i32 %3927, %3913
  %3929 = lshr i32 %3928, 4
  %3930 = trunc i32 %3929 to i8
  %3931 = and i8 %3930, 1
  %3932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3931, i8* %3932, align 1, !tbaa !2448
  %3933 = icmp eq i32 %3913, 0
  %3934 = zext i1 %3933 to i8
  %3935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3934, i8* %3935, align 1, !tbaa !2449
  %3936 = lshr i32 %3913, 31
  %3937 = trunc i32 %3936 to i8
  %3938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3937, i8* %3938, align 1, !tbaa !2450
  %3939 = lshr i32 %3912, 31
  %3940 = lshr i32 %3908, 31
  %3941 = xor i32 %3936, %3939
  %3942 = xor i32 %3936, %3940
  %3943 = add nuw nsw i32 %3941, %3942
  %3944 = icmp eq i32 %3943, 2
  %3945 = zext i1 %3944 to i8
  %3946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3945, i8* %3946, align 1, !tbaa !2451
  %3947 = load i64, i64* %RCX
  %3948 = load i64, i64* %PC
  %3949 = add i64 %3948, 3
  store i64 %3949, i64* %PC
  %3950 = and i64 %3947, 4294967295
  %3951 = shl i64 %3950, 2
  %3952 = trunc i64 %3951 to i32
  %3953 = icmp slt i32 %3952, 0
  %3954 = shl i32 %3952, 1
  %3955 = zext i32 %3954 to i64
  store i64 %3955, i64* %RCX, align 8, !tbaa !2428
  %3956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %3957 = zext i1 %3953 to i8
  store i8 %3957, i8* %3956, align 1, !tbaa !2432
  %3958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %3959 = and i32 %3954, 254
  %3960 = call i32 @llvm.ctpop.i32(i32 %3959) #16
  %3961 = trunc i32 %3960 to i8
  %3962 = and i8 %3961, 1
  %3963 = xor i8 %3962, 1
  store i8 %3963, i8* %3958, align 1, !tbaa !2432
  %3964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3964, align 1, !tbaa !2432
  %3965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3966 = icmp eq i32 %3954, 0
  %3967 = zext i1 %3966 to i8
  store i8 %3967, i8* %3965, align 1, !tbaa !2432
  %3968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3969 = lshr i32 %3954, 31
  %3970 = trunc i32 %3969 to i8
  store i8 %3970, i8* %3968, align 1, !tbaa !2432
  %3971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3971, align 1, !tbaa !2432
  %3972 = load i64, i64* %RAX
  %3973 = load i32, i32* %ECX
  %3974 = zext i32 %3973 to i64
  %3975 = load i64, i64* %PC
  %3976 = add i64 %3975, 2
  store i64 %3976, i64* %PC
  %3977 = trunc i64 %3972 to i32
  %3978 = add i32 %3973, %3977
  %3979 = zext i32 %3978 to i64
  store i64 %3979, i64* %RAX, align 8, !tbaa !2428
  %3980 = icmp ult i32 %3978, %3977
  %3981 = icmp ult i32 %3978, %3973
  %3982 = or i1 %3980, %3981
  %3983 = zext i1 %3982 to i8
  %3984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3983, i8* %3984, align 1, !tbaa !2433
  %3985 = and i32 %3978, 255
  %3986 = call i32 @llvm.ctpop.i32(i32 %3985) #16
  %3987 = trunc i32 %3986 to i8
  %3988 = and i8 %3987, 1
  %3989 = xor i8 %3988, 1
  %3990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3989, i8* %3990, align 1, !tbaa !2447
  %3991 = xor i64 %3974, %3972
  %3992 = trunc i64 %3991 to i32
  %3993 = xor i32 %3992, %3978
  %3994 = lshr i32 %3993, 4
  %3995 = trunc i32 %3994 to i8
  %3996 = and i8 %3995, 1
  %3997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3996, i8* %3997, align 1, !tbaa !2448
  %3998 = icmp eq i32 %3978, 0
  %3999 = zext i1 %3998 to i8
  %4000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3999, i8* %4000, align 1, !tbaa !2449
  %4001 = lshr i32 %3978, 31
  %4002 = trunc i32 %4001 to i8
  %4003 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4002, i8* %4003, align 1, !tbaa !2450
  %4004 = lshr i32 %3977, 31
  %4005 = lshr i32 %3973, 31
  %4006 = xor i32 %4001, %4004
  %4007 = xor i32 %4001, %4005
  %4008 = add nuw nsw i32 %4006, %4007
  %4009 = icmp eq i32 %4008, 2
  %4010 = zext i1 %4009 to i8
  %4011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4010, i8* %4011, align 1, !tbaa !2451
  %4012 = load i32, i32* %EAX
  %4013 = zext i32 %4012 to i64
  %4014 = load i64, i64* %PC
  %4015 = add i64 %4014, 3
  store i64 %4015, i64* %PC
  %4016 = shl i64 %4013, 32
  %4017 = ashr exact i64 %4016, 32
  store i64 %4017, i64* %RSI, align 8, !tbaa !2428
  %4018 = load i64, i64* %RSI
  %4019 = mul i64 %4018, 4
  %4020 = add i64 %4019, add (i64 ptrtoint (%p_type* @p to i64), i64 10240)
  %4021 = load i64, i64* %PC
  %4022 = add i64 %4021, 11
  store i64 %4022, i64* %PC
  %4023 = inttoptr i64 %4020 to i32*
  store i32 1, i32* %4023
  %4024 = load i64, i64* %RBP
  %4025 = sub i64 %4024, 12
  %4026 = load i64, i64* %PC
  %4027 = add i64 %4026, 3
  store i64 %4027, i64* %PC
  %4028 = inttoptr i64 %4025 to i32*
  %4029 = load i32, i32* %4028
  %4030 = zext i32 %4029 to i64
  store i64 %4030, i64* %RAX, align 8, !tbaa !2428
  %4031 = load i64, i64* %RAX
  %4032 = load i64, i64* %PC
  %4033 = add i64 %4032, 3
  store i64 %4033, i64* %PC
  %4034 = trunc i64 %4031 to i32
  %4035 = add i32 1, %4034
  %4036 = zext i32 %4035 to i64
  store i64 %4036, i64* %RAX, align 8, !tbaa !2428
  %4037 = icmp ult i32 %4035, %4034
  %4038 = icmp ult i32 %4035, 1
  %4039 = or i1 %4037, %4038
  %4040 = zext i1 %4039 to i8
  %4041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4040, i8* %4041, align 1, !tbaa !2433
  %4042 = and i32 %4035, 255
  %4043 = call i32 @llvm.ctpop.i32(i32 %4042) #16
  %4044 = trunc i32 %4043 to i8
  %4045 = and i8 %4044, 1
  %4046 = xor i8 %4045, 1
  %4047 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4046, i8* %4047, align 1, !tbaa !2447
  %4048 = xor i64 1, %4031
  %4049 = trunc i64 %4048 to i32
  %4050 = xor i32 %4049, %4035
  %4051 = lshr i32 %4050, 4
  %4052 = trunc i32 %4051 to i8
  %4053 = and i8 %4052, 1
  %4054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4053, i8* %4054, align 1, !tbaa !2448
  %4055 = icmp eq i32 %4035, 0
  %4056 = zext i1 %4055 to i8
  %4057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4056, i8* %4057, align 1, !tbaa !2449
  %4058 = lshr i32 %4035, 31
  %4059 = trunc i32 %4058 to i8
  %4060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4059, i8* %4060, align 1, !tbaa !2450
  %4061 = lshr i32 %4034, 31
  %4062 = xor i32 %4058, %4061
  %4063 = add nuw nsw i32 %4062, %4058
  %4064 = icmp eq i32 %4063, 2
  %4065 = zext i1 %4064 to i8
  %4066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4065, i8* %4066, align 1, !tbaa !2451
  %4067 = load i64, i64* %RBP
  %4068 = sub i64 %4067, 12
  %4069 = load i32, i32* %EAX
  %4070 = zext i32 %4069 to i64
  %4071 = load i64, i64* %PC
  %4072 = add i64 %4071, 3
  store i64 %4072, i64* %PC
  %4073 = inttoptr i64 %4068 to i32*
  store i32 %4069, i32* %4073
  %4074 = load i64, i64* %PC
  %4075 = sub i64 %4074, 52
  %4076 = load i64, i64* %PC
  %4077 = add i64 %4076, 5
  store i64 %4077, i64* %PC
  %4078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4075, i64* %4078, align 8, !tbaa !2428
  br label %block_400ca6

block_400ac5:                                     ; preds = %block_400abb
  %4079 = load i64, i64* %RBP
  %4080 = sub i64 %4079, 12
  %4081 = load i64, i64* %PC
  %4082 = add i64 %4081, 7
  store i64 %4082, i64* %PC
  %4083 = inttoptr i64 %4080 to i32*
  store i32 0, i32* %4083
  br label %block_400acc

block_4008ac:                                     ; preds = %block_4008a2
  %4084 = load i64, i64* %RBP
  %4085 = sub i64 %4084, 4
  %4086 = load i64, i64* %PC
  %4087 = add i64 %4086, 3
  store i64 %4087, i64* %PC
  %4088 = inttoptr i64 %4085 to i32*
  %4089 = load i32, i32* %4088
  %4090 = zext i32 %4089 to i64
  store i64 %4090, i64* %RAX, align 8, !tbaa !2428
  %4091 = load i64, i64* %RBP
  %4092 = sub i64 %4091, 8
  %4093 = load i64, i64* %PC
  %4094 = add i64 %4093, 3
  store i64 %4094, i64* %PC
  %4095 = inttoptr i64 %4092 to i32*
  %4096 = load i32, i32* %4095
  %4097 = zext i32 %4096 to i64
  store i64 %4097, i64* %RCX, align 8, !tbaa !2428
  %4098 = load i64, i64* %RBP
  %4099 = sub i64 %4098, 12
  %4100 = load i64, i64* %PC
  %4101 = add i64 %4100, 3
  store i64 %4101, i64* %PC
  %4102 = inttoptr i64 %4099 to i32*
  %4103 = load i32, i32* %4102
  %4104 = zext i32 %4103 to i64
  store i64 %4104, i64* %RDX, align 8, !tbaa !2428
  %4105 = load i64, i64* %RDX
  %4106 = load i64, i64* %PC
  %4107 = add i64 %4106, 3
  store i64 %4107, i64* %PC
  %4108 = and i64 %4105, 4294967295
  %4109 = shl i64 %4108, 2
  %4110 = trunc i64 %4109 to i32
  %4111 = icmp slt i32 %4110, 0
  %4112 = shl i32 %4110, 1
  %4113 = zext i32 %4112 to i64
  store i64 %4113, i64* %RDX, align 8, !tbaa !2428
  %4114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4115 = zext i1 %4111 to i8
  store i8 %4115, i8* %4114, align 1, !tbaa !2432
  %4116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4117 = and i32 %4112, 254
  %4118 = call i32 @llvm.ctpop.i32(i32 %4117) #16
  %4119 = trunc i32 %4118 to i8
  %4120 = and i8 %4119, 1
  %4121 = xor i8 %4120, 1
  store i8 %4121, i8* %4116, align 1, !tbaa !2432
  %4122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4122, align 1, !tbaa !2432
  %4123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4124 = icmp eq i32 %4112, 0
  %4125 = zext i1 %4124 to i8
  store i8 %4125, i8* %4123, align 1, !tbaa !2432
  %4126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4127 = lshr i32 %4112, 31
  %4128 = trunc i32 %4127 to i8
  store i8 %4128, i8* %4126, align 1, !tbaa !2432
  %4129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4129, align 1, !tbaa !2432
  %4130 = load i64, i64* %RCX
  %4131 = load i32, i32* %EDX
  %4132 = zext i32 %4131 to i64
  %4133 = load i64, i64* %PC
  %4134 = add i64 %4133, 2
  store i64 %4134, i64* %PC
  %4135 = trunc i64 %4130 to i32
  %4136 = add i32 %4131, %4135
  %4137 = zext i32 %4136 to i64
  store i64 %4137, i64* %RCX, align 8, !tbaa !2428
  %4138 = icmp ult i32 %4136, %4135
  %4139 = icmp ult i32 %4136, %4131
  %4140 = or i1 %4138, %4139
  %4141 = zext i1 %4140 to i8
  %4142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4141, i8* %4142, align 1, !tbaa !2433
  %4143 = and i32 %4136, 255
  %4144 = call i32 @llvm.ctpop.i32(i32 %4143) #16
  %4145 = trunc i32 %4144 to i8
  %4146 = and i8 %4145, 1
  %4147 = xor i8 %4146, 1
  %4148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4147, i8* %4148, align 1, !tbaa !2447
  %4149 = xor i64 %4132, %4130
  %4150 = trunc i64 %4149 to i32
  %4151 = xor i32 %4150, %4136
  %4152 = lshr i32 %4151, 4
  %4153 = trunc i32 %4152 to i8
  %4154 = and i8 %4153, 1
  %4155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4154, i8* %4155, align 1, !tbaa !2448
  %4156 = icmp eq i32 %4136, 0
  %4157 = zext i1 %4156 to i8
  %4158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4157, i8* %4158, align 1, !tbaa !2449
  %4159 = lshr i32 %4136, 31
  %4160 = trunc i32 %4159 to i8
  %4161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4160, i8* %4161, align 1, !tbaa !2450
  %4162 = lshr i32 %4135, 31
  %4163 = lshr i32 %4131, 31
  %4164 = xor i32 %4159, %4162
  %4165 = xor i32 %4159, %4163
  %4166 = add nuw nsw i32 %4164, %4165
  %4167 = icmp eq i32 %4166, 2
  %4168 = zext i1 %4167 to i8
  %4169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4168, i8* %4169, align 1, !tbaa !2451
  %4170 = load i64, i64* %RCX
  %4171 = load i64, i64* %PC
  %4172 = add i64 %4171, 3
  store i64 %4172, i64* %PC
  %4173 = and i64 %4170, 4294967295
  %4174 = shl i64 %4173, 2
  %4175 = trunc i64 %4174 to i32
  %4176 = icmp slt i32 %4175, 0
  %4177 = shl i32 %4175, 1
  %4178 = zext i32 %4177 to i64
  store i64 %4178, i64* %RCX, align 8, !tbaa !2428
  %4179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4180 = zext i1 %4176 to i8
  store i8 %4180, i8* %4179, align 1, !tbaa !2432
  %4181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4182 = and i32 %4177, 254
  %4183 = call i32 @llvm.ctpop.i32(i32 %4182) #16
  %4184 = trunc i32 %4183 to i8
  %4185 = and i8 %4184, 1
  %4186 = xor i8 %4185, 1
  store i8 %4186, i8* %4181, align 1, !tbaa !2432
  %4187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4187, align 1, !tbaa !2432
  %4188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4189 = icmp eq i32 %4177, 0
  %4190 = zext i1 %4189 to i8
  store i8 %4190, i8* %4188, align 1, !tbaa !2432
  %4191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4192 = lshr i32 %4177, 31
  %4193 = trunc i32 %4192 to i8
  store i8 %4193, i8* %4191, align 1, !tbaa !2432
  %4194 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4194, align 1, !tbaa !2432
  %4195 = load i64, i64* %RAX
  %4196 = load i32, i32* %ECX
  %4197 = zext i32 %4196 to i64
  %4198 = load i64, i64* %PC
  %4199 = add i64 %4198, 2
  store i64 %4199, i64* %PC
  %4200 = trunc i64 %4195 to i32
  %4201 = add i32 %4196, %4200
  %4202 = zext i32 %4201 to i64
  store i64 %4202, i64* %RAX, align 8, !tbaa !2428
  %4203 = icmp ult i32 %4201, %4200
  %4204 = icmp ult i32 %4201, %4196
  %4205 = or i1 %4203, %4204
  %4206 = zext i1 %4205 to i8
  %4207 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4206, i8* %4207, align 1, !tbaa !2433
  %4208 = and i32 %4201, 255
  %4209 = call i32 @llvm.ctpop.i32(i32 %4208) #16
  %4210 = trunc i32 %4209 to i8
  %4211 = and i8 %4210, 1
  %4212 = xor i8 %4211, 1
  %4213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4212, i8* %4213, align 1, !tbaa !2447
  %4214 = xor i64 %4197, %4195
  %4215 = trunc i64 %4214 to i32
  %4216 = xor i32 %4215, %4201
  %4217 = lshr i32 %4216, 4
  %4218 = trunc i32 %4217 to i8
  %4219 = and i8 %4218, 1
  %4220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4219, i8* %4220, align 1, !tbaa !2448
  %4221 = icmp eq i32 %4201, 0
  %4222 = zext i1 %4221 to i8
  %4223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4222, i8* %4223, align 1, !tbaa !2449
  %4224 = lshr i32 %4201, 31
  %4225 = trunc i32 %4224 to i8
  %4226 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4225, i8* %4226, align 1, !tbaa !2450
  %4227 = lshr i32 %4200, 31
  %4228 = lshr i32 %4196, 31
  %4229 = xor i32 %4224, %4227
  %4230 = xor i32 %4224, %4228
  %4231 = add nuw nsw i32 %4229, %4230
  %4232 = icmp eq i32 %4231, 2
  %4233 = zext i1 %4232 to i8
  %4234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4233, i8* %4234, align 1, !tbaa !2451
  %4235 = load i32, i32* %EAX
  %4236 = zext i32 %4235 to i64
  %4237 = load i64, i64* %PC
  %4238 = add i64 %4237, 3
  store i64 %4238, i64* %PC
  %4239 = shl i64 %4236, 32
  %4240 = ashr exact i64 %4239, 32
  store i64 %4240, i64* %RSI, align 8, !tbaa !2428
  %4241 = load i64, i64* %RSI
  %4242 = mul i64 %4241, 4
  %4243 = add i64 %4242, ptrtoint (%puzzl_type* @puzzl to i64)
  %4244 = load i64, i64* %PC
  %4245 = add i64 %4244, 11
  store i64 %4245, i64* %PC
  %4246 = inttoptr i64 %4243 to i32*
  store i32 0, i32* %4246
  %4247 = load i64, i64* %RBP
  %4248 = sub i64 %4247, 12
  %4249 = load i64, i64* %PC
  %4250 = add i64 %4249, 3
  store i64 %4250, i64* %PC
  %4251 = inttoptr i64 %4248 to i32*
  %4252 = load i32, i32* %4251
  %4253 = zext i32 %4252 to i64
  store i64 %4253, i64* %RAX, align 8, !tbaa !2428
  %4254 = load i64, i64* %RAX
  %4255 = load i64, i64* %PC
  %4256 = add i64 %4255, 3
  store i64 %4256, i64* %PC
  %4257 = trunc i64 %4254 to i32
  %4258 = add i32 1, %4257
  %4259 = zext i32 %4258 to i64
  store i64 %4259, i64* %RAX, align 8, !tbaa !2428
  %4260 = icmp ult i32 %4258, %4257
  %4261 = icmp ult i32 %4258, 1
  %4262 = or i1 %4260, %4261
  %4263 = zext i1 %4262 to i8
  %4264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4263, i8* %4264, align 1, !tbaa !2433
  %4265 = and i32 %4258, 255
  %4266 = call i32 @llvm.ctpop.i32(i32 %4265) #16
  %4267 = trunc i32 %4266 to i8
  %4268 = and i8 %4267, 1
  %4269 = xor i8 %4268, 1
  %4270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4269, i8* %4270, align 1, !tbaa !2447
  %4271 = xor i64 1, %4254
  %4272 = trunc i64 %4271 to i32
  %4273 = xor i32 %4272, %4258
  %4274 = lshr i32 %4273, 4
  %4275 = trunc i32 %4274 to i8
  %4276 = and i8 %4275, 1
  %4277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4276, i8* %4277, align 1, !tbaa !2448
  %4278 = icmp eq i32 %4258, 0
  %4279 = zext i1 %4278 to i8
  %4280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4279, i8* %4280, align 1, !tbaa !2449
  %4281 = lshr i32 %4258, 31
  %4282 = trunc i32 %4281 to i8
  %4283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4282, i8* %4283, align 1, !tbaa !2450
  %4284 = lshr i32 %4257, 31
  %4285 = xor i32 %4281, %4284
  %4286 = add nuw nsw i32 %4285, %4281
  %4287 = icmp eq i32 %4286, 2
  %4288 = zext i1 %4287 to i8
  %4289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4288, i8* %4289, align 1, !tbaa !2451
  %4290 = load i64, i64* %RBP
  %4291 = sub i64 %4290, 12
  %4292 = load i32, i32* %EAX
  %4293 = zext i32 %4292 to i64
  %4294 = load i64, i64* %PC
  %4295 = add i64 %4294, 3
  store i64 %4295, i64* %PC
  %4296 = inttoptr i64 %4291 to i32*
  store i32 %4292, i32* %4296
  %4297 = load i64, i64* %PC
  %4298 = sub i64 %4297, 52
  %4299 = load i64, i64* %PC
  %4300 = add i64 %4299, 5
  store i64 %4300, i64* %PC
  %4301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4298, i64* %4301, align 8, !tbaa !2428
  br label %block_4008a2

block_400d2c:                                     ; preds = %block_400d22
  %4302 = load i64, i64* %RBP
  %4303 = sub i64 %4302, 8
  %4304 = load i64, i64* %PC
  %4305 = add i64 %4304, 7
  store i64 %4305, i64* %PC
  %4306 = inttoptr i64 %4303 to i32*
  store i32 0, i32* %4306
  br label %block_400d33

block_40101b:                                     ; preds = %block_400f9a
  %4307 = load i64, i64* %PC
  %4308 = add i64 %4307, 11
  store i64 %4308, i64* %PC
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 40) to i32*)
  %4309 = load i64, i64* %PC
  %4310 = add i64 %4309, 11
  store i64 %4310, i64* %PC
  store i32 65, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 40) to i32*)
  %4311 = load i64, i64* %RBP
  %4312 = sub i64 %4311, 4
  %4313 = load i64, i64* %PC
  %4314 = add i64 %4313, 7
  store i64 %4314, i64* %PC
  %4315 = inttoptr i64 %4312 to i32*
  store i32 0, i32* %4315
  br label %block_401038

block_400c9f:                                     ; preds = %block_400c95
  %4316 = load i64, i64* %RBP
  %4317 = sub i64 %4316, 12
  %4318 = load i64, i64* %PC
  %4319 = add i64 %4318, 7
  store i64 %4319, i64* %PC
  %4320 = inttoptr i64 %4317 to i32*
  store i32 0, i32* %4320
  br label %block_400ca6

block_40099a:                                     ; preds = %block_400990
  %4321 = load i64, i64* %RBP
  %4322 = sub i64 %4321, 4
  %4323 = load i64, i64* %PC
  %4324 = add i64 %4323, 3
  store i64 %4324, i64* %PC
  %4325 = inttoptr i64 %4322 to i32*
  %4326 = load i32, i32* %4325
  %4327 = zext i32 %4326 to i64
  store i64 %4327, i64* %RAX, align 8, !tbaa !2428
  %4328 = load i64, i64* %RBP
  %4329 = sub i64 %4328, 8
  %4330 = load i64, i64* %PC
  %4331 = add i64 %4330, 3
  store i64 %4331, i64* %PC
  %4332 = inttoptr i64 %4329 to i32*
  %4333 = load i32, i32* %4332
  %4334 = zext i32 %4333 to i64
  store i64 %4334, i64* %RCX, align 8, !tbaa !2428
  %4335 = load i64, i64* %RBP
  %4336 = sub i64 %4335, 12
  %4337 = load i64, i64* %PC
  %4338 = add i64 %4337, 3
  store i64 %4338, i64* %PC
  %4339 = inttoptr i64 %4336 to i32*
  %4340 = load i32, i32* %4339
  %4341 = zext i32 %4340 to i64
  store i64 %4341, i64* %RDX, align 8, !tbaa !2428
  %4342 = load i64, i64* %RDX
  %4343 = load i64, i64* %PC
  %4344 = add i64 %4343, 3
  store i64 %4344, i64* %PC
  %4345 = and i64 %4342, 4294967295
  %4346 = shl i64 %4345, 2
  %4347 = trunc i64 %4346 to i32
  %4348 = icmp slt i32 %4347, 0
  %4349 = shl i32 %4347, 1
  %4350 = zext i32 %4349 to i64
  store i64 %4350, i64* %RDX, align 8, !tbaa !2428
  %4351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4352 = zext i1 %4348 to i8
  store i8 %4352, i8* %4351, align 1, !tbaa !2432
  %4353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4354 = and i32 %4349, 254
  %4355 = call i32 @llvm.ctpop.i32(i32 %4354) #16
  %4356 = trunc i32 %4355 to i8
  %4357 = and i8 %4356, 1
  %4358 = xor i8 %4357, 1
  store i8 %4358, i8* %4353, align 1, !tbaa !2432
  %4359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4359, align 1, !tbaa !2432
  %4360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4361 = icmp eq i32 %4349, 0
  %4362 = zext i1 %4361 to i8
  store i8 %4362, i8* %4360, align 1, !tbaa !2432
  %4363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4364 = lshr i32 %4349, 31
  %4365 = trunc i32 %4364 to i8
  store i8 %4365, i8* %4363, align 1, !tbaa !2432
  %4366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4366, align 1, !tbaa !2432
  %4367 = load i64, i64* %RCX
  %4368 = load i32, i32* %EDX
  %4369 = zext i32 %4368 to i64
  %4370 = load i64, i64* %PC
  %4371 = add i64 %4370, 2
  store i64 %4371, i64* %PC
  %4372 = trunc i64 %4367 to i32
  %4373 = add i32 %4368, %4372
  %4374 = zext i32 %4373 to i64
  store i64 %4374, i64* %RCX, align 8, !tbaa !2428
  %4375 = icmp ult i32 %4373, %4372
  %4376 = icmp ult i32 %4373, %4368
  %4377 = or i1 %4375, %4376
  %4378 = zext i1 %4377 to i8
  %4379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4378, i8* %4379, align 1, !tbaa !2433
  %4380 = and i32 %4373, 255
  %4381 = call i32 @llvm.ctpop.i32(i32 %4380) #16
  %4382 = trunc i32 %4381 to i8
  %4383 = and i8 %4382, 1
  %4384 = xor i8 %4383, 1
  %4385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4384, i8* %4385, align 1, !tbaa !2447
  %4386 = xor i64 %4369, %4367
  %4387 = trunc i64 %4386 to i32
  %4388 = xor i32 %4387, %4373
  %4389 = lshr i32 %4388, 4
  %4390 = trunc i32 %4389 to i8
  %4391 = and i8 %4390, 1
  %4392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4391, i8* %4392, align 1, !tbaa !2448
  %4393 = icmp eq i32 %4373, 0
  %4394 = zext i1 %4393 to i8
  %4395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4394, i8* %4395, align 1, !tbaa !2449
  %4396 = lshr i32 %4373, 31
  %4397 = trunc i32 %4396 to i8
  %4398 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4397, i8* %4398, align 1, !tbaa !2450
  %4399 = lshr i32 %4372, 31
  %4400 = lshr i32 %4368, 31
  %4401 = xor i32 %4396, %4399
  %4402 = xor i32 %4396, %4400
  %4403 = add nuw nsw i32 %4401, %4402
  %4404 = icmp eq i32 %4403, 2
  %4405 = zext i1 %4404 to i8
  %4406 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4405, i8* %4406, align 1, !tbaa !2451
  %4407 = load i64, i64* %RCX
  %4408 = load i64, i64* %PC
  %4409 = add i64 %4408, 3
  store i64 %4409, i64* %PC
  %4410 = and i64 %4407, 4294967295
  %4411 = shl i64 %4410, 2
  %4412 = trunc i64 %4411 to i32
  %4413 = icmp slt i32 %4412, 0
  %4414 = shl i32 %4412, 1
  %4415 = zext i32 %4414 to i64
  store i64 %4415, i64* %RCX, align 8, !tbaa !2428
  %4416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4417 = zext i1 %4413 to i8
  store i8 %4417, i8* %4416, align 1, !tbaa !2432
  %4418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %4419 = and i32 %4414, 254
  %4420 = call i32 @llvm.ctpop.i32(i32 %4419) #16
  %4421 = trunc i32 %4420 to i8
  %4422 = and i8 %4421, 1
  %4423 = xor i8 %4422, 1
  store i8 %4423, i8* %4418, align 1, !tbaa !2432
  %4424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4424, align 1, !tbaa !2432
  %4425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4426 = icmp eq i32 %4414, 0
  %4427 = zext i1 %4426 to i8
  store i8 %4427, i8* %4425, align 1, !tbaa !2432
  %4428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4429 = lshr i32 %4414, 31
  %4430 = trunc i32 %4429 to i8
  store i8 %4430, i8* %4428, align 1, !tbaa !2432
  %4431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4431, align 1, !tbaa !2432
  %4432 = load i64, i64* %RAX
  %4433 = load i32, i32* %ECX
  %4434 = zext i32 %4433 to i64
  %4435 = load i64, i64* %PC
  %4436 = add i64 %4435, 2
  store i64 %4436, i64* %PC
  %4437 = trunc i64 %4432 to i32
  %4438 = add i32 %4433, %4437
  %4439 = zext i32 %4438 to i64
  store i64 %4439, i64* %RAX, align 8, !tbaa !2428
  %4440 = icmp ult i32 %4438, %4437
  %4441 = icmp ult i32 %4438, %4433
  %4442 = or i1 %4440, %4441
  %4443 = zext i1 %4442 to i8
  %4444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4443, i8* %4444, align 1, !tbaa !2433
  %4445 = and i32 %4438, 255
  %4446 = call i32 @llvm.ctpop.i32(i32 %4445) #16
  %4447 = trunc i32 %4446 to i8
  %4448 = and i8 %4447, 1
  %4449 = xor i8 %4448, 1
  %4450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4449, i8* %4450, align 1, !tbaa !2447
  %4451 = xor i64 %4434, %4432
  %4452 = trunc i64 %4451 to i32
  %4453 = xor i32 %4452, %4438
  %4454 = lshr i32 %4453, 4
  %4455 = trunc i32 %4454 to i8
  %4456 = and i8 %4455, 1
  %4457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4456, i8* %4457, align 1, !tbaa !2448
  %4458 = icmp eq i32 %4438, 0
  %4459 = zext i1 %4458 to i8
  %4460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4459, i8* %4460, align 1, !tbaa !2449
  %4461 = lshr i32 %4438, 31
  %4462 = trunc i32 %4461 to i8
  %4463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4462, i8* %4463, align 1, !tbaa !2450
  %4464 = lshr i32 %4437, 31
  %4465 = lshr i32 %4433, 31
  %4466 = xor i32 %4461, %4464
  %4467 = xor i32 %4461, %4465
  %4468 = add nuw nsw i32 %4466, %4467
  %4469 = icmp eq i32 %4468, 2
  %4470 = zext i1 %4469 to i8
  %4471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4470, i8* %4471, align 1, !tbaa !2451
  %4472 = load i32, i32* %EAX
  %4473 = zext i32 %4472 to i64
  %4474 = load i64, i64* %PC
  %4475 = add i64 %4474, 3
  store i64 %4475, i64* %PC
  %4476 = shl i64 %4473, 32
  %4477 = ashr exact i64 %4476, 32
  store i64 %4477, i64* %RSI, align 8, !tbaa !2428
  %4478 = load i64, i64* %RSI
  %4479 = mul i64 %4478, 4
  %4480 = add i64 %4479, ptrtoint (%p_type* @p to i64)
  %4481 = load i64, i64* %PC
  %4482 = add i64 %4481, 11
  store i64 %4482, i64* %PC
  %4483 = inttoptr i64 %4480 to i32*
  store i32 1, i32* %4483
  %4484 = load i64, i64* %RBP
  %4485 = sub i64 %4484, 12
  %4486 = load i64, i64* %PC
  %4487 = add i64 %4486, 3
  store i64 %4487, i64* %PC
  %4488 = inttoptr i64 %4485 to i32*
  %4489 = load i32, i32* %4488
  %4490 = zext i32 %4489 to i64
  store i64 %4490, i64* %RAX, align 8, !tbaa !2428
  %4491 = load i64, i64* %RAX
  %4492 = load i64, i64* %PC
  %4493 = add i64 %4492, 3
  store i64 %4493, i64* %PC
  %4494 = trunc i64 %4491 to i32
  %4495 = add i32 1, %4494
  %4496 = zext i32 %4495 to i64
  store i64 %4496, i64* %RAX, align 8, !tbaa !2428
  %4497 = icmp ult i32 %4495, %4494
  %4498 = icmp ult i32 %4495, 1
  %4499 = or i1 %4497, %4498
  %4500 = zext i1 %4499 to i8
  %4501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4500, i8* %4501, align 1, !tbaa !2433
  %4502 = and i32 %4495, 255
  %4503 = call i32 @llvm.ctpop.i32(i32 %4502) #16
  %4504 = trunc i32 %4503 to i8
  %4505 = and i8 %4504, 1
  %4506 = xor i8 %4505, 1
  %4507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4506, i8* %4507, align 1, !tbaa !2447
  %4508 = xor i64 1, %4491
  %4509 = trunc i64 %4508 to i32
  %4510 = xor i32 %4509, %4495
  %4511 = lshr i32 %4510, 4
  %4512 = trunc i32 %4511 to i8
  %4513 = and i8 %4512, 1
  %4514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4513, i8* %4514, align 1, !tbaa !2448
  %4515 = icmp eq i32 %4495, 0
  %4516 = zext i1 %4515 to i8
  %4517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4516, i8* %4517, align 1, !tbaa !2449
  %4518 = lshr i32 %4495, 31
  %4519 = trunc i32 %4518 to i8
  %4520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4519, i8* %4520, align 1, !tbaa !2450
  %4521 = lshr i32 %4494, 31
  %4522 = xor i32 %4518, %4521
  %4523 = add nuw nsw i32 %4522, %4518
  %4524 = icmp eq i32 %4523, 2
  %4525 = zext i1 %4524 to i8
  %4526 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4525, i8* %4526, align 1, !tbaa !2451
  %4527 = load i64, i64* %RBP
  %4528 = sub i64 %4527, 12
  %4529 = load i32, i32* %EAX
  %4530 = zext i32 %4529 to i64
  %4531 = load i64, i64* %PC
  %4532 = add i64 %4531, 3
  store i64 %4532, i64* %PC
  %4533 = inttoptr i64 %4528 to i32*
  store i32 %4529, i32* %4533
  %4534 = load i64, i64* %PC
  %4535 = sub i64 %4534, 52
  %4536 = load i64, i64* %PC
  %4537 = add i64 %4536, 5
  store i64 %4537, i64* %PC
  %4538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4535, i64* %4538, align 8, !tbaa !2428
  br label %block_400990

block_4009c9:                                     ; preds = %block_400990
  %4539 = load i64, i64* %PC
  %4540 = add i64 %4539, 5
  %4541 = load i64, i64* %PC
  %4542 = add i64 %4541, 5
  store i64 %4542, i64* %PC
  %4543 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4540, i64* %4543, align 8, !tbaa !2428
  %4544 = load i64, i64* %RBP
  %4545 = sub i64 %4544, 8
  %4546 = load i64, i64* %PC
  %4547 = add i64 %4546, 3
  store i64 %4547, i64* %PC
  %4548 = inttoptr i64 %4545 to i32*
  %4549 = load i32, i32* %4548
  %4550 = zext i32 %4549 to i64
  store i64 %4550, i64* %RAX, align 8, !tbaa !2428
  %4551 = load i64, i64* %RAX
  %4552 = load i64, i64* %PC
  %4553 = add i64 %4552, 3
  store i64 %4553, i64* %PC
  %4554 = trunc i64 %4551 to i32
  %4555 = add i32 1, %4554
  %4556 = zext i32 %4555 to i64
  store i64 %4556, i64* %RAX, align 8, !tbaa !2428
  %4557 = icmp ult i32 %4555, %4554
  %4558 = icmp ult i32 %4555, 1
  %4559 = or i1 %4557, %4558
  %4560 = zext i1 %4559 to i8
  %4561 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4560, i8* %4561, align 1, !tbaa !2433
  %4562 = and i32 %4555, 255
  %4563 = call i32 @llvm.ctpop.i32(i32 %4562) #16
  %4564 = trunc i32 %4563 to i8
  %4565 = and i8 %4564, 1
  %4566 = xor i8 %4565, 1
  %4567 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4566, i8* %4567, align 1, !tbaa !2447
  %4568 = xor i64 1, %4551
  %4569 = trunc i64 %4568 to i32
  %4570 = xor i32 %4569, %4555
  %4571 = lshr i32 %4570, 4
  %4572 = trunc i32 %4571 to i8
  %4573 = and i8 %4572, 1
  %4574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4573, i8* %4574, align 1, !tbaa !2448
  %4575 = icmp eq i32 %4555, 0
  %4576 = zext i1 %4575 to i8
  %4577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4576, i8* %4577, align 1, !tbaa !2449
  %4578 = lshr i32 %4555, 31
  %4579 = trunc i32 %4578 to i8
  %4580 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4579, i8* %4580, align 1, !tbaa !2450
  %4581 = lshr i32 %4554, 31
  %4582 = xor i32 %4578, %4581
  %4583 = add nuw nsw i32 %4582, %4578
  %4584 = icmp eq i32 %4583, 2
  %4585 = zext i1 %4584 to i8
  %4586 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4585, i8* %4586, align 1, !tbaa !2451
  %4587 = load i64, i64* %RBP
  %4588 = sub i64 %4587, 8
  %4589 = load i32, i32* %EAX
  %4590 = zext i32 %4589 to i64
  %4591 = load i64, i64* %PC
  %4592 = add i64 %4591, 3
  store i64 %4592, i64* %PC
  %4593 = inttoptr i64 %4588 to i32*
  store i32 %4589, i32* %4593
  %4594 = load i64, i64* %PC
  %4595 = sub i64 %4594, 88
  %4596 = load i64, i64* %PC
  %4597 = add i64 %4596, 5
  store i64 %4597, i64* %PC
  %4598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4595, i64* %4598, align 8, !tbaa !2428
  br label %block_40097f

block_400c95:                                     ; preds = %block_400c8e, %block_400cdf
  %MEMORY.20 = phi %struct.Memory* [ %MEMORY.22, %block_400c8e ], [ %MEMORY.21, %block_400cdf ]
  %4599 = load i64, i64* %RBP
  %4600 = sub i64 %4599, 8
  %4601 = load i64, i64* %PC
  %4602 = add i64 %4601, 4
  store i64 %4602, i64* %PC
  %4603 = inttoptr i64 %4600 to i32*
  %4604 = load i32, i32* %4603
  %4605 = sub i32 %4604, 1
  %4606 = icmp ult i32 %4604, 1
  %4607 = zext i1 %4606 to i8
  %4608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4607, i8* %4608, align 1, !tbaa !2433
  %4609 = and i32 %4605, 255
  %4610 = call i32 @llvm.ctpop.i32(i32 %4609) #16
  %4611 = trunc i32 %4610 to i8
  %4612 = and i8 %4611, 1
  %4613 = xor i8 %4612, 1
  %4614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4613, i8* %4614, align 1, !tbaa !2447
  %4615 = xor i32 %4604, 1
  %4616 = xor i32 %4615, %4605
  %4617 = lshr i32 %4616, 4
  %4618 = trunc i32 %4617 to i8
  %4619 = and i8 %4618, 1
  %4620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4619, i8* %4620, align 1, !tbaa !2448
  %4621 = icmp eq i32 %4605, 0
  %4622 = zext i1 %4621 to i8
  %4623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4622, i8* %4623, align 1, !tbaa !2449
  %4624 = lshr i32 %4605, 31
  %4625 = trunc i32 %4624 to i8
  %4626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4625, i8* %4626, align 1, !tbaa !2450
  %4627 = lshr i32 %4604, 31
  %4628 = xor i32 %4624, %4627
  %4629 = add nuw nsw i32 %4628, %4627
  %4630 = icmp eq i32 %4629, 2
  %4631 = zext i1 %4630 to i8
  %4632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4631, i8* %4632, align 1, !tbaa !2451
  %4633 = load i64, i64* %PC
  %4634 = add i64 %4633, 89
  %4635 = load i64, i64* %PC
  %4636 = add i64 %4635, 6
  %4637 = load i64, i64* %PC
  %4638 = add i64 %4637, 6
  store i64 %4638, i64* %PC
  %4639 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4640 = load i8, i8* %4639, align 1, !tbaa !2449
  %4641 = icmp eq i8 %4640, 0
  %4642 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4643 = load i8, i8* %4642, align 1, !tbaa !2450
  %4644 = icmp ne i8 %4643, 0
  %4645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4646 = load i8, i8* %4645, align 1, !tbaa !2451
  %4647 = icmp ne i8 %4646, 0
  %4648 = xor i1 %4644, %4647
  %4649 = xor i1 %4648, true
  %4650 = and i1 %4641, %4649
  %4651 = zext i1 %4650 to i8
  store i8 %4651, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %4652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4653 = select i1 %4650, i64 %4634, i64 %4636
  store i64 %4653, i64* %4652, align 8, !tbaa !2428
  %4654 = load i8, i8* %BRANCH_TAKEN
  %4655 = icmp eq i8 %4654, 1
  br i1 %4655, label %block_400cf2, label %block_400c9f

block_401093:                                     ; preds = %block_40105a
  %4656 = load i64, i64* %PC
  %4657 = add i64 %4656, 5
  %4658 = load i64, i64* %PC
  %4659 = add i64 %4658, 5
  store i64 %4659, i64* %PC
  %4660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4657, i64* %4660, align 8, !tbaa !2428
  %4661 = load i64, i64* %RBP
  %4662 = sub i64 %4661, 8
  %4663 = load i64, i64* %PC
  %4664 = add i64 %4663, 3
  store i64 %4664, i64* %PC
  %4665 = inttoptr i64 %4662 to i32*
  %4666 = load i32, i32* %4665
  %4667 = zext i32 %4666 to i64
  store i64 %4667, i64* %RAX, align 8, !tbaa !2428
  %4668 = load i64, i64* %RAX
  %4669 = load i64, i64* %PC
  %4670 = add i64 %4669, 3
  store i64 %4670, i64* %PC
  %4671 = trunc i64 %4668 to i32
  %4672 = add i32 1, %4671
  %4673 = zext i32 %4672 to i64
  store i64 %4673, i64* %RAX, align 8, !tbaa !2428
  %4674 = icmp ult i32 %4672, %4671
  %4675 = icmp ult i32 %4672, 1
  %4676 = or i1 %4674, %4675
  %4677 = zext i1 %4676 to i8
  %4678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4677, i8* %4678, align 1, !tbaa !2433
  %4679 = and i32 %4672, 255
  %4680 = call i32 @llvm.ctpop.i32(i32 %4679) #16
  %4681 = trunc i32 %4680 to i8
  %4682 = and i8 %4681, 1
  %4683 = xor i8 %4682, 1
  %4684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4683, i8* %4684, align 1, !tbaa !2447
  %4685 = xor i64 1, %4668
  %4686 = trunc i64 %4685 to i32
  %4687 = xor i32 %4686, %4672
  %4688 = lshr i32 %4687, 4
  %4689 = trunc i32 %4688 to i8
  %4690 = and i8 %4689, 1
  %4691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4690, i8* %4691, align 1, !tbaa !2448
  %4692 = icmp eq i32 %4672, 0
  %4693 = zext i1 %4692 to i8
  %4694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4693, i8* %4694, align 1, !tbaa !2449
  %4695 = lshr i32 %4672, 31
  %4696 = trunc i32 %4695 to i8
  %4697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4696, i8* %4697, align 1, !tbaa !2450
  %4698 = lshr i32 %4671, 31
  %4699 = xor i32 %4695, %4698
  %4700 = add nuw nsw i32 %4699, %4695
  %4701 = icmp eq i32 %4700, 2
  %4702 = zext i1 %4701 to i8
  %4703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4702, i8* %4703, align 1, !tbaa !2451
  %4704 = load i64, i64* %RBP
  %4705 = sub i64 %4704, 8
  %4706 = load i32, i32* %EAX
  %4707 = zext i32 %4706 to i64
  %4708 = load i64, i64* %PC
  %4709 = add i64 %4708, 3
  store i64 %4709, i64* %PC
  %4710 = inttoptr i64 %4705 to i32*
  store i32 %4706, i32* %4710
  %4711 = load i64, i64* %PC
  %4712 = sub i64 %4711, 88
  %4713 = load i64, i64* %PC
  %4714 = add i64 %4713, 5
  store i64 %4714, i64* %PC
  %4715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4712, i64* %4715, align 8, !tbaa !2428
  br label %block_401049

block_400ca6:                                     ; preds = %block_400c9f, %block_400cb0
  %MEMORY.21 = phi %struct.Memory* [ %MEMORY.20, %block_400c9f ], [ %MEMORY.21, %block_400cb0 ]
  %4716 = load i64, i64* %RBP
  %4717 = sub i64 %4716, 12
  %4718 = load i64, i64* %PC
  %4719 = add i64 %4718, 4
  store i64 %4719, i64* %PC
  %4720 = inttoptr i64 %4717 to i32*
  %4721 = load i32, i32* %4720
  %4722 = sub i32 %4721, 3
  %4723 = icmp ult i32 %4721, 3
  %4724 = zext i1 %4723 to i8
  %4725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4724, i8* %4725, align 1, !tbaa !2433
  %4726 = and i32 %4722, 255
  %4727 = call i32 @llvm.ctpop.i32(i32 %4726) #16
  %4728 = trunc i32 %4727 to i8
  %4729 = and i8 %4728, 1
  %4730 = xor i8 %4729, 1
  %4731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4730, i8* %4731, align 1, !tbaa !2447
  %4732 = xor i32 %4721, 3
  %4733 = xor i32 %4732, %4722
  %4734 = lshr i32 %4733, 4
  %4735 = trunc i32 %4734 to i8
  %4736 = and i8 %4735, 1
  %4737 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4736, i8* %4737, align 1, !tbaa !2448
  %4738 = icmp eq i32 %4722, 0
  %4739 = zext i1 %4738 to i8
  %4740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4739, i8* %4740, align 1, !tbaa !2449
  %4741 = lshr i32 %4722, 31
  %4742 = trunc i32 %4741 to i8
  %4743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4742, i8* %4743, align 1, !tbaa !2450
  %4744 = lshr i32 %4721, 31
  %4745 = xor i32 %4741, %4744
  %4746 = add nuw nsw i32 %4745, %4744
  %4747 = icmp eq i32 %4746, 2
  %4748 = zext i1 %4747 to i8
  %4749 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4748, i8* %4749, align 1, !tbaa !2451
  %4750 = load i64, i64* %PC
  %4751 = add i64 %4750, 53
  %4752 = load i64, i64* %PC
  %4753 = add i64 %4752, 6
  %4754 = load i64, i64* %PC
  %4755 = add i64 %4754, 6
  store i64 %4755, i64* %PC
  %4756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4757 = load i8, i8* %4756, align 1, !tbaa !2449
  %4758 = icmp eq i8 %4757, 0
  %4759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4760 = load i8, i8* %4759, align 1, !tbaa !2450
  %4761 = icmp ne i8 %4760, 0
  %4762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4763 = load i8, i8* %4762, align 1, !tbaa !2451
  %4764 = icmp ne i8 %4763, 0
  %4765 = xor i1 %4761, %4764
  %4766 = xor i1 %4765, true
  %4767 = and i1 %4758, %4766
  %4768 = zext i1 %4767 to i8
  store i8 %4768, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %4769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4770 = select i1 %4767, i64 %4751, i64 %4753
  store i64 %4770, i64* %4769, align 8, !tbaa !2428
  %4771 = load i8, i8* %BRANCH_TAKEN
  %4772 = icmp eq i8 %4771, 1
  br i1 %4772, label %block_400cdf, label %block_400cb0

block_400a8d:                                     ; preds = %block_400a0c
  %4773 = load i64, i64* %PC
  %4774 = add i64 %4773, 11
  store i64 %4774, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 4) to i32*)
  %4775 = load i64, i64* %PC
  %4776 = add i64 %4775, 11
  store i64 %4776, i64* %PC
  store i32 193, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 4) to i32*)
  %4777 = load i64, i64* %RBP
  %4778 = sub i64 %4777, 4
  %4779 = load i64, i64* %PC
  %4780 = add i64 %4779, 7
  store i64 %4780, i64* %PC
  %4781 = inttoptr i64 %4778 to i32*
  store i32 0, i32* %4781
  br label %block_400aaa

block_40088a:                                     ; preds = %block_400880
  %4782 = sub i64 %4995, 8
  %4783 = load i64, i64* %PC
  %4784 = add i64 %4783, 7
  store i64 %4784, i64* %PC
  %4785 = inttoptr i64 %4782 to i32*
  store i32 1, i32* %4785
  br label %block_400891

block_400b18:                                     ; preds = %block_400abb
  %4786 = load i64, i64* %PC
  %4787 = add i64 %4786, 5
  %4788 = load i64, i64* %PC
  %4789 = add i64 %4788, 5
  store i64 %4789, i64* %PC
  %4790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4787, i64* %4790, align 8, !tbaa !2428
  %4791 = load i64, i64* %RBP
  %4792 = sub i64 %4791, 4
  %4793 = load i64, i64* %PC
  %4794 = add i64 %4793, 3
  store i64 %4794, i64* %PC
  %4795 = inttoptr i64 %4792 to i32*
  %4796 = load i32, i32* %4795
  %4797 = zext i32 %4796 to i64
  store i64 %4797, i64* %RAX, align 8, !tbaa !2428
  %4798 = load i64, i64* %RAX
  %4799 = load i64, i64* %PC
  %4800 = add i64 %4799, 3
  store i64 %4800, i64* %PC
  %4801 = trunc i64 %4798 to i32
  %4802 = add i32 1, %4801
  %4803 = zext i32 %4802 to i64
  store i64 %4803, i64* %RAX, align 8, !tbaa !2428
  %4804 = icmp ult i32 %4802, %4801
  %4805 = icmp ult i32 %4802, 1
  %4806 = or i1 %4804, %4805
  %4807 = zext i1 %4806 to i8
  %4808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4807, i8* %4808, align 1, !tbaa !2433
  %4809 = and i32 %4802, 255
  %4810 = call i32 @llvm.ctpop.i32(i32 %4809) #16
  %4811 = trunc i32 %4810 to i8
  %4812 = and i8 %4811, 1
  %4813 = xor i8 %4812, 1
  %4814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4813, i8* %4814, align 1, !tbaa !2447
  %4815 = xor i64 1, %4798
  %4816 = trunc i64 %4815 to i32
  %4817 = xor i32 %4816, %4802
  %4818 = lshr i32 %4817, 4
  %4819 = trunc i32 %4818 to i8
  %4820 = and i8 %4819, 1
  %4821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4820, i8* %4821, align 1, !tbaa !2448
  %4822 = icmp eq i32 %4802, 0
  %4823 = zext i1 %4822 to i8
  %4824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4823, i8* %4824, align 1, !tbaa !2449
  %4825 = lshr i32 %4802, 31
  %4826 = trunc i32 %4825 to i8
  %4827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4826, i8* %4827, align 1, !tbaa !2450
  %4828 = lshr i32 %4801, 31
  %4829 = xor i32 %4825, %4828
  %4830 = add nuw nsw i32 %4829, %4825
  %4831 = icmp eq i32 %4830, 2
  %4832 = zext i1 %4831 to i8
  %4833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4832, i8* %4833, align 1, !tbaa !2451
  %4834 = load i64, i64* %RBP
  %4835 = sub i64 %4834, 4
  %4836 = load i32, i32* %EAX
  %4837 = zext i32 %4836 to i64
  %4838 = load i64, i64* %PC
  %4839 = add i64 %4838, 3
  store i64 %4839, i64* %PC
  %4840 = inttoptr i64 %4835 to i32*
  store i32 %4836, i32* %4840
  %4841 = load i64, i64* %PC
  %4842 = sub i64 %4841, 124
  %4843 = load i64, i64* %PC
  %4844 = add i64 %4843, 5
  store i64 %4844, i64* %PC
  %4845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4842, i64* %4845, align 8, !tbaa !2428
  br label %block_400aaa

block_401216:                                     ; preds = %block_4011e8
  %4846 = add i64 %500, 11
  store i64 %4846, i64* %PC
  %4847 = load i32, i32* bitcast (%kount_type* @kount to i32*)
  %4848 = sub i32 %4847, 2005
  %4849 = icmp ult i32 %4847, 2005
  %4850 = zext i1 %4849 to i8
  %4851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4850, i8* %4851, align 1, !tbaa !2433
  %4852 = and i32 %4848, 255
  %4853 = call i32 @llvm.ctpop.i32(i32 %4852) #16
  %4854 = trunc i32 %4853 to i8
  %4855 = and i8 %4854, 1
  %4856 = xor i8 %4855, 1
  %4857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4856, i8* %4857, align 1, !tbaa !2447
  %4858 = xor i32 %4847, 2005
  %4859 = xor i32 %4858, %4848
  %4860 = lshr i32 %4859, 4
  %4861 = trunc i32 %4860 to i8
  %4862 = and i8 %4861, 1
  %4863 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4862, i8* %4863, align 1, !tbaa !2448
  %4864 = icmp eq i32 %4848, 0
  %4865 = zext i1 %4864 to i8
  %4866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4865, i8* %4866, align 1, !tbaa !2449
  %4867 = lshr i32 %4848, 31
  %4868 = trunc i32 %4867 to i8
  %4869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4868, i8* %4869, align 1, !tbaa !2450
  %4870 = lshr i32 %4847, 31
  %4871 = xor i32 %4867, %4870
  %4872 = add nuw nsw i32 %4871, %4870
  %4873 = icmp eq i32 %4872, 2
  %4874 = zext i1 %4873 to i8
  %4875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4874, i8* %4875, align 1, !tbaa !2451
  %4876 = load i64, i64* %PC
  %4877 = add i64 %4876, 26
  %4878 = load i64, i64* %PC
  %4879 = add i64 %4878, 6
  %4880 = load i64, i64* %PC
  %4881 = add i64 %4880, 6
  store i64 %4881, i64* %PC
  %4882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4883 = load i8, i8* %4882, align 1, !tbaa !2449
  store i8 %4883, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %4884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4885 = icmp ne i8 %4883, 0
  %4886 = select i1 %4885, i64 %4877, i64 %4879
  store i64 %4886, i64* %4884, align 8, !tbaa !2428
  %4887 = load i8, i8* %BRANCH_TAKEN
  %4888 = icmp eq i8 %4887, 1
  br i1 %4888, label %block_40123b, label %block_401227

block_400c84:                                     ; preds = %block_400c67, %block_400cf2
  %MEMORY.22 = phi %struct.Memory* [ %MEMORY.2, %block_400c67 ], [ %MEMORY.20, %block_400cf2 ]
  %4889 = load i64, i64* %RBP
  %4890 = sub i64 %4889, 4
  %4891 = load i64, i64* %PC
  %4892 = add i64 %4891, 4
  store i64 %4892, i64* %PC
  %4893 = inttoptr i64 %4890 to i32*
  %4894 = load i32, i32* %4893
  %4895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4895, align 1, !tbaa !2433
  %4896 = and i32 %4894, 255
  %4897 = call i32 @llvm.ctpop.i32(i32 %4896) #16
  %4898 = trunc i32 %4897 to i8
  %4899 = and i8 %4898, 1
  %4900 = xor i8 %4899, 1
  %4901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4900, i8* %4901, align 1, !tbaa !2447
  %4902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4902, align 1, !tbaa !2448
  %4903 = icmp eq i32 %4894, 0
  %4904 = zext i1 %4903 to i8
  %4905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4904, i8* %4905, align 1, !tbaa !2449
  %4906 = lshr i32 %4894, 31
  %4907 = trunc i32 %4906 to i8
  %4908 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4907, i8* %4908, align 1, !tbaa !2450
  %4909 = lshr i32 %4894, 31
  %4910 = xor i32 %4906, %4909
  %4911 = add nuw nsw i32 %4910, %4909
  %4912 = icmp eq i32 %4911, 2
  %4913 = zext i1 %4912 to i8
  %4914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4913, i8* %4914, align 1, !tbaa !2451
  %4915 = load i64, i64* %PC
  %4916 = add i64 %4915, 125
  %4917 = load i64, i64* %PC
  %4918 = add i64 %4917, 6
  %4919 = load i64, i64* %PC
  %4920 = add i64 %4919, 6
  store i64 %4920, i64* %PC
  %4921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4922 = load i8, i8* %4921, align 1, !tbaa !2449
  %4923 = icmp eq i8 %4922, 0
  %4924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4925 = load i8, i8* %4924, align 1, !tbaa !2450
  %4926 = icmp ne i8 %4925, 0
  %4927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4928 = load i8, i8* %4927, align 1, !tbaa !2451
  %4929 = icmp ne i8 %4928, 0
  %4930 = xor i1 %4926, %4929
  %4931 = xor i1 %4930, true
  %4932 = and i1 %4923, %4931
  %4933 = zext i1 %4932 to i8
  store i8 %4933, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %4934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4935 = select i1 %4932, i64 %4916, i64 %4918
  store i64 %4935, i64* %4934, align 8, !tbaa !2428
  %4936 = load i8, i8* %BRANCH_TAKEN
  %4937 = icmp eq i8 %4936, 1
  br i1 %4937, label %block_400d05, label %block_400c8e

block_400880:                                     ; preds = %block_400879, %block_4008ee
  %MEMORY.23 = phi %struct.Memory* [ %MEMORY.35, %block_400879 ], [ %MEMORY.38, %block_4008ee ]
  %4938 = load i64, i64* %RBP
  %4939 = sub i64 %4938, 4
  %4940 = load i64, i64* %PC
  %4941 = add i64 %4940, 4
  store i64 %4941, i64* %PC
  %4942 = inttoptr i64 %4939 to i32*
  %4943 = load i32, i32* %4942
  %4944 = sub i32 %4943, 5
  %4945 = icmp ult i32 %4943, 5
  %4946 = zext i1 %4945 to i8
  %4947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4946, i8* %4947, align 1, !tbaa !2433
  %4948 = and i32 %4944, 255
  %4949 = call i32 @llvm.ctpop.i32(i32 %4948) #16
  %4950 = trunc i32 %4949 to i8
  %4951 = and i8 %4950, 1
  %4952 = xor i8 %4951, 1
  %4953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4952, i8* %4953, align 1, !tbaa !2447
  %4954 = xor i32 %4943, 5
  %4955 = xor i32 %4954, %4944
  %4956 = lshr i32 %4955, 4
  %4957 = trunc i32 %4956 to i8
  %4958 = and i8 %4957, 1
  %4959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4958, i8* %4959, align 1, !tbaa !2448
  %4960 = icmp eq i32 %4944, 0
  %4961 = zext i1 %4960 to i8
  %4962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4961, i8* %4962, align 1, !tbaa !2449
  %4963 = lshr i32 %4944, 31
  %4964 = trunc i32 %4963 to i8
  %4965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4964, i8* %4965, align 1, !tbaa !2450
  %4966 = lshr i32 %4943, 31
  %4967 = xor i32 %4963, %4966
  %4968 = add nuw nsw i32 %4967, %4966
  %4969 = icmp eq i32 %4968, 2
  %4970 = zext i1 %4969 to i8
  %4971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4970, i8* %4971, align 1, !tbaa !2451
  %4972 = load i64, i64* %PC
  %4973 = add i64 %4972, 125
  %4974 = load i64, i64* %PC
  %4975 = add i64 %4974, 6
  %4976 = load i64, i64* %PC
  %4977 = add i64 %4976, 6
  store i64 %4977, i64* %PC
  %4978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4979 = load i8, i8* %4978, align 1, !tbaa !2449
  %4980 = icmp eq i8 %4979, 0
  %4981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4982 = load i8, i8* %4981, align 1, !tbaa !2450
  %4983 = icmp ne i8 %4982, 0
  %4984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4985 = load i8, i8* %4984, align 1, !tbaa !2451
  %4986 = icmp ne i8 %4985, 0
  %4987 = xor i1 %4983, %4986
  %4988 = xor i1 %4987, true
  %4989 = and i1 %4980, %4988
  %4990 = zext i1 %4989 to i8
  store i8 %4990, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %4991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4992 = select i1 %4989, i64 %4973, i64 %4975
  store i64 %4992, i64* %4991, align 8, !tbaa !2428
  %4993 = load i8, i8* %BRANCH_TAKEN
  %4994 = icmp eq i8 %4993, 1
  %4995 = load i64, i64* %RBP
  br i1 %4994, label %block_400901, label %block_40088a

block_400919:                                     ; preds = %block_400926, %block_400912
  %MEMORY.24 = phi %struct.Memory* [ %MEMORY.32, %block_400912 ], [ %MEMORY.24, %block_400926 ]
  %4996 = load i64, i64* %RBP
  %4997 = sub i64 %4996, 16
  %4998 = load i64, i64* %PC
  %4999 = add i64 %4998, 7
  store i64 %4999, i64* %PC
  %5000 = inttoptr i64 %4997 to i32*
  %5001 = load i32, i32* %5000
  %5002 = sub i32 %5001, 511
  %5003 = icmp ult i32 %5001, 511
  %5004 = zext i1 %5003 to i8
  %5005 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5004, i8* %5005, align 1, !tbaa !2433
  %5006 = and i32 %5002, 255
  %5007 = call i32 @llvm.ctpop.i32(i32 %5006) #16
  %5008 = trunc i32 %5007 to i8
  %5009 = and i8 %5008, 1
  %5010 = xor i8 %5009, 1
  %5011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5010, i8* %5011, align 1, !tbaa !2447
  %5012 = xor i32 %5001, 511
  %5013 = xor i32 %5012, %5002
  %5014 = lshr i32 %5013, 4
  %5015 = trunc i32 %5014 to i8
  %5016 = and i8 %5015, 1
  %5017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5016, i8* %5017, align 1, !tbaa !2448
  %5018 = icmp eq i32 %5002, 0
  %5019 = zext i1 %5018 to i8
  %5020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5019, i8* %5020, align 1, !tbaa !2449
  %5021 = lshr i32 %5002, 31
  %5022 = trunc i32 %5021 to i8
  %5023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5022, i8* %5023, align 1, !tbaa !2450
  %5024 = lshr i32 %5001, 31
  %5025 = xor i32 %5021, %5024
  %5026 = add nuw nsw i32 %5025, %5024
  %5027 = icmp eq i32 %5026, 2
  %5028 = zext i1 %5027 to i8
  %5029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5028, i8* %5029, align 1, !tbaa !2451
  %5030 = load i64, i64* %PC
  %5031 = add i64 %5030, 52
  %5032 = load i64, i64* %PC
  %5033 = add i64 %5032, 6
  %5034 = load i64, i64* %PC
  %5035 = add i64 %5034, 6
  store i64 %5035, i64* %PC
  %5036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5037 = load i8, i8* %5036, align 1, !tbaa !2449
  %5038 = icmp eq i8 %5037, 0
  %5039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5040 = load i8, i8* %5039, align 1, !tbaa !2450
  %5041 = icmp ne i8 %5040, 0
  %5042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5043 = load i8, i8* %5042, align 1, !tbaa !2451
  %5044 = icmp ne i8 %5043, 0
  %5045 = xor i1 %5041, %5044
  %5046 = xor i1 %5045, true
  %5047 = and i1 %5038, %5046
  %5048 = zext i1 %5047 to i8
  store i8 %5048, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5050 = select i1 %5047, i64 %5031, i64 %5033
  store i64 %5050, i64* %5049, align 8, !tbaa !2428
  %5051 = load i8, i8* %BRANCH_TAKEN
  %5052 = icmp eq i8 %5051, 1
  %5053 = load i64, i64* %PC
  br i1 %5052, label %block_400954, label %block_400926

block_401102:                                     ; preds = %block_4010f8
  %5054 = load i64, i64* %RBP
  %5055 = sub i64 %5054, 4
  %5056 = load i64, i64* %PC
  %5057 = add i64 %5056, 3
  store i64 %5057, i64* %PC
  %5058 = inttoptr i64 %5055 to i32*
  %5059 = load i32, i32* %5058
  %5060 = zext i32 %5059 to i64
  store i64 %5060, i64* %RAX, align 8, !tbaa !2428
  %5061 = load i64, i64* %RBP
  %5062 = sub i64 %5061, 8
  %5063 = load i64, i64* %PC
  %5064 = add i64 %5063, 3
  store i64 %5064, i64* %PC
  %5065 = inttoptr i64 %5062 to i32*
  %5066 = load i32, i32* %5065
  %5067 = zext i32 %5066 to i64
  store i64 %5067, i64* %RCX, align 8, !tbaa !2428
  %5068 = load i64, i64* %RBP
  %5069 = sub i64 %5068, 12
  %5070 = load i64, i64* %PC
  %5071 = add i64 %5070, 3
  store i64 %5071, i64* %PC
  %5072 = inttoptr i64 %5069 to i32*
  %5073 = load i32, i32* %5072
  %5074 = zext i32 %5073 to i64
  store i64 %5074, i64* %RDX, align 8, !tbaa !2428
  %5075 = load i64, i64* %RDX
  %5076 = load i64, i64* %PC
  %5077 = add i64 %5076, 3
  store i64 %5077, i64* %PC
  %5078 = and i64 %5075, 4294967295
  %5079 = shl i64 %5078, 2
  %5080 = trunc i64 %5079 to i32
  %5081 = icmp slt i32 %5080, 0
  %5082 = shl i32 %5080, 1
  %5083 = zext i32 %5082 to i64
  store i64 %5083, i64* %RDX, align 8, !tbaa !2428
  %5084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5085 = zext i1 %5081 to i8
  store i8 %5085, i8* %5084, align 1, !tbaa !2432
  %5086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5087 = and i32 %5082, 254
  %5088 = call i32 @llvm.ctpop.i32(i32 %5087) #16
  %5089 = trunc i32 %5088 to i8
  %5090 = and i8 %5089, 1
  %5091 = xor i8 %5090, 1
  store i8 %5091, i8* %5086, align 1, !tbaa !2432
  %5092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5092, align 1, !tbaa !2432
  %5093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5094 = icmp eq i32 %5082, 0
  %5095 = zext i1 %5094 to i8
  store i8 %5095, i8* %5093, align 1, !tbaa !2432
  %5096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5097 = lshr i32 %5082, 31
  %5098 = trunc i32 %5097 to i8
  store i8 %5098, i8* %5096, align 1, !tbaa !2432
  %5099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5099, align 1, !tbaa !2432
  %5100 = load i64, i64* %RCX
  %5101 = load i32, i32* %EDX
  %5102 = zext i32 %5101 to i64
  %5103 = load i64, i64* %PC
  %5104 = add i64 %5103, 2
  store i64 %5104, i64* %PC
  %5105 = trunc i64 %5100 to i32
  %5106 = add i32 %5101, %5105
  %5107 = zext i32 %5106 to i64
  store i64 %5107, i64* %RCX, align 8, !tbaa !2428
  %5108 = icmp ult i32 %5106, %5105
  %5109 = icmp ult i32 %5106, %5101
  %5110 = or i1 %5108, %5109
  %5111 = zext i1 %5110 to i8
  %5112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5111, i8* %5112, align 1, !tbaa !2433
  %5113 = and i32 %5106, 255
  %5114 = call i32 @llvm.ctpop.i32(i32 %5113) #16
  %5115 = trunc i32 %5114 to i8
  %5116 = and i8 %5115, 1
  %5117 = xor i8 %5116, 1
  %5118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5117, i8* %5118, align 1, !tbaa !2447
  %5119 = xor i64 %5102, %5100
  %5120 = trunc i64 %5119 to i32
  %5121 = xor i32 %5120, %5106
  %5122 = lshr i32 %5121, 4
  %5123 = trunc i32 %5122 to i8
  %5124 = and i8 %5123, 1
  %5125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5124, i8* %5125, align 1, !tbaa !2448
  %5126 = icmp eq i32 %5106, 0
  %5127 = zext i1 %5126 to i8
  %5128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5127, i8* %5128, align 1, !tbaa !2449
  %5129 = lshr i32 %5106, 31
  %5130 = trunc i32 %5129 to i8
  %5131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5130, i8* %5131, align 1, !tbaa !2450
  %5132 = lshr i32 %5105, 31
  %5133 = lshr i32 %5101, 31
  %5134 = xor i32 %5129, %5132
  %5135 = xor i32 %5129, %5133
  %5136 = add nuw nsw i32 %5134, %5135
  %5137 = icmp eq i32 %5136, 2
  %5138 = zext i1 %5137 to i8
  %5139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5138, i8* %5139, align 1, !tbaa !2451
  %5140 = load i64, i64* %RCX
  %5141 = load i64, i64* %PC
  %5142 = add i64 %5141, 3
  store i64 %5142, i64* %PC
  %5143 = and i64 %5140, 4294967295
  %5144 = shl i64 %5143, 2
  %5145 = trunc i64 %5144 to i32
  %5146 = icmp slt i32 %5145, 0
  %5147 = shl i32 %5145, 1
  %5148 = zext i32 %5147 to i64
  store i64 %5148, i64* %RCX, align 8, !tbaa !2428
  %5149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5150 = zext i1 %5146 to i8
  store i8 %5150, i8* %5149, align 1, !tbaa !2432
  %5151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5152 = and i32 %5147, 254
  %5153 = call i32 @llvm.ctpop.i32(i32 %5152) #16
  %5154 = trunc i32 %5153 to i8
  %5155 = and i8 %5154, 1
  %5156 = xor i8 %5155, 1
  store i8 %5156, i8* %5151, align 1, !tbaa !2432
  %5157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5157, align 1, !tbaa !2432
  %5158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5159 = icmp eq i32 %5147, 0
  %5160 = zext i1 %5159 to i8
  store i8 %5160, i8* %5158, align 1, !tbaa !2432
  %5161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5162 = lshr i32 %5147, 31
  %5163 = trunc i32 %5162 to i8
  store i8 %5163, i8* %5161, align 1, !tbaa !2432
  %5164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5164, align 1, !tbaa !2432
  %5165 = load i64, i64* %RAX
  %5166 = load i32, i32* %ECX
  %5167 = zext i32 %5166 to i64
  %5168 = load i64, i64* %PC
  %5169 = add i64 %5168, 2
  store i64 %5169, i64* %PC
  %5170 = trunc i64 %5165 to i32
  %5171 = add i32 %5166, %5170
  %5172 = zext i32 %5171 to i64
  store i64 %5172, i64* %RAX, align 8, !tbaa !2428
  %5173 = icmp ult i32 %5171, %5170
  %5174 = icmp ult i32 %5171, %5166
  %5175 = or i1 %5173, %5174
  %5176 = zext i1 %5175 to i8
  %5177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5176, i8* %5177, align 1, !tbaa !2433
  %5178 = and i32 %5171, 255
  %5179 = call i32 @llvm.ctpop.i32(i32 %5178) #16
  %5180 = trunc i32 %5179 to i8
  %5181 = and i8 %5180, 1
  %5182 = xor i8 %5181, 1
  %5183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5182, i8* %5183, align 1, !tbaa !2447
  %5184 = xor i64 %5167, %5165
  %5185 = trunc i64 %5184 to i32
  %5186 = xor i32 %5185, %5171
  %5187 = lshr i32 %5186, 4
  %5188 = trunc i32 %5187 to i8
  %5189 = and i8 %5188, 1
  %5190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5189, i8* %5190, align 1, !tbaa !2448
  %5191 = icmp eq i32 %5171, 0
  %5192 = zext i1 %5191 to i8
  %5193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5192, i8* %5193, align 1, !tbaa !2449
  %5194 = lshr i32 %5171, 31
  %5195 = trunc i32 %5194 to i8
  %5196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5195, i8* %5196, align 1, !tbaa !2450
  %5197 = lshr i32 %5170, 31
  %5198 = lshr i32 %5166, 31
  %5199 = xor i32 %5194, %5197
  %5200 = xor i32 %5194, %5198
  %5201 = add nuw nsw i32 %5199, %5200
  %5202 = icmp eq i32 %5201, 2
  %5203 = zext i1 %5202 to i8
  %5204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5203, i8* %5204, align 1, !tbaa !2451
  %5205 = load i32, i32* %EAX
  %5206 = zext i32 %5205 to i64
  %5207 = load i64, i64* %PC
  %5208 = add i64 %5207, 3
  store i64 %5208, i64* %PC
  %5209 = shl i64 %5206, 32
  %5210 = ashr exact i64 %5209, 32
  store i64 %5210, i64* %RSI, align 8, !tbaa !2428
  %5211 = load i64, i64* %RSI
  %5212 = mul i64 %5211, 4
  %5213 = add i64 %5212, add (i64 ptrtoint (%p_type* @p to i64), i64 24576)
  %5214 = load i64, i64* %PC
  %5215 = add i64 %5214, 11
  store i64 %5215, i64* %PC
  %5216 = inttoptr i64 %5213 to i32*
  store i32 1, i32* %5216
  %5217 = load i64, i64* %RBP
  %5218 = sub i64 %5217, 12
  %5219 = load i64, i64* %PC
  %5220 = add i64 %5219, 3
  store i64 %5220, i64* %PC
  %5221 = inttoptr i64 %5218 to i32*
  %5222 = load i32, i32* %5221
  %5223 = zext i32 %5222 to i64
  store i64 %5223, i64* %RAX, align 8, !tbaa !2428
  %5224 = load i64, i64* %RAX
  %5225 = load i64, i64* %PC
  %5226 = add i64 %5225, 3
  store i64 %5226, i64* %PC
  %5227 = trunc i64 %5224 to i32
  %5228 = add i32 1, %5227
  %5229 = zext i32 %5228 to i64
  store i64 %5229, i64* %RAX, align 8, !tbaa !2428
  %5230 = icmp ult i32 %5228, %5227
  %5231 = icmp ult i32 %5228, 1
  %5232 = or i1 %5230, %5231
  %5233 = zext i1 %5232 to i8
  %5234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5233, i8* %5234, align 1, !tbaa !2433
  %5235 = and i32 %5228, 255
  %5236 = call i32 @llvm.ctpop.i32(i32 %5235) #16
  %5237 = trunc i32 %5236 to i8
  %5238 = and i8 %5237, 1
  %5239 = xor i8 %5238, 1
  %5240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5239, i8* %5240, align 1, !tbaa !2447
  %5241 = xor i64 1, %5224
  %5242 = trunc i64 %5241 to i32
  %5243 = xor i32 %5242, %5228
  %5244 = lshr i32 %5243, 4
  %5245 = trunc i32 %5244 to i8
  %5246 = and i8 %5245, 1
  %5247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5246, i8* %5247, align 1, !tbaa !2448
  %5248 = icmp eq i32 %5228, 0
  %5249 = zext i1 %5248 to i8
  %5250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5249, i8* %5250, align 1, !tbaa !2449
  %5251 = lshr i32 %5228, 31
  %5252 = trunc i32 %5251 to i8
  %5253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5252, i8* %5253, align 1, !tbaa !2450
  %5254 = lshr i32 %5227, 31
  %5255 = xor i32 %5251, %5254
  %5256 = add nuw nsw i32 %5255, %5251
  %5257 = icmp eq i32 %5256, 2
  %5258 = zext i1 %5257 to i8
  %5259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5258, i8* %5259, align 1, !tbaa !2451
  %5260 = load i64, i64* %RBP
  %5261 = sub i64 %5260, 12
  %5262 = load i32, i32* %EAX
  %5263 = zext i32 %5262 to i64
  %5264 = load i64, i64* %PC
  %5265 = add i64 %5264, 3
  store i64 %5265, i64* %PC
  %5266 = inttoptr i64 %5261 to i32*
  store i32 %5262, i32* %5266
  %5267 = load i64, i64* %PC
  %5268 = sub i64 %5267, 52
  %5269 = load i64, i64* %PC
  %5270 = add i64 %5269, 5
  store i64 %5270, i64* %PC
  %5271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5268, i64* %5271, align 8, !tbaa !2428
  br label %block_4010f8

block_400b6a:                                     ; preds = %block_400b63, %block_400b74
  %MEMORY.25 = phi %struct.Memory* [ %MEMORY.45, %block_400b63 ], [ %MEMORY.25, %block_400b74 ]
  %5272 = load i64, i64* %RBP
  %5273 = sub i64 %5272, 12
  %5274 = load i64, i64* %PC
  %5275 = add i64 %5274, 4
  store i64 %5275, i64* %PC
  %5276 = inttoptr i64 %5273 to i32*
  %5277 = load i32, i32* %5276
  %5278 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5278, align 1, !tbaa !2433
  %5279 = and i32 %5277, 255
  %5280 = call i32 @llvm.ctpop.i32(i32 %5279) #16
  %5281 = trunc i32 %5280 to i8
  %5282 = and i8 %5281, 1
  %5283 = xor i8 %5282, 1
  %5284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5283, i8* %5284, align 1, !tbaa !2447
  %5285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5285, align 1, !tbaa !2448
  %5286 = icmp eq i32 %5277, 0
  %5287 = zext i1 %5286 to i8
  %5288 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5287, i8* %5288, align 1, !tbaa !2449
  %5289 = lshr i32 %5277, 31
  %5290 = trunc i32 %5289 to i8
  %5291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5290, i8* %5291, align 1, !tbaa !2450
  %5292 = lshr i32 %5277, 31
  %5293 = xor i32 %5289, %5292
  %5294 = add nuw nsw i32 %5293, %5292
  %5295 = icmp eq i32 %5294, 2
  %5296 = zext i1 %5295 to i8
  %5297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5296, i8* %5297, align 1, !tbaa !2451
  %5298 = load i64, i64* %PC
  %5299 = add i64 %5298, 53
  %5300 = load i64, i64* %PC
  %5301 = add i64 %5300, 6
  %5302 = load i64, i64* %PC
  %5303 = add i64 %5302, 6
  store i64 %5303, i64* %PC
  %5304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5305 = load i8, i8* %5304, align 1, !tbaa !2449
  %5306 = icmp eq i8 %5305, 0
  %5307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5308 = load i8, i8* %5307, align 1, !tbaa !2450
  %5309 = icmp ne i8 %5308, 0
  %5310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5311 = load i8, i8* %5310, align 1, !tbaa !2451
  %5312 = icmp ne i8 %5311, 0
  %5313 = xor i1 %5309, %5312
  %5314 = xor i1 %5313, true
  %5315 = and i1 %5306, %5314
  %5316 = zext i1 %5315 to i8
  store i8 %5316, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5318 = select i1 %5315, i64 %5299, i64 %5301
  store i64 %5318, i64* %5317, align 8, !tbaa !2428
  %5319 = load i8, i8* %BRANCH_TAKEN
  %5320 = icmp eq i8 %5319, 1
  br i1 %5320, label %block_400ba3, label %block_400b74

block_400a7a:                                     ; preds = %block_400a1d
  %5321 = load i64, i64* %PC
  %5322 = add i64 %5321, 5
  %5323 = load i64, i64* %PC
  %5324 = add i64 %5323, 5
  store i64 %5324, i64* %PC
  %5325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5322, i64* %5325, align 8, !tbaa !2428
  %5326 = load i64, i64* %RBP
  %5327 = sub i64 %5326, 4
  %5328 = load i64, i64* %PC
  %5329 = add i64 %5328, 3
  store i64 %5329, i64* %PC
  %5330 = inttoptr i64 %5327 to i32*
  %5331 = load i32, i32* %5330
  %5332 = zext i32 %5331 to i64
  store i64 %5332, i64* %RAX, align 8, !tbaa !2428
  %5333 = load i64, i64* %RAX
  %5334 = load i64, i64* %PC
  %5335 = add i64 %5334, 3
  store i64 %5335, i64* %PC
  %5336 = trunc i64 %5333 to i32
  %5337 = add i32 1, %5336
  %5338 = zext i32 %5337 to i64
  store i64 %5338, i64* %RAX, align 8, !tbaa !2428
  %5339 = icmp ult i32 %5337, %5336
  %5340 = icmp ult i32 %5337, 1
  %5341 = or i1 %5339, %5340
  %5342 = zext i1 %5341 to i8
  %5343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5342, i8* %5343, align 1, !tbaa !2433
  %5344 = and i32 %5337, 255
  %5345 = call i32 @llvm.ctpop.i32(i32 %5344) #16
  %5346 = trunc i32 %5345 to i8
  %5347 = and i8 %5346, 1
  %5348 = xor i8 %5347, 1
  %5349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5348, i8* %5349, align 1, !tbaa !2447
  %5350 = xor i64 1, %5333
  %5351 = trunc i64 %5350 to i32
  %5352 = xor i32 %5351, %5337
  %5353 = lshr i32 %5352, 4
  %5354 = trunc i32 %5353 to i8
  %5355 = and i8 %5354, 1
  %5356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5355, i8* %5356, align 1, !tbaa !2448
  %5357 = icmp eq i32 %5337, 0
  %5358 = zext i1 %5357 to i8
  %5359 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5358, i8* %5359, align 1, !tbaa !2449
  %5360 = lshr i32 %5337, 31
  %5361 = trunc i32 %5360 to i8
  %5362 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5361, i8* %5362, align 1, !tbaa !2450
  %5363 = lshr i32 %5336, 31
  %5364 = xor i32 %5360, %5363
  %5365 = add nuw nsw i32 %5364, %5360
  %5366 = icmp eq i32 %5365, 2
  %5367 = zext i1 %5366 to i8
  %5368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5367, i8* %5368, align 1, !tbaa !2451
  %5369 = load i64, i64* %RBP
  %5370 = sub i64 %5369, 4
  %5371 = load i32, i32* %EAX
  %5372 = zext i32 %5371 to i64
  %5373 = load i64, i64* %PC
  %5374 = add i64 %5373, 3
  store i64 %5374, i64* %PC
  %5375 = inttoptr i64 %5370 to i32*
  store i32 %5371, i32* %5375
  %5376 = load i64, i64* %PC
  %5377 = sub i64 %5376, 124
  %5378 = load i64, i64* %PC
  %5379 = add i64 %5378, 5
  store i64 %5379, i64* %PC
  %5380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5377, i64* %5380, align 8, !tbaa !2428
  br label %block_400a0c

block_400e79:                                     ; preds = %block_400e6f
  %5381 = load i64, i64* %RBP
  %5382 = sub i64 %5381, 12
  %5383 = load i64, i64* %PC
  %5384 = add i64 %5383, 7
  store i64 %5384, i64* %PC
  %5385 = inttoptr i64 %5382 to i32*
  store i32 0, i32* %5385
  br label %block_400e80

block_400ba3:                                     ; preds = %block_400b6a
  %5386 = load i64, i64* %PC
  %5387 = add i64 %5386, 5
  %5388 = load i64, i64* %PC
  %5389 = add i64 %5388, 5
  store i64 %5389, i64* %PC
  %5390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5387, i64* %5390, align 8, !tbaa !2428
  %5391 = load i64, i64* %RBP
  %5392 = sub i64 %5391, 8
  %5393 = load i64, i64* %PC
  %5394 = add i64 %5393, 3
  store i64 %5394, i64* %PC
  %5395 = inttoptr i64 %5392 to i32*
  %5396 = load i32, i32* %5395
  %5397 = zext i32 %5396 to i64
  store i64 %5397, i64* %RAX, align 8, !tbaa !2428
  %5398 = load i64, i64* %RAX
  %5399 = load i64, i64* %PC
  %5400 = add i64 %5399, 3
  store i64 %5400, i64* %PC
  %5401 = trunc i64 %5398 to i32
  %5402 = add i32 1, %5401
  %5403 = zext i32 %5402 to i64
  store i64 %5403, i64* %RAX, align 8, !tbaa !2428
  %5404 = icmp ult i32 %5402, %5401
  %5405 = icmp ult i32 %5402, 1
  %5406 = or i1 %5404, %5405
  %5407 = zext i1 %5406 to i8
  %5408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5407, i8* %5408, align 1, !tbaa !2433
  %5409 = and i32 %5402, 255
  %5410 = call i32 @llvm.ctpop.i32(i32 %5409) #16
  %5411 = trunc i32 %5410 to i8
  %5412 = and i8 %5411, 1
  %5413 = xor i8 %5412, 1
  %5414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5413, i8* %5414, align 1, !tbaa !2447
  %5415 = xor i64 1, %5398
  %5416 = trunc i64 %5415 to i32
  %5417 = xor i32 %5416, %5402
  %5418 = lshr i32 %5417, 4
  %5419 = trunc i32 %5418 to i8
  %5420 = and i8 %5419, 1
  %5421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5420, i8* %5421, align 1, !tbaa !2448
  %5422 = icmp eq i32 %5402, 0
  %5423 = zext i1 %5422 to i8
  %5424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5423, i8* %5424, align 1, !tbaa !2449
  %5425 = lshr i32 %5402, 31
  %5426 = trunc i32 %5425 to i8
  %5427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5426, i8* %5427, align 1, !tbaa !2450
  %5428 = lshr i32 %5401, 31
  %5429 = xor i32 %5425, %5428
  %5430 = add nuw nsw i32 %5429, %5425
  %5431 = icmp eq i32 %5430, 2
  %5432 = zext i1 %5431 to i8
  %5433 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5432, i8* %5433, align 1, !tbaa !2451
  %5434 = load i64, i64* %RBP
  %5435 = sub i64 %5434, 8
  %5436 = load i32, i32* %EAX
  %5437 = zext i32 %5436 to i64
  %5438 = load i64, i64* %PC
  %5439 = add i64 %5438, 3
  store i64 %5439, i64* %PC
  %5440 = inttoptr i64 %5435 to i32*
  store i32 %5436, i32* %5440
  %5441 = load i64, i64* %PC
  %5442 = sub i64 %5441, 88
  %5443 = load i64, i64* %PC
  %5444 = add i64 %5443, 5
  store i64 %5444, i64* %PC
  %5445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5442, i64* %5445, align 8, !tbaa !2428
  br label %block_400b59

block_400e6f:                                     ; preds = %block_400e68, %block_400eb9
  %MEMORY.26 = phi %struct.Memory* [ %MEMORY.30, %block_400e68 ], [ %MEMORY.27, %block_400eb9 ]
  %5446 = load i64, i64* %RBP
  %5447 = sub i64 %5446, 8
  %5448 = load i64, i64* %PC
  %5449 = add i64 %5448, 4
  store i64 %5449, i64* %PC
  %5450 = inttoptr i64 %5447 to i32*
  %5451 = load i32, i32* %5450
  %5452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5452, align 1, !tbaa !2433
  %5453 = and i32 %5451, 255
  %5454 = call i32 @llvm.ctpop.i32(i32 %5453) #16
  %5455 = trunc i32 %5454 to i8
  %5456 = and i8 %5455, 1
  %5457 = xor i8 %5456, 1
  %5458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5457, i8* %5458, align 1, !tbaa !2447
  %5459 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5459, align 1, !tbaa !2448
  %5460 = icmp eq i32 %5451, 0
  %5461 = zext i1 %5460 to i8
  %5462 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5461, i8* %5462, align 1, !tbaa !2449
  %5463 = lshr i32 %5451, 31
  %5464 = trunc i32 %5463 to i8
  %5465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5464, i8* %5465, align 1, !tbaa !2450
  %5466 = lshr i32 %5451, 31
  %5467 = xor i32 %5463, %5466
  %5468 = add nuw nsw i32 %5467, %5466
  %5469 = icmp eq i32 %5468, 2
  %5470 = zext i1 %5469 to i8
  %5471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5470, i8* %5471, align 1, !tbaa !2451
  %5472 = load i64, i64* %PC
  %5473 = add i64 %5472, 89
  %5474 = load i64, i64* %PC
  %5475 = add i64 %5474, 6
  %5476 = load i64, i64* %PC
  %5477 = add i64 %5476, 6
  store i64 %5477, i64* %PC
  %5478 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5479 = load i8, i8* %5478, align 1, !tbaa !2449
  %5480 = icmp eq i8 %5479, 0
  %5481 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5482 = load i8, i8* %5481, align 1, !tbaa !2450
  %5483 = icmp ne i8 %5482, 0
  %5484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5485 = load i8, i8* %5484, align 1, !tbaa !2451
  %5486 = icmp ne i8 %5485, 0
  %5487 = xor i1 %5483, %5486
  %5488 = xor i1 %5487, true
  %5489 = and i1 %5480, %5488
  %5490 = zext i1 %5489 to i8
  store i8 %5490, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5491 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5492 = select i1 %5489, i64 %5473, i64 %5475
  store i64 %5492, i64* %5491, align 8, !tbaa !2428
  %5493 = load i8, i8* %BRANCH_TAKEN
  %5494 = icmp eq i8 %5493, 1
  br i1 %5494, label %block_400ecc, label %block_400e79

block_400e80:                                     ; preds = %block_400e79, %block_400e8a
  %MEMORY.27 = phi %struct.Memory* [ %MEMORY.26, %block_400e79 ], [ %MEMORY.27, %block_400e8a ]
  %5495 = load i64, i64* %RBP
  %5496 = sub i64 %5495, 12
  %5497 = load i64, i64* %PC
  %5498 = add i64 %5497, 4
  store i64 %5498, i64* %PC
  %5499 = inttoptr i64 %5496 to i32*
  %5500 = load i32, i32* %5499
  %5501 = sub i32 %5500, 2
  %5502 = icmp ult i32 %5500, 2
  %5503 = zext i1 %5502 to i8
  %5504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5503, i8* %5504, align 1, !tbaa !2433
  %5505 = and i32 %5501, 255
  %5506 = call i32 @llvm.ctpop.i32(i32 %5505) #16
  %5507 = trunc i32 %5506 to i8
  %5508 = and i8 %5507, 1
  %5509 = xor i8 %5508, 1
  %5510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5509, i8* %5510, align 1, !tbaa !2447
  %5511 = xor i32 %5500, 2
  %5512 = xor i32 %5511, %5501
  %5513 = lshr i32 %5512, 4
  %5514 = trunc i32 %5513 to i8
  %5515 = and i8 %5514, 1
  %5516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5515, i8* %5516, align 1, !tbaa !2448
  %5517 = icmp eq i32 %5501, 0
  %5518 = zext i1 %5517 to i8
  %5519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5518, i8* %5519, align 1, !tbaa !2449
  %5520 = lshr i32 %5501, 31
  %5521 = trunc i32 %5520 to i8
  %5522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5521, i8* %5522, align 1, !tbaa !2450
  %5523 = lshr i32 %5500, 31
  %5524 = xor i32 %5520, %5523
  %5525 = add nuw nsw i32 %5524, %5523
  %5526 = icmp eq i32 %5525, 2
  %5527 = zext i1 %5526 to i8
  %5528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5527, i8* %5528, align 1, !tbaa !2451
  %5529 = load i64, i64* %PC
  %5530 = add i64 %5529, 53
  %5531 = load i64, i64* %PC
  %5532 = add i64 %5531, 6
  %5533 = load i64, i64* %PC
  %5534 = add i64 %5533, 6
  store i64 %5534, i64* %PC
  %5535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5536 = load i8, i8* %5535, align 1, !tbaa !2449
  %5537 = icmp eq i8 %5536, 0
  %5538 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5539 = load i8, i8* %5538, align 1, !tbaa !2450
  %5540 = icmp ne i8 %5539, 0
  %5541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5542 = load i8, i8* %5541, align 1, !tbaa !2451
  %5543 = icmp ne i8 %5542, 0
  %5544 = xor i1 %5540, %5543
  %5545 = xor i1 %5544, true
  %5546 = and i1 %5537, %5545
  %5547 = zext i1 %5546 to i8
  store i8 %5547, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5549 = select i1 %5546, i64 %5530, i64 %5532
  store i64 %5549, i64* %5548, align 8, !tbaa !2428
  %5550 = load i8, i8* %BRANCH_TAKEN
  %5551 = icmp eq i8 %5550, 1
  br i1 %5551, label %block_400eb9, label %block_400e8a

block_400c67:                                     ; preds = %block_400be6
  %5552 = load i64, i64* %PC
  %5553 = add i64 %5552, 11
  store i64 %5553, i64* %PC
  store i32 0, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 16) to i32*)
  %5554 = load i64, i64* %PC
  %5555 = add i64 %5554, 11
  store i64 %5555, i64* %PC
  store i32 67, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 16) to i32*)
  %5556 = load i64, i64* %RBP
  %5557 = sub i64 %5556, 4
  %5558 = load i64, i64* %PC
  %5559 = add i64 %5558, 7
  store i64 %5559, i64* %PC
  %5560 = inttoptr i64 %5557 to i32*
  store i32 0, i32* %5560
  br label %block_400c84

block_400e68:                                     ; preds = %block_400e5e
  %5561 = load i64, i64* %RBP
  %5562 = sub i64 %5561, 8
  %5563 = load i64, i64* %PC
  %5564 = add i64 %5563, 7
  store i64 %5564, i64* %PC
  %5565 = inttoptr i64 %5562 to i32*
  store i32 0, i32* %5565
  br label %block_400e6f

block_400d33:                                     ; preds = %block_400d7d, %block_400d2c
  %MEMORY.28 = phi %struct.Memory* [ %MEMORY.10, %block_400d2c ], [ %MEMORY.12, %block_400d7d ]
  %5566 = load i64, i64* %RBP
  %5567 = sub i64 %5566, 8
  %5568 = load i64, i64* %PC
  %5569 = add i64 %5568, 4
  store i64 %5569, i64* %PC
  %5570 = inttoptr i64 %5567 to i32*
  %5571 = load i32, i32* %5570
  %5572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5572, align 1, !tbaa !2433
  %5573 = and i32 %5571, 255
  %5574 = call i32 @llvm.ctpop.i32(i32 %5573) #16
  %5575 = trunc i32 %5574 to i8
  %5576 = and i8 %5575, 1
  %5577 = xor i8 %5576, 1
  %5578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5577, i8* %5578, align 1, !tbaa !2447
  %5579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5579, align 1, !tbaa !2448
  %5580 = icmp eq i32 %5571, 0
  %5581 = zext i1 %5580 to i8
  %5582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5581, i8* %5582, align 1, !tbaa !2449
  %5583 = lshr i32 %5571, 31
  %5584 = trunc i32 %5583 to i8
  %5585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5584, i8* %5585, align 1, !tbaa !2450
  %5586 = lshr i32 %5571, 31
  %5587 = xor i32 %5583, %5586
  %5588 = add nuw nsw i32 %5587, %5586
  %5589 = icmp eq i32 %5588, 2
  %5590 = zext i1 %5589 to i8
  %5591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5590, i8* %5591, align 1, !tbaa !2451
  %5592 = load i64, i64* %PC
  %5593 = add i64 %5592, 89
  %5594 = load i64, i64* %PC
  %5595 = add i64 %5594, 6
  %5596 = load i64, i64* %PC
  %5597 = add i64 %5596, 6
  store i64 %5597, i64* %PC
  %5598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5599 = load i8, i8* %5598, align 1, !tbaa !2449
  %5600 = icmp eq i8 %5599, 0
  %5601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5602 = load i8, i8* %5601, align 1, !tbaa !2450
  %5603 = icmp ne i8 %5602, 0
  %5604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5605 = load i8, i8* %5604, align 1, !tbaa !2451
  %5606 = icmp ne i8 %5605, 0
  %5607 = xor i1 %5603, %5606
  %5608 = xor i1 %5607, true
  %5609 = and i1 %5600, %5608
  %5610 = zext i1 %5609 to i8
  store i8 %5610, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5611 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5612 = select i1 %5609, i64 %5593, i64 %5595
  store i64 %5612, i64* %5611, align 8, !tbaa !2428
  %5613 = load i8, i8* %BRANCH_TAKEN
  %5614 = icmp eq i8 %5613, 1
  br i1 %5614, label %block_400d90, label %block_400d3d

block_400901:                                     ; preds = %block_400880
  %5615 = sub i64 %4995, 4
  %5616 = load i64, i64* %PC
  %5617 = add i64 %5616, 7
  store i64 %5617, i64* %PC
  %5618 = inttoptr i64 %5615 to i32*
  store i32 0, i32* %5618
  br label %block_400908

block_400a67:                                     ; preds = %block_400a2e
  %5619 = load i64, i64* %PC
  %5620 = add i64 %5619, 5
  %5621 = load i64, i64* %PC
  %5622 = add i64 %5621, 5
  store i64 %5622, i64* %PC
  %5623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5620, i64* %5623, align 8, !tbaa !2428
  %5624 = load i64, i64* %RBP
  %5625 = sub i64 %5624, 8
  %5626 = load i64, i64* %PC
  %5627 = add i64 %5626, 3
  store i64 %5627, i64* %PC
  %5628 = inttoptr i64 %5625 to i32*
  %5629 = load i32, i32* %5628
  %5630 = zext i32 %5629 to i64
  store i64 %5630, i64* %RAX, align 8, !tbaa !2428
  %5631 = load i64, i64* %RAX
  %5632 = load i64, i64* %PC
  %5633 = add i64 %5632, 3
  store i64 %5633, i64* %PC
  %5634 = trunc i64 %5631 to i32
  %5635 = add i32 1, %5634
  %5636 = zext i32 %5635 to i64
  store i64 %5636, i64* %RAX, align 8, !tbaa !2428
  %5637 = icmp ult i32 %5635, %5634
  %5638 = icmp ult i32 %5635, 1
  %5639 = or i1 %5637, %5638
  %5640 = zext i1 %5639 to i8
  %5641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5640, i8* %5641, align 1, !tbaa !2433
  %5642 = and i32 %5635, 255
  %5643 = call i32 @llvm.ctpop.i32(i32 %5642) #16
  %5644 = trunc i32 %5643 to i8
  %5645 = and i8 %5644, 1
  %5646 = xor i8 %5645, 1
  %5647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5646, i8* %5647, align 1, !tbaa !2447
  %5648 = xor i64 1, %5631
  %5649 = trunc i64 %5648 to i32
  %5650 = xor i32 %5649, %5635
  %5651 = lshr i32 %5650, 4
  %5652 = trunc i32 %5651 to i8
  %5653 = and i8 %5652, 1
  %5654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5653, i8* %5654, align 1, !tbaa !2448
  %5655 = icmp eq i32 %5635, 0
  %5656 = zext i1 %5655 to i8
  %5657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5656, i8* %5657, align 1, !tbaa !2449
  %5658 = lshr i32 %5635, 31
  %5659 = trunc i32 %5658 to i8
  %5660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5659, i8* %5660, align 1, !tbaa !2450
  %5661 = lshr i32 %5634, 31
  %5662 = xor i32 %5658, %5661
  %5663 = add nuw nsw i32 %5662, %5658
  %5664 = icmp eq i32 %5663, 2
  %5665 = zext i1 %5664 to i8
  %5666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5665, i8* %5666, align 1, !tbaa !2451
  %5667 = load i64, i64* %RBP
  %5668 = sub i64 %5667, 8
  %5669 = load i32, i32* %EAX
  %5670 = zext i32 %5669 to i64
  %5671 = load i64, i64* %PC
  %5672 = add i64 %5671, 3
  store i64 %5672, i64* %PC
  %5673 = inttoptr i64 %5668 to i32*
  store i32 %5669, i32* %5673
  %5674 = load i64, i64* %PC
  %5675 = sub i64 %5674, 88
  %5676 = load i64, i64* %PC
  %5677 = add i64 %5676, 5
  store i64 %5677, i64* %PC
  %5678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5675, i64* %5678, align 8, !tbaa !2428
  br label %block_400a1d

block_400acc:                                     ; preds = %block_400ac5, %block_400ad6
  %MEMORY.29 = phi %struct.Memory* [ %MEMORY.33, %block_400ac5 ], [ %MEMORY.29, %block_400ad6 ]
  %5679 = load i64, i64* %RBP
  %5680 = sub i64 %5679, 12
  %5681 = load i64, i64* %PC
  %5682 = add i64 %5681, 4
  store i64 %5682, i64* %PC
  %5683 = inttoptr i64 %5680 to i32*
  %5684 = load i32, i32* %5683
  %5685 = sub i32 %5684, 1
  %5686 = icmp ult i32 %5684, 1
  %5687 = zext i1 %5686 to i8
  %5688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5687, i8* %5688, align 1, !tbaa !2433
  %5689 = and i32 %5685, 255
  %5690 = call i32 @llvm.ctpop.i32(i32 %5689) #16
  %5691 = trunc i32 %5690 to i8
  %5692 = and i8 %5691, 1
  %5693 = xor i8 %5692, 1
  %5694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5693, i8* %5694, align 1, !tbaa !2447
  %5695 = xor i32 %5684, 1
  %5696 = xor i32 %5695, %5685
  %5697 = lshr i32 %5696, 4
  %5698 = trunc i32 %5697 to i8
  %5699 = and i8 %5698, 1
  %5700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5699, i8* %5700, align 1, !tbaa !2448
  %5701 = icmp eq i32 %5685, 0
  %5702 = zext i1 %5701 to i8
  %5703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5702, i8* %5703, align 1, !tbaa !2449
  %5704 = lshr i32 %5685, 31
  %5705 = trunc i32 %5704 to i8
  %5706 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5705, i8* %5706, align 1, !tbaa !2450
  %5707 = lshr i32 %5684, 31
  %5708 = xor i32 %5704, %5707
  %5709 = add nuw nsw i32 %5708, %5707
  %5710 = icmp eq i32 %5709, 2
  %5711 = zext i1 %5710 to i8
  %5712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5711, i8* %5712, align 1, !tbaa !2451
  %5713 = load i64, i64* %PC
  %5714 = add i64 %5713, 53
  %5715 = load i64, i64* %PC
  %5716 = add i64 %5715, 6
  %5717 = load i64, i64* %PC
  %5718 = add i64 %5717, 6
  store i64 %5718, i64* %PC
  %5719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5720 = load i8, i8* %5719, align 1, !tbaa !2449
  %5721 = icmp eq i8 %5720, 0
  %5722 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5723 = load i8, i8* %5722, align 1, !tbaa !2450
  %5724 = icmp ne i8 %5723, 0
  %5725 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5726 = load i8, i8* %5725, align 1, !tbaa !2451
  %5727 = icmp ne i8 %5726, 0
  %5728 = xor i1 %5724, %5727
  %5729 = xor i1 %5728, true
  %5730 = and i1 %5721, %5729
  %5731 = zext i1 %5730 to i8
  store i8 %5731, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5733 = select i1 %5730, i64 %5714, i64 %5716
  store i64 %5733, i64* %5732, align 8, !tbaa !2428
  %5734 = load i8, i8* %BRANCH_TAKEN
  %5735 = icmp eq i8 %5734, 1
  br i1 %5735, label %block_400b05, label %block_400ad6

block_401064:                                     ; preds = %block_40105a
  %5736 = load i64, i64* %RBP
  %5737 = sub i64 %5736, 4
  %5738 = load i64, i64* %PC
  %5739 = add i64 %5738, 3
  store i64 %5739, i64* %PC
  %5740 = inttoptr i64 %5737 to i32*
  %5741 = load i32, i32* %5740
  %5742 = zext i32 %5741 to i64
  store i64 %5742, i64* %RAX, align 8, !tbaa !2428
  %5743 = load i64, i64* %RBP
  %5744 = sub i64 %5743, 8
  %5745 = load i64, i64* %PC
  %5746 = add i64 %5745, 3
  store i64 %5746, i64* %PC
  %5747 = inttoptr i64 %5744 to i32*
  %5748 = load i32, i32* %5747
  %5749 = zext i32 %5748 to i64
  store i64 %5749, i64* %RCX, align 8, !tbaa !2428
  %5750 = load i64, i64* %RBP
  %5751 = sub i64 %5750, 12
  %5752 = load i64, i64* %PC
  %5753 = add i64 %5752, 3
  store i64 %5753, i64* %PC
  %5754 = inttoptr i64 %5751 to i32*
  %5755 = load i32, i32* %5754
  %5756 = zext i32 %5755 to i64
  store i64 %5756, i64* %RDX, align 8, !tbaa !2428
  %5757 = load i64, i64* %RDX
  %5758 = load i64, i64* %PC
  %5759 = add i64 %5758, 3
  store i64 %5759, i64* %PC
  %5760 = and i64 %5757, 4294967295
  %5761 = shl i64 %5760, 2
  %5762 = trunc i64 %5761 to i32
  %5763 = icmp slt i32 %5762, 0
  %5764 = shl i32 %5762, 1
  %5765 = zext i32 %5764 to i64
  store i64 %5765, i64* %RDX, align 8, !tbaa !2428
  %5766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5767 = zext i1 %5763 to i8
  store i8 %5767, i8* %5766, align 1, !tbaa !2432
  %5768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5769 = and i32 %5764, 254
  %5770 = call i32 @llvm.ctpop.i32(i32 %5769) #16
  %5771 = trunc i32 %5770 to i8
  %5772 = and i8 %5771, 1
  %5773 = xor i8 %5772, 1
  store i8 %5773, i8* %5768, align 1, !tbaa !2432
  %5774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5774, align 1, !tbaa !2432
  %5775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5776 = icmp eq i32 %5764, 0
  %5777 = zext i1 %5776 to i8
  store i8 %5777, i8* %5775, align 1, !tbaa !2432
  %5778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5779 = lshr i32 %5764, 31
  %5780 = trunc i32 %5779 to i8
  store i8 %5780, i8* %5778, align 1, !tbaa !2432
  %5781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5781, align 1, !tbaa !2432
  %5782 = load i64, i64* %RCX
  %5783 = load i32, i32* %EDX
  %5784 = zext i32 %5783 to i64
  %5785 = load i64, i64* %PC
  %5786 = add i64 %5785, 2
  store i64 %5786, i64* %PC
  %5787 = trunc i64 %5782 to i32
  %5788 = add i32 %5783, %5787
  %5789 = zext i32 %5788 to i64
  store i64 %5789, i64* %RCX, align 8, !tbaa !2428
  %5790 = icmp ult i32 %5788, %5787
  %5791 = icmp ult i32 %5788, %5783
  %5792 = or i1 %5790, %5791
  %5793 = zext i1 %5792 to i8
  %5794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5793, i8* %5794, align 1, !tbaa !2433
  %5795 = and i32 %5788, 255
  %5796 = call i32 @llvm.ctpop.i32(i32 %5795) #16
  %5797 = trunc i32 %5796 to i8
  %5798 = and i8 %5797, 1
  %5799 = xor i8 %5798, 1
  %5800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5799, i8* %5800, align 1, !tbaa !2447
  %5801 = xor i64 %5784, %5782
  %5802 = trunc i64 %5801 to i32
  %5803 = xor i32 %5802, %5788
  %5804 = lshr i32 %5803, 4
  %5805 = trunc i32 %5804 to i8
  %5806 = and i8 %5805, 1
  %5807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5806, i8* %5807, align 1, !tbaa !2448
  %5808 = icmp eq i32 %5788, 0
  %5809 = zext i1 %5808 to i8
  %5810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5809, i8* %5810, align 1, !tbaa !2449
  %5811 = lshr i32 %5788, 31
  %5812 = trunc i32 %5811 to i8
  %5813 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5812, i8* %5813, align 1, !tbaa !2450
  %5814 = lshr i32 %5787, 31
  %5815 = lshr i32 %5783, 31
  %5816 = xor i32 %5811, %5814
  %5817 = xor i32 %5811, %5815
  %5818 = add nuw nsw i32 %5816, %5817
  %5819 = icmp eq i32 %5818, 2
  %5820 = zext i1 %5819 to i8
  %5821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5820, i8* %5821, align 1, !tbaa !2451
  %5822 = load i64, i64* %RCX
  %5823 = load i64, i64* %PC
  %5824 = add i64 %5823, 3
  store i64 %5824, i64* %PC
  %5825 = and i64 %5822, 4294967295
  %5826 = shl i64 %5825, 2
  %5827 = trunc i64 %5826 to i32
  %5828 = icmp slt i32 %5827, 0
  %5829 = shl i32 %5827, 1
  %5830 = zext i32 %5829 to i64
  store i64 %5830, i64* %RCX, align 8, !tbaa !2428
  %5831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5832 = zext i1 %5828 to i8
  store i8 %5832, i8* %5831, align 1, !tbaa !2432
  %5833 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5834 = and i32 %5829, 254
  %5835 = call i32 @llvm.ctpop.i32(i32 %5834) #16
  %5836 = trunc i32 %5835 to i8
  %5837 = and i8 %5836, 1
  %5838 = xor i8 %5837, 1
  store i8 %5838, i8* %5833, align 1, !tbaa !2432
  %5839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5839, align 1, !tbaa !2432
  %5840 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5841 = icmp eq i32 %5829, 0
  %5842 = zext i1 %5841 to i8
  store i8 %5842, i8* %5840, align 1, !tbaa !2432
  %5843 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5844 = lshr i32 %5829, 31
  %5845 = trunc i32 %5844 to i8
  store i8 %5845, i8* %5843, align 1, !tbaa !2432
  %5846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5846, align 1, !tbaa !2432
  %5847 = load i64, i64* %RAX
  %5848 = load i32, i32* %ECX
  %5849 = zext i32 %5848 to i64
  %5850 = load i64, i64* %PC
  %5851 = add i64 %5850, 2
  store i64 %5851, i64* %PC
  %5852 = trunc i64 %5847 to i32
  %5853 = add i32 %5848, %5852
  %5854 = zext i32 %5853 to i64
  store i64 %5854, i64* %RAX, align 8, !tbaa !2428
  %5855 = icmp ult i32 %5853, %5852
  %5856 = icmp ult i32 %5853, %5848
  %5857 = or i1 %5855, %5856
  %5858 = zext i1 %5857 to i8
  %5859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5858, i8* %5859, align 1, !tbaa !2433
  %5860 = and i32 %5853, 255
  %5861 = call i32 @llvm.ctpop.i32(i32 %5860) #16
  %5862 = trunc i32 %5861 to i8
  %5863 = and i8 %5862, 1
  %5864 = xor i8 %5863, 1
  %5865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5864, i8* %5865, align 1, !tbaa !2447
  %5866 = xor i64 %5849, %5847
  %5867 = trunc i64 %5866 to i32
  %5868 = xor i32 %5867, %5853
  %5869 = lshr i32 %5868, 4
  %5870 = trunc i32 %5869 to i8
  %5871 = and i8 %5870, 1
  %5872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5871, i8* %5872, align 1, !tbaa !2448
  %5873 = icmp eq i32 %5853, 0
  %5874 = zext i1 %5873 to i8
  %5875 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5874, i8* %5875, align 1, !tbaa !2449
  %5876 = lshr i32 %5853, 31
  %5877 = trunc i32 %5876 to i8
  %5878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5877, i8* %5878, align 1, !tbaa !2450
  %5879 = lshr i32 %5852, 31
  %5880 = lshr i32 %5848, 31
  %5881 = xor i32 %5876, %5879
  %5882 = xor i32 %5876, %5880
  %5883 = add nuw nsw i32 %5881, %5882
  %5884 = icmp eq i32 %5883, 2
  %5885 = zext i1 %5884 to i8
  %5886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5885, i8* %5886, align 1, !tbaa !2451
  %5887 = load i32, i32* %EAX
  %5888 = zext i32 %5887 to i64
  %5889 = load i64, i64* %PC
  %5890 = add i64 %5889, 3
  store i64 %5890, i64* %PC
  %5891 = shl i64 %5888, 32
  %5892 = ashr exact i64 %5891, 32
  store i64 %5892, i64* %RSI, align 8, !tbaa !2428
  %5893 = load i64, i64* %RSI
  %5894 = mul i64 %5893, 4
  %5895 = add i64 %5894, add (i64 ptrtoint (%p_type* @p to i64), i64 22528)
  %5896 = load i64, i64* %PC
  %5897 = add i64 %5896, 11
  store i64 %5897, i64* %PC
  %5898 = inttoptr i64 %5895 to i32*
  store i32 1, i32* %5898
  %5899 = load i64, i64* %RBP
  %5900 = sub i64 %5899, 12
  %5901 = load i64, i64* %PC
  %5902 = add i64 %5901, 3
  store i64 %5902, i64* %PC
  %5903 = inttoptr i64 %5900 to i32*
  %5904 = load i32, i32* %5903
  %5905 = zext i32 %5904 to i64
  store i64 %5905, i64* %RAX, align 8, !tbaa !2428
  %5906 = load i64, i64* %RAX
  %5907 = load i64, i64* %PC
  %5908 = add i64 %5907, 3
  store i64 %5908, i64* %PC
  %5909 = trunc i64 %5906 to i32
  %5910 = add i32 1, %5909
  %5911 = zext i32 %5910 to i64
  store i64 %5911, i64* %RAX, align 8, !tbaa !2428
  %5912 = icmp ult i32 %5910, %5909
  %5913 = icmp ult i32 %5910, 1
  %5914 = or i1 %5912, %5913
  %5915 = zext i1 %5914 to i8
  %5916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5915, i8* %5916, align 1, !tbaa !2433
  %5917 = and i32 %5910, 255
  %5918 = call i32 @llvm.ctpop.i32(i32 %5917) #16
  %5919 = trunc i32 %5918 to i8
  %5920 = and i8 %5919, 1
  %5921 = xor i8 %5920, 1
  %5922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5921, i8* %5922, align 1, !tbaa !2447
  %5923 = xor i64 1, %5906
  %5924 = trunc i64 %5923 to i32
  %5925 = xor i32 %5924, %5910
  %5926 = lshr i32 %5925, 4
  %5927 = trunc i32 %5926 to i8
  %5928 = and i8 %5927, 1
  %5929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %5928, i8* %5929, align 1, !tbaa !2448
  %5930 = icmp eq i32 %5910, 0
  %5931 = zext i1 %5930 to i8
  %5932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5931, i8* %5932, align 1, !tbaa !2449
  %5933 = lshr i32 %5910, 31
  %5934 = trunc i32 %5933 to i8
  %5935 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5934, i8* %5935, align 1, !tbaa !2450
  %5936 = lshr i32 %5909, 31
  %5937 = xor i32 %5933, %5936
  %5938 = add nuw nsw i32 %5937, %5933
  %5939 = icmp eq i32 %5938, 2
  %5940 = zext i1 %5939 to i8
  %5941 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5940, i8* %5941, align 1, !tbaa !2451
  %5942 = load i64, i64* %RBP
  %5943 = sub i64 %5942, 12
  %5944 = load i32, i32* %EAX
  %5945 = zext i32 %5944 to i64
  %5946 = load i64, i64* %PC
  %5947 = add i64 %5946, 3
  store i64 %5947, i64* %PC
  %5948 = inttoptr i64 %5943 to i32*
  store i32 %5944, i32* %5948
  %5949 = load i64, i64* %PC
  %5950 = sub i64 %5949, 52
  %5951 = load i64, i64* %PC
  %5952 = add i64 %5951, 5
  store i64 %5952, i64* %PC
  %5953 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5950, i64* %5953, align 8, !tbaa !2428
  br label %block_40105a

block_400e5e:                                     ; preds = %block_400e41, %block_400ecc
  %MEMORY.30 = phi %struct.Memory* [ %MEMORY.18, %block_400e41 ], [ %MEMORY.26, %block_400ecc ]
  %5954 = load i64, i64* %RBP
  %5955 = sub i64 %5954, 4
  %5956 = load i64, i64* %PC
  %5957 = add i64 %5956, 4
  store i64 %5957, i64* %PC
  %5958 = inttoptr i64 %5955 to i32*
  %5959 = load i32, i32* %5958
  %5960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5960, align 1, !tbaa !2433
  %5961 = and i32 %5959, 255
  %5962 = call i32 @llvm.ctpop.i32(i32 %5961) #16
  %5963 = trunc i32 %5962 to i8
  %5964 = and i8 %5963, 1
  %5965 = xor i8 %5964, 1
  %5966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5965, i8* %5966, align 1, !tbaa !2447
  %5967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5967, align 1, !tbaa !2448
  %5968 = icmp eq i32 %5959, 0
  %5969 = zext i1 %5968 to i8
  %5970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5969, i8* %5970, align 1, !tbaa !2449
  %5971 = lshr i32 %5959, 31
  %5972 = trunc i32 %5971 to i8
  %5973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5972, i8* %5973, align 1, !tbaa !2450
  %5974 = lshr i32 %5959, 31
  %5975 = xor i32 %5971, %5974
  %5976 = add nuw nsw i32 %5975, %5974
  %5977 = icmp eq i32 %5976, 2
  %5978 = zext i1 %5977 to i8
  %5979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5978, i8* %5979, align 1, !tbaa !2451
  %5980 = load i64, i64* %PC
  %5981 = add i64 %5980, 125
  %5982 = load i64, i64* %PC
  %5983 = add i64 %5982, 6
  %5984 = load i64, i64* %PC
  %5985 = add i64 %5984, 6
  store i64 %5985, i64* %PC
  %5986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5987 = load i8, i8* %5986, align 1, !tbaa !2449
  %5988 = icmp eq i8 %5987, 0
  %5989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5990 = load i8, i8* %5989, align 1, !tbaa !2450
  %5991 = icmp ne i8 %5990, 0
  %5992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5993 = load i8, i8* %5992, align 1, !tbaa !2451
  %5994 = icmp ne i8 %5993, 0
  %5995 = xor i1 %5991, %5994
  %5996 = xor i1 %5995, true
  %5997 = and i1 %5988, %5996
  %5998 = zext i1 %5997 to i8
  store i8 %5998, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %5999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6000 = select i1 %5997, i64 %5981, i64 %5983
  store i64 %6000, i64* %5999, align 8, !tbaa !2428
  %6001 = load i8, i8* %BRANCH_TAKEN
  %6002 = icmp eq i8 %6001, 1
  br i1 %6002, label %block_400edf, label %block_400e68

block_400e41:                                     ; preds = %block_400dc0
  %6003 = load i64, i64* %PC
  %6004 = add i64 %6003, 11
  store i64 %6004, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 28) to i32*)
  %6005 = load i64, i64* %PC
  %6006 = add i64 %6005, 11
  store i64 %6006, i64* %PC
  store i32 16, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 28) to i32*)
  %6007 = load i64, i64* %RBP
  %6008 = sub i64 %6007, 4
  %6009 = load i64, i64* %PC
  %6010 = add i64 %6009, 7
  store i64 %6010, i64* %PC
  %6011 = inttoptr i64 %6008 to i32*
  store i32 0, i32* %6011
  br label %block_400e5e

block_40105a:                                     ; preds = %block_401053, %block_401064
  %MEMORY.31 = phi %struct.Memory* [ %MEMORY.36, %block_401053 ], [ %MEMORY.31, %block_401064 ]
  %6012 = load i64, i64* %RBP
  %6013 = sub i64 %6012, 12
  %6014 = load i64, i64* %PC
  %6015 = add i64 %6014, 4
  store i64 %6015, i64* %PC
  %6016 = inttoptr i64 %6013 to i32*
  %6017 = load i32, i32* %6016
  %6018 = sub i32 %6017, 1
  %6019 = icmp ult i32 %6017, 1
  %6020 = zext i1 %6019 to i8
  %6021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6020, i8* %6021, align 1, !tbaa !2433
  %6022 = and i32 %6018, 255
  %6023 = call i32 @llvm.ctpop.i32(i32 %6022) #16
  %6024 = trunc i32 %6023 to i8
  %6025 = and i8 %6024, 1
  %6026 = xor i8 %6025, 1
  %6027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6026, i8* %6027, align 1, !tbaa !2447
  %6028 = xor i32 %6017, 1
  %6029 = xor i32 %6028, %6018
  %6030 = lshr i32 %6029, 4
  %6031 = trunc i32 %6030 to i8
  %6032 = and i8 %6031, 1
  %6033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6032, i8* %6033, align 1, !tbaa !2448
  %6034 = icmp eq i32 %6018, 0
  %6035 = zext i1 %6034 to i8
  %6036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6035, i8* %6036, align 1, !tbaa !2449
  %6037 = lshr i32 %6018, 31
  %6038 = trunc i32 %6037 to i8
  %6039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6038, i8* %6039, align 1, !tbaa !2450
  %6040 = lshr i32 %6017, 31
  %6041 = xor i32 %6037, %6040
  %6042 = add nuw nsw i32 %6041, %6040
  %6043 = icmp eq i32 %6042, 2
  %6044 = zext i1 %6043 to i8
  %6045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6044, i8* %6045, align 1, !tbaa !2451
  %6046 = load i64, i64* %PC
  %6047 = add i64 %6046, 53
  %6048 = load i64, i64* %PC
  %6049 = add i64 %6048, 6
  %6050 = load i64, i64* %PC
  %6051 = add i64 %6050, 6
  store i64 %6051, i64* %PC
  %6052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6053 = load i8, i8* %6052, align 1, !tbaa !2449
  %6054 = icmp eq i8 %6053, 0
  %6055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6056 = load i8, i8* %6055, align 1, !tbaa !2450
  %6057 = icmp ne i8 %6056, 0
  %6058 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6059 = load i8, i8* %6058, align 1, !tbaa !2451
  %6060 = icmp ne i8 %6059, 0
  %6061 = xor i1 %6057, %6060
  %6062 = xor i1 %6061, true
  %6063 = and i1 %6054, %6062
  %6064 = zext i1 %6063 to i8
  store i8 %6064, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %6065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6066 = select i1 %6063, i64 %6047, i64 %6049
  store i64 %6066, i64* %6065, align 8, !tbaa !2428
  %6067 = load i8, i8* %BRANCH_TAKEN
  %6068 = icmp eq i8 %6067, 1
  br i1 %6068, label %block_401093, label %block_401064

block_400908:                                     ; preds = %block_400901, %block_400954
  %MEMORY.32 = phi %struct.Memory* [ %MEMORY.23, %block_400901 ], [ %MEMORY.24, %block_400954 ]
  %6069 = load i64, i64* %RBP
  %6070 = sub i64 %6069, 4
  %6071 = load i64, i64* %PC
  %6072 = add i64 %6071, 4
  store i64 %6072, i64* %PC
  %6073 = inttoptr i64 %6070 to i32*
  %6074 = load i32, i32* %6073
  %6075 = sub i32 %6074, 12
  %6076 = icmp ult i32 %6074, 12
  %6077 = zext i1 %6076 to i8
  %6078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6077, i8* %6078, align 1, !tbaa !2433
  %6079 = and i32 %6075, 255
  %6080 = call i32 @llvm.ctpop.i32(i32 %6079) #16
  %6081 = trunc i32 %6080 to i8
  %6082 = and i8 %6081, 1
  %6083 = xor i8 %6082, 1
  %6084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6083, i8* %6084, align 1, !tbaa !2447
  %6085 = xor i32 %6074, 12
  %6086 = xor i32 %6085, %6075
  %6087 = lshr i32 %6086, 4
  %6088 = trunc i32 %6087 to i8
  %6089 = and i8 %6088, 1
  %6090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6089, i8* %6090, align 1, !tbaa !2448
  %6091 = icmp eq i32 %6075, 0
  %6092 = zext i1 %6091 to i8
  %6093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6092, i8* %6093, align 1, !tbaa !2449
  %6094 = lshr i32 %6075, 31
  %6095 = trunc i32 %6094 to i8
  %6096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6095, i8* %6096, align 1, !tbaa !2450
  %6097 = lshr i32 %6074, 31
  %6098 = xor i32 %6094, %6097
  %6099 = add nuw nsw i32 %6098, %6097
  %6100 = icmp eq i32 %6099, 2
  %6101 = zext i1 %6100 to i8
  %6102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6101, i8* %6102, align 1, !tbaa !2451
  %6103 = load i64, i64* %PC
  %6104 = add i64 %6103, 91
  %6105 = load i64, i64* %PC
  %6106 = add i64 %6105, 6
  %6107 = load i64, i64* %PC
  %6108 = add i64 %6107, 6
  store i64 %6108, i64* %PC
  %6109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6110 = load i8, i8* %6109, align 1, !tbaa !2449
  %6111 = icmp eq i8 %6110, 0
  %6112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6113 = load i8, i8* %6112, align 1, !tbaa !2450
  %6114 = icmp ne i8 %6113, 0
  %6115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6116 = load i8, i8* %6115, align 1, !tbaa !2451
  %6117 = icmp ne i8 %6116, 0
  %6118 = xor i1 %6114, %6117
  %6119 = xor i1 %6118, true
  %6120 = and i1 %6111, %6119
  %6121 = zext i1 %6120 to i8
  store i8 %6121, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %6122 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6123 = select i1 %6120, i64 %6104, i64 %6106
  store i64 %6123, i64* %6122, align 8, !tbaa !2428
  %6124 = load i8, i8* %BRANCH_TAKEN
  %6125 = icmp eq i8 %6124, 1
  %6126 = load i64, i64* %RBP
  br i1 %6125, label %block_400967, label %block_400912

block_4010b9:                                     ; preds = %block_401038
  %6127 = load i64, i64* %PC
  %6128 = add i64 %6127, 11
  store i64 %6128, i64* %PC
  store i32 2, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 44) to i32*)
  %6129 = load i64, i64* %PC
  %6130 = add i64 %6129, 11
  store i64 %6130, i64* %PC
  store i32 72, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 44) to i32*)
  %6131 = load i64, i64* %RBP
  %6132 = sub i64 %6131, 4
  %6133 = load i64, i64* %PC
  %6134 = add i64 %6133, 7
  store i64 %6134, i64* %PC
  %6135 = inttoptr i64 %6132 to i32*
  store i32 0, i32* %6135
  br label %block_4010d6

block_400c54:                                     ; preds = %block_400bf7
  %6136 = load i64, i64* %PC
  %6137 = add i64 %6136, 5
  %6138 = load i64, i64* %PC
  %6139 = add i64 %6138, 5
  store i64 %6139, i64* %PC
  %6140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6137, i64* %6140, align 8, !tbaa !2428
  %6141 = load i64, i64* %RBP
  %6142 = sub i64 %6141, 4
  %6143 = load i64, i64* %PC
  %6144 = add i64 %6143, 3
  store i64 %6144, i64* %PC
  %6145 = inttoptr i64 %6142 to i32*
  %6146 = load i32, i32* %6145
  %6147 = zext i32 %6146 to i64
  store i64 %6147, i64* %RAX, align 8, !tbaa !2428
  %6148 = load i64, i64* %RAX
  %6149 = load i64, i64* %PC
  %6150 = add i64 %6149, 3
  store i64 %6150, i64* %PC
  %6151 = trunc i64 %6148 to i32
  %6152 = add i32 1, %6151
  %6153 = zext i32 %6152 to i64
  store i64 %6153, i64* %RAX, align 8, !tbaa !2428
  %6154 = icmp ult i32 %6152, %6151
  %6155 = icmp ult i32 %6152, 1
  %6156 = or i1 %6154, %6155
  %6157 = zext i1 %6156 to i8
  %6158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6157, i8* %6158, align 1, !tbaa !2433
  %6159 = and i32 %6152, 255
  %6160 = call i32 @llvm.ctpop.i32(i32 %6159) #16
  %6161 = trunc i32 %6160 to i8
  %6162 = and i8 %6161, 1
  %6163 = xor i8 %6162, 1
  %6164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6163, i8* %6164, align 1, !tbaa !2447
  %6165 = xor i64 1, %6148
  %6166 = trunc i64 %6165 to i32
  %6167 = xor i32 %6166, %6152
  %6168 = lshr i32 %6167, 4
  %6169 = trunc i32 %6168 to i8
  %6170 = and i8 %6169, 1
  %6171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6170, i8* %6171, align 1, !tbaa !2448
  %6172 = icmp eq i32 %6152, 0
  %6173 = zext i1 %6172 to i8
  %6174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6173, i8* %6174, align 1, !tbaa !2449
  %6175 = lshr i32 %6152, 31
  %6176 = trunc i32 %6175 to i8
  %6177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6176, i8* %6177, align 1, !tbaa !2450
  %6178 = lshr i32 %6151, 31
  %6179 = xor i32 %6175, %6178
  %6180 = add nuw nsw i32 %6179, %6175
  %6181 = icmp eq i32 %6180, 2
  %6182 = zext i1 %6181 to i8
  %6183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6182, i8* %6183, align 1, !tbaa !2451
  %6184 = load i64, i64* %RBP
  %6185 = sub i64 %6184, 4
  %6186 = load i32, i32* %EAX
  %6187 = zext i32 %6186 to i64
  %6188 = load i64, i64* %PC
  %6189 = add i64 %6188, 3
  store i64 %6189, i64* %PC
  %6190 = inttoptr i64 %6185 to i32*
  store i32 %6186, i32* %6190
  %6191 = load i64, i64* %PC
  %6192 = sub i64 %6191, 124
  %6193 = load i64, i64* %PC
  %6194 = add i64 %6193, 5
  store i64 %6194, i64* %PC
  %6195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6192, i64* %6195, align 8, !tbaa !2428
  br label %block_400be6

block_400abb:                                     ; preds = %block_400b05, %block_400ab4
  %MEMORY.33 = phi %struct.Memory* [ %MEMORY.37, %block_400ab4 ], [ %MEMORY.29, %block_400b05 ]
  %6196 = load i64, i64* %RBP
  %6197 = sub i64 %6196, 8
  %6198 = load i64, i64* %PC
  %6199 = add i64 %6198, 4
  store i64 %6199, i64* %PC
  %6200 = inttoptr i64 %6197 to i32*
  %6201 = load i32, i32* %6200
  %6202 = sub i32 %6201, 3
  %6203 = icmp ult i32 %6201, 3
  %6204 = zext i1 %6203 to i8
  %6205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6204, i8* %6205, align 1, !tbaa !2433
  %6206 = and i32 %6202, 255
  %6207 = call i32 @llvm.ctpop.i32(i32 %6206) #16
  %6208 = trunc i32 %6207 to i8
  %6209 = and i8 %6208, 1
  %6210 = xor i8 %6209, 1
  %6211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6210, i8* %6211, align 1, !tbaa !2447
  %6212 = xor i32 %6201, 3
  %6213 = xor i32 %6212, %6202
  %6214 = lshr i32 %6213, 4
  %6215 = trunc i32 %6214 to i8
  %6216 = and i8 %6215, 1
  %6217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6216, i8* %6217, align 1, !tbaa !2448
  %6218 = icmp eq i32 %6202, 0
  %6219 = zext i1 %6218 to i8
  %6220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6219, i8* %6220, align 1, !tbaa !2449
  %6221 = lshr i32 %6202, 31
  %6222 = trunc i32 %6221 to i8
  %6223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6222, i8* %6223, align 1, !tbaa !2450
  %6224 = lshr i32 %6201, 31
  %6225 = xor i32 %6221, %6224
  %6226 = add nuw nsw i32 %6225, %6224
  %6227 = icmp eq i32 %6226, 2
  %6228 = zext i1 %6227 to i8
  %6229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6228, i8* %6229, align 1, !tbaa !2451
  %6230 = load i64, i64* %PC
  %6231 = add i64 %6230, 89
  %6232 = load i64, i64* %PC
  %6233 = add i64 %6232, 6
  %6234 = load i64, i64* %PC
  %6235 = add i64 %6234, 6
  store i64 %6235, i64* %PC
  %6236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6237 = load i8, i8* %6236, align 1, !tbaa !2449
  %6238 = icmp eq i8 %6237, 0
  %6239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6240 = load i8, i8* %6239, align 1, !tbaa !2450
  %6241 = icmp ne i8 %6240, 0
  %6242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6243 = load i8, i8* %6242, align 1, !tbaa !2451
  %6244 = icmp ne i8 %6243, 0
  %6245 = xor i1 %6241, %6244
  %6246 = xor i1 %6245, true
  %6247 = and i1 %6238, %6246
  %6248 = zext i1 %6247 to i8
  store i8 %6248, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %6249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6250 = select i1 %6247, i64 %6231, i64 %6233
  store i64 %6250, i64* %6249, align 8, !tbaa !2428
  %6251 = load i8, i8* %BRANCH_TAKEN
  %6252 = icmp eq i8 %6251, 1
  br i1 %6252, label %block_400b18, label %block_400ac5

block_4008a2:                                     ; preds = %block_40089b, %block_4008ac
  %MEMORY.34 = phi %struct.Memory* [ %MEMORY.38, %block_40089b ], [ %MEMORY.34, %block_4008ac ]
  %6253 = load i64, i64* %RBP
  %6254 = sub i64 %6253, 12
  %6255 = load i64, i64* %PC
  %6256 = add i64 %6255, 4
  store i64 %6256, i64* %PC
  %6257 = inttoptr i64 %6254 to i32*
  %6258 = load i32, i32* %6257
  %6259 = sub i32 %6258, 5
  %6260 = icmp ult i32 %6258, 5
  %6261 = zext i1 %6260 to i8
  %6262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6261, i8* %6262, align 1, !tbaa !2433
  %6263 = and i32 %6259, 255
  %6264 = call i32 @llvm.ctpop.i32(i32 %6263) #16
  %6265 = trunc i32 %6264 to i8
  %6266 = and i8 %6265, 1
  %6267 = xor i8 %6266, 1
  %6268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6267, i8* %6268, align 1, !tbaa !2447
  %6269 = xor i32 %6258, 5
  %6270 = xor i32 %6269, %6259
  %6271 = lshr i32 %6270, 4
  %6272 = trunc i32 %6271 to i8
  %6273 = and i8 %6272, 1
  %6274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6273, i8* %6274, align 1, !tbaa !2448
  %6275 = icmp eq i32 %6259, 0
  %6276 = zext i1 %6275 to i8
  %6277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6276, i8* %6277, align 1, !tbaa !2449
  %6278 = lshr i32 %6259, 31
  %6279 = trunc i32 %6278 to i8
  %6280 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6279, i8* %6280, align 1, !tbaa !2450
  %6281 = lshr i32 %6258, 31
  %6282 = xor i32 %6278, %6281
  %6283 = add nuw nsw i32 %6282, %6281
  %6284 = icmp eq i32 %6283, 2
  %6285 = zext i1 %6284 to i8
  %6286 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6285, i8* %6286, align 1, !tbaa !2451
  %6287 = load i64, i64* %PC
  %6288 = add i64 %6287, 53
  %6289 = load i64, i64* %PC
  %6290 = add i64 %6289, 6
  %6291 = load i64, i64* %PC
  %6292 = add i64 %6291, 6
  store i64 %6292, i64* %PC
  %6293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6294 = load i8, i8* %6293, align 1, !tbaa !2449
  %6295 = icmp eq i8 %6294, 0
  %6296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6297 = load i8, i8* %6296, align 1, !tbaa !2450
  %6298 = icmp ne i8 %6297, 0
  %6299 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6300 = load i8, i8* %6299, align 1, !tbaa !2451
  %6301 = icmp ne i8 %6300, 0
  %6302 = xor i1 %6298, %6301
  %6303 = xor i1 %6302, true
  %6304 = and i1 %6295, %6303
  %6305 = zext i1 %6304 to i8
  store i8 %6305, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %6306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6307 = select i1 %6304, i64 %6288, i64 %6290
  store i64 %6307, i64* %6306, align 8, !tbaa !2428
  %6308 = load i8, i8* %BRANCH_TAKEN
  %6309 = icmp eq i8 %6308, 1
  br i1 %6309, label %block_4008db, label %block_4008ac

block_401053:                                     ; preds = %block_401049
  %6310 = load i64, i64* %RBP
  %6311 = sub i64 %6310, 12
  %6312 = load i64, i64* %PC
  %6313 = add i64 %6312, 7
  store i64 %6313, i64* %PC
  %6314 = inttoptr i64 %6311 to i32*
  store i32 0, i32* %6314
  br label %block_40105a

block_40084f:                                     ; preds = %block_40085c, %block_400840
  %MEMORY.35 = phi %struct.Memory* [ %2, %block_400840 ], [ %MEMORY.35, %block_40085c ]
  %6315 = load i64, i64* %RBP
  %6316 = sub i64 %6315, 16
  %6317 = load i64, i64* %PC
  %6318 = add i64 %6317, 7
  store i64 %6318, i64* %PC
  %6319 = inttoptr i64 %6316 to i32*
  %6320 = load i32, i32* %6319
  %6321 = sub i32 %6320, 511
  %6322 = icmp ult i32 %6320, 511
  %6323 = zext i1 %6322 to i8
  %6324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6323, i8* %6324, align 1, !tbaa !2433
  %6325 = and i32 %6321, 255
  %6326 = call i32 @llvm.ctpop.i32(i32 %6325) #16
  %6327 = trunc i32 %6326 to i8
  %6328 = and i8 %6327, 1
  %6329 = xor i8 %6328, 1
  %6330 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6329, i8* %6330, align 1, !tbaa !2447
  %6331 = xor i32 %6320, 511
  %6332 = xor i32 %6331, %6321
  %6333 = lshr i32 %6332, 4
  %6334 = trunc i32 %6333 to i8
  %6335 = and i8 %6334, 1
  %6336 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6335, i8* %6336, align 1, !tbaa !2448
  %6337 = icmp eq i32 %6321, 0
  %6338 = zext i1 %6337 to i8
  %6339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6338, i8* %6339, align 1, !tbaa !2449
  %6340 = lshr i32 %6321, 31
  %6341 = trunc i32 %6340 to i8
  %6342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6341, i8* %6342, align 1, !tbaa !2450
  %6343 = lshr i32 %6320, 31
  %6344 = xor i32 %6340, %6343
  %6345 = add nuw nsw i32 %6344, %6343
  %6346 = icmp eq i32 %6345, 2
  %6347 = zext i1 %6346 to i8
  %6348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6347, i8* %6348, align 1, !tbaa !2451
  %6349 = load i64, i64* %PC
  %6350 = add i64 %6349, 35
  %6351 = load i64, i64* %PC
  %6352 = add i64 %6351, 6
  %6353 = load i64, i64* %PC
  %6354 = add i64 %6353, 6
  store i64 %6354, i64* %PC
  %6355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6356 = load i8, i8* %6355, align 1, !tbaa !2449
  %6357 = icmp eq i8 %6356, 0
  %6358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6359 = load i8, i8* %6358, align 1, !tbaa !2450
  %6360 = icmp ne i8 %6359, 0
  %6361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6362 = load i8, i8* %6361, align 1, !tbaa !2451
  %6363 = icmp ne i8 %6362, 0
  %6364 = xor i1 %6360, %6363
  %6365 = xor i1 %6364, true
  %6366 = and i1 %6357, %6365
  %6367 = zext i1 %6366 to i8
  store i8 %6367, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %6368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6369 = select i1 %6366, i64 %6350, i64 %6352
  store i64 %6369, i64* %6368, align 8, !tbaa !2428
  %6370 = load i8, i8* %BRANCH_TAKEN
  %6371 = icmp eq i8 %6370, 1
  %6372 = load i64, i64* %RBP
  br i1 %6371, label %block_400879, label %block_40085c

block_400d7d:                                     ; preds = %block_400d44
  %6373 = load i64, i64* %PC
  %6374 = add i64 %6373, 5
  %6375 = load i64, i64* %PC
  %6376 = add i64 %6375, 5
  store i64 %6376, i64* %PC
  %6377 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6374, i64* %6377, align 8, !tbaa !2428
  %6378 = load i64, i64* %RBP
  %6379 = sub i64 %6378, 8
  %6380 = load i64, i64* %PC
  %6381 = add i64 %6380, 3
  store i64 %6381, i64* %PC
  %6382 = inttoptr i64 %6379 to i32*
  %6383 = load i32, i32* %6382
  %6384 = zext i32 %6383 to i64
  store i64 %6384, i64* %RAX, align 8, !tbaa !2428
  %6385 = load i64, i64* %RAX
  %6386 = load i64, i64* %PC
  %6387 = add i64 %6386, 3
  store i64 %6387, i64* %PC
  %6388 = trunc i64 %6385 to i32
  %6389 = add i32 1, %6388
  %6390 = zext i32 %6389 to i64
  store i64 %6390, i64* %RAX, align 8, !tbaa !2428
  %6391 = icmp ult i32 %6389, %6388
  %6392 = icmp ult i32 %6389, 1
  %6393 = or i1 %6391, %6392
  %6394 = zext i1 %6393 to i8
  %6395 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6394, i8* %6395, align 1, !tbaa !2433
  %6396 = and i32 %6389, 255
  %6397 = call i32 @llvm.ctpop.i32(i32 %6396) #16
  %6398 = trunc i32 %6397 to i8
  %6399 = and i8 %6398, 1
  %6400 = xor i8 %6399, 1
  %6401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6400, i8* %6401, align 1, !tbaa !2447
  %6402 = xor i64 1, %6385
  %6403 = trunc i64 %6402 to i32
  %6404 = xor i32 %6403, %6389
  %6405 = lshr i32 %6404, 4
  %6406 = trunc i32 %6405 to i8
  %6407 = and i8 %6406, 1
  %6408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6407, i8* %6408, align 1, !tbaa !2448
  %6409 = icmp eq i32 %6389, 0
  %6410 = zext i1 %6409 to i8
  %6411 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6410, i8* %6411, align 1, !tbaa !2449
  %6412 = lshr i32 %6389, 31
  %6413 = trunc i32 %6412 to i8
  %6414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6413, i8* %6414, align 1, !tbaa !2450
  %6415 = lshr i32 %6388, 31
  %6416 = xor i32 %6412, %6415
  %6417 = add nuw nsw i32 %6416, %6412
  %6418 = icmp eq i32 %6417, 2
  %6419 = zext i1 %6418 to i8
  %6420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6419, i8* %6420, align 1, !tbaa !2451
  %6421 = load i64, i64* %RBP
  %6422 = sub i64 %6421, 8
  %6423 = load i32, i32* %EAX
  %6424 = zext i32 %6423 to i64
  %6425 = load i64, i64* %PC
  %6426 = add i64 %6425, 3
  store i64 %6426, i64* %PC
  %6427 = inttoptr i64 %6422 to i32*
  store i32 %6423, i32* %6427
  %6428 = load i64, i64* %PC
  %6429 = sub i64 %6428, 88
  %6430 = load i64, i64* %PC
  %6431 = add i64 %6430, 5
  store i64 %6431, i64* %PC
  %6432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6429, i64* %6432, align 8, !tbaa !2428
  br label %block_400d33

block_401049:                                     ; preds = %block_401042, %block_401093
  %MEMORY.36 = phi %struct.Memory* [ %MEMORY.7, %block_401042 ], [ %MEMORY.31, %block_401093 ]
  %6433 = load i64, i64* %RBP
  %6434 = sub i64 %6433, 8
  %6435 = load i64, i64* %PC
  %6436 = add i64 %6435, 4
  store i64 %6436, i64* %PC
  %6437 = inttoptr i64 %6434 to i32*
  %6438 = load i32, i32* %6437
  %6439 = sub i32 %6438, 1
  %6440 = icmp ult i32 %6438, 1
  %6441 = zext i1 %6440 to i8
  %6442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6441, i8* %6442, align 1, !tbaa !2433
  %6443 = and i32 %6439, 255
  %6444 = call i32 @llvm.ctpop.i32(i32 %6443) #16
  %6445 = trunc i32 %6444 to i8
  %6446 = and i8 %6445, 1
  %6447 = xor i8 %6446, 1
  %6448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6447, i8* %6448, align 1, !tbaa !2447
  %6449 = xor i32 %6438, 1
  %6450 = xor i32 %6449, %6439
  %6451 = lshr i32 %6450, 4
  %6452 = trunc i32 %6451 to i8
  %6453 = and i8 %6452, 1
  %6454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6453, i8* %6454, align 1, !tbaa !2448
  %6455 = icmp eq i32 %6439, 0
  %6456 = zext i1 %6455 to i8
  %6457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6456, i8* %6457, align 1, !tbaa !2449
  %6458 = lshr i32 %6439, 31
  %6459 = trunc i32 %6458 to i8
  %6460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6459, i8* %6460, align 1, !tbaa !2450
  %6461 = lshr i32 %6438, 31
  %6462 = xor i32 %6458, %6461
  %6463 = add nuw nsw i32 %6462, %6461
  %6464 = icmp eq i32 %6463, 2
  %6465 = zext i1 %6464 to i8
  %6466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6465, i8* %6466, align 1, !tbaa !2451
  %6467 = load i64, i64* %PC
  %6468 = add i64 %6467, 89
  %6469 = load i64, i64* %PC
  %6470 = add i64 %6469, 6
  %6471 = load i64, i64* %PC
  %6472 = add i64 %6471, 6
  store i64 %6472, i64* %PC
  %6473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6474 = load i8, i8* %6473, align 1, !tbaa !2449
  %6475 = icmp eq i8 %6474, 0
  %6476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6477 = load i8, i8* %6476, align 1, !tbaa !2450
  %6478 = icmp ne i8 %6477, 0
  %6479 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6480 = load i8, i8* %6479, align 1, !tbaa !2451
  %6481 = icmp ne i8 %6480, 0
  %6482 = xor i1 %6478, %6481
  %6483 = xor i1 %6482, true
  %6484 = and i1 %6475, %6483
  %6485 = zext i1 %6484 to i8
  store i8 %6485, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %6486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6487 = select i1 %6484, i64 %6468, i64 %6470
  store i64 %6487, i64* %6486, align 8, !tbaa !2428
  %6488 = load i8, i8* %BRANCH_TAKEN
  %6489 = icmp eq i8 %6488, 1
  br i1 %6489, label %block_4010a6, label %block_401053

block_400aaa:                                     ; preds = %block_400b18, %block_400a8d
  %MEMORY.37 = phi %struct.Memory* [ %MEMORY.46, %block_400a8d ], [ %MEMORY.33, %block_400b18 ]
  %6490 = load i64, i64* %RBP
  %6491 = sub i64 %6490, 4
  %6492 = load i64, i64* %PC
  %6493 = add i64 %6492, 4
  store i64 %6493, i64* %PC
  %6494 = inttoptr i64 %6491 to i32*
  %6495 = load i32, i32* %6494
  %6496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6496, align 1, !tbaa !2433
  %6497 = and i32 %6495, 255
  %6498 = call i32 @llvm.ctpop.i32(i32 %6497) #16
  %6499 = trunc i32 %6498 to i8
  %6500 = and i8 %6499, 1
  %6501 = xor i8 %6500, 1
  %6502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6501, i8* %6502, align 1, !tbaa !2447
  %6503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6503, align 1, !tbaa !2448
  %6504 = icmp eq i32 %6495, 0
  %6505 = zext i1 %6504 to i8
  %6506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6505, i8* %6506, align 1, !tbaa !2449
  %6507 = lshr i32 %6495, 31
  %6508 = trunc i32 %6507 to i8
  %6509 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6508, i8* %6509, align 1, !tbaa !2450
  %6510 = lshr i32 %6495, 31
  %6511 = xor i32 %6507, %6510
  %6512 = add nuw nsw i32 %6511, %6510
  %6513 = icmp eq i32 %6512, 2
  %6514 = zext i1 %6513 to i8
  %6515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6514, i8* %6515, align 1, !tbaa !2451
  %6516 = load i64, i64* %PC
  %6517 = add i64 %6516, 125
  %6518 = load i64, i64* %PC
  %6519 = add i64 %6518, 6
  %6520 = load i64, i64* %PC
  %6521 = add i64 %6520, 6
  store i64 %6521, i64* %PC
  %6522 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6523 = load i8, i8* %6522, align 1, !tbaa !2449
  %6524 = icmp eq i8 %6523, 0
  %6525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6526 = load i8, i8* %6525, align 1, !tbaa !2450
  %6527 = icmp ne i8 %6526, 0
  %6528 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6529 = load i8, i8* %6528, align 1, !tbaa !2451
  %6530 = icmp ne i8 %6529, 0
  %6531 = xor i1 %6527, %6530
  %6532 = xor i1 %6531, true
  %6533 = and i1 %6524, %6532
  %6534 = zext i1 %6533 to i8
  store i8 %6534, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %6535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6536 = select i1 %6533, i64 %6517, i64 %6519
  store i64 %6536, i64* %6535, align 8, !tbaa !2428
  %6537 = load i8, i8* %BRANCH_TAKEN
  %6538 = icmp eq i8 %6537, 1
  br i1 %6538, label %block_400b2b, label %block_400ab4

block_400891:                                     ; preds = %block_40088a, %block_4008db
  %MEMORY.38 = phi %struct.Memory* [ %MEMORY.23, %block_40088a ], [ %MEMORY.34, %block_4008db ]
  %6539 = load i64, i64* %RBP
  %6540 = sub i64 %6539, 8
  %6541 = load i64, i64* %PC
  %6542 = add i64 %6541, 4
  store i64 %6542, i64* %PC
  %6543 = inttoptr i64 %6540 to i32*
  %6544 = load i32, i32* %6543
  %6545 = sub i32 %6544, 5
  %6546 = icmp ult i32 %6544, 5
  %6547 = zext i1 %6546 to i8
  %6548 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6547, i8* %6548, align 1, !tbaa !2433
  %6549 = and i32 %6545, 255
  %6550 = call i32 @llvm.ctpop.i32(i32 %6549) #16
  %6551 = trunc i32 %6550 to i8
  %6552 = and i8 %6551, 1
  %6553 = xor i8 %6552, 1
  %6554 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6553, i8* %6554, align 1, !tbaa !2447
  %6555 = xor i32 %6544, 5
  %6556 = xor i32 %6555, %6545
  %6557 = lshr i32 %6556, 4
  %6558 = trunc i32 %6557 to i8
  %6559 = and i8 %6558, 1
  %6560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6559, i8* %6560, align 1, !tbaa !2448
  %6561 = icmp eq i32 %6545, 0
  %6562 = zext i1 %6561 to i8
  %6563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6562, i8* %6563, align 1, !tbaa !2449
  %6564 = lshr i32 %6545, 31
  %6565 = trunc i32 %6564 to i8
  %6566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6565, i8* %6566, align 1, !tbaa !2450
  %6567 = lshr i32 %6544, 31
  %6568 = xor i32 %6564, %6567
  %6569 = add nuw nsw i32 %6568, %6567
  %6570 = icmp eq i32 %6569, 2
  %6571 = zext i1 %6570 to i8
  %6572 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6571, i8* %6572, align 1, !tbaa !2451
  %6573 = load i64, i64* %PC
  %6574 = add i64 %6573, 89
  %6575 = load i64, i64* %PC
  %6576 = add i64 %6575, 6
  %6577 = load i64, i64* %PC
  %6578 = add i64 %6577, 6
  store i64 %6578, i64* %PC
  %6579 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6580 = load i8, i8* %6579, align 1, !tbaa !2449
  %6581 = icmp eq i8 %6580, 0
  %6582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6583 = load i8, i8* %6582, align 1, !tbaa !2450
  %6584 = icmp ne i8 %6583, 0
  %6585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6586 = load i8, i8* %6585, align 1, !tbaa !2451
  %6587 = icmp ne i8 %6586, 0
  %6588 = xor i1 %6584, %6587
  %6589 = xor i1 %6588, true
  %6590 = and i1 %6581, %6589
  %6591 = zext i1 %6590 to i8
  store i8 %6591, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %6592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6593 = select i1 %6590, i64 %6574, i64 %6576
  store i64 %6593, i64* %6592, align 8, !tbaa !2428
  %6594 = load i8, i8* %BRANCH_TAKEN
  %6595 = icmp eq i8 %6594, 1
  br i1 %6595, label %block_4008ee, label %block_40089b

block_401042:                                     ; preds = %block_401038
  %6596 = load i64, i64* %RBP
  %6597 = sub i64 %6596, 8
  %6598 = load i64, i64* %PC
  %6599 = add i64 %6598, 7
  store i64 %6599, i64* %PC
  %6600 = inttoptr i64 %6597 to i32*
  store i32 0, i32* %6600
  br label %block_401049

block_400f0d:                                     ; preds = %block_400f57, %block_400f06
  %MEMORY.39 = phi %struct.Memory* [ %MEMORY.15, %block_400f06 ], [ %MEMORY.14, %block_400f57 ]
  %6601 = load i64, i64* %RBP
  %6602 = sub i64 %6601, 8
  %6603 = load i64, i64* %PC
  %6604 = add i64 %6603, 4
  store i64 %6604, i64* %PC
  %6605 = inttoptr i64 %6602 to i32*
  %6606 = load i32, i32* %6605
  %6607 = sub i32 %6606, 1
  %6608 = icmp ult i32 %6606, 1
  %6609 = zext i1 %6608 to i8
  %6610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6609, i8* %6610, align 1, !tbaa !2433
  %6611 = and i32 %6607, 255
  %6612 = call i32 @llvm.ctpop.i32(i32 %6611) #16
  %6613 = trunc i32 %6612 to i8
  %6614 = and i8 %6613, 1
  %6615 = xor i8 %6614, 1
  %6616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6615, i8* %6616, align 1, !tbaa !2447
  %6617 = xor i32 %6606, 1
  %6618 = xor i32 %6617, %6607
  %6619 = lshr i32 %6618, 4
  %6620 = trunc i32 %6619 to i8
  %6621 = and i8 %6620, 1
  %6622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6621, i8* %6622, align 1, !tbaa !2448
  %6623 = icmp eq i32 %6607, 0
  %6624 = zext i1 %6623 to i8
  %6625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6624, i8* %6625, align 1, !tbaa !2449
  %6626 = lshr i32 %6607, 31
  %6627 = trunc i32 %6626 to i8
  %6628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6627, i8* %6628, align 1, !tbaa !2450
  %6629 = lshr i32 %6606, 31
  %6630 = xor i32 %6626, %6629
  %6631 = add nuw nsw i32 %6630, %6629
  %6632 = icmp eq i32 %6631, 2
  %6633 = zext i1 %6632 to i8
  %6634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6633, i8* %6634, align 1, !tbaa !2451
  %6635 = load i64, i64* %PC
  %6636 = add i64 %6635, 89
  %6637 = load i64, i64* %PC
  %6638 = add i64 %6637, 6
  %6639 = load i64, i64* %PC
  %6640 = add i64 %6639, 6
  store i64 %6640, i64* %PC
  %6641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6642 = load i8, i8* %6641, align 1, !tbaa !2449
  %6643 = icmp eq i8 %6642, 0
  %6644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6645 = load i8, i8* %6644, align 1, !tbaa !2450
  %6646 = icmp ne i8 %6645, 0
  %6647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6648 = load i8, i8* %6647, align 1, !tbaa !2451
  %6649 = icmp ne i8 %6648, 0
  %6650 = xor i1 %6646, %6649
  %6651 = xor i1 %6650, true
  %6652 = and i1 %6643, %6651
  %6653 = zext i1 %6652 to i8
  store i8 %6653, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %6654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6655 = select i1 %6652, i64 %6636, i64 %6638
  store i64 %6655, i64* %6654, align 8, !tbaa !2428
  %6656 = load i8, i8* %BRANCH_TAKEN
  %6657 = icmp eq i8 %6656, 1
  br i1 %6657, label %block_400f6a, label %block_400f17

block_400c41:                                     ; preds = %block_400c08
  %6658 = load i64, i64* %PC
  %6659 = add i64 %6658, 5
  %6660 = load i64, i64* %PC
  %6661 = add i64 %6660, 5
  store i64 %6661, i64* %PC
  %6662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6659, i64* %6662, align 8, !tbaa !2428
  %6663 = load i64, i64* %RBP
  %6664 = sub i64 %6663, 8
  %6665 = load i64, i64* %PC
  %6666 = add i64 %6665, 3
  store i64 %6666, i64* %PC
  %6667 = inttoptr i64 %6664 to i32*
  %6668 = load i32, i32* %6667
  %6669 = zext i32 %6668 to i64
  store i64 %6669, i64* %RAX, align 8, !tbaa !2428
  %6670 = load i64, i64* %RAX
  %6671 = load i64, i64* %PC
  %6672 = add i64 %6671, 3
  store i64 %6672, i64* %PC
  %6673 = trunc i64 %6670 to i32
  %6674 = add i32 1, %6673
  %6675 = zext i32 %6674 to i64
  store i64 %6675, i64* %RAX, align 8, !tbaa !2428
  %6676 = icmp ult i32 %6674, %6673
  %6677 = icmp ult i32 %6674, 1
  %6678 = or i1 %6676, %6677
  %6679 = zext i1 %6678 to i8
  %6680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6679, i8* %6680, align 1, !tbaa !2433
  %6681 = and i32 %6674, 255
  %6682 = call i32 @llvm.ctpop.i32(i32 %6681) #16
  %6683 = trunc i32 %6682 to i8
  %6684 = and i8 %6683, 1
  %6685 = xor i8 %6684, 1
  %6686 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6685, i8* %6686, align 1, !tbaa !2447
  %6687 = xor i64 1, %6670
  %6688 = trunc i64 %6687 to i32
  %6689 = xor i32 %6688, %6674
  %6690 = lshr i32 %6689, 4
  %6691 = trunc i32 %6690 to i8
  %6692 = and i8 %6691, 1
  %6693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6692, i8* %6693, align 1, !tbaa !2448
  %6694 = icmp eq i32 %6674, 0
  %6695 = zext i1 %6694 to i8
  %6696 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6695, i8* %6696, align 1, !tbaa !2449
  %6697 = lshr i32 %6674, 31
  %6698 = trunc i32 %6697 to i8
  %6699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6698, i8* %6699, align 1, !tbaa !2450
  %6700 = lshr i32 %6673, 31
  %6701 = xor i32 %6697, %6700
  %6702 = add nuw nsw i32 %6701, %6697
  %6703 = icmp eq i32 %6702, 2
  %6704 = zext i1 %6703 to i8
  %6705 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6704, i8* %6705, align 1, !tbaa !2451
  %6706 = load i64, i64* %RBP
  %6707 = sub i64 %6706, 8
  %6708 = load i32, i32* %EAX
  %6709 = zext i32 %6708 to i64
  %6710 = load i64, i64* %PC
  %6711 = add i64 %6710, 3
  store i64 %6711, i64* %PC
  %6712 = inttoptr i64 %6707 to i32*
  store i32 %6708, i32* %6712
  %6713 = load i64, i64* %PC
  %6714 = sub i64 %6713, 88
  %6715 = load i64, i64* %PC
  %6716 = add i64 %6715, 5
  store i64 %6716, i64* %PC
  %6717 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6714, i64* %6717, align 8, !tbaa !2428
  br label %block_400bf7

block_401157:                                     ; preds = %block_4010d6
  %6718 = load i64, i64* %RDI
  %6719 = load i32, i32* %EDI
  %6720 = zext i32 %6719 to i64
  %6721 = load i64, i64* %PC
  %6722 = add i64 %6721, 2
  store i64 %6722, i64* %PC
  %6723 = xor i64 %6720, %6718
  %6724 = trunc i64 %6723 to i32
  %6725 = and i64 %6723, 4294967295
  store i64 %6725, i64* %RDI, align 8, !tbaa !2428
  %6726 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6726, align 1, !tbaa !2433
  %6727 = and i32 %6724, 255
  %6728 = call i32 @llvm.ctpop.i32(i32 %6727) #16
  %6729 = trunc i32 %6728 to i8
  %6730 = and i8 %6729, 1
  %6731 = xor i8 %6730, 1
  %6732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6731, i8* %6732, align 1, !tbaa !2447
  %6733 = icmp eq i32 %6724, 0
  %6734 = zext i1 %6733 to i8
  %6735 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6734, i8* %6735, align 1, !tbaa !2449
  %6736 = lshr i32 %6724, 31
  %6737 = trunc i32 %6736 to i8
  %6738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6737, i8* %6738, align 1, !tbaa !2450
  %6739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6739, align 1, !tbaa !2451
  %6740 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6740, align 1, !tbaa !2448
  %6741 = load i64, i64* %PC
  %6742 = add i64 %6741, 11
  store i64 %6742, i64* %PC
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%class_type* @class to i64), i64 48) to i32*)
  %6743 = load i64, i64* %PC
  %6744 = add i64 %6743, 11
  store i64 %6744, i64* %PC
  store i32 73, i32* inttoptr (i64 add (i64 ptrtoint (%piecemax_type* @piecemax to i64), i64 48) to i32*)
  %6745 = load i64, i64* %PC
  %6746 = add i64 %6745, 11
  store i64 %6746, i64* %PC
  store i32 13, i32* bitcast (%piececount_type* @piececount to i32*)
  %6747 = load i64, i64* %PC
  %6748 = add i64 %6747, 11
  store i64 %6748, i64* %PC
  store i32 3, i32* inttoptr (i64 add (i64 ptrtoint (%piececount_type* @piececount to i64), i64 4) to i32*)
  %6749 = load i64, i64* %PC
  %6750 = add i64 %6749, 11
  store i64 %6750, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%piececount_type* @piececount to i64), i64 8) to i32*)
  %6751 = load i64, i64* %PC
  %6752 = add i64 %6751, 11
  store i64 %6752, i64* %PC
  store i32 1, i32* inttoptr (i64 add (i64 ptrtoint (%piececount_type* @piececount to i64), i64 12) to i32*)
  %6753 = load i64, i64* %RBP
  %6754 = sub i64 %6753, 16
  %6755 = load i64, i64* %PC
  %6756 = add i64 %6755, 7
  store i64 %6756, i64* %PC
  %6757 = inttoptr i64 %6754 to i32*
  store i32 73, i32* %6757
  %6758 = load i64, i64* %PC
  %6759 = add i64 %6758, 11
  store i64 %6759, i64* %PC
  store i32 0, i32* bitcast (%kount_type* @kount to i32*)
  %6760 = load i64, i64* %RBP
  %6761 = sub i64 %6760, 16
  %6762 = load i64, i64* %PC
  %6763 = add i64 %6762, 3
  store i64 %6763, i64* %PC
  %6764 = inttoptr i64 %6761 to i32*
  %6765 = load i32, i32* %6764
  %6766 = zext i32 %6765 to i64
  store i64 %6766, i64* %RSI, align 8, !tbaa !2428
  %6767 = load i64, i64* %PC
  %6768 = sub i64 %6767, 3168
  %6769 = load i64, i64* %PC
  %6770 = add i64 %6769, 5
  %6771 = load i64, i64* %PC
  %6772 = add i64 %6771, 5
  store i64 %6772, i64* %PC
  %6773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6774 = load i64, i64* %6773, align 8, !tbaa !2428
  %6775 = add i64 %6774, -8
  %6776 = inttoptr i64 %6775 to i64*
  store i64 %6770, i64* %6776
  store i64 %6775, i64* %6773, align 8, !tbaa !2428
  %6777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6768, i64* %6777, align 8, !tbaa !2428
  %6778 = load i64, i64* %PC
  %6779 = call %struct.Memory* @sub_400550_Fit_renamed_(%struct.State* %0, i64 %6778, %struct.Memory* %MEMORY.4)
  %6780 = load i32, i32* %EAX
  %6781 = zext i32 %6780 to i64
  %6782 = load i64, i64* %PC
  %6783 = add i64 %6782, 3
  store i64 %6783, i64* %PC
  %6784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6784, align 1, !tbaa !2433
  %6785 = and i32 %6780, 255
  %6786 = call i32 @llvm.ctpop.i32(i32 %6785) #16
  %6787 = trunc i32 %6786 to i8
  %6788 = and i8 %6787, 1
  %6789 = xor i8 %6788, 1
  %6790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6789, i8* %6790, align 1, !tbaa !2447
  %6791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6791, align 1, !tbaa !2448
  %6792 = icmp eq i32 %6780, 0
  %6793 = zext i1 %6792 to i8
  %6794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6793, i8* %6794, align 1, !tbaa !2449
  %6795 = lshr i32 %6780, 31
  %6796 = trunc i32 %6795 to i8
  %6797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6796, i8* %6797, align 1, !tbaa !2450
  %6798 = lshr i32 %6780, 31
  %6799 = xor i32 %6795, %6798
  %6800 = add nuw nsw i32 %6799, %6798
  %6801 = icmp eq i32 %6800, 2
  %6802 = zext i1 %6801 to i8
  %6803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6802, i8* %6803, align 1, !tbaa !2451
  %6804 = load i64, i64* %PC
  %6805 = add i64 %6804, 28
  %6806 = load i64, i64* %PC
  %6807 = add i64 %6806, 6
  %6808 = load i64, i64* %PC
  %6809 = add i64 %6808, 6
  store i64 %6809, i64* %PC
  %6810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6811 = load i8, i8* %6810, align 1, !tbaa !2449
  store i8 %6811, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %6812 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6813 = icmp ne i8 %6811, 0
  %6814 = select i1 %6813, i64 %6805, i64 %6807
  store i64 %6814, i64* %6812, align 8, !tbaa !2428
  %6815 = load i8, i8* %BRANCH_TAKEN
  %6816 = icmp eq i8 %6815, 1
  br i1 %6816, label %block_4011d4, label %block_4011be

block_400bf0:                                     ; preds = %block_400be6
  %6817 = load i64, i64* %RBP
  %6818 = sub i64 %6817, 8
  %6819 = load i64, i64* %PC
  %6820 = add i64 %6819, 7
  store i64 %6820, i64* %PC
  %6821 = inttoptr i64 %6818 to i32*
  store i32 0, i32* %6821
  br label %block_400bf7

block_40123b:                                     ; preds = %block_401216, %block_401227
  %MEMORY.40 = phi %struct.Memory* [ %461, %block_401216 ], [ %3009, %block_401227 ]
  %6822 = load i64, i64* %PC
  %6823 = add i64 %6822, 5
  %6824 = load i64, i64* %PC
  %6825 = add i64 %6824, 5
  store i64 %6825, i64* %PC
  %6826 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6823, i64* %6826, align 8, !tbaa !2428
  br label %block_401240

block_400a38:                                     ; preds = %block_400a2e
  %6827 = load i64, i64* %RBP
  %6828 = sub i64 %6827, 4
  %6829 = load i64, i64* %PC
  %6830 = add i64 %6829, 3
  store i64 %6830, i64* %PC
  %6831 = inttoptr i64 %6828 to i32*
  %6832 = load i32, i32* %6831
  %6833 = zext i32 %6832 to i64
  store i64 %6833, i64* %RAX, align 8, !tbaa !2428
  %6834 = load i64, i64* %RBP
  %6835 = sub i64 %6834, 8
  %6836 = load i64, i64* %PC
  %6837 = add i64 %6836, 3
  store i64 %6837, i64* %PC
  %6838 = inttoptr i64 %6835 to i32*
  %6839 = load i32, i32* %6838
  %6840 = zext i32 %6839 to i64
  store i64 %6840, i64* %RCX, align 8, !tbaa !2428
  %6841 = load i64, i64* %RBP
  %6842 = sub i64 %6841, 12
  %6843 = load i64, i64* %PC
  %6844 = add i64 %6843, 3
  store i64 %6844, i64* %PC
  %6845 = inttoptr i64 %6842 to i32*
  %6846 = load i32, i32* %6845
  %6847 = zext i32 %6846 to i64
  store i64 %6847, i64* %RDX, align 8, !tbaa !2428
  %6848 = load i64, i64* %RDX
  %6849 = load i64, i64* %PC
  %6850 = add i64 %6849, 3
  store i64 %6850, i64* %PC
  %6851 = and i64 %6848, 4294967295
  %6852 = shl i64 %6851, 2
  %6853 = trunc i64 %6852 to i32
  %6854 = icmp slt i32 %6853, 0
  %6855 = shl i32 %6853, 1
  %6856 = zext i32 %6855 to i64
  store i64 %6856, i64* %RDX, align 8, !tbaa !2428
  %6857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6858 = zext i1 %6854 to i8
  store i8 %6858, i8* %6857, align 1, !tbaa !2432
  %6859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6860 = and i32 %6855, 254
  %6861 = call i32 @llvm.ctpop.i32(i32 %6860) #16
  %6862 = trunc i32 %6861 to i8
  %6863 = and i8 %6862, 1
  %6864 = xor i8 %6863, 1
  store i8 %6864, i8* %6859, align 1, !tbaa !2432
  %6865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6865, align 1, !tbaa !2432
  %6866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6867 = icmp eq i32 %6855, 0
  %6868 = zext i1 %6867 to i8
  store i8 %6868, i8* %6866, align 1, !tbaa !2432
  %6869 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6870 = lshr i32 %6855, 31
  %6871 = trunc i32 %6870 to i8
  store i8 %6871, i8* %6869, align 1, !tbaa !2432
  %6872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6872, align 1, !tbaa !2432
  %6873 = load i64, i64* %RCX
  %6874 = load i32, i32* %EDX
  %6875 = zext i32 %6874 to i64
  %6876 = load i64, i64* %PC
  %6877 = add i64 %6876, 2
  store i64 %6877, i64* %PC
  %6878 = trunc i64 %6873 to i32
  %6879 = add i32 %6874, %6878
  %6880 = zext i32 %6879 to i64
  store i64 %6880, i64* %RCX, align 8, !tbaa !2428
  %6881 = icmp ult i32 %6879, %6878
  %6882 = icmp ult i32 %6879, %6874
  %6883 = or i1 %6881, %6882
  %6884 = zext i1 %6883 to i8
  %6885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6884, i8* %6885, align 1, !tbaa !2433
  %6886 = and i32 %6879, 255
  %6887 = call i32 @llvm.ctpop.i32(i32 %6886) #16
  %6888 = trunc i32 %6887 to i8
  %6889 = and i8 %6888, 1
  %6890 = xor i8 %6889, 1
  %6891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6890, i8* %6891, align 1, !tbaa !2447
  %6892 = xor i64 %6875, %6873
  %6893 = trunc i64 %6892 to i32
  %6894 = xor i32 %6893, %6879
  %6895 = lshr i32 %6894, 4
  %6896 = trunc i32 %6895 to i8
  %6897 = and i8 %6896, 1
  %6898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6897, i8* %6898, align 1, !tbaa !2448
  %6899 = icmp eq i32 %6879, 0
  %6900 = zext i1 %6899 to i8
  %6901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6900, i8* %6901, align 1, !tbaa !2449
  %6902 = lshr i32 %6879, 31
  %6903 = trunc i32 %6902 to i8
  %6904 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6903, i8* %6904, align 1, !tbaa !2450
  %6905 = lshr i32 %6878, 31
  %6906 = lshr i32 %6874, 31
  %6907 = xor i32 %6902, %6905
  %6908 = xor i32 %6902, %6906
  %6909 = add nuw nsw i32 %6907, %6908
  %6910 = icmp eq i32 %6909, 2
  %6911 = zext i1 %6910 to i8
  %6912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6911, i8* %6912, align 1, !tbaa !2451
  %6913 = load i64, i64* %RCX
  %6914 = load i64, i64* %PC
  %6915 = add i64 %6914, 3
  store i64 %6915, i64* %PC
  %6916 = and i64 %6913, 4294967295
  %6917 = shl i64 %6916, 2
  %6918 = trunc i64 %6917 to i32
  %6919 = icmp slt i32 %6918, 0
  %6920 = shl i32 %6918, 1
  %6921 = zext i32 %6920 to i64
  store i64 %6921, i64* %RCX, align 8, !tbaa !2428
  %6922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6923 = zext i1 %6919 to i8
  store i8 %6923, i8* %6922, align 1, !tbaa !2432
  %6924 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %6925 = and i32 %6920, 254
  %6926 = call i32 @llvm.ctpop.i32(i32 %6925) #16
  %6927 = trunc i32 %6926 to i8
  %6928 = and i8 %6927, 1
  %6929 = xor i8 %6928, 1
  store i8 %6929, i8* %6924, align 1, !tbaa !2432
  %6930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6930, align 1, !tbaa !2432
  %6931 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6932 = icmp eq i32 %6920, 0
  %6933 = zext i1 %6932 to i8
  store i8 %6933, i8* %6931, align 1, !tbaa !2432
  %6934 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6935 = lshr i32 %6920, 31
  %6936 = trunc i32 %6935 to i8
  store i8 %6936, i8* %6934, align 1, !tbaa !2432
  %6937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6937, align 1, !tbaa !2432
  %6938 = load i64, i64* %RAX
  %6939 = load i32, i32* %ECX
  %6940 = zext i32 %6939 to i64
  %6941 = load i64, i64* %PC
  %6942 = add i64 %6941, 2
  store i64 %6942, i64* %PC
  %6943 = trunc i64 %6938 to i32
  %6944 = add i32 %6939, %6943
  %6945 = zext i32 %6944 to i64
  store i64 %6945, i64* %RAX, align 8, !tbaa !2428
  %6946 = icmp ult i32 %6944, %6943
  %6947 = icmp ult i32 %6944, %6939
  %6948 = or i1 %6946, %6947
  %6949 = zext i1 %6948 to i8
  %6950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6949, i8* %6950, align 1, !tbaa !2433
  %6951 = and i32 %6944, 255
  %6952 = call i32 @llvm.ctpop.i32(i32 %6951) #16
  %6953 = trunc i32 %6952 to i8
  %6954 = and i8 %6953, 1
  %6955 = xor i8 %6954, 1
  %6956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6955, i8* %6956, align 1, !tbaa !2447
  %6957 = xor i64 %6940, %6938
  %6958 = trunc i64 %6957 to i32
  %6959 = xor i32 %6958, %6944
  %6960 = lshr i32 %6959, 4
  %6961 = trunc i32 %6960 to i8
  %6962 = and i8 %6961, 1
  %6963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6962, i8* %6963, align 1, !tbaa !2448
  %6964 = icmp eq i32 %6944, 0
  %6965 = zext i1 %6964 to i8
  %6966 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6965, i8* %6966, align 1, !tbaa !2449
  %6967 = lshr i32 %6944, 31
  %6968 = trunc i32 %6967 to i8
  %6969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6968, i8* %6969, align 1, !tbaa !2450
  %6970 = lshr i32 %6943, 31
  %6971 = lshr i32 %6939, 31
  %6972 = xor i32 %6967, %6970
  %6973 = xor i32 %6967, %6971
  %6974 = add nuw nsw i32 %6972, %6973
  %6975 = icmp eq i32 %6974, 2
  %6976 = zext i1 %6975 to i8
  %6977 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6976, i8* %6977, align 1, !tbaa !2451
  %6978 = load i32, i32* %EAX
  %6979 = zext i32 %6978 to i64
  %6980 = load i64, i64* %PC
  %6981 = add i64 %6980, 3
  store i64 %6981, i64* %PC
  %6982 = shl i64 %6979, 32
  %6983 = ashr exact i64 %6982, 32
  store i64 %6983, i64* %RSI, align 8, !tbaa !2428
  %6984 = load i64, i64* %RSI
  %6985 = mul i64 %6984, 4
  %6986 = add i64 %6985, add (i64 ptrtoint (%p_type* @p to i64), i64 2048)
  %6987 = load i64, i64* %PC
  %6988 = add i64 %6987, 11
  store i64 %6988, i64* %PC
  %6989 = inttoptr i64 %6986 to i32*
  store i32 1, i32* %6989
  %6990 = load i64, i64* %RBP
  %6991 = sub i64 %6990, 12
  %6992 = load i64, i64* %PC
  %6993 = add i64 %6992, 3
  store i64 %6993, i64* %PC
  %6994 = inttoptr i64 %6991 to i32*
  %6995 = load i32, i32* %6994
  %6996 = zext i32 %6995 to i64
  store i64 %6996, i64* %RAX, align 8, !tbaa !2428
  %6997 = load i64, i64* %RAX
  %6998 = load i64, i64* %PC
  %6999 = add i64 %6998, 3
  store i64 %6999, i64* %PC
  %7000 = trunc i64 %6997 to i32
  %7001 = add i32 1, %7000
  %7002 = zext i32 %7001 to i64
  store i64 %7002, i64* %RAX, align 8, !tbaa !2428
  %7003 = icmp ult i32 %7001, %7000
  %7004 = icmp ult i32 %7001, 1
  %7005 = or i1 %7003, %7004
  %7006 = zext i1 %7005 to i8
  %7007 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7006, i8* %7007, align 1, !tbaa !2433
  %7008 = and i32 %7001, 255
  %7009 = call i32 @llvm.ctpop.i32(i32 %7008) #16
  %7010 = trunc i32 %7009 to i8
  %7011 = and i8 %7010, 1
  %7012 = xor i8 %7011, 1
  %7013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7012, i8* %7013, align 1, !tbaa !2447
  %7014 = xor i64 1, %6997
  %7015 = trunc i64 %7014 to i32
  %7016 = xor i32 %7015, %7001
  %7017 = lshr i32 %7016, 4
  %7018 = trunc i32 %7017 to i8
  %7019 = and i8 %7018, 1
  %7020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7019, i8* %7020, align 1, !tbaa !2448
  %7021 = icmp eq i32 %7001, 0
  %7022 = zext i1 %7021 to i8
  %7023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7022, i8* %7023, align 1, !tbaa !2449
  %7024 = lshr i32 %7001, 31
  %7025 = trunc i32 %7024 to i8
  %7026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7025, i8* %7026, align 1, !tbaa !2450
  %7027 = lshr i32 %7000, 31
  %7028 = xor i32 %7024, %7027
  %7029 = add nuw nsw i32 %7028, %7024
  %7030 = icmp eq i32 %7029, 2
  %7031 = zext i1 %7030 to i8
  %7032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7031, i8* %7032, align 1, !tbaa !2451
  %7033 = load i64, i64* %RBP
  %7034 = sub i64 %7033, 12
  %7035 = load i32, i32* %EAX
  %7036 = zext i32 %7035 to i64
  %7037 = load i64, i64* %PC
  %7038 = add i64 %7037, 3
  store i64 %7038, i64* %PC
  %7039 = inttoptr i64 %7034 to i32*
  store i32 %7035, i32* %7039
  %7040 = load i64, i64* %PC
  %7041 = sub i64 %7040, 52
  %7042 = load i64, i64* %PC
  %7043 = add i64 %7042, 5
  store i64 %7043, i64* %PC
  %7044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7041, i64* %7044, align 8, !tbaa !2428
  br label %block_400a2e

block_400ab4:                                     ; preds = %block_400aaa
  %7045 = load i64, i64* %RBP
  %7046 = sub i64 %7045, 8
  %7047 = load i64, i64* %PC
  %7048 = add i64 %7047, 7
  store i64 %7048, i64* %PC
  %7049 = inttoptr i64 %7046 to i32*
  store i32 0, i32* %7049
  br label %block_400abb

block_40089b:                                     ; preds = %block_400891
  %7050 = load i64, i64* %RBP
  %7051 = sub i64 %7050, 12
  %7052 = load i64, i64* %PC
  %7053 = add i64 %7052, 7
  store i64 %7053, i64* %PC
  %7054 = inttoptr i64 %7051 to i32*
  store i32 1, i32* %7054
  br label %block_4008a2

block_401008:                                     ; preds = %block_400fab
  %7055 = load i64, i64* %PC
  %7056 = add i64 %7055, 5
  %7057 = load i64, i64* %PC
  %7058 = add i64 %7057, 5
  store i64 %7058, i64* %PC
  %7059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7056, i64* %7059, align 8, !tbaa !2428
  %7060 = load i64, i64* %RBP
  %7061 = sub i64 %7060, 4
  %7062 = load i64, i64* %PC
  %7063 = add i64 %7062, 3
  store i64 %7063, i64* %PC
  %7064 = inttoptr i64 %7061 to i32*
  %7065 = load i32, i32* %7064
  %7066 = zext i32 %7065 to i64
  store i64 %7066, i64* %RAX, align 8, !tbaa !2428
  %7067 = load i64, i64* %RAX
  %7068 = load i64, i64* %PC
  %7069 = add i64 %7068, 3
  store i64 %7069, i64* %PC
  %7070 = trunc i64 %7067 to i32
  %7071 = add i32 1, %7070
  %7072 = zext i32 %7071 to i64
  store i64 %7072, i64* %RAX, align 8, !tbaa !2428
  %7073 = icmp ult i32 %7071, %7070
  %7074 = icmp ult i32 %7071, 1
  %7075 = or i1 %7073, %7074
  %7076 = zext i1 %7075 to i8
  %7077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7076, i8* %7077, align 1, !tbaa !2433
  %7078 = and i32 %7071, 255
  %7079 = call i32 @llvm.ctpop.i32(i32 %7078) #16
  %7080 = trunc i32 %7079 to i8
  %7081 = and i8 %7080, 1
  %7082 = xor i8 %7081, 1
  %7083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7082, i8* %7083, align 1, !tbaa !2447
  %7084 = xor i64 1, %7067
  %7085 = trunc i64 %7084 to i32
  %7086 = xor i32 %7085, %7071
  %7087 = lshr i32 %7086, 4
  %7088 = trunc i32 %7087 to i8
  %7089 = and i8 %7088, 1
  %7090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7089, i8* %7090, align 1, !tbaa !2448
  %7091 = icmp eq i32 %7071, 0
  %7092 = zext i1 %7091 to i8
  %7093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7092, i8* %7093, align 1, !tbaa !2449
  %7094 = lshr i32 %7071, 31
  %7095 = trunc i32 %7094 to i8
  %7096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7095, i8* %7096, align 1, !tbaa !2450
  %7097 = lshr i32 %7070, 31
  %7098 = xor i32 %7094, %7097
  %7099 = add nuw nsw i32 %7098, %7094
  %7100 = icmp eq i32 %7099, 2
  %7101 = zext i1 %7100 to i8
  %7102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7101, i8* %7102, align 1, !tbaa !2451
  %7103 = load i64, i64* %RBP
  %7104 = sub i64 %7103, 4
  %7105 = load i32, i32* %EAX
  %7106 = zext i32 %7105 to i64
  %7107 = load i64, i64* %PC
  %7108 = add i64 %7107, 3
  store i64 %7108, i64* %PC
  %7109 = inttoptr i64 %7104 to i32*
  store i32 %7105, i32* %7109
  %7110 = load i64, i64* %PC
  %7111 = sub i64 %7110, 124
  %7112 = load i64, i64* %PC
  %7113 = add i64 %7112, 5
  store i64 %7113, i64* %PC
  %7114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7111, i64* %7114, align 8, !tbaa !2428
  br label %block_400f9a

block_400fc6:                                     ; preds = %block_400fbc
  %7115 = load i64, i64* %RBP
  %7116 = sub i64 %7115, 4
  %7117 = load i64, i64* %PC
  %7118 = add i64 %7117, 3
  store i64 %7118, i64* %PC
  %7119 = inttoptr i64 %7116 to i32*
  %7120 = load i32, i32* %7119
  %7121 = zext i32 %7120 to i64
  store i64 %7121, i64* %RAX, align 8, !tbaa !2428
  %7122 = load i64, i64* %RBP
  %7123 = sub i64 %7122, 8
  %7124 = load i64, i64* %PC
  %7125 = add i64 %7124, 3
  store i64 %7125, i64* %PC
  %7126 = inttoptr i64 %7123 to i32*
  %7127 = load i32, i32* %7126
  %7128 = zext i32 %7127 to i64
  store i64 %7128, i64* %RCX, align 8, !tbaa !2428
  %7129 = load i64, i64* %RBP
  %7130 = sub i64 %7129, 12
  %7131 = load i64, i64* %PC
  %7132 = add i64 %7131, 3
  store i64 %7132, i64* %PC
  %7133 = inttoptr i64 %7130 to i32*
  %7134 = load i32, i32* %7133
  %7135 = zext i32 %7134 to i64
  store i64 %7135, i64* %RDX, align 8, !tbaa !2428
  %7136 = load i64, i64* %RDX
  %7137 = load i64, i64* %PC
  %7138 = add i64 %7137, 3
  store i64 %7138, i64* %PC
  %7139 = and i64 %7136, 4294967295
  %7140 = shl i64 %7139, 2
  %7141 = trunc i64 %7140 to i32
  %7142 = icmp slt i32 %7141, 0
  %7143 = shl i32 %7141, 1
  %7144 = zext i32 %7143 to i64
  store i64 %7144, i64* %RDX, align 8, !tbaa !2428
  %7145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7146 = zext i1 %7142 to i8
  store i8 %7146, i8* %7145, align 1, !tbaa !2432
  %7147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7148 = and i32 %7143, 254
  %7149 = call i32 @llvm.ctpop.i32(i32 %7148) #16
  %7150 = trunc i32 %7149 to i8
  %7151 = and i8 %7150, 1
  %7152 = xor i8 %7151, 1
  store i8 %7152, i8* %7147, align 1, !tbaa !2432
  %7153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7153, align 1, !tbaa !2432
  %7154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7155 = icmp eq i32 %7143, 0
  %7156 = zext i1 %7155 to i8
  store i8 %7156, i8* %7154, align 1, !tbaa !2432
  %7157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7158 = lshr i32 %7143, 31
  %7159 = trunc i32 %7158 to i8
  store i8 %7159, i8* %7157, align 1, !tbaa !2432
  %7160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7160, align 1, !tbaa !2432
  %7161 = load i64, i64* %RCX
  %7162 = load i32, i32* %EDX
  %7163 = zext i32 %7162 to i64
  %7164 = load i64, i64* %PC
  %7165 = add i64 %7164, 2
  store i64 %7165, i64* %PC
  %7166 = trunc i64 %7161 to i32
  %7167 = add i32 %7162, %7166
  %7168 = zext i32 %7167 to i64
  store i64 %7168, i64* %RCX, align 8, !tbaa !2428
  %7169 = icmp ult i32 %7167, %7166
  %7170 = icmp ult i32 %7167, %7162
  %7171 = or i1 %7169, %7170
  %7172 = zext i1 %7171 to i8
  %7173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7172, i8* %7173, align 1, !tbaa !2433
  %7174 = and i32 %7167, 255
  %7175 = call i32 @llvm.ctpop.i32(i32 %7174) #16
  %7176 = trunc i32 %7175 to i8
  %7177 = and i8 %7176, 1
  %7178 = xor i8 %7177, 1
  %7179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7178, i8* %7179, align 1, !tbaa !2447
  %7180 = xor i64 %7163, %7161
  %7181 = trunc i64 %7180 to i32
  %7182 = xor i32 %7181, %7167
  %7183 = lshr i32 %7182, 4
  %7184 = trunc i32 %7183 to i8
  %7185 = and i8 %7184, 1
  %7186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7185, i8* %7186, align 1, !tbaa !2448
  %7187 = icmp eq i32 %7167, 0
  %7188 = zext i1 %7187 to i8
  %7189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7188, i8* %7189, align 1, !tbaa !2449
  %7190 = lshr i32 %7167, 31
  %7191 = trunc i32 %7190 to i8
  %7192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7191, i8* %7192, align 1, !tbaa !2450
  %7193 = lshr i32 %7166, 31
  %7194 = lshr i32 %7162, 31
  %7195 = xor i32 %7190, %7193
  %7196 = xor i32 %7190, %7194
  %7197 = add nuw nsw i32 %7195, %7196
  %7198 = icmp eq i32 %7197, 2
  %7199 = zext i1 %7198 to i8
  %7200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7199, i8* %7200, align 1, !tbaa !2451
  %7201 = load i64, i64* %RCX
  %7202 = load i64, i64* %PC
  %7203 = add i64 %7202, 3
  store i64 %7203, i64* %PC
  %7204 = and i64 %7201, 4294967295
  %7205 = shl i64 %7204, 2
  %7206 = trunc i64 %7205 to i32
  %7207 = icmp slt i32 %7206, 0
  %7208 = shl i32 %7206, 1
  %7209 = zext i32 %7208 to i64
  store i64 %7209, i64* %RCX, align 8, !tbaa !2428
  %7210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7211 = zext i1 %7207 to i8
  store i8 %7211, i8* %7210, align 1, !tbaa !2432
  %7212 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7213 = and i32 %7208, 254
  %7214 = call i32 @llvm.ctpop.i32(i32 %7213) #16
  %7215 = trunc i32 %7214 to i8
  %7216 = and i8 %7215, 1
  %7217 = xor i8 %7216, 1
  store i8 %7217, i8* %7212, align 1, !tbaa !2432
  %7218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7218, align 1, !tbaa !2432
  %7219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7220 = icmp eq i32 %7208, 0
  %7221 = zext i1 %7220 to i8
  store i8 %7221, i8* %7219, align 1, !tbaa !2432
  %7222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7223 = lshr i32 %7208, 31
  %7224 = trunc i32 %7223 to i8
  store i8 %7224, i8* %7222, align 1, !tbaa !2432
  %7225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7225, align 1, !tbaa !2432
  %7226 = load i64, i64* %RAX
  %7227 = load i32, i32* %ECX
  %7228 = zext i32 %7227 to i64
  %7229 = load i64, i64* %PC
  %7230 = add i64 %7229, 2
  store i64 %7230, i64* %PC
  %7231 = trunc i64 %7226 to i32
  %7232 = add i32 %7227, %7231
  %7233 = zext i32 %7232 to i64
  store i64 %7233, i64* %RAX, align 8, !tbaa !2428
  %7234 = icmp ult i32 %7232, %7231
  %7235 = icmp ult i32 %7232, %7227
  %7236 = or i1 %7234, %7235
  %7237 = zext i1 %7236 to i8
  %7238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7237, i8* %7238, align 1, !tbaa !2433
  %7239 = and i32 %7232, 255
  %7240 = call i32 @llvm.ctpop.i32(i32 %7239) #16
  %7241 = trunc i32 %7240 to i8
  %7242 = and i8 %7241, 1
  %7243 = xor i8 %7242, 1
  %7244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7243, i8* %7244, align 1, !tbaa !2447
  %7245 = xor i64 %7228, %7226
  %7246 = trunc i64 %7245 to i32
  %7247 = xor i32 %7246, %7232
  %7248 = lshr i32 %7247, 4
  %7249 = trunc i32 %7248 to i8
  %7250 = and i8 %7249, 1
  %7251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7250, i8* %7251, align 1, !tbaa !2448
  %7252 = icmp eq i32 %7232, 0
  %7253 = zext i1 %7252 to i8
  %7254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7253, i8* %7254, align 1, !tbaa !2449
  %7255 = lshr i32 %7232, 31
  %7256 = trunc i32 %7255 to i8
  %7257 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7256, i8* %7257, align 1, !tbaa !2450
  %7258 = lshr i32 %7231, 31
  %7259 = lshr i32 %7227, 31
  %7260 = xor i32 %7255, %7258
  %7261 = xor i32 %7255, %7259
  %7262 = add nuw nsw i32 %7260, %7261
  %7263 = icmp eq i32 %7262, 2
  %7264 = zext i1 %7263 to i8
  %7265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7264, i8* %7265, align 1, !tbaa !2451
  %7266 = load i32, i32* %EAX
  %7267 = zext i32 %7266 to i64
  %7268 = load i64, i64* %PC
  %7269 = add i64 %7268, 3
  store i64 %7269, i64* %PC
  %7270 = shl i64 %7267, 32
  %7271 = ashr exact i64 %7270, 32
  store i64 %7271, i64* %RSI, align 8, !tbaa !2428
  %7272 = load i64, i64* %RSI
  %7273 = mul i64 %7272, 4
  %7274 = add i64 %7273, add (i64 ptrtoint (%p_type* @p to i64), i64 20480)
  %7275 = load i64, i64* %PC
  %7276 = add i64 %7275, 11
  store i64 %7276, i64* %PC
  %7277 = inttoptr i64 %7274 to i32*
  store i32 1, i32* %7277
  %7278 = load i64, i64* %RBP
  %7279 = sub i64 %7278, 12
  %7280 = load i64, i64* %PC
  %7281 = add i64 %7280, 3
  store i64 %7281, i64* %PC
  %7282 = inttoptr i64 %7279 to i32*
  %7283 = load i32, i32* %7282
  %7284 = zext i32 %7283 to i64
  store i64 %7284, i64* %RAX, align 8, !tbaa !2428
  %7285 = load i64, i64* %RAX
  %7286 = load i64, i64* %PC
  %7287 = add i64 %7286, 3
  store i64 %7287, i64* %PC
  %7288 = trunc i64 %7285 to i32
  %7289 = add i32 1, %7288
  %7290 = zext i32 %7289 to i64
  store i64 %7290, i64* %RAX, align 8, !tbaa !2428
  %7291 = icmp ult i32 %7289, %7288
  %7292 = icmp ult i32 %7289, 1
  %7293 = or i1 %7291, %7292
  %7294 = zext i1 %7293 to i8
  %7295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7294, i8* %7295, align 1, !tbaa !2433
  %7296 = and i32 %7289, 255
  %7297 = call i32 @llvm.ctpop.i32(i32 %7296) #16
  %7298 = trunc i32 %7297 to i8
  %7299 = and i8 %7298, 1
  %7300 = xor i8 %7299, 1
  %7301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7300, i8* %7301, align 1, !tbaa !2447
  %7302 = xor i64 1, %7285
  %7303 = trunc i64 %7302 to i32
  %7304 = xor i32 %7303, %7289
  %7305 = lshr i32 %7304, 4
  %7306 = trunc i32 %7305 to i8
  %7307 = and i8 %7306, 1
  %7308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7307, i8* %7308, align 1, !tbaa !2448
  %7309 = icmp eq i32 %7289, 0
  %7310 = zext i1 %7309 to i8
  %7311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7310, i8* %7311, align 1, !tbaa !2449
  %7312 = lshr i32 %7289, 31
  %7313 = trunc i32 %7312 to i8
  %7314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7313, i8* %7314, align 1, !tbaa !2450
  %7315 = lshr i32 %7288, 31
  %7316 = xor i32 %7312, %7315
  %7317 = add nuw nsw i32 %7316, %7312
  %7318 = icmp eq i32 %7317, 2
  %7319 = zext i1 %7318 to i8
  %7320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7319, i8* %7320, align 1, !tbaa !2451
  %7321 = load i64, i64* %RBP
  %7322 = sub i64 %7321, 12
  %7323 = load i32, i32* %EAX
  %7324 = zext i32 %7323 to i64
  %7325 = load i64, i64* %PC
  %7326 = add i64 %7325, 3
  store i64 %7326, i64* %PC
  %7327 = inttoptr i64 %7322 to i32*
  store i32 %7323, i32* %7327
  %7328 = load i64, i64* %PC
  %7329 = sub i64 %7328, 52
  %7330 = load i64, i64* %PC
  %7331 = add i64 %7330, 5
  store i64 %7331, i64* %PC
  %7332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7329, i64* %7332, align 8, !tbaa !2428
  br label %block_400fbc

block_400a2e:                                     ; preds = %block_400a27, %block_400a38
  %MEMORY.41 = phi %struct.Memory* [ %MEMORY.43, %block_400a27 ], [ %MEMORY.41, %block_400a38 ]
  %7333 = load i64, i64* %RBP
  %7334 = sub i64 %7333, 12
  %7335 = load i64, i64* %PC
  %7336 = add i64 %7335, 4
  store i64 %7336, i64* %PC
  %7337 = inttoptr i64 %7334 to i32*
  %7338 = load i32, i32* %7337
  %7339 = sub i32 %7338, 3
  %7340 = icmp ult i32 %7338, 3
  %7341 = zext i1 %7340 to i8
  %7342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7341, i8* %7342, align 1, !tbaa !2433
  %7343 = and i32 %7339, 255
  %7344 = call i32 @llvm.ctpop.i32(i32 %7343) #16
  %7345 = trunc i32 %7344 to i8
  %7346 = and i8 %7345, 1
  %7347 = xor i8 %7346, 1
  %7348 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7347, i8* %7348, align 1, !tbaa !2447
  %7349 = xor i32 %7338, 3
  %7350 = xor i32 %7349, %7339
  %7351 = lshr i32 %7350, 4
  %7352 = trunc i32 %7351 to i8
  %7353 = and i8 %7352, 1
  %7354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7353, i8* %7354, align 1, !tbaa !2448
  %7355 = icmp eq i32 %7339, 0
  %7356 = zext i1 %7355 to i8
  %7357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7356, i8* %7357, align 1, !tbaa !2449
  %7358 = lshr i32 %7339, 31
  %7359 = trunc i32 %7358 to i8
  %7360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7359, i8* %7360, align 1, !tbaa !2450
  %7361 = lshr i32 %7338, 31
  %7362 = xor i32 %7358, %7361
  %7363 = add nuw nsw i32 %7362, %7361
  %7364 = icmp eq i32 %7363, 2
  %7365 = zext i1 %7364 to i8
  %7366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7365, i8* %7366, align 1, !tbaa !2451
  %7367 = load i64, i64* %PC
  %7368 = add i64 %7367, 53
  %7369 = load i64, i64* %PC
  %7370 = add i64 %7369, 6
  %7371 = load i64, i64* %PC
  %7372 = add i64 %7371, 6
  store i64 %7372, i64* %PC
  %7373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7374 = load i8, i8* %7373, align 1, !tbaa !2449
  %7375 = icmp eq i8 %7374, 0
  %7376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7377 = load i8, i8* %7376, align 1, !tbaa !2450
  %7378 = icmp ne i8 %7377, 0
  %7379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7380 = load i8, i8* %7379, align 1, !tbaa !2451
  %7381 = icmp ne i8 %7380, 0
  %7382 = xor i1 %7378, %7381
  %7383 = xor i1 %7382, true
  %7384 = and i1 %7375, %7383
  %7385 = zext i1 %7384 to i8
  store i8 %7385, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %7386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7387 = select i1 %7384, i64 %7368, i64 %7370
  store i64 %7387, i64* %7386, align 8, !tbaa !2428
  %7388 = load i8, i8* %BRANCH_TAKEN
  %7389 = icmp eq i8 %7388, 1
  br i1 %7389, label %block_400a67, label %block_400a38

block_400a27:                                     ; preds = %block_400a1d
  %7390 = load i64, i64* %RBP
  %7391 = sub i64 %7390, 12
  %7392 = load i64, i64* %PC
  %7393 = add i64 %7392, 7
  store i64 %7393, i64* %PC
  %7394 = inttoptr i64 %7391 to i32*
  store i32 0, i32* %7394
  br label %block_400a2e

block_400dd1:                                     ; preds = %block_400e1b, %block_400dca
  %MEMORY.42 = phi %struct.Memory* [ %MEMORY.18, %block_400dca ], [ %MEMORY.19, %block_400e1b ]
  %7395 = load i64, i64* %RBP
  %7396 = sub i64 %7395, 8
  %7397 = load i64, i64* %PC
  %7398 = add i64 %7397, 4
  store i64 %7398, i64* %PC
  %7399 = inttoptr i64 %7396 to i32*
  %7400 = load i32, i32* %7399
  %7401 = sub i32 %7400, 2
  %7402 = icmp ult i32 %7400, 2
  %7403 = zext i1 %7402 to i8
  %7404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7403, i8* %7404, align 1, !tbaa !2433
  %7405 = and i32 %7401, 255
  %7406 = call i32 @llvm.ctpop.i32(i32 %7405) #16
  %7407 = trunc i32 %7406 to i8
  %7408 = and i8 %7407, 1
  %7409 = xor i8 %7408, 1
  %7410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7409, i8* %7410, align 1, !tbaa !2447
  %7411 = xor i32 %7400, 2
  %7412 = xor i32 %7411, %7401
  %7413 = lshr i32 %7412, 4
  %7414 = trunc i32 %7413 to i8
  %7415 = and i8 %7414, 1
  %7416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7415, i8* %7416, align 1, !tbaa !2448
  %7417 = icmp eq i32 %7401, 0
  %7418 = zext i1 %7417 to i8
  %7419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7418, i8* %7419, align 1, !tbaa !2449
  %7420 = lshr i32 %7401, 31
  %7421 = trunc i32 %7420 to i8
  %7422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7421, i8* %7422, align 1, !tbaa !2450
  %7423 = lshr i32 %7400, 31
  %7424 = xor i32 %7420, %7423
  %7425 = add nuw nsw i32 %7424, %7423
  %7426 = icmp eq i32 %7425, 2
  %7427 = zext i1 %7426 to i8
  %7428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7427, i8* %7428, align 1, !tbaa !2451
  %7429 = load i64, i64* %PC
  %7430 = add i64 %7429, 89
  %7431 = load i64, i64* %PC
  %7432 = add i64 %7431, 6
  %7433 = load i64, i64* %PC
  %7434 = add i64 %7433, 6
  store i64 %7434, i64* %PC
  %7435 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7436 = load i8, i8* %7435, align 1, !tbaa !2449
  %7437 = icmp eq i8 %7436, 0
  %7438 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7439 = load i8, i8* %7438, align 1, !tbaa !2450
  %7440 = icmp ne i8 %7439, 0
  %7441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7442 = load i8, i8* %7441, align 1, !tbaa !2451
  %7443 = icmp ne i8 %7442, 0
  %7444 = xor i1 %7440, %7443
  %7445 = xor i1 %7444, true
  %7446 = and i1 %7437, %7445
  %7447 = zext i1 %7446 to i8
  store i8 %7447, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %7448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7449 = select i1 %7446, i64 %7430, i64 %7432
  store i64 %7449, i64* %7448, align 8, !tbaa !2428
  %7450 = load i8, i8* %BRANCH_TAKEN
  %7451 = icmp eq i8 %7450, 1
  br i1 %7451, label %block_400e2e, label %block_400ddb

block_400b05:                                     ; preds = %block_400acc
  %7452 = load i64, i64* %PC
  %7453 = add i64 %7452, 5
  %7454 = load i64, i64* %PC
  %7455 = add i64 %7454, 5
  store i64 %7455, i64* %PC
  %7456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7453, i64* %7456, align 8, !tbaa !2428
  %7457 = load i64, i64* %RBP
  %7458 = sub i64 %7457, 8
  %7459 = load i64, i64* %PC
  %7460 = add i64 %7459, 3
  store i64 %7460, i64* %PC
  %7461 = inttoptr i64 %7458 to i32*
  %7462 = load i32, i32* %7461
  %7463 = zext i32 %7462 to i64
  store i64 %7463, i64* %RAX, align 8, !tbaa !2428
  %7464 = load i64, i64* %RAX
  %7465 = load i64, i64* %PC
  %7466 = add i64 %7465, 3
  store i64 %7466, i64* %PC
  %7467 = trunc i64 %7464 to i32
  %7468 = add i32 1, %7467
  %7469 = zext i32 %7468 to i64
  store i64 %7469, i64* %RAX, align 8, !tbaa !2428
  %7470 = icmp ult i32 %7468, %7467
  %7471 = icmp ult i32 %7468, 1
  %7472 = or i1 %7470, %7471
  %7473 = zext i1 %7472 to i8
  %7474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7473, i8* %7474, align 1, !tbaa !2433
  %7475 = and i32 %7468, 255
  %7476 = call i32 @llvm.ctpop.i32(i32 %7475) #16
  %7477 = trunc i32 %7476 to i8
  %7478 = and i8 %7477, 1
  %7479 = xor i8 %7478, 1
  %7480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7479, i8* %7480, align 1, !tbaa !2447
  %7481 = xor i64 1, %7464
  %7482 = trunc i64 %7481 to i32
  %7483 = xor i32 %7482, %7468
  %7484 = lshr i32 %7483, 4
  %7485 = trunc i32 %7484 to i8
  %7486 = and i8 %7485, 1
  %7487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7486, i8* %7487, align 1, !tbaa !2448
  %7488 = icmp eq i32 %7468, 0
  %7489 = zext i1 %7488 to i8
  %7490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7489, i8* %7490, align 1, !tbaa !2449
  %7491 = lshr i32 %7468, 31
  %7492 = trunc i32 %7491 to i8
  %7493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7492, i8* %7493, align 1, !tbaa !2450
  %7494 = lshr i32 %7467, 31
  %7495 = xor i32 %7491, %7494
  %7496 = add nuw nsw i32 %7495, %7491
  %7497 = icmp eq i32 %7496, 2
  %7498 = zext i1 %7497 to i8
  %7499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7498, i8* %7499, align 1, !tbaa !2451
  %7500 = load i64, i64* %RBP
  %7501 = sub i64 %7500, 8
  %7502 = load i32, i32* %EAX
  %7503 = zext i32 %7502 to i64
  %7504 = load i64, i64* %PC
  %7505 = add i64 %7504, 3
  store i64 %7505, i64* %PC
  %7506 = inttoptr i64 %7501 to i32*
  store i32 %7502, i32* %7506
  %7507 = load i64, i64* %PC
  %7508 = sub i64 %7507, 88
  %7509 = load i64, i64* %PC
  %7510 = add i64 %7509, 5
  store i64 %7510, i64* %PC
  %7511 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7508, i64* %7511, align 8, !tbaa !2428
  br label %block_400abb

block_400fb5:                                     ; preds = %block_400fab
  %7512 = load i64, i64* %RBP
  %7513 = sub i64 %7512, 12
  %7514 = load i64, i64* %PC
  %7515 = add i64 %7514, 7
  store i64 %7515, i64* %PC
  %7516 = inttoptr i64 %7513 to i32*
  store i32 0, i32* %7516
  br label %block_400fbc

block_400a1d:                                     ; preds = %block_400a16, %block_400a67
  %MEMORY.43 = phi %struct.Memory* [ %MEMORY.46, %block_400a16 ], [ %MEMORY.41, %block_400a67 ]
  %7517 = load i64, i64* %RBP
  %7518 = sub i64 %7517, 8
  %7519 = load i64, i64* %PC
  %7520 = add i64 %7519, 4
  store i64 %7520, i64* %PC
  %7521 = inttoptr i64 %7518 to i32*
  %7522 = load i32, i32* %7521
  %7523 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %7523, align 1, !tbaa !2433
  %7524 = and i32 %7522, 255
  %7525 = call i32 @llvm.ctpop.i32(i32 %7524) #16
  %7526 = trunc i32 %7525 to i8
  %7527 = and i8 %7526, 1
  %7528 = xor i8 %7527, 1
  %7529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7528, i8* %7529, align 1, !tbaa !2447
  %7530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7530, align 1, !tbaa !2448
  %7531 = icmp eq i32 %7522, 0
  %7532 = zext i1 %7531 to i8
  %7533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7532, i8* %7533, align 1, !tbaa !2449
  %7534 = lshr i32 %7522, 31
  %7535 = trunc i32 %7534 to i8
  %7536 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7535, i8* %7536, align 1, !tbaa !2450
  %7537 = lshr i32 %7522, 31
  %7538 = xor i32 %7534, %7537
  %7539 = add nuw nsw i32 %7538, %7537
  %7540 = icmp eq i32 %7539, 2
  %7541 = zext i1 %7540 to i8
  %7542 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7541, i8* %7542, align 1, !tbaa !2451
  %7543 = load i64, i64* %PC
  %7544 = add i64 %7543, 89
  %7545 = load i64, i64* %PC
  %7546 = add i64 %7545, 6
  %7547 = load i64, i64* %PC
  %7548 = add i64 %7547, 6
  store i64 %7548, i64* %PC
  %7549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7550 = load i8, i8* %7549, align 1, !tbaa !2449
  %7551 = icmp eq i8 %7550, 0
  %7552 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7553 = load i8, i8* %7552, align 1, !tbaa !2450
  %7554 = icmp ne i8 %7553, 0
  %7555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7556 = load i8, i8* %7555, align 1, !tbaa !2451
  %7557 = icmp ne i8 %7556, 0
  %7558 = xor i1 %7554, %7557
  %7559 = xor i1 %7558, true
  %7560 = and i1 %7551, %7559
  %7561 = zext i1 %7560 to i8
  store i8 %7561, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %7562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7563 = select i1 %7560, i64 %7544, i64 %7546
  store i64 %7563, i64* %7562, align 8, !tbaa !2428
  %7564 = load i8, i8* %BRANCH_TAKEN
  %7565 = icmp eq i8 %7564, 1
  br i1 %7565, label %block_400a7a, label %block_400a27

block_4010e7:                                     ; preds = %block_401131, %block_4010e0
  %MEMORY.44 = phi %struct.Memory* [ %MEMORY.4, %block_4010e0 ], [ %MEMORY.16, %block_401131 ]
  %7566 = load i64, i64* %RBP
  %7567 = sub i64 %7566, 8
  %7568 = load i64, i64* %PC
  %7569 = add i64 %7568, 4
  store i64 %7569, i64* %PC
  %7570 = inttoptr i64 %7567 to i32*
  %7571 = load i32, i32* %7570
  %7572 = sub i32 %7571, 1
  %7573 = icmp ult i32 %7571, 1
  %7574 = zext i1 %7573 to i8
  %7575 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7574, i8* %7575, align 1, !tbaa !2433
  %7576 = and i32 %7572, 255
  %7577 = call i32 @llvm.ctpop.i32(i32 %7576) #16
  %7578 = trunc i32 %7577 to i8
  %7579 = and i8 %7578, 1
  %7580 = xor i8 %7579, 1
  %7581 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7580, i8* %7581, align 1, !tbaa !2447
  %7582 = xor i32 %7571, 1
  %7583 = xor i32 %7582, %7572
  %7584 = lshr i32 %7583, 4
  %7585 = trunc i32 %7584 to i8
  %7586 = and i8 %7585, 1
  %7587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7586, i8* %7587, align 1, !tbaa !2448
  %7588 = icmp eq i32 %7572, 0
  %7589 = zext i1 %7588 to i8
  %7590 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7589, i8* %7590, align 1, !tbaa !2449
  %7591 = lshr i32 %7572, 31
  %7592 = trunc i32 %7591 to i8
  %7593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7592, i8* %7593, align 1, !tbaa !2450
  %7594 = lshr i32 %7571, 31
  %7595 = xor i32 %7591, %7594
  %7596 = add nuw nsw i32 %7595, %7594
  %7597 = icmp eq i32 %7596, 2
  %7598 = zext i1 %7597 to i8
  %7599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7598, i8* %7599, align 1, !tbaa !2451
  %7600 = load i64, i64* %PC
  %7601 = add i64 %7600, 89
  %7602 = load i64, i64* %PC
  %7603 = add i64 %7602, 6
  %7604 = load i64, i64* %PC
  %7605 = add i64 %7604, 6
  store i64 %7605, i64* %PC
  %7606 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7607 = load i8, i8* %7606, align 1, !tbaa !2449
  %7608 = icmp eq i8 %7607, 0
  %7609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7610 = load i8, i8* %7609, align 1, !tbaa !2450
  %7611 = icmp ne i8 %7610, 0
  %7612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7613 = load i8, i8* %7612, align 1, !tbaa !2451
  %7614 = icmp ne i8 %7613, 0
  %7615 = xor i1 %7611, %7614
  %7616 = xor i1 %7615, true
  %7617 = and i1 %7608, %7616
  %7618 = zext i1 %7617 to i8
  store i8 %7618, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %7619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7620 = select i1 %7617, i64 %7601, i64 %7603
  store i64 %7620, i64* %7619, align 8, !tbaa !2428
  %7621 = load i8, i8* %BRANCH_TAKEN
  %7622 = icmp eq i8 %7621, 1
  br i1 %7622, label %block_401144, label %block_4010f1

block_400e1b:                                     ; preds = %block_400de2
  %7623 = load i64, i64* %PC
  %7624 = add i64 %7623, 5
  %7625 = load i64, i64* %PC
  %7626 = add i64 %7625, 5
  store i64 %7626, i64* %PC
  %7627 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7624, i64* %7627, align 8, !tbaa !2428
  %7628 = load i64, i64* %RBP
  %7629 = sub i64 %7628, 8
  %7630 = load i64, i64* %PC
  %7631 = add i64 %7630, 3
  store i64 %7631, i64* %PC
  %7632 = inttoptr i64 %7629 to i32*
  %7633 = load i32, i32* %7632
  %7634 = zext i32 %7633 to i64
  store i64 %7634, i64* %RAX, align 8, !tbaa !2428
  %7635 = load i64, i64* %RAX
  %7636 = load i64, i64* %PC
  %7637 = add i64 %7636, 3
  store i64 %7637, i64* %PC
  %7638 = trunc i64 %7635 to i32
  %7639 = add i32 1, %7638
  %7640 = zext i32 %7639 to i64
  store i64 %7640, i64* %RAX, align 8, !tbaa !2428
  %7641 = icmp ult i32 %7639, %7638
  %7642 = icmp ult i32 %7639, 1
  %7643 = or i1 %7641, %7642
  %7644 = zext i1 %7643 to i8
  %7645 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7644, i8* %7645, align 1, !tbaa !2433
  %7646 = and i32 %7639, 255
  %7647 = call i32 @llvm.ctpop.i32(i32 %7646) #16
  %7648 = trunc i32 %7647 to i8
  %7649 = and i8 %7648, 1
  %7650 = xor i8 %7649, 1
  %7651 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7650, i8* %7651, align 1, !tbaa !2447
  %7652 = xor i64 1, %7635
  %7653 = trunc i64 %7652 to i32
  %7654 = xor i32 %7653, %7639
  %7655 = lshr i32 %7654, 4
  %7656 = trunc i32 %7655 to i8
  %7657 = and i8 %7656, 1
  %7658 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7657, i8* %7658, align 1, !tbaa !2448
  %7659 = icmp eq i32 %7639, 0
  %7660 = zext i1 %7659 to i8
  %7661 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7660, i8* %7661, align 1, !tbaa !2449
  %7662 = lshr i32 %7639, 31
  %7663 = trunc i32 %7662 to i8
  %7664 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7663, i8* %7664, align 1, !tbaa !2450
  %7665 = lshr i32 %7638, 31
  %7666 = xor i32 %7662, %7665
  %7667 = add nuw nsw i32 %7666, %7662
  %7668 = icmp eq i32 %7667, 2
  %7669 = zext i1 %7668 to i8
  %7670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7669, i8* %7670, align 1, !tbaa !2451
  %7671 = load i64, i64* %RBP
  %7672 = sub i64 %7671, 8
  %7673 = load i32, i32* %EAX
  %7674 = zext i32 %7673 to i64
  %7675 = load i64, i64* %PC
  %7676 = add i64 %7675, 3
  store i64 %7676, i64* %PC
  %7677 = inttoptr i64 %7672 to i32*
  store i32 %7673, i32* %7677
  %7678 = load i64, i64* %PC
  %7679 = sub i64 %7678, 88
  %7680 = load i64, i64* %PC
  %7681 = add i64 %7680, 5
  store i64 %7681, i64* %PC
  %7682 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7679, i64* %7682, align 8, !tbaa !2428
  br label %block_400dd1

block_4010f1:                                     ; preds = %block_4010e7
  %7683 = load i64, i64* %RBP
  %7684 = sub i64 %7683, 12
  %7685 = load i64, i64* %PC
  %7686 = add i64 %7685, 7
  store i64 %7686, i64* %PC
  %7687 = inttoptr i64 %7684 to i32*
  store i32 0, i32* %7687
  br label %block_4010f8

block_400b59:                                     ; preds = %block_400ba3, %block_400b52
  %MEMORY.45 = phi %struct.Memory* [ %MEMORY.8, %block_400b52 ], [ %MEMORY.25, %block_400ba3 ]
  %7688 = load i64, i64* %RBP
  %7689 = sub i64 %7688, 8
  %7690 = load i64, i64* %PC
  %7691 = add i64 %7690, 4
  store i64 %7691, i64* %PC
  %7692 = inttoptr i64 %7689 to i32*
  %7693 = load i32, i32* %7692
  %7694 = sub i32 %7693, 3
  %7695 = icmp ult i32 %7693, 3
  %7696 = zext i1 %7695 to i8
  %7697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7696, i8* %7697, align 1, !tbaa !2433
  %7698 = and i32 %7694, 255
  %7699 = call i32 @llvm.ctpop.i32(i32 %7698) #16
  %7700 = trunc i32 %7699 to i8
  %7701 = and i8 %7700, 1
  %7702 = xor i8 %7701, 1
  %7703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7702, i8* %7703, align 1, !tbaa !2447
  %7704 = xor i32 %7693, 3
  %7705 = xor i32 %7704, %7694
  %7706 = lshr i32 %7705, 4
  %7707 = trunc i32 %7706 to i8
  %7708 = and i8 %7707, 1
  %7709 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7708, i8* %7709, align 1, !tbaa !2448
  %7710 = icmp eq i32 %7694, 0
  %7711 = zext i1 %7710 to i8
  %7712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7711, i8* %7712, align 1, !tbaa !2449
  %7713 = lshr i32 %7694, 31
  %7714 = trunc i32 %7713 to i8
  %7715 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7714, i8* %7715, align 1, !tbaa !2450
  %7716 = lshr i32 %7693, 31
  %7717 = xor i32 %7713, %7716
  %7718 = add nuw nsw i32 %7717, %7716
  %7719 = icmp eq i32 %7718, 2
  %7720 = zext i1 %7719 to i8
  %7721 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7720, i8* %7721, align 1, !tbaa !2451
  %7722 = load i64, i64* %PC
  %7723 = add i64 %7722, 89
  %7724 = load i64, i64* %PC
  %7725 = add i64 %7724, 6
  %7726 = load i64, i64* %PC
  %7727 = add i64 %7726, 6
  store i64 %7727, i64* %PC
  %7728 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7729 = load i8, i8* %7728, align 1, !tbaa !2449
  %7730 = icmp eq i8 %7729, 0
  %7731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7732 = load i8, i8* %7731, align 1, !tbaa !2450
  %7733 = icmp ne i8 %7732, 0
  %7734 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7735 = load i8, i8* %7734, align 1, !tbaa !2451
  %7736 = icmp ne i8 %7735, 0
  %7737 = xor i1 %7733, %7736
  %7738 = xor i1 %7737, true
  %7739 = and i1 %7730, %7738
  %7740 = zext i1 %7739 to i8
  store i8 %7740, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %7741 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %7742 = select i1 %7739, i64 %7723, i64 %7725
  store i64 %7742, i64* %7741, align 8, !tbaa !2428
  %7743 = load i8, i8* %BRANCH_TAKEN
  %7744 = icmp eq i8 %7743, 1
  br i1 %7744, label %block_400bb6, label %block_400b63

block_400a16:                                     ; preds = %block_400a0c
  %7745 = load i64, i64* %RBP
  %7746 = sub i64 %7745, 8
  %7747 = load i64, i64* %PC
  %7748 = add i64 %7747, 7
  store i64 %7748, i64* %PC
  %7749 = inttoptr i64 %7746 to i32*
  store i32 0, i32* %7749
  br label %block_400a1d

block_400c12:                                     ; preds = %block_400c08
  %7750 = load i64, i64* %RBP
  %7751 = sub i64 %7750, 4
  %7752 = load i64, i64* %PC
  %7753 = add i64 %7752, 3
  store i64 %7753, i64* %PC
  %7754 = inttoptr i64 %7751 to i32*
  %7755 = load i32, i32* %7754
  %7756 = zext i32 %7755 to i64
  store i64 %7756, i64* %RAX, align 8, !tbaa !2428
  %7757 = load i64, i64* %RBP
  %7758 = sub i64 %7757, 8
  %7759 = load i64, i64* %PC
  %7760 = add i64 %7759, 3
  store i64 %7760, i64* %PC
  %7761 = inttoptr i64 %7758 to i32*
  %7762 = load i32, i32* %7761
  %7763 = zext i32 %7762 to i64
  store i64 %7763, i64* %RCX, align 8, !tbaa !2428
  %7764 = load i64, i64* %RBP
  %7765 = sub i64 %7764, 12
  %7766 = load i64, i64* %PC
  %7767 = add i64 %7766, 3
  store i64 %7767, i64* %PC
  %7768 = inttoptr i64 %7765 to i32*
  %7769 = load i32, i32* %7768
  %7770 = zext i32 %7769 to i64
  store i64 %7770, i64* %RDX, align 8, !tbaa !2428
  %7771 = load i64, i64* %RDX
  %7772 = load i64, i64* %PC
  %7773 = add i64 %7772, 3
  store i64 %7773, i64* %PC
  %7774 = and i64 %7771, 4294967295
  %7775 = shl i64 %7774, 2
  %7776 = trunc i64 %7775 to i32
  %7777 = icmp slt i32 %7776, 0
  %7778 = shl i32 %7776, 1
  %7779 = zext i32 %7778 to i64
  store i64 %7779, i64* %RDX, align 8, !tbaa !2428
  %7780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7781 = zext i1 %7777 to i8
  store i8 %7781, i8* %7780, align 1, !tbaa !2432
  %7782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7783 = and i32 %7778, 254
  %7784 = call i32 @llvm.ctpop.i32(i32 %7783) #16
  %7785 = trunc i32 %7784 to i8
  %7786 = and i8 %7785, 1
  %7787 = xor i8 %7786, 1
  store i8 %7787, i8* %7782, align 1, !tbaa !2432
  %7788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7788, align 1, !tbaa !2432
  %7789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7790 = icmp eq i32 %7778, 0
  %7791 = zext i1 %7790 to i8
  store i8 %7791, i8* %7789, align 1, !tbaa !2432
  %7792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7793 = lshr i32 %7778, 31
  %7794 = trunc i32 %7793 to i8
  store i8 %7794, i8* %7792, align 1, !tbaa !2432
  %7795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7795, align 1, !tbaa !2432
  %7796 = load i64, i64* %RCX
  %7797 = load i32, i32* %EDX
  %7798 = zext i32 %7797 to i64
  %7799 = load i64, i64* %PC
  %7800 = add i64 %7799, 2
  store i64 %7800, i64* %PC
  %7801 = trunc i64 %7796 to i32
  %7802 = add i32 %7797, %7801
  %7803 = zext i32 %7802 to i64
  store i64 %7803, i64* %RCX, align 8, !tbaa !2428
  %7804 = icmp ult i32 %7802, %7801
  %7805 = icmp ult i32 %7802, %7797
  %7806 = or i1 %7804, %7805
  %7807 = zext i1 %7806 to i8
  %7808 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7807, i8* %7808, align 1, !tbaa !2433
  %7809 = and i32 %7802, 255
  %7810 = call i32 @llvm.ctpop.i32(i32 %7809) #16
  %7811 = trunc i32 %7810 to i8
  %7812 = and i8 %7811, 1
  %7813 = xor i8 %7812, 1
  %7814 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7813, i8* %7814, align 1, !tbaa !2447
  %7815 = xor i64 %7798, %7796
  %7816 = trunc i64 %7815 to i32
  %7817 = xor i32 %7816, %7802
  %7818 = lshr i32 %7817, 4
  %7819 = trunc i32 %7818 to i8
  %7820 = and i8 %7819, 1
  %7821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7820, i8* %7821, align 1, !tbaa !2448
  %7822 = icmp eq i32 %7802, 0
  %7823 = zext i1 %7822 to i8
  %7824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7823, i8* %7824, align 1, !tbaa !2449
  %7825 = lshr i32 %7802, 31
  %7826 = trunc i32 %7825 to i8
  %7827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7826, i8* %7827, align 1, !tbaa !2450
  %7828 = lshr i32 %7801, 31
  %7829 = lshr i32 %7797, 31
  %7830 = xor i32 %7825, %7828
  %7831 = xor i32 %7825, %7829
  %7832 = add nuw nsw i32 %7830, %7831
  %7833 = icmp eq i32 %7832, 2
  %7834 = zext i1 %7833 to i8
  %7835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7834, i8* %7835, align 1, !tbaa !2451
  %7836 = load i64, i64* %RCX
  %7837 = load i64, i64* %PC
  %7838 = add i64 %7837, 3
  store i64 %7838, i64* %PC
  %7839 = and i64 %7836, 4294967295
  %7840 = shl i64 %7839, 2
  %7841 = trunc i64 %7840 to i32
  %7842 = icmp slt i32 %7841, 0
  %7843 = shl i32 %7841, 1
  %7844 = zext i32 %7843 to i64
  store i64 %7844, i64* %RCX, align 8, !tbaa !2428
  %7845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7846 = zext i1 %7842 to i8
  store i8 %7846, i8* %7845, align 1, !tbaa !2432
  %7847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7848 = and i32 %7843, 254
  %7849 = call i32 @llvm.ctpop.i32(i32 %7848) #16
  %7850 = trunc i32 %7849 to i8
  %7851 = and i8 %7850, 1
  %7852 = xor i8 %7851, 1
  store i8 %7852, i8* %7847, align 1, !tbaa !2432
  %7853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7853, align 1, !tbaa !2432
  %7854 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7855 = icmp eq i32 %7843, 0
  %7856 = zext i1 %7855 to i8
  store i8 %7856, i8* %7854, align 1, !tbaa !2432
  %7857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7858 = lshr i32 %7843, 31
  %7859 = trunc i32 %7858 to i8
  store i8 %7859, i8* %7857, align 1, !tbaa !2432
  %7860 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %7860, align 1, !tbaa !2432
  %7861 = load i64, i64* %RAX
  %7862 = load i32, i32* %ECX
  %7863 = zext i32 %7862 to i64
  %7864 = load i64, i64* %PC
  %7865 = add i64 %7864, 2
  store i64 %7865, i64* %PC
  %7866 = trunc i64 %7861 to i32
  %7867 = add i32 %7862, %7866
  %7868 = zext i32 %7867 to i64
  store i64 %7868, i64* %RAX, align 8, !tbaa !2428
  %7869 = icmp ult i32 %7867, %7866
  %7870 = icmp ult i32 %7867, %7862
  %7871 = or i1 %7869, %7870
  %7872 = zext i1 %7871 to i8
  %7873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7872, i8* %7873, align 1, !tbaa !2433
  %7874 = and i32 %7867, 255
  %7875 = call i32 @llvm.ctpop.i32(i32 %7874) #16
  %7876 = trunc i32 %7875 to i8
  %7877 = and i8 %7876, 1
  %7878 = xor i8 %7877, 1
  %7879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7878, i8* %7879, align 1, !tbaa !2447
  %7880 = xor i64 %7863, %7861
  %7881 = trunc i64 %7880 to i32
  %7882 = xor i32 %7881, %7867
  %7883 = lshr i32 %7882, 4
  %7884 = trunc i32 %7883 to i8
  %7885 = and i8 %7884, 1
  %7886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7885, i8* %7886, align 1, !tbaa !2448
  %7887 = icmp eq i32 %7867, 0
  %7888 = zext i1 %7887 to i8
  %7889 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7888, i8* %7889, align 1, !tbaa !2449
  %7890 = lshr i32 %7867, 31
  %7891 = trunc i32 %7890 to i8
  %7892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7891, i8* %7892, align 1, !tbaa !2450
  %7893 = lshr i32 %7866, 31
  %7894 = lshr i32 %7862, 31
  %7895 = xor i32 %7890, %7893
  %7896 = xor i32 %7890, %7894
  %7897 = add nuw nsw i32 %7895, %7896
  %7898 = icmp eq i32 %7897, 2
  %7899 = zext i1 %7898 to i8
  %7900 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7899, i8* %7900, align 1, !tbaa !2451
  %7901 = load i32, i32* %EAX
  %7902 = zext i32 %7901 to i64
  %7903 = load i64, i64* %PC
  %7904 = add i64 %7903, 3
  store i64 %7904, i64* %PC
  %7905 = shl i64 %7902, 32
  %7906 = ashr exact i64 %7905, 32
  store i64 %7906, i64* %RSI, align 8, !tbaa !2428
  %7907 = load i64, i64* %RSI
  %7908 = mul i64 %7907, 4
  %7909 = add i64 %7908, add (i64 ptrtoint (%p_type* @p to i64), i64 8192)
  %7910 = load i64, i64* %PC
  %7911 = add i64 %7910, 11
  store i64 %7911, i64* %PC
  %7912 = inttoptr i64 %7909 to i32*
  store i32 1, i32* %7912
  %7913 = load i64, i64* %RBP
  %7914 = sub i64 %7913, 12
  %7915 = load i64, i64* %PC
  %7916 = add i64 %7915, 3
  store i64 %7916, i64* %PC
  %7917 = inttoptr i64 %7914 to i32*
  %7918 = load i32, i32* %7917
  %7919 = zext i32 %7918 to i64
  store i64 %7919, i64* %RAX, align 8, !tbaa !2428
  %7920 = load i64, i64* %RAX
  %7921 = load i64, i64* %PC
  %7922 = add i64 %7921, 3
  store i64 %7922, i64* %PC
  %7923 = trunc i64 %7920 to i32
  %7924 = add i32 1, %7923
  %7925 = zext i32 %7924 to i64
  store i64 %7925, i64* %RAX, align 8, !tbaa !2428
  %7926 = icmp ult i32 %7924, %7923
  %7927 = icmp ult i32 %7924, 1
  %7928 = or i1 %7926, %7927
  %7929 = zext i1 %7928 to i8
  %7930 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7929, i8* %7930, align 1, !tbaa !2433
  %7931 = and i32 %7924, 255
  %7932 = call i32 @llvm.ctpop.i32(i32 %7931) #16
  %7933 = trunc i32 %7932 to i8
  %7934 = and i8 %7933, 1
  %7935 = xor i8 %7934, 1
  %7936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7935, i8* %7936, align 1, !tbaa !2447
  %7937 = xor i64 1, %7920
  %7938 = trunc i64 %7937 to i32
  %7939 = xor i32 %7938, %7924
  %7940 = lshr i32 %7939, 4
  %7941 = trunc i32 %7940 to i8
  %7942 = and i8 %7941, 1
  %7943 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7942, i8* %7943, align 1, !tbaa !2448
  %7944 = icmp eq i32 %7924, 0
  %7945 = zext i1 %7944 to i8
  %7946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7945, i8* %7946, align 1, !tbaa !2449
  %7947 = lshr i32 %7924, 31
  %7948 = trunc i32 %7947 to i8
  %7949 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7948, i8* %7949, align 1, !tbaa !2450
  %7950 = lshr i32 %7923, 31
  %7951 = xor i32 %7947, %7950
  %7952 = add nuw nsw i32 %7951, %7947
  %7953 = icmp eq i32 %7952, 2
  %7954 = zext i1 %7953 to i8
  %7955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7954, i8* %7955, align 1, !tbaa !2451
  %7956 = load i64, i64* %RBP
  %7957 = sub i64 %7956, 12
  %7958 = load i32, i32* %EAX
  %7959 = zext i32 %7958 to i64
  %7960 = load i64, i64* %PC
  %7961 = add i64 %7960, 3
  store i64 %7961, i64* %PC
  %7962 = inttoptr i64 %7957 to i32*
  store i32 %7958, i32* %7962
  %7963 = load i64, i64* %PC
  %7964 = sub i64 %7963, 52
  %7965 = load i64, i64* %PC
  %7966 = add i64 %7965, 5
  store i64 %7966, i64* %PC
  %7967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7964, i64* %7967, align 8, !tbaa !2428
  br label %block_400c08

block_400c8e:                                     ; preds = %block_400c84
  %7968 = load i64, i64* %RBP
  %7969 = sub i64 %7968, 8
  %7970 = load i64, i64* %PC
  %7971 = add i64 %7970, 7
  store i64 %7971, i64* %PC
  %7972 = inttoptr i64 %7969 to i32*
  store i32 0, i32* %7972
  br label %block_400c95

block_40085c:                                     ; preds = %block_40084f
  %7973 = sub i64 %6372, 16
  %7974 = load i64, i64* %PC
  %7975 = add i64 %7974, 4
  store i64 %7975, i64* %PC
  %7976 = inttoptr i64 %7973 to i32*
  %7977 = load i32, i32* %7976
  %7978 = sext i32 %7977 to i64
  store i64 %7978, i64* %RAX, align 8, !tbaa !2428
  %7979 = load i64, i64* %RAX
  %7980 = mul i64 %7979, 4
  %7981 = add i64 %7980, ptrtoint (%puzzl_type* @puzzl to i64)
  %7982 = load i64, i64* %PC
  %7983 = add i64 %7982, 11
  store i64 %7983, i64* %PC
  %7984 = inttoptr i64 %7981 to i32*
  store i32 1, i32* %7984
  %7985 = load i64, i64* %RBP
  %7986 = sub i64 %7985, 16
  %7987 = load i64, i64* %PC
  %7988 = add i64 %7987, 3
  store i64 %7988, i64* %PC
  %7989 = inttoptr i64 %7986 to i32*
  %7990 = load i32, i32* %7989
  %7991 = zext i32 %7990 to i64
  store i64 %7991, i64* %RAX, align 8, !tbaa !2428
  %7992 = load i64, i64* %RAX
  %7993 = load i64, i64* %PC
  %7994 = add i64 %7993, 3
  store i64 %7994, i64* %PC
  %7995 = trunc i64 %7992 to i32
  %7996 = add i32 1, %7995
  %7997 = zext i32 %7996 to i64
  store i64 %7997, i64* %RAX, align 8, !tbaa !2428
  %7998 = icmp ult i32 %7996, %7995
  %7999 = icmp ult i32 %7996, 1
  %8000 = or i1 %7998, %7999
  %8001 = zext i1 %8000 to i8
  %8002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8001, i8* %8002, align 1, !tbaa !2433
  %8003 = and i32 %7996, 255
  %8004 = call i32 @llvm.ctpop.i32(i32 %8003) #16
  %8005 = trunc i32 %8004 to i8
  %8006 = and i8 %8005, 1
  %8007 = xor i8 %8006, 1
  %8008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8007, i8* %8008, align 1, !tbaa !2447
  %8009 = xor i64 1, %7992
  %8010 = trunc i64 %8009 to i32
  %8011 = xor i32 %8010, %7996
  %8012 = lshr i32 %8011, 4
  %8013 = trunc i32 %8012 to i8
  %8014 = and i8 %8013, 1
  %8015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8014, i8* %8015, align 1, !tbaa !2448
  %8016 = icmp eq i32 %7996, 0
  %8017 = zext i1 %8016 to i8
  %8018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8017, i8* %8018, align 1, !tbaa !2449
  %8019 = lshr i32 %7996, 31
  %8020 = trunc i32 %8019 to i8
  %8021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8020, i8* %8021, align 1, !tbaa !2450
  %8022 = lshr i32 %7995, 31
  %8023 = xor i32 %8019, %8022
  %8024 = add nuw nsw i32 %8023, %8019
  %8025 = icmp eq i32 %8024, 2
  %8026 = zext i1 %8025 to i8
  %8027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8026, i8* %8027, align 1, !tbaa !2451
  %8028 = load i64, i64* %RBP
  %8029 = sub i64 %8028, 16
  %8030 = load i32, i32* %EAX
  %8031 = zext i32 %8030 to i64
  %8032 = load i64, i64* %PC
  %8033 = add i64 %8032, 3
  store i64 %8033, i64* %PC
  %8034 = inttoptr i64 %8029 to i32*
  store i32 %8030, i32* %8034
  %8035 = load i64, i64* %PC
  %8036 = sub i64 %8035, 37
  %8037 = load i64, i64* %PC
  %8038 = add i64 %8037, 5
  store i64 %8038, i64* %PC
  %8039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8036, i64* %8039, align 8, !tbaa !2428
  br label %block_40084f

block_400fa4:                                     ; preds = %block_400f9a
  %8040 = load i64, i64* %RBP
  %8041 = sub i64 %8040, 8
  %8042 = load i64, i64* %PC
  %8043 = add i64 %8042, 7
  store i64 %8043, i64* %PC
  %8044 = inttoptr i64 %8041 to i32*
  store i32 0, i32* %8044
  br label %block_400fab

block_400a0c:                                     ; preds = %block_4009ef, %block_400a7a
  %MEMORY.46 = phi %struct.Memory* [ %MEMORY.13, %block_4009ef ], [ %MEMORY.43, %block_400a7a ]
  %8045 = load i64, i64* %RBP
  %8046 = sub i64 %8045, 4
  %8047 = load i64, i64* %PC
  %8048 = add i64 %8047, 4
  store i64 %8048, i64* %PC
  %8049 = inttoptr i64 %8046 to i32*
  %8050 = load i32, i32* %8049
  %8051 = sub i32 %8050, 1
  %8052 = icmp ult i32 %8050, 1
  %8053 = zext i1 %8052 to i8
  %8054 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8053, i8* %8054, align 1, !tbaa !2433
  %8055 = and i32 %8051, 255
  %8056 = call i32 @llvm.ctpop.i32(i32 %8055) #16
  %8057 = trunc i32 %8056 to i8
  %8058 = and i8 %8057, 1
  %8059 = xor i8 %8058, 1
  %8060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8059, i8* %8060, align 1, !tbaa !2447
  %8061 = xor i32 %8050, 1
  %8062 = xor i32 %8061, %8051
  %8063 = lshr i32 %8062, 4
  %8064 = trunc i32 %8063 to i8
  %8065 = and i8 %8064, 1
  %8066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8065, i8* %8066, align 1, !tbaa !2448
  %8067 = icmp eq i32 %8051, 0
  %8068 = zext i1 %8067 to i8
  %8069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8068, i8* %8069, align 1, !tbaa !2449
  %8070 = lshr i32 %8051, 31
  %8071 = trunc i32 %8070 to i8
  %8072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8071, i8* %8072, align 1, !tbaa !2450
  %8073 = lshr i32 %8050, 31
  %8074 = xor i32 %8070, %8073
  %8075 = add nuw nsw i32 %8074, %8073
  %8076 = icmp eq i32 %8075, 2
  %8077 = zext i1 %8076 to i8
  %8078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8077, i8* %8078, align 1, !tbaa !2451
  %8079 = load i64, i64* %PC
  %8080 = add i64 %8079, 125
  %8081 = load i64, i64* %PC
  %8082 = add i64 %8081, 6
  %8083 = load i64, i64* %PC
  %8084 = add i64 %8083, 6
  store i64 %8084, i64* %PC
  %8085 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8086 = load i8, i8* %8085, align 1, !tbaa !2449
  %8087 = icmp eq i8 %8086, 0
  %8088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8089 = load i8, i8* %8088, align 1, !tbaa !2450
  %8090 = icmp ne i8 %8089, 0
  %8091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8092 = load i8, i8* %8091, align 1, !tbaa !2451
  %8093 = icmp ne i8 %8092, 0
  %8094 = xor i1 %8090, %8093
  %8095 = xor i1 %8094, true
  %8096 = and i1 %8087, %8095
  %8097 = zext i1 %8096 to i8
  store i8 %8097, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %8098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8099 = select i1 %8096, i64 %8080, i64 %8082
  store i64 %8099, i64* %8098, align 8, !tbaa !2428
  %8100 = load i8, i8* %BRANCH_TAKEN
  %8101 = icmp eq i8 %8100, 1
  br i1 %8101, label %block_400a8d, label %block_400a16

block_400f57:                                     ; preds = %block_400f1e
  %8102 = load i64, i64* %PC
  %8103 = add i64 %8102, 5
  %8104 = load i64, i64* %PC
  %8105 = add i64 %8104, 5
  store i64 %8105, i64* %PC
  %8106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8103, i64* %8106, align 8, !tbaa !2428
  %8107 = load i64, i64* %RBP
  %8108 = sub i64 %8107, 8
  %8109 = load i64, i64* %PC
  %8110 = add i64 %8109, 3
  store i64 %8110, i64* %PC
  %8111 = inttoptr i64 %8108 to i32*
  %8112 = load i32, i32* %8111
  %8113 = zext i32 %8112 to i64
  store i64 %8113, i64* %RAX, align 8, !tbaa !2428
  %8114 = load i64, i64* %RAX
  %8115 = load i64, i64* %PC
  %8116 = add i64 %8115, 3
  store i64 %8116, i64* %PC
  %8117 = trunc i64 %8114 to i32
  %8118 = add i32 1, %8117
  %8119 = zext i32 %8118 to i64
  store i64 %8119, i64* %RAX, align 8, !tbaa !2428
  %8120 = icmp ult i32 %8118, %8117
  %8121 = icmp ult i32 %8118, 1
  %8122 = or i1 %8120, %8121
  %8123 = zext i1 %8122 to i8
  %8124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8123, i8* %8124, align 1, !tbaa !2433
  %8125 = and i32 %8118, 255
  %8126 = call i32 @llvm.ctpop.i32(i32 %8125) #16
  %8127 = trunc i32 %8126 to i8
  %8128 = and i8 %8127, 1
  %8129 = xor i8 %8128, 1
  %8130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8129, i8* %8130, align 1, !tbaa !2447
  %8131 = xor i64 1, %8114
  %8132 = trunc i64 %8131 to i32
  %8133 = xor i32 %8132, %8118
  %8134 = lshr i32 %8133, 4
  %8135 = trunc i32 %8134 to i8
  %8136 = and i8 %8135, 1
  %8137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8136, i8* %8137, align 1, !tbaa !2448
  %8138 = icmp eq i32 %8118, 0
  %8139 = zext i1 %8138 to i8
  %8140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8139, i8* %8140, align 1, !tbaa !2449
  %8141 = lshr i32 %8118, 31
  %8142 = trunc i32 %8141 to i8
  %8143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8142, i8* %8143, align 1, !tbaa !2450
  %8144 = lshr i32 %8117, 31
  %8145 = xor i32 %8141, %8144
  %8146 = add nuw nsw i32 %8145, %8141
  %8147 = icmp eq i32 %8146, 2
  %8148 = zext i1 %8147 to i8
  %8149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8148, i8* %8149, align 1, !tbaa !2451
  %8150 = load i64, i64* %RBP
  %8151 = sub i64 %8150, 8
  %8152 = load i32, i32* %EAX
  %8153 = zext i32 %8152 to i64
  %8154 = load i64, i64* %PC
  %8155 = add i64 %8154, 3
  store i64 %8155, i64* %PC
  %8156 = inttoptr i64 %8151 to i32*
  store i32 %8152, i32* %8156
  %8157 = load i64, i64* %PC
  %8158 = sub i64 %8157, 88
  %8159 = load i64, i64* %PC
  %8160 = add i64 %8159, 5
  store i64 %8160, i64* %PC
  %8161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8158, i64* %8161, align 8, !tbaa !2428
  br label %block_400f0d

block_4009ef:                                     ; preds = %block_40096e
  %8162 = load i64, i64* %PC
  %8163 = add i64 %8162, 11
  store i64 %8163, i64* %PC
  store i32 0, i32* bitcast (%class_type* @class to i32*)
  %8164 = load i64, i64* %PC
  %8165 = add i64 %8164, 11
  store i64 %8165, i64* %PC
  store i32 11, i32* bitcast (%piecemax_type* @piecemax to i32*)
  %8166 = load i64, i64* %RBP
  %8167 = sub i64 %8166, 4
  %8168 = load i64, i64* %PC
  %8169 = add i64 %8168, 7
  store i64 %8169, i64* %PC
  %8170 = inttoptr i64 %8167 to i32*
  store i32 0, i32* %8170
  br label %block_400a0c

block_400c08:                                     ; preds = %block_400c01, %block_400c12
  %MEMORY.47 = phi %struct.Memory* [ %MEMORY.0, %block_400c01 ], [ %MEMORY.47, %block_400c12 ]
  %8171 = load i64, i64* %RBP
  %8172 = sub i64 %8171, 12
  %8173 = load i64, i64* %PC
  %8174 = add i64 %8173, 4
  store i64 %8174, i64* %PC
  %8175 = inttoptr i64 %8172 to i32*
  %8176 = load i32, i32* %8175
  %8177 = sub i32 %8176, 1
  %8178 = icmp ult i32 %8176, 1
  %8179 = zext i1 %8178 to i8
  %8180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8179, i8* %8180, align 1, !tbaa !2433
  %8181 = and i32 %8177, 255
  %8182 = call i32 @llvm.ctpop.i32(i32 %8181) #16
  %8183 = trunc i32 %8182 to i8
  %8184 = and i8 %8183, 1
  %8185 = xor i8 %8184, 1
  %8186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8185, i8* %8186, align 1, !tbaa !2447
  %8187 = xor i32 %8176, 1
  %8188 = xor i32 %8187, %8177
  %8189 = lshr i32 %8188, 4
  %8190 = trunc i32 %8189 to i8
  %8191 = and i8 %8190, 1
  %8192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8191, i8* %8192, align 1, !tbaa !2448
  %8193 = icmp eq i32 %8177, 0
  %8194 = zext i1 %8193 to i8
  %8195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8194, i8* %8195, align 1, !tbaa !2449
  %8196 = lshr i32 %8177, 31
  %8197 = trunc i32 %8196 to i8
  %8198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8197, i8* %8198, align 1, !tbaa !2450
  %8199 = lshr i32 %8176, 31
  %8200 = xor i32 %8196, %8199
  %8201 = add nuw nsw i32 %8200, %8199
  %8202 = icmp eq i32 %8201, 2
  %8203 = zext i1 %8202 to i8
  %8204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8203, i8* %8204, align 1, !tbaa !2451
  %8205 = load i64, i64* %PC
  %8206 = add i64 %8205, 53
  %8207 = load i64, i64* %PC
  %8208 = add i64 %8207, 6
  %8209 = load i64, i64* %PC
  %8210 = add i64 %8209, 6
  store i64 %8210, i64* %PC
  %8211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8212 = load i8, i8* %8211, align 1, !tbaa !2449
  %8213 = icmp eq i8 %8212, 0
  %8214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8215 = load i8, i8* %8214, align 1, !tbaa !2450
  %8216 = icmp ne i8 %8215, 0
  %8217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8218 = load i8, i8* %8217, align 1, !tbaa !2451
  %8219 = icmp ne i8 %8218, 0
  %8220 = xor i1 %8216, %8219
  %8221 = xor i1 %8220, true
  %8222 = and i1 %8213, %8221
  %8223 = zext i1 %8222 to i8
  store i8 %8223, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %8224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8225 = select i1 %8222, i64 %8206, i64 %8208
  store i64 %8225, i64* %8224, align 8, !tbaa !2428
  %8226 = load i8, i8* %BRANCH_TAKEN
  %8227 = icmp eq i8 %8226, 1
  br i1 %8227, label %block_400c41, label %block_400c12

block_400c01:                                     ; preds = %block_400bf7
  %8228 = load i64, i64* %RBP
  %8229 = sub i64 %8228, 12
  %8230 = load i64, i64* %PC
  %8231 = add i64 %8230, 7
  store i64 %8231, i64* %PC
  %8232 = inttoptr i64 %8229 to i32*
  store i32 0, i32* %8232
  br label %block_400c08
}

; Function Attrs: noinline
define %struct.Memory* @sub_4005e0_Place(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4005e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = load i64, i64* %RBP
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %34 = load i64, i64* %33, align 8, !tbaa !2428
  %35 = add i64 %34, -8
  %36 = inttoptr i64 %35 to i64*
  store i64 %30, i64* %36
  store i64 %35, i64* %33, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 3
  store i64 %39, i64* %PC
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 8
  %42 = load i32, i32* %EDI
  %43 = zext i32 %42 to i64
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  %46 = inttoptr i64 %41 to i32*
  store i32 %42, i32* %46
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 12
  %49 = load i32, i32* %ESI
  %50 = zext i32 %49 to i64
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  %53 = inttoptr i64 %48 to i32*
  store i32 %49, i32* %53
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 16
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 7
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i32*
  store i32 0, i32* %58
  br label %block_4005f1

block_40069d:                                     ; preds = %block_40068b
  %59 = load i64, i64* %RBP
  %60 = sub i64 %59, 16
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 3
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to i32*
  %64 = load i32, i32* %63
  %65 = zext i32 %64 to i64
  store i64 %65, i64* %RAX, align 8, !tbaa !2428
  %66 = load i64, i64* %RBP
  %67 = sub i64 %66, 4
  %68 = load i32, i32* %EAX
  %69 = zext i32 %68 to i64
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  %72 = inttoptr i64 %67 to i32*
  store i32 %68, i32* %72
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 31
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 5
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %74, i64* %77, align 8, !tbaa !2428
  br label %block_4006c2

block_40063c:                                     ; preds = %block_400605, %block_400628
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.3, %block_400605 ], [ %MEMORY.3, %block_400628 ]
  %78 = load i64, i64* %PC
  %79 = add i64 %78, 5
  %80 = load i64, i64* %PC
  %81 = add i64 %80, 5
  store i64 %81, i64* %PC
  %82 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %79, i64* %82, align 8, !tbaa !2428
  %83 = load i64, i64* %RBP
  %84 = sub i64 %83, 16
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 3
  store i64 %86, i64* %PC
  %87 = inttoptr i64 %84 to i32*
  %88 = load i32, i32* %87
  %89 = zext i32 %88 to i64
  store i64 %89, i64* %RAX, align 8, !tbaa !2428
  %90 = load i64, i64* %RAX
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 3
  store i64 %92, i64* %PC
  %93 = trunc i64 %90 to i32
  %94 = add i32 1, %93
  %95 = zext i32 %94 to i64
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %96 = icmp ult i32 %94, %93
  %97 = icmp ult i32 %94, 1
  %98 = or i1 %96, %97
  %99 = zext i1 %98 to i8
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %99, i8* %100, align 1, !tbaa !2433
  %101 = and i32 %94, 255
  %102 = call i32 @llvm.ctpop.i32(i32 %101) #16
  %103 = trunc i32 %102 to i8
  %104 = and i8 %103, 1
  %105 = xor i8 %104, 1
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %105, i8* %106, align 1, !tbaa !2447
  %107 = xor i64 1, %90
  %108 = trunc i64 %107 to i32
  %109 = xor i32 %108, %94
  %110 = lshr i32 %109, 4
  %111 = trunc i32 %110 to i8
  %112 = and i8 %111, 1
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %112, i8* %113, align 1, !tbaa !2448
  %114 = icmp eq i32 %94, 0
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %115, i8* %116, align 1, !tbaa !2449
  %117 = lshr i32 %94, 31
  %118 = trunc i32 %117 to i8
  %119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %118, i8* %119, align 1, !tbaa !2450
  %120 = lshr i32 %93, 31
  %121 = xor i32 %117, %120
  %122 = add nuw nsw i32 %121, %117
  %123 = icmp eq i32 %122, 2
  %124 = zext i1 %123 to i8
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %124, i8* %125, align 1, !tbaa !2451
  %126 = load i64, i64* %RBP
  %127 = sub i64 %126, 16
  %128 = load i32, i32* %EAX
  %129 = zext i32 %128 to i64
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 3
  store i64 %131, i64* %PC
  %132 = inttoptr i64 %127 to i32*
  store i32 %128, i32* %132
  %133 = load i64, i64* %PC
  %134 = sub i64 %133, 89
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 5
  store i64 %136, i64* %PC
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %134, i64* %137, align 8, !tbaa !2428
  br label %block_4005f1

block_4006bb:                                     ; preds = %block_40067e
  %138 = sub i64 %577, 4
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 7
  store i64 %140, i64* %PC
  %141 = inttoptr i64 %138 to i32*
  store i32 0, i32* %141
  br label %block_4006c2

block_4006a8:                                     ; preds = %block_40068b
  %142 = load i64, i64* %PC
  %143 = add i64 %142, 5
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 5
  store i64 %145, i64* %PC
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %143, i64* %146, align 8, !tbaa !2428
  %147 = load i64, i64* %RBP
  %148 = sub i64 %147, 16
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 3
  store i64 %150, i64* %PC
  %151 = inttoptr i64 %148 to i32*
  %152 = load i32, i32* %151
  %153 = zext i32 %152 to i64
  store i64 %153, i64* %RAX, align 8, !tbaa !2428
  %154 = load i64, i64* %RAX
  %155 = load i64, i64* %PC
  %156 = add i64 %155, 3
  store i64 %156, i64* %PC
  %157 = trunc i64 %154 to i32
  %158 = add i32 1, %157
  %159 = zext i32 %158 to i64
  store i64 %159, i64* %RAX, align 8, !tbaa !2428
  %160 = icmp ult i32 %158, %157
  %161 = icmp ult i32 %158, 1
  %162 = or i1 %160, %161
  %163 = zext i1 %162 to i8
  %164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %163, i8* %164, align 1, !tbaa !2433
  %165 = and i32 %158, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #16
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %169, i8* %170, align 1, !tbaa !2447
  %171 = xor i64 1, %154
  %172 = trunc i64 %171 to i32
  %173 = xor i32 %172, %158
  %174 = lshr i32 %173, 4
  %175 = trunc i32 %174 to i8
  %176 = and i8 %175, 1
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %176, i8* %177, align 1, !tbaa !2448
  %178 = icmp eq i32 %158, 0
  %179 = zext i1 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %179, i8* %180, align 1, !tbaa !2449
  %181 = lshr i32 %158, 31
  %182 = trunc i32 %181 to i8
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %182, i8* %183, align 1, !tbaa !2450
  %184 = lshr i32 %157, 31
  %185 = xor i32 %181, %184
  %186 = add nuw nsw i32 %185, %181
  %187 = icmp eq i32 %186, 2
  %188 = zext i1 %187 to i8
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %188, i8* %189, align 1, !tbaa !2451
  %190 = load i64, i64* %RBP
  %191 = sub i64 %190, 16
  %192 = load i32, i32* %EAX
  %193 = zext i32 %192 to i64
  %194 = load i64, i64* %PC
  %195 = add i64 %194, 3
  store i64 %195, i64* %PC
  %196 = inttoptr i64 %191 to i32*
  store i32 %192, i32* %196
  %197 = load i64, i64* %PC
  %198 = sub i64 %197, 56
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 5
  store i64 %200, i64* %PC
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %198, i64* %201, align 8, !tbaa !2428
  br label %block_40067e

block_40064f:                                     ; preds = %block_4005f1
  %202 = load i64, i64* %RBP
  %203 = sub i64 %202, 8
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 4
  store i64 %205, i64* %PC
  %206 = inttoptr i64 %203 to i32*
  %207 = load i32, i32* %206
  %208 = sext i32 %207 to i64
  store i64 %208, i64* %RAX, align 8, !tbaa !2428
  %209 = load i64, i64* %RAX
  %210 = mul i64 %209, 4
  %211 = add i64 %210, ptrtoint (%class_type* @class to i64)
  %212 = load i64, i64* %PC
  %213 = add i64 %212, 8
  store i64 %213, i64* %PC
  %214 = inttoptr i64 %211 to i32*
  %215 = load i32, i32* %214
  %216 = sext i32 %215 to i64
  store i64 %216, i64* %RAX, align 8, !tbaa !2428
  %217 = load i64, i64* %RAX
  %218 = mul i64 %217, 4
  %219 = add i64 %218, ptrtoint (%piececount_type* @piececount to i64)
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 7
  store i64 %221, i64* %PC
  %222 = inttoptr i64 %219 to i32*
  %223 = load i32, i32* %222
  %224 = zext i32 %223 to i64
  store i64 %224, i64* %RCX, align 8, !tbaa !2428
  %225 = load i64, i64* %RCX
  %226 = load i64, i64* %PC
  %227 = add i64 %226, 3
  store i64 %227, i64* %PC
  %228 = trunc i64 %225 to i32
  %229 = sub i32 %228, 1
  %230 = zext i32 %229 to i64
  store i64 %230, i64* %RCX, align 8, !tbaa !2428
  %231 = icmp ult i32 %228, 1
  %232 = zext i1 %231 to i8
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %232, i8* %233, align 1, !tbaa !2433
  %234 = and i32 %229, 255
  %235 = call i32 @llvm.ctpop.i32(i32 %234) #16
  %236 = trunc i32 %235 to i8
  %237 = and i8 %236, 1
  %238 = xor i8 %237, 1
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %238, i8* %239, align 1, !tbaa !2447
  %240 = xor i64 1, %225
  %241 = trunc i64 %240 to i32
  %242 = xor i32 %241, %229
  %243 = lshr i32 %242, 4
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %245, i8* %246, align 1, !tbaa !2448
  %247 = icmp eq i32 %229, 0
  %248 = zext i1 %247 to i8
  %249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %248, i8* %249, align 1, !tbaa !2449
  %250 = lshr i32 %229, 31
  %251 = trunc i32 %250 to i8
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %251, i8* %252, align 1, !tbaa !2450
  %253 = lshr i32 %228, 31
  %254 = xor i32 %250, %253
  %255 = add nuw nsw i32 %254, %253
  %256 = icmp eq i32 %255, 2
  %257 = zext i1 %256 to i8
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %257, i8* %258, align 1, !tbaa !2451
  %259 = load i64, i64* %RBP
  %260 = sub i64 %259, 8
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 4
  store i64 %262, i64* %PC
  %263 = inttoptr i64 %260 to i32*
  %264 = load i32, i32* %263
  %265 = sext i32 %264 to i64
  store i64 %265, i64* %RAX, align 8, !tbaa !2428
  %266 = load i64, i64* %RAX
  %267 = mul i64 %266, 4
  %268 = add i64 %267, ptrtoint (%class_type* @class to i64)
  %269 = load i64, i64* %PC
  %270 = add i64 %269, 8
  store i64 %270, i64* %PC
  %271 = inttoptr i64 %268 to i32*
  %272 = load i32, i32* %271
  %273 = sext i32 %272 to i64
  store i64 %273, i64* %RAX, align 8, !tbaa !2428
  %274 = load i64, i64* %RAX
  %275 = mul i64 %274, 4
  %276 = add i64 %275, ptrtoint (%piececount_type* @piececount to i64)
  %277 = load i32, i32* %ECX
  %278 = zext i32 %277 to i64
  %279 = load i64, i64* %PC
  %280 = add i64 %279, 7
  store i64 %280, i64* %PC
  %281 = inttoptr i64 %276 to i32*
  store i32 %277, i32* %281
  %282 = load i64, i64* %RBP
  %283 = sub i64 %282, 12
  %284 = load i64, i64* %PC
  %285 = add i64 %284, 3
  store i64 %285, i64* %PC
  %286 = inttoptr i64 %283 to i32*
  %287 = load i32, i32* %286
  %288 = zext i32 %287 to i64
  store i64 %288, i64* %RCX, align 8, !tbaa !2428
  %289 = load i64, i64* %RBP
  %290 = sub i64 %289, 16
  %291 = load i32, i32* %ECX
  %292 = zext i32 %291 to i64
  %293 = load i64, i64* %PC
  %294 = add i64 %293, 3
  store i64 %294, i64* %PC
  %295 = inttoptr i64 %290 to i32*
  store i32 %291, i32* %295
  br label %block_40067e

block_40068b:                                     ; preds = %block_40067e
  %296 = sub i64 %577, 16
  %297 = load i64, i64* %PC
  %298 = add i64 %297, 4
  store i64 %298, i64* %PC
  %299 = inttoptr i64 %296 to i32*
  %300 = load i32, i32* %299
  %301 = sext i32 %300 to i64
  store i64 %301, i64* %RAX, align 8, !tbaa !2428
  %302 = load i64, i64* %RAX
  %303 = mul i64 %302, 4
  %304 = add i64 %303, ptrtoint (%puzzl_type* @puzzl to i64)
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 8
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %304 to i32*
  %308 = load i32, i32* %307
  %309 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %309, align 1, !tbaa !2433
  %310 = and i32 %308, 255
  %311 = call i32 @llvm.ctpop.i32(i32 %310) #16
  %312 = trunc i32 %311 to i8
  %313 = and i8 %312, 1
  %314 = xor i8 %313, 1
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %314, i8* %315, align 1, !tbaa !2447
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %316, align 1, !tbaa !2448
  %317 = icmp eq i32 %308, 0
  %318 = zext i1 %317 to i8
  %319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %318, i8* %319, align 1, !tbaa !2449
  %320 = lshr i32 %308, 31
  %321 = trunc i32 %320 to i8
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %321, i8* %322, align 1, !tbaa !2450
  %323 = lshr i32 %308, 31
  %324 = xor i32 %320, %323
  %325 = add nuw nsw i32 %324, %323
  %326 = icmp eq i32 %325, 2
  %327 = zext i1 %326 to i8
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %327, i8* %328, align 1, !tbaa !2451
  %329 = load i64, i64* %PC
  %330 = add i64 %329, 17
  %331 = load i64, i64* %PC
  %332 = add i64 %331, 6
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 6
  store i64 %334, i64* %PC
  %335 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %336 = load i8, i8* %335, align 1, !tbaa !2449
  %337 = icmp eq i8 %336, 0
  %338 = zext i1 %337 to i8
  store i8 %338, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %340 = select i1 %337, i64 %330, i64 %332
  store i64 %340, i64* %339, align 8, !tbaa !2428
  %341 = load i8, i8* %BRANCH_TAKEN
  %342 = icmp eq i8 %341, 1
  br i1 %342, label %block_4006a8, label %block_40069d

block_400628:                                     ; preds = %block_400605
  %343 = load i64, i64* %RBP
  %344 = sub i64 %343, 12
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 3
  store i64 %346, i64* %PC
  %347 = inttoptr i64 %344 to i32*
  %348 = load i32, i32* %347
  %349 = zext i32 %348 to i64
  store i64 %349, i64* %RAX, align 8, !tbaa !2428
  %350 = load i64, i64* %RAX
  %351 = load i64, i64* %RBP
  %352 = sub i64 %351, 16
  %353 = load i64, i64* %PC
  %354 = add i64 %353, 3
  store i64 %354, i64* %PC
  %355 = trunc i64 %350 to i32
  %356 = inttoptr i64 %352 to i32*
  %357 = load i32, i32* %356
  %358 = add i32 %357, %355
  %359 = zext i32 %358 to i64
  store i64 %359, i64* %RAX, align 8, !tbaa !2428
  %360 = icmp ult i32 %358, %355
  %361 = icmp ult i32 %358, %357
  %362 = or i1 %360, %361
  %363 = zext i1 %362 to i8
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %363, i8* %364, align 1, !tbaa !2433
  %365 = and i32 %358, 255
  %366 = call i32 @llvm.ctpop.i32(i32 %365) #16
  %367 = trunc i32 %366 to i8
  %368 = and i8 %367, 1
  %369 = xor i8 %368, 1
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %369, i8* %370, align 1, !tbaa !2447
  %371 = xor i32 %357, %355
  %372 = xor i32 %371, %358
  %373 = lshr i32 %372, 4
  %374 = trunc i32 %373 to i8
  %375 = and i8 %374, 1
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %375, i8* %376, align 1, !tbaa !2448
  %377 = icmp eq i32 %358, 0
  %378 = zext i1 %377 to i8
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %378, i8* %379, align 1, !tbaa !2449
  %380 = lshr i32 %358, 31
  %381 = trunc i32 %380 to i8
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %381, i8* %382, align 1, !tbaa !2450
  %383 = lshr i32 %355, 31
  %384 = lshr i32 %357, 31
  %385 = xor i32 %380, %383
  %386 = xor i32 %380, %384
  %387 = add nuw nsw i32 %385, %386
  %388 = icmp eq i32 %387, 2
  %389 = zext i1 %388 to i8
  %390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %389, i8* %390, align 1, !tbaa !2451
  %391 = load i32, i32* %EAX
  %392 = zext i32 %391 to i64
  %393 = load i64, i64* %PC
  %394 = add i64 %393, 3
  store i64 %394, i64* %PC
  %395 = shl i64 %392, 32
  %396 = ashr exact i64 %395, 32
  store i64 %396, i64* %RCX, align 8, !tbaa !2428
  %397 = load i64, i64* %RCX
  %398 = mul i64 %397, 4
  %399 = add i64 %398, ptrtoint (%puzzl_type* @puzzl to i64)
  %400 = load i64, i64* %PC
  %401 = add i64 %400, 11
  store i64 %401, i64* %PC
  %402 = inttoptr i64 %399 to i32*
  store i32 1, i32* %402
  br label %block_40063c

block_400605:                                     ; preds = %block_4005f1
  %403 = load i64, i64* %PC
  %404 = add i64 %403, 10
  store i64 %404, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RAX, align 8, !tbaa !2428
  %405 = load i64, i64* %RBP
  %406 = sub i64 %405, 8
  %407 = load i64, i64* %PC
  %408 = add i64 %407, 4
  store i64 %408, i64* %PC
  %409 = inttoptr i64 %406 to i32*
  %410 = load i32, i32* %409
  %411 = sext i32 %410 to i64
  store i64 %411, i64* %RCX, align 8, !tbaa !2428
  %412 = load i64, i64* %RCX
  %413 = load i64, i64* %PC
  %414 = add i64 %413, 4
  store i64 %414, i64* %PC
  %415 = shl i64 %412, 10
  %416 = icmp slt i64 %415, 0
  %417 = shl i64 %415, 1
  store i64 %417, i64* %RCX, align 8, !tbaa !2428
  %418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %419 = zext i1 %416 to i8
  store i8 %419, i8* %418, align 1, !tbaa !2432
  %420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %421 = trunc i64 %417 to i32
  %422 = and i32 %421, 254
  %423 = call i32 @llvm.ctpop.i32(i32 %422) #16
  %424 = trunc i32 %423 to i8
  %425 = and i8 %424, 1
  %426 = xor i8 %425, 1
  store i8 %426, i8* %420, align 1, !tbaa !2432
  %427 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %427, align 1, !tbaa !2432
  %428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %429 = icmp eq i64 %417, 0
  %430 = zext i1 %429 to i8
  store i8 %430, i8* %428, align 1, !tbaa !2432
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %432 = lshr i64 %417, 63
  %433 = trunc i64 %432 to i8
  store i8 %433, i8* %431, align 1, !tbaa !2432
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %434, align 1, !tbaa !2432
  %435 = load i64, i64* %RAX
  %436 = load i64, i64* %RCX
  %437 = load i64, i64* %PC
  %438 = add i64 %437, 3
  store i64 %438, i64* %PC
  %439 = add i64 %436, %435
  store i64 %439, i64* %RAX, align 8, !tbaa !2428
  %440 = icmp ult i64 %439, %435
  %441 = icmp ult i64 %439, %436
  %442 = or i1 %440, %441
  %443 = zext i1 %442 to i8
  %444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %443, i8* %444, align 1, !tbaa !2433
  %445 = trunc i64 %439 to i32
  %446 = and i32 %445, 255
  %447 = call i32 @llvm.ctpop.i32(i32 %446) #16
  %448 = trunc i32 %447 to i8
  %449 = and i8 %448, 1
  %450 = xor i8 %449, 1
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %450, i8* %451, align 1, !tbaa !2447
  %452 = xor i64 %436, %435
  %453 = xor i64 %452, %439
  %454 = lshr i64 %453, 4
  %455 = trunc i64 %454 to i8
  %456 = and i8 %455, 1
  %457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %456, i8* %457, align 1, !tbaa !2448
  %458 = icmp eq i64 %439, 0
  %459 = zext i1 %458 to i8
  %460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %459, i8* %460, align 1, !tbaa !2449
  %461 = lshr i64 %439, 63
  %462 = trunc i64 %461 to i8
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %462, i8* %463, align 1, !tbaa !2450
  %464 = lshr i64 %435, 63
  %465 = lshr i64 %436, 63
  %466 = xor i64 %461, %464
  %467 = xor i64 %461, %465
  %468 = add nuw nsw i64 %466, %467
  %469 = icmp eq i64 %468, 2
  %470 = zext i1 %469 to i8
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %470, i8* %471, align 1, !tbaa !2451
  %472 = load i64, i64* %RBP
  %473 = sub i64 %472, 16
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 4
  store i64 %475, i64* %PC
  %476 = inttoptr i64 %473 to i32*
  %477 = load i32, i32* %476
  %478 = sext i32 %477 to i64
  store i64 %478, i64* %RCX, align 8, !tbaa !2428
  %479 = load i64, i64* %RAX
  %480 = load i64, i64* %RCX
  %481 = mul i64 %480, 4
  %482 = add i64 %481, %479
  %483 = load i64, i64* %PC
  %484 = add i64 %483, 4
  store i64 %484, i64* %PC
  %485 = inttoptr i64 %482 to i32*
  %486 = load i32, i32* %485
  %487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %487, align 1, !tbaa !2433
  %488 = and i32 %486, 255
  %489 = call i32 @llvm.ctpop.i32(i32 %488) #16
  %490 = trunc i32 %489 to i8
  %491 = and i8 %490, 1
  %492 = xor i8 %491, 1
  %493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %492, i8* %493, align 1, !tbaa !2447
  %494 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %494, align 1, !tbaa !2448
  %495 = icmp eq i32 %486, 0
  %496 = zext i1 %495 to i8
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %496, i8* %497, align 1, !tbaa !2449
  %498 = lshr i32 %486, 31
  %499 = trunc i32 %498 to i8
  %500 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %499, i8* %500, align 1, !tbaa !2450
  %501 = lshr i32 %486, 31
  %502 = xor i32 %498, %501
  %503 = add nuw nsw i32 %502, %501
  %504 = icmp eq i32 %503, 2
  %505 = zext i1 %504 to i8
  %506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %505, i8* %506, align 1, !tbaa !2451
  %507 = load i64, i64* %PC
  %508 = add i64 %507, 26
  %509 = load i64, i64* %PC
  %510 = add i64 %509, 6
  %511 = load i64, i64* %PC
  %512 = add i64 %511, 6
  store i64 %512, i64* %PC
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %514 = load i8, i8* %513, align 1, !tbaa !2449
  store i8 %514, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %516 = icmp ne i8 %514, 0
  %517 = select i1 %516, i64 %508, i64 %510
  store i64 %517, i64* %515, align 8, !tbaa !2428
  %518 = load i8, i8* %BRANCH_TAKEN
  %519 = icmp eq i8 %518, 1
  br i1 %519, label %block_40063c, label %block_400628

block_40067e:                                     ; preds = %block_40064f, %block_4006a8
  %MEMORY.1 = phi %struct.Memory* [ %MEMORY.3, %block_40064f ], [ %MEMORY.1, %block_4006a8 ]
  %520 = load i64, i64* %RBP
  %521 = sub i64 %520, 16
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 7
  store i64 %523, i64* %PC
  %524 = inttoptr i64 %521 to i32*
  %525 = load i32, i32* %524
  %526 = sub i32 %525, 511
  %527 = icmp ult i32 %525, 511
  %528 = zext i1 %527 to i8
  %529 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %528, i8* %529, align 1, !tbaa !2433
  %530 = and i32 %526, 255
  %531 = call i32 @llvm.ctpop.i32(i32 %530) #16
  %532 = trunc i32 %531 to i8
  %533 = and i8 %532, 1
  %534 = xor i8 %533, 1
  %535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %534, i8* %535, align 1, !tbaa !2447
  %536 = xor i32 %525, 511
  %537 = xor i32 %536, %526
  %538 = lshr i32 %537, 4
  %539 = trunc i32 %538 to i8
  %540 = and i8 %539, 1
  %541 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %540, i8* %541, align 1, !tbaa !2448
  %542 = icmp eq i32 %526, 0
  %543 = zext i1 %542 to i8
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %543, i8* %544, align 1, !tbaa !2449
  %545 = lshr i32 %526, 31
  %546 = trunc i32 %545 to i8
  %547 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %546, i8* %547, align 1, !tbaa !2450
  %548 = lshr i32 %525, 31
  %549 = xor i32 %545, %548
  %550 = add nuw nsw i32 %549, %548
  %551 = icmp eq i32 %550, 2
  %552 = zext i1 %551 to i8
  %553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %552, i8* %553, align 1, !tbaa !2451
  %554 = load i64, i64* %PC
  %555 = add i64 %554, 54
  %556 = load i64, i64* %PC
  %557 = add i64 %556, 6
  %558 = load i64, i64* %PC
  %559 = add i64 %558, 6
  store i64 %559, i64* %PC
  %560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %561 = load i8, i8* %560, align 1, !tbaa !2449
  %562 = icmp eq i8 %561, 0
  %563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %564 = load i8, i8* %563, align 1, !tbaa !2450
  %565 = icmp ne i8 %564, 0
  %566 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %567 = load i8, i8* %566, align 1, !tbaa !2451
  %568 = icmp ne i8 %567, 0
  %569 = xor i1 %565, %568
  %570 = xor i1 %569, true
  %571 = and i1 %562, %570
  %572 = zext i1 %571 to i8
  store i8 %572, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %573 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %574 = select i1 %571, i64 %555, i64 %557
  store i64 %574, i64* %573, align 8, !tbaa !2428
  %575 = load i8, i8* %BRANCH_TAKEN
  %576 = icmp eq i8 %575, 1
  %577 = load i64, i64* %RBP
  br i1 %576, label %block_4006bb, label %block_40068b

block_4006c2:                                     ; preds = %block_4006bb, %block_40069d
  %MEMORY.2 = phi %struct.Memory* [ %MEMORY.1, %block_4006bb ], [ %MEMORY.1, %block_40069d ]
  %578 = load i64, i64* %RBP
  %579 = sub i64 %578, 4
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 3
  store i64 %581, i64* %PC
  %582 = inttoptr i64 %579 to i32*
  %583 = load i32, i32* %582
  %584 = zext i32 %583 to i64
  store i64 %584, i64* %RAX, align 8, !tbaa !2428
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 1
  store i64 %586, i64* %PC
  %587 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %588 = load i64, i64* %587, align 8, !tbaa !2428
  %589 = add i64 %588, 8
  %590 = inttoptr i64 %588 to i64*
  %591 = load i64, i64* %590
  store i64 %591, i64* %RBP, align 8, !tbaa !2428
  store i64 %589, i64* %587, align 8, !tbaa !2428
  %592 = load i64, i64* %PC
  %593 = add i64 %592, 1
  store i64 %593, i64* %PC
  %594 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %596 = load i64, i64* %595, align 8, !tbaa !2428
  %597 = inttoptr i64 %596 to i64*
  %598 = load i64, i64* %597
  store i64 %598, i64* %594, align 8, !tbaa !2428
  %599 = add i64 %596, 8
  store i64 %599, i64* %595, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.2

block_4005f1:                                     ; preds = %block_40063c, %block_4005e0
  %MEMORY.3 = phi %struct.Memory* [ %2, %block_4005e0 ], [ %MEMORY.0, %block_40063c ]
  %600 = load i64, i64* %RBP
  %601 = sub i64 %600, 16
  %602 = load i64, i64* %PC
  %603 = add i64 %602, 3
  store i64 %603, i64* %PC
  %604 = inttoptr i64 %601 to i32*
  %605 = load i32, i32* %604
  %606 = zext i32 %605 to i64
  store i64 %606, i64* %RAX, align 8, !tbaa !2428
  %607 = load i64, i64* %RBP
  %608 = sub i64 %607, 8
  %609 = load i64, i64* %PC
  %610 = add i64 %609, 4
  store i64 %610, i64* %PC
  %611 = inttoptr i64 %608 to i32*
  %612 = load i32, i32* %611
  %613 = sext i32 %612 to i64
  store i64 %613, i64* %RCX, align 8, !tbaa !2428
  %614 = load i32, i32* %EAX
  %615 = zext i32 %614 to i64
  %616 = load i64, i64* %RCX
  %617 = mul i64 %616, 4
  %618 = add i64 %617, ptrtoint (%piecemax_type* @piecemax to i64)
  %619 = load i64, i64* %PC
  %620 = add i64 %619, 7
  store i64 %620, i64* %PC
  %621 = inttoptr i64 %618 to i32*
  %622 = load i32, i32* %621
  %623 = sub i32 %614, %622
  %624 = icmp ult i32 %614, %622
  %625 = zext i1 %624 to i8
  %626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %625, i8* %626, align 1, !tbaa !2433
  %627 = and i32 %623, 255
  %628 = call i32 @llvm.ctpop.i32(i32 %627) #16
  %629 = trunc i32 %628 to i8
  %630 = and i8 %629, 1
  %631 = xor i8 %630, 1
  %632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %631, i8* %632, align 1, !tbaa !2447
  %633 = xor i32 %622, %614
  %634 = xor i32 %633, %623
  %635 = lshr i32 %634, 4
  %636 = trunc i32 %635 to i8
  %637 = and i8 %636, 1
  %638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %637, i8* %638, align 1, !tbaa !2448
  %639 = icmp eq i32 %623, 0
  %640 = zext i1 %639 to i8
  %641 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %640, i8* %641, align 1, !tbaa !2449
  %642 = lshr i32 %623, 31
  %643 = trunc i32 %642 to i8
  %644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %643, i8* %644, align 1, !tbaa !2450
  %645 = lshr i32 %614, 31
  %646 = lshr i32 %622, 31
  %647 = xor i32 %646, %645
  %648 = xor i32 %642, %645
  %649 = add nuw nsw i32 %648, %647
  %650 = icmp eq i32 %649, 2
  %651 = zext i1 %650 to i8
  %652 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %651, i8* %652, align 1, !tbaa !2451
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 80
  %655 = load i64, i64* %PC
  %656 = add i64 %655, 6
  %657 = load i64, i64* %PC
  %658 = add i64 %657, 6
  store i64 %658, i64* %PC
  %659 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %660 = load i8, i8* %659, align 1, !tbaa !2449
  %661 = icmp eq i8 %660, 0
  %662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %663 = load i8, i8* %662, align 1, !tbaa !2450
  %664 = icmp ne i8 %663, 0
  %665 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %666 = load i8, i8* %665, align 1, !tbaa !2451
  %667 = icmp ne i8 %666, 0
  %668 = xor i1 %664, %667
  %669 = xor i1 %668, true
  %670 = and i1 %661, %669
  %671 = zext i1 %670 to i8
  store i8 %671, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %673 = select i1 %670, i64 %654, i64 %656
  store i64 %673, i64* %672, align 8, !tbaa !2428
  %674 = load i8, i8* %BRANCH_TAKEN
  %675 = icmp eq i8 %674, 1
  br i1 %675, label %block_40064f, label %block_400605
}

; Function Attrs: noinline
define %struct.Memory* @sub_400510_Rand(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400510:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %RSP
  %32 = load i64, i64* %PC
  %33 = add i64 %32, 3
  store i64 %33, i64* %PC
  store i64 %31, i64* %RBP, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 12
  store i64 %35, i64* %PC
  %36 = load i64, i64* bitcast (%seed_type* @seed to i64*)
  %37 = sext i64 %36 to i128
  %38 = and i128 %37, -18446744073709551616
  %39 = zext i64 %36 to i128
  %40 = or i128 %38, %39
  %41 = mul nsw i128 %40, 1309
  %42 = trunc i128 %41 to i64
  store i64 %42, i64* %RAX, align 8, !tbaa !2428
  %43 = sext i64 %42 to i128
  %44 = icmp ne i128 %43, %41
  %45 = zext i1 %44 to i8
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %45, i8* %46, align 1, !tbaa !2433
  %47 = trunc i128 %41 to i32
  %48 = and i32 %47, 255
  %49 = call i32 @llvm.ctpop.i32(i32 %48) #16
  %50 = trunc i32 %49 to i8
  %51 = and i8 %50, 1
  %52 = xor i8 %51, 1
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %52, i8* %53, align 1, !tbaa !2447
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %54, align 1, !tbaa !2448
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %55, align 1, !tbaa !2449
  %56 = lshr i64 %42, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2450
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %45, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %RAX
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 6
  store i64 %62, i64* %PC
  %63 = add i64 13849, %60
  store i64 %63, i64* %RAX, align 8, !tbaa !2428
  %64 = icmp ult i64 %63, %60
  %65 = icmp ult i64 %63, 13849
  %66 = or i1 %64, %65
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %67, i8* %68, align 1, !tbaa !2433
  %69 = trunc i64 %63 to i32
  %70 = and i32 %69, 255
  %71 = call i32 @llvm.ctpop.i32(i32 %70) #16
  %72 = trunc i32 %71 to i8
  %73 = and i8 %72, 1
  %74 = xor i8 %73, 1
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %74, i8* %75, align 1, !tbaa !2447
  %76 = xor i64 13849, %60
  %77 = xor i64 %76, %63
  %78 = lshr i64 %77, 4
  %79 = trunc i64 %78 to i8
  %80 = and i8 %79, 1
  %81 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %80, i8* %81, align 1, !tbaa !2448
  %82 = icmp eq i64 %63, 0
  %83 = zext i1 %82 to i8
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %83, i8* %84, align 1, !tbaa !2449
  %85 = lshr i64 %63, 63
  %86 = trunc i64 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %86, i8* %87, align 1, !tbaa !2450
  %88 = lshr i64 %60, 63
  %89 = xor i64 %85, %88
  %90 = add nuw nsw i64 %89, %85
  %91 = icmp eq i64 %90, 2
  %92 = zext i1 %91 to i8
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %92, i8* %93, align 1, !tbaa !2451
  %94 = load i64, i64* %RAX
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 6
  store i64 %96, i64* %PC
  %97 = and i64 65535, %94
  store i64 %97, i64* %RAX, align 8, !tbaa !2428
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %98, align 1, !tbaa !2433
  %99 = trunc i64 %97 to i32
  %100 = and i32 %99, 255
  %101 = call i32 @llvm.ctpop.i32(i32 %100) #16
  %102 = trunc i32 %101 to i8
  %103 = and i8 %102, 1
  %104 = xor i8 %103, 1
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %104, i8* %105, align 1, !tbaa !2447
  %106 = icmp eq i64 %97, 0
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %107, i8* %108, align 1, !tbaa !2449
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %109, align 1, !tbaa !2450
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %110, align 1, !tbaa !2451
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %111, align 1, !tbaa !2448
  %112 = load i64, i64* %RAX
  %113 = load i64, i64* %PC
  %114 = add i64 %113, 8
  store i64 %114, i64* %PC
  store i64 %112, i64* bitcast (%seed_type* @seed to i64*)
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 8
  store i64 %116, i64* %PC
  %117 = load i64, i64* bitcast (%seed_type* @seed to i64*)
  store i64 %117, i64* %RAX, align 8, !tbaa !2428
  %118 = load i32, i32* %EAX
  %119 = zext i32 %118 to i64
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 2
  store i64 %121, i64* %PC
  %122 = and i64 %119, 4294967295
  store i64 %122, i64* %RCX, align 8, !tbaa !2428
  %123 = load i32, i32* %ECX
  %124 = zext i32 %123 to i64
  %125 = load i64, i64* %PC
  %126 = add i64 %125, 2
  store i64 %126, i64* %PC
  %127 = and i64 %124, 4294967295
  store i64 %127, i64* %RAX, align 8, !tbaa !2428
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 1
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = add i64 %131, 8
  %133 = inttoptr i64 %131 to i64*
  %134 = load i64, i64* %133
  store i64 %134, i64* %RBP, align 8, !tbaa !2428
  store i64 %132, i64* %130, align 8, !tbaa !2428
  %135 = load i64, i64* %PC
  %136 = add i64 %135, 1
  store i64 %136, i64* %PC
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %139 = load i64, i64* %138, align 8, !tbaa !2428
  %140 = inttoptr i64 %139 to i64*
  %141 = load i64, i64* %140
  store i64 %141, i64* %137, align 8, !tbaa !2428
  %142 = add i64 %139, 8
  store i64 %142, i64* %138, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400430__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400430:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_401280_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401280:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 13
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RSP = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 15
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RBP = bitcast %union.anon* %17 to i64*
  %18 = load i64, i64* %RBP
  %19 = load i64, i64* %PC
  %20 = add i64 %19, 1
  store i64 %20, i64* %PC
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %22 = load i64, i64* %21, align 8, !tbaa !2428
  %23 = add i64 %22, -8
  %24 = inttoptr i64 %23 to i64*
  store i64 %18, i64* %24
  store i64 %23, i64* %21, align 8, !tbaa !2428
  %25 = load i64, i64* %RSP
  %26 = load i64, i64* %PC
  %27 = add i64 %26, 3
  store i64 %27, i64* %PC
  store i64 %25, i64* %RBP, align 8, !tbaa !2428
  %28 = load i64, i64* %RSP
  %29 = load i64, i64* %PC
  %30 = add i64 %29, 4
  store i64 %30, i64* %PC
  %31 = sub i64 %28, 16
  store i64 %31, i64* %RSP, align 8, !tbaa !2428
  %32 = icmp ult i64 %28, 16
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %33, i8* %34, align 1, !tbaa !2433
  %35 = trunc i64 %31 to i32
  %36 = and i32 %35, 255
  %37 = call i32 @llvm.ctpop.i32(i32 %36) #16
  %38 = trunc i32 %37 to i8
  %39 = and i8 %38, 1
  %40 = xor i8 %39, 1
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %40, i8* %41, align 1, !tbaa !2447
  %42 = xor i64 16, %28
  %43 = xor i64 %42, %31
  %44 = lshr i64 %43, 4
  %45 = trunc i64 %44 to i8
  %46 = and i8 %45, 1
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %46, i8* %47, align 1, !tbaa !2448
  %48 = icmp eq i64 %31, 0
  %49 = zext i1 %48 to i8
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %49, i8* %50, align 1, !tbaa !2449
  %51 = lshr i64 %31, 63
  %52 = trunc i64 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %52, i8* %53, align 1, !tbaa !2450
  %54 = lshr i64 %28, 63
  %55 = xor i64 %51, %54
  %56 = add nuw nsw i64 %55, %54
  %57 = icmp eq i64 %56, 2
  %58 = zext i1 %57 to i8
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %58, i8* %59, align 1, !tbaa !2451
  %60 = load i64, i64* %RBP
  %61 = sub i64 %60, 4
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 7
  store i64 %63, i64* %PC
  %64 = inttoptr i64 %61 to i32*
  store i32 0, i32* %64
  %65 = load i64, i64* %RBP
  %66 = sub i64 %65, 8
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 7
  store i64 %68, i64* %PC
  %69 = inttoptr i64 %66 to i32*
  store i32 0, i32* %69
  br label %block_401296

block_4012b3:                                     ; preds = %block_401296
  %70 = load i64, i64* %RAX
  %71 = load i32, i32* %EAX
  %72 = zext i32 %71 to i64
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = xor i64 %72, %70
  %76 = trunc i64 %75 to i32
  %77 = and i64 %75, 4294967295
  store i64 %77, i64* %RAX, align 8, !tbaa !2428
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %78, align 1, !tbaa !2433
  %79 = and i32 %76, 255
  %80 = call i32 @llvm.ctpop.i32(i32 %79) #16
  %81 = trunc i32 %80 to i8
  %82 = and i8 %81, 1
  %83 = xor i8 %82, 1
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %83, i8* %84, align 1, !tbaa !2447
  %85 = icmp eq i32 %76, 0
  %86 = zext i1 %85 to i8
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %86, i8* %87, align 1, !tbaa !2449
  %88 = lshr i32 %76, 31
  %89 = trunc i32 %88 to i8
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %89, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %91, align 1, !tbaa !2451
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %92, align 1, !tbaa !2448
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 16, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 16
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2433
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2447
  %109 = xor i64 16, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2450
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2451
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %130 = load i64, i64* %129, align 8, !tbaa !2428
  %131 = add i64 %130, 8
  %132 = inttoptr i64 %130 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %RBP, align 8, !tbaa !2428
  store i64 %131, i64* %129, align 8, !tbaa !2428
  %134 = load i64, i64* %PC
  %135 = add i64 %134, 1
  store i64 %135, i64* %PC
  %136 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %138 = load i64, i64* %137, align 8, !tbaa !2428
  %139 = inttoptr i64 %138 to i64*
  %140 = load i64, i64* %139
  store i64 %140, i64* %136, align 8, !tbaa !2428
  %141 = add i64 %138, 8
  store i64 %141, i64* %137, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_401296:                                     ; preds = %block_4012a0, %block_401280
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_401280 ], [ %207, %block_4012a0 ]
  %142 = load i64, i64* %RBP
  %143 = sub i64 %142, 8
  %144 = load i64, i64* %PC
  %145 = add i64 %144, 4
  store i64 %145, i64* %PC
  %146 = inttoptr i64 %143 to i32*
  %147 = load i32, i32* %146
  %148 = sub i32 %147, 100
  %149 = icmp ult i32 %147, 100
  %150 = zext i1 %149 to i8
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %150, i8* %151, align 1, !tbaa !2433
  %152 = and i32 %148, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2447
  %158 = xor i32 %147, 100
  %159 = xor i32 %158, %148
  %160 = lshr i32 %159, 4
  %161 = trunc i32 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2448
  %164 = icmp eq i32 %148, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2449
  %167 = lshr i32 %148, 31
  %168 = trunc i32 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2450
  %170 = lshr i32 %147, 31
  %171 = xor i32 %167, %170
  %172 = add nuw nsw i32 %171, %170
  %173 = icmp eq i32 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2451
  %176 = load i64, i64* %PC
  %177 = add i64 %176, 25
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 6
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 6
  store i64 %181, i64* %PC
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %183 = load i8, i8* %182, align 1, !tbaa !2450
  %184 = icmp ne i8 %183, 0
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %186 = load i8, i8* %185, align 1, !tbaa !2451
  %187 = icmp ne i8 %186, 0
  %188 = xor i1 %184, %187
  %189 = xor i1 %188, true
  %190 = zext i1 %189 to i8
  store i8 %190, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %192 = select i1 %188, i64 %179, i64 %177
  store i64 %192, i64* %191, align 8, !tbaa !2428
  %193 = load i8, i8* %BRANCH_TAKEN
  %194 = icmp eq i8 %193, 1
  br i1 %194, label %block_4012b3, label %block_4012a0

block_4012a0:                                     ; preds = %block_401296
  %195 = load i64, i64* %PC
  %196 = sub i64 %195, 2656
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 5
  store i64 %200, i64* %PC
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %202 = load i64, i64* %201, align 8, !tbaa !2428
  %203 = add i64 %202, -8
  %204 = inttoptr i64 %203 to i64*
  store i64 %198, i64* %204
  store i64 %203, i64* %201, align 8, !tbaa !2428
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %196, i64* %205, align 8, !tbaa !2428
  %206 = load i64, i64* %PC
  %207 = call %struct.Memory* @sub_400840_Puzzle_renamed_(%struct.State* %0, i64 %206, %struct.Memory* %MEMORY.0)
  %208 = load i64, i64* %RBP
  %209 = sub i64 %208, 8
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 3
  store i64 %211, i64* %PC
  %212 = inttoptr i64 %209 to i32*
  %213 = load i32, i32* %212
  %214 = zext i32 %213 to i64
  store i64 %214, i64* %RAX, align 8, !tbaa !2428
  %215 = load i64, i64* %RAX
  %216 = load i64, i64* %PC
  %217 = add i64 %216, 3
  store i64 %217, i64* %PC
  %218 = trunc i64 %215 to i32
  %219 = add i32 1, %218
  %220 = zext i32 %219 to i64
  store i64 %220, i64* %RAX, align 8, !tbaa !2428
  %221 = icmp ult i32 %219, %218
  %222 = icmp ult i32 %219, 1
  %223 = or i1 %221, %222
  %224 = zext i1 %223 to i8
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %224, i8* %225, align 1, !tbaa !2433
  %226 = and i32 %219, 255
  %227 = call i32 @llvm.ctpop.i32(i32 %226) #16
  %228 = trunc i32 %227 to i8
  %229 = and i8 %228, 1
  %230 = xor i8 %229, 1
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %230, i8* %231, align 1, !tbaa !2447
  %232 = xor i64 1, %215
  %233 = trunc i64 %232 to i32
  %234 = xor i32 %233, %219
  %235 = lshr i32 %234, 4
  %236 = trunc i32 %235 to i8
  %237 = and i8 %236, 1
  %238 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %237, i8* %238, align 1, !tbaa !2448
  %239 = icmp eq i32 %219, 0
  %240 = zext i1 %239 to i8
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %240, i8* %241, align 1, !tbaa !2449
  %242 = lshr i32 %219, 31
  %243 = trunc i32 %242 to i8
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %243, i8* %244, align 1, !tbaa !2450
  %245 = lshr i32 %218, 31
  %246 = xor i32 %242, %245
  %247 = add nuw nsw i32 %246, %242
  %248 = icmp eq i32 %247, 2
  %249 = zext i1 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %249, i8* %250, align 1, !tbaa !2451
  %251 = load i64, i64* %RBP
  %252 = sub i64 %251, 8
  %253 = load i32, i32* %EAX
  %254 = zext i32 %253 to i64
  %255 = load i64, i64* %PC
  %256 = add i64 %255, 3
  store i64 %256, i64* %PC
  %257 = inttoptr i64 %252 to i32*
  store i32 %253, i32* %257
  %258 = load i64, i64* %PC
  %259 = sub i64 %258, 24
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 5
  store i64 %261, i64* %PC
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %259, i64* %262, align 8, !tbaa !2428
  br label %block_401296
}

; Function Attrs: noinline
define %struct.Memory* @sub_400400__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400400:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2433
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2447
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2449
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2450
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2451
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2448
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2433
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2447
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2449
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2450
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2451
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2448
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_401330___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_4012c0___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_601ff0__got_type, %seg_601ff0__got_type* @seg_601ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_619230___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004b0___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2433
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2447
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2448
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2449
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2450
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2451
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2449
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_4004d0, label %block_4004b9

block_4004d0:                                     ; preds = %block_4004b0
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_4004b9:                                     ; preds = %block_4004b0
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400440_deregister_tm_clones_renamed_(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%__bss_start_type, %__bss_start_type* @__bss_start, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_4003c8__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4003c8:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2433
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2450
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2451
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_601ff0__got_type* @seg_601ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2433
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2447
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2449
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2450
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2451
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2448
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2449
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_4003da, label %block_4003d8

block_4003d8:                                     ; preds = %block_4003c8
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_4003da

block_4003da:                                     ; preds = %block_4003d8, %block_4003c8
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4003c8 ], [ %92, %block_4003d8 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2433
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2447
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2448
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2449
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2450
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2451
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_401330___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401330:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004f0_Initrand(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 12
  store i64 %23, i64* %PC
  store i64 74755, i64* bitcast (%seed_type* @seed to i64*)
  %24 = load i64, i64* %PC
  %25 = add i64 %24, 1
  store i64 %25, i64* %PC
  %26 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %27 = load i64, i64* %26, align 8, !tbaa !2428
  %28 = add i64 %27, 8
  %29 = inttoptr i64 %27 to i64*
  %30 = load i64, i64* %29
  store i64 %30, i64* %RBP, align 8, !tbaa !2428
  store i64 %28, i64* %26, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %35 = load i64, i64* %34, align 8, !tbaa !2428
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36
  store i64 %37, i64* %33, align 8, !tbaa !2428
  %38 = add i64 %35, 8
  store i64 %38, i64* %34, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4006d0_Remove(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4006d0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %ESI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %EDI = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 5
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RCX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = load i64, i64* %RBP
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 1
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %34 = load i64, i64* %33, align 8, !tbaa !2428
  %35 = add i64 %34, -8
  %36 = inttoptr i64 %35 to i64*
  store i64 %30, i64* %36
  store i64 %35, i64* %33, align 8, !tbaa !2428
  %37 = load i64, i64* %RSP
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 3
  store i64 %39, i64* %PC
  store i64 %37, i64* %RBP, align 8, !tbaa !2428
  %40 = load i64, i64* %RBP
  %41 = sub i64 %40, 4
  %42 = load i32, i32* %EDI
  %43 = zext i32 %42 to i64
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 3
  store i64 %45, i64* %PC
  %46 = inttoptr i64 %41 to i32*
  store i32 %42, i32* %46
  %47 = load i64, i64* %RBP
  %48 = sub i64 %47, 8
  %49 = load i32, i32* %ESI
  %50 = zext i32 %49 to i64
  %51 = load i64, i64* %PC
  %52 = add i64 %51, 3
  store i64 %52, i64* %PC
  %53 = inttoptr i64 %48 to i32*
  store i32 %49, i32* %53
  %54 = load i64, i64* %RBP
  %55 = sub i64 %54, 12
  %56 = load i64, i64* %PC
  %57 = add i64 %56, 7
  store i64 %57, i64* %PC
  %58 = inttoptr i64 %55 to i32*
  store i32 0, i32* %58
  br label %block_4006e1

block_40073f:                                     ; preds = %block_4006e1
  %59 = load i64, i64* %RBP
  %60 = sub i64 %59, 4
  %61 = load i64, i64* %PC
  %62 = add i64 %61, 4
  store i64 %62, i64* %PC
  %63 = inttoptr i64 %60 to i32*
  %64 = load i32, i32* %63
  %65 = sext i32 %64 to i64
  store i64 %65, i64* %RAX, align 8, !tbaa !2428
  %66 = load i64, i64* %RAX
  %67 = mul i64 %66, 4
  %68 = add i64 %67, ptrtoint (%class_type* @class to i64)
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 8
  store i64 %70, i64* %PC
  %71 = inttoptr i64 %68 to i32*
  %72 = load i32, i32* %71
  %73 = sext i32 %72 to i64
  store i64 %73, i64* %RAX, align 8, !tbaa !2428
  %74 = load i64, i64* %RAX
  %75 = mul i64 %74, 4
  %76 = add i64 %75, ptrtoint (%piececount_type* @piececount to i64)
  %77 = load i64, i64* %PC
  %78 = add i64 %77, 7
  store i64 %78, i64* %PC
  %79 = inttoptr i64 %76 to i32*
  %80 = load i32, i32* %79
  %81 = zext i32 %80 to i64
  store i64 %81, i64* %RCX, align 8, !tbaa !2428
  %82 = load i64, i64* %RCX
  %83 = load i64, i64* %PC
  %84 = add i64 %83, 3
  store i64 %84, i64* %PC
  %85 = trunc i64 %82 to i32
  %86 = add i32 1, %85
  %87 = zext i32 %86 to i64
  store i64 %87, i64* %RCX, align 8, !tbaa !2428
  %88 = icmp ult i32 %86, %85
  %89 = icmp ult i32 %86, 1
  %90 = or i1 %88, %89
  %91 = zext i1 %90 to i8
  %92 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %91, i8* %92, align 1, !tbaa !2433
  %93 = and i32 %86, 255
  %94 = call i32 @llvm.ctpop.i32(i32 %93) #16
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 1
  %97 = xor i8 %96, 1
  %98 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %97, i8* %98, align 1, !tbaa !2447
  %99 = xor i64 1, %82
  %100 = trunc i64 %99 to i32
  %101 = xor i32 %100, %86
  %102 = lshr i32 %101, 4
  %103 = trunc i32 %102 to i8
  %104 = and i8 %103, 1
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %104, i8* %105, align 1, !tbaa !2448
  %106 = icmp eq i32 %86, 0
  %107 = zext i1 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %107, i8* %108, align 1, !tbaa !2449
  %109 = lshr i32 %86, 31
  %110 = trunc i32 %109 to i8
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %110, i8* %111, align 1, !tbaa !2450
  %112 = lshr i32 %85, 31
  %113 = xor i32 %109, %112
  %114 = add nuw nsw i32 %113, %109
  %115 = icmp eq i32 %114, 2
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %116, i8* %117, align 1, !tbaa !2451
  %118 = load i64, i64* %RBP
  %119 = sub i64 %118, 4
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 4
  store i64 %121, i64* %PC
  %122 = inttoptr i64 %119 to i32*
  %123 = load i32, i32* %122
  %124 = sext i32 %123 to i64
  store i64 %124, i64* %RAX, align 8, !tbaa !2428
  %125 = load i64, i64* %RAX
  %126 = mul i64 %125, 4
  %127 = add i64 %126, ptrtoint (%class_type* @class to i64)
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 8
  store i64 %129, i64* %PC
  %130 = inttoptr i64 %127 to i32*
  %131 = load i32, i32* %130
  %132 = sext i32 %131 to i64
  store i64 %132, i64* %RAX, align 8, !tbaa !2428
  %133 = load i64, i64* %RAX
  %134 = mul i64 %133, 4
  %135 = add i64 %134, ptrtoint (%piececount_type* @piececount to i64)
  %136 = load i32, i32* %ECX
  %137 = zext i32 %136 to i64
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 7
  store i64 %139, i64* %PC
  %140 = inttoptr i64 %135 to i32*
  store i32 %136, i32* %140
  %141 = load i64, i64* %PC
  %142 = add i64 %141, 1
  store i64 %142, i64* %PC
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %144 = load i64, i64* %143, align 8, !tbaa !2428
  %145 = add i64 %144, 8
  %146 = inttoptr i64 %144 to i64*
  %147 = load i64, i64* %146
  store i64 %147, i64* %RBP, align 8, !tbaa !2428
  store i64 %145, i64* %143, align 8, !tbaa !2428
  %148 = load i64, i64* %PC
  %149 = add i64 %148, 1
  store i64 %149, i64* %PC
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %152 = load i64, i64* %151, align 8, !tbaa !2428
  %153 = inttoptr i64 %152 to i64*
  %154 = load i64, i64* %153
  store i64 %154, i64* %150, align 8, !tbaa !2428
  %155 = add i64 %152, 8
  store i64 %155, i64* %151, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.1

block_4006f5:                                     ; preds = %block_4006e1
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 10
  store i64 %157, i64* %PC
  store i64 ptrtoint (%p_type* @p to i64), i64* %RAX, align 8, !tbaa !2428
  %158 = load i64, i64* %RBP
  %159 = sub i64 %158, 4
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 4
  store i64 %161, i64* %PC
  %162 = inttoptr i64 %159 to i32*
  %163 = load i32, i32* %162
  %164 = sext i32 %163 to i64
  store i64 %164, i64* %RCX, align 8, !tbaa !2428
  %165 = load i64, i64* %RCX
  %166 = load i64, i64* %PC
  %167 = add i64 %166, 4
  store i64 %167, i64* %PC
  %168 = shl i64 %165, 10
  %169 = icmp slt i64 %168, 0
  %170 = shl i64 %168, 1
  store i64 %170, i64* %RCX, align 8, !tbaa !2428
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %172 = zext i1 %169 to i8
  store i8 %172, i8* %171, align 1, !tbaa !2432
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %174 = trunc i64 %170 to i32
  %175 = and i32 %174, 254
  %176 = call i32 @llvm.ctpop.i32(i32 %175) #16
  %177 = trunc i32 %176 to i8
  %178 = and i8 %177, 1
  %179 = xor i8 %178, 1
  store i8 %179, i8* %173, align 1, !tbaa !2432
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %180, align 1, !tbaa !2432
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %182 = icmp eq i64 %170, 0
  %183 = zext i1 %182 to i8
  store i8 %183, i8* %181, align 1, !tbaa !2432
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %185 = lshr i64 %170, 63
  %186 = trunc i64 %185 to i8
  store i8 %186, i8* %184, align 1, !tbaa !2432
  %187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %187, align 1, !tbaa !2432
  %188 = load i64, i64* %RAX
  %189 = load i64, i64* %RCX
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 3
  store i64 %191, i64* %PC
  %192 = add i64 %189, %188
  store i64 %192, i64* %RAX, align 8, !tbaa !2428
  %193 = icmp ult i64 %192, %188
  %194 = icmp ult i64 %192, %189
  %195 = or i1 %193, %194
  %196 = zext i1 %195 to i8
  %197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %196, i8* %197, align 1, !tbaa !2433
  %198 = trunc i64 %192 to i32
  %199 = and i32 %198, 255
  %200 = call i32 @llvm.ctpop.i32(i32 %199) #16
  %201 = trunc i32 %200 to i8
  %202 = and i8 %201, 1
  %203 = xor i8 %202, 1
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %203, i8* %204, align 1, !tbaa !2447
  %205 = xor i64 %189, %188
  %206 = xor i64 %205, %192
  %207 = lshr i64 %206, 4
  %208 = trunc i64 %207 to i8
  %209 = and i8 %208, 1
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %209, i8* %210, align 1, !tbaa !2448
  %211 = icmp eq i64 %192, 0
  %212 = zext i1 %211 to i8
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %212, i8* %213, align 1, !tbaa !2449
  %214 = lshr i64 %192, 63
  %215 = trunc i64 %214 to i8
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %215, i8* %216, align 1, !tbaa !2450
  %217 = lshr i64 %188, 63
  %218 = lshr i64 %189, 63
  %219 = xor i64 %214, %217
  %220 = xor i64 %214, %218
  %221 = add nuw nsw i64 %219, %220
  %222 = icmp eq i64 %221, 2
  %223 = zext i1 %222 to i8
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %223, i8* %224, align 1, !tbaa !2451
  %225 = load i64, i64* %RBP
  %226 = sub i64 %225, 12
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = inttoptr i64 %226 to i32*
  %230 = load i32, i32* %229
  %231 = sext i32 %230 to i64
  store i64 %231, i64* %RCX, align 8, !tbaa !2428
  %232 = load i64, i64* %RAX
  %233 = load i64, i64* %RCX
  %234 = mul i64 %233, 4
  %235 = add i64 %234, %232
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 4
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %235 to i32*
  %239 = load i32, i32* %238
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %240, align 1, !tbaa !2433
  %241 = and i32 %239, 255
  %242 = call i32 @llvm.ctpop.i32(i32 %241) #16
  %243 = trunc i32 %242 to i8
  %244 = and i8 %243, 1
  %245 = xor i8 %244, 1
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %245, i8* %246, align 1, !tbaa !2447
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %247, align 1, !tbaa !2448
  %248 = icmp eq i32 %239, 0
  %249 = zext i1 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %249, i8* %250, align 1, !tbaa !2449
  %251 = lshr i32 %239, 31
  %252 = trunc i32 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %252, i8* %253, align 1, !tbaa !2450
  %254 = lshr i32 %239, 31
  %255 = xor i32 %251, %254
  %256 = add nuw nsw i32 %255, %254
  %257 = icmp eq i32 %256, 2
  %258 = zext i1 %257 to i8
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %258, i8* %259, align 1, !tbaa !2451
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 26
  %262 = load i64, i64* %PC
  %263 = add i64 %262, 6
  %264 = load i64, i64* %PC
  %265 = add i64 %264, 6
  store i64 %265, i64* %PC
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %267 = load i8, i8* %266, align 1, !tbaa !2449
  store i8 %267, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %269 = icmp ne i8 %267, 0
  %270 = select i1 %269, i64 %261, i64 %263
  store i64 %270, i64* %268, align 8, !tbaa !2428
  %271 = load i8, i8* %BRANCH_TAKEN
  %272 = icmp eq i8 %271, 1
  br i1 %272, label %block_40072c, label %block_400718

block_40072c:                                     ; preds = %block_400718, %block_4006f5
  %MEMORY.0 = phi %struct.Memory* [ %MEMORY.1, %block_4006f5 ], [ %MEMORY.1, %block_400718 ]
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 5
  %275 = load i64, i64* %PC
  %276 = add i64 %275, 5
  store i64 %276, i64* %PC
  %277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %274, i64* %277, align 8, !tbaa !2428
  %278 = load i64, i64* %RBP
  %279 = sub i64 %278, 12
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 3
  store i64 %281, i64* %PC
  %282 = inttoptr i64 %279 to i32*
  %283 = load i32, i32* %282
  %284 = zext i32 %283 to i64
  store i64 %284, i64* %RAX, align 8, !tbaa !2428
  %285 = load i64, i64* %RAX
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 3
  store i64 %287, i64* %PC
  %288 = trunc i64 %285 to i32
  %289 = add i32 1, %288
  %290 = zext i32 %289 to i64
  store i64 %290, i64* %RAX, align 8, !tbaa !2428
  %291 = icmp ult i32 %289, %288
  %292 = icmp ult i32 %289, 1
  %293 = or i1 %291, %292
  %294 = zext i1 %293 to i8
  %295 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %294, i8* %295, align 1, !tbaa !2433
  %296 = and i32 %289, 255
  %297 = call i32 @llvm.ctpop.i32(i32 %296) #16
  %298 = trunc i32 %297 to i8
  %299 = and i8 %298, 1
  %300 = xor i8 %299, 1
  %301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %300, i8* %301, align 1, !tbaa !2447
  %302 = xor i64 1, %285
  %303 = trunc i64 %302 to i32
  %304 = xor i32 %303, %289
  %305 = lshr i32 %304, 4
  %306 = trunc i32 %305 to i8
  %307 = and i8 %306, 1
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %307, i8* %308, align 1, !tbaa !2448
  %309 = icmp eq i32 %289, 0
  %310 = zext i1 %309 to i8
  %311 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %310, i8* %311, align 1, !tbaa !2449
  %312 = lshr i32 %289, 31
  %313 = trunc i32 %312 to i8
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %313, i8* %314, align 1, !tbaa !2450
  %315 = lshr i32 %288, 31
  %316 = xor i32 %312, %315
  %317 = add nuw nsw i32 %316, %312
  %318 = icmp eq i32 %317, 2
  %319 = zext i1 %318 to i8
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %319, i8* %320, align 1, !tbaa !2451
  %321 = load i64, i64* %RBP
  %322 = sub i64 %321, 12
  %323 = load i32, i32* %EAX
  %324 = zext i32 %323 to i64
  %325 = load i64, i64* %PC
  %326 = add i64 %325, 3
  store i64 %326, i64* %PC
  %327 = inttoptr i64 %322 to i32*
  store i32 %323, i32* %327
  %328 = load i64, i64* %PC
  %329 = sub i64 %328, 89
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 5
  store i64 %331, i64* %PC
  %332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %329, i64* %332, align 8, !tbaa !2428
  br label %block_4006e1

block_400718:                                     ; preds = %block_4006f5
  %333 = load i64, i64* %RBP
  %334 = sub i64 %333, 8
  %335 = load i64, i64* %PC
  %336 = add i64 %335, 3
  store i64 %336, i64* %PC
  %337 = inttoptr i64 %334 to i32*
  %338 = load i32, i32* %337
  %339 = zext i32 %338 to i64
  store i64 %339, i64* %RAX, align 8, !tbaa !2428
  %340 = load i64, i64* %RAX
  %341 = load i64, i64* %RBP
  %342 = sub i64 %341, 12
  %343 = load i64, i64* %PC
  %344 = add i64 %343, 3
  store i64 %344, i64* %PC
  %345 = trunc i64 %340 to i32
  %346 = inttoptr i64 %342 to i32*
  %347 = load i32, i32* %346
  %348 = add i32 %347, %345
  %349 = zext i32 %348 to i64
  store i64 %349, i64* %RAX, align 8, !tbaa !2428
  %350 = icmp ult i32 %348, %345
  %351 = icmp ult i32 %348, %347
  %352 = or i1 %350, %351
  %353 = zext i1 %352 to i8
  %354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %353, i8* %354, align 1, !tbaa !2433
  %355 = and i32 %348, 255
  %356 = call i32 @llvm.ctpop.i32(i32 %355) #16
  %357 = trunc i32 %356 to i8
  %358 = and i8 %357, 1
  %359 = xor i8 %358, 1
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %359, i8* %360, align 1, !tbaa !2447
  %361 = xor i32 %347, %345
  %362 = xor i32 %361, %348
  %363 = lshr i32 %362, 4
  %364 = trunc i32 %363 to i8
  %365 = and i8 %364, 1
  %366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %365, i8* %366, align 1, !tbaa !2448
  %367 = icmp eq i32 %348, 0
  %368 = zext i1 %367 to i8
  %369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %368, i8* %369, align 1, !tbaa !2449
  %370 = lshr i32 %348, 31
  %371 = trunc i32 %370 to i8
  %372 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %371, i8* %372, align 1, !tbaa !2450
  %373 = lshr i32 %345, 31
  %374 = lshr i32 %347, 31
  %375 = xor i32 %370, %373
  %376 = xor i32 %370, %374
  %377 = add nuw nsw i32 %375, %376
  %378 = icmp eq i32 %377, 2
  %379 = zext i1 %378 to i8
  %380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %379, i8* %380, align 1, !tbaa !2451
  %381 = load i32, i32* %EAX
  %382 = zext i32 %381 to i64
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 3
  store i64 %384, i64* %PC
  %385 = shl i64 %382, 32
  %386 = ashr exact i64 %385, 32
  store i64 %386, i64* %RCX, align 8, !tbaa !2428
  %387 = load i64, i64* %RCX
  %388 = mul i64 %387, 4
  %389 = add i64 %388, ptrtoint (%puzzl_type* @puzzl to i64)
  %390 = load i64, i64* %PC
  %391 = add i64 %390, 11
  store i64 %391, i64* %PC
  %392 = inttoptr i64 %389 to i32*
  store i32 0, i32* %392
  br label %block_40072c

block_4006e1:                                     ; preds = %block_40072c, %block_4006d0
  %MEMORY.1 = phi %struct.Memory* [ %2, %block_4006d0 ], [ %MEMORY.0, %block_40072c ]
  %393 = load i64, i64* %RBP
  %394 = sub i64 %393, 12
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 3
  store i64 %396, i64* %PC
  %397 = inttoptr i64 %394 to i32*
  %398 = load i32, i32* %397
  %399 = zext i32 %398 to i64
  store i64 %399, i64* %RAX, align 8, !tbaa !2428
  %400 = load i64, i64* %RBP
  %401 = sub i64 %400, 4
  %402 = load i64, i64* %PC
  %403 = add i64 %402, 4
  store i64 %403, i64* %PC
  %404 = inttoptr i64 %401 to i32*
  %405 = load i32, i32* %404
  %406 = sext i32 %405 to i64
  store i64 %406, i64* %RCX, align 8, !tbaa !2428
  %407 = load i32, i32* %EAX
  %408 = zext i32 %407 to i64
  %409 = load i64, i64* %RCX
  %410 = mul i64 %409, 4
  %411 = add i64 %410, ptrtoint (%piecemax_type* @piecemax to i64)
  %412 = load i64, i64* %PC
  %413 = add i64 %412, 7
  store i64 %413, i64* %PC
  %414 = inttoptr i64 %411 to i32*
  %415 = load i32, i32* %414
  %416 = sub i32 %407, %415
  %417 = icmp ult i32 %407, %415
  %418 = zext i1 %417 to i8
  %419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %418, i8* %419, align 1, !tbaa !2433
  %420 = and i32 %416, 255
  %421 = call i32 @llvm.ctpop.i32(i32 %420) #16
  %422 = trunc i32 %421 to i8
  %423 = and i8 %422, 1
  %424 = xor i8 %423, 1
  %425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %424, i8* %425, align 1, !tbaa !2447
  %426 = xor i32 %415, %407
  %427 = xor i32 %426, %416
  %428 = lshr i32 %427, 4
  %429 = trunc i32 %428 to i8
  %430 = and i8 %429, 1
  %431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %430, i8* %431, align 1, !tbaa !2448
  %432 = icmp eq i32 %416, 0
  %433 = zext i1 %432 to i8
  %434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %433, i8* %434, align 1, !tbaa !2449
  %435 = lshr i32 %416, 31
  %436 = trunc i32 %435 to i8
  %437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %436, i8* %437, align 1, !tbaa !2450
  %438 = lshr i32 %407, 31
  %439 = lshr i32 %415, 31
  %440 = xor i32 %439, %438
  %441 = xor i32 %435, %438
  %442 = add nuw nsw i32 %441, %440
  %443 = icmp eq i32 %442, 2
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %444, i8* %445, align 1, !tbaa !2451
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 80
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 6
  %450 = load i64, i64* %PC
  %451 = add i64 %450, 6
  store i64 %451, i64* %PC
  %452 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %453 = load i8, i8* %452, align 1, !tbaa !2449
  %454 = icmp eq i8 %453, 0
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %456 = load i8, i8* %455, align 1, !tbaa !2450
  %457 = icmp ne i8 %456, 0
  %458 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %459 = load i8, i8* %458, align 1, !tbaa !2451
  %460 = icmp ne i8 %459, 0
  %461 = xor i1 %457, %460
  %462 = xor i1 %461, true
  %463 = and i1 %454, %462
  %464 = zext i1 %463 to i8
  store i8 %464, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %465 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %466 = select i1 %463, i64 %447, i64 %449
  store i64 %466, i64* %465, align 8, !tbaa !2428
  %467 = load i8, i8* %BRANCH_TAKEN
  %468 = icmp eq i8 %467, 1
  br i1 %468, label %block_40073f, label %block_4006f5
}

; Function Attrs: noinline
define %struct.Memory* @sub_401334__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_401334:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2433
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2447
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2448
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2449
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2450
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2451
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2433
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2447
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2450
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2451
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4012c0___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4012c0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_601df0__init_array_type* @seg_601df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_601df0__init_array_type* @seg_601df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2433
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2447
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2448
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2449
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2450
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2451
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2433
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2447
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2448
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2449
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2450
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2451
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2432
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2432
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2432
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2432
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2432
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2432
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 3876
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_4003c8__init_proc_renamed_(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2433
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2447
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2449
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2450
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2451
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2448
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2449
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_401316, label %block_4012f6

block_401316:                                     ; preds = %block_401300, %block_4012c0
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_4012c0 ], [ %387, %block_401300 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2433
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2447
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2448
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2449
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2450
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2451
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4012f6:                                     ; preds = %block_4012c0
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2433
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2447
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2449
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2450
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2451
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2448
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_401300

block_401300:                                     ; preds = %block_401300, %block_4012f6
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_4012f6 ], [ %387, %block_401300 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2433
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2447
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2448
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2449
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2450
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2451
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2433
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2447
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2448
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2449
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2450
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2451
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2449
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_401300, label %block_401316
}

; Function Attrs: noinline
define %struct.Memory* @sub_400440_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400440:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %37 = icmp ult i64 %33, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2433
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2447
  %47 = xor i64 ptrtoint (%__bss_start_type* @__bss_start to i64), %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2448
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2449
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2450
  %59 = lshr i64 %33, 63
  %60 = xor i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), %59
  %61 = xor i64 %56, %59
  %62 = add nuw nsw i64 %61, %60
  %63 = icmp eq i64 %62, 2
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %64, i8* %65, align 1, !tbaa !2451
  %66 = load i64, i64* %RSP
  %67 = load i64, i64* %PC
  %68 = add i64 %67, 3
  store i64 %68, i64* %PC
  store i64 %66, i64* %RBP, align 8, !tbaa !2428
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 25
  %71 = load i64, i64* %PC
  %72 = add i64 %71, 2
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 2
  store i64 %74, i64* %PC
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %76 = load i8, i8* %75, align 1, !tbaa !2449
  store i8 %76, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = icmp ne i8 %76, 0
  %79 = select i1 %78, i64 %70, i64 %72
  store i64 %79, i64* %77, align 8, !tbaa !2428
  %80 = load i8, i8* %BRANCH_TAKEN
  %81 = icmp eq i8 %80, 1
  br i1 %81, label %block_400468, label %block_400451

block_40045b:                                     ; preds = %block_400451
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 1
  store i64 %83, i64* %PC
  %84 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %85 = load i64, i64* %84, align 8, !tbaa !2428
  %86 = add i64 %85, 8
  %87 = inttoptr i64 %85 to i64*
  %88 = load i64, i64* %87
  store i64 %88, i64* %RBP, align 8, !tbaa !2428
  store i64 %86, i64* %84, align 8, !tbaa !2428
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 5
  store i64 %90, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %91 = load i64, i64* %RAX
  %92 = load i64, i64* %PC
  %93 = add i64 %92, 2
  store i64 %93, i64* %PC
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %91, i64* %94, align 8, !tbaa !2428
  %95 = load i64, i64* %PC
  switch i64 %95, label %163 [
    i64 4195434, label %block_40046a
    i64 4195427, label %block_400463
  ]

block_400451:                                     ; preds = %block_400440
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 5
  store i64 %97, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %RAX
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 3
  store i64 %101, i64* %PC
  %102 = and i64 %99, %98
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %103, align 1, !tbaa !2433
  %104 = trunc i64 %102 to i32
  %105 = and i32 %104, 255
  %106 = call i32 @llvm.ctpop.i32(i32 %105) #16
  %107 = trunc i32 %106 to i8
  %108 = and i8 %107, 1
  %109 = xor i8 %108, 1
  %110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %109, i8* %110, align 1, !tbaa !2447
  %111 = icmp eq i64 %102, 0
  %112 = zext i1 %111 to i8
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %112, i8* %113, align 1, !tbaa !2449
  %114 = lshr i64 %102, 63
  %115 = trunc i64 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %115, i8* %116, align 1, !tbaa !2450
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %118, align 1, !tbaa !2448
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 15
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 2
  %123 = load i64, i64* %PC
  %124 = add i64 %123, 2
  store i64 %124, i64* %PC
  %125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %126 = load i8, i8* %125, align 1, !tbaa !2449
  store i8 %126, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %128 = icmp ne i8 %126, 0
  %129 = select i1 %128, i64 %120, i64 %122
  store i64 %129, i64* %127, align 8, !tbaa !2428
  %130 = load i8, i8* %BRANCH_TAKEN
  %131 = icmp eq i8 %130, 1
  br i1 %131, label %block_400468, label %block_40045b

block_400468:                                     ; preds = %block_400463, %block_400451, %block_400440
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400440 ], [ %2, %block_400451 ], [ %2, %block_400463 ]
  %132 = load i64, i64* %PC
  %133 = add i64 %132, 1
  store i64 %133, i64* %PC
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %135 = load i64, i64* %134, align 8, !tbaa !2428
  %136 = add i64 %135, 8
  %137 = inttoptr i64 %135 to i64*
  %138 = load i64, i64* %137
  store i64 %138, i64* %RBP, align 8, !tbaa !2428
  store i64 %136, i64* %134, align 8, !tbaa !2428
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 1
  store i64 %140, i64* %PC
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %143 = load i64, i64* %142, align 8, !tbaa !2428
  %144 = inttoptr i64 %143 to i64*
  %145 = load i64, i64* %144
  store i64 %145, i64* %141, align 8, !tbaa !2428
  %146 = add i64 %143, 8
  store i64 %146, i64* %142, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_40046a:                                     ; preds = %block_40045b
  %147 = load i64, i64* %RAX
  %148 = load i64, i64* %RAX
  %149 = add i64 %148, %147
  %150 = load i16, i16* %AX
  %151 = zext i16 %150 to i64
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 6
  store i64 %153, i64* %PC
  %154 = load i64, i64* %PC
  %155 = tail call %struct.Memory* @sub_400470_register_tm_clones(%struct.State* %0, i64 %154, %struct.Memory* %2)
  ret %struct.Memory* %155

block_400463:                                     ; preds = %block_40045b
  %156 = load i64, i64* %RAX
  %157 = load i64, i64* %RAX
  %158 = add i64 %157, %156
  %159 = load i32, i32* %EAX
  %160 = zext i32 %159 to i64
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 5
  store i64 %162, i64* %PC
  br label %block_400468

; <label>:163:                                    ; preds = %block_40045b
  %164 = load i64, i64* %PC
  %165 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %164, %struct.Memory* %2)
  ret %struct.Memory* %165
}

; Function Attrs: noinline
define %struct.Memory* @sub_400470_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400470:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, ptrtoint (%__bss_start_type* @__bss_start to i64)
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, ptrtoint (%__bss_start_type* @__bss_start to i64)
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2433
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2447
  %50 = xor i64 ptrtoint (%__bss_start_type* @__bss_start to i64), %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2450
  %62 = lshr i64 %36, 63
  %63 = xor i64 lshr (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 63), %62
  %64 = xor i64 %59, %62
  %65 = add nuw nsw i64 %64, %63
  %66 = icmp eq i64 %65, 2
  %67 = zext i1 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %67, i8* %68, align 1, !tbaa !2451
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RBP, align 8, !tbaa !2428
  %72 = load i64, i64* %RSI
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = ashr i64 %72, 2
  %76 = trunc i64 %75 to i8
  %77 = and i8 %76, 1
  %78 = ashr i64 %75, 1
  store i64 %78, i64* %RSI, align 8, !tbaa !2428
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %77, i8* %79, align 1, !tbaa !2432
  %80 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %81 = trunc i64 %78 to i32
  %82 = and i32 %81, 255
  %83 = call i32 @llvm.ctpop.i32(i32 %82) #16
  %84 = trunc i32 %83 to i8
  %85 = and i8 %84, 1
  %86 = xor i8 %85, 1
  store i8 %86, i8* %80, align 1, !tbaa !2432
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %87, align 1, !tbaa !2432
  %88 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %89 = icmp eq i64 %78, 0
  %90 = zext i1 %89 to i8
  store i8 %90, i8* %88, align 1, !tbaa !2432
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %92 = lshr i64 %78, 63
  %93 = trunc i64 %92 to i8
  store i8 %93, i8* %91, align 1, !tbaa !2432
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %94, align 1, !tbaa !2432
  %95 = load i64, i64* %RSI
  %96 = load i64, i64* %PC
  %97 = add i64 %96, 3
  store i64 %97, i64* %PC
  store i64 %95, i64* %RAX, align 8, !tbaa !2428
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 4
  store i64 %100, i64* %PC
  %101 = lshr i64 %98, 62
  %102 = trunc i64 %101 to i8
  %103 = and i8 %102, 1
  %104 = lshr i64 %101, 1
  store i64 %104, i64* %RAX, align 8, !tbaa !2428
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %103, i8* %105, align 1, !tbaa !2432
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %107 = trunc i64 %104 to i32
  %108 = and i32 %107, 255
  %109 = call i32 @llvm.ctpop.i32(i32 %108) #16
  %110 = trunc i32 %109 to i8
  %111 = and i8 %110, 1
  %112 = xor i8 %111, 1
  store i8 %112, i8* %106, align 1, !tbaa !2432
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %113, align 1, !tbaa !2432
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %115 = icmp eq i64 %104, 0
  %116 = zext i1 %115 to i8
  store i8 %116, i8* %114, align 1, !tbaa !2432
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %117, align 1, !tbaa !2432
  %118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %118, align 1, !tbaa !2432
  %119 = load i64, i64* %RSI
  %120 = load i64, i64* %RAX
  %121 = load i64, i64* %PC
  %122 = add i64 %121, 3
  store i64 %122, i64* %PC
  %123 = add i64 %120, %119
  store i64 %123, i64* %RSI, align 8, !tbaa !2428
  %124 = icmp ult i64 %123, %119
  %125 = icmp ult i64 %123, %120
  %126 = or i1 %124, %125
  %127 = zext i1 %126 to i8
  %128 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %127, i8* %128, align 1, !tbaa !2433
  %129 = trunc i64 %123 to i32
  %130 = and i32 %129, 255
  %131 = call i32 @llvm.ctpop.i32(i32 %130) #16
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 1
  %134 = xor i8 %133, 1
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %134, i8* %135, align 1, !tbaa !2447
  %136 = xor i64 %120, %119
  %137 = xor i64 %136, %123
  %138 = lshr i64 %137, 4
  %139 = trunc i64 %138 to i8
  %140 = and i8 %139, 1
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %140, i8* %141, align 1, !tbaa !2448
  %142 = icmp eq i64 %123, 0
  %143 = zext i1 %142 to i8
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %143, i8* %144, align 1, !tbaa !2449
  %145 = lshr i64 %123, 63
  %146 = trunc i64 %145 to i8
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %146, i8* %147, align 1, !tbaa !2450
  %148 = lshr i64 %119, 63
  %149 = lshr i64 %120, 63
  %150 = xor i64 %145, %148
  %151 = xor i64 %145, %149
  %152 = add nuw nsw i64 %150, %151
  %153 = icmp eq i64 %152, 2
  %154 = zext i1 %153 to i8
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %154, i8* %155, align 1, !tbaa !2451
  %156 = load i64, i64* %RSI
  %157 = load i64, i64* %PC
  %158 = add i64 %157, 3
  store i64 %158, i64* %PC
  %159 = trunc i64 %156 to i8
  %160 = and i8 %159, 1
  %161 = ashr i64 %156, 1
  store i64 %161, i64* %RSI, align 8, !tbaa !2428
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %160, i8* %162, align 1, !tbaa !2432
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %164 = trunc i64 %161 to i32
  %165 = and i32 %164, 255
  %166 = call i32 @llvm.ctpop.i32(i32 %165) #16
  %167 = trunc i32 %166 to i8
  %168 = and i8 %167, 1
  %169 = xor i8 %168, 1
  store i8 %169, i8* %163, align 1, !tbaa !2432
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %170, align 1, !tbaa !2432
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %172 = icmp eq i64 %161, 0
  %173 = zext i1 %172 to i8
  store i8 %173, i8* %171, align 1, !tbaa !2432
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %175 = lshr i64 %161, 63
  %176 = trunc i64 %175 to i8
  store i8 %176, i8* %174, align 1, !tbaa !2432
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %177, align 1, !tbaa !2432
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 23
  %180 = load i64, i64* %PC
  %181 = add i64 %180, 2
  %182 = load i64, i64* %PC
  %183 = add i64 %182, 2
  store i64 %183, i64* %PC
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %185 = load i8, i8* %184, align 1, !tbaa !2449
  store i8 %185, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %187 = icmp ne i8 %185, 0
  %188 = select i1 %187, i64 %179, i64 %181
  store i64 %188, i64* %186, align 8, !tbaa !2428
  %189 = load i8, i8* %BRANCH_TAKEN
  %190 = icmp eq i8 %189, 1
  br i1 %190, label %block_4004a8, label %block_400493

block_40049d:                                     ; preds = %block_400493
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 1
  store i64 %192, i64* %PC
  %193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %194 = load i64, i64* %193, align 8, !tbaa !2428
  %195 = add i64 %194, 8
  %196 = inttoptr i64 %194 to i64*
  %197 = load i64, i64* %196
  store i64 %197, i64* %RBP, align 8, !tbaa !2428
  store i64 %195, i64* %193, align 8, !tbaa !2428
  %198 = load i64, i64* %PC
  %199 = add i64 %198, 5
  store i64 %199, i64* %PC
  store i64 and (i64 ptrtoint (%__bss_start_type* @__bss_start to i64), i64 4294967295), i64* %RDI, align 8, !tbaa !2428
  %200 = load i64, i64* %RAX
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 2
  store i64 %202, i64* %PC
  %203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %203, align 8, !tbaa !2428
  %204 = load i64, i64* %PC
  switch i64 %204, label %270 [
    i64 4195498, label %block_4004aa
    i64 4195493, label %block_4004a5
  ]

block_4004aa:                                     ; preds = %block_40049d
  %205 = load i64, i64* %RAX
  %206 = load i64, i64* %RAX
  %207 = add i64 %206, %205
  %208 = load i16, i16* %AX
  %209 = zext i16 %208 to i64
  %210 = load i64, i64* %PC
  %211 = add i64 %210, 6
  store i64 %211, i64* %PC
  %212 = load i64, i64* %PC
  %213 = tail call %struct.Memory* @sub_4004b0___do_global_dtors_aux(%struct.State* %0, i64 %212, %struct.Memory* %2)
  ret %struct.Memory* %213

block_400493:                                     ; preds = %block_400470
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 5
  store i64 %215, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %RAX
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 3
  store i64 %219, i64* %PC
  %220 = and i64 %217, %216
  %221 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %221, align 1, !tbaa !2433
  %222 = trunc i64 %220 to i32
  %223 = and i32 %222, 255
  %224 = call i32 @llvm.ctpop.i32(i32 %223) #16
  %225 = trunc i32 %224 to i8
  %226 = and i8 %225, 1
  %227 = xor i8 %226, 1
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %227, i8* %228, align 1, !tbaa !2447
  %229 = icmp eq i64 %220, 0
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %230, i8* %231, align 1, !tbaa !2449
  %232 = lshr i64 %220, 63
  %233 = trunc i64 %232 to i8
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %233, i8* %234, align 1, !tbaa !2450
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %235, align 1, !tbaa !2451
  %236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %236, align 1, !tbaa !2448
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 13
  %239 = load i64, i64* %PC
  %240 = add i64 %239, 2
  %241 = load i64, i64* %PC
  %242 = add i64 %241, 2
  store i64 %242, i64* %PC
  %243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %244 = load i8, i8* %243, align 1, !tbaa !2449
  store i8 %244, i8* %BRANCH_TAKEN, align 1, !tbaa !2432
  %245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %246 = icmp ne i8 %244, 0
  %247 = select i1 %246, i64 %238, i64 %240
  store i64 %247, i64* %245, align 8, !tbaa !2428
  %248 = load i8, i8* %BRANCH_TAKEN
  %249 = icmp eq i8 %248, 1
  br i1 %249, label %block_4004a8, label %block_40049d

block_4004a8:                                     ; preds = %block_4004a5, %block_400493, %block_400470
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400470 ], [ %2, %block_400493 ], [ %2, %block_4004a5 ]
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 1
  store i64 %251, i64* %PC
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %253 = load i64, i64* %252, align 8, !tbaa !2428
  %254 = add i64 %253, 8
  %255 = inttoptr i64 %253 to i64*
  %256 = load i64, i64* %255
  store i64 %256, i64* %RBP, align 8, !tbaa !2428
  store i64 %254, i64* %252, align 8, !tbaa !2428
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 1
  store i64 %258, i64* %PC
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %261 = load i64, i64* %260, align 8, !tbaa !2428
  %262 = inttoptr i64 %261 to i64*
  %263 = load i64, i64* %262
  store i64 %263, i64* %259, align 8, !tbaa !2428
  %264 = add i64 %261, 8
  store i64 %264, i64* %260, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4004a5:                                     ; preds = %block_40049d
  %265 = load i64, i64* %RAX
  %266 = load i32, i32* %EAX
  %267 = zext i32 %266 to i64
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 3
  store i64 %269, i64* %PC
  br label %block_4004a8

; <label>:270:                                    ; preds = %block_40049d
  %271 = load i64, i64* %PC
  %272 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %271, %struct.Memory* %2)
  ret %struct.Memory* %272
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4004e0_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4004e0_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004e0_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4004b0___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004b0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4004b0___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004b0___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_619238_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_401330___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401330;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_401330___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401330___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4012c0___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4012c0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4012c0___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4012c0___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401280;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401280_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_619230___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Remove() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4006d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @Remove_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4006d0_Remove(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Place() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4005e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @Place_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4005e0_Place(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Trial() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400770;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @Trial_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400770_Trial(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x401334;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @10, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_401334__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Initrand() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4004f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @11, void ()** @2)
  ret void
}

define internal %struct.Memory* @Initrand_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4004f0_Initrand(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Puzzle() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400840;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @12, void ()** @2)
  ret void
}

define internal %struct.Memory* @Puzzle_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400840_Puzzle(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4003c8;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @13, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4003c8__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Rand() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400510;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @14, void ()** @2)
  ret void
}

define internal %struct.Memory* @Rand_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400510_Rand(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @Fit() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400550;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @15, void ()** @2)
  ret void
}

define internal %struct.Memory* @Fit_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400550_Fit(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_401330___libc_csu_fini()
  ret void
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_4012c0___libc_csu_init()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2430, !2430, i64 0}
!2433 = !{!2434, !2430, i64 2065}
!2434 = !{!"_ZTS5State", !2430, i64 16, !2435, i64 2064, !2430, i64 2080, !2436, i64 2088, !2438, i64 2112, !2440, i64 2208, !2441, i64 2480, !2442, i64 2608, !2443, i64 2736, !2430, i64 2760, !2430, i64 2768, !2444, i64 3280}
!2435 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2436 = !{!"_ZTS8Segments", !2437, i64 0, !2430, i64 2, !2437, i64 4, !2430, i64 6, !2437, i64 8, !2430, i64 10, !2437, i64 12, !2430, i64 14, !2437, i64 16, !2430, i64 18, !2437, i64 20, !2430, i64 22}
!2437 = !{!"short", !2430, i64 0}
!2438 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2439, i64 8, !2429, i64 16, !2439, i64 24, !2429, i64 32, !2439, i64 40, !2429, i64 48, !2439, i64 56, !2429, i64 64, !2439, i64 72, !2429, i64 80, !2439, i64 88}
!2439 = !{!"_ZTS3Reg", !2430, i64 0}
!2440 = !{!"_ZTS3GPR", !2429, i64 0, !2439, i64 8, !2429, i64 16, !2439, i64 24, !2429, i64 32, !2439, i64 40, !2429, i64 48, !2439, i64 56, !2429, i64 64, !2439, i64 72, !2429, i64 80, !2439, i64 88, !2429, i64 96, !2439, i64 104, !2429, i64 112, !2439, i64 120, !2429, i64 128, !2439, i64 136, !2429, i64 144, !2439, i64 152, !2429, i64 160, !2439, i64 168, !2429, i64 176, !2439, i64 184, !2429, i64 192, !2439, i64 200, !2429, i64 208, !2439, i64 216, !2429, i64 224, !2439, i64 232, !2429, i64 240, !2439, i64 248, !2429, i64 256, !2439, i64 264}
!2441 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2442 = !{!"_ZTS3MMX", !2430, i64 0}
!2443 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2444 = !{!"_ZTS13SegmentCaches", !2445, i64 0, !2445, i64 16, !2445, i64 32, !2445, i64 48, !2445, i64 64, !2445, i64 80}
!2445 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2446, i64 8, !2446, i64 12}
!2446 = !{!"int", !2430, i64 0}
!2447 = !{!2434, !2430, i64 2067}
!2448 = !{!2434, !2430, i64 2069}
!2449 = !{!2434, !2430, i64 2071}
!2450 = !{!2434, !2430, i64 2073}
!2451 = !{!2434, !2430, i64 2077}
