; ModuleID = 'binary/test.mcsema.calls_renamed.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_400400__init_type = type <{ [23 x i8] }>
%seg_400420__plt_type = type <{ [48 x i8] }>
%seg_400450__text_type = type <{ [8866 x i8] }>
%seg_4026f4__fini_type = type <{ [9 x i8] }>
%seg_402700__rodata_type = type <{ [248 x i8], [58 x i8], [48 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [28 x i8], [30 x i8], [30 x i8], [30 x i8], [30 x i8], [31 x i8] }>
%seg_402a5c__eh_frame_hdr_type = type <{ [68 x i8] }>
%seg_402aa0__eh_frame_type = type <{ [280 x i8] }>
%seg_602df0__init_array_type = type <{ i64, i64 }>
%seg_602ff0__got_type = type <{ i64, i64 }>
%seg_603000__got_plt_type = type <{ [24 x i8], i64, i64 }>
%seg_603028__data_type = type <{ [16 x i8] }>
%A0_type = type <{ [8 x i8] }>
%A1_0_type = type <{ [8 x i8] }>
%A2_0_type = type <{ [8 x i8] }>
%A3_type = type <{ [8 x i8] }>
%A4_type = type <{ [8 x i8] }>
%A5_type = type <{ [8 x i8] }>
%A6_type = type <{ [8 x i8] }>
%B0_type = type <{ [8 x i8] }>
%B1_0_type = type <{ [8 x i8] }>
%B2_type = type <{ [8 x i8] }>
%B3_type = type <{ [8 x i8] }>
%B4_type = type <{ [8 x i8] }>
%B5_type = type <{ [8 x i8] }>
%B6_type = type <{ [8 x i8] }>
%C0_type = type <{ [8 x i8] }>
%C1_0_type = type <{ [8 x i8] }>
%C2_type = type <{ [8 x i8] }>
%C3_type = type <{ [8 x i8] }>
%C4_type = type <{ [8 x i8] }>
%C5_type = type <{ [8 x i8] }>
%C6_type = type <{ [8 x i8] }>
%C7_type = type <{ [8 x i8] }>
%C8_type = type <{ [8 x i8] }>
%D1_0_type = type <{ [8 x i8] }>
%D2_0_type = type <{ [8 x i8] }>
%D3_type = type <{ [8 x i8] }>
%E2_0_type = type <{ [8 x i8] }>
%E3_type = type <{ [8 x i8] }>
%seg_603120__bss_type = type <{ [16 x i8] }>
%two_type = type <{ [8 x i8] }>
%five_type = type <{ [8 x i8] }>
%T_type = type <{ [288 x i8] }>
%sd_type = type <{ [8 x i8] }>
%sb_type = type <{ [8 x i8] }>
%piref_type = type <{ [8 x i8] }>
%pierr_type = type <{ [8 x i8] }>
%tnow_type = type <{ [16 x i8] }>
%nulltime_type = type <{ [8 x i8] }>
%four_type = type <{ [8 x i8] }>
%scale_type = type <{ [8 x i8] }>
%one_type = type <{ [8 x i8] }>
%sc_type = type <{ [8 x i8] }>
%sa_type = type <{ [8 x i8] }>
%three_type = type <{ [16 x i8] }>
%TimeArray_type = type <{ [24 x i8] }>
%piprg_type = type <{ [8 x i8] }>
%TLimit_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_400400__init = internal constant %seg_400400__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\ED+ \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400420__plt = internal constant %seg_400420__plt_type <{ [48 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\E2+ \00\00\00\00\00\00\00\00\00\00\00\FF%\DA+ \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400450__text = internal constant %seg_400450__text_type <{ [8866 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\F0&@\00H\C7\C1\80&@\00H\C7\C7@\05@\00\FF\15v+ \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B8\181`\00H=\181`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF\181`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE\181`\00UH\81\EE\181`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF\181`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=\19, \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05\07, \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\81\EC`\01\00\00H\BF0(@\00\00\00\00\00\C7E\FC\00\00\00\00\B0\00\E8\CD\FE\FF\FFH\BF\F8'@\00\00\00\00\00\89E\A4\B0\00\E8\B9\FE\FF\FFH\BF2(@\00\00\00\00\00\F2\0F\10\05\7F!\00\00\F2\0F\10\0D\7F!\00\00\F2\0F\10\15\7F!\00\00\F2\0F\10\1D\7F!\00\00\F2\0F\10%\7F!\00\00\F2\0F\10-\7F!\00\00\F2\0F\105\7F!\00\00H\C7E\C8\09=\00\00H\8BM\C8\F2H\0F*\F9\F2\0F^\F7\F2\0F\114%H1`\00\F2\0F\11$%\F02`\00H\C7E\C0\00\80\84\1E\F2\0F\11,%p2`\00\F2\0F\11$%\A82`\00\F2\0F\11\1C%01`\00\F2\0F\11\14%\C02`\00\F2\0F\11\0C%\982`\00\F2\0F\11\04%81`\00\F2\0F\10\04%\A82`\00\F2\0F\11\04%\A02`\00\89E\A0\B0\00\E8\F6\FD\FF\FFH\BFb(@\00\00\00\00\00\89E\9C\B0\00\E8\E2\FD\FF\FFH\BF\D02`\00\00\00\00\00\89E\98\E8\90\1F\00\00H\BF\D02`\00\00\00\00\00\89E\94\E8~\1F\00\00\0FW\C0H\8BM\C8H\89M\A8\F2\0F\11\04%\B82`\00\89E\90\F2\0F\10\04%\B82`\00\F2\0F\10\0C%\F02`\00f\0F.\C8\0F\86b\01\00\00H\BF\D02`\00\00\00\00\00\0FW\C0H\8BE\A8H\C1\E0\01H\89E\A8\F2\0F\10\0C%\A82`\00H\8BE\A8\F2H\0F*\D0\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\F2\0F\10\04%\A82`\00\F2\0F\11E\D8\E8\FA\1E\00\00H\C7E\B8\01\00\00\00\89E\8CH\8BE\B8H\8BM\A8H\83\E9\01H9\C8\0F\8F\B5\00\00\00\F2\0F\10E\E0\F2\0FXE\D8\F2\0F\11E\E0\F2\0F\10E\E0\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\F0\F2\0F\10\0C%\F00`\00\F2\0F\10U\E8\F2\0F\10\1C%\F80`\00\F2\0F\10e\E8\F2\0FY$%\001`\00\F2\0FX\DC\F2\0FY\D3\F2\0FX\CA\F2\0F\10U\D8\F2\0F\10]\E8\F2\0F\10$%\F00`\00\F2\0F\10m\E8\F2\0F\104%\081`\00\F2\0F\10}\E8\F2\0FY<%\101`\00\F2\0FX\F7\F2\0FY\EE\F2\0FX\E5\F2\0FY\DC\F2\0FX\D3\F2\0F^\CA\F2\0FX\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E96\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8\16\1E\00\00\F2\0F\10\04%\D82`\00\F2\0F\11\04%\B82`\00H\8B}\A8H;}\C0\89E\88\0F\85\05\00\00\00\E9\05\00\00\00\E9\82\FE\FF\FFH\BF\D02`\00\00\00\00\00\F2\0F\10\05'\1F\00\00\F2\0F\11\04%\A02`\00\F2\0F\10\04%\A02`\00\F2\0F\11\04%H1`\00\E8\B7\1D\00\00H\C7E\B8\01\00\00\00\89E\84H\8BE\B8H\8BM\A8H\83\E9\01H9\C8\0F\8F\16\00\00\00\E9\00\00\00\00H\8BE\B8H\83\C0\01H\89E\B8\E9\D5\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8r\1D\00\00\0FW\C0\F2\0F\10\0C%H1`\00\F2\0FY\0C%\D82`\00\F2\0F\11\0C%\902`\00f\0F.\04%\902`\00\89E\80\0F\86\0C\00\00\00\0FW\C0\F2\0F\11\04%\902`\00H\BF\86(@\00\00\00\00\00\F2\0F\10\05|\1E\00\00\F2\0F\10\0D|\1E\00\00\F2\0F\10\15|\1E\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\B82`\00\F2\0F\5C\1C%\902`\00\F2\0F\11\1C%P1`\00\F2\0F\10\1C%\F00`\00\F2\0FX\1C%\F80`\00\F2\0FX\1C%\001`\00\F2\0F\10$%\A82`\00\F2\0FX$%\F00`\00\F2\0FX$%\081`\00\F2\0FX$%\101`\00\F2\0F^\DC\F2\0F\11\1C%\B82`\00\F2\0F\10\1C%\F00`\00\F2\0F\11\1C%h2`\00\F2\0F\10\1C%P1`\00\F2\0F^\DA\F2\0F\11\1C%X1`\00\F2\0F\10U\D0\F2\0F\10\1C%\B82`\00\F2\0FX\1C%h2`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F^\14%01`\00\F2\0F\11\14%\B82`\00\F2\0F\10\14%\A82`\00\F2\0F^\14%\B82`\00\F2\0F\11\14%h2`\00\F2H\0F,\04%h2`\00Hi\C0@\9C\00\00\F2H\0F*\D0\F2\0F^\14%\A02`\00\F2H\0F,\C2H\89E\A8\F2\0F\10\14%h2`\00\F2\0F\5C\D1\F2\0F\11\14%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%X1`\00\F2\0F\11\0C%`1`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%P1`\00\F2\0FY\04%`1`\00\F2\0F\11\85x\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95x\FF\FF\FF\B0\03\E8\CB\F9\FF\FFH\BF\D02`\00\00\00\00\00H\B9\00\00\00\00\00\00\00\80H\8BU\A8H\89U\B0\F2\0F\10\04%81`\00fH\0F~\C2H1\CAfH\0Fn\C2\F2\0F\11E\F0\F2\0F\10\04%\A82`\00fH\0F~\C2H1\CAfH\0Fn\C2\F2\0F\11\04%\B82`\00\89\85t\FF\FF\FF\E8*\1B\00\00H\C7E\B8\01\00\00\00\89\85p\FF\FF\FFH\8BE\B8H;E\B0\0F\8FI\00\00\00H\B8\00\00\00\00\00\00\00\80\F2\0F\10E\F0fH\0F~\C1H1\C1fH\0Fn\C1\F2\0F\11E\F0\F2\0F\10\04%\B82`\00\F2\0FXE\F0\F2\0F\11\04%\B82`\00H\8BE\B8H\83\C0\01H\89E\B8\E9\A9\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8\B6\1A\00\00\0FW\C0\F2\0F\10\0C%H1`\00\F2\0FY\0C%\D82`\00\F2\0F\11\0C%h1`\00f\0F.\04%h1`\00\89\85l\FF\FF\FF\0F\86\0C\00\00\00\0FW\C0\F2\0F\11\04%h1`\00H\BF\D02`\00\00\00\00\00\0FW\C0H\8BE\B0\F2H\0F*\C8\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\B82`\00\F2\0F\11M\E8\F2\0F\11E\E0\F2\0F\11E\D8\F2\0F\11E\D0\E86\1A\00\00H\C7E\B8\01\00\00\00\89\85h\FF\FF\FFH\8BE\B8H;E\B0\0F\8F\A4\00\00\00H\B8\00\00\00\00\00\00\00\80\F2\0F\10E\F0fH\0F~\C1H1\C1fH\0Fn\C1\F2\0F\11E\F0\F2\0F\10\04%\B82`\00\F2\0FXE\F0\F2\0F\11\04%\B82`\00\F2\0F\10E\E8\F2\0FX\04%01`\00\F2\0F\11E\E8\F2\0F\10E\D0\F2\0F\10M\F0\F2\0F\5CM\E8\F2\0FX\C1\F2\0F\11E\D0\F2\0F\10E\E0\F2\0F\10M\F0\F2\0FYM\E8\F2\0F\5C\C1\F2\0F\11E\E0\F2\0F\10E\D8\F2\0F\10M\F0\F2\0F^M\E8\F2\0FX\C1\F2\0F\11E\D8H\8BE\B8H\83\C0\01H\89E\B8\E9N\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8g\19\00\00H\BF\AA(@\00\00\00\00\00\F2\0F\10\05\AD\1A\00\00\F2\0F\10\0D\BD\1A\00\00\F2\0F\10\15\BD\1A\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\D82`\00\F2\0F\11\1C%p1`\00\F2\0F\10\1C%p1`\00\F2\0F\5C\1C%h1`\00\F2\0F^\DA\F2\0F\11\1C%x1`\00\F2\0F\10\14%\B82`\00\F2\0FYU\D0\F2\0F^\14%\B02`\00\F2H\0F,\CAH\89M\B0\F2\0F\10\14%\982`\00\F2\0FYU\D8\F2\0F^\14%81`\00\F2\0F\11\14%\B82`\00\F2\0F\10\14%\B82`\00\F2\0F\10\1C%81`\00\F2\0F^]\E0\F2\0FX\D3\F2\0F\11\14%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%h2`\00\F2\0F\10\14%\B02`\00\F2\0F\10]\E0\F2\0FY]\E0\F2\0FY]\E0\F2\0F^\D3\F2\0F\5C\CA\F2\0F\11\0C%\E82`\00\F2\0F\10\0C%\E82`\00\F2\0F\5C\0C%p2`\00\F2\0F\11\0C%x2`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%x1`\00\F2\0F\11\0C%\801`\00\0F(\C8\F2\0FY\0C%x2`\00\F2\0F\10\14%p1`\00\F2\0F\5C\14%h1`\00\F2\0FY\D0\F2\0FY\04%\801`\00\F2\0F\11\85`\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95`\FF\FF\FF\89\85\5C\FF\FF\FF\B0\03\E8(\F6\FF\FFH\BF\D02`\00\00\00\00\00\0FW\C0\F2\0F\10\0C%p2`\00\F2\0F\10\14%\C02`\00H\8BM\B0\F2H\0F*\D9\F2\0FY\D3\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\89\85X\FF\FF\FF\E8\9E\17\00\00H\C7E\B8\01\00\00\00\89\85T\FF\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F\B6\00\00\00\F2\0F\10E\E0\F2\0FX\04%\A82`\00\F2\0F\11E\E0\F2\0F\10E\E0\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\E8\F2\0FYE\E8\F2\0F\11E\D8\F2\0F\10E\F0\F2\0F\10M\E8\F2\0F\10\14%h0`\00\F2\0FYU\D8\F2\0F\5C\14%`0`\00\F2\0FYU\D8\F2\0FX\14%X0`\00\F2\0FYU\D8\F2\0F\5C\14%P0`\00\F2\0FYU\D8\F2\0FX\14%H0`\00\F2\0FYU\D8\F2\0FX\14%@0`\00\F2\0FYU\D8\F2\0FX\14%\A82`\00\F2\0FY\CA\F2\0FX\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E95\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8\B6\16\00\00H\BF\CE(@\00\00\00\00\00\F2\0F\10\05\FC\17\00\00\F2\0F\10\0D\1C\18\00\00\F2\0F\10\15\1C\18\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\D82`\00\F2\0F\5C\1C%\902`\00\F2\0F\11\1C%\881`\00\F2\0F\10\1C%p2`\00\F2\0F^\1C%\C02`\00\F2\0F\11]\E8\F2\0F\10]\E8\F2\0FY]\E8\F2\0F\11]\D8\F2\0F\10]\E8\F2\0F\10$%h0`\00\F2\0FYe\D8\F2\0F\5C$%`0`\00\F2\0FYe\D8\F2\0FX$%X0`\00\F2\0FYe\D8\F2\0F\5C$%P0`\00\F2\0FYe\D8\F2\0FX$%H0`\00\F2\0FYe\D8\F2\0FX$%@0`\00\F2\0FYe\D8\F2\0FX$%\A82`\00\F2\0FY\DC\F2\0F\11\1C%\B82`\00\F2\0F\10\1C%\881`\00\F2\0F^\DA\F2\0F\11\1C%\901`\00\F2\0F\10U\D0\F2\0F\10\1C%\B82`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F^\14%01`\00\F2\0F\11\14%\B82`\00\F2\0F\11\0C%h2`\00\F2\0F\10\0C%\B82`\00\F2\0F\5C\0C%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\901`\00\F2\0F\11\0C%\981`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\881`\00\F2\0FY\04%\981`\00\F2\0F\11\85H\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95H\FF\FF\FF\89\85D\FF\FF\FF\B0\03\E8L\F3\FF\FFH\BF\D02`\00\00\00\00\00\0FW\C0H\B9\00\00\00\00\00\00\00\80\F2\0F\10\0C%P0`\00fH\0F~\CAH1\CAfH\0Fn\CA\F2\0F\11\0C%P0`\00\F2\0F\10\0C%`0`\00fH\0F~\CAH1\CAfH\0Fn\CA\F2\0F\11\0C%`0`\00\F2\0F\10\0C%p2`\00\F2\0F\10\14%\C02`\00H\8BM\B0\F2H\0F*\D9\F2\0FY\D3\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\89\85@\FF\FF\FF\E8z\14\00\00H\C7E\B8\01\00\00\00\89\85<\FF\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F\B2\00\00\00H\8BE\B8\F2H\0F*\C0\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\E8\F2\0FYE\E8\F2\0F\11E\D8\F2\0F\10E\F0\F2\0F\10M\D8\F2\0F\10U\D8\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\104%\A00`\00\F2\0FYu\D8\F2\0FX4%\980`\00\F2\0FY\EE\F2\0FX,%\900`\00\F2\0FY\E5\F2\0FX$%\880`\00\F2\0FY\DC\F2\0FX\1C%\800`\00\F2\0FY\D3\F2\0FX\14%x0`\00\F2\0FY\CA\F2\0FX\C1\F2\0FX\04%\A82`\00\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E99\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8\96\13\00\00H\BF\F2(@\00\00\00\00\00\F2\0F\10\05\DC\14\00\00\F2\0F\10\0D\0C\15\00\00\F2\0F\10\14%H1`\00\F2\0FY\14%\D82`\00\F2\0F\5C\14%\902`\00\F2\0F\11\14%\A01`\00\F2\0F\10\14%p2`\00\F2\0F^\14%\C02`\00\F2\0F\11U\E8\F2\0F\10U\E8\F2\0FYU\E8\F2\0F\11U\D8\F2\0F\10U\D8\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10<%\A00`\00\F2\0FY}\D8\F2\0FX<%\980`\00\F2\0FY\F7\F2\0FX4%\900`\00\F2\0FY\EE\F2\0FX,%\880`\00\F2\0FY\E5\F2\0FX$%\800`\00\F2\0FY\DC\F2\0FX\1C%x0`\00\F2\0FY\D3\F2\0FX\14%\A82`\00\F2\0F\11\14%\B82`\00\F2\0F\10\14%\A01`\00\F2\0F^\D1\F2\0F\11\14%\A81`\00\F2\0F\10M\D0\F2\0F\10\14%\B82`\00\F2\0FX\14%\A82`\00\F2\0F\10\1C%01`\00\F2\0FY]\F0\F2\0FX\D3\F2\0FY\CA\F2\0F^\0C%01`\00\F2\0F\11\0C%\B82`\00\F2\0F\10\0C%p2`\00\F2\0F^\0C%\C02`\00\F2\0F\11M\E8\F2\0F\10M\E8\F2\0FYM\E8\F2\0F\11M\D8\F2\0F\10M\E8\F2\0F\10\14%h0`\00\F2\0FYU\D8\F2\0FX\14%`0`\00\F2\0FYU\D8\F2\0FX\14%X0`\00\F2\0FYU\D8\F2\0FX\14%P0`\00\F2\0FYU\D8\F2\0FX\14%H0`\00\F2\0FYU\D8\F2\0FX\14%@0`\00\F2\0FYU\D8\F2\0FX\14%80`\00\F2\0FY\CA\F2\0F\11\0C%h2`\00\F2\0F\10\0C%\B82`\00\F2\0F\5C\0C%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\A81`\00\F2\0F\11\0C%\B01`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\A01`\00\F2\0FY\04%\B01`\00\F2\0F\11\850\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\950\FF\FF\FF\89\85,\FF\FF\FF\B0\03\E8\94\EF\FF\FFH\BF\D02`\00\00\00\00\00\0FW\C0\F2\0F\10\0C%p2`\00\F2\0F\10\14%\C02`\00H\8BM\B0\F2H\0F*\D9\F2\0FY\D3\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\89\85(\FF\FF\FF\E8\0A\11\00\00H\C7E\B8\01\00\00\00\89\85$\FF\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F&\01\00\00H\8BE\B8\F2H\0F*\C0\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\E8\F2\0FYE\E8\F2\0F\11E\D8\F2\0F\10E\E8\F2\0F\10\0C%h0`\00\F2\0FYM\D8\F2\0FX\0C%`0`\00\F2\0FYM\D8\F2\0FX\0C%X0`\00\F2\0FYM\D8\F2\0FX\0C%P0`\00\F2\0FYM\D8\F2\0FX\0C%H0`\00\F2\0FYM\D8\F2\0FX\0C%@0`\00\F2\0FYM\D8\F2\0FX\0C%\A82`\00\F2\0FY\C1\F2\0F\11E\E0\F2\0F\10E\F0\F2\0F\10M\E0\F2\0F\10U\D8\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10<%\A00`\00\F2\0FY}\D8\F2\0FX<%\980`\00\F2\0FY\F7\F2\0FX4%\900`\00\F2\0FY\EE\F2\0FX,%\880`\00\F2\0FY\E5\F2\0FX$%\800`\00\F2\0FY\DC\F2\0FX\1C%x0`\00\F2\0FY\D3\F2\0FX\14%\A82`\00\F2\0F^\CA\F2\0FX\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E9\C5\FE\FF\FFH\BF\D02`\00\00\00\00\00\E8\B2\0F\00\00H\BF\16)@\00\00\00\00\00\F2\0F\10\05\F8\10\00\00\F2\0F\10\0D0\11\00\00\F2\0F\10\150\11\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\D82`\00\F2\0F\5C\1C%\902`\00\F2\0F\11\1C%\B81`\00\F2\0F\10\1C%p2`\00\F2\0F^\1C%\C02`\00\F2\0F\11]\E8\F2\0F\10]\E8\F2\0FY]\E8\F2\0F\11]\D8\F2\0F\10]\E8\F2\0F\10$%h0`\00\F2\0FYe\D8\F2\0FX$%`0`\00\F2\0FYe\D8\F2\0FX$%X0`\00\F2\0FYe\D8\F2\0FX$%P0`\00\F2\0FYe\D8\F2\0FX$%H0`\00\F2\0FYe\D8\F2\0FX$%@0`\00\F2\0FYe\D8\F2\0FX$%\A82`\00\F2\0FY\DC\F2\0F\11\1C%\B82`\00\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10}\D8\F2D\0F\10\04%\A00`\00\F2D\0FYE\D8\F2D\0FX\04%\980`\00\F2A\0FY\F8\F2\0FX<%\900`\00\F2\0FY\F7\F2\0FX4%\880`\00\F2\0FY\EE\F2\0FX,%\800`\00\F2\0FY\E5\F2\0FX$%x0`\00\F2\0FY\DC\F2\0FX\1C%\A82`\00\F2\0F\11\1C%h2`\00\F2\0F\10\1C%\B82`\00\F2\0F^\1C%h2`\00\F2\0F\11\1C%\B82`\00\F2\0F\10\1C%\B81`\00\F2\0F^\DA\F2\0F\11\1C%\C01`\00\F2\0F\10U\D0\F2\0F\10\1C%\B82`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F^\14%01`\00\F2\0F\11\14%\B82`\00\F2\0F\11\0C%h2`\00\F2\0F\10\0C%\B82`\00\F2\0F\5C\0C%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\C01`\00\F2\0F\11\0C%\C81`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\B81`\00\F2\0FY\04%\C81`\00\F2\0F\11\85\18\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95\18\FF\FF\FF\89\85\14\FF\FF\FF\B0\03\E8\AF\EB\FF\FFH\BF\D02`\00\00\00\00\00\0FW\C0\F2\0F\10\0C%p2`\00\F2\0F\10\14%\982`\00H\8BM\B0\F2H\0F*\D9\F2\0FY\D3\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\89\85\10\FF\FF\FF\E8%\0D\00\00H\C7E\B8\01\00\00\00\89\85\0C\FF\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F&\01\00\00H\8BE\B8\F2H\0F*\C0\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\E8\F2\0FYE\E8\F2\0F\11E\D8\F2\0F\10E\E8\F2\0F\10\0C%h0`\00\F2\0FYM\D8\F2\0FX\0C%`0`\00\F2\0FYM\D8\F2\0FX\0C%X0`\00\F2\0FYM\D8\F2\0FX\0C%P0`\00\F2\0FYM\D8\F2\0FX\0C%H0`\00\F2\0FYM\D8\F2\0FX\0C%@0`\00\F2\0FYM\D8\F2\0FX\0C%\A82`\00\F2\0FY\C1\F2\0F\11E\E0\F2\0F\10E\F0\F2\0F\10M\E0\F2\0F\10U\D8\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10<%\A00`\00\F2\0FY}\D8\F2\0FX<%\980`\00\F2\0FY\F7\F2\0FX4%\900`\00\F2\0FY\EE\F2\0FX,%\880`\00\F2\0FY\E5\F2\0FX$%\800`\00\F2\0FY\DC\F2\0FX\1C%x0`\00\F2\0FY\D3\F2\0FX\14%\A82`\00\F2\0FY\CA\F2\0FX\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E9\C5\FE\FF\FFH\BF\D02`\00\00\00\00\00\E8\CD\0B\00\00H\BF:)@\00\00\00\00\00\F2\0F\10\05\13\0D\00\00\F2\0F\10\0Dc\0D\00\00\F2\0F\10\15K\0D\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\D82`\00\F2\0F\5C\1C%\902`\00\F2\0F\11\1C%\D01`\00\F2\0F\10\1C%p2`\00\F2\0F^\1C%\982`\00\F2\0F\11]\E8\F2\0F\10]\E8\F2\0FY]\E8\F2\0F\11]\D8\F2\0F\10]\E8\F2\0F\10$%h0`\00\F2\0FYe\D8\F2\0FX$%`0`\00\F2\0FYe\D8\F2\0FX$%X0`\00\F2\0FYe\D8\F2\0FX$%P0`\00\F2\0FYe\D8\F2\0FX$%H0`\00\F2\0FYe\D8\F2\0FX$%@0`\00\F2\0FYe\D8\F2\0FX$%\A82`\00\F2\0FY\DC\F2\0F\11\1C%\B82`\00\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10}\D8\F2D\0F\10\04%\A00`\00\F2D\0FYE\D8\F2D\0FX\04%\980`\00\F2A\0FY\F8\F2\0FX<%\900`\00\F2\0FY\F7\F2\0FX4%\880`\00\F2\0FY\EE\F2\0FX,%\800`\00\F2\0FY\E5\F2\0FX$%x0`\00\F2\0FY\DC\F2\0FX\1C%\A82`\00\F2\0F\11\1C%h2`\00\F2\0F\10\1C%\B82`\00\F2\0FY\1C%h2`\00\F2\0F\11\1C%\B82`\00\F2\0F\10\1C%\D01`\00\F2\0F^\DA\F2\0F\11\1C%\D81`\00\F2\0F\10U\D0\F2\0F\10\1C%\B82`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F^\14%01`\00\F2\0F\11\14%\B82`\00\F2\0F\11\0C%h2`\00\F2\0F\10\0C%\B82`\00\F2\0F\5C\0C%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\D81`\00\F2\0F\11\0C%\E01`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\D01`\00\F2\0FY\04%\E01`\00\F2\0F\11\85\00\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95\00\FF\FF\FF\89\85\FC\FE\FF\FF\B0\03\E8\CA\E7\FF\FFH\BF\D02`\00\00\00\00\00\F2\0F\10\05 \0B\00\00\0FW\C9\F2\0F\11M\F0\F2\0F\10\0C%\A82`\00\F2\0F\11M\D8\F2\0F\11\04%\B82`\00\F2\0F\10\04%\B82`\00H\8BM\B0\F2H\0F*\C9\F2\0F^\C1\F2\0F\11E\E0\89\85\F8\FE\FF\FF\E83\09\00\00H\C7E\B8\01\00\00\00\89\85\F4\FE\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F\87\00\00\00H\8BE\B8\F2H\0F*\C0\F2\0FYE\E0\F2\0F\11E\D0\F2\0F\10E\D0\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\F0\F2\0F\10M\D8\F2\0F\10U\D0\F2\0FXU\D8\F2\0F^\CA\F2\0F\5C\C1\F2\0F\10M\D0\F2\0F\10U\E8\F2\0FXU\D8\F2\0F^\CA\F2\0F\5C\C1\F2\0F\10M\E8\F2\0F\10U\D0\F2\0FYU\E8\F2\0FXU\D8\F2\0F^\CA\F2\0F\5C\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E9d\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8z\08\00\00H\BF^)@\00\00\00\00\00\F2\0F\10\05\C0\09\00\00\F2\0F\10\0D\18\0A\00\00\F2\0F\10\15\18\0A\00\00H\B9\00\00\00\00\00\00\00\80\F2\0F\10\1D\0E\0A\00\00\F2\0F\10$%H1`\00\F2\0FY$%\D82`\00\F2\0F\5C$%\902`\00\F2\0F\11$%\E81`\00\F2\0F\10$%\E81`\00\F2\0F^\E3\F2\0F\11$%\F01`\00\F2\0F\10\1C%\B82`\00\F2\0F\11]\D0\F2\0F\10]\D0\F2\0FY]\D0\F2\0F\11]\E8\F2\0F\10]\D8fH\0F~\DAH1\CAfH\0Fn\DA\F2\0F\10e\D8\F2\0F\10m\D0\F2\0FXm\D8\F2\0F^\E5\F2\0F\5C\DC\F2\0F\10e\D0\F2\0F\10m\E8\F2\0FXm\D8\F2\0F^\E5\F2\0F\5C\DC\F2\0F\10e\E8\F2\0F\10m\D0\F2\0FYm\E8\F2\0FXm\D8\F2\0F^\E5\F2\0F\5C\DC\F2\0F\11\1C%\B82`\00\F2\0FYU\E0\F2\0F\10\1C%\B82`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F\11\14%\B82`\00\F2H\0F,\0C%\B82`\00Hi\C90\F8\FF\FFH\89M\B0H\8BM\B0\F2H\0F*\D1\F2\0F^\14%\A02`\00\F2H\0F,\CAH\89M\B0\F2\0FX\0C%\B82`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\F01`\00\F2\0F\11\0C%\F81`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\E81`\00\F2\0FY\04%\F81`\00\F2\0F\11\85\E8\FE\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95\E8\FE\FF\FF\89\85\E4\FE\FF\FF\B0\03\E8\FC\E4\FF\FFH\BF\D02`\00\00\00\00\00\0FW\C0\F2\0F\10\0C%p2`\00\F2\0F\10\14%\C02`\00H\8BM\B0\F2H\0F*\D9\F2\0FY\D3\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\89\85\E0\FE\FF\FF\E8r\06\00\00H\C7E\B8\01\00\00\00\89\85\DC\FE\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F'\01\00\00H\8BE\B8\F2H\0F*\C0\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\E8\F2\0FYE\E8\F2\0F\11E\D8\F2\0F\10E\D8\F2\0F\10M\D8\F2\0F\10U\D8\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10,%\A00`\00\F2\0FYm\D8\F2\0FX,%\980`\00\F2\0FY\E5\F2\0FX$%\900`\00\F2\0FY\DC\F2\0FX\1C%\880`\00\F2\0FY\D3\F2\0FX\14%\800`\00\F2\0FY\CA\F2\0FX\0C%x0`\00\F2\0FY\C1\F2\0FX\04%\A82`\00\F2\0F\11E\E0\F2\0F\10E\F0\F2\0F\10M\E0\F2\0FYM\E0\F2\0FYM\E8\F2\0F\10\14%h0`\00\F2\0FYU\D8\F2\0FX\14%`0`\00\F2\0FYU\D8\F2\0FX\14%X0`\00\F2\0FYU\D8\F2\0FX\14%P0`\00\F2\0FYU\D8\F2\0FX\14%H0`\00\F2\0FYU\D8\F2\0FX\14%@0`\00\F2\0FYU\D8\F2\0FX\14%\A82`\00\F2\0FY\CA\F2\0FX\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E9\C4\FE\FF\FFH\BF\D02`\00\00\00\00\00\E8\19\05\00\00H\BF\82)@\00\00\00\00\00\F2\0F\10\05_\06\00\00\F2\0F\10\0D\EF\06\00\00\F2\0F\10\15\EF\06\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\D82`\00\F2\0F\5C\1C%\902`\00\F2\0F\11\1C%\002`\00\F2\0F\10\1C%p2`\00\F2\0F^\1C%\C02`\00\F2\0F\11]\E8\F2\0F\10]\E8\F2\0FY]\E8\F2\0F\11]\D8\F2\0F\10]\E8\F2\0F\10$%h0`\00\F2\0FYe\D8\F2\0FX$%`0`\00\F2\0FYe\D8\F2\0FX$%X0`\00\F2\0FYe\D8\F2\0FX$%P0`\00\F2\0FYe\D8\F2\0FX$%H0`\00\F2\0FYe\D8\F2\0FX$%@0`\00\F2\0FYe\D8\F2\0FX$%\A82`\00\F2\0FY\DC\F2\0F\11\1C%\B82`\00\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10}\D8\F2D\0F\10\04%\A00`\00\F2D\0FYE\D8\F2D\0FX\04%\980`\00\F2A\0FY\F8\F2\0FX<%\900`\00\F2\0FY\F7\F2\0FX4%\880`\00\F2\0FY\EE\F2\0FX,%\800`\00\F2\0FY\E5\F2\0FX$%x0`\00\F2\0FY\DC\F2\0FX\1C%\A82`\00\F2\0F\11\1C%h2`\00\F2\0F\10\1C%\B82`\00\F2\0FY\1C%h2`\00\F2\0FY\1C%h2`\00\F2\0F\11\1C%\B82`\00\F2\0F\10\1C%\002`\00\F2\0F^\DA\F2\0F\11\1C%\082`\00\F2\0F\10U\D0\F2\0F\10\1C%\B82`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F^\14%01`\00\F2\0F\11\14%\B82`\00\F2\0F\11\0C%h2`\00\F2\0F\10\0C%\B82`\00\F2\0F\5C\0C%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\082`\00\F2\0F\11\0C%\102`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\002`\00\F2\0FY\04%\102`\00\F2\0F\11\85\D0\FE\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95\D0\FE\FF\FF\89\85\CC\FE\FF\FF\B0\03\E8\0D\E1\FF\FFH\BF0(@\00\00\00\00\00\F2\0F\10\05\8B\04\00\00\F2\0F\10\0D\8B\04\00\00\F2\0F\10\15\8B\04\00\00\F2\0F\10\1D\8B\04\00\00\F2\0F\10$%81`\00\F2\0F\10,%p1`\00\F2\0F\5C,%h1`\00\F2\0FY\E5\F2\0FX$%\881`\00\F2\0F^\E3\F2\0F\11$%\182`\00\F2\0F\10\1C%\A82`\00\F2\0F^\1C%\182`\00\F2\0F\11\1C% 2`\00\F2\0F\10\1C%P1`\00\F2\0FX\1C%\881`\00\F2\0FX\1C%\A01`\00\F2\0FX\1C%\B81`\00\F2\0FX\1C%\D01`\00\F2\0F\11\1C%(2`\00\F2\0F\10\1C%(2`\00\F2\0F\10$%\982`\00\F2\0FY$%\E81`\00\F2\0FX\DC\F2\0F^\DA\F2\0F\11\1C%(2`\00\F2\0F\10\14%\A82`\00\F2\0F^\14%(2`\00\F2\0F\11\14%02`\00\F2\0F\10\14%P1`\00\F2\0FX\14%\881`\00\F2\0FX\14%\A01`\00\F2\0FX\14%\B81`\00\F2\0FX\14%\D01`\00\F2\0F\11\14%82`\00\F2\0F\10\14%82`\00\F2\0FX\14%\E81`\00\F2\0FX\14%\002`\00\F2\0F^\D1\F2\0F\11\14%82`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%82`\00\F2\0F\11\0C%@2`\00\F2\0F\10\0C%\881`\00\F2\0FX\0C%\A01`\00\F2\0FX\0C%\D01`\00\F2\0FX\0C%\002`\00\F2\0F^\C8\F2\0F\11\0C%H2`\00\F2\0F\10\04%\A82`\00\F2\0F^\04%H2`\00\F2\0F\11\04%P2`\00\89\85\C8\FE\FF\FF\B0\00\E8D\DF\FF\FFH\BF\A6)@\00\00\00\00\00H\8Bu\B0\89\85\C4\FE\FF\FF\B0\00\E8)\DF\FF\FFH\BF\C2)@\00\00\00\00\00\F2\0F\10\05/\02\00\00\F2\0FY\04%\902`\00\89\85\C0\FE\FF\FF\B0\01\E8\01\DF\FF\FFH\BF\E0)@\00\00\00\00\00\F2\0F\10\05\07\02\00\00\F2\0FY\04% 2`\00\89\85\BC\FE\FF\FF\B0\01\E8\D9\DE\FF\FFH\BF\FE)@\00\00\00\00\00\F2\0F\10\05\DF\01\00\00\F2\0FY\04%02`\00\89\85\B8\FE\FF\FF\B0\01\E8\B1\DE\FF\FFH\BF\1C*@\00\00\00\00\00\F2\0F\10\05\B7\01\00\00\F2\0FY\04%@2`\00\89\85\B4\FE\FF\FF\B0\01\E8\89\DE\FF\FFH\BF:*@\00\00\00\00\00\F2\0F\10\05\8F\01\00\00\F2\0FY\04%P2`\00\89\85\B0\FE\FF\FF\B0\01\E8a\DE\FF\FF1\C9\89\85\AC\FE\FF\FF\89\C8H\81\C4`\01\00\00]\C3fffff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\B8\802`\00\00\00\00\001\C9\89\CEH\89}\F8H\8B}\F8\F2\0F\10G\10\F2\0F\11E\F0H\89\C7\E8 \DE\FF\FF1\C9\F2\0F\10\05\C6\01\00\00H\8B4%\802`\00\F2H\0F*\CEH\8B4%\882`\00\F2H\0F*\D6\F2\0FY\D0\F2\0FX\CAH\8Bu\F8\F2\0F\11N\10H\8Bu\F8\F2\0F\10F\10\F2\0F\5CE\F0H\8Bu\F8\F2\0F\11F\08\89E\EC\89\C8H\83\C4 ]\C3f\0F\1F\84\00\00\00\00\00AWAVI\89\D7AUATL\8D%^\07 \00UH\8D-^\07 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8O\DD\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_4026f4__fini = internal constant %seg_4026f4__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_402700__rodata = internal constant %seg_402700__rodata_type <{ [248 x i8] c"\01\00\02\00\00\00\00\00\00\00\00\00\00\00\14@\00\00\00\00\00\00\10@\00\00\00\00\00\00\08@\00\00\00\00\00\00\00@\00\00\00\00\00\00\F0?\18-DT\FB!\09@\00\00\00\00\80\84.A\82\FF\ADd\C7F\90?\A0\C2\EB\FEKH\B493333339@\00\00\00\00\00\00,@\00\00\00\00\00@?@\00\00\00\00\00\00\1C@\00\00\00\00\00\00\E0?\00\00\00\00\00\001@\00\00\00\00\00\00.@\EF9\FA\FEB.\E6?\00\00\00\00\00\00=@\A4\92\F1\F7A\95Y@\00\00\00\00\00\00\D0?33333C\7F@\00\00\00\00\00\002@\00\00\00\00\00\00(@\00\00\00\00\00\C0V@\00\00\00\00\00@b@\00\00\00\00\00\00c@\00\00\00\00\00\00J@\AB\AA\AA\AA\AA\AA\D2?\00\00\00\00\00\00>@\8D\ED\B5\A0\F7\C6\B0>", [58 x i8] c"   FLOPS C Program (Double Precision), V2.0 18 Dec 1992\0A\0A\00", [48 x i8] c"   Module     Error        RunTime      MFLOPS\0A\00", [36 x i8] c"                            (usec)\0A\00", [36 x i8] c"     1   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     2   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     3   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     4   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     5   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     6   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     7   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     8   %13.4lf  %10.4lf  %10.4lf\0A\00", [28 x i8] c"   Iterations      = %10ld\0A\00", [30 x i8] c"   NullTime (usec) = %10.4lf\0A\00", [30 x i8] c"   MFLOPS(1)       = %10.4lf\0A\00", [30 x i8] c"   MFLOPS(2)       = %10.4lf\0A\00", [30 x i8] c"   MFLOPS(3)       = %10.4lf\0A\00", [31 x i8] c"   MFLOPS(4)       = %10.4lf\0A\0A\00" }>
@seg_402a5c__eh_frame_hdr = internal constant %seg_402a5c__eh_frame_hdr_type <{ [68 x i8] c"\01\1B\03;@\00\00\00\07\00\00\00\C4\D9\FF\FF\9C\00\00\00\F4\D9\FF\FF\5C\00\00\00$\DA\FF\FF\88\00\00\00\E4\DA\FF\FF\C4\00\00\00\94\FB\FF\FF\E0\00\00\00$\FC\FF\FF\FC\00\00\00\94\FC\FF\FFD\01\00\00" }>
@seg_402aa0__eh_frame = internal constant %seg_402aa0__eh_frame_type <{ [280 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\90\D9\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\94\D9\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00 \D9\FF\FF0\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00\18\DA\FF\FF\A2 \00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00\AC\FA\FF\FF\87\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00D\00\00\00\90\00\00\00 \FB\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\D8\00\00\00H\FB\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_602df0__init_array = internal global %seg_602df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400530_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400500___do_global_dtors_aux to i64) }>
@seg_602ff0__got = internal global %seg_602ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_603000__got_plt = internal global %seg_603000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64) }>
@seg_603028__data = internal global %seg_603028__data_type zeroinitializer
@A0 = global %A0_type <{ [8 x i8] c"\00\00\00\00\00\00\F0?" }>
@A1_0 = global %A1_0_type <{ [8 x i8] c"\05\97UUUU\C5\BF" }>
@A2_0 = global %A2_0_type <{ [8 x i8] c"\A3\E9:\11\11\11\81?" }>
@A3 = global %A3_type <{ [8 x i8] c"q\CA\B1?\A0\01*?" }>
@A4 = global %A4_type <{ [8 x i8] c"f5\AA\84\F2\1D\C7>" }>
@A5 = global %A5_type <{ [8 x i8] c"&\A4\F8\8CZ\EBZ>" }>
@A6 = global %A6_type <{ [8 x i8] c"\A6\C1)R\F7\8D\E6=" }>
@B0 = global %B0_type <{ [8 x i8] c"\00\00\00\00\00\00\F0?" }>
@B1_0 = global %B1_0_type <{ [8 x i8] c"V\81\FF\FF\FF\FF\DF\BF" }>
@B2 = global %B2_type <{ [8 x i8] c"$\02)UUU\A5?" }>
@B3 = global %B3_type <{ [8 x i8] c"\16e\E7\FFk\C1V\BF" }>
@B4 = global %B4_type <{ [8 x i8] c"\B7-$(\95\01\FA>" }>
@B5 = global %B5_type <{ [8 x i8] c"\8E\DB}\D4\B3{\92\BE" }>
@B6 = global %B6_type <{ [8 x i8] c"*\18\DFu\B2W!>" }>
@C0 = global %C0_type <{ [8 x i8] c"\00\00\00\00\00\00\F0?" }>
@C1_0 = global %C1_0_type <{ [8 x i8] c"\E2\B37\FE\FF\FF\EF?" }>
@C2 = global %C2_type <{ [8 x i8] c"\B8\A4+\CC\FF\FF\DF?" }>
@C3 = global %C3_type <{ [8 x i8] c"\15iG|XU\C5?" }>
@C4 = global %C4_type <{ [8 x i8] c"HUy~[U\A5?" }>
@C5 = global %C5_type <{ [8 x i8] c"\0C\12\D9J\9A\0D\81?" }>
@C6 = global %C6_type <{ [8 x i8] c"\05\8C\DB~\18\13W?" }>
@C7 = global %C7_type <{ [8 x i8] c":?\17\C8w\C0&?" }>
@C8 = global %C8_type <{ [8 x i8] c"\CF\B1\04\FE\03\9D\04?" }>
@D1_0 = global %D1_0_type <{ [8 x i8] c"t\83\13C\E1z\A4?" }>
@D2_0 = global %D2_0_type <{ [8 x i8] c"i\1DUM\10uO?" }>
@D3 = global %D3_type <{ [8 x i8] c"(\A7\F4\0FZ\B0\B4>" }>
@E2_0 = global %E2_0_type <{ [8 x i8] c"i\1DUM\10u??" }>
@E3 = global %E3_type <{ [8 x i8] c"\8A\89\9Bj\CD\95\9B>" }>
@seg_603120__bss = internal global %seg_603120__bss_type zeroinitializer
@two = global %two_type zeroinitializer
@five = global %five_type zeroinitializer
@T = global %T_type zeroinitializer
@sd = global %sd_type zeroinitializer
@sb = global %sb_type zeroinitializer
@piref = global %piref_type zeroinitializer
@pierr = global %pierr_type zeroinitializer
@tnow = global %tnow_type zeroinitializer
@nulltime = global %nulltime_type zeroinitializer
@four = global %four_type zeroinitializer
@scale = global %scale_type zeroinitializer
@one = global %one_type zeroinitializer
@sc = global %sc_type zeroinitializer
@sa = global %sa_type zeroinitializer
@three = global %three_type zeroinitializer
@TimeArray = global %TimeArray_type zeroinitializer
@piprg = global %piprg_type zeroinitializer
@TLimit = global %TLimit_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400530_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400500___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4026f0___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402680___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dtime_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

declare %struct.Memory* @sub_400490_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400400__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @gettimeofday(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_4025f0_dtime(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4025f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %31 to %"class.std::bitset"*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %33 to %"class.std::bitset"*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %35 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %34, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %35 to %"class.std::bitset"*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %37 to %union.vec128_t*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %39 to %union.vec128_t*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = load i64, i64* %RBP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 1
  store i64 %44, i64* %PC
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %46 = load i64, i64* %45, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %42, i64* %48
  store i64 %47, i64* %45, align 8, !tbaa !2428
  %49 = load i64, i64* %RSP
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  store i64 %49, i64* %RBP, align 8, !tbaa !2428
  %52 = load i64, i64* %RSP
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = sub i64 %52, 32
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  %56 = icmp ult i64 %52, 32
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %57, i8* %58, align 1, !tbaa !2432
  %59 = trunc i64 %55 to i32
  %60 = and i32 %59, 255
  %61 = call i32 @llvm.ctpop.i32(i32 %60) #16
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %64, i8* %65, align 1, !tbaa !2446
  %66 = xor i64 32, %52
  %67 = xor i64 %66, %55
  %68 = lshr i64 %67, 4
  %69 = trunc i64 %68 to i8
  %70 = and i8 %69, 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %70, i8* %71, align 1, !tbaa !2447
  %72 = icmp eq i64 %55, 0
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %73, i8* %74, align 1, !tbaa !2448
  %75 = lshr i64 %55, 63
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %76, i8* %77, align 1, !tbaa !2449
  %78 = lshr i64 %52, 63
  %79 = xor i64 %75, %78
  %80 = add nuw nsw i64 %79, %78
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %82, i8* %83, align 1, !tbaa !2450
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 10
  store i64 %85, i64* %PC
  store i64 ptrtoint (%tnow_type* @tnow to i64), i64* %RAX, align 8, !tbaa !2428
  %86 = load i64, i64* %RCX
  %87 = load i32, i32* %ECX
  %88 = zext i32 %87 to i64
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 2
  store i64 %90, i64* %PC
  %91 = xor i64 %88, %86
  %92 = trunc i64 %91 to i32
  %93 = and i64 %91, 4294967295
  store i64 %93, i64* %RCX, align 8, !tbaa !2428
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %94, align 1, !tbaa !2432
  %95 = and i32 %92, 255
  %96 = call i32 @llvm.ctpop.i32(i32 %95) #16
  %97 = trunc i32 %96 to i8
  %98 = and i8 %97, 1
  %99 = xor i8 %98, 1
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %99, i8* %100, align 1, !tbaa !2446
  %101 = icmp eq i32 %92, 0
  %102 = zext i1 %101 to i8
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %102, i8* %103, align 1, !tbaa !2448
  %104 = lshr i32 %92, 31
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %105, i8* %106, align 1, !tbaa !2449
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %107, align 1, !tbaa !2450
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %108, align 1, !tbaa !2447
  %109 = load i32, i32* %ECX
  %110 = zext i32 %109 to i64
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 2
  store i64 %112, i64* %PC
  %113 = and i64 %110, 4294967295
  store i64 %113, i64* %RSI, align 8, !tbaa !2428
  %114 = load i64, i64* %RBP
  %115 = sub i64 %114, 8
  %116 = load i64, i64* %RDI
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %115 to i64*
  store i64 %116, i64* %119
  %120 = load i64, i64* %RBP
  %121 = sub i64 %120, 8
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 4
  store i64 %123, i64* %PC
  %124 = inttoptr i64 %121 to i64*
  %125 = load i64, i64* %124
  store i64 %125, i64* %RDI, align 8, !tbaa !2428
  %126 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %127 = load i64, i64* %RDI
  %128 = add i64 %127, 16
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 5
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to double*
  %132 = load double, double* %131
  %133 = bitcast i8* %126 to double*
  store double %132, double* %133, align 1, !tbaa !2451
  %134 = getelementptr inbounds i8, i8* %126, i64 8
  %135 = bitcast i8* %134 to double*
  store double 0.000000e+00, double* %135, align 1, !tbaa !2451
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 16
  %138 = bitcast %union.vec128_t* %XMM0 to i8*
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 5
  store i64 %140, i64* %PC
  %141 = bitcast i8* %138 to double*
  %142 = load double, double* %141, align 1
  %143 = inttoptr i64 %137 to double*
  store double %142, double* %143
  %144 = load i64, i64* %RAX
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 3
  store i64 %146, i64* %PC
  store i64 %144, i64* %RDI, align 8, !tbaa !2428
  %147 = load i64, i64* %PC
  %148 = sub i64 %147, 8667
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 5
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 5
  store i64 %152, i64* %PC
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %154 = load i64, i64* %153, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %150, i64* %156
  store i64 %155, i64* %153, align 8, !tbaa !2428
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %148, i64* %157, align 8, !tbaa !2428
  %158 = load i64, i64* %PC
  %159 = call %struct.Memory* @ext_603318_gettimeofday(%struct.State* %0, i64 %158, %struct.Memory* %2)
  %160 = load i64, i64* %RCX
  %161 = load i32, i32* %ECX
  %162 = zext i32 %161 to i64
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 2
  store i64 %164, i64* %PC
  %165 = xor i64 %162, %160
  %166 = trunc i64 %165 to i32
  %167 = and i64 %165, 4294967295
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %168, align 1, !tbaa !2432
  %169 = and i32 %166, 255
  %170 = call i32 @llvm.ctpop.i32(i32 %169) #16
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  %173 = xor i8 %172, 1
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %173, i8* %174, align 1, !tbaa !2446
  %175 = icmp eq i32 %166, 0
  %176 = zext i1 %175 to i8
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %176, i8* %177, align 1, !tbaa !2448
  %178 = lshr i32 %166, 31
  %179 = trunc i32 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %179, i8* %180, align 1, !tbaa !2449
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %181, align 1, !tbaa !2450
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %182, align 1, !tbaa !2447
  %183 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 8
  store i64 %185, i64* %PC
  %186 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 240) to double*)
  %187 = bitcast i8* %183 to double*
  store double %186, double* %187, align 1, !tbaa !2451
  %188 = getelementptr inbounds i8, i8* %183, i64 8
  %189 = bitcast i8* %188 to double*
  store double 0.000000e+00, double* %189, align 1, !tbaa !2451
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 8
  store i64 %191, i64* %PC
  %192 = load i64, i64* bitcast (%tnow_type* @tnow to i64*)
  store i64 %192, i64* %RSI, align 8, !tbaa !2428
  %193 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %194 = load i64, i64* %RSI
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 5
  store i64 %196, i64* %PC
  %197 = sitofp i64 %194 to double
  %198 = bitcast i8* %193 to double*
  store double %197, double* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 8
  store i64 %200, i64* %PC
  %201 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%tnow_type* @tnow to i64), i64 8) to i64*)
  store i64 %201, i64* %RSI, align 8, !tbaa !2428
  %202 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %203 = load i64, i64* %RSI
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 5
  store i64 %205, i64* %PC
  %206 = sitofp i64 %203 to double
  %207 = bitcast i8* %202 to double*
  store double %206, double* %207, align 1, !tbaa !2451
  %208 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %209 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %210 = bitcast %union.vec128_t* %XMM0 to i8*
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 4
  store i64 %212, i64* %PC
  %213 = bitcast i8* %209 to double*
  %214 = load double, double* %213, align 1
  %215 = getelementptr inbounds i8, i8* %209, i64 8
  %216 = bitcast i8* %215 to i64*
  %217 = load i64, i64* %216, align 1
  %218 = bitcast i8* %210 to double*
  %219 = load double, double* %218, align 1
  %220 = fmul double %214, %219
  %221 = bitcast i8* %208 to double*
  store double %220, double* %221, align 1, !tbaa !2451
  %222 = getelementptr inbounds i8, i8* %208, i64 8
  %223 = bitcast i8* %222 to i64*
  store i64 %217, i64* %223, align 1, !tbaa !2451
  %224 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %225 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %226 = bitcast %union.vec128_t* %XMM2 to i8*
  %227 = load i64, i64* %PC
  %228 = add i64 %227, 4
  store i64 %228, i64* %PC
  %229 = bitcast i8* %225 to double*
  %230 = load double, double* %229, align 1
  %231 = getelementptr inbounds i8, i8* %225, i64 8
  %232 = bitcast i8* %231 to i64*
  %233 = load i64, i64* %232, align 1
  %234 = bitcast i8* %226 to double*
  %235 = load double, double* %234, align 1
  %236 = fadd double %230, %235
  %237 = bitcast i8* %224 to double*
  store double %236, double* %237, align 1, !tbaa !2451
  %238 = getelementptr inbounds i8, i8* %224, i64 8
  %239 = bitcast i8* %238 to i64*
  store i64 %233, i64* %239, align 1, !tbaa !2451
  %240 = load i64, i64* %RBP
  %241 = sub i64 %240, 8
  %242 = load i64, i64* %PC
  %243 = add i64 %242, 4
  store i64 %243, i64* %PC
  %244 = inttoptr i64 %241 to i64*
  %245 = load i64, i64* %244
  store i64 %245, i64* %RSI, align 8, !tbaa !2428
  %246 = load i64, i64* %RSI
  %247 = add i64 %246, 16
  %248 = bitcast %union.vec128_t* %XMM1 to i8*
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 5
  store i64 %250, i64* %PC
  %251 = bitcast i8* %248 to double*
  %252 = load double, double* %251, align 1
  %253 = inttoptr i64 %247 to double*
  store double %252, double* %253
  %254 = load i64, i64* %RBP
  %255 = sub i64 %254, 8
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 4
  store i64 %257, i64* %PC
  %258 = inttoptr i64 %255 to i64*
  %259 = load i64, i64* %258
  store i64 %259, i64* %RSI, align 8, !tbaa !2428
  %260 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %261 = load i64, i64* %RSI
  %262 = add i64 %261, 16
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 5
  store i64 %264, i64* %PC
  %265 = inttoptr i64 %262 to double*
  %266 = load double, double* %265
  %267 = bitcast i8* %260 to double*
  store double %266, double* %267, align 1, !tbaa !2451
  %268 = getelementptr inbounds i8, i8* %260, i64 8
  %269 = bitcast i8* %268 to double*
  store double 0.000000e+00, double* %269, align 1, !tbaa !2451
  %270 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %271 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %272 = load i64, i64* %RBP
  %273 = sub i64 %272, 16
  %274 = load i64, i64* %PC
  %275 = add i64 %274, 5
  store i64 %275, i64* %PC
  %276 = bitcast i8* %271 to double*
  %277 = load double, double* %276, align 1
  %278 = getelementptr inbounds i8, i8* %271, i64 8
  %279 = bitcast i8* %278 to i64*
  %280 = load i64, i64* %279, align 1
  %281 = inttoptr i64 %273 to double*
  %282 = load double, double* %281
  %283 = fsub double %277, %282
  %284 = bitcast i8* %270 to double*
  store double %283, double* %284, align 1, !tbaa !2451
  %285 = getelementptr inbounds i8, i8* %270, i64 8
  %286 = bitcast i8* %285 to i64*
  store i64 %280, i64* %286, align 1, !tbaa !2451
  %287 = load i64, i64* %RBP
  %288 = sub i64 %287, 8
  %289 = load i64, i64* %PC
  %290 = add i64 %289, 4
  store i64 %290, i64* %PC
  %291 = inttoptr i64 %288 to i64*
  %292 = load i64, i64* %291
  store i64 %292, i64* %RSI, align 8, !tbaa !2428
  %293 = load i64, i64* %RSI
  %294 = add i64 %293, 8
  %295 = bitcast %union.vec128_t* %XMM0 to i8*
  %296 = load i64, i64* %PC
  %297 = add i64 %296, 5
  store i64 %297, i64* %PC
  %298 = bitcast i8* %295 to double*
  %299 = load double, double* %298, align 1
  %300 = inttoptr i64 %294 to double*
  store double %299, double* %300
  %301 = load i64, i64* %RBP
  %302 = sub i64 %301, 20
  %303 = load i32, i32* %EAX
  %304 = zext i32 %303 to i64
  %305 = load i64, i64* %PC
  %306 = add i64 %305, 3
  store i64 %306, i64* %PC
  %307 = inttoptr i64 %302 to i32*
  store i32 %303, i32* %307
  %308 = load i32, i32* %ECX
  %309 = zext i32 %308 to i64
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 2
  store i64 %311, i64* %PC
  %312 = and i64 %309, 4294967295
  store i64 %312, i64* %RAX, align 8, !tbaa !2428
  %313 = load i64, i64* %RSP
  %314 = load i64, i64* %PC
  %315 = add i64 %314, 4
  store i64 %315, i64* %PC
  %316 = add i64 32, %313
  store i64 %316, i64* %RSP, align 8, !tbaa !2428
  %317 = icmp ult i64 %316, %313
  %318 = icmp ult i64 %316, 32
  %319 = or i1 %317, %318
  %320 = zext i1 %319 to i8
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %320, i8* %321, align 1, !tbaa !2432
  %322 = trunc i64 %316 to i32
  %323 = and i32 %322, 255
  %324 = call i32 @llvm.ctpop.i32(i32 %323) #16
  %325 = trunc i32 %324 to i8
  %326 = and i8 %325, 1
  %327 = xor i8 %326, 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %327, i8* %328, align 1, !tbaa !2446
  %329 = xor i64 32, %313
  %330 = xor i64 %329, %316
  %331 = lshr i64 %330, 4
  %332 = trunc i64 %331 to i8
  %333 = and i8 %332, 1
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %333, i8* %334, align 1, !tbaa !2447
  %335 = icmp eq i64 %316, 0
  %336 = zext i1 %335 to i8
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %336, i8* %337, align 1, !tbaa !2448
  %338 = lshr i64 %316, 63
  %339 = trunc i64 %338 to i8
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %339, i8* %340, align 1, !tbaa !2449
  %341 = lshr i64 %313, 63
  %342 = xor i64 %338, %341
  %343 = add nuw nsw i64 %342, %338
  %344 = icmp eq i64 %343, 2
  %345 = zext i1 %344 to i8
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %345, i8* %346, align 1, !tbaa !2450
  %347 = load i64, i64* %PC
  %348 = add i64 %347, 1
  store i64 %348, i64* %PC
  %349 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %350 = load i64, i64* %349, align 8, !tbaa !2428
  %351 = add i64 %350, 8
  %352 = inttoptr i64 %350 to i64*
  %353 = load i64, i64* %352
  store i64 %353, i64* %RBP, align 8, !tbaa !2428
  store i64 %351, i64* %349, align 8, !tbaa !2428
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 1
  store i64 %355, i64* %PC
  %356 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %358 = load i64, i64* %357, align 8, !tbaa !2428
  %359 = inttoptr i64 %358 to i64*
  %360 = load i64, i64* %359
  store i64 %360, i64* %356, align 8, !tbaa !2428
  %361 = add i64 %358, 8
  store i64 %361, i64* %357, align 8, !tbaa !2428
  ret %struct.Memory* %159
}

; Function Attrs: noinline
define %struct.Memory* @sub_4026f4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4026f4:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2447
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2448
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2449
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2450
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2449
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2450
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400490_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400490:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 6304024, i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, 6304024
  %37 = icmp ult i64 %33, 6304024
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 6304024, %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2447
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2448
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2449
  %59 = lshr i64 %33, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %59
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2450
  %65 = load i64, i64* %RSP
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %RBP, align 8, !tbaa !2428
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 25
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_4004b8, label %block_4004a1

block_4004b8:                                     ; preds = %block_4004a1, %block_4004b3, %block_400490
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400490 ], [ %2, %block_4004a1 ], [ %2, %block_4004b3 ]
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4004ba:                                     ; preds = %block_4004ab
  %96 = load i64, i64* %RAX
  %97 = load i64, i64* %RAX
  %98 = add i64 %97, %96
  %99 = load i16, i16* %AX
  %100 = zext i16 %99 to i64
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 6
  store i64 %102, i64* %PC
  %103 = load i64, i64* %PC
  %104 = tail call %struct.Memory* @sub_4004c0_register_tm_clones(%struct.State* %0, i64 %103, %struct.Memory* %2)
  ret %struct.Memory* %104

block_4004b3:                                     ; preds = %block_4004ab
  %105 = load i64, i64* %RAX
  %106 = load i64, i64* %RAX
  %107 = add i64 %106, %105
  %108 = load i32, i32* %EAX
  %109 = zext i32 %108 to i64
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 5
  store i64 %111, i64* %PC
  br label %block_4004b8

block_4004ab:                                     ; preds = %block_4004a1
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 1
  store i64 %113, i64* %PC
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %115 = load i64, i64* %114, align 8, !tbaa !2428
  %116 = add i64 %115, 8
  %117 = inttoptr i64 %115 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %RBP, align 8, !tbaa !2428
  store i64 %116, i64* %114, align 8, !tbaa !2428
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  store i64 %120, i64* %PC
  store i64 6304024, i64* %RDI, align 8, !tbaa !2428
  %121 = load i64, i64* %RAX
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 2
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %121, i64* %124, align 8, !tbaa !2428
  %125 = load i64, i64* %PC
  switch i64 %125, label %162 [
    i64 4195514, label %block_4004ba
    i64 4195507, label %block_4004b3
  ]

block_4004a1:                                     ; preds = %block_400490
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 5
  store i64 %127, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %128 = load i64, i64* %RAX
  %129 = load i64, i64* %RAX
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 3
  store i64 %131, i64* %PC
  %132 = and i64 %129, %128
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %133, align 1, !tbaa !2432
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 255
  %136 = call i32 @llvm.ctpop.i32(i32 %135) #16
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  %139 = xor i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %139, i8* %140, align 1, !tbaa !2446
  %141 = icmp eq i64 %132, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2448
  %144 = lshr i64 %132, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2449
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %147, align 1, !tbaa !2450
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %148, align 1, !tbaa !2447
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 15
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 2
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 2
  store i64 %154, i64* %PC
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %156 = load i8, i8* %155, align 1, !tbaa !2448
  store i8 %156, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %158 = icmp ne i8 %156, 0
  %159 = select i1 %158, i64 %150, i64 %152
  store i64 %159, i64* %157, align 8, !tbaa !2428
  %160 = load i8, i8* %BRANCH_TAKEN
  %161 = icmp eq i8 %160, 1
  br i1 %161, label %block_4004b8, label %block_4004ab

; <label>:162:                                    ; preds = %block_4004ab
  %163 = load i64, i64* %PC
  %164 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %163, %struct.Memory* %2)
  ret %struct.Memory* %164
}

; Function Attrs: noinline
define %struct.Memory* @sub_400540_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400540:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RAX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 5
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RCX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 11
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDI = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 13
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSP = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 15
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RBP = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %38 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %37, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %38 to %"class.std::bitset"*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %40 to %"class.std::bitset"*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %42 to %"class.std::bitset"*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %44 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %43, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %44 to %"class.std::bitset"*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %46 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %45, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %46 to %"class.std::bitset"*
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %48 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %47, i64 0, i64 5
  %YMM5 = bitcast %union.VectorReg* %48 to %"class.std::bitset"*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %50 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %49, i64 0, i64 6
  %YMM6 = bitcast %union.VectorReg* %50 to %"class.std::bitset"*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %52 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %51, i64 0, i64 7
  %YMM7 = bitcast %union.VectorReg* %52 to %"class.std::bitset"*
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %54 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %53, i64 0, i64 8
  %YMM8 = bitcast %union.VectorReg* %54 to %"class.std::bitset"*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %56 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %55, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %56 to %union.vec128_t*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %58 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %57, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %58 to %union.vec128_t*
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %60 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %59, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %60 to %union.vec128_t*
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %62 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %61, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %62 to %union.vec128_t*
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %64 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %63, i64 0, i64 4
  %XMM4 = bitcast %union.VectorReg* %64 to %union.vec128_t*
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %66 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %65, i64 0, i64 5
  %XMM5 = bitcast %union.VectorReg* %66 to %union.vec128_t*
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %68 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %67, i64 0, i64 6
  %XMM6 = bitcast %union.VectorReg* %68 to %union.vec128_t*
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %70 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %69, i64 0, i64 7
  %XMM7 = bitcast %union.VectorReg* %70 to %union.vec128_t*
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %72 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %71, i64 0, i64 8
  %XMM8 = bitcast %union.VectorReg* %72 to %union.vec128_t*
  %73 = load i64, i64* %RBP
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 1
  store i64 %75, i64* %PC
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %77 = load i64, i64* %76, align 8, !tbaa !2428
  %78 = add i64 %77, -8
  %79 = inttoptr i64 %78 to i64*
  store i64 %73, i64* %79
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %80 = load i64, i64* %RSP
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC
  store i64 %80, i64* %RBP, align 8, !tbaa !2428
  %83 = load i64, i64* %RSP
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 7
  store i64 %85, i64* %PC
  %86 = sub i64 %83, 352
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  %87 = icmp ult i64 %83, 352
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %88, i8* %89, align 1, !tbaa !2432
  %90 = trunc i64 %86 to i32
  %91 = and i32 %90, 255
  %92 = call i32 @llvm.ctpop.i32(i32 %91) #16
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %95, i8* %96, align 1, !tbaa !2446
  %97 = xor i64 352, %83
  %98 = xor i64 %97, %86
  %99 = lshr i64 %98, 4
  %100 = trunc i64 %99 to i8
  %101 = and i8 %100, 1
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %101, i8* %102, align 1, !tbaa !2447
  %103 = icmp eq i64 %86, 0
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %104, i8* %105, align 1, !tbaa !2448
  %106 = lshr i64 %86, 63
  %107 = trunc i64 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %107, i8* %108, align 1, !tbaa !2449
  %109 = lshr i64 %83, 63
  %110 = xor i64 %106, %109
  %111 = add nuw nsw i64 %110, %109
  %112 = icmp eq i64 %111, 2
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %113, i8* %114, align 1, !tbaa !2450
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 10
  store i64 %116, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 304), i64* %RDI, align 8, !tbaa !2428
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 4
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 0, i32* %121
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 2
  store i64 %123, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %124 = load i64, i64* %PC
  %125 = sub i64 %124, 302
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 5
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 5
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = add i64 %131, -8
  %133 = inttoptr i64 %132 to i64*
  store i64 %127, i64* %133
  store i64 %132, i64* %130, align 8, !tbaa !2428
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %125, i64* %134, align 8, !tbaa !2428
  %135 = load i64, i64* %PC
  %136 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %135, %struct.Memory* %2)
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 10
  store i64 %138, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 248), i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %RBP
  %140 = sub i64 %139, 92
  %141 = load i32, i32* %EAX
  %142 = zext i32 %141 to i64
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 3
  store i64 %144, i64* %PC
  %145 = inttoptr i64 %140 to i32*
  store i32 %141, i32* %145
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 2
  store i64 %147, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %148 = load i64, i64* %PC
  %149 = sub i64 %148, 322
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 5
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 5
  store i64 %153, i64* %PC
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %155 = load i64, i64* %154, align 8, !tbaa !2428
  %156 = add i64 %155, -8
  %157 = inttoptr i64 %156 to i64*
  store i64 %151, i64* %157
  store i64 %156, i64* %154, align 8, !tbaa !2428
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %149, i64* %158, align 8, !tbaa !2428
  %159 = load i64, i64* %PC
  %160 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %159, %struct.Memory* %136)
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 10
  store i64 %162, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 306), i64* %RDI, align 8, !tbaa !2428
  %163 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 8
  store i64 %165, i64* %PC
  %166 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 8) to double*)
  %167 = bitcast i8* %163 to double*
  store double %166, double* %167, align 1, !tbaa !2451
  %168 = getelementptr inbounds i8, i8* %163, i64 8
  %169 = bitcast i8* %168 to double*
  store double 0.000000e+00, double* %169, align 1, !tbaa !2451
  %170 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 8
  store i64 %172, i64* %PC
  %173 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 16) to double*)
  %174 = bitcast i8* %170 to double*
  store double %173, double* %174, align 1, !tbaa !2451
  %175 = getelementptr inbounds i8, i8* %170, i64 8
  %176 = bitcast i8* %175 to double*
  store double 0.000000e+00, double* %176, align 1, !tbaa !2451
  %177 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 8
  store i64 %179, i64* %PC
  %180 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 24) to double*)
  %181 = bitcast i8* %177 to double*
  store double %180, double* %181, align 1, !tbaa !2451
  %182 = getelementptr inbounds i8, i8* %177, i64 8
  %183 = bitcast i8* %182 to double*
  store double 0.000000e+00, double* %183, align 1, !tbaa !2451
  %184 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 8
  store i64 %186, i64* %PC
  %187 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 32) to double*)
  %188 = bitcast i8* %184 to double*
  store double %187, double* %188, align 1, !tbaa !2451
  %189 = getelementptr inbounds i8, i8* %184, i64 8
  %190 = bitcast i8* %189 to double*
  store double 0.000000e+00, double* %190, align 1, !tbaa !2451
  %191 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 8
  store i64 %193, i64* %PC
  %194 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 40) to double*)
  %195 = bitcast i8* %191 to double*
  store double %194, double* %195, align 1, !tbaa !2451
  %196 = getelementptr inbounds i8, i8* %191, i64 8
  %197 = bitcast i8* %196 to double*
  store double 0.000000e+00, double* %197, align 1, !tbaa !2451
  %198 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 8
  store i64 %200, i64* %PC
  %201 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 48) to double*)
  %202 = bitcast i8* %198 to double*
  store double %201, double* %202, align 1, !tbaa !2451
  %203 = getelementptr inbounds i8, i8* %198, i64 8
  %204 = bitcast i8* %203 to double*
  store double 0.000000e+00, double* %204, align 1, !tbaa !2451
  %205 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 8
  store i64 %207, i64* %PC
  %208 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 56) to double*)
  %209 = bitcast i8* %205 to double*
  store double %208, double* %209, align 1, !tbaa !2451
  %210 = getelementptr inbounds i8, i8* %205, i64 8
  %211 = bitcast i8* %210 to double*
  store double 0.000000e+00, double* %211, align 1, !tbaa !2451
  %212 = load i64, i64* %RBP
  %213 = sub i64 %212, 56
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 8
  store i64 %215, i64* %PC
  %216 = inttoptr i64 %213 to i64*
  store i64 15625, i64* %216
  %217 = load i64, i64* %RBP
  %218 = sub i64 %217, 56
  %219 = load i64, i64* %PC
  %220 = add i64 %219, 4
  store i64 %220, i64* %PC
  %221 = inttoptr i64 %218 to i64*
  %222 = load i64, i64* %221
  store i64 %222, i64* %RCX, align 8, !tbaa !2428
  %223 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %224 = load i64, i64* %RCX
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 5
  store i64 %226, i64* %PC
  %227 = sitofp i64 %224 to double
  %228 = bitcast i8* %223 to double*
  store double %227, double* %228, align 1, !tbaa !2451
  %229 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %230 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %231 = bitcast %union.vec128_t* %XMM7 to i8*
  %232 = load i64, i64* %PC
  %233 = add i64 %232, 4
  store i64 %233, i64* %PC
  %234 = bitcast i8* %230 to double*
  %235 = load double, double* %234, align 1
  %236 = getelementptr inbounds i8, i8* %230, i64 8
  %237 = bitcast i8* %236 to i64*
  %238 = load i64, i64* %237, align 1
  %239 = bitcast i8* %231 to double*
  %240 = load double, double* %239, align 1
  %241 = fdiv double %235, %240
  %242 = bitcast i8* %229 to double*
  store double %241, double* %242, align 1, !tbaa !2451
  %243 = getelementptr inbounds i8, i8* %229, i64 8
  %244 = bitcast i8* %243 to i64*
  store i64 %238, i64* %244, align 1, !tbaa !2451
  %245 = bitcast %union.vec128_t* %XMM6 to i8*
  %246 = load i64, i64* %PC
  %247 = add i64 %246, 9
  store i64 %247, i64* %PC
  %248 = bitcast i8* %245 to double*
  %249 = load double, double* %248, align 1
  store double %249, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %250 = bitcast %union.vec128_t* %XMM4 to i8*
  %251 = load i64, i64* %PC
  %252 = add i64 %251, 9
  store i64 %252, i64* %PC
  %253 = bitcast i8* %250 to double*
  %254 = load double, double* %253, align 1
  store double %254, double* bitcast (%TLimit_type* @TLimit to double*)
  %255 = load i64, i64* %RBP
  %256 = sub i64 %255, 64
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 8
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %256 to i64*
  store i64 512000000, i64* %259
  %260 = bitcast %union.vec128_t* %XMM5 to i8*
  %261 = load i64, i64* %PC
  %262 = add i64 %261, 9
  store i64 %262, i64* %PC
  %263 = bitcast i8* %260 to double*
  %264 = load double, double* %263, align 1
  store double %264, double* bitcast (%piref_type* @piref to double*)
  %265 = bitcast %union.vec128_t* %XMM4 to i8*
  %266 = load i64, i64* %PC
  %267 = add i64 %266, 9
  store i64 %267, i64* %PC
  %268 = bitcast i8* %265 to double*
  %269 = load double, double* %268, align 1
  store double %269, double* bitcast (%one_type* @one to double*)
  %270 = bitcast %union.vec128_t* %XMM3 to i8*
  %271 = load i64, i64* %PC
  %272 = add i64 %271, 9
  store i64 %272, i64* %PC
  %273 = bitcast i8* %270 to double*
  %274 = load double, double* %273, align 1
  store double %274, double* bitcast (%two_type* @two to double*)
  %275 = bitcast %union.vec128_t* %XMM2 to i8*
  %276 = load i64, i64* %PC
  %277 = add i64 %276, 9
  store i64 %277, i64* %PC
  %278 = bitcast i8* %275 to double*
  %279 = load double, double* %278, align 1
  store double %279, double* bitcast (%three_type* @three to double*)
  %280 = bitcast %union.vec128_t* %XMM1 to i8*
  %281 = load i64, i64* %PC
  %282 = add i64 %281, 9
  store i64 %282, i64* %PC
  %283 = bitcast i8* %280 to double*
  %284 = load double, double* %283, align 1
  store double %284, double* bitcast (%four_type* @four to double*)
  %285 = bitcast %union.vec128_t* %XMM0 to i8*
  %286 = load i64, i64* %PC
  %287 = add i64 %286, 9
  store i64 %287, i64* %PC
  %288 = bitcast i8* %285 to double*
  %289 = load double, double* %288, align 1
  store double %289, double* bitcast (%five_type* @five to double*)
  %290 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %291 = load i64, i64* %PC
  %292 = add i64 %291, 9
  store i64 %292, i64* %PC
  %293 = load double, double* bitcast (%one_type* @one to double*)
  %294 = bitcast i8* %290 to double*
  store double %293, double* %294, align 1, !tbaa !2451
  %295 = getelementptr inbounds i8, i8* %290, i64 8
  %296 = bitcast i8* %295 to double*
  store double 0.000000e+00, double* %296, align 1, !tbaa !2451
  %297 = bitcast %union.vec128_t* %XMM0 to i8*
  %298 = load i64, i64* %PC
  %299 = add i64 %298, 9
  store i64 %299, i64* %PC
  %300 = bitcast i8* %297 to double*
  %301 = load double, double* %300, align 1
  store double %301, double* bitcast (%scale_type* @scale to double*)
  %302 = load i64, i64* %RBP
  %303 = sub i64 %302, 96
  %304 = load i32, i32* %EAX
  %305 = zext i32 %304 to i64
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 3
  store i64 %307, i64* %PC
  %308 = inttoptr i64 %303 to i32*
  store i32 %304, i32* %308
  %309 = load i64, i64* %PC
  %310 = add i64 %309, 2
  store i64 %310, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %311 = load i64, i64* %PC
  %312 = sub i64 %311, 517
  %313 = load i64, i64* %PC
  %314 = add i64 %313, 5
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 5
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, -8
  %320 = inttoptr i64 %319 to i64*
  store i64 %314, i64* %320
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %321 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %312, i64* %321, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %322, %struct.Memory* %160)
  %324 = load i64, i64* %PC
  %325 = add i64 %324, 10
  store i64 %325, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 354), i64* %RDI, align 8, !tbaa !2428
  %326 = load i64, i64* %RBP
  %327 = sub i64 %326, 100
  %328 = load i32, i32* %EAX
  %329 = zext i32 %328 to i64
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 3
  store i64 %331, i64* %PC
  %332 = inttoptr i64 %327 to i32*
  store i32 %328, i32* %332
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %335 = load i64, i64* %PC
  %336 = sub i64 %335, 537
  %337 = load i64, i64* %PC
  %338 = add i64 %337, 5
  %339 = load i64, i64* %PC
  %340 = add i64 %339, 5
  store i64 %340, i64* %PC
  %341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %342 = load i64, i64* %341, align 8, !tbaa !2428
  %343 = add i64 %342, -8
  %344 = inttoptr i64 %343 to i64*
  store i64 %338, i64* %344
  store i64 %343, i64* %341, align 8, !tbaa !2428
  %345 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %336, i64* %345, align 8, !tbaa !2428
  %346 = load i64, i64* %PC
  %347 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %346, %struct.Memory* %323)
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 10
  store i64 %349, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %350 = load i64, i64* %RBP
  %351 = sub i64 %350, 104
  %352 = load i32, i32* %EAX
  %353 = zext i32 %352 to i64
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 3
  store i64 %355, i64* %PC
  %356 = inttoptr i64 %351 to i32*
  store i32 %352, i32* %356
  %357 = load i64, i64* %PC
  %358 = add i64 %357, 8085
  %359 = load i64, i64* %PC
  %360 = add i64 %359, 5
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 5
  store i64 %362, i64* %PC
  %363 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %364 = load i64, i64* %363, align 8, !tbaa !2428
  %365 = add i64 %364, -8
  %366 = inttoptr i64 %365 to i64*
  store i64 %360, i64* %366
  store i64 %365, i64* %363, align 8, !tbaa !2428
  %367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %358, i64* %367, align 8, !tbaa !2428
  %368 = load i64, i64* %PC
  %369 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %368, %struct.Memory* %347)
  %370 = load i64, i64* %PC
  %371 = add i64 %370, 10
  store i64 %371, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %372 = load i64, i64* %RBP
  %373 = sub i64 %372, 108
  %374 = load i32, i32* %EAX
  %375 = zext i32 %374 to i64
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 3
  store i64 %377, i64* %PC
  %378 = inttoptr i64 %373 to i32*
  store i32 %374, i32* %378
  %379 = load i64, i64* %PC
  %380 = add i64 %379, 8067
  %381 = load i64, i64* %PC
  %382 = add i64 %381, 5
  %383 = load i64, i64* %PC
  %384 = add i64 %383, 5
  store i64 %384, i64* %PC
  %385 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %386 = load i64, i64* %385, align 8, !tbaa !2428
  %387 = add i64 %386, -8
  %388 = inttoptr i64 %387 to i64*
  store i64 %382, i64* %388
  store i64 %387, i64* %385, align 8, !tbaa !2428
  %389 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %380, i64* %389, align 8, !tbaa !2428
  %390 = load i64, i64* %PC
  %391 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %390, %struct.Memory* %369)
  %392 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %393 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %394 = bitcast %union.vec128_t* %XMM0 to i8*
  %395 = load i64, i64* %PC
  %396 = add i64 %395, 3
  store i64 %396, i64* %PC
  %397 = bitcast i8* %393 to i64*
  %398 = load i64, i64* %397, align 1
  %399 = getelementptr inbounds i8, i8* %393, i64 8
  %400 = bitcast i8* %399 to i64*
  %401 = load i64, i64* %400, align 1
  %402 = bitcast i8* %394 to i64*
  %403 = load i64, i64* %402, align 1
  %404 = getelementptr inbounds i8, i8* %394, i64 8
  %405 = bitcast i8* %404 to i64*
  %406 = load i64, i64* %405, align 1
  %407 = xor i64 %403, %398
  %408 = xor i64 %406, %401
  %409 = trunc i64 %407 to i32
  %410 = lshr i64 %407, 32
  %411 = trunc i64 %410 to i32
  %412 = bitcast i8* %392 to i32*
  store i32 %409, i32* %412, align 1, !tbaa !2454
  %413 = getelementptr inbounds i8, i8* %392, i64 4
  %414 = bitcast i8* %413 to i32*
  store i32 %411, i32* %414, align 1, !tbaa !2454
  %415 = trunc i64 %408 to i32
  %416 = getelementptr inbounds i8, i8* %392, i64 8
  %417 = bitcast i8* %416 to i32*
  store i32 %415, i32* %417, align 1, !tbaa !2454
  %418 = lshr i64 %408, 32
  %419 = trunc i64 %418 to i32
  %420 = getelementptr inbounds i8, i8* %392, i64 12
  %421 = bitcast i8* %420 to i32*
  store i32 %419, i32* %421, align 1, !tbaa !2454
  %422 = load i64, i64* %RBP
  %423 = sub i64 %422, 56
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 4
  store i64 %425, i64* %PC
  %426 = inttoptr i64 %423 to i64*
  %427 = load i64, i64* %426
  store i64 %427, i64* %RCX, align 8, !tbaa !2428
  %428 = load i64, i64* %RBP
  %429 = sub i64 %428, 88
  %430 = load i64, i64* %RCX
  %431 = load i64, i64* %PC
  %432 = add i64 %431, 4
  store i64 %432, i64* %PC
  %433 = inttoptr i64 %429 to i64*
  store i64 %430, i64* %433
  %434 = bitcast %union.vec128_t* %XMM0 to i8*
  %435 = load i64, i64* %PC
  %436 = add i64 %435, 9
  store i64 %436, i64* %PC
  %437 = bitcast i8* %434 to double*
  %438 = load double, double* %437, align 1
  store double %438, double* bitcast (%sa_type* @sa to double*)
  %439 = load i64, i64* %RBP
  %440 = sub i64 %439, 112
  %441 = load i32, i32* %EAX
  %442 = zext i32 %441 to i64
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 3
  store i64 %444, i64* %PC
  %445 = inttoptr i64 %440 to i32*
  store i32 %441, i32* %445
  br label %block_400689

block_4014f4:                                     ; preds = %block_40124b, %block_401509
  %MEMORY.0 = phi %struct.Memory* [ %11970, %block_40124b ], [ %MEMORY.0, %block_401509 ]
  %446 = load i64, i64* %RBP
  %447 = sub i64 %446, 72
  %448 = load i64, i64* %PC
  %449 = add i64 %448, 4
  store i64 %449, i64* %PC
  %450 = inttoptr i64 %447 to i64*
  %451 = load i64, i64* %450
  store i64 %451, i64* %RAX, align 8, !tbaa !2428
  %452 = load i64, i64* %RBP
  %453 = sub i64 %452, 80
  %454 = load i64, i64* %PC
  %455 = add i64 %454, 4
  store i64 %455, i64* %PC
  %456 = inttoptr i64 %453 to i64*
  %457 = load i64, i64* %456
  store i64 %457, i64* %RCX, align 8, !tbaa !2428
  %458 = load i64, i64* %RCX
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 4
  store i64 %460, i64* %PC
  %461 = sub i64 %458, 1
  store i64 %461, i64* %RCX, align 8, !tbaa !2428
  %462 = icmp ult i64 %458, 1
  %463 = zext i1 %462 to i8
  %464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %463, i8* %464, align 1, !tbaa !2432
  %465 = trunc i64 %461 to i32
  %466 = and i32 %465, 255
  %467 = call i32 @llvm.ctpop.i32(i32 %466) #16
  %468 = trunc i32 %467 to i8
  %469 = and i8 %468, 1
  %470 = xor i8 %469, 1
  %471 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %470, i8* %471, align 1, !tbaa !2446
  %472 = xor i64 1, %458
  %473 = xor i64 %472, %461
  %474 = lshr i64 %473, 4
  %475 = trunc i64 %474 to i8
  %476 = and i8 %475, 1
  %477 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %476, i8* %477, align 1, !tbaa !2447
  %478 = icmp eq i64 %461, 0
  %479 = zext i1 %478 to i8
  %480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %479, i8* %480, align 1, !tbaa !2448
  %481 = lshr i64 %461, 63
  %482 = trunc i64 %481 to i8
  %483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %482, i8* %483, align 1, !tbaa !2449
  %484 = lshr i64 %458, 63
  %485 = xor i64 %481, %484
  %486 = add nuw nsw i64 %485, %484
  %487 = icmp eq i64 %486, 2
  %488 = zext i1 %487 to i8
  %489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %488, i8* %489, align 1, !tbaa !2450
  %490 = load i64, i64* %RAX
  %491 = load i64, i64* %RCX
  %492 = load i64, i64* %PC
  %493 = add i64 %492, 3
  store i64 %493, i64* %PC
  %494 = sub i64 %490, %491
  %495 = icmp ult i64 %490, %491
  %496 = zext i1 %495 to i8
  %497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %496, i8* %497, align 1, !tbaa !2432
  %498 = trunc i64 %494 to i32
  %499 = and i32 %498, 255
  %500 = call i32 @llvm.ctpop.i32(i32 %499) #16
  %501 = trunc i32 %500 to i8
  %502 = and i8 %501, 1
  %503 = xor i8 %502, 1
  %504 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %503, i8* %504, align 1, !tbaa !2446
  %505 = xor i64 %491, %490
  %506 = xor i64 %505, %494
  %507 = lshr i64 %506, 4
  %508 = trunc i64 %507 to i8
  %509 = and i8 %508, 1
  %510 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %509, i8* %510, align 1, !tbaa !2447
  %511 = icmp eq i64 %494, 0
  %512 = zext i1 %511 to i8
  %513 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %512, i8* %513, align 1, !tbaa !2448
  %514 = lshr i64 %494, 63
  %515 = trunc i64 %514 to i8
  %516 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %515, i8* %516, align 1, !tbaa !2449
  %517 = lshr i64 %490, 63
  %518 = lshr i64 %491, 63
  %519 = xor i64 %518, %517
  %520 = xor i64 %514, %517
  %521 = add nuw nsw i64 %520, %519
  %522 = icmp eq i64 %521, 2
  %523 = zext i1 %522 to i8
  %524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %523, i8* %524, align 1, !tbaa !2450
  %525 = load i64, i64* %PC
  %526 = add i64 %525, 300
  %527 = load i64, i64* %PC
  %528 = add i64 %527, 6
  %529 = load i64, i64* %PC
  %530 = add i64 %529, 6
  store i64 %530, i64* %PC
  %531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %532 = load i8, i8* %531, align 1, !tbaa !2448
  %533 = icmp eq i8 %532, 0
  %534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %535 = load i8, i8* %534, align 1, !tbaa !2449
  %536 = icmp ne i8 %535, 0
  %537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %538 = load i8, i8* %537, align 1, !tbaa !2450
  %539 = icmp ne i8 %538, 0
  %540 = xor i1 %536, %539
  %541 = xor i1 %540, true
  %542 = and i1 %533, %541
  %543 = zext i1 %542 to i8
  store i8 %543, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %545 = select i1 %542, i64 %526, i64 %528
  store i64 %545, i64* %544, align 8, !tbaa !2428
  %546 = load i8, i8* %BRANCH_TAKEN
  %547 = icmp eq i8 %546, 1
  br i1 %547, label %block_40162f, label %block_401509

block_400b6d:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %548 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %549 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %550 = bitcast %union.vec128_t* %XMM0 to i8*
  %551 = load i64, i64* %PC
  %552 = add i64 %551, 3
  store i64 %552, i64* %PC
  %553 = bitcast i8* %549 to i64*
  %554 = load i64, i64* %553, align 1
  %555 = getelementptr inbounds i8, i8* %549, i64 8
  %556 = bitcast i8* %555 to i64*
  %557 = load i64, i64* %556, align 1
  %558 = bitcast i8* %550 to i64*
  %559 = load i64, i64* %558, align 1
  %560 = getelementptr inbounds i8, i8* %550, i64 8
  %561 = bitcast i8* %560 to i64*
  %562 = load i64, i64* %561, align 1
  %563 = xor i64 %559, %554
  %564 = xor i64 %562, %557
  %565 = trunc i64 %563 to i32
  %566 = lshr i64 %563, 32
  %567 = trunc i64 %566 to i32
  %568 = bitcast i8* %548 to i32*
  store i32 %565, i32* %568, align 1, !tbaa !2454
  %569 = getelementptr inbounds i8, i8* %548, i64 4
  %570 = bitcast i8* %569 to i32*
  store i32 %567, i32* %570, align 1, !tbaa !2454
  %571 = trunc i64 %564 to i32
  %572 = getelementptr inbounds i8, i8* %548, i64 8
  %573 = bitcast i8* %572 to i32*
  store i32 %571, i32* %573, align 1, !tbaa !2454
  %574 = lshr i64 %564, 32
  %575 = trunc i64 %574 to i32
  %576 = getelementptr inbounds i8, i8* %548, i64 12
  %577 = bitcast i8* %576 to i32*
  store i32 %575, i32* %577, align 1, !tbaa !2454
  %578 = bitcast %union.vec128_t* %XMM0 to i8*
  %579 = load i64, i64* %PC
  %580 = add i64 %579, 9
  store i64 %580, i64* %PC
  %581 = bitcast i8* %578 to double*
  %582 = load double, double* %581, align 1
  store double %582, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  br label %block_400b79

block_401d67:                                     ; preds = %block_401ccb
  %583 = load i64, i64* %PC
  %584 = add i64 %583, 10
  store i64 %584, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %585 = load i64, i64* %PC
  %586 = add i64 %585, 2175
  %587 = load i64, i64* %PC
  %588 = add i64 %587, 5
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 5
  store i64 %590, i64* %PC
  %591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %592 = load i64, i64* %591, align 8, !tbaa !2428
  %593 = add i64 %592, -8
  %594 = inttoptr i64 %593 to i64*
  store i64 %588, i64* %594
  store i64 %593, i64* %591, align 8, !tbaa !2428
  %595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %586, i64* %595, align 8, !tbaa !2428
  %596 = load i64, i64* %PC
  %597 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %596, %struct.Memory* %MEMORY.3)
  %598 = load i64, i64* %PC
  %599 = add i64 %598, 10
  store i64 %599, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 606), i64* %RDI, align 8, !tbaa !2428
  %600 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %601 = load i64, i64* %PC
  %602 = add i64 %601, 8
  store i64 %602, i64* %PC
  %603 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 72) to double*)
  %604 = bitcast i8* %600 to double*
  store double %603, double* %604, align 1, !tbaa !2451
  %605 = getelementptr inbounds i8, i8* %600, i64 8
  %606 = bitcast i8* %605 to double*
  store double 0.000000e+00, double* %606, align 1, !tbaa !2451
  %607 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %608 = load i64, i64* %PC
  %609 = add i64 %608, 8
  store i64 %609, i64* %PC
  %610 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 168) to double*)
  %611 = bitcast i8* %607 to double*
  store double %610, double* %611, align 1, !tbaa !2451
  %612 = getelementptr inbounds i8, i8* %607, i64 8
  %613 = bitcast i8* %612 to double*
  store double 0.000000e+00, double* %613, align 1, !tbaa !2451
  %614 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %615 = load i64, i64* %PC
  %616 = add i64 %615, 8
  store i64 %616, i64* %PC
  %617 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 176) to double*)
  %618 = bitcast i8* %614 to double*
  store double %617, double* %618, align 1, !tbaa !2451
  %619 = getelementptr inbounds i8, i8* %614, i64 8
  %620 = bitcast i8* %619 to double*
  store double 0.000000e+00, double* %620, align 1, !tbaa !2451
  %621 = load i64, i64* %PC
  %622 = add i64 %621, 10
  store i64 %622, i64* %PC
  store i64 -9223372036854775808, i64* %RCX, align 8, !tbaa !2428
  %623 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %624 = load i64, i64* %PC
  %625 = add i64 %624, 8
  store i64 %625, i64* %PC
  %626 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 184) to double*)
  %627 = bitcast i8* %623 to double*
  store double %626, double* %627, align 1, !tbaa !2451
  %628 = getelementptr inbounds i8, i8* %623, i64 8
  %629 = bitcast i8* %628 to double*
  store double 0.000000e+00, double* %629, align 1, !tbaa !2451
  %630 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %631 = load i64, i64* %PC
  %632 = add i64 %631, 9
  store i64 %632, i64* %PC
  %633 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %634 = bitcast i8* %630 to double*
  store double %633, double* %634, align 1, !tbaa !2451
  %635 = getelementptr inbounds i8, i8* %630, i64 8
  %636 = bitcast i8* %635 to double*
  store double 0.000000e+00, double* %636, align 1, !tbaa !2451
  %637 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %638 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %639 = load i64, i64* %PC
  %640 = add i64 %639, 9
  store i64 %640, i64* %PC
  %641 = bitcast i8* %638 to double*
  %642 = load double, double* %641, align 1
  %643 = getelementptr inbounds i8, i8* %638, i64 8
  %644 = bitcast i8* %643 to i64*
  %645 = load i64, i64* %644, align 1
  %646 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %647 = fmul double %642, %646
  %648 = bitcast i8* %637 to double*
  store double %647, double* %648, align 1, !tbaa !2451
  %649 = getelementptr inbounds i8, i8* %637, i64 8
  %650 = bitcast i8* %649 to i64*
  store i64 %645, i64* %650, align 1, !tbaa !2451
  %651 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %652 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %653 = load i64, i64* %PC
  %654 = add i64 %653, 9
  store i64 %654, i64* %PC
  %655 = bitcast i8* %652 to double*
  %656 = load double, double* %655, align 1
  %657 = getelementptr inbounds i8, i8* %652, i64 8
  %658 = bitcast i8* %657 to i64*
  %659 = load i64, i64* %658, align 1
  %660 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %661 = fsub double %656, %660
  %662 = bitcast i8* %651 to double*
  store double %661, double* %662, align 1, !tbaa !2451
  %663 = getelementptr inbounds i8, i8* %651, i64 8
  %664 = bitcast i8* %663 to i64*
  store i64 %659, i64* %664, align 1, !tbaa !2451
  %665 = bitcast %union.vec128_t* %XMM4 to i8*
  %666 = load i64, i64* %PC
  %667 = add i64 %666, 9
  store i64 %667, i64* %PC
  %668 = bitcast i8* %665 to double*
  %669 = load double, double* %668, align 1
  store double %669, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 168) to double*)
  %670 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %671 = load i64, i64* %PC
  %672 = add i64 %671, 9
  store i64 %672, i64* %PC
  %673 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 168) to double*)
  %674 = bitcast i8* %670 to double*
  store double %673, double* %674, align 1, !tbaa !2451
  %675 = getelementptr inbounds i8, i8* %670, i64 8
  %676 = bitcast i8* %675 to double*
  store double 0.000000e+00, double* %676, align 1, !tbaa !2451
  %677 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %678 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %679 = bitcast %union.vec128_t* %XMM3 to i8*
  %680 = load i64, i64* %PC
  %681 = add i64 %680, 4
  store i64 %681, i64* %PC
  %682 = bitcast i8* %678 to double*
  %683 = load double, double* %682, align 1
  %684 = getelementptr inbounds i8, i8* %678, i64 8
  %685 = bitcast i8* %684 to i64*
  %686 = load i64, i64* %685, align 1
  %687 = bitcast i8* %679 to double*
  %688 = load double, double* %687, align 1
  %689 = fdiv double %683, %688
  %690 = bitcast i8* %677 to double*
  store double %689, double* %690, align 1, !tbaa !2451
  %691 = getelementptr inbounds i8, i8* %677, i64 8
  %692 = bitcast i8* %691 to i64*
  store i64 %686, i64* %692, align 1, !tbaa !2451
  %693 = bitcast %union.vec128_t* %XMM4 to i8*
  %694 = load i64, i64* %PC
  %695 = add i64 %694, 9
  store i64 %695, i64* %PC
  %696 = bitcast i8* %693 to double*
  %697 = load double, double* %696, align 1
  store double %697, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 176) to double*)
  %698 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 9
  store i64 %700, i64* %PC
  %701 = load double, double* bitcast (%sa_type* @sa to double*)
  %702 = bitcast i8* %698 to double*
  store double %701, double* %702, align 1, !tbaa !2451
  %703 = getelementptr inbounds i8, i8* %698, i64 8
  %704 = bitcast i8* %703 to double*
  store double 0.000000e+00, double* %704, align 1, !tbaa !2451
  %705 = load i64, i64* %RBP
  %706 = sub i64 %705, 48
  %707 = bitcast %union.vec128_t* %XMM3 to i8*
  %708 = load i64, i64* %PC
  %709 = add i64 %708, 5
  store i64 %709, i64* %PC
  %710 = bitcast i8* %707 to double*
  %711 = load double, double* %710, align 1
  %712 = inttoptr i64 %706 to double*
  store double %711, double* %712
  %713 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %714 = load i64, i64* %RBP
  %715 = sub i64 %714, 48
  %716 = load i64, i64* %PC
  %717 = add i64 %716, 5
  store i64 %717, i64* %PC
  %718 = inttoptr i64 %715 to double*
  %719 = load double, double* %718
  %720 = bitcast i8* %713 to double*
  store double %719, double* %720, align 1, !tbaa !2451
  %721 = getelementptr inbounds i8, i8* %713, i64 8
  %722 = bitcast i8* %721 to double*
  store double 0.000000e+00, double* %722, align 1, !tbaa !2451
  %723 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %724 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %725 = load i64, i64* %RBP
  %726 = sub i64 %725, 48
  %727 = load i64, i64* %PC
  %728 = add i64 %727, 5
  store i64 %728, i64* %PC
  %729 = bitcast i8* %724 to double*
  %730 = load double, double* %729, align 1
  %731 = getelementptr inbounds i8, i8* %724, i64 8
  %732 = bitcast i8* %731 to i64*
  %733 = load i64, i64* %732, align 1
  %734 = inttoptr i64 %726 to double*
  %735 = load double, double* %734
  %736 = fmul double %730, %735
  %737 = bitcast i8* %723 to double*
  store double %736, double* %737, align 1, !tbaa !2451
  %738 = getelementptr inbounds i8, i8* %723, i64 8
  %739 = bitcast i8* %738 to i64*
  store i64 %733, i64* %739, align 1, !tbaa !2451
  %740 = load i64, i64* %RBP
  %741 = sub i64 %740, 24
  %742 = bitcast %union.vec128_t* %XMM3 to i8*
  %743 = load i64, i64* %PC
  %744 = add i64 %743, 5
  store i64 %744, i64* %PC
  %745 = bitcast i8* %742 to double*
  %746 = load double, double* %745, align 1
  %747 = inttoptr i64 %741 to double*
  store double %746, double* %747
  %748 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %749 = load i64, i64* %RBP
  %750 = sub i64 %749, 40
  %751 = load i64, i64* %PC
  %752 = add i64 %751, 5
  store i64 %752, i64* %PC
  %753 = inttoptr i64 %750 to double*
  %754 = load double, double* %753
  %755 = bitcast i8* %748 to double*
  store double %754, double* %755, align 1, !tbaa !2451
  %756 = getelementptr inbounds i8, i8* %748, i64 8
  %757 = bitcast i8* %756 to double*
  store double 0.000000e+00, double* %757, align 1, !tbaa !2451
  %758 = bitcast %union.vec128_t* %XMM3 to i8*
  %759 = load i64, i64* %PC
  %760 = add i64 %759, 5
  store i64 %760, i64* %PC
  %761 = bitcast i8* %758 to i64*
  %762 = load i64, i64* %761, align 1
  store i64 %762, i64* %RDX, align 1, !tbaa !2428
  %763 = load i64, i64* %RDX
  %764 = load i64, i64* %RCX
  %765 = load i64, i64* %PC
  %766 = add i64 %765, 3
  store i64 %766, i64* %PC
  %767 = xor i64 %764, %763
  store i64 %767, i64* %RDX, align 8, !tbaa !2428
  %768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %768, align 1, !tbaa !2432
  %769 = trunc i64 %767 to i32
  %770 = and i32 %769, 255
  %771 = call i32 @llvm.ctpop.i32(i32 %770) #16
  %772 = trunc i32 %771 to i8
  %773 = and i8 %772, 1
  %774 = xor i8 %773, 1
  %775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %774, i8* %775, align 1, !tbaa !2446
  %776 = icmp eq i64 %767, 0
  %777 = zext i1 %776 to i8
  %778 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %777, i8* %778, align 1, !tbaa !2448
  %779 = lshr i64 %767, 63
  %780 = trunc i64 %779 to i8
  %781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %780, i8* %781, align 1, !tbaa !2449
  %782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %782, align 1, !tbaa !2450
  %783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %783, align 1, !tbaa !2447
  %784 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %785 = load i64, i64* %RDX
  %786 = load i64, i64* %PC
  %787 = add i64 %786, 5
  store i64 %787, i64* %PC
  %788 = bitcast i8* %784 to i64*
  store i64 %785, i64* %788, align 1, !tbaa !2428
  %789 = getelementptr inbounds i8, i8* %784, i64 8
  %790 = bitcast i8* %789 to i64*
  store i64 0, i64* %790, align 1, !tbaa !2428
  %791 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %792 = load i64, i64* %RBP
  %793 = sub i64 %792, 40
  %794 = load i64, i64* %PC
  %795 = add i64 %794, 5
  store i64 %795, i64* %PC
  %796 = inttoptr i64 %793 to double*
  %797 = load double, double* %796
  %798 = bitcast i8* %791 to double*
  store double %797, double* %798, align 1, !tbaa !2451
  %799 = getelementptr inbounds i8, i8* %791, i64 8
  %800 = bitcast i8* %799 to double*
  store double 0.000000e+00, double* %800, align 1, !tbaa !2451
  %801 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %802 = load i64, i64* %RBP
  %803 = sub i64 %802, 48
  %804 = load i64, i64* %PC
  %805 = add i64 %804, 5
  store i64 %805, i64* %PC
  %806 = inttoptr i64 %803 to double*
  %807 = load double, double* %806
  %808 = bitcast i8* %801 to double*
  store double %807, double* %808, align 1, !tbaa !2451
  %809 = getelementptr inbounds i8, i8* %801, i64 8
  %810 = bitcast i8* %809 to double*
  store double 0.000000e+00, double* %810, align 1, !tbaa !2451
  %811 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %812 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %813 = load i64, i64* %RBP
  %814 = sub i64 %813, 40
  %815 = load i64, i64* %PC
  %816 = add i64 %815, 5
  store i64 %816, i64* %PC
  %817 = bitcast i8* %812 to double*
  %818 = load double, double* %817, align 1
  %819 = getelementptr inbounds i8, i8* %812, i64 8
  %820 = bitcast i8* %819 to i64*
  %821 = load i64, i64* %820, align 1
  %822 = inttoptr i64 %814 to double*
  %823 = load double, double* %822
  %824 = fadd double %818, %823
  %825 = bitcast i8* %811 to double*
  store double %824, double* %825, align 1, !tbaa !2451
  %826 = getelementptr inbounds i8, i8* %811, i64 8
  %827 = bitcast i8* %826 to i64*
  store i64 %821, i64* %827, align 1, !tbaa !2451
  %828 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %829 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %830 = bitcast %union.vec128_t* %XMM5 to i8*
  %831 = load i64, i64* %PC
  %832 = add i64 %831, 4
  store i64 %832, i64* %PC
  %833 = bitcast i8* %829 to double*
  %834 = load double, double* %833, align 1
  %835 = getelementptr inbounds i8, i8* %829, i64 8
  %836 = bitcast i8* %835 to i64*
  %837 = load i64, i64* %836, align 1
  %838 = bitcast i8* %830 to double*
  %839 = load double, double* %838, align 1
  %840 = fdiv double %834, %839
  %841 = bitcast i8* %828 to double*
  store double %840, double* %841, align 1, !tbaa !2451
  %842 = getelementptr inbounds i8, i8* %828, i64 8
  %843 = bitcast i8* %842 to i64*
  store i64 %837, i64* %843, align 1, !tbaa !2451
  %844 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %845 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %846 = bitcast %union.vec128_t* %XMM4 to i8*
  %847 = load i64, i64* %PC
  %848 = add i64 %847, 4
  store i64 %848, i64* %PC
  %849 = bitcast i8* %845 to double*
  %850 = load double, double* %849, align 1
  %851 = getelementptr inbounds i8, i8* %845, i64 8
  %852 = bitcast i8* %851 to i64*
  %853 = load i64, i64* %852, align 1
  %854 = bitcast i8* %846 to double*
  %855 = load double, double* %854, align 1
  %856 = fsub double %850, %855
  %857 = bitcast i8* %844 to double*
  store double %856, double* %857, align 1, !tbaa !2451
  %858 = getelementptr inbounds i8, i8* %844, i64 8
  %859 = bitcast i8* %858 to i64*
  store i64 %853, i64* %859, align 1, !tbaa !2451
  %860 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %861 = load i64, i64* %RBP
  %862 = sub i64 %861, 48
  %863 = load i64, i64* %PC
  %864 = add i64 %863, 5
  store i64 %864, i64* %PC
  %865 = inttoptr i64 %862 to double*
  %866 = load double, double* %865
  %867 = bitcast i8* %860 to double*
  store double %866, double* %867, align 1, !tbaa !2451
  %868 = getelementptr inbounds i8, i8* %860, i64 8
  %869 = bitcast i8* %868 to double*
  store double 0.000000e+00, double* %869, align 1, !tbaa !2451
  %870 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %871 = load i64, i64* %RBP
  %872 = sub i64 %871, 24
  %873 = load i64, i64* %PC
  %874 = add i64 %873, 5
  store i64 %874, i64* %PC
  %875 = inttoptr i64 %872 to double*
  %876 = load double, double* %875
  %877 = bitcast i8* %870 to double*
  store double %876, double* %877, align 1, !tbaa !2451
  %878 = getelementptr inbounds i8, i8* %870, i64 8
  %879 = bitcast i8* %878 to double*
  store double 0.000000e+00, double* %879, align 1, !tbaa !2451
  %880 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %881 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %882 = load i64, i64* %RBP
  %883 = sub i64 %882, 40
  %884 = load i64, i64* %PC
  %885 = add i64 %884, 5
  store i64 %885, i64* %PC
  %886 = bitcast i8* %881 to double*
  %887 = load double, double* %886, align 1
  %888 = getelementptr inbounds i8, i8* %881, i64 8
  %889 = bitcast i8* %888 to i64*
  %890 = load i64, i64* %889, align 1
  %891 = inttoptr i64 %883 to double*
  %892 = load double, double* %891
  %893 = fadd double %887, %892
  %894 = bitcast i8* %880 to double*
  store double %893, double* %894, align 1, !tbaa !2451
  %895 = getelementptr inbounds i8, i8* %880, i64 8
  %896 = bitcast i8* %895 to i64*
  store i64 %890, i64* %896, align 1, !tbaa !2451
  %897 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %898 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %899 = bitcast %union.vec128_t* %XMM5 to i8*
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 4
  store i64 %901, i64* %PC
  %902 = bitcast i8* %898 to double*
  %903 = load double, double* %902, align 1
  %904 = getelementptr inbounds i8, i8* %898, i64 8
  %905 = bitcast i8* %904 to i64*
  %906 = load i64, i64* %905, align 1
  %907 = bitcast i8* %899 to double*
  %908 = load double, double* %907, align 1
  %909 = fdiv double %903, %908
  %910 = bitcast i8* %897 to double*
  store double %909, double* %910, align 1, !tbaa !2451
  %911 = getelementptr inbounds i8, i8* %897, i64 8
  %912 = bitcast i8* %911 to i64*
  store i64 %906, i64* %912, align 1, !tbaa !2451
  %913 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %914 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %915 = bitcast %union.vec128_t* %XMM4 to i8*
  %916 = load i64, i64* %PC
  %917 = add i64 %916, 4
  store i64 %917, i64* %PC
  %918 = bitcast i8* %914 to double*
  %919 = load double, double* %918, align 1
  %920 = getelementptr inbounds i8, i8* %914, i64 8
  %921 = bitcast i8* %920 to i64*
  %922 = load i64, i64* %921, align 1
  %923 = bitcast i8* %915 to double*
  %924 = load double, double* %923, align 1
  %925 = fsub double %919, %924
  %926 = bitcast i8* %913 to double*
  store double %925, double* %926, align 1, !tbaa !2451
  %927 = getelementptr inbounds i8, i8* %913, i64 8
  %928 = bitcast i8* %927 to i64*
  store i64 %922, i64* %928, align 1, !tbaa !2451
  %929 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %930 = load i64, i64* %RBP
  %931 = sub i64 %930, 24
  %932 = load i64, i64* %PC
  %933 = add i64 %932, 5
  store i64 %933, i64* %PC
  %934 = inttoptr i64 %931 to double*
  %935 = load double, double* %934
  %936 = bitcast i8* %929 to double*
  store double %935, double* %936, align 1, !tbaa !2451
  %937 = getelementptr inbounds i8, i8* %929, i64 8
  %938 = bitcast i8* %937 to double*
  store double 0.000000e+00, double* %938, align 1, !tbaa !2451
  %939 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %940 = load i64, i64* %RBP
  %941 = sub i64 %940, 48
  %942 = load i64, i64* %PC
  %943 = add i64 %942, 5
  store i64 %943, i64* %PC
  %944 = inttoptr i64 %941 to double*
  %945 = load double, double* %944
  %946 = bitcast i8* %939 to double*
  store double %945, double* %946, align 1, !tbaa !2451
  %947 = getelementptr inbounds i8, i8* %939, i64 8
  %948 = bitcast i8* %947 to double*
  store double 0.000000e+00, double* %948, align 1, !tbaa !2451
  %949 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %950 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %951 = load i64, i64* %RBP
  %952 = sub i64 %951, 24
  %953 = load i64, i64* %PC
  %954 = add i64 %953, 5
  store i64 %954, i64* %PC
  %955 = bitcast i8* %950 to double*
  %956 = load double, double* %955, align 1
  %957 = getelementptr inbounds i8, i8* %950, i64 8
  %958 = bitcast i8* %957 to i64*
  %959 = load i64, i64* %958, align 1
  %960 = inttoptr i64 %952 to double*
  %961 = load double, double* %960
  %962 = fmul double %956, %961
  %963 = bitcast i8* %949 to double*
  store double %962, double* %963, align 1, !tbaa !2451
  %964 = getelementptr inbounds i8, i8* %949, i64 8
  %965 = bitcast i8* %964 to i64*
  store i64 %959, i64* %965, align 1, !tbaa !2451
  %966 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %967 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %968 = load i64, i64* %RBP
  %969 = sub i64 %968, 40
  %970 = load i64, i64* %PC
  %971 = add i64 %970, 5
  store i64 %971, i64* %PC
  %972 = bitcast i8* %967 to double*
  %973 = load double, double* %972, align 1
  %974 = getelementptr inbounds i8, i8* %967, i64 8
  %975 = bitcast i8* %974 to i64*
  %976 = load i64, i64* %975, align 1
  %977 = inttoptr i64 %969 to double*
  %978 = load double, double* %977
  %979 = fadd double %973, %978
  %980 = bitcast i8* %966 to double*
  store double %979, double* %980, align 1, !tbaa !2451
  %981 = getelementptr inbounds i8, i8* %966, i64 8
  %982 = bitcast i8* %981 to i64*
  store i64 %976, i64* %982, align 1, !tbaa !2451
  %983 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %984 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %985 = bitcast %union.vec128_t* %XMM5 to i8*
  %986 = load i64, i64* %PC
  %987 = add i64 %986, 4
  store i64 %987, i64* %PC
  %988 = bitcast i8* %984 to double*
  %989 = load double, double* %988, align 1
  %990 = getelementptr inbounds i8, i8* %984, i64 8
  %991 = bitcast i8* %990 to i64*
  %992 = load i64, i64* %991, align 1
  %993 = bitcast i8* %985 to double*
  %994 = load double, double* %993, align 1
  %995 = fdiv double %989, %994
  %996 = bitcast i8* %983 to double*
  store double %995, double* %996, align 1, !tbaa !2451
  %997 = getelementptr inbounds i8, i8* %983, i64 8
  %998 = bitcast i8* %997 to i64*
  store i64 %992, i64* %998, align 1, !tbaa !2451
  %999 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1000 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1001 = bitcast %union.vec128_t* %XMM4 to i8*
  %1002 = load i64, i64* %PC
  %1003 = add i64 %1002, 4
  store i64 %1003, i64* %PC
  %1004 = bitcast i8* %1000 to double*
  %1005 = load double, double* %1004, align 1
  %1006 = getelementptr inbounds i8, i8* %1000, i64 8
  %1007 = bitcast i8* %1006 to i64*
  %1008 = load i64, i64* %1007, align 1
  %1009 = bitcast i8* %1001 to double*
  %1010 = load double, double* %1009, align 1
  %1011 = fsub double %1005, %1010
  %1012 = bitcast i8* %999 to double*
  store double %1011, double* %1012, align 1, !tbaa !2451
  %1013 = getelementptr inbounds i8, i8* %999, i64 8
  %1014 = bitcast i8* %1013 to i64*
  store i64 %1008, i64* %1014, align 1, !tbaa !2451
  %1015 = bitcast %union.vec128_t* %XMM3 to i8*
  %1016 = load i64, i64* %PC
  %1017 = add i64 %1016, 9
  store i64 %1017, i64* %PC
  %1018 = bitcast i8* %1015 to double*
  %1019 = load double, double* %1018, align 1
  store double %1019, double* bitcast (%sa_type* @sa to double*)
  %1020 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1021 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1022 = load i64, i64* %RBP
  %1023 = sub i64 %1022, 32
  %1024 = load i64, i64* %PC
  %1025 = add i64 %1024, 5
  store i64 %1025, i64* %PC
  %1026 = bitcast i8* %1021 to double*
  %1027 = load double, double* %1026, align 1
  %1028 = getelementptr inbounds i8, i8* %1021, i64 8
  %1029 = bitcast i8* %1028 to i64*
  %1030 = load i64, i64* %1029, align 1
  %1031 = inttoptr i64 %1023 to double*
  %1032 = load double, double* %1031
  %1033 = fmul double %1027, %1032
  %1034 = bitcast i8* %1020 to double*
  store double %1033, double* %1034, align 1, !tbaa !2451
  %1035 = getelementptr inbounds i8, i8* %1020, i64 8
  %1036 = bitcast i8* %1035 to i64*
  store i64 %1030, i64* %1036, align 1, !tbaa !2451
  %1037 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1038 = load i64, i64* %PC
  %1039 = add i64 %1038, 9
  store i64 %1039, i64* %PC
  %1040 = load double, double* bitcast (%sa_type* @sa to double*)
  %1041 = bitcast i8* %1037 to double*
  store double %1040, double* %1041, align 1, !tbaa !2451
  %1042 = getelementptr inbounds i8, i8* %1037, i64 8
  %1043 = bitcast i8* %1042 to double*
  store double 0.000000e+00, double* %1043, align 1, !tbaa !2451
  %1044 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1045 = load i64, i64* %PC
  %1046 = add i64 %1045, 9
  store i64 %1046, i64* %PC
  %1047 = load double, double* bitcast (%two_type* @two to double*)
  %1048 = bitcast i8* %1044 to double*
  store double %1047, double* %1048, align 1, !tbaa !2451
  %1049 = getelementptr inbounds i8, i8* %1044, i64 8
  %1050 = bitcast i8* %1049 to double*
  store double 0.000000e+00, double* %1050, align 1, !tbaa !2451
  %1051 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1052 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1053 = load i64, i64* %RBP
  %1054 = sub i64 %1053, 16
  %1055 = load i64, i64* %PC
  %1056 = add i64 %1055, 5
  store i64 %1056, i64* %PC
  %1057 = bitcast i8* %1052 to double*
  %1058 = load double, double* %1057, align 1
  %1059 = getelementptr inbounds i8, i8* %1052, i64 8
  %1060 = bitcast i8* %1059 to i64*
  %1061 = load i64, i64* %1060, align 1
  %1062 = inttoptr i64 %1054 to double*
  %1063 = load double, double* %1062
  %1064 = fmul double %1058, %1063
  %1065 = bitcast i8* %1051 to double*
  store double %1064, double* %1065, align 1, !tbaa !2451
  %1066 = getelementptr inbounds i8, i8* %1051, i64 8
  %1067 = bitcast i8* %1066 to i64*
  store i64 %1061, i64* %1067, align 1, !tbaa !2451
  %1068 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1069 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1070 = bitcast %union.vec128_t* %XMM4 to i8*
  %1071 = load i64, i64* %PC
  %1072 = add i64 %1071, 4
  store i64 %1072, i64* %PC
  %1073 = bitcast i8* %1069 to double*
  %1074 = load double, double* %1073, align 1
  %1075 = getelementptr inbounds i8, i8* %1069, i64 8
  %1076 = bitcast i8* %1075 to i64*
  %1077 = load i64, i64* %1076, align 1
  %1078 = bitcast i8* %1070 to double*
  %1079 = load double, double* %1078, align 1
  %1080 = fadd double %1074, %1079
  %1081 = bitcast i8* %1068 to double*
  store double %1080, double* %1081, align 1, !tbaa !2451
  %1082 = getelementptr inbounds i8, i8* %1068, i64 8
  %1083 = bitcast i8* %1082 to i64*
  store i64 %1077, i64* %1083, align 1, !tbaa !2451
  %1084 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1085 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1086 = bitcast %union.vec128_t* %XMM3 to i8*
  %1087 = load i64, i64* %PC
  %1088 = add i64 %1087, 4
  store i64 %1088, i64* %PC
  %1089 = bitcast i8* %1085 to double*
  %1090 = load double, double* %1089, align 1
  %1091 = getelementptr inbounds i8, i8* %1085, i64 8
  %1092 = bitcast i8* %1091 to i64*
  %1093 = load i64, i64* %1092, align 1
  %1094 = bitcast i8* %1086 to double*
  %1095 = load double, double* %1094, align 1
  %1096 = fmul double %1090, %1095
  %1097 = bitcast i8* %1084 to double*
  store double %1096, double* %1097, align 1, !tbaa !2451
  %1098 = getelementptr inbounds i8, i8* %1084, i64 8
  %1099 = bitcast i8* %1098 to i64*
  store i64 %1093, i64* %1099, align 1, !tbaa !2451
  %1100 = bitcast %union.vec128_t* %XMM2 to i8*
  %1101 = load i64, i64* %PC
  %1102 = add i64 %1101, 9
  store i64 %1102, i64* %PC
  %1103 = bitcast i8* %1100 to double*
  %1104 = load double, double* %1103, align 1
  store double %1104, double* bitcast (%sa_type* @sa to double*)
  %1105 = load i64, i64* %PC
  %1106 = add i64 %1105, 10
  store i64 %1106, i64* %PC
  %1107 = load double, double* bitcast (%sa_type* @sa to double*)
  %1108 = call double @llvm.trunc.f64(double %1107) #16
  %1109 = call double @llvm.fabs.f64(double %1108) #16
  %1110 = fcmp ogt double %1109, 0x43E0000000000000
  %1111 = fptosi double %1108 to i64
  %1112 = select i1 %1110, i64 -9223372036854775808, i64 %1111
  store i64 %1112, i64* %RCX, align 8, !tbaa !2428
  %1113 = load i64, i64* %RCX
  %1114 = load i64, i64* %PC
  %1115 = add i64 %1114, 7
  store i64 %1115, i64* %PC
  %1116 = sext i64 %1113 to i128
  %1117 = and i128 %1116, -18446744073709551616
  %1118 = zext i64 %1113 to i128
  %1119 = or i128 %1117, %1118
  %1120 = mul nsw i128 -2000, %1119
  %1121 = trunc i128 %1120 to i64
  store i64 %1121, i64* %RCX, align 8, !tbaa !2428
  %1122 = sext i64 %1121 to i128
  %1123 = icmp ne i128 %1122, %1120
  %1124 = zext i1 %1123 to i8
  %1125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1124, i8* %1125, align 1, !tbaa !2432
  %1126 = trunc i128 %1120 to i32
  %1127 = and i32 %1126, 255
  %1128 = call i32 @llvm.ctpop.i32(i32 %1127) #16
  %1129 = trunc i32 %1128 to i8
  %1130 = and i8 %1129, 1
  %1131 = xor i8 %1130, 1
  %1132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1131, i8* %1132, align 1, !tbaa !2446
  %1133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1133, align 1, !tbaa !2447
  %1134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1134, align 1, !tbaa !2448
  %1135 = lshr i64 %1121, 63
  %1136 = trunc i64 %1135 to i8
  %1137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1136, i8* %1137, align 1, !tbaa !2449
  %1138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1124, i8* %1138, align 1, !tbaa !2450
  %1139 = load i64, i64* %RBP
  %1140 = sub i64 %1139, 80
  %1141 = load i64, i64* %RCX
  %1142 = load i64, i64* %PC
  %1143 = add i64 %1142, 4
  store i64 %1143, i64* %PC
  %1144 = inttoptr i64 %1140 to i64*
  store i64 %1141, i64* %1144
  %1145 = load i64, i64* %RBP
  %1146 = sub i64 %1145, 80
  %1147 = load i64, i64* %PC
  %1148 = add i64 %1147, 4
  store i64 %1148, i64* %PC
  %1149 = inttoptr i64 %1146 to i64*
  %1150 = load i64, i64* %1149
  store i64 %1150, i64* %RCX, align 8, !tbaa !2428
  %1151 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1152 = load i64, i64* %RCX
  %1153 = load i64, i64* %PC
  %1154 = add i64 %1153, 5
  store i64 %1154, i64* %PC
  %1155 = sitofp i64 %1152 to double
  %1156 = bitcast i8* %1151 to double*
  store double %1155, double* %1156, align 1, !tbaa !2451
  %1157 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1158 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1159 = load i64, i64* %PC
  %1160 = add i64 %1159, 9
  store i64 %1160, i64* %PC
  %1161 = bitcast i8* %1158 to double*
  %1162 = load double, double* %1161, align 1
  %1163 = getelementptr inbounds i8, i8* %1158, i64 8
  %1164 = bitcast i8* %1163 to i64*
  %1165 = load i64, i64* %1164, align 1
  %1166 = load double, double* bitcast (%scale_type* @scale to double*)
  %1167 = fdiv double %1162, %1166
  %1168 = bitcast i8* %1157 to double*
  store double %1167, double* %1168, align 1, !tbaa !2451
  %1169 = getelementptr inbounds i8, i8* %1157, i64 8
  %1170 = bitcast i8* %1169 to i64*
  store i64 %1165, i64* %1170, align 1, !tbaa !2451
  %1171 = bitcast %union.vec128_t* %XMM2 to i8*
  %1172 = load i64, i64* %PC
  %1173 = add i64 %1172, 5
  store i64 %1173, i64* %PC
  %1174 = bitcast i8* %1171 to double*
  %1175 = load double, double* %1174, align 1
  %1176 = call double @llvm.trunc.f64(double %1175) #16
  %1177 = call double @llvm.fabs.f64(double %1176) #16
  %1178 = fcmp ogt double %1177, 0x43E0000000000000
  %1179 = fptosi double %1176 to i64
  %1180 = select i1 %1178, i64 -9223372036854775808, i64 %1179
  store i64 %1180, i64* %RCX, align 8, !tbaa !2428
  %1181 = load i64, i64* %RBP
  %1182 = sub i64 %1181, 80
  %1183 = load i64, i64* %RCX
  %1184 = load i64, i64* %PC
  %1185 = add i64 %1184, 4
  store i64 %1185, i64* %PC
  %1186 = inttoptr i64 %1182 to i64*
  store i64 %1183, i64* %1186
  %1187 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1188 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1189 = load i64, i64* %PC
  %1190 = add i64 %1189, 9
  store i64 %1190, i64* %PC
  %1191 = bitcast i8* %1188 to double*
  %1192 = load double, double* %1191, align 1
  %1193 = getelementptr inbounds i8, i8* %1188, i64 8
  %1194 = bitcast i8* %1193 to i64*
  %1195 = load i64, i64* %1194, align 1
  %1196 = load double, double* bitcast (%sa_type* @sa to double*)
  %1197 = fadd double %1192, %1196
  %1198 = bitcast i8* %1187 to double*
  store double %1197, double* %1198, align 1, !tbaa !2451
  %1199 = getelementptr inbounds i8, i8* %1187, i64 8
  %1200 = bitcast i8* %1199 to i64*
  store i64 %1195, i64* %1200, align 1, !tbaa !2451
  %1201 = bitcast %union.vec128_t* %XMM1 to i8*
  %1202 = load i64, i64* %PC
  %1203 = add i64 %1202, 9
  store i64 %1203, i64* %PC
  %1204 = bitcast i8* %1201 to double*
  %1205 = load double, double* %1204, align 1
  store double %1205, double* bitcast (%sc_type* @sc to double*)
  %1206 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1207 = load i64, i64* %PC
  %1208 = add i64 %1207, 9
  store i64 %1208, i64* %PC
  %1209 = load double, double* bitcast (%one_type* @one to double*)
  %1210 = bitcast i8* %1206 to double*
  store double %1209, double* %1210, align 1, !tbaa !2451
  %1211 = getelementptr inbounds i8, i8* %1206, i64 8
  %1212 = bitcast i8* %1211 to double*
  store double 0.000000e+00, double* %1212, align 1, !tbaa !2451
  %1213 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1214 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1215 = load i64, i64* %PC
  %1216 = add i64 %1215, 9
  store i64 %1216, i64* %PC
  %1217 = bitcast i8* %1214 to double*
  %1218 = load double, double* %1217, align 1
  %1219 = getelementptr inbounds i8, i8* %1214, i64 8
  %1220 = bitcast i8* %1219 to i64*
  %1221 = load i64, i64* %1220, align 1
  %1222 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 176) to double*)
  %1223 = fdiv double %1218, %1222
  %1224 = bitcast i8* %1213 to double*
  store double %1223, double* %1224, align 1, !tbaa !2451
  %1225 = getelementptr inbounds i8, i8* %1213, i64 8
  %1226 = bitcast i8* %1225 to i64*
  store i64 %1221, i64* %1226, align 1, !tbaa !2451
  %1227 = bitcast %union.vec128_t* %XMM1 to i8*
  %1228 = load i64, i64* %PC
  %1229 = add i64 %1228, 9
  store i64 %1229, i64* %PC
  %1230 = bitcast i8* %1227 to double*
  %1231 = load double, double* %1230, align 1
  store double %1231, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 184) to double*)
  %1232 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1233 = bitcast %union.vec128_t* %XMM0 to i8*
  %1234 = load i64, i64* %PC
  %1235 = add i64 %1234, 3
  store i64 %1235, i64* %PC
  %1236 = bitcast i8* %1233 to <2 x i32>*
  %1237 = load <2 x i32>, <2 x i32>* %1236, align 1
  %1238 = getelementptr inbounds i8, i8* %1233, i64 8
  %1239 = bitcast i8* %1238 to <2 x i32>*
  %1240 = load <2 x i32>, <2 x i32>* %1239, align 1
  %1241 = extractelement <2 x i32> %1237, i32 0
  %1242 = bitcast i8* %1232 to i32*
  store i32 %1241, i32* %1242, align 1, !tbaa !2455
  %1243 = extractelement <2 x i32> %1237, i32 1
  %1244 = getelementptr inbounds i8, i8* %1232, i64 4
  %1245 = bitcast i8* %1244 to i32*
  store i32 %1243, i32* %1245, align 1, !tbaa !2455
  %1246 = extractelement <2 x i32> %1240, i32 0
  %1247 = getelementptr inbounds i8, i8* %1232, i64 8
  %1248 = bitcast i8* %1247 to i32*
  store i32 %1246, i32* %1248, align 1, !tbaa !2455
  %1249 = extractelement <2 x i32> %1240, i32 1
  %1250 = getelementptr inbounds i8, i8* %1232, i64 12
  %1251 = bitcast i8* %1250 to i32*
  store i32 %1249, i32* %1251, align 1, !tbaa !2455
  %1252 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1253 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1254 = load i64, i64* %PC
  %1255 = add i64 %1254, 9
  store i64 %1255, i64* %PC
  %1256 = bitcast i8* %1253 to double*
  %1257 = load double, double* %1256, align 1
  %1258 = getelementptr inbounds i8, i8* %1253, i64 8
  %1259 = bitcast i8* %1258 to i64*
  %1260 = load i64, i64* %1259, align 1
  %1261 = load double, double* bitcast (%sc_type* @sc to double*)
  %1262 = fmul double %1257, %1261
  %1263 = bitcast i8* %1252 to double*
  store double %1262, double* %1263, align 1, !tbaa !2451
  %1264 = getelementptr inbounds i8, i8* %1252, i64 8
  %1265 = bitcast i8* %1264 to i64*
  store i64 %1260, i64* %1265, align 1, !tbaa !2451
  %1266 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1267 = bitcast %union.vec128_t* %XMM0 to i8*
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 3
  store i64 %1269, i64* %PC
  %1270 = bitcast i8* %1267 to <2 x i32>*
  %1271 = load <2 x i32>, <2 x i32>* %1270, align 1
  %1272 = getelementptr inbounds i8, i8* %1267, i64 8
  %1273 = bitcast i8* %1272 to <2 x i32>*
  %1274 = load <2 x i32>, <2 x i32>* %1273, align 1
  %1275 = extractelement <2 x i32> %1271, i32 0
  %1276 = bitcast i8* %1266 to i32*
  store i32 %1275, i32* %1276, align 1, !tbaa !2455
  %1277 = extractelement <2 x i32> %1271, i32 1
  %1278 = getelementptr inbounds i8, i8* %1266, i64 4
  %1279 = bitcast i8* %1278 to i32*
  store i32 %1277, i32* %1279, align 1, !tbaa !2455
  %1280 = extractelement <2 x i32> %1274, i32 0
  %1281 = getelementptr inbounds i8, i8* %1266, i64 8
  %1282 = bitcast i8* %1281 to i32*
  store i32 %1280, i32* %1282, align 1, !tbaa !2455
  %1283 = extractelement <2 x i32> %1274, i32 1
  %1284 = getelementptr inbounds i8, i8* %1266, i64 12
  %1285 = bitcast i8* %1284 to i32*
  store i32 %1283, i32* %1285, align 1, !tbaa !2455
  %1286 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1287 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1288 = load i64, i64* %PC
  %1289 = add i64 %1288, 9
  store i64 %1289, i64* %PC
  %1290 = bitcast i8* %1287 to double*
  %1291 = load double, double* %1290, align 1
  %1292 = getelementptr inbounds i8, i8* %1287, i64 8
  %1293 = bitcast i8* %1292 to i64*
  %1294 = load i64, i64* %1293, align 1
  %1295 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 168) to double*)
  %1296 = fmul double %1291, %1295
  %1297 = bitcast i8* %1286 to double*
  store double %1296, double* %1297, align 1, !tbaa !2451
  %1298 = getelementptr inbounds i8, i8* %1286, i64 8
  %1299 = bitcast i8* %1298 to i64*
  store i64 %1294, i64* %1299, align 1, !tbaa !2451
  %1300 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1301 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1302 = load i64, i64* %PC
  %1303 = add i64 %1302, 9
  store i64 %1303, i64* %PC
  %1304 = bitcast i8* %1301 to double*
  %1305 = load double, double* %1304, align 1
  %1306 = getelementptr inbounds i8, i8* %1301, i64 8
  %1307 = bitcast i8* %1306 to i64*
  %1308 = load i64, i64* %1307, align 1
  %1309 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 184) to double*)
  %1310 = fmul double %1305, %1309
  %1311 = bitcast i8* %1300 to double*
  store double %1310, double* %1311, align 1, !tbaa !2451
  %1312 = getelementptr inbounds i8, i8* %1300, i64 8
  %1313 = bitcast i8* %1312 to i64*
  store i64 %1308, i64* %1313, align 1, !tbaa !2451
  %1314 = load i64, i64* %RBP
  %1315 = sub i64 %1314, 280
  %1316 = bitcast %union.vec128_t* %XMM0 to i8*
  %1317 = load i64, i64* %PC
  %1318 = add i64 %1317, 8
  store i64 %1318, i64* %PC
  %1319 = bitcast i8* %1316 to double*
  %1320 = load double, double* %1319, align 1
  %1321 = inttoptr i64 %1315 to double*
  store double %1320, double* %1321
  %1322 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1323 = bitcast %union.vec128_t* %XMM1 to i8*
  %1324 = load i64, i64* %PC
  %1325 = add i64 %1324, 3
  store i64 %1325, i64* %PC
  %1326 = bitcast i8* %1323 to <2 x i32>*
  %1327 = load <2 x i32>, <2 x i32>* %1326, align 1
  %1328 = getelementptr inbounds i8, i8* %1323, i64 8
  %1329 = bitcast i8* %1328 to <2 x i32>*
  %1330 = load <2 x i32>, <2 x i32>* %1329, align 1
  %1331 = extractelement <2 x i32> %1327, i32 0
  %1332 = bitcast i8* %1322 to i32*
  store i32 %1331, i32* %1332, align 1, !tbaa !2455
  %1333 = extractelement <2 x i32> %1327, i32 1
  %1334 = getelementptr inbounds i8, i8* %1322, i64 4
  %1335 = bitcast i8* %1334 to i32*
  store i32 %1333, i32* %1335, align 1, !tbaa !2455
  %1336 = extractelement <2 x i32> %1330, i32 0
  %1337 = getelementptr inbounds i8, i8* %1322, i64 8
  %1338 = bitcast i8* %1337 to i32*
  store i32 %1336, i32* %1338, align 1, !tbaa !2455
  %1339 = extractelement <2 x i32> %1330, i32 1
  %1340 = getelementptr inbounds i8, i8* %1322, i64 12
  %1341 = bitcast i8* %1340 to i32*
  store i32 %1339, i32* %1341, align 1, !tbaa !2455
  %1342 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1343 = bitcast %union.vec128_t* %XMM2 to i8*
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 3
  store i64 %1345, i64* %PC
  %1346 = bitcast i8* %1343 to <2 x i32>*
  %1347 = load <2 x i32>, <2 x i32>* %1346, align 1
  %1348 = getelementptr inbounds i8, i8* %1343, i64 8
  %1349 = bitcast i8* %1348 to <2 x i32>*
  %1350 = load <2 x i32>, <2 x i32>* %1349, align 1
  %1351 = extractelement <2 x i32> %1347, i32 0
  %1352 = bitcast i8* %1342 to i32*
  store i32 %1351, i32* %1352, align 1, !tbaa !2455
  %1353 = extractelement <2 x i32> %1347, i32 1
  %1354 = getelementptr inbounds i8, i8* %1342, i64 4
  %1355 = bitcast i8* %1354 to i32*
  store i32 %1353, i32* %1355, align 1, !tbaa !2455
  %1356 = extractelement <2 x i32> %1350, i32 0
  %1357 = getelementptr inbounds i8, i8* %1342, i64 8
  %1358 = bitcast i8* %1357 to i32*
  store i32 %1356, i32* %1358, align 1, !tbaa !2455
  %1359 = extractelement <2 x i32> %1350, i32 1
  %1360 = getelementptr inbounds i8, i8* %1342, i64 12
  %1361 = bitcast i8* %1360 to i32*
  store i32 %1359, i32* %1361, align 1, !tbaa !2455
  %1362 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1363 = load i64, i64* %RBP
  %1364 = sub i64 %1363, 280
  %1365 = load i64, i64* %PC
  %1366 = add i64 %1365, 8
  store i64 %1366, i64* %PC
  %1367 = inttoptr i64 %1364 to double*
  %1368 = load double, double* %1367
  %1369 = bitcast i8* %1362 to double*
  store double %1368, double* %1369, align 1, !tbaa !2451
  %1370 = getelementptr inbounds i8, i8* %1362, i64 8
  %1371 = bitcast i8* %1370 to double*
  store double 0.000000e+00, double* %1371, align 1, !tbaa !2451
  %1372 = load i64, i64* %RBP
  %1373 = sub i64 %1372, 284
  %1374 = load i32, i32* %EAX
  %1375 = zext i32 %1374 to i64
  %1376 = load i64, i64* %PC
  %1377 = add i64 %1376, 6
  store i64 %1377, i64* %PC
  %1378 = inttoptr i64 %1373 to i32*
  store i32 %1374, i32* %1378
  %1379 = load i64, i64* %PC
  %1380 = add i64 %1379, 2
  store i64 %1380, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2453
  %1381 = load i64, i64* %PC
  %1382 = sub i64 %1381, 6911
  %1383 = load i64, i64* %PC
  %1384 = add i64 %1383, 5
  %1385 = load i64, i64* %PC
  %1386 = add i64 %1385, 5
  store i64 %1386, i64* %PC
  %1387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1388 = load i64, i64* %1387, align 8, !tbaa !2428
  %1389 = add i64 %1388, -8
  %1390 = inttoptr i64 %1389 to i64*
  store i64 %1384, i64* %1390
  store i64 %1389, i64* %1387, align 8, !tbaa !2428
  %1391 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1382, i64* %1391, align 8, !tbaa !2428
  %1392 = load i64, i64* %PC
  %1393 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %1392, %struct.Memory* %597)
  %1394 = load i64, i64* %PC
  %1395 = add i64 %1394, 10
  store i64 %1395, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %1396 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1397 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1398 = bitcast %union.vec128_t* %XMM0 to i8*
  %1399 = load i64, i64* %PC
  %1400 = add i64 %1399, 3
  store i64 %1400, i64* %PC
  %1401 = bitcast i8* %1397 to i64*
  %1402 = load i64, i64* %1401, align 1
  %1403 = getelementptr inbounds i8, i8* %1397, i64 8
  %1404 = bitcast i8* %1403 to i64*
  %1405 = load i64, i64* %1404, align 1
  %1406 = bitcast i8* %1398 to i64*
  %1407 = load i64, i64* %1406, align 1
  %1408 = getelementptr inbounds i8, i8* %1398, i64 8
  %1409 = bitcast i8* %1408 to i64*
  %1410 = load i64, i64* %1409, align 1
  %1411 = xor i64 %1407, %1402
  %1412 = xor i64 %1410, %1405
  %1413 = trunc i64 %1411 to i32
  %1414 = lshr i64 %1411, 32
  %1415 = trunc i64 %1414 to i32
  %1416 = bitcast i8* %1396 to i32*
  store i32 %1413, i32* %1416, align 1, !tbaa !2454
  %1417 = getelementptr inbounds i8, i8* %1396, i64 4
  %1418 = bitcast i8* %1417 to i32*
  store i32 %1415, i32* %1418, align 1, !tbaa !2454
  %1419 = trunc i64 %1412 to i32
  %1420 = getelementptr inbounds i8, i8* %1396, i64 8
  %1421 = bitcast i8* %1420 to i32*
  store i32 %1419, i32* %1421, align 1, !tbaa !2454
  %1422 = lshr i64 %1412, 32
  %1423 = trunc i64 %1422 to i32
  %1424 = getelementptr inbounds i8, i8* %1396, i64 12
  %1425 = bitcast i8* %1424 to i32*
  store i32 %1423, i32* %1425, align 1, !tbaa !2454
  %1426 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1427 = load i64, i64* %PC
  %1428 = add i64 %1427, 9
  store i64 %1428, i64* %PC
  %1429 = load double, double* bitcast (%piref_type* @piref to double*)
  %1430 = bitcast i8* %1426 to double*
  store double %1429, double* %1430, align 1, !tbaa !2451
  %1431 = getelementptr inbounds i8, i8* %1426, i64 8
  %1432 = bitcast i8* %1431 to double*
  store double 0.000000e+00, double* %1432, align 1, !tbaa !2451
  %1433 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1434 = load i64, i64* %PC
  %1435 = add i64 %1434, 9
  store i64 %1435, i64* %PC
  %1436 = load double, double* bitcast (%three_type* @three to double*)
  %1437 = bitcast i8* %1433 to double*
  store double %1436, double* %1437, align 1, !tbaa !2451
  %1438 = getelementptr inbounds i8, i8* %1433, i64 8
  %1439 = bitcast i8* %1438 to double*
  store double 0.000000e+00, double* %1439, align 1, !tbaa !2451
  %1440 = load i64, i64* %RBP
  %1441 = sub i64 %1440, 80
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 4
  store i64 %1443, i64* %PC
  %1444 = inttoptr i64 %1441 to i64*
  %1445 = load i64, i64* %1444
  store i64 %1445, i64* %RCX, align 8, !tbaa !2428
  %1446 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1447 = load i64, i64* %RCX
  %1448 = load i64, i64* %PC
  %1449 = add i64 %1448, 5
  store i64 %1449, i64* %PC
  %1450 = sitofp i64 %1447 to double
  %1451 = bitcast i8* %1446 to double*
  store double %1450, double* %1451, align 1, !tbaa !2451
  %1452 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1453 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1454 = bitcast %union.vec128_t* %XMM3 to i8*
  %1455 = load i64, i64* %PC
  %1456 = add i64 %1455, 4
  store i64 %1456, i64* %PC
  %1457 = bitcast i8* %1453 to double*
  %1458 = load double, double* %1457, align 1
  %1459 = getelementptr inbounds i8, i8* %1453, i64 8
  %1460 = bitcast i8* %1459 to i64*
  %1461 = load i64, i64* %1460, align 1
  %1462 = bitcast i8* %1454 to double*
  %1463 = load double, double* %1462, align 1
  %1464 = fmul double %1458, %1463
  %1465 = bitcast i8* %1452 to double*
  store double %1464, double* %1465, align 1, !tbaa !2451
  %1466 = getelementptr inbounds i8, i8* %1452, i64 8
  %1467 = bitcast i8* %1466 to i64*
  store i64 %1461, i64* %1467, align 1, !tbaa !2451
  %1468 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1469 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1470 = bitcast %union.vec128_t* %XMM2 to i8*
  %1471 = load i64, i64* %PC
  %1472 = add i64 %1471, 4
  store i64 %1472, i64* %PC
  %1473 = bitcast i8* %1469 to double*
  %1474 = load double, double* %1473, align 1
  %1475 = getelementptr inbounds i8, i8* %1469, i64 8
  %1476 = bitcast i8* %1475 to i64*
  %1477 = load i64, i64* %1476, align 1
  %1478 = bitcast i8* %1470 to double*
  %1479 = load double, double* %1478, align 1
  %1480 = fdiv double %1474, %1479
  %1481 = bitcast i8* %1468 to double*
  store double %1480, double* %1481, align 1, !tbaa !2451
  %1482 = getelementptr inbounds i8, i8* %1468, i64 8
  %1483 = bitcast i8* %1482 to i64*
  store i64 %1477, i64* %1483, align 1, !tbaa !2451
  %1484 = load i64, i64* %RBP
  %1485 = sub i64 %1484, 48
  %1486 = bitcast %union.vec128_t* %XMM1 to i8*
  %1487 = load i64, i64* %PC
  %1488 = add i64 %1487, 5
  store i64 %1488, i64* %PC
  %1489 = bitcast i8* %1486 to double*
  %1490 = load double, double* %1489, align 1
  %1491 = inttoptr i64 %1485 to double*
  store double %1490, double* %1491
  %1492 = load i64, i64* %RBP
  %1493 = sub i64 %1492, 16
  %1494 = bitcast %union.vec128_t* %XMM0 to i8*
  %1495 = load i64, i64* %PC
  %1496 = add i64 %1495, 5
  store i64 %1496, i64* %PC
  %1497 = bitcast i8* %1494 to double*
  %1498 = load double, double* %1497, align 1
  %1499 = inttoptr i64 %1493 to double*
  store double %1498, double* %1499
  %1500 = load i64, i64* %RBP
  %1501 = sub i64 %1500, 32
  %1502 = bitcast %union.vec128_t* %XMM0 to i8*
  %1503 = load i64, i64* %PC
  %1504 = add i64 %1503, 5
  store i64 %1504, i64* %PC
  %1505 = bitcast i8* %1502 to double*
  %1506 = load double, double* %1505, align 1
  %1507 = inttoptr i64 %1501 to double*
  store double %1506, double* %1507
  %1508 = load i64, i64* %RBP
  %1509 = sub i64 %1508, 288
  %1510 = load i32, i32* %EAX
  %1511 = zext i32 %1510 to i64
  %1512 = load i64, i64* %PC
  %1513 = add i64 %1512, 6
  store i64 %1513, i64* %PC
  %1514 = inttoptr i64 %1509 to i32*
  store i32 %1510, i32* %1514
  %1515 = load i64, i64* %PC
  %1516 = add i64 %1515, 1655
  %1517 = load i64, i64* %PC
  %1518 = add i64 %1517, 5
  %1519 = load i64, i64* %PC
  %1520 = add i64 %1519, 5
  store i64 %1520, i64* %PC
  %1521 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1522 = load i64, i64* %1521, align 8, !tbaa !2428
  %1523 = add i64 %1522, -8
  %1524 = inttoptr i64 %1523 to i64*
  store i64 %1518, i64* %1524
  store i64 %1523, i64* %1521, align 8, !tbaa !2428
  %1525 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1516, i64* %1525, align 8, !tbaa !2428
  %1526 = load i64, i64* %PC
  %1527 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %1526, %struct.Memory* %1393)
  %1528 = load i64, i64* %RBP
  %1529 = sub i64 %1528, 72
  %1530 = load i64, i64* %PC
  %1531 = add i64 %1530, 8
  store i64 %1531, i64* %PC
  %1532 = inttoptr i64 %1529 to i64*
  store i64 1, i64* %1532
  %1533 = load i64, i64* %RBP
  %1534 = sub i64 %1533, 292
  %1535 = load i32, i32* %EAX
  %1536 = zext i32 %1535 to i64
  %1537 = load i64, i64* %PC
  %1538 = add i64 %1537, 6
  store i64 %1538, i64* %PC
  %1539 = inttoptr i64 %1534 to i32*
  store i32 %1535, i32* %1539
  br label %block_401f8c

block_4018d9:                                     ; preds = %block_40162f, %block_4018ee
  %MEMORY.1 = phi %struct.Memory* [ %8022, %block_40162f ], [ %MEMORY.1, %block_4018ee ]
  %1540 = load i64, i64* %RBP
  %1541 = sub i64 %1540, 72
  %1542 = load i64, i64* %PC
  %1543 = add i64 %1542, 4
  store i64 %1543, i64* %PC
  %1544 = inttoptr i64 %1541 to i64*
  %1545 = load i64, i64* %1544
  store i64 %1545, i64* %RAX, align 8, !tbaa !2428
  %1546 = load i64, i64* %RBP
  %1547 = sub i64 %1546, 80
  %1548 = load i64, i64* %PC
  %1549 = add i64 %1548, 4
  store i64 %1549, i64* %PC
  %1550 = inttoptr i64 %1547 to i64*
  %1551 = load i64, i64* %1550
  store i64 %1551, i64* %RCX, align 8, !tbaa !2428
  %1552 = load i64, i64* %RCX
  %1553 = load i64, i64* %PC
  %1554 = add i64 %1553, 4
  store i64 %1554, i64* %PC
  %1555 = sub i64 %1552, 1
  store i64 %1555, i64* %RCX, align 8, !tbaa !2428
  %1556 = icmp ult i64 %1552, 1
  %1557 = zext i1 %1556 to i8
  %1558 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1557, i8* %1558, align 1, !tbaa !2432
  %1559 = trunc i64 %1555 to i32
  %1560 = and i32 %1559, 255
  %1561 = call i32 @llvm.ctpop.i32(i32 %1560) #16
  %1562 = trunc i32 %1561 to i8
  %1563 = and i8 %1562, 1
  %1564 = xor i8 %1563, 1
  %1565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1564, i8* %1565, align 1, !tbaa !2446
  %1566 = xor i64 1, %1552
  %1567 = xor i64 %1566, %1555
  %1568 = lshr i64 %1567, 4
  %1569 = trunc i64 %1568 to i8
  %1570 = and i8 %1569, 1
  %1571 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1570, i8* %1571, align 1, !tbaa !2447
  %1572 = icmp eq i64 %1555, 0
  %1573 = zext i1 %1572 to i8
  %1574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1573, i8* %1574, align 1, !tbaa !2448
  %1575 = lshr i64 %1555, 63
  %1576 = trunc i64 %1575 to i8
  %1577 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1576, i8* %1577, align 1, !tbaa !2449
  %1578 = lshr i64 %1552, 63
  %1579 = xor i64 %1575, %1578
  %1580 = add nuw nsw i64 %1579, %1578
  %1581 = icmp eq i64 %1580, 2
  %1582 = zext i1 %1581 to i8
  %1583 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1582, i8* %1583, align 1, !tbaa !2450
  %1584 = load i64, i64* %RAX
  %1585 = load i64, i64* %RCX
  %1586 = load i64, i64* %PC
  %1587 = add i64 %1586, 3
  store i64 %1587, i64* %PC
  %1588 = sub i64 %1584, %1585
  %1589 = icmp ult i64 %1584, %1585
  %1590 = zext i1 %1589 to i8
  %1591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1590, i8* %1591, align 1, !tbaa !2432
  %1592 = trunc i64 %1588 to i32
  %1593 = and i32 %1592, 255
  %1594 = call i32 @llvm.ctpop.i32(i32 %1593) #16
  %1595 = trunc i32 %1594 to i8
  %1596 = and i8 %1595, 1
  %1597 = xor i8 %1596, 1
  %1598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1597, i8* %1598, align 1, !tbaa !2446
  %1599 = xor i64 %1585, %1584
  %1600 = xor i64 %1599, %1588
  %1601 = lshr i64 %1600, 4
  %1602 = trunc i64 %1601 to i8
  %1603 = and i8 %1602, 1
  %1604 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1603, i8* %1604, align 1, !tbaa !2447
  %1605 = icmp eq i64 %1588, 0
  %1606 = zext i1 %1605 to i8
  %1607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1606, i8* %1607, align 1, !tbaa !2448
  %1608 = lshr i64 %1588, 63
  %1609 = trunc i64 %1608 to i8
  %1610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1609, i8* %1610, align 1, !tbaa !2449
  %1611 = lshr i64 %1584, 63
  %1612 = lshr i64 %1585, 63
  %1613 = xor i64 %1612, %1611
  %1614 = xor i64 %1608, %1611
  %1615 = add nuw nsw i64 %1614, %1613
  %1616 = icmp eq i64 %1615, 2
  %1617 = zext i1 %1616 to i8
  %1618 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1617, i8* %1618, align 1, !tbaa !2450
  %1619 = load i64, i64* %PC
  %1620 = add i64 %1619, 300
  %1621 = load i64, i64* %PC
  %1622 = add i64 %1621, 6
  %1623 = load i64, i64* %PC
  %1624 = add i64 %1623, 6
  store i64 %1624, i64* %PC
  %1625 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1626 = load i8, i8* %1625, align 1, !tbaa !2448
  %1627 = icmp eq i8 %1626, 0
  %1628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1629 = load i8, i8* %1628, align 1, !tbaa !2449
  %1630 = icmp ne i8 %1629, 0
  %1631 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1632 = load i8, i8* %1631, align 1, !tbaa !2450
  %1633 = icmp ne i8 %1632, 0
  %1634 = xor i1 %1630, %1633
  %1635 = xor i1 %1634, true
  %1636 = and i1 %1627, %1635
  %1637 = zext i1 %1636 to i8
  store i8 %1637, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %1638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1639 = select i1 %1636, i64 %1620, i64 %1622
  store i64 %1639, i64* %1638, align 8, !tbaa !2428
  %1640 = load i8, i8* %BRANCH_TAKEN
  %1641 = icmp eq i8 %1640, 1
  br i1 %1641, label %block_401a14, label %block_4018ee

block_400bd6:                                     ; preds = %block_400bc8
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %1642 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1643 = load i64, i64* %RBP
  %1644 = sub i64 %1643, 16
  %1645 = load i64, i64* %PC
  %1646 = add i64 %1645, 5
  store i64 %1646, i64* %PC
  %1647 = inttoptr i64 %1644 to double*
  %1648 = load double, double* %1647
  %1649 = bitcast i8* %1642 to double*
  store double %1648, double* %1649, align 1, !tbaa !2451
  %1650 = getelementptr inbounds i8, i8* %1642, i64 8
  %1651 = bitcast i8* %1650 to double*
  store double 0.000000e+00, double* %1651, align 1, !tbaa !2451
  %1652 = bitcast %union.vec128_t* %XMM0 to i8*
  %1653 = load i64, i64* %PC
  %1654 = add i64 %1653, 5
  store i64 %1654, i64* %PC
  %1655 = bitcast i8* %1652 to i64*
  %1656 = load i64, i64* %1655, align 1
  store i64 %1656, i64* %RCX, align 1, !tbaa !2428
  %1657 = load i64, i64* %RCX
  %1658 = load i64, i64* %RAX
  %1659 = load i64, i64* %PC
  %1660 = add i64 %1659, 3
  store i64 %1660, i64* %PC
  %1661 = xor i64 %1658, %1657
  store i64 %1661, i64* %RCX, align 8, !tbaa !2428
  %1662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %1662, align 1, !tbaa !2432
  %1663 = trunc i64 %1661 to i32
  %1664 = and i32 %1663, 255
  %1665 = call i32 @llvm.ctpop.i32(i32 %1664) #16
  %1666 = trunc i32 %1665 to i8
  %1667 = and i8 %1666, 1
  %1668 = xor i8 %1667, 1
  %1669 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1668, i8* %1669, align 1, !tbaa !2446
  %1670 = icmp eq i64 %1661, 0
  %1671 = zext i1 %1670 to i8
  %1672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1671, i8* %1672, align 1, !tbaa !2448
  %1673 = lshr i64 %1661, 63
  %1674 = trunc i64 %1673 to i8
  %1675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1674, i8* %1675, align 1, !tbaa !2449
  %1676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %1676, align 1, !tbaa !2450
  %1677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1677, align 1, !tbaa !2447
  %1678 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1679 = load i64, i64* %RCX
  %1680 = load i64, i64* %PC
  %1681 = add i64 %1680, 5
  store i64 %1681, i64* %PC
  %1682 = bitcast i8* %1678 to i64*
  store i64 %1679, i64* %1682, align 1, !tbaa !2428
  %1683 = getelementptr inbounds i8, i8* %1678, i64 8
  %1684 = bitcast i8* %1683 to i64*
  store i64 0, i64* %1684, align 1, !tbaa !2428
  %1685 = load i64, i64* %RBP
  %1686 = sub i64 %1685, 16
  %1687 = bitcast %union.vec128_t* %XMM0 to i8*
  %1688 = load i64, i64* %PC
  %1689 = add i64 %1688, 5
  store i64 %1689, i64* %PC
  %1690 = bitcast i8* %1687 to double*
  %1691 = load double, double* %1690, align 1
  %1692 = inttoptr i64 %1686 to double*
  store double %1691, double* %1692
  %1693 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1694 = load i64, i64* %PC
  %1695 = add i64 %1694, 9
  store i64 %1695, i64* %PC
  %1696 = load double, double* bitcast (%sa_type* @sa to double*)
  %1697 = bitcast i8* %1693 to double*
  store double %1696, double* %1697, align 1, !tbaa !2451
  %1698 = getelementptr inbounds i8, i8* %1693, i64 8
  %1699 = bitcast i8* %1698 to double*
  store double 0.000000e+00, double* %1699, align 1, !tbaa !2451
  %1700 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1701 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1702 = load i64, i64* %RBP
  %1703 = sub i64 %1702, 16
  %1704 = load i64, i64* %PC
  %1705 = add i64 %1704, 5
  store i64 %1705, i64* %PC
  %1706 = bitcast i8* %1701 to double*
  %1707 = load double, double* %1706, align 1
  %1708 = getelementptr inbounds i8, i8* %1701, i64 8
  %1709 = bitcast i8* %1708 to i64*
  %1710 = load i64, i64* %1709, align 1
  %1711 = inttoptr i64 %1703 to double*
  %1712 = load double, double* %1711
  %1713 = fadd double %1707, %1712
  %1714 = bitcast i8* %1700 to double*
  store double %1713, double* %1714, align 1, !tbaa !2451
  %1715 = getelementptr inbounds i8, i8* %1700, i64 8
  %1716 = bitcast i8* %1715 to i64*
  store i64 %1710, i64* %1716, align 1, !tbaa !2451
  %1717 = bitcast %union.vec128_t* %XMM0 to i8*
  %1718 = load i64, i64* %PC
  %1719 = add i64 %1718, 9
  store i64 %1719, i64* %PC
  %1720 = bitcast i8* %1717 to double*
  %1721 = load double, double* %1720, align 1
  store double %1721, double* bitcast (%sa_type* @sa to double*)
  %1722 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1723 = load i64, i64* %RBP
  %1724 = sub i64 %1723, 24
  %1725 = load i64, i64* %PC
  %1726 = add i64 %1725, 5
  store i64 %1726, i64* %PC
  %1727 = inttoptr i64 %1724 to double*
  %1728 = load double, double* %1727
  %1729 = bitcast i8* %1722 to double*
  store double %1728, double* %1729, align 1, !tbaa !2451
  %1730 = getelementptr inbounds i8, i8* %1722, i64 8
  %1731 = bitcast i8* %1730 to double*
  store double 0.000000e+00, double* %1731, align 1, !tbaa !2451
  %1732 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1733 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1734 = load i64, i64* %PC
  %1735 = add i64 %1734, 9
  store i64 %1735, i64* %PC
  %1736 = bitcast i8* %1733 to double*
  %1737 = load double, double* %1736, align 1
  %1738 = getelementptr inbounds i8, i8* %1733, i64 8
  %1739 = bitcast i8* %1738 to i64*
  %1740 = load i64, i64* %1739, align 1
  %1741 = load double, double* bitcast (%two_type* @two to double*)
  %1742 = fadd double %1737, %1741
  %1743 = bitcast i8* %1732 to double*
  store double %1742, double* %1743, align 1, !tbaa !2451
  %1744 = getelementptr inbounds i8, i8* %1732, i64 8
  %1745 = bitcast i8* %1744 to i64*
  store i64 %1740, i64* %1745, align 1, !tbaa !2451
  %1746 = load i64, i64* %RBP
  %1747 = sub i64 %1746, 24
  %1748 = bitcast %union.vec128_t* %XMM0 to i8*
  %1749 = load i64, i64* %PC
  %1750 = add i64 %1749, 5
  store i64 %1750, i64* %PC
  %1751 = bitcast i8* %1748 to double*
  %1752 = load double, double* %1751, align 1
  %1753 = inttoptr i64 %1747 to double*
  store double %1752, double* %1753
  %1754 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1755 = load i64, i64* %RBP
  %1756 = sub i64 %1755, 48
  %1757 = load i64, i64* %PC
  %1758 = add i64 %1757, 5
  store i64 %1758, i64* %PC
  %1759 = inttoptr i64 %1756 to double*
  %1760 = load double, double* %1759
  %1761 = bitcast i8* %1754 to double*
  store double %1760, double* %1761, align 1, !tbaa !2451
  %1762 = getelementptr inbounds i8, i8* %1754, i64 8
  %1763 = bitcast i8* %1762 to double*
  store double 0.000000e+00, double* %1763, align 1, !tbaa !2451
  %1764 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1765 = load i64, i64* %RBP
  %1766 = sub i64 %1765, 16
  %1767 = load i64, i64* %PC
  %1768 = add i64 %1767, 5
  store i64 %1768, i64* %PC
  %1769 = inttoptr i64 %1766 to double*
  %1770 = load double, double* %1769
  %1771 = bitcast i8* %1764 to double*
  store double %1770, double* %1771, align 1, !tbaa !2451
  %1772 = getelementptr inbounds i8, i8* %1764, i64 8
  %1773 = bitcast i8* %1772 to double*
  store double 0.000000e+00, double* %1773, align 1, !tbaa !2451
  %1774 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1775 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1776 = load i64, i64* %RBP
  %1777 = sub i64 %1776, 24
  %1778 = load i64, i64* %PC
  %1779 = add i64 %1778, 5
  store i64 %1779, i64* %PC
  %1780 = bitcast i8* %1775 to double*
  %1781 = load double, double* %1780, align 1
  %1782 = getelementptr inbounds i8, i8* %1775, i64 8
  %1783 = bitcast i8* %1782 to i64*
  %1784 = load i64, i64* %1783, align 1
  %1785 = inttoptr i64 %1777 to double*
  %1786 = load double, double* %1785
  %1787 = fsub double %1781, %1786
  %1788 = bitcast i8* %1774 to double*
  store double %1787, double* %1788, align 1, !tbaa !2451
  %1789 = getelementptr inbounds i8, i8* %1774, i64 8
  %1790 = bitcast i8* %1789 to i64*
  store i64 %1784, i64* %1790, align 1, !tbaa !2451
  %1791 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1792 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1793 = bitcast %union.vec128_t* %XMM1 to i8*
  %1794 = load i64, i64* %PC
  %1795 = add i64 %1794, 4
  store i64 %1795, i64* %PC
  %1796 = bitcast i8* %1792 to double*
  %1797 = load double, double* %1796, align 1
  %1798 = getelementptr inbounds i8, i8* %1792, i64 8
  %1799 = bitcast i8* %1798 to i64*
  %1800 = load i64, i64* %1799, align 1
  %1801 = bitcast i8* %1793 to double*
  %1802 = load double, double* %1801, align 1
  %1803 = fadd double %1797, %1802
  %1804 = bitcast i8* %1791 to double*
  store double %1803, double* %1804, align 1, !tbaa !2451
  %1805 = getelementptr inbounds i8, i8* %1791, i64 8
  %1806 = bitcast i8* %1805 to i64*
  store i64 %1800, i64* %1806, align 1, !tbaa !2451
  %1807 = load i64, i64* %RBP
  %1808 = sub i64 %1807, 48
  %1809 = bitcast %union.vec128_t* %XMM0 to i8*
  %1810 = load i64, i64* %PC
  %1811 = add i64 %1810, 5
  store i64 %1811, i64* %PC
  %1812 = bitcast i8* %1809 to double*
  %1813 = load double, double* %1812, align 1
  %1814 = inttoptr i64 %1808 to double*
  store double %1813, double* %1814
  %1815 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1816 = load i64, i64* %RBP
  %1817 = sub i64 %1816, 32
  %1818 = load i64, i64* %PC
  %1819 = add i64 %1818, 5
  store i64 %1819, i64* %PC
  %1820 = inttoptr i64 %1817 to double*
  %1821 = load double, double* %1820
  %1822 = bitcast i8* %1815 to double*
  store double %1821, double* %1822, align 1, !tbaa !2451
  %1823 = getelementptr inbounds i8, i8* %1815, i64 8
  %1824 = bitcast i8* %1823 to double*
  store double 0.000000e+00, double* %1824, align 1, !tbaa !2451
  %1825 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1826 = load i64, i64* %RBP
  %1827 = sub i64 %1826, 16
  %1828 = load i64, i64* %PC
  %1829 = add i64 %1828, 5
  store i64 %1829, i64* %PC
  %1830 = inttoptr i64 %1827 to double*
  %1831 = load double, double* %1830
  %1832 = bitcast i8* %1825 to double*
  store double %1831, double* %1832, align 1, !tbaa !2451
  %1833 = getelementptr inbounds i8, i8* %1825, i64 8
  %1834 = bitcast i8* %1833 to double*
  store double 0.000000e+00, double* %1834, align 1, !tbaa !2451
  %1835 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1836 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1837 = load i64, i64* %RBP
  %1838 = sub i64 %1837, 24
  %1839 = load i64, i64* %PC
  %1840 = add i64 %1839, 5
  store i64 %1840, i64* %PC
  %1841 = bitcast i8* %1836 to double*
  %1842 = load double, double* %1841, align 1
  %1843 = getelementptr inbounds i8, i8* %1836, i64 8
  %1844 = bitcast i8* %1843 to i64*
  %1845 = load i64, i64* %1844, align 1
  %1846 = inttoptr i64 %1838 to double*
  %1847 = load double, double* %1846
  %1848 = fmul double %1842, %1847
  %1849 = bitcast i8* %1835 to double*
  store double %1848, double* %1849, align 1, !tbaa !2451
  %1850 = getelementptr inbounds i8, i8* %1835, i64 8
  %1851 = bitcast i8* %1850 to i64*
  store i64 %1845, i64* %1851, align 1, !tbaa !2451
  %1852 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1853 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1854 = bitcast %union.vec128_t* %XMM1 to i8*
  %1855 = load i64, i64* %PC
  %1856 = add i64 %1855, 4
  store i64 %1856, i64* %PC
  %1857 = bitcast i8* %1853 to double*
  %1858 = load double, double* %1857, align 1
  %1859 = getelementptr inbounds i8, i8* %1853, i64 8
  %1860 = bitcast i8* %1859 to i64*
  %1861 = load i64, i64* %1860, align 1
  %1862 = bitcast i8* %1854 to double*
  %1863 = load double, double* %1862, align 1
  %1864 = fsub double %1858, %1863
  %1865 = bitcast i8* %1852 to double*
  store double %1864, double* %1865, align 1, !tbaa !2451
  %1866 = getelementptr inbounds i8, i8* %1852, i64 8
  %1867 = bitcast i8* %1866 to i64*
  store i64 %1861, i64* %1867, align 1, !tbaa !2451
  %1868 = load i64, i64* %RBP
  %1869 = sub i64 %1868, 32
  %1870 = bitcast %union.vec128_t* %XMM0 to i8*
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 5
  store i64 %1872, i64* %PC
  %1873 = bitcast i8* %1870 to double*
  %1874 = load double, double* %1873, align 1
  %1875 = inttoptr i64 %1869 to double*
  store double %1874, double* %1875
  %1876 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1877 = load i64, i64* %RBP
  %1878 = sub i64 %1877, 40
  %1879 = load i64, i64* %PC
  %1880 = add i64 %1879, 5
  store i64 %1880, i64* %PC
  %1881 = inttoptr i64 %1878 to double*
  %1882 = load double, double* %1881
  %1883 = bitcast i8* %1876 to double*
  store double %1882, double* %1883, align 1, !tbaa !2451
  %1884 = getelementptr inbounds i8, i8* %1876, i64 8
  %1885 = bitcast i8* %1884 to double*
  store double 0.000000e+00, double* %1885, align 1, !tbaa !2451
  %1886 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1887 = load i64, i64* %RBP
  %1888 = sub i64 %1887, 16
  %1889 = load i64, i64* %PC
  %1890 = add i64 %1889, 5
  store i64 %1890, i64* %PC
  %1891 = inttoptr i64 %1888 to double*
  %1892 = load double, double* %1891
  %1893 = bitcast i8* %1886 to double*
  store double %1892, double* %1893, align 1, !tbaa !2451
  %1894 = getelementptr inbounds i8, i8* %1886, i64 8
  %1895 = bitcast i8* %1894 to double*
  store double 0.000000e+00, double* %1895, align 1, !tbaa !2451
  %1896 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1897 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1898 = load i64, i64* %RBP
  %1899 = sub i64 %1898, 24
  %1900 = load i64, i64* %PC
  %1901 = add i64 %1900, 5
  store i64 %1901, i64* %PC
  %1902 = bitcast i8* %1897 to double*
  %1903 = load double, double* %1902, align 1
  %1904 = getelementptr inbounds i8, i8* %1897, i64 8
  %1905 = bitcast i8* %1904 to i64*
  %1906 = load i64, i64* %1905, align 1
  %1907 = inttoptr i64 %1899 to double*
  %1908 = load double, double* %1907
  %1909 = fdiv double %1903, %1908
  %1910 = bitcast i8* %1896 to double*
  store double %1909, double* %1910, align 1, !tbaa !2451
  %1911 = getelementptr inbounds i8, i8* %1896, i64 8
  %1912 = bitcast i8* %1911 to i64*
  store i64 %1906, i64* %1912, align 1, !tbaa !2451
  %1913 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1914 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1915 = bitcast %union.vec128_t* %XMM1 to i8*
  %1916 = load i64, i64* %PC
  %1917 = add i64 %1916, 4
  store i64 %1917, i64* %PC
  %1918 = bitcast i8* %1914 to double*
  %1919 = load double, double* %1918, align 1
  %1920 = getelementptr inbounds i8, i8* %1914, i64 8
  %1921 = bitcast i8* %1920 to i64*
  %1922 = load i64, i64* %1921, align 1
  %1923 = bitcast i8* %1915 to double*
  %1924 = load double, double* %1923, align 1
  %1925 = fadd double %1919, %1924
  %1926 = bitcast i8* %1913 to double*
  store double %1925, double* %1926, align 1, !tbaa !2451
  %1927 = getelementptr inbounds i8, i8* %1913, i64 8
  %1928 = bitcast i8* %1927 to i64*
  store i64 %1922, i64* %1928, align 1, !tbaa !2451
  %1929 = load i64, i64* %RBP
  %1930 = sub i64 %1929, 40
  %1931 = bitcast %union.vec128_t* %XMM0 to i8*
  %1932 = load i64, i64* %PC
  %1933 = add i64 %1932, 5
  store i64 %1933, i64* %PC
  %1934 = bitcast i8* %1931 to double*
  %1935 = load double, double* %1934, align 1
  %1936 = inttoptr i64 %1930 to double*
  store double %1935, double* %1936
  %1937 = load i64, i64* %RBP
  %1938 = sub i64 %1937, 72
  %1939 = load i64, i64* %PC
  %1940 = add i64 %1939, 4
  store i64 %1940, i64* %PC
  %1941 = inttoptr i64 %1938 to i64*
  %1942 = load i64, i64* %1941
  store i64 %1942, i64* %RAX, align 8, !tbaa !2428
  %1943 = load i64, i64* %RAX
  %1944 = load i64, i64* %PC
  %1945 = add i64 %1944, 4
  store i64 %1945, i64* %PC
  %1946 = add i64 1, %1943
  store i64 %1946, i64* %RAX, align 8, !tbaa !2428
  %1947 = icmp ult i64 %1946, %1943
  %1948 = icmp ult i64 %1946, 1
  %1949 = or i1 %1947, %1948
  %1950 = zext i1 %1949 to i8
  %1951 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1950, i8* %1951, align 1, !tbaa !2432
  %1952 = trunc i64 %1946 to i32
  %1953 = and i32 %1952, 255
  %1954 = call i32 @llvm.ctpop.i32(i32 %1953) #16
  %1955 = trunc i32 %1954 to i8
  %1956 = and i8 %1955, 1
  %1957 = xor i8 %1956, 1
  %1958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1957, i8* %1958, align 1, !tbaa !2446
  %1959 = xor i64 1, %1943
  %1960 = xor i64 %1959, %1946
  %1961 = lshr i64 %1960, 4
  %1962 = trunc i64 %1961 to i8
  %1963 = and i8 %1962, 1
  %1964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1963, i8* %1964, align 1, !tbaa !2447
  %1965 = icmp eq i64 %1946, 0
  %1966 = zext i1 %1965 to i8
  %1967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1966, i8* %1967, align 1, !tbaa !2448
  %1968 = lshr i64 %1946, 63
  %1969 = trunc i64 %1968 to i8
  %1970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1969, i8* %1970, align 1, !tbaa !2449
  %1971 = lshr i64 %1943, 63
  %1972 = xor i64 %1968, %1971
  %1973 = add nuw nsw i64 %1972, %1968
  %1974 = icmp eq i64 %1973, 2
  %1975 = zext i1 %1974 to i8
  %1976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1975, i8* %1976, align 1, !tbaa !2450
  %1977 = load i64, i64* %RBP
  %1978 = sub i64 %1977, 72
  %1979 = load i64, i64* %RAX
  %1980 = load i64, i64* %PC
  %1981 = add i64 %1980, 4
  store i64 %1981, i64* %PC
  %1982 = inttoptr i64 %1978 to i64*
  store i64 %1979, i64* %1982
  %1983 = load i64, i64* %PC
  %1984 = sub i64 %1983, 173
  %1985 = load i64, i64* %PC
  %1986 = add i64 %1985, 5
  store i64 %1986, i64* %PC
  %1987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1984, i64* %1987, align 8, !tbaa !2428
  br label %block_400bc8

block_400ad4:                                     ; preds = %block_400ae2, %block_4008ba
  %MEMORY.2 = phi %struct.Memory* [ %5779, %block_4008ba ], [ %MEMORY.2, %block_400ae2 ]
  %1988 = load i64, i64* %RBP
  %1989 = sub i64 %1988, 72
  %1990 = load i64, i64* %PC
  %1991 = add i64 %1990, 4
  store i64 %1991, i64* %PC
  %1992 = inttoptr i64 %1989 to i64*
  %1993 = load i64, i64* %1992
  store i64 %1993, i64* %RAX, align 8, !tbaa !2428
  %1994 = load i64, i64* %RAX
  %1995 = load i64, i64* %RBP
  %1996 = sub i64 %1995, 80
  %1997 = load i64, i64* %PC
  %1998 = add i64 %1997, 4
  store i64 %1998, i64* %PC
  %1999 = inttoptr i64 %1996 to i64*
  %2000 = load i64, i64* %1999
  %2001 = sub i64 %1994, %2000
  %2002 = icmp ugt i64 %2000, %1994
  %2003 = zext i1 %2002 to i8
  %2004 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2003, i8* %2004, align 1, !tbaa !2432
  %2005 = trunc i64 %2001 to i32
  %2006 = and i32 %2005, 255
  %2007 = call i32 @llvm.ctpop.i32(i32 %2006) #16
  %2008 = trunc i32 %2007 to i8
  %2009 = and i8 %2008, 1
  %2010 = xor i8 %2009, 1
  %2011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2010, i8* %2011, align 1, !tbaa !2446
  %2012 = xor i64 %2000, %1994
  %2013 = xor i64 %2012, %2001
  %2014 = lshr i64 %2013, 4
  %2015 = trunc i64 %2014 to i8
  %2016 = and i8 %2015, 1
  %2017 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2016, i8* %2017, align 1, !tbaa !2447
  %2018 = icmp eq i64 %2001, 0
  %2019 = zext i1 %2018 to i8
  %2020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2019, i8* %2020, align 1, !tbaa !2448
  %2021 = lshr i64 %2001, 63
  %2022 = trunc i64 %2021 to i8
  %2023 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2022, i8* %2023, align 1, !tbaa !2449
  %2024 = lshr i64 %1994, 63
  %2025 = lshr i64 %2000, 63
  %2026 = xor i64 %2025, %2024
  %2027 = xor i64 %2021, %2024
  %2028 = add nuw nsw i64 %2027, %2026
  %2029 = icmp eq i64 %2028, 2
  %2030 = zext i1 %2029 to i8
  %2031 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2030, i8* %2031, align 1, !tbaa !2450
  %2032 = load i64, i64* %PC
  %2033 = add i64 %2032, 79
  %2034 = load i64, i64* %PC
  %2035 = add i64 %2034, 6
  %2036 = load i64, i64* %PC
  %2037 = add i64 %2036, 6
  store i64 %2037, i64* %PC
  %2038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2039 = load i8, i8* %2038, align 1, !tbaa !2448
  %2040 = icmp eq i8 %2039, 0
  %2041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2042 = load i8, i8* %2041, align 1, !tbaa !2449
  %2043 = icmp ne i8 %2042, 0
  %2044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2045 = load i8, i8* %2044, align 1, !tbaa !2450
  %2046 = icmp ne i8 %2045, 0
  %2047 = xor i1 %2043, %2046
  %2048 = xor i1 %2047, true
  %2049 = and i1 %2040, %2048
  %2050 = zext i1 %2049 to i8
  store i8 %2050, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %2051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2052 = select i1 %2049, i64 %2033, i64 %2035
  store i64 %2052, i64* %2051, align 8, !tbaa !2428
  %2053 = load i8, i8* %BRANCH_TAKEN
  %2054 = icmp eq i8 %2053, 1
  %2055 = load i64, i64* %PC
  %2056 = add i64 %2055, 10
  store i64 %2056, i64* %PC
  br i1 %2054, label %block_400b2b, label %block_400ae2

block_4018ee:                                     ; preds = %block_4018d9
  %2057 = load i64, i64* %RBP
  %2058 = sub i64 %2057, 72
  %2059 = load i64, i64* %PC
  %2060 = add i64 %2059, 4
  store i64 %2060, i64* %PC
  %2061 = inttoptr i64 %2058 to i64*
  %2062 = load i64, i64* %2061
  store i64 %2062, i64* %RAX, align 8, !tbaa !2428
  %2063 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2064 = load i64, i64* %RAX
  %2065 = load i64, i64* %PC
  %2066 = add i64 %2065, 5
  store i64 %2066, i64* %PC
  %2067 = sitofp i64 %2064 to double
  %2068 = bitcast i8* %2063 to double*
  store double %2067, double* %2068, align 1, !tbaa !2451
  %2069 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2070 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2071 = load i64, i64* %RBP
  %2072 = sub i64 %2071, 48
  %2073 = load i64, i64* %PC
  %2074 = add i64 %2073, 5
  store i64 %2074, i64* %PC
  %2075 = bitcast i8* %2070 to double*
  %2076 = load double, double* %2075, align 1
  %2077 = getelementptr inbounds i8, i8* %2070, i64 8
  %2078 = bitcast i8* %2077 to i64*
  %2079 = load i64, i64* %2078, align 1
  %2080 = inttoptr i64 %2072 to double*
  %2081 = load double, double* %2080
  %2082 = fmul double %2076, %2081
  %2083 = bitcast i8* %2069 to double*
  store double %2082, double* %2083, align 1, !tbaa !2451
  %2084 = getelementptr inbounds i8, i8* %2069, i64 8
  %2085 = bitcast i8* %2084 to i64*
  store i64 %2079, i64* %2085, align 1, !tbaa !2451
  %2086 = load i64, i64* %RBP
  %2087 = sub i64 %2086, 24
  %2088 = bitcast %union.vec128_t* %XMM0 to i8*
  %2089 = load i64, i64* %PC
  %2090 = add i64 %2089, 5
  store i64 %2090, i64* %PC
  %2091 = bitcast i8* %2088 to double*
  %2092 = load double, double* %2091, align 1
  %2093 = inttoptr i64 %2087 to double*
  store double %2092, double* %2093
  %2094 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2095 = load i64, i64* %RBP
  %2096 = sub i64 %2095, 24
  %2097 = load i64, i64* %PC
  %2098 = add i64 %2097, 5
  store i64 %2098, i64* %PC
  %2099 = inttoptr i64 %2096 to double*
  %2100 = load double, double* %2099
  %2101 = bitcast i8* %2094 to double*
  store double %2100, double* %2101, align 1, !tbaa !2451
  %2102 = getelementptr inbounds i8, i8* %2094, i64 8
  %2103 = bitcast i8* %2102 to double*
  store double 0.000000e+00, double* %2103, align 1, !tbaa !2451
  %2104 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2105 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2106 = load i64, i64* %RBP
  %2107 = sub i64 %2106, 24
  %2108 = load i64, i64* %PC
  %2109 = add i64 %2108, 5
  store i64 %2109, i64* %PC
  %2110 = bitcast i8* %2105 to double*
  %2111 = load double, double* %2110, align 1
  %2112 = getelementptr inbounds i8, i8* %2105, i64 8
  %2113 = bitcast i8* %2112 to i64*
  %2114 = load i64, i64* %2113, align 1
  %2115 = inttoptr i64 %2107 to double*
  %2116 = load double, double* %2115
  %2117 = fmul double %2111, %2116
  %2118 = bitcast i8* %2104 to double*
  store double %2117, double* %2118, align 1, !tbaa !2451
  %2119 = getelementptr inbounds i8, i8* %2104, i64 8
  %2120 = bitcast i8* %2119 to i64*
  store i64 %2114, i64* %2120, align 1, !tbaa !2451
  %2121 = load i64, i64* %RBP
  %2122 = sub i64 %2121, 40
  %2123 = bitcast %union.vec128_t* %XMM0 to i8*
  %2124 = load i64, i64* %PC
  %2125 = add i64 %2124, 5
  store i64 %2125, i64* %PC
  %2126 = bitcast i8* %2123 to double*
  %2127 = load double, double* %2126, align 1
  %2128 = inttoptr i64 %2122 to double*
  store double %2127, double* %2128
  %2129 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2130 = load i64, i64* %RBP
  %2131 = sub i64 %2130, 24
  %2132 = load i64, i64* %PC
  %2133 = add i64 %2132, 5
  store i64 %2133, i64* %PC
  %2134 = inttoptr i64 %2131 to double*
  %2135 = load double, double* %2134
  %2136 = bitcast i8* %2129 to double*
  store double %2135, double* %2136, align 1, !tbaa !2451
  %2137 = getelementptr inbounds i8, i8* %2129, i64 8
  %2138 = bitcast i8* %2137 to double*
  store double 0.000000e+00, double* %2138, align 1, !tbaa !2451
  %2139 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2140 = load i64, i64* %PC
  %2141 = add i64 %2140, 9
  store i64 %2141, i64* %PC
  %2142 = load double, double* bitcast (%A6_type* @A6 to double*)
  %2143 = bitcast i8* %2139 to double*
  store double %2142, double* %2143, align 1, !tbaa !2451
  %2144 = getelementptr inbounds i8, i8* %2139, i64 8
  %2145 = bitcast i8* %2144 to double*
  store double 0.000000e+00, double* %2145, align 1, !tbaa !2451
  %2146 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2147 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2148 = load i64, i64* %RBP
  %2149 = sub i64 %2148, 40
  %2150 = load i64, i64* %PC
  %2151 = add i64 %2150, 5
  store i64 %2151, i64* %PC
  %2152 = bitcast i8* %2147 to double*
  %2153 = load double, double* %2152, align 1
  %2154 = getelementptr inbounds i8, i8* %2147, i64 8
  %2155 = bitcast i8* %2154 to i64*
  %2156 = load i64, i64* %2155, align 1
  %2157 = inttoptr i64 %2149 to double*
  %2158 = load double, double* %2157
  %2159 = fmul double %2153, %2158
  %2160 = bitcast i8* %2146 to double*
  store double %2159, double* %2160, align 1, !tbaa !2451
  %2161 = getelementptr inbounds i8, i8* %2146, i64 8
  %2162 = bitcast i8* %2161 to i64*
  store i64 %2156, i64* %2162, align 1, !tbaa !2451
  %2163 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2164 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2165 = load i64, i64* %PC
  %2166 = add i64 %2165, 9
  store i64 %2166, i64* %PC
  %2167 = bitcast i8* %2164 to double*
  %2168 = load double, double* %2167, align 1
  %2169 = getelementptr inbounds i8, i8* %2164, i64 8
  %2170 = bitcast i8* %2169 to i64*
  %2171 = load i64, i64* %2170, align 1
  %2172 = load double, double* bitcast (%A5_type* @A5 to double*)
  %2173 = fadd double %2168, %2172
  %2174 = bitcast i8* %2163 to double*
  store double %2173, double* %2174, align 1, !tbaa !2451
  %2175 = getelementptr inbounds i8, i8* %2163, i64 8
  %2176 = bitcast i8* %2175 to i64*
  store i64 %2171, i64* %2176, align 1, !tbaa !2451
  %2177 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2178 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2179 = load i64, i64* %RBP
  %2180 = sub i64 %2179, 40
  %2181 = load i64, i64* %PC
  %2182 = add i64 %2181, 5
  store i64 %2182, i64* %PC
  %2183 = bitcast i8* %2178 to double*
  %2184 = load double, double* %2183, align 1
  %2185 = getelementptr inbounds i8, i8* %2178, i64 8
  %2186 = bitcast i8* %2185 to i64*
  %2187 = load i64, i64* %2186, align 1
  %2188 = inttoptr i64 %2180 to double*
  %2189 = load double, double* %2188
  %2190 = fmul double %2184, %2189
  %2191 = bitcast i8* %2177 to double*
  store double %2190, double* %2191, align 1, !tbaa !2451
  %2192 = getelementptr inbounds i8, i8* %2177, i64 8
  %2193 = bitcast i8* %2192 to i64*
  store i64 %2187, i64* %2193, align 1, !tbaa !2451
  %2194 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2195 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2196 = load i64, i64* %PC
  %2197 = add i64 %2196, 9
  store i64 %2197, i64* %PC
  %2198 = bitcast i8* %2195 to double*
  %2199 = load double, double* %2198, align 1
  %2200 = getelementptr inbounds i8, i8* %2195, i64 8
  %2201 = bitcast i8* %2200 to i64*
  %2202 = load i64, i64* %2201, align 1
  %2203 = load double, double* bitcast (%A4_type* @A4 to double*)
  %2204 = fadd double %2199, %2203
  %2205 = bitcast i8* %2194 to double*
  store double %2204, double* %2205, align 1, !tbaa !2451
  %2206 = getelementptr inbounds i8, i8* %2194, i64 8
  %2207 = bitcast i8* %2206 to i64*
  store i64 %2202, i64* %2207, align 1, !tbaa !2451
  %2208 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2209 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2210 = load i64, i64* %RBP
  %2211 = sub i64 %2210, 40
  %2212 = load i64, i64* %PC
  %2213 = add i64 %2212, 5
  store i64 %2213, i64* %PC
  %2214 = bitcast i8* %2209 to double*
  %2215 = load double, double* %2214, align 1
  %2216 = getelementptr inbounds i8, i8* %2209, i64 8
  %2217 = bitcast i8* %2216 to i64*
  %2218 = load i64, i64* %2217, align 1
  %2219 = inttoptr i64 %2211 to double*
  %2220 = load double, double* %2219
  %2221 = fmul double %2215, %2220
  %2222 = bitcast i8* %2208 to double*
  store double %2221, double* %2222, align 1, !tbaa !2451
  %2223 = getelementptr inbounds i8, i8* %2208, i64 8
  %2224 = bitcast i8* %2223 to i64*
  store i64 %2218, i64* %2224, align 1, !tbaa !2451
  %2225 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2226 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2227 = load i64, i64* %PC
  %2228 = add i64 %2227, 9
  store i64 %2228, i64* %PC
  %2229 = bitcast i8* %2226 to double*
  %2230 = load double, double* %2229, align 1
  %2231 = getelementptr inbounds i8, i8* %2226, i64 8
  %2232 = bitcast i8* %2231 to i64*
  %2233 = load i64, i64* %2232, align 1
  %2234 = load double, double* bitcast (%A3_type* @A3 to double*)
  %2235 = fadd double %2230, %2234
  %2236 = bitcast i8* %2225 to double*
  store double %2235, double* %2236, align 1, !tbaa !2451
  %2237 = getelementptr inbounds i8, i8* %2225, i64 8
  %2238 = bitcast i8* %2237 to i64*
  store i64 %2233, i64* %2238, align 1, !tbaa !2451
  %2239 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2240 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2241 = load i64, i64* %RBP
  %2242 = sub i64 %2241, 40
  %2243 = load i64, i64* %PC
  %2244 = add i64 %2243, 5
  store i64 %2244, i64* %PC
  %2245 = bitcast i8* %2240 to double*
  %2246 = load double, double* %2245, align 1
  %2247 = getelementptr inbounds i8, i8* %2240, i64 8
  %2248 = bitcast i8* %2247 to i64*
  %2249 = load i64, i64* %2248, align 1
  %2250 = inttoptr i64 %2242 to double*
  %2251 = load double, double* %2250
  %2252 = fmul double %2246, %2251
  %2253 = bitcast i8* %2239 to double*
  store double %2252, double* %2253, align 1, !tbaa !2451
  %2254 = getelementptr inbounds i8, i8* %2239, i64 8
  %2255 = bitcast i8* %2254 to i64*
  store i64 %2249, i64* %2255, align 1, !tbaa !2451
  %2256 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2257 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2258 = load i64, i64* %PC
  %2259 = add i64 %2258, 9
  store i64 %2259, i64* %PC
  %2260 = bitcast i8* %2257 to double*
  %2261 = load double, double* %2260, align 1
  %2262 = getelementptr inbounds i8, i8* %2257, i64 8
  %2263 = bitcast i8* %2262 to i64*
  %2264 = load i64, i64* %2263, align 1
  %2265 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %2266 = fadd double %2261, %2265
  %2267 = bitcast i8* %2256 to double*
  store double %2266, double* %2267, align 1, !tbaa !2451
  %2268 = getelementptr inbounds i8, i8* %2256, i64 8
  %2269 = bitcast i8* %2268 to i64*
  store i64 %2264, i64* %2269, align 1, !tbaa !2451
  %2270 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2271 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2272 = load i64, i64* %RBP
  %2273 = sub i64 %2272, 40
  %2274 = load i64, i64* %PC
  %2275 = add i64 %2274, 5
  store i64 %2275, i64* %PC
  %2276 = bitcast i8* %2271 to double*
  %2277 = load double, double* %2276, align 1
  %2278 = getelementptr inbounds i8, i8* %2271, i64 8
  %2279 = bitcast i8* %2278 to i64*
  %2280 = load i64, i64* %2279, align 1
  %2281 = inttoptr i64 %2273 to double*
  %2282 = load double, double* %2281
  %2283 = fmul double %2277, %2282
  %2284 = bitcast i8* %2270 to double*
  store double %2283, double* %2284, align 1, !tbaa !2451
  %2285 = getelementptr inbounds i8, i8* %2270, i64 8
  %2286 = bitcast i8* %2285 to i64*
  store i64 %2280, i64* %2286, align 1, !tbaa !2451
  %2287 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2288 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2289 = load i64, i64* %PC
  %2290 = add i64 %2289, 9
  store i64 %2290, i64* %PC
  %2291 = bitcast i8* %2288 to double*
  %2292 = load double, double* %2291, align 1
  %2293 = getelementptr inbounds i8, i8* %2288, i64 8
  %2294 = bitcast i8* %2293 to i64*
  %2295 = load i64, i64* %2294, align 1
  %2296 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %2297 = fadd double %2292, %2296
  %2298 = bitcast i8* %2287 to double*
  store double %2297, double* %2298, align 1, !tbaa !2451
  %2299 = getelementptr inbounds i8, i8* %2287, i64 8
  %2300 = bitcast i8* %2299 to i64*
  store i64 %2295, i64* %2300, align 1, !tbaa !2451
  %2301 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2302 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2303 = load i64, i64* %RBP
  %2304 = sub i64 %2303, 40
  %2305 = load i64, i64* %PC
  %2306 = add i64 %2305, 5
  store i64 %2306, i64* %PC
  %2307 = bitcast i8* %2302 to double*
  %2308 = load double, double* %2307, align 1
  %2309 = getelementptr inbounds i8, i8* %2302, i64 8
  %2310 = bitcast i8* %2309 to i64*
  %2311 = load i64, i64* %2310, align 1
  %2312 = inttoptr i64 %2304 to double*
  %2313 = load double, double* %2312
  %2314 = fmul double %2308, %2313
  %2315 = bitcast i8* %2301 to double*
  store double %2314, double* %2315, align 1, !tbaa !2451
  %2316 = getelementptr inbounds i8, i8* %2301, i64 8
  %2317 = bitcast i8* %2316 to i64*
  store i64 %2311, i64* %2317, align 1, !tbaa !2451
  %2318 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2319 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2320 = load i64, i64* %PC
  %2321 = add i64 %2320, 9
  store i64 %2321, i64* %PC
  %2322 = bitcast i8* %2319 to double*
  %2323 = load double, double* %2322, align 1
  %2324 = getelementptr inbounds i8, i8* %2319, i64 8
  %2325 = bitcast i8* %2324 to i64*
  %2326 = load i64, i64* %2325, align 1
  %2327 = load double, double* bitcast (%one_type* @one to double*)
  %2328 = fadd double %2323, %2327
  %2329 = bitcast i8* %2318 to double*
  store double %2328, double* %2329, align 1, !tbaa !2451
  %2330 = getelementptr inbounds i8, i8* %2318, i64 8
  %2331 = bitcast i8* %2330 to i64*
  store i64 %2326, i64* %2331, align 1, !tbaa !2451
  %2332 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2333 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2334 = bitcast %union.vec128_t* %XMM1 to i8*
  %2335 = load i64, i64* %PC
  %2336 = add i64 %2335, 4
  store i64 %2336, i64* %PC
  %2337 = bitcast i8* %2333 to double*
  %2338 = load double, double* %2337, align 1
  %2339 = getelementptr inbounds i8, i8* %2333, i64 8
  %2340 = bitcast i8* %2339 to i64*
  %2341 = load i64, i64* %2340, align 1
  %2342 = bitcast i8* %2334 to double*
  %2343 = load double, double* %2342, align 1
  %2344 = fmul double %2338, %2343
  %2345 = bitcast i8* %2332 to double*
  store double %2344, double* %2345, align 1, !tbaa !2451
  %2346 = getelementptr inbounds i8, i8* %2332, i64 8
  %2347 = bitcast i8* %2346 to i64*
  store i64 %2341, i64* %2347, align 1, !tbaa !2451
  %2348 = load i64, i64* %RBP
  %2349 = sub i64 %2348, 32
  %2350 = bitcast %union.vec128_t* %XMM0 to i8*
  %2351 = load i64, i64* %PC
  %2352 = add i64 %2351, 5
  store i64 %2352, i64* %PC
  %2353 = bitcast i8* %2350 to double*
  %2354 = load double, double* %2353, align 1
  %2355 = inttoptr i64 %2349 to double*
  store double %2354, double* %2355
  %2356 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2357 = load i64, i64* %RBP
  %2358 = sub i64 %2357, 16
  %2359 = load i64, i64* %PC
  %2360 = add i64 %2359, 5
  store i64 %2360, i64* %PC
  %2361 = inttoptr i64 %2358 to double*
  %2362 = load double, double* %2361
  %2363 = bitcast i8* %2356 to double*
  store double %2362, double* %2363, align 1, !tbaa !2451
  %2364 = getelementptr inbounds i8, i8* %2356, i64 8
  %2365 = bitcast i8* %2364 to double*
  store double 0.000000e+00, double* %2365, align 1, !tbaa !2451
  %2366 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2367 = load i64, i64* %RBP
  %2368 = sub i64 %2367, 32
  %2369 = load i64, i64* %PC
  %2370 = add i64 %2369, 5
  store i64 %2370, i64* %PC
  %2371 = inttoptr i64 %2368 to double*
  %2372 = load double, double* %2371
  %2373 = bitcast i8* %2366 to double*
  store double %2372, double* %2373, align 1, !tbaa !2451
  %2374 = getelementptr inbounds i8, i8* %2366, i64 8
  %2375 = bitcast i8* %2374 to double*
  store double 0.000000e+00, double* %2375, align 1, !tbaa !2451
  %2376 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2377 = load i64, i64* %RBP
  %2378 = sub i64 %2377, 40
  %2379 = load i64, i64* %PC
  %2380 = add i64 %2379, 5
  store i64 %2380, i64* %PC
  %2381 = inttoptr i64 %2378 to double*
  %2382 = load double, double* %2381
  %2383 = bitcast i8* %2376 to double*
  store double %2382, double* %2383, align 1, !tbaa !2451
  %2384 = getelementptr inbounds i8, i8* %2376, i64 8
  %2385 = bitcast i8* %2384 to double*
  store double 0.000000e+00, double* %2385, align 1, !tbaa !2451
  %2386 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2387 = load i64, i64* %RBP
  %2388 = sub i64 %2387, 40
  %2389 = load i64, i64* %PC
  %2390 = add i64 %2389, 5
  store i64 %2390, i64* %PC
  %2391 = inttoptr i64 %2388 to double*
  %2392 = load double, double* %2391
  %2393 = bitcast i8* %2386 to double*
  store double %2392, double* %2393, align 1, !tbaa !2451
  %2394 = getelementptr inbounds i8, i8* %2386, i64 8
  %2395 = bitcast i8* %2394 to double*
  store double 0.000000e+00, double* %2395, align 1, !tbaa !2451
  %2396 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2397 = load i64, i64* %RBP
  %2398 = sub i64 %2397, 40
  %2399 = load i64, i64* %PC
  %2400 = add i64 %2399, 5
  store i64 %2400, i64* %PC
  %2401 = inttoptr i64 %2398 to double*
  %2402 = load double, double* %2401
  %2403 = bitcast i8* %2396 to double*
  store double %2402, double* %2403, align 1, !tbaa !2451
  %2404 = getelementptr inbounds i8, i8* %2396, i64 8
  %2405 = bitcast i8* %2404 to double*
  store double 0.000000e+00, double* %2405, align 1, !tbaa !2451
  %2406 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2407 = load i64, i64* %RBP
  %2408 = sub i64 %2407, 40
  %2409 = load i64, i64* %PC
  %2410 = add i64 %2409, 5
  store i64 %2410, i64* %PC
  %2411 = inttoptr i64 %2408 to double*
  %2412 = load double, double* %2411
  %2413 = bitcast i8* %2406 to double*
  store double %2412, double* %2413, align 1, !tbaa !2451
  %2414 = getelementptr inbounds i8, i8* %2406, i64 8
  %2415 = bitcast i8* %2414 to double*
  store double 0.000000e+00, double* %2415, align 1, !tbaa !2451
  %2416 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %2417 = load i64, i64* %RBP
  %2418 = sub i64 %2417, 40
  %2419 = load i64, i64* %PC
  %2420 = add i64 %2419, 5
  store i64 %2420, i64* %PC
  %2421 = inttoptr i64 %2418 to double*
  %2422 = load double, double* %2421
  %2423 = bitcast i8* %2416 to double*
  store double %2422, double* %2423, align 1, !tbaa !2451
  %2424 = getelementptr inbounds i8, i8* %2416, i64 8
  %2425 = bitcast i8* %2424 to double*
  store double 0.000000e+00, double* %2425, align 1, !tbaa !2451
  %2426 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %2427 = load i64, i64* %PC
  %2428 = add i64 %2427, 9
  store i64 %2428, i64* %PC
  %2429 = load double, double* bitcast (%B6_type* @B6 to double*)
  %2430 = bitcast i8* %2426 to double*
  store double %2429, double* %2430, align 1, !tbaa !2451
  %2431 = getelementptr inbounds i8, i8* %2426, i64 8
  %2432 = bitcast i8* %2431 to double*
  store double 0.000000e+00, double* %2432, align 1, !tbaa !2451
  %2433 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %2434 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %2435 = load i64, i64* %RBP
  %2436 = sub i64 %2435, 40
  %2437 = load i64, i64* %PC
  %2438 = add i64 %2437, 5
  store i64 %2438, i64* %PC
  %2439 = bitcast i8* %2434 to double*
  %2440 = load double, double* %2439, align 1
  %2441 = getelementptr inbounds i8, i8* %2434, i64 8
  %2442 = bitcast i8* %2441 to i64*
  %2443 = load i64, i64* %2442, align 1
  %2444 = inttoptr i64 %2436 to double*
  %2445 = load double, double* %2444
  %2446 = fmul double %2440, %2445
  %2447 = bitcast i8* %2433 to double*
  store double %2446, double* %2447, align 1, !tbaa !2451
  %2448 = getelementptr inbounds i8, i8* %2433, i64 8
  %2449 = bitcast i8* %2448 to i64*
  store i64 %2443, i64* %2449, align 1, !tbaa !2451
  %2450 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %2451 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %2452 = load i64, i64* %PC
  %2453 = add i64 %2452, 9
  store i64 %2453, i64* %PC
  %2454 = bitcast i8* %2451 to double*
  %2455 = load double, double* %2454, align 1
  %2456 = getelementptr inbounds i8, i8* %2451, i64 8
  %2457 = bitcast i8* %2456 to i64*
  %2458 = load i64, i64* %2457, align 1
  %2459 = load double, double* bitcast (%B5_type* @B5 to double*)
  %2460 = fadd double %2455, %2459
  %2461 = bitcast i8* %2450 to double*
  store double %2460, double* %2461, align 1, !tbaa !2451
  %2462 = getelementptr inbounds i8, i8* %2450, i64 8
  %2463 = bitcast i8* %2462 to i64*
  store i64 %2458, i64* %2463, align 1, !tbaa !2451
  %2464 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %2465 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %2466 = bitcast %union.vec128_t* %XMM7 to i8*
  %2467 = load i64, i64* %PC
  %2468 = add i64 %2467, 4
  store i64 %2468, i64* %PC
  %2469 = bitcast i8* %2465 to double*
  %2470 = load double, double* %2469, align 1
  %2471 = getelementptr inbounds i8, i8* %2465, i64 8
  %2472 = bitcast i8* %2471 to i64*
  %2473 = load i64, i64* %2472, align 1
  %2474 = bitcast i8* %2466 to double*
  %2475 = load double, double* %2474, align 1
  %2476 = fmul double %2470, %2475
  %2477 = bitcast i8* %2464 to double*
  store double %2476, double* %2477, align 1, !tbaa !2451
  %2478 = getelementptr inbounds i8, i8* %2464, i64 8
  %2479 = bitcast i8* %2478 to i64*
  store i64 %2473, i64* %2479, align 1, !tbaa !2451
  %2480 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %2481 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %2482 = load i64, i64* %PC
  %2483 = add i64 %2482, 9
  store i64 %2483, i64* %PC
  %2484 = bitcast i8* %2481 to double*
  %2485 = load double, double* %2484, align 1
  %2486 = getelementptr inbounds i8, i8* %2481, i64 8
  %2487 = bitcast i8* %2486 to i64*
  %2488 = load i64, i64* %2487, align 1
  %2489 = load double, double* bitcast (%B4_type* @B4 to double*)
  %2490 = fadd double %2485, %2489
  %2491 = bitcast i8* %2480 to double*
  store double %2490, double* %2491, align 1, !tbaa !2451
  %2492 = getelementptr inbounds i8, i8* %2480, i64 8
  %2493 = bitcast i8* %2492 to i64*
  store i64 %2488, i64* %2493, align 1, !tbaa !2451
  %2494 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2495 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2496 = bitcast %union.vec128_t* %XMM6 to i8*
  %2497 = load i64, i64* %PC
  %2498 = add i64 %2497, 4
  store i64 %2498, i64* %PC
  %2499 = bitcast i8* %2495 to double*
  %2500 = load double, double* %2499, align 1
  %2501 = getelementptr inbounds i8, i8* %2495, i64 8
  %2502 = bitcast i8* %2501 to i64*
  %2503 = load i64, i64* %2502, align 1
  %2504 = bitcast i8* %2496 to double*
  %2505 = load double, double* %2504, align 1
  %2506 = fmul double %2500, %2505
  %2507 = bitcast i8* %2494 to double*
  store double %2506, double* %2507, align 1, !tbaa !2451
  %2508 = getelementptr inbounds i8, i8* %2494, i64 8
  %2509 = bitcast i8* %2508 to i64*
  store i64 %2503, i64* %2509, align 1, !tbaa !2451
  %2510 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2511 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2512 = load i64, i64* %PC
  %2513 = add i64 %2512, 9
  store i64 %2513, i64* %PC
  %2514 = bitcast i8* %2511 to double*
  %2515 = load double, double* %2514, align 1
  %2516 = getelementptr inbounds i8, i8* %2511, i64 8
  %2517 = bitcast i8* %2516 to i64*
  %2518 = load i64, i64* %2517, align 1
  %2519 = load double, double* bitcast (%B3_type* @B3 to double*)
  %2520 = fadd double %2515, %2519
  %2521 = bitcast i8* %2510 to double*
  store double %2520, double* %2521, align 1, !tbaa !2451
  %2522 = getelementptr inbounds i8, i8* %2510, i64 8
  %2523 = bitcast i8* %2522 to i64*
  store i64 %2518, i64* %2523, align 1, !tbaa !2451
  %2524 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2525 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2526 = bitcast %union.vec128_t* %XMM5 to i8*
  %2527 = load i64, i64* %PC
  %2528 = add i64 %2527, 4
  store i64 %2528, i64* %PC
  %2529 = bitcast i8* %2525 to double*
  %2530 = load double, double* %2529, align 1
  %2531 = getelementptr inbounds i8, i8* %2525, i64 8
  %2532 = bitcast i8* %2531 to i64*
  %2533 = load i64, i64* %2532, align 1
  %2534 = bitcast i8* %2526 to double*
  %2535 = load double, double* %2534, align 1
  %2536 = fmul double %2530, %2535
  %2537 = bitcast i8* %2524 to double*
  store double %2536, double* %2537, align 1, !tbaa !2451
  %2538 = getelementptr inbounds i8, i8* %2524, i64 8
  %2539 = bitcast i8* %2538 to i64*
  store i64 %2533, i64* %2539, align 1, !tbaa !2451
  %2540 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2541 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2542 = load i64, i64* %PC
  %2543 = add i64 %2542, 9
  store i64 %2543, i64* %PC
  %2544 = bitcast i8* %2541 to double*
  %2545 = load double, double* %2544, align 1
  %2546 = getelementptr inbounds i8, i8* %2541, i64 8
  %2547 = bitcast i8* %2546 to i64*
  %2548 = load i64, i64* %2547, align 1
  %2549 = load double, double* bitcast (%B2_type* @B2 to double*)
  %2550 = fadd double %2545, %2549
  %2551 = bitcast i8* %2540 to double*
  store double %2550, double* %2551, align 1, !tbaa !2451
  %2552 = getelementptr inbounds i8, i8* %2540, i64 8
  %2553 = bitcast i8* %2552 to i64*
  store i64 %2548, i64* %2553, align 1, !tbaa !2451
  %2554 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2555 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2556 = bitcast %union.vec128_t* %XMM4 to i8*
  %2557 = load i64, i64* %PC
  %2558 = add i64 %2557, 4
  store i64 %2558, i64* %PC
  %2559 = bitcast i8* %2555 to double*
  %2560 = load double, double* %2559, align 1
  %2561 = getelementptr inbounds i8, i8* %2555, i64 8
  %2562 = bitcast i8* %2561 to i64*
  %2563 = load i64, i64* %2562, align 1
  %2564 = bitcast i8* %2556 to double*
  %2565 = load double, double* %2564, align 1
  %2566 = fmul double %2560, %2565
  %2567 = bitcast i8* %2554 to double*
  store double %2566, double* %2567, align 1, !tbaa !2451
  %2568 = getelementptr inbounds i8, i8* %2554, i64 8
  %2569 = bitcast i8* %2568 to i64*
  store i64 %2563, i64* %2569, align 1, !tbaa !2451
  %2570 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2571 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2572 = load i64, i64* %PC
  %2573 = add i64 %2572, 9
  store i64 %2573, i64* %PC
  %2574 = bitcast i8* %2571 to double*
  %2575 = load double, double* %2574, align 1
  %2576 = getelementptr inbounds i8, i8* %2571, i64 8
  %2577 = bitcast i8* %2576 to i64*
  %2578 = load i64, i64* %2577, align 1
  %2579 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %2580 = fadd double %2575, %2579
  %2581 = bitcast i8* %2570 to double*
  store double %2580, double* %2581, align 1, !tbaa !2451
  %2582 = getelementptr inbounds i8, i8* %2570, i64 8
  %2583 = bitcast i8* %2582 to i64*
  store i64 %2578, i64* %2583, align 1, !tbaa !2451
  %2584 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2585 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2586 = bitcast %union.vec128_t* %XMM3 to i8*
  %2587 = load i64, i64* %PC
  %2588 = add i64 %2587, 4
  store i64 %2588, i64* %PC
  %2589 = bitcast i8* %2585 to double*
  %2590 = load double, double* %2589, align 1
  %2591 = getelementptr inbounds i8, i8* %2585, i64 8
  %2592 = bitcast i8* %2591 to i64*
  %2593 = load i64, i64* %2592, align 1
  %2594 = bitcast i8* %2586 to double*
  %2595 = load double, double* %2594, align 1
  %2596 = fmul double %2590, %2595
  %2597 = bitcast i8* %2584 to double*
  store double %2596, double* %2597, align 1, !tbaa !2451
  %2598 = getelementptr inbounds i8, i8* %2584, i64 8
  %2599 = bitcast i8* %2598 to i64*
  store i64 %2593, i64* %2599, align 1, !tbaa !2451
  %2600 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2601 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2602 = load i64, i64* %PC
  %2603 = add i64 %2602, 9
  store i64 %2603, i64* %PC
  %2604 = bitcast i8* %2601 to double*
  %2605 = load double, double* %2604, align 1
  %2606 = getelementptr inbounds i8, i8* %2601, i64 8
  %2607 = bitcast i8* %2606 to i64*
  %2608 = load i64, i64* %2607, align 1
  %2609 = load double, double* bitcast (%one_type* @one to double*)
  %2610 = fadd double %2605, %2609
  %2611 = bitcast i8* %2600 to double*
  store double %2610, double* %2611, align 1, !tbaa !2451
  %2612 = getelementptr inbounds i8, i8* %2600, i64 8
  %2613 = bitcast i8* %2612 to i64*
  store i64 %2608, i64* %2613, align 1, !tbaa !2451
  %2614 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2615 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2616 = bitcast %union.vec128_t* %XMM2 to i8*
  %2617 = load i64, i64* %PC
  %2618 = add i64 %2617, 4
  store i64 %2618, i64* %PC
  %2619 = bitcast i8* %2615 to double*
  %2620 = load double, double* %2619, align 1
  %2621 = getelementptr inbounds i8, i8* %2615, i64 8
  %2622 = bitcast i8* %2621 to i64*
  %2623 = load i64, i64* %2622, align 1
  %2624 = bitcast i8* %2616 to double*
  %2625 = load double, double* %2624, align 1
  %2626 = fmul double %2620, %2625
  %2627 = bitcast i8* %2614 to double*
  store double %2626, double* %2627, align 1, !tbaa !2451
  %2628 = getelementptr inbounds i8, i8* %2614, i64 8
  %2629 = bitcast i8* %2628 to i64*
  store i64 %2623, i64* %2629, align 1, !tbaa !2451
  %2630 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2631 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2632 = bitcast %union.vec128_t* %XMM1 to i8*
  %2633 = load i64, i64* %PC
  %2634 = add i64 %2633, 4
  store i64 %2634, i64* %PC
  %2635 = bitcast i8* %2631 to double*
  %2636 = load double, double* %2635, align 1
  %2637 = getelementptr inbounds i8, i8* %2631, i64 8
  %2638 = bitcast i8* %2637 to i64*
  %2639 = load i64, i64* %2638, align 1
  %2640 = bitcast i8* %2632 to double*
  %2641 = load double, double* %2640, align 1
  %2642 = fadd double %2636, %2641
  %2643 = bitcast i8* %2630 to double*
  store double %2642, double* %2643, align 1, !tbaa !2451
  %2644 = getelementptr inbounds i8, i8* %2630, i64 8
  %2645 = bitcast i8* %2644 to i64*
  store i64 %2639, i64* %2645, align 1, !tbaa !2451
  %2646 = load i64, i64* %RBP
  %2647 = sub i64 %2646, 16
  %2648 = bitcast %union.vec128_t* %XMM0 to i8*
  %2649 = load i64, i64* %PC
  %2650 = add i64 %2649, 5
  store i64 %2650, i64* %PC
  %2651 = bitcast i8* %2648 to double*
  %2652 = load double, double* %2651, align 1
  %2653 = inttoptr i64 %2647 to double*
  store double %2652, double* %2653
  %2654 = load i64, i64* %RBP
  %2655 = sub i64 %2654, 72
  %2656 = load i64, i64* %PC
  %2657 = add i64 %2656, 4
  store i64 %2657, i64* %PC
  %2658 = inttoptr i64 %2655 to i64*
  %2659 = load i64, i64* %2658
  store i64 %2659, i64* %RAX, align 8, !tbaa !2428
  %2660 = load i64, i64* %RAX
  %2661 = load i64, i64* %PC
  %2662 = add i64 %2661, 4
  store i64 %2662, i64* %PC
  %2663 = add i64 1, %2660
  store i64 %2663, i64* %RAX, align 8, !tbaa !2428
  %2664 = icmp ult i64 %2663, %2660
  %2665 = icmp ult i64 %2663, 1
  %2666 = or i1 %2664, %2665
  %2667 = zext i1 %2666 to i8
  %2668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2667, i8* %2668, align 1, !tbaa !2432
  %2669 = trunc i64 %2663 to i32
  %2670 = and i32 %2669, 255
  %2671 = call i32 @llvm.ctpop.i32(i32 %2670) #16
  %2672 = trunc i32 %2671 to i8
  %2673 = and i8 %2672, 1
  %2674 = xor i8 %2673, 1
  %2675 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2674, i8* %2675, align 1, !tbaa !2446
  %2676 = xor i64 1, %2660
  %2677 = xor i64 %2676, %2663
  %2678 = lshr i64 %2677, 4
  %2679 = trunc i64 %2678 to i8
  %2680 = and i8 %2679, 1
  %2681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2680, i8* %2681, align 1, !tbaa !2447
  %2682 = icmp eq i64 %2663, 0
  %2683 = zext i1 %2682 to i8
  %2684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2683, i8* %2684, align 1, !tbaa !2448
  %2685 = lshr i64 %2663, 63
  %2686 = trunc i64 %2685 to i8
  %2687 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2686, i8* %2687, align 1, !tbaa !2449
  %2688 = lshr i64 %2660, 63
  %2689 = xor i64 %2685, %2688
  %2690 = add nuw nsw i64 %2689, %2685
  %2691 = icmp eq i64 %2690, 2
  %2692 = zext i1 %2691 to i8
  %2693 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2692, i8* %2693, align 1, !tbaa !2450
  %2694 = load i64, i64* %RBP
  %2695 = sub i64 %2694, 72
  %2696 = load i64, i64* %RAX
  %2697 = load i64, i64* %PC
  %2698 = add i64 %2697, 4
  store i64 %2698, i64* %PC
  %2699 = inttoptr i64 %2695 to i64*
  store i64 %2696, i64* %2699
  %2700 = load i64, i64* %PC
  %2701 = sub i64 %2700, 310
  %2702 = load i64, i64* %PC
  %2703 = add i64 %2702, 5
  store i64 %2703, i64* %PC
  %2704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2701, i64* %2704, align 8, !tbaa !2428
  br label %block_4018d9

block_401ccb:                                     ; preds = %block_401ce0, %block_401a14
  %MEMORY.3 = phi %struct.Memory* [ %10250, %block_401a14 ], [ %MEMORY.3, %block_401ce0 ]
  %2705 = load i64, i64* %RBP
  %2706 = sub i64 %2705, 72
  %2707 = load i64, i64* %PC
  %2708 = add i64 %2707, 4
  store i64 %2708, i64* %PC
  %2709 = inttoptr i64 %2706 to i64*
  %2710 = load i64, i64* %2709
  store i64 %2710, i64* %RAX, align 8, !tbaa !2428
  %2711 = load i64, i64* %RBP
  %2712 = sub i64 %2711, 80
  %2713 = load i64, i64* %PC
  %2714 = add i64 %2713, 4
  store i64 %2714, i64* %PC
  %2715 = inttoptr i64 %2712 to i64*
  %2716 = load i64, i64* %2715
  store i64 %2716, i64* %RCX, align 8, !tbaa !2428
  %2717 = load i64, i64* %RCX
  %2718 = load i64, i64* %PC
  %2719 = add i64 %2718, 4
  store i64 %2719, i64* %PC
  %2720 = sub i64 %2717, 1
  store i64 %2720, i64* %RCX, align 8, !tbaa !2428
  %2721 = icmp ult i64 %2717, 1
  %2722 = zext i1 %2721 to i8
  %2723 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2722, i8* %2723, align 1, !tbaa !2432
  %2724 = trunc i64 %2720 to i32
  %2725 = and i32 %2724, 255
  %2726 = call i32 @llvm.ctpop.i32(i32 %2725) #16
  %2727 = trunc i32 %2726 to i8
  %2728 = and i8 %2727, 1
  %2729 = xor i8 %2728, 1
  %2730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2729, i8* %2730, align 1, !tbaa !2446
  %2731 = xor i64 1, %2717
  %2732 = xor i64 %2731, %2720
  %2733 = lshr i64 %2732, 4
  %2734 = trunc i64 %2733 to i8
  %2735 = and i8 %2734, 1
  %2736 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2735, i8* %2736, align 1, !tbaa !2447
  %2737 = icmp eq i64 %2720, 0
  %2738 = zext i1 %2737 to i8
  %2739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2738, i8* %2739, align 1, !tbaa !2448
  %2740 = lshr i64 %2720, 63
  %2741 = trunc i64 %2740 to i8
  %2742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2741, i8* %2742, align 1, !tbaa !2449
  %2743 = lshr i64 %2717, 63
  %2744 = xor i64 %2740, %2743
  %2745 = add nuw nsw i64 %2744, %2743
  %2746 = icmp eq i64 %2745, 2
  %2747 = zext i1 %2746 to i8
  %2748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2747, i8* %2748, align 1, !tbaa !2450
  %2749 = load i64, i64* %RAX
  %2750 = load i64, i64* %RCX
  %2751 = load i64, i64* %PC
  %2752 = add i64 %2751, 3
  store i64 %2752, i64* %PC
  %2753 = sub i64 %2749, %2750
  %2754 = icmp ult i64 %2749, %2750
  %2755 = zext i1 %2754 to i8
  %2756 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2755, i8* %2756, align 1, !tbaa !2432
  %2757 = trunc i64 %2753 to i32
  %2758 = and i32 %2757, 255
  %2759 = call i32 @llvm.ctpop.i32(i32 %2758) #16
  %2760 = trunc i32 %2759 to i8
  %2761 = and i8 %2760, 1
  %2762 = xor i8 %2761, 1
  %2763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2762, i8* %2763, align 1, !tbaa !2446
  %2764 = xor i64 %2750, %2749
  %2765 = xor i64 %2764, %2753
  %2766 = lshr i64 %2765, 4
  %2767 = trunc i64 %2766 to i8
  %2768 = and i8 %2767, 1
  %2769 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2768, i8* %2769, align 1, !tbaa !2447
  %2770 = icmp eq i64 %2753, 0
  %2771 = zext i1 %2770 to i8
  %2772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2771, i8* %2772, align 1, !tbaa !2448
  %2773 = lshr i64 %2753, 63
  %2774 = trunc i64 %2773 to i8
  %2775 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2774, i8* %2775, align 1, !tbaa !2449
  %2776 = lshr i64 %2749, 63
  %2777 = lshr i64 %2750, 63
  %2778 = xor i64 %2777, %2776
  %2779 = xor i64 %2773, %2776
  %2780 = add nuw nsw i64 %2779, %2778
  %2781 = icmp eq i64 %2780, 2
  %2782 = zext i1 %2781 to i8
  %2783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2782, i8* %2783, align 1, !tbaa !2450
  %2784 = load i64, i64* %PC
  %2785 = add i64 %2784, 141
  %2786 = load i64, i64* %PC
  %2787 = add i64 %2786, 6
  %2788 = load i64, i64* %PC
  %2789 = add i64 %2788, 6
  store i64 %2789, i64* %PC
  %2790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %2791 = load i8, i8* %2790, align 1, !tbaa !2448
  %2792 = icmp eq i8 %2791, 0
  %2793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %2794 = load i8, i8* %2793, align 1, !tbaa !2449
  %2795 = icmp ne i8 %2794, 0
  %2796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %2797 = load i8, i8* %2796, align 1, !tbaa !2450
  %2798 = icmp ne i8 %2797, 0
  %2799 = xor i1 %2795, %2798
  %2800 = xor i1 %2799, true
  %2801 = and i1 %2792, %2800
  %2802 = zext i1 %2801 to i8
  store i8 %2802, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %2803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2804 = select i1 %2801, i64 %2785, i64 %2787
  store i64 %2804, i64* %2803, align 8, !tbaa !2428
  %2805 = load i8, i8* %BRANCH_TAKEN
  %2806 = icmp eq i8 %2805, 1
  br i1 %2806, label %block_401d67, label %block_401ce0

block_4020c8:                                     ; preds = %block_401f8c
  %2807 = load i64, i64* %PC
  %2808 = add i64 %2807, 10
  store i64 %2808, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %2809 = load i64, i64* %PC
  %2810 = add i64 %2809, 1310
  %2811 = load i64, i64* %PC
  %2812 = add i64 %2811, 5
  %2813 = load i64, i64* %PC
  %2814 = add i64 %2813, 5
  store i64 %2814, i64* %PC
  %2815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2816 = load i64, i64* %2815, align 8, !tbaa !2428
  %2817 = add i64 %2816, -8
  %2818 = inttoptr i64 %2817 to i64*
  store i64 %2812, i64* %2818
  store i64 %2817, i64* %2815, align 8, !tbaa !2428
  %2819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2810, i64* %2819, align 8, !tbaa !2428
  %2820 = load i64, i64* %PC
  %2821 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %2820, %struct.Memory* %MEMORY.8)
  %2822 = load i64, i64* %PC
  %2823 = add i64 %2822, 10
  store i64 %2823, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 642), i64* %RDI, align 8, !tbaa !2428
  %2824 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2825 = load i64, i64* %PC
  %2826 = add i64 %2825, 8
  store i64 %2826, i64* %PC
  %2827 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 72) to double*)
  %2828 = bitcast i8* %2824 to double*
  store double %2827, double* %2828, align 1, !tbaa !2451
  %2829 = getelementptr inbounds i8, i8* %2824, i64 8
  %2830 = bitcast i8* %2829 to double*
  store double 0.000000e+00, double* %2830, align 1, !tbaa !2451
  %2831 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2832 = load i64, i64* %PC
  %2833 = add i64 %2832, 8
  store i64 %2833, i64* %PC
  %2834 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 224) to double*)
  %2835 = bitcast i8* %2831 to double*
  store double %2834, double* %2835, align 1, !tbaa !2451
  %2836 = getelementptr inbounds i8, i8* %2831, i64 8
  %2837 = bitcast i8* %2836 to double*
  store double 0.000000e+00, double* %2837, align 1, !tbaa !2451
  %2838 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2839 = load i64, i64* %PC
  %2840 = add i64 %2839, 8
  store i64 %2840, i64* %PC
  %2841 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 232) to double*)
  %2842 = bitcast i8* %2838 to double*
  store double %2841, double* %2842, align 1, !tbaa !2451
  %2843 = getelementptr inbounds i8, i8* %2838, i64 8
  %2844 = bitcast i8* %2843 to double*
  store double 0.000000e+00, double* %2844, align 1, !tbaa !2451
  %2845 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2846 = load i64, i64* %PC
  %2847 = add i64 %2846, 9
  store i64 %2847, i64* %PC
  %2848 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %2849 = bitcast i8* %2845 to double*
  store double %2848, double* %2849, align 1, !tbaa !2451
  %2850 = getelementptr inbounds i8, i8* %2845, i64 8
  %2851 = bitcast i8* %2850 to double*
  store double 0.000000e+00, double* %2851, align 1, !tbaa !2451
  %2852 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2853 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2854 = load i64, i64* %PC
  %2855 = add i64 %2854, 9
  store i64 %2855, i64* %PC
  %2856 = bitcast i8* %2853 to double*
  %2857 = load double, double* %2856, align 1
  %2858 = getelementptr inbounds i8, i8* %2853, i64 8
  %2859 = bitcast i8* %2858 to i64*
  %2860 = load i64, i64* %2859, align 1
  %2861 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %2862 = fmul double %2857, %2861
  %2863 = bitcast i8* %2852 to double*
  store double %2862, double* %2863, align 1, !tbaa !2451
  %2864 = getelementptr inbounds i8, i8* %2852, i64 8
  %2865 = bitcast i8* %2864 to i64*
  store i64 %2860, i64* %2865, align 1, !tbaa !2451
  %2866 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2867 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2868 = load i64, i64* %PC
  %2869 = add i64 %2868, 9
  store i64 %2869, i64* %PC
  %2870 = bitcast i8* %2867 to double*
  %2871 = load double, double* %2870, align 1
  %2872 = getelementptr inbounds i8, i8* %2867, i64 8
  %2873 = bitcast i8* %2872 to i64*
  %2874 = load i64, i64* %2873, align 1
  %2875 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %2876 = fsub double %2871, %2875
  %2877 = bitcast i8* %2866 to double*
  store double %2876, double* %2877, align 1, !tbaa !2451
  %2878 = getelementptr inbounds i8, i8* %2866, i64 8
  %2879 = bitcast i8* %2878 to i64*
  store i64 %2874, i64* %2879, align 1, !tbaa !2451
  %2880 = bitcast %union.vec128_t* %XMM3 to i8*
  %2881 = load i64, i64* %PC
  %2882 = add i64 %2881, 9
  store i64 %2882, i64* %PC
  %2883 = bitcast i8* %2880 to double*
  %2884 = load double, double* %2883, align 1
  store double %2884, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 192) to double*)
  %2885 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2886 = load i64, i64* %PC
  %2887 = add i64 %2886, 9
  store i64 %2887, i64* %PC
  %2888 = load double, double* bitcast (%piref_type* @piref to double*)
  %2889 = bitcast i8* %2885 to double*
  store double %2888, double* %2889, align 1, !tbaa !2451
  %2890 = getelementptr inbounds i8, i8* %2885, i64 8
  %2891 = bitcast i8* %2890 to double*
  store double 0.000000e+00, double* %2891, align 1, !tbaa !2451
  %2892 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2893 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2894 = load i64, i64* %PC
  %2895 = add i64 %2894, 9
  store i64 %2895, i64* %PC
  %2896 = bitcast i8* %2893 to double*
  %2897 = load double, double* %2896, align 1
  %2898 = getelementptr inbounds i8, i8* %2893, i64 8
  %2899 = bitcast i8* %2898 to i64*
  %2900 = load i64, i64* %2899, align 1
  %2901 = load double, double* bitcast (%three_type* @three to double*)
  %2902 = fdiv double %2897, %2901
  %2903 = bitcast i8* %2892 to double*
  store double %2902, double* %2903, align 1, !tbaa !2451
  %2904 = getelementptr inbounds i8, i8* %2892, i64 8
  %2905 = bitcast i8* %2904 to i64*
  store i64 %2900, i64* %2905, align 1, !tbaa !2451
  %2906 = load i64, i64* %RBP
  %2907 = sub i64 %2906, 24
  %2908 = bitcast %union.vec128_t* %XMM3 to i8*
  %2909 = load i64, i64* %PC
  %2910 = add i64 %2909, 5
  store i64 %2910, i64* %PC
  %2911 = bitcast i8* %2908 to double*
  %2912 = load double, double* %2911, align 1
  %2913 = inttoptr i64 %2907 to double*
  store double %2912, double* %2913
  %2914 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2915 = load i64, i64* %RBP
  %2916 = sub i64 %2915, 24
  %2917 = load i64, i64* %PC
  %2918 = add i64 %2917, 5
  store i64 %2918, i64* %PC
  %2919 = inttoptr i64 %2916 to double*
  %2920 = load double, double* %2919
  %2921 = bitcast i8* %2914 to double*
  store double %2920, double* %2921, align 1, !tbaa !2451
  %2922 = getelementptr inbounds i8, i8* %2914, i64 8
  %2923 = bitcast i8* %2922 to double*
  store double 0.000000e+00, double* %2923, align 1, !tbaa !2451
  %2924 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2925 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2926 = load i64, i64* %RBP
  %2927 = sub i64 %2926, 24
  %2928 = load i64, i64* %PC
  %2929 = add i64 %2928, 5
  store i64 %2929, i64* %PC
  %2930 = bitcast i8* %2925 to double*
  %2931 = load double, double* %2930, align 1
  %2932 = getelementptr inbounds i8, i8* %2925, i64 8
  %2933 = bitcast i8* %2932 to i64*
  %2934 = load i64, i64* %2933, align 1
  %2935 = inttoptr i64 %2927 to double*
  %2936 = load double, double* %2935
  %2937 = fmul double %2931, %2936
  %2938 = bitcast i8* %2924 to double*
  store double %2937, double* %2938, align 1, !tbaa !2451
  %2939 = getelementptr inbounds i8, i8* %2924, i64 8
  %2940 = bitcast i8* %2939 to i64*
  store i64 %2934, i64* %2940, align 1, !tbaa !2451
  %2941 = load i64, i64* %RBP
  %2942 = sub i64 %2941, 40
  %2943 = bitcast %union.vec128_t* %XMM3 to i8*
  %2944 = load i64, i64* %PC
  %2945 = add i64 %2944, 5
  store i64 %2945, i64* %PC
  %2946 = bitcast i8* %2943 to double*
  %2947 = load double, double* %2946, align 1
  %2948 = inttoptr i64 %2942 to double*
  store double %2947, double* %2948
  %2949 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2950 = load i64, i64* %RBP
  %2951 = sub i64 %2950, 24
  %2952 = load i64, i64* %PC
  %2953 = add i64 %2952, 5
  store i64 %2953, i64* %PC
  %2954 = inttoptr i64 %2951 to double*
  %2955 = load double, double* %2954
  %2956 = bitcast i8* %2949 to double*
  store double %2955, double* %2956, align 1, !tbaa !2451
  %2957 = getelementptr inbounds i8, i8* %2949, i64 8
  %2958 = bitcast i8* %2957 to double*
  store double 0.000000e+00, double* %2958, align 1, !tbaa !2451
  %2959 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2960 = load i64, i64* %PC
  %2961 = add i64 %2960, 9
  store i64 %2961, i64* %PC
  %2962 = load double, double* bitcast (%A6_type* @A6 to double*)
  %2963 = bitcast i8* %2959 to double*
  store double %2962, double* %2963, align 1, !tbaa !2451
  %2964 = getelementptr inbounds i8, i8* %2959, i64 8
  %2965 = bitcast i8* %2964 to double*
  store double 0.000000e+00, double* %2965, align 1, !tbaa !2451
  %2966 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2967 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2968 = load i64, i64* %RBP
  %2969 = sub i64 %2968, 40
  %2970 = load i64, i64* %PC
  %2971 = add i64 %2970, 5
  store i64 %2971, i64* %PC
  %2972 = bitcast i8* %2967 to double*
  %2973 = load double, double* %2972, align 1
  %2974 = getelementptr inbounds i8, i8* %2967, i64 8
  %2975 = bitcast i8* %2974 to i64*
  %2976 = load i64, i64* %2975, align 1
  %2977 = inttoptr i64 %2969 to double*
  %2978 = load double, double* %2977
  %2979 = fmul double %2973, %2978
  %2980 = bitcast i8* %2966 to double*
  store double %2979, double* %2980, align 1, !tbaa !2451
  %2981 = getelementptr inbounds i8, i8* %2966, i64 8
  %2982 = bitcast i8* %2981 to i64*
  store i64 %2976, i64* %2982, align 1, !tbaa !2451
  %2983 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2984 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2985 = load i64, i64* %PC
  %2986 = add i64 %2985, 9
  store i64 %2986, i64* %PC
  %2987 = bitcast i8* %2984 to double*
  %2988 = load double, double* %2987, align 1
  %2989 = getelementptr inbounds i8, i8* %2984, i64 8
  %2990 = bitcast i8* %2989 to i64*
  %2991 = load i64, i64* %2990, align 1
  %2992 = load double, double* bitcast (%A5_type* @A5 to double*)
  %2993 = fadd double %2988, %2992
  %2994 = bitcast i8* %2983 to double*
  store double %2993, double* %2994, align 1, !tbaa !2451
  %2995 = getelementptr inbounds i8, i8* %2983, i64 8
  %2996 = bitcast i8* %2995 to i64*
  store i64 %2991, i64* %2996, align 1, !tbaa !2451
  %2997 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2998 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2999 = load i64, i64* %RBP
  %3000 = sub i64 %2999, 40
  %3001 = load i64, i64* %PC
  %3002 = add i64 %3001, 5
  store i64 %3002, i64* %PC
  %3003 = bitcast i8* %2998 to double*
  %3004 = load double, double* %3003, align 1
  %3005 = getelementptr inbounds i8, i8* %2998, i64 8
  %3006 = bitcast i8* %3005 to i64*
  %3007 = load i64, i64* %3006, align 1
  %3008 = inttoptr i64 %3000 to double*
  %3009 = load double, double* %3008
  %3010 = fmul double %3004, %3009
  %3011 = bitcast i8* %2997 to double*
  store double %3010, double* %3011, align 1, !tbaa !2451
  %3012 = getelementptr inbounds i8, i8* %2997, i64 8
  %3013 = bitcast i8* %3012 to i64*
  store i64 %3007, i64* %3013, align 1, !tbaa !2451
  %3014 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3015 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3016 = load i64, i64* %PC
  %3017 = add i64 %3016, 9
  store i64 %3017, i64* %PC
  %3018 = bitcast i8* %3015 to double*
  %3019 = load double, double* %3018, align 1
  %3020 = getelementptr inbounds i8, i8* %3015, i64 8
  %3021 = bitcast i8* %3020 to i64*
  %3022 = load i64, i64* %3021, align 1
  %3023 = load double, double* bitcast (%A4_type* @A4 to double*)
  %3024 = fadd double %3019, %3023
  %3025 = bitcast i8* %3014 to double*
  store double %3024, double* %3025, align 1, !tbaa !2451
  %3026 = getelementptr inbounds i8, i8* %3014, i64 8
  %3027 = bitcast i8* %3026 to i64*
  store i64 %3022, i64* %3027, align 1, !tbaa !2451
  %3028 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3029 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3030 = load i64, i64* %RBP
  %3031 = sub i64 %3030, 40
  %3032 = load i64, i64* %PC
  %3033 = add i64 %3032, 5
  store i64 %3033, i64* %PC
  %3034 = bitcast i8* %3029 to double*
  %3035 = load double, double* %3034, align 1
  %3036 = getelementptr inbounds i8, i8* %3029, i64 8
  %3037 = bitcast i8* %3036 to i64*
  %3038 = load i64, i64* %3037, align 1
  %3039 = inttoptr i64 %3031 to double*
  %3040 = load double, double* %3039
  %3041 = fmul double %3035, %3040
  %3042 = bitcast i8* %3028 to double*
  store double %3041, double* %3042, align 1, !tbaa !2451
  %3043 = getelementptr inbounds i8, i8* %3028, i64 8
  %3044 = bitcast i8* %3043 to i64*
  store i64 %3038, i64* %3044, align 1, !tbaa !2451
  %3045 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3046 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3047 = load i64, i64* %PC
  %3048 = add i64 %3047, 9
  store i64 %3048, i64* %PC
  %3049 = bitcast i8* %3046 to double*
  %3050 = load double, double* %3049, align 1
  %3051 = getelementptr inbounds i8, i8* %3046, i64 8
  %3052 = bitcast i8* %3051 to i64*
  %3053 = load i64, i64* %3052, align 1
  %3054 = load double, double* bitcast (%A3_type* @A3 to double*)
  %3055 = fadd double %3050, %3054
  %3056 = bitcast i8* %3045 to double*
  store double %3055, double* %3056, align 1, !tbaa !2451
  %3057 = getelementptr inbounds i8, i8* %3045, i64 8
  %3058 = bitcast i8* %3057 to i64*
  store i64 %3053, i64* %3058, align 1, !tbaa !2451
  %3059 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3060 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3061 = load i64, i64* %RBP
  %3062 = sub i64 %3061, 40
  %3063 = load i64, i64* %PC
  %3064 = add i64 %3063, 5
  store i64 %3064, i64* %PC
  %3065 = bitcast i8* %3060 to double*
  %3066 = load double, double* %3065, align 1
  %3067 = getelementptr inbounds i8, i8* %3060, i64 8
  %3068 = bitcast i8* %3067 to i64*
  %3069 = load i64, i64* %3068, align 1
  %3070 = inttoptr i64 %3062 to double*
  %3071 = load double, double* %3070
  %3072 = fmul double %3066, %3071
  %3073 = bitcast i8* %3059 to double*
  store double %3072, double* %3073, align 1, !tbaa !2451
  %3074 = getelementptr inbounds i8, i8* %3059, i64 8
  %3075 = bitcast i8* %3074 to i64*
  store i64 %3069, i64* %3075, align 1, !tbaa !2451
  %3076 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3077 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3078 = load i64, i64* %PC
  %3079 = add i64 %3078, 9
  store i64 %3079, i64* %PC
  %3080 = bitcast i8* %3077 to double*
  %3081 = load double, double* %3080, align 1
  %3082 = getelementptr inbounds i8, i8* %3077, i64 8
  %3083 = bitcast i8* %3082 to i64*
  %3084 = load i64, i64* %3083, align 1
  %3085 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %3086 = fadd double %3081, %3085
  %3087 = bitcast i8* %3076 to double*
  store double %3086, double* %3087, align 1, !tbaa !2451
  %3088 = getelementptr inbounds i8, i8* %3076, i64 8
  %3089 = bitcast i8* %3088 to i64*
  store i64 %3084, i64* %3089, align 1, !tbaa !2451
  %3090 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3091 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3092 = load i64, i64* %RBP
  %3093 = sub i64 %3092, 40
  %3094 = load i64, i64* %PC
  %3095 = add i64 %3094, 5
  store i64 %3095, i64* %PC
  %3096 = bitcast i8* %3091 to double*
  %3097 = load double, double* %3096, align 1
  %3098 = getelementptr inbounds i8, i8* %3091, i64 8
  %3099 = bitcast i8* %3098 to i64*
  %3100 = load i64, i64* %3099, align 1
  %3101 = inttoptr i64 %3093 to double*
  %3102 = load double, double* %3101
  %3103 = fmul double %3097, %3102
  %3104 = bitcast i8* %3090 to double*
  store double %3103, double* %3104, align 1, !tbaa !2451
  %3105 = getelementptr inbounds i8, i8* %3090, i64 8
  %3106 = bitcast i8* %3105 to i64*
  store i64 %3100, i64* %3106, align 1, !tbaa !2451
  %3107 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3108 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3109 = load i64, i64* %PC
  %3110 = add i64 %3109, 9
  store i64 %3110, i64* %PC
  %3111 = bitcast i8* %3108 to double*
  %3112 = load double, double* %3111, align 1
  %3113 = getelementptr inbounds i8, i8* %3108, i64 8
  %3114 = bitcast i8* %3113 to i64*
  %3115 = load i64, i64* %3114, align 1
  %3116 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %3117 = fadd double %3112, %3116
  %3118 = bitcast i8* %3107 to double*
  store double %3117, double* %3118, align 1, !tbaa !2451
  %3119 = getelementptr inbounds i8, i8* %3107, i64 8
  %3120 = bitcast i8* %3119 to i64*
  store i64 %3115, i64* %3120, align 1, !tbaa !2451
  %3121 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3122 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3123 = load i64, i64* %RBP
  %3124 = sub i64 %3123, 40
  %3125 = load i64, i64* %PC
  %3126 = add i64 %3125, 5
  store i64 %3126, i64* %PC
  %3127 = bitcast i8* %3122 to double*
  %3128 = load double, double* %3127, align 1
  %3129 = getelementptr inbounds i8, i8* %3122, i64 8
  %3130 = bitcast i8* %3129 to i64*
  %3131 = load i64, i64* %3130, align 1
  %3132 = inttoptr i64 %3124 to double*
  %3133 = load double, double* %3132
  %3134 = fmul double %3128, %3133
  %3135 = bitcast i8* %3121 to double*
  store double %3134, double* %3135, align 1, !tbaa !2451
  %3136 = getelementptr inbounds i8, i8* %3121, i64 8
  %3137 = bitcast i8* %3136 to i64*
  store i64 %3131, i64* %3137, align 1, !tbaa !2451
  %3138 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3139 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3140 = load i64, i64* %PC
  %3141 = add i64 %3140, 9
  store i64 %3141, i64* %PC
  %3142 = bitcast i8* %3139 to double*
  %3143 = load double, double* %3142, align 1
  %3144 = getelementptr inbounds i8, i8* %3139, i64 8
  %3145 = bitcast i8* %3144 to i64*
  %3146 = load i64, i64* %3145, align 1
  %3147 = load double, double* bitcast (%one_type* @one to double*)
  %3148 = fadd double %3143, %3147
  %3149 = bitcast i8* %3138 to double*
  store double %3148, double* %3149, align 1, !tbaa !2451
  %3150 = getelementptr inbounds i8, i8* %3138, i64 8
  %3151 = bitcast i8* %3150 to i64*
  store i64 %3146, i64* %3151, align 1, !tbaa !2451
  %3152 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3153 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3154 = bitcast %union.vec128_t* %XMM4 to i8*
  %3155 = load i64, i64* %PC
  %3156 = add i64 %3155, 4
  store i64 %3156, i64* %PC
  %3157 = bitcast i8* %3153 to double*
  %3158 = load double, double* %3157, align 1
  %3159 = getelementptr inbounds i8, i8* %3153, i64 8
  %3160 = bitcast i8* %3159 to i64*
  %3161 = load i64, i64* %3160, align 1
  %3162 = bitcast i8* %3154 to double*
  %3163 = load double, double* %3162, align 1
  %3164 = fmul double %3158, %3163
  %3165 = bitcast i8* %3152 to double*
  store double %3164, double* %3165, align 1, !tbaa !2451
  %3166 = getelementptr inbounds i8, i8* %3152, i64 8
  %3167 = bitcast i8* %3166 to i64*
  store i64 %3161, i64* %3167, align 1, !tbaa !2451
  %3168 = bitcast %union.vec128_t* %XMM3 to i8*
  %3169 = load i64, i64* %PC
  %3170 = add i64 %3169, 9
  store i64 %3170, i64* %PC
  %3171 = bitcast i8* %3168 to double*
  %3172 = load double, double* %3171, align 1
  store double %3172, double* bitcast (%sa_type* @sa to double*)
  %3173 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3174 = load i64, i64* %RBP
  %3175 = sub i64 %3174, 40
  %3176 = load i64, i64* %PC
  %3177 = add i64 %3176, 5
  store i64 %3177, i64* %PC
  %3178 = inttoptr i64 %3175 to double*
  %3179 = load double, double* %3178
  %3180 = bitcast i8* %3173 to double*
  store double %3179, double* %3180, align 1, !tbaa !2451
  %3181 = getelementptr inbounds i8, i8* %3173, i64 8
  %3182 = bitcast i8* %3181 to double*
  store double 0.000000e+00, double* %3182, align 1, !tbaa !2451
  %3183 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3184 = load i64, i64* %RBP
  %3185 = sub i64 %3184, 40
  %3186 = load i64, i64* %PC
  %3187 = add i64 %3186, 5
  store i64 %3187, i64* %PC
  %3188 = inttoptr i64 %3185 to double*
  %3189 = load double, double* %3188
  %3190 = bitcast i8* %3183 to double*
  store double %3189, double* %3190, align 1, !tbaa !2451
  %3191 = getelementptr inbounds i8, i8* %3183, i64 8
  %3192 = bitcast i8* %3191 to double*
  store double 0.000000e+00, double* %3192, align 1, !tbaa !2451
  %3193 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %3194 = load i64, i64* %RBP
  %3195 = sub i64 %3194, 40
  %3196 = load i64, i64* %PC
  %3197 = add i64 %3196, 5
  store i64 %3197, i64* %PC
  %3198 = inttoptr i64 %3195 to double*
  %3199 = load double, double* %3198
  %3200 = bitcast i8* %3193 to double*
  store double %3199, double* %3200, align 1, !tbaa !2451
  %3201 = getelementptr inbounds i8, i8* %3193, i64 8
  %3202 = bitcast i8* %3201 to double*
  store double 0.000000e+00, double* %3202, align 1, !tbaa !2451
  %3203 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %3204 = load i64, i64* %RBP
  %3205 = sub i64 %3204, 40
  %3206 = load i64, i64* %PC
  %3207 = add i64 %3206, 5
  store i64 %3207, i64* %PC
  %3208 = inttoptr i64 %3205 to double*
  %3209 = load double, double* %3208
  %3210 = bitcast i8* %3203 to double*
  store double %3209, double* %3210, align 1, !tbaa !2451
  %3211 = getelementptr inbounds i8, i8* %3203, i64 8
  %3212 = bitcast i8* %3211 to double*
  store double 0.000000e+00, double* %3212, align 1, !tbaa !2451
  %3213 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %3214 = load i64, i64* %RBP
  %3215 = sub i64 %3214, 40
  %3216 = load i64, i64* %PC
  %3217 = add i64 %3216, 5
  store i64 %3217, i64* %PC
  %3218 = inttoptr i64 %3215 to double*
  %3219 = load double, double* %3218
  %3220 = bitcast i8* %3213 to double*
  store double %3219, double* %3220, align 1, !tbaa !2451
  %3221 = getelementptr inbounds i8, i8* %3213, i64 8
  %3222 = bitcast i8* %3221 to double*
  store double 0.000000e+00, double* %3222, align 1, !tbaa !2451
  %3223 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %3224 = load i64, i64* %PC
  %3225 = add i64 %3224, 10
  store i64 %3225, i64* %PC
  %3226 = load double, double* bitcast (%B6_type* @B6 to double*)
  %3227 = bitcast i8* %3223 to double*
  store double %3226, double* %3227, align 1, !tbaa !2451
  %3228 = getelementptr inbounds i8, i8* %3223, i64 8
  %3229 = bitcast i8* %3228 to double*
  store double 0.000000e+00, double* %3229, align 1, !tbaa !2451
  %3230 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %3231 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %3232 = load i64, i64* %RBP
  %3233 = sub i64 %3232, 40
  %3234 = load i64, i64* %PC
  %3235 = add i64 %3234, 6
  store i64 %3235, i64* %PC
  %3236 = bitcast i8* %3231 to double*
  %3237 = load double, double* %3236, align 1
  %3238 = getelementptr inbounds i8, i8* %3231, i64 8
  %3239 = bitcast i8* %3238 to i64*
  %3240 = load i64, i64* %3239, align 1
  %3241 = inttoptr i64 %3233 to double*
  %3242 = load double, double* %3241
  %3243 = fmul double %3237, %3242
  %3244 = bitcast i8* %3230 to double*
  store double %3243, double* %3244, align 1, !tbaa !2451
  %3245 = getelementptr inbounds i8, i8* %3230, i64 8
  %3246 = bitcast i8* %3245 to i64*
  store i64 %3240, i64* %3246, align 1, !tbaa !2451
  %3247 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %3248 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %3249 = load i64, i64* %PC
  %3250 = add i64 %3249, 10
  store i64 %3250, i64* %PC
  %3251 = bitcast i8* %3248 to double*
  %3252 = load double, double* %3251, align 1
  %3253 = getelementptr inbounds i8, i8* %3248, i64 8
  %3254 = bitcast i8* %3253 to i64*
  %3255 = load i64, i64* %3254, align 1
  %3256 = load double, double* bitcast (%B5_type* @B5 to double*)
  %3257 = fadd double %3252, %3256
  %3258 = bitcast i8* %3247 to double*
  store double %3257, double* %3258, align 1, !tbaa !2451
  %3259 = getelementptr inbounds i8, i8* %3247, i64 8
  %3260 = bitcast i8* %3259 to i64*
  store i64 %3255, i64* %3260, align 1, !tbaa !2451
  %3261 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %3262 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %3263 = bitcast %union.vec128_t* %XMM8 to i8*
  %3264 = load i64, i64* %PC
  %3265 = add i64 %3264, 5
  store i64 %3265, i64* %PC
  %3266 = bitcast i8* %3262 to double*
  %3267 = load double, double* %3266, align 1
  %3268 = getelementptr inbounds i8, i8* %3262, i64 8
  %3269 = bitcast i8* %3268 to i64*
  %3270 = load i64, i64* %3269, align 1
  %3271 = bitcast i8* %3263 to double*
  %3272 = load double, double* %3271, align 1
  %3273 = fmul double %3267, %3272
  %3274 = bitcast i8* %3261 to double*
  store double %3273, double* %3274, align 1, !tbaa !2451
  %3275 = getelementptr inbounds i8, i8* %3261, i64 8
  %3276 = bitcast i8* %3275 to i64*
  store i64 %3270, i64* %3276, align 1, !tbaa !2451
  %3277 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %3278 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %3279 = load i64, i64* %PC
  %3280 = add i64 %3279, 9
  store i64 %3280, i64* %PC
  %3281 = bitcast i8* %3278 to double*
  %3282 = load double, double* %3281, align 1
  %3283 = getelementptr inbounds i8, i8* %3278, i64 8
  %3284 = bitcast i8* %3283 to i64*
  %3285 = load i64, i64* %3284, align 1
  %3286 = load double, double* bitcast (%B4_type* @B4 to double*)
  %3287 = fadd double %3282, %3286
  %3288 = bitcast i8* %3277 to double*
  store double %3287, double* %3288, align 1, !tbaa !2451
  %3289 = getelementptr inbounds i8, i8* %3277, i64 8
  %3290 = bitcast i8* %3289 to i64*
  store i64 %3285, i64* %3290, align 1, !tbaa !2451
  %3291 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %3292 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %3293 = bitcast %union.vec128_t* %XMM7 to i8*
  %3294 = load i64, i64* %PC
  %3295 = add i64 %3294, 4
  store i64 %3295, i64* %PC
  %3296 = bitcast i8* %3292 to double*
  %3297 = load double, double* %3296, align 1
  %3298 = getelementptr inbounds i8, i8* %3292, i64 8
  %3299 = bitcast i8* %3298 to i64*
  %3300 = load i64, i64* %3299, align 1
  %3301 = bitcast i8* %3293 to double*
  %3302 = load double, double* %3301, align 1
  %3303 = fmul double %3297, %3302
  %3304 = bitcast i8* %3291 to double*
  store double %3303, double* %3304, align 1, !tbaa !2451
  %3305 = getelementptr inbounds i8, i8* %3291, i64 8
  %3306 = bitcast i8* %3305 to i64*
  store i64 %3300, i64* %3306, align 1, !tbaa !2451
  %3307 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %3308 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %3309 = load i64, i64* %PC
  %3310 = add i64 %3309, 9
  store i64 %3310, i64* %PC
  %3311 = bitcast i8* %3308 to double*
  %3312 = load double, double* %3311, align 1
  %3313 = getelementptr inbounds i8, i8* %3308, i64 8
  %3314 = bitcast i8* %3313 to i64*
  %3315 = load i64, i64* %3314, align 1
  %3316 = load double, double* bitcast (%B3_type* @B3 to double*)
  %3317 = fadd double %3312, %3316
  %3318 = bitcast i8* %3307 to double*
  store double %3317, double* %3318, align 1, !tbaa !2451
  %3319 = getelementptr inbounds i8, i8* %3307, i64 8
  %3320 = bitcast i8* %3319 to i64*
  store i64 %3315, i64* %3320, align 1, !tbaa !2451
  %3321 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %3322 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %3323 = bitcast %union.vec128_t* %XMM6 to i8*
  %3324 = load i64, i64* %PC
  %3325 = add i64 %3324, 4
  store i64 %3325, i64* %PC
  %3326 = bitcast i8* %3322 to double*
  %3327 = load double, double* %3326, align 1
  %3328 = getelementptr inbounds i8, i8* %3322, i64 8
  %3329 = bitcast i8* %3328 to i64*
  %3330 = load i64, i64* %3329, align 1
  %3331 = bitcast i8* %3323 to double*
  %3332 = load double, double* %3331, align 1
  %3333 = fmul double %3327, %3332
  %3334 = bitcast i8* %3321 to double*
  store double %3333, double* %3334, align 1, !tbaa !2451
  %3335 = getelementptr inbounds i8, i8* %3321, i64 8
  %3336 = bitcast i8* %3335 to i64*
  store i64 %3330, i64* %3336, align 1, !tbaa !2451
  %3337 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %3338 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %3339 = load i64, i64* %PC
  %3340 = add i64 %3339, 9
  store i64 %3340, i64* %PC
  %3341 = bitcast i8* %3338 to double*
  %3342 = load double, double* %3341, align 1
  %3343 = getelementptr inbounds i8, i8* %3338, i64 8
  %3344 = bitcast i8* %3343 to i64*
  %3345 = load i64, i64* %3344, align 1
  %3346 = load double, double* bitcast (%B2_type* @B2 to double*)
  %3347 = fadd double %3342, %3346
  %3348 = bitcast i8* %3337 to double*
  store double %3347, double* %3348, align 1, !tbaa !2451
  %3349 = getelementptr inbounds i8, i8* %3337, i64 8
  %3350 = bitcast i8* %3349 to i64*
  store i64 %3345, i64* %3350, align 1, !tbaa !2451
  %3351 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3352 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3353 = bitcast %union.vec128_t* %XMM5 to i8*
  %3354 = load i64, i64* %PC
  %3355 = add i64 %3354, 4
  store i64 %3355, i64* %PC
  %3356 = bitcast i8* %3352 to double*
  %3357 = load double, double* %3356, align 1
  %3358 = getelementptr inbounds i8, i8* %3352, i64 8
  %3359 = bitcast i8* %3358 to i64*
  %3360 = load i64, i64* %3359, align 1
  %3361 = bitcast i8* %3353 to double*
  %3362 = load double, double* %3361, align 1
  %3363 = fmul double %3357, %3362
  %3364 = bitcast i8* %3351 to double*
  store double %3363, double* %3364, align 1, !tbaa !2451
  %3365 = getelementptr inbounds i8, i8* %3351, i64 8
  %3366 = bitcast i8* %3365 to i64*
  store i64 %3360, i64* %3366, align 1, !tbaa !2451
  %3367 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3368 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3369 = load i64, i64* %PC
  %3370 = add i64 %3369, 9
  store i64 %3370, i64* %PC
  %3371 = bitcast i8* %3368 to double*
  %3372 = load double, double* %3371, align 1
  %3373 = getelementptr inbounds i8, i8* %3368, i64 8
  %3374 = bitcast i8* %3373 to i64*
  %3375 = load i64, i64* %3374, align 1
  %3376 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %3377 = fadd double %3372, %3376
  %3378 = bitcast i8* %3367 to double*
  store double %3377, double* %3378, align 1, !tbaa !2451
  %3379 = getelementptr inbounds i8, i8* %3367, i64 8
  %3380 = bitcast i8* %3379 to i64*
  store i64 %3375, i64* %3380, align 1, !tbaa !2451
  %3381 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3382 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3383 = bitcast %union.vec128_t* %XMM4 to i8*
  %3384 = load i64, i64* %PC
  %3385 = add i64 %3384, 4
  store i64 %3385, i64* %PC
  %3386 = bitcast i8* %3382 to double*
  %3387 = load double, double* %3386, align 1
  %3388 = getelementptr inbounds i8, i8* %3382, i64 8
  %3389 = bitcast i8* %3388 to i64*
  %3390 = load i64, i64* %3389, align 1
  %3391 = bitcast i8* %3383 to double*
  %3392 = load double, double* %3391, align 1
  %3393 = fmul double %3387, %3392
  %3394 = bitcast i8* %3381 to double*
  store double %3393, double* %3394, align 1, !tbaa !2451
  %3395 = getelementptr inbounds i8, i8* %3381, i64 8
  %3396 = bitcast i8* %3395 to i64*
  store i64 %3390, i64* %3396, align 1, !tbaa !2451
  %3397 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3398 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3399 = load i64, i64* %PC
  %3400 = add i64 %3399, 9
  store i64 %3400, i64* %PC
  %3401 = bitcast i8* %3398 to double*
  %3402 = load double, double* %3401, align 1
  %3403 = getelementptr inbounds i8, i8* %3398, i64 8
  %3404 = bitcast i8* %3403 to i64*
  %3405 = load i64, i64* %3404, align 1
  %3406 = load double, double* bitcast (%one_type* @one to double*)
  %3407 = fadd double %3402, %3406
  %3408 = bitcast i8* %3397 to double*
  store double %3407, double* %3408, align 1, !tbaa !2451
  %3409 = getelementptr inbounds i8, i8* %3397, i64 8
  %3410 = bitcast i8* %3409 to i64*
  store i64 %3405, i64* %3410, align 1, !tbaa !2451
  %3411 = bitcast %union.vec128_t* %XMM3 to i8*
  %3412 = load i64, i64* %PC
  %3413 = add i64 %3412, 9
  store i64 %3413, i64* %PC
  %3414 = bitcast i8* %3411 to double*
  %3415 = load double, double* %3414, align 1
  store double %3415, double* bitcast (%sb_type* @sb to double*)
  %3416 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3417 = load i64, i64* %PC
  %3418 = add i64 %3417, 9
  store i64 %3418, i64* %PC
  %3419 = load double, double* bitcast (%sa_type* @sa to double*)
  %3420 = bitcast i8* %3416 to double*
  store double %3419, double* %3420, align 1, !tbaa !2451
  %3421 = getelementptr inbounds i8, i8* %3416, i64 8
  %3422 = bitcast i8* %3421 to double*
  store double 0.000000e+00, double* %3422, align 1, !tbaa !2451
  %3423 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3424 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3425 = load i64, i64* %PC
  %3426 = add i64 %3425, 9
  store i64 %3426, i64* %PC
  %3427 = bitcast i8* %3424 to double*
  %3428 = load double, double* %3427, align 1
  %3429 = getelementptr inbounds i8, i8* %3424, i64 8
  %3430 = bitcast i8* %3429 to i64*
  %3431 = load i64, i64* %3430, align 1
  %3432 = load double, double* bitcast (%sb_type* @sb to double*)
  %3433 = fmul double %3428, %3432
  %3434 = bitcast i8* %3423 to double*
  store double %3433, double* %3434, align 1, !tbaa !2451
  %3435 = getelementptr inbounds i8, i8* %3423, i64 8
  %3436 = bitcast i8* %3435 to i64*
  store i64 %3431, i64* %3436, align 1, !tbaa !2451
  %3437 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3438 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3439 = load i64, i64* %PC
  %3440 = add i64 %3439, 9
  store i64 %3440, i64* %PC
  %3441 = bitcast i8* %3438 to double*
  %3442 = load double, double* %3441, align 1
  %3443 = getelementptr inbounds i8, i8* %3438, i64 8
  %3444 = bitcast i8* %3443 to i64*
  %3445 = load i64, i64* %3444, align 1
  %3446 = load double, double* bitcast (%sb_type* @sb to double*)
  %3447 = fmul double %3442, %3446
  %3448 = bitcast i8* %3437 to double*
  store double %3447, double* %3448, align 1, !tbaa !2451
  %3449 = getelementptr inbounds i8, i8* %3437, i64 8
  %3450 = bitcast i8* %3449 to i64*
  store i64 %3445, i64* %3450, align 1, !tbaa !2451
  %3451 = bitcast %union.vec128_t* %XMM3 to i8*
  %3452 = load i64, i64* %PC
  %3453 = add i64 %3452, 9
  store i64 %3453, i64* %PC
  %3454 = bitcast i8* %3451 to double*
  %3455 = load double, double* %3454, align 1
  store double %3455, double* bitcast (%sa_type* @sa to double*)
  %3456 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3457 = load i64, i64* %PC
  %3458 = add i64 %3457, 9
  store i64 %3458, i64* %PC
  %3459 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 192) to double*)
  %3460 = bitcast i8* %3456 to double*
  store double %3459, double* %3460, align 1, !tbaa !2451
  %3461 = getelementptr inbounds i8, i8* %3456, i64 8
  %3462 = bitcast i8* %3461 to double*
  store double 0.000000e+00, double* %3462, align 1, !tbaa !2451
  %3463 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3464 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3465 = bitcast %union.vec128_t* %XMM2 to i8*
  %3466 = load i64, i64* %PC
  %3467 = add i64 %3466, 4
  store i64 %3467, i64* %PC
  %3468 = bitcast i8* %3464 to double*
  %3469 = load double, double* %3468, align 1
  %3470 = getelementptr inbounds i8, i8* %3464, i64 8
  %3471 = bitcast i8* %3470 to i64*
  %3472 = load i64, i64* %3471, align 1
  %3473 = bitcast i8* %3465 to double*
  %3474 = load double, double* %3473, align 1
  %3475 = fdiv double %3469, %3474
  %3476 = bitcast i8* %3463 to double*
  store double %3475, double* %3476, align 1, !tbaa !2451
  %3477 = getelementptr inbounds i8, i8* %3463, i64 8
  %3478 = bitcast i8* %3477 to i64*
  store i64 %3472, i64* %3478, align 1, !tbaa !2451
  %3479 = bitcast %union.vec128_t* %XMM3 to i8*
  %3480 = load i64, i64* %PC
  %3481 = add i64 %3480, 9
  store i64 %3481, i64* %PC
  %3482 = bitcast i8* %3479 to double*
  %3483 = load double, double* %3482, align 1
  store double %3483, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 200) to double*)
  %3484 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3485 = load i64, i64* %RBP
  %3486 = sub i64 %3485, 48
  %3487 = load i64, i64* %PC
  %3488 = add i64 %3487, 5
  store i64 %3488, i64* %PC
  %3489 = inttoptr i64 %3486 to double*
  %3490 = load double, double* %3489
  %3491 = bitcast i8* %3484 to double*
  store double %3490, double* %3491, align 1, !tbaa !2451
  %3492 = getelementptr inbounds i8, i8* %3484, i64 8
  %3493 = bitcast i8* %3492 to double*
  store double 0.000000e+00, double* %3493, align 1, !tbaa !2451
  %3494 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3495 = load i64, i64* %PC
  %3496 = add i64 %3495, 9
  store i64 %3496, i64* %PC
  %3497 = load double, double* bitcast (%sa_type* @sa to double*)
  %3498 = bitcast i8* %3494 to double*
  store double %3497, double* %3498, align 1, !tbaa !2451
  %3499 = getelementptr inbounds i8, i8* %3494, i64 8
  %3500 = bitcast i8* %3499 to double*
  store double 0.000000e+00, double* %3500, align 1, !tbaa !2451
  %3501 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3502 = load i64, i64* %PC
  %3503 = add i64 %3502, 9
  store i64 %3503, i64* %PC
  %3504 = load double, double* bitcast (%two_type* @two to double*)
  %3505 = bitcast i8* %3501 to double*
  store double %3504, double* %3505, align 1, !tbaa !2451
  %3506 = getelementptr inbounds i8, i8* %3501, i64 8
  %3507 = bitcast i8* %3506 to double*
  store double 0.000000e+00, double* %3507, align 1, !tbaa !2451
  %3508 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3509 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3510 = load i64, i64* %RBP
  %3511 = sub i64 %3510, 16
  %3512 = load i64, i64* %PC
  %3513 = add i64 %3512, 5
  store i64 %3513, i64* %PC
  %3514 = bitcast i8* %3509 to double*
  %3515 = load double, double* %3514, align 1
  %3516 = getelementptr inbounds i8, i8* %3509, i64 8
  %3517 = bitcast i8* %3516 to i64*
  %3518 = load i64, i64* %3517, align 1
  %3519 = inttoptr i64 %3511 to double*
  %3520 = load double, double* %3519
  %3521 = fmul double %3515, %3520
  %3522 = bitcast i8* %3508 to double*
  store double %3521, double* %3522, align 1, !tbaa !2451
  %3523 = getelementptr inbounds i8, i8* %3508, i64 8
  %3524 = bitcast i8* %3523 to i64*
  store i64 %3518, i64* %3524, align 1, !tbaa !2451
  %3525 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3526 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3527 = bitcast %union.vec128_t* %XMM4 to i8*
  %3528 = load i64, i64* %PC
  %3529 = add i64 %3528, 4
  store i64 %3529, i64* %PC
  %3530 = bitcast i8* %3526 to double*
  %3531 = load double, double* %3530, align 1
  %3532 = getelementptr inbounds i8, i8* %3526, i64 8
  %3533 = bitcast i8* %3532 to i64*
  %3534 = load i64, i64* %3533, align 1
  %3535 = bitcast i8* %3527 to double*
  %3536 = load double, double* %3535, align 1
  %3537 = fadd double %3531, %3536
  %3538 = bitcast i8* %3525 to double*
  store double %3537, double* %3538, align 1, !tbaa !2451
  %3539 = getelementptr inbounds i8, i8* %3525, i64 8
  %3540 = bitcast i8* %3539 to i64*
  store i64 %3534, i64* %3540, align 1, !tbaa !2451
  %3541 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3542 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3543 = bitcast %union.vec128_t* %XMM3 to i8*
  %3544 = load i64, i64* %PC
  %3545 = add i64 %3544, 4
  store i64 %3545, i64* %PC
  %3546 = bitcast i8* %3542 to double*
  %3547 = load double, double* %3546, align 1
  %3548 = getelementptr inbounds i8, i8* %3542, i64 8
  %3549 = bitcast i8* %3548 to i64*
  %3550 = load i64, i64* %3549, align 1
  %3551 = bitcast i8* %3543 to double*
  %3552 = load double, double* %3551, align 1
  %3553 = fmul double %3547, %3552
  %3554 = bitcast i8* %3541 to double*
  store double %3553, double* %3554, align 1, !tbaa !2451
  %3555 = getelementptr inbounds i8, i8* %3541, i64 8
  %3556 = bitcast i8* %3555 to i64*
  store i64 %3550, i64* %3556, align 1, !tbaa !2451
  %3557 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3558 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3559 = load i64, i64* %PC
  %3560 = add i64 %3559, 9
  store i64 %3560, i64* %PC
  %3561 = bitcast i8* %3558 to double*
  %3562 = load double, double* %3561, align 1
  %3563 = getelementptr inbounds i8, i8* %3558, i64 8
  %3564 = bitcast i8* %3563 to i64*
  %3565 = load i64, i64* %3564, align 1
  %3566 = load double, double* bitcast (%two_type* @two to double*)
  %3567 = fdiv double %3562, %3566
  %3568 = bitcast i8* %3557 to double*
  store double %3567, double* %3568, align 1, !tbaa !2451
  %3569 = getelementptr inbounds i8, i8* %3557, i64 8
  %3570 = bitcast i8* %3569 to i64*
  store i64 %3565, i64* %3570, align 1, !tbaa !2451
  %3571 = bitcast %union.vec128_t* %XMM2 to i8*
  %3572 = load i64, i64* %PC
  %3573 = add i64 %3572, 9
  store i64 %3573, i64* %PC
  %3574 = bitcast i8* %3571 to double*
  %3575 = load double, double* %3574, align 1
  store double %3575, double* bitcast (%sa_type* @sa to double*)
  %3576 = bitcast %union.vec128_t* %XMM1 to i8*
  %3577 = load i64, i64* %PC
  %3578 = add i64 %3577, 9
  store i64 %3578, i64* %PC
  %3579 = bitcast i8* %3576 to double*
  %3580 = load double, double* %3579, align 1
  store double %3580, double* bitcast (%sb_type* @sb to double*)
  %3581 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3582 = load i64, i64* %PC
  %3583 = add i64 %3582, 9
  store i64 %3583, i64* %PC
  %3584 = load double, double* bitcast (%sa_type* @sa to double*)
  %3585 = bitcast i8* %3581 to double*
  store double %3584, double* %3585, align 1, !tbaa !2451
  %3586 = getelementptr inbounds i8, i8* %3581, i64 8
  %3587 = bitcast i8* %3586 to double*
  store double 0.000000e+00, double* %3587, align 1, !tbaa !2451
  %3588 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3589 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3590 = load i64, i64* %PC
  %3591 = add i64 %3590, 9
  store i64 %3591, i64* %PC
  %3592 = bitcast i8* %3589 to double*
  %3593 = load double, double* %3592, align 1
  %3594 = getelementptr inbounds i8, i8* %3589, i64 8
  %3595 = bitcast i8* %3594 to i64*
  %3596 = load i64, i64* %3595, align 1
  %3597 = load double, double* bitcast (%sb_type* @sb to double*)
  %3598 = fsub double %3593, %3597
  %3599 = bitcast i8* %3588 to double*
  store double %3598, double* %3599, align 1, !tbaa !2451
  %3600 = getelementptr inbounds i8, i8* %3588, i64 8
  %3601 = bitcast i8* %3600 to i64*
  store i64 %3596, i64* %3601, align 1, !tbaa !2451
  %3602 = bitcast %union.vec128_t* %XMM1 to i8*
  %3603 = load i64, i64* %PC
  %3604 = add i64 %3603, 9
  store i64 %3604, i64* %PC
  %3605 = bitcast i8* %3602 to double*
  %3606 = load double, double* %3605, align 1
  store double %3606, double* bitcast (%sc_type* @sc to double*)
  %3607 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3608 = load i64, i64* %PC
  %3609 = add i64 %3608, 9
  store i64 %3609, i64* %PC
  %3610 = load double, double* bitcast (%one_type* @one to double*)
  %3611 = bitcast i8* %3607 to double*
  store double %3610, double* %3611, align 1, !tbaa !2451
  %3612 = getelementptr inbounds i8, i8* %3607, i64 8
  %3613 = bitcast i8* %3612 to double*
  store double 0.000000e+00, double* %3613, align 1, !tbaa !2451
  %3614 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3615 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3616 = load i64, i64* %PC
  %3617 = add i64 %3616, 9
  store i64 %3617, i64* %PC
  %3618 = bitcast i8* %3615 to double*
  %3619 = load double, double* %3618, align 1
  %3620 = getelementptr inbounds i8, i8* %3615, i64 8
  %3621 = bitcast i8* %3620 to i64*
  %3622 = load i64, i64* %3621, align 1
  %3623 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 200) to double*)
  %3624 = fdiv double %3619, %3623
  %3625 = bitcast i8* %3614 to double*
  store double %3624, double* %3625, align 1, !tbaa !2451
  %3626 = getelementptr inbounds i8, i8* %3614, i64 8
  %3627 = bitcast i8* %3626 to i64*
  store i64 %3622, i64* %3627, align 1, !tbaa !2451
  %3628 = bitcast %union.vec128_t* %XMM1 to i8*
  %3629 = load i64, i64* %PC
  %3630 = add i64 %3629, 9
  store i64 %3630, i64* %PC
  %3631 = bitcast i8* %3628 to double*
  %3632 = load double, double* %3631, align 1
  store double %3632, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 208) to double*)
  %3633 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3634 = bitcast %union.vec128_t* %XMM0 to i8*
  %3635 = load i64, i64* %PC
  %3636 = add i64 %3635, 3
  store i64 %3636, i64* %PC
  %3637 = bitcast i8* %3634 to <2 x i32>*
  %3638 = load <2 x i32>, <2 x i32>* %3637, align 1
  %3639 = getelementptr inbounds i8, i8* %3634, i64 8
  %3640 = bitcast i8* %3639 to <2 x i32>*
  %3641 = load <2 x i32>, <2 x i32>* %3640, align 1
  %3642 = extractelement <2 x i32> %3638, i32 0
  %3643 = bitcast i8* %3633 to i32*
  store i32 %3642, i32* %3643, align 1, !tbaa !2455
  %3644 = extractelement <2 x i32> %3638, i32 1
  %3645 = getelementptr inbounds i8, i8* %3633, i64 4
  %3646 = bitcast i8* %3645 to i32*
  store i32 %3644, i32* %3646, align 1, !tbaa !2455
  %3647 = extractelement <2 x i32> %3641, i32 0
  %3648 = getelementptr inbounds i8, i8* %3633, i64 8
  %3649 = bitcast i8* %3648 to i32*
  store i32 %3647, i32* %3649, align 1, !tbaa !2455
  %3650 = extractelement <2 x i32> %3641, i32 1
  %3651 = getelementptr inbounds i8, i8* %3633, i64 12
  %3652 = bitcast i8* %3651 to i32*
  store i32 %3650, i32* %3652, align 1, !tbaa !2455
  %3653 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3654 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3655 = load i64, i64* %PC
  %3656 = add i64 %3655, 9
  store i64 %3656, i64* %PC
  %3657 = bitcast i8* %3654 to double*
  %3658 = load double, double* %3657, align 1
  %3659 = getelementptr inbounds i8, i8* %3654, i64 8
  %3660 = bitcast i8* %3659 to i64*
  %3661 = load i64, i64* %3660, align 1
  %3662 = load double, double* bitcast (%sc_type* @sc to double*)
  %3663 = fmul double %3658, %3662
  %3664 = bitcast i8* %3653 to double*
  store double %3663, double* %3664, align 1, !tbaa !2451
  %3665 = getelementptr inbounds i8, i8* %3653, i64 8
  %3666 = bitcast i8* %3665 to i64*
  store i64 %3661, i64* %3666, align 1, !tbaa !2451
  %3667 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3668 = bitcast %union.vec128_t* %XMM0 to i8*
  %3669 = load i64, i64* %PC
  %3670 = add i64 %3669, 3
  store i64 %3670, i64* %PC
  %3671 = bitcast i8* %3668 to <2 x i32>*
  %3672 = load <2 x i32>, <2 x i32>* %3671, align 1
  %3673 = getelementptr inbounds i8, i8* %3668, i64 8
  %3674 = bitcast i8* %3673 to <2 x i32>*
  %3675 = load <2 x i32>, <2 x i32>* %3674, align 1
  %3676 = extractelement <2 x i32> %3672, i32 0
  %3677 = bitcast i8* %3667 to i32*
  store i32 %3676, i32* %3677, align 1, !tbaa !2455
  %3678 = extractelement <2 x i32> %3672, i32 1
  %3679 = getelementptr inbounds i8, i8* %3667, i64 4
  %3680 = bitcast i8* %3679 to i32*
  store i32 %3678, i32* %3680, align 1, !tbaa !2455
  %3681 = extractelement <2 x i32> %3675, i32 0
  %3682 = getelementptr inbounds i8, i8* %3667, i64 8
  %3683 = bitcast i8* %3682 to i32*
  store i32 %3681, i32* %3683, align 1, !tbaa !2455
  %3684 = extractelement <2 x i32> %3675, i32 1
  %3685 = getelementptr inbounds i8, i8* %3667, i64 12
  %3686 = bitcast i8* %3685 to i32*
  store i32 %3684, i32* %3686, align 1, !tbaa !2455
  %3687 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3688 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3689 = load i64, i64* %PC
  %3690 = add i64 %3689, 9
  store i64 %3690, i64* %PC
  %3691 = bitcast i8* %3688 to double*
  %3692 = load double, double* %3691, align 1
  %3693 = getelementptr inbounds i8, i8* %3688, i64 8
  %3694 = bitcast i8* %3693 to i64*
  %3695 = load i64, i64* %3694, align 1
  %3696 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 192) to double*)
  %3697 = fmul double %3692, %3696
  %3698 = bitcast i8* %3687 to double*
  store double %3697, double* %3698, align 1, !tbaa !2451
  %3699 = getelementptr inbounds i8, i8* %3687, i64 8
  %3700 = bitcast i8* %3699 to i64*
  store i64 %3695, i64* %3700, align 1, !tbaa !2451
  %3701 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3702 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3703 = load i64, i64* %PC
  %3704 = add i64 %3703, 9
  store i64 %3704, i64* %PC
  %3705 = bitcast i8* %3702 to double*
  %3706 = load double, double* %3705, align 1
  %3707 = getelementptr inbounds i8, i8* %3702, i64 8
  %3708 = bitcast i8* %3707 to i64*
  %3709 = load i64, i64* %3708, align 1
  %3710 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 208) to double*)
  %3711 = fmul double %3706, %3710
  %3712 = bitcast i8* %3701 to double*
  store double %3711, double* %3712, align 1, !tbaa !2451
  %3713 = getelementptr inbounds i8, i8* %3701, i64 8
  %3714 = bitcast i8* %3713 to i64*
  store i64 %3709, i64* %3714, align 1, !tbaa !2451
  %3715 = load i64, i64* %RBP
  %3716 = sub i64 %3715, 304
  %3717 = bitcast %union.vec128_t* %XMM0 to i8*
  %3718 = load i64, i64* %PC
  %3719 = add i64 %3718, 8
  store i64 %3719, i64* %PC
  %3720 = bitcast i8* %3717 to double*
  %3721 = load double, double* %3720, align 1
  %3722 = inttoptr i64 %3716 to double*
  store double %3721, double* %3722
  %3723 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3724 = bitcast %union.vec128_t* %XMM1 to i8*
  %3725 = load i64, i64* %PC
  %3726 = add i64 %3725, 3
  store i64 %3726, i64* %PC
  %3727 = bitcast i8* %3724 to <2 x i32>*
  %3728 = load <2 x i32>, <2 x i32>* %3727, align 1
  %3729 = getelementptr inbounds i8, i8* %3724, i64 8
  %3730 = bitcast i8* %3729 to <2 x i32>*
  %3731 = load <2 x i32>, <2 x i32>* %3730, align 1
  %3732 = extractelement <2 x i32> %3728, i32 0
  %3733 = bitcast i8* %3723 to i32*
  store i32 %3732, i32* %3733, align 1, !tbaa !2455
  %3734 = extractelement <2 x i32> %3728, i32 1
  %3735 = getelementptr inbounds i8, i8* %3723, i64 4
  %3736 = bitcast i8* %3735 to i32*
  store i32 %3734, i32* %3736, align 1, !tbaa !2455
  %3737 = extractelement <2 x i32> %3731, i32 0
  %3738 = getelementptr inbounds i8, i8* %3723, i64 8
  %3739 = bitcast i8* %3738 to i32*
  store i32 %3737, i32* %3739, align 1, !tbaa !2455
  %3740 = extractelement <2 x i32> %3731, i32 1
  %3741 = getelementptr inbounds i8, i8* %3723, i64 12
  %3742 = bitcast i8* %3741 to i32*
  store i32 %3740, i32* %3742, align 1, !tbaa !2455
  %3743 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3744 = bitcast %union.vec128_t* %XMM2 to i8*
  %3745 = load i64, i64* %PC
  %3746 = add i64 %3745, 3
  store i64 %3746, i64* %PC
  %3747 = bitcast i8* %3744 to <2 x i32>*
  %3748 = load <2 x i32>, <2 x i32>* %3747, align 1
  %3749 = getelementptr inbounds i8, i8* %3744, i64 8
  %3750 = bitcast i8* %3749 to <2 x i32>*
  %3751 = load <2 x i32>, <2 x i32>* %3750, align 1
  %3752 = extractelement <2 x i32> %3748, i32 0
  %3753 = bitcast i8* %3743 to i32*
  store i32 %3752, i32* %3753, align 1, !tbaa !2455
  %3754 = extractelement <2 x i32> %3748, i32 1
  %3755 = getelementptr inbounds i8, i8* %3743, i64 4
  %3756 = bitcast i8* %3755 to i32*
  store i32 %3754, i32* %3756, align 1, !tbaa !2455
  %3757 = extractelement <2 x i32> %3751, i32 0
  %3758 = getelementptr inbounds i8, i8* %3743, i64 8
  %3759 = bitcast i8* %3758 to i32*
  store i32 %3757, i32* %3759, align 1, !tbaa !2455
  %3760 = extractelement <2 x i32> %3751, i32 1
  %3761 = getelementptr inbounds i8, i8* %3743, i64 12
  %3762 = bitcast i8* %3761 to i32*
  store i32 %3760, i32* %3762, align 1, !tbaa !2455
  %3763 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3764 = load i64, i64* %RBP
  %3765 = sub i64 %3764, 304
  %3766 = load i64, i64* %PC
  %3767 = add i64 %3766, 8
  store i64 %3767, i64* %PC
  %3768 = inttoptr i64 %3765 to double*
  %3769 = load double, double* %3768
  %3770 = bitcast i8* %3763 to double*
  store double %3769, double* %3770, align 1, !tbaa !2451
  %3771 = getelementptr inbounds i8, i8* %3763, i64 8
  %3772 = bitcast i8* %3771 to double*
  store double 0.000000e+00, double* %3772, align 1, !tbaa !2451
  %3773 = load i64, i64* %RBP
  %3774 = sub i64 %3773, 308
  %3775 = load i32, i32* %EAX
  %3776 = zext i32 %3775 to i64
  %3777 = load i64, i64* %PC
  %3778 = add i64 %3777, 6
  store i64 %3778, i64* %PC
  %3779 = inttoptr i64 %3774 to i32*
  store i32 %3775, i32* %3779
  %3780 = load i64, i64* %PC
  %3781 = add i64 %3780, 2
  store i64 %3781, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2453
  %3782 = load i64, i64* %PC
  %3783 = sub i64 %3782, 7918
  %3784 = load i64, i64* %PC
  %3785 = add i64 %3784, 5
  %3786 = load i64, i64* %PC
  %3787 = add i64 %3786, 5
  store i64 %3787, i64* %PC
  %3788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3789 = load i64, i64* %3788, align 8, !tbaa !2428
  %3790 = add i64 %3789, -8
  %3791 = inttoptr i64 %3790 to i64*
  store i64 %3785, i64* %3791
  store i64 %3790, i64* %3788, align 8, !tbaa !2428
  %3792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3783, i64* %3792, align 8, !tbaa !2428
  %3793 = load i64, i64* %PC
  %3794 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %3793, %struct.Memory* %2821)
  %3795 = load i64, i64* %PC
  %3796 = add i64 %3795, 10
  store i64 %3796, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 304), i64* %RDI, align 8, !tbaa !2428
  %3797 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3798 = load i64, i64* %PC
  %3799 = add i64 %3798, 8
  store i64 %3799, i64* %PC
  %3800 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 192) to double*)
  %3801 = bitcast i8* %3797 to double*
  store double %3800, double* %3801, align 1, !tbaa !2451
  %3802 = getelementptr inbounds i8, i8* %3797, i64 8
  %3803 = bitcast i8* %3802 to double*
  store double 0.000000e+00, double* %3803, align 1, !tbaa !2451
  %3804 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3805 = load i64, i64* %PC
  %3806 = add i64 %3805, 8
  store i64 %3806, i64* %PC
  %3807 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 200) to double*)
  %3808 = bitcast i8* %3804 to double*
  store double %3807, double* %3808, align 1, !tbaa !2451
  %3809 = getelementptr inbounds i8, i8* %3804, i64 8
  %3810 = bitcast i8* %3809 to double*
  store double 0.000000e+00, double* %3810, align 1, !tbaa !2451
  %3811 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3812 = load i64, i64* %PC
  %3813 = add i64 %3812, 8
  store i64 %3813, i64* %PC
  %3814 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 208) to double*)
  %3815 = bitcast i8* %3811 to double*
  store double %3814, double* %3815, align 1, !tbaa !2451
  %3816 = getelementptr inbounds i8, i8* %3811, i64 8
  %3817 = bitcast i8* %3816 to double*
  store double 0.000000e+00, double* %3817, align 1, !tbaa !2451
  %3818 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3819 = load i64, i64* %PC
  %3820 = add i64 %3819, 8
  store i64 %3820, i64* %PC
  %3821 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 216) to double*)
  %3822 = bitcast i8* %3818 to double*
  store double %3821, double* %3822, align 1, !tbaa !2451
  %3823 = getelementptr inbounds i8, i8* %3818, i64 8
  %3824 = bitcast i8* %3823 to double*
  store double 0.000000e+00, double* %3824, align 1, !tbaa !2451
  %3825 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3826 = load i64, i64* %PC
  %3827 = add i64 %3826, 9
  store i64 %3827, i64* %PC
  %3828 = load double, double* bitcast (%five_type* @five to double*)
  %3829 = bitcast i8* %3825 to double*
  store double %3828, double* %3829, align 1, !tbaa !2451
  %3830 = getelementptr inbounds i8, i8* %3825, i64 8
  %3831 = bitcast i8* %3830 to double*
  store double 0.000000e+00, double* %3831, align 1, !tbaa !2451
  %3832 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %3833 = load i64, i64* %PC
  %3834 = add i64 %3833, 9
  store i64 %3834, i64* %PC
  %3835 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 48) to double*)
  %3836 = bitcast i8* %3832 to double*
  store double %3835, double* %3836, align 1, !tbaa !2451
  %3837 = getelementptr inbounds i8, i8* %3832, i64 8
  %3838 = bitcast i8* %3837 to double*
  store double 0.000000e+00, double* %3838, align 1, !tbaa !2451
  %3839 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %3840 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %3841 = load i64, i64* %PC
  %3842 = add i64 %3841, 9
  store i64 %3842, i64* %PC
  %3843 = bitcast i8* %3840 to double*
  %3844 = load double, double* %3843, align 1
  %3845 = getelementptr inbounds i8, i8* %3840, i64 8
  %3846 = bitcast i8* %3845 to i64*
  %3847 = load i64, i64* %3846, align 1
  %3848 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  %3849 = fsub double %3844, %3848
  %3850 = bitcast i8* %3839 to double*
  store double %3849, double* %3850, align 1, !tbaa !2451
  %3851 = getelementptr inbounds i8, i8* %3839, i64 8
  %3852 = bitcast i8* %3851 to i64*
  store i64 %3847, i64* %3852, align 1, !tbaa !2451
  %3853 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3854 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3855 = bitcast %union.vec128_t* %XMM5 to i8*
  %3856 = load i64, i64* %PC
  %3857 = add i64 %3856, 4
  store i64 %3857, i64* %PC
  %3858 = bitcast i8* %3854 to double*
  %3859 = load double, double* %3858, align 1
  %3860 = getelementptr inbounds i8, i8* %3854, i64 8
  %3861 = bitcast i8* %3860 to i64*
  %3862 = load i64, i64* %3861, align 1
  %3863 = bitcast i8* %3855 to double*
  %3864 = load double, double* %3863, align 1
  %3865 = fmul double %3859, %3864
  %3866 = bitcast i8* %3853 to double*
  store double %3865, double* %3866, align 1, !tbaa !2451
  %3867 = getelementptr inbounds i8, i8* %3853, i64 8
  %3868 = bitcast i8* %3867 to i64*
  store i64 %3862, i64* %3868, align 1, !tbaa !2451
  %3869 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3870 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3871 = load i64, i64* %PC
  %3872 = add i64 %3871, 9
  store i64 %3872, i64* %PC
  %3873 = bitcast i8* %3870 to double*
  %3874 = load double, double* %3873, align 1
  %3875 = getelementptr inbounds i8, i8* %3870, i64 8
  %3876 = bitcast i8* %3875 to i64*
  %3877 = load i64, i64* %3876, align 1
  %3878 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %3879 = fadd double %3874, %3878
  %3880 = bitcast i8* %3869 to double*
  store double %3879, double* %3880, align 1, !tbaa !2451
  %3881 = getelementptr inbounds i8, i8* %3869, i64 8
  %3882 = bitcast i8* %3881 to i64*
  store i64 %3877, i64* %3882, align 1, !tbaa !2451
  %3883 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3884 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3885 = bitcast %union.vec128_t* %XMM3 to i8*
  %3886 = load i64, i64* %PC
  %3887 = add i64 %3886, 4
  store i64 %3887, i64* %PC
  %3888 = bitcast i8* %3884 to double*
  %3889 = load double, double* %3888, align 1
  %3890 = getelementptr inbounds i8, i8* %3884, i64 8
  %3891 = bitcast i8* %3890 to i64*
  %3892 = load i64, i64* %3891, align 1
  %3893 = bitcast i8* %3885 to double*
  %3894 = load double, double* %3893, align 1
  %3895 = fdiv double %3889, %3894
  %3896 = bitcast i8* %3883 to double*
  store double %3895, double* %3896, align 1, !tbaa !2451
  %3897 = getelementptr inbounds i8, i8* %3883, i64 8
  %3898 = bitcast i8* %3897 to i64*
  store i64 %3892, i64* %3898, align 1, !tbaa !2451
  %3899 = bitcast %union.vec128_t* %XMM4 to i8*
  %3900 = load i64, i64* %PC
  %3901 = add i64 %3900, 9
  store i64 %3901, i64* %PC
  %3902 = bitcast i8* %3899 to double*
  %3903 = load double, double* %3902, align 1
  store double %3903, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 216) to double*)
  %3904 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3905 = load i64, i64* %PC
  %3906 = add i64 %3905, 9
  store i64 %3906, i64* %PC
  %3907 = load double, double* bitcast (%one_type* @one to double*)
  %3908 = bitcast i8* %3904 to double*
  store double %3907, double* %3908, align 1, !tbaa !2451
  %3909 = getelementptr inbounds i8, i8* %3904, i64 8
  %3910 = bitcast i8* %3909 to double*
  store double 0.000000e+00, double* %3910, align 1, !tbaa !2451
  %3911 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3912 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3913 = load i64, i64* %PC
  %3914 = add i64 %3913, 9
  store i64 %3914, i64* %PC
  %3915 = bitcast i8* %3912 to double*
  %3916 = load double, double* %3915, align 1
  %3917 = getelementptr inbounds i8, i8* %3912, i64 8
  %3918 = bitcast i8* %3917 to i64*
  %3919 = load i64, i64* %3918, align 1
  %3920 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 216) to double*)
  %3921 = fdiv double %3916, %3920
  %3922 = bitcast i8* %3911 to double*
  store double %3921, double* %3922, align 1, !tbaa !2451
  %3923 = getelementptr inbounds i8, i8* %3911, i64 8
  %3924 = bitcast i8* %3923 to i64*
  store i64 %3919, i64* %3924, align 1, !tbaa !2451
  %3925 = bitcast %union.vec128_t* %XMM3 to i8*
  %3926 = load i64, i64* %PC
  %3927 = add i64 %3926, 9
  store i64 %3927, i64* %PC
  %3928 = bitcast i8* %3925 to double*
  %3929 = load double, double* %3928, align 1
  store double %3929, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 224) to double*)
  %3930 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3931 = load i64, i64* %PC
  %3932 = add i64 %3931, 9
  store i64 %3932, i64* %PC
  %3933 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 16) to double*)
  %3934 = bitcast i8* %3930 to double*
  store double %3933, double* %3934, align 1, !tbaa !2451
  %3935 = getelementptr inbounds i8, i8* %3930, i64 8
  %3936 = bitcast i8* %3935 to double*
  store double 0.000000e+00, double* %3936, align 1, !tbaa !2451
  %3937 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3938 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3939 = load i64, i64* %PC
  %3940 = add i64 %3939, 9
  store i64 %3940, i64* %PC
  %3941 = bitcast i8* %3938 to double*
  %3942 = load double, double* %3941, align 1
  %3943 = getelementptr inbounds i8, i8* %3938, i64 8
  %3944 = bitcast i8* %3943 to i64*
  %3945 = load i64, i64* %3944, align 1
  %3946 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %3947 = fadd double %3942, %3946
  %3948 = bitcast i8* %3937 to double*
  store double %3947, double* %3948, align 1, !tbaa !2451
  %3949 = getelementptr inbounds i8, i8* %3937, i64 8
  %3950 = bitcast i8* %3949 to i64*
  store i64 %3945, i64* %3950, align 1, !tbaa !2451
  %3951 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3952 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3953 = load i64, i64* %PC
  %3954 = add i64 %3953, 9
  store i64 %3954, i64* %PC
  %3955 = bitcast i8* %3952 to double*
  %3956 = load double, double* %3955, align 1
  %3957 = getelementptr inbounds i8, i8* %3952, i64 8
  %3958 = bitcast i8* %3957 to i64*
  %3959 = load i64, i64* %3958, align 1
  %3960 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %3961 = fadd double %3956, %3960
  %3962 = bitcast i8* %3951 to double*
  store double %3961, double* %3962, align 1, !tbaa !2451
  %3963 = getelementptr inbounds i8, i8* %3951, i64 8
  %3964 = bitcast i8* %3963 to i64*
  store i64 %3959, i64* %3964, align 1, !tbaa !2451
  %3965 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3966 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3967 = load i64, i64* %PC
  %3968 = add i64 %3967, 9
  store i64 %3968, i64* %PC
  %3969 = bitcast i8* %3966 to double*
  %3970 = load double, double* %3969, align 1
  %3971 = getelementptr inbounds i8, i8* %3966, i64 8
  %3972 = bitcast i8* %3971 to i64*
  %3973 = load i64, i64* %3972, align 1
  %3974 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 120) to double*)
  %3975 = fadd double %3970, %3974
  %3976 = bitcast i8* %3965 to double*
  store double %3975, double* %3976, align 1, !tbaa !2451
  %3977 = getelementptr inbounds i8, i8* %3965, i64 8
  %3978 = bitcast i8* %3977 to i64*
  store i64 %3973, i64* %3978, align 1, !tbaa !2451
  %3979 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3980 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3981 = load i64, i64* %PC
  %3982 = add i64 %3981, 9
  store i64 %3982, i64* %PC
  %3983 = bitcast i8* %3980 to double*
  %3984 = load double, double* %3983, align 1
  %3985 = getelementptr inbounds i8, i8* %3980, i64 8
  %3986 = bitcast i8* %3985 to i64*
  %3987 = load i64, i64* %3986, align 1
  %3988 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %3989 = fadd double %3984, %3988
  %3990 = bitcast i8* %3979 to double*
  store double %3989, double* %3990, align 1, !tbaa !2451
  %3991 = getelementptr inbounds i8, i8* %3979, i64 8
  %3992 = bitcast i8* %3991 to i64*
  store i64 %3987, i64* %3992, align 1, !tbaa !2451
  %3993 = bitcast %union.vec128_t* %XMM3 to i8*
  %3994 = load i64, i64* %PC
  %3995 = add i64 %3994, 9
  store i64 %3995, i64* %PC
  %3996 = bitcast i8* %3993 to double*
  %3997 = load double, double* %3996, align 1
  store double %3997, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 232) to double*)
  %3998 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3999 = load i64, i64* %PC
  %4000 = add i64 %3999, 9
  store i64 %4000, i64* %PC
  %4001 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 232) to double*)
  %4002 = bitcast i8* %3998 to double*
  store double %4001, double* %4002, align 1, !tbaa !2451
  %4003 = getelementptr inbounds i8, i8* %3998, i64 8
  %4004 = bitcast i8* %4003 to double*
  store double 0.000000e+00, double* %4004, align 1, !tbaa !2451
  %4005 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4006 = load i64, i64* %PC
  %4007 = add i64 %4006, 9
  store i64 %4007, i64* %PC
  %4008 = load double, double* bitcast (%four_type* @four to double*)
  %4009 = bitcast i8* %4005 to double*
  store double %4008, double* %4009, align 1, !tbaa !2451
  %4010 = getelementptr inbounds i8, i8* %4005, i64 8
  %4011 = bitcast i8* %4010 to double*
  store double 0.000000e+00, double* %4011, align 1, !tbaa !2451
  %4012 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4013 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4014 = load i64, i64* %PC
  %4015 = add i64 %4014, 9
  store i64 %4015, i64* %PC
  %4016 = bitcast i8* %4013 to double*
  %4017 = load double, double* %4016, align 1
  %4018 = getelementptr inbounds i8, i8* %4013, i64 8
  %4019 = bitcast i8* %4018 to i64*
  %4020 = load i64, i64* %4019, align 1
  %4021 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 168) to double*)
  %4022 = fmul double %4017, %4021
  %4023 = bitcast i8* %4012 to double*
  store double %4022, double* %4023, align 1, !tbaa !2451
  %4024 = getelementptr inbounds i8, i8* %4012, i64 8
  %4025 = bitcast i8* %4024 to i64*
  store i64 %4020, i64* %4025, align 1, !tbaa !2451
  %4026 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4027 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4028 = bitcast %union.vec128_t* %XMM4 to i8*
  %4029 = load i64, i64* %PC
  %4030 = add i64 %4029, 4
  store i64 %4030, i64* %PC
  %4031 = bitcast i8* %4027 to double*
  %4032 = load double, double* %4031, align 1
  %4033 = getelementptr inbounds i8, i8* %4027, i64 8
  %4034 = bitcast i8* %4033 to i64*
  %4035 = load i64, i64* %4034, align 1
  %4036 = bitcast i8* %4028 to double*
  %4037 = load double, double* %4036, align 1
  %4038 = fadd double %4032, %4037
  %4039 = bitcast i8* %4026 to double*
  store double %4038, double* %4039, align 1, !tbaa !2451
  %4040 = getelementptr inbounds i8, i8* %4026, i64 8
  %4041 = bitcast i8* %4040 to i64*
  store i64 %4035, i64* %4041, align 1, !tbaa !2451
  %4042 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4043 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4044 = bitcast %union.vec128_t* %XMM2 to i8*
  %4045 = load i64, i64* %PC
  %4046 = add i64 %4045, 4
  store i64 %4046, i64* %PC
  %4047 = bitcast i8* %4043 to double*
  %4048 = load double, double* %4047, align 1
  %4049 = getelementptr inbounds i8, i8* %4043, i64 8
  %4050 = bitcast i8* %4049 to i64*
  %4051 = load i64, i64* %4050, align 1
  %4052 = bitcast i8* %4044 to double*
  %4053 = load double, double* %4052, align 1
  %4054 = fdiv double %4048, %4053
  %4055 = bitcast i8* %4042 to double*
  store double %4054, double* %4055, align 1, !tbaa !2451
  %4056 = getelementptr inbounds i8, i8* %4042, i64 8
  %4057 = bitcast i8* %4056 to i64*
  store i64 %4051, i64* %4057, align 1, !tbaa !2451
  %4058 = bitcast %union.vec128_t* %XMM3 to i8*
  %4059 = load i64, i64* %PC
  %4060 = add i64 %4059, 9
  store i64 %4060, i64* %PC
  %4061 = bitcast i8* %4058 to double*
  %4062 = load double, double* %4061, align 1
  store double %4062, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 232) to double*)
  %4063 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4064 = load i64, i64* %PC
  %4065 = add i64 %4064, 9
  store i64 %4065, i64* %PC
  %4066 = load double, double* bitcast (%one_type* @one to double*)
  %4067 = bitcast i8* %4063 to double*
  store double %4066, double* %4067, align 1, !tbaa !2451
  %4068 = getelementptr inbounds i8, i8* %4063, i64 8
  %4069 = bitcast i8* %4068 to double*
  store double 0.000000e+00, double* %4069, align 1, !tbaa !2451
  %4070 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4071 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4072 = load i64, i64* %PC
  %4073 = add i64 %4072, 9
  store i64 %4073, i64* %PC
  %4074 = bitcast i8* %4071 to double*
  %4075 = load double, double* %4074, align 1
  %4076 = getelementptr inbounds i8, i8* %4071, i64 8
  %4077 = bitcast i8* %4076 to i64*
  %4078 = load i64, i64* %4077, align 1
  %4079 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 232) to double*)
  %4080 = fdiv double %4075, %4079
  %4081 = bitcast i8* %4070 to double*
  store double %4080, double* %4081, align 1, !tbaa !2451
  %4082 = getelementptr inbounds i8, i8* %4070, i64 8
  %4083 = bitcast i8* %4082 to i64*
  store i64 %4078, i64* %4083, align 1, !tbaa !2451
  %4084 = bitcast %union.vec128_t* %XMM2 to i8*
  %4085 = load i64, i64* %PC
  %4086 = add i64 %4085, 9
  store i64 %4086, i64* %PC
  %4087 = bitcast i8* %4084 to double*
  %4088 = load double, double* %4087, align 1
  store double %4088, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 240) to double*)
  %4089 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4090 = load i64, i64* %PC
  %4091 = add i64 %4090, 9
  store i64 %4091, i64* %PC
  %4092 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 16) to double*)
  %4093 = bitcast i8* %4089 to double*
  store double %4092, double* %4093, align 1, !tbaa !2451
  %4094 = getelementptr inbounds i8, i8* %4089, i64 8
  %4095 = bitcast i8* %4094 to double*
  store double 0.000000e+00, double* %4095, align 1, !tbaa !2451
  %4096 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4097 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4098 = load i64, i64* %PC
  %4099 = add i64 %4098, 9
  store i64 %4099, i64* %PC
  %4100 = bitcast i8* %4097 to double*
  %4101 = load double, double* %4100, align 1
  %4102 = getelementptr inbounds i8, i8* %4097, i64 8
  %4103 = bitcast i8* %4102 to i64*
  %4104 = load i64, i64* %4103, align 1
  %4105 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %4106 = fadd double %4101, %4105
  %4107 = bitcast i8* %4096 to double*
  store double %4106, double* %4107, align 1, !tbaa !2451
  %4108 = getelementptr inbounds i8, i8* %4096, i64 8
  %4109 = bitcast i8* %4108 to i64*
  store i64 %4104, i64* %4109, align 1, !tbaa !2451
  %4110 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4111 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4112 = load i64, i64* %PC
  %4113 = add i64 %4112, 9
  store i64 %4113, i64* %PC
  %4114 = bitcast i8* %4111 to double*
  %4115 = load double, double* %4114, align 1
  %4116 = getelementptr inbounds i8, i8* %4111, i64 8
  %4117 = bitcast i8* %4116 to i64*
  %4118 = load i64, i64* %4117, align 1
  %4119 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %4120 = fadd double %4115, %4119
  %4121 = bitcast i8* %4110 to double*
  store double %4120, double* %4121, align 1, !tbaa !2451
  %4122 = getelementptr inbounds i8, i8* %4110, i64 8
  %4123 = bitcast i8* %4122 to i64*
  store i64 %4118, i64* %4123, align 1, !tbaa !2451
  %4124 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4125 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4126 = load i64, i64* %PC
  %4127 = add i64 %4126, 9
  store i64 %4127, i64* %PC
  %4128 = bitcast i8* %4125 to double*
  %4129 = load double, double* %4128, align 1
  %4130 = getelementptr inbounds i8, i8* %4125, i64 8
  %4131 = bitcast i8* %4130 to i64*
  %4132 = load i64, i64* %4131, align 1
  %4133 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 120) to double*)
  %4134 = fadd double %4129, %4133
  %4135 = bitcast i8* %4124 to double*
  store double %4134, double* %4135, align 1, !tbaa !2451
  %4136 = getelementptr inbounds i8, i8* %4124, i64 8
  %4137 = bitcast i8* %4136 to i64*
  store i64 %4132, i64* %4137, align 1, !tbaa !2451
  %4138 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4139 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4140 = load i64, i64* %PC
  %4141 = add i64 %4140, 9
  store i64 %4141, i64* %PC
  %4142 = bitcast i8* %4139 to double*
  %4143 = load double, double* %4142, align 1
  %4144 = getelementptr inbounds i8, i8* %4139, i64 8
  %4145 = bitcast i8* %4144 to i64*
  %4146 = load i64, i64* %4145, align 1
  %4147 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %4148 = fadd double %4143, %4147
  %4149 = bitcast i8* %4138 to double*
  store double %4148, double* %4149, align 1, !tbaa !2451
  %4150 = getelementptr inbounds i8, i8* %4138, i64 8
  %4151 = bitcast i8* %4150 to i64*
  store i64 %4146, i64* %4151, align 1, !tbaa !2451
  %4152 = bitcast %union.vec128_t* %XMM2 to i8*
  %4153 = load i64, i64* %PC
  %4154 = add i64 %4153, 9
  store i64 %4154, i64* %PC
  %4155 = bitcast i8* %4152 to double*
  %4156 = load double, double* %4155, align 1
  store double %4156, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 248) to double*)
  %4157 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4158 = load i64, i64* %PC
  %4159 = add i64 %4158, 9
  store i64 %4159, i64* %PC
  %4160 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 248) to double*)
  %4161 = bitcast i8* %4157 to double*
  store double %4160, double* %4161, align 1, !tbaa !2451
  %4162 = getelementptr inbounds i8, i8* %4157, i64 8
  %4163 = bitcast i8* %4162 to double*
  store double 0.000000e+00, double* %4163, align 1, !tbaa !2451
  %4164 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4165 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4166 = load i64, i64* %PC
  %4167 = add i64 %4166, 9
  store i64 %4167, i64* %PC
  %4168 = bitcast i8* %4165 to double*
  %4169 = load double, double* %4168, align 1
  %4170 = getelementptr inbounds i8, i8* %4165, i64 8
  %4171 = bitcast i8* %4170 to i64*
  %4172 = load i64, i64* %4171, align 1
  %4173 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 168) to double*)
  %4174 = fadd double %4169, %4173
  %4175 = bitcast i8* %4164 to double*
  store double %4174, double* %4175, align 1, !tbaa !2451
  %4176 = getelementptr inbounds i8, i8* %4164, i64 8
  %4177 = bitcast i8* %4176 to i64*
  store i64 %4172, i64* %4177, align 1, !tbaa !2451
  %4178 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4179 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4180 = load i64, i64* %PC
  %4181 = add i64 %4180, 9
  store i64 %4181, i64* %PC
  %4182 = bitcast i8* %4179 to double*
  %4183 = load double, double* %4182, align 1
  %4184 = getelementptr inbounds i8, i8* %4179, i64 8
  %4185 = bitcast i8* %4184 to i64*
  %4186 = load i64, i64* %4185, align 1
  %4187 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 192) to double*)
  %4188 = fadd double %4183, %4187
  %4189 = bitcast i8* %4178 to double*
  store double %4188, double* %4189, align 1, !tbaa !2451
  %4190 = getelementptr inbounds i8, i8* %4178, i64 8
  %4191 = bitcast i8* %4190 to i64*
  store i64 %4186, i64* %4191, align 1, !tbaa !2451
  %4192 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4193 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4194 = bitcast %union.vec128_t* %XMM1 to i8*
  %4195 = load i64, i64* %PC
  %4196 = add i64 %4195, 4
  store i64 %4196, i64* %PC
  %4197 = bitcast i8* %4193 to double*
  %4198 = load double, double* %4197, align 1
  %4199 = getelementptr inbounds i8, i8* %4193, i64 8
  %4200 = bitcast i8* %4199 to i64*
  %4201 = load i64, i64* %4200, align 1
  %4202 = bitcast i8* %4194 to double*
  %4203 = load double, double* %4202, align 1
  %4204 = fdiv double %4198, %4203
  %4205 = bitcast i8* %4192 to double*
  store double %4204, double* %4205, align 1, !tbaa !2451
  %4206 = getelementptr inbounds i8, i8* %4192, i64 8
  %4207 = bitcast i8* %4206 to i64*
  store i64 %4201, i64* %4207, align 1, !tbaa !2451
  %4208 = bitcast %union.vec128_t* %XMM2 to i8*
  %4209 = load i64, i64* %PC
  %4210 = add i64 %4209, 9
  store i64 %4210, i64* %PC
  %4211 = bitcast i8* %4208 to double*
  %4212 = load double, double* %4211, align 1
  store double %4212, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 248) to double*)
  %4213 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4214 = load i64, i64* %PC
  %4215 = add i64 %4214, 9
  store i64 %4215, i64* %PC
  %4216 = load double, double* bitcast (%one_type* @one to double*)
  %4217 = bitcast i8* %4213 to double*
  store double %4216, double* %4217, align 1, !tbaa !2451
  %4218 = getelementptr inbounds i8, i8* %4213, i64 8
  %4219 = bitcast i8* %4218 to double*
  store double 0.000000e+00, double* %4219, align 1, !tbaa !2451
  %4220 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4221 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4222 = load i64, i64* %PC
  %4223 = add i64 %4222, 9
  store i64 %4223, i64* %PC
  %4224 = bitcast i8* %4221 to double*
  %4225 = load double, double* %4224, align 1
  %4226 = getelementptr inbounds i8, i8* %4221, i64 8
  %4227 = bitcast i8* %4226 to i64*
  %4228 = load i64, i64* %4227, align 1
  %4229 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 248) to double*)
  %4230 = fdiv double %4225, %4229
  %4231 = bitcast i8* %4220 to double*
  store double %4230, double* %4231, align 1, !tbaa !2451
  %4232 = getelementptr inbounds i8, i8* %4220, i64 8
  %4233 = bitcast i8* %4232 to i64*
  store i64 %4228, i64* %4233, align 1, !tbaa !2451
  %4234 = bitcast %union.vec128_t* %XMM1 to i8*
  %4235 = load i64, i64* %PC
  %4236 = add i64 %4235, 9
  store i64 %4236, i64* %PC
  %4237 = bitcast i8* %4234 to double*
  %4238 = load double, double* %4237, align 1
  store double %4238, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 256) to double*)
  %4239 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4240 = load i64, i64* %PC
  %4241 = add i64 %4240, 9
  store i64 %4241, i64* %PC
  %4242 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %4243 = bitcast i8* %4239 to double*
  store double %4242, double* %4243, align 1, !tbaa !2451
  %4244 = getelementptr inbounds i8, i8* %4239, i64 8
  %4245 = bitcast i8* %4244 to double*
  store double 0.000000e+00, double* %4245, align 1, !tbaa !2451
  %4246 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4247 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4248 = load i64, i64* %PC
  %4249 = add i64 %4248, 9
  store i64 %4249, i64* %PC
  %4250 = bitcast i8* %4247 to double*
  %4251 = load double, double* %4250, align 1
  %4252 = getelementptr inbounds i8, i8* %4247, i64 8
  %4253 = bitcast i8* %4252 to i64*
  %4254 = load i64, i64* %4253, align 1
  %4255 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %4256 = fadd double %4251, %4255
  %4257 = bitcast i8* %4246 to double*
  store double %4256, double* %4257, align 1, !tbaa !2451
  %4258 = getelementptr inbounds i8, i8* %4246, i64 8
  %4259 = bitcast i8* %4258 to i64*
  store i64 %4254, i64* %4259, align 1, !tbaa !2451
  %4260 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4261 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4262 = load i64, i64* %PC
  %4263 = add i64 %4262, 9
  store i64 %4263, i64* %PC
  %4264 = bitcast i8* %4261 to double*
  %4265 = load double, double* %4264, align 1
  %4266 = getelementptr inbounds i8, i8* %4261, i64 8
  %4267 = bitcast i8* %4266 to i64*
  %4268 = load i64, i64* %4267, align 1
  %4269 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %4270 = fadd double %4265, %4269
  %4271 = bitcast i8* %4260 to double*
  store double %4270, double* %4271, align 1, !tbaa !2451
  %4272 = getelementptr inbounds i8, i8* %4260, i64 8
  %4273 = bitcast i8* %4272 to i64*
  store i64 %4268, i64* %4273, align 1, !tbaa !2451
  %4274 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4275 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4276 = load i64, i64* %PC
  %4277 = add i64 %4276, 9
  store i64 %4277, i64* %PC
  %4278 = bitcast i8* %4275 to double*
  %4279 = load double, double* %4278, align 1
  %4280 = getelementptr inbounds i8, i8* %4275, i64 8
  %4281 = bitcast i8* %4280 to i64*
  %4282 = load i64, i64* %4281, align 1
  %4283 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 192) to double*)
  %4284 = fadd double %4279, %4283
  %4285 = bitcast i8* %4274 to double*
  store double %4284, double* %4285, align 1, !tbaa !2451
  %4286 = getelementptr inbounds i8, i8* %4274, i64 8
  %4287 = bitcast i8* %4286 to i64*
  store i64 %4282, i64* %4287, align 1, !tbaa !2451
  %4288 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4289 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4290 = bitcast %union.vec128_t* %XMM0 to i8*
  %4291 = load i64, i64* %PC
  %4292 = add i64 %4291, 4
  store i64 %4292, i64* %PC
  %4293 = bitcast i8* %4289 to double*
  %4294 = load double, double* %4293, align 1
  %4295 = getelementptr inbounds i8, i8* %4289, i64 8
  %4296 = bitcast i8* %4295 to i64*
  %4297 = load i64, i64* %4296, align 1
  %4298 = bitcast i8* %4290 to double*
  %4299 = load double, double* %4298, align 1
  %4300 = fdiv double %4294, %4299
  %4301 = bitcast i8* %4288 to double*
  store double %4300, double* %4301, align 1, !tbaa !2451
  %4302 = getelementptr inbounds i8, i8* %4288, i64 8
  %4303 = bitcast i8* %4302 to i64*
  store i64 %4297, i64* %4303, align 1, !tbaa !2451
  %4304 = bitcast %union.vec128_t* %XMM1 to i8*
  %4305 = load i64, i64* %PC
  %4306 = add i64 %4305, 9
  store i64 %4306, i64* %PC
  %4307 = bitcast i8* %4304 to double*
  %4308 = load double, double* %4307, align 1
  store double %4308, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 264) to double*)
  %4309 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4310 = load i64, i64* %PC
  %4311 = add i64 %4310, 9
  store i64 %4311, i64* %PC
  %4312 = load double, double* bitcast (%one_type* @one to double*)
  %4313 = bitcast i8* %4309 to double*
  store double %4312, double* %4313, align 1, !tbaa !2451
  %4314 = getelementptr inbounds i8, i8* %4309, i64 8
  %4315 = bitcast i8* %4314 to double*
  store double 0.000000e+00, double* %4315, align 1, !tbaa !2451
  %4316 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4317 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4318 = load i64, i64* %PC
  %4319 = add i64 %4318, 9
  store i64 %4319, i64* %PC
  %4320 = bitcast i8* %4317 to double*
  %4321 = load double, double* %4320, align 1
  %4322 = getelementptr inbounds i8, i8* %4317, i64 8
  %4323 = bitcast i8* %4322 to i64*
  %4324 = load i64, i64* %4323, align 1
  %4325 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 264) to double*)
  %4326 = fdiv double %4321, %4325
  %4327 = bitcast i8* %4316 to double*
  store double %4326, double* %4327, align 1, !tbaa !2451
  %4328 = getelementptr inbounds i8, i8* %4316, i64 8
  %4329 = bitcast i8* %4328 to i64*
  store i64 %4324, i64* %4329, align 1, !tbaa !2451
  %4330 = bitcast %union.vec128_t* %XMM0 to i8*
  %4331 = load i64, i64* %PC
  %4332 = add i64 %4331, 9
  store i64 %4332, i64* %PC
  %4333 = bitcast i8* %4330 to double*
  %4334 = load double, double* %4333, align 1
  store double %4334, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 272) to double*)
  %4335 = load i64, i64* %RBP
  %4336 = sub i64 %4335, 312
  %4337 = load i32, i32* %EAX
  %4338 = zext i32 %4337 to i64
  %4339 = load i64, i64* %PC
  %4340 = add i64 %4339, 6
  store i64 %4340, i64* %PC
  %4341 = inttoptr i64 %4336 to i32*
  store i32 %4337, i32* %4341
  %4342 = load i64, i64* %PC
  %4343 = add i64 %4342, 2
  store i64 %4343, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %4344 = load i64, i64* %PC
  %4345 = sub i64 %4344, 8375
  %4346 = load i64, i64* %PC
  %4347 = add i64 %4346, 5
  %4348 = load i64, i64* %PC
  %4349 = add i64 %4348, 5
  store i64 %4349, i64* %PC
  %4350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4351 = load i64, i64* %4350, align 8, !tbaa !2428
  %4352 = add i64 %4351, -8
  %4353 = inttoptr i64 %4352 to i64*
  store i64 %4347, i64* %4353
  store i64 %4352, i64* %4350, align 8, !tbaa !2428
  %4354 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4345, i64* %4354, align 8, !tbaa !2428
  %4355 = load i64, i64* %PC
  %4356 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %4355, %struct.Memory* %3794)
  %4357 = load i64, i64* %PC
  %4358 = add i64 %4357, 10
  store i64 %4358, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 678), i64* %RDI, align 8, !tbaa !2428
  %4359 = load i64, i64* %RBP
  %4360 = sub i64 %4359, 80
  %4361 = load i64, i64* %PC
  %4362 = add i64 %4361, 4
  store i64 %4362, i64* %PC
  %4363 = inttoptr i64 %4360 to i64*
  %4364 = load i64, i64* %4363
  store i64 %4364, i64* %RSI, align 8, !tbaa !2428
  %4365 = load i64, i64* %RBP
  %4366 = sub i64 %4365, 316
  %4367 = load i32, i32* %EAX
  %4368 = zext i32 %4367 to i64
  %4369 = load i64, i64* %PC
  %4370 = add i64 %4369, 6
  store i64 %4370, i64* %PC
  %4371 = inttoptr i64 %4366 to i32*
  store i32 %4367, i32* %4371
  %4372 = load i64, i64* %PC
  %4373 = add i64 %4372, 2
  store i64 %4373, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2453
  %4374 = load i64, i64* %PC
  %4375 = sub i64 %4374, 8402
  %4376 = load i64, i64* %PC
  %4377 = add i64 %4376, 5
  %4378 = load i64, i64* %PC
  %4379 = add i64 %4378, 5
  store i64 %4379, i64* %PC
  %4380 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4381 = load i64, i64* %4380, align 8, !tbaa !2428
  %4382 = add i64 %4381, -8
  %4383 = inttoptr i64 %4382 to i64*
  store i64 %4377, i64* %4383
  store i64 %4382, i64* %4380, align 8, !tbaa !2428
  %4384 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4375, i64* %4384, align 8, !tbaa !2428
  %4385 = load i64, i64* %PC
  %4386 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %4385, %struct.Memory* %4356)
  %4387 = load i64, i64* %PC
  %4388 = add i64 %4387, 10
  store i64 %4388, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 706), i64* %RDI, align 8, !tbaa !2428
  %4389 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4390 = load i64, i64* %PC
  %4391 = add i64 %4390, 8
  store i64 %4391, i64* %PC
  %4392 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 72) to double*)
  %4393 = bitcast i8* %4389 to double*
  store double %4392, double* %4393, align 1, !tbaa !2451
  %4394 = getelementptr inbounds i8, i8* %4389, i64 8
  %4395 = bitcast i8* %4394 to double*
  store double 0.000000e+00, double* %4395, align 1, !tbaa !2451
  %4396 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4397 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4398 = load i64, i64* %PC
  %4399 = add i64 %4398, 9
  store i64 %4399, i64* %PC
  %4400 = bitcast i8* %4397 to double*
  %4401 = load double, double* %4400, align 1
  %4402 = getelementptr inbounds i8, i8* %4397, i64 8
  %4403 = bitcast i8* %4402 to i64*
  %4404 = load i64, i64* %4403, align 1
  %4405 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %4406 = fmul double %4401, %4405
  %4407 = bitcast i8* %4396 to double*
  store double %4406, double* %4407, align 1, !tbaa !2451
  %4408 = getelementptr inbounds i8, i8* %4396, i64 8
  %4409 = bitcast i8* %4408 to i64*
  store i64 %4404, i64* %4409, align 1, !tbaa !2451
  %4410 = load i64, i64* %RBP
  %4411 = sub i64 %4410, 320
  %4412 = load i32, i32* %EAX
  %4413 = zext i32 %4412 to i64
  %4414 = load i64, i64* %PC
  %4415 = add i64 %4414, 6
  store i64 %4415, i64* %PC
  %4416 = inttoptr i64 %4411 to i32*
  store i32 %4412, i32* %4416
  %4417 = load i64, i64* %PC
  %4418 = add i64 %4417, 2
  store i64 %4418, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %4419 = load i64, i64* %PC
  %4420 = sub i64 %4419, 8442
  %4421 = load i64, i64* %PC
  %4422 = add i64 %4421, 5
  %4423 = load i64, i64* %PC
  %4424 = add i64 %4423, 5
  store i64 %4424, i64* %PC
  %4425 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4426 = load i64, i64* %4425, align 8, !tbaa !2428
  %4427 = add i64 %4426, -8
  %4428 = inttoptr i64 %4427 to i64*
  store i64 %4422, i64* %4428
  store i64 %4427, i64* %4425, align 8, !tbaa !2428
  %4429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4420, i64* %4429, align 8, !tbaa !2428
  %4430 = load i64, i64* %PC
  %4431 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %4430, %struct.Memory* %4386)
  %4432 = load i64, i64* %PC
  %4433 = add i64 %4432, 10
  store i64 %4433, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 736), i64* %RDI, align 8, !tbaa !2428
  %4434 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4435 = load i64, i64* %PC
  %4436 = add i64 %4435, 8
  store i64 %4436, i64* %PC
  %4437 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 72) to double*)
  %4438 = bitcast i8* %4434 to double*
  store double %4437, double* %4438, align 1, !tbaa !2451
  %4439 = getelementptr inbounds i8, i8* %4434, i64 8
  %4440 = bitcast i8* %4439 to double*
  store double 0.000000e+00, double* %4440, align 1, !tbaa !2451
  %4441 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4442 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4443 = load i64, i64* %PC
  %4444 = add i64 %4443, 9
  store i64 %4444, i64* %PC
  %4445 = bitcast i8* %4442 to double*
  %4446 = load double, double* %4445, align 1
  %4447 = getelementptr inbounds i8, i8* %4442, i64 8
  %4448 = bitcast i8* %4447 to i64*
  %4449 = load i64, i64* %4448, align 1
  %4450 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 224) to double*)
  %4451 = fmul double %4446, %4450
  %4452 = bitcast i8* %4441 to double*
  store double %4451, double* %4452, align 1, !tbaa !2451
  %4453 = getelementptr inbounds i8, i8* %4441, i64 8
  %4454 = bitcast i8* %4453 to i64*
  store i64 %4449, i64* %4454, align 1, !tbaa !2451
  %4455 = load i64, i64* %RBP
  %4456 = sub i64 %4455, 324
  %4457 = load i32, i32* %EAX
  %4458 = zext i32 %4457 to i64
  %4459 = load i64, i64* %PC
  %4460 = add i64 %4459, 6
  store i64 %4460, i64* %PC
  %4461 = inttoptr i64 %4456 to i32*
  store i32 %4457, i32* %4461
  %4462 = load i64, i64* %PC
  %4463 = add i64 %4462, 2
  store i64 %4463, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %4464 = load i64, i64* %PC
  %4465 = sub i64 %4464, 8482
  %4466 = load i64, i64* %PC
  %4467 = add i64 %4466, 5
  %4468 = load i64, i64* %PC
  %4469 = add i64 %4468, 5
  store i64 %4469, i64* %PC
  %4470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4471 = load i64, i64* %4470, align 8, !tbaa !2428
  %4472 = add i64 %4471, -8
  %4473 = inttoptr i64 %4472 to i64*
  store i64 %4467, i64* %4473
  store i64 %4472, i64* %4470, align 8, !tbaa !2428
  %4474 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4465, i64* %4474, align 8, !tbaa !2428
  %4475 = load i64, i64* %PC
  %4476 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %4475, %struct.Memory* %4431)
  %4477 = load i64, i64* %PC
  %4478 = add i64 %4477, 10
  store i64 %4478, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 766), i64* %RDI, align 8, !tbaa !2428
  %4479 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4480 = load i64, i64* %PC
  %4481 = add i64 %4480, 8
  store i64 %4481, i64* %PC
  %4482 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 72) to double*)
  %4483 = bitcast i8* %4479 to double*
  store double %4482, double* %4483, align 1, !tbaa !2451
  %4484 = getelementptr inbounds i8, i8* %4479, i64 8
  %4485 = bitcast i8* %4484 to double*
  store double 0.000000e+00, double* %4485, align 1, !tbaa !2451
  %4486 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4487 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4488 = load i64, i64* %PC
  %4489 = add i64 %4488, 9
  store i64 %4489, i64* %PC
  %4490 = bitcast i8* %4487 to double*
  %4491 = load double, double* %4490, align 1
  %4492 = getelementptr inbounds i8, i8* %4487, i64 8
  %4493 = bitcast i8* %4492 to i64*
  %4494 = load i64, i64* %4493, align 1
  %4495 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 240) to double*)
  %4496 = fmul double %4491, %4495
  %4497 = bitcast i8* %4486 to double*
  store double %4496, double* %4497, align 1, !tbaa !2451
  %4498 = getelementptr inbounds i8, i8* %4486, i64 8
  %4499 = bitcast i8* %4498 to i64*
  store i64 %4494, i64* %4499, align 1, !tbaa !2451
  %4500 = load i64, i64* %RBP
  %4501 = sub i64 %4500, 328
  %4502 = load i32, i32* %EAX
  %4503 = zext i32 %4502 to i64
  %4504 = load i64, i64* %PC
  %4505 = add i64 %4504, 6
  store i64 %4505, i64* %PC
  %4506 = inttoptr i64 %4501 to i32*
  store i32 %4502, i32* %4506
  %4507 = load i64, i64* %PC
  %4508 = add i64 %4507, 2
  store i64 %4508, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %4509 = load i64, i64* %PC
  %4510 = sub i64 %4509, 8522
  %4511 = load i64, i64* %PC
  %4512 = add i64 %4511, 5
  %4513 = load i64, i64* %PC
  %4514 = add i64 %4513, 5
  store i64 %4514, i64* %PC
  %4515 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4516 = load i64, i64* %4515, align 8, !tbaa !2428
  %4517 = add i64 %4516, -8
  %4518 = inttoptr i64 %4517 to i64*
  store i64 %4512, i64* %4518
  store i64 %4517, i64* %4515, align 8, !tbaa !2428
  %4519 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4510, i64* %4519, align 8, !tbaa !2428
  %4520 = load i64, i64* %PC
  %4521 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %4520, %struct.Memory* %4476)
  %4522 = load i64, i64* %PC
  %4523 = add i64 %4522, 10
  store i64 %4523, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 796), i64* %RDI, align 8, !tbaa !2428
  %4524 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4525 = load i64, i64* %PC
  %4526 = add i64 %4525, 8
  store i64 %4526, i64* %PC
  %4527 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 72) to double*)
  %4528 = bitcast i8* %4524 to double*
  store double %4527, double* %4528, align 1, !tbaa !2451
  %4529 = getelementptr inbounds i8, i8* %4524, i64 8
  %4530 = bitcast i8* %4529 to double*
  store double 0.000000e+00, double* %4530, align 1, !tbaa !2451
  %4531 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4532 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4533 = load i64, i64* %PC
  %4534 = add i64 %4533, 9
  store i64 %4534, i64* %PC
  %4535 = bitcast i8* %4532 to double*
  %4536 = load double, double* %4535, align 1
  %4537 = getelementptr inbounds i8, i8* %4532, i64 8
  %4538 = bitcast i8* %4537 to i64*
  %4539 = load i64, i64* %4538, align 1
  %4540 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 256) to double*)
  %4541 = fmul double %4536, %4540
  %4542 = bitcast i8* %4531 to double*
  store double %4541, double* %4542, align 1, !tbaa !2451
  %4543 = getelementptr inbounds i8, i8* %4531, i64 8
  %4544 = bitcast i8* %4543 to i64*
  store i64 %4539, i64* %4544, align 1, !tbaa !2451
  %4545 = load i64, i64* %RBP
  %4546 = sub i64 %4545, 332
  %4547 = load i32, i32* %EAX
  %4548 = zext i32 %4547 to i64
  %4549 = load i64, i64* %PC
  %4550 = add i64 %4549, 6
  store i64 %4550, i64* %PC
  %4551 = inttoptr i64 %4546 to i32*
  store i32 %4547, i32* %4551
  %4552 = load i64, i64* %PC
  %4553 = add i64 %4552, 2
  store i64 %4553, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %4554 = load i64, i64* %PC
  %4555 = sub i64 %4554, 8562
  %4556 = load i64, i64* %PC
  %4557 = add i64 %4556, 5
  %4558 = load i64, i64* %PC
  %4559 = add i64 %4558, 5
  store i64 %4559, i64* %PC
  %4560 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4561 = load i64, i64* %4560, align 8, !tbaa !2428
  %4562 = add i64 %4561, -8
  %4563 = inttoptr i64 %4562 to i64*
  store i64 %4557, i64* %4563
  store i64 %4562, i64* %4560, align 8, !tbaa !2428
  %4564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4555, i64* %4564, align 8, !tbaa !2428
  %4565 = load i64, i64* %PC
  %4566 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %4565, %struct.Memory* %4521)
  %4567 = load i64, i64* %PC
  %4568 = add i64 %4567, 10
  store i64 %4568, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 826), i64* %RDI, align 8, !tbaa !2428
  %4569 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4570 = load i64, i64* %PC
  %4571 = add i64 %4570, 8
  store i64 %4571, i64* %PC
  %4572 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 72) to double*)
  %4573 = bitcast i8* %4569 to double*
  store double %4572, double* %4573, align 1, !tbaa !2451
  %4574 = getelementptr inbounds i8, i8* %4569, i64 8
  %4575 = bitcast i8* %4574 to double*
  store double 0.000000e+00, double* %4575, align 1, !tbaa !2451
  %4576 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4577 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4578 = load i64, i64* %PC
  %4579 = add i64 %4578, 9
  store i64 %4579, i64* %PC
  %4580 = bitcast i8* %4577 to double*
  %4581 = load double, double* %4580, align 1
  %4582 = getelementptr inbounds i8, i8* %4577, i64 8
  %4583 = bitcast i8* %4582 to i64*
  %4584 = load i64, i64* %4583, align 1
  %4585 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 272) to double*)
  %4586 = fmul double %4581, %4585
  %4587 = bitcast i8* %4576 to double*
  store double %4586, double* %4587, align 1, !tbaa !2451
  %4588 = getelementptr inbounds i8, i8* %4576, i64 8
  %4589 = bitcast i8* %4588 to i64*
  store i64 %4584, i64* %4589, align 1, !tbaa !2451
  %4590 = load i64, i64* %RBP
  %4591 = sub i64 %4590, 336
  %4592 = load i32, i32* %EAX
  %4593 = zext i32 %4592 to i64
  %4594 = load i64, i64* %PC
  %4595 = add i64 %4594, 6
  store i64 %4595, i64* %PC
  %4596 = inttoptr i64 %4591 to i32*
  store i32 %4592, i32* %4596
  %4597 = load i64, i64* %PC
  %4598 = add i64 %4597, 2
  store i64 %4598, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2453
  %4599 = load i64, i64* %PC
  %4600 = sub i64 %4599, 8602
  %4601 = load i64, i64* %PC
  %4602 = add i64 %4601, 5
  %4603 = load i64, i64* %PC
  %4604 = add i64 %4603, 5
  store i64 %4604, i64* %PC
  %4605 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4606 = load i64, i64* %4605, align 8, !tbaa !2428
  %4607 = add i64 %4606, -8
  %4608 = inttoptr i64 %4607 to i64*
  store i64 %4602, i64* %4608
  store i64 %4607, i64* %4605, align 8, !tbaa !2428
  %4609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4600, i64* %4609, align 8, !tbaa !2428
  %4610 = load i64, i64* %PC
  %4611 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %4610, %struct.Memory* %4566)
  %4612 = load i64, i64* %RCX
  %4613 = load i32, i32* %ECX
  %4614 = zext i32 %4613 to i64
  %4615 = load i64, i64* %PC
  %4616 = add i64 %4615, 2
  store i64 %4616, i64* %PC
  %4617 = xor i64 %4614, %4612
  %4618 = trunc i64 %4617 to i32
  %4619 = and i64 %4617, 4294967295
  store i64 %4619, i64* %RCX, align 8, !tbaa !2428
  %4620 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4620, align 1, !tbaa !2432
  %4621 = and i32 %4618, 255
  %4622 = call i32 @llvm.ctpop.i32(i32 %4621) #16
  %4623 = trunc i32 %4622 to i8
  %4624 = and i8 %4623, 1
  %4625 = xor i8 %4624, 1
  %4626 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4625, i8* %4626, align 1, !tbaa !2446
  %4627 = icmp eq i32 %4618, 0
  %4628 = zext i1 %4627 to i8
  %4629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4628, i8* %4629, align 1, !tbaa !2448
  %4630 = lshr i32 %4618, 31
  %4631 = trunc i32 %4630 to i8
  %4632 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4631, i8* %4632, align 1, !tbaa !2449
  %4633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4633, align 1, !tbaa !2450
  %4634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4634, align 1, !tbaa !2447
  %4635 = load i64, i64* %RBP
  %4636 = sub i64 %4635, 340
  %4637 = load i32, i32* %EAX
  %4638 = zext i32 %4637 to i64
  %4639 = load i64, i64* %PC
  %4640 = add i64 %4639, 6
  store i64 %4640, i64* %PC
  %4641 = inttoptr i64 %4636 to i32*
  store i32 %4637, i32* %4641
  %4642 = load i32, i32* %ECX
  %4643 = zext i32 %4642 to i64
  %4644 = load i64, i64* %PC
  %4645 = add i64 %4644, 2
  store i64 %4645, i64* %PC
  %4646 = and i64 %4643, 4294967295
  store i64 %4646, i64* %RAX, align 8, !tbaa !2428
  %4647 = load i64, i64* %RSP
  %4648 = load i64, i64* %PC
  %4649 = add i64 %4648, 7
  store i64 %4649, i64* %PC
  %4650 = add i64 352, %4647
  store i64 %4650, i64* %RSP, align 8, !tbaa !2428
  %4651 = icmp ult i64 %4650, %4647
  %4652 = icmp ult i64 %4650, 352
  %4653 = or i1 %4651, %4652
  %4654 = zext i1 %4653 to i8
  %4655 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4654, i8* %4655, align 1, !tbaa !2432
  %4656 = trunc i64 %4650 to i32
  %4657 = and i32 %4656, 255
  %4658 = call i32 @llvm.ctpop.i32(i32 %4657) #16
  %4659 = trunc i32 %4658 to i8
  %4660 = and i8 %4659, 1
  %4661 = xor i8 %4660, 1
  %4662 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4661, i8* %4662, align 1, !tbaa !2446
  %4663 = xor i64 352, %4647
  %4664 = xor i64 %4663, %4650
  %4665 = lshr i64 %4664, 4
  %4666 = trunc i64 %4665 to i8
  %4667 = and i8 %4666, 1
  %4668 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4667, i8* %4668, align 1, !tbaa !2447
  %4669 = icmp eq i64 %4650, 0
  %4670 = zext i1 %4669 to i8
  %4671 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4670, i8* %4671, align 1, !tbaa !2448
  %4672 = lshr i64 %4650, 63
  %4673 = trunc i64 %4672 to i8
  %4674 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4673, i8* %4674, align 1, !tbaa !2449
  %4675 = lshr i64 %4647, 63
  %4676 = xor i64 %4672, %4675
  %4677 = add nuw nsw i64 %4676, %4672
  %4678 = icmp eq i64 %4677, 2
  %4679 = zext i1 %4678 to i8
  %4680 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4679, i8* %4680, align 1, !tbaa !2450
  %4681 = load i64, i64* %PC
  %4682 = add i64 %4681, 1
  store i64 %4682, i64* %PC
  %4683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4684 = load i64, i64* %4683, align 8, !tbaa !2428
  %4685 = add i64 %4684, 8
  %4686 = inttoptr i64 %4684 to i64*
  %4687 = load i64, i64* %4686
  store i64 %4687, i64* %RBP, align 8, !tbaa !2428
  store i64 %4685, i64* %4683, align 8, !tbaa !2428
  %4688 = load i64, i64* %PC
  %4689 = add i64 %4688, 1
  store i64 %4689, i64* %PC
  %4690 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4692 = load i64, i64* %4691, align 8, !tbaa !2428
  %4693 = inttoptr i64 %4692 to i64*
  %4694 = load i64, i64* %4693
  store i64 %4694, i64* %4690, align 8, !tbaa !2428
  %4695 = add i64 %4692, 8
  store i64 %4695, i64* %4691, align 8, !tbaa !2428
  ret %struct.Memory* %4611

block_40086f:                                     ; preds = %block_400844
  %4696 = add i64 %4929, 10
  store i64 %4696, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %4697 = load i64, i64* %PC
  %4698 = add i64 %4697, 7543
  %4699 = load i64, i64* %PC
  %4700 = add i64 %4699, 5
  %4701 = load i64, i64* %PC
  %4702 = add i64 %4701, 5
  store i64 %4702, i64* %PC
  %4703 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4704 = load i64, i64* %4703, align 8, !tbaa !2428
  %4705 = add i64 %4704, -8
  %4706 = inttoptr i64 %4705 to i64*
  store i64 %4700, i64* %4706
  store i64 %4705, i64* %4703, align 8, !tbaa !2428
  %4707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4698, i64* %4707, align 8, !tbaa !2428
  %4708 = load i64, i64* %PC
  %4709 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %4708, %struct.Memory* %MEMORY.4)
  %4710 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4711 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4712 = bitcast %union.vec128_t* %XMM0 to i8*
  %4713 = load i64, i64* %PC
  %4714 = add i64 %4713, 3
  store i64 %4714, i64* %PC
  %4715 = bitcast i8* %4711 to i64*
  %4716 = load i64, i64* %4715, align 1
  %4717 = getelementptr inbounds i8, i8* %4711, i64 8
  %4718 = bitcast i8* %4717 to i64*
  %4719 = load i64, i64* %4718, align 1
  %4720 = bitcast i8* %4712 to i64*
  %4721 = load i64, i64* %4720, align 1
  %4722 = getelementptr inbounds i8, i8* %4712, i64 8
  %4723 = bitcast i8* %4722 to i64*
  %4724 = load i64, i64* %4723, align 1
  %4725 = xor i64 %4721, %4716
  %4726 = xor i64 %4724, %4719
  %4727 = trunc i64 %4725 to i32
  %4728 = lshr i64 %4725, 32
  %4729 = trunc i64 %4728 to i32
  %4730 = bitcast i8* %4710 to i32*
  store i32 %4727, i32* %4730, align 1, !tbaa !2454
  %4731 = getelementptr inbounds i8, i8* %4710, i64 4
  %4732 = bitcast i8* %4731 to i32*
  store i32 %4729, i32* %4732, align 1, !tbaa !2454
  %4733 = trunc i64 %4726 to i32
  %4734 = getelementptr inbounds i8, i8* %4710, i64 8
  %4735 = bitcast i8* %4734 to i32*
  store i32 %4733, i32* %4735, align 1, !tbaa !2454
  %4736 = lshr i64 %4726, 32
  %4737 = trunc i64 %4736 to i32
  %4738 = getelementptr inbounds i8, i8* %4710, i64 12
  %4739 = bitcast i8* %4738 to i32*
  store i32 %4737, i32* %4739, align 1, !tbaa !2454
  %4740 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4741 = load i64, i64* %PC
  %4742 = add i64 %4741, 9
  store i64 %4742, i64* %PC
  %4743 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %4744 = bitcast i8* %4740 to double*
  store double %4743, double* %4744, align 1, !tbaa !2451
  %4745 = getelementptr inbounds i8, i8* %4740, i64 8
  %4746 = bitcast i8* %4745 to double*
  store double 0.000000e+00, double* %4746, align 1, !tbaa !2451
  %4747 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4748 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4749 = load i64, i64* %PC
  %4750 = add i64 %4749, 9
  store i64 %4750, i64* %PC
  %4751 = bitcast i8* %4748 to double*
  %4752 = load double, double* %4751, align 1
  %4753 = getelementptr inbounds i8, i8* %4748, i64 8
  %4754 = bitcast i8* %4753 to i64*
  %4755 = load i64, i64* %4754, align 1
  %4756 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %4757 = fmul double %4752, %4756
  %4758 = bitcast i8* %4747 to double*
  store double %4757, double* %4758, align 1, !tbaa !2451
  %4759 = getelementptr inbounds i8, i8* %4747, i64 8
  %4760 = bitcast i8* %4759 to i64*
  store i64 %4755, i64* %4760, align 1, !tbaa !2451
  %4761 = bitcast %union.vec128_t* %XMM1 to i8*
  %4762 = load i64, i64* %PC
  %4763 = add i64 %4762, 9
  store i64 %4763, i64* %PC
  %4764 = bitcast i8* %4761 to double*
  %4765 = load double, double* %4764, align 1
  store double %4765, double* bitcast (%nulltime_type* @nulltime to double*)
  %4766 = bitcast %union.vec128_t* %XMM0 to i8*
  %4767 = load i64, i64* %PC
  %4768 = add i64 %4767, 9
  store i64 %4768, i64* %PC
  %4769 = bitcast i8* %4766 to double*
  %4770 = load double, double* %4769, align 1
  %4771 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %4772 = fcmp uno double %4770, %4771
  br i1 %4772, label %4773, label %4785

; <label>:4773:                                   ; preds = %block_40086f
  %4774 = fadd double %4770, %4771
  %4775 = bitcast double %4774 to i64
  %4776 = and i64 %4775, 9221120237041090560
  %4777 = icmp eq i64 %4776, 9218868437227405312
  %4778 = and i64 %4775, 2251799813685247
  %4779 = icmp ne i64 %4778, 0
  %4780 = and i1 %4777, %4779
  br i1 %4780, label %4781, label %4791

; <label>:4781:                                   ; preds = %4773
  %4782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4783 = load i64, i64* %4782, align 8, !tbaa !2428
  %4784 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4783, %struct.Memory* %4709) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1

; <label>:4785:                                   ; preds = %block_40086f
  %4786 = fcmp ogt double %4770, %4771
  br i1 %4786, label %4791, label %4787

; <label>:4787:                                   ; preds = %4785
  %4788 = fcmp olt double %4770, %4771
  br i1 %4788, label %4791, label %4789

; <label>:4789:                                   ; preds = %4787
  %4790 = fcmp oeq double %4770, %4771
  br i1 %4790, label %4791, label %4798

; <label>:4791:                                   ; preds = %4789, %4787, %4785, %4773
  %4792 = phi i8 [ 0, %4785 ], [ 0, %4787 ], [ 1, %4789 ], [ 1, %4773 ]
  %4793 = phi i8 [ 0, %4785 ], [ 0, %4787 ], [ 0, %4789 ], [ 1, %4773 ]
  %4794 = phi i8 [ 0, %4785 ], [ 1, %4787 ], [ 0, %4789 ], [ 1, %4773 ]
  %4795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4792, i8* %4795, align 1, !tbaa !2453
  %4796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4793, i8* %4796, align 1, !tbaa !2453
  %4797 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4794, i8* %4797, align 1, !tbaa !2453
  br label %4798

; <label>:4798:                                   ; preds = %4791, %4789
  %4799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4799, align 1, !tbaa !2453
  %4800 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %4800, align 1, !tbaa !2453
  %4801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4801, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1: ; preds = %4781, %4798
  %4802 = phi %struct.Memory* [ %4784, %4781 ], [ %4709, %4798 ]
  %4803 = load i64, i64* %RBP
  %4804 = sub i64 %4803, 128
  %4805 = load i32, i32* %EAX
  %4806 = zext i32 %4805 to i64
  %4807 = load i64, i64* %PC
  %4808 = add i64 %4807, 3
  store i64 %4808, i64* %PC
  %4809 = inttoptr i64 %4804 to i32*
  store i32 %4805, i32* %4809
  %4810 = load i64, i64* %PC
  %4811 = add i64 %4810, 18
  %4812 = load i64, i64* %PC
  %4813 = add i64 %4812, 6
  %4814 = load i64, i64* %PC
  %4815 = add i64 %4814, 6
  store i64 %4815, i64* %PC
  %4816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4817 = load i8, i8* %4816, align 1, !tbaa !2432
  %4818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4819 = load i8, i8* %4818, align 1, !tbaa !2448
  %4820 = or i8 %4819, %4817
  %4821 = icmp ne i8 %4820, 0
  %4822 = zext i1 %4821 to i8
  store i8 %4822, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %4823 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4824 = select i1 %4821, i64 %4811, i64 %4813
  store i64 %4824, i64* %4823, align 8, !tbaa !2428
  %4825 = load i8, i8* %BRANCH_TAKEN
  %4826 = icmp eq i8 %4825, 1
  br i1 %4826, label %block_4008ba, label %block_4008ae

block_400844:                                     ; preds = %block_400859, %block_400807
  %MEMORY.4 = phi %struct.Memory* [ %12222, %block_400807 ], [ %MEMORY.4, %block_400859 ]
  %4827 = load i64, i64* %RBP
  %4828 = sub i64 %4827, 72
  %4829 = load i64, i64* %PC
  %4830 = add i64 %4829, 4
  store i64 %4830, i64* %PC
  %4831 = inttoptr i64 %4828 to i64*
  %4832 = load i64, i64* %4831
  store i64 %4832, i64* %RAX, align 8, !tbaa !2428
  %4833 = load i64, i64* %RBP
  %4834 = sub i64 %4833, 88
  %4835 = load i64, i64* %PC
  %4836 = add i64 %4835, 4
  store i64 %4836, i64* %PC
  %4837 = inttoptr i64 %4834 to i64*
  %4838 = load i64, i64* %4837
  store i64 %4838, i64* %RCX, align 8, !tbaa !2428
  %4839 = load i64, i64* %RCX
  %4840 = load i64, i64* %PC
  %4841 = add i64 %4840, 4
  store i64 %4841, i64* %PC
  %4842 = sub i64 %4839, 1
  store i64 %4842, i64* %RCX, align 8, !tbaa !2428
  %4843 = icmp ult i64 %4839, 1
  %4844 = zext i1 %4843 to i8
  %4845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4844, i8* %4845, align 1, !tbaa !2432
  %4846 = trunc i64 %4842 to i32
  %4847 = and i32 %4846, 255
  %4848 = call i32 @llvm.ctpop.i32(i32 %4847) #16
  %4849 = trunc i32 %4848 to i8
  %4850 = and i8 %4849, 1
  %4851 = xor i8 %4850, 1
  %4852 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4851, i8* %4852, align 1, !tbaa !2446
  %4853 = xor i64 1, %4839
  %4854 = xor i64 %4853, %4842
  %4855 = lshr i64 %4854, 4
  %4856 = trunc i64 %4855 to i8
  %4857 = and i8 %4856, 1
  %4858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4857, i8* %4858, align 1, !tbaa !2447
  %4859 = icmp eq i64 %4842, 0
  %4860 = zext i1 %4859 to i8
  %4861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4860, i8* %4861, align 1, !tbaa !2448
  %4862 = lshr i64 %4842, 63
  %4863 = trunc i64 %4862 to i8
  %4864 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4863, i8* %4864, align 1, !tbaa !2449
  %4865 = lshr i64 %4839, 63
  %4866 = xor i64 %4862, %4865
  %4867 = add nuw nsw i64 %4866, %4865
  %4868 = icmp eq i64 %4867, 2
  %4869 = zext i1 %4868 to i8
  %4870 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4869, i8* %4870, align 1, !tbaa !2450
  %4871 = load i64, i64* %RAX
  %4872 = load i64, i64* %RCX
  %4873 = load i64, i64* %PC
  %4874 = add i64 %4873, 3
  store i64 %4874, i64* %PC
  %4875 = sub i64 %4871, %4872
  %4876 = icmp ult i64 %4871, %4872
  %4877 = zext i1 %4876 to i8
  %4878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4877, i8* %4878, align 1, !tbaa !2432
  %4879 = trunc i64 %4875 to i32
  %4880 = and i32 %4879, 255
  %4881 = call i32 @llvm.ctpop.i32(i32 %4880) #16
  %4882 = trunc i32 %4881 to i8
  %4883 = and i8 %4882, 1
  %4884 = xor i8 %4883, 1
  %4885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4884, i8* %4885, align 1, !tbaa !2446
  %4886 = xor i64 %4872, %4871
  %4887 = xor i64 %4886, %4875
  %4888 = lshr i64 %4887, 4
  %4889 = trunc i64 %4888 to i8
  %4890 = and i8 %4889, 1
  %4891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4890, i8* %4891, align 1, !tbaa !2447
  %4892 = icmp eq i64 %4875, 0
  %4893 = zext i1 %4892 to i8
  %4894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4893, i8* %4894, align 1, !tbaa !2448
  %4895 = lshr i64 %4875, 63
  %4896 = trunc i64 %4895 to i8
  %4897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4896, i8* %4897, align 1, !tbaa !2449
  %4898 = lshr i64 %4871, 63
  %4899 = lshr i64 %4872, 63
  %4900 = xor i64 %4899, %4898
  %4901 = xor i64 %4895, %4898
  %4902 = add nuw nsw i64 %4901, %4900
  %4903 = icmp eq i64 %4902, 2
  %4904 = zext i1 %4903 to i8
  %4905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4904, i8* %4905, align 1, !tbaa !2450
  %4906 = load i64, i64* %PC
  %4907 = add i64 %4906, 28
  %4908 = load i64, i64* %PC
  %4909 = add i64 %4908, 6
  %4910 = load i64, i64* %PC
  %4911 = add i64 %4910, 6
  store i64 %4911, i64* %PC
  %4912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4913 = load i8, i8* %4912, align 1, !tbaa !2448
  %4914 = icmp eq i8 %4913, 0
  %4915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4916 = load i8, i8* %4915, align 1, !tbaa !2449
  %4917 = icmp ne i8 %4916, 0
  %4918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4919 = load i8, i8* %4918, align 1, !tbaa !2450
  %4920 = icmp ne i8 %4919, 0
  %4921 = xor i1 %4917, %4920
  %4922 = xor i1 %4921, true
  %4923 = and i1 %4914, %4922
  %4924 = zext i1 %4923 to i8
  store i8 %4924, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %4925 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4926 = select i1 %4923, i64 %4907, i64 %4909
  store i64 %4926, i64* %4925, align 8, !tbaa !2428
  %4927 = load i8, i8* %BRANCH_TAKEN
  %4928 = icmp eq i8 %4927, 1
  %4929 = load i64, i64* %PC
  br i1 %4928, label %block_40086f, label %block_400859

block_400e60:                                     ; preds = %block_400c7a, %block_400e75
  %MEMORY.5 = phi %struct.Memory* [ %12938, %block_400c7a ], [ %MEMORY.5, %block_400e75 ]
  %4930 = load i64, i64* %RBP
  %4931 = sub i64 %4930, 72
  %4932 = load i64, i64* %PC
  %4933 = add i64 %4932, 4
  store i64 %4933, i64* %PC
  %4934 = inttoptr i64 %4931 to i64*
  %4935 = load i64, i64* %4934
  store i64 %4935, i64* %RAX, align 8, !tbaa !2428
  %4936 = load i64, i64* %RBP
  %4937 = sub i64 %4936, 80
  %4938 = load i64, i64* %PC
  %4939 = add i64 %4938, 4
  store i64 %4939, i64* %PC
  %4940 = inttoptr i64 %4937 to i64*
  %4941 = load i64, i64* %4940
  store i64 %4941, i64* %RCX, align 8, !tbaa !2428
  %4942 = load i64, i64* %RCX
  %4943 = load i64, i64* %PC
  %4944 = add i64 %4943, 4
  store i64 %4944, i64* %PC
  %4945 = sub i64 %4942, 1
  store i64 %4945, i64* %RCX, align 8, !tbaa !2428
  %4946 = icmp ult i64 %4942, 1
  %4947 = zext i1 %4946 to i8
  %4948 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4947, i8* %4948, align 1, !tbaa !2432
  %4949 = trunc i64 %4945 to i32
  %4950 = and i32 %4949, 255
  %4951 = call i32 @llvm.ctpop.i32(i32 %4950) #16
  %4952 = trunc i32 %4951 to i8
  %4953 = and i8 %4952, 1
  %4954 = xor i8 %4953, 1
  %4955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4954, i8* %4955, align 1, !tbaa !2446
  %4956 = xor i64 1, %4942
  %4957 = xor i64 %4956, %4945
  %4958 = lshr i64 %4957, 4
  %4959 = trunc i64 %4958 to i8
  %4960 = and i8 %4959, 1
  %4961 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4960, i8* %4961, align 1, !tbaa !2447
  %4962 = icmp eq i64 %4945, 0
  %4963 = zext i1 %4962 to i8
  %4964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4963, i8* %4964, align 1, !tbaa !2448
  %4965 = lshr i64 %4945, 63
  %4966 = trunc i64 %4965 to i8
  %4967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4966, i8* %4967, align 1, !tbaa !2449
  %4968 = lshr i64 %4942, 63
  %4969 = xor i64 %4965, %4968
  %4970 = add nuw nsw i64 %4969, %4968
  %4971 = icmp eq i64 %4970, 2
  %4972 = zext i1 %4971 to i8
  %4973 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4972, i8* %4973, align 1, !tbaa !2450
  %4974 = load i64, i64* %RAX
  %4975 = load i64, i64* %RCX
  %4976 = load i64, i64* %PC
  %4977 = add i64 %4976, 3
  store i64 %4977, i64* %PC
  %4978 = sub i64 %4974, %4975
  %4979 = icmp ult i64 %4974, %4975
  %4980 = zext i1 %4979 to i8
  %4981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4980, i8* %4981, align 1, !tbaa !2432
  %4982 = trunc i64 %4978 to i32
  %4983 = and i32 %4982, 255
  %4984 = call i32 @llvm.ctpop.i32(i32 %4983) #16
  %4985 = trunc i32 %4984 to i8
  %4986 = and i8 %4985, 1
  %4987 = xor i8 %4986, 1
  %4988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4987, i8* %4988, align 1, !tbaa !2446
  %4989 = xor i64 %4975, %4974
  %4990 = xor i64 %4989, %4978
  %4991 = lshr i64 %4990, 4
  %4992 = trunc i64 %4991 to i8
  %4993 = and i8 %4992, 1
  %4994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4993, i8* %4994, align 1, !tbaa !2447
  %4995 = icmp eq i64 %4978, 0
  %4996 = zext i1 %4995 to i8
  %4997 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4996, i8* %4997, align 1, !tbaa !2448
  %4998 = lshr i64 %4978, 63
  %4999 = trunc i64 %4998 to i8
  %5000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4999, i8* %5000, align 1, !tbaa !2449
  %5001 = lshr i64 %4974, 63
  %5002 = lshr i64 %4975, 63
  %5003 = xor i64 %5002, %5001
  %5004 = xor i64 %4998, %5001
  %5005 = add nuw nsw i64 %5004, %5003
  %5006 = icmp eq i64 %5005, 2
  %5007 = zext i1 %5006 to i8
  %5008 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5007, i8* %5008, align 1, !tbaa !2450
  %5009 = load i64, i64* %PC
  %5010 = add i64 %5009, 188
  %5011 = load i64, i64* %PC
  %5012 = add i64 %5011, 6
  %5013 = load i64, i64* %PC
  %5014 = add i64 %5013, 6
  store i64 %5014, i64* %PC
  %5015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5016 = load i8, i8* %5015, align 1, !tbaa !2448
  %5017 = icmp eq i8 %5016, 0
  %5018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5019 = load i8, i8* %5018, align 1, !tbaa !2449
  %5020 = icmp ne i8 %5019, 0
  %5021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5022 = load i8, i8* %5021, align 1, !tbaa !2450
  %5023 = icmp ne i8 %5022, 0
  %5024 = xor i1 %5020, %5023
  %5025 = xor i1 %5024, true
  %5026 = and i1 %5017, %5025
  %5027 = zext i1 %5026 to i8
  store i8 %5027, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %5028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %5029 = select i1 %5026, i64 %5010, i64 %5012
  store i64 %5029, i64* %5028, align 8, !tbaa !2428
  %5030 = load i8, i8* %BRANCH_TAKEN
  %5031 = icmp eq i8 %5030, 1
  br i1 %5031, label %block_400f2b, label %block_400e75

block_4008ba:                                     ; preds = %block_4008ae, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1
  %MEMORY.6 = phi %struct.Memory* [ %4802, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1 ], [ %4802, %block_4008ae ]
  %5032 = load i64, i64* %PC
  %5033 = add i64 %5032, 10
  store i64 %5033, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 390), i64* %RDI, align 8, !tbaa !2428
  %5034 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5035 = load i64, i64* %PC
  %5036 = add i64 %5035, 8
  store i64 %5036, i64* %PC
  %5037 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 72) to double*)
  %5038 = bitcast i8* %5034 to double*
  store double %5037, double* %5038, align 1, !tbaa !2451
  %5039 = getelementptr inbounds i8, i8* %5034, i64 8
  %5040 = bitcast i8* %5039 to double*
  store double 0.000000e+00, double* %5040, align 1, !tbaa !2451
  %5041 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5042 = load i64, i64* %PC
  %5043 = add i64 %5042, 8
  store i64 %5043, i64* %PC
  %5044 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 80) to double*)
  %5045 = bitcast i8* %5041 to double*
  store double %5044, double* %5045, align 1, !tbaa !2451
  %5046 = getelementptr inbounds i8, i8* %5041, i64 8
  %5047 = bitcast i8* %5046 to double*
  store double 0.000000e+00, double* %5047, align 1, !tbaa !2451
  %5048 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5049 = load i64, i64* %PC
  %5050 = add i64 %5049, 8
  store i64 %5050, i64* %PC
  %5051 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 88) to double*)
  %5052 = bitcast i8* %5048 to double*
  store double %5051, double* %5052, align 1, !tbaa !2451
  %5053 = getelementptr inbounds i8, i8* %5048, i64 8
  %5054 = bitcast i8* %5053 to double*
  store double 0.000000e+00, double* %5054, align 1, !tbaa !2451
  %5055 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5056 = load i64, i64* %PC
  %5057 = add i64 %5056, 9
  store i64 %5057, i64* %PC
  %5058 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %5059 = bitcast i8* %5055 to double*
  store double %5058, double* %5059, align 1, !tbaa !2451
  %5060 = getelementptr inbounds i8, i8* %5055, i64 8
  %5061 = bitcast i8* %5060 to double*
  store double 0.000000e+00, double* %5061, align 1, !tbaa !2451
  %5062 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5063 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5064 = load i64, i64* %PC
  %5065 = add i64 %5064, 9
  store i64 %5065, i64* %PC
  %5066 = bitcast i8* %5063 to double*
  %5067 = load double, double* %5066, align 1
  %5068 = getelementptr inbounds i8, i8* %5063, i64 8
  %5069 = bitcast i8* %5068 to i64*
  %5070 = load i64, i64* %5069, align 1
  %5071 = load double, double* bitcast (%sa_type* @sa to double*)
  %5072 = fmul double %5067, %5071
  %5073 = bitcast i8* %5062 to double*
  store double %5072, double* %5073, align 1, !tbaa !2451
  %5074 = getelementptr inbounds i8, i8* %5062, i64 8
  %5075 = bitcast i8* %5074 to i64*
  store i64 %5070, i64* %5075, align 1, !tbaa !2451
  %5076 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5077 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5078 = load i64, i64* %PC
  %5079 = add i64 %5078, 9
  store i64 %5079, i64* %PC
  %5080 = bitcast i8* %5077 to double*
  %5081 = load double, double* %5080, align 1
  %5082 = getelementptr inbounds i8, i8* %5077, i64 8
  %5083 = bitcast i8* %5082 to i64*
  %5084 = load i64, i64* %5083, align 1
  %5085 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %5086 = fsub double %5081, %5085
  %5087 = bitcast i8* %5076 to double*
  store double %5086, double* %5087, align 1, !tbaa !2451
  %5088 = getelementptr inbounds i8, i8* %5076, i64 8
  %5089 = bitcast i8* %5088 to i64*
  store i64 %5084, i64* %5089, align 1, !tbaa !2451
  %5090 = bitcast %union.vec128_t* %XMM3 to i8*
  %5091 = load i64, i64* %PC
  %5092 = add i64 %5091, 9
  store i64 %5092, i64* %PC
  %5093 = bitcast i8* %5090 to double*
  %5094 = load double, double* %5093, align 1
  store double %5094, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 16) to double*)
  %5095 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5096 = load i64, i64* %PC
  %5097 = add i64 %5096, 9
  store i64 %5097, i64* %PC
  %5098 = load double, double* bitcast (%D1_0_type* @D1_0 to double*)
  %5099 = bitcast i8* %5095 to double*
  store double %5098, double* %5099, align 1, !tbaa !2451
  %5100 = getelementptr inbounds i8, i8* %5095, i64 8
  %5101 = bitcast i8* %5100 to double*
  store double 0.000000e+00, double* %5101, align 1, !tbaa !2451
  %5102 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5103 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5104 = load i64, i64* %PC
  %5105 = add i64 %5104, 9
  store i64 %5105, i64* %PC
  %5106 = bitcast i8* %5103 to double*
  %5107 = load double, double* %5106, align 1
  %5108 = getelementptr inbounds i8, i8* %5103, i64 8
  %5109 = bitcast i8* %5108 to i64*
  %5110 = load i64, i64* %5109, align 1
  %5111 = load double, double* bitcast (%D2_0_type* @D2_0 to double*)
  %5112 = fadd double %5107, %5111
  %5113 = bitcast i8* %5102 to double*
  store double %5112, double* %5113, align 1, !tbaa !2451
  %5114 = getelementptr inbounds i8, i8* %5102, i64 8
  %5115 = bitcast i8* %5114 to i64*
  store i64 %5110, i64* %5115, align 1, !tbaa !2451
  %5116 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5117 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5118 = load i64, i64* %PC
  %5119 = add i64 %5118, 9
  store i64 %5119, i64* %PC
  %5120 = bitcast i8* %5117 to double*
  %5121 = load double, double* %5120, align 1
  %5122 = getelementptr inbounds i8, i8* %5117, i64 8
  %5123 = bitcast i8* %5122 to i64*
  %5124 = load i64, i64* %5123, align 1
  %5125 = load double, double* bitcast (%D3_type* @D3 to double*)
  %5126 = fadd double %5121, %5125
  %5127 = bitcast i8* %5116 to double*
  store double %5126, double* %5127, align 1, !tbaa !2451
  %5128 = getelementptr inbounds i8, i8* %5116, i64 8
  %5129 = bitcast i8* %5128 to i64*
  store i64 %5124, i64* %5129, align 1, !tbaa !2451
  %5130 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5131 = load i64, i64* %PC
  %5132 = add i64 %5131, 9
  store i64 %5132, i64* %PC
  %5133 = load double, double* bitcast (%one_type* @one to double*)
  %5134 = bitcast i8* %5130 to double*
  store double %5133, double* %5134, align 1, !tbaa !2451
  %5135 = getelementptr inbounds i8, i8* %5130, i64 8
  %5136 = bitcast i8* %5135 to double*
  store double 0.000000e+00, double* %5136, align 1, !tbaa !2451
  %5137 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5138 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5139 = load i64, i64* %PC
  %5140 = add i64 %5139, 9
  store i64 %5140, i64* %PC
  %5141 = bitcast i8* %5138 to double*
  %5142 = load double, double* %5141, align 1
  %5143 = getelementptr inbounds i8, i8* %5138, i64 8
  %5144 = bitcast i8* %5143 to i64*
  %5145 = load i64, i64* %5144, align 1
  %5146 = load double, double* bitcast (%D1_0_type* @D1_0 to double*)
  %5147 = fadd double %5142, %5146
  %5148 = bitcast i8* %5137 to double*
  store double %5147, double* %5148, align 1, !tbaa !2451
  %5149 = getelementptr inbounds i8, i8* %5137, i64 8
  %5150 = bitcast i8* %5149 to i64*
  store i64 %5145, i64* %5150, align 1, !tbaa !2451
  %5151 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5152 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5153 = load i64, i64* %PC
  %5154 = add i64 %5153, 9
  store i64 %5154, i64* %PC
  %5155 = bitcast i8* %5152 to double*
  %5156 = load double, double* %5155, align 1
  %5157 = getelementptr inbounds i8, i8* %5152, i64 8
  %5158 = bitcast i8* %5157 to i64*
  %5159 = load i64, i64* %5158, align 1
  %5160 = load double, double* bitcast (%E2_0_type* @E2_0 to double*)
  %5161 = fadd double %5156, %5160
  %5162 = bitcast i8* %5151 to double*
  store double %5161, double* %5162, align 1, !tbaa !2451
  %5163 = getelementptr inbounds i8, i8* %5151, i64 8
  %5164 = bitcast i8* %5163 to i64*
  store i64 %5159, i64* %5164, align 1, !tbaa !2451
  %5165 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5166 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5167 = load i64, i64* %PC
  %5168 = add i64 %5167, 9
  store i64 %5168, i64* %PC
  %5169 = bitcast i8* %5166 to double*
  %5170 = load double, double* %5169, align 1
  %5171 = getelementptr inbounds i8, i8* %5166, i64 8
  %5172 = bitcast i8* %5171 to i64*
  %5173 = load i64, i64* %5172, align 1
  %5174 = load double, double* bitcast (%E3_type* @E3 to double*)
  %5175 = fadd double %5170, %5174
  %5176 = bitcast i8* %5165 to double*
  store double %5175, double* %5176, align 1, !tbaa !2451
  %5177 = getelementptr inbounds i8, i8* %5165, i64 8
  %5178 = bitcast i8* %5177 to i64*
  store i64 %5173, i64* %5178, align 1, !tbaa !2451
  %5179 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5180 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5181 = bitcast %union.vec128_t* %XMM4 to i8*
  %5182 = load i64, i64* %PC
  %5183 = add i64 %5182, 4
  store i64 %5183, i64* %PC
  %5184 = bitcast i8* %5180 to double*
  %5185 = load double, double* %5184, align 1
  %5186 = getelementptr inbounds i8, i8* %5180, i64 8
  %5187 = bitcast i8* %5186 to i64*
  %5188 = load i64, i64* %5187, align 1
  %5189 = bitcast i8* %5181 to double*
  %5190 = load double, double* %5189, align 1
  %5191 = fdiv double %5185, %5190
  %5192 = bitcast i8* %5179 to double*
  store double %5191, double* %5192, align 1, !tbaa !2451
  %5193 = getelementptr inbounds i8, i8* %5179, i64 8
  %5194 = bitcast i8* %5193 to i64*
  store i64 %5188, i64* %5194, align 1, !tbaa !2451
  %5195 = bitcast %union.vec128_t* %XMM3 to i8*
  %5196 = load i64, i64* %PC
  %5197 = add i64 %5196, 9
  store i64 %5197, i64* %PC
  %5198 = bitcast i8* %5195 to double*
  %5199 = load double, double* %5198, align 1
  store double %5199, double* bitcast (%sa_type* @sa to double*)
  %5200 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5201 = load i64, i64* %PC
  %5202 = add i64 %5201, 9
  store i64 %5202, i64* %PC
  %5203 = load double, double* bitcast (%D1_0_type* @D1_0 to double*)
  %5204 = bitcast i8* %5200 to double*
  store double %5203, double* %5204, align 1, !tbaa !2451
  %5205 = getelementptr inbounds i8, i8* %5200, i64 8
  %5206 = bitcast i8* %5205 to double*
  store double 0.000000e+00, double* %5206, align 1, !tbaa !2451
  %5207 = bitcast %union.vec128_t* %XMM3 to i8*
  %5208 = load i64, i64* %PC
  %5209 = add i64 %5208, 9
  store i64 %5209, i64* %PC
  %5210 = bitcast i8* %5207 to double*
  %5211 = load double, double* %5210, align 1
  store double %5211, double* bitcast (%sb_type* @sb to double*)
  %5212 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5213 = load i64, i64* %PC
  %5214 = add i64 %5213, 9
  store i64 %5214, i64* %PC
  %5215 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 16) to double*)
  %5216 = bitcast i8* %5212 to double*
  store double %5215, double* %5216, align 1, !tbaa !2451
  %5217 = getelementptr inbounds i8, i8* %5212, i64 8
  %5218 = bitcast i8* %5217 to double*
  store double 0.000000e+00, double* %5218, align 1, !tbaa !2451
  %5219 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5220 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5221 = bitcast %union.vec128_t* %XMM2 to i8*
  %5222 = load i64, i64* %PC
  %5223 = add i64 %5222, 4
  store i64 %5223, i64* %PC
  %5224 = bitcast i8* %5220 to double*
  %5225 = load double, double* %5224, align 1
  %5226 = getelementptr inbounds i8, i8* %5220, i64 8
  %5227 = bitcast i8* %5226 to i64*
  %5228 = load i64, i64* %5227, align 1
  %5229 = bitcast i8* %5221 to double*
  %5230 = load double, double* %5229, align 1
  %5231 = fdiv double %5225, %5230
  %5232 = bitcast i8* %5219 to double*
  store double %5231, double* %5232, align 1, !tbaa !2451
  %5233 = getelementptr inbounds i8, i8* %5219, i64 8
  %5234 = bitcast i8* %5233 to i64*
  store i64 %5228, i64* %5234, align 1, !tbaa !2451
  %5235 = bitcast %union.vec128_t* %XMM3 to i8*
  %5236 = load i64, i64* %PC
  %5237 = add i64 %5236, 9
  store i64 %5237, i64* %PC
  %5238 = bitcast i8* %5235 to double*
  %5239 = load double, double* %5238, align 1
  store double %5239, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 24) to double*)
  %5240 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5241 = load i64, i64* %RBP
  %5242 = sub i64 %5241, 48
  %5243 = load i64, i64* %PC
  %5244 = add i64 %5243, 5
  store i64 %5244, i64* %PC
  %5245 = inttoptr i64 %5242 to double*
  %5246 = load double, double* %5245
  %5247 = bitcast i8* %5240 to double*
  store double %5246, double* %5247, align 1, !tbaa !2451
  %5248 = getelementptr inbounds i8, i8* %5240, i64 8
  %5249 = bitcast i8* %5248 to double*
  store double 0.000000e+00, double* %5249, align 1, !tbaa !2451
  %5250 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5251 = load i64, i64* %PC
  %5252 = add i64 %5251, 9
  store i64 %5252, i64* %PC
  %5253 = load double, double* bitcast (%sa_type* @sa to double*)
  %5254 = bitcast i8* %5250 to double*
  store double %5253, double* %5254, align 1, !tbaa !2451
  %5255 = getelementptr inbounds i8, i8* %5250, i64 8
  %5256 = bitcast i8* %5255 to double*
  store double 0.000000e+00, double* %5256, align 1, !tbaa !2451
  %5257 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5258 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5259 = load i64, i64* %PC
  %5260 = add i64 %5259, 9
  store i64 %5260, i64* %PC
  %5261 = bitcast i8* %5258 to double*
  %5262 = load double, double* %5261, align 1
  %5263 = getelementptr inbounds i8, i8* %5258, i64 8
  %5264 = bitcast i8* %5263 to i64*
  %5265 = load i64, i64* %5264, align 1
  %5266 = load double, double* bitcast (%sb_type* @sb to double*)
  %5267 = fadd double %5262, %5266
  %5268 = bitcast i8* %5257 to double*
  store double %5267, double* %5268, align 1, !tbaa !2451
  %5269 = getelementptr inbounds i8, i8* %5257, i64 8
  %5270 = bitcast i8* %5269 to i64*
  store i64 %5265, i64* %5270, align 1, !tbaa !2451
  %5271 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5272 = load i64, i64* %PC
  %5273 = add i64 %5272, 9
  store i64 %5273, i64* %PC
  %5274 = load double, double* bitcast (%two_type* @two to double*)
  %5275 = bitcast i8* %5271 to double*
  store double %5274, double* %5275, align 1, !tbaa !2451
  %5276 = getelementptr inbounds i8, i8* %5271, i64 8
  %5277 = bitcast i8* %5276 to double*
  store double 0.000000e+00, double* %5277, align 1, !tbaa !2451
  %5278 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5279 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5280 = load i64, i64* %RBP
  %5281 = sub i64 %5280, 16
  %5282 = load i64, i64* %PC
  %5283 = add i64 %5282, 5
  store i64 %5283, i64* %PC
  %5284 = bitcast i8* %5279 to double*
  %5285 = load double, double* %5284, align 1
  %5286 = getelementptr inbounds i8, i8* %5279, i64 8
  %5287 = bitcast i8* %5286 to i64*
  %5288 = load i64, i64* %5287, align 1
  %5289 = inttoptr i64 %5281 to double*
  %5290 = load double, double* %5289
  %5291 = fmul double %5285, %5290
  %5292 = bitcast i8* %5278 to double*
  store double %5291, double* %5292, align 1, !tbaa !2451
  %5293 = getelementptr inbounds i8, i8* %5278, i64 8
  %5294 = bitcast i8* %5293 to i64*
  store i64 %5288, i64* %5294, align 1, !tbaa !2451
  %5295 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5296 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5297 = bitcast %union.vec128_t* %XMM4 to i8*
  %5298 = load i64, i64* %PC
  %5299 = add i64 %5298, 4
  store i64 %5299, i64* %PC
  %5300 = bitcast i8* %5296 to double*
  %5301 = load double, double* %5300, align 1
  %5302 = getelementptr inbounds i8, i8* %5296, i64 8
  %5303 = bitcast i8* %5302 to i64*
  %5304 = load i64, i64* %5303, align 1
  %5305 = bitcast i8* %5297 to double*
  %5306 = load double, double* %5305, align 1
  %5307 = fadd double %5301, %5306
  %5308 = bitcast i8* %5295 to double*
  store double %5307, double* %5308, align 1, !tbaa !2451
  %5309 = getelementptr inbounds i8, i8* %5295, i64 8
  %5310 = bitcast i8* %5309 to i64*
  store i64 %5304, i64* %5310, align 1, !tbaa !2451
  %5311 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5312 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5313 = bitcast %union.vec128_t* %XMM3 to i8*
  %5314 = load i64, i64* %PC
  %5315 = add i64 %5314, 4
  store i64 %5315, i64* %PC
  %5316 = bitcast i8* %5312 to double*
  %5317 = load double, double* %5316, align 1
  %5318 = getelementptr inbounds i8, i8* %5312, i64 8
  %5319 = bitcast i8* %5318 to i64*
  %5320 = load i64, i64* %5319, align 1
  %5321 = bitcast i8* %5313 to double*
  %5322 = load double, double* %5321, align 1
  %5323 = fmul double %5317, %5322
  %5324 = bitcast i8* %5311 to double*
  store double %5323, double* %5324, align 1, !tbaa !2451
  %5325 = getelementptr inbounds i8, i8* %5311, i64 8
  %5326 = bitcast i8* %5325 to i64*
  store i64 %5320, i64* %5326, align 1, !tbaa !2451
  %5327 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5328 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5329 = load i64, i64* %PC
  %5330 = add i64 %5329, 9
  store i64 %5330, i64* %PC
  %5331 = bitcast i8* %5328 to double*
  %5332 = load double, double* %5331, align 1
  %5333 = getelementptr inbounds i8, i8* %5328, i64 8
  %5334 = bitcast i8* %5333 to i64*
  %5335 = load i64, i64* %5334, align 1
  %5336 = load double, double* bitcast (%two_type* @two to double*)
  %5337 = fdiv double %5332, %5336
  %5338 = bitcast i8* %5327 to double*
  store double %5337, double* %5338, align 1, !tbaa !2451
  %5339 = getelementptr inbounds i8, i8* %5327, i64 8
  %5340 = bitcast i8* %5339 to i64*
  store i64 %5335, i64* %5340, align 1, !tbaa !2451
  %5341 = bitcast %union.vec128_t* %XMM2 to i8*
  %5342 = load i64, i64* %PC
  %5343 = add i64 %5342, 9
  store i64 %5343, i64* %PC
  %5344 = bitcast i8* %5341 to double*
  %5345 = load double, double* %5344, align 1
  store double %5345, double* bitcast (%sa_type* @sa to double*)
  %5346 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5347 = load i64, i64* %PC
  %5348 = add i64 %5347, 9
  store i64 %5348, i64* %PC
  %5349 = load double, double* bitcast (%one_type* @one to double*)
  %5350 = bitcast i8* %5346 to double*
  store double %5349, double* %5350, align 1, !tbaa !2451
  %5351 = getelementptr inbounds i8, i8* %5346, i64 8
  %5352 = bitcast i8* %5351 to double*
  store double 0.000000e+00, double* %5352, align 1, !tbaa !2451
  %5353 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5354 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5355 = load i64, i64* %PC
  %5356 = add i64 %5355, 9
  store i64 %5356, i64* %PC
  %5357 = bitcast i8* %5354 to double*
  %5358 = load double, double* %5357, align 1
  %5359 = getelementptr inbounds i8, i8* %5354, i64 8
  %5360 = bitcast i8* %5359 to i64*
  %5361 = load i64, i64* %5360, align 1
  %5362 = load double, double* bitcast (%sa_type* @sa to double*)
  %5363 = fdiv double %5358, %5362
  %5364 = bitcast i8* %5353 to double*
  store double %5363, double* %5364, align 1, !tbaa !2451
  %5365 = getelementptr inbounds i8, i8* %5353, i64 8
  %5366 = bitcast i8* %5365 to i64*
  store i64 %5361, i64* %5366, align 1, !tbaa !2451
  %5367 = bitcast %union.vec128_t* %XMM2 to i8*
  %5368 = load i64, i64* %PC
  %5369 = add i64 %5368, 9
  store i64 %5369, i64* %PC
  %5370 = bitcast i8* %5367 to double*
  %5371 = load double, double* %5370, align 1
  store double %5371, double* bitcast (%sb_type* @sb to double*)
  %5372 = load i64, i64* %PC
  %5373 = add i64 %5372, 10
  store i64 %5373, i64* %PC
  %5374 = load double, double* bitcast (%sb_type* @sb to double*)
  %5375 = call double @llvm.trunc.f64(double %5374) #16
  %5376 = call double @llvm.fabs.f64(double %5375) #16
  %5377 = fcmp ogt double %5376, 0x43E0000000000000
  %5378 = fptosi double %5375 to i64
  %5379 = select i1 %5377, i64 -9223372036854775808, i64 %5378
  store i64 %5379, i64* %RAX, align 8, !tbaa !2428
  %5380 = load i64, i64* %RAX
  %5381 = load i64, i64* %PC
  %5382 = add i64 %5381, 7
  store i64 %5382, i64* %PC
  %5383 = sext i64 %5380 to i128
  %5384 = and i128 %5383, -18446744073709551616
  %5385 = zext i64 %5380 to i128
  %5386 = or i128 %5384, %5385
  %5387 = mul nsw i128 40000, %5386
  %5388 = trunc i128 %5387 to i64
  store i64 %5388, i64* %RAX, align 8, !tbaa !2428
  %5389 = sext i64 %5388 to i128
  %5390 = icmp ne i128 %5389, %5387
  %5391 = zext i1 %5390 to i8
  %5392 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %5391, i8* %5392, align 1, !tbaa !2432
  %5393 = trunc i128 %5387 to i32
  %5394 = and i32 %5393, 255
  %5395 = call i32 @llvm.ctpop.i32(i32 %5394) #16
  %5396 = trunc i32 %5395 to i8
  %5397 = and i8 %5396, 1
  %5398 = xor i8 %5397, 1
  %5399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5398, i8* %5399, align 1, !tbaa !2446
  %5400 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5400, align 1, !tbaa !2447
  %5401 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %5401, align 1, !tbaa !2448
  %5402 = lshr i64 %5388, 63
  %5403 = trunc i64 %5402 to i8
  %5404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5403, i8* %5404, align 1, !tbaa !2449
  %5405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %5391, i8* %5405, align 1, !tbaa !2450
  %5406 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5407 = load i64, i64* %RAX
  %5408 = load i64, i64* %PC
  %5409 = add i64 %5408, 5
  store i64 %5409, i64* %PC
  %5410 = sitofp i64 %5407 to double
  %5411 = bitcast i8* %5406 to double*
  store double %5410, double* %5411, align 1, !tbaa !2451
  %5412 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5413 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5414 = load i64, i64* %PC
  %5415 = add i64 %5414, 9
  store i64 %5415, i64* %PC
  %5416 = bitcast i8* %5413 to double*
  %5417 = load double, double* %5416, align 1
  %5418 = getelementptr inbounds i8, i8* %5413, i64 8
  %5419 = bitcast i8* %5418 to i64*
  %5420 = load i64, i64* %5419, align 1
  %5421 = load double, double* bitcast (%scale_type* @scale to double*)
  %5422 = fdiv double %5417, %5421
  %5423 = bitcast i8* %5412 to double*
  store double %5422, double* %5423, align 1, !tbaa !2451
  %5424 = getelementptr inbounds i8, i8* %5412, i64 8
  %5425 = bitcast i8* %5424 to i64*
  store i64 %5420, i64* %5425, align 1, !tbaa !2451
  %5426 = bitcast %union.vec128_t* %XMM2 to i8*
  %5427 = load i64, i64* %PC
  %5428 = add i64 %5427, 5
  store i64 %5428, i64* %PC
  %5429 = bitcast i8* %5426 to double*
  %5430 = load double, double* %5429, align 1
  %5431 = call double @llvm.trunc.f64(double %5430) #16
  %5432 = call double @llvm.fabs.f64(double %5431) #16
  %5433 = fcmp ogt double %5432, 0x43E0000000000000
  %5434 = fptosi double %5431 to i64
  %5435 = select i1 %5433, i64 -9223372036854775808, i64 %5434
  store i64 %5435, i64* %RAX, align 8, !tbaa !2428
  %5436 = load i64, i64* %RBP
  %5437 = sub i64 %5436, 88
  %5438 = load i64, i64* %RAX
  %5439 = load i64, i64* %PC
  %5440 = add i64 %5439, 4
  store i64 %5440, i64* %PC
  %5441 = inttoptr i64 %5437 to i64*
  store i64 %5438, i64* %5441
  %5442 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5443 = load i64, i64* %PC
  %5444 = add i64 %5443, 9
  store i64 %5444, i64* %PC
  %5445 = load double, double* bitcast (%sb_type* @sb to double*)
  %5446 = bitcast i8* %5442 to double*
  store double %5445, double* %5446, align 1, !tbaa !2451
  %5447 = getelementptr inbounds i8, i8* %5442, i64 8
  %5448 = bitcast i8* %5447 to double*
  store double 0.000000e+00, double* %5448, align 1, !tbaa !2451
  %5449 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5450 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5451 = bitcast %union.vec128_t* %XMM1 to i8*
  %5452 = load i64, i64* %PC
  %5453 = add i64 %5452, 4
  store i64 %5453, i64* %PC
  %5454 = bitcast i8* %5450 to double*
  %5455 = load double, double* %5454, align 1
  %5456 = getelementptr inbounds i8, i8* %5450, i64 8
  %5457 = bitcast i8* %5456 to i64*
  %5458 = load i64, i64* %5457, align 1
  %5459 = bitcast i8* %5451 to double*
  %5460 = load double, double* %5459, align 1
  %5461 = fsub double %5455, %5460
  %5462 = bitcast i8* %5449 to double*
  store double %5461, double* %5462, align 1, !tbaa !2451
  %5463 = getelementptr inbounds i8, i8* %5449, i64 8
  %5464 = bitcast i8* %5463 to i64*
  store i64 %5458, i64* %5464, align 1, !tbaa !2451
  %5465 = bitcast %union.vec128_t* %XMM2 to i8*
  %5466 = load i64, i64* %PC
  %5467 = add i64 %5466, 9
  store i64 %5467, i64* %PC
  %5468 = bitcast i8* %5465 to double*
  %5469 = load double, double* %5468, align 1
  store double %5469, double* bitcast (%sc_type* @sc to double*)
  %5470 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5471 = load i64, i64* %PC
  %5472 = add i64 %5471, 9
  store i64 %5472, i64* %PC
  %5473 = load double, double* bitcast (%one_type* @one to double*)
  %5474 = bitcast i8* %5470 to double*
  store double %5473, double* %5474, align 1, !tbaa !2451
  %5475 = getelementptr inbounds i8, i8* %5470, i64 8
  %5476 = bitcast i8* %5475 to double*
  store double 0.000000e+00, double* %5476, align 1, !tbaa !2451
  %5477 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5478 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5479 = load i64, i64* %PC
  %5480 = add i64 %5479, 9
  store i64 %5480, i64* %PC
  %5481 = bitcast i8* %5478 to double*
  %5482 = load double, double* %5481, align 1
  %5483 = getelementptr inbounds i8, i8* %5478, i64 8
  %5484 = bitcast i8* %5483 to i64*
  %5485 = load i64, i64* %5484, align 1
  %5486 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 24) to double*)
  %5487 = fdiv double %5482, %5486
  %5488 = bitcast i8* %5477 to double*
  store double %5487, double* %5488, align 1, !tbaa !2451
  %5489 = getelementptr inbounds i8, i8* %5477, i64 8
  %5490 = bitcast i8* %5489 to i64*
  store i64 %5485, i64* %5490, align 1, !tbaa !2451
  %5491 = bitcast %union.vec128_t* %XMM1 to i8*
  %5492 = load i64, i64* %PC
  %5493 = add i64 %5492, 9
  store i64 %5493, i64* %PC
  %5494 = bitcast i8* %5491 to double*
  %5495 = load double, double* %5494, align 1
  store double %5495, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 32) to double*)
  %5496 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5497 = bitcast %union.vec128_t* %XMM0 to i8*
  %5498 = load i64, i64* %PC
  %5499 = add i64 %5498, 3
  store i64 %5499, i64* %PC
  %5500 = bitcast i8* %5497 to <2 x i32>*
  %5501 = load <2 x i32>, <2 x i32>* %5500, align 1
  %5502 = getelementptr inbounds i8, i8* %5497, i64 8
  %5503 = bitcast i8* %5502 to <2 x i32>*
  %5504 = load <2 x i32>, <2 x i32>* %5503, align 1
  %5505 = extractelement <2 x i32> %5501, i32 0
  %5506 = bitcast i8* %5496 to i32*
  store i32 %5505, i32* %5506, align 1, !tbaa !2455
  %5507 = extractelement <2 x i32> %5501, i32 1
  %5508 = getelementptr inbounds i8, i8* %5496, i64 4
  %5509 = bitcast i8* %5508 to i32*
  store i32 %5507, i32* %5509, align 1, !tbaa !2455
  %5510 = extractelement <2 x i32> %5504, i32 0
  %5511 = getelementptr inbounds i8, i8* %5496, i64 8
  %5512 = bitcast i8* %5511 to i32*
  store i32 %5510, i32* %5512, align 1, !tbaa !2455
  %5513 = extractelement <2 x i32> %5504, i32 1
  %5514 = getelementptr inbounds i8, i8* %5496, i64 12
  %5515 = bitcast i8* %5514 to i32*
  store i32 %5513, i32* %5515, align 1, !tbaa !2455
  %5516 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5517 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5518 = load i64, i64* %PC
  %5519 = add i64 %5518, 9
  store i64 %5519, i64* %PC
  %5520 = bitcast i8* %5517 to double*
  %5521 = load double, double* %5520, align 1
  %5522 = getelementptr inbounds i8, i8* %5517, i64 8
  %5523 = bitcast i8* %5522 to i64*
  %5524 = load i64, i64* %5523, align 1
  %5525 = load double, double* bitcast (%sc_type* @sc to double*)
  %5526 = fmul double %5521, %5525
  %5527 = bitcast i8* %5516 to double*
  store double %5526, double* %5527, align 1, !tbaa !2451
  %5528 = getelementptr inbounds i8, i8* %5516, i64 8
  %5529 = bitcast i8* %5528 to i64*
  store i64 %5524, i64* %5529, align 1, !tbaa !2451
  %5530 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5531 = bitcast %union.vec128_t* %XMM0 to i8*
  %5532 = load i64, i64* %PC
  %5533 = add i64 %5532, 3
  store i64 %5533, i64* %PC
  %5534 = bitcast i8* %5531 to <2 x i32>*
  %5535 = load <2 x i32>, <2 x i32>* %5534, align 1
  %5536 = getelementptr inbounds i8, i8* %5531, i64 8
  %5537 = bitcast i8* %5536 to <2 x i32>*
  %5538 = load <2 x i32>, <2 x i32>* %5537, align 1
  %5539 = extractelement <2 x i32> %5535, i32 0
  %5540 = bitcast i8* %5530 to i32*
  store i32 %5539, i32* %5540, align 1, !tbaa !2455
  %5541 = extractelement <2 x i32> %5535, i32 1
  %5542 = getelementptr inbounds i8, i8* %5530, i64 4
  %5543 = bitcast i8* %5542 to i32*
  store i32 %5541, i32* %5543, align 1, !tbaa !2455
  %5544 = extractelement <2 x i32> %5538, i32 0
  %5545 = getelementptr inbounds i8, i8* %5530, i64 8
  %5546 = bitcast i8* %5545 to i32*
  store i32 %5544, i32* %5546, align 1, !tbaa !2455
  %5547 = extractelement <2 x i32> %5538, i32 1
  %5548 = getelementptr inbounds i8, i8* %5530, i64 12
  %5549 = bitcast i8* %5548 to i32*
  store i32 %5547, i32* %5549, align 1, !tbaa !2455
  %5550 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5551 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5552 = load i64, i64* %PC
  %5553 = add i64 %5552, 9
  store i64 %5553, i64* %PC
  %5554 = bitcast i8* %5551 to double*
  %5555 = load double, double* %5554, align 1
  %5556 = getelementptr inbounds i8, i8* %5551, i64 8
  %5557 = bitcast i8* %5556 to i64*
  %5558 = load i64, i64* %5557, align 1
  %5559 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 16) to double*)
  %5560 = fmul double %5555, %5559
  %5561 = bitcast i8* %5550 to double*
  store double %5560, double* %5561, align 1, !tbaa !2451
  %5562 = getelementptr inbounds i8, i8* %5550, i64 8
  %5563 = bitcast i8* %5562 to i64*
  store i64 %5558, i64* %5563, align 1, !tbaa !2451
  %5564 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5565 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5566 = load i64, i64* %PC
  %5567 = add i64 %5566, 9
  store i64 %5567, i64* %PC
  %5568 = bitcast i8* %5565 to double*
  %5569 = load double, double* %5568, align 1
  %5570 = getelementptr inbounds i8, i8* %5565, i64 8
  %5571 = bitcast i8* %5570 to i64*
  %5572 = load i64, i64* %5571, align 1
  %5573 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 32) to double*)
  %5574 = fmul double %5569, %5573
  %5575 = bitcast i8* %5564 to double*
  store double %5574, double* %5575, align 1, !tbaa !2451
  %5576 = getelementptr inbounds i8, i8* %5564, i64 8
  %5577 = bitcast i8* %5576 to i64*
  store i64 %5572, i64* %5577, align 1, !tbaa !2451
  %5578 = load i64, i64* %RBP
  %5579 = sub i64 %5578, 136
  %5580 = bitcast %union.vec128_t* %XMM0 to i8*
  %5581 = load i64, i64* %PC
  %5582 = add i64 %5581, 8
  store i64 %5582, i64* %PC
  %5583 = bitcast i8* %5580 to double*
  %5584 = load double, double* %5583, align 1
  %5585 = inttoptr i64 %5579 to double*
  store double %5584, double* %5585
  %5586 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5587 = bitcast %union.vec128_t* %XMM1 to i8*
  %5588 = load i64, i64* %PC
  %5589 = add i64 %5588, 3
  store i64 %5589, i64* %PC
  %5590 = bitcast i8* %5587 to <2 x i32>*
  %5591 = load <2 x i32>, <2 x i32>* %5590, align 1
  %5592 = getelementptr inbounds i8, i8* %5587, i64 8
  %5593 = bitcast i8* %5592 to <2 x i32>*
  %5594 = load <2 x i32>, <2 x i32>* %5593, align 1
  %5595 = extractelement <2 x i32> %5591, i32 0
  %5596 = bitcast i8* %5586 to i32*
  store i32 %5595, i32* %5596, align 1, !tbaa !2455
  %5597 = extractelement <2 x i32> %5591, i32 1
  %5598 = getelementptr inbounds i8, i8* %5586, i64 4
  %5599 = bitcast i8* %5598 to i32*
  store i32 %5597, i32* %5599, align 1, !tbaa !2455
  %5600 = extractelement <2 x i32> %5594, i32 0
  %5601 = getelementptr inbounds i8, i8* %5586, i64 8
  %5602 = bitcast i8* %5601 to i32*
  store i32 %5600, i32* %5602, align 1, !tbaa !2455
  %5603 = extractelement <2 x i32> %5594, i32 1
  %5604 = getelementptr inbounds i8, i8* %5586, i64 12
  %5605 = bitcast i8* %5604 to i32*
  store i32 %5603, i32* %5605, align 1, !tbaa !2455
  %5606 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5607 = bitcast %union.vec128_t* %XMM2 to i8*
  %5608 = load i64, i64* %PC
  %5609 = add i64 %5608, 3
  store i64 %5609, i64* %PC
  %5610 = bitcast i8* %5607 to <2 x i32>*
  %5611 = load <2 x i32>, <2 x i32>* %5610, align 1
  %5612 = getelementptr inbounds i8, i8* %5607, i64 8
  %5613 = bitcast i8* %5612 to <2 x i32>*
  %5614 = load <2 x i32>, <2 x i32>* %5613, align 1
  %5615 = extractelement <2 x i32> %5611, i32 0
  %5616 = bitcast i8* %5606 to i32*
  store i32 %5615, i32* %5616, align 1, !tbaa !2455
  %5617 = extractelement <2 x i32> %5611, i32 1
  %5618 = getelementptr inbounds i8, i8* %5606, i64 4
  %5619 = bitcast i8* %5618 to i32*
  store i32 %5617, i32* %5619, align 1, !tbaa !2455
  %5620 = extractelement <2 x i32> %5614, i32 0
  %5621 = getelementptr inbounds i8, i8* %5606, i64 8
  %5622 = bitcast i8* %5621 to i32*
  store i32 %5620, i32* %5622, align 1, !tbaa !2455
  %5623 = extractelement <2 x i32> %5614, i32 1
  %5624 = getelementptr inbounds i8, i8* %5606, i64 12
  %5625 = bitcast i8* %5624 to i32*
  store i32 %5623, i32* %5625, align 1, !tbaa !2455
  %5626 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5627 = load i64, i64* %RBP
  %5628 = sub i64 %5627, 136
  %5629 = load i64, i64* %PC
  %5630 = add i64 %5629, 8
  store i64 %5630, i64* %PC
  %5631 = inttoptr i64 %5628 to double*
  %5632 = load double, double* %5631
  %5633 = bitcast i8* %5626 to double*
  store double %5632, double* %5633, align 1, !tbaa !2451
  %5634 = getelementptr inbounds i8, i8* %5626, i64 8
  %5635 = bitcast i8* %5634 to double*
  store double 0.000000e+00, double* %5635, align 1, !tbaa !2451
  %5636 = load i64, i64* %PC
  %5637 = add i64 %5636, 2
  store i64 %5637, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2453
  %5638 = load i64, i64* %PC
  %5639 = sub i64 %5638, 1584
  %5640 = load i64, i64* %PC
  %5641 = add i64 %5640, 5
  %5642 = load i64, i64* %PC
  %5643 = add i64 %5642, 5
  store i64 %5643, i64* %PC
  %5644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5645 = load i64, i64* %5644, align 8, !tbaa !2428
  %5646 = add i64 %5645, -8
  %5647 = inttoptr i64 %5646 to i64*
  store i64 %5641, i64* %5647
  store i64 %5646, i64* %5644, align 8, !tbaa !2428
  %5648 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5639, i64* %5648, align 8, !tbaa !2428
  %5649 = load i64, i64* %PC
  %5650 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %5649, %struct.Memory* %MEMORY.6)
  %5651 = load i64, i64* %PC
  %5652 = add i64 %5651, 10
  store i64 %5652, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %5653 = load i64, i64* %PC
  %5654 = add i64 %5653, 10
  store i64 %5654, i64* %PC
  store i64 -9223372036854775808, i64* %RCX, align 8, !tbaa !2428
  %5655 = load i64, i64* %RBP
  %5656 = sub i64 %5655, 88
  %5657 = load i64, i64* %PC
  %5658 = add i64 %5657, 4
  store i64 %5658, i64* %PC
  %5659 = inttoptr i64 %5656 to i64*
  %5660 = load i64, i64* %5659
  store i64 %5660, i64* %RDX, align 8, !tbaa !2428
  %5661 = load i64, i64* %RBP
  %5662 = sub i64 %5661, 80
  %5663 = load i64, i64* %RDX
  %5664 = load i64, i64* %PC
  %5665 = add i64 %5664, 4
  store i64 %5665, i64* %PC
  %5666 = inttoptr i64 %5662 to i64*
  store i64 %5663, i64* %5666
  %5667 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5668 = load i64, i64* %PC
  %5669 = add i64 %5668, 9
  store i64 %5669, i64* %PC
  %5670 = load double, double* bitcast (%five_type* @five to double*)
  %5671 = bitcast i8* %5667 to double*
  store double %5670, double* %5671, align 1, !tbaa !2451
  %5672 = getelementptr inbounds i8, i8* %5667, i64 8
  %5673 = bitcast i8* %5672 to double*
  store double 0.000000e+00, double* %5673, align 1, !tbaa !2451
  %5674 = bitcast %union.vec128_t* %XMM0 to i8*
  %5675 = load i64, i64* %PC
  %5676 = add i64 %5675, 5
  store i64 %5676, i64* %PC
  %5677 = bitcast i8* %5674 to i64*
  %5678 = load i64, i64* %5677, align 1
  store i64 %5678, i64* %RDX, align 1, !tbaa !2428
  %5679 = load i64, i64* %RDX
  %5680 = load i64, i64* %RCX
  %5681 = load i64, i64* %PC
  %5682 = add i64 %5681, 3
  store i64 %5682, i64* %PC
  %5683 = xor i64 %5680, %5679
  store i64 %5683, i64* %RDX, align 8, !tbaa !2428
  %5684 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5684, align 1, !tbaa !2432
  %5685 = trunc i64 %5683 to i32
  %5686 = and i32 %5685, 255
  %5687 = call i32 @llvm.ctpop.i32(i32 %5686) #16
  %5688 = trunc i32 %5687 to i8
  %5689 = and i8 %5688, 1
  %5690 = xor i8 %5689, 1
  %5691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5690, i8* %5691, align 1, !tbaa !2446
  %5692 = icmp eq i64 %5683, 0
  %5693 = zext i1 %5692 to i8
  %5694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5693, i8* %5694, align 1, !tbaa !2448
  %5695 = lshr i64 %5683, 63
  %5696 = trunc i64 %5695 to i8
  %5697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5696, i8* %5697, align 1, !tbaa !2449
  %5698 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5698, align 1, !tbaa !2450
  %5699 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5699, align 1, !tbaa !2447
  %5700 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5701 = load i64, i64* %RDX
  %5702 = load i64, i64* %PC
  %5703 = add i64 %5702, 5
  store i64 %5703, i64* %PC
  %5704 = bitcast i8* %5700 to i64*
  store i64 %5701, i64* %5704, align 1, !tbaa !2428
  %5705 = getelementptr inbounds i8, i8* %5700, i64 8
  %5706 = bitcast i8* %5705 to i64*
  store i64 0, i64* %5706, align 1, !tbaa !2428
  %5707 = load i64, i64* %RBP
  %5708 = sub i64 %5707, 16
  %5709 = bitcast %union.vec128_t* %XMM0 to i8*
  %5710 = load i64, i64* %PC
  %5711 = add i64 %5710, 5
  store i64 %5711, i64* %PC
  %5712 = bitcast i8* %5709 to double*
  %5713 = load double, double* %5712, align 1
  %5714 = inttoptr i64 %5708 to double*
  store double %5713, double* %5714
  %5715 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5716 = load i64, i64* %PC
  %5717 = add i64 %5716, 9
  store i64 %5717, i64* %PC
  %5718 = load double, double* bitcast (%one_type* @one to double*)
  %5719 = bitcast i8* %5715 to double*
  store double %5718, double* %5719, align 1, !tbaa !2451
  %5720 = getelementptr inbounds i8, i8* %5715, i64 8
  %5721 = bitcast i8* %5720 to double*
  store double 0.000000e+00, double* %5721, align 1, !tbaa !2451
  %5722 = bitcast %union.vec128_t* %XMM0 to i8*
  %5723 = load i64, i64* %PC
  %5724 = add i64 %5723, 5
  store i64 %5724, i64* %PC
  %5725 = bitcast i8* %5722 to i64*
  %5726 = load i64, i64* %5725, align 1
  store i64 %5726, i64* %RDX, align 1, !tbaa !2428
  %5727 = load i64, i64* %RDX
  %5728 = load i64, i64* %RCX
  %5729 = load i64, i64* %PC
  %5730 = add i64 %5729, 3
  store i64 %5730, i64* %PC
  %5731 = xor i64 %5728, %5727
  store i64 %5731, i64* %RDX, align 8, !tbaa !2428
  %5732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5732, align 1, !tbaa !2432
  %5733 = trunc i64 %5731 to i32
  %5734 = and i32 %5733, 255
  %5735 = call i32 @llvm.ctpop.i32(i32 %5734) #16
  %5736 = trunc i32 %5735 to i8
  %5737 = and i8 %5736, 1
  %5738 = xor i8 %5737, 1
  %5739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5738, i8* %5739, align 1, !tbaa !2446
  %5740 = icmp eq i64 %5731, 0
  %5741 = zext i1 %5740 to i8
  %5742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5741, i8* %5742, align 1, !tbaa !2448
  %5743 = lshr i64 %5731, 63
  %5744 = trunc i64 %5743 to i8
  %5745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5744, i8* %5745, align 1, !tbaa !2449
  %5746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5746, align 1, !tbaa !2450
  %5747 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5747, align 1, !tbaa !2447
  %5748 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5749 = load i64, i64* %RDX
  %5750 = load i64, i64* %PC
  %5751 = add i64 %5750, 5
  store i64 %5751, i64* %PC
  %5752 = bitcast i8* %5748 to i64*
  store i64 %5749, i64* %5752, align 1, !tbaa !2428
  %5753 = getelementptr inbounds i8, i8* %5748, i64 8
  %5754 = bitcast i8* %5753 to i64*
  store i64 0, i64* %5754, align 1, !tbaa !2428
  %5755 = bitcast %union.vec128_t* %XMM0 to i8*
  %5756 = load i64, i64* %PC
  %5757 = add i64 %5756, 9
  store i64 %5757, i64* %PC
  %5758 = bitcast i8* %5755 to double*
  %5759 = load double, double* %5758, align 1
  store double %5759, double* bitcast (%sa_type* @sa to double*)
  %5760 = load i64, i64* %RBP
  %5761 = sub i64 %5760, 140
  %5762 = load i32, i32* %EAX
  %5763 = zext i32 %5762 to i64
  %5764 = load i64, i64* %PC
  %5765 = add i64 %5764, 6
  store i64 %5765, i64* %PC
  %5766 = inttoptr i64 %5761 to i32*
  store i32 %5762, i32* %5766
  %5767 = load i64, i64* %PC
  %5768 = add i64 %5767, 6959
  %5769 = load i64, i64* %PC
  %5770 = add i64 %5769, 5
  %5771 = load i64, i64* %PC
  %5772 = add i64 %5771, 5
  store i64 %5772, i64* %PC
  %5773 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5774 = load i64, i64* %5773, align 8, !tbaa !2428
  %5775 = add i64 %5774, -8
  %5776 = inttoptr i64 %5775 to i64*
  store i64 %5770, i64* %5776
  store i64 %5775, i64* %5773, align 8, !tbaa !2428
  %5777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5768, i64* %5777, align 8, !tbaa !2428
  %5778 = load i64, i64* %PC
  %5779 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %5778, %struct.Memory* %5650)
  %5780 = load i64, i64* %RBP
  %5781 = sub i64 %5780, 72
  %5782 = load i64, i64* %PC
  %5783 = add i64 %5782, 8
  store i64 %5783, i64* %PC
  %5784 = inttoptr i64 %5781 to i64*
  store i64 1, i64* %5784
  %5785 = load i64, i64* %RBP
  %5786 = sub i64 %5785, 144
  %5787 = load i32, i32* %EAX
  %5788 = zext i32 %5787 to i64
  %5789 = load i64, i64* %PC
  %5790 = add i64 %5789, 6
  store i64 %5790, i64* %PC
  %5791 = inttoptr i64 %5786 to i32*
  store i32 %5787, i32* %5791
  br label %block_400ad4

block_401509:                                     ; preds = %block_4014f4
  %5792 = load i64, i64* %RBP
  %5793 = sub i64 %5792, 72
  %5794 = load i64, i64* %PC
  %5795 = add i64 %5794, 4
  store i64 %5795, i64* %PC
  %5796 = inttoptr i64 %5793 to i64*
  %5797 = load i64, i64* %5796
  store i64 %5797, i64* %RAX, align 8, !tbaa !2428
  %5798 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5799 = load i64, i64* %RAX
  %5800 = load i64, i64* %PC
  %5801 = add i64 %5800, 5
  store i64 %5801, i64* %PC
  %5802 = sitofp i64 %5799 to double
  %5803 = bitcast i8* %5798 to double*
  store double %5802, double* %5803, align 1, !tbaa !2451
  %5804 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5805 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5806 = load i64, i64* %RBP
  %5807 = sub i64 %5806, 48
  %5808 = load i64, i64* %PC
  %5809 = add i64 %5808, 5
  store i64 %5809, i64* %PC
  %5810 = bitcast i8* %5805 to double*
  %5811 = load double, double* %5810, align 1
  %5812 = getelementptr inbounds i8, i8* %5805, i64 8
  %5813 = bitcast i8* %5812 to i64*
  %5814 = load i64, i64* %5813, align 1
  %5815 = inttoptr i64 %5807 to double*
  %5816 = load double, double* %5815
  %5817 = fmul double %5811, %5816
  %5818 = bitcast i8* %5804 to double*
  store double %5817, double* %5818, align 1, !tbaa !2451
  %5819 = getelementptr inbounds i8, i8* %5804, i64 8
  %5820 = bitcast i8* %5819 to i64*
  store i64 %5814, i64* %5820, align 1, !tbaa !2451
  %5821 = load i64, i64* %RBP
  %5822 = sub i64 %5821, 24
  %5823 = bitcast %union.vec128_t* %XMM0 to i8*
  %5824 = load i64, i64* %PC
  %5825 = add i64 %5824, 5
  store i64 %5825, i64* %PC
  %5826 = bitcast i8* %5823 to double*
  %5827 = load double, double* %5826, align 1
  %5828 = inttoptr i64 %5822 to double*
  store double %5827, double* %5828
  %5829 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5830 = load i64, i64* %RBP
  %5831 = sub i64 %5830, 24
  %5832 = load i64, i64* %PC
  %5833 = add i64 %5832, 5
  store i64 %5833, i64* %PC
  %5834 = inttoptr i64 %5831 to double*
  %5835 = load double, double* %5834
  %5836 = bitcast i8* %5829 to double*
  store double %5835, double* %5836, align 1, !tbaa !2451
  %5837 = getelementptr inbounds i8, i8* %5829, i64 8
  %5838 = bitcast i8* %5837 to double*
  store double 0.000000e+00, double* %5838, align 1, !tbaa !2451
  %5839 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5840 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5841 = load i64, i64* %RBP
  %5842 = sub i64 %5841, 24
  %5843 = load i64, i64* %PC
  %5844 = add i64 %5843, 5
  store i64 %5844, i64* %PC
  %5845 = bitcast i8* %5840 to double*
  %5846 = load double, double* %5845, align 1
  %5847 = getelementptr inbounds i8, i8* %5840, i64 8
  %5848 = bitcast i8* %5847 to i64*
  %5849 = load i64, i64* %5848, align 1
  %5850 = inttoptr i64 %5842 to double*
  %5851 = load double, double* %5850
  %5852 = fmul double %5846, %5851
  %5853 = bitcast i8* %5839 to double*
  store double %5852, double* %5853, align 1, !tbaa !2451
  %5854 = getelementptr inbounds i8, i8* %5839, i64 8
  %5855 = bitcast i8* %5854 to i64*
  store i64 %5849, i64* %5855, align 1, !tbaa !2451
  %5856 = load i64, i64* %RBP
  %5857 = sub i64 %5856, 40
  %5858 = bitcast %union.vec128_t* %XMM0 to i8*
  %5859 = load i64, i64* %PC
  %5860 = add i64 %5859, 5
  store i64 %5860, i64* %PC
  %5861 = bitcast i8* %5858 to double*
  %5862 = load double, double* %5861, align 1
  %5863 = inttoptr i64 %5857 to double*
  store double %5862, double* %5863
  %5864 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5865 = load i64, i64* %RBP
  %5866 = sub i64 %5865, 24
  %5867 = load i64, i64* %PC
  %5868 = add i64 %5867, 5
  store i64 %5868, i64* %PC
  %5869 = inttoptr i64 %5866 to double*
  %5870 = load double, double* %5869
  %5871 = bitcast i8* %5864 to double*
  store double %5870, double* %5871, align 1, !tbaa !2451
  %5872 = getelementptr inbounds i8, i8* %5864, i64 8
  %5873 = bitcast i8* %5872 to double*
  store double 0.000000e+00, double* %5873, align 1, !tbaa !2451
  %5874 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5875 = load i64, i64* %PC
  %5876 = add i64 %5875, 9
  store i64 %5876, i64* %PC
  %5877 = load double, double* bitcast (%A6_type* @A6 to double*)
  %5878 = bitcast i8* %5874 to double*
  store double %5877, double* %5878, align 1, !tbaa !2451
  %5879 = getelementptr inbounds i8, i8* %5874, i64 8
  %5880 = bitcast i8* %5879 to double*
  store double 0.000000e+00, double* %5880, align 1, !tbaa !2451
  %5881 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5882 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5883 = load i64, i64* %RBP
  %5884 = sub i64 %5883, 40
  %5885 = load i64, i64* %PC
  %5886 = add i64 %5885, 5
  store i64 %5886, i64* %PC
  %5887 = bitcast i8* %5882 to double*
  %5888 = load double, double* %5887, align 1
  %5889 = getelementptr inbounds i8, i8* %5882, i64 8
  %5890 = bitcast i8* %5889 to i64*
  %5891 = load i64, i64* %5890, align 1
  %5892 = inttoptr i64 %5884 to double*
  %5893 = load double, double* %5892
  %5894 = fmul double %5888, %5893
  %5895 = bitcast i8* %5881 to double*
  store double %5894, double* %5895, align 1, !tbaa !2451
  %5896 = getelementptr inbounds i8, i8* %5881, i64 8
  %5897 = bitcast i8* %5896 to i64*
  store i64 %5891, i64* %5897, align 1, !tbaa !2451
  %5898 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5899 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5900 = load i64, i64* %PC
  %5901 = add i64 %5900, 9
  store i64 %5901, i64* %PC
  %5902 = bitcast i8* %5899 to double*
  %5903 = load double, double* %5902, align 1
  %5904 = getelementptr inbounds i8, i8* %5899, i64 8
  %5905 = bitcast i8* %5904 to i64*
  %5906 = load i64, i64* %5905, align 1
  %5907 = load double, double* bitcast (%A5_type* @A5 to double*)
  %5908 = fadd double %5903, %5907
  %5909 = bitcast i8* %5898 to double*
  store double %5908, double* %5909, align 1, !tbaa !2451
  %5910 = getelementptr inbounds i8, i8* %5898, i64 8
  %5911 = bitcast i8* %5910 to i64*
  store i64 %5906, i64* %5911, align 1, !tbaa !2451
  %5912 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5913 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5914 = load i64, i64* %RBP
  %5915 = sub i64 %5914, 40
  %5916 = load i64, i64* %PC
  %5917 = add i64 %5916, 5
  store i64 %5917, i64* %PC
  %5918 = bitcast i8* %5913 to double*
  %5919 = load double, double* %5918, align 1
  %5920 = getelementptr inbounds i8, i8* %5913, i64 8
  %5921 = bitcast i8* %5920 to i64*
  %5922 = load i64, i64* %5921, align 1
  %5923 = inttoptr i64 %5915 to double*
  %5924 = load double, double* %5923
  %5925 = fmul double %5919, %5924
  %5926 = bitcast i8* %5912 to double*
  store double %5925, double* %5926, align 1, !tbaa !2451
  %5927 = getelementptr inbounds i8, i8* %5912, i64 8
  %5928 = bitcast i8* %5927 to i64*
  store i64 %5922, i64* %5928, align 1, !tbaa !2451
  %5929 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5930 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5931 = load i64, i64* %PC
  %5932 = add i64 %5931, 9
  store i64 %5932, i64* %PC
  %5933 = bitcast i8* %5930 to double*
  %5934 = load double, double* %5933, align 1
  %5935 = getelementptr inbounds i8, i8* %5930, i64 8
  %5936 = bitcast i8* %5935 to i64*
  %5937 = load i64, i64* %5936, align 1
  %5938 = load double, double* bitcast (%A4_type* @A4 to double*)
  %5939 = fadd double %5934, %5938
  %5940 = bitcast i8* %5929 to double*
  store double %5939, double* %5940, align 1, !tbaa !2451
  %5941 = getelementptr inbounds i8, i8* %5929, i64 8
  %5942 = bitcast i8* %5941 to i64*
  store i64 %5937, i64* %5942, align 1, !tbaa !2451
  %5943 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5944 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5945 = load i64, i64* %RBP
  %5946 = sub i64 %5945, 40
  %5947 = load i64, i64* %PC
  %5948 = add i64 %5947, 5
  store i64 %5948, i64* %PC
  %5949 = bitcast i8* %5944 to double*
  %5950 = load double, double* %5949, align 1
  %5951 = getelementptr inbounds i8, i8* %5944, i64 8
  %5952 = bitcast i8* %5951 to i64*
  %5953 = load i64, i64* %5952, align 1
  %5954 = inttoptr i64 %5946 to double*
  %5955 = load double, double* %5954
  %5956 = fmul double %5950, %5955
  %5957 = bitcast i8* %5943 to double*
  store double %5956, double* %5957, align 1, !tbaa !2451
  %5958 = getelementptr inbounds i8, i8* %5943, i64 8
  %5959 = bitcast i8* %5958 to i64*
  store i64 %5953, i64* %5959, align 1, !tbaa !2451
  %5960 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5961 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5962 = load i64, i64* %PC
  %5963 = add i64 %5962, 9
  store i64 %5963, i64* %PC
  %5964 = bitcast i8* %5961 to double*
  %5965 = load double, double* %5964, align 1
  %5966 = getelementptr inbounds i8, i8* %5961, i64 8
  %5967 = bitcast i8* %5966 to i64*
  %5968 = load i64, i64* %5967, align 1
  %5969 = load double, double* bitcast (%A3_type* @A3 to double*)
  %5970 = fadd double %5965, %5969
  %5971 = bitcast i8* %5960 to double*
  store double %5970, double* %5971, align 1, !tbaa !2451
  %5972 = getelementptr inbounds i8, i8* %5960, i64 8
  %5973 = bitcast i8* %5972 to i64*
  store i64 %5968, i64* %5973, align 1, !tbaa !2451
  %5974 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5975 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5976 = load i64, i64* %RBP
  %5977 = sub i64 %5976, 40
  %5978 = load i64, i64* %PC
  %5979 = add i64 %5978, 5
  store i64 %5979, i64* %PC
  %5980 = bitcast i8* %5975 to double*
  %5981 = load double, double* %5980, align 1
  %5982 = getelementptr inbounds i8, i8* %5975, i64 8
  %5983 = bitcast i8* %5982 to i64*
  %5984 = load i64, i64* %5983, align 1
  %5985 = inttoptr i64 %5977 to double*
  %5986 = load double, double* %5985
  %5987 = fmul double %5981, %5986
  %5988 = bitcast i8* %5974 to double*
  store double %5987, double* %5988, align 1, !tbaa !2451
  %5989 = getelementptr inbounds i8, i8* %5974, i64 8
  %5990 = bitcast i8* %5989 to i64*
  store i64 %5984, i64* %5990, align 1, !tbaa !2451
  %5991 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5992 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5993 = load i64, i64* %PC
  %5994 = add i64 %5993, 9
  store i64 %5994, i64* %PC
  %5995 = bitcast i8* %5992 to double*
  %5996 = load double, double* %5995, align 1
  %5997 = getelementptr inbounds i8, i8* %5992, i64 8
  %5998 = bitcast i8* %5997 to i64*
  %5999 = load i64, i64* %5998, align 1
  %6000 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %6001 = fadd double %5996, %6000
  %6002 = bitcast i8* %5991 to double*
  store double %6001, double* %6002, align 1, !tbaa !2451
  %6003 = getelementptr inbounds i8, i8* %5991, i64 8
  %6004 = bitcast i8* %6003 to i64*
  store i64 %5999, i64* %6004, align 1, !tbaa !2451
  %6005 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6006 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6007 = load i64, i64* %RBP
  %6008 = sub i64 %6007, 40
  %6009 = load i64, i64* %PC
  %6010 = add i64 %6009, 5
  store i64 %6010, i64* %PC
  %6011 = bitcast i8* %6006 to double*
  %6012 = load double, double* %6011, align 1
  %6013 = getelementptr inbounds i8, i8* %6006, i64 8
  %6014 = bitcast i8* %6013 to i64*
  %6015 = load i64, i64* %6014, align 1
  %6016 = inttoptr i64 %6008 to double*
  %6017 = load double, double* %6016
  %6018 = fmul double %6012, %6017
  %6019 = bitcast i8* %6005 to double*
  store double %6018, double* %6019, align 1, !tbaa !2451
  %6020 = getelementptr inbounds i8, i8* %6005, i64 8
  %6021 = bitcast i8* %6020 to i64*
  store i64 %6015, i64* %6021, align 1, !tbaa !2451
  %6022 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6023 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6024 = load i64, i64* %PC
  %6025 = add i64 %6024, 9
  store i64 %6025, i64* %PC
  %6026 = bitcast i8* %6023 to double*
  %6027 = load double, double* %6026, align 1
  %6028 = getelementptr inbounds i8, i8* %6023, i64 8
  %6029 = bitcast i8* %6028 to i64*
  %6030 = load i64, i64* %6029, align 1
  %6031 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %6032 = fadd double %6027, %6031
  %6033 = bitcast i8* %6022 to double*
  store double %6032, double* %6033, align 1, !tbaa !2451
  %6034 = getelementptr inbounds i8, i8* %6022, i64 8
  %6035 = bitcast i8* %6034 to i64*
  store i64 %6030, i64* %6035, align 1, !tbaa !2451
  %6036 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6037 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6038 = load i64, i64* %RBP
  %6039 = sub i64 %6038, 40
  %6040 = load i64, i64* %PC
  %6041 = add i64 %6040, 5
  store i64 %6041, i64* %PC
  %6042 = bitcast i8* %6037 to double*
  %6043 = load double, double* %6042, align 1
  %6044 = getelementptr inbounds i8, i8* %6037, i64 8
  %6045 = bitcast i8* %6044 to i64*
  %6046 = load i64, i64* %6045, align 1
  %6047 = inttoptr i64 %6039 to double*
  %6048 = load double, double* %6047
  %6049 = fmul double %6043, %6048
  %6050 = bitcast i8* %6036 to double*
  store double %6049, double* %6050, align 1, !tbaa !2451
  %6051 = getelementptr inbounds i8, i8* %6036, i64 8
  %6052 = bitcast i8* %6051 to i64*
  store i64 %6046, i64* %6052, align 1, !tbaa !2451
  %6053 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6054 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6055 = load i64, i64* %PC
  %6056 = add i64 %6055, 9
  store i64 %6056, i64* %PC
  %6057 = bitcast i8* %6054 to double*
  %6058 = load double, double* %6057, align 1
  %6059 = getelementptr inbounds i8, i8* %6054, i64 8
  %6060 = bitcast i8* %6059 to i64*
  %6061 = load i64, i64* %6060, align 1
  %6062 = load double, double* bitcast (%one_type* @one to double*)
  %6063 = fadd double %6058, %6062
  %6064 = bitcast i8* %6053 to double*
  store double %6063, double* %6064, align 1, !tbaa !2451
  %6065 = getelementptr inbounds i8, i8* %6053, i64 8
  %6066 = bitcast i8* %6065 to i64*
  store i64 %6061, i64* %6066, align 1, !tbaa !2451
  %6067 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6068 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6069 = bitcast %union.vec128_t* %XMM1 to i8*
  %6070 = load i64, i64* %PC
  %6071 = add i64 %6070, 4
  store i64 %6071, i64* %PC
  %6072 = bitcast i8* %6068 to double*
  %6073 = load double, double* %6072, align 1
  %6074 = getelementptr inbounds i8, i8* %6068, i64 8
  %6075 = bitcast i8* %6074 to i64*
  %6076 = load i64, i64* %6075, align 1
  %6077 = bitcast i8* %6069 to double*
  %6078 = load double, double* %6077, align 1
  %6079 = fmul double %6073, %6078
  %6080 = bitcast i8* %6067 to double*
  store double %6079, double* %6080, align 1, !tbaa !2451
  %6081 = getelementptr inbounds i8, i8* %6067, i64 8
  %6082 = bitcast i8* %6081 to i64*
  store i64 %6076, i64* %6082, align 1, !tbaa !2451
  %6083 = load i64, i64* %RBP
  %6084 = sub i64 %6083, 32
  %6085 = bitcast %union.vec128_t* %XMM0 to i8*
  %6086 = load i64, i64* %PC
  %6087 = add i64 %6086, 5
  store i64 %6087, i64* %PC
  %6088 = bitcast i8* %6085 to double*
  %6089 = load double, double* %6088, align 1
  %6090 = inttoptr i64 %6084 to double*
  store double %6089, double* %6090
  %6091 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6092 = load i64, i64* %RBP
  %6093 = sub i64 %6092, 16
  %6094 = load i64, i64* %PC
  %6095 = add i64 %6094, 5
  store i64 %6095, i64* %PC
  %6096 = inttoptr i64 %6093 to double*
  %6097 = load double, double* %6096
  %6098 = bitcast i8* %6091 to double*
  store double %6097, double* %6098, align 1, !tbaa !2451
  %6099 = getelementptr inbounds i8, i8* %6091, i64 8
  %6100 = bitcast i8* %6099 to double*
  store double 0.000000e+00, double* %6100, align 1, !tbaa !2451
  %6101 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6102 = load i64, i64* %RBP
  %6103 = sub i64 %6102, 32
  %6104 = load i64, i64* %PC
  %6105 = add i64 %6104, 5
  store i64 %6105, i64* %PC
  %6106 = inttoptr i64 %6103 to double*
  %6107 = load double, double* %6106
  %6108 = bitcast i8* %6101 to double*
  store double %6107, double* %6108, align 1, !tbaa !2451
  %6109 = getelementptr inbounds i8, i8* %6101, i64 8
  %6110 = bitcast i8* %6109 to double*
  store double 0.000000e+00, double* %6110, align 1, !tbaa !2451
  %6111 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6112 = load i64, i64* %RBP
  %6113 = sub i64 %6112, 40
  %6114 = load i64, i64* %PC
  %6115 = add i64 %6114, 5
  store i64 %6115, i64* %PC
  %6116 = inttoptr i64 %6113 to double*
  %6117 = load double, double* %6116
  %6118 = bitcast i8* %6111 to double*
  store double %6117, double* %6118, align 1, !tbaa !2451
  %6119 = getelementptr inbounds i8, i8* %6111, i64 8
  %6120 = bitcast i8* %6119 to double*
  store double 0.000000e+00, double* %6120, align 1, !tbaa !2451
  %6121 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6122 = load i64, i64* %RBP
  %6123 = sub i64 %6122, 40
  %6124 = load i64, i64* %PC
  %6125 = add i64 %6124, 5
  store i64 %6125, i64* %PC
  %6126 = inttoptr i64 %6123 to double*
  %6127 = load double, double* %6126
  %6128 = bitcast i8* %6121 to double*
  store double %6127, double* %6128, align 1, !tbaa !2451
  %6129 = getelementptr inbounds i8, i8* %6121, i64 8
  %6130 = bitcast i8* %6129 to double*
  store double 0.000000e+00, double* %6130, align 1, !tbaa !2451
  %6131 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6132 = load i64, i64* %RBP
  %6133 = sub i64 %6132, 40
  %6134 = load i64, i64* %PC
  %6135 = add i64 %6134, 5
  store i64 %6135, i64* %PC
  %6136 = inttoptr i64 %6133 to double*
  %6137 = load double, double* %6136
  %6138 = bitcast i8* %6131 to double*
  store double %6137, double* %6138, align 1, !tbaa !2451
  %6139 = getelementptr inbounds i8, i8* %6131, i64 8
  %6140 = bitcast i8* %6139 to double*
  store double 0.000000e+00, double* %6140, align 1, !tbaa !2451
  %6141 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %6142 = load i64, i64* %RBP
  %6143 = sub i64 %6142, 40
  %6144 = load i64, i64* %PC
  %6145 = add i64 %6144, 5
  store i64 %6145, i64* %PC
  %6146 = inttoptr i64 %6143 to double*
  %6147 = load double, double* %6146
  %6148 = bitcast i8* %6141 to double*
  store double %6147, double* %6148, align 1, !tbaa !2451
  %6149 = getelementptr inbounds i8, i8* %6141, i64 8
  %6150 = bitcast i8* %6149 to double*
  store double 0.000000e+00, double* %6150, align 1, !tbaa !2451
  %6151 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %6152 = load i64, i64* %RBP
  %6153 = sub i64 %6152, 40
  %6154 = load i64, i64* %PC
  %6155 = add i64 %6154, 5
  store i64 %6155, i64* %PC
  %6156 = inttoptr i64 %6153 to double*
  %6157 = load double, double* %6156
  %6158 = bitcast i8* %6151 to double*
  store double %6157, double* %6158, align 1, !tbaa !2451
  %6159 = getelementptr inbounds i8, i8* %6151, i64 8
  %6160 = bitcast i8* %6159 to double*
  store double 0.000000e+00, double* %6160, align 1, !tbaa !2451
  %6161 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %6162 = load i64, i64* %PC
  %6163 = add i64 %6162, 9
  store i64 %6163, i64* %PC
  %6164 = load double, double* bitcast (%B6_type* @B6 to double*)
  %6165 = bitcast i8* %6161 to double*
  store double %6164, double* %6165, align 1, !tbaa !2451
  %6166 = getelementptr inbounds i8, i8* %6161, i64 8
  %6167 = bitcast i8* %6166 to double*
  store double 0.000000e+00, double* %6167, align 1, !tbaa !2451
  %6168 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %6169 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %6170 = load i64, i64* %RBP
  %6171 = sub i64 %6170, 40
  %6172 = load i64, i64* %PC
  %6173 = add i64 %6172, 5
  store i64 %6173, i64* %PC
  %6174 = bitcast i8* %6169 to double*
  %6175 = load double, double* %6174, align 1
  %6176 = getelementptr inbounds i8, i8* %6169, i64 8
  %6177 = bitcast i8* %6176 to i64*
  %6178 = load i64, i64* %6177, align 1
  %6179 = inttoptr i64 %6171 to double*
  %6180 = load double, double* %6179
  %6181 = fmul double %6175, %6180
  %6182 = bitcast i8* %6168 to double*
  store double %6181, double* %6182, align 1, !tbaa !2451
  %6183 = getelementptr inbounds i8, i8* %6168, i64 8
  %6184 = bitcast i8* %6183 to i64*
  store i64 %6178, i64* %6184, align 1, !tbaa !2451
  %6185 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %6186 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %6187 = load i64, i64* %PC
  %6188 = add i64 %6187, 9
  store i64 %6188, i64* %PC
  %6189 = bitcast i8* %6186 to double*
  %6190 = load double, double* %6189, align 1
  %6191 = getelementptr inbounds i8, i8* %6186, i64 8
  %6192 = bitcast i8* %6191 to i64*
  %6193 = load i64, i64* %6192, align 1
  %6194 = load double, double* bitcast (%B5_type* @B5 to double*)
  %6195 = fadd double %6190, %6194
  %6196 = bitcast i8* %6185 to double*
  store double %6195, double* %6196, align 1, !tbaa !2451
  %6197 = getelementptr inbounds i8, i8* %6185, i64 8
  %6198 = bitcast i8* %6197 to i64*
  store i64 %6193, i64* %6198, align 1, !tbaa !2451
  %6199 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %6200 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %6201 = bitcast %union.vec128_t* %XMM7 to i8*
  %6202 = load i64, i64* %PC
  %6203 = add i64 %6202, 4
  store i64 %6203, i64* %PC
  %6204 = bitcast i8* %6200 to double*
  %6205 = load double, double* %6204, align 1
  %6206 = getelementptr inbounds i8, i8* %6200, i64 8
  %6207 = bitcast i8* %6206 to i64*
  %6208 = load i64, i64* %6207, align 1
  %6209 = bitcast i8* %6201 to double*
  %6210 = load double, double* %6209, align 1
  %6211 = fmul double %6205, %6210
  %6212 = bitcast i8* %6199 to double*
  store double %6211, double* %6212, align 1, !tbaa !2451
  %6213 = getelementptr inbounds i8, i8* %6199, i64 8
  %6214 = bitcast i8* %6213 to i64*
  store i64 %6208, i64* %6214, align 1, !tbaa !2451
  %6215 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %6216 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %6217 = load i64, i64* %PC
  %6218 = add i64 %6217, 9
  store i64 %6218, i64* %PC
  %6219 = bitcast i8* %6216 to double*
  %6220 = load double, double* %6219, align 1
  %6221 = getelementptr inbounds i8, i8* %6216, i64 8
  %6222 = bitcast i8* %6221 to i64*
  %6223 = load i64, i64* %6222, align 1
  %6224 = load double, double* bitcast (%B4_type* @B4 to double*)
  %6225 = fadd double %6220, %6224
  %6226 = bitcast i8* %6215 to double*
  store double %6225, double* %6226, align 1, !tbaa !2451
  %6227 = getelementptr inbounds i8, i8* %6215, i64 8
  %6228 = bitcast i8* %6227 to i64*
  store i64 %6223, i64* %6228, align 1, !tbaa !2451
  %6229 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %6230 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %6231 = bitcast %union.vec128_t* %XMM6 to i8*
  %6232 = load i64, i64* %PC
  %6233 = add i64 %6232, 4
  store i64 %6233, i64* %PC
  %6234 = bitcast i8* %6230 to double*
  %6235 = load double, double* %6234, align 1
  %6236 = getelementptr inbounds i8, i8* %6230, i64 8
  %6237 = bitcast i8* %6236 to i64*
  %6238 = load i64, i64* %6237, align 1
  %6239 = bitcast i8* %6231 to double*
  %6240 = load double, double* %6239, align 1
  %6241 = fmul double %6235, %6240
  %6242 = bitcast i8* %6229 to double*
  store double %6241, double* %6242, align 1, !tbaa !2451
  %6243 = getelementptr inbounds i8, i8* %6229, i64 8
  %6244 = bitcast i8* %6243 to i64*
  store i64 %6238, i64* %6244, align 1, !tbaa !2451
  %6245 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %6246 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %6247 = load i64, i64* %PC
  %6248 = add i64 %6247, 9
  store i64 %6248, i64* %PC
  %6249 = bitcast i8* %6246 to double*
  %6250 = load double, double* %6249, align 1
  %6251 = getelementptr inbounds i8, i8* %6246, i64 8
  %6252 = bitcast i8* %6251 to i64*
  %6253 = load i64, i64* %6252, align 1
  %6254 = load double, double* bitcast (%B3_type* @B3 to double*)
  %6255 = fadd double %6250, %6254
  %6256 = bitcast i8* %6245 to double*
  store double %6255, double* %6256, align 1, !tbaa !2451
  %6257 = getelementptr inbounds i8, i8* %6245, i64 8
  %6258 = bitcast i8* %6257 to i64*
  store i64 %6253, i64* %6258, align 1, !tbaa !2451
  %6259 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6260 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6261 = bitcast %union.vec128_t* %XMM5 to i8*
  %6262 = load i64, i64* %PC
  %6263 = add i64 %6262, 4
  store i64 %6263, i64* %PC
  %6264 = bitcast i8* %6260 to double*
  %6265 = load double, double* %6264, align 1
  %6266 = getelementptr inbounds i8, i8* %6260, i64 8
  %6267 = bitcast i8* %6266 to i64*
  %6268 = load i64, i64* %6267, align 1
  %6269 = bitcast i8* %6261 to double*
  %6270 = load double, double* %6269, align 1
  %6271 = fmul double %6265, %6270
  %6272 = bitcast i8* %6259 to double*
  store double %6271, double* %6272, align 1, !tbaa !2451
  %6273 = getelementptr inbounds i8, i8* %6259, i64 8
  %6274 = bitcast i8* %6273 to i64*
  store i64 %6268, i64* %6274, align 1, !tbaa !2451
  %6275 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6276 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6277 = load i64, i64* %PC
  %6278 = add i64 %6277, 9
  store i64 %6278, i64* %PC
  %6279 = bitcast i8* %6276 to double*
  %6280 = load double, double* %6279, align 1
  %6281 = getelementptr inbounds i8, i8* %6276, i64 8
  %6282 = bitcast i8* %6281 to i64*
  %6283 = load i64, i64* %6282, align 1
  %6284 = load double, double* bitcast (%B2_type* @B2 to double*)
  %6285 = fadd double %6280, %6284
  %6286 = bitcast i8* %6275 to double*
  store double %6285, double* %6286, align 1, !tbaa !2451
  %6287 = getelementptr inbounds i8, i8* %6275, i64 8
  %6288 = bitcast i8* %6287 to i64*
  store i64 %6283, i64* %6288, align 1, !tbaa !2451
  %6289 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6290 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6291 = bitcast %union.vec128_t* %XMM4 to i8*
  %6292 = load i64, i64* %PC
  %6293 = add i64 %6292, 4
  store i64 %6293, i64* %PC
  %6294 = bitcast i8* %6290 to double*
  %6295 = load double, double* %6294, align 1
  %6296 = getelementptr inbounds i8, i8* %6290, i64 8
  %6297 = bitcast i8* %6296 to i64*
  %6298 = load i64, i64* %6297, align 1
  %6299 = bitcast i8* %6291 to double*
  %6300 = load double, double* %6299, align 1
  %6301 = fmul double %6295, %6300
  %6302 = bitcast i8* %6289 to double*
  store double %6301, double* %6302, align 1, !tbaa !2451
  %6303 = getelementptr inbounds i8, i8* %6289, i64 8
  %6304 = bitcast i8* %6303 to i64*
  store i64 %6298, i64* %6304, align 1, !tbaa !2451
  %6305 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6306 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6307 = load i64, i64* %PC
  %6308 = add i64 %6307, 9
  store i64 %6308, i64* %PC
  %6309 = bitcast i8* %6306 to double*
  %6310 = load double, double* %6309, align 1
  %6311 = getelementptr inbounds i8, i8* %6306, i64 8
  %6312 = bitcast i8* %6311 to i64*
  %6313 = load i64, i64* %6312, align 1
  %6314 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %6315 = fadd double %6310, %6314
  %6316 = bitcast i8* %6305 to double*
  store double %6315, double* %6316, align 1, !tbaa !2451
  %6317 = getelementptr inbounds i8, i8* %6305, i64 8
  %6318 = bitcast i8* %6317 to i64*
  store i64 %6313, i64* %6318, align 1, !tbaa !2451
  %6319 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6320 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6321 = bitcast %union.vec128_t* %XMM3 to i8*
  %6322 = load i64, i64* %PC
  %6323 = add i64 %6322, 4
  store i64 %6323, i64* %PC
  %6324 = bitcast i8* %6320 to double*
  %6325 = load double, double* %6324, align 1
  %6326 = getelementptr inbounds i8, i8* %6320, i64 8
  %6327 = bitcast i8* %6326 to i64*
  %6328 = load i64, i64* %6327, align 1
  %6329 = bitcast i8* %6321 to double*
  %6330 = load double, double* %6329, align 1
  %6331 = fmul double %6325, %6330
  %6332 = bitcast i8* %6319 to double*
  store double %6331, double* %6332, align 1, !tbaa !2451
  %6333 = getelementptr inbounds i8, i8* %6319, i64 8
  %6334 = bitcast i8* %6333 to i64*
  store i64 %6328, i64* %6334, align 1, !tbaa !2451
  %6335 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6336 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6337 = load i64, i64* %PC
  %6338 = add i64 %6337, 9
  store i64 %6338, i64* %PC
  %6339 = bitcast i8* %6336 to double*
  %6340 = load double, double* %6339, align 1
  %6341 = getelementptr inbounds i8, i8* %6336, i64 8
  %6342 = bitcast i8* %6341 to i64*
  %6343 = load i64, i64* %6342, align 1
  %6344 = load double, double* bitcast (%one_type* @one to double*)
  %6345 = fadd double %6340, %6344
  %6346 = bitcast i8* %6335 to double*
  store double %6345, double* %6346, align 1, !tbaa !2451
  %6347 = getelementptr inbounds i8, i8* %6335, i64 8
  %6348 = bitcast i8* %6347 to i64*
  store i64 %6343, i64* %6348, align 1, !tbaa !2451
  %6349 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6350 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6351 = bitcast %union.vec128_t* %XMM2 to i8*
  %6352 = load i64, i64* %PC
  %6353 = add i64 %6352, 4
  store i64 %6353, i64* %PC
  %6354 = bitcast i8* %6350 to double*
  %6355 = load double, double* %6354, align 1
  %6356 = getelementptr inbounds i8, i8* %6350, i64 8
  %6357 = bitcast i8* %6356 to i64*
  %6358 = load i64, i64* %6357, align 1
  %6359 = bitcast i8* %6351 to double*
  %6360 = load double, double* %6359, align 1
  %6361 = fdiv double %6355, %6360
  %6362 = bitcast i8* %6349 to double*
  store double %6361, double* %6362, align 1, !tbaa !2451
  %6363 = getelementptr inbounds i8, i8* %6349, i64 8
  %6364 = bitcast i8* %6363 to i64*
  store i64 %6358, i64* %6364, align 1, !tbaa !2451
  %6365 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6366 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6367 = bitcast %union.vec128_t* %XMM1 to i8*
  %6368 = load i64, i64* %PC
  %6369 = add i64 %6368, 4
  store i64 %6369, i64* %PC
  %6370 = bitcast i8* %6366 to double*
  %6371 = load double, double* %6370, align 1
  %6372 = getelementptr inbounds i8, i8* %6366, i64 8
  %6373 = bitcast i8* %6372 to i64*
  %6374 = load i64, i64* %6373, align 1
  %6375 = bitcast i8* %6367 to double*
  %6376 = load double, double* %6375, align 1
  %6377 = fadd double %6371, %6376
  %6378 = bitcast i8* %6365 to double*
  store double %6377, double* %6378, align 1, !tbaa !2451
  %6379 = getelementptr inbounds i8, i8* %6365, i64 8
  %6380 = bitcast i8* %6379 to i64*
  store i64 %6374, i64* %6380, align 1, !tbaa !2451
  %6381 = load i64, i64* %RBP
  %6382 = sub i64 %6381, 16
  %6383 = bitcast %union.vec128_t* %XMM0 to i8*
  %6384 = load i64, i64* %PC
  %6385 = add i64 %6384, 5
  store i64 %6385, i64* %PC
  %6386 = bitcast i8* %6383 to double*
  %6387 = load double, double* %6386, align 1
  %6388 = inttoptr i64 %6382 to double*
  store double %6387, double* %6388
  %6389 = load i64, i64* %RBP
  %6390 = sub i64 %6389, 72
  %6391 = load i64, i64* %PC
  %6392 = add i64 %6391, 4
  store i64 %6392, i64* %PC
  %6393 = inttoptr i64 %6390 to i64*
  %6394 = load i64, i64* %6393
  store i64 %6394, i64* %RAX, align 8, !tbaa !2428
  %6395 = load i64, i64* %RAX
  %6396 = load i64, i64* %PC
  %6397 = add i64 %6396, 4
  store i64 %6397, i64* %PC
  %6398 = add i64 1, %6395
  store i64 %6398, i64* %RAX, align 8, !tbaa !2428
  %6399 = icmp ult i64 %6398, %6395
  %6400 = icmp ult i64 %6398, 1
  %6401 = or i1 %6399, %6400
  %6402 = zext i1 %6401 to i8
  %6403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6402, i8* %6403, align 1, !tbaa !2432
  %6404 = trunc i64 %6398 to i32
  %6405 = and i32 %6404, 255
  %6406 = call i32 @llvm.ctpop.i32(i32 %6405) #16
  %6407 = trunc i32 %6406 to i8
  %6408 = and i8 %6407, 1
  %6409 = xor i8 %6408, 1
  %6410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6409, i8* %6410, align 1, !tbaa !2446
  %6411 = xor i64 1, %6395
  %6412 = xor i64 %6411, %6398
  %6413 = lshr i64 %6412, 4
  %6414 = trunc i64 %6413 to i8
  %6415 = and i8 %6414, 1
  %6416 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6415, i8* %6416, align 1, !tbaa !2447
  %6417 = icmp eq i64 %6398, 0
  %6418 = zext i1 %6417 to i8
  %6419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6418, i8* %6419, align 1, !tbaa !2448
  %6420 = lshr i64 %6398, 63
  %6421 = trunc i64 %6420 to i8
  %6422 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6421, i8* %6422, align 1, !tbaa !2449
  %6423 = lshr i64 %6395, 63
  %6424 = xor i64 %6420, %6423
  %6425 = add nuw nsw i64 %6424, %6420
  %6426 = icmp eq i64 %6425, 2
  %6427 = zext i1 %6426 to i8
  %6428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6427, i8* %6428, align 1, !tbaa !2450
  %6429 = load i64, i64* %RBP
  %6430 = sub i64 %6429, 72
  %6431 = load i64, i64* %RAX
  %6432 = load i64, i64* %PC
  %6433 = add i64 %6432, 4
  store i64 %6433, i64* %PC
  %6434 = inttoptr i64 %6430 to i64*
  store i64 %6431, i64* %6434
  %6435 = load i64, i64* %PC
  %6436 = sub i64 %6435, 310
  %6437 = load i64, i64* %PC
  %6438 = add i64 %6437, 5
  store i64 %6438, i64* %PC
  %6439 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6436, i64* %6439, align 8, !tbaa !2428
  br label %block_4014f4

block_400bc8:                                     ; preds = %block_400b79, %block_400bd6
  %MEMORY.7 = phi %struct.Memory* [ %13153, %block_400b79 ], [ %MEMORY.7, %block_400bd6 ]
  %6440 = load i64, i64* %RBP
  %6441 = sub i64 %6440, 72
  %6442 = load i64, i64* %PC
  %6443 = add i64 %6442, 4
  store i64 %6443, i64* %PC
  %6444 = inttoptr i64 %6441 to i64*
  %6445 = load i64, i64* %6444
  store i64 %6445, i64* %RAX, align 8, !tbaa !2428
  %6446 = load i64, i64* %RAX
  %6447 = load i64, i64* %RBP
  %6448 = sub i64 %6447, 80
  %6449 = load i64, i64* %PC
  %6450 = add i64 %6449, 4
  store i64 %6450, i64* %PC
  %6451 = inttoptr i64 %6448 to i64*
  %6452 = load i64, i64* %6451
  %6453 = sub i64 %6446, %6452
  %6454 = icmp ugt i64 %6452, %6446
  %6455 = zext i1 %6454 to i8
  %6456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6455, i8* %6456, align 1, !tbaa !2432
  %6457 = trunc i64 %6453 to i32
  %6458 = and i32 %6457, 255
  %6459 = call i32 @llvm.ctpop.i32(i32 %6458) #16
  %6460 = trunc i32 %6459 to i8
  %6461 = and i8 %6460, 1
  %6462 = xor i8 %6461, 1
  %6463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6462, i8* %6463, align 1, !tbaa !2446
  %6464 = xor i64 %6452, %6446
  %6465 = xor i64 %6464, %6453
  %6466 = lshr i64 %6465, 4
  %6467 = trunc i64 %6466 to i8
  %6468 = and i8 %6467, 1
  %6469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6468, i8* %6469, align 1, !tbaa !2447
  %6470 = icmp eq i64 %6453, 0
  %6471 = zext i1 %6470 to i8
  %6472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6471, i8* %6472, align 1, !tbaa !2448
  %6473 = lshr i64 %6453, 63
  %6474 = trunc i64 %6473 to i8
  %6475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6474, i8* %6475, align 1, !tbaa !2449
  %6476 = lshr i64 %6446, 63
  %6477 = lshr i64 %6452, 63
  %6478 = xor i64 %6477, %6476
  %6479 = xor i64 %6473, %6476
  %6480 = add nuw nsw i64 %6479, %6478
  %6481 = icmp eq i64 %6480, 2
  %6482 = zext i1 %6481 to i8
  %6483 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6482, i8* %6483, align 1, !tbaa !2450
  %6484 = load i64, i64* %PC
  %6485 = add i64 %6484, 170
  %6486 = load i64, i64* %PC
  %6487 = add i64 %6486, 6
  %6488 = load i64, i64* %PC
  %6489 = add i64 %6488, 6
  store i64 %6489, i64* %PC
  %6490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6491 = load i8, i8* %6490, align 1, !tbaa !2448
  %6492 = icmp eq i8 %6491, 0
  %6493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6494 = load i8, i8* %6493, align 1, !tbaa !2449
  %6495 = icmp ne i8 %6494, 0
  %6496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6497 = load i8, i8* %6496, align 1, !tbaa !2450
  %6498 = icmp ne i8 %6497, 0
  %6499 = xor i1 %6495, %6498
  %6500 = xor i1 %6499, true
  %6501 = and i1 %6492, %6500
  %6502 = zext i1 %6501 to i8
  store i8 %6502, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %6503 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6504 = select i1 %6501, i64 %6485, i64 %6487
  store i64 %6504, i64* %6503, align 8, !tbaa !2428
  %6505 = load i8, i8* %BRANCH_TAKEN
  %6506 = icmp eq i8 %6505, 1
  %6507 = load i64, i64* %PC
  %6508 = add i64 %6507, 10
  store i64 %6508, i64* %PC
  br i1 %6506, label %block_400c7a, label %block_400bd6

block_400e75:                                     ; preds = %block_400e60
  %6509 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6510 = load i64, i64* %RBP
  %6511 = sub i64 %6510, 32
  %6512 = load i64, i64* %PC
  %6513 = add i64 %6512, 5
  store i64 %6513, i64* %PC
  %6514 = inttoptr i64 %6511 to double*
  %6515 = load double, double* %6514
  %6516 = bitcast i8* %6509 to double*
  store double %6515, double* %6516, align 1, !tbaa !2451
  %6517 = getelementptr inbounds i8, i8* %6509, i64 8
  %6518 = bitcast i8* %6517 to double*
  store double 0.000000e+00, double* %6518, align 1, !tbaa !2451
  %6519 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6520 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6521 = load i64, i64* %PC
  %6522 = add i64 %6521, 9
  store i64 %6522, i64* %PC
  %6523 = bitcast i8* %6520 to double*
  %6524 = load double, double* %6523, align 1
  %6525 = getelementptr inbounds i8, i8* %6520, i64 8
  %6526 = bitcast i8* %6525 to i64*
  %6527 = load i64, i64* %6526, align 1
  %6528 = load double, double* bitcast (%one_type* @one to double*)
  %6529 = fadd double %6524, %6528
  %6530 = bitcast i8* %6519 to double*
  store double %6529, double* %6530, align 1, !tbaa !2451
  %6531 = getelementptr inbounds i8, i8* %6519, i64 8
  %6532 = bitcast i8* %6531 to i64*
  store i64 %6527, i64* %6532, align 1, !tbaa !2451
  %6533 = load i64, i64* %RBP
  %6534 = sub i64 %6533, 32
  %6535 = bitcast %union.vec128_t* %XMM0 to i8*
  %6536 = load i64, i64* %PC
  %6537 = add i64 %6536, 5
  store i64 %6537, i64* %PC
  %6538 = bitcast i8* %6535 to double*
  %6539 = load double, double* %6538, align 1
  %6540 = inttoptr i64 %6534 to double*
  store double %6539, double* %6540
  %6541 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6542 = load i64, i64* %RBP
  %6543 = sub i64 %6542, 32
  %6544 = load i64, i64* %PC
  %6545 = add i64 %6544, 5
  store i64 %6545, i64* %PC
  %6546 = inttoptr i64 %6543 to double*
  %6547 = load double, double* %6546
  %6548 = bitcast i8* %6541 to double*
  store double %6547, double* %6548, align 1, !tbaa !2451
  %6549 = getelementptr inbounds i8, i8* %6541, i64 8
  %6550 = bitcast i8* %6549 to double*
  store double 0.000000e+00, double* %6550, align 1, !tbaa !2451
  %6551 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6552 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6553 = load i64, i64* %RBP
  %6554 = sub i64 %6553, 48
  %6555 = load i64, i64* %PC
  %6556 = add i64 %6555, 5
  store i64 %6556, i64* %PC
  %6557 = bitcast i8* %6552 to double*
  %6558 = load double, double* %6557, align 1
  %6559 = getelementptr inbounds i8, i8* %6552, i64 8
  %6560 = bitcast i8* %6559 to i64*
  %6561 = load i64, i64* %6560, align 1
  %6562 = inttoptr i64 %6554 to double*
  %6563 = load double, double* %6562
  %6564 = fmul double %6558, %6563
  %6565 = bitcast i8* %6551 to double*
  store double %6564, double* %6565, align 1, !tbaa !2451
  %6566 = getelementptr inbounds i8, i8* %6551, i64 8
  %6567 = bitcast i8* %6566 to i64*
  store i64 %6561, i64* %6567, align 1, !tbaa !2451
  %6568 = load i64, i64* %RBP
  %6569 = sub i64 %6568, 24
  %6570 = bitcast %union.vec128_t* %XMM0 to i8*
  %6571 = load i64, i64* %PC
  %6572 = add i64 %6571, 5
  store i64 %6572, i64* %PC
  %6573 = bitcast i8* %6570 to double*
  %6574 = load double, double* %6573, align 1
  %6575 = inttoptr i64 %6569 to double*
  store double %6574, double* %6575
  %6576 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6577 = load i64, i64* %RBP
  %6578 = sub i64 %6577, 24
  %6579 = load i64, i64* %PC
  %6580 = add i64 %6579, 5
  store i64 %6580, i64* %PC
  %6581 = inttoptr i64 %6578 to double*
  %6582 = load double, double* %6581
  %6583 = bitcast i8* %6576 to double*
  store double %6582, double* %6583, align 1, !tbaa !2451
  %6584 = getelementptr inbounds i8, i8* %6576, i64 8
  %6585 = bitcast i8* %6584 to double*
  store double 0.000000e+00, double* %6585, align 1, !tbaa !2451
  %6586 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6587 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6588 = load i64, i64* %RBP
  %6589 = sub i64 %6588, 24
  %6590 = load i64, i64* %PC
  %6591 = add i64 %6590, 5
  store i64 %6591, i64* %PC
  %6592 = bitcast i8* %6587 to double*
  %6593 = load double, double* %6592, align 1
  %6594 = getelementptr inbounds i8, i8* %6587, i64 8
  %6595 = bitcast i8* %6594 to i64*
  %6596 = load i64, i64* %6595, align 1
  %6597 = inttoptr i64 %6589 to double*
  %6598 = load double, double* %6597
  %6599 = fmul double %6593, %6598
  %6600 = bitcast i8* %6586 to double*
  store double %6599, double* %6600, align 1, !tbaa !2451
  %6601 = getelementptr inbounds i8, i8* %6586, i64 8
  %6602 = bitcast i8* %6601 to i64*
  store i64 %6596, i64* %6602, align 1, !tbaa !2451
  %6603 = load i64, i64* %RBP
  %6604 = sub i64 %6603, 40
  %6605 = bitcast %union.vec128_t* %XMM0 to i8*
  %6606 = load i64, i64* %PC
  %6607 = add i64 %6606, 5
  store i64 %6607, i64* %PC
  %6608 = bitcast i8* %6605 to double*
  %6609 = load double, double* %6608, align 1
  %6610 = inttoptr i64 %6604 to double*
  store double %6609, double* %6610
  %6611 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6612 = load i64, i64* %RBP
  %6613 = sub i64 %6612, 16
  %6614 = load i64, i64* %PC
  %6615 = add i64 %6614, 5
  store i64 %6615, i64* %PC
  %6616 = inttoptr i64 %6613 to double*
  %6617 = load double, double* %6616
  %6618 = bitcast i8* %6611 to double*
  store double %6617, double* %6618, align 1, !tbaa !2451
  %6619 = getelementptr inbounds i8, i8* %6611, i64 8
  %6620 = bitcast i8* %6619 to double*
  store double 0.000000e+00, double* %6620, align 1, !tbaa !2451
  %6621 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6622 = load i64, i64* %RBP
  %6623 = sub i64 %6622, 24
  %6624 = load i64, i64* %PC
  %6625 = add i64 %6624, 5
  store i64 %6625, i64* %PC
  %6626 = inttoptr i64 %6623 to double*
  %6627 = load double, double* %6626
  %6628 = bitcast i8* %6621 to double*
  store double %6627, double* %6628, align 1, !tbaa !2451
  %6629 = getelementptr inbounds i8, i8* %6621, i64 8
  %6630 = bitcast i8* %6629 to double*
  store double 0.000000e+00, double* %6630, align 1, !tbaa !2451
  %6631 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6632 = load i64, i64* %PC
  %6633 = add i64 %6632, 9
  store i64 %6633, i64* %PC
  %6634 = load double, double* bitcast (%A6_type* @A6 to double*)
  %6635 = bitcast i8* %6631 to double*
  store double %6634, double* %6635, align 1, !tbaa !2451
  %6636 = getelementptr inbounds i8, i8* %6631, i64 8
  %6637 = bitcast i8* %6636 to double*
  store double 0.000000e+00, double* %6637, align 1, !tbaa !2451
  %6638 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6639 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6640 = load i64, i64* %RBP
  %6641 = sub i64 %6640, 40
  %6642 = load i64, i64* %PC
  %6643 = add i64 %6642, 5
  store i64 %6643, i64* %PC
  %6644 = bitcast i8* %6639 to double*
  %6645 = load double, double* %6644, align 1
  %6646 = getelementptr inbounds i8, i8* %6639, i64 8
  %6647 = bitcast i8* %6646 to i64*
  %6648 = load i64, i64* %6647, align 1
  %6649 = inttoptr i64 %6641 to double*
  %6650 = load double, double* %6649
  %6651 = fmul double %6645, %6650
  %6652 = bitcast i8* %6638 to double*
  store double %6651, double* %6652, align 1, !tbaa !2451
  %6653 = getelementptr inbounds i8, i8* %6638, i64 8
  %6654 = bitcast i8* %6653 to i64*
  store i64 %6648, i64* %6654, align 1, !tbaa !2451
  %6655 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6656 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6657 = load i64, i64* %PC
  %6658 = add i64 %6657, 9
  store i64 %6658, i64* %PC
  %6659 = bitcast i8* %6656 to double*
  %6660 = load double, double* %6659, align 1
  %6661 = getelementptr inbounds i8, i8* %6656, i64 8
  %6662 = bitcast i8* %6661 to i64*
  %6663 = load i64, i64* %6662, align 1
  %6664 = load double, double* bitcast (%A5_type* @A5 to double*)
  %6665 = fsub double %6660, %6664
  %6666 = bitcast i8* %6655 to double*
  store double %6665, double* %6666, align 1, !tbaa !2451
  %6667 = getelementptr inbounds i8, i8* %6655, i64 8
  %6668 = bitcast i8* %6667 to i64*
  store i64 %6663, i64* %6668, align 1, !tbaa !2451
  %6669 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6670 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6671 = load i64, i64* %RBP
  %6672 = sub i64 %6671, 40
  %6673 = load i64, i64* %PC
  %6674 = add i64 %6673, 5
  store i64 %6674, i64* %PC
  %6675 = bitcast i8* %6670 to double*
  %6676 = load double, double* %6675, align 1
  %6677 = getelementptr inbounds i8, i8* %6670, i64 8
  %6678 = bitcast i8* %6677 to i64*
  %6679 = load i64, i64* %6678, align 1
  %6680 = inttoptr i64 %6672 to double*
  %6681 = load double, double* %6680
  %6682 = fmul double %6676, %6681
  %6683 = bitcast i8* %6669 to double*
  store double %6682, double* %6683, align 1, !tbaa !2451
  %6684 = getelementptr inbounds i8, i8* %6669, i64 8
  %6685 = bitcast i8* %6684 to i64*
  store i64 %6679, i64* %6685, align 1, !tbaa !2451
  %6686 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6687 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6688 = load i64, i64* %PC
  %6689 = add i64 %6688, 9
  store i64 %6689, i64* %PC
  %6690 = bitcast i8* %6687 to double*
  %6691 = load double, double* %6690, align 1
  %6692 = getelementptr inbounds i8, i8* %6687, i64 8
  %6693 = bitcast i8* %6692 to i64*
  %6694 = load i64, i64* %6693, align 1
  %6695 = load double, double* bitcast (%A4_type* @A4 to double*)
  %6696 = fadd double %6691, %6695
  %6697 = bitcast i8* %6686 to double*
  store double %6696, double* %6697, align 1, !tbaa !2451
  %6698 = getelementptr inbounds i8, i8* %6686, i64 8
  %6699 = bitcast i8* %6698 to i64*
  store i64 %6694, i64* %6699, align 1, !tbaa !2451
  %6700 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6701 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6702 = load i64, i64* %RBP
  %6703 = sub i64 %6702, 40
  %6704 = load i64, i64* %PC
  %6705 = add i64 %6704, 5
  store i64 %6705, i64* %PC
  %6706 = bitcast i8* %6701 to double*
  %6707 = load double, double* %6706, align 1
  %6708 = getelementptr inbounds i8, i8* %6701, i64 8
  %6709 = bitcast i8* %6708 to i64*
  %6710 = load i64, i64* %6709, align 1
  %6711 = inttoptr i64 %6703 to double*
  %6712 = load double, double* %6711
  %6713 = fmul double %6707, %6712
  %6714 = bitcast i8* %6700 to double*
  store double %6713, double* %6714, align 1, !tbaa !2451
  %6715 = getelementptr inbounds i8, i8* %6700, i64 8
  %6716 = bitcast i8* %6715 to i64*
  store i64 %6710, i64* %6716, align 1, !tbaa !2451
  %6717 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6718 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6719 = load i64, i64* %PC
  %6720 = add i64 %6719, 9
  store i64 %6720, i64* %PC
  %6721 = bitcast i8* %6718 to double*
  %6722 = load double, double* %6721, align 1
  %6723 = getelementptr inbounds i8, i8* %6718, i64 8
  %6724 = bitcast i8* %6723 to i64*
  %6725 = load i64, i64* %6724, align 1
  %6726 = load double, double* bitcast (%A3_type* @A3 to double*)
  %6727 = fsub double %6722, %6726
  %6728 = bitcast i8* %6717 to double*
  store double %6727, double* %6728, align 1, !tbaa !2451
  %6729 = getelementptr inbounds i8, i8* %6717, i64 8
  %6730 = bitcast i8* %6729 to i64*
  store i64 %6725, i64* %6730, align 1, !tbaa !2451
  %6731 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6732 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6733 = load i64, i64* %RBP
  %6734 = sub i64 %6733, 40
  %6735 = load i64, i64* %PC
  %6736 = add i64 %6735, 5
  store i64 %6736, i64* %PC
  %6737 = bitcast i8* %6732 to double*
  %6738 = load double, double* %6737, align 1
  %6739 = getelementptr inbounds i8, i8* %6732, i64 8
  %6740 = bitcast i8* %6739 to i64*
  %6741 = load i64, i64* %6740, align 1
  %6742 = inttoptr i64 %6734 to double*
  %6743 = load double, double* %6742
  %6744 = fmul double %6738, %6743
  %6745 = bitcast i8* %6731 to double*
  store double %6744, double* %6745, align 1, !tbaa !2451
  %6746 = getelementptr inbounds i8, i8* %6731, i64 8
  %6747 = bitcast i8* %6746 to i64*
  store i64 %6741, i64* %6747, align 1, !tbaa !2451
  %6748 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6749 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6750 = load i64, i64* %PC
  %6751 = add i64 %6750, 9
  store i64 %6751, i64* %PC
  %6752 = bitcast i8* %6749 to double*
  %6753 = load double, double* %6752, align 1
  %6754 = getelementptr inbounds i8, i8* %6749, i64 8
  %6755 = bitcast i8* %6754 to i64*
  %6756 = load i64, i64* %6755, align 1
  %6757 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %6758 = fadd double %6753, %6757
  %6759 = bitcast i8* %6748 to double*
  store double %6758, double* %6759, align 1, !tbaa !2451
  %6760 = getelementptr inbounds i8, i8* %6748, i64 8
  %6761 = bitcast i8* %6760 to i64*
  store i64 %6756, i64* %6761, align 1, !tbaa !2451
  %6762 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6763 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6764 = load i64, i64* %RBP
  %6765 = sub i64 %6764, 40
  %6766 = load i64, i64* %PC
  %6767 = add i64 %6766, 5
  store i64 %6767, i64* %PC
  %6768 = bitcast i8* %6763 to double*
  %6769 = load double, double* %6768, align 1
  %6770 = getelementptr inbounds i8, i8* %6763, i64 8
  %6771 = bitcast i8* %6770 to i64*
  %6772 = load i64, i64* %6771, align 1
  %6773 = inttoptr i64 %6765 to double*
  %6774 = load double, double* %6773
  %6775 = fmul double %6769, %6774
  %6776 = bitcast i8* %6762 to double*
  store double %6775, double* %6776, align 1, !tbaa !2451
  %6777 = getelementptr inbounds i8, i8* %6762, i64 8
  %6778 = bitcast i8* %6777 to i64*
  store i64 %6772, i64* %6778, align 1, !tbaa !2451
  %6779 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6780 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6781 = load i64, i64* %PC
  %6782 = add i64 %6781, 9
  store i64 %6782, i64* %PC
  %6783 = bitcast i8* %6780 to double*
  %6784 = load double, double* %6783, align 1
  %6785 = getelementptr inbounds i8, i8* %6780, i64 8
  %6786 = bitcast i8* %6785 to i64*
  %6787 = load i64, i64* %6786, align 1
  %6788 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %6789 = fadd double %6784, %6788
  %6790 = bitcast i8* %6779 to double*
  store double %6789, double* %6790, align 1, !tbaa !2451
  %6791 = getelementptr inbounds i8, i8* %6779, i64 8
  %6792 = bitcast i8* %6791 to i64*
  store i64 %6787, i64* %6792, align 1, !tbaa !2451
  %6793 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6794 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6795 = load i64, i64* %RBP
  %6796 = sub i64 %6795, 40
  %6797 = load i64, i64* %PC
  %6798 = add i64 %6797, 5
  store i64 %6798, i64* %PC
  %6799 = bitcast i8* %6794 to double*
  %6800 = load double, double* %6799, align 1
  %6801 = getelementptr inbounds i8, i8* %6794, i64 8
  %6802 = bitcast i8* %6801 to i64*
  %6803 = load i64, i64* %6802, align 1
  %6804 = inttoptr i64 %6796 to double*
  %6805 = load double, double* %6804
  %6806 = fmul double %6800, %6805
  %6807 = bitcast i8* %6793 to double*
  store double %6806, double* %6807, align 1, !tbaa !2451
  %6808 = getelementptr inbounds i8, i8* %6793, i64 8
  %6809 = bitcast i8* %6808 to i64*
  store i64 %6803, i64* %6809, align 1, !tbaa !2451
  %6810 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6811 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6812 = load i64, i64* %PC
  %6813 = add i64 %6812, 9
  store i64 %6813, i64* %PC
  %6814 = bitcast i8* %6811 to double*
  %6815 = load double, double* %6814, align 1
  %6816 = getelementptr inbounds i8, i8* %6811, i64 8
  %6817 = bitcast i8* %6816 to i64*
  %6818 = load i64, i64* %6817, align 1
  %6819 = load double, double* bitcast (%one_type* @one to double*)
  %6820 = fadd double %6815, %6819
  %6821 = bitcast i8* %6810 to double*
  store double %6820, double* %6821, align 1, !tbaa !2451
  %6822 = getelementptr inbounds i8, i8* %6810, i64 8
  %6823 = bitcast i8* %6822 to i64*
  store i64 %6818, i64* %6823, align 1, !tbaa !2451
  %6824 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6825 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6826 = bitcast %union.vec128_t* %XMM2 to i8*
  %6827 = load i64, i64* %PC
  %6828 = add i64 %6827, 4
  store i64 %6828, i64* %PC
  %6829 = bitcast i8* %6825 to double*
  %6830 = load double, double* %6829, align 1
  %6831 = getelementptr inbounds i8, i8* %6825, i64 8
  %6832 = bitcast i8* %6831 to i64*
  %6833 = load i64, i64* %6832, align 1
  %6834 = bitcast i8* %6826 to double*
  %6835 = load double, double* %6834, align 1
  %6836 = fmul double %6830, %6835
  %6837 = bitcast i8* %6824 to double*
  store double %6836, double* %6837, align 1, !tbaa !2451
  %6838 = getelementptr inbounds i8, i8* %6824, i64 8
  %6839 = bitcast i8* %6838 to i64*
  store i64 %6833, i64* %6839, align 1, !tbaa !2451
  %6840 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6841 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6842 = bitcast %union.vec128_t* %XMM1 to i8*
  %6843 = load i64, i64* %PC
  %6844 = add i64 %6843, 4
  store i64 %6844, i64* %PC
  %6845 = bitcast i8* %6841 to double*
  %6846 = load double, double* %6845, align 1
  %6847 = getelementptr inbounds i8, i8* %6841, i64 8
  %6848 = bitcast i8* %6847 to i64*
  %6849 = load i64, i64* %6848, align 1
  %6850 = bitcast i8* %6842 to double*
  %6851 = load double, double* %6850, align 1
  %6852 = fadd double %6846, %6851
  %6853 = bitcast i8* %6840 to double*
  store double %6852, double* %6853, align 1, !tbaa !2451
  %6854 = getelementptr inbounds i8, i8* %6840, i64 8
  %6855 = bitcast i8* %6854 to i64*
  store i64 %6849, i64* %6855, align 1, !tbaa !2451
  %6856 = load i64, i64* %RBP
  %6857 = sub i64 %6856, 16
  %6858 = bitcast %union.vec128_t* %XMM0 to i8*
  %6859 = load i64, i64* %PC
  %6860 = add i64 %6859, 5
  store i64 %6860, i64* %PC
  %6861 = bitcast i8* %6858 to double*
  %6862 = load double, double* %6861, align 1
  %6863 = inttoptr i64 %6857 to double*
  store double %6862, double* %6863
  %6864 = load i64, i64* %RBP
  %6865 = sub i64 %6864, 72
  %6866 = load i64, i64* %PC
  %6867 = add i64 %6866, 4
  store i64 %6867, i64* %PC
  %6868 = inttoptr i64 %6865 to i64*
  %6869 = load i64, i64* %6868
  store i64 %6869, i64* %RAX, align 8, !tbaa !2428
  %6870 = load i64, i64* %RAX
  %6871 = load i64, i64* %PC
  %6872 = add i64 %6871, 4
  store i64 %6872, i64* %PC
  %6873 = add i64 1, %6870
  store i64 %6873, i64* %RAX, align 8, !tbaa !2428
  %6874 = icmp ult i64 %6873, %6870
  %6875 = icmp ult i64 %6873, 1
  %6876 = or i1 %6874, %6875
  %6877 = zext i1 %6876 to i8
  %6878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6877, i8* %6878, align 1, !tbaa !2432
  %6879 = trunc i64 %6873 to i32
  %6880 = and i32 %6879, 255
  %6881 = call i32 @llvm.ctpop.i32(i32 %6880) #16
  %6882 = trunc i32 %6881 to i8
  %6883 = and i8 %6882, 1
  %6884 = xor i8 %6883, 1
  %6885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6884, i8* %6885, align 1, !tbaa !2446
  %6886 = xor i64 1, %6870
  %6887 = xor i64 %6886, %6873
  %6888 = lshr i64 %6887, 4
  %6889 = trunc i64 %6888 to i8
  %6890 = and i8 %6889, 1
  %6891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6890, i8* %6891, align 1, !tbaa !2447
  %6892 = icmp eq i64 %6873, 0
  %6893 = zext i1 %6892 to i8
  %6894 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6893, i8* %6894, align 1, !tbaa !2448
  %6895 = lshr i64 %6873, 63
  %6896 = trunc i64 %6895 to i8
  %6897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6896, i8* %6897, align 1, !tbaa !2449
  %6898 = lshr i64 %6870, 63
  %6899 = xor i64 %6895, %6898
  %6900 = add nuw nsw i64 %6899, %6895
  %6901 = icmp eq i64 %6900, 2
  %6902 = zext i1 %6901 to i8
  %6903 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6902, i8* %6903, align 1, !tbaa !2450
  %6904 = load i64, i64* %RBP
  %6905 = sub i64 %6904, 72
  %6906 = load i64, i64* %RAX
  %6907 = load i64, i64* %PC
  %6908 = add i64 %6907, 4
  store i64 %6908, i64* %PC
  %6909 = inttoptr i64 %6905 to i64*
  store i64 %6906, i64* %6909
  %6910 = load i64, i64* %PC
  %6911 = sub i64 %6910, 198
  %6912 = load i64, i64* %PC
  %6913 = add i64 %6912, 5
  store i64 %6913, i64* %PC
  %6914 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6911, i64* %6914, align 8, !tbaa !2428
  br label %block_400e60

block_40162f:                                     ; preds = %block_4014f4
  %6915 = load i64, i64* %PC
  %6916 = add i64 %6915, 10
  store i64 %6916, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %6917 = load i64, i64* %PC
  %6918 = add i64 %6917, 4023
  %6919 = load i64, i64* %PC
  %6920 = add i64 %6919, 5
  %6921 = load i64, i64* %PC
  %6922 = add i64 %6921, 5
  store i64 %6922, i64* %PC
  %6923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6924 = load i64, i64* %6923, align 8, !tbaa !2428
  %6925 = add i64 %6924, -8
  %6926 = inttoptr i64 %6925 to i64*
  store i64 %6920, i64* %6926
  store i64 %6925, i64* %6923, align 8, !tbaa !2428
  %6927 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6918, i64* %6927, align 8, !tbaa !2428
  %6928 = load i64, i64* %PC
  %6929 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %6928, %struct.Memory* %MEMORY.0)
  %6930 = load i64, i64* %PC
  %6931 = add i64 %6930, 10
  store i64 %6931, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 534), i64* %RDI, align 8, !tbaa !2428
  %6932 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6933 = load i64, i64* %PC
  %6934 = add i64 %6933, 8
  store i64 %6934, i64* %PC
  %6935 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 72) to double*)
  %6936 = bitcast i8* %6932 to double*
  store double %6935, double* %6936, align 1, !tbaa !2451
  %6937 = getelementptr inbounds i8, i8* %6932, i64 8
  %6938 = bitcast i8* %6937 to double*
  store double 0.000000e+00, double* %6938, align 1, !tbaa !2451
  %6939 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6940 = load i64, i64* %PC
  %6941 = add i64 %6940, 8
  store i64 %6941, i64* %PC
  %6942 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 136) to double*)
  %6943 = bitcast i8* %6939 to double*
  store double %6942, double* %6943, align 1, !tbaa !2451
  %6944 = getelementptr inbounds i8, i8* %6939, i64 8
  %6945 = bitcast i8* %6944 to double*
  store double 0.000000e+00, double* %6945, align 1, !tbaa !2451
  %6946 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6947 = load i64, i64* %PC
  %6948 = add i64 %6947, 8
  store i64 %6948, i64* %PC
  %6949 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 144) to double*)
  %6950 = bitcast i8* %6946 to double*
  store double %6949, double* %6950, align 1, !tbaa !2451
  %6951 = getelementptr inbounds i8, i8* %6946, i64 8
  %6952 = bitcast i8* %6951 to double*
  store double 0.000000e+00, double* %6952, align 1, !tbaa !2451
  %6953 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6954 = load i64, i64* %PC
  %6955 = add i64 %6954, 9
  store i64 %6955, i64* %PC
  %6956 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %6957 = bitcast i8* %6953 to double*
  store double %6956, double* %6957, align 1, !tbaa !2451
  %6958 = getelementptr inbounds i8, i8* %6953, i64 8
  %6959 = bitcast i8* %6958 to double*
  store double 0.000000e+00, double* %6959, align 1, !tbaa !2451
  %6960 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6961 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6962 = load i64, i64* %PC
  %6963 = add i64 %6962, 9
  store i64 %6963, i64* %PC
  %6964 = bitcast i8* %6961 to double*
  %6965 = load double, double* %6964, align 1
  %6966 = getelementptr inbounds i8, i8* %6961, i64 8
  %6967 = bitcast i8* %6966 to i64*
  %6968 = load i64, i64* %6967, align 1
  %6969 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %6970 = fmul double %6965, %6969
  %6971 = bitcast i8* %6960 to double*
  store double %6970, double* %6971, align 1, !tbaa !2451
  %6972 = getelementptr inbounds i8, i8* %6960, i64 8
  %6973 = bitcast i8* %6972 to i64*
  store i64 %6968, i64* %6973, align 1, !tbaa !2451
  %6974 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6975 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6976 = load i64, i64* %PC
  %6977 = add i64 %6976, 9
  store i64 %6977, i64* %PC
  %6978 = bitcast i8* %6975 to double*
  %6979 = load double, double* %6978, align 1
  %6980 = getelementptr inbounds i8, i8* %6975, i64 8
  %6981 = bitcast i8* %6980 to i64*
  %6982 = load i64, i64* %6981, align 1
  %6983 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %6984 = fsub double %6979, %6983
  %6985 = bitcast i8* %6974 to double*
  store double %6984, double* %6985, align 1, !tbaa !2451
  %6986 = getelementptr inbounds i8, i8* %6974, i64 8
  %6987 = bitcast i8* %6986 to i64*
  store i64 %6982, i64* %6987, align 1, !tbaa !2451
  %6988 = bitcast %union.vec128_t* %XMM3 to i8*
  %6989 = load i64, i64* %PC
  %6990 = add i64 %6989, 9
  store i64 %6990, i64* %PC
  %6991 = bitcast i8* %6988 to double*
  %6992 = load double, double* %6991, align 1
  store double %6992, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 120) to double*)
  %6993 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6994 = load i64, i64* %PC
  %6995 = add i64 %6994, 9
  store i64 %6995, i64* %PC
  %6996 = load double, double* bitcast (%piref_type* @piref to double*)
  %6997 = bitcast i8* %6993 to double*
  store double %6996, double* %6997, align 1, !tbaa !2451
  %6998 = getelementptr inbounds i8, i8* %6993, i64 8
  %6999 = bitcast i8* %6998 to double*
  store double 0.000000e+00, double* %6999, align 1, !tbaa !2451
  %7000 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7001 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7002 = load i64, i64* %PC
  %7003 = add i64 %7002, 9
  store i64 %7003, i64* %PC
  %7004 = bitcast i8* %7001 to double*
  %7005 = load double, double* %7004, align 1
  %7006 = getelementptr inbounds i8, i8* %7001, i64 8
  %7007 = bitcast i8* %7006 to i64*
  %7008 = load i64, i64* %7007, align 1
  %7009 = load double, double* bitcast (%three_type* @three to double*)
  %7010 = fdiv double %7005, %7009
  %7011 = bitcast i8* %7000 to double*
  store double %7010, double* %7011, align 1, !tbaa !2451
  %7012 = getelementptr inbounds i8, i8* %7000, i64 8
  %7013 = bitcast i8* %7012 to i64*
  store i64 %7008, i64* %7013, align 1, !tbaa !2451
  %7014 = load i64, i64* %RBP
  %7015 = sub i64 %7014, 24
  %7016 = bitcast %union.vec128_t* %XMM3 to i8*
  %7017 = load i64, i64* %PC
  %7018 = add i64 %7017, 5
  store i64 %7018, i64* %PC
  %7019 = bitcast i8* %7016 to double*
  %7020 = load double, double* %7019, align 1
  %7021 = inttoptr i64 %7015 to double*
  store double %7020, double* %7021
  %7022 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7023 = load i64, i64* %RBP
  %7024 = sub i64 %7023, 24
  %7025 = load i64, i64* %PC
  %7026 = add i64 %7025, 5
  store i64 %7026, i64* %PC
  %7027 = inttoptr i64 %7024 to double*
  %7028 = load double, double* %7027
  %7029 = bitcast i8* %7022 to double*
  store double %7028, double* %7029, align 1, !tbaa !2451
  %7030 = getelementptr inbounds i8, i8* %7022, i64 8
  %7031 = bitcast i8* %7030 to double*
  store double 0.000000e+00, double* %7031, align 1, !tbaa !2451
  %7032 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7033 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7034 = load i64, i64* %RBP
  %7035 = sub i64 %7034, 24
  %7036 = load i64, i64* %PC
  %7037 = add i64 %7036, 5
  store i64 %7037, i64* %PC
  %7038 = bitcast i8* %7033 to double*
  %7039 = load double, double* %7038, align 1
  %7040 = getelementptr inbounds i8, i8* %7033, i64 8
  %7041 = bitcast i8* %7040 to i64*
  %7042 = load i64, i64* %7041, align 1
  %7043 = inttoptr i64 %7035 to double*
  %7044 = load double, double* %7043
  %7045 = fmul double %7039, %7044
  %7046 = bitcast i8* %7032 to double*
  store double %7045, double* %7046, align 1, !tbaa !2451
  %7047 = getelementptr inbounds i8, i8* %7032, i64 8
  %7048 = bitcast i8* %7047 to i64*
  store i64 %7042, i64* %7048, align 1, !tbaa !2451
  %7049 = load i64, i64* %RBP
  %7050 = sub i64 %7049, 40
  %7051 = bitcast %union.vec128_t* %XMM3 to i8*
  %7052 = load i64, i64* %PC
  %7053 = add i64 %7052, 5
  store i64 %7053, i64* %PC
  %7054 = bitcast i8* %7051 to double*
  %7055 = load double, double* %7054, align 1
  %7056 = inttoptr i64 %7050 to double*
  store double %7055, double* %7056
  %7057 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7058 = load i64, i64* %RBP
  %7059 = sub i64 %7058, 24
  %7060 = load i64, i64* %PC
  %7061 = add i64 %7060, 5
  store i64 %7061, i64* %PC
  %7062 = inttoptr i64 %7059 to double*
  %7063 = load double, double* %7062
  %7064 = bitcast i8* %7057 to double*
  store double %7063, double* %7064, align 1, !tbaa !2451
  %7065 = getelementptr inbounds i8, i8* %7057, i64 8
  %7066 = bitcast i8* %7065 to double*
  store double 0.000000e+00, double* %7066, align 1, !tbaa !2451
  %7067 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7068 = load i64, i64* %PC
  %7069 = add i64 %7068, 9
  store i64 %7069, i64* %PC
  %7070 = load double, double* bitcast (%A6_type* @A6 to double*)
  %7071 = bitcast i8* %7067 to double*
  store double %7070, double* %7071, align 1, !tbaa !2451
  %7072 = getelementptr inbounds i8, i8* %7067, i64 8
  %7073 = bitcast i8* %7072 to double*
  store double 0.000000e+00, double* %7073, align 1, !tbaa !2451
  %7074 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7075 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7076 = load i64, i64* %RBP
  %7077 = sub i64 %7076, 40
  %7078 = load i64, i64* %PC
  %7079 = add i64 %7078, 5
  store i64 %7079, i64* %PC
  %7080 = bitcast i8* %7075 to double*
  %7081 = load double, double* %7080, align 1
  %7082 = getelementptr inbounds i8, i8* %7075, i64 8
  %7083 = bitcast i8* %7082 to i64*
  %7084 = load i64, i64* %7083, align 1
  %7085 = inttoptr i64 %7077 to double*
  %7086 = load double, double* %7085
  %7087 = fmul double %7081, %7086
  %7088 = bitcast i8* %7074 to double*
  store double %7087, double* %7088, align 1, !tbaa !2451
  %7089 = getelementptr inbounds i8, i8* %7074, i64 8
  %7090 = bitcast i8* %7089 to i64*
  store i64 %7084, i64* %7090, align 1, !tbaa !2451
  %7091 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7092 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7093 = load i64, i64* %PC
  %7094 = add i64 %7093, 9
  store i64 %7094, i64* %PC
  %7095 = bitcast i8* %7092 to double*
  %7096 = load double, double* %7095, align 1
  %7097 = getelementptr inbounds i8, i8* %7092, i64 8
  %7098 = bitcast i8* %7097 to i64*
  %7099 = load i64, i64* %7098, align 1
  %7100 = load double, double* bitcast (%A5_type* @A5 to double*)
  %7101 = fadd double %7096, %7100
  %7102 = bitcast i8* %7091 to double*
  store double %7101, double* %7102, align 1, !tbaa !2451
  %7103 = getelementptr inbounds i8, i8* %7091, i64 8
  %7104 = bitcast i8* %7103 to i64*
  store i64 %7099, i64* %7104, align 1, !tbaa !2451
  %7105 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7106 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7107 = load i64, i64* %RBP
  %7108 = sub i64 %7107, 40
  %7109 = load i64, i64* %PC
  %7110 = add i64 %7109, 5
  store i64 %7110, i64* %PC
  %7111 = bitcast i8* %7106 to double*
  %7112 = load double, double* %7111, align 1
  %7113 = getelementptr inbounds i8, i8* %7106, i64 8
  %7114 = bitcast i8* %7113 to i64*
  %7115 = load i64, i64* %7114, align 1
  %7116 = inttoptr i64 %7108 to double*
  %7117 = load double, double* %7116
  %7118 = fmul double %7112, %7117
  %7119 = bitcast i8* %7105 to double*
  store double %7118, double* %7119, align 1, !tbaa !2451
  %7120 = getelementptr inbounds i8, i8* %7105, i64 8
  %7121 = bitcast i8* %7120 to i64*
  store i64 %7115, i64* %7121, align 1, !tbaa !2451
  %7122 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7123 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7124 = load i64, i64* %PC
  %7125 = add i64 %7124, 9
  store i64 %7125, i64* %PC
  %7126 = bitcast i8* %7123 to double*
  %7127 = load double, double* %7126, align 1
  %7128 = getelementptr inbounds i8, i8* %7123, i64 8
  %7129 = bitcast i8* %7128 to i64*
  %7130 = load i64, i64* %7129, align 1
  %7131 = load double, double* bitcast (%A4_type* @A4 to double*)
  %7132 = fadd double %7127, %7131
  %7133 = bitcast i8* %7122 to double*
  store double %7132, double* %7133, align 1, !tbaa !2451
  %7134 = getelementptr inbounds i8, i8* %7122, i64 8
  %7135 = bitcast i8* %7134 to i64*
  store i64 %7130, i64* %7135, align 1, !tbaa !2451
  %7136 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7137 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7138 = load i64, i64* %RBP
  %7139 = sub i64 %7138, 40
  %7140 = load i64, i64* %PC
  %7141 = add i64 %7140, 5
  store i64 %7141, i64* %PC
  %7142 = bitcast i8* %7137 to double*
  %7143 = load double, double* %7142, align 1
  %7144 = getelementptr inbounds i8, i8* %7137, i64 8
  %7145 = bitcast i8* %7144 to i64*
  %7146 = load i64, i64* %7145, align 1
  %7147 = inttoptr i64 %7139 to double*
  %7148 = load double, double* %7147
  %7149 = fmul double %7143, %7148
  %7150 = bitcast i8* %7136 to double*
  store double %7149, double* %7150, align 1, !tbaa !2451
  %7151 = getelementptr inbounds i8, i8* %7136, i64 8
  %7152 = bitcast i8* %7151 to i64*
  store i64 %7146, i64* %7152, align 1, !tbaa !2451
  %7153 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7154 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7155 = load i64, i64* %PC
  %7156 = add i64 %7155, 9
  store i64 %7156, i64* %PC
  %7157 = bitcast i8* %7154 to double*
  %7158 = load double, double* %7157, align 1
  %7159 = getelementptr inbounds i8, i8* %7154, i64 8
  %7160 = bitcast i8* %7159 to i64*
  %7161 = load i64, i64* %7160, align 1
  %7162 = load double, double* bitcast (%A3_type* @A3 to double*)
  %7163 = fadd double %7158, %7162
  %7164 = bitcast i8* %7153 to double*
  store double %7163, double* %7164, align 1, !tbaa !2451
  %7165 = getelementptr inbounds i8, i8* %7153, i64 8
  %7166 = bitcast i8* %7165 to i64*
  store i64 %7161, i64* %7166, align 1, !tbaa !2451
  %7167 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7168 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7169 = load i64, i64* %RBP
  %7170 = sub i64 %7169, 40
  %7171 = load i64, i64* %PC
  %7172 = add i64 %7171, 5
  store i64 %7172, i64* %PC
  %7173 = bitcast i8* %7168 to double*
  %7174 = load double, double* %7173, align 1
  %7175 = getelementptr inbounds i8, i8* %7168, i64 8
  %7176 = bitcast i8* %7175 to i64*
  %7177 = load i64, i64* %7176, align 1
  %7178 = inttoptr i64 %7170 to double*
  %7179 = load double, double* %7178
  %7180 = fmul double %7174, %7179
  %7181 = bitcast i8* %7167 to double*
  store double %7180, double* %7181, align 1, !tbaa !2451
  %7182 = getelementptr inbounds i8, i8* %7167, i64 8
  %7183 = bitcast i8* %7182 to i64*
  store i64 %7177, i64* %7183, align 1, !tbaa !2451
  %7184 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7185 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7186 = load i64, i64* %PC
  %7187 = add i64 %7186, 9
  store i64 %7187, i64* %PC
  %7188 = bitcast i8* %7185 to double*
  %7189 = load double, double* %7188, align 1
  %7190 = getelementptr inbounds i8, i8* %7185, i64 8
  %7191 = bitcast i8* %7190 to i64*
  %7192 = load i64, i64* %7191, align 1
  %7193 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %7194 = fadd double %7189, %7193
  %7195 = bitcast i8* %7184 to double*
  store double %7194, double* %7195, align 1, !tbaa !2451
  %7196 = getelementptr inbounds i8, i8* %7184, i64 8
  %7197 = bitcast i8* %7196 to i64*
  store i64 %7192, i64* %7197, align 1, !tbaa !2451
  %7198 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7199 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7200 = load i64, i64* %RBP
  %7201 = sub i64 %7200, 40
  %7202 = load i64, i64* %PC
  %7203 = add i64 %7202, 5
  store i64 %7203, i64* %PC
  %7204 = bitcast i8* %7199 to double*
  %7205 = load double, double* %7204, align 1
  %7206 = getelementptr inbounds i8, i8* %7199, i64 8
  %7207 = bitcast i8* %7206 to i64*
  %7208 = load i64, i64* %7207, align 1
  %7209 = inttoptr i64 %7201 to double*
  %7210 = load double, double* %7209
  %7211 = fmul double %7205, %7210
  %7212 = bitcast i8* %7198 to double*
  store double %7211, double* %7212, align 1, !tbaa !2451
  %7213 = getelementptr inbounds i8, i8* %7198, i64 8
  %7214 = bitcast i8* %7213 to i64*
  store i64 %7208, i64* %7214, align 1, !tbaa !2451
  %7215 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7216 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7217 = load i64, i64* %PC
  %7218 = add i64 %7217, 9
  store i64 %7218, i64* %PC
  %7219 = bitcast i8* %7216 to double*
  %7220 = load double, double* %7219, align 1
  %7221 = getelementptr inbounds i8, i8* %7216, i64 8
  %7222 = bitcast i8* %7221 to i64*
  %7223 = load i64, i64* %7222, align 1
  %7224 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %7225 = fadd double %7220, %7224
  %7226 = bitcast i8* %7215 to double*
  store double %7225, double* %7226, align 1, !tbaa !2451
  %7227 = getelementptr inbounds i8, i8* %7215, i64 8
  %7228 = bitcast i8* %7227 to i64*
  store i64 %7223, i64* %7228, align 1, !tbaa !2451
  %7229 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7230 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7231 = load i64, i64* %RBP
  %7232 = sub i64 %7231, 40
  %7233 = load i64, i64* %PC
  %7234 = add i64 %7233, 5
  store i64 %7234, i64* %PC
  %7235 = bitcast i8* %7230 to double*
  %7236 = load double, double* %7235, align 1
  %7237 = getelementptr inbounds i8, i8* %7230, i64 8
  %7238 = bitcast i8* %7237 to i64*
  %7239 = load i64, i64* %7238, align 1
  %7240 = inttoptr i64 %7232 to double*
  %7241 = load double, double* %7240
  %7242 = fmul double %7236, %7241
  %7243 = bitcast i8* %7229 to double*
  store double %7242, double* %7243, align 1, !tbaa !2451
  %7244 = getelementptr inbounds i8, i8* %7229, i64 8
  %7245 = bitcast i8* %7244 to i64*
  store i64 %7239, i64* %7245, align 1, !tbaa !2451
  %7246 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7247 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7248 = load i64, i64* %PC
  %7249 = add i64 %7248, 9
  store i64 %7249, i64* %PC
  %7250 = bitcast i8* %7247 to double*
  %7251 = load double, double* %7250, align 1
  %7252 = getelementptr inbounds i8, i8* %7247, i64 8
  %7253 = bitcast i8* %7252 to i64*
  %7254 = load i64, i64* %7253, align 1
  %7255 = load double, double* bitcast (%one_type* @one to double*)
  %7256 = fadd double %7251, %7255
  %7257 = bitcast i8* %7246 to double*
  store double %7256, double* %7257, align 1, !tbaa !2451
  %7258 = getelementptr inbounds i8, i8* %7246, i64 8
  %7259 = bitcast i8* %7258 to i64*
  store i64 %7254, i64* %7259, align 1, !tbaa !2451
  %7260 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7261 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7262 = bitcast %union.vec128_t* %XMM4 to i8*
  %7263 = load i64, i64* %PC
  %7264 = add i64 %7263, 4
  store i64 %7264, i64* %PC
  %7265 = bitcast i8* %7261 to double*
  %7266 = load double, double* %7265, align 1
  %7267 = getelementptr inbounds i8, i8* %7261, i64 8
  %7268 = bitcast i8* %7267 to i64*
  %7269 = load i64, i64* %7268, align 1
  %7270 = bitcast i8* %7262 to double*
  %7271 = load double, double* %7270, align 1
  %7272 = fmul double %7266, %7271
  %7273 = bitcast i8* %7260 to double*
  store double %7272, double* %7273, align 1, !tbaa !2451
  %7274 = getelementptr inbounds i8, i8* %7260, i64 8
  %7275 = bitcast i8* %7274 to i64*
  store i64 %7269, i64* %7275, align 1, !tbaa !2451
  %7276 = bitcast %union.vec128_t* %XMM3 to i8*
  %7277 = load i64, i64* %PC
  %7278 = add i64 %7277, 9
  store i64 %7278, i64* %PC
  %7279 = bitcast i8* %7276 to double*
  %7280 = load double, double* %7279, align 1
  store double %7280, double* bitcast (%sa_type* @sa to double*)
  %7281 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7282 = load i64, i64* %RBP
  %7283 = sub i64 %7282, 40
  %7284 = load i64, i64* %PC
  %7285 = add i64 %7284, 5
  store i64 %7285, i64* %PC
  %7286 = inttoptr i64 %7283 to double*
  %7287 = load double, double* %7286
  %7288 = bitcast i8* %7281 to double*
  store double %7287, double* %7288, align 1, !tbaa !2451
  %7289 = getelementptr inbounds i8, i8* %7281, i64 8
  %7290 = bitcast i8* %7289 to double*
  store double 0.000000e+00, double* %7290, align 1, !tbaa !2451
  %7291 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7292 = load i64, i64* %RBP
  %7293 = sub i64 %7292, 40
  %7294 = load i64, i64* %PC
  %7295 = add i64 %7294, 5
  store i64 %7295, i64* %PC
  %7296 = inttoptr i64 %7293 to double*
  %7297 = load double, double* %7296
  %7298 = bitcast i8* %7291 to double*
  store double %7297, double* %7298, align 1, !tbaa !2451
  %7299 = getelementptr inbounds i8, i8* %7291, i64 8
  %7300 = bitcast i8* %7299 to double*
  store double 0.000000e+00, double* %7300, align 1, !tbaa !2451
  %7301 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %7302 = load i64, i64* %RBP
  %7303 = sub i64 %7302, 40
  %7304 = load i64, i64* %PC
  %7305 = add i64 %7304, 5
  store i64 %7305, i64* %PC
  %7306 = inttoptr i64 %7303 to double*
  %7307 = load double, double* %7306
  %7308 = bitcast i8* %7301 to double*
  store double %7307, double* %7308, align 1, !tbaa !2451
  %7309 = getelementptr inbounds i8, i8* %7301, i64 8
  %7310 = bitcast i8* %7309 to double*
  store double 0.000000e+00, double* %7310, align 1, !tbaa !2451
  %7311 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %7312 = load i64, i64* %RBP
  %7313 = sub i64 %7312, 40
  %7314 = load i64, i64* %PC
  %7315 = add i64 %7314, 5
  store i64 %7315, i64* %PC
  %7316 = inttoptr i64 %7313 to double*
  %7317 = load double, double* %7316
  %7318 = bitcast i8* %7311 to double*
  store double %7317, double* %7318, align 1, !tbaa !2451
  %7319 = getelementptr inbounds i8, i8* %7311, i64 8
  %7320 = bitcast i8* %7319 to double*
  store double 0.000000e+00, double* %7320, align 1, !tbaa !2451
  %7321 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %7322 = load i64, i64* %RBP
  %7323 = sub i64 %7322, 40
  %7324 = load i64, i64* %PC
  %7325 = add i64 %7324, 5
  store i64 %7325, i64* %PC
  %7326 = inttoptr i64 %7323 to double*
  %7327 = load double, double* %7326
  %7328 = bitcast i8* %7321 to double*
  store double %7327, double* %7328, align 1, !tbaa !2451
  %7329 = getelementptr inbounds i8, i8* %7321, i64 8
  %7330 = bitcast i8* %7329 to double*
  store double 0.000000e+00, double* %7330, align 1, !tbaa !2451
  %7331 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %7332 = load i64, i64* %PC
  %7333 = add i64 %7332, 10
  store i64 %7333, i64* %PC
  %7334 = load double, double* bitcast (%B6_type* @B6 to double*)
  %7335 = bitcast i8* %7331 to double*
  store double %7334, double* %7335, align 1, !tbaa !2451
  %7336 = getelementptr inbounds i8, i8* %7331, i64 8
  %7337 = bitcast i8* %7336 to double*
  store double 0.000000e+00, double* %7337, align 1, !tbaa !2451
  %7338 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %7339 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %7340 = load i64, i64* %RBP
  %7341 = sub i64 %7340, 40
  %7342 = load i64, i64* %PC
  %7343 = add i64 %7342, 6
  store i64 %7343, i64* %PC
  %7344 = bitcast i8* %7339 to double*
  %7345 = load double, double* %7344, align 1
  %7346 = getelementptr inbounds i8, i8* %7339, i64 8
  %7347 = bitcast i8* %7346 to i64*
  %7348 = load i64, i64* %7347, align 1
  %7349 = inttoptr i64 %7341 to double*
  %7350 = load double, double* %7349
  %7351 = fmul double %7345, %7350
  %7352 = bitcast i8* %7338 to double*
  store double %7351, double* %7352, align 1, !tbaa !2451
  %7353 = getelementptr inbounds i8, i8* %7338, i64 8
  %7354 = bitcast i8* %7353 to i64*
  store i64 %7348, i64* %7354, align 1, !tbaa !2451
  %7355 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %7356 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %7357 = load i64, i64* %PC
  %7358 = add i64 %7357, 10
  store i64 %7358, i64* %PC
  %7359 = bitcast i8* %7356 to double*
  %7360 = load double, double* %7359, align 1
  %7361 = getelementptr inbounds i8, i8* %7356, i64 8
  %7362 = bitcast i8* %7361 to i64*
  %7363 = load i64, i64* %7362, align 1
  %7364 = load double, double* bitcast (%B5_type* @B5 to double*)
  %7365 = fadd double %7360, %7364
  %7366 = bitcast i8* %7355 to double*
  store double %7365, double* %7366, align 1, !tbaa !2451
  %7367 = getelementptr inbounds i8, i8* %7355, i64 8
  %7368 = bitcast i8* %7367 to i64*
  store i64 %7363, i64* %7368, align 1, !tbaa !2451
  %7369 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %7370 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %7371 = bitcast %union.vec128_t* %XMM8 to i8*
  %7372 = load i64, i64* %PC
  %7373 = add i64 %7372, 5
  store i64 %7373, i64* %PC
  %7374 = bitcast i8* %7370 to double*
  %7375 = load double, double* %7374, align 1
  %7376 = getelementptr inbounds i8, i8* %7370, i64 8
  %7377 = bitcast i8* %7376 to i64*
  %7378 = load i64, i64* %7377, align 1
  %7379 = bitcast i8* %7371 to double*
  %7380 = load double, double* %7379, align 1
  %7381 = fmul double %7375, %7380
  %7382 = bitcast i8* %7369 to double*
  store double %7381, double* %7382, align 1, !tbaa !2451
  %7383 = getelementptr inbounds i8, i8* %7369, i64 8
  %7384 = bitcast i8* %7383 to i64*
  store i64 %7378, i64* %7384, align 1, !tbaa !2451
  %7385 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %7386 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %7387 = load i64, i64* %PC
  %7388 = add i64 %7387, 9
  store i64 %7388, i64* %PC
  %7389 = bitcast i8* %7386 to double*
  %7390 = load double, double* %7389, align 1
  %7391 = getelementptr inbounds i8, i8* %7386, i64 8
  %7392 = bitcast i8* %7391 to i64*
  %7393 = load i64, i64* %7392, align 1
  %7394 = load double, double* bitcast (%B4_type* @B4 to double*)
  %7395 = fadd double %7390, %7394
  %7396 = bitcast i8* %7385 to double*
  store double %7395, double* %7396, align 1, !tbaa !2451
  %7397 = getelementptr inbounds i8, i8* %7385, i64 8
  %7398 = bitcast i8* %7397 to i64*
  store i64 %7393, i64* %7398, align 1, !tbaa !2451
  %7399 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %7400 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %7401 = bitcast %union.vec128_t* %XMM7 to i8*
  %7402 = load i64, i64* %PC
  %7403 = add i64 %7402, 4
  store i64 %7403, i64* %PC
  %7404 = bitcast i8* %7400 to double*
  %7405 = load double, double* %7404, align 1
  %7406 = getelementptr inbounds i8, i8* %7400, i64 8
  %7407 = bitcast i8* %7406 to i64*
  %7408 = load i64, i64* %7407, align 1
  %7409 = bitcast i8* %7401 to double*
  %7410 = load double, double* %7409, align 1
  %7411 = fmul double %7405, %7410
  %7412 = bitcast i8* %7399 to double*
  store double %7411, double* %7412, align 1, !tbaa !2451
  %7413 = getelementptr inbounds i8, i8* %7399, i64 8
  %7414 = bitcast i8* %7413 to i64*
  store i64 %7408, i64* %7414, align 1, !tbaa !2451
  %7415 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %7416 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %7417 = load i64, i64* %PC
  %7418 = add i64 %7417, 9
  store i64 %7418, i64* %PC
  %7419 = bitcast i8* %7416 to double*
  %7420 = load double, double* %7419, align 1
  %7421 = getelementptr inbounds i8, i8* %7416, i64 8
  %7422 = bitcast i8* %7421 to i64*
  %7423 = load i64, i64* %7422, align 1
  %7424 = load double, double* bitcast (%B3_type* @B3 to double*)
  %7425 = fadd double %7420, %7424
  %7426 = bitcast i8* %7415 to double*
  store double %7425, double* %7426, align 1, !tbaa !2451
  %7427 = getelementptr inbounds i8, i8* %7415, i64 8
  %7428 = bitcast i8* %7427 to i64*
  store i64 %7423, i64* %7428, align 1, !tbaa !2451
  %7429 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %7430 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %7431 = bitcast %union.vec128_t* %XMM6 to i8*
  %7432 = load i64, i64* %PC
  %7433 = add i64 %7432, 4
  store i64 %7433, i64* %PC
  %7434 = bitcast i8* %7430 to double*
  %7435 = load double, double* %7434, align 1
  %7436 = getelementptr inbounds i8, i8* %7430, i64 8
  %7437 = bitcast i8* %7436 to i64*
  %7438 = load i64, i64* %7437, align 1
  %7439 = bitcast i8* %7431 to double*
  %7440 = load double, double* %7439, align 1
  %7441 = fmul double %7435, %7440
  %7442 = bitcast i8* %7429 to double*
  store double %7441, double* %7442, align 1, !tbaa !2451
  %7443 = getelementptr inbounds i8, i8* %7429, i64 8
  %7444 = bitcast i8* %7443 to i64*
  store i64 %7438, i64* %7444, align 1, !tbaa !2451
  %7445 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %7446 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %7447 = load i64, i64* %PC
  %7448 = add i64 %7447, 9
  store i64 %7448, i64* %PC
  %7449 = bitcast i8* %7446 to double*
  %7450 = load double, double* %7449, align 1
  %7451 = getelementptr inbounds i8, i8* %7446, i64 8
  %7452 = bitcast i8* %7451 to i64*
  %7453 = load i64, i64* %7452, align 1
  %7454 = load double, double* bitcast (%B2_type* @B2 to double*)
  %7455 = fadd double %7450, %7454
  %7456 = bitcast i8* %7445 to double*
  store double %7455, double* %7456, align 1, !tbaa !2451
  %7457 = getelementptr inbounds i8, i8* %7445, i64 8
  %7458 = bitcast i8* %7457 to i64*
  store i64 %7453, i64* %7458, align 1, !tbaa !2451
  %7459 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7460 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7461 = bitcast %union.vec128_t* %XMM5 to i8*
  %7462 = load i64, i64* %PC
  %7463 = add i64 %7462, 4
  store i64 %7463, i64* %PC
  %7464 = bitcast i8* %7460 to double*
  %7465 = load double, double* %7464, align 1
  %7466 = getelementptr inbounds i8, i8* %7460, i64 8
  %7467 = bitcast i8* %7466 to i64*
  %7468 = load i64, i64* %7467, align 1
  %7469 = bitcast i8* %7461 to double*
  %7470 = load double, double* %7469, align 1
  %7471 = fmul double %7465, %7470
  %7472 = bitcast i8* %7459 to double*
  store double %7471, double* %7472, align 1, !tbaa !2451
  %7473 = getelementptr inbounds i8, i8* %7459, i64 8
  %7474 = bitcast i8* %7473 to i64*
  store i64 %7468, i64* %7474, align 1, !tbaa !2451
  %7475 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7476 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7477 = load i64, i64* %PC
  %7478 = add i64 %7477, 9
  store i64 %7478, i64* %PC
  %7479 = bitcast i8* %7476 to double*
  %7480 = load double, double* %7479, align 1
  %7481 = getelementptr inbounds i8, i8* %7476, i64 8
  %7482 = bitcast i8* %7481 to i64*
  %7483 = load i64, i64* %7482, align 1
  %7484 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %7485 = fadd double %7480, %7484
  %7486 = bitcast i8* %7475 to double*
  store double %7485, double* %7486, align 1, !tbaa !2451
  %7487 = getelementptr inbounds i8, i8* %7475, i64 8
  %7488 = bitcast i8* %7487 to i64*
  store i64 %7483, i64* %7488, align 1, !tbaa !2451
  %7489 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7490 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7491 = bitcast %union.vec128_t* %XMM4 to i8*
  %7492 = load i64, i64* %PC
  %7493 = add i64 %7492, 4
  store i64 %7493, i64* %PC
  %7494 = bitcast i8* %7490 to double*
  %7495 = load double, double* %7494, align 1
  %7496 = getelementptr inbounds i8, i8* %7490, i64 8
  %7497 = bitcast i8* %7496 to i64*
  %7498 = load i64, i64* %7497, align 1
  %7499 = bitcast i8* %7491 to double*
  %7500 = load double, double* %7499, align 1
  %7501 = fmul double %7495, %7500
  %7502 = bitcast i8* %7489 to double*
  store double %7501, double* %7502, align 1, !tbaa !2451
  %7503 = getelementptr inbounds i8, i8* %7489, i64 8
  %7504 = bitcast i8* %7503 to i64*
  store i64 %7498, i64* %7504, align 1, !tbaa !2451
  %7505 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7506 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7507 = load i64, i64* %PC
  %7508 = add i64 %7507, 9
  store i64 %7508, i64* %PC
  %7509 = bitcast i8* %7506 to double*
  %7510 = load double, double* %7509, align 1
  %7511 = getelementptr inbounds i8, i8* %7506, i64 8
  %7512 = bitcast i8* %7511 to i64*
  %7513 = load i64, i64* %7512, align 1
  %7514 = load double, double* bitcast (%one_type* @one to double*)
  %7515 = fadd double %7510, %7514
  %7516 = bitcast i8* %7505 to double*
  store double %7515, double* %7516, align 1, !tbaa !2451
  %7517 = getelementptr inbounds i8, i8* %7505, i64 8
  %7518 = bitcast i8* %7517 to i64*
  store i64 %7513, i64* %7518, align 1, !tbaa !2451
  %7519 = bitcast %union.vec128_t* %XMM3 to i8*
  %7520 = load i64, i64* %PC
  %7521 = add i64 %7520, 9
  store i64 %7521, i64* %PC
  %7522 = bitcast i8* %7519 to double*
  %7523 = load double, double* %7522, align 1
  store double %7523, double* bitcast (%sb_type* @sb to double*)
  %7524 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7525 = load i64, i64* %PC
  %7526 = add i64 %7525, 9
  store i64 %7526, i64* %PC
  %7527 = load double, double* bitcast (%sa_type* @sa to double*)
  %7528 = bitcast i8* %7524 to double*
  store double %7527, double* %7528, align 1, !tbaa !2451
  %7529 = getelementptr inbounds i8, i8* %7524, i64 8
  %7530 = bitcast i8* %7529 to double*
  store double 0.000000e+00, double* %7530, align 1, !tbaa !2451
  %7531 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7532 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7533 = load i64, i64* %PC
  %7534 = add i64 %7533, 9
  store i64 %7534, i64* %PC
  %7535 = bitcast i8* %7532 to double*
  %7536 = load double, double* %7535, align 1
  %7537 = getelementptr inbounds i8, i8* %7532, i64 8
  %7538 = bitcast i8* %7537 to i64*
  %7539 = load i64, i64* %7538, align 1
  %7540 = load double, double* bitcast (%sb_type* @sb to double*)
  %7541 = fdiv double %7536, %7540
  %7542 = bitcast i8* %7531 to double*
  store double %7541, double* %7542, align 1, !tbaa !2451
  %7543 = getelementptr inbounds i8, i8* %7531, i64 8
  %7544 = bitcast i8* %7543 to i64*
  store i64 %7539, i64* %7544, align 1, !tbaa !2451
  %7545 = bitcast %union.vec128_t* %XMM3 to i8*
  %7546 = load i64, i64* %PC
  %7547 = add i64 %7546, 9
  store i64 %7547, i64* %PC
  %7548 = bitcast i8* %7545 to double*
  %7549 = load double, double* %7548, align 1
  store double %7549, double* bitcast (%sa_type* @sa to double*)
  %7550 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7551 = load i64, i64* %PC
  %7552 = add i64 %7551, 9
  store i64 %7552, i64* %PC
  %7553 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 120) to double*)
  %7554 = bitcast i8* %7550 to double*
  store double %7553, double* %7554, align 1, !tbaa !2451
  %7555 = getelementptr inbounds i8, i8* %7550, i64 8
  %7556 = bitcast i8* %7555 to double*
  store double 0.000000e+00, double* %7556, align 1, !tbaa !2451
  %7557 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7558 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7559 = bitcast %union.vec128_t* %XMM2 to i8*
  %7560 = load i64, i64* %PC
  %7561 = add i64 %7560, 4
  store i64 %7561, i64* %PC
  %7562 = bitcast i8* %7558 to double*
  %7563 = load double, double* %7562, align 1
  %7564 = getelementptr inbounds i8, i8* %7558, i64 8
  %7565 = bitcast i8* %7564 to i64*
  %7566 = load i64, i64* %7565, align 1
  %7567 = bitcast i8* %7559 to double*
  %7568 = load double, double* %7567, align 1
  %7569 = fdiv double %7563, %7568
  %7570 = bitcast i8* %7557 to double*
  store double %7569, double* %7570, align 1, !tbaa !2451
  %7571 = getelementptr inbounds i8, i8* %7557, i64 8
  %7572 = bitcast i8* %7571 to i64*
  store i64 %7566, i64* %7572, align 1, !tbaa !2451
  %7573 = bitcast %union.vec128_t* %XMM3 to i8*
  %7574 = load i64, i64* %PC
  %7575 = add i64 %7574, 9
  store i64 %7575, i64* %PC
  %7576 = bitcast i8* %7573 to double*
  %7577 = load double, double* %7576, align 1
  store double %7577, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 128) to double*)
  %7578 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7579 = load i64, i64* %RBP
  %7580 = sub i64 %7579, 48
  %7581 = load i64, i64* %PC
  %7582 = add i64 %7581, 5
  store i64 %7582, i64* %PC
  %7583 = inttoptr i64 %7580 to double*
  %7584 = load double, double* %7583
  %7585 = bitcast i8* %7578 to double*
  store double %7584, double* %7585, align 1, !tbaa !2451
  %7586 = getelementptr inbounds i8, i8* %7578, i64 8
  %7587 = bitcast i8* %7586 to double*
  store double 0.000000e+00, double* %7587, align 1, !tbaa !2451
  %7588 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7589 = load i64, i64* %PC
  %7590 = add i64 %7589, 9
  store i64 %7590, i64* %PC
  %7591 = load double, double* bitcast (%sa_type* @sa to double*)
  %7592 = bitcast i8* %7588 to double*
  store double %7591, double* %7592, align 1, !tbaa !2451
  %7593 = getelementptr inbounds i8, i8* %7588, i64 8
  %7594 = bitcast i8* %7593 to double*
  store double 0.000000e+00, double* %7594, align 1, !tbaa !2451
  %7595 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7596 = load i64, i64* %PC
  %7597 = add i64 %7596, 9
  store i64 %7597, i64* %PC
  %7598 = load double, double* bitcast (%two_type* @two to double*)
  %7599 = bitcast i8* %7595 to double*
  store double %7598, double* %7599, align 1, !tbaa !2451
  %7600 = getelementptr inbounds i8, i8* %7595, i64 8
  %7601 = bitcast i8* %7600 to double*
  store double 0.000000e+00, double* %7601, align 1, !tbaa !2451
  %7602 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7603 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7604 = load i64, i64* %RBP
  %7605 = sub i64 %7604, 16
  %7606 = load i64, i64* %PC
  %7607 = add i64 %7606, 5
  store i64 %7607, i64* %PC
  %7608 = bitcast i8* %7603 to double*
  %7609 = load double, double* %7608, align 1
  %7610 = getelementptr inbounds i8, i8* %7603, i64 8
  %7611 = bitcast i8* %7610 to i64*
  %7612 = load i64, i64* %7611, align 1
  %7613 = inttoptr i64 %7605 to double*
  %7614 = load double, double* %7613
  %7615 = fmul double %7609, %7614
  %7616 = bitcast i8* %7602 to double*
  store double %7615, double* %7616, align 1, !tbaa !2451
  %7617 = getelementptr inbounds i8, i8* %7602, i64 8
  %7618 = bitcast i8* %7617 to i64*
  store i64 %7612, i64* %7618, align 1, !tbaa !2451
  %7619 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7620 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7621 = bitcast %union.vec128_t* %XMM4 to i8*
  %7622 = load i64, i64* %PC
  %7623 = add i64 %7622, 4
  store i64 %7623, i64* %PC
  %7624 = bitcast i8* %7620 to double*
  %7625 = load double, double* %7624, align 1
  %7626 = getelementptr inbounds i8, i8* %7620, i64 8
  %7627 = bitcast i8* %7626 to i64*
  %7628 = load i64, i64* %7627, align 1
  %7629 = bitcast i8* %7621 to double*
  %7630 = load double, double* %7629, align 1
  %7631 = fadd double %7625, %7630
  %7632 = bitcast i8* %7619 to double*
  store double %7631, double* %7632, align 1, !tbaa !2451
  %7633 = getelementptr inbounds i8, i8* %7619, i64 8
  %7634 = bitcast i8* %7633 to i64*
  store i64 %7628, i64* %7634, align 1, !tbaa !2451
  %7635 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7636 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7637 = bitcast %union.vec128_t* %XMM3 to i8*
  %7638 = load i64, i64* %PC
  %7639 = add i64 %7638, 4
  store i64 %7639, i64* %PC
  %7640 = bitcast i8* %7636 to double*
  %7641 = load double, double* %7640, align 1
  %7642 = getelementptr inbounds i8, i8* %7636, i64 8
  %7643 = bitcast i8* %7642 to i64*
  %7644 = load i64, i64* %7643, align 1
  %7645 = bitcast i8* %7637 to double*
  %7646 = load double, double* %7645, align 1
  %7647 = fmul double %7641, %7646
  %7648 = bitcast i8* %7635 to double*
  store double %7647, double* %7648, align 1, !tbaa !2451
  %7649 = getelementptr inbounds i8, i8* %7635, i64 8
  %7650 = bitcast i8* %7649 to i64*
  store i64 %7644, i64* %7650, align 1, !tbaa !2451
  %7651 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7652 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7653 = load i64, i64* %PC
  %7654 = add i64 %7653, 9
  store i64 %7654, i64* %PC
  %7655 = bitcast i8* %7652 to double*
  %7656 = load double, double* %7655, align 1
  %7657 = getelementptr inbounds i8, i8* %7652, i64 8
  %7658 = bitcast i8* %7657 to i64*
  %7659 = load i64, i64* %7658, align 1
  %7660 = load double, double* bitcast (%two_type* @two to double*)
  %7661 = fdiv double %7656, %7660
  %7662 = bitcast i8* %7651 to double*
  store double %7661, double* %7662, align 1, !tbaa !2451
  %7663 = getelementptr inbounds i8, i8* %7651, i64 8
  %7664 = bitcast i8* %7663 to i64*
  store i64 %7659, i64* %7664, align 1, !tbaa !2451
  %7665 = bitcast %union.vec128_t* %XMM2 to i8*
  %7666 = load i64, i64* %PC
  %7667 = add i64 %7666, 9
  store i64 %7667, i64* %PC
  %7668 = bitcast i8* %7665 to double*
  %7669 = load double, double* %7668, align 1
  store double %7669, double* bitcast (%sa_type* @sa to double*)
  %7670 = bitcast %union.vec128_t* %XMM1 to i8*
  %7671 = load i64, i64* %PC
  %7672 = add i64 %7671, 9
  store i64 %7672, i64* %PC
  %7673 = bitcast i8* %7670 to double*
  %7674 = load double, double* %7673, align 1
  store double %7674, double* bitcast (%sb_type* @sb to double*)
  %7675 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7676 = load i64, i64* %PC
  %7677 = add i64 %7676, 9
  store i64 %7677, i64* %PC
  %7678 = load double, double* bitcast (%sa_type* @sa to double*)
  %7679 = bitcast i8* %7675 to double*
  store double %7678, double* %7679, align 1, !tbaa !2451
  %7680 = getelementptr inbounds i8, i8* %7675, i64 8
  %7681 = bitcast i8* %7680 to double*
  store double 0.000000e+00, double* %7681, align 1, !tbaa !2451
  %7682 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7683 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7684 = load i64, i64* %PC
  %7685 = add i64 %7684, 9
  store i64 %7685, i64* %PC
  %7686 = bitcast i8* %7683 to double*
  %7687 = load double, double* %7686, align 1
  %7688 = getelementptr inbounds i8, i8* %7683, i64 8
  %7689 = bitcast i8* %7688 to i64*
  %7690 = load i64, i64* %7689, align 1
  %7691 = load double, double* bitcast (%sb_type* @sb to double*)
  %7692 = fsub double %7687, %7691
  %7693 = bitcast i8* %7682 to double*
  store double %7692, double* %7693, align 1, !tbaa !2451
  %7694 = getelementptr inbounds i8, i8* %7682, i64 8
  %7695 = bitcast i8* %7694 to i64*
  store i64 %7690, i64* %7695, align 1, !tbaa !2451
  %7696 = bitcast %union.vec128_t* %XMM1 to i8*
  %7697 = load i64, i64* %PC
  %7698 = add i64 %7697, 9
  store i64 %7698, i64* %PC
  %7699 = bitcast i8* %7696 to double*
  %7700 = load double, double* %7699, align 1
  store double %7700, double* bitcast (%sc_type* @sc to double*)
  %7701 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7702 = load i64, i64* %PC
  %7703 = add i64 %7702, 9
  store i64 %7703, i64* %PC
  %7704 = load double, double* bitcast (%one_type* @one to double*)
  %7705 = bitcast i8* %7701 to double*
  store double %7704, double* %7705, align 1, !tbaa !2451
  %7706 = getelementptr inbounds i8, i8* %7701, i64 8
  %7707 = bitcast i8* %7706 to double*
  store double 0.000000e+00, double* %7707, align 1, !tbaa !2451
  %7708 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7709 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7710 = load i64, i64* %PC
  %7711 = add i64 %7710, 9
  store i64 %7711, i64* %PC
  %7712 = bitcast i8* %7709 to double*
  %7713 = load double, double* %7712, align 1
  %7714 = getelementptr inbounds i8, i8* %7709, i64 8
  %7715 = bitcast i8* %7714 to i64*
  %7716 = load i64, i64* %7715, align 1
  %7717 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 128) to double*)
  %7718 = fdiv double %7713, %7717
  %7719 = bitcast i8* %7708 to double*
  store double %7718, double* %7719, align 1, !tbaa !2451
  %7720 = getelementptr inbounds i8, i8* %7708, i64 8
  %7721 = bitcast i8* %7720 to i64*
  store i64 %7716, i64* %7721, align 1, !tbaa !2451
  %7722 = bitcast %union.vec128_t* %XMM1 to i8*
  %7723 = load i64, i64* %PC
  %7724 = add i64 %7723, 9
  store i64 %7724, i64* %PC
  %7725 = bitcast i8* %7722 to double*
  %7726 = load double, double* %7725, align 1
  store double %7726, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 136) to double*)
  %7727 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7728 = bitcast %union.vec128_t* %XMM0 to i8*
  %7729 = load i64, i64* %PC
  %7730 = add i64 %7729, 3
  store i64 %7730, i64* %PC
  %7731 = bitcast i8* %7728 to <2 x i32>*
  %7732 = load <2 x i32>, <2 x i32>* %7731, align 1
  %7733 = getelementptr inbounds i8, i8* %7728, i64 8
  %7734 = bitcast i8* %7733 to <2 x i32>*
  %7735 = load <2 x i32>, <2 x i32>* %7734, align 1
  %7736 = extractelement <2 x i32> %7732, i32 0
  %7737 = bitcast i8* %7727 to i32*
  store i32 %7736, i32* %7737, align 1, !tbaa !2455
  %7738 = extractelement <2 x i32> %7732, i32 1
  %7739 = getelementptr inbounds i8, i8* %7727, i64 4
  %7740 = bitcast i8* %7739 to i32*
  store i32 %7738, i32* %7740, align 1, !tbaa !2455
  %7741 = extractelement <2 x i32> %7735, i32 0
  %7742 = getelementptr inbounds i8, i8* %7727, i64 8
  %7743 = bitcast i8* %7742 to i32*
  store i32 %7741, i32* %7743, align 1, !tbaa !2455
  %7744 = extractelement <2 x i32> %7735, i32 1
  %7745 = getelementptr inbounds i8, i8* %7727, i64 12
  %7746 = bitcast i8* %7745 to i32*
  store i32 %7744, i32* %7746, align 1, !tbaa !2455
  %7747 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7748 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7749 = load i64, i64* %PC
  %7750 = add i64 %7749, 9
  store i64 %7750, i64* %PC
  %7751 = bitcast i8* %7748 to double*
  %7752 = load double, double* %7751, align 1
  %7753 = getelementptr inbounds i8, i8* %7748, i64 8
  %7754 = bitcast i8* %7753 to i64*
  %7755 = load i64, i64* %7754, align 1
  %7756 = load double, double* bitcast (%sc_type* @sc to double*)
  %7757 = fmul double %7752, %7756
  %7758 = bitcast i8* %7747 to double*
  store double %7757, double* %7758, align 1, !tbaa !2451
  %7759 = getelementptr inbounds i8, i8* %7747, i64 8
  %7760 = bitcast i8* %7759 to i64*
  store i64 %7755, i64* %7760, align 1, !tbaa !2451
  %7761 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7762 = bitcast %union.vec128_t* %XMM0 to i8*
  %7763 = load i64, i64* %PC
  %7764 = add i64 %7763, 3
  store i64 %7764, i64* %PC
  %7765 = bitcast i8* %7762 to <2 x i32>*
  %7766 = load <2 x i32>, <2 x i32>* %7765, align 1
  %7767 = getelementptr inbounds i8, i8* %7762, i64 8
  %7768 = bitcast i8* %7767 to <2 x i32>*
  %7769 = load <2 x i32>, <2 x i32>* %7768, align 1
  %7770 = extractelement <2 x i32> %7766, i32 0
  %7771 = bitcast i8* %7761 to i32*
  store i32 %7770, i32* %7771, align 1, !tbaa !2455
  %7772 = extractelement <2 x i32> %7766, i32 1
  %7773 = getelementptr inbounds i8, i8* %7761, i64 4
  %7774 = bitcast i8* %7773 to i32*
  store i32 %7772, i32* %7774, align 1, !tbaa !2455
  %7775 = extractelement <2 x i32> %7769, i32 0
  %7776 = getelementptr inbounds i8, i8* %7761, i64 8
  %7777 = bitcast i8* %7776 to i32*
  store i32 %7775, i32* %7777, align 1, !tbaa !2455
  %7778 = extractelement <2 x i32> %7769, i32 1
  %7779 = getelementptr inbounds i8, i8* %7761, i64 12
  %7780 = bitcast i8* %7779 to i32*
  store i32 %7778, i32* %7780, align 1, !tbaa !2455
  %7781 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7782 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7783 = load i64, i64* %PC
  %7784 = add i64 %7783, 9
  store i64 %7784, i64* %PC
  %7785 = bitcast i8* %7782 to double*
  %7786 = load double, double* %7785, align 1
  %7787 = getelementptr inbounds i8, i8* %7782, i64 8
  %7788 = bitcast i8* %7787 to i64*
  %7789 = load i64, i64* %7788, align 1
  %7790 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 120) to double*)
  %7791 = fmul double %7786, %7790
  %7792 = bitcast i8* %7781 to double*
  store double %7791, double* %7792, align 1, !tbaa !2451
  %7793 = getelementptr inbounds i8, i8* %7781, i64 8
  %7794 = bitcast i8* %7793 to i64*
  store i64 %7789, i64* %7794, align 1, !tbaa !2451
  %7795 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7796 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7797 = load i64, i64* %PC
  %7798 = add i64 %7797, 9
  store i64 %7798, i64* %PC
  %7799 = bitcast i8* %7796 to double*
  %7800 = load double, double* %7799, align 1
  %7801 = getelementptr inbounds i8, i8* %7796, i64 8
  %7802 = bitcast i8* %7801 to i64*
  %7803 = load i64, i64* %7802, align 1
  %7804 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 136) to double*)
  %7805 = fmul double %7800, %7804
  %7806 = bitcast i8* %7795 to double*
  store double %7805, double* %7806, align 1, !tbaa !2451
  %7807 = getelementptr inbounds i8, i8* %7795, i64 8
  %7808 = bitcast i8* %7807 to i64*
  store i64 %7803, i64* %7808, align 1, !tbaa !2451
  %7809 = load i64, i64* %RBP
  %7810 = sub i64 %7809, 232
  %7811 = bitcast %union.vec128_t* %XMM0 to i8*
  %7812 = load i64, i64* %PC
  %7813 = add i64 %7812, 8
  store i64 %7813, i64* %PC
  %7814 = bitcast i8* %7811 to double*
  %7815 = load double, double* %7814, align 1
  %7816 = inttoptr i64 %7810 to double*
  store double %7815, double* %7816
  %7817 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7818 = bitcast %union.vec128_t* %XMM1 to i8*
  %7819 = load i64, i64* %PC
  %7820 = add i64 %7819, 3
  store i64 %7820, i64* %PC
  %7821 = bitcast i8* %7818 to <2 x i32>*
  %7822 = load <2 x i32>, <2 x i32>* %7821, align 1
  %7823 = getelementptr inbounds i8, i8* %7818, i64 8
  %7824 = bitcast i8* %7823 to <2 x i32>*
  %7825 = load <2 x i32>, <2 x i32>* %7824, align 1
  %7826 = extractelement <2 x i32> %7822, i32 0
  %7827 = bitcast i8* %7817 to i32*
  store i32 %7826, i32* %7827, align 1, !tbaa !2455
  %7828 = extractelement <2 x i32> %7822, i32 1
  %7829 = getelementptr inbounds i8, i8* %7817, i64 4
  %7830 = bitcast i8* %7829 to i32*
  store i32 %7828, i32* %7830, align 1, !tbaa !2455
  %7831 = extractelement <2 x i32> %7825, i32 0
  %7832 = getelementptr inbounds i8, i8* %7817, i64 8
  %7833 = bitcast i8* %7832 to i32*
  store i32 %7831, i32* %7833, align 1, !tbaa !2455
  %7834 = extractelement <2 x i32> %7825, i32 1
  %7835 = getelementptr inbounds i8, i8* %7817, i64 12
  %7836 = bitcast i8* %7835 to i32*
  store i32 %7834, i32* %7836, align 1, !tbaa !2455
  %7837 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7838 = bitcast %union.vec128_t* %XMM2 to i8*
  %7839 = load i64, i64* %PC
  %7840 = add i64 %7839, 3
  store i64 %7840, i64* %PC
  %7841 = bitcast i8* %7838 to <2 x i32>*
  %7842 = load <2 x i32>, <2 x i32>* %7841, align 1
  %7843 = getelementptr inbounds i8, i8* %7838, i64 8
  %7844 = bitcast i8* %7843 to <2 x i32>*
  %7845 = load <2 x i32>, <2 x i32>* %7844, align 1
  %7846 = extractelement <2 x i32> %7842, i32 0
  %7847 = bitcast i8* %7837 to i32*
  store i32 %7846, i32* %7847, align 1, !tbaa !2455
  %7848 = extractelement <2 x i32> %7842, i32 1
  %7849 = getelementptr inbounds i8, i8* %7837, i64 4
  %7850 = bitcast i8* %7849 to i32*
  store i32 %7848, i32* %7850, align 1, !tbaa !2455
  %7851 = extractelement <2 x i32> %7845, i32 0
  %7852 = getelementptr inbounds i8, i8* %7837, i64 8
  %7853 = bitcast i8* %7852 to i32*
  store i32 %7851, i32* %7853, align 1, !tbaa !2455
  %7854 = extractelement <2 x i32> %7845, i32 1
  %7855 = getelementptr inbounds i8, i8* %7837, i64 12
  %7856 = bitcast i8* %7855 to i32*
  store i32 %7854, i32* %7856, align 1, !tbaa !2455
  %7857 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7858 = load i64, i64* %RBP
  %7859 = sub i64 %7858, 232
  %7860 = load i64, i64* %PC
  %7861 = add i64 %7860, 8
  store i64 %7861, i64* %PC
  %7862 = inttoptr i64 %7859 to double*
  %7863 = load double, double* %7862
  %7864 = bitcast i8* %7857 to double*
  store double %7863, double* %7864, align 1, !tbaa !2451
  %7865 = getelementptr inbounds i8, i8* %7857, i64 8
  %7866 = bitcast i8* %7865 to double*
  store double 0.000000e+00, double* %7866, align 1, !tbaa !2451
  %7867 = load i64, i64* %RBP
  %7868 = sub i64 %7867, 236
  %7869 = load i32, i32* %EAX
  %7870 = zext i32 %7869 to i64
  %7871 = load i64, i64* %PC
  %7872 = add i64 %7871, 6
  store i64 %7872, i64* %PC
  %7873 = inttoptr i64 %7868 to i32*
  store i32 %7869, i32* %7873
  %7874 = load i64, i64* %PC
  %7875 = add i64 %7874, 2
  store i64 %7875, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2453
  %7876 = load i64, i64* %PC
  %7877 = sub i64 %7876, 5196
  %7878 = load i64, i64* %PC
  %7879 = add i64 %7878, 5
  %7880 = load i64, i64* %PC
  %7881 = add i64 %7880, 5
  store i64 %7881, i64* %PC
  %7882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7883 = load i64, i64* %7882, align 8, !tbaa !2428
  %7884 = add i64 %7883, -8
  %7885 = inttoptr i64 %7884 to i64*
  store i64 %7879, i64* %7885
  store i64 %7884, i64* %7882, align 8, !tbaa !2428
  %7886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7877, i64* %7886, align 8, !tbaa !2428
  %7887 = load i64, i64* %PC
  %7888 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %7887, %struct.Memory* %6929)
  %7889 = load i64, i64* %PC
  %7890 = add i64 %7889, 10
  store i64 %7890, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %7891 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7892 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7893 = bitcast %union.vec128_t* %XMM0 to i8*
  %7894 = load i64, i64* %PC
  %7895 = add i64 %7894, 3
  store i64 %7895, i64* %PC
  %7896 = bitcast i8* %7892 to i64*
  %7897 = load i64, i64* %7896, align 1
  %7898 = getelementptr inbounds i8, i8* %7892, i64 8
  %7899 = bitcast i8* %7898 to i64*
  %7900 = load i64, i64* %7899, align 1
  %7901 = bitcast i8* %7893 to i64*
  %7902 = load i64, i64* %7901, align 1
  %7903 = getelementptr inbounds i8, i8* %7893, i64 8
  %7904 = bitcast i8* %7903 to i64*
  %7905 = load i64, i64* %7904, align 1
  %7906 = xor i64 %7902, %7897
  %7907 = xor i64 %7905, %7900
  %7908 = trunc i64 %7906 to i32
  %7909 = lshr i64 %7906, 32
  %7910 = trunc i64 %7909 to i32
  %7911 = bitcast i8* %7891 to i32*
  store i32 %7908, i32* %7911, align 1, !tbaa !2454
  %7912 = getelementptr inbounds i8, i8* %7891, i64 4
  %7913 = bitcast i8* %7912 to i32*
  store i32 %7910, i32* %7913, align 1, !tbaa !2454
  %7914 = trunc i64 %7907 to i32
  %7915 = getelementptr inbounds i8, i8* %7891, i64 8
  %7916 = bitcast i8* %7915 to i32*
  store i32 %7914, i32* %7916, align 1, !tbaa !2454
  %7917 = lshr i64 %7907, 32
  %7918 = trunc i64 %7917 to i32
  %7919 = getelementptr inbounds i8, i8* %7891, i64 12
  %7920 = bitcast i8* %7919 to i32*
  store i32 %7918, i32* %7920, align 1, !tbaa !2454
  %7921 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7922 = load i64, i64* %PC
  %7923 = add i64 %7922, 9
  store i64 %7923, i64* %PC
  %7924 = load double, double* bitcast (%piref_type* @piref to double*)
  %7925 = bitcast i8* %7921 to double*
  store double %7924, double* %7925, align 1, !tbaa !2451
  %7926 = getelementptr inbounds i8, i8* %7921, i64 8
  %7927 = bitcast i8* %7926 to double*
  store double 0.000000e+00, double* %7927, align 1, !tbaa !2451
  %7928 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7929 = load i64, i64* %PC
  %7930 = add i64 %7929, 9
  store i64 %7930, i64* %PC
  %7931 = load double, double* bitcast (%four_type* @four to double*)
  %7932 = bitcast i8* %7928 to double*
  store double %7931, double* %7932, align 1, !tbaa !2451
  %7933 = getelementptr inbounds i8, i8* %7928, i64 8
  %7934 = bitcast i8* %7933 to double*
  store double 0.000000e+00, double* %7934, align 1, !tbaa !2451
  %7935 = load i64, i64* %RBP
  %7936 = sub i64 %7935, 80
  %7937 = load i64, i64* %PC
  %7938 = add i64 %7937, 4
  store i64 %7938, i64* %PC
  %7939 = inttoptr i64 %7936 to i64*
  %7940 = load i64, i64* %7939
  store i64 %7940, i64* %RCX, align 8, !tbaa !2428
  %7941 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7942 = load i64, i64* %RCX
  %7943 = load i64, i64* %PC
  %7944 = add i64 %7943, 5
  store i64 %7944, i64* %PC
  %7945 = sitofp i64 %7942 to double
  %7946 = bitcast i8* %7941 to double*
  store double %7945, double* %7946, align 1, !tbaa !2451
  %7947 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7948 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7949 = bitcast %union.vec128_t* %XMM3 to i8*
  %7950 = load i64, i64* %PC
  %7951 = add i64 %7950, 4
  store i64 %7951, i64* %PC
  %7952 = bitcast i8* %7948 to double*
  %7953 = load double, double* %7952, align 1
  %7954 = getelementptr inbounds i8, i8* %7948, i64 8
  %7955 = bitcast i8* %7954 to i64*
  %7956 = load i64, i64* %7955, align 1
  %7957 = bitcast i8* %7949 to double*
  %7958 = load double, double* %7957, align 1
  %7959 = fmul double %7953, %7958
  %7960 = bitcast i8* %7947 to double*
  store double %7959, double* %7960, align 1, !tbaa !2451
  %7961 = getelementptr inbounds i8, i8* %7947, i64 8
  %7962 = bitcast i8* %7961 to i64*
  store i64 %7956, i64* %7962, align 1, !tbaa !2451
  %7963 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7964 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7965 = bitcast %union.vec128_t* %XMM2 to i8*
  %7966 = load i64, i64* %PC
  %7967 = add i64 %7966, 4
  store i64 %7967, i64* %PC
  %7968 = bitcast i8* %7964 to double*
  %7969 = load double, double* %7968, align 1
  %7970 = getelementptr inbounds i8, i8* %7964, i64 8
  %7971 = bitcast i8* %7970 to i64*
  %7972 = load i64, i64* %7971, align 1
  %7973 = bitcast i8* %7965 to double*
  %7974 = load double, double* %7973, align 1
  %7975 = fdiv double %7969, %7974
  %7976 = bitcast i8* %7963 to double*
  store double %7975, double* %7976, align 1, !tbaa !2451
  %7977 = getelementptr inbounds i8, i8* %7963, i64 8
  %7978 = bitcast i8* %7977 to i64*
  store i64 %7972, i64* %7978, align 1, !tbaa !2451
  %7979 = load i64, i64* %RBP
  %7980 = sub i64 %7979, 48
  %7981 = bitcast %union.vec128_t* %XMM1 to i8*
  %7982 = load i64, i64* %PC
  %7983 = add i64 %7982, 5
  store i64 %7983, i64* %PC
  %7984 = bitcast i8* %7981 to double*
  %7985 = load double, double* %7984, align 1
  %7986 = inttoptr i64 %7980 to double*
  store double %7985, double* %7986
  %7987 = load i64, i64* %RBP
  %7988 = sub i64 %7987, 16
  %7989 = bitcast %union.vec128_t* %XMM0 to i8*
  %7990 = load i64, i64* %PC
  %7991 = add i64 %7990, 5
  store i64 %7991, i64* %PC
  %7992 = bitcast i8* %7989 to double*
  %7993 = load double, double* %7992, align 1
  %7994 = inttoptr i64 %7988 to double*
  store double %7993, double* %7994
  %7995 = load i64, i64* %RBP
  %7996 = sub i64 %7995, 32
  %7997 = bitcast %union.vec128_t* %XMM0 to i8*
  %7998 = load i64, i64* %PC
  %7999 = add i64 %7998, 5
  store i64 %7999, i64* %PC
  %8000 = bitcast i8* %7997 to double*
  %8001 = load double, double* %8000, align 1
  %8002 = inttoptr i64 %7996 to double*
  store double %8001, double* %8002
  %8003 = load i64, i64* %RBP
  %8004 = sub i64 %8003, 240
  %8005 = load i32, i32* %EAX
  %8006 = zext i32 %8005 to i64
  %8007 = load i64, i64* %PC
  %8008 = add i64 %8007, 6
  store i64 %8008, i64* %PC
  %8009 = inttoptr i64 %8004 to i32*
  store i32 %8005, i32* %8009
  %8010 = load i64, i64* %PC
  %8011 = add i64 %8010, 3370
  %8012 = load i64, i64* %PC
  %8013 = add i64 %8012, 5
  %8014 = load i64, i64* %PC
  %8015 = add i64 %8014, 5
  store i64 %8015, i64* %PC
  %8016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8017 = load i64, i64* %8016, align 8, !tbaa !2428
  %8018 = add i64 %8017, -8
  %8019 = inttoptr i64 %8018 to i64*
  store i64 %8013, i64* %8019
  store i64 %8018, i64* %8016, align 8, !tbaa !2428
  %8020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8011, i64* %8020, align 8, !tbaa !2428
  %8021 = load i64, i64* %PC
  %8022 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %8021, %struct.Memory* %7888)
  %8023 = load i64, i64* %RBP
  %8024 = sub i64 %8023, 72
  %8025 = load i64, i64* %PC
  %8026 = add i64 %8025, 8
  store i64 %8026, i64* %PC
  %8027 = inttoptr i64 %8024 to i64*
  store i64 1, i64* %8027
  %8028 = load i64, i64* %RBP
  %8029 = sub i64 %8028, 244
  %8030 = load i32, i32* %EAX
  %8031 = zext i32 %8030 to i64
  %8032 = load i64, i64* %PC
  %8033 = add i64 %8032, 6
  store i64 %8033, i64* %PC
  %8034 = inttoptr i64 %8029 to i32*
  store i32 %8030, i32* %8034
  br label %block_4018d9

block_400b2b:                                     ; preds = %block_400ad4
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %8035 = load i64, i64* %PC
  %8036 = add i64 %8035, 6843
  %8037 = load i64, i64* %PC
  %8038 = add i64 %8037, 5
  %8039 = load i64, i64* %PC
  %8040 = add i64 %8039, 5
  store i64 %8040, i64* %PC
  %8041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8042 = load i64, i64* %8041, align 8, !tbaa !2428
  %8043 = add i64 %8042, -8
  %8044 = inttoptr i64 %8043 to i64*
  store i64 %8038, i64* %8044
  store i64 %8043, i64* %8041, align 8, !tbaa !2428
  %8045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8036, i64* %8045, align 8, !tbaa !2428
  %8046 = load i64, i64* %PC
  %8047 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %8046, %struct.Memory* %MEMORY.2)
  %8048 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8049 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8050 = bitcast %union.vec128_t* %XMM0 to i8*
  %8051 = load i64, i64* %PC
  %8052 = add i64 %8051, 3
  store i64 %8052, i64* %PC
  %8053 = bitcast i8* %8049 to i64*
  %8054 = load i64, i64* %8053, align 1
  %8055 = getelementptr inbounds i8, i8* %8049, i64 8
  %8056 = bitcast i8* %8055 to i64*
  %8057 = load i64, i64* %8056, align 1
  %8058 = bitcast i8* %8050 to i64*
  %8059 = load i64, i64* %8058, align 1
  %8060 = getelementptr inbounds i8, i8* %8050, i64 8
  %8061 = bitcast i8* %8060 to i64*
  %8062 = load i64, i64* %8061, align 1
  %8063 = xor i64 %8059, %8054
  %8064 = xor i64 %8062, %8057
  %8065 = trunc i64 %8063 to i32
  %8066 = lshr i64 %8063, 32
  %8067 = trunc i64 %8066 to i32
  %8068 = bitcast i8* %8048 to i32*
  store i32 %8065, i32* %8068, align 1, !tbaa !2454
  %8069 = getelementptr inbounds i8, i8* %8048, i64 4
  %8070 = bitcast i8* %8069 to i32*
  store i32 %8067, i32* %8070, align 1, !tbaa !2454
  %8071 = trunc i64 %8064 to i32
  %8072 = getelementptr inbounds i8, i8* %8048, i64 8
  %8073 = bitcast i8* %8072 to i32*
  store i32 %8071, i32* %8073, align 1, !tbaa !2454
  %8074 = lshr i64 %8064, 32
  %8075 = trunc i64 %8074 to i32
  %8076 = getelementptr inbounds i8, i8* %8048, i64 12
  %8077 = bitcast i8* %8076 to i32*
  store i32 %8075, i32* %8077, align 1, !tbaa !2454
  %8078 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8079 = load i64, i64* %PC
  %8080 = add i64 %8079, 9
  store i64 %8080, i64* %PC
  %8081 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %8082 = bitcast i8* %8078 to double*
  store double %8081, double* %8082, align 1, !tbaa !2451
  %8083 = getelementptr inbounds i8, i8* %8078, i64 8
  %8084 = bitcast i8* %8083 to double*
  store double 0.000000e+00, double* %8084, align 1, !tbaa !2451
  %8085 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8086 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8087 = load i64, i64* %PC
  %8088 = add i64 %8087, 9
  store i64 %8088, i64* %PC
  %8089 = bitcast i8* %8086 to double*
  %8090 = load double, double* %8089, align 1
  %8091 = getelementptr inbounds i8, i8* %8086, i64 8
  %8092 = bitcast i8* %8091 to i64*
  %8093 = load i64, i64* %8092, align 1
  %8094 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %8095 = fmul double %8090, %8094
  %8096 = bitcast i8* %8085 to double*
  store double %8095, double* %8096, align 1, !tbaa !2451
  %8097 = getelementptr inbounds i8, i8* %8085, i64 8
  %8098 = bitcast i8* %8097 to i64*
  store i64 %8093, i64* %8098, align 1, !tbaa !2451
  %8099 = bitcast %union.vec128_t* %XMM1 to i8*
  %8100 = load i64, i64* %PC
  %8101 = add i64 %8100, 9
  store i64 %8101, i64* %PC
  %8102 = bitcast i8* %8099 to double*
  %8103 = load double, double* %8102, align 1
  store double %8103, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  %8104 = bitcast %union.vec128_t* %XMM0 to i8*
  %8105 = load i64, i64* %PC
  %8106 = add i64 %8105, 9
  store i64 %8106, i64* %PC
  %8107 = bitcast i8* %8104 to double*
  %8108 = load double, double* %8107, align 1
  %8109 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  %8110 = fcmp uno double %8108, %8109
  br i1 %8110, label %8111, label %8123

; <label>:8111:                                   ; preds = %block_400b2b
  %8112 = fadd double %8108, %8109
  %8113 = bitcast double %8112 to i64
  %8114 = and i64 %8113, 9221120237041090560
  %8115 = icmp eq i64 %8114, 9218868437227405312
  %8116 = and i64 %8113, 2251799813685247
  %8117 = icmp ne i64 %8116, 0
  %8118 = and i1 %8115, %8117
  br i1 %8118, label %8119, label %8129

; <label>:8119:                                   ; preds = %8111
  %8120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8121 = load i64, i64* %8120, align 8, !tbaa !2428
  %8122 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %8121, %struct.Memory* %8047) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:8123:                                   ; preds = %block_400b2b
  %8124 = fcmp ogt double %8108, %8109
  br i1 %8124, label %8129, label %8125

; <label>:8125:                                   ; preds = %8123
  %8126 = fcmp olt double %8108, %8109
  br i1 %8126, label %8129, label %8127

; <label>:8127:                                   ; preds = %8125
  %8128 = fcmp oeq double %8108, %8109
  br i1 %8128, label %8129, label %8136

; <label>:8129:                                   ; preds = %8127, %8125, %8123, %8111
  %8130 = phi i8 [ 0, %8123 ], [ 0, %8125 ], [ 1, %8127 ], [ 1, %8111 ]
  %8131 = phi i8 [ 0, %8123 ], [ 0, %8125 ], [ 0, %8127 ], [ 1, %8111 ]
  %8132 = phi i8 [ 0, %8123 ], [ 1, %8125 ], [ 0, %8127 ], [ 1, %8111 ]
  %8133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8130, i8* %8133, align 1, !tbaa !2453
  %8134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8131, i8* %8134, align 1, !tbaa !2453
  %8135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8132, i8* %8135, align 1, !tbaa !2453
  br label %8136

; <label>:8136:                                   ; preds = %8129, %8127
  %8137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8137, align 1, !tbaa !2453
  %8138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %8138, align 1, !tbaa !2453
  %8139 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8139, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %8119, %8136
  %8140 = phi %struct.Memory* [ %8122, %8119 ], [ %8047, %8136 ]
  %8141 = load i64, i64* %RBP
  %8142 = sub i64 %8141, 148
  %8143 = load i32, i32* %EAX
  %8144 = zext i32 %8143 to i64
  %8145 = load i64, i64* %PC
  %8146 = add i64 %8145, 6
  store i64 %8146, i64* %PC
  %8147 = inttoptr i64 %8142 to i32*
  store i32 %8143, i32* %8147
  %8148 = load i64, i64* %PC
  %8149 = add i64 %8148, 18
  %8150 = load i64, i64* %PC
  %8151 = add i64 %8150, 6
  %8152 = load i64, i64* %PC
  %8153 = add i64 %8152, 6
  store i64 %8153, i64* %PC
  %8154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8155 = load i8, i8* %8154, align 1, !tbaa !2432
  %8156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8157 = load i8, i8* %8156, align 1, !tbaa !2448
  %8158 = or i8 %8157, %8155
  %8159 = icmp ne i8 %8158, 0
  %8160 = zext i1 %8159 to i8
  store i8 %8160, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %8161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %8162 = select i1 %8159, i64 %8149, i64 %8151
  store i64 %8162, i64* %8161, align 8, !tbaa !2428
  %8163 = load i8, i8* %BRANCH_TAKEN
  %8164 = icmp eq i8 %8163, 1
  br i1 %8164, label %block_400b79, label %block_400b6d

block_4007fd:                                     ; preds = %block_4007cb
  %8165 = add i64 %10355, 10
  %8166 = load i64, i64* %PC
  %8167 = add i64 %8166, 5
  store i64 %8167, i64* %PC
  %8168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8165, i64* %8168, align 8, !tbaa !2428
  br label %block_400807

block_4006a5:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %8169 = load i64, i64* %PC
  %8170 = add i64 %8169, 10
  store i64 %8170, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %8171 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8172 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8173 = bitcast %union.vec128_t* %XMM0 to i8*
  %8174 = load i64, i64* %PC
  %8175 = add i64 %8174, 3
  store i64 %8175, i64* %PC
  %8176 = bitcast i8* %8172 to i64*
  %8177 = load i64, i64* %8176, align 1
  %8178 = getelementptr inbounds i8, i8* %8172, i64 8
  %8179 = bitcast i8* %8178 to i64*
  %8180 = load i64, i64* %8179, align 1
  %8181 = bitcast i8* %8173 to i64*
  %8182 = load i64, i64* %8181, align 1
  %8183 = getelementptr inbounds i8, i8* %8173, i64 8
  %8184 = bitcast i8* %8183 to i64*
  %8185 = load i64, i64* %8184, align 1
  %8186 = xor i64 %8182, %8177
  %8187 = xor i64 %8185, %8180
  %8188 = trunc i64 %8186 to i32
  %8189 = lshr i64 %8186, 32
  %8190 = trunc i64 %8189 to i32
  %8191 = bitcast i8* %8171 to i32*
  store i32 %8188, i32* %8191, align 1, !tbaa !2454
  %8192 = getelementptr inbounds i8, i8* %8171, i64 4
  %8193 = bitcast i8* %8192 to i32*
  store i32 %8190, i32* %8193, align 1, !tbaa !2454
  %8194 = trunc i64 %8187 to i32
  %8195 = getelementptr inbounds i8, i8* %8171, i64 8
  %8196 = bitcast i8* %8195 to i32*
  store i32 %8194, i32* %8196, align 1, !tbaa !2454
  %8197 = lshr i64 %8187, 32
  %8198 = trunc i64 %8197 to i32
  %8199 = getelementptr inbounds i8, i8* %8171, i64 12
  %8200 = bitcast i8* %8199 to i32*
  store i32 %8198, i32* %8200, align 1, !tbaa !2454
  %8201 = load i64, i64* %RBP
  %8202 = sub i64 %8201, 88
  %8203 = load i64, i64* %PC
  %8204 = add i64 %8203, 4
  store i64 %8204, i64* %PC
  %8205 = inttoptr i64 %8202 to i64*
  %8206 = load i64, i64* %8205
  store i64 %8206, i64* %RAX, align 8, !tbaa !2428
  %8207 = load i64, i64* %RAX
  %8208 = load i64, i64* %PC
  %8209 = add i64 %8208, 4
  store i64 %8209, i64* %PC
  %8210 = shl i64 %8207, 1
  %8211 = icmp slt i64 %8207, 0
  %8212 = icmp slt i64 %8210, 0
  %8213 = xor i1 %8211, %8212
  store i64 %8210, i64* %RAX, align 8, !tbaa !2428
  %8214 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %8215 = zext i1 %8211 to i8
  store i8 %8215, i8* %8214, align 1, !tbaa !2453
  %8216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %8217 = trunc i64 %8210 to i32
  %8218 = and i32 %8217, 254
  %8219 = call i32 @llvm.ctpop.i32(i32 %8218) #16
  %8220 = trunc i32 %8219 to i8
  %8221 = and i8 %8220, 1
  %8222 = xor i8 %8221, 1
  store i8 %8222, i8* %8216, align 1, !tbaa !2453
  %8223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8223, align 1, !tbaa !2453
  %8224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %8225 = icmp eq i64 %8210, 0
  %8226 = zext i1 %8225 to i8
  store i8 %8226, i8* %8224, align 1, !tbaa !2453
  %8227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %8228 = lshr i64 %8210, 63
  %8229 = trunc i64 %8228 to i8
  store i8 %8229, i8* %8227, align 1, !tbaa !2453
  %8230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %8231 = zext i1 %8213 to i8
  store i8 %8231, i8* %8230, align 1, !tbaa !2453
  %8232 = load i64, i64* %RBP
  %8233 = sub i64 %8232, 88
  %8234 = load i64, i64* %RAX
  %8235 = load i64, i64* %PC
  %8236 = add i64 %8235, 4
  store i64 %8236, i64* %PC
  %8237 = inttoptr i64 %8233 to i64*
  store i64 %8234, i64* %8237
  %8238 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8239 = load i64, i64* %PC
  %8240 = add i64 %8239, 9
  store i64 %8240, i64* %PC
  %8241 = load double, double* bitcast (%one_type* @one to double*)
  %8242 = bitcast i8* %8238 to double*
  store double %8241, double* %8242, align 1, !tbaa !2451
  %8243 = getelementptr inbounds i8, i8* %8238, i64 8
  %8244 = bitcast i8* %8243 to double*
  store double 0.000000e+00, double* %8244, align 1, !tbaa !2451
  %8245 = load i64, i64* %RBP
  %8246 = sub i64 %8245, 88
  %8247 = load i64, i64* %PC
  %8248 = add i64 %8247, 4
  store i64 %8248, i64* %PC
  %8249 = inttoptr i64 %8246 to i64*
  %8250 = load i64, i64* %8249
  store i64 %8250, i64* %RAX, align 8, !tbaa !2428
  %8251 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8252 = load i64, i64* %RAX
  %8253 = load i64, i64* %PC
  %8254 = add i64 %8253, 5
  store i64 %8254, i64* %PC
  %8255 = sitofp i64 %8252 to double
  %8256 = bitcast i8* %8251 to double*
  store double %8255, double* %8256, align 1, !tbaa !2451
  %8257 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8258 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8259 = bitcast %union.vec128_t* %XMM2 to i8*
  %8260 = load i64, i64* %PC
  %8261 = add i64 %8260, 4
  store i64 %8261, i64* %PC
  %8262 = bitcast i8* %8258 to double*
  %8263 = load double, double* %8262, align 1
  %8264 = getelementptr inbounds i8, i8* %8258, i64 8
  %8265 = bitcast i8* %8264 to i64*
  %8266 = load i64, i64* %8265, align 1
  %8267 = bitcast i8* %8259 to double*
  %8268 = load double, double* %8267, align 1
  %8269 = fdiv double %8263, %8268
  %8270 = bitcast i8* %8257 to double*
  store double %8269, double* %8270, align 1, !tbaa !2451
  %8271 = getelementptr inbounds i8, i8* %8257, i64 8
  %8272 = bitcast i8* %8271 to i64*
  store i64 %8266, i64* %8272, align 1, !tbaa !2451
  %8273 = load i64, i64* %RBP
  %8274 = sub i64 %8273, 48
  %8275 = bitcast %union.vec128_t* %XMM1 to i8*
  %8276 = load i64, i64* %PC
  %8277 = add i64 %8276, 5
  store i64 %8277, i64* %PC
  %8278 = bitcast i8* %8275 to double*
  %8279 = load double, double* %8278, align 1
  %8280 = inttoptr i64 %8274 to double*
  store double %8279, double* %8280
  %8281 = load i64, i64* %RBP
  %8282 = sub i64 %8281, 16
  %8283 = bitcast %union.vec128_t* %XMM0 to i8*
  %8284 = load i64, i64* %PC
  %8285 = add i64 %8284, 5
  store i64 %8285, i64* %PC
  %8286 = bitcast i8* %8283 to double*
  %8287 = load double, double* %8286, align 1
  %8288 = inttoptr i64 %8282 to double*
  store double %8287, double* %8288
  %8289 = load i64, i64* %RBP
  %8290 = sub i64 %8289, 32
  %8291 = bitcast %union.vec128_t* %XMM0 to i8*
  %8292 = load i64, i64* %PC
  %8293 = add i64 %8292, 5
  store i64 %8293, i64* %PC
  %8294 = bitcast i8* %8291 to double*
  %8295 = load double, double* %8294, align 1
  %8296 = inttoptr i64 %8290 to double*
  store double %8295, double* %8296
  %8297 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8298 = load i64, i64* %PC
  %8299 = add i64 %8298, 9
  store i64 %8299, i64* %PC
  %8300 = load double, double* bitcast (%one_type* @one to double*)
  %8301 = bitcast i8* %8297 to double*
  store double %8300, double* %8301, align 1, !tbaa !2451
  %8302 = getelementptr inbounds i8, i8* %8297, i64 8
  %8303 = bitcast i8* %8302 to double*
  store double 0.000000e+00, double* %8303, align 1, !tbaa !2451
  %8304 = load i64, i64* %RBP
  %8305 = sub i64 %8304, 40
  %8306 = bitcast %union.vec128_t* %XMM0 to i8*
  %8307 = load i64, i64* %PC
  %8308 = add i64 %8307, 5
  store i64 %8308, i64* %PC
  %8309 = bitcast i8* %8306 to double*
  %8310 = load double, double* %8309, align 1
  %8311 = inttoptr i64 %8305 to double*
  store double %8310, double* %8311
  %8312 = load i64, i64* %PC
  %8313 = add i64 %8312, 7935
  %8314 = load i64, i64* %PC
  %8315 = add i64 %8314, 5
  %8316 = load i64, i64* %PC
  %8317 = add i64 %8316, 5
  store i64 %8317, i64* %PC
  %8318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8319 = load i64, i64* %8318, align 8, !tbaa !2428
  %8320 = add i64 %8319, -8
  %8321 = inttoptr i64 %8320 to i64*
  store i64 %8315, i64* %8321
  store i64 %8320, i64* %8318, align 8, !tbaa !2428
  %8322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8313, i64* %8322, align 8, !tbaa !2428
  %8323 = load i64, i64* %PC
  %8324 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %8323, %struct.Memory* %12035)
  %8325 = load i64, i64* %RBP
  %8326 = sub i64 %8325, 72
  %8327 = load i64, i64* %PC
  %8328 = add i64 %8327, 8
  store i64 %8328, i64* %PC
  %8329 = inttoptr i64 %8326 to i64*
  store i64 1, i64* %8329
  %8330 = load i64, i64* %RBP
  %8331 = sub i64 %8330, 116
  %8332 = load i32, i32* %EAX
  %8333 = zext i32 %8332 to i64
  %8334 = load i64, i64* %PC
  %8335 = add i64 %8334, 3
  store i64 %8335, i64* %PC
  %8336 = inttoptr i64 %8331 to i32*
  store i32 %8332, i32* %8336
  br label %block_400701

block_401199:                                     ; preds = %block_401184
  %8337 = load i64, i64* %RBP
  %8338 = sub i64 %8337, 72
  %8339 = load i64, i64* %PC
  %8340 = add i64 %8339, 4
  store i64 %8340, i64* %PC
  %8341 = inttoptr i64 %8338 to i64*
  %8342 = load i64, i64* %8341
  store i64 %8342, i64* %RAX, align 8, !tbaa !2428
  %8343 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8344 = load i64, i64* %RAX
  %8345 = load i64, i64* %PC
  %8346 = add i64 %8345, 5
  store i64 %8346, i64* %PC
  %8347 = sitofp i64 %8344 to double
  %8348 = bitcast i8* %8343 to double*
  store double %8347, double* %8348, align 1, !tbaa !2451
  %8349 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8350 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8351 = load i64, i64* %RBP
  %8352 = sub i64 %8351, 48
  %8353 = load i64, i64* %PC
  %8354 = add i64 %8353, 5
  store i64 %8354, i64* %PC
  %8355 = bitcast i8* %8350 to double*
  %8356 = load double, double* %8355, align 1
  %8357 = getelementptr inbounds i8, i8* %8350, i64 8
  %8358 = bitcast i8* %8357 to i64*
  %8359 = load i64, i64* %8358, align 1
  %8360 = inttoptr i64 %8352 to double*
  %8361 = load double, double* %8360
  %8362 = fmul double %8356, %8361
  %8363 = bitcast i8* %8349 to double*
  store double %8362, double* %8363, align 1, !tbaa !2451
  %8364 = getelementptr inbounds i8, i8* %8349, i64 8
  %8365 = bitcast i8* %8364 to i64*
  store i64 %8359, i64* %8365, align 1, !tbaa !2451
  %8366 = load i64, i64* %RBP
  %8367 = sub i64 %8366, 24
  %8368 = bitcast %union.vec128_t* %XMM0 to i8*
  %8369 = load i64, i64* %PC
  %8370 = add i64 %8369, 5
  store i64 %8370, i64* %PC
  %8371 = bitcast i8* %8368 to double*
  %8372 = load double, double* %8371, align 1
  %8373 = inttoptr i64 %8367 to double*
  store double %8372, double* %8373
  %8374 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8375 = load i64, i64* %RBP
  %8376 = sub i64 %8375, 24
  %8377 = load i64, i64* %PC
  %8378 = add i64 %8377, 5
  store i64 %8378, i64* %PC
  %8379 = inttoptr i64 %8376 to double*
  %8380 = load double, double* %8379
  %8381 = bitcast i8* %8374 to double*
  store double %8380, double* %8381, align 1, !tbaa !2451
  %8382 = getelementptr inbounds i8, i8* %8374, i64 8
  %8383 = bitcast i8* %8382 to double*
  store double 0.000000e+00, double* %8383, align 1, !tbaa !2451
  %8384 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8385 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8386 = load i64, i64* %RBP
  %8387 = sub i64 %8386, 24
  %8388 = load i64, i64* %PC
  %8389 = add i64 %8388, 5
  store i64 %8389, i64* %PC
  %8390 = bitcast i8* %8385 to double*
  %8391 = load double, double* %8390, align 1
  %8392 = getelementptr inbounds i8, i8* %8385, i64 8
  %8393 = bitcast i8* %8392 to i64*
  %8394 = load i64, i64* %8393, align 1
  %8395 = inttoptr i64 %8387 to double*
  %8396 = load double, double* %8395
  %8397 = fmul double %8391, %8396
  %8398 = bitcast i8* %8384 to double*
  store double %8397, double* %8398, align 1, !tbaa !2451
  %8399 = getelementptr inbounds i8, i8* %8384, i64 8
  %8400 = bitcast i8* %8399 to i64*
  store i64 %8394, i64* %8400, align 1, !tbaa !2451
  %8401 = load i64, i64* %RBP
  %8402 = sub i64 %8401, 40
  %8403 = bitcast %union.vec128_t* %XMM0 to i8*
  %8404 = load i64, i64* %PC
  %8405 = add i64 %8404, 5
  store i64 %8405, i64* %PC
  %8406 = bitcast i8* %8403 to double*
  %8407 = load double, double* %8406, align 1
  %8408 = inttoptr i64 %8402 to double*
  store double %8407, double* %8408
  %8409 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8410 = load i64, i64* %RBP
  %8411 = sub i64 %8410, 16
  %8412 = load i64, i64* %PC
  %8413 = add i64 %8412, 5
  store i64 %8413, i64* %PC
  %8414 = inttoptr i64 %8411 to double*
  %8415 = load double, double* %8414
  %8416 = bitcast i8* %8409 to double*
  store double %8415, double* %8416, align 1, !tbaa !2451
  %8417 = getelementptr inbounds i8, i8* %8409, i64 8
  %8418 = bitcast i8* %8417 to double*
  store double 0.000000e+00, double* %8418, align 1, !tbaa !2451
  %8419 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8420 = load i64, i64* %RBP
  %8421 = sub i64 %8420, 40
  %8422 = load i64, i64* %PC
  %8423 = add i64 %8422, 5
  store i64 %8423, i64* %PC
  %8424 = inttoptr i64 %8421 to double*
  %8425 = load double, double* %8424
  %8426 = bitcast i8* %8419 to double*
  store double %8425, double* %8426, align 1, !tbaa !2451
  %8427 = getelementptr inbounds i8, i8* %8419, i64 8
  %8428 = bitcast i8* %8427 to double*
  store double 0.000000e+00, double* %8428, align 1, !tbaa !2451
  %8429 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8430 = load i64, i64* %RBP
  %8431 = sub i64 %8430, 40
  %8432 = load i64, i64* %PC
  %8433 = add i64 %8432, 5
  store i64 %8433, i64* %PC
  %8434 = inttoptr i64 %8431 to double*
  %8435 = load double, double* %8434
  %8436 = bitcast i8* %8429 to double*
  store double %8435, double* %8436, align 1, !tbaa !2451
  %8437 = getelementptr inbounds i8, i8* %8429, i64 8
  %8438 = bitcast i8* %8437 to double*
  store double 0.000000e+00, double* %8438, align 1, !tbaa !2451
  %8439 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8440 = load i64, i64* %RBP
  %8441 = sub i64 %8440, 40
  %8442 = load i64, i64* %PC
  %8443 = add i64 %8442, 5
  store i64 %8443, i64* %PC
  %8444 = inttoptr i64 %8441 to double*
  %8445 = load double, double* %8444
  %8446 = bitcast i8* %8439 to double*
  store double %8445, double* %8446, align 1, !tbaa !2451
  %8447 = getelementptr inbounds i8, i8* %8439, i64 8
  %8448 = bitcast i8* %8447 to double*
  store double 0.000000e+00, double* %8448, align 1, !tbaa !2451
  %8449 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8450 = load i64, i64* %RBP
  %8451 = sub i64 %8450, 40
  %8452 = load i64, i64* %PC
  %8453 = add i64 %8452, 5
  store i64 %8453, i64* %PC
  %8454 = inttoptr i64 %8451 to double*
  %8455 = load double, double* %8454
  %8456 = bitcast i8* %8449 to double*
  store double %8455, double* %8456, align 1, !tbaa !2451
  %8457 = getelementptr inbounds i8, i8* %8449, i64 8
  %8458 = bitcast i8* %8457 to double*
  store double 0.000000e+00, double* %8458, align 1, !tbaa !2451
  %8459 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %8460 = load i64, i64* %RBP
  %8461 = sub i64 %8460, 40
  %8462 = load i64, i64* %PC
  %8463 = add i64 %8462, 5
  store i64 %8463, i64* %PC
  %8464 = inttoptr i64 %8461 to double*
  %8465 = load double, double* %8464
  %8466 = bitcast i8* %8459 to double*
  store double %8465, double* %8466, align 1, !tbaa !2451
  %8467 = getelementptr inbounds i8, i8* %8459, i64 8
  %8468 = bitcast i8* %8467 to double*
  store double 0.000000e+00, double* %8468, align 1, !tbaa !2451
  %8469 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %8470 = load i64, i64* %PC
  %8471 = add i64 %8470, 9
  store i64 %8471, i64* %PC
  %8472 = load double, double* bitcast (%B6_type* @B6 to double*)
  %8473 = bitcast i8* %8469 to double*
  store double %8472, double* %8473, align 1, !tbaa !2451
  %8474 = getelementptr inbounds i8, i8* %8469, i64 8
  %8475 = bitcast i8* %8474 to double*
  store double 0.000000e+00, double* %8475, align 1, !tbaa !2451
  %8476 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %8477 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %8478 = load i64, i64* %RBP
  %8479 = sub i64 %8478, 40
  %8480 = load i64, i64* %PC
  %8481 = add i64 %8480, 5
  store i64 %8481, i64* %PC
  %8482 = bitcast i8* %8477 to double*
  %8483 = load double, double* %8482, align 1
  %8484 = getelementptr inbounds i8, i8* %8477, i64 8
  %8485 = bitcast i8* %8484 to i64*
  %8486 = load i64, i64* %8485, align 1
  %8487 = inttoptr i64 %8479 to double*
  %8488 = load double, double* %8487
  %8489 = fmul double %8483, %8488
  %8490 = bitcast i8* %8476 to double*
  store double %8489, double* %8490, align 1, !tbaa !2451
  %8491 = getelementptr inbounds i8, i8* %8476, i64 8
  %8492 = bitcast i8* %8491 to i64*
  store i64 %8486, i64* %8492, align 1, !tbaa !2451
  %8493 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %8494 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %8495 = load i64, i64* %PC
  %8496 = add i64 %8495, 9
  store i64 %8496, i64* %PC
  %8497 = bitcast i8* %8494 to double*
  %8498 = load double, double* %8497, align 1
  %8499 = getelementptr inbounds i8, i8* %8494, i64 8
  %8500 = bitcast i8* %8499 to i64*
  %8501 = load i64, i64* %8500, align 1
  %8502 = load double, double* bitcast (%B5_type* @B5 to double*)
  %8503 = fadd double %8498, %8502
  %8504 = bitcast i8* %8493 to double*
  store double %8503, double* %8504, align 1, !tbaa !2451
  %8505 = getelementptr inbounds i8, i8* %8493, i64 8
  %8506 = bitcast i8* %8505 to i64*
  store i64 %8501, i64* %8506, align 1, !tbaa !2451
  %8507 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %8508 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %8509 = bitcast %union.vec128_t* %XMM6 to i8*
  %8510 = load i64, i64* %PC
  %8511 = add i64 %8510, 4
  store i64 %8511, i64* %PC
  %8512 = bitcast i8* %8508 to double*
  %8513 = load double, double* %8512, align 1
  %8514 = getelementptr inbounds i8, i8* %8508, i64 8
  %8515 = bitcast i8* %8514 to i64*
  %8516 = load i64, i64* %8515, align 1
  %8517 = bitcast i8* %8509 to double*
  %8518 = load double, double* %8517, align 1
  %8519 = fmul double %8513, %8518
  %8520 = bitcast i8* %8507 to double*
  store double %8519, double* %8520, align 1, !tbaa !2451
  %8521 = getelementptr inbounds i8, i8* %8507, i64 8
  %8522 = bitcast i8* %8521 to i64*
  store i64 %8516, i64* %8522, align 1, !tbaa !2451
  %8523 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %8524 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %8525 = load i64, i64* %PC
  %8526 = add i64 %8525, 9
  store i64 %8526, i64* %PC
  %8527 = bitcast i8* %8524 to double*
  %8528 = load double, double* %8527, align 1
  %8529 = getelementptr inbounds i8, i8* %8524, i64 8
  %8530 = bitcast i8* %8529 to i64*
  %8531 = load i64, i64* %8530, align 1
  %8532 = load double, double* bitcast (%B4_type* @B4 to double*)
  %8533 = fadd double %8528, %8532
  %8534 = bitcast i8* %8523 to double*
  store double %8533, double* %8534, align 1, !tbaa !2451
  %8535 = getelementptr inbounds i8, i8* %8523, i64 8
  %8536 = bitcast i8* %8535 to i64*
  store i64 %8531, i64* %8536, align 1, !tbaa !2451
  %8537 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8538 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8539 = bitcast %union.vec128_t* %XMM5 to i8*
  %8540 = load i64, i64* %PC
  %8541 = add i64 %8540, 4
  store i64 %8541, i64* %PC
  %8542 = bitcast i8* %8538 to double*
  %8543 = load double, double* %8542, align 1
  %8544 = getelementptr inbounds i8, i8* %8538, i64 8
  %8545 = bitcast i8* %8544 to i64*
  %8546 = load i64, i64* %8545, align 1
  %8547 = bitcast i8* %8539 to double*
  %8548 = load double, double* %8547, align 1
  %8549 = fmul double %8543, %8548
  %8550 = bitcast i8* %8537 to double*
  store double %8549, double* %8550, align 1, !tbaa !2451
  %8551 = getelementptr inbounds i8, i8* %8537, i64 8
  %8552 = bitcast i8* %8551 to i64*
  store i64 %8546, i64* %8552, align 1, !tbaa !2451
  %8553 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8554 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8555 = load i64, i64* %PC
  %8556 = add i64 %8555, 9
  store i64 %8556, i64* %PC
  %8557 = bitcast i8* %8554 to double*
  %8558 = load double, double* %8557, align 1
  %8559 = getelementptr inbounds i8, i8* %8554, i64 8
  %8560 = bitcast i8* %8559 to i64*
  %8561 = load i64, i64* %8560, align 1
  %8562 = load double, double* bitcast (%B3_type* @B3 to double*)
  %8563 = fadd double %8558, %8562
  %8564 = bitcast i8* %8553 to double*
  store double %8563, double* %8564, align 1, !tbaa !2451
  %8565 = getelementptr inbounds i8, i8* %8553, i64 8
  %8566 = bitcast i8* %8565 to i64*
  store i64 %8561, i64* %8566, align 1, !tbaa !2451
  %8567 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8568 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8569 = bitcast %union.vec128_t* %XMM4 to i8*
  %8570 = load i64, i64* %PC
  %8571 = add i64 %8570, 4
  store i64 %8571, i64* %PC
  %8572 = bitcast i8* %8568 to double*
  %8573 = load double, double* %8572, align 1
  %8574 = getelementptr inbounds i8, i8* %8568, i64 8
  %8575 = bitcast i8* %8574 to i64*
  %8576 = load i64, i64* %8575, align 1
  %8577 = bitcast i8* %8569 to double*
  %8578 = load double, double* %8577, align 1
  %8579 = fmul double %8573, %8578
  %8580 = bitcast i8* %8567 to double*
  store double %8579, double* %8580, align 1, !tbaa !2451
  %8581 = getelementptr inbounds i8, i8* %8567, i64 8
  %8582 = bitcast i8* %8581 to i64*
  store i64 %8576, i64* %8582, align 1, !tbaa !2451
  %8583 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8584 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8585 = load i64, i64* %PC
  %8586 = add i64 %8585, 9
  store i64 %8586, i64* %PC
  %8587 = bitcast i8* %8584 to double*
  %8588 = load double, double* %8587, align 1
  %8589 = getelementptr inbounds i8, i8* %8584, i64 8
  %8590 = bitcast i8* %8589 to i64*
  %8591 = load i64, i64* %8590, align 1
  %8592 = load double, double* bitcast (%B2_type* @B2 to double*)
  %8593 = fadd double %8588, %8592
  %8594 = bitcast i8* %8583 to double*
  store double %8593, double* %8594, align 1, !tbaa !2451
  %8595 = getelementptr inbounds i8, i8* %8583, i64 8
  %8596 = bitcast i8* %8595 to i64*
  store i64 %8591, i64* %8596, align 1, !tbaa !2451
  %8597 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8598 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8599 = bitcast %union.vec128_t* %XMM3 to i8*
  %8600 = load i64, i64* %PC
  %8601 = add i64 %8600, 4
  store i64 %8601, i64* %PC
  %8602 = bitcast i8* %8598 to double*
  %8603 = load double, double* %8602, align 1
  %8604 = getelementptr inbounds i8, i8* %8598, i64 8
  %8605 = bitcast i8* %8604 to i64*
  %8606 = load i64, i64* %8605, align 1
  %8607 = bitcast i8* %8599 to double*
  %8608 = load double, double* %8607, align 1
  %8609 = fmul double %8603, %8608
  %8610 = bitcast i8* %8597 to double*
  store double %8609, double* %8610, align 1, !tbaa !2451
  %8611 = getelementptr inbounds i8, i8* %8597, i64 8
  %8612 = bitcast i8* %8611 to i64*
  store i64 %8606, i64* %8612, align 1, !tbaa !2451
  %8613 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8614 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8615 = load i64, i64* %PC
  %8616 = add i64 %8615, 9
  store i64 %8616, i64* %PC
  %8617 = bitcast i8* %8614 to double*
  %8618 = load double, double* %8617, align 1
  %8619 = getelementptr inbounds i8, i8* %8614, i64 8
  %8620 = bitcast i8* %8619 to i64*
  %8621 = load i64, i64* %8620, align 1
  %8622 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %8623 = fadd double %8618, %8622
  %8624 = bitcast i8* %8613 to double*
  store double %8623, double* %8624, align 1, !tbaa !2451
  %8625 = getelementptr inbounds i8, i8* %8613, i64 8
  %8626 = bitcast i8* %8625 to i64*
  store i64 %8621, i64* %8626, align 1, !tbaa !2451
  %8627 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8628 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8629 = bitcast %union.vec128_t* %XMM2 to i8*
  %8630 = load i64, i64* %PC
  %8631 = add i64 %8630, 4
  store i64 %8631, i64* %PC
  %8632 = bitcast i8* %8628 to double*
  %8633 = load double, double* %8632, align 1
  %8634 = getelementptr inbounds i8, i8* %8628, i64 8
  %8635 = bitcast i8* %8634 to i64*
  %8636 = load i64, i64* %8635, align 1
  %8637 = bitcast i8* %8629 to double*
  %8638 = load double, double* %8637, align 1
  %8639 = fmul double %8633, %8638
  %8640 = bitcast i8* %8627 to double*
  store double %8639, double* %8640, align 1, !tbaa !2451
  %8641 = getelementptr inbounds i8, i8* %8627, i64 8
  %8642 = bitcast i8* %8641 to i64*
  store i64 %8636, i64* %8642, align 1, !tbaa !2451
  %8643 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8644 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8645 = bitcast %union.vec128_t* %XMM1 to i8*
  %8646 = load i64, i64* %PC
  %8647 = add i64 %8646, 4
  store i64 %8647, i64* %PC
  %8648 = bitcast i8* %8644 to double*
  %8649 = load double, double* %8648, align 1
  %8650 = getelementptr inbounds i8, i8* %8644, i64 8
  %8651 = bitcast i8* %8650 to i64*
  %8652 = load i64, i64* %8651, align 1
  %8653 = bitcast i8* %8645 to double*
  %8654 = load double, double* %8653, align 1
  %8655 = fadd double %8649, %8654
  %8656 = bitcast i8* %8643 to double*
  store double %8655, double* %8656, align 1, !tbaa !2451
  %8657 = getelementptr inbounds i8, i8* %8643, i64 8
  %8658 = bitcast i8* %8657 to i64*
  store i64 %8652, i64* %8658, align 1, !tbaa !2451
  %8659 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8660 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8661 = load i64, i64* %PC
  %8662 = add i64 %8661, 9
  store i64 %8662, i64* %PC
  %8663 = bitcast i8* %8660 to double*
  %8664 = load double, double* %8663, align 1
  %8665 = getelementptr inbounds i8, i8* %8660, i64 8
  %8666 = bitcast i8* %8665 to i64*
  %8667 = load i64, i64* %8666, align 1
  %8668 = load double, double* bitcast (%one_type* @one to double*)
  %8669 = fadd double %8664, %8668
  %8670 = bitcast i8* %8659 to double*
  store double %8669, double* %8670, align 1, !tbaa !2451
  %8671 = getelementptr inbounds i8, i8* %8659, i64 8
  %8672 = bitcast i8* %8671 to i64*
  store i64 %8667, i64* %8672, align 1, !tbaa !2451
  %8673 = load i64, i64* %RBP
  %8674 = sub i64 %8673, 16
  %8675 = bitcast %union.vec128_t* %XMM0 to i8*
  %8676 = load i64, i64* %PC
  %8677 = add i64 %8676, 5
  store i64 %8677, i64* %PC
  %8678 = bitcast i8* %8675 to double*
  %8679 = load double, double* %8678, align 1
  %8680 = inttoptr i64 %8674 to double*
  store double %8679, double* %8680
  %8681 = load i64, i64* %RBP
  %8682 = sub i64 %8681, 72
  %8683 = load i64, i64* %PC
  %8684 = add i64 %8683, 4
  store i64 %8684, i64* %PC
  %8685 = inttoptr i64 %8682 to i64*
  %8686 = load i64, i64* %8685
  store i64 %8686, i64* %RAX, align 8, !tbaa !2428
  %8687 = load i64, i64* %RAX
  %8688 = load i64, i64* %PC
  %8689 = add i64 %8688, 4
  store i64 %8689, i64* %PC
  %8690 = add i64 1, %8687
  store i64 %8690, i64* %RAX, align 8, !tbaa !2428
  %8691 = icmp ult i64 %8690, %8687
  %8692 = icmp ult i64 %8690, 1
  %8693 = or i1 %8691, %8692
  %8694 = zext i1 %8693 to i8
  %8695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8694, i8* %8695, align 1, !tbaa !2432
  %8696 = trunc i64 %8690 to i32
  %8697 = and i32 %8696, 255
  %8698 = call i32 @llvm.ctpop.i32(i32 %8697) #16
  %8699 = trunc i32 %8698 to i8
  %8700 = and i8 %8699, 1
  %8701 = xor i8 %8700, 1
  %8702 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8701, i8* %8702, align 1, !tbaa !2446
  %8703 = xor i64 1, %8687
  %8704 = xor i64 %8703, %8690
  %8705 = lshr i64 %8704, 4
  %8706 = trunc i64 %8705 to i8
  %8707 = and i8 %8706, 1
  %8708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8707, i8* %8708, align 1, !tbaa !2447
  %8709 = icmp eq i64 %8690, 0
  %8710 = zext i1 %8709 to i8
  %8711 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8710, i8* %8711, align 1, !tbaa !2448
  %8712 = lshr i64 %8690, 63
  %8713 = trunc i64 %8712 to i8
  %8714 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8713, i8* %8714, align 1, !tbaa !2449
  %8715 = lshr i64 %8687, 63
  %8716 = xor i64 %8712, %8715
  %8717 = add nuw nsw i64 %8716, %8712
  %8718 = icmp eq i64 %8717, 2
  %8719 = zext i1 %8718 to i8
  %8720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8719, i8* %8720, align 1, !tbaa !2450
  %8721 = load i64, i64* %RBP
  %8722 = sub i64 %8721, 72
  %8723 = load i64, i64* %RAX
  %8724 = load i64, i64* %PC
  %8725 = add i64 %8724, 4
  store i64 %8725, i64* %PC
  %8726 = inttoptr i64 %8722 to i64*
  store i64 %8723, i64* %8726
  %8727 = load i64, i64* %PC
  %8728 = sub i64 %8727, 194
  %8729 = load i64, i64* %PC
  %8730 = add i64 %8729, 5
  store i64 %8730, i64* %PC
  %8731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8728, i64* %8731, align 8, !tbaa !2428
  br label %block_401184

block_400716:                                     ; preds = %block_400701
  %8732 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8733 = load i64, i64* %RBP
  %8734 = sub i64 %8733, 32
  %8735 = load i64, i64* %PC
  %8736 = add i64 %8735, 5
  store i64 %8736, i64* %PC
  %8737 = inttoptr i64 %8734 to double*
  %8738 = load double, double* %8737
  %8739 = bitcast i8* %8732 to double*
  store double %8738, double* %8739, align 1, !tbaa !2451
  %8740 = getelementptr inbounds i8, i8* %8732, i64 8
  %8741 = bitcast i8* %8740 to double*
  store double 0.000000e+00, double* %8741, align 1, !tbaa !2451
  %8742 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8743 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8744 = load i64, i64* %RBP
  %8745 = sub i64 %8744, 40
  %8746 = load i64, i64* %PC
  %8747 = add i64 %8746, 5
  store i64 %8747, i64* %PC
  %8748 = bitcast i8* %8743 to double*
  %8749 = load double, double* %8748, align 1
  %8750 = getelementptr inbounds i8, i8* %8743, i64 8
  %8751 = bitcast i8* %8750 to i64*
  %8752 = load i64, i64* %8751, align 1
  %8753 = inttoptr i64 %8745 to double*
  %8754 = load double, double* %8753
  %8755 = fadd double %8749, %8754
  %8756 = bitcast i8* %8742 to double*
  store double %8755, double* %8756, align 1, !tbaa !2451
  %8757 = getelementptr inbounds i8, i8* %8742, i64 8
  %8758 = bitcast i8* %8757 to i64*
  store i64 %8752, i64* %8758, align 1, !tbaa !2451
  %8759 = load i64, i64* %RBP
  %8760 = sub i64 %8759, 32
  %8761 = bitcast %union.vec128_t* %XMM0 to i8*
  %8762 = load i64, i64* %PC
  %8763 = add i64 %8762, 5
  store i64 %8763, i64* %PC
  %8764 = bitcast i8* %8761 to double*
  %8765 = load double, double* %8764, align 1
  %8766 = inttoptr i64 %8760 to double*
  store double %8765, double* %8766
  %8767 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8768 = load i64, i64* %RBP
  %8769 = sub i64 %8768, 32
  %8770 = load i64, i64* %PC
  %8771 = add i64 %8770, 5
  store i64 %8771, i64* %PC
  %8772 = inttoptr i64 %8769 to double*
  %8773 = load double, double* %8772
  %8774 = bitcast i8* %8767 to double*
  store double %8773, double* %8774, align 1, !tbaa !2451
  %8775 = getelementptr inbounds i8, i8* %8767, i64 8
  %8776 = bitcast i8* %8775 to double*
  store double 0.000000e+00, double* %8776, align 1, !tbaa !2451
  %8777 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8778 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8779 = load i64, i64* %RBP
  %8780 = sub i64 %8779, 48
  %8781 = load i64, i64* %PC
  %8782 = add i64 %8781, 5
  store i64 %8782, i64* %PC
  %8783 = bitcast i8* %8778 to double*
  %8784 = load double, double* %8783, align 1
  %8785 = getelementptr inbounds i8, i8* %8778, i64 8
  %8786 = bitcast i8* %8785 to i64*
  %8787 = load i64, i64* %8786, align 1
  %8788 = inttoptr i64 %8780 to double*
  %8789 = load double, double* %8788
  %8790 = fmul double %8784, %8789
  %8791 = bitcast i8* %8777 to double*
  store double %8790, double* %8791, align 1, !tbaa !2451
  %8792 = getelementptr inbounds i8, i8* %8777, i64 8
  %8793 = bitcast i8* %8792 to i64*
  store i64 %8787, i64* %8793, align 1, !tbaa !2451
  %8794 = load i64, i64* %RBP
  %8795 = sub i64 %8794, 24
  %8796 = bitcast %union.vec128_t* %XMM0 to i8*
  %8797 = load i64, i64* %PC
  %8798 = add i64 %8797, 5
  store i64 %8798, i64* %PC
  %8799 = bitcast i8* %8796 to double*
  %8800 = load double, double* %8799, align 1
  %8801 = inttoptr i64 %8795 to double*
  store double %8800, double* %8801
  %8802 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8803 = load i64, i64* %RBP
  %8804 = sub i64 %8803, 16
  %8805 = load i64, i64* %PC
  %8806 = add i64 %8805, 5
  store i64 %8806, i64* %PC
  %8807 = inttoptr i64 %8804 to double*
  %8808 = load double, double* %8807
  %8809 = bitcast i8* %8802 to double*
  store double %8808, double* %8809, align 1, !tbaa !2451
  %8810 = getelementptr inbounds i8, i8* %8802, i64 8
  %8811 = bitcast i8* %8810 to double*
  store double 0.000000e+00, double* %8811, align 1, !tbaa !2451
  %8812 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8813 = load i64, i64* %PC
  %8814 = add i64 %8813, 9
  store i64 %8814, i64* %PC
  %8815 = load double, double* bitcast (%D1_0_type* @D1_0 to double*)
  %8816 = bitcast i8* %8812 to double*
  store double %8815, double* %8816, align 1, !tbaa !2451
  %8817 = getelementptr inbounds i8, i8* %8812, i64 8
  %8818 = bitcast i8* %8817 to double*
  store double 0.000000e+00, double* %8818, align 1, !tbaa !2451
  %8819 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8820 = load i64, i64* %RBP
  %8821 = sub i64 %8820, 24
  %8822 = load i64, i64* %PC
  %8823 = add i64 %8822, 5
  store i64 %8823, i64* %PC
  %8824 = inttoptr i64 %8821 to double*
  %8825 = load double, double* %8824
  %8826 = bitcast i8* %8819 to double*
  store double %8825, double* %8826, align 1, !tbaa !2451
  %8827 = getelementptr inbounds i8, i8* %8819, i64 8
  %8828 = bitcast i8* %8827 to double*
  store double 0.000000e+00, double* %8828, align 1, !tbaa !2451
  %8829 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8830 = load i64, i64* %PC
  %8831 = add i64 %8830, 9
  store i64 %8831, i64* %PC
  %8832 = load double, double* bitcast (%D2_0_type* @D2_0 to double*)
  %8833 = bitcast i8* %8829 to double*
  store double %8832, double* %8833, align 1, !tbaa !2451
  %8834 = getelementptr inbounds i8, i8* %8829, i64 8
  %8835 = bitcast i8* %8834 to double*
  store double 0.000000e+00, double* %8835, align 1, !tbaa !2451
  %8836 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8837 = load i64, i64* %RBP
  %8838 = sub i64 %8837, 24
  %8839 = load i64, i64* %PC
  %8840 = add i64 %8839, 5
  store i64 %8840, i64* %PC
  %8841 = inttoptr i64 %8838 to double*
  %8842 = load double, double* %8841
  %8843 = bitcast i8* %8836 to double*
  store double %8842, double* %8843, align 1, !tbaa !2451
  %8844 = getelementptr inbounds i8, i8* %8836, i64 8
  %8845 = bitcast i8* %8844 to double*
  store double 0.000000e+00, double* %8845, align 1, !tbaa !2451
  %8846 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8847 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8848 = load i64, i64* %PC
  %8849 = add i64 %8848, 9
  store i64 %8849, i64* %PC
  %8850 = bitcast i8* %8847 to double*
  %8851 = load double, double* %8850, align 1
  %8852 = getelementptr inbounds i8, i8* %8847, i64 8
  %8853 = bitcast i8* %8852 to i64*
  %8854 = load i64, i64* %8853, align 1
  %8855 = load double, double* bitcast (%D3_type* @D3 to double*)
  %8856 = fmul double %8851, %8855
  %8857 = bitcast i8* %8846 to double*
  store double %8856, double* %8857, align 1, !tbaa !2451
  %8858 = getelementptr inbounds i8, i8* %8846, i64 8
  %8859 = bitcast i8* %8858 to i64*
  store i64 %8854, i64* %8859, align 1, !tbaa !2451
  %8860 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8861 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8862 = bitcast %union.vec128_t* %XMM4 to i8*
  %8863 = load i64, i64* %PC
  %8864 = add i64 %8863, 4
  store i64 %8864, i64* %PC
  %8865 = bitcast i8* %8861 to double*
  %8866 = load double, double* %8865, align 1
  %8867 = getelementptr inbounds i8, i8* %8861, i64 8
  %8868 = bitcast i8* %8867 to i64*
  %8869 = load i64, i64* %8868, align 1
  %8870 = bitcast i8* %8862 to double*
  %8871 = load double, double* %8870, align 1
  %8872 = fadd double %8866, %8871
  %8873 = bitcast i8* %8860 to double*
  store double %8872, double* %8873, align 1, !tbaa !2451
  %8874 = getelementptr inbounds i8, i8* %8860, i64 8
  %8875 = bitcast i8* %8874 to i64*
  store i64 %8869, i64* %8875, align 1, !tbaa !2451
  %8876 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8877 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8878 = bitcast %union.vec128_t* %XMM3 to i8*
  %8879 = load i64, i64* %PC
  %8880 = add i64 %8879, 4
  store i64 %8880, i64* %PC
  %8881 = bitcast i8* %8877 to double*
  %8882 = load double, double* %8881, align 1
  %8883 = getelementptr inbounds i8, i8* %8877, i64 8
  %8884 = bitcast i8* %8883 to i64*
  %8885 = load i64, i64* %8884, align 1
  %8886 = bitcast i8* %8878 to double*
  %8887 = load double, double* %8886, align 1
  %8888 = fmul double %8882, %8887
  %8889 = bitcast i8* %8876 to double*
  store double %8888, double* %8889, align 1, !tbaa !2451
  %8890 = getelementptr inbounds i8, i8* %8876, i64 8
  %8891 = bitcast i8* %8890 to i64*
  store i64 %8885, i64* %8891, align 1, !tbaa !2451
  %8892 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8893 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8894 = bitcast %union.vec128_t* %XMM2 to i8*
  %8895 = load i64, i64* %PC
  %8896 = add i64 %8895, 4
  store i64 %8896, i64* %PC
  %8897 = bitcast i8* %8893 to double*
  %8898 = load double, double* %8897, align 1
  %8899 = getelementptr inbounds i8, i8* %8893, i64 8
  %8900 = bitcast i8* %8899 to i64*
  %8901 = load i64, i64* %8900, align 1
  %8902 = bitcast i8* %8894 to double*
  %8903 = load double, double* %8902, align 1
  %8904 = fadd double %8898, %8903
  %8905 = bitcast i8* %8892 to double*
  store double %8904, double* %8905, align 1, !tbaa !2451
  %8906 = getelementptr inbounds i8, i8* %8892, i64 8
  %8907 = bitcast i8* %8906 to i64*
  store i64 %8901, i64* %8907, align 1, !tbaa !2451
  %8908 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8909 = load i64, i64* %RBP
  %8910 = sub i64 %8909, 40
  %8911 = load i64, i64* %PC
  %8912 = add i64 %8911, 5
  store i64 %8912, i64* %PC
  %8913 = inttoptr i64 %8910 to double*
  %8914 = load double, double* %8913
  %8915 = bitcast i8* %8908 to double*
  store double %8914, double* %8915, align 1, !tbaa !2451
  %8916 = getelementptr inbounds i8, i8* %8908, i64 8
  %8917 = bitcast i8* %8916 to double*
  store double 0.000000e+00, double* %8917, align 1, !tbaa !2451
  %8918 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8919 = load i64, i64* %RBP
  %8920 = sub i64 %8919, 24
  %8921 = load i64, i64* %PC
  %8922 = add i64 %8921, 5
  store i64 %8922, i64* %PC
  %8923 = inttoptr i64 %8920 to double*
  %8924 = load double, double* %8923
  %8925 = bitcast i8* %8918 to double*
  store double %8924, double* %8925, align 1, !tbaa !2451
  %8926 = getelementptr inbounds i8, i8* %8918, i64 8
  %8927 = bitcast i8* %8926 to double*
  store double 0.000000e+00, double* %8927, align 1, !tbaa !2451
  %8928 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8929 = load i64, i64* %PC
  %8930 = add i64 %8929, 9
  store i64 %8930, i64* %PC
  %8931 = load double, double* bitcast (%D1_0_type* @D1_0 to double*)
  %8932 = bitcast i8* %8928 to double*
  store double %8931, double* %8932, align 1, !tbaa !2451
  %8933 = getelementptr inbounds i8, i8* %8928, i64 8
  %8934 = bitcast i8* %8933 to double*
  store double 0.000000e+00, double* %8934, align 1, !tbaa !2451
  %8935 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %8936 = load i64, i64* %RBP
  %8937 = sub i64 %8936, 24
  %8938 = load i64, i64* %PC
  %8939 = add i64 %8938, 5
  store i64 %8939, i64* %PC
  %8940 = inttoptr i64 %8937 to double*
  %8941 = load double, double* %8940
  %8942 = bitcast i8* %8935 to double*
  store double %8941, double* %8942, align 1, !tbaa !2451
  %8943 = getelementptr inbounds i8, i8* %8935, i64 8
  %8944 = bitcast i8* %8943 to double*
  store double 0.000000e+00, double* %8944, align 1, !tbaa !2451
  %8945 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %8946 = load i64, i64* %PC
  %8947 = add i64 %8946, 9
  store i64 %8947, i64* %PC
  %8948 = load double, double* bitcast (%E2_0_type* @E2_0 to double*)
  %8949 = bitcast i8* %8945 to double*
  store double %8948, double* %8949, align 1, !tbaa !2451
  %8950 = getelementptr inbounds i8, i8* %8945, i64 8
  %8951 = bitcast i8* %8950 to double*
  store double 0.000000e+00, double* %8951, align 1, !tbaa !2451
  %8952 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %8953 = load i64, i64* %RBP
  %8954 = sub i64 %8953, 24
  %8955 = load i64, i64* %PC
  %8956 = add i64 %8955, 5
  store i64 %8956, i64* %PC
  %8957 = inttoptr i64 %8954 to double*
  %8958 = load double, double* %8957
  %8959 = bitcast i8* %8952 to double*
  store double %8958, double* %8959, align 1, !tbaa !2451
  %8960 = getelementptr inbounds i8, i8* %8952, i64 8
  %8961 = bitcast i8* %8960 to double*
  store double 0.000000e+00, double* %8961, align 1, !tbaa !2451
  %8962 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %8963 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %8964 = load i64, i64* %PC
  %8965 = add i64 %8964, 9
  store i64 %8965, i64* %PC
  %8966 = bitcast i8* %8963 to double*
  %8967 = load double, double* %8966, align 1
  %8968 = getelementptr inbounds i8, i8* %8963, i64 8
  %8969 = bitcast i8* %8968 to i64*
  %8970 = load i64, i64* %8969, align 1
  %8971 = load double, double* bitcast (%E3_type* @E3 to double*)
  %8972 = fmul double %8967, %8971
  %8973 = bitcast i8* %8962 to double*
  store double %8972, double* %8973, align 1, !tbaa !2451
  %8974 = getelementptr inbounds i8, i8* %8962, i64 8
  %8975 = bitcast i8* %8974 to i64*
  store i64 %8970, i64* %8975, align 1, !tbaa !2451
  %8976 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %8977 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %8978 = bitcast %union.vec128_t* %XMM7 to i8*
  %8979 = load i64, i64* %PC
  %8980 = add i64 %8979, 4
  store i64 %8980, i64* %PC
  %8981 = bitcast i8* %8977 to double*
  %8982 = load double, double* %8981, align 1
  %8983 = getelementptr inbounds i8, i8* %8977, i64 8
  %8984 = bitcast i8* %8983 to i64*
  %8985 = load i64, i64* %8984, align 1
  %8986 = bitcast i8* %8978 to double*
  %8987 = load double, double* %8986, align 1
  %8988 = fadd double %8982, %8987
  %8989 = bitcast i8* %8976 to double*
  store double %8988, double* %8989, align 1, !tbaa !2451
  %8990 = getelementptr inbounds i8, i8* %8976, i64 8
  %8991 = bitcast i8* %8990 to i64*
  store i64 %8985, i64* %8991, align 1, !tbaa !2451
  %8992 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %8993 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %8994 = bitcast %union.vec128_t* %XMM6 to i8*
  %8995 = load i64, i64* %PC
  %8996 = add i64 %8995, 4
  store i64 %8996, i64* %PC
  %8997 = bitcast i8* %8993 to double*
  %8998 = load double, double* %8997, align 1
  %8999 = getelementptr inbounds i8, i8* %8993, i64 8
  %9000 = bitcast i8* %8999 to i64*
  %9001 = load i64, i64* %9000, align 1
  %9002 = bitcast i8* %8994 to double*
  %9003 = load double, double* %9002, align 1
  %9004 = fmul double %8998, %9003
  %9005 = bitcast i8* %8992 to double*
  store double %9004, double* %9005, align 1, !tbaa !2451
  %9006 = getelementptr inbounds i8, i8* %8992, i64 8
  %9007 = bitcast i8* %9006 to i64*
  store i64 %9001, i64* %9007, align 1, !tbaa !2451
  %9008 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9009 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9010 = bitcast %union.vec128_t* %XMM5 to i8*
  %9011 = load i64, i64* %PC
  %9012 = add i64 %9011, 4
  store i64 %9012, i64* %PC
  %9013 = bitcast i8* %9009 to double*
  %9014 = load double, double* %9013, align 1
  %9015 = getelementptr inbounds i8, i8* %9009, i64 8
  %9016 = bitcast i8* %9015 to i64*
  %9017 = load i64, i64* %9016, align 1
  %9018 = bitcast i8* %9010 to double*
  %9019 = load double, double* %9018, align 1
  %9020 = fadd double %9014, %9019
  %9021 = bitcast i8* %9008 to double*
  store double %9020, double* %9021, align 1, !tbaa !2451
  %9022 = getelementptr inbounds i8, i8* %9008, i64 8
  %9023 = bitcast i8* %9022 to i64*
  store i64 %9017, i64* %9023, align 1, !tbaa !2451
  %9024 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9025 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9026 = bitcast %union.vec128_t* %XMM4 to i8*
  %9027 = load i64, i64* %PC
  %9028 = add i64 %9027, 4
  store i64 %9028, i64* %PC
  %9029 = bitcast i8* %9025 to double*
  %9030 = load double, double* %9029, align 1
  %9031 = getelementptr inbounds i8, i8* %9025, i64 8
  %9032 = bitcast i8* %9031 to i64*
  %9033 = load i64, i64* %9032, align 1
  %9034 = bitcast i8* %9026 to double*
  %9035 = load double, double* %9034, align 1
  %9036 = fmul double %9030, %9035
  %9037 = bitcast i8* %9024 to double*
  store double %9036, double* %9037, align 1, !tbaa !2451
  %9038 = getelementptr inbounds i8, i8* %9024, i64 8
  %9039 = bitcast i8* %9038 to i64*
  store i64 %9033, i64* %9039, align 1, !tbaa !2451
  %9040 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9041 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9042 = bitcast %union.vec128_t* %XMM3 to i8*
  %9043 = load i64, i64* %PC
  %9044 = add i64 %9043, 4
  store i64 %9044, i64* %PC
  %9045 = bitcast i8* %9041 to double*
  %9046 = load double, double* %9045, align 1
  %9047 = getelementptr inbounds i8, i8* %9041, i64 8
  %9048 = bitcast i8* %9047 to i64*
  %9049 = load i64, i64* %9048, align 1
  %9050 = bitcast i8* %9042 to double*
  %9051 = load double, double* %9050, align 1
  %9052 = fadd double %9046, %9051
  %9053 = bitcast i8* %9040 to double*
  store double %9052, double* %9053, align 1, !tbaa !2451
  %9054 = getelementptr inbounds i8, i8* %9040, i64 8
  %9055 = bitcast i8* %9054 to i64*
  store i64 %9049, i64* %9055, align 1, !tbaa !2451
  %9056 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9057 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9058 = bitcast %union.vec128_t* %XMM2 to i8*
  %9059 = load i64, i64* %PC
  %9060 = add i64 %9059, 4
  store i64 %9060, i64* %PC
  %9061 = bitcast i8* %9057 to double*
  %9062 = load double, double* %9061, align 1
  %9063 = getelementptr inbounds i8, i8* %9057, i64 8
  %9064 = bitcast i8* %9063 to i64*
  %9065 = load i64, i64* %9064, align 1
  %9066 = bitcast i8* %9058 to double*
  %9067 = load double, double* %9066, align 1
  %9068 = fdiv double %9062, %9067
  %9069 = bitcast i8* %9056 to double*
  store double %9068, double* %9069, align 1, !tbaa !2451
  %9070 = getelementptr inbounds i8, i8* %9056, i64 8
  %9071 = bitcast i8* %9070 to i64*
  store i64 %9065, i64* %9071, align 1, !tbaa !2451
  %9072 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9073 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9074 = bitcast %union.vec128_t* %XMM1 to i8*
  %9075 = load i64, i64* %PC
  %9076 = add i64 %9075, 4
  store i64 %9076, i64* %PC
  %9077 = bitcast i8* %9073 to double*
  %9078 = load double, double* %9077, align 1
  %9079 = getelementptr inbounds i8, i8* %9073, i64 8
  %9080 = bitcast i8* %9079 to i64*
  %9081 = load i64, i64* %9080, align 1
  %9082 = bitcast i8* %9074 to double*
  %9083 = load double, double* %9082, align 1
  %9084 = fadd double %9078, %9083
  %9085 = bitcast i8* %9072 to double*
  store double %9084, double* %9085, align 1, !tbaa !2451
  %9086 = getelementptr inbounds i8, i8* %9072, i64 8
  %9087 = bitcast i8* %9086 to i64*
  store i64 %9081, i64* %9087, align 1, !tbaa !2451
  %9088 = load i64, i64* %RBP
  %9089 = sub i64 %9088, 16
  %9090 = bitcast %union.vec128_t* %XMM0 to i8*
  %9091 = load i64, i64* %PC
  %9092 = add i64 %9091, 5
  store i64 %9092, i64* %PC
  %9093 = bitcast i8* %9090 to double*
  %9094 = load double, double* %9093, align 1
  %9095 = inttoptr i64 %9089 to double*
  store double %9094, double* %9095
  %9096 = load i64, i64* %RBP
  %9097 = sub i64 %9096, 72
  %9098 = load i64, i64* %PC
  %9099 = add i64 %9098, 4
  store i64 %9099, i64* %PC
  %9100 = inttoptr i64 %9097 to i64*
  %9101 = load i64, i64* %9100
  store i64 %9101, i64* %RAX, align 8, !tbaa !2428
  %9102 = load i64, i64* %RAX
  %9103 = load i64, i64* %PC
  %9104 = add i64 %9103, 4
  store i64 %9104, i64* %PC
  %9105 = add i64 1, %9102
  store i64 %9105, i64* %RAX, align 8, !tbaa !2428
  %9106 = icmp ult i64 %9105, %9102
  %9107 = icmp ult i64 %9105, 1
  %9108 = or i1 %9106, %9107
  %9109 = zext i1 %9108 to i8
  %9110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9109, i8* %9110, align 1, !tbaa !2432
  %9111 = trunc i64 %9105 to i32
  %9112 = and i32 %9111, 255
  %9113 = call i32 @llvm.ctpop.i32(i32 %9112) #16
  %9114 = trunc i32 %9113 to i8
  %9115 = and i8 %9114, 1
  %9116 = xor i8 %9115, 1
  %9117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9116, i8* %9117, align 1, !tbaa !2446
  %9118 = xor i64 1, %9102
  %9119 = xor i64 %9118, %9105
  %9120 = lshr i64 %9119, 4
  %9121 = trunc i64 %9120 to i8
  %9122 = and i8 %9121, 1
  %9123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9122, i8* %9123, align 1, !tbaa !2447
  %9124 = icmp eq i64 %9105, 0
  %9125 = zext i1 %9124 to i8
  %9126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9125, i8* %9126, align 1, !tbaa !2448
  %9127 = lshr i64 %9105, 63
  %9128 = trunc i64 %9127 to i8
  %9129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9128, i8* %9129, align 1, !tbaa !2449
  %9130 = lshr i64 %9102, 63
  %9131 = xor i64 %9127, %9130
  %9132 = add nuw nsw i64 %9131, %9127
  %9133 = icmp eq i64 %9132, 2
  %9134 = zext i1 %9133 to i8
  %9135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9134, i8* %9135, align 1, !tbaa !2450
  %9136 = load i64, i64* %RBP
  %9137 = sub i64 %9136, 72
  %9138 = load i64, i64* %RAX
  %9139 = load i64, i64* %PC
  %9140 = add i64 %9139, 4
  store i64 %9140, i64* %PC
  %9141 = inttoptr i64 %9137 to i64*
  store i64 %9138, i64* %9141
  %9142 = load i64, i64* %PC
  %9143 = sub i64 %9142, 197
  %9144 = load i64, i64* %PC
  %9145 = add i64 %9144, 5
  store i64 %9145, i64* %PC
  %9146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9143, i64* %9146, align 8, !tbaa !2428
  br label %block_400701

block_401a14:                                     ; preds = %block_4018d9
  %9147 = load i64, i64* %PC
  %9148 = add i64 %9147, 10
  store i64 %9148, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %9149 = load i64, i64* %PC
  %9150 = add i64 %9149, 3026
  %9151 = load i64, i64* %PC
  %9152 = add i64 %9151, 5
  %9153 = load i64, i64* %PC
  %9154 = add i64 %9153, 5
  store i64 %9154, i64* %PC
  %9155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9156 = load i64, i64* %9155, align 8, !tbaa !2428
  %9157 = add i64 %9156, -8
  %9158 = inttoptr i64 %9157 to i64*
  store i64 %9152, i64* %9158
  store i64 %9157, i64* %9155, align 8, !tbaa !2428
  %9159 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9150, i64* %9159, align 8, !tbaa !2428
  %9160 = load i64, i64* %PC
  %9161 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %9160, %struct.Memory* %MEMORY.1)
  %9162 = load i64, i64* %PC
  %9163 = add i64 %9162, 10
  store i64 %9163, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 570), i64* %RDI, align 8, !tbaa !2428
  %9164 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9165 = load i64, i64* %PC
  %9166 = add i64 %9165, 8
  store i64 %9166, i64* %PC
  %9167 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 72) to double*)
  %9168 = bitcast i8* %9164 to double*
  store double %9167, double* %9168, align 1, !tbaa !2451
  %9169 = getelementptr inbounds i8, i8* %9164, i64 8
  %9170 = bitcast i8* %9169 to double*
  store double 0.000000e+00, double* %9170, align 1, !tbaa !2451
  %9171 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9172 = load i64, i64* %PC
  %9173 = add i64 %9172, 8
  store i64 %9173, i64* %PC
  %9174 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 160) to double*)
  %9175 = bitcast i8* %9171 to double*
  store double %9174, double* %9175, align 1, !tbaa !2451
  %9176 = getelementptr inbounds i8, i8* %9171, i64 8
  %9177 = bitcast i8* %9176 to double*
  store double 0.000000e+00, double* %9177, align 1, !tbaa !2451
  %9178 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9179 = load i64, i64* %PC
  %9180 = add i64 %9179, 8
  store i64 %9180, i64* %PC
  %9181 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 144) to double*)
  %9182 = bitcast i8* %9178 to double*
  store double %9181, double* %9182, align 1, !tbaa !2451
  %9183 = getelementptr inbounds i8, i8* %9178, i64 8
  %9184 = bitcast i8* %9183 to double*
  store double 0.000000e+00, double* %9184, align 1, !tbaa !2451
  %9185 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9186 = load i64, i64* %PC
  %9187 = add i64 %9186, 9
  store i64 %9187, i64* %PC
  %9188 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %9189 = bitcast i8* %9185 to double*
  store double %9188, double* %9189, align 1, !tbaa !2451
  %9190 = getelementptr inbounds i8, i8* %9185, i64 8
  %9191 = bitcast i8* %9190 to double*
  store double 0.000000e+00, double* %9191, align 1, !tbaa !2451
  %9192 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9193 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9194 = load i64, i64* %PC
  %9195 = add i64 %9194, 9
  store i64 %9195, i64* %PC
  %9196 = bitcast i8* %9193 to double*
  %9197 = load double, double* %9196, align 1
  %9198 = getelementptr inbounds i8, i8* %9193, i64 8
  %9199 = bitcast i8* %9198 to i64*
  %9200 = load i64, i64* %9199, align 1
  %9201 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %9202 = fmul double %9197, %9201
  %9203 = bitcast i8* %9192 to double*
  store double %9202, double* %9203, align 1, !tbaa !2451
  %9204 = getelementptr inbounds i8, i8* %9192, i64 8
  %9205 = bitcast i8* %9204 to i64*
  store i64 %9200, i64* %9205, align 1, !tbaa !2451
  %9206 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9207 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9208 = load i64, i64* %PC
  %9209 = add i64 %9208, 9
  store i64 %9209, i64* %PC
  %9210 = bitcast i8* %9207 to double*
  %9211 = load double, double* %9210, align 1
  %9212 = getelementptr inbounds i8, i8* %9207, i64 8
  %9213 = bitcast i8* %9212 to i64*
  %9214 = load i64, i64* %9213, align 1
  %9215 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %9216 = fsub double %9211, %9215
  %9217 = bitcast i8* %9206 to double*
  store double %9216, double* %9217, align 1, !tbaa !2451
  %9218 = getelementptr inbounds i8, i8* %9206, i64 8
  %9219 = bitcast i8* %9218 to i64*
  store i64 %9214, i64* %9219, align 1, !tbaa !2451
  %9220 = bitcast %union.vec128_t* %XMM3 to i8*
  %9221 = load i64, i64* %PC
  %9222 = add i64 %9221, 9
  store i64 %9222, i64* %PC
  %9223 = bitcast i8* %9220 to double*
  %9224 = load double, double* %9223, align 1
  store double %9224, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %9225 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9226 = load i64, i64* %PC
  %9227 = add i64 %9226, 9
  store i64 %9227, i64* %PC
  %9228 = load double, double* bitcast (%piref_type* @piref to double*)
  %9229 = bitcast i8* %9225 to double*
  store double %9228, double* %9229, align 1, !tbaa !2451
  %9230 = getelementptr inbounds i8, i8* %9225, i64 8
  %9231 = bitcast i8* %9230 to double*
  store double 0.000000e+00, double* %9231, align 1, !tbaa !2451
  %9232 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9233 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9234 = load i64, i64* %PC
  %9235 = add i64 %9234, 9
  store i64 %9235, i64* %PC
  %9236 = bitcast i8* %9233 to double*
  %9237 = load double, double* %9236, align 1
  %9238 = getelementptr inbounds i8, i8* %9233, i64 8
  %9239 = bitcast i8* %9238 to i64*
  %9240 = load i64, i64* %9239, align 1
  %9241 = load double, double* bitcast (%four_type* @four to double*)
  %9242 = fdiv double %9237, %9241
  %9243 = bitcast i8* %9232 to double*
  store double %9242, double* %9243, align 1, !tbaa !2451
  %9244 = getelementptr inbounds i8, i8* %9232, i64 8
  %9245 = bitcast i8* %9244 to i64*
  store i64 %9240, i64* %9245, align 1, !tbaa !2451
  %9246 = load i64, i64* %RBP
  %9247 = sub i64 %9246, 24
  %9248 = bitcast %union.vec128_t* %XMM3 to i8*
  %9249 = load i64, i64* %PC
  %9250 = add i64 %9249, 5
  store i64 %9250, i64* %PC
  %9251 = bitcast i8* %9248 to double*
  %9252 = load double, double* %9251, align 1
  %9253 = inttoptr i64 %9247 to double*
  store double %9252, double* %9253
  %9254 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9255 = load i64, i64* %RBP
  %9256 = sub i64 %9255, 24
  %9257 = load i64, i64* %PC
  %9258 = add i64 %9257, 5
  store i64 %9258, i64* %PC
  %9259 = inttoptr i64 %9256 to double*
  %9260 = load double, double* %9259
  %9261 = bitcast i8* %9254 to double*
  store double %9260, double* %9261, align 1, !tbaa !2451
  %9262 = getelementptr inbounds i8, i8* %9254, i64 8
  %9263 = bitcast i8* %9262 to double*
  store double 0.000000e+00, double* %9263, align 1, !tbaa !2451
  %9264 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9265 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9266 = load i64, i64* %RBP
  %9267 = sub i64 %9266, 24
  %9268 = load i64, i64* %PC
  %9269 = add i64 %9268, 5
  store i64 %9269, i64* %PC
  %9270 = bitcast i8* %9265 to double*
  %9271 = load double, double* %9270, align 1
  %9272 = getelementptr inbounds i8, i8* %9265, i64 8
  %9273 = bitcast i8* %9272 to i64*
  %9274 = load i64, i64* %9273, align 1
  %9275 = inttoptr i64 %9267 to double*
  %9276 = load double, double* %9275
  %9277 = fmul double %9271, %9276
  %9278 = bitcast i8* %9264 to double*
  store double %9277, double* %9278, align 1, !tbaa !2451
  %9279 = getelementptr inbounds i8, i8* %9264, i64 8
  %9280 = bitcast i8* %9279 to i64*
  store i64 %9274, i64* %9280, align 1, !tbaa !2451
  %9281 = load i64, i64* %RBP
  %9282 = sub i64 %9281, 40
  %9283 = bitcast %union.vec128_t* %XMM3 to i8*
  %9284 = load i64, i64* %PC
  %9285 = add i64 %9284, 5
  store i64 %9285, i64* %PC
  %9286 = bitcast i8* %9283 to double*
  %9287 = load double, double* %9286, align 1
  %9288 = inttoptr i64 %9282 to double*
  store double %9287, double* %9288
  %9289 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9290 = load i64, i64* %RBP
  %9291 = sub i64 %9290, 24
  %9292 = load i64, i64* %PC
  %9293 = add i64 %9292, 5
  store i64 %9293, i64* %PC
  %9294 = inttoptr i64 %9291 to double*
  %9295 = load double, double* %9294
  %9296 = bitcast i8* %9289 to double*
  store double %9295, double* %9296, align 1, !tbaa !2451
  %9297 = getelementptr inbounds i8, i8* %9289, i64 8
  %9298 = bitcast i8* %9297 to double*
  store double 0.000000e+00, double* %9298, align 1, !tbaa !2451
  %9299 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9300 = load i64, i64* %PC
  %9301 = add i64 %9300, 9
  store i64 %9301, i64* %PC
  %9302 = load double, double* bitcast (%A6_type* @A6 to double*)
  %9303 = bitcast i8* %9299 to double*
  store double %9302, double* %9303, align 1, !tbaa !2451
  %9304 = getelementptr inbounds i8, i8* %9299, i64 8
  %9305 = bitcast i8* %9304 to double*
  store double 0.000000e+00, double* %9305, align 1, !tbaa !2451
  %9306 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9307 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9308 = load i64, i64* %RBP
  %9309 = sub i64 %9308, 40
  %9310 = load i64, i64* %PC
  %9311 = add i64 %9310, 5
  store i64 %9311, i64* %PC
  %9312 = bitcast i8* %9307 to double*
  %9313 = load double, double* %9312, align 1
  %9314 = getelementptr inbounds i8, i8* %9307, i64 8
  %9315 = bitcast i8* %9314 to i64*
  %9316 = load i64, i64* %9315, align 1
  %9317 = inttoptr i64 %9309 to double*
  %9318 = load double, double* %9317
  %9319 = fmul double %9313, %9318
  %9320 = bitcast i8* %9306 to double*
  store double %9319, double* %9320, align 1, !tbaa !2451
  %9321 = getelementptr inbounds i8, i8* %9306, i64 8
  %9322 = bitcast i8* %9321 to i64*
  store i64 %9316, i64* %9322, align 1, !tbaa !2451
  %9323 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9324 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9325 = load i64, i64* %PC
  %9326 = add i64 %9325, 9
  store i64 %9326, i64* %PC
  %9327 = bitcast i8* %9324 to double*
  %9328 = load double, double* %9327, align 1
  %9329 = getelementptr inbounds i8, i8* %9324, i64 8
  %9330 = bitcast i8* %9329 to i64*
  %9331 = load i64, i64* %9330, align 1
  %9332 = load double, double* bitcast (%A5_type* @A5 to double*)
  %9333 = fadd double %9328, %9332
  %9334 = bitcast i8* %9323 to double*
  store double %9333, double* %9334, align 1, !tbaa !2451
  %9335 = getelementptr inbounds i8, i8* %9323, i64 8
  %9336 = bitcast i8* %9335 to i64*
  store i64 %9331, i64* %9336, align 1, !tbaa !2451
  %9337 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9338 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9339 = load i64, i64* %RBP
  %9340 = sub i64 %9339, 40
  %9341 = load i64, i64* %PC
  %9342 = add i64 %9341, 5
  store i64 %9342, i64* %PC
  %9343 = bitcast i8* %9338 to double*
  %9344 = load double, double* %9343, align 1
  %9345 = getelementptr inbounds i8, i8* %9338, i64 8
  %9346 = bitcast i8* %9345 to i64*
  %9347 = load i64, i64* %9346, align 1
  %9348 = inttoptr i64 %9340 to double*
  %9349 = load double, double* %9348
  %9350 = fmul double %9344, %9349
  %9351 = bitcast i8* %9337 to double*
  store double %9350, double* %9351, align 1, !tbaa !2451
  %9352 = getelementptr inbounds i8, i8* %9337, i64 8
  %9353 = bitcast i8* %9352 to i64*
  store i64 %9347, i64* %9353, align 1, !tbaa !2451
  %9354 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9355 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9356 = load i64, i64* %PC
  %9357 = add i64 %9356, 9
  store i64 %9357, i64* %PC
  %9358 = bitcast i8* %9355 to double*
  %9359 = load double, double* %9358, align 1
  %9360 = getelementptr inbounds i8, i8* %9355, i64 8
  %9361 = bitcast i8* %9360 to i64*
  %9362 = load i64, i64* %9361, align 1
  %9363 = load double, double* bitcast (%A4_type* @A4 to double*)
  %9364 = fadd double %9359, %9363
  %9365 = bitcast i8* %9354 to double*
  store double %9364, double* %9365, align 1, !tbaa !2451
  %9366 = getelementptr inbounds i8, i8* %9354, i64 8
  %9367 = bitcast i8* %9366 to i64*
  store i64 %9362, i64* %9367, align 1, !tbaa !2451
  %9368 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9369 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9370 = load i64, i64* %RBP
  %9371 = sub i64 %9370, 40
  %9372 = load i64, i64* %PC
  %9373 = add i64 %9372, 5
  store i64 %9373, i64* %PC
  %9374 = bitcast i8* %9369 to double*
  %9375 = load double, double* %9374, align 1
  %9376 = getelementptr inbounds i8, i8* %9369, i64 8
  %9377 = bitcast i8* %9376 to i64*
  %9378 = load i64, i64* %9377, align 1
  %9379 = inttoptr i64 %9371 to double*
  %9380 = load double, double* %9379
  %9381 = fmul double %9375, %9380
  %9382 = bitcast i8* %9368 to double*
  store double %9381, double* %9382, align 1, !tbaa !2451
  %9383 = getelementptr inbounds i8, i8* %9368, i64 8
  %9384 = bitcast i8* %9383 to i64*
  store i64 %9378, i64* %9384, align 1, !tbaa !2451
  %9385 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9386 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9387 = load i64, i64* %PC
  %9388 = add i64 %9387, 9
  store i64 %9388, i64* %PC
  %9389 = bitcast i8* %9386 to double*
  %9390 = load double, double* %9389, align 1
  %9391 = getelementptr inbounds i8, i8* %9386, i64 8
  %9392 = bitcast i8* %9391 to i64*
  %9393 = load i64, i64* %9392, align 1
  %9394 = load double, double* bitcast (%A3_type* @A3 to double*)
  %9395 = fadd double %9390, %9394
  %9396 = bitcast i8* %9385 to double*
  store double %9395, double* %9396, align 1, !tbaa !2451
  %9397 = getelementptr inbounds i8, i8* %9385, i64 8
  %9398 = bitcast i8* %9397 to i64*
  store i64 %9393, i64* %9398, align 1, !tbaa !2451
  %9399 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9400 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9401 = load i64, i64* %RBP
  %9402 = sub i64 %9401, 40
  %9403 = load i64, i64* %PC
  %9404 = add i64 %9403, 5
  store i64 %9404, i64* %PC
  %9405 = bitcast i8* %9400 to double*
  %9406 = load double, double* %9405, align 1
  %9407 = getelementptr inbounds i8, i8* %9400, i64 8
  %9408 = bitcast i8* %9407 to i64*
  %9409 = load i64, i64* %9408, align 1
  %9410 = inttoptr i64 %9402 to double*
  %9411 = load double, double* %9410
  %9412 = fmul double %9406, %9411
  %9413 = bitcast i8* %9399 to double*
  store double %9412, double* %9413, align 1, !tbaa !2451
  %9414 = getelementptr inbounds i8, i8* %9399, i64 8
  %9415 = bitcast i8* %9414 to i64*
  store i64 %9409, i64* %9415, align 1, !tbaa !2451
  %9416 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9417 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9418 = load i64, i64* %PC
  %9419 = add i64 %9418, 9
  store i64 %9419, i64* %PC
  %9420 = bitcast i8* %9417 to double*
  %9421 = load double, double* %9420, align 1
  %9422 = getelementptr inbounds i8, i8* %9417, i64 8
  %9423 = bitcast i8* %9422 to i64*
  %9424 = load i64, i64* %9423, align 1
  %9425 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %9426 = fadd double %9421, %9425
  %9427 = bitcast i8* %9416 to double*
  store double %9426, double* %9427, align 1, !tbaa !2451
  %9428 = getelementptr inbounds i8, i8* %9416, i64 8
  %9429 = bitcast i8* %9428 to i64*
  store i64 %9424, i64* %9429, align 1, !tbaa !2451
  %9430 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9431 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9432 = load i64, i64* %RBP
  %9433 = sub i64 %9432, 40
  %9434 = load i64, i64* %PC
  %9435 = add i64 %9434, 5
  store i64 %9435, i64* %PC
  %9436 = bitcast i8* %9431 to double*
  %9437 = load double, double* %9436, align 1
  %9438 = getelementptr inbounds i8, i8* %9431, i64 8
  %9439 = bitcast i8* %9438 to i64*
  %9440 = load i64, i64* %9439, align 1
  %9441 = inttoptr i64 %9433 to double*
  %9442 = load double, double* %9441
  %9443 = fmul double %9437, %9442
  %9444 = bitcast i8* %9430 to double*
  store double %9443, double* %9444, align 1, !tbaa !2451
  %9445 = getelementptr inbounds i8, i8* %9430, i64 8
  %9446 = bitcast i8* %9445 to i64*
  store i64 %9440, i64* %9446, align 1, !tbaa !2451
  %9447 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9448 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9449 = load i64, i64* %PC
  %9450 = add i64 %9449, 9
  store i64 %9450, i64* %PC
  %9451 = bitcast i8* %9448 to double*
  %9452 = load double, double* %9451, align 1
  %9453 = getelementptr inbounds i8, i8* %9448, i64 8
  %9454 = bitcast i8* %9453 to i64*
  %9455 = load i64, i64* %9454, align 1
  %9456 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %9457 = fadd double %9452, %9456
  %9458 = bitcast i8* %9447 to double*
  store double %9457, double* %9458, align 1, !tbaa !2451
  %9459 = getelementptr inbounds i8, i8* %9447, i64 8
  %9460 = bitcast i8* %9459 to i64*
  store i64 %9455, i64* %9460, align 1, !tbaa !2451
  %9461 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9462 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9463 = load i64, i64* %RBP
  %9464 = sub i64 %9463, 40
  %9465 = load i64, i64* %PC
  %9466 = add i64 %9465, 5
  store i64 %9466, i64* %PC
  %9467 = bitcast i8* %9462 to double*
  %9468 = load double, double* %9467, align 1
  %9469 = getelementptr inbounds i8, i8* %9462, i64 8
  %9470 = bitcast i8* %9469 to i64*
  %9471 = load i64, i64* %9470, align 1
  %9472 = inttoptr i64 %9464 to double*
  %9473 = load double, double* %9472
  %9474 = fmul double %9468, %9473
  %9475 = bitcast i8* %9461 to double*
  store double %9474, double* %9475, align 1, !tbaa !2451
  %9476 = getelementptr inbounds i8, i8* %9461, i64 8
  %9477 = bitcast i8* %9476 to i64*
  store i64 %9471, i64* %9477, align 1, !tbaa !2451
  %9478 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9479 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9480 = load i64, i64* %PC
  %9481 = add i64 %9480, 9
  store i64 %9481, i64* %PC
  %9482 = bitcast i8* %9479 to double*
  %9483 = load double, double* %9482, align 1
  %9484 = getelementptr inbounds i8, i8* %9479, i64 8
  %9485 = bitcast i8* %9484 to i64*
  %9486 = load i64, i64* %9485, align 1
  %9487 = load double, double* bitcast (%one_type* @one to double*)
  %9488 = fadd double %9483, %9487
  %9489 = bitcast i8* %9478 to double*
  store double %9488, double* %9489, align 1, !tbaa !2451
  %9490 = getelementptr inbounds i8, i8* %9478, i64 8
  %9491 = bitcast i8* %9490 to i64*
  store i64 %9486, i64* %9491, align 1, !tbaa !2451
  %9492 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9493 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9494 = bitcast %union.vec128_t* %XMM4 to i8*
  %9495 = load i64, i64* %PC
  %9496 = add i64 %9495, 4
  store i64 %9496, i64* %PC
  %9497 = bitcast i8* %9493 to double*
  %9498 = load double, double* %9497, align 1
  %9499 = getelementptr inbounds i8, i8* %9493, i64 8
  %9500 = bitcast i8* %9499 to i64*
  %9501 = load i64, i64* %9500, align 1
  %9502 = bitcast i8* %9494 to double*
  %9503 = load double, double* %9502, align 1
  %9504 = fmul double %9498, %9503
  %9505 = bitcast i8* %9492 to double*
  store double %9504, double* %9505, align 1, !tbaa !2451
  %9506 = getelementptr inbounds i8, i8* %9492, i64 8
  %9507 = bitcast i8* %9506 to i64*
  store i64 %9501, i64* %9507, align 1, !tbaa !2451
  %9508 = bitcast %union.vec128_t* %XMM3 to i8*
  %9509 = load i64, i64* %PC
  %9510 = add i64 %9509, 9
  store i64 %9510, i64* %PC
  %9511 = bitcast i8* %9508 to double*
  %9512 = load double, double* %9511, align 1
  store double %9512, double* bitcast (%sa_type* @sa to double*)
  %9513 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9514 = load i64, i64* %RBP
  %9515 = sub i64 %9514, 40
  %9516 = load i64, i64* %PC
  %9517 = add i64 %9516, 5
  store i64 %9517, i64* %PC
  %9518 = inttoptr i64 %9515 to double*
  %9519 = load double, double* %9518
  %9520 = bitcast i8* %9513 to double*
  store double %9519, double* %9520, align 1, !tbaa !2451
  %9521 = getelementptr inbounds i8, i8* %9513, i64 8
  %9522 = bitcast i8* %9521 to double*
  store double 0.000000e+00, double* %9522, align 1, !tbaa !2451
  %9523 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9524 = load i64, i64* %RBP
  %9525 = sub i64 %9524, 40
  %9526 = load i64, i64* %PC
  %9527 = add i64 %9526, 5
  store i64 %9527, i64* %PC
  %9528 = inttoptr i64 %9525 to double*
  %9529 = load double, double* %9528
  %9530 = bitcast i8* %9523 to double*
  store double %9529, double* %9530, align 1, !tbaa !2451
  %9531 = getelementptr inbounds i8, i8* %9523, i64 8
  %9532 = bitcast i8* %9531 to double*
  store double 0.000000e+00, double* %9532, align 1, !tbaa !2451
  %9533 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %9534 = load i64, i64* %RBP
  %9535 = sub i64 %9534, 40
  %9536 = load i64, i64* %PC
  %9537 = add i64 %9536, 5
  store i64 %9537, i64* %PC
  %9538 = inttoptr i64 %9535 to double*
  %9539 = load double, double* %9538
  %9540 = bitcast i8* %9533 to double*
  store double %9539, double* %9540, align 1, !tbaa !2451
  %9541 = getelementptr inbounds i8, i8* %9533, i64 8
  %9542 = bitcast i8* %9541 to double*
  store double 0.000000e+00, double* %9542, align 1, !tbaa !2451
  %9543 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %9544 = load i64, i64* %RBP
  %9545 = sub i64 %9544, 40
  %9546 = load i64, i64* %PC
  %9547 = add i64 %9546, 5
  store i64 %9547, i64* %PC
  %9548 = inttoptr i64 %9545 to double*
  %9549 = load double, double* %9548
  %9550 = bitcast i8* %9543 to double*
  store double %9549, double* %9550, align 1, !tbaa !2451
  %9551 = getelementptr inbounds i8, i8* %9543, i64 8
  %9552 = bitcast i8* %9551 to double*
  store double 0.000000e+00, double* %9552, align 1, !tbaa !2451
  %9553 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %9554 = load i64, i64* %RBP
  %9555 = sub i64 %9554, 40
  %9556 = load i64, i64* %PC
  %9557 = add i64 %9556, 5
  store i64 %9557, i64* %PC
  %9558 = inttoptr i64 %9555 to double*
  %9559 = load double, double* %9558
  %9560 = bitcast i8* %9553 to double*
  store double %9559, double* %9560, align 1, !tbaa !2451
  %9561 = getelementptr inbounds i8, i8* %9553, i64 8
  %9562 = bitcast i8* %9561 to double*
  store double 0.000000e+00, double* %9562, align 1, !tbaa !2451
  %9563 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %9564 = load i64, i64* %PC
  %9565 = add i64 %9564, 10
  store i64 %9565, i64* %PC
  %9566 = load double, double* bitcast (%B6_type* @B6 to double*)
  %9567 = bitcast i8* %9563 to double*
  store double %9566, double* %9567, align 1, !tbaa !2451
  %9568 = getelementptr inbounds i8, i8* %9563, i64 8
  %9569 = bitcast i8* %9568 to double*
  store double 0.000000e+00, double* %9569, align 1, !tbaa !2451
  %9570 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %9571 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %9572 = load i64, i64* %RBP
  %9573 = sub i64 %9572, 40
  %9574 = load i64, i64* %PC
  %9575 = add i64 %9574, 6
  store i64 %9575, i64* %PC
  %9576 = bitcast i8* %9571 to double*
  %9577 = load double, double* %9576, align 1
  %9578 = getelementptr inbounds i8, i8* %9571, i64 8
  %9579 = bitcast i8* %9578 to i64*
  %9580 = load i64, i64* %9579, align 1
  %9581 = inttoptr i64 %9573 to double*
  %9582 = load double, double* %9581
  %9583 = fmul double %9577, %9582
  %9584 = bitcast i8* %9570 to double*
  store double %9583, double* %9584, align 1, !tbaa !2451
  %9585 = getelementptr inbounds i8, i8* %9570, i64 8
  %9586 = bitcast i8* %9585 to i64*
  store i64 %9580, i64* %9586, align 1, !tbaa !2451
  %9587 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %9588 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %9589 = load i64, i64* %PC
  %9590 = add i64 %9589, 10
  store i64 %9590, i64* %PC
  %9591 = bitcast i8* %9588 to double*
  %9592 = load double, double* %9591, align 1
  %9593 = getelementptr inbounds i8, i8* %9588, i64 8
  %9594 = bitcast i8* %9593 to i64*
  %9595 = load i64, i64* %9594, align 1
  %9596 = load double, double* bitcast (%B5_type* @B5 to double*)
  %9597 = fadd double %9592, %9596
  %9598 = bitcast i8* %9587 to double*
  store double %9597, double* %9598, align 1, !tbaa !2451
  %9599 = getelementptr inbounds i8, i8* %9587, i64 8
  %9600 = bitcast i8* %9599 to i64*
  store i64 %9595, i64* %9600, align 1, !tbaa !2451
  %9601 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %9602 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %9603 = bitcast %union.vec128_t* %XMM8 to i8*
  %9604 = load i64, i64* %PC
  %9605 = add i64 %9604, 5
  store i64 %9605, i64* %PC
  %9606 = bitcast i8* %9602 to double*
  %9607 = load double, double* %9606, align 1
  %9608 = getelementptr inbounds i8, i8* %9602, i64 8
  %9609 = bitcast i8* %9608 to i64*
  %9610 = load i64, i64* %9609, align 1
  %9611 = bitcast i8* %9603 to double*
  %9612 = load double, double* %9611, align 1
  %9613 = fmul double %9607, %9612
  %9614 = bitcast i8* %9601 to double*
  store double %9613, double* %9614, align 1, !tbaa !2451
  %9615 = getelementptr inbounds i8, i8* %9601, i64 8
  %9616 = bitcast i8* %9615 to i64*
  store i64 %9610, i64* %9616, align 1, !tbaa !2451
  %9617 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %9618 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %9619 = load i64, i64* %PC
  %9620 = add i64 %9619, 9
  store i64 %9620, i64* %PC
  %9621 = bitcast i8* %9618 to double*
  %9622 = load double, double* %9621, align 1
  %9623 = getelementptr inbounds i8, i8* %9618, i64 8
  %9624 = bitcast i8* %9623 to i64*
  %9625 = load i64, i64* %9624, align 1
  %9626 = load double, double* bitcast (%B4_type* @B4 to double*)
  %9627 = fadd double %9622, %9626
  %9628 = bitcast i8* %9617 to double*
  store double %9627, double* %9628, align 1, !tbaa !2451
  %9629 = getelementptr inbounds i8, i8* %9617, i64 8
  %9630 = bitcast i8* %9629 to i64*
  store i64 %9625, i64* %9630, align 1, !tbaa !2451
  %9631 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %9632 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %9633 = bitcast %union.vec128_t* %XMM7 to i8*
  %9634 = load i64, i64* %PC
  %9635 = add i64 %9634, 4
  store i64 %9635, i64* %PC
  %9636 = bitcast i8* %9632 to double*
  %9637 = load double, double* %9636, align 1
  %9638 = getelementptr inbounds i8, i8* %9632, i64 8
  %9639 = bitcast i8* %9638 to i64*
  %9640 = load i64, i64* %9639, align 1
  %9641 = bitcast i8* %9633 to double*
  %9642 = load double, double* %9641, align 1
  %9643 = fmul double %9637, %9642
  %9644 = bitcast i8* %9631 to double*
  store double %9643, double* %9644, align 1, !tbaa !2451
  %9645 = getelementptr inbounds i8, i8* %9631, i64 8
  %9646 = bitcast i8* %9645 to i64*
  store i64 %9640, i64* %9646, align 1, !tbaa !2451
  %9647 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %9648 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %9649 = load i64, i64* %PC
  %9650 = add i64 %9649, 9
  store i64 %9650, i64* %PC
  %9651 = bitcast i8* %9648 to double*
  %9652 = load double, double* %9651, align 1
  %9653 = getelementptr inbounds i8, i8* %9648, i64 8
  %9654 = bitcast i8* %9653 to i64*
  %9655 = load i64, i64* %9654, align 1
  %9656 = load double, double* bitcast (%B3_type* @B3 to double*)
  %9657 = fadd double %9652, %9656
  %9658 = bitcast i8* %9647 to double*
  store double %9657, double* %9658, align 1, !tbaa !2451
  %9659 = getelementptr inbounds i8, i8* %9647, i64 8
  %9660 = bitcast i8* %9659 to i64*
  store i64 %9655, i64* %9660, align 1, !tbaa !2451
  %9661 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %9662 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %9663 = bitcast %union.vec128_t* %XMM6 to i8*
  %9664 = load i64, i64* %PC
  %9665 = add i64 %9664, 4
  store i64 %9665, i64* %PC
  %9666 = bitcast i8* %9662 to double*
  %9667 = load double, double* %9666, align 1
  %9668 = getelementptr inbounds i8, i8* %9662, i64 8
  %9669 = bitcast i8* %9668 to i64*
  %9670 = load i64, i64* %9669, align 1
  %9671 = bitcast i8* %9663 to double*
  %9672 = load double, double* %9671, align 1
  %9673 = fmul double %9667, %9672
  %9674 = bitcast i8* %9661 to double*
  store double %9673, double* %9674, align 1, !tbaa !2451
  %9675 = getelementptr inbounds i8, i8* %9661, i64 8
  %9676 = bitcast i8* %9675 to i64*
  store i64 %9670, i64* %9676, align 1, !tbaa !2451
  %9677 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %9678 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %9679 = load i64, i64* %PC
  %9680 = add i64 %9679, 9
  store i64 %9680, i64* %PC
  %9681 = bitcast i8* %9678 to double*
  %9682 = load double, double* %9681, align 1
  %9683 = getelementptr inbounds i8, i8* %9678, i64 8
  %9684 = bitcast i8* %9683 to i64*
  %9685 = load i64, i64* %9684, align 1
  %9686 = load double, double* bitcast (%B2_type* @B2 to double*)
  %9687 = fadd double %9682, %9686
  %9688 = bitcast i8* %9677 to double*
  store double %9687, double* %9688, align 1, !tbaa !2451
  %9689 = getelementptr inbounds i8, i8* %9677, i64 8
  %9690 = bitcast i8* %9689 to i64*
  store i64 %9685, i64* %9690, align 1, !tbaa !2451
  %9691 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9692 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9693 = bitcast %union.vec128_t* %XMM5 to i8*
  %9694 = load i64, i64* %PC
  %9695 = add i64 %9694, 4
  store i64 %9695, i64* %PC
  %9696 = bitcast i8* %9692 to double*
  %9697 = load double, double* %9696, align 1
  %9698 = getelementptr inbounds i8, i8* %9692, i64 8
  %9699 = bitcast i8* %9698 to i64*
  %9700 = load i64, i64* %9699, align 1
  %9701 = bitcast i8* %9693 to double*
  %9702 = load double, double* %9701, align 1
  %9703 = fmul double %9697, %9702
  %9704 = bitcast i8* %9691 to double*
  store double %9703, double* %9704, align 1, !tbaa !2451
  %9705 = getelementptr inbounds i8, i8* %9691, i64 8
  %9706 = bitcast i8* %9705 to i64*
  store i64 %9700, i64* %9706, align 1, !tbaa !2451
  %9707 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9708 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9709 = load i64, i64* %PC
  %9710 = add i64 %9709, 9
  store i64 %9710, i64* %PC
  %9711 = bitcast i8* %9708 to double*
  %9712 = load double, double* %9711, align 1
  %9713 = getelementptr inbounds i8, i8* %9708, i64 8
  %9714 = bitcast i8* %9713 to i64*
  %9715 = load i64, i64* %9714, align 1
  %9716 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %9717 = fadd double %9712, %9716
  %9718 = bitcast i8* %9707 to double*
  store double %9717, double* %9718, align 1, !tbaa !2451
  %9719 = getelementptr inbounds i8, i8* %9707, i64 8
  %9720 = bitcast i8* %9719 to i64*
  store i64 %9715, i64* %9720, align 1, !tbaa !2451
  %9721 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9722 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9723 = bitcast %union.vec128_t* %XMM4 to i8*
  %9724 = load i64, i64* %PC
  %9725 = add i64 %9724, 4
  store i64 %9725, i64* %PC
  %9726 = bitcast i8* %9722 to double*
  %9727 = load double, double* %9726, align 1
  %9728 = getelementptr inbounds i8, i8* %9722, i64 8
  %9729 = bitcast i8* %9728 to i64*
  %9730 = load i64, i64* %9729, align 1
  %9731 = bitcast i8* %9723 to double*
  %9732 = load double, double* %9731, align 1
  %9733 = fmul double %9727, %9732
  %9734 = bitcast i8* %9721 to double*
  store double %9733, double* %9734, align 1, !tbaa !2451
  %9735 = getelementptr inbounds i8, i8* %9721, i64 8
  %9736 = bitcast i8* %9735 to i64*
  store i64 %9730, i64* %9736, align 1, !tbaa !2451
  %9737 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9738 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9739 = load i64, i64* %PC
  %9740 = add i64 %9739, 9
  store i64 %9740, i64* %PC
  %9741 = bitcast i8* %9738 to double*
  %9742 = load double, double* %9741, align 1
  %9743 = getelementptr inbounds i8, i8* %9738, i64 8
  %9744 = bitcast i8* %9743 to i64*
  %9745 = load i64, i64* %9744, align 1
  %9746 = load double, double* bitcast (%one_type* @one to double*)
  %9747 = fadd double %9742, %9746
  %9748 = bitcast i8* %9737 to double*
  store double %9747, double* %9748, align 1, !tbaa !2451
  %9749 = getelementptr inbounds i8, i8* %9737, i64 8
  %9750 = bitcast i8* %9749 to i64*
  store i64 %9745, i64* %9750, align 1, !tbaa !2451
  %9751 = bitcast %union.vec128_t* %XMM3 to i8*
  %9752 = load i64, i64* %PC
  %9753 = add i64 %9752, 9
  store i64 %9753, i64* %PC
  %9754 = bitcast i8* %9751 to double*
  %9755 = load double, double* %9754, align 1
  store double %9755, double* bitcast (%sb_type* @sb to double*)
  %9756 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9757 = load i64, i64* %PC
  %9758 = add i64 %9757, 9
  store i64 %9758, i64* %PC
  %9759 = load double, double* bitcast (%sa_type* @sa to double*)
  %9760 = bitcast i8* %9756 to double*
  store double %9759, double* %9760, align 1, !tbaa !2451
  %9761 = getelementptr inbounds i8, i8* %9756, i64 8
  %9762 = bitcast i8* %9761 to double*
  store double 0.000000e+00, double* %9762, align 1, !tbaa !2451
  %9763 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9764 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9765 = load i64, i64* %PC
  %9766 = add i64 %9765, 9
  store i64 %9766, i64* %PC
  %9767 = bitcast i8* %9764 to double*
  %9768 = load double, double* %9767, align 1
  %9769 = getelementptr inbounds i8, i8* %9764, i64 8
  %9770 = bitcast i8* %9769 to i64*
  %9771 = load i64, i64* %9770, align 1
  %9772 = load double, double* bitcast (%sb_type* @sb to double*)
  %9773 = fmul double %9768, %9772
  %9774 = bitcast i8* %9763 to double*
  store double %9773, double* %9774, align 1, !tbaa !2451
  %9775 = getelementptr inbounds i8, i8* %9763, i64 8
  %9776 = bitcast i8* %9775 to i64*
  store i64 %9771, i64* %9776, align 1, !tbaa !2451
  %9777 = bitcast %union.vec128_t* %XMM3 to i8*
  %9778 = load i64, i64* %PC
  %9779 = add i64 %9778, 9
  store i64 %9779, i64* %PC
  %9780 = bitcast i8* %9777 to double*
  %9781 = load double, double* %9780, align 1
  store double %9781, double* bitcast (%sa_type* @sa to double*)
  %9782 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9783 = load i64, i64* %PC
  %9784 = add i64 %9783, 9
  store i64 %9784, i64* %PC
  %9785 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %9786 = bitcast i8* %9782 to double*
  store double %9785, double* %9786, align 1, !tbaa !2451
  %9787 = getelementptr inbounds i8, i8* %9782, i64 8
  %9788 = bitcast i8* %9787 to double*
  store double 0.000000e+00, double* %9788, align 1, !tbaa !2451
  %9789 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9790 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9791 = bitcast %union.vec128_t* %XMM2 to i8*
  %9792 = load i64, i64* %PC
  %9793 = add i64 %9792, 4
  store i64 %9793, i64* %PC
  %9794 = bitcast i8* %9790 to double*
  %9795 = load double, double* %9794, align 1
  %9796 = getelementptr inbounds i8, i8* %9790, i64 8
  %9797 = bitcast i8* %9796 to i64*
  %9798 = load i64, i64* %9797, align 1
  %9799 = bitcast i8* %9791 to double*
  %9800 = load double, double* %9799, align 1
  %9801 = fdiv double %9795, %9800
  %9802 = bitcast i8* %9789 to double*
  store double %9801, double* %9802, align 1, !tbaa !2451
  %9803 = getelementptr inbounds i8, i8* %9789, i64 8
  %9804 = bitcast i8* %9803 to i64*
  store i64 %9798, i64* %9804, align 1, !tbaa !2451
  %9805 = bitcast %union.vec128_t* %XMM3 to i8*
  %9806 = load i64, i64* %PC
  %9807 = add i64 %9806, 9
  store i64 %9807, i64* %PC
  %9808 = bitcast i8* %9805 to double*
  %9809 = load double, double* %9808, align 1
  store double %9809, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 152) to double*)
  %9810 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9811 = load i64, i64* %RBP
  %9812 = sub i64 %9811, 48
  %9813 = load i64, i64* %PC
  %9814 = add i64 %9813, 5
  store i64 %9814, i64* %PC
  %9815 = inttoptr i64 %9812 to double*
  %9816 = load double, double* %9815
  %9817 = bitcast i8* %9810 to double*
  store double %9816, double* %9817, align 1, !tbaa !2451
  %9818 = getelementptr inbounds i8, i8* %9810, i64 8
  %9819 = bitcast i8* %9818 to double*
  store double 0.000000e+00, double* %9819, align 1, !tbaa !2451
  %9820 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9821 = load i64, i64* %PC
  %9822 = add i64 %9821, 9
  store i64 %9822, i64* %PC
  %9823 = load double, double* bitcast (%sa_type* @sa to double*)
  %9824 = bitcast i8* %9820 to double*
  store double %9823, double* %9824, align 1, !tbaa !2451
  %9825 = getelementptr inbounds i8, i8* %9820, i64 8
  %9826 = bitcast i8* %9825 to double*
  store double 0.000000e+00, double* %9826, align 1, !tbaa !2451
  %9827 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9828 = load i64, i64* %PC
  %9829 = add i64 %9828, 9
  store i64 %9829, i64* %PC
  %9830 = load double, double* bitcast (%two_type* @two to double*)
  %9831 = bitcast i8* %9827 to double*
  store double %9830, double* %9831, align 1, !tbaa !2451
  %9832 = getelementptr inbounds i8, i8* %9827, i64 8
  %9833 = bitcast i8* %9832 to double*
  store double 0.000000e+00, double* %9833, align 1, !tbaa !2451
  %9834 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9835 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9836 = load i64, i64* %RBP
  %9837 = sub i64 %9836, 16
  %9838 = load i64, i64* %PC
  %9839 = add i64 %9838, 5
  store i64 %9839, i64* %PC
  %9840 = bitcast i8* %9835 to double*
  %9841 = load double, double* %9840, align 1
  %9842 = getelementptr inbounds i8, i8* %9835, i64 8
  %9843 = bitcast i8* %9842 to i64*
  %9844 = load i64, i64* %9843, align 1
  %9845 = inttoptr i64 %9837 to double*
  %9846 = load double, double* %9845
  %9847 = fmul double %9841, %9846
  %9848 = bitcast i8* %9834 to double*
  store double %9847, double* %9848, align 1, !tbaa !2451
  %9849 = getelementptr inbounds i8, i8* %9834, i64 8
  %9850 = bitcast i8* %9849 to i64*
  store i64 %9844, i64* %9850, align 1, !tbaa !2451
  %9851 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9852 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9853 = bitcast %union.vec128_t* %XMM4 to i8*
  %9854 = load i64, i64* %PC
  %9855 = add i64 %9854, 4
  store i64 %9855, i64* %PC
  %9856 = bitcast i8* %9852 to double*
  %9857 = load double, double* %9856, align 1
  %9858 = getelementptr inbounds i8, i8* %9852, i64 8
  %9859 = bitcast i8* %9858 to i64*
  %9860 = load i64, i64* %9859, align 1
  %9861 = bitcast i8* %9853 to double*
  %9862 = load double, double* %9861, align 1
  %9863 = fadd double %9857, %9862
  %9864 = bitcast i8* %9851 to double*
  store double %9863, double* %9864, align 1, !tbaa !2451
  %9865 = getelementptr inbounds i8, i8* %9851, i64 8
  %9866 = bitcast i8* %9865 to i64*
  store i64 %9860, i64* %9866, align 1, !tbaa !2451
  %9867 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9868 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9869 = bitcast %union.vec128_t* %XMM3 to i8*
  %9870 = load i64, i64* %PC
  %9871 = add i64 %9870, 4
  store i64 %9871, i64* %PC
  %9872 = bitcast i8* %9868 to double*
  %9873 = load double, double* %9872, align 1
  %9874 = getelementptr inbounds i8, i8* %9868, i64 8
  %9875 = bitcast i8* %9874 to i64*
  %9876 = load i64, i64* %9875, align 1
  %9877 = bitcast i8* %9869 to double*
  %9878 = load double, double* %9877, align 1
  %9879 = fmul double %9873, %9878
  %9880 = bitcast i8* %9867 to double*
  store double %9879, double* %9880, align 1, !tbaa !2451
  %9881 = getelementptr inbounds i8, i8* %9867, i64 8
  %9882 = bitcast i8* %9881 to i64*
  store i64 %9876, i64* %9882, align 1, !tbaa !2451
  %9883 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9884 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9885 = load i64, i64* %PC
  %9886 = add i64 %9885, 9
  store i64 %9886, i64* %PC
  %9887 = bitcast i8* %9884 to double*
  %9888 = load double, double* %9887, align 1
  %9889 = getelementptr inbounds i8, i8* %9884, i64 8
  %9890 = bitcast i8* %9889 to i64*
  %9891 = load i64, i64* %9890, align 1
  %9892 = load double, double* bitcast (%two_type* @two to double*)
  %9893 = fdiv double %9888, %9892
  %9894 = bitcast i8* %9883 to double*
  store double %9893, double* %9894, align 1, !tbaa !2451
  %9895 = getelementptr inbounds i8, i8* %9883, i64 8
  %9896 = bitcast i8* %9895 to i64*
  store i64 %9891, i64* %9896, align 1, !tbaa !2451
  %9897 = bitcast %union.vec128_t* %XMM2 to i8*
  %9898 = load i64, i64* %PC
  %9899 = add i64 %9898, 9
  store i64 %9899, i64* %PC
  %9900 = bitcast i8* %9897 to double*
  %9901 = load double, double* %9900, align 1
  store double %9901, double* bitcast (%sa_type* @sa to double*)
  %9902 = bitcast %union.vec128_t* %XMM1 to i8*
  %9903 = load i64, i64* %PC
  %9904 = add i64 %9903, 9
  store i64 %9904, i64* %PC
  %9905 = bitcast i8* %9902 to double*
  %9906 = load double, double* %9905, align 1
  store double %9906, double* bitcast (%sb_type* @sb to double*)
  %9907 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9908 = load i64, i64* %PC
  %9909 = add i64 %9908, 9
  store i64 %9909, i64* %PC
  %9910 = load double, double* bitcast (%sa_type* @sa to double*)
  %9911 = bitcast i8* %9907 to double*
  store double %9910, double* %9911, align 1, !tbaa !2451
  %9912 = getelementptr inbounds i8, i8* %9907, i64 8
  %9913 = bitcast i8* %9912 to double*
  store double 0.000000e+00, double* %9913, align 1, !tbaa !2451
  %9914 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9915 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9916 = load i64, i64* %PC
  %9917 = add i64 %9916, 9
  store i64 %9917, i64* %PC
  %9918 = bitcast i8* %9915 to double*
  %9919 = load double, double* %9918, align 1
  %9920 = getelementptr inbounds i8, i8* %9915, i64 8
  %9921 = bitcast i8* %9920 to i64*
  %9922 = load i64, i64* %9921, align 1
  %9923 = load double, double* bitcast (%sb_type* @sb to double*)
  %9924 = fsub double %9919, %9923
  %9925 = bitcast i8* %9914 to double*
  store double %9924, double* %9925, align 1, !tbaa !2451
  %9926 = getelementptr inbounds i8, i8* %9914, i64 8
  %9927 = bitcast i8* %9926 to i64*
  store i64 %9922, i64* %9927, align 1, !tbaa !2451
  %9928 = bitcast %union.vec128_t* %XMM1 to i8*
  %9929 = load i64, i64* %PC
  %9930 = add i64 %9929, 9
  store i64 %9930, i64* %PC
  %9931 = bitcast i8* %9928 to double*
  %9932 = load double, double* %9931, align 1
  store double %9932, double* bitcast (%sc_type* @sc to double*)
  %9933 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9934 = load i64, i64* %PC
  %9935 = add i64 %9934, 9
  store i64 %9935, i64* %PC
  %9936 = load double, double* bitcast (%one_type* @one to double*)
  %9937 = bitcast i8* %9933 to double*
  store double %9936, double* %9937, align 1, !tbaa !2451
  %9938 = getelementptr inbounds i8, i8* %9933, i64 8
  %9939 = bitcast i8* %9938 to double*
  store double 0.000000e+00, double* %9939, align 1, !tbaa !2451
  %9940 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9941 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9942 = load i64, i64* %PC
  %9943 = add i64 %9942, 9
  store i64 %9943, i64* %PC
  %9944 = bitcast i8* %9941 to double*
  %9945 = load double, double* %9944, align 1
  %9946 = getelementptr inbounds i8, i8* %9941, i64 8
  %9947 = bitcast i8* %9946 to i64*
  %9948 = load i64, i64* %9947, align 1
  %9949 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 152) to double*)
  %9950 = fdiv double %9945, %9949
  %9951 = bitcast i8* %9940 to double*
  store double %9950, double* %9951, align 1, !tbaa !2451
  %9952 = getelementptr inbounds i8, i8* %9940, i64 8
  %9953 = bitcast i8* %9952 to i64*
  store i64 %9948, i64* %9953, align 1, !tbaa !2451
  %9954 = bitcast %union.vec128_t* %XMM1 to i8*
  %9955 = load i64, i64* %PC
  %9956 = add i64 %9955, 9
  store i64 %9956, i64* %PC
  %9957 = bitcast i8* %9954 to double*
  %9958 = load double, double* %9957, align 1
  store double %9958, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 160) to double*)
  %9959 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9960 = bitcast %union.vec128_t* %XMM0 to i8*
  %9961 = load i64, i64* %PC
  %9962 = add i64 %9961, 3
  store i64 %9962, i64* %PC
  %9963 = bitcast i8* %9960 to <2 x i32>*
  %9964 = load <2 x i32>, <2 x i32>* %9963, align 1
  %9965 = getelementptr inbounds i8, i8* %9960, i64 8
  %9966 = bitcast i8* %9965 to <2 x i32>*
  %9967 = load <2 x i32>, <2 x i32>* %9966, align 1
  %9968 = extractelement <2 x i32> %9964, i32 0
  %9969 = bitcast i8* %9959 to i32*
  store i32 %9968, i32* %9969, align 1, !tbaa !2455
  %9970 = extractelement <2 x i32> %9964, i32 1
  %9971 = getelementptr inbounds i8, i8* %9959, i64 4
  %9972 = bitcast i8* %9971 to i32*
  store i32 %9970, i32* %9972, align 1, !tbaa !2455
  %9973 = extractelement <2 x i32> %9967, i32 0
  %9974 = getelementptr inbounds i8, i8* %9959, i64 8
  %9975 = bitcast i8* %9974 to i32*
  store i32 %9973, i32* %9975, align 1, !tbaa !2455
  %9976 = extractelement <2 x i32> %9967, i32 1
  %9977 = getelementptr inbounds i8, i8* %9959, i64 12
  %9978 = bitcast i8* %9977 to i32*
  store i32 %9976, i32* %9978, align 1, !tbaa !2455
  %9979 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9980 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9981 = load i64, i64* %PC
  %9982 = add i64 %9981, 9
  store i64 %9982, i64* %PC
  %9983 = bitcast i8* %9980 to double*
  %9984 = load double, double* %9983, align 1
  %9985 = getelementptr inbounds i8, i8* %9980, i64 8
  %9986 = bitcast i8* %9985 to i64*
  %9987 = load i64, i64* %9986, align 1
  %9988 = load double, double* bitcast (%sc_type* @sc to double*)
  %9989 = fmul double %9984, %9988
  %9990 = bitcast i8* %9979 to double*
  store double %9989, double* %9990, align 1, !tbaa !2451
  %9991 = getelementptr inbounds i8, i8* %9979, i64 8
  %9992 = bitcast i8* %9991 to i64*
  store i64 %9987, i64* %9992, align 1, !tbaa !2451
  %9993 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9994 = bitcast %union.vec128_t* %XMM0 to i8*
  %9995 = load i64, i64* %PC
  %9996 = add i64 %9995, 3
  store i64 %9996, i64* %PC
  %9997 = bitcast i8* %9994 to <2 x i32>*
  %9998 = load <2 x i32>, <2 x i32>* %9997, align 1
  %9999 = getelementptr inbounds i8, i8* %9994, i64 8
  %10000 = bitcast i8* %9999 to <2 x i32>*
  %10001 = load <2 x i32>, <2 x i32>* %10000, align 1
  %10002 = extractelement <2 x i32> %9998, i32 0
  %10003 = bitcast i8* %9993 to i32*
  store i32 %10002, i32* %10003, align 1, !tbaa !2455
  %10004 = extractelement <2 x i32> %9998, i32 1
  %10005 = getelementptr inbounds i8, i8* %9993, i64 4
  %10006 = bitcast i8* %10005 to i32*
  store i32 %10004, i32* %10006, align 1, !tbaa !2455
  %10007 = extractelement <2 x i32> %10001, i32 0
  %10008 = getelementptr inbounds i8, i8* %9993, i64 8
  %10009 = bitcast i8* %10008 to i32*
  store i32 %10007, i32* %10009, align 1, !tbaa !2455
  %10010 = extractelement <2 x i32> %10001, i32 1
  %10011 = getelementptr inbounds i8, i8* %9993, i64 12
  %10012 = bitcast i8* %10011 to i32*
  store i32 %10010, i32* %10012, align 1, !tbaa !2455
  %10013 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10014 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10015 = load i64, i64* %PC
  %10016 = add i64 %10015, 9
  store i64 %10016, i64* %PC
  %10017 = bitcast i8* %10014 to double*
  %10018 = load double, double* %10017, align 1
  %10019 = getelementptr inbounds i8, i8* %10014, i64 8
  %10020 = bitcast i8* %10019 to i64*
  %10021 = load i64, i64* %10020, align 1
  %10022 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %10023 = fmul double %10018, %10022
  %10024 = bitcast i8* %10013 to double*
  store double %10023, double* %10024, align 1, !tbaa !2451
  %10025 = getelementptr inbounds i8, i8* %10013, i64 8
  %10026 = bitcast i8* %10025 to i64*
  store i64 %10021, i64* %10026, align 1, !tbaa !2451
  %10027 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10028 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10029 = load i64, i64* %PC
  %10030 = add i64 %10029, 9
  store i64 %10030, i64* %PC
  %10031 = bitcast i8* %10028 to double*
  %10032 = load double, double* %10031, align 1
  %10033 = getelementptr inbounds i8, i8* %10028, i64 8
  %10034 = bitcast i8* %10033 to i64*
  %10035 = load i64, i64* %10034, align 1
  %10036 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 160) to double*)
  %10037 = fmul double %10032, %10036
  %10038 = bitcast i8* %10027 to double*
  store double %10037, double* %10038, align 1, !tbaa !2451
  %10039 = getelementptr inbounds i8, i8* %10027, i64 8
  %10040 = bitcast i8* %10039 to i64*
  store i64 %10035, i64* %10040, align 1, !tbaa !2451
  %10041 = load i64, i64* %RBP
  %10042 = sub i64 %10041, 256
  %10043 = bitcast %union.vec128_t* %XMM0 to i8*
  %10044 = load i64, i64* %PC
  %10045 = add i64 %10044, 8
  store i64 %10045, i64* %PC
  %10046 = bitcast i8* %10043 to double*
  %10047 = load double, double* %10046, align 1
  %10048 = inttoptr i64 %10042 to double*
  store double %10047, double* %10048
  %10049 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10050 = bitcast %union.vec128_t* %XMM1 to i8*
  %10051 = load i64, i64* %PC
  %10052 = add i64 %10051, 3
  store i64 %10052, i64* %PC
  %10053 = bitcast i8* %10050 to <2 x i32>*
  %10054 = load <2 x i32>, <2 x i32>* %10053, align 1
  %10055 = getelementptr inbounds i8, i8* %10050, i64 8
  %10056 = bitcast i8* %10055 to <2 x i32>*
  %10057 = load <2 x i32>, <2 x i32>* %10056, align 1
  %10058 = extractelement <2 x i32> %10054, i32 0
  %10059 = bitcast i8* %10049 to i32*
  store i32 %10058, i32* %10059, align 1, !tbaa !2455
  %10060 = extractelement <2 x i32> %10054, i32 1
  %10061 = getelementptr inbounds i8, i8* %10049, i64 4
  %10062 = bitcast i8* %10061 to i32*
  store i32 %10060, i32* %10062, align 1, !tbaa !2455
  %10063 = extractelement <2 x i32> %10057, i32 0
  %10064 = getelementptr inbounds i8, i8* %10049, i64 8
  %10065 = bitcast i8* %10064 to i32*
  store i32 %10063, i32* %10065, align 1, !tbaa !2455
  %10066 = extractelement <2 x i32> %10057, i32 1
  %10067 = getelementptr inbounds i8, i8* %10049, i64 12
  %10068 = bitcast i8* %10067 to i32*
  store i32 %10066, i32* %10068, align 1, !tbaa !2455
  %10069 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10070 = bitcast %union.vec128_t* %XMM2 to i8*
  %10071 = load i64, i64* %PC
  %10072 = add i64 %10071, 3
  store i64 %10072, i64* %PC
  %10073 = bitcast i8* %10070 to <2 x i32>*
  %10074 = load <2 x i32>, <2 x i32>* %10073, align 1
  %10075 = getelementptr inbounds i8, i8* %10070, i64 8
  %10076 = bitcast i8* %10075 to <2 x i32>*
  %10077 = load <2 x i32>, <2 x i32>* %10076, align 1
  %10078 = extractelement <2 x i32> %10074, i32 0
  %10079 = bitcast i8* %10069 to i32*
  store i32 %10078, i32* %10079, align 1, !tbaa !2455
  %10080 = extractelement <2 x i32> %10074, i32 1
  %10081 = getelementptr inbounds i8, i8* %10069, i64 4
  %10082 = bitcast i8* %10081 to i32*
  store i32 %10080, i32* %10082, align 1, !tbaa !2455
  %10083 = extractelement <2 x i32> %10077, i32 0
  %10084 = getelementptr inbounds i8, i8* %10069, i64 8
  %10085 = bitcast i8* %10084 to i32*
  store i32 %10083, i32* %10085, align 1, !tbaa !2455
  %10086 = extractelement <2 x i32> %10077, i32 1
  %10087 = getelementptr inbounds i8, i8* %10069, i64 12
  %10088 = bitcast i8* %10087 to i32*
  store i32 %10086, i32* %10088, align 1, !tbaa !2455
  %10089 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10090 = load i64, i64* %RBP
  %10091 = sub i64 %10090, 256
  %10092 = load i64, i64* %PC
  %10093 = add i64 %10092, 8
  store i64 %10093, i64* %PC
  %10094 = inttoptr i64 %10091 to double*
  %10095 = load double, double* %10094
  %10096 = bitcast i8* %10089 to double*
  store double %10095, double* %10096, align 1, !tbaa !2451
  %10097 = getelementptr inbounds i8, i8* %10089, i64 8
  %10098 = bitcast i8* %10097 to double*
  store double 0.000000e+00, double* %10098, align 1, !tbaa !2451
  %10099 = load i64, i64* %RBP
  %10100 = sub i64 %10099, 260
  %10101 = load i32, i32* %EAX
  %10102 = zext i32 %10101 to i64
  %10103 = load i64, i64* %PC
  %10104 = add i64 %10103, 6
  store i64 %10104, i64* %PC
  %10105 = inttoptr i64 %10100 to i32*
  store i32 %10101, i32* %10105
  %10106 = load i64, i64* %PC
  %10107 = add i64 %10106, 2
  store i64 %10107, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2453
  %10108 = load i64, i64* %PC
  %10109 = sub i64 %10108, 6193
  %10110 = load i64, i64* %PC
  %10111 = add i64 %10110, 5
  %10112 = load i64, i64* %PC
  %10113 = add i64 %10112, 5
  store i64 %10113, i64* %PC
  %10114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10115 = load i64, i64* %10114, align 8, !tbaa !2428
  %10116 = add i64 %10115, -8
  %10117 = inttoptr i64 %10116 to i64*
  store i64 %10111, i64* %10117
  store i64 %10116, i64* %10114, align 8, !tbaa !2428
  %10118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10109, i64* %10118, align 8, !tbaa !2428
  %10119 = load i64, i64* %PC
  %10120 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %10119, %struct.Memory* %9161)
  %10121 = load i64, i64* %PC
  %10122 = add i64 %10121, 10
  store i64 %10122, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %10123 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10124 = load i64, i64* %PC
  %10125 = add i64 %10124, 8
  store i64 %10125, i64* %PC
  %10126 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 152) to double*)
  %10127 = bitcast i8* %10123 to double*
  store double %10126, double* %10127, align 1, !tbaa !2451
  %10128 = getelementptr inbounds i8, i8* %10123, i64 8
  %10129 = bitcast i8* %10128 to double*
  store double 0.000000e+00, double* %10129, align 1, !tbaa !2451
  %10130 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10131 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10132 = bitcast %union.vec128_t* %XMM1 to i8*
  %10133 = load i64, i64* %PC
  %10134 = add i64 %10133, 3
  store i64 %10134, i64* %PC
  %10135 = bitcast i8* %10131 to i64*
  %10136 = load i64, i64* %10135, align 1
  %10137 = getelementptr inbounds i8, i8* %10131, i64 8
  %10138 = bitcast i8* %10137 to i64*
  %10139 = load i64, i64* %10138, align 1
  %10140 = bitcast i8* %10132 to i64*
  %10141 = load i64, i64* %10140, align 1
  %10142 = getelementptr inbounds i8, i8* %10132, i64 8
  %10143 = bitcast i8* %10142 to i64*
  %10144 = load i64, i64* %10143, align 1
  %10145 = xor i64 %10141, %10136
  %10146 = xor i64 %10144, %10139
  %10147 = trunc i64 %10145 to i32
  %10148 = lshr i64 %10145, 32
  %10149 = trunc i64 %10148 to i32
  %10150 = bitcast i8* %10130 to i32*
  store i32 %10147, i32* %10150, align 1, !tbaa !2454
  %10151 = getelementptr inbounds i8, i8* %10130, i64 4
  %10152 = bitcast i8* %10151 to i32*
  store i32 %10149, i32* %10152, align 1, !tbaa !2454
  %10153 = trunc i64 %10146 to i32
  %10154 = getelementptr inbounds i8, i8* %10130, i64 8
  %10155 = bitcast i8* %10154 to i32*
  store i32 %10153, i32* %10155, align 1, !tbaa !2454
  %10156 = lshr i64 %10146, 32
  %10157 = trunc i64 %10156 to i32
  %10158 = getelementptr inbounds i8, i8* %10130, i64 12
  %10159 = bitcast i8* %10158 to i32*
  store i32 %10157, i32* %10159, align 1, !tbaa !2454
  %10160 = load i64, i64* %RBP
  %10161 = sub i64 %10160, 16
  %10162 = bitcast %union.vec128_t* %XMM1 to i8*
  %10163 = load i64, i64* %PC
  %10164 = add i64 %10163, 5
  store i64 %10164, i64* %PC
  %10165 = bitcast i8* %10162 to double*
  %10166 = load double, double* %10165, align 1
  %10167 = inttoptr i64 %10161 to double*
  store double %10166, double* %10167
  %10168 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10169 = load i64, i64* %PC
  %10170 = add i64 %10169, 9
  store i64 %10170, i64* %PC
  %10171 = load double, double* bitcast (%one_type* @one to double*)
  %10172 = bitcast i8* %10168 to double*
  store double %10171, double* %10172, align 1, !tbaa !2451
  %10173 = getelementptr inbounds i8, i8* %10168, i64 8
  %10174 = bitcast i8* %10173 to double*
  store double 0.000000e+00, double* %10174, align 1, !tbaa !2451
  %10175 = load i64, i64* %RBP
  %10176 = sub i64 %10175, 40
  %10177 = bitcast %union.vec128_t* %XMM1 to i8*
  %10178 = load i64, i64* %PC
  %10179 = add i64 %10178, 5
  store i64 %10179, i64* %PC
  %10180 = bitcast i8* %10177 to double*
  %10181 = load double, double* %10180, align 1
  %10182 = inttoptr i64 %10176 to double*
  store double %10181, double* %10182
  %10183 = bitcast %union.vec128_t* %XMM0 to i8*
  %10184 = load i64, i64* %PC
  %10185 = add i64 %10184, 9
  store i64 %10185, i64* %PC
  %10186 = bitcast i8* %10183 to double*
  %10187 = load double, double* %10186, align 1
  store double %10187, double* bitcast (%sa_type* @sa to double*)
  %10188 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10189 = load i64, i64* %PC
  %10190 = add i64 %10189, 9
  store i64 %10190, i64* %PC
  %10191 = load double, double* bitcast (%sa_type* @sa to double*)
  %10192 = bitcast i8* %10188 to double*
  store double %10191, double* %10192, align 1, !tbaa !2451
  %10193 = getelementptr inbounds i8, i8* %10188, i64 8
  %10194 = bitcast i8* %10193 to double*
  store double 0.000000e+00, double* %10194, align 1, !tbaa !2451
  %10195 = load i64, i64* %RBP
  %10196 = sub i64 %10195, 80
  %10197 = load i64, i64* %PC
  %10198 = add i64 %10197, 4
  store i64 %10198, i64* %PC
  %10199 = inttoptr i64 %10196 to i64*
  %10200 = load i64, i64* %10199
  store i64 %10200, i64* %RCX, align 8, !tbaa !2428
  %10201 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10202 = load i64, i64* %RCX
  %10203 = load i64, i64* %PC
  %10204 = add i64 %10203, 5
  store i64 %10204, i64* %PC
  %10205 = sitofp i64 %10202 to double
  %10206 = bitcast i8* %10201 to double*
  store double %10205, double* %10206, align 1, !tbaa !2451
  %10207 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10208 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10209 = bitcast %union.vec128_t* %XMM1 to i8*
  %10210 = load i64, i64* %PC
  %10211 = add i64 %10210, 4
  store i64 %10211, i64* %PC
  %10212 = bitcast i8* %10208 to double*
  %10213 = load double, double* %10212, align 1
  %10214 = getelementptr inbounds i8, i8* %10208, i64 8
  %10215 = bitcast i8* %10214 to i64*
  %10216 = load i64, i64* %10215, align 1
  %10217 = bitcast i8* %10209 to double*
  %10218 = load double, double* %10217, align 1
  %10219 = fdiv double %10213, %10218
  %10220 = bitcast i8* %10207 to double*
  store double %10219, double* %10220, align 1, !tbaa !2451
  %10221 = getelementptr inbounds i8, i8* %10207, i64 8
  %10222 = bitcast i8* %10221 to i64*
  store i64 %10216, i64* %10222, align 1, !tbaa !2451
  %10223 = load i64, i64* %RBP
  %10224 = sub i64 %10223, 32
  %10225 = bitcast %union.vec128_t* %XMM0 to i8*
  %10226 = load i64, i64* %PC
  %10227 = add i64 %10226, 5
  store i64 %10227, i64* %PC
  %10228 = bitcast i8* %10225 to double*
  %10229 = load double, double* %10228, align 1
  %10230 = inttoptr i64 %10224 to double*
  store double %10229, double* %10230
  %10231 = load i64, i64* %RBP
  %10232 = sub i64 %10231, 264
  %10233 = load i32, i32* %EAX
  %10234 = zext i32 %10233 to i64
  %10235 = load i64, i64* %PC
  %10236 = add i64 %10235, 6
  store i64 %10236, i64* %PC
  %10237 = inttoptr i64 %10232 to i32*
  store i32 %10233, i32* %10237
  %10238 = load i64, i64* %PC
  %10239 = add i64 %10238, 2360
  %10240 = load i64, i64* %PC
  %10241 = add i64 %10240, 5
  %10242 = load i64, i64* %PC
  %10243 = add i64 %10242, 5
  store i64 %10243, i64* %PC
  %10244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10245 = load i64, i64* %10244, align 8, !tbaa !2428
  %10246 = add i64 %10245, -8
  %10247 = inttoptr i64 %10246 to i64*
  store i64 %10241, i64* %10247
  store i64 %10246, i64* %10244, align 8, !tbaa !2428
  %10248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10239, i64* %10248, align 8, !tbaa !2428
  %10249 = load i64, i64* %PC
  %10250 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %10249, %struct.Memory* %10120)
  %10251 = load i64, i64* %RBP
  %10252 = sub i64 %10251, 72
  %10253 = load i64, i64* %PC
  %10254 = add i64 %10253, 8
  store i64 %10254, i64* %PC
  %10255 = inttoptr i64 %10252 to i64*
  store i64 1, i64* %10255
  %10256 = load i64, i64* %RBP
  %10257 = sub i64 %10256, 268
  %10258 = load i32, i32* %EAX
  %10259 = zext i32 %10258 to i64
  %10260 = load i64, i64* %PC
  %10261 = add i64 %10260, 6
  store i64 %10261, i64* %PC
  %10262 = inttoptr i64 %10257 to i32*
  store i32 %10258, i32* %10262
  br label %block_401ccb

block_4007cb:                                     ; preds = %block_400701
  %10263 = load i64, i64* %PC
  %10264 = add i64 %10263, 10
  store i64 %10264, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %10265 = load i64, i64* %PC
  %10266 = add i64 %10265, 7707
  %10267 = load i64, i64* %PC
  %10268 = add i64 %10267, 5
  %10269 = load i64, i64* %PC
  %10270 = add i64 %10269, 5
  store i64 %10270, i64* %PC
  %10271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10272 = load i64, i64* %10271, align 8, !tbaa !2428
  %10273 = add i64 %10272, -8
  %10274 = inttoptr i64 %10273 to i64*
  store i64 %10268, i64* %10274
  store i64 %10273, i64* %10271, align 8, !tbaa !2428
  %10275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10266, i64* %10275, align 8, !tbaa !2428
  %10276 = load i64, i64* %PC
  %10277 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %10276, %struct.Memory* %MEMORY.13)
  %10278 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10279 = load i64, i64* %PC
  %10280 = add i64 %10279, 9
  store i64 %10280, i64* %PC
  %10281 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %10282 = bitcast i8* %10278 to double*
  store double %10281, double* %10282, align 1, !tbaa !2451
  %10283 = getelementptr inbounds i8, i8* %10278, i64 8
  %10284 = bitcast i8* %10283 to double*
  store double 0.000000e+00, double* %10284, align 1, !tbaa !2451
  %10285 = bitcast %union.vec128_t* %XMM0 to i8*
  %10286 = load i64, i64* %PC
  %10287 = add i64 %10286, 9
  store i64 %10287, i64* %PC
  %10288 = bitcast i8* %10285 to double*
  %10289 = load double, double* %10288, align 1
  store double %10289, double* bitcast (%sa_type* @sa to double*)
  %10290 = load i64, i64* %RBP
  %10291 = sub i64 %10290, 88
  %10292 = load i64, i64* %PC
  %10293 = add i64 %10292, 4
  store i64 %10293, i64* %PC
  %10294 = inttoptr i64 %10291 to i64*
  %10295 = load i64, i64* %10294
  store i64 %10295, i64* %RDI, align 8, !tbaa !2428
  %10296 = load i64, i64* %RDI
  %10297 = load i64, i64* %RBP
  %10298 = sub i64 %10297, 64
  %10299 = load i64, i64* %PC
  %10300 = add i64 %10299, 4
  store i64 %10300, i64* %PC
  %10301 = inttoptr i64 %10298 to i64*
  %10302 = load i64, i64* %10301
  %10303 = sub i64 %10296, %10302
  %10304 = icmp ugt i64 %10302, %10296
  %10305 = zext i1 %10304 to i8
  %10306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10305, i8* %10306, align 1, !tbaa !2432
  %10307 = trunc i64 %10303 to i32
  %10308 = and i32 %10307, 255
  %10309 = call i32 @llvm.ctpop.i32(i32 %10308) #16
  %10310 = trunc i32 %10309 to i8
  %10311 = and i8 %10310, 1
  %10312 = xor i8 %10311, 1
  %10313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10312, i8* %10313, align 1, !tbaa !2446
  %10314 = xor i64 %10302, %10296
  %10315 = xor i64 %10314, %10303
  %10316 = lshr i64 %10315, 4
  %10317 = trunc i64 %10316 to i8
  %10318 = and i8 %10317, 1
  %10319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10318, i8* %10319, align 1, !tbaa !2447
  %10320 = icmp eq i64 %10303, 0
  %10321 = zext i1 %10320 to i8
  %10322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10321, i8* %10322, align 1, !tbaa !2448
  %10323 = lshr i64 %10303, 63
  %10324 = trunc i64 %10323 to i8
  %10325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10324, i8* %10325, align 1, !tbaa !2449
  %10326 = lshr i64 %10296, 63
  %10327 = lshr i64 %10302, 63
  %10328 = xor i64 %10327, %10326
  %10329 = xor i64 %10323, %10326
  %10330 = add nuw nsw i64 %10329, %10328
  %10331 = icmp eq i64 %10330, 2
  %10332 = zext i1 %10331 to i8
  %10333 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10332, i8* %10333, align 1, !tbaa !2450
  %10334 = load i64, i64* %RBP
  %10335 = sub i64 %10334, 120
  %10336 = load i32, i32* %EAX
  %10337 = zext i32 %10336 to i64
  %10338 = load i64, i64* %PC
  %10339 = add i64 %10338, 3
  store i64 %10339, i64* %PC
  %10340 = inttoptr i64 %10335 to i32*
  store i32 %10336, i32* %10340
  %10341 = load i64, i64* %PC
  %10342 = add i64 %10341, 11
  %10343 = load i64, i64* %PC
  %10344 = add i64 %10343, 6
  %10345 = load i64, i64* %PC
  %10346 = add i64 %10345, 6
  store i64 %10346, i64* %PC
  %10347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10348 = load i8, i8* %10347, align 1, !tbaa !2448
  %10349 = icmp eq i8 %10348, 0
  %10350 = zext i1 %10349 to i8
  store i8 %10350, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %10351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10352 = select i1 %10349, i64 %10342, i64 %10344
  store i64 %10352, i64* %10351, align 8, !tbaa !2428
  %10353 = load i8, i8* %BRANCH_TAKEN
  %10354 = icmp eq i8 %10353, 1
  %10355 = load i64, i64* %PC
  br i1 %10354, label %block_400802, label %block_4007fd

block_401f8c:                                     ; preds = %block_401fa1, %block_401d67
  %MEMORY.8 = phi %struct.Memory* [ %1527, %block_401d67 ], [ %MEMORY.8, %block_401fa1 ]
  %10356 = load i64, i64* %RBP
  %10357 = sub i64 %10356, 72
  %10358 = load i64, i64* %PC
  %10359 = add i64 %10358, 4
  store i64 %10359, i64* %PC
  %10360 = inttoptr i64 %10357 to i64*
  %10361 = load i64, i64* %10360
  store i64 %10361, i64* %RAX, align 8, !tbaa !2428
  %10362 = load i64, i64* %RBP
  %10363 = sub i64 %10362, 80
  %10364 = load i64, i64* %PC
  %10365 = add i64 %10364, 4
  store i64 %10365, i64* %PC
  %10366 = inttoptr i64 %10363 to i64*
  %10367 = load i64, i64* %10366
  store i64 %10367, i64* %RCX, align 8, !tbaa !2428
  %10368 = load i64, i64* %RCX
  %10369 = load i64, i64* %PC
  %10370 = add i64 %10369, 4
  store i64 %10370, i64* %PC
  %10371 = sub i64 %10368, 1
  store i64 %10371, i64* %RCX, align 8, !tbaa !2428
  %10372 = icmp ult i64 %10368, 1
  %10373 = zext i1 %10372 to i8
  %10374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10373, i8* %10374, align 1, !tbaa !2432
  %10375 = trunc i64 %10371 to i32
  %10376 = and i32 %10375, 255
  %10377 = call i32 @llvm.ctpop.i32(i32 %10376) #16
  %10378 = trunc i32 %10377 to i8
  %10379 = and i8 %10378, 1
  %10380 = xor i8 %10379, 1
  %10381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10380, i8* %10381, align 1, !tbaa !2446
  %10382 = xor i64 1, %10368
  %10383 = xor i64 %10382, %10371
  %10384 = lshr i64 %10383, 4
  %10385 = trunc i64 %10384 to i8
  %10386 = and i8 %10385, 1
  %10387 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10386, i8* %10387, align 1, !tbaa !2447
  %10388 = icmp eq i64 %10371, 0
  %10389 = zext i1 %10388 to i8
  %10390 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10389, i8* %10390, align 1, !tbaa !2448
  %10391 = lshr i64 %10371, 63
  %10392 = trunc i64 %10391 to i8
  %10393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10392, i8* %10393, align 1, !tbaa !2449
  %10394 = lshr i64 %10368, 63
  %10395 = xor i64 %10391, %10394
  %10396 = add nuw nsw i64 %10395, %10394
  %10397 = icmp eq i64 %10396, 2
  %10398 = zext i1 %10397 to i8
  %10399 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10398, i8* %10399, align 1, !tbaa !2450
  %10400 = load i64, i64* %RAX
  %10401 = load i64, i64* %RCX
  %10402 = load i64, i64* %PC
  %10403 = add i64 %10402, 3
  store i64 %10403, i64* %PC
  %10404 = sub i64 %10400, %10401
  %10405 = icmp ult i64 %10400, %10401
  %10406 = zext i1 %10405 to i8
  %10407 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10406, i8* %10407, align 1, !tbaa !2432
  %10408 = trunc i64 %10404 to i32
  %10409 = and i32 %10408, 255
  %10410 = call i32 @llvm.ctpop.i32(i32 %10409) #16
  %10411 = trunc i32 %10410 to i8
  %10412 = and i8 %10411, 1
  %10413 = xor i8 %10412, 1
  %10414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10413, i8* %10414, align 1, !tbaa !2446
  %10415 = xor i64 %10401, %10400
  %10416 = xor i64 %10415, %10404
  %10417 = lshr i64 %10416, 4
  %10418 = trunc i64 %10417 to i8
  %10419 = and i8 %10418, 1
  %10420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10419, i8* %10420, align 1, !tbaa !2447
  %10421 = icmp eq i64 %10404, 0
  %10422 = zext i1 %10421 to i8
  %10423 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10422, i8* %10423, align 1, !tbaa !2448
  %10424 = lshr i64 %10404, 63
  %10425 = trunc i64 %10424 to i8
  %10426 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10425, i8* %10426, align 1, !tbaa !2449
  %10427 = lshr i64 %10400, 63
  %10428 = lshr i64 %10401, 63
  %10429 = xor i64 %10428, %10427
  %10430 = xor i64 %10424, %10427
  %10431 = add nuw nsw i64 %10430, %10429
  %10432 = icmp eq i64 %10431, 2
  %10433 = zext i1 %10432 to i8
  %10434 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10433, i8* %10434, align 1, !tbaa !2450
  %10435 = load i64, i64* %PC
  %10436 = add i64 %10435, 301
  %10437 = load i64, i64* %PC
  %10438 = add i64 %10437, 6
  %10439 = load i64, i64* %PC
  %10440 = add i64 %10439, 6
  store i64 %10440, i64* %PC
  %10441 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %10442 = load i8, i8* %10441, align 1, !tbaa !2448
  %10443 = icmp eq i8 %10442, 0
  %10444 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %10445 = load i8, i8* %10444, align 1, !tbaa !2449
  %10446 = icmp ne i8 %10445, 0
  %10447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %10448 = load i8, i8* %10447, align 1, !tbaa !2450
  %10449 = icmp ne i8 %10448, 0
  %10450 = xor i1 %10446, %10449
  %10451 = xor i1 %10450, true
  %10452 = and i1 %10443, %10451
  %10453 = zext i1 %10452 to i8
  store i8 %10453, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %10454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %10455 = select i1 %10452, i64 %10436, i64 %10438
  store i64 %10455, i64* %10454, align 8, !tbaa !2428
  %10456 = load i8, i8* %BRANCH_TAKEN
  %10457 = icmp eq i8 %10456, 1
  br i1 %10457, label %block_4020c8, label %block_401fa1

block_401ce0:                                     ; preds = %block_401ccb
  %10458 = load i64, i64* %RBP
  %10459 = sub i64 %10458, 72
  %10460 = load i64, i64* %PC
  %10461 = add i64 %10460, 4
  store i64 %10461, i64* %PC
  %10462 = inttoptr i64 %10459 to i64*
  %10463 = load i64, i64* %10462
  store i64 %10463, i64* %RAX, align 8, !tbaa !2428
  %10464 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10465 = load i64, i64* %RAX
  %10466 = load i64, i64* %PC
  %10467 = add i64 %10466, 5
  store i64 %10467, i64* %PC
  %10468 = sitofp i64 %10465 to double
  %10469 = bitcast i8* %10464 to double*
  store double %10468, double* %10469, align 1, !tbaa !2451
  %10470 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10471 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10472 = load i64, i64* %RBP
  %10473 = sub i64 %10472, 32
  %10474 = load i64, i64* %PC
  %10475 = add i64 %10474, 5
  store i64 %10475, i64* %PC
  %10476 = bitcast i8* %10471 to double*
  %10477 = load double, double* %10476, align 1
  %10478 = getelementptr inbounds i8, i8* %10471, i64 8
  %10479 = bitcast i8* %10478 to i64*
  %10480 = load i64, i64* %10479, align 1
  %10481 = inttoptr i64 %10473 to double*
  %10482 = load double, double* %10481
  %10483 = fmul double %10477, %10482
  %10484 = bitcast i8* %10470 to double*
  store double %10483, double* %10484, align 1, !tbaa !2451
  %10485 = getelementptr inbounds i8, i8* %10470, i64 8
  %10486 = bitcast i8* %10485 to i64*
  store i64 %10480, i64* %10486, align 1, !tbaa !2451
  %10487 = load i64, i64* %RBP
  %10488 = sub i64 %10487, 48
  %10489 = bitcast %union.vec128_t* %XMM0 to i8*
  %10490 = load i64, i64* %PC
  %10491 = add i64 %10490, 5
  store i64 %10491, i64* %PC
  %10492 = bitcast i8* %10489 to double*
  %10493 = load double, double* %10492, align 1
  %10494 = inttoptr i64 %10488 to double*
  store double %10493, double* %10494
  %10495 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10496 = load i64, i64* %RBP
  %10497 = sub i64 %10496, 48
  %10498 = load i64, i64* %PC
  %10499 = add i64 %10498, 5
  store i64 %10499, i64* %PC
  %10500 = inttoptr i64 %10497 to double*
  %10501 = load double, double* %10500
  %10502 = bitcast i8* %10495 to double*
  store double %10501, double* %10502, align 1, !tbaa !2451
  %10503 = getelementptr inbounds i8, i8* %10495, i64 8
  %10504 = bitcast i8* %10503 to double*
  store double 0.000000e+00, double* %10504, align 1, !tbaa !2451
  %10505 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10506 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10507 = load i64, i64* %RBP
  %10508 = sub i64 %10507, 48
  %10509 = load i64, i64* %PC
  %10510 = add i64 %10509, 5
  store i64 %10510, i64* %PC
  %10511 = bitcast i8* %10506 to double*
  %10512 = load double, double* %10511, align 1
  %10513 = getelementptr inbounds i8, i8* %10506, i64 8
  %10514 = bitcast i8* %10513 to i64*
  %10515 = load i64, i64* %10514, align 1
  %10516 = inttoptr i64 %10508 to double*
  %10517 = load double, double* %10516
  %10518 = fmul double %10512, %10517
  %10519 = bitcast i8* %10505 to double*
  store double %10518, double* %10519, align 1, !tbaa !2451
  %10520 = getelementptr inbounds i8, i8* %10505, i64 8
  %10521 = bitcast i8* %10520 to i64*
  store i64 %10515, i64* %10521, align 1, !tbaa !2451
  %10522 = load i64, i64* %RBP
  %10523 = sub i64 %10522, 24
  %10524 = bitcast %union.vec128_t* %XMM0 to i8*
  %10525 = load i64, i64* %PC
  %10526 = add i64 %10525, 5
  store i64 %10526, i64* %PC
  %10527 = bitcast i8* %10524 to double*
  %10528 = load double, double* %10527, align 1
  %10529 = inttoptr i64 %10523 to double*
  store double %10528, double* %10529
  %10530 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10531 = load i64, i64* %RBP
  %10532 = sub i64 %10531, 16
  %10533 = load i64, i64* %PC
  %10534 = add i64 %10533, 5
  store i64 %10534, i64* %PC
  %10535 = inttoptr i64 %10532 to double*
  %10536 = load double, double* %10535
  %10537 = bitcast i8* %10530 to double*
  store double %10536, double* %10537, align 1, !tbaa !2451
  %10538 = getelementptr inbounds i8, i8* %10530, i64 8
  %10539 = bitcast i8* %10538 to double*
  store double 0.000000e+00, double* %10539, align 1, !tbaa !2451
  %10540 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10541 = load i64, i64* %RBP
  %10542 = sub i64 %10541, 40
  %10543 = load i64, i64* %PC
  %10544 = add i64 %10543, 5
  store i64 %10544, i64* %PC
  %10545 = inttoptr i64 %10542 to double*
  %10546 = load double, double* %10545
  %10547 = bitcast i8* %10540 to double*
  store double %10546, double* %10547, align 1, !tbaa !2451
  %10548 = getelementptr inbounds i8, i8* %10540, i64 8
  %10549 = bitcast i8* %10548 to double*
  store double 0.000000e+00, double* %10549, align 1, !tbaa !2451
  %10550 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10551 = load i64, i64* %RBP
  %10552 = sub i64 %10551, 48
  %10553 = load i64, i64* %PC
  %10554 = add i64 %10553, 5
  store i64 %10554, i64* %PC
  %10555 = inttoptr i64 %10552 to double*
  %10556 = load double, double* %10555
  %10557 = bitcast i8* %10550 to double*
  store double %10556, double* %10557, align 1, !tbaa !2451
  %10558 = getelementptr inbounds i8, i8* %10550, i64 8
  %10559 = bitcast i8* %10558 to double*
  store double 0.000000e+00, double* %10559, align 1, !tbaa !2451
  %10560 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10561 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10562 = load i64, i64* %RBP
  %10563 = sub i64 %10562, 40
  %10564 = load i64, i64* %PC
  %10565 = add i64 %10564, 5
  store i64 %10565, i64* %PC
  %10566 = bitcast i8* %10561 to double*
  %10567 = load double, double* %10566, align 1
  %10568 = getelementptr inbounds i8, i8* %10561, i64 8
  %10569 = bitcast i8* %10568 to i64*
  %10570 = load i64, i64* %10569, align 1
  %10571 = inttoptr i64 %10563 to double*
  %10572 = load double, double* %10571
  %10573 = fadd double %10567, %10572
  %10574 = bitcast i8* %10560 to double*
  store double %10573, double* %10574, align 1, !tbaa !2451
  %10575 = getelementptr inbounds i8, i8* %10560, i64 8
  %10576 = bitcast i8* %10575 to i64*
  store i64 %10570, i64* %10576, align 1, !tbaa !2451
  %10577 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10578 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10579 = bitcast %union.vec128_t* %XMM2 to i8*
  %10580 = load i64, i64* %PC
  %10581 = add i64 %10580, 4
  store i64 %10581, i64* %PC
  %10582 = bitcast i8* %10578 to double*
  %10583 = load double, double* %10582, align 1
  %10584 = getelementptr inbounds i8, i8* %10578, i64 8
  %10585 = bitcast i8* %10584 to i64*
  %10586 = load i64, i64* %10585, align 1
  %10587 = bitcast i8* %10579 to double*
  %10588 = load double, double* %10587, align 1
  %10589 = fdiv double %10583, %10588
  %10590 = bitcast i8* %10577 to double*
  store double %10589, double* %10590, align 1, !tbaa !2451
  %10591 = getelementptr inbounds i8, i8* %10577, i64 8
  %10592 = bitcast i8* %10591 to i64*
  store i64 %10586, i64* %10592, align 1, !tbaa !2451
  %10593 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10594 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10595 = bitcast %union.vec128_t* %XMM1 to i8*
  %10596 = load i64, i64* %PC
  %10597 = add i64 %10596, 4
  store i64 %10597, i64* %PC
  %10598 = bitcast i8* %10594 to double*
  %10599 = load double, double* %10598, align 1
  %10600 = getelementptr inbounds i8, i8* %10594, i64 8
  %10601 = bitcast i8* %10600 to i64*
  %10602 = load i64, i64* %10601, align 1
  %10603 = bitcast i8* %10595 to double*
  %10604 = load double, double* %10603, align 1
  %10605 = fsub double %10599, %10604
  %10606 = bitcast i8* %10593 to double*
  store double %10605, double* %10606, align 1, !tbaa !2451
  %10607 = getelementptr inbounds i8, i8* %10593, i64 8
  %10608 = bitcast i8* %10607 to i64*
  store i64 %10602, i64* %10608, align 1, !tbaa !2451
  %10609 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10610 = load i64, i64* %RBP
  %10611 = sub i64 %10610, 48
  %10612 = load i64, i64* %PC
  %10613 = add i64 %10612, 5
  store i64 %10613, i64* %PC
  %10614 = inttoptr i64 %10611 to double*
  %10615 = load double, double* %10614
  %10616 = bitcast i8* %10609 to double*
  store double %10615, double* %10616, align 1, !tbaa !2451
  %10617 = getelementptr inbounds i8, i8* %10609, i64 8
  %10618 = bitcast i8* %10617 to double*
  store double 0.000000e+00, double* %10618, align 1, !tbaa !2451
  %10619 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10620 = load i64, i64* %RBP
  %10621 = sub i64 %10620, 24
  %10622 = load i64, i64* %PC
  %10623 = add i64 %10622, 5
  store i64 %10623, i64* %PC
  %10624 = inttoptr i64 %10621 to double*
  %10625 = load double, double* %10624
  %10626 = bitcast i8* %10619 to double*
  store double %10625, double* %10626, align 1, !tbaa !2451
  %10627 = getelementptr inbounds i8, i8* %10619, i64 8
  %10628 = bitcast i8* %10627 to double*
  store double 0.000000e+00, double* %10628, align 1, !tbaa !2451
  %10629 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10630 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10631 = load i64, i64* %RBP
  %10632 = sub i64 %10631, 40
  %10633 = load i64, i64* %PC
  %10634 = add i64 %10633, 5
  store i64 %10634, i64* %PC
  %10635 = bitcast i8* %10630 to double*
  %10636 = load double, double* %10635, align 1
  %10637 = getelementptr inbounds i8, i8* %10630, i64 8
  %10638 = bitcast i8* %10637 to i64*
  %10639 = load i64, i64* %10638, align 1
  %10640 = inttoptr i64 %10632 to double*
  %10641 = load double, double* %10640
  %10642 = fadd double %10636, %10641
  %10643 = bitcast i8* %10629 to double*
  store double %10642, double* %10643, align 1, !tbaa !2451
  %10644 = getelementptr inbounds i8, i8* %10629, i64 8
  %10645 = bitcast i8* %10644 to i64*
  store i64 %10639, i64* %10645, align 1, !tbaa !2451
  %10646 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10647 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10648 = bitcast %union.vec128_t* %XMM2 to i8*
  %10649 = load i64, i64* %PC
  %10650 = add i64 %10649, 4
  store i64 %10650, i64* %PC
  %10651 = bitcast i8* %10647 to double*
  %10652 = load double, double* %10651, align 1
  %10653 = getelementptr inbounds i8, i8* %10647, i64 8
  %10654 = bitcast i8* %10653 to i64*
  %10655 = load i64, i64* %10654, align 1
  %10656 = bitcast i8* %10648 to double*
  %10657 = load double, double* %10656, align 1
  %10658 = fdiv double %10652, %10657
  %10659 = bitcast i8* %10646 to double*
  store double %10658, double* %10659, align 1, !tbaa !2451
  %10660 = getelementptr inbounds i8, i8* %10646, i64 8
  %10661 = bitcast i8* %10660 to i64*
  store i64 %10655, i64* %10661, align 1, !tbaa !2451
  %10662 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10663 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10664 = bitcast %union.vec128_t* %XMM1 to i8*
  %10665 = load i64, i64* %PC
  %10666 = add i64 %10665, 4
  store i64 %10666, i64* %PC
  %10667 = bitcast i8* %10663 to double*
  %10668 = load double, double* %10667, align 1
  %10669 = getelementptr inbounds i8, i8* %10663, i64 8
  %10670 = bitcast i8* %10669 to i64*
  %10671 = load i64, i64* %10670, align 1
  %10672 = bitcast i8* %10664 to double*
  %10673 = load double, double* %10672, align 1
  %10674 = fsub double %10668, %10673
  %10675 = bitcast i8* %10662 to double*
  store double %10674, double* %10675, align 1, !tbaa !2451
  %10676 = getelementptr inbounds i8, i8* %10662, i64 8
  %10677 = bitcast i8* %10676 to i64*
  store i64 %10671, i64* %10677, align 1, !tbaa !2451
  %10678 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10679 = load i64, i64* %RBP
  %10680 = sub i64 %10679, 24
  %10681 = load i64, i64* %PC
  %10682 = add i64 %10681, 5
  store i64 %10682, i64* %PC
  %10683 = inttoptr i64 %10680 to double*
  %10684 = load double, double* %10683
  %10685 = bitcast i8* %10678 to double*
  store double %10684, double* %10685, align 1, !tbaa !2451
  %10686 = getelementptr inbounds i8, i8* %10678, i64 8
  %10687 = bitcast i8* %10686 to double*
  store double 0.000000e+00, double* %10687, align 1, !tbaa !2451
  %10688 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10689 = load i64, i64* %RBP
  %10690 = sub i64 %10689, 48
  %10691 = load i64, i64* %PC
  %10692 = add i64 %10691, 5
  store i64 %10692, i64* %PC
  %10693 = inttoptr i64 %10690 to double*
  %10694 = load double, double* %10693
  %10695 = bitcast i8* %10688 to double*
  store double %10694, double* %10695, align 1, !tbaa !2451
  %10696 = getelementptr inbounds i8, i8* %10688, i64 8
  %10697 = bitcast i8* %10696 to double*
  store double 0.000000e+00, double* %10697, align 1, !tbaa !2451
  %10698 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10699 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10700 = load i64, i64* %RBP
  %10701 = sub i64 %10700, 24
  %10702 = load i64, i64* %PC
  %10703 = add i64 %10702, 5
  store i64 %10703, i64* %PC
  %10704 = bitcast i8* %10699 to double*
  %10705 = load double, double* %10704, align 1
  %10706 = getelementptr inbounds i8, i8* %10699, i64 8
  %10707 = bitcast i8* %10706 to i64*
  %10708 = load i64, i64* %10707, align 1
  %10709 = inttoptr i64 %10701 to double*
  %10710 = load double, double* %10709
  %10711 = fmul double %10705, %10710
  %10712 = bitcast i8* %10698 to double*
  store double %10711, double* %10712, align 1, !tbaa !2451
  %10713 = getelementptr inbounds i8, i8* %10698, i64 8
  %10714 = bitcast i8* %10713 to i64*
  store i64 %10708, i64* %10714, align 1, !tbaa !2451
  %10715 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10716 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10717 = load i64, i64* %RBP
  %10718 = sub i64 %10717, 40
  %10719 = load i64, i64* %PC
  %10720 = add i64 %10719, 5
  store i64 %10720, i64* %PC
  %10721 = bitcast i8* %10716 to double*
  %10722 = load double, double* %10721, align 1
  %10723 = getelementptr inbounds i8, i8* %10716, i64 8
  %10724 = bitcast i8* %10723 to i64*
  %10725 = load i64, i64* %10724, align 1
  %10726 = inttoptr i64 %10718 to double*
  %10727 = load double, double* %10726
  %10728 = fadd double %10722, %10727
  %10729 = bitcast i8* %10715 to double*
  store double %10728, double* %10729, align 1, !tbaa !2451
  %10730 = getelementptr inbounds i8, i8* %10715, i64 8
  %10731 = bitcast i8* %10730 to i64*
  store i64 %10725, i64* %10731, align 1, !tbaa !2451
  %10732 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10733 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10734 = bitcast %union.vec128_t* %XMM2 to i8*
  %10735 = load i64, i64* %PC
  %10736 = add i64 %10735, 4
  store i64 %10736, i64* %PC
  %10737 = bitcast i8* %10733 to double*
  %10738 = load double, double* %10737, align 1
  %10739 = getelementptr inbounds i8, i8* %10733, i64 8
  %10740 = bitcast i8* %10739 to i64*
  %10741 = load i64, i64* %10740, align 1
  %10742 = bitcast i8* %10734 to double*
  %10743 = load double, double* %10742, align 1
  %10744 = fdiv double %10738, %10743
  %10745 = bitcast i8* %10732 to double*
  store double %10744, double* %10745, align 1, !tbaa !2451
  %10746 = getelementptr inbounds i8, i8* %10732, i64 8
  %10747 = bitcast i8* %10746 to i64*
  store i64 %10741, i64* %10747, align 1, !tbaa !2451
  %10748 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10749 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10750 = bitcast %union.vec128_t* %XMM1 to i8*
  %10751 = load i64, i64* %PC
  %10752 = add i64 %10751, 4
  store i64 %10752, i64* %PC
  %10753 = bitcast i8* %10749 to double*
  %10754 = load double, double* %10753, align 1
  %10755 = getelementptr inbounds i8, i8* %10749, i64 8
  %10756 = bitcast i8* %10755 to i64*
  %10757 = load i64, i64* %10756, align 1
  %10758 = bitcast i8* %10750 to double*
  %10759 = load double, double* %10758, align 1
  %10760 = fsub double %10754, %10759
  %10761 = bitcast i8* %10748 to double*
  store double %10760, double* %10761, align 1, !tbaa !2451
  %10762 = getelementptr inbounds i8, i8* %10748, i64 8
  %10763 = bitcast i8* %10762 to i64*
  store i64 %10757, i64* %10763, align 1, !tbaa !2451
  %10764 = load i64, i64* %RBP
  %10765 = sub i64 %10764, 16
  %10766 = bitcast %union.vec128_t* %XMM0 to i8*
  %10767 = load i64, i64* %PC
  %10768 = add i64 %10767, 5
  store i64 %10768, i64* %PC
  %10769 = bitcast i8* %10766 to double*
  %10770 = load double, double* %10769, align 1
  %10771 = inttoptr i64 %10765 to double*
  store double %10770, double* %10771
  %10772 = load i64, i64* %RBP
  %10773 = sub i64 %10772, 72
  %10774 = load i64, i64* %PC
  %10775 = add i64 %10774, 4
  store i64 %10775, i64* %PC
  %10776 = inttoptr i64 %10773 to i64*
  %10777 = load i64, i64* %10776
  store i64 %10777, i64* %RAX, align 8, !tbaa !2428
  %10778 = load i64, i64* %RAX
  %10779 = load i64, i64* %PC
  %10780 = add i64 %10779, 4
  store i64 %10780, i64* %PC
  %10781 = add i64 1, %10778
  store i64 %10781, i64* %RAX, align 8, !tbaa !2428
  %10782 = icmp ult i64 %10781, %10778
  %10783 = icmp ult i64 %10781, 1
  %10784 = or i1 %10782, %10783
  %10785 = zext i1 %10784 to i8
  %10786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %10785, i8* %10786, align 1, !tbaa !2432
  %10787 = trunc i64 %10781 to i32
  %10788 = and i32 %10787, 255
  %10789 = call i32 @llvm.ctpop.i32(i32 %10788) #16
  %10790 = trunc i32 %10789 to i8
  %10791 = and i8 %10790, 1
  %10792 = xor i8 %10791, 1
  %10793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10792, i8* %10793, align 1, !tbaa !2446
  %10794 = xor i64 1, %10778
  %10795 = xor i64 %10794, %10781
  %10796 = lshr i64 %10795, 4
  %10797 = trunc i64 %10796 to i8
  %10798 = and i8 %10797, 1
  %10799 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %10798, i8* %10799, align 1, !tbaa !2447
  %10800 = icmp eq i64 %10781, 0
  %10801 = zext i1 %10800 to i8
  %10802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10801, i8* %10802, align 1, !tbaa !2448
  %10803 = lshr i64 %10781, 63
  %10804 = trunc i64 %10803 to i8
  %10805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10804, i8* %10805, align 1, !tbaa !2449
  %10806 = lshr i64 %10778, 63
  %10807 = xor i64 %10803, %10806
  %10808 = add nuw nsw i64 %10807, %10803
  %10809 = icmp eq i64 %10808, 2
  %10810 = zext i1 %10809 to i8
  %10811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %10810, i8* %10811, align 1, !tbaa !2450
  %10812 = load i64, i64* %RBP
  %10813 = sub i64 %10812, 72
  %10814 = load i64, i64* %RAX
  %10815 = load i64, i64* %PC
  %10816 = add i64 %10815, 4
  store i64 %10816, i64* %PC
  %10817 = inttoptr i64 %10813 to i64*
  store i64 %10814, i64* %10817
  %10818 = load i64, i64* %PC
  %10819 = sub i64 %10818, 151
  %10820 = load i64, i64* %PC
  %10821 = add i64 %10820, 5
  store i64 %10821, i64* %PC
  %10822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10819, i64* %10822, align 8, !tbaa !2428
  br label %block_401ccb

block_40124b:                                     ; preds = %block_401184
  %10823 = load i64, i64* %PC
  %10824 = add i64 %10823, 10
  store i64 %10824, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %10825 = load i64, i64* %PC
  %10826 = add i64 %10825, 5019
  %10827 = load i64, i64* %PC
  %10828 = add i64 %10827, 5
  %10829 = load i64, i64* %PC
  %10830 = add i64 %10829, 5
  store i64 %10830, i64* %PC
  %10831 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10832 = load i64, i64* %10831, align 8, !tbaa !2428
  %10833 = add i64 %10832, -8
  %10834 = inttoptr i64 %10833 to i64*
  store i64 %10828, i64* %10834
  store i64 %10833, i64* %10831, align 8, !tbaa !2428
  %10835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10826, i64* %10835, align 8, !tbaa !2428
  %10836 = load i64, i64* %PC
  %10837 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %10836, %struct.Memory* %MEMORY.11)
  %10838 = load i64, i64* %PC
  %10839 = add i64 %10838, 10
  store i64 %10839, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 498), i64* %RDI, align 8, !tbaa !2428
  %10840 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10841 = load i64, i64* %PC
  %10842 = add i64 %10841, 8
  store i64 %10842, i64* %PC
  %10843 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 72) to double*)
  %10844 = bitcast i8* %10840 to double*
  store double %10843, double* %10844, align 1, !tbaa !2451
  %10845 = getelementptr inbounds i8, i8* %10840, i64 8
  %10846 = bitcast i8* %10845 to double*
  store double 0.000000e+00, double* %10846, align 1, !tbaa !2451
  %10847 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10848 = load i64, i64* %PC
  %10849 = add i64 %10848, 8
  store i64 %10849, i64* %PC
  %10850 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 128) to double*)
  %10851 = bitcast i8* %10847 to double*
  store double %10850, double* %10851, align 1, !tbaa !2451
  %10852 = getelementptr inbounds i8, i8* %10847, i64 8
  %10853 = bitcast i8* %10852 to double*
  store double 0.000000e+00, double* %10853, align 1, !tbaa !2451
  %10854 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10855 = load i64, i64* %PC
  %10856 = add i64 %10855, 9
  store i64 %10856, i64* %PC
  %10857 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %10858 = bitcast i8* %10854 to double*
  store double %10857, double* %10858, align 1, !tbaa !2451
  %10859 = getelementptr inbounds i8, i8* %10854, i64 8
  %10860 = bitcast i8* %10859 to double*
  store double 0.000000e+00, double* %10860, align 1, !tbaa !2451
  %10861 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10862 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10863 = load i64, i64* %PC
  %10864 = add i64 %10863, 9
  store i64 %10864, i64* %PC
  %10865 = bitcast i8* %10862 to double*
  %10866 = load double, double* %10865, align 1
  %10867 = getelementptr inbounds i8, i8* %10862, i64 8
  %10868 = bitcast i8* %10867 to i64*
  %10869 = load i64, i64* %10868, align 1
  %10870 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %10871 = fmul double %10866, %10870
  %10872 = bitcast i8* %10861 to double*
  store double %10871, double* %10872, align 1, !tbaa !2451
  %10873 = getelementptr inbounds i8, i8* %10861, i64 8
  %10874 = bitcast i8* %10873 to i64*
  store i64 %10869, i64* %10874, align 1, !tbaa !2451
  %10875 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10876 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10877 = load i64, i64* %PC
  %10878 = add i64 %10877, 9
  store i64 %10878, i64* %PC
  %10879 = bitcast i8* %10876 to double*
  %10880 = load double, double* %10879, align 1
  %10881 = getelementptr inbounds i8, i8* %10876, i64 8
  %10882 = bitcast i8* %10881 to i64*
  %10883 = load i64, i64* %10882, align 1
  %10884 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %10885 = fsub double %10880, %10884
  %10886 = bitcast i8* %10875 to double*
  store double %10885, double* %10886, align 1, !tbaa !2451
  %10887 = getelementptr inbounds i8, i8* %10875, i64 8
  %10888 = bitcast i8* %10887 to i64*
  store i64 %10883, i64* %10888, align 1, !tbaa !2451
  %10889 = bitcast %union.vec128_t* %XMM2 to i8*
  %10890 = load i64, i64* %PC
  %10891 = add i64 %10890, 9
  store i64 %10891, i64* %PC
  %10892 = bitcast i8* %10889 to double*
  %10893 = load double, double* %10892, align 1
  store double %10893, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %10894 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10895 = load i64, i64* %PC
  %10896 = add i64 %10895, 9
  store i64 %10896, i64* %PC
  %10897 = load double, double* bitcast (%piref_type* @piref to double*)
  %10898 = bitcast i8* %10894 to double*
  store double %10897, double* %10898, align 1, !tbaa !2451
  %10899 = getelementptr inbounds i8, i8* %10894, i64 8
  %10900 = bitcast i8* %10899 to double*
  store double 0.000000e+00, double* %10900, align 1, !tbaa !2451
  %10901 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10902 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10903 = load i64, i64* %PC
  %10904 = add i64 %10903, 9
  store i64 %10904, i64* %PC
  %10905 = bitcast i8* %10902 to double*
  %10906 = load double, double* %10905, align 1
  %10907 = getelementptr inbounds i8, i8* %10902, i64 8
  %10908 = bitcast i8* %10907 to i64*
  %10909 = load i64, i64* %10908, align 1
  %10910 = load double, double* bitcast (%three_type* @three to double*)
  %10911 = fdiv double %10906, %10910
  %10912 = bitcast i8* %10901 to double*
  store double %10911, double* %10912, align 1, !tbaa !2451
  %10913 = getelementptr inbounds i8, i8* %10901, i64 8
  %10914 = bitcast i8* %10913 to i64*
  store i64 %10909, i64* %10914, align 1, !tbaa !2451
  %10915 = load i64, i64* %RBP
  %10916 = sub i64 %10915, 24
  %10917 = bitcast %union.vec128_t* %XMM2 to i8*
  %10918 = load i64, i64* %PC
  %10919 = add i64 %10918, 5
  store i64 %10919, i64* %PC
  %10920 = bitcast i8* %10917 to double*
  %10921 = load double, double* %10920, align 1
  %10922 = inttoptr i64 %10916 to double*
  store double %10921, double* %10922
  %10923 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10924 = load i64, i64* %RBP
  %10925 = sub i64 %10924, 24
  %10926 = load i64, i64* %PC
  %10927 = add i64 %10926, 5
  store i64 %10927, i64* %PC
  %10928 = inttoptr i64 %10925 to double*
  %10929 = load double, double* %10928
  %10930 = bitcast i8* %10923 to double*
  store double %10929, double* %10930, align 1, !tbaa !2451
  %10931 = getelementptr inbounds i8, i8* %10923, i64 8
  %10932 = bitcast i8* %10931 to double*
  store double 0.000000e+00, double* %10932, align 1, !tbaa !2451
  %10933 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10934 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10935 = load i64, i64* %RBP
  %10936 = sub i64 %10935, 24
  %10937 = load i64, i64* %PC
  %10938 = add i64 %10937, 5
  store i64 %10938, i64* %PC
  %10939 = bitcast i8* %10934 to double*
  %10940 = load double, double* %10939, align 1
  %10941 = getelementptr inbounds i8, i8* %10934, i64 8
  %10942 = bitcast i8* %10941 to i64*
  %10943 = load i64, i64* %10942, align 1
  %10944 = inttoptr i64 %10936 to double*
  %10945 = load double, double* %10944
  %10946 = fmul double %10940, %10945
  %10947 = bitcast i8* %10933 to double*
  store double %10946, double* %10947, align 1, !tbaa !2451
  %10948 = getelementptr inbounds i8, i8* %10933, i64 8
  %10949 = bitcast i8* %10948 to i64*
  store i64 %10943, i64* %10949, align 1, !tbaa !2451
  %10950 = load i64, i64* %RBP
  %10951 = sub i64 %10950, 40
  %10952 = bitcast %union.vec128_t* %XMM2 to i8*
  %10953 = load i64, i64* %PC
  %10954 = add i64 %10953, 5
  store i64 %10954, i64* %PC
  %10955 = bitcast i8* %10952 to double*
  %10956 = load double, double* %10955, align 1
  %10957 = inttoptr i64 %10951 to double*
  store double %10956, double* %10957
  %10958 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10959 = load i64, i64* %RBP
  %10960 = sub i64 %10959, 40
  %10961 = load i64, i64* %PC
  %10962 = add i64 %10961, 5
  store i64 %10962, i64* %PC
  %10963 = inttoptr i64 %10960 to double*
  %10964 = load double, double* %10963
  %10965 = bitcast i8* %10958 to double*
  store double %10964, double* %10965, align 1, !tbaa !2451
  %10966 = getelementptr inbounds i8, i8* %10958, i64 8
  %10967 = bitcast i8* %10966 to double*
  store double 0.000000e+00, double* %10967, align 1, !tbaa !2451
  %10968 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10969 = load i64, i64* %RBP
  %10970 = sub i64 %10969, 40
  %10971 = load i64, i64* %PC
  %10972 = add i64 %10971, 5
  store i64 %10972, i64* %PC
  %10973 = inttoptr i64 %10970 to double*
  %10974 = load double, double* %10973
  %10975 = bitcast i8* %10968 to double*
  store double %10974, double* %10975, align 1, !tbaa !2451
  %10976 = getelementptr inbounds i8, i8* %10968, i64 8
  %10977 = bitcast i8* %10976 to double*
  store double 0.000000e+00, double* %10977, align 1, !tbaa !2451
  %10978 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10979 = load i64, i64* %RBP
  %10980 = sub i64 %10979, 40
  %10981 = load i64, i64* %PC
  %10982 = add i64 %10981, 5
  store i64 %10982, i64* %PC
  %10983 = inttoptr i64 %10980 to double*
  %10984 = load double, double* %10983
  %10985 = bitcast i8* %10978 to double*
  store double %10984, double* %10985, align 1, !tbaa !2451
  %10986 = getelementptr inbounds i8, i8* %10978, i64 8
  %10987 = bitcast i8* %10986 to double*
  store double 0.000000e+00, double* %10987, align 1, !tbaa !2451
  %10988 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %10989 = load i64, i64* %RBP
  %10990 = sub i64 %10989, 40
  %10991 = load i64, i64* %PC
  %10992 = add i64 %10991, 5
  store i64 %10992, i64* %PC
  %10993 = inttoptr i64 %10990 to double*
  %10994 = load double, double* %10993
  %10995 = bitcast i8* %10988 to double*
  store double %10994, double* %10995, align 1, !tbaa !2451
  %10996 = getelementptr inbounds i8, i8* %10988, i64 8
  %10997 = bitcast i8* %10996 to double*
  store double 0.000000e+00, double* %10997, align 1, !tbaa !2451
  %10998 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %10999 = load i64, i64* %RBP
  %11000 = sub i64 %10999, 40
  %11001 = load i64, i64* %PC
  %11002 = add i64 %11001, 5
  store i64 %11002, i64* %PC
  %11003 = inttoptr i64 %11000 to double*
  %11004 = load double, double* %11003
  %11005 = bitcast i8* %10998 to double*
  store double %11004, double* %11005, align 1, !tbaa !2451
  %11006 = getelementptr inbounds i8, i8* %10998, i64 8
  %11007 = bitcast i8* %11006 to double*
  store double 0.000000e+00, double* %11007, align 1, !tbaa !2451
  %11008 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %11009 = load i64, i64* %PC
  %11010 = add i64 %11009, 9
  store i64 %11010, i64* %PC
  %11011 = load double, double* bitcast (%B6_type* @B6 to double*)
  %11012 = bitcast i8* %11008 to double*
  store double %11011, double* %11012, align 1, !tbaa !2451
  %11013 = getelementptr inbounds i8, i8* %11008, i64 8
  %11014 = bitcast i8* %11013 to double*
  store double 0.000000e+00, double* %11014, align 1, !tbaa !2451
  %11015 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %11016 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %11017 = load i64, i64* %RBP
  %11018 = sub i64 %11017, 40
  %11019 = load i64, i64* %PC
  %11020 = add i64 %11019, 5
  store i64 %11020, i64* %PC
  %11021 = bitcast i8* %11016 to double*
  %11022 = load double, double* %11021, align 1
  %11023 = getelementptr inbounds i8, i8* %11016, i64 8
  %11024 = bitcast i8* %11023 to i64*
  %11025 = load i64, i64* %11024, align 1
  %11026 = inttoptr i64 %11018 to double*
  %11027 = load double, double* %11026
  %11028 = fmul double %11022, %11027
  %11029 = bitcast i8* %11015 to double*
  store double %11028, double* %11029, align 1, !tbaa !2451
  %11030 = getelementptr inbounds i8, i8* %11015, i64 8
  %11031 = bitcast i8* %11030 to i64*
  store i64 %11025, i64* %11031, align 1, !tbaa !2451
  %11032 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %11033 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %11034 = load i64, i64* %PC
  %11035 = add i64 %11034, 9
  store i64 %11035, i64* %PC
  %11036 = bitcast i8* %11033 to double*
  %11037 = load double, double* %11036, align 1
  %11038 = getelementptr inbounds i8, i8* %11033, i64 8
  %11039 = bitcast i8* %11038 to i64*
  %11040 = load i64, i64* %11039, align 1
  %11041 = load double, double* bitcast (%B5_type* @B5 to double*)
  %11042 = fadd double %11037, %11041
  %11043 = bitcast i8* %11032 to double*
  store double %11042, double* %11043, align 1, !tbaa !2451
  %11044 = getelementptr inbounds i8, i8* %11032, i64 8
  %11045 = bitcast i8* %11044 to i64*
  store i64 %11040, i64* %11045, align 1, !tbaa !2451
  %11046 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %11047 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %11048 = bitcast %union.vec128_t* %XMM7 to i8*
  %11049 = load i64, i64* %PC
  %11050 = add i64 %11049, 4
  store i64 %11050, i64* %PC
  %11051 = bitcast i8* %11047 to double*
  %11052 = load double, double* %11051, align 1
  %11053 = getelementptr inbounds i8, i8* %11047, i64 8
  %11054 = bitcast i8* %11053 to i64*
  %11055 = load i64, i64* %11054, align 1
  %11056 = bitcast i8* %11048 to double*
  %11057 = load double, double* %11056, align 1
  %11058 = fmul double %11052, %11057
  %11059 = bitcast i8* %11046 to double*
  store double %11058, double* %11059, align 1, !tbaa !2451
  %11060 = getelementptr inbounds i8, i8* %11046, i64 8
  %11061 = bitcast i8* %11060 to i64*
  store i64 %11055, i64* %11061, align 1, !tbaa !2451
  %11062 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %11063 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %11064 = load i64, i64* %PC
  %11065 = add i64 %11064, 9
  store i64 %11065, i64* %PC
  %11066 = bitcast i8* %11063 to double*
  %11067 = load double, double* %11066, align 1
  %11068 = getelementptr inbounds i8, i8* %11063, i64 8
  %11069 = bitcast i8* %11068 to i64*
  %11070 = load i64, i64* %11069, align 1
  %11071 = load double, double* bitcast (%B4_type* @B4 to double*)
  %11072 = fadd double %11067, %11071
  %11073 = bitcast i8* %11062 to double*
  store double %11072, double* %11073, align 1, !tbaa !2451
  %11074 = getelementptr inbounds i8, i8* %11062, i64 8
  %11075 = bitcast i8* %11074 to i64*
  store i64 %11070, i64* %11075, align 1, !tbaa !2451
  %11076 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %11077 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %11078 = bitcast %union.vec128_t* %XMM6 to i8*
  %11079 = load i64, i64* %PC
  %11080 = add i64 %11079, 4
  store i64 %11080, i64* %PC
  %11081 = bitcast i8* %11077 to double*
  %11082 = load double, double* %11081, align 1
  %11083 = getelementptr inbounds i8, i8* %11077, i64 8
  %11084 = bitcast i8* %11083 to i64*
  %11085 = load i64, i64* %11084, align 1
  %11086 = bitcast i8* %11078 to double*
  %11087 = load double, double* %11086, align 1
  %11088 = fmul double %11082, %11087
  %11089 = bitcast i8* %11076 to double*
  store double %11088, double* %11089, align 1, !tbaa !2451
  %11090 = getelementptr inbounds i8, i8* %11076, i64 8
  %11091 = bitcast i8* %11090 to i64*
  store i64 %11085, i64* %11091, align 1, !tbaa !2451
  %11092 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %11093 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %11094 = load i64, i64* %PC
  %11095 = add i64 %11094, 9
  store i64 %11095, i64* %PC
  %11096 = bitcast i8* %11093 to double*
  %11097 = load double, double* %11096, align 1
  %11098 = getelementptr inbounds i8, i8* %11093, i64 8
  %11099 = bitcast i8* %11098 to i64*
  %11100 = load i64, i64* %11099, align 1
  %11101 = load double, double* bitcast (%B3_type* @B3 to double*)
  %11102 = fadd double %11097, %11101
  %11103 = bitcast i8* %11092 to double*
  store double %11102, double* %11103, align 1, !tbaa !2451
  %11104 = getelementptr inbounds i8, i8* %11092, i64 8
  %11105 = bitcast i8* %11104 to i64*
  store i64 %11100, i64* %11105, align 1, !tbaa !2451
  %11106 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %11107 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %11108 = bitcast %union.vec128_t* %XMM5 to i8*
  %11109 = load i64, i64* %PC
  %11110 = add i64 %11109, 4
  store i64 %11110, i64* %PC
  %11111 = bitcast i8* %11107 to double*
  %11112 = load double, double* %11111, align 1
  %11113 = getelementptr inbounds i8, i8* %11107, i64 8
  %11114 = bitcast i8* %11113 to i64*
  %11115 = load i64, i64* %11114, align 1
  %11116 = bitcast i8* %11108 to double*
  %11117 = load double, double* %11116, align 1
  %11118 = fmul double %11112, %11117
  %11119 = bitcast i8* %11106 to double*
  store double %11118, double* %11119, align 1, !tbaa !2451
  %11120 = getelementptr inbounds i8, i8* %11106, i64 8
  %11121 = bitcast i8* %11120 to i64*
  store i64 %11115, i64* %11121, align 1, !tbaa !2451
  %11122 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %11123 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %11124 = load i64, i64* %PC
  %11125 = add i64 %11124, 9
  store i64 %11125, i64* %PC
  %11126 = bitcast i8* %11123 to double*
  %11127 = load double, double* %11126, align 1
  %11128 = getelementptr inbounds i8, i8* %11123, i64 8
  %11129 = bitcast i8* %11128 to i64*
  %11130 = load i64, i64* %11129, align 1
  %11131 = load double, double* bitcast (%B2_type* @B2 to double*)
  %11132 = fadd double %11127, %11131
  %11133 = bitcast i8* %11122 to double*
  store double %11132, double* %11133, align 1, !tbaa !2451
  %11134 = getelementptr inbounds i8, i8* %11122, i64 8
  %11135 = bitcast i8* %11134 to i64*
  store i64 %11130, i64* %11135, align 1, !tbaa !2451
  %11136 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11137 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11138 = bitcast %union.vec128_t* %XMM4 to i8*
  %11139 = load i64, i64* %PC
  %11140 = add i64 %11139, 4
  store i64 %11140, i64* %PC
  %11141 = bitcast i8* %11137 to double*
  %11142 = load double, double* %11141, align 1
  %11143 = getelementptr inbounds i8, i8* %11137, i64 8
  %11144 = bitcast i8* %11143 to i64*
  %11145 = load i64, i64* %11144, align 1
  %11146 = bitcast i8* %11138 to double*
  %11147 = load double, double* %11146, align 1
  %11148 = fmul double %11142, %11147
  %11149 = bitcast i8* %11136 to double*
  store double %11148, double* %11149, align 1, !tbaa !2451
  %11150 = getelementptr inbounds i8, i8* %11136, i64 8
  %11151 = bitcast i8* %11150 to i64*
  store i64 %11145, i64* %11151, align 1, !tbaa !2451
  %11152 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11153 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11154 = load i64, i64* %PC
  %11155 = add i64 %11154, 9
  store i64 %11155, i64* %PC
  %11156 = bitcast i8* %11153 to double*
  %11157 = load double, double* %11156, align 1
  %11158 = getelementptr inbounds i8, i8* %11153, i64 8
  %11159 = bitcast i8* %11158 to i64*
  %11160 = load i64, i64* %11159, align 1
  %11161 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %11162 = fadd double %11157, %11161
  %11163 = bitcast i8* %11152 to double*
  store double %11162, double* %11163, align 1, !tbaa !2451
  %11164 = getelementptr inbounds i8, i8* %11152, i64 8
  %11165 = bitcast i8* %11164 to i64*
  store i64 %11160, i64* %11165, align 1, !tbaa !2451
  %11166 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11167 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11168 = bitcast %union.vec128_t* %XMM3 to i8*
  %11169 = load i64, i64* %PC
  %11170 = add i64 %11169, 4
  store i64 %11170, i64* %PC
  %11171 = bitcast i8* %11167 to double*
  %11172 = load double, double* %11171, align 1
  %11173 = getelementptr inbounds i8, i8* %11167, i64 8
  %11174 = bitcast i8* %11173 to i64*
  %11175 = load i64, i64* %11174, align 1
  %11176 = bitcast i8* %11168 to double*
  %11177 = load double, double* %11176, align 1
  %11178 = fmul double %11172, %11177
  %11179 = bitcast i8* %11166 to double*
  store double %11178, double* %11179, align 1, !tbaa !2451
  %11180 = getelementptr inbounds i8, i8* %11166, i64 8
  %11181 = bitcast i8* %11180 to i64*
  store i64 %11175, i64* %11181, align 1, !tbaa !2451
  %11182 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11183 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11184 = load i64, i64* %PC
  %11185 = add i64 %11184, 9
  store i64 %11185, i64* %PC
  %11186 = bitcast i8* %11183 to double*
  %11187 = load double, double* %11186, align 1
  %11188 = getelementptr inbounds i8, i8* %11183, i64 8
  %11189 = bitcast i8* %11188 to i64*
  %11190 = load i64, i64* %11189, align 1
  %11191 = load double, double* bitcast (%one_type* @one to double*)
  %11192 = fadd double %11187, %11191
  %11193 = bitcast i8* %11182 to double*
  store double %11192, double* %11193, align 1, !tbaa !2451
  %11194 = getelementptr inbounds i8, i8* %11182, i64 8
  %11195 = bitcast i8* %11194 to i64*
  store i64 %11190, i64* %11195, align 1, !tbaa !2451
  %11196 = bitcast %union.vec128_t* %XMM2 to i8*
  %11197 = load i64, i64* %PC
  %11198 = add i64 %11197, 9
  store i64 %11198, i64* %PC
  %11199 = bitcast i8* %11196 to double*
  %11200 = load double, double* %11199, align 1
  store double %11200, double* bitcast (%sa_type* @sa to double*)
  %11201 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11202 = load i64, i64* %PC
  %11203 = add i64 %11202, 9
  store i64 %11203, i64* %PC
  %11204 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %11205 = bitcast i8* %11201 to double*
  store double %11204, double* %11205, align 1, !tbaa !2451
  %11206 = getelementptr inbounds i8, i8* %11201, i64 8
  %11207 = bitcast i8* %11206 to double*
  store double 0.000000e+00, double* %11207, align 1, !tbaa !2451
  %11208 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11209 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11210 = bitcast %union.vec128_t* %XMM1 to i8*
  %11211 = load i64, i64* %PC
  %11212 = add i64 %11211, 4
  store i64 %11212, i64* %PC
  %11213 = bitcast i8* %11209 to double*
  %11214 = load double, double* %11213, align 1
  %11215 = getelementptr inbounds i8, i8* %11209, i64 8
  %11216 = bitcast i8* %11215 to i64*
  %11217 = load i64, i64* %11216, align 1
  %11218 = bitcast i8* %11210 to double*
  %11219 = load double, double* %11218, align 1
  %11220 = fdiv double %11214, %11219
  %11221 = bitcast i8* %11208 to double*
  store double %11220, double* %11221, align 1, !tbaa !2451
  %11222 = getelementptr inbounds i8, i8* %11208, i64 8
  %11223 = bitcast i8* %11222 to i64*
  store i64 %11217, i64* %11223, align 1, !tbaa !2451
  %11224 = bitcast %union.vec128_t* %XMM2 to i8*
  %11225 = load i64, i64* %PC
  %11226 = add i64 %11225, 9
  store i64 %11226, i64* %PC
  %11227 = bitcast i8* %11224 to double*
  %11228 = load double, double* %11227, align 1
  store double %11228, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 104) to double*)
  %11229 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11230 = load i64, i64* %RBP
  %11231 = sub i64 %11230, 48
  %11232 = load i64, i64* %PC
  %11233 = add i64 %11232, 5
  store i64 %11233, i64* %PC
  %11234 = inttoptr i64 %11231 to double*
  %11235 = load double, double* %11234
  %11236 = bitcast i8* %11229 to double*
  store double %11235, double* %11236, align 1, !tbaa !2451
  %11237 = getelementptr inbounds i8, i8* %11229, i64 8
  %11238 = bitcast i8* %11237 to double*
  store double 0.000000e+00, double* %11238, align 1, !tbaa !2451
  %11239 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11240 = load i64, i64* %PC
  %11241 = add i64 %11240, 9
  store i64 %11241, i64* %PC
  %11242 = load double, double* bitcast (%sa_type* @sa to double*)
  %11243 = bitcast i8* %11239 to double*
  store double %11242, double* %11243, align 1, !tbaa !2451
  %11244 = getelementptr inbounds i8, i8* %11239, i64 8
  %11245 = bitcast i8* %11244 to double*
  store double 0.000000e+00, double* %11245, align 1, !tbaa !2451
  %11246 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11247 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11248 = load i64, i64* %PC
  %11249 = add i64 %11248, 9
  store i64 %11249, i64* %PC
  %11250 = bitcast i8* %11247 to double*
  %11251 = load double, double* %11250, align 1
  %11252 = getelementptr inbounds i8, i8* %11247, i64 8
  %11253 = bitcast i8* %11252 to i64*
  %11254 = load i64, i64* %11253, align 1
  %11255 = load double, double* bitcast (%one_type* @one to double*)
  %11256 = fadd double %11251, %11255
  %11257 = bitcast i8* %11246 to double*
  store double %11256, double* %11257, align 1, !tbaa !2451
  %11258 = getelementptr inbounds i8, i8* %11246, i64 8
  %11259 = bitcast i8* %11258 to i64*
  store i64 %11254, i64* %11259, align 1, !tbaa !2451
  %11260 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11261 = load i64, i64* %PC
  %11262 = add i64 %11261, 9
  store i64 %11262, i64* %PC
  %11263 = load double, double* bitcast (%two_type* @two to double*)
  %11264 = bitcast i8* %11260 to double*
  store double %11263, double* %11264, align 1, !tbaa !2451
  %11265 = getelementptr inbounds i8, i8* %11260, i64 8
  %11266 = bitcast i8* %11265 to double*
  store double 0.000000e+00, double* %11266, align 1, !tbaa !2451
  %11267 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11268 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11269 = load i64, i64* %RBP
  %11270 = sub i64 %11269, 16
  %11271 = load i64, i64* %PC
  %11272 = add i64 %11271, 5
  store i64 %11272, i64* %PC
  %11273 = bitcast i8* %11268 to double*
  %11274 = load double, double* %11273, align 1
  %11275 = getelementptr inbounds i8, i8* %11268, i64 8
  %11276 = bitcast i8* %11275 to i64*
  %11277 = load i64, i64* %11276, align 1
  %11278 = inttoptr i64 %11270 to double*
  %11279 = load double, double* %11278
  %11280 = fmul double %11274, %11279
  %11281 = bitcast i8* %11267 to double*
  store double %11280, double* %11281, align 1, !tbaa !2451
  %11282 = getelementptr inbounds i8, i8* %11267, i64 8
  %11283 = bitcast i8* %11282 to i64*
  store i64 %11277, i64* %11283, align 1, !tbaa !2451
  %11284 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11285 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11286 = bitcast %union.vec128_t* %XMM3 to i8*
  %11287 = load i64, i64* %PC
  %11288 = add i64 %11287, 4
  store i64 %11288, i64* %PC
  %11289 = bitcast i8* %11285 to double*
  %11290 = load double, double* %11289, align 1
  %11291 = getelementptr inbounds i8, i8* %11285, i64 8
  %11292 = bitcast i8* %11291 to i64*
  %11293 = load i64, i64* %11292, align 1
  %11294 = bitcast i8* %11286 to double*
  %11295 = load double, double* %11294, align 1
  %11296 = fadd double %11290, %11295
  %11297 = bitcast i8* %11284 to double*
  store double %11296, double* %11297, align 1, !tbaa !2451
  %11298 = getelementptr inbounds i8, i8* %11284, i64 8
  %11299 = bitcast i8* %11298 to i64*
  store i64 %11293, i64* %11299, align 1, !tbaa !2451
  %11300 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11301 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11302 = bitcast %union.vec128_t* %XMM2 to i8*
  %11303 = load i64, i64* %PC
  %11304 = add i64 %11303, 4
  store i64 %11304, i64* %PC
  %11305 = bitcast i8* %11301 to double*
  %11306 = load double, double* %11305, align 1
  %11307 = getelementptr inbounds i8, i8* %11301, i64 8
  %11308 = bitcast i8* %11307 to i64*
  %11309 = load i64, i64* %11308, align 1
  %11310 = bitcast i8* %11302 to double*
  %11311 = load double, double* %11310, align 1
  %11312 = fmul double %11306, %11311
  %11313 = bitcast i8* %11300 to double*
  store double %11312, double* %11313, align 1, !tbaa !2451
  %11314 = getelementptr inbounds i8, i8* %11300, i64 8
  %11315 = bitcast i8* %11314 to i64*
  store i64 %11309, i64* %11315, align 1, !tbaa !2451
  %11316 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11317 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11318 = load i64, i64* %PC
  %11319 = add i64 %11318, 9
  store i64 %11319, i64* %PC
  %11320 = bitcast i8* %11317 to double*
  %11321 = load double, double* %11320, align 1
  %11322 = getelementptr inbounds i8, i8* %11317, i64 8
  %11323 = bitcast i8* %11322 to i64*
  %11324 = load i64, i64* %11323, align 1
  %11325 = load double, double* bitcast (%two_type* @two to double*)
  %11326 = fdiv double %11321, %11325
  %11327 = bitcast i8* %11316 to double*
  store double %11326, double* %11327, align 1, !tbaa !2451
  %11328 = getelementptr inbounds i8, i8* %11316, i64 8
  %11329 = bitcast i8* %11328 to i64*
  store i64 %11324, i64* %11329, align 1, !tbaa !2451
  %11330 = bitcast %union.vec128_t* %XMM1 to i8*
  %11331 = load i64, i64* %PC
  %11332 = add i64 %11331, 9
  store i64 %11332, i64* %PC
  %11333 = bitcast i8* %11330 to double*
  %11334 = load double, double* %11333, align 1
  store double %11334, double* bitcast (%sa_type* @sa to double*)
  %11335 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11336 = load i64, i64* %PC
  %11337 = add i64 %11336, 9
  store i64 %11337, i64* %PC
  %11338 = load double, double* bitcast (%piref_type* @piref to double*)
  %11339 = bitcast i8* %11335 to double*
  store double %11338, double* %11339, align 1, !tbaa !2451
  %11340 = getelementptr inbounds i8, i8* %11335, i64 8
  %11341 = bitcast i8* %11340 to double*
  store double 0.000000e+00, double* %11341, align 1, !tbaa !2451
  %11342 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11343 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11344 = load i64, i64* %PC
  %11345 = add i64 %11344, 9
  store i64 %11345, i64* %PC
  %11346 = bitcast i8* %11343 to double*
  %11347 = load double, double* %11346, align 1
  %11348 = getelementptr inbounds i8, i8* %11343, i64 8
  %11349 = bitcast i8* %11348 to i64*
  %11350 = load i64, i64* %11349, align 1
  %11351 = load double, double* bitcast (%three_type* @three to double*)
  %11352 = fdiv double %11347, %11351
  %11353 = bitcast i8* %11342 to double*
  store double %11352, double* %11353, align 1, !tbaa !2451
  %11354 = getelementptr inbounds i8, i8* %11342, i64 8
  %11355 = bitcast i8* %11354 to i64*
  store i64 %11350, i64* %11355, align 1, !tbaa !2451
  %11356 = load i64, i64* %RBP
  %11357 = sub i64 %11356, 24
  %11358 = bitcast %union.vec128_t* %XMM1 to i8*
  %11359 = load i64, i64* %PC
  %11360 = add i64 %11359, 5
  store i64 %11360, i64* %PC
  %11361 = bitcast i8* %11358 to double*
  %11362 = load double, double* %11361, align 1
  %11363 = inttoptr i64 %11357 to double*
  store double %11362, double* %11363
  %11364 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11365 = load i64, i64* %RBP
  %11366 = sub i64 %11365, 24
  %11367 = load i64, i64* %PC
  %11368 = add i64 %11367, 5
  store i64 %11368, i64* %PC
  %11369 = inttoptr i64 %11366 to double*
  %11370 = load double, double* %11369
  %11371 = bitcast i8* %11364 to double*
  store double %11370, double* %11371, align 1, !tbaa !2451
  %11372 = getelementptr inbounds i8, i8* %11364, i64 8
  %11373 = bitcast i8* %11372 to double*
  store double 0.000000e+00, double* %11373, align 1, !tbaa !2451
  %11374 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11375 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11376 = load i64, i64* %RBP
  %11377 = sub i64 %11376, 24
  %11378 = load i64, i64* %PC
  %11379 = add i64 %11378, 5
  store i64 %11379, i64* %PC
  %11380 = bitcast i8* %11375 to double*
  %11381 = load double, double* %11380, align 1
  %11382 = getelementptr inbounds i8, i8* %11375, i64 8
  %11383 = bitcast i8* %11382 to i64*
  %11384 = load i64, i64* %11383, align 1
  %11385 = inttoptr i64 %11377 to double*
  %11386 = load double, double* %11385
  %11387 = fmul double %11381, %11386
  %11388 = bitcast i8* %11374 to double*
  store double %11387, double* %11388, align 1, !tbaa !2451
  %11389 = getelementptr inbounds i8, i8* %11374, i64 8
  %11390 = bitcast i8* %11389 to i64*
  store i64 %11384, i64* %11390, align 1, !tbaa !2451
  %11391 = load i64, i64* %RBP
  %11392 = sub i64 %11391, 40
  %11393 = bitcast %union.vec128_t* %XMM1 to i8*
  %11394 = load i64, i64* %PC
  %11395 = add i64 %11394, 5
  store i64 %11395, i64* %PC
  %11396 = bitcast i8* %11393 to double*
  %11397 = load double, double* %11396, align 1
  %11398 = inttoptr i64 %11392 to double*
  store double %11397, double* %11398
  %11399 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11400 = load i64, i64* %RBP
  %11401 = sub i64 %11400, 24
  %11402 = load i64, i64* %PC
  %11403 = add i64 %11402, 5
  store i64 %11403, i64* %PC
  %11404 = inttoptr i64 %11401 to double*
  %11405 = load double, double* %11404
  %11406 = bitcast i8* %11399 to double*
  store double %11405, double* %11406, align 1, !tbaa !2451
  %11407 = getelementptr inbounds i8, i8* %11399, i64 8
  %11408 = bitcast i8* %11407 to double*
  store double 0.000000e+00, double* %11408, align 1, !tbaa !2451
  %11409 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11410 = load i64, i64* %PC
  %11411 = add i64 %11410, 9
  store i64 %11411, i64* %PC
  %11412 = load double, double* bitcast (%A6_type* @A6 to double*)
  %11413 = bitcast i8* %11409 to double*
  store double %11412, double* %11413, align 1, !tbaa !2451
  %11414 = getelementptr inbounds i8, i8* %11409, i64 8
  %11415 = bitcast i8* %11414 to double*
  store double 0.000000e+00, double* %11415, align 1, !tbaa !2451
  %11416 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11417 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11418 = load i64, i64* %RBP
  %11419 = sub i64 %11418, 40
  %11420 = load i64, i64* %PC
  %11421 = add i64 %11420, 5
  store i64 %11421, i64* %PC
  %11422 = bitcast i8* %11417 to double*
  %11423 = load double, double* %11422, align 1
  %11424 = getelementptr inbounds i8, i8* %11417, i64 8
  %11425 = bitcast i8* %11424 to i64*
  %11426 = load i64, i64* %11425, align 1
  %11427 = inttoptr i64 %11419 to double*
  %11428 = load double, double* %11427
  %11429 = fmul double %11423, %11428
  %11430 = bitcast i8* %11416 to double*
  store double %11429, double* %11430, align 1, !tbaa !2451
  %11431 = getelementptr inbounds i8, i8* %11416, i64 8
  %11432 = bitcast i8* %11431 to i64*
  store i64 %11426, i64* %11432, align 1, !tbaa !2451
  %11433 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11434 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11435 = load i64, i64* %PC
  %11436 = add i64 %11435, 9
  store i64 %11436, i64* %PC
  %11437 = bitcast i8* %11434 to double*
  %11438 = load double, double* %11437, align 1
  %11439 = getelementptr inbounds i8, i8* %11434, i64 8
  %11440 = bitcast i8* %11439 to i64*
  %11441 = load i64, i64* %11440, align 1
  %11442 = load double, double* bitcast (%A5_type* @A5 to double*)
  %11443 = fadd double %11438, %11442
  %11444 = bitcast i8* %11433 to double*
  store double %11443, double* %11444, align 1, !tbaa !2451
  %11445 = getelementptr inbounds i8, i8* %11433, i64 8
  %11446 = bitcast i8* %11445 to i64*
  store i64 %11441, i64* %11446, align 1, !tbaa !2451
  %11447 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11448 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11449 = load i64, i64* %RBP
  %11450 = sub i64 %11449, 40
  %11451 = load i64, i64* %PC
  %11452 = add i64 %11451, 5
  store i64 %11452, i64* %PC
  %11453 = bitcast i8* %11448 to double*
  %11454 = load double, double* %11453, align 1
  %11455 = getelementptr inbounds i8, i8* %11448, i64 8
  %11456 = bitcast i8* %11455 to i64*
  %11457 = load i64, i64* %11456, align 1
  %11458 = inttoptr i64 %11450 to double*
  %11459 = load double, double* %11458
  %11460 = fmul double %11454, %11459
  %11461 = bitcast i8* %11447 to double*
  store double %11460, double* %11461, align 1, !tbaa !2451
  %11462 = getelementptr inbounds i8, i8* %11447, i64 8
  %11463 = bitcast i8* %11462 to i64*
  store i64 %11457, i64* %11463, align 1, !tbaa !2451
  %11464 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11465 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11466 = load i64, i64* %PC
  %11467 = add i64 %11466, 9
  store i64 %11467, i64* %PC
  %11468 = bitcast i8* %11465 to double*
  %11469 = load double, double* %11468, align 1
  %11470 = getelementptr inbounds i8, i8* %11465, i64 8
  %11471 = bitcast i8* %11470 to i64*
  %11472 = load i64, i64* %11471, align 1
  %11473 = load double, double* bitcast (%A4_type* @A4 to double*)
  %11474 = fadd double %11469, %11473
  %11475 = bitcast i8* %11464 to double*
  store double %11474, double* %11475, align 1, !tbaa !2451
  %11476 = getelementptr inbounds i8, i8* %11464, i64 8
  %11477 = bitcast i8* %11476 to i64*
  store i64 %11472, i64* %11477, align 1, !tbaa !2451
  %11478 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11479 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11480 = load i64, i64* %RBP
  %11481 = sub i64 %11480, 40
  %11482 = load i64, i64* %PC
  %11483 = add i64 %11482, 5
  store i64 %11483, i64* %PC
  %11484 = bitcast i8* %11479 to double*
  %11485 = load double, double* %11484, align 1
  %11486 = getelementptr inbounds i8, i8* %11479, i64 8
  %11487 = bitcast i8* %11486 to i64*
  %11488 = load i64, i64* %11487, align 1
  %11489 = inttoptr i64 %11481 to double*
  %11490 = load double, double* %11489
  %11491 = fmul double %11485, %11490
  %11492 = bitcast i8* %11478 to double*
  store double %11491, double* %11492, align 1, !tbaa !2451
  %11493 = getelementptr inbounds i8, i8* %11478, i64 8
  %11494 = bitcast i8* %11493 to i64*
  store i64 %11488, i64* %11494, align 1, !tbaa !2451
  %11495 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11496 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11497 = load i64, i64* %PC
  %11498 = add i64 %11497, 9
  store i64 %11498, i64* %PC
  %11499 = bitcast i8* %11496 to double*
  %11500 = load double, double* %11499, align 1
  %11501 = getelementptr inbounds i8, i8* %11496, i64 8
  %11502 = bitcast i8* %11501 to i64*
  %11503 = load i64, i64* %11502, align 1
  %11504 = load double, double* bitcast (%A3_type* @A3 to double*)
  %11505 = fadd double %11500, %11504
  %11506 = bitcast i8* %11495 to double*
  store double %11505, double* %11506, align 1, !tbaa !2451
  %11507 = getelementptr inbounds i8, i8* %11495, i64 8
  %11508 = bitcast i8* %11507 to i64*
  store i64 %11503, i64* %11508, align 1, !tbaa !2451
  %11509 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11510 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11511 = load i64, i64* %RBP
  %11512 = sub i64 %11511, 40
  %11513 = load i64, i64* %PC
  %11514 = add i64 %11513, 5
  store i64 %11514, i64* %PC
  %11515 = bitcast i8* %11510 to double*
  %11516 = load double, double* %11515, align 1
  %11517 = getelementptr inbounds i8, i8* %11510, i64 8
  %11518 = bitcast i8* %11517 to i64*
  %11519 = load i64, i64* %11518, align 1
  %11520 = inttoptr i64 %11512 to double*
  %11521 = load double, double* %11520
  %11522 = fmul double %11516, %11521
  %11523 = bitcast i8* %11509 to double*
  store double %11522, double* %11523, align 1, !tbaa !2451
  %11524 = getelementptr inbounds i8, i8* %11509, i64 8
  %11525 = bitcast i8* %11524 to i64*
  store i64 %11519, i64* %11525, align 1, !tbaa !2451
  %11526 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11527 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11528 = load i64, i64* %PC
  %11529 = add i64 %11528, 9
  store i64 %11529, i64* %PC
  %11530 = bitcast i8* %11527 to double*
  %11531 = load double, double* %11530, align 1
  %11532 = getelementptr inbounds i8, i8* %11527, i64 8
  %11533 = bitcast i8* %11532 to i64*
  %11534 = load i64, i64* %11533, align 1
  %11535 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %11536 = fadd double %11531, %11535
  %11537 = bitcast i8* %11526 to double*
  store double %11536, double* %11537, align 1, !tbaa !2451
  %11538 = getelementptr inbounds i8, i8* %11526, i64 8
  %11539 = bitcast i8* %11538 to i64*
  store i64 %11534, i64* %11539, align 1, !tbaa !2451
  %11540 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11541 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11542 = load i64, i64* %RBP
  %11543 = sub i64 %11542, 40
  %11544 = load i64, i64* %PC
  %11545 = add i64 %11544, 5
  store i64 %11545, i64* %PC
  %11546 = bitcast i8* %11541 to double*
  %11547 = load double, double* %11546, align 1
  %11548 = getelementptr inbounds i8, i8* %11541, i64 8
  %11549 = bitcast i8* %11548 to i64*
  %11550 = load i64, i64* %11549, align 1
  %11551 = inttoptr i64 %11543 to double*
  %11552 = load double, double* %11551
  %11553 = fmul double %11547, %11552
  %11554 = bitcast i8* %11540 to double*
  store double %11553, double* %11554, align 1, !tbaa !2451
  %11555 = getelementptr inbounds i8, i8* %11540, i64 8
  %11556 = bitcast i8* %11555 to i64*
  store i64 %11550, i64* %11556, align 1, !tbaa !2451
  %11557 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11558 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11559 = load i64, i64* %PC
  %11560 = add i64 %11559, 9
  store i64 %11560, i64* %PC
  %11561 = bitcast i8* %11558 to double*
  %11562 = load double, double* %11561, align 1
  %11563 = getelementptr inbounds i8, i8* %11558, i64 8
  %11564 = bitcast i8* %11563 to i64*
  %11565 = load i64, i64* %11564, align 1
  %11566 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %11567 = fadd double %11562, %11566
  %11568 = bitcast i8* %11557 to double*
  store double %11567, double* %11568, align 1, !tbaa !2451
  %11569 = getelementptr inbounds i8, i8* %11557, i64 8
  %11570 = bitcast i8* %11569 to i64*
  store i64 %11565, i64* %11570, align 1, !tbaa !2451
  %11571 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11572 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11573 = load i64, i64* %RBP
  %11574 = sub i64 %11573, 40
  %11575 = load i64, i64* %PC
  %11576 = add i64 %11575, 5
  store i64 %11576, i64* %PC
  %11577 = bitcast i8* %11572 to double*
  %11578 = load double, double* %11577, align 1
  %11579 = getelementptr inbounds i8, i8* %11572, i64 8
  %11580 = bitcast i8* %11579 to i64*
  %11581 = load i64, i64* %11580, align 1
  %11582 = inttoptr i64 %11574 to double*
  %11583 = load double, double* %11582
  %11584 = fmul double %11578, %11583
  %11585 = bitcast i8* %11571 to double*
  store double %11584, double* %11585, align 1, !tbaa !2451
  %11586 = getelementptr inbounds i8, i8* %11571, i64 8
  %11587 = bitcast i8* %11586 to i64*
  store i64 %11581, i64* %11587, align 1, !tbaa !2451
  %11588 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11589 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11590 = load i64, i64* %PC
  %11591 = add i64 %11590, 9
  store i64 %11591, i64* %PC
  %11592 = bitcast i8* %11589 to double*
  %11593 = load double, double* %11592, align 1
  %11594 = getelementptr inbounds i8, i8* %11589, i64 8
  %11595 = bitcast i8* %11594 to i64*
  %11596 = load i64, i64* %11595, align 1
  %11597 = load double, double* bitcast (%A0_type* @A0 to double*)
  %11598 = fadd double %11593, %11597
  %11599 = bitcast i8* %11588 to double*
  store double %11598, double* %11599, align 1, !tbaa !2451
  %11600 = getelementptr inbounds i8, i8* %11588, i64 8
  %11601 = bitcast i8* %11600 to i64*
  store i64 %11596, i64* %11601, align 1, !tbaa !2451
  %11602 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11603 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11604 = bitcast %union.vec128_t* %XMM2 to i8*
  %11605 = load i64, i64* %PC
  %11606 = add i64 %11605, 4
  store i64 %11606, i64* %PC
  %11607 = bitcast i8* %11603 to double*
  %11608 = load double, double* %11607, align 1
  %11609 = getelementptr inbounds i8, i8* %11603, i64 8
  %11610 = bitcast i8* %11609 to i64*
  %11611 = load i64, i64* %11610, align 1
  %11612 = bitcast i8* %11604 to double*
  %11613 = load double, double* %11612, align 1
  %11614 = fmul double %11608, %11613
  %11615 = bitcast i8* %11602 to double*
  store double %11614, double* %11615, align 1, !tbaa !2451
  %11616 = getelementptr inbounds i8, i8* %11602, i64 8
  %11617 = bitcast i8* %11616 to i64*
  store i64 %11611, i64* %11617, align 1, !tbaa !2451
  %11618 = bitcast %union.vec128_t* %XMM1 to i8*
  %11619 = load i64, i64* %PC
  %11620 = add i64 %11619, 9
  store i64 %11620, i64* %PC
  %11621 = bitcast i8* %11618 to double*
  %11622 = load double, double* %11621, align 1
  store double %11622, double* bitcast (%sb_type* @sb to double*)
  %11623 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11624 = load i64, i64* %PC
  %11625 = add i64 %11624, 9
  store i64 %11625, i64* %PC
  %11626 = load double, double* bitcast (%sa_type* @sa to double*)
  %11627 = bitcast i8* %11623 to double*
  store double %11626, double* %11627, align 1, !tbaa !2451
  %11628 = getelementptr inbounds i8, i8* %11623, i64 8
  %11629 = bitcast i8* %11628 to double*
  store double 0.000000e+00, double* %11629, align 1, !tbaa !2451
  %11630 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11631 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11632 = load i64, i64* %PC
  %11633 = add i64 %11632, 9
  store i64 %11633, i64* %PC
  %11634 = bitcast i8* %11631 to double*
  %11635 = load double, double* %11634, align 1
  %11636 = getelementptr inbounds i8, i8* %11631, i64 8
  %11637 = bitcast i8* %11636 to i64*
  %11638 = load i64, i64* %11637, align 1
  %11639 = load double, double* bitcast (%sb_type* @sb to double*)
  %11640 = fsub double %11635, %11639
  %11641 = bitcast i8* %11630 to double*
  store double %11640, double* %11641, align 1, !tbaa !2451
  %11642 = getelementptr inbounds i8, i8* %11630, i64 8
  %11643 = bitcast i8* %11642 to i64*
  store i64 %11638, i64* %11643, align 1, !tbaa !2451
  %11644 = bitcast %union.vec128_t* %XMM1 to i8*
  %11645 = load i64, i64* %PC
  %11646 = add i64 %11645, 9
  store i64 %11646, i64* %PC
  %11647 = bitcast i8* %11644 to double*
  %11648 = load double, double* %11647, align 1
  store double %11648, double* bitcast (%sc_type* @sc to double*)
  %11649 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11650 = load i64, i64* %PC
  %11651 = add i64 %11650, 9
  store i64 %11651, i64* %PC
  %11652 = load double, double* bitcast (%one_type* @one to double*)
  %11653 = bitcast i8* %11649 to double*
  store double %11652, double* %11653, align 1, !tbaa !2451
  %11654 = getelementptr inbounds i8, i8* %11649, i64 8
  %11655 = bitcast i8* %11654 to double*
  store double 0.000000e+00, double* %11655, align 1, !tbaa !2451
  %11656 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11657 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11658 = load i64, i64* %PC
  %11659 = add i64 %11658, 9
  store i64 %11659, i64* %PC
  %11660 = bitcast i8* %11657 to double*
  %11661 = load double, double* %11660, align 1
  %11662 = getelementptr inbounds i8, i8* %11657, i64 8
  %11663 = bitcast i8* %11662 to i64*
  %11664 = load i64, i64* %11663, align 1
  %11665 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 104) to double*)
  %11666 = fdiv double %11661, %11665
  %11667 = bitcast i8* %11656 to double*
  store double %11666, double* %11667, align 1, !tbaa !2451
  %11668 = getelementptr inbounds i8, i8* %11656, i64 8
  %11669 = bitcast i8* %11668 to i64*
  store i64 %11664, i64* %11669, align 1, !tbaa !2451
  %11670 = bitcast %union.vec128_t* %XMM1 to i8*
  %11671 = load i64, i64* %PC
  %11672 = add i64 %11671, 9
  store i64 %11672, i64* %PC
  %11673 = bitcast i8* %11670 to double*
  %11674 = load double, double* %11673, align 1
  store double %11674, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 112) to double*)
  %11675 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11676 = bitcast %union.vec128_t* %XMM0 to i8*
  %11677 = load i64, i64* %PC
  %11678 = add i64 %11677, 3
  store i64 %11678, i64* %PC
  %11679 = bitcast i8* %11676 to <2 x i32>*
  %11680 = load <2 x i32>, <2 x i32>* %11679, align 1
  %11681 = getelementptr inbounds i8, i8* %11676, i64 8
  %11682 = bitcast i8* %11681 to <2 x i32>*
  %11683 = load <2 x i32>, <2 x i32>* %11682, align 1
  %11684 = extractelement <2 x i32> %11680, i32 0
  %11685 = bitcast i8* %11675 to i32*
  store i32 %11684, i32* %11685, align 1, !tbaa !2455
  %11686 = extractelement <2 x i32> %11680, i32 1
  %11687 = getelementptr inbounds i8, i8* %11675, i64 4
  %11688 = bitcast i8* %11687 to i32*
  store i32 %11686, i32* %11688, align 1, !tbaa !2455
  %11689 = extractelement <2 x i32> %11683, i32 0
  %11690 = getelementptr inbounds i8, i8* %11675, i64 8
  %11691 = bitcast i8* %11690 to i32*
  store i32 %11689, i32* %11691, align 1, !tbaa !2455
  %11692 = extractelement <2 x i32> %11683, i32 1
  %11693 = getelementptr inbounds i8, i8* %11675, i64 12
  %11694 = bitcast i8* %11693 to i32*
  store i32 %11692, i32* %11694, align 1, !tbaa !2455
  %11695 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11696 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11697 = load i64, i64* %PC
  %11698 = add i64 %11697, 9
  store i64 %11698, i64* %PC
  %11699 = bitcast i8* %11696 to double*
  %11700 = load double, double* %11699, align 1
  %11701 = getelementptr inbounds i8, i8* %11696, i64 8
  %11702 = bitcast i8* %11701 to i64*
  %11703 = load i64, i64* %11702, align 1
  %11704 = load double, double* bitcast (%sc_type* @sc to double*)
  %11705 = fmul double %11700, %11704
  %11706 = bitcast i8* %11695 to double*
  store double %11705, double* %11706, align 1, !tbaa !2451
  %11707 = getelementptr inbounds i8, i8* %11695, i64 8
  %11708 = bitcast i8* %11707 to i64*
  store i64 %11703, i64* %11708, align 1, !tbaa !2451
  %11709 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11710 = bitcast %union.vec128_t* %XMM0 to i8*
  %11711 = load i64, i64* %PC
  %11712 = add i64 %11711, 3
  store i64 %11712, i64* %PC
  %11713 = bitcast i8* %11710 to <2 x i32>*
  %11714 = load <2 x i32>, <2 x i32>* %11713, align 1
  %11715 = getelementptr inbounds i8, i8* %11710, i64 8
  %11716 = bitcast i8* %11715 to <2 x i32>*
  %11717 = load <2 x i32>, <2 x i32>* %11716, align 1
  %11718 = extractelement <2 x i32> %11714, i32 0
  %11719 = bitcast i8* %11709 to i32*
  store i32 %11718, i32* %11719, align 1, !tbaa !2455
  %11720 = extractelement <2 x i32> %11714, i32 1
  %11721 = getelementptr inbounds i8, i8* %11709, i64 4
  %11722 = bitcast i8* %11721 to i32*
  store i32 %11720, i32* %11722, align 1, !tbaa !2455
  %11723 = extractelement <2 x i32> %11717, i32 0
  %11724 = getelementptr inbounds i8, i8* %11709, i64 8
  %11725 = bitcast i8* %11724 to i32*
  store i32 %11723, i32* %11725, align 1, !tbaa !2455
  %11726 = extractelement <2 x i32> %11717, i32 1
  %11727 = getelementptr inbounds i8, i8* %11709, i64 12
  %11728 = bitcast i8* %11727 to i32*
  store i32 %11726, i32* %11728, align 1, !tbaa !2455
  %11729 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11730 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11731 = load i64, i64* %PC
  %11732 = add i64 %11731, 9
  store i64 %11732, i64* %PC
  %11733 = bitcast i8* %11730 to double*
  %11734 = load double, double* %11733, align 1
  %11735 = getelementptr inbounds i8, i8* %11730, i64 8
  %11736 = bitcast i8* %11735 to i64*
  %11737 = load i64, i64* %11736, align 1
  %11738 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %11739 = fmul double %11734, %11738
  %11740 = bitcast i8* %11729 to double*
  store double %11739, double* %11740, align 1, !tbaa !2451
  %11741 = getelementptr inbounds i8, i8* %11729, i64 8
  %11742 = bitcast i8* %11741 to i64*
  store i64 %11737, i64* %11742, align 1, !tbaa !2451
  %11743 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11744 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11745 = load i64, i64* %PC
  %11746 = add i64 %11745, 9
  store i64 %11746, i64* %PC
  %11747 = bitcast i8* %11744 to double*
  %11748 = load double, double* %11747, align 1
  %11749 = getelementptr inbounds i8, i8* %11744, i64 8
  %11750 = bitcast i8* %11749 to i64*
  %11751 = load i64, i64* %11750, align 1
  %11752 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 112) to double*)
  %11753 = fmul double %11748, %11752
  %11754 = bitcast i8* %11743 to double*
  store double %11753, double* %11754, align 1, !tbaa !2451
  %11755 = getelementptr inbounds i8, i8* %11743, i64 8
  %11756 = bitcast i8* %11755 to i64*
  store i64 %11751, i64* %11756, align 1, !tbaa !2451
  %11757 = load i64, i64* %RBP
  %11758 = sub i64 %11757, 208
  %11759 = bitcast %union.vec128_t* %XMM0 to i8*
  %11760 = load i64, i64* %PC
  %11761 = add i64 %11760, 8
  store i64 %11761, i64* %PC
  %11762 = bitcast i8* %11759 to double*
  %11763 = load double, double* %11762, align 1
  %11764 = inttoptr i64 %11758 to double*
  store double %11763, double* %11764
  %11765 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11766 = bitcast %union.vec128_t* %XMM1 to i8*
  %11767 = load i64, i64* %PC
  %11768 = add i64 %11767, 3
  store i64 %11768, i64* %PC
  %11769 = bitcast i8* %11766 to <2 x i32>*
  %11770 = load <2 x i32>, <2 x i32>* %11769, align 1
  %11771 = getelementptr inbounds i8, i8* %11766, i64 8
  %11772 = bitcast i8* %11771 to <2 x i32>*
  %11773 = load <2 x i32>, <2 x i32>* %11772, align 1
  %11774 = extractelement <2 x i32> %11770, i32 0
  %11775 = bitcast i8* %11765 to i32*
  store i32 %11774, i32* %11775, align 1, !tbaa !2455
  %11776 = extractelement <2 x i32> %11770, i32 1
  %11777 = getelementptr inbounds i8, i8* %11765, i64 4
  %11778 = bitcast i8* %11777 to i32*
  store i32 %11776, i32* %11778, align 1, !tbaa !2455
  %11779 = extractelement <2 x i32> %11773, i32 0
  %11780 = getelementptr inbounds i8, i8* %11765, i64 8
  %11781 = bitcast i8* %11780 to i32*
  store i32 %11779, i32* %11781, align 1, !tbaa !2455
  %11782 = extractelement <2 x i32> %11773, i32 1
  %11783 = getelementptr inbounds i8, i8* %11765, i64 12
  %11784 = bitcast i8* %11783 to i32*
  store i32 %11782, i32* %11784, align 1, !tbaa !2455
  %11785 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11786 = bitcast %union.vec128_t* %XMM2 to i8*
  %11787 = load i64, i64* %PC
  %11788 = add i64 %11787, 3
  store i64 %11788, i64* %PC
  %11789 = bitcast i8* %11786 to <2 x i32>*
  %11790 = load <2 x i32>, <2 x i32>* %11789, align 1
  %11791 = getelementptr inbounds i8, i8* %11786, i64 8
  %11792 = bitcast i8* %11791 to <2 x i32>*
  %11793 = load <2 x i32>, <2 x i32>* %11792, align 1
  %11794 = extractelement <2 x i32> %11790, i32 0
  %11795 = bitcast i8* %11785 to i32*
  store i32 %11794, i32* %11795, align 1, !tbaa !2455
  %11796 = extractelement <2 x i32> %11790, i32 1
  %11797 = getelementptr inbounds i8, i8* %11785, i64 4
  %11798 = bitcast i8* %11797 to i32*
  store i32 %11796, i32* %11798, align 1, !tbaa !2455
  %11799 = extractelement <2 x i32> %11793, i32 0
  %11800 = getelementptr inbounds i8, i8* %11785, i64 8
  %11801 = bitcast i8* %11800 to i32*
  store i32 %11799, i32* %11801, align 1, !tbaa !2455
  %11802 = extractelement <2 x i32> %11793, i32 1
  %11803 = getelementptr inbounds i8, i8* %11785, i64 12
  %11804 = bitcast i8* %11803 to i32*
  store i32 %11802, i32* %11804, align 1, !tbaa !2455
  %11805 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11806 = load i64, i64* %RBP
  %11807 = sub i64 %11806, 208
  %11808 = load i64, i64* %PC
  %11809 = add i64 %11808, 8
  store i64 %11809, i64* %PC
  %11810 = inttoptr i64 %11807 to double*
  %11811 = load double, double* %11810
  %11812 = bitcast i8* %11805 to double*
  store double %11811, double* %11812, align 1, !tbaa !2451
  %11813 = getelementptr inbounds i8, i8* %11805, i64 8
  %11814 = bitcast i8* %11813 to double*
  store double 0.000000e+00, double* %11814, align 1, !tbaa !2451
  %11815 = load i64, i64* %RBP
  %11816 = sub i64 %11815, 212
  %11817 = load i32, i32* %EAX
  %11818 = zext i32 %11817 to i64
  %11819 = load i64, i64* %PC
  %11820 = add i64 %11819, 6
  store i64 %11820, i64* %PC
  %11821 = inttoptr i64 %11816 to i32*
  store i32 %11817, i32* %11821
  %11822 = load i64, i64* %PC
  %11823 = add i64 %11822, 2
  store i64 %11823, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2453
  %11824 = load i64, i64* %PC
  %11825 = sub i64 %11824, 4199
  %11826 = load i64, i64* %PC
  %11827 = add i64 %11826, 5
  %11828 = load i64, i64* %PC
  %11829 = add i64 %11828, 5
  store i64 %11829, i64* %PC
  %11830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11831 = load i64, i64* %11830, align 8, !tbaa !2428
  %11832 = add i64 %11831, -8
  %11833 = inttoptr i64 %11832 to i64*
  store i64 %11827, i64* %11833
  store i64 %11832, i64* %11830, align 8, !tbaa !2428
  %11834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11825, i64* %11834, align 8, !tbaa !2428
  %11835 = load i64, i64* %PC
  %11836 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %11835, %struct.Memory* %10837)
  %11837 = load i64, i64* %PC
  %11838 = add i64 %11837, 10
  store i64 %11838, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %11839 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11840 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11841 = bitcast %union.vec128_t* %XMM0 to i8*
  %11842 = load i64, i64* %PC
  %11843 = add i64 %11842, 3
  store i64 %11843, i64* %PC
  %11844 = bitcast i8* %11840 to i64*
  %11845 = load i64, i64* %11844, align 1
  %11846 = getelementptr inbounds i8, i8* %11840, i64 8
  %11847 = bitcast i8* %11846 to i64*
  %11848 = load i64, i64* %11847, align 1
  %11849 = bitcast i8* %11841 to i64*
  %11850 = load i64, i64* %11849, align 1
  %11851 = getelementptr inbounds i8, i8* %11841, i64 8
  %11852 = bitcast i8* %11851 to i64*
  %11853 = load i64, i64* %11852, align 1
  %11854 = xor i64 %11850, %11845
  %11855 = xor i64 %11853, %11848
  %11856 = trunc i64 %11854 to i32
  %11857 = lshr i64 %11854, 32
  %11858 = trunc i64 %11857 to i32
  %11859 = bitcast i8* %11839 to i32*
  store i32 %11856, i32* %11859, align 1, !tbaa !2454
  %11860 = getelementptr inbounds i8, i8* %11839, i64 4
  %11861 = bitcast i8* %11860 to i32*
  store i32 %11858, i32* %11861, align 1, !tbaa !2454
  %11862 = trunc i64 %11855 to i32
  %11863 = getelementptr inbounds i8, i8* %11839, i64 8
  %11864 = bitcast i8* %11863 to i32*
  store i32 %11862, i32* %11864, align 1, !tbaa !2454
  %11865 = lshr i64 %11855, 32
  %11866 = trunc i64 %11865 to i32
  %11867 = getelementptr inbounds i8, i8* %11839, i64 12
  %11868 = bitcast i8* %11867 to i32*
  store i32 %11866, i32* %11868, align 1, !tbaa !2454
  %11869 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11870 = load i64, i64* %PC
  %11871 = add i64 %11870, 9
  store i64 %11871, i64* %PC
  %11872 = load double, double* bitcast (%piref_type* @piref to double*)
  %11873 = bitcast i8* %11869 to double*
  store double %11872, double* %11873, align 1, !tbaa !2451
  %11874 = getelementptr inbounds i8, i8* %11869, i64 8
  %11875 = bitcast i8* %11874 to double*
  store double 0.000000e+00, double* %11875, align 1, !tbaa !2451
  %11876 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11877 = load i64, i64* %PC
  %11878 = add i64 %11877, 9
  store i64 %11878, i64* %PC
  %11879 = load double, double* bitcast (%three_type* @three to double*)
  %11880 = bitcast i8* %11876 to double*
  store double %11879, double* %11880, align 1, !tbaa !2451
  %11881 = getelementptr inbounds i8, i8* %11876, i64 8
  %11882 = bitcast i8* %11881 to double*
  store double 0.000000e+00, double* %11882, align 1, !tbaa !2451
  %11883 = load i64, i64* %RBP
  %11884 = sub i64 %11883, 80
  %11885 = load i64, i64* %PC
  %11886 = add i64 %11885, 4
  store i64 %11886, i64* %PC
  %11887 = inttoptr i64 %11884 to i64*
  %11888 = load i64, i64* %11887
  store i64 %11888, i64* %RCX, align 8, !tbaa !2428
  %11889 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11890 = load i64, i64* %RCX
  %11891 = load i64, i64* %PC
  %11892 = add i64 %11891, 5
  store i64 %11892, i64* %PC
  %11893 = sitofp i64 %11890 to double
  %11894 = bitcast i8* %11889 to double*
  store double %11893, double* %11894, align 1, !tbaa !2451
  %11895 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11896 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11897 = bitcast %union.vec128_t* %XMM3 to i8*
  %11898 = load i64, i64* %PC
  %11899 = add i64 %11898, 4
  store i64 %11899, i64* %PC
  %11900 = bitcast i8* %11896 to double*
  %11901 = load double, double* %11900, align 1
  %11902 = getelementptr inbounds i8, i8* %11896, i64 8
  %11903 = bitcast i8* %11902 to i64*
  %11904 = load i64, i64* %11903, align 1
  %11905 = bitcast i8* %11897 to double*
  %11906 = load double, double* %11905, align 1
  %11907 = fmul double %11901, %11906
  %11908 = bitcast i8* %11895 to double*
  store double %11907, double* %11908, align 1, !tbaa !2451
  %11909 = getelementptr inbounds i8, i8* %11895, i64 8
  %11910 = bitcast i8* %11909 to i64*
  store i64 %11904, i64* %11910, align 1, !tbaa !2451
  %11911 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11912 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11913 = bitcast %union.vec128_t* %XMM2 to i8*
  %11914 = load i64, i64* %PC
  %11915 = add i64 %11914, 4
  store i64 %11915, i64* %PC
  %11916 = bitcast i8* %11912 to double*
  %11917 = load double, double* %11916, align 1
  %11918 = getelementptr inbounds i8, i8* %11912, i64 8
  %11919 = bitcast i8* %11918 to i64*
  %11920 = load i64, i64* %11919, align 1
  %11921 = bitcast i8* %11913 to double*
  %11922 = load double, double* %11921, align 1
  %11923 = fdiv double %11917, %11922
  %11924 = bitcast i8* %11911 to double*
  store double %11923, double* %11924, align 1, !tbaa !2451
  %11925 = getelementptr inbounds i8, i8* %11911, i64 8
  %11926 = bitcast i8* %11925 to i64*
  store i64 %11920, i64* %11926, align 1, !tbaa !2451
  %11927 = load i64, i64* %RBP
  %11928 = sub i64 %11927, 48
  %11929 = bitcast %union.vec128_t* %XMM1 to i8*
  %11930 = load i64, i64* %PC
  %11931 = add i64 %11930, 5
  store i64 %11931, i64* %PC
  %11932 = bitcast i8* %11929 to double*
  %11933 = load double, double* %11932, align 1
  %11934 = inttoptr i64 %11928 to double*
  store double %11933, double* %11934
  %11935 = load i64, i64* %RBP
  %11936 = sub i64 %11935, 16
  %11937 = bitcast %union.vec128_t* %XMM0 to i8*
  %11938 = load i64, i64* %PC
  %11939 = add i64 %11938, 5
  store i64 %11939, i64* %PC
  %11940 = bitcast i8* %11937 to double*
  %11941 = load double, double* %11940, align 1
  %11942 = inttoptr i64 %11936 to double*
  store double %11941, double* %11942
  %11943 = load i64, i64* %RBP
  %11944 = sub i64 %11943, 32
  %11945 = bitcast %union.vec128_t* %XMM0 to i8*
  %11946 = load i64, i64* %PC
  %11947 = add i64 %11946, 5
  store i64 %11947, i64* %PC
  %11948 = bitcast i8* %11945 to double*
  %11949 = load double, double* %11948, align 1
  %11950 = inttoptr i64 %11944 to double*
  store double %11949, double* %11950
  %11951 = load i64, i64* %RBP
  %11952 = sub i64 %11951, 216
  %11953 = load i32, i32* %EAX
  %11954 = zext i32 %11953 to i64
  %11955 = load i64, i64* %PC
  %11956 = add i64 %11955, 6
  store i64 %11956, i64* %PC
  %11957 = inttoptr i64 %11952 to i32*
  store i32 %11953, i32* %11957
  %11958 = load i64, i64* %PC
  %11959 = add i64 %11958, 4367
  %11960 = load i64, i64* %PC
  %11961 = add i64 %11960, 5
  %11962 = load i64, i64* %PC
  %11963 = add i64 %11962, 5
  store i64 %11963, i64* %PC
  %11964 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11965 = load i64, i64* %11964, align 8, !tbaa !2428
  %11966 = add i64 %11965, -8
  %11967 = inttoptr i64 %11966 to i64*
  store i64 %11961, i64* %11967
  store i64 %11966, i64* %11964, align 8, !tbaa !2428
  %11968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11959, i64* %11968, align 8, !tbaa !2428
  %11969 = load i64, i64* %PC
  %11970 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %11969, %struct.Memory* %11836)
  %11971 = load i64, i64* %RBP
  %11972 = sub i64 %11971, 72
  %11973 = load i64, i64* %PC
  %11974 = add i64 %11973, 8
  store i64 %11974, i64* %PC
  %11975 = inttoptr i64 %11972 to i64*
  store i64 1, i64* %11975
  %11976 = load i64, i64* %RBP
  %11977 = sub i64 %11976, 220
  %11978 = load i32, i32* %EAX
  %11979 = zext i32 %11978 to i64
  %11980 = load i64, i64* %PC
  %11981 = add i64 %11980, 6
  store i64 %11981, i64* %PC
  %11982 = inttoptr i64 %11977 to i32*
  store i32 %11978, i32* %11982
  br label %block_4014f4

block_400689:                                     ; preds = %block_400802, %block_400540
  %MEMORY.9 = phi %struct.Memory* [ %391, %block_400540 ], [ %10277, %block_400802 ]
  %11983 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11984 = load i64, i64* %PC
  %11985 = add i64 %11984, 9
  store i64 %11985, i64* %PC
  %11986 = load double, double* bitcast (%sa_type* @sa to double*)
  %11987 = bitcast i8* %11983 to double*
  store double %11986, double* %11987, align 1, !tbaa !2451
  %11988 = getelementptr inbounds i8, i8* %11983, i64 8
  %11989 = bitcast i8* %11988 to double*
  store double 0.000000e+00, double* %11989, align 1, !tbaa !2451
  %11990 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11991 = load i64, i64* %PC
  %11992 = add i64 %11991, 9
  store i64 %11992, i64* %PC
  %11993 = load double, double* bitcast (%TLimit_type* @TLimit to double*)
  %11994 = bitcast i8* %11990 to double*
  store double %11993, double* %11994, align 1, !tbaa !2451
  %11995 = getelementptr inbounds i8, i8* %11990, i64 8
  %11996 = bitcast i8* %11995 to double*
  store double 0.000000e+00, double* %11996, align 1, !tbaa !2451
  %11997 = bitcast %union.vec128_t* %XMM1 to i8*
  %11998 = bitcast %union.vec128_t* %XMM0 to i8*
  %11999 = load i64, i64* %PC
  %12000 = add i64 %11999, 4
  store i64 %12000, i64* %PC
  %12001 = bitcast i8* %11997 to double*
  %12002 = load double, double* %12001, align 1
  %12003 = bitcast i8* %11998 to double*
  %12004 = load double, double* %12003, align 1
  %12005 = fcmp uno double %12002, %12004
  br i1 %12005, label %12006, label %12018

; <label>:12006:                                  ; preds = %block_400689
  %12007 = fadd double %12002, %12004
  %12008 = bitcast double %12007 to i64
  %12009 = and i64 %12008, 9221120237041090560
  %12010 = icmp eq i64 %12009, 9218868437227405312
  %12011 = and i64 %12008, 2251799813685247
  %12012 = icmp ne i64 %12011, 0
  %12013 = and i1 %12010, %12012
  br i1 %12013, label %12014, label %12024

; <label>:12014:                                  ; preds = %12006
  %12015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %12016 = load i64, i64* %12015, align 8, !tbaa !2428
  %12017 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12016, %struct.Memory* %MEMORY.9) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:12018:                                  ; preds = %block_400689
  %12019 = fcmp ogt double %12002, %12004
  br i1 %12019, label %12024, label %12020

; <label>:12020:                                  ; preds = %12018
  %12021 = fcmp olt double %12002, %12004
  br i1 %12021, label %12024, label %12022

; <label>:12022:                                  ; preds = %12020
  %12023 = fcmp oeq double %12002, %12004
  br i1 %12023, label %12024, label %12031

; <label>:12024:                                  ; preds = %12022, %12020, %12018, %12006
  %12025 = phi i8 [ 0, %12018 ], [ 0, %12020 ], [ 1, %12022 ], [ 1, %12006 ]
  %12026 = phi i8 [ 0, %12018 ], [ 0, %12020 ], [ 0, %12022 ], [ 1, %12006 ]
  %12027 = phi i8 [ 0, %12018 ], [ 1, %12020 ], [ 0, %12022 ], [ 1, %12006 ]
  %12028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12025, i8* %12028, align 1, !tbaa !2453
  %12029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12026, i8* %12029, align 1, !tbaa !2453
  %12030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12027, i8* %12030, align 1, !tbaa !2453
  br label %12031

; <label>:12031:                                  ; preds = %12024, %12022
  %12032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %12032, align 1, !tbaa !2453
  %12033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %12033, align 1, !tbaa !2453
  %12034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12034, align 1, !tbaa !2453
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %12014, %12031
  %12035 = phi %struct.Memory* [ %12017, %12014 ], [ %MEMORY.9, %12031 ]
  %12036 = load i64, i64* %PC
  %12037 = add i64 %12036, 360
  %12038 = load i64, i64* %PC
  %12039 = add i64 %12038, 6
  %12040 = load i64, i64* %PC
  %12041 = add i64 %12040, 6
  store i64 %12041, i64* %PC
  %12042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12043 = load i8, i8* %12042, align 1, !tbaa !2432
  %12044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %12045 = load i8, i8* %12044, align 1, !tbaa !2448
  %12046 = or i8 %12045, %12043
  %12047 = icmp ne i8 %12046, 0
  %12048 = zext i1 %12047 to i8
  store i8 %12048, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %12049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %12050 = select i1 %12047, i64 %12037, i64 %12039
  store i64 %12050, i64* %12049, align 8, !tbaa !2428
  %12051 = load i8, i8* %BRANCH_TAKEN
  %12052 = icmp eq i8 %12051, 1
  br i1 %12052, label %block_400807, label %block_4006a5

block_400ae2:                                     ; preds = %block_400ad4
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %12053 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12054 = load i64, i64* %RBP
  %12055 = sub i64 %12054, 16
  %12056 = load i64, i64* %PC
  %12057 = add i64 %12056, 5
  store i64 %12057, i64* %PC
  %12058 = inttoptr i64 %12055 to double*
  %12059 = load double, double* %12058
  %12060 = bitcast i8* %12053 to double*
  store double %12059, double* %12060, align 1, !tbaa !2451
  %12061 = getelementptr inbounds i8, i8* %12053, i64 8
  %12062 = bitcast i8* %12061 to double*
  store double 0.000000e+00, double* %12062, align 1, !tbaa !2451
  %12063 = bitcast %union.vec128_t* %XMM0 to i8*
  %12064 = load i64, i64* %PC
  %12065 = add i64 %12064, 5
  store i64 %12065, i64* %PC
  %12066 = bitcast i8* %12063 to i64*
  %12067 = load i64, i64* %12066, align 1
  store i64 %12067, i64* %RCX, align 1, !tbaa !2428
  %12068 = load i64, i64* %RCX
  %12069 = load i64, i64* %RAX
  %12070 = load i64, i64* %PC
  %12071 = add i64 %12070, 3
  store i64 %12071, i64* %PC
  %12072 = xor i64 %12069, %12068
  store i64 %12072, i64* %RCX, align 8, !tbaa !2428
  %12073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %12073, align 1, !tbaa !2432
  %12074 = trunc i64 %12072 to i32
  %12075 = and i32 %12074, 255
  %12076 = call i32 @llvm.ctpop.i32(i32 %12075) #16
  %12077 = trunc i32 %12076 to i8
  %12078 = and i8 %12077, 1
  %12079 = xor i8 %12078, 1
  %12080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12079, i8* %12080, align 1, !tbaa !2446
  %12081 = icmp eq i64 %12072, 0
  %12082 = zext i1 %12081 to i8
  %12083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12082, i8* %12083, align 1, !tbaa !2448
  %12084 = lshr i64 %12072, 63
  %12085 = trunc i64 %12084 to i8
  %12086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12085, i8* %12086, align 1, !tbaa !2449
  %12087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %12087, align 1, !tbaa !2450
  %12088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12088, align 1, !tbaa !2447
  %12089 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12090 = load i64, i64* %RCX
  %12091 = load i64, i64* %PC
  %12092 = add i64 %12091, 5
  store i64 %12092, i64* %PC
  %12093 = bitcast i8* %12089 to i64*
  store i64 %12090, i64* %12093, align 1, !tbaa !2428
  %12094 = getelementptr inbounds i8, i8* %12089, i64 8
  %12095 = bitcast i8* %12094 to i64*
  store i64 0, i64* %12095, align 1, !tbaa !2428
  %12096 = load i64, i64* %RBP
  %12097 = sub i64 %12096, 16
  %12098 = bitcast %union.vec128_t* %XMM0 to i8*
  %12099 = load i64, i64* %PC
  %12100 = add i64 %12099, 5
  store i64 %12100, i64* %PC
  %12101 = bitcast i8* %12098 to double*
  %12102 = load double, double* %12101, align 1
  %12103 = inttoptr i64 %12097 to double*
  store double %12102, double* %12103
  %12104 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12105 = load i64, i64* %PC
  %12106 = add i64 %12105, 9
  store i64 %12106, i64* %PC
  %12107 = load double, double* bitcast (%sa_type* @sa to double*)
  %12108 = bitcast i8* %12104 to double*
  store double %12107, double* %12108, align 1, !tbaa !2451
  %12109 = getelementptr inbounds i8, i8* %12104, i64 8
  %12110 = bitcast i8* %12109 to double*
  store double 0.000000e+00, double* %12110, align 1, !tbaa !2451
  %12111 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12112 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12113 = load i64, i64* %RBP
  %12114 = sub i64 %12113, 16
  %12115 = load i64, i64* %PC
  %12116 = add i64 %12115, 5
  store i64 %12116, i64* %PC
  %12117 = bitcast i8* %12112 to double*
  %12118 = load double, double* %12117, align 1
  %12119 = getelementptr inbounds i8, i8* %12112, i64 8
  %12120 = bitcast i8* %12119 to i64*
  %12121 = load i64, i64* %12120, align 1
  %12122 = inttoptr i64 %12114 to double*
  %12123 = load double, double* %12122
  %12124 = fadd double %12118, %12123
  %12125 = bitcast i8* %12111 to double*
  store double %12124, double* %12125, align 1, !tbaa !2451
  %12126 = getelementptr inbounds i8, i8* %12111, i64 8
  %12127 = bitcast i8* %12126 to i64*
  store i64 %12121, i64* %12127, align 1, !tbaa !2451
  %12128 = bitcast %union.vec128_t* %XMM0 to i8*
  %12129 = load i64, i64* %PC
  %12130 = add i64 %12129, 9
  store i64 %12130, i64* %PC
  %12131 = bitcast i8* %12128 to double*
  %12132 = load double, double* %12131, align 1
  store double %12132, double* bitcast (%sa_type* @sa to double*)
  %12133 = load i64, i64* %RBP
  %12134 = sub i64 %12133, 72
  %12135 = load i64, i64* %PC
  %12136 = add i64 %12135, 4
  store i64 %12136, i64* %PC
  %12137 = inttoptr i64 %12134 to i64*
  %12138 = load i64, i64* %12137
  store i64 %12138, i64* %RAX, align 8, !tbaa !2428
  %12139 = load i64, i64* %RAX
  %12140 = load i64, i64* %PC
  %12141 = add i64 %12140, 4
  store i64 %12141, i64* %PC
  %12142 = add i64 1, %12139
  store i64 %12142, i64* %RAX, align 8, !tbaa !2428
  %12143 = icmp ult i64 %12142, %12139
  %12144 = icmp ult i64 %12142, 1
  %12145 = or i1 %12143, %12144
  %12146 = zext i1 %12145 to i8
  %12147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12146, i8* %12147, align 1, !tbaa !2432
  %12148 = trunc i64 %12142 to i32
  %12149 = and i32 %12148, 255
  %12150 = call i32 @llvm.ctpop.i32(i32 %12149) #16
  %12151 = trunc i32 %12150 to i8
  %12152 = and i8 %12151, 1
  %12153 = xor i8 %12152, 1
  %12154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12153, i8* %12154, align 1, !tbaa !2446
  %12155 = xor i64 1, %12139
  %12156 = xor i64 %12155, %12142
  %12157 = lshr i64 %12156, 4
  %12158 = trunc i64 %12157 to i8
  %12159 = and i8 %12158, 1
  %12160 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12159, i8* %12160, align 1, !tbaa !2447
  %12161 = icmp eq i64 %12142, 0
  %12162 = zext i1 %12161 to i8
  %12163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12162, i8* %12163, align 1, !tbaa !2448
  %12164 = lshr i64 %12142, 63
  %12165 = trunc i64 %12164 to i8
  %12166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12165, i8* %12166, align 1, !tbaa !2449
  %12167 = lshr i64 %12139, 63
  %12168 = xor i64 %12164, %12167
  %12169 = add nuw nsw i64 %12168, %12164
  %12170 = icmp eq i64 %12169, 2
  %12171 = zext i1 %12170 to i8
  %12172 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12171, i8* %12172, align 1, !tbaa !2450
  %12173 = load i64, i64* %RBP
  %12174 = sub i64 %12173, 72
  %12175 = load i64, i64* %RAX
  %12176 = load i64, i64* %PC
  %12177 = add i64 %12176, 4
  store i64 %12177, i64* %PC
  %12178 = inttoptr i64 %12174 to i64*
  store i64 %12175, i64* %12178
  %12179 = load i64, i64* %PC
  %12180 = sub i64 %12179, 82
  %12181 = load i64, i64* %PC
  %12182 = add i64 %12181, 5
  store i64 %12182, i64* %PC
  %12183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %12180, i64* %12183, align 8, !tbaa !2428
  br label %block_400ad4

block_400807:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_4007fd
  %MEMORY.10 = phi %struct.Memory* [ %12035, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %10277, %block_4007fd ]
  %12184 = load i64, i64* %PC
  %12185 = add i64 %12184, 10
  store i64 %12185, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %12186 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12187 = load i64, i64* %PC
  %12188 = add i64 %12187, 8
  store i64 %12188, i64* %PC
  %12189 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 64) to double*)
  %12190 = bitcast i8* %12186 to double*
  store double %12189, double* %12190, align 1, !tbaa !2451
  %12191 = getelementptr inbounds i8, i8* %12186, i64 8
  %12192 = bitcast i8* %12191 to double*
  store double 0.000000e+00, double* %12192, align 1, !tbaa !2451
  %12193 = bitcast %union.vec128_t* %XMM0 to i8*
  %12194 = load i64, i64* %PC
  %12195 = add i64 %12194, 9
  store i64 %12195, i64* %PC
  %12196 = bitcast i8* %12193 to double*
  %12197 = load double, double* %12196, align 1
  store double %12197, double* bitcast (%scale_type* @scale to double*)
  %12198 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12199 = load i64, i64* %PC
  %12200 = add i64 %12199, 9
  store i64 %12200, i64* %PC
  %12201 = load double, double* bitcast (%scale_type* @scale to double*)
  %12202 = bitcast i8* %12198 to double*
  store double %12201, double* %12202, align 1, !tbaa !2451
  %12203 = getelementptr inbounds i8, i8* %12198, i64 8
  %12204 = bitcast i8* %12203 to double*
  store double 0.000000e+00, double* %12204, align 1, !tbaa !2451
  %12205 = bitcast %union.vec128_t* %XMM0 to i8*
  %12206 = load i64, i64* %PC
  %12207 = add i64 %12206, 9
  store i64 %12207, i64* %PC
  %12208 = bitcast i8* %12205 to double*
  %12209 = load double, double* %12208, align 1
  store double %12209, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %12210 = load i64, i64* %PC
  %12211 = add i64 %12210, 7612
  %12212 = load i64, i64* %PC
  %12213 = add i64 %12212, 5
  %12214 = load i64, i64* %PC
  %12215 = add i64 %12214, 5
  store i64 %12215, i64* %PC
  %12216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12217 = load i64, i64* %12216, align 8, !tbaa !2428
  %12218 = add i64 %12217, -8
  %12219 = inttoptr i64 %12218 to i64*
  store i64 %12213, i64* %12219
  store i64 %12218, i64* %12216, align 8, !tbaa !2428
  %12220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %12211, i64* %12220, align 8, !tbaa !2428
  %12221 = load i64, i64* %PC
  %12222 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %12221, %struct.Memory* %MEMORY.10)
  %12223 = load i64, i64* %RBP
  %12224 = sub i64 %12223, 72
  %12225 = load i64, i64* %PC
  %12226 = add i64 %12225, 8
  store i64 %12226, i64* %PC
  %12227 = inttoptr i64 %12224 to i64*
  store i64 1, i64* %12227
  %12228 = load i64, i64* %RBP
  %12229 = sub i64 %12228, 124
  %12230 = load i32, i32* %EAX
  %12231 = zext i32 %12230 to i64
  %12232 = load i64, i64* %PC
  %12233 = add i64 %12232, 3
  store i64 %12233, i64* %PC
  %12234 = inttoptr i64 %12229 to i32*
  store i32 %12230, i32* %12234
  br label %block_400844

block_400c7a:                                     ; preds = %block_400bc8
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %12235 = load i64, i64* %PC
  %12236 = add i64 %12235, 6508
  %12237 = load i64, i64* %PC
  %12238 = add i64 %12237, 5
  %12239 = load i64, i64* %PC
  %12240 = add i64 %12239, 5
  store i64 %12240, i64* %PC
  %12241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12242 = load i64, i64* %12241, align 8, !tbaa !2428
  %12243 = add i64 %12242, -8
  %12244 = inttoptr i64 %12243 to i64*
  store i64 %12238, i64* %12244
  store i64 %12243, i64* %12241, align 8, !tbaa !2428
  %12245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %12236, i64* %12245, align 8, !tbaa !2428
  %12246 = load i64, i64* %PC
  %12247 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %12246, %struct.Memory* %MEMORY.7)
  %12248 = load i64, i64* %PC
  %12249 = add i64 %12248, 10
  store i64 %12249, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 426), i64* %RDI, align 8, !tbaa !2428
  %12250 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12251 = load i64, i64* %PC
  %12252 = add i64 %12251, 8
  store i64 %12252, i64* %PC
  %12253 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 72) to double*)
  %12254 = bitcast i8* %12250 to double*
  store double %12253, double* %12254, align 1, !tbaa !2451
  %12255 = getelementptr inbounds i8, i8* %12250, i64 8
  %12256 = bitcast i8* %12255 to double*
  store double 0.000000e+00, double* %12256, align 1, !tbaa !2451
  %12257 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12258 = load i64, i64* %PC
  %12259 = add i64 %12258, 8
  store i64 %12259, i64* %PC
  %12260 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 96) to double*)
  %12261 = bitcast i8* %12257 to double*
  store double %12260, double* %12261, align 1, !tbaa !2451
  %12262 = getelementptr inbounds i8, i8* %12257, i64 8
  %12263 = bitcast i8* %12262 to double*
  store double 0.000000e+00, double* %12263, align 1, !tbaa !2451
  %12264 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12265 = load i64, i64* %PC
  %12266 = add i64 %12265, 8
  store i64 %12266, i64* %PC
  %12267 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 104) to double*)
  %12268 = bitcast i8* %12264 to double*
  store double %12267, double* %12268, align 1, !tbaa !2451
  %12269 = getelementptr inbounds i8, i8* %12264, i64 8
  %12270 = bitcast i8* %12269 to double*
  store double 0.000000e+00, double* %12270, align 1, !tbaa !2451
  %12271 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12272 = load i64, i64* %PC
  %12273 = add i64 %12272, 9
  store i64 %12273, i64* %PC
  %12274 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %12275 = bitcast i8* %12271 to double*
  store double %12274, double* %12275, align 1, !tbaa !2451
  %12276 = getelementptr inbounds i8, i8* %12271, i64 8
  %12277 = bitcast i8* %12276 to double*
  store double 0.000000e+00, double* %12277, align 1, !tbaa !2451
  %12278 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12279 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12280 = load i64, i64* %PC
  %12281 = add i64 %12280, 9
  store i64 %12281, i64* %PC
  %12282 = bitcast i8* %12279 to double*
  %12283 = load double, double* %12282, align 1
  %12284 = getelementptr inbounds i8, i8* %12279, i64 8
  %12285 = bitcast i8* %12284 to i64*
  %12286 = load i64, i64* %12285, align 1
  %12287 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %12288 = fmul double %12283, %12287
  %12289 = bitcast i8* %12278 to double*
  store double %12288, double* %12289, align 1, !tbaa !2451
  %12290 = getelementptr inbounds i8, i8* %12278, i64 8
  %12291 = bitcast i8* %12290 to i64*
  store i64 %12286, i64* %12291, align 1, !tbaa !2451
  %12292 = bitcast %union.vec128_t* %XMM3 to i8*
  %12293 = load i64, i64* %PC
  %12294 = add i64 %12293, 9
  store i64 %12294, i64* %PC
  %12295 = bitcast i8* %12292 to double*
  %12296 = load double, double* %12295, align 1
  store double %12296, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 48) to double*)
  %12297 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12298 = load i64, i64* %PC
  %12299 = add i64 %12298, 9
  store i64 %12299, i64* %PC
  %12300 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 48) to double*)
  %12301 = bitcast i8* %12297 to double*
  store double %12300, double* %12301, align 1, !tbaa !2451
  %12302 = getelementptr inbounds i8, i8* %12297, i64 8
  %12303 = bitcast i8* %12302 to double*
  store double 0.000000e+00, double* %12303, align 1, !tbaa !2451
  %12304 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12305 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12306 = load i64, i64* %PC
  %12307 = add i64 %12306, 9
  store i64 %12307, i64* %PC
  %12308 = bitcast i8* %12305 to double*
  %12309 = load double, double* %12308, align 1
  %12310 = getelementptr inbounds i8, i8* %12305, i64 8
  %12311 = bitcast i8* %12310 to i64*
  %12312 = load i64, i64* %12311, align 1
  %12313 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  %12314 = fsub double %12309, %12313
  %12315 = bitcast i8* %12304 to double*
  store double %12314, double* %12315, align 1, !tbaa !2451
  %12316 = getelementptr inbounds i8, i8* %12304, i64 8
  %12317 = bitcast i8* %12316 to i64*
  store i64 %12312, i64* %12317, align 1, !tbaa !2451
  %12318 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12319 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12320 = bitcast %union.vec128_t* %XMM2 to i8*
  %12321 = load i64, i64* %PC
  %12322 = add i64 %12321, 4
  store i64 %12322, i64* %PC
  %12323 = bitcast i8* %12319 to double*
  %12324 = load double, double* %12323, align 1
  %12325 = getelementptr inbounds i8, i8* %12319, i64 8
  %12326 = bitcast i8* %12325 to i64*
  %12327 = load i64, i64* %12326, align 1
  %12328 = bitcast i8* %12320 to double*
  %12329 = load double, double* %12328, align 1
  %12330 = fdiv double %12324, %12329
  %12331 = bitcast i8* %12318 to double*
  store double %12330, double* %12331, align 1, !tbaa !2451
  %12332 = getelementptr inbounds i8, i8* %12318, i64 8
  %12333 = bitcast i8* %12332 to i64*
  store i64 %12327, i64* %12333, align 1, !tbaa !2451
  %12334 = bitcast %union.vec128_t* %XMM3 to i8*
  %12335 = load i64, i64* %PC
  %12336 = add i64 %12335, 9
  store i64 %12336, i64* %PC
  %12337 = bitcast i8* %12334 to double*
  %12338 = load double, double* %12337, align 1
  store double %12338, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 56) to double*)
  %12339 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12340 = load i64, i64* %PC
  %12341 = add i64 %12340, 9
  store i64 %12341, i64* %PC
  %12342 = load double, double* bitcast (%sa_type* @sa to double*)
  %12343 = bitcast i8* %12339 to double*
  store double %12342, double* %12343, align 1, !tbaa !2451
  %12344 = getelementptr inbounds i8, i8* %12339, i64 8
  %12345 = bitcast i8* %12344 to double*
  store double 0.000000e+00, double* %12345, align 1, !tbaa !2451
  %12346 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12347 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12348 = load i64, i64* %RBP
  %12349 = sub i64 %12348, 48
  %12350 = load i64, i64* %PC
  %12351 = add i64 %12350, 5
  store i64 %12351, i64* %PC
  %12352 = bitcast i8* %12347 to double*
  %12353 = load double, double* %12352, align 1
  %12354 = getelementptr inbounds i8, i8* %12347, i64 8
  %12355 = bitcast i8* %12354 to i64*
  %12356 = load i64, i64* %12355, align 1
  %12357 = inttoptr i64 %12349 to double*
  %12358 = load double, double* %12357
  %12359 = fmul double %12353, %12358
  %12360 = bitcast i8* %12346 to double*
  store double %12359, double* %12360, align 1, !tbaa !2451
  %12361 = getelementptr inbounds i8, i8* %12346, i64 8
  %12362 = bitcast i8* %12361 to i64*
  store i64 %12356, i64* %12362, align 1, !tbaa !2451
  %12363 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12364 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12365 = load i64, i64* %PC
  %12366 = add i64 %12365, 9
  store i64 %12366, i64* %PC
  %12367 = bitcast i8* %12364 to double*
  %12368 = load double, double* %12367, align 1
  %12369 = getelementptr inbounds i8, i8* %12364, i64 8
  %12370 = bitcast i8* %12369 to i64*
  %12371 = load i64, i64* %12370, align 1
  %12372 = load double, double* bitcast (%sc_type* @sc to double*)
  %12373 = fdiv double %12368, %12372
  %12374 = bitcast i8* %12363 to double*
  store double %12373, double* %12374, align 1, !tbaa !2451
  %12375 = getelementptr inbounds i8, i8* %12363, i64 8
  %12376 = bitcast i8* %12375 to i64*
  store i64 %12371, i64* %12376, align 1, !tbaa !2451
  %12377 = bitcast %union.vec128_t* %XMM2 to i8*
  %12378 = load i64, i64* %PC
  %12379 = add i64 %12378, 5
  store i64 %12379, i64* %PC
  %12380 = bitcast i8* %12377 to double*
  %12381 = load double, double* %12380, align 1
  %12382 = call double @llvm.trunc.f64(double %12381) #16
  %12383 = call double @llvm.fabs.f64(double %12382) #16
  %12384 = fcmp ogt double %12383, 0x43E0000000000000
  %12385 = fptosi double %12382 to i64
  %12386 = select i1 %12384, i64 -9223372036854775808, i64 %12385
  store i64 %12386, i64* %RCX, align 8, !tbaa !2428
  %12387 = load i64, i64* %RBP
  %12388 = sub i64 %12387, 80
  %12389 = load i64, i64* %RCX
  %12390 = load i64, i64* %PC
  %12391 = add i64 %12390, 4
  store i64 %12391, i64* %PC
  %12392 = inttoptr i64 %12388 to i64*
  store i64 %12389, i64* %12392
  %12393 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12394 = load i64, i64* %PC
  %12395 = add i64 %12394, 9
  store i64 %12395, i64* %PC
  %12396 = load double, double* bitcast (%four_type* @four to double*)
  %12397 = bitcast i8* %12393 to double*
  store double %12396, double* %12397, align 1, !tbaa !2451
  %12398 = getelementptr inbounds i8, i8* %12393, i64 8
  %12399 = bitcast i8* %12398 to double*
  store double 0.000000e+00, double* %12399, align 1, !tbaa !2451
  %12400 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12401 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12402 = load i64, i64* %RBP
  %12403 = sub i64 %12402, 40
  %12404 = load i64, i64* %PC
  %12405 = add i64 %12404, 5
  store i64 %12405, i64* %PC
  %12406 = bitcast i8* %12401 to double*
  %12407 = load double, double* %12406, align 1
  %12408 = getelementptr inbounds i8, i8* %12401, i64 8
  %12409 = bitcast i8* %12408 to i64*
  %12410 = load i64, i64* %12409, align 1
  %12411 = inttoptr i64 %12403 to double*
  %12412 = load double, double* %12411
  %12413 = fmul double %12407, %12412
  %12414 = bitcast i8* %12400 to double*
  store double %12413, double* %12414, align 1, !tbaa !2451
  %12415 = getelementptr inbounds i8, i8* %12400, i64 8
  %12416 = bitcast i8* %12415 to i64*
  store i64 %12410, i64* %12416, align 1, !tbaa !2451
  %12417 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12418 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12419 = load i64, i64* %PC
  %12420 = add i64 %12419, 9
  store i64 %12420, i64* %PC
  %12421 = bitcast i8* %12418 to double*
  %12422 = load double, double* %12421, align 1
  %12423 = getelementptr inbounds i8, i8* %12418, i64 8
  %12424 = bitcast i8* %12423 to i64*
  %12425 = load i64, i64* %12424, align 1
  %12426 = load double, double* bitcast (%five_type* @five to double*)
  %12427 = fdiv double %12422, %12426
  %12428 = bitcast i8* %12417 to double*
  store double %12427, double* %12428, align 1, !tbaa !2451
  %12429 = getelementptr inbounds i8, i8* %12417, i64 8
  %12430 = bitcast i8* %12429 to i64*
  store i64 %12425, i64* %12430, align 1, !tbaa !2451
  %12431 = bitcast %union.vec128_t* %XMM2 to i8*
  %12432 = load i64, i64* %PC
  %12433 = add i64 %12432, 9
  store i64 %12433, i64* %PC
  %12434 = bitcast i8* %12431 to double*
  %12435 = load double, double* %12434, align 1
  store double %12435, double* bitcast (%sa_type* @sa to double*)
  %12436 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12437 = load i64, i64* %PC
  %12438 = add i64 %12437, 9
  store i64 %12438, i64* %PC
  %12439 = load double, double* bitcast (%sa_type* @sa to double*)
  %12440 = bitcast i8* %12436 to double*
  store double %12439, double* %12440, align 1, !tbaa !2451
  %12441 = getelementptr inbounds i8, i8* %12436, i64 8
  %12442 = bitcast i8* %12441 to double*
  store double 0.000000e+00, double* %12442, align 1, !tbaa !2451
  %12443 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12444 = load i64, i64* %PC
  %12445 = add i64 %12444, 9
  store i64 %12445, i64* %PC
  %12446 = load double, double* bitcast (%five_type* @five to double*)
  %12447 = bitcast i8* %12443 to double*
  store double %12446, double* %12447, align 1, !tbaa !2451
  %12448 = getelementptr inbounds i8, i8* %12443, i64 8
  %12449 = bitcast i8* %12448 to double*
  store double 0.000000e+00, double* %12449, align 1, !tbaa !2451
  %12450 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12451 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12452 = load i64, i64* %RBP
  %12453 = sub i64 %12452, 32
  %12454 = load i64, i64* %PC
  %12455 = add i64 %12454, 5
  store i64 %12455, i64* %PC
  %12456 = bitcast i8* %12451 to double*
  %12457 = load double, double* %12456, align 1
  %12458 = getelementptr inbounds i8, i8* %12451, i64 8
  %12459 = bitcast i8* %12458 to i64*
  %12460 = load i64, i64* %12459, align 1
  %12461 = inttoptr i64 %12453 to double*
  %12462 = load double, double* %12461
  %12463 = fdiv double %12457, %12462
  %12464 = bitcast i8* %12450 to double*
  store double %12463, double* %12464, align 1, !tbaa !2451
  %12465 = getelementptr inbounds i8, i8* %12450, i64 8
  %12466 = bitcast i8* %12465 to i64*
  store i64 %12460, i64* %12466, align 1, !tbaa !2451
  %12467 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12468 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12469 = bitcast %union.vec128_t* %XMM3 to i8*
  %12470 = load i64, i64* %PC
  %12471 = add i64 %12470, 4
  store i64 %12471, i64* %PC
  %12472 = bitcast i8* %12468 to double*
  %12473 = load double, double* %12472, align 1
  %12474 = getelementptr inbounds i8, i8* %12468, i64 8
  %12475 = bitcast i8* %12474 to i64*
  %12476 = load i64, i64* %12475, align 1
  %12477 = bitcast i8* %12469 to double*
  %12478 = load double, double* %12477, align 1
  %12479 = fadd double %12473, %12478
  %12480 = bitcast i8* %12467 to double*
  store double %12479, double* %12480, align 1, !tbaa !2451
  %12481 = getelementptr inbounds i8, i8* %12467, i64 8
  %12482 = bitcast i8* %12481 to i64*
  store i64 %12476, i64* %12482, align 1, !tbaa !2451
  %12483 = bitcast %union.vec128_t* %XMM2 to i8*
  %12484 = load i64, i64* %PC
  %12485 = add i64 %12484, 9
  store i64 %12485, i64* %PC
  %12486 = bitcast i8* %12483 to double*
  %12487 = load double, double* %12486, align 1
  store double %12487, double* bitcast (%sb_type* @sb to double*)
  %12488 = bitcast %union.vec128_t* %XMM1 to i8*
  %12489 = load i64, i64* %PC
  %12490 = add i64 %12489, 9
  store i64 %12490, i64* %PC
  %12491 = bitcast i8* %12488 to double*
  %12492 = load double, double* %12491, align 1
  store double %12492, double* bitcast (%sc_type* @sc to double*)
  %12493 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12494 = load i64, i64* %PC
  %12495 = add i64 %12494, 9
  store i64 %12495, i64* %PC
  %12496 = load double, double* bitcast (%sb_type* @sb to double*)
  %12497 = bitcast i8* %12493 to double*
  store double %12496, double* %12497, align 1, !tbaa !2451
  %12498 = getelementptr inbounds i8, i8* %12493, i64 8
  %12499 = bitcast i8* %12498 to double*
  store double 0.000000e+00, double* %12499, align 1, !tbaa !2451
  %12500 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12501 = load i64, i64* %PC
  %12502 = add i64 %12501, 9
  store i64 %12502, i64* %PC
  %12503 = load double, double* bitcast (%sc_type* @sc to double*)
  %12504 = bitcast i8* %12500 to double*
  store double %12503, double* %12504, align 1, !tbaa !2451
  %12505 = getelementptr inbounds i8, i8* %12500, i64 8
  %12506 = bitcast i8* %12505 to double*
  store double 0.000000e+00, double* %12506, align 1, !tbaa !2451
  %12507 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12508 = load i64, i64* %RBP
  %12509 = sub i64 %12508, 32
  %12510 = load i64, i64* %PC
  %12511 = add i64 %12510, 5
  store i64 %12511, i64* %PC
  %12512 = inttoptr i64 %12509 to double*
  %12513 = load double, double* %12512
  %12514 = bitcast i8* %12507 to double*
  store double %12513, double* %12514, align 1, !tbaa !2451
  %12515 = getelementptr inbounds i8, i8* %12507, i64 8
  %12516 = bitcast i8* %12515 to double*
  store double 0.000000e+00, double* %12516, align 1, !tbaa !2451
  %12517 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12518 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12519 = load i64, i64* %RBP
  %12520 = sub i64 %12519, 32
  %12521 = load i64, i64* %PC
  %12522 = add i64 %12521, 5
  store i64 %12522, i64* %PC
  %12523 = bitcast i8* %12518 to double*
  %12524 = load double, double* %12523, align 1
  %12525 = getelementptr inbounds i8, i8* %12518, i64 8
  %12526 = bitcast i8* %12525 to i64*
  %12527 = load i64, i64* %12526, align 1
  %12528 = inttoptr i64 %12520 to double*
  %12529 = load double, double* %12528
  %12530 = fmul double %12524, %12529
  %12531 = bitcast i8* %12517 to double*
  store double %12530, double* %12531, align 1, !tbaa !2451
  %12532 = getelementptr inbounds i8, i8* %12517, i64 8
  %12533 = bitcast i8* %12532 to i64*
  store i64 %12527, i64* %12533, align 1, !tbaa !2451
  %12534 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12535 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12536 = load i64, i64* %RBP
  %12537 = sub i64 %12536, 32
  %12538 = load i64, i64* %PC
  %12539 = add i64 %12538, 5
  store i64 %12539, i64* %PC
  %12540 = bitcast i8* %12535 to double*
  %12541 = load double, double* %12540, align 1
  %12542 = getelementptr inbounds i8, i8* %12535, i64 8
  %12543 = bitcast i8* %12542 to i64*
  %12544 = load i64, i64* %12543, align 1
  %12545 = inttoptr i64 %12537 to double*
  %12546 = load double, double* %12545
  %12547 = fmul double %12541, %12546
  %12548 = bitcast i8* %12534 to double*
  store double %12547, double* %12548, align 1, !tbaa !2451
  %12549 = getelementptr inbounds i8, i8* %12534, i64 8
  %12550 = bitcast i8* %12549 to i64*
  store i64 %12544, i64* %12550, align 1, !tbaa !2451
  %12551 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12552 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12553 = bitcast %union.vec128_t* %XMM3 to i8*
  %12554 = load i64, i64* %PC
  %12555 = add i64 %12554, 4
  store i64 %12555, i64* %PC
  %12556 = bitcast i8* %12552 to double*
  %12557 = load double, double* %12556, align 1
  %12558 = getelementptr inbounds i8, i8* %12552, i64 8
  %12559 = bitcast i8* %12558 to i64*
  %12560 = load i64, i64* %12559, align 1
  %12561 = bitcast i8* %12553 to double*
  %12562 = load double, double* %12561, align 1
  %12563 = fdiv double %12557, %12562
  %12564 = bitcast i8* %12551 to double*
  store double %12563, double* %12564, align 1, !tbaa !2451
  %12565 = getelementptr inbounds i8, i8* %12551, i64 8
  %12566 = bitcast i8* %12565 to i64*
  store i64 %12560, i64* %12566, align 1, !tbaa !2451
  %12567 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12568 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12569 = bitcast %union.vec128_t* %XMM2 to i8*
  %12570 = load i64, i64* %PC
  %12571 = add i64 %12570, 4
  store i64 %12571, i64* %PC
  %12572 = bitcast i8* %12568 to double*
  %12573 = load double, double* %12572, align 1
  %12574 = getelementptr inbounds i8, i8* %12568, i64 8
  %12575 = bitcast i8* %12574 to i64*
  %12576 = load i64, i64* %12575, align 1
  %12577 = bitcast i8* %12569 to double*
  %12578 = load double, double* %12577, align 1
  %12579 = fsub double %12573, %12578
  %12580 = bitcast i8* %12567 to double*
  store double %12579, double* %12580, align 1, !tbaa !2451
  %12581 = getelementptr inbounds i8, i8* %12567, i64 8
  %12582 = bitcast i8* %12581 to i64*
  store i64 %12576, i64* %12582, align 1, !tbaa !2451
  %12583 = bitcast %union.vec128_t* %XMM1 to i8*
  %12584 = load i64, i64* %PC
  %12585 = add i64 %12584, 9
  store i64 %12585, i64* %PC
  %12586 = bitcast i8* %12583 to double*
  %12587 = load double, double* %12586, align 1
  store double %12587, double* bitcast (%piprg_type* @piprg to double*)
  %12588 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12589 = load i64, i64* %PC
  %12590 = add i64 %12589, 9
  store i64 %12590, i64* %PC
  %12591 = load double, double* bitcast (%piprg_type* @piprg to double*)
  %12592 = bitcast i8* %12588 to double*
  store double %12591, double* %12592, align 1, !tbaa !2451
  %12593 = getelementptr inbounds i8, i8* %12588, i64 8
  %12594 = bitcast i8* %12593 to double*
  store double 0.000000e+00, double* %12594, align 1, !tbaa !2451
  %12595 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12596 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12597 = load i64, i64* %PC
  %12598 = add i64 %12597, 9
  store i64 %12598, i64* %PC
  %12599 = bitcast i8* %12596 to double*
  %12600 = load double, double* %12599, align 1
  %12601 = getelementptr inbounds i8, i8* %12596, i64 8
  %12602 = bitcast i8* %12601 to i64*
  %12603 = load i64, i64* %12602, align 1
  %12604 = load double, double* bitcast (%piref_type* @piref to double*)
  %12605 = fsub double %12600, %12604
  %12606 = bitcast i8* %12595 to double*
  store double %12605, double* %12606, align 1, !tbaa !2451
  %12607 = getelementptr inbounds i8, i8* %12595, i64 8
  %12608 = bitcast i8* %12607 to i64*
  store i64 %12603, i64* %12608, align 1, !tbaa !2451
  %12609 = bitcast %union.vec128_t* %XMM1 to i8*
  %12610 = load i64, i64* %PC
  %12611 = add i64 %12610, 9
  store i64 %12611, i64* %PC
  %12612 = bitcast i8* %12609 to double*
  %12613 = load double, double* %12612, align 1
  store double %12613, double* bitcast (%pierr_type* @pierr to double*)
  %12614 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12615 = load i64, i64* %PC
  %12616 = add i64 %12615, 9
  store i64 %12616, i64* %PC
  %12617 = load double, double* bitcast (%one_type* @one to double*)
  %12618 = bitcast i8* %12614 to double*
  store double %12617, double* %12618, align 1, !tbaa !2451
  %12619 = getelementptr inbounds i8, i8* %12614, i64 8
  %12620 = bitcast i8* %12619 to double*
  store double 0.000000e+00, double* %12620, align 1, !tbaa !2451
  %12621 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12622 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12623 = load i64, i64* %PC
  %12624 = add i64 %12623, 9
  store i64 %12624, i64* %PC
  %12625 = bitcast i8* %12622 to double*
  %12626 = load double, double* %12625, align 1
  %12627 = getelementptr inbounds i8, i8* %12622, i64 8
  %12628 = bitcast i8* %12627 to i64*
  %12629 = load i64, i64* %12628, align 1
  %12630 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 56) to double*)
  %12631 = fdiv double %12626, %12630
  %12632 = bitcast i8* %12621 to double*
  store double %12631, double* %12632, align 1, !tbaa !2451
  %12633 = getelementptr inbounds i8, i8* %12621, i64 8
  %12634 = bitcast i8* %12633 to i64*
  store i64 %12629, i64* %12634, align 1, !tbaa !2451
  %12635 = bitcast %union.vec128_t* %XMM1 to i8*
  %12636 = load i64, i64* %PC
  %12637 = add i64 %12636, 9
  store i64 %12637, i64* %PC
  %12638 = bitcast i8* %12635 to double*
  %12639 = load double, double* %12638, align 1
  store double %12639, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 64) to double*)
  %12640 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12641 = bitcast %union.vec128_t* %XMM0 to i8*
  %12642 = load i64, i64* %PC
  %12643 = add i64 %12642, 3
  store i64 %12643, i64* %PC
  %12644 = bitcast i8* %12641 to <2 x i32>*
  %12645 = load <2 x i32>, <2 x i32>* %12644, align 1
  %12646 = getelementptr inbounds i8, i8* %12641, i64 8
  %12647 = bitcast i8* %12646 to <2 x i32>*
  %12648 = load <2 x i32>, <2 x i32>* %12647, align 1
  %12649 = extractelement <2 x i32> %12645, i32 0
  %12650 = bitcast i8* %12640 to i32*
  store i32 %12649, i32* %12650, align 1, !tbaa !2455
  %12651 = extractelement <2 x i32> %12645, i32 1
  %12652 = getelementptr inbounds i8, i8* %12640, i64 4
  %12653 = bitcast i8* %12652 to i32*
  store i32 %12651, i32* %12653, align 1, !tbaa !2455
  %12654 = extractelement <2 x i32> %12648, i32 0
  %12655 = getelementptr inbounds i8, i8* %12640, i64 8
  %12656 = bitcast i8* %12655 to i32*
  store i32 %12654, i32* %12656, align 1, !tbaa !2455
  %12657 = extractelement <2 x i32> %12648, i32 1
  %12658 = getelementptr inbounds i8, i8* %12640, i64 12
  %12659 = bitcast i8* %12658 to i32*
  store i32 %12657, i32* %12659, align 1, !tbaa !2455
  %12660 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12661 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12662 = load i64, i64* %PC
  %12663 = add i64 %12662, 9
  store i64 %12663, i64* %PC
  %12664 = bitcast i8* %12661 to double*
  %12665 = load double, double* %12664, align 1
  %12666 = getelementptr inbounds i8, i8* %12661, i64 8
  %12667 = bitcast i8* %12666 to i64*
  %12668 = load i64, i64* %12667, align 1
  %12669 = load double, double* bitcast (%pierr_type* @pierr to double*)
  %12670 = fmul double %12665, %12669
  %12671 = bitcast i8* %12660 to double*
  store double %12670, double* %12671, align 1, !tbaa !2451
  %12672 = getelementptr inbounds i8, i8* %12660, i64 8
  %12673 = bitcast i8* %12672 to i64*
  store i64 %12668, i64* %12673, align 1, !tbaa !2451
  %12674 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12675 = load i64, i64* %PC
  %12676 = add i64 %12675, 9
  store i64 %12676, i64* %PC
  %12677 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 48) to double*)
  %12678 = bitcast i8* %12674 to double*
  store double %12677, double* %12678, align 1, !tbaa !2451
  %12679 = getelementptr inbounds i8, i8* %12674, i64 8
  %12680 = bitcast i8* %12679 to double*
  store double 0.000000e+00, double* %12680, align 1, !tbaa !2451
  %12681 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12682 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12683 = load i64, i64* %PC
  %12684 = add i64 %12683, 9
  store i64 %12684, i64* %PC
  %12685 = bitcast i8* %12682 to double*
  %12686 = load double, double* %12685, align 1
  %12687 = getelementptr inbounds i8, i8* %12682, i64 8
  %12688 = bitcast i8* %12687 to i64*
  %12689 = load i64, i64* %12688, align 1
  %12690 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  %12691 = fsub double %12686, %12690
  %12692 = bitcast i8* %12681 to double*
  store double %12691, double* %12692, align 1, !tbaa !2451
  %12693 = getelementptr inbounds i8, i8* %12681, i64 8
  %12694 = bitcast i8* %12693 to i64*
  store i64 %12689, i64* %12694, align 1, !tbaa !2451
  %12695 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12696 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12697 = bitcast %union.vec128_t* %XMM0 to i8*
  %12698 = load i64, i64* %PC
  %12699 = add i64 %12698, 4
  store i64 %12699, i64* %PC
  %12700 = bitcast i8* %12696 to double*
  %12701 = load double, double* %12700, align 1
  %12702 = getelementptr inbounds i8, i8* %12696, i64 8
  %12703 = bitcast i8* %12702 to i64*
  %12704 = load i64, i64* %12703, align 1
  %12705 = bitcast i8* %12697 to double*
  %12706 = load double, double* %12705, align 1
  %12707 = fmul double %12701, %12706
  %12708 = bitcast i8* %12695 to double*
  store double %12707, double* %12708, align 1, !tbaa !2451
  %12709 = getelementptr inbounds i8, i8* %12695, i64 8
  %12710 = bitcast i8* %12709 to i64*
  store i64 %12704, i64* %12710, align 1, !tbaa !2451
  %12711 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12712 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12713 = load i64, i64* %PC
  %12714 = add i64 %12713, 9
  store i64 %12714, i64* %PC
  %12715 = bitcast i8* %12712 to double*
  %12716 = load double, double* %12715, align 1
  %12717 = getelementptr inbounds i8, i8* %12712, i64 8
  %12718 = bitcast i8* %12717 to i64*
  %12719 = load i64, i64* %12718, align 1
  %12720 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 64) to double*)
  %12721 = fmul double %12716, %12720
  %12722 = bitcast i8* %12711 to double*
  store double %12721, double* %12722, align 1, !tbaa !2451
  %12723 = getelementptr inbounds i8, i8* %12711, i64 8
  %12724 = bitcast i8* %12723 to i64*
  store i64 %12719, i64* %12724, align 1, !tbaa !2451
  %12725 = load i64, i64* %RBP
  %12726 = sub i64 %12725, 160
  %12727 = bitcast %union.vec128_t* %XMM0 to i8*
  %12728 = load i64, i64* %PC
  %12729 = add i64 %12728, 8
  store i64 %12729, i64* %PC
  %12730 = bitcast i8* %12727 to double*
  %12731 = load double, double* %12730, align 1
  %12732 = inttoptr i64 %12726 to double*
  store double %12731, double* %12732
  %12733 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12734 = bitcast %union.vec128_t* %XMM1 to i8*
  %12735 = load i64, i64* %PC
  %12736 = add i64 %12735, 3
  store i64 %12736, i64* %PC
  %12737 = bitcast i8* %12734 to <2 x i32>*
  %12738 = load <2 x i32>, <2 x i32>* %12737, align 1
  %12739 = getelementptr inbounds i8, i8* %12734, i64 8
  %12740 = bitcast i8* %12739 to <2 x i32>*
  %12741 = load <2 x i32>, <2 x i32>* %12740, align 1
  %12742 = extractelement <2 x i32> %12738, i32 0
  %12743 = bitcast i8* %12733 to i32*
  store i32 %12742, i32* %12743, align 1, !tbaa !2455
  %12744 = extractelement <2 x i32> %12738, i32 1
  %12745 = getelementptr inbounds i8, i8* %12733, i64 4
  %12746 = bitcast i8* %12745 to i32*
  store i32 %12744, i32* %12746, align 1, !tbaa !2455
  %12747 = extractelement <2 x i32> %12741, i32 0
  %12748 = getelementptr inbounds i8, i8* %12733, i64 8
  %12749 = bitcast i8* %12748 to i32*
  store i32 %12747, i32* %12749, align 1, !tbaa !2455
  %12750 = extractelement <2 x i32> %12741, i32 1
  %12751 = getelementptr inbounds i8, i8* %12733, i64 12
  %12752 = bitcast i8* %12751 to i32*
  store i32 %12750, i32* %12752, align 1, !tbaa !2455
  %12753 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12754 = bitcast %union.vec128_t* %XMM2 to i8*
  %12755 = load i64, i64* %PC
  %12756 = add i64 %12755, 3
  store i64 %12756, i64* %PC
  %12757 = bitcast i8* %12754 to <2 x i32>*
  %12758 = load <2 x i32>, <2 x i32>* %12757, align 1
  %12759 = getelementptr inbounds i8, i8* %12754, i64 8
  %12760 = bitcast i8* %12759 to <2 x i32>*
  %12761 = load <2 x i32>, <2 x i32>* %12760, align 1
  %12762 = extractelement <2 x i32> %12758, i32 0
  %12763 = bitcast i8* %12753 to i32*
  store i32 %12762, i32* %12763, align 1, !tbaa !2455
  %12764 = extractelement <2 x i32> %12758, i32 1
  %12765 = getelementptr inbounds i8, i8* %12753, i64 4
  %12766 = bitcast i8* %12765 to i32*
  store i32 %12764, i32* %12766, align 1, !tbaa !2455
  %12767 = extractelement <2 x i32> %12761, i32 0
  %12768 = getelementptr inbounds i8, i8* %12753, i64 8
  %12769 = bitcast i8* %12768 to i32*
  store i32 %12767, i32* %12769, align 1, !tbaa !2455
  %12770 = extractelement <2 x i32> %12761, i32 1
  %12771 = getelementptr inbounds i8, i8* %12753, i64 12
  %12772 = bitcast i8* %12771 to i32*
  store i32 %12770, i32* %12772, align 1, !tbaa !2455
  %12773 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12774 = load i64, i64* %RBP
  %12775 = sub i64 %12774, 160
  %12776 = load i64, i64* %PC
  %12777 = add i64 %12776, 8
  store i64 %12777, i64* %PC
  %12778 = inttoptr i64 %12775 to double*
  %12779 = load double, double* %12778
  %12780 = bitcast i8* %12773 to double*
  store double %12779, double* %12780, align 1, !tbaa !2451
  %12781 = getelementptr inbounds i8, i8* %12773, i64 8
  %12782 = bitcast i8* %12781 to double*
  store double 0.000000e+00, double* %12782, align 1, !tbaa !2451
  %12783 = load i64, i64* %RBP
  %12784 = sub i64 %12783, 164
  %12785 = load i32, i32* %EAX
  %12786 = zext i32 %12785 to i64
  %12787 = load i64, i64* %PC
  %12788 = add i64 %12787, 6
  store i64 %12788, i64* %PC
  %12789 = inttoptr i64 %12784 to i32*
  store i32 %12785, i32* %12789
  %12790 = load i64, i64* %PC
  %12791 = add i64 %12790, 2
  store i64 %12791, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2453
  %12792 = load i64, i64* %PC
  %12793 = sub i64 %12792, 2515
  %12794 = load i64, i64* %PC
  %12795 = add i64 %12794, 5
  %12796 = load i64, i64* %PC
  %12797 = add i64 %12796, 5
  store i64 %12797, i64* %PC
  %12798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12799 = load i64, i64* %12798, align 8, !tbaa !2428
  %12800 = add i64 %12799, -8
  %12801 = inttoptr i64 %12800 to i64*
  store i64 %12795, i64* %12801
  store i64 %12800, i64* %12798, align 8, !tbaa !2428
  %12802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %12793, i64* %12802, align 8, !tbaa !2428
  %12803 = load i64, i64* %PC
  %12804 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %12803, %struct.Memory* %12247)
  %12805 = load i64, i64* %PC
  %12806 = add i64 %12805, 10
  store i64 %12806, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %12807 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12808 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12809 = bitcast %union.vec128_t* %XMM0 to i8*
  %12810 = load i64, i64* %PC
  %12811 = add i64 %12810, 3
  store i64 %12811, i64* %PC
  %12812 = bitcast i8* %12808 to i64*
  %12813 = load i64, i64* %12812, align 1
  %12814 = getelementptr inbounds i8, i8* %12808, i64 8
  %12815 = bitcast i8* %12814 to i64*
  %12816 = load i64, i64* %12815, align 1
  %12817 = bitcast i8* %12809 to i64*
  %12818 = load i64, i64* %12817, align 1
  %12819 = getelementptr inbounds i8, i8* %12809, i64 8
  %12820 = bitcast i8* %12819 to i64*
  %12821 = load i64, i64* %12820, align 1
  %12822 = xor i64 %12818, %12813
  %12823 = xor i64 %12821, %12816
  %12824 = trunc i64 %12822 to i32
  %12825 = lshr i64 %12822, 32
  %12826 = trunc i64 %12825 to i32
  %12827 = bitcast i8* %12807 to i32*
  store i32 %12824, i32* %12827, align 1, !tbaa !2454
  %12828 = getelementptr inbounds i8, i8* %12807, i64 4
  %12829 = bitcast i8* %12828 to i32*
  store i32 %12826, i32* %12829, align 1, !tbaa !2454
  %12830 = trunc i64 %12823 to i32
  %12831 = getelementptr inbounds i8, i8* %12807, i64 8
  %12832 = bitcast i8* %12831 to i32*
  store i32 %12830, i32* %12832, align 1, !tbaa !2454
  %12833 = lshr i64 %12823, 32
  %12834 = trunc i64 %12833 to i32
  %12835 = getelementptr inbounds i8, i8* %12807, i64 12
  %12836 = bitcast i8* %12835 to i32*
  store i32 %12834, i32* %12836, align 1, !tbaa !2454
  %12837 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12838 = load i64, i64* %PC
  %12839 = add i64 %12838, 9
  store i64 %12839, i64* %PC
  %12840 = load double, double* bitcast (%piref_type* @piref to double*)
  %12841 = bitcast i8* %12837 to double*
  store double %12840, double* %12841, align 1, !tbaa !2451
  %12842 = getelementptr inbounds i8, i8* %12837, i64 8
  %12843 = bitcast i8* %12842 to double*
  store double 0.000000e+00, double* %12843, align 1, !tbaa !2451
  %12844 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12845 = load i64, i64* %PC
  %12846 = add i64 %12845, 9
  store i64 %12846, i64* %PC
  %12847 = load double, double* bitcast (%three_type* @three to double*)
  %12848 = bitcast i8* %12844 to double*
  store double %12847, double* %12848, align 1, !tbaa !2451
  %12849 = getelementptr inbounds i8, i8* %12844, i64 8
  %12850 = bitcast i8* %12849 to double*
  store double 0.000000e+00, double* %12850, align 1, !tbaa !2451
  %12851 = load i64, i64* %RBP
  %12852 = sub i64 %12851, 80
  %12853 = load i64, i64* %PC
  %12854 = add i64 %12853, 4
  store i64 %12854, i64* %PC
  %12855 = inttoptr i64 %12852 to i64*
  %12856 = load i64, i64* %12855
  store i64 %12856, i64* %RCX, align 8, !tbaa !2428
  %12857 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12858 = load i64, i64* %RCX
  %12859 = load i64, i64* %PC
  %12860 = add i64 %12859, 5
  store i64 %12860, i64* %PC
  %12861 = sitofp i64 %12858 to double
  %12862 = bitcast i8* %12857 to double*
  store double %12861, double* %12862, align 1, !tbaa !2451
  %12863 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12864 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12865 = bitcast %union.vec128_t* %XMM3 to i8*
  %12866 = load i64, i64* %PC
  %12867 = add i64 %12866, 4
  store i64 %12867, i64* %PC
  %12868 = bitcast i8* %12864 to double*
  %12869 = load double, double* %12868, align 1
  %12870 = getelementptr inbounds i8, i8* %12864, i64 8
  %12871 = bitcast i8* %12870 to i64*
  %12872 = load i64, i64* %12871, align 1
  %12873 = bitcast i8* %12865 to double*
  %12874 = load double, double* %12873, align 1
  %12875 = fmul double %12869, %12874
  %12876 = bitcast i8* %12863 to double*
  store double %12875, double* %12876, align 1, !tbaa !2451
  %12877 = getelementptr inbounds i8, i8* %12863, i64 8
  %12878 = bitcast i8* %12877 to i64*
  store i64 %12872, i64* %12878, align 1, !tbaa !2451
  %12879 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12880 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12881 = bitcast %union.vec128_t* %XMM2 to i8*
  %12882 = load i64, i64* %PC
  %12883 = add i64 %12882, 4
  store i64 %12883, i64* %PC
  %12884 = bitcast i8* %12880 to double*
  %12885 = load double, double* %12884, align 1
  %12886 = getelementptr inbounds i8, i8* %12880, i64 8
  %12887 = bitcast i8* %12886 to i64*
  %12888 = load i64, i64* %12887, align 1
  %12889 = bitcast i8* %12881 to double*
  %12890 = load double, double* %12889, align 1
  %12891 = fdiv double %12885, %12890
  %12892 = bitcast i8* %12879 to double*
  store double %12891, double* %12892, align 1, !tbaa !2451
  %12893 = getelementptr inbounds i8, i8* %12879, i64 8
  %12894 = bitcast i8* %12893 to i64*
  store i64 %12888, i64* %12894, align 1, !tbaa !2451
  %12895 = load i64, i64* %RBP
  %12896 = sub i64 %12895, 48
  %12897 = bitcast %union.vec128_t* %XMM1 to i8*
  %12898 = load i64, i64* %PC
  %12899 = add i64 %12898, 5
  store i64 %12899, i64* %PC
  %12900 = bitcast i8* %12897 to double*
  %12901 = load double, double* %12900, align 1
  %12902 = inttoptr i64 %12896 to double*
  store double %12901, double* %12902
  %12903 = load i64, i64* %RBP
  %12904 = sub i64 %12903, 16
  %12905 = bitcast %union.vec128_t* %XMM0 to i8*
  %12906 = load i64, i64* %PC
  %12907 = add i64 %12906, 5
  store i64 %12907, i64* %PC
  %12908 = bitcast i8* %12905 to double*
  %12909 = load double, double* %12908, align 1
  %12910 = inttoptr i64 %12904 to double*
  store double %12909, double* %12910
  %12911 = load i64, i64* %RBP
  %12912 = sub i64 %12911, 32
  %12913 = bitcast %union.vec128_t* %XMM0 to i8*
  %12914 = load i64, i64* %PC
  %12915 = add i64 %12914, 5
  store i64 %12915, i64* %PC
  %12916 = bitcast i8* %12913 to double*
  %12917 = load double, double* %12916, align 1
  %12918 = inttoptr i64 %12912 to double*
  store double %12917, double* %12918
  %12919 = load i64, i64* %RBP
  %12920 = sub i64 %12919, 168
  %12921 = load i32, i32* %EAX
  %12922 = zext i32 %12921 to i64
  %12923 = load i64, i64* %PC
  %12924 = add i64 %12923, 6
  store i64 %12924, i64* %PC
  %12925 = inttoptr i64 %12920 to i32*
  store i32 %12921, i32* %12925
  %12926 = load i64, i64* %PC
  %12927 = add i64 %12926, 6051
  %12928 = load i64, i64* %PC
  %12929 = add i64 %12928, 5
  %12930 = load i64, i64* %PC
  %12931 = add i64 %12930, 5
  store i64 %12931, i64* %PC
  %12932 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12933 = load i64, i64* %12932, align 8, !tbaa !2428
  %12934 = add i64 %12933, -8
  %12935 = inttoptr i64 %12934 to i64*
  store i64 %12929, i64* %12935
  store i64 %12934, i64* %12932, align 8, !tbaa !2428
  %12936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %12927, i64* %12936, align 8, !tbaa !2428
  %12937 = load i64, i64* %PC
  %12938 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %12937, %struct.Memory* %12804)
  %12939 = load i64, i64* %RBP
  %12940 = sub i64 %12939, 72
  %12941 = load i64, i64* %PC
  %12942 = add i64 %12941, 8
  store i64 %12942, i64* %PC
  %12943 = inttoptr i64 %12940 to i64*
  store i64 1, i64* %12943
  %12944 = load i64, i64* %RBP
  %12945 = sub i64 %12944, 172
  %12946 = load i32, i32* %EAX
  %12947 = zext i32 %12946 to i64
  %12948 = load i64, i64* %PC
  %12949 = add i64 %12948, 6
  store i64 %12949, i64* %PC
  %12950 = inttoptr i64 %12945 to i32*
  store i32 %12946, i32* %12950
  br label %block_400e60

block_401184:                                     ; preds = %block_400f2b, %block_401199
  %MEMORY.11 = phi %struct.Memory* [ %14752, %block_400f2b ], [ %MEMORY.11, %block_401199 ]
  %12951 = load i64, i64* %RBP
  %12952 = sub i64 %12951, 72
  %12953 = load i64, i64* %PC
  %12954 = add i64 %12953, 4
  store i64 %12954, i64* %PC
  %12955 = inttoptr i64 %12952 to i64*
  %12956 = load i64, i64* %12955
  store i64 %12956, i64* %RAX, align 8, !tbaa !2428
  %12957 = load i64, i64* %RBP
  %12958 = sub i64 %12957, 80
  %12959 = load i64, i64* %PC
  %12960 = add i64 %12959, 4
  store i64 %12960, i64* %PC
  %12961 = inttoptr i64 %12958 to i64*
  %12962 = load i64, i64* %12961
  store i64 %12962, i64* %RCX, align 8, !tbaa !2428
  %12963 = load i64, i64* %RCX
  %12964 = load i64, i64* %PC
  %12965 = add i64 %12964, 4
  store i64 %12965, i64* %PC
  %12966 = sub i64 %12963, 1
  store i64 %12966, i64* %RCX, align 8, !tbaa !2428
  %12967 = icmp ult i64 %12963, 1
  %12968 = zext i1 %12967 to i8
  %12969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12968, i8* %12969, align 1, !tbaa !2432
  %12970 = trunc i64 %12966 to i32
  %12971 = and i32 %12970, 255
  %12972 = call i32 @llvm.ctpop.i32(i32 %12971) #16
  %12973 = trunc i32 %12972 to i8
  %12974 = and i8 %12973, 1
  %12975 = xor i8 %12974, 1
  %12976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12975, i8* %12976, align 1, !tbaa !2446
  %12977 = xor i64 1, %12963
  %12978 = xor i64 %12977, %12966
  %12979 = lshr i64 %12978, 4
  %12980 = trunc i64 %12979 to i8
  %12981 = and i8 %12980, 1
  %12982 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12981, i8* %12982, align 1, !tbaa !2447
  %12983 = icmp eq i64 %12966, 0
  %12984 = zext i1 %12983 to i8
  %12985 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12984, i8* %12985, align 1, !tbaa !2448
  %12986 = lshr i64 %12966, 63
  %12987 = trunc i64 %12986 to i8
  %12988 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12987, i8* %12988, align 1, !tbaa !2449
  %12989 = lshr i64 %12963, 63
  %12990 = xor i64 %12986, %12989
  %12991 = add nuw nsw i64 %12990, %12989
  %12992 = icmp eq i64 %12991, 2
  %12993 = zext i1 %12992 to i8
  %12994 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12993, i8* %12994, align 1, !tbaa !2450
  %12995 = load i64, i64* %RAX
  %12996 = load i64, i64* %RCX
  %12997 = load i64, i64* %PC
  %12998 = add i64 %12997, 3
  store i64 %12998, i64* %PC
  %12999 = sub i64 %12995, %12996
  %13000 = icmp ult i64 %12995, %12996
  %13001 = zext i1 %13000 to i8
  %13002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13001, i8* %13002, align 1, !tbaa !2432
  %13003 = trunc i64 %12999 to i32
  %13004 = and i32 %13003, 255
  %13005 = call i32 @llvm.ctpop.i32(i32 %13004) #16
  %13006 = trunc i32 %13005 to i8
  %13007 = and i8 %13006, 1
  %13008 = xor i8 %13007, 1
  %13009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13008, i8* %13009, align 1, !tbaa !2446
  %13010 = xor i64 %12996, %12995
  %13011 = xor i64 %13010, %12999
  %13012 = lshr i64 %13011, 4
  %13013 = trunc i64 %13012 to i8
  %13014 = and i8 %13013, 1
  %13015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13014, i8* %13015, align 1, !tbaa !2447
  %13016 = icmp eq i64 %12999, 0
  %13017 = zext i1 %13016 to i8
  %13018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13017, i8* %13018, align 1, !tbaa !2448
  %13019 = lshr i64 %12999, 63
  %13020 = trunc i64 %13019 to i8
  %13021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13020, i8* %13021, align 1, !tbaa !2449
  %13022 = lshr i64 %12995, 63
  %13023 = lshr i64 %12996, 63
  %13024 = xor i64 %13023, %13022
  %13025 = xor i64 %13019, %13022
  %13026 = add nuw nsw i64 %13025, %13024
  %13027 = icmp eq i64 %13026, 2
  %13028 = zext i1 %13027 to i8
  %13029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13028, i8* %13029, align 1, !tbaa !2450
  %13030 = load i64, i64* %PC
  %13031 = add i64 %13030, 184
  %13032 = load i64, i64* %PC
  %13033 = add i64 %13032, 6
  %13034 = load i64, i64* %PC
  %13035 = add i64 %13034, 6
  store i64 %13035, i64* %PC
  %13036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %13037 = load i8, i8* %13036, align 1, !tbaa !2448
  %13038 = icmp eq i8 %13037, 0
  %13039 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %13040 = load i8, i8* %13039, align 1, !tbaa !2449
  %13041 = icmp ne i8 %13040, 0
  %13042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %13043 = load i8, i8* %13042, align 1, !tbaa !2450
  %13044 = icmp ne i8 %13043, 0
  %13045 = xor i1 %13041, %13044
  %13046 = xor i1 %13045, true
  %13047 = and i1 %13038, %13046
  %13048 = zext i1 %13047 to i8
  store i8 %13048, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %13049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %13050 = select i1 %13047, i64 %13031, i64 %13033
  store i64 %13050, i64* %13049, align 8, !tbaa !2428
  %13051 = load i8, i8* %BRANCH_TAKEN
  %13052 = icmp eq i8 %13051, 1
  br i1 %13052, label %block_40124b, label %block_401199

block_400b79:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit, %block_400b6d
  %MEMORY.12 = phi %struct.Memory* [ %8140, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit ], [ %8140, %block_400b6d ]
  %13053 = load i64, i64* %PC
  %13054 = add i64 %13053, 10
  store i64 %13054, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %13055 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13056 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13057 = bitcast %union.vec128_t* %XMM0 to i8*
  %13058 = load i64, i64* %PC
  %13059 = add i64 %13058, 3
  store i64 %13059, i64* %PC
  %13060 = bitcast i8* %13056 to i64*
  %13061 = load i64, i64* %13060, align 1
  %13062 = getelementptr inbounds i8, i8* %13056, i64 8
  %13063 = bitcast i8* %13062 to i64*
  %13064 = load i64, i64* %13063, align 1
  %13065 = bitcast i8* %13057 to i64*
  %13066 = load i64, i64* %13065, align 1
  %13067 = getelementptr inbounds i8, i8* %13057, i64 8
  %13068 = bitcast i8* %13067 to i64*
  %13069 = load i64, i64* %13068, align 1
  %13070 = xor i64 %13066, %13061
  %13071 = xor i64 %13069, %13064
  %13072 = trunc i64 %13070 to i32
  %13073 = lshr i64 %13070, 32
  %13074 = trunc i64 %13073 to i32
  %13075 = bitcast i8* %13055 to i32*
  store i32 %13072, i32* %13075, align 1, !tbaa !2454
  %13076 = getelementptr inbounds i8, i8* %13055, i64 4
  %13077 = bitcast i8* %13076 to i32*
  store i32 %13074, i32* %13077, align 1, !tbaa !2454
  %13078 = trunc i64 %13071 to i32
  %13079 = getelementptr inbounds i8, i8* %13055, i64 8
  %13080 = bitcast i8* %13079 to i32*
  store i32 %13078, i32* %13080, align 1, !tbaa !2454
  %13081 = lshr i64 %13071, 32
  %13082 = trunc i64 %13081 to i32
  %13083 = getelementptr inbounds i8, i8* %13055, i64 12
  %13084 = bitcast i8* %13083 to i32*
  store i32 %13082, i32* %13084, align 1, !tbaa !2454
  %13085 = load i64, i64* %RBP
  %13086 = sub i64 %13085, 80
  %13087 = load i64, i64* %PC
  %13088 = add i64 %13087, 4
  store i64 %13088, i64* %PC
  %13089 = inttoptr i64 %13086 to i64*
  %13090 = load i64, i64* %13089
  store i64 %13090, i64* %RAX, align 8, !tbaa !2428
  %13091 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13092 = load i64, i64* %RAX
  %13093 = load i64, i64* %PC
  %13094 = add i64 %13093, 5
  store i64 %13094, i64* %PC
  %13095 = sitofp i64 %13092 to double
  %13096 = bitcast i8* %13091 to double*
  store double %13095, double* %13096, align 1, !tbaa !2451
  %13097 = bitcast %union.vec128_t* %XMM1 to i8*
  %13098 = load i64, i64* %PC
  %13099 = add i64 %13098, 9
  store i64 %13099, i64* %PC
  %13100 = bitcast i8* %13097 to double*
  %13101 = load double, double* %13100, align 1
  store double %13101, double* bitcast (%sc_type* @sc to double*)
  %13102 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13103 = load i64, i64* %PC
  %13104 = add i64 %13103, 9
  store i64 %13104, i64* %PC
  %13105 = load double, double* bitcast (%sa_type* @sa to double*)
  %13106 = bitcast i8* %13102 to double*
  store double %13105, double* %13106, align 1, !tbaa !2451
  %13107 = getelementptr inbounds i8, i8* %13102, i64 8
  %13108 = bitcast i8* %13107 to double*
  store double 0.000000e+00, double* %13108, align 1, !tbaa !2451
  %13109 = load i64, i64* %RBP
  %13110 = sub i64 %13109, 24
  %13111 = bitcast %union.vec128_t* %XMM1 to i8*
  %13112 = load i64, i64* %PC
  %13113 = add i64 %13112, 5
  store i64 %13113, i64* %PC
  %13114 = bitcast i8* %13111 to double*
  %13115 = load double, double* %13114, align 1
  %13116 = inttoptr i64 %13110 to double*
  store double %13115, double* %13116
  %13117 = load i64, i64* %RBP
  %13118 = sub i64 %13117, 32
  %13119 = bitcast %union.vec128_t* %XMM0 to i8*
  %13120 = load i64, i64* %PC
  %13121 = add i64 %13120, 5
  store i64 %13121, i64* %PC
  %13122 = bitcast i8* %13119 to double*
  %13123 = load double, double* %13122, align 1
  %13124 = inttoptr i64 %13118 to double*
  store double %13123, double* %13124
  %13125 = load i64, i64* %RBP
  %13126 = sub i64 %13125, 40
  %13127 = bitcast %union.vec128_t* %XMM0 to i8*
  %13128 = load i64, i64* %PC
  %13129 = add i64 %13128, 5
  store i64 %13129, i64* %PC
  %13130 = bitcast i8* %13127 to double*
  %13131 = load double, double* %13130, align 1
  %13132 = inttoptr i64 %13126 to double*
  store double %13131, double* %13132
  %13133 = load i64, i64* %RBP
  %13134 = sub i64 %13133, 48
  %13135 = bitcast %union.vec128_t* %XMM0 to i8*
  %13136 = load i64, i64* %PC
  %13137 = add i64 %13136, 5
  store i64 %13137, i64* %PC
  %13138 = bitcast i8* %13135 to double*
  %13139 = load double, double* %13138, align 1
  %13140 = inttoptr i64 %13134 to double*
  store double %13139, double* %13140
  %13141 = load i64, i64* %PC
  %13142 = add i64 %13141, 6715
  %13143 = load i64, i64* %PC
  %13144 = add i64 %13143, 5
  %13145 = load i64, i64* %PC
  %13146 = add i64 %13145, 5
  store i64 %13146, i64* %PC
  %13147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13148 = load i64, i64* %13147, align 8, !tbaa !2428
  %13149 = add i64 %13148, -8
  %13150 = inttoptr i64 %13149 to i64*
  store i64 %13144, i64* %13150
  store i64 %13149, i64* %13147, align 8, !tbaa !2428
  %13151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %13142, i64* %13151, align 8, !tbaa !2428
  %13152 = load i64, i64* %PC
  %13153 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %13152, %struct.Memory* %MEMORY.12)
  %13154 = load i64, i64* %RBP
  %13155 = sub i64 %13154, 72
  %13156 = load i64, i64* %PC
  %13157 = add i64 %13156, 8
  store i64 %13157, i64* %PC
  %13158 = inttoptr i64 %13155 to i64*
  store i64 1, i64* %13158
  %13159 = load i64, i64* %RBP
  %13160 = sub i64 %13159, 152
  %13161 = load i32, i32* %EAX
  %13162 = zext i32 %13161 to i64
  %13163 = load i64, i64* %PC
  %13164 = add i64 %13163, 6
  store i64 %13164, i64* %PC
  %13165 = inttoptr i64 %13160 to i32*
  store i32 %13161, i32* %13165
  br label %block_400bc8

block_401fa1:                                     ; preds = %block_401f8c
  %13166 = load i64, i64* %RBP
  %13167 = sub i64 %13166, 72
  %13168 = load i64, i64* %PC
  %13169 = add i64 %13168, 4
  store i64 %13169, i64* %PC
  %13170 = inttoptr i64 %13167 to i64*
  %13171 = load i64, i64* %13170
  store i64 %13171, i64* %RAX, align 8, !tbaa !2428
  %13172 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13173 = load i64, i64* %RAX
  %13174 = load i64, i64* %PC
  %13175 = add i64 %13174, 5
  store i64 %13175, i64* %PC
  %13176 = sitofp i64 %13173 to double
  %13177 = bitcast i8* %13172 to double*
  store double %13176, double* %13177, align 1, !tbaa !2451
  %13178 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13179 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13180 = load i64, i64* %RBP
  %13181 = sub i64 %13180, 48
  %13182 = load i64, i64* %PC
  %13183 = add i64 %13182, 5
  store i64 %13183, i64* %PC
  %13184 = bitcast i8* %13179 to double*
  %13185 = load double, double* %13184, align 1
  %13186 = getelementptr inbounds i8, i8* %13179, i64 8
  %13187 = bitcast i8* %13186 to i64*
  %13188 = load i64, i64* %13187, align 1
  %13189 = inttoptr i64 %13181 to double*
  %13190 = load double, double* %13189
  %13191 = fmul double %13185, %13190
  %13192 = bitcast i8* %13178 to double*
  store double %13191, double* %13192, align 1, !tbaa !2451
  %13193 = getelementptr inbounds i8, i8* %13178, i64 8
  %13194 = bitcast i8* %13193 to i64*
  store i64 %13188, i64* %13194, align 1, !tbaa !2451
  %13195 = load i64, i64* %RBP
  %13196 = sub i64 %13195, 24
  %13197 = bitcast %union.vec128_t* %XMM0 to i8*
  %13198 = load i64, i64* %PC
  %13199 = add i64 %13198, 5
  store i64 %13199, i64* %PC
  %13200 = bitcast i8* %13197 to double*
  %13201 = load double, double* %13200, align 1
  %13202 = inttoptr i64 %13196 to double*
  store double %13201, double* %13202
  %13203 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13204 = load i64, i64* %RBP
  %13205 = sub i64 %13204, 24
  %13206 = load i64, i64* %PC
  %13207 = add i64 %13206, 5
  store i64 %13207, i64* %PC
  %13208 = inttoptr i64 %13205 to double*
  %13209 = load double, double* %13208
  %13210 = bitcast i8* %13203 to double*
  store double %13209, double* %13210, align 1, !tbaa !2451
  %13211 = getelementptr inbounds i8, i8* %13203, i64 8
  %13212 = bitcast i8* %13211 to double*
  store double 0.000000e+00, double* %13212, align 1, !tbaa !2451
  %13213 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13214 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13215 = load i64, i64* %RBP
  %13216 = sub i64 %13215, 24
  %13217 = load i64, i64* %PC
  %13218 = add i64 %13217, 5
  store i64 %13218, i64* %PC
  %13219 = bitcast i8* %13214 to double*
  %13220 = load double, double* %13219, align 1
  %13221 = getelementptr inbounds i8, i8* %13214, i64 8
  %13222 = bitcast i8* %13221 to i64*
  %13223 = load i64, i64* %13222, align 1
  %13224 = inttoptr i64 %13216 to double*
  %13225 = load double, double* %13224
  %13226 = fmul double %13220, %13225
  %13227 = bitcast i8* %13213 to double*
  store double %13226, double* %13227, align 1, !tbaa !2451
  %13228 = getelementptr inbounds i8, i8* %13213, i64 8
  %13229 = bitcast i8* %13228 to i64*
  store i64 %13223, i64* %13229, align 1, !tbaa !2451
  %13230 = load i64, i64* %RBP
  %13231 = sub i64 %13230, 40
  %13232 = bitcast %union.vec128_t* %XMM0 to i8*
  %13233 = load i64, i64* %PC
  %13234 = add i64 %13233, 5
  store i64 %13234, i64* %PC
  %13235 = bitcast i8* %13232 to double*
  %13236 = load double, double* %13235, align 1
  %13237 = inttoptr i64 %13231 to double*
  store double %13236, double* %13237
  %13238 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13239 = load i64, i64* %RBP
  %13240 = sub i64 %13239, 40
  %13241 = load i64, i64* %PC
  %13242 = add i64 %13241, 5
  store i64 %13242, i64* %PC
  %13243 = inttoptr i64 %13240 to double*
  %13244 = load double, double* %13243
  %13245 = bitcast i8* %13238 to double*
  store double %13244, double* %13245, align 1, !tbaa !2451
  %13246 = getelementptr inbounds i8, i8* %13238, i64 8
  %13247 = bitcast i8* %13246 to double*
  store double 0.000000e+00, double* %13247, align 1, !tbaa !2451
  %13248 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13249 = load i64, i64* %RBP
  %13250 = sub i64 %13249, 40
  %13251 = load i64, i64* %PC
  %13252 = add i64 %13251, 5
  store i64 %13252, i64* %PC
  %13253 = inttoptr i64 %13250 to double*
  %13254 = load double, double* %13253
  %13255 = bitcast i8* %13248 to double*
  store double %13254, double* %13255, align 1, !tbaa !2451
  %13256 = getelementptr inbounds i8, i8* %13248, i64 8
  %13257 = bitcast i8* %13256 to double*
  store double 0.000000e+00, double* %13257, align 1, !tbaa !2451
  %13258 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13259 = load i64, i64* %RBP
  %13260 = sub i64 %13259, 40
  %13261 = load i64, i64* %PC
  %13262 = add i64 %13261, 5
  store i64 %13262, i64* %PC
  %13263 = inttoptr i64 %13260 to double*
  %13264 = load double, double* %13263
  %13265 = bitcast i8* %13258 to double*
  store double %13264, double* %13265, align 1, !tbaa !2451
  %13266 = getelementptr inbounds i8, i8* %13258, i64 8
  %13267 = bitcast i8* %13266 to double*
  store double 0.000000e+00, double* %13267, align 1, !tbaa !2451
  %13268 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13269 = load i64, i64* %RBP
  %13270 = sub i64 %13269, 40
  %13271 = load i64, i64* %PC
  %13272 = add i64 %13271, 5
  store i64 %13272, i64* %PC
  %13273 = inttoptr i64 %13270 to double*
  %13274 = load double, double* %13273
  %13275 = bitcast i8* %13268 to double*
  store double %13274, double* %13275, align 1, !tbaa !2451
  %13276 = getelementptr inbounds i8, i8* %13268, i64 8
  %13277 = bitcast i8* %13276 to double*
  store double 0.000000e+00, double* %13277, align 1, !tbaa !2451
  %13278 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13279 = load i64, i64* %RBP
  %13280 = sub i64 %13279, 40
  %13281 = load i64, i64* %PC
  %13282 = add i64 %13281, 5
  store i64 %13282, i64* %PC
  %13283 = inttoptr i64 %13280 to double*
  %13284 = load double, double* %13283
  %13285 = bitcast i8* %13278 to double*
  store double %13284, double* %13285, align 1, !tbaa !2451
  %13286 = getelementptr inbounds i8, i8* %13278, i64 8
  %13287 = bitcast i8* %13286 to double*
  store double 0.000000e+00, double* %13287, align 1, !tbaa !2451
  %13288 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %13289 = load i64, i64* %PC
  %13290 = add i64 %13289, 9
  store i64 %13290, i64* %PC
  %13291 = load double, double* bitcast (%B6_type* @B6 to double*)
  %13292 = bitcast i8* %13288 to double*
  store double %13291, double* %13292, align 1, !tbaa !2451
  %13293 = getelementptr inbounds i8, i8* %13288, i64 8
  %13294 = bitcast i8* %13293 to double*
  store double 0.000000e+00, double* %13294, align 1, !tbaa !2451
  %13295 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %13296 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %13297 = load i64, i64* %RBP
  %13298 = sub i64 %13297, 40
  %13299 = load i64, i64* %PC
  %13300 = add i64 %13299, 5
  store i64 %13300, i64* %PC
  %13301 = bitcast i8* %13296 to double*
  %13302 = load double, double* %13301, align 1
  %13303 = getelementptr inbounds i8, i8* %13296, i64 8
  %13304 = bitcast i8* %13303 to i64*
  %13305 = load i64, i64* %13304, align 1
  %13306 = inttoptr i64 %13298 to double*
  %13307 = load double, double* %13306
  %13308 = fmul double %13302, %13307
  %13309 = bitcast i8* %13295 to double*
  store double %13308, double* %13309, align 1, !tbaa !2451
  %13310 = getelementptr inbounds i8, i8* %13295, i64 8
  %13311 = bitcast i8* %13310 to i64*
  store i64 %13305, i64* %13311, align 1, !tbaa !2451
  %13312 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %13313 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %13314 = load i64, i64* %PC
  %13315 = add i64 %13314, 9
  store i64 %13315, i64* %PC
  %13316 = bitcast i8* %13313 to double*
  %13317 = load double, double* %13316, align 1
  %13318 = getelementptr inbounds i8, i8* %13313, i64 8
  %13319 = bitcast i8* %13318 to i64*
  %13320 = load i64, i64* %13319, align 1
  %13321 = load double, double* bitcast (%B5_type* @B5 to double*)
  %13322 = fadd double %13317, %13321
  %13323 = bitcast i8* %13312 to double*
  store double %13322, double* %13323, align 1, !tbaa !2451
  %13324 = getelementptr inbounds i8, i8* %13312, i64 8
  %13325 = bitcast i8* %13324 to i64*
  store i64 %13320, i64* %13325, align 1, !tbaa !2451
  %13326 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13327 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13328 = bitcast %union.vec128_t* %XMM5 to i8*
  %13329 = load i64, i64* %PC
  %13330 = add i64 %13329, 4
  store i64 %13330, i64* %PC
  %13331 = bitcast i8* %13327 to double*
  %13332 = load double, double* %13331, align 1
  %13333 = getelementptr inbounds i8, i8* %13327, i64 8
  %13334 = bitcast i8* %13333 to i64*
  %13335 = load i64, i64* %13334, align 1
  %13336 = bitcast i8* %13328 to double*
  %13337 = load double, double* %13336, align 1
  %13338 = fmul double %13332, %13337
  %13339 = bitcast i8* %13326 to double*
  store double %13338, double* %13339, align 1, !tbaa !2451
  %13340 = getelementptr inbounds i8, i8* %13326, i64 8
  %13341 = bitcast i8* %13340 to i64*
  store i64 %13335, i64* %13341, align 1, !tbaa !2451
  %13342 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13343 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13344 = load i64, i64* %PC
  %13345 = add i64 %13344, 9
  store i64 %13345, i64* %PC
  %13346 = bitcast i8* %13343 to double*
  %13347 = load double, double* %13346, align 1
  %13348 = getelementptr inbounds i8, i8* %13343, i64 8
  %13349 = bitcast i8* %13348 to i64*
  %13350 = load i64, i64* %13349, align 1
  %13351 = load double, double* bitcast (%B4_type* @B4 to double*)
  %13352 = fadd double %13347, %13351
  %13353 = bitcast i8* %13342 to double*
  store double %13352, double* %13353, align 1, !tbaa !2451
  %13354 = getelementptr inbounds i8, i8* %13342, i64 8
  %13355 = bitcast i8* %13354 to i64*
  store i64 %13350, i64* %13355, align 1, !tbaa !2451
  %13356 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13357 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13358 = bitcast %union.vec128_t* %XMM4 to i8*
  %13359 = load i64, i64* %PC
  %13360 = add i64 %13359, 4
  store i64 %13360, i64* %PC
  %13361 = bitcast i8* %13357 to double*
  %13362 = load double, double* %13361, align 1
  %13363 = getelementptr inbounds i8, i8* %13357, i64 8
  %13364 = bitcast i8* %13363 to i64*
  %13365 = load i64, i64* %13364, align 1
  %13366 = bitcast i8* %13358 to double*
  %13367 = load double, double* %13366, align 1
  %13368 = fmul double %13362, %13367
  %13369 = bitcast i8* %13356 to double*
  store double %13368, double* %13369, align 1, !tbaa !2451
  %13370 = getelementptr inbounds i8, i8* %13356, i64 8
  %13371 = bitcast i8* %13370 to i64*
  store i64 %13365, i64* %13371, align 1, !tbaa !2451
  %13372 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13373 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13374 = load i64, i64* %PC
  %13375 = add i64 %13374, 9
  store i64 %13375, i64* %PC
  %13376 = bitcast i8* %13373 to double*
  %13377 = load double, double* %13376, align 1
  %13378 = getelementptr inbounds i8, i8* %13373, i64 8
  %13379 = bitcast i8* %13378 to i64*
  %13380 = load i64, i64* %13379, align 1
  %13381 = load double, double* bitcast (%B3_type* @B3 to double*)
  %13382 = fadd double %13377, %13381
  %13383 = bitcast i8* %13372 to double*
  store double %13382, double* %13383, align 1, !tbaa !2451
  %13384 = getelementptr inbounds i8, i8* %13372, i64 8
  %13385 = bitcast i8* %13384 to i64*
  store i64 %13380, i64* %13385, align 1, !tbaa !2451
  %13386 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13387 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13388 = bitcast %union.vec128_t* %XMM3 to i8*
  %13389 = load i64, i64* %PC
  %13390 = add i64 %13389, 4
  store i64 %13390, i64* %PC
  %13391 = bitcast i8* %13387 to double*
  %13392 = load double, double* %13391, align 1
  %13393 = getelementptr inbounds i8, i8* %13387, i64 8
  %13394 = bitcast i8* %13393 to i64*
  %13395 = load i64, i64* %13394, align 1
  %13396 = bitcast i8* %13388 to double*
  %13397 = load double, double* %13396, align 1
  %13398 = fmul double %13392, %13397
  %13399 = bitcast i8* %13386 to double*
  store double %13398, double* %13399, align 1, !tbaa !2451
  %13400 = getelementptr inbounds i8, i8* %13386, i64 8
  %13401 = bitcast i8* %13400 to i64*
  store i64 %13395, i64* %13401, align 1, !tbaa !2451
  %13402 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13403 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13404 = load i64, i64* %PC
  %13405 = add i64 %13404, 9
  store i64 %13405, i64* %PC
  %13406 = bitcast i8* %13403 to double*
  %13407 = load double, double* %13406, align 1
  %13408 = getelementptr inbounds i8, i8* %13403, i64 8
  %13409 = bitcast i8* %13408 to i64*
  %13410 = load i64, i64* %13409, align 1
  %13411 = load double, double* bitcast (%B2_type* @B2 to double*)
  %13412 = fadd double %13407, %13411
  %13413 = bitcast i8* %13402 to double*
  store double %13412, double* %13413, align 1, !tbaa !2451
  %13414 = getelementptr inbounds i8, i8* %13402, i64 8
  %13415 = bitcast i8* %13414 to i64*
  store i64 %13410, i64* %13415, align 1, !tbaa !2451
  %13416 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13417 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13418 = bitcast %union.vec128_t* %XMM2 to i8*
  %13419 = load i64, i64* %PC
  %13420 = add i64 %13419, 4
  store i64 %13420, i64* %PC
  %13421 = bitcast i8* %13417 to double*
  %13422 = load double, double* %13421, align 1
  %13423 = getelementptr inbounds i8, i8* %13417, i64 8
  %13424 = bitcast i8* %13423 to i64*
  %13425 = load i64, i64* %13424, align 1
  %13426 = bitcast i8* %13418 to double*
  %13427 = load double, double* %13426, align 1
  %13428 = fmul double %13422, %13427
  %13429 = bitcast i8* %13416 to double*
  store double %13428, double* %13429, align 1, !tbaa !2451
  %13430 = getelementptr inbounds i8, i8* %13416, i64 8
  %13431 = bitcast i8* %13430 to i64*
  store i64 %13425, i64* %13431, align 1, !tbaa !2451
  %13432 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13433 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13434 = load i64, i64* %PC
  %13435 = add i64 %13434, 9
  store i64 %13435, i64* %PC
  %13436 = bitcast i8* %13433 to double*
  %13437 = load double, double* %13436, align 1
  %13438 = getelementptr inbounds i8, i8* %13433, i64 8
  %13439 = bitcast i8* %13438 to i64*
  %13440 = load i64, i64* %13439, align 1
  %13441 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %13442 = fadd double %13437, %13441
  %13443 = bitcast i8* %13432 to double*
  store double %13442, double* %13443, align 1, !tbaa !2451
  %13444 = getelementptr inbounds i8, i8* %13432, i64 8
  %13445 = bitcast i8* %13444 to i64*
  store i64 %13440, i64* %13445, align 1, !tbaa !2451
  %13446 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13447 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13448 = bitcast %union.vec128_t* %XMM1 to i8*
  %13449 = load i64, i64* %PC
  %13450 = add i64 %13449, 4
  store i64 %13450, i64* %PC
  %13451 = bitcast i8* %13447 to double*
  %13452 = load double, double* %13451, align 1
  %13453 = getelementptr inbounds i8, i8* %13447, i64 8
  %13454 = bitcast i8* %13453 to i64*
  %13455 = load i64, i64* %13454, align 1
  %13456 = bitcast i8* %13448 to double*
  %13457 = load double, double* %13456, align 1
  %13458 = fmul double %13452, %13457
  %13459 = bitcast i8* %13446 to double*
  store double %13458, double* %13459, align 1, !tbaa !2451
  %13460 = getelementptr inbounds i8, i8* %13446, i64 8
  %13461 = bitcast i8* %13460 to i64*
  store i64 %13455, i64* %13461, align 1, !tbaa !2451
  %13462 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13463 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13464 = load i64, i64* %PC
  %13465 = add i64 %13464, 9
  store i64 %13465, i64* %PC
  %13466 = bitcast i8* %13463 to double*
  %13467 = load double, double* %13466, align 1
  %13468 = getelementptr inbounds i8, i8* %13463, i64 8
  %13469 = bitcast i8* %13468 to i64*
  %13470 = load i64, i64* %13469, align 1
  %13471 = load double, double* bitcast (%one_type* @one to double*)
  %13472 = fadd double %13467, %13471
  %13473 = bitcast i8* %13462 to double*
  store double %13472, double* %13473, align 1, !tbaa !2451
  %13474 = getelementptr inbounds i8, i8* %13462, i64 8
  %13475 = bitcast i8* %13474 to i64*
  store i64 %13470, i64* %13475, align 1, !tbaa !2451
  %13476 = load i64, i64* %RBP
  %13477 = sub i64 %13476, 32
  %13478 = bitcast %union.vec128_t* %XMM0 to i8*
  %13479 = load i64, i64* %PC
  %13480 = add i64 %13479, 5
  store i64 %13480, i64* %PC
  %13481 = bitcast i8* %13478 to double*
  %13482 = load double, double* %13481, align 1
  %13483 = inttoptr i64 %13477 to double*
  store double %13482, double* %13483
  %13484 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13485 = load i64, i64* %RBP
  %13486 = sub i64 %13485, 16
  %13487 = load i64, i64* %PC
  %13488 = add i64 %13487, 5
  store i64 %13488, i64* %PC
  %13489 = inttoptr i64 %13486 to double*
  %13490 = load double, double* %13489
  %13491 = bitcast i8* %13484 to double*
  store double %13490, double* %13491, align 1, !tbaa !2451
  %13492 = getelementptr inbounds i8, i8* %13484, i64 8
  %13493 = bitcast i8* %13492 to double*
  store double 0.000000e+00, double* %13493, align 1, !tbaa !2451
  %13494 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13495 = load i64, i64* %RBP
  %13496 = sub i64 %13495, 32
  %13497 = load i64, i64* %PC
  %13498 = add i64 %13497, 5
  store i64 %13498, i64* %PC
  %13499 = inttoptr i64 %13496 to double*
  %13500 = load double, double* %13499
  %13501 = bitcast i8* %13494 to double*
  store double %13500, double* %13501, align 1, !tbaa !2451
  %13502 = getelementptr inbounds i8, i8* %13494, i64 8
  %13503 = bitcast i8* %13502 to double*
  store double 0.000000e+00, double* %13503, align 1, !tbaa !2451
  %13504 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13505 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13506 = load i64, i64* %RBP
  %13507 = sub i64 %13506, 32
  %13508 = load i64, i64* %PC
  %13509 = add i64 %13508, 5
  store i64 %13509, i64* %PC
  %13510 = bitcast i8* %13505 to double*
  %13511 = load double, double* %13510, align 1
  %13512 = getelementptr inbounds i8, i8* %13505, i64 8
  %13513 = bitcast i8* %13512 to i64*
  %13514 = load i64, i64* %13513, align 1
  %13515 = inttoptr i64 %13507 to double*
  %13516 = load double, double* %13515
  %13517 = fmul double %13511, %13516
  %13518 = bitcast i8* %13504 to double*
  store double %13517, double* %13518, align 1, !tbaa !2451
  %13519 = getelementptr inbounds i8, i8* %13504, i64 8
  %13520 = bitcast i8* %13519 to i64*
  store i64 %13514, i64* %13520, align 1, !tbaa !2451
  %13521 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13522 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13523 = load i64, i64* %RBP
  %13524 = sub i64 %13523, 24
  %13525 = load i64, i64* %PC
  %13526 = add i64 %13525, 5
  store i64 %13526, i64* %PC
  %13527 = bitcast i8* %13522 to double*
  %13528 = load double, double* %13527, align 1
  %13529 = getelementptr inbounds i8, i8* %13522, i64 8
  %13530 = bitcast i8* %13529 to i64*
  %13531 = load i64, i64* %13530, align 1
  %13532 = inttoptr i64 %13524 to double*
  %13533 = load double, double* %13532
  %13534 = fmul double %13528, %13533
  %13535 = bitcast i8* %13521 to double*
  store double %13534, double* %13535, align 1, !tbaa !2451
  %13536 = getelementptr inbounds i8, i8* %13521, i64 8
  %13537 = bitcast i8* %13536 to i64*
  store i64 %13531, i64* %13537, align 1, !tbaa !2451
  %13538 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13539 = load i64, i64* %PC
  %13540 = add i64 %13539, 9
  store i64 %13540, i64* %PC
  %13541 = load double, double* bitcast (%A6_type* @A6 to double*)
  %13542 = bitcast i8* %13538 to double*
  store double %13541, double* %13542, align 1, !tbaa !2451
  %13543 = getelementptr inbounds i8, i8* %13538, i64 8
  %13544 = bitcast i8* %13543 to double*
  store double 0.000000e+00, double* %13544, align 1, !tbaa !2451
  %13545 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13546 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13547 = load i64, i64* %RBP
  %13548 = sub i64 %13547, 40
  %13549 = load i64, i64* %PC
  %13550 = add i64 %13549, 5
  store i64 %13550, i64* %PC
  %13551 = bitcast i8* %13546 to double*
  %13552 = load double, double* %13551, align 1
  %13553 = getelementptr inbounds i8, i8* %13546, i64 8
  %13554 = bitcast i8* %13553 to i64*
  %13555 = load i64, i64* %13554, align 1
  %13556 = inttoptr i64 %13548 to double*
  %13557 = load double, double* %13556
  %13558 = fmul double %13552, %13557
  %13559 = bitcast i8* %13545 to double*
  store double %13558, double* %13559, align 1, !tbaa !2451
  %13560 = getelementptr inbounds i8, i8* %13545, i64 8
  %13561 = bitcast i8* %13560 to i64*
  store i64 %13555, i64* %13561, align 1, !tbaa !2451
  %13562 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13563 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13564 = load i64, i64* %PC
  %13565 = add i64 %13564, 9
  store i64 %13565, i64* %PC
  %13566 = bitcast i8* %13563 to double*
  %13567 = load double, double* %13566, align 1
  %13568 = getelementptr inbounds i8, i8* %13563, i64 8
  %13569 = bitcast i8* %13568 to i64*
  %13570 = load i64, i64* %13569, align 1
  %13571 = load double, double* bitcast (%A5_type* @A5 to double*)
  %13572 = fadd double %13567, %13571
  %13573 = bitcast i8* %13562 to double*
  store double %13572, double* %13573, align 1, !tbaa !2451
  %13574 = getelementptr inbounds i8, i8* %13562, i64 8
  %13575 = bitcast i8* %13574 to i64*
  store i64 %13570, i64* %13575, align 1, !tbaa !2451
  %13576 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13577 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13578 = load i64, i64* %RBP
  %13579 = sub i64 %13578, 40
  %13580 = load i64, i64* %PC
  %13581 = add i64 %13580, 5
  store i64 %13581, i64* %PC
  %13582 = bitcast i8* %13577 to double*
  %13583 = load double, double* %13582, align 1
  %13584 = getelementptr inbounds i8, i8* %13577, i64 8
  %13585 = bitcast i8* %13584 to i64*
  %13586 = load i64, i64* %13585, align 1
  %13587 = inttoptr i64 %13579 to double*
  %13588 = load double, double* %13587
  %13589 = fmul double %13583, %13588
  %13590 = bitcast i8* %13576 to double*
  store double %13589, double* %13590, align 1, !tbaa !2451
  %13591 = getelementptr inbounds i8, i8* %13576, i64 8
  %13592 = bitcast i8* %13591 to i64*
  store i64 %13586, i64* %13592, align 1, !tbaa !2451
  %13593 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13594 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13595 = load i64, i64* %PC
  %13596 = add i64 %13595, 9
  store i64 %13596, i64* %PC
  %13597 = bitcast i8* %13594 to double*
  %13598 = load double, double* %13597, align 1
  %13599 = getelementptr inbounds i8, i8* %13594, i64 8
  %13600 = bitcast i8* %13599 to i64*
  %13601 = load i64, i64* %13600, align 1
  %13602 = load double, double* bitcast (%A4_type* @A4 to double*)
  %13603 = fadd double %13598, %13602
  %13604 = bitcast i8* %13593 to double*
  store double %13603, double* %13604, align 1, !tbaa !2451
  %13605 = getelementptr inbounds i8, i8* %13593, i64 8
  %13606 = bitcast i8* %13605 to i64*
  store i64 %13601, i64* %13606, align 1, !tbaa !2451
  %13607 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13608 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13609 = load i64, i64* %RBP
  %13610 = sub i64 %13609, 40
  %13611 = load i64, i64* %PC
  %13612 = add i64 %13611, 5
  store i64 %13612, i64* %PC
  %13613 = bitcast i8* %13608 to double*
  %13614 = load double, double* %13613, align 1
  %13615 = getelementptr inbounds i8, i8* %13608, i64 8
  %13616 = bitcast i8* %13615 to i64*
  %13617 = load i64, i64* %13616, align 1
  %13618 = inttoptr i64 %13610 to double*
  %13619 = load double, double* %13618
  %13620 = fmul double %13614, %13619
  %13621 = bitcast i8* %13607 to double*
  store double %13620, double* %13621, align 1, !tbaa !2451
  %13622 = getelementptr inbounds i8, i8* %13607, i64 8
  %13623 = bitcast i8* %13622 to i64*
  store i64 %13617, i64* %13623, align 1, !tbaa !2451
  %13624 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13625 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13626 = load i64, i64* %PC
  %13627 = add i64 %13626, 9
  store i64 %13627, i64* %PC
  %13628 = bitcast i8* %13625 to double*
  %13629 = load double, double* %13628, align 1
  %13630 = getelementptr inbounds i8, i8* %13625, i64 8
  %13631 = bitcast i8* %13630 to i64*
  %13632 = load i64, i64* %13631, align 1
  %13633 = load double, double* bitcast (%A3_type* @A3 to double*)
  %13634 = fadd double %13629, %13633
  %13635 = bitcast i8* %13624 to double*
  store double %13634, double* %13635, align 1, !tbaa !2451
  %13636 = getelementptr inbounds i8, i8* %13624, i64 8
  %13637 = bitcast i8* %13636 to i64*
  store i64 %13632, i64* %13637, align 1, !tbaa !2451
  %13638 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13639 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13640 = load i64, i64* %RBP
  %13641 = sub i64 %13640, 40
  %13642 = load i64, i64* %PC
  %13643 = add i64 %13642, 5
  store i64 %13643, i64* %PC
  %13644 = bitcast i8* %13639 to double*
  %13645 = load double, double* %13644, align 1
  %13646 = getelementptr inbounds i8, i8* %13639, i64 8
  %13647 = bitcast i8* %13646 to i64*
  %13648 = load i64, i64* %13647, align 1
  %13649 = inttoptr i64 %13641 to double*
  %13650 = load double, double* %13649
  %13651 = fmul double %13645, %13650
  %13652 = bitcast i8* %13638 to double*
  store double %13651, double* %13652, align 1, !tbaa !2451
  %13653 = getelementptr inbounds i8, i8* %13638, i64 8
  %13654 = bitcast i8* %13653 to i64*
  store i64 %13648, i64* %13654, align 1, !tbaa !2451
  %13655 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13656 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13657 = load i64, i64* %PC
  %13658 = add i64 %13657, 9
  store i64 %13658, i64* %PC
  %13659 = bitcast i8* %13656 to double*
  %13660 = load double, double* %13659, align 1
  %13661 = getelementptr inbounds i8, i8* %13656, i64 8
  %13662 = bitcast i8* %13661 to i64*
  %13663 = load i64, i64* %13662, align 1
  %13664 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %13665 = fadd double %13660, %13664
  %13666 = bitcast i8* %13655 to double*
  store double %13665, double* %13666, align 1, !tbaa !2451
  %13667 = getelementptr inbounds i8, i8* %13655, i64 8
  %13668 = bitcast i8* %13667 to i64*
  store i64 %13663, i64* %13668, align 1, !tbaa !2451
  %13669 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13670 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13671 = load i64, i64* %RBP
  %13672 = sub i64 %13671, 40
  %13673 = load i64, i64* %PC
  %13674 = add i64 %13673, 5
  store i64 %13674, i64* %PC
  %13675 = bitcast i8* %13670 to double*
  %13676 = load double, double* %13675, align 1
  %13677 = getelementptr inbounds i8, i8* %13670, i64 8
  %13678 = bitcast i8* %13677 to i64*
  %13679 = load i64, i64* %13678, align 1
  %13680 = inttoptr i64 %13672 to double*
  %13681 = load double, double* %13680
  %13682 = fmul double %13676, %13681
  %13683 = bitcast i8* %13669 to double*
  store double %13682, double* %13683, align 1, !tbaa !2451
  %13684 = getelementptr inbounds i8, i8* %13669, i64 8
  %13685 = bitcast i8* %13684 to i64*
  store i64 %13679, i64* %13685, align 1, !tbaa !2451
  %13686 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13687 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13688 = load i64, i64* %PC
  %13689 = add i64 %13688, 9
  store i64 %13689, i64* %PC
  %13690 = bitcast i8* %13687 to double*
  %13691 = load double, double* %13690, align 1
  %13692 = getelementptr inbounds i8, i8* %13687, i64 8
  %13693 = bitcast i8* %13692 to i64*
  %13694 = load i64, i64* %13693, align 1
  %13695 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %13696 = fadd double %13691, %13695
  %13697 = bitcast i8* %13686 to double*
  store double %13696, double* %13697, align 1, !tbaa !2451
  %13698 = getelementptr inbounds i8, i8* %13686, i64 8
  %13699 = bitcast i8* %13698 to i64*
  store i64 %13694, i64* %13699, align 1, !tbaa !2451
  %13700 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13701 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13702 = load i64, i64* %RBP
  %13703 = sub i64 %13702, 40
  %13704 = load i64, i64* %PC
  %13705 = add i64 %13704, 5
  store i64 %13705, i64* %PC
  %13706 = bitcast i8* %13701 to double*
  %13707 = load double, double* %13706, align 1
  %13708 = getelementptr inbounds i8, i8* %13701, i64 8
  %13709 = bitcast i8* %13708 to i64*
  %13710 = load i64, i64* %13709, align 1
  %13711 = inttoptr i64 %13703 to double*
  %13712 = load double, double* %13711
  %13713 = fmul double %13707, %13712
  %13714 = bitcast i8* %13700 to double*
  store double %13713, double* %13714, align 1, !tbaa !2451
  %13715 = getelementptr inbounds i8, i8* %13700, i64 8
  %13716 = bitcast i8* %13715 to i64*
  store i64 %13710, i64* %13716, align 1, !tbaa !2451
  %13717 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13718 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13719 = load i64, i64* %PC
  %13720 = add i64 %13719, 9
  store i64 %13720, i64* %PC
  %13721 = bitcast i8* %13718 to double*
  %13722 = load double, double* %13721, align 1
  %13723 = getelementptr inbounds i8, i8* %13718, i64 8
  %13724 = bitcast i8* %13723 to i64*
  %13725 = load i64, i64* %13724, align 1
  %13726 = load double, double* bitcast (%one_type* @one to double*)
  %13727 = fadd double %13722, %13726
  %13728 = bitcast i8* %13717 to double*
  store double %13727, double* %13728, align 1, !tbaa !2451
  %13729 = getelementptr inbounds i8, i8* %13717, i64 8
  %13730 = bitcast i8* %13729 to i64*
  store i64 %13725, i64* %13730, align 1, !tbaa !2451
  %13731 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13732 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13733 = bitcast %union.vec128_t* %XMM2 to i8*
  %13734 = load i64, i64* %PC
  %13735 = add i64 %13734, 4
  store i64 %13735, i64* %PC
  %13736 = bitcast i8* %13732 to double*
  %13737 = load double, double* %13736, align 1
  %13738 = getelementptr inbounds i8, i8* %13732, i64 8
  %13739 = bitcast i8* %13738 to i64*
  %13740 = load i64, i64* %13739, align 1
  %13741 = bitcast i8* %13733 to double*
  %13742 = load double, double* %13741, align 1
  %13743 = fmul double %13737, %13742
  %13744 = bitcast i8* %13731 to double*
  store double %13743, double* %13744, align 1, !tbaa !2451
  %13745 = getelementptr inbounds i8, i8* %13731, i64 8
  %13746 = bitcast i8* %13745 to i64*
  store i64 %13740, i64* %13746, align 1, !tbaa !2451
  %13747 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13748 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13749 = bitcast %union.vec128_t* %XMM1 to i8*
  %13750 = load i64, i64* %PC
  %13751 = add i64 %13750, 4
  store i64 %13751, i64* %PC
  %13752 = bitcast i8* %13748 to double*
  %13753 = load double, double* %13752, align 1
  %13754 = getelementptr inbounds i8, i8* %13748, i64 8
  %13755 = bitcast i8* %13754 to i64*
  %13756 = load i64, i64* %13755, align 1
  %13757 = bitcast i8* %13749 to double*
  %13758 = load double, double* %13757, align 1
  %13759 = fadd double %13753, %13758
  %13760 = bitcast i8* %13747 to double*
  store double %13759, double* %13760, align 1, !tbaa !2451
  %13761 = getelementptr inbounds i8, i8* %13747, i64 8
  %13762 = bitcast i8* %13761 to i64*
  store i64 %13756, i64* %13762, align 1, !tbaa !2451
  %13763 = load i64, i64* %RBP
  %13764 = sub i64 %13763, 16
  %13765 = bitcast %union.vec128_t* %XMM0 to i8*
  %13766 = load i64, i64* %PC
  %13767 = add i64 %13766, 5
  store i64 %13767, i64* %PC
  %13768 = bitcast i8* %13765 to double*
  %13769 = load double, double* %13768, align 1
  %13770 = inttoptr i64 %13764 to double*
  store double %13769, double* %13770
  %13771 = load i64, i64* %RBP
  %13772 = sub i64 %13771, 72
  %13773 = load i64, i64* %PC
  %13774 = add i64 %13773, 4
  store i64 %13774, i64* %PC
  %13775 = inttoptr i64 %13772 to i64*
  %13776 = load i64, i64* %13775
  store i64 %13776, i64* %RAX, align 8, !tbaa !2428
  %13777 = load i64, i64* %RAX
  %13778 = load i64, i64* %PC
  %13779 = add i64 %13778, 4
  store i64 %13779, i64* %PC
  %13780 = add i64 1, %13777
  store i64 %13780, i64* %RAX, align 8, !tbaa !2428
  %13781 = icmp ult i64 %13780, %13777
  %13782 = icmp ult i64 %13780, 1
  %13783 = or i1 %13781, %13782
  %13784 = zext i1 %13783 to i8
  %13785 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13784, i8* %13785, align 1, !tbaa !2432
  %13786 = trunc i64 %13780 to i32
  %13787 = and i32 %13786, 255
  %13788 = call i32 @llvm.ctpop.i32(i32 %13787) #16
  %13789 = trunc i32 %13788 to i8
  %13790 = and i8 %13789, 1
  %13791 = xor i8 %13790, 1
  %13792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13791, i8* %13792, align 1, !tbaa !2446
  %13793 = xor i64 1, %13777
  %13794 = xor i64 %13793, %13780
  %13795 = lshr i64 %13794, 4
  %13796 = trunc i64 %13795 to i8
  %13797 = and i8 %13796, 1
  %13798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13797, i8* %13798, align 1, !tbaa !2447
  %13799 = icmp eq i64 %13780, 0
  %13800 = zext i1 %13799 to i8
  %13801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13800, i8* %13801, align 1, !tbaa !2448
  %13802 = lshr i64 %13780, 63
  %13803 = trunc i64 %13802 to i8
  %13804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13803, i8* %13804, align 1, !tbaa !2449
  %13805 = lshr i64 %13777, 63
  %13806 = xor i64 %13802, %13805
  %13807 = add nuw nsw i64 %13806, %13802
  %13808 = icmp eq i64 %13807, 2
  %13809 = zext i1 %13808 to i8
  %13810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13809, i8* %13810, align 1, !tbaa !2450
  %13811 = load i64, i64* %RBP
  %13812 = sub i64 %13811, 72
  %13813 = load i64, i64* %RAX
  %13814 = load i64, i64* %PC
  %13815 = add i64 %13814, 4
  store i64 %13815, i64* %PC
  %13816 = inttoptr i64 %13812 to i64*
  store i64 %13813, i64* %13816
  %13817 = load i64, i64* %PC
  %13818 = sub i64 %13817, 311
  %13819 = load i64, i64* %PC
  %13820 = add i64 %13819, 5
  store i64 %13820, i64* %PC
  %13821 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %13818, i64* %13821, align 8, !tbaa !2428
  br label %block_401f8c

block_400f2b:                                     ; preds = %block_400e60
  %13822 = load i64, i64* %PC
  %13823 = add i64 %13822, 10
  store i64 %13823, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %13824 = load i64, i64* %PC
  %13825 = add i64 %13824, 5819
  %13826 = load i64, i64* %PC
  %13827 = add i64 %13826, 5
  %13828 = load i64, i64* %PC
  %13829 = add i64 %13828, 5
  store i64 %13829, i64* %PC
  %13830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13831 = load i64, i64* %13830, align 8, !tbaa !2428
  %13832 = add i64 %13831, -8
  %13833 = inttoptr i64 %13832 to i64*
  store i64 %13827, i64* %13833
  store i64 %13832, i64* %13830, align 8, !tbaa !2428
  %13834 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %13825, i64* %13834, align 8, !tbaa !2428
  %13835 = load i64, i64* %PC
  %13836 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %13835, %struct.Memory* %MEMORY.5)
  %13837 = load i64, i64* %PC
  %13838 = add i64 %13837, 10
  store i64 %13838, i64* %PC
  store i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 462), i64* %RDI, align 8, !tbaa !2428
  %13839 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13840 = load i64, i64* %PC
  %13841 = add i64 %13840, 8
  store i64 %13841, i64* %PC
  %13842 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 72) to double*)
  %13843 = bitcast i8* %13839 to double*
  store double %13842, double* %13843, align 1, !tbaa !2451
  %13844 = getelementptr inbounds i8, i8* %13839, i64 8
  %13845 = bitcast i8* %13844 to double*
  store double 0.000000e+00, double* %13845, align 1, !tbaa !2451
  %13846 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13847 = load i64, i64* %PC
  %13848 = add i64 %13847, 8
  store i64 %13848, i64* %PC
  %13849 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 112) to double*)
  %13850 = bitcast i8* %13846 to double*
  store double %13849, double* %13850, align 1, !tbaa !2451
  %13851 = getelementptr inbounds i8, i8* %13846, i64 8
  %13852 = bitcast i8* %13851 to double*
  store double 0.000000e+00, double* %13852, align 1, !tbaa !2451
  %13853 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13854 = load i64, i64* %PC
  %13855 = add i64 %13854, 8
  store i64 %13855, i64* %PC
  %13856 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_402700__rodata_type* @seg_402700__rodata to i64), i64 120) to double*)
  %13857 = bitcast i8* %13853 to double*
  store double %13856, double* %13857, align 1, !tbaa !2451
  %13858 = getelementptr inbounds i8, i8* %13853, i64 8
  %13859 = bitcast i8* %13858 to double*
  store double 0.000000e+00, double* %13859, align 1, !tbaa !2451
  %13860 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13861 = load i64, i64* %PC
  %13862 = add i64 %13861, 9
  store i64 %13862, i64* %PC
  %13863 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %13864 = bitcast i8* %13860 to double*
  store double %13863, double* %13864, align 1, !tbaa !2451
  %13865 = getelementptr inbounds i8, i8* %13860, i64 8
  %13866 = bitcast i8* %13865 to double*
  store double 0.000000e+00, double* %13866, align 1, !tbaa !2451
  %13867 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13868 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13869 = load i64, i64* %PC
  %13870 = add i64 %13869, 9
  store i64 %13870, i64* %PC
  %13871 = bitcast i8* %13868 to double*
  %13872 = load double, double* %13871, align 1
  %13873 = getelementptr inbounds i8, i8* %13868, i64 8
  %13874 = bitcast i8* %13873 to i64*
  %13875 = load i64, i64* %13874, align 1
  %13876 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %13877 = fmul double %13872, %13876
  %13878 = bitcast i8* %13867 to double*
  store double %13877, double* %13878, align 1, !tbaa !2451
  %13879 = getelementptr inbounds i8, i8* %13867, i64 8
  %13880 = bitcast i8* %13879 to i64*
  store i64 %13875, i64* %13880, align 1, !tbaa !2451
  %13881 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13882 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13883 = load i64, i64* %PC
  %13884 = add i64 %13883, 9
  store i64 %13884, i64* %PC
  %13885 = bitcast i8* %13882 to double*
  %13886 = load double, double* %13885, align 1
  %13887 = getelementptr inbounds i8, i8* %13882, i64 8
  %13888 = bitcast i8* %13887 to i64*
  %13889 = load i64, i64* %13888, align 1
  %13890 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %13891 = fsub double %13886, %13890
  %13892 = bitcast i8* %13881 to double*
  store double %13891, double* %13892, align 1, !tbaa !2451
  %13893 = getelementptr inbounds i8, i8* %13881, i64 8
  %13894 = bitcast i8* %13893 to i64*
  store i64 %13889, i64* %13894, align 1, !tbaa !2451
  %13895 = bitcast %union.vec128_t* %XMM3 to i8*
  %13896 = load i64, i64* %PC
  %13897 = add i64 %13896, 9
  store i64 %13897, i64* %PC
  %13898 = bitcast i8* %13895 to double*
  %13899 = load double, double* %13898, align 1
  store double %13899, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %13900 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13901 = load i64, i64* %PC
  %13902 = add i64 %13901, 9
  store i64 %13902, i64* %PC
  %13903 = load double, double* bitcast (%piref_type* @piref to double*)
  %13904 = bitcast i8* %13900 to double*
  store double %13903, double* %13904, align 1, !tbaa !2451
  %13905 = getelementptr inbounds i8, i8* %13900, i64 8
  %13906 = bitcast i8* %13905 to double*
  store double 0.000000e+00, double* %13906, align 1, !tbaa !2451
  %13907 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13908 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13909 = load i64, i64* %PC
  %13910 = add i64 %13909, 9
  store i64 %13910, i64* %PC
  %13911 = bitcast i8* %13908 to double*
  %13912 = load double, double* %13911, align 1
  %13913 = getelementptr inbounds i8, i8* %13908, i64 8
  %13914 = bitcast i8* %13913 to i64*
  %13915 = load i64, i64* %13914, align 1
  %13916 = load double, double* bitcast (%three_type* @three to double*)
  %13917 = fdiv double %13912, %13916
  %13918 = bitcast i8* %13907 to double*
  store double %13917, double* %13918, align 1, !tbaa !2451
  %13919 = getelementptr inbounds i8, i8* %13907, i64 8
  %13920 = bitcast i8* %13919 to i64*
  store i64 %13915, i64* %13920, align 1, !tbaa !2451
  %13921 = load i64, i64* %RBP
  %13922 = sub i64 %13921, 24
  %13923 = bitcast %union.vec128_t* %XMM3 to i8*
  %13924 = load i64, i64* %PC
  %13925 = add i64 %13924, 5
  store i64 %13925, i64* %PC
  %13926 = bitcast i8* %13923 to double*
  %13927 = load double, double* %13926, align 1
  %13928 = inttoptr i64 %13922 to double*
  store double %13927, double* %13928
  %13929 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13930 = load i64, i64* %RBP
  %13931 = sub i64 %13930, 24
  %13932 = load i64, i64* %PC
  %13933 = add i64 %13932, 5
  store i64 %13933, i64* %PC
  %13934 = inttoptr i64 %13931 to double*
  %13935 = load double, double* %13934
  %13936 = bitcast i8* %13929 to double*
  store double %13935, double* %13936, align 1, !tbaa !2451
  %13937 = getelementptr inbounds i8, i8* %13929, i64 8
  %13938 = bitcast i8* %13937 to double*
  store double 0.000000e+00, double* %13938, align 1, !tbaa !2451
  %13939 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13940 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13941 = load i64, i64* %RBP
  %13942 = sub i64 %13941, 24
  %13943 = load i64, i64* %PC
  %13944 = add i64 %13943, 5
  store i64 %13944, i64* %PC
  %13945 = bitcast i8* %13940 to double*
  %13946 = load double, double* %13945, align 1
  %13947 = getelementptr inbounds i8, i8* %13940, i64 8
  %13948 = bitcast i8* %13947 to i64*
  %13949 = load i64, i64* %13948, align 1
  %13950 = inttoptr i64 %13942 to double*
  %13951 = load double, double* %13950
  %13952 = fmul double %13946, %13951
  %13953 = bitcast i8* %13939 to double*
  store double %13952, double* %13953, align 1, !tbaa !2451
  %13954 = getelementptr inbounds i8, i8* %13939, i64 8
  %13955 = bitcast i8* %13954 to i64*
  store i64 %13949, i64* %13955, align 1, !tbaa !2451
  %13956 = load i64, i64* %RBP
  %13957 = sub i64 %13956, 40
  %13958 = bitcast %union.vec128_t* %XMM3 to i8*
  %13959 = load i64, i64* %PC
  %13960 = add i64 %13959, 5
  store i64 %13960, i64* %PC
  %13961 = bitcast i8* %13958 to double*
  %13962 = load double, double* %13961, align 1
  %13963 = inttoptr i64 %13957 to double*
  store double %13962, double* %13963
  %13964 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13965 = load i64, i64* %RBP
  %13966 = sub i64 %13965, 24
  %13967 = load i64, i64* %PC
  %13968 = add i64 %13967, 5
  store i64 %13968, i64* %PC
  %13969 = inttoptr i64 %13966 to double*
  %13970 = load double, double* %13969
  %13971 = bitcast i8* %13964 to double*
  store double %13970, double* %13971, align 1, !tbaa !2451
  %13972 = getelementptr inbounds i8, i8* %13964, i64 8
  %13973 = bitcast i8* %13972 to double*
  store double 0.000000e+00, double* %13973, align 1, !tbaa !2451
  %13974 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13975 = load i64, i64* %PC
  %13976 = add i64 %13975, 9
  store i64 %13976, i64* %PC
  %13977 = load double, double* bitcast (%A6_type* @A6 to double*)
  %13978 = bitcast i8* %13974 to double*
  store double %13977, double* %13978, align 1, !tbaa !2451
  %13979 = getelementptr inbounds i8, i8* %13974, i64 8
  %13980 = bitcast i8* %13979 to double*
  store double 0.000000e+00, double* %13980, align 1, !tbaa !2451
  %13981 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13982 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13983 = load i64, i64* %RBP
  %13984 = sub i64 %13983, 40
  %13985 = load i64, i64* %PC
  %13986 = add i64 %13985, 5
  store i64 %13986, i64* %PC
  %13987 = bitcast i8* %13982 to double*
  %13988 = load double, double* %13987, align 1
  %13989 = getelementptr inbounds i8, i8* %13982, i64 8
  %13990 = bitcast i8* %13989 to i64*
  %13991 = load i64, i64* %13990, align 1
  %13992 = inttoptr i64 %13984 to double*
  %13993 = load double, double* %13992
  %13994 = fmul double %13988, %13993
  %13995 = bitcast i8* %13981 to double*
  store double %13994, double* %13995, align 1, !tbaa !2451
  %13996 = getelementptr inbounds i8, i8* %13981, i64 8
  %13997 = bitcast i8* %13996 to i64*
  store i64 %13991, i64* %13997, align 1, !tbaa !2451
  %13998 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13999 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14000 = load i64, i64* %PC
  %14001 = add i64 %14000, 9
  store i64 %14001, i64* %PC
  %14002 = bitcast i8* %13999 to double*
  %14003 = load double, double* %14002, align 1
  %14004 = getelementptr inbounds i8, i8* %13999, i64 8
  %14005 = bitcast i8* %14004 to i64*
  %14006 = load i64, i64* %14005, align 1
  %14007 = load double, double* bitcast (%A5_type* @A5 to double*)
  %14008 = fsub double %14003, %14007
  %14009 = bitcast i8* %13998 to double*
  store double %14008, double* %14009, align 1, !tbaa !2451
  %14010 = getelementptr inbounds i8, i8* %13998, i64 8
  %14011 = bitcast i8* %14010 to i64*
  store i64 %14006, i64* %14011, align 1, !tbaa !2451
  %14012 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14013 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14014 = load i64, i64* %RBP
  %14015 = sub i64 %14014, 40
  %14016 = load i64, i64* %PC
  %14017 = add i64 %14016, 5
  store i64 %14017, i64* %PC
  %14018 = bitcast i8* %14013 to double*
  %14019 = load double, double* %14018, align 1
  %14020 = getelementptr inbounds i8, i8* %14013, i64 8
  %14021 = bitcast i8* %14020 to i64*
  %14022 = load i64, i64* %14021, align 1
  %14023 = inttoptr i64 %14015 to double*
  %14024 = load double, double* %14023
  %14025 = fmul double %14019, %14024
  %14026 = bitcast i8* %14012 to double*
  store double %14025, double* %14026, align 1, !tbaa !2451
  %14027 = getelementptr inbounds i8, i8* %14012, i64 8
  %14028 = bitcast i8* %14027 to i64*
  store i64 %14022, i64* %14028, align 1, !tbaa !2451
  %14029 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14030 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14031 = load i64, i64* %PC
  %14032 = add i64 %14031, 9
  store i64 %14032, i64* %PC
  %14033 = bitcast i8* %14030 to double*
  %14034 = load double, double* %14033, align 1
  %14035 = getelementptr inbounds i8, i8* %14030, i64 8
  %14036 = bitcast i8* %14035 to i64*
  %14037 = load i64, i64* %14036, align 1
  %14038 = load double, double* bitcast (%A4_type* @A4 to double*)
  %14039 = fadd double %14034, %14038
  %14040 = bitcast i8* %14029 to double*
  store double %14039, double* %14040, align 1, !tbaa !2451
  %14041 = getelementptr inbounds i8, i8* %14029, i64 8
  %14042 = bitcast i8* %14041 to i64*
  store i64 %14037, i64* %14042, align 1, !tbaa !2451
  %14043 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14044 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14045 = load i64, i64* %RBP
  %14046 = sub i64 %14045, 40
  %14047 = load i64, i64* %PC
  %14048 = add i64 %14047, 5
  store i64 %14048, i64* %PC
  %14049 = bitcast i8* %14044 to double*
  %14050 = load double, double* %14049, align 1
  %14051 = getelementptr inbounds i8, i8* %14044, i64 8
  %14052 = bitcast i8* %14051 to i64*
  %14053 = load i64, i64* %14052, align 1
  %14054 = inttoptr i64 %14046 to double*
  %14055 = load double, double* %14054
  %14056 = fmul double %14050, %14055
  %14057 = bitcast i8* %14043 to double*
  store double %14056, double* %14057, align 1, !tbaa !2451
  %14058 = getelementptr inbounds i8, i8* %14043, i64 8
  %14059 = bitcast i8* %14058 to i64*
  store i64 %14053, i64* %14059, align 1, !tbaa !2451
  %14060 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14061 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14062 = load i64, i64* %PC
  %14063 = add i64 %14062, 9
  store i64 %14063, i64* %PC
  %14064 = bitcast i8* %14061 to double*
  %14065 = load double, double* %14064, align 1
  %14066 = getelementptr inbounds i8, i8* %14061, i64 8
  %14067 = bitcast i8* %14066 to i64*
  %14068 = load i64, i64* %14067, align 1
  %14069 = load double, double* bitcast (%A3_type* @A3 to double*)
  %14070 = fsub double %14065, %14069
  %14071 = bitcast i8* %14060 to double*
  store double %14070, double* %14071, align 1, !tbaa !2451
  %14072 = getelementptr inbounds i8, i8* %14060, i64 8
  %14073 = bitcast i8* %14072 to i64*
  store i64 %14068, i64* %14073, align 1, !tbaa !2451
  %14074 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14075 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14076 = load i64, i64* %RBP
  %14077 = sub i64 %14076, 40
  %14078 = load i64, i64* %PC
  %14079 = add i64 %14078, 5
  store i64 %14079, i64* %PC
  %14080 = bitcast i8* %14075 to double*
  %14081 = load double, double* %14080, align 1
  %14082 = getelementptr inbounds i8, i8* %14075, i64 8
  %14083 = bitcast i8* %14082 to i64*
  %14084 = load i64, i64* %14083, align 1
  %14085 = inttoptr i64 %14077 to double*
  %14086 = load double, double* %14085
  %14087 = fmul double %14081, %14086
  %14088 = bitcast i8* %14074 to double*
  store double %14087, double* %14088, align 1, !tbaa !2451
  %14089 = getelementptr inbounds i8, i8* %14074, i64 8
  %14090 = bitcast i8* %14089 to i64*
  store i64 %14084, i64* %14090, align 1, !tbaa !2451
  %14091 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14092 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14093 = load i64, i64* %PC
  %14094 = add i64 %14093, 9
  store i64 %14094, i64* %PC
  %14095 = bitcast i8* %14092 to double*
  %14096 = load double, double* %14095, align 1
  %14097 = getelementptr inbounds i8, i8* %14092, i64 8
  %14098 = bitcast i8* %14097 to i64*
  %14099 = load i64, i64* %14098, align 1
  %14100 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %14101 = fadd double %14096, %14100
  %14102 = bitcast i8* %14091 to double*
  store double %14101, double* %14102, align 1, !tbaa !2451
  %14103 = getelementptr inbounds i8, i8* %14091, i64 8
  %14104 = bitcast i8* %14103 to i64*
  store i64 %14099, i64* %14104, align 1, !tbaa !2451
  %14105 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14106 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14107 = load i64, i64* %RBP
  %14108 = sub i64 %14107, 40
  %14109 = load i64, i64* %PC
  %14110 = add i64 %14109, 5
  store i64 %14110, i64* %PC
  %14111 = bitcast i8* %14106 to double*
  %14112 = load double, double* %14111, align 1
  %14113 = getelementptr inbounds i8, i8* %14106, i64 8
  %14114 = bitcast i8* %14113 to i64*
  %14115 = load i64, i64* %14114, align 1
  %14116 = inttoptr i64 %14108 to double*
  %14117 = load double, double* %14116
  %14118 = fmul double %14112, %14117
  %14119 = bitcast i8* %14105 to double*
  store double %14118, double* %14119, align 1, !tbaa !2451
  %14120 = getelementptr inbounds i8, i8* %14105, i64 8
  %14121 = bitcast i8* %14120 to i64*
  store i64 %14115, i64* %14121, align 1, !tbaa !2451
  %14122 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14123 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14124 = load i64, i64* %PC
  %14125 = add i64 %14124, 9
  store i64 %14125, i64* %PC
  %14126 = bitcast i8* %14123 to double*
  %14127 = load double, double* %14126, align 1
  %14128 = getelementptr inbounds i8, i8* %14123, i64 8
  %14129 = bitcast i8* %14128 to i64*
  %14130 = load i64, i64* %14129, align 1
  %14131 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %14132 = fadd double %14127, %14131
  %14133 = bitcast i8* %14122 to double*
  store double %14132, double* %14133, align 1, !tbaa !2451
  %14134 = getelementptr inbounds i8, i8* %14122, i64 8
  %14135 = bitcast i8* %14134 to i64*
  store i64 %14130, i64* %14135, align 1, !tbaa !2451
  %14136 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14137 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14138 = load i64, i64* %RBP
  %14139 = sub i64 %14138, 40
  %14140 = load i64, i64* %PC
  %14141 = add i64 %14140, 5
  store i64 %14141, i64* %PC
  %14142 = bitcast i8* %14137 to double*
  %14143 = load double, double* %14142, align 1
  %14144 = getelementptr inbounds i8, i8* %14137, i64 8
  %14145 = bitcast i8* %14144 to i64*
  %14146 = load i64, i64* %14145, align 1
  %14147 = inttoptr i64 %14139 to double*
  %14148 = load double, double* %14147
  %14149 = fmul double %14143, %14148
  %14150 = bitcast i8* %14136 to double*
  store double %14149, double* %14150, align 1, !tbaa !2451
  %14151 = getelementptr inbounds i8, i8* %14136, i64 8
  %14152 = bitcast i8* %14151 to i64*
  store i64 %14146, i64* %14152, align 1, !tbaa !2451
  %14153 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14154 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14155 = load i64, i64* %PC
  %14156 = add i64 %14155, 9
  store i64 %14156, i64* %PC
  %14157 = bitcast i8* %14154 to double*
  %14158 = load double, double* %14157, align 1
  %14159 = getelementptr inbounds i8, i8* %14154, i64 8
  %14160 = bitcast i8* %14159 to i64*
  %14161 = load i64, i64* %14160, align 1
  %14162 = load double, double* bitcast (%one_type* @one to double*)
  %14163 = fadd double %14158, %14162
  %14164 = bitcast i8* %14153 to double*
  store double %14163, double* %14164, align 1, !tbaa !2451
  %14165 = getelementptr inbounds i8, i8* %14153, i64 8
  %14166 = bitcast i8* %14165 to i64*
  store i64 %14161, i64* %14166, align 1, !tbaa !2451
  %14167 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14168 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14169 = bitcast %union.vec128_t* %XMM4 to i8*
  %14170 = load i64, i64* %PC
  %14171 = add i64 %14170, 4
  store i64 %14171, i64* %PC
  %14172 = bitcast i8* %14168 to double*
  %14173 = load double, double* %14172, align 1
  %14174 = getelementptr inbounds i8, i8* %14168, i64 8
  %14175 = bitcast i8* %14174 to i64*
  %14176 = load i64, i64* %14175, align 1
  %14177 = bitcast i8* %14169 to double*
  %14178 = load double, double* %14177, align 1
  %14179 = fmul double %14173, %14178
  %14180 = bitcast i8* %14167 to double*
  store double %14179, double* %14180, align 1, !tbaa !2451
  %14181 = getelementptr inbounds i8, i8* %14167, i64 8
  %14182 = bitcast i8* %14181 to i64*
  store i64 %14176, i64* %14182, align 1, !tbaa !2451
  %14183 = bitcast %union.vec128_t* %XMM3 to i8*
  %14184 = load i64, i64* %PC
  %14185 = add i64 %14184, 9
  store i64 %14185, i64* %PC
  %14186 = bitcast i8* %14183 to double*
  %14187 = load double, double* %14186, align 1
  store double %14187, double* bitcast (%sa_type* @sa to double*)
  %14188 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14189 = load i64, i64* %PC
  %14190 = add i64 %14189, 9
  store i64 %14190, i64* %PC
  %14191 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %14192 = bitcast i8* %14188 to double*
  store double %14191, double* %14192, align 1, !tbaa !2451
  %14193 = getelementptr inbounds i8, i8* %14188, i64 8
  %14194 = bitcast i8* %14193 to double*
  store double 0.000000e+00, double* %14194, align 1, !tbaa !2451
  %14195 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14196 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14197 = bitcast %union.vec128_t* %XMM2 to i8*
  %14198 = load i64, i64* %PC
  %14199 = add i64 %14198, 4
  store i64 %14199, i64* %PC
  %14200 = bitcast i8* %14196 to double*
  %14201 = load double, double* %14200, align 1
  %14202 = getelementptr inbounds i8, i8* %14196, i64 8
  %14203 = bitcast i8* %14202 to i64*
  %14204 = load i64, i64* %14203, align 1
  %14205 = bitcast i8* %14197 to double*
  %14206 = load double, double* %14205, align 1
  %14207 = fdiv double %14201, %14206
  %14208 = bitcast i8* %14195 to double*
  store double %14207, double* %14208, align 1, !tbaa !2451
  %14209 = getelementptr inbounds i8, i8* %14195, i64 8
  %14210 = bitcast i8* %14209 to i64*
  store i64 %14204, i64* %14210, align 1, !tbaa !2451
  %14211 = bitcast %union.vec128_t* %XMM3 to i8*
  %14212 = load i64, i64* %PC
  %14213 = add i64 %14212, 9
  store i64 %14213, i64* %PC
  %14214 = bitcast i8* %14211 to double*
  %14215 = load double, double* %14214, align 1
  store double %14215, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 80) to double*)
  %14216 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14217 = load i64, i64* %RBP
  %14218 = sub i64 %14217, 48
  %14219 = load i64, i64* %PC
  %14220 = add i64 %14219, 5
  store i64 %14220, i64* %PC
  %14221 = inttoptr i64 %14218 to double*
  %14222 = load double, double* %14221
  %14223 = bitcast i8* %14216 to double*
  store double %14222, double* %14223, align 1, !tbaa !2451
  %14224 = getelementptr inbounds i8, i8* %14216, i64 8
  %14225 = bitcast i8* %14224 to double*
  store double 0.000000e+00, double* %14225, align 1, !tbaa !2451
  %14226 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14227 = load i64, i64* %PC
  %14228 = add i64 %14227, 9
  store i64 %14228, i64* %PC
  %14229 = load double, double* bitcast (%sa_type* @sa to double*)
  %14230 = bitcast i8* %14226 to double*
  store double %14229, double* %14230, align 1, !tbaa !2451
  %14231 = getelementptr inbounds i8, i8* %14226, i64 8
  %14232 = bitcast i8* %14231 to double*
  store double 0.000000e+00, double* %14232, align 1, !tbaa !2451
  %14233 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14234 = load i64, i64* %PC
  %14235 = add i64 %14234, 9
  store i64 %14235, i64* %PC
  %14236 = load double, double* bitcast (%two_type* @two to double*)
  %14237 = bitcast i8* %14233 to double*
  store double %14236, double* %14237, align 1, !tbaa !2451
  %14238 = getelementptr inbounds i8, i8* %14233, i64 8
  %14239 = bitcast i8* %14238 to double*
  store double 0.000000e+00, double* %14239, align 1, !tbaa !2451
  %14240 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14241 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14242 = load i64, i64* %RBP
  %14243 = sub i64 %14242, 16
  %14244 = load i64, i64* %PC
  %14245 = add i64 %14244, 5
  store i64 %14245, i64* %PC
  %14246 = bitcast i8* %14241 to double*
  %14247 = load double, double* %14246, align 1
  %14248 = getelementptr inbounds i8, i8* %14241, i64 8
  %14249 = bitcast i8* %14248 to i64*
  %14250 = load i64, i64* %14249, align 1
  %14251 = inttoptr i64 %14243 to double*
  %14252 = load double, double* %14251
  %14253 = fmul double %14247, %14252
  %14254 = bitcast i8* %14240 to double*
  store double %14253, double* %14254, align 1, !tbaa !2451
  %14255 = getelementptr inbounds i8, i8* %14240, i64 8
  %14256 = bitcast i8* %14255 to i64*
  store i64 %14250, i64* %14256, align 1, !tbaa !2451
  %14257 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14258 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14259 = bitcast %union.vec128_t* %XMM4 to i8*
  %14260 = load i64, i64* %PC
  %14261 = add i64 %14260, 4
  store i64 %14261, i64* %PC
  %14262 = bitcast i8* %14258 to double*
  %14263 = load double, double* %14262, align 1
  %14264 = getelementptr inbounds i8, i8* %14258, i64 8
  %14265 = bitcast i8* %14264 to i64*
  %14266 = load i64, i64* %14265, align 1
  %14267 = bitcast i8* %14259 to double*
  %14268 = load double, double* %14267, align 1
  %14269 = fadd double %14263, %14268
  %14270 = bitcast i8* %14257 to double*
  store double %14269, double* %14270, align 1, !tbaa !2451
  %14271 = getelementptr inbounds i8, i8* %14257, i64 8
  %14272 = bitcast i8* %14271 to i64*
  store i64 %14266, i64* %14272, align 1, !tbaa !2451
  %14273 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14274 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14275 = bitcast %union.vec128_t* %XMM3 to i8*
  %14276 = load i64, i64* %PC
  %14277 = add i64 %14276, 4
  store i64 %14277, i64* %PC
  %14278 = bitcast i8* %14274 to double*
  %14279 = load double, double* %14278, align 1
  %14280 = getelementptr inbounds i8, i8* %14274, i64 8
  %14281 = bitcast i8* %14280 to i64*
  %14282 = load i64, i64* %14281, align 1
  %14283 = bitcast i8* %14275 to double*
  %14284 = load double, double* %14283, align 1
  %14285 = fmul double %14279, %14284
  %14286 = bitcast i8* %14273 to double*
  store double %14285, double* %14286, align 1, !tbaa !2451
  %14287 = getelementptr inbounds i8, i8* %14273, i64 8
  %14288 = bitcast i8* %14287 to i64*
  store i64 %14282, i64* %14288, align 1, !tbaa !2451
  %14289 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14290 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14291 = load i64, i64* %PC
  %14292 = add i64 %14291, 9
  store i64 %14292, i64* %PC
  %14293 = bitcast i8* %14290 to double*
  %14294 = load double, double* %14293, align 1
  %14295 = getelementptr inbounds i8, i8* %14290, i64 8
  %14296 = bitcast i8* %14295 to i64*
  %14297 = load i64, i64* %14296, align 1
  %14298 = load double, double* bitcast (%two_type* @two to double*)
  %14299 = fdiv double %14294, %14298
  %14300 = bitcast i8* %14289 to double*
  store double %14299, double* %14300, align 1, !tbaa !2451
  %14301 = getelementptr inbounds i8, i8* %14289, i64 8
  %14302 = bitcast i8* %14301 to i64*
  store i64 %14297, i64* %14302, align 1, !tbaa !2451
  %14303 = bitcast %union.vec128_t* %XMM2 to i8*
  %14304 = load i64, i64* %PC
  %14305 = add i64 %14304, 9
  store i64 %14305, i64* %PC
  %14306 = bitcast i8* %14303 to double*
  %14307 = load double, double* %14306, align 1
  store double %14307, double* bitcast (%sa_type* @sa to double*)
  %14308 = bitcast %union.vec128_t* %XMM1 to i8*
  %14309 = load i64, i64* %PC
  %14310 = add i64 %14309, 9
  store i64 %14310, i64* %PC
  %14311 = bitcast i8* %14308 to double*
  %14312 = load double, double* %14311, align 1
  store double %14312, double* bitcast (%sb_type* @sb to double*)
  %14313 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14314 = load i64, i64* %PC
  %14315 = add i64 %14314, 9
  store i64 %14315, i64* %PC
  %14316 = load double, double* bitcast (%sa_type* @sa to double*)
  %14317 = bitcast i8* %14313 to double*
  store double %14316, double* %14317, align 1, !tbaa !2451
  %14318 = getelementptr inbounds i8, i8* %14313, i64 8
  %14319 = bitcast i8* %14318 to double*
  store double 0.000000e+00, double* %14319, align 1, !tbaa !2451
  %14320 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14321 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14322 = load i64, i64* %PC
  %14323 = add i64 %14322, 9
  store i64 %14323, i64* %PC
  %14324 = bitcast i8* %14321 to double*
  %14325 = load double, double* %14324, align 1
  %14326 = getelementptr inbounds i8, i8* %14321, i64 8
  %14327 = bitcast i8* %14326 to i64*
  %14328 = load i64, i64* %14327, align 1
  %14329 = load double, double* bitcast (%sb_type* @sb to double*)
  %14330 = fsub double %14325, %14329
  %14331 = bitcast i8* %14320 to double*
  store double %14330, double* %14331, align 1, !tbaa !2451
  %14332 = getelementptr inbounds i8, i8* %14320, i64 8
  %14333 = bitcast i8* %14332 to i64*
  store i64 %14328, i64* %14333, align 1, !tbaa !2451
  %14334 = bitcast %union.vec128_t* %XMM1 to i8*
  %14335 = load i64, i64* %PC
  %14336 = add i64 %14335, 9
  store i64 %14336, i64* %PC
  %14337 = bitcast i8* %14334 to double*
  %14338 = load double, double* %14337, align 1
  store double %14338, double* bitcast (%sc_type* @sc to double*)
  %14339 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14340 = load i64, i64* %PC
  %14341 = add i64 %14340, 9
  store i64 %14341, i64* %PC
  %14342 = load double, double* bitcast (%one_type* @one to double*)
  %14343 = bitcast i8* %14339 to double*
  store double %14342, double* %14343, align 1, !tbaa !2451
  %14344 = getelementptr inbounds i8, i8* %14339, i64 8
  %14345 = bitcast i8* %14344 to double*
  store double 0.000000e+00, double* %14345, align 1, !tbaa !2451
  %14346 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14347 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14348 = load i64, i64* %PC
  %14349 = add i64 %14348, 9
  store i64 %14349, i64* %PC
  %14350 = bitcast i8* %14347 to double*
  %14351 = load double, double* %14350, align 1
  %14352 = getelementptr inbounds i8, i8* %14347, i64 8
  %14353 = bitcast i8* %14352 to i64*
  %14354 = load i64, i64* %14353, align 1
  %14355 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 80) to double*)
  %14356 = fdiv double %14351, %14355
  %14357 = bitcast i8* %14346 to double*
  store double %14356, double* %14357, align 1, !tbaa !2451
  %14358 = getelementptr inbounds i8, i8* %14346, i64 8
  %14359 = bitcast i8* %14358 to i64*
  store i64 %14354, i64* %14359, align 1, !tbaa !2451
  %14360 = bitcast %union.vec128_t* %XMM1 to i8*
  %14361 = load i64, i64* %PC
  %14362 = add i64 %14361, 9
  store i64 %14362, i64* %PC
  %14363 = bitcast i8* %14360 to double*
  %14364 = load double, double* %14363, align 1
  store double %14364, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 88) to double*)
  %14365 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14366 = bitcast %union.vec128_t* %XMM0 to i8*
  %14367 = load i64, i64* %PC
  %14368 = add i64 %14367, 3
  store i64 %14368, i64* %PC
  %14369 = bitcast i8* %14366 to <2 x i32>*
  %14370 = load <2 x i32>, <2 x i32>* %14369, align 1
  %14371 = getelementptr inbounds i8, i8* %14366, i64 8
  %14372 = bitcast i8* %14371 to <2 x i32>*
  %14373 = load <2 x i32>, <2 x i32>* %14372, align 1
  %14374 = extractelement <2 x i32> %14370, i32 0
  %14375 = bitcast i8* %14365 to i32*
  store i32 %14374, i32* %14375, align 1, !tbaa !2455
  %14376 = extractelement <2 x i32> %14370, i32 1
  %14377 = getelementptr inbounds i8, i8* %14365, i64 4
  %14378 = bitcast i8* %14377 to i32*
  store i32 %14376, i32* %14378, align 1, !tbaa !2455
  %14379 = extractelement <2 x i32> %14373, i32 0
  %14380 = getelementptr inbounds i8, i8* %14365, i64 8
  %14381 = bitcast i8* %14380 to i32*
  store i32 %14379, i32* %14381, align 1, !tbaa !2455
  %14382 = extractelement <2 x i32> %14373, i32 1
  %14383 = getelementptr inbounds i8, i8* %14365, i64 12
  %14384 = bitcast i8* %14383 to i32*
  store i32 %14382, i32* %14384, align 1, !tbaa !2455
  %14385 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14386 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14387 = load i64, i64* %PC
  %14388 = add i64 %14387, 9
  store i64 %14388, i64* %PC
  %14389 = bitcast i8* %14386 to double*
  %14390 = load double, double* %14389, align 1
  %14391 = getelementptr inbounds i8, i8* %14386, i64 8
  %14392 = bitcast i8* %14391 to i64*
  %14393 = load i64, i64* %14392, align 1
  %14394 = load double, double* bitcast (%sc_type* @sc to double*)
  %14395 = fmul double %14390, %14394
  %14396 = bitcast i8* %14385 to double*
  store double %14395, double* %14396, align 1, !tbaa !2451
  %14397 = getelementptr inbounds i8, i8* %14385, i64 8
  %14398 = bitcast i8* %14397 to i64*
  store i64 %14393, i64* %14398, align 1, !tbaa !2451
  %14399 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14400 = bitcast %union.vec128_t* %XMM0 to i8*
  %14401 = load i64, i64* %PC
  %14402 = add i64 %14401, 3
  store i64 %14402, i64* %PC
  %14403 = bitcast i8* %14400 to <2 x i32>*
  %14404 = load <2 x i32>, <2 x i32>* %14403, align 1
  %14405 = getelementptr inbounds i8, i8* %14400, i64 8
  %14406 = bitcast i8* %14405 to <2 x i32>*
  %14407 = load <2 x i32>, <2 x i32>* %14406, align 1
  %14408 = extractelement <2 x i32> %14404, i32 0
  %14409 = bitcast i8* %14399 to i32*
  store i32 %14408, i32* %14409, align 1, !tbaa !2455
  %14410 = extractelement <2 x i32> %14404, i32 1
  %14411 = getelementptr inbounds i8, i8* %14399, i64 4
  %14412 = bitcast i8* %14411 to i32*
  store i32 %14410, i32* %14412, align 1, !tbaa !2455
  %14413 = extractelement <2 x i32> %14407, i32 0
  %14414 = getelementptr inbounds i8, i8* %14399, i64 8
  %14415 = bitcast i8* %14414 to i32*
  store i32 %14413, i32* %14415, align 1, !tbaa !2455
  %14416 = extractelement <2 x i32> %14407, i32 1
  %14417 = getelementptr inbounds i8, i8* %14399, i64 12
  %14418 = bitcast i8* %14417 to i32*
  store i32 %14416, i32* %14418, align 1, !tbaa !2455
  %14419 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14420 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14421 = load i64, i64* %PC
  %14422 = add i64 %14421, 9
  store i64 %14422, i64* %PC
  %14423 = bitcast i8* %14420 to double*
  %14424 = load double, double* %14423, align 1
  %14425 = getelementptr inbounds i8, i8* %14420, i64 8
  %14426 = bitcast i8* %14425 to i64*
  %14427 = load i64, i64* %14426, align 1
  %14428 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %14429 = fmul double %14424, %14428
  %14430 = bitcast i8* %14419 to double*
  store double %14429, double* %14430, align 1, !tbaa !2451
  %14431 = getelementptr inbounds i8, i8* %14419, i64 8
  %14432 = bitcast i8* %14431 to i64*
  store i64 %14427, i64* %14432, align 1, !tbaa !2451
  %14433 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14434 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14435 = load i64, i64* %PC
  %14436 = add i64 %14435, 9
  store i64 %14436, i64* %PC
  %14437 = bitcast i8* %14434 to double*
  %14438 = load double, double* %14437, align 1
  %14439 = getelementptr inbounds i8, i8* %14434, i64 8
  %14440 = bitcast i8* %14439 to i64*
  %14441 = load i64, i64* %14440, align 1
  %14442 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 88) to double*)
  %14443 = fmul double %14438, %14442
  %14444 = bitcast i8* %14433 to double*
  store double %14443, double* %14444, align 1, !tbaa !2451
  %14445 = getelementptr inbounds i8, i8* %14433, i64 8
  %14446 = bitcast i8* %14445 to i64*
  store i64 %14441, i64* %14446, align 1, !tbaa !2451
  %14447 = load i64, i64* %RBP
  %14448 = sub i64 %14447, 184
  %14449 = bitcast %union.vec128_t* %XMM0 to i8*
  %14450 = load i64, i64* %PC
  %14451 = add i64 %14450, 8
  store i64 %14451, i64* %PC
  %14452 = bitcast i8* %14449 to double*
  %14453 = load double, double* %14452, align 1
  %14454 = inttoptr i64 %14448 to double*
  store double %14453, double* %14454
  %14455 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14456 = bitcast %union.vec128_t* %XMM1 to i8*
  %14457 = load i64, i64* %PC
  %14458 = add i64 %14457, 3
  store i64 %14458, i64* %PC
  %14459 = bitcast i8* %14456 to <2 x i32>*
  %14460 = load <2 x i32>, <2 x i32>* %14459, align 1
  %14461 = getelementptr inbounds i8, i8* %14456, i64 8
  %14462 = bitcast i8* %14461 to <2 x i32>*
  %14463 = load <2 x i32>, <2 x i32>* %14462, align 1
  %14464 = extractelement <2 x i32> %14460, i32 0
  %14465 = bitcast i8* %14455 to i32*
  store i32 %14464, i32* %14465, align 1, !tbaa !2455
  %14466 = extractelement <2 x i32> %14460, i32 1
  %14467 = getelementptr inbounds i8, i8* %14455, i64 4
  %14468 = bitcast i8* %14467 to i32*
  store i32 %14466, i32* %14468, align 1, !tbaa !2455
  %14469 = extractelement <2 x i32> %14463, i32 0
  %14470 = getelementptr inbounds i8, i8* %14455, i64 8
  %14471 = bitcast i8* %14470 to i32*
  store i32 %14469, i32* %14471, align 1, !tbaa !2455
  %14472 = extractelement <2 x i32> %14463, i32 1
  %14473 = getelementptr inbounds i8, i8* %14455, i64 12
  %14474 = bitcast i8* %14473 to i32*
  store i32 %14472, i32* %14474, align 1, !tbaa !2455
  %14475 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14476 = bitcast %union.vec128_t* %XMM2 to i8*
  %14477 = load i64, i64* %PC
  %14478 = add i64 %14477, 3
  store i64 %14478, i64* %PC
  %14479 = bitcast i8* %14476 to <2 x i32>*
  %14480 = load <2 x i32>, <2 x i32>* %14479, align 1
  %14481 = getelementptr inbounds i8, i8* %14476, i64 8
  %14482 = bitcast i8* %14481 to <2 x i32>*
  %14483 = load <2 x i32>, <2 x i32>* %14482, align 1
  %14484 = extractelement <2 x i32> %14480, i32 0
  %14485 = bitcast i8* %14475 to i32*
  store i32 %14484, i32* %14485, align 1, !tbaa !2455
  %14486 = extractelement <2 x i32> %14480, i32 1
  %14487 = getelementptr inbounds i8, i8* %14475, i64 4
  %14488 = bitcast i8* %14487 to i32*
  store i32 %14486, i32* %14488, align 1, !tbaa !2455
  %14489 = extractelement <2 x i32> %14483, i32 0
  %14490 = getelementptr inbounds i8, i8* %14475, i64 8
  %14491 = bitcast i8* %14490 to i32*
  store i32 %14489, i32* %14491, align 1, !tbaa !2455
  %14492 = extractelement <2 x i32> %14483, i32 1
  %14493 = getelementptr inbounds i8, i8* %14475, i64 12
  %14494 = bitcast i8* %14493 to i32*
  store i32 %14492, i32* %14494, align 1, !tbaa !2455
  %14495 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14496 = load i64, i64* %RBP
  %14497 = sub i64 %14496, 184
  %14498 = load i64, i64* %PC
  %14499 = add i64 %14498, 8
  store i64 %14499, i64* %PC
  %14500 = inttoptr i64 %14497 to double*
  %14501 = load double, double* %14500
  %14502 = bitcast i8* %14495 to double*
  store double %14501, double* %14502, align 1, !tbaa !2451
  %14503 = getelementptr inbounds i8, i8* %14495, i64 8
  %14504 = bitcast i8* %14503 to double*
  store double 0.000000e+00, double* %14504, align 1, !tbaa !2451
  %14505 = load i64, i64* %RBP
  %14506 = sub i64 %14505, 188
  %14507 = load i32, i32* %EAX
  %14508 = zext i32 %14507 to i64
  %14509 = load i64, i64* %PC
  %14510 = add i64 %14509, 6
  store i64 %14510, i64* %PC
  %14511 = inttoptr i64 %14506 to i32*
  store i32 %14507, i32* %14511
  %14512 = load i64, i64* %PC
  %14513 = add i64 %14512, 2
  store i64 %14513, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2453
  %14514 = load i64, i64* %PC
  %14515 = sub i64 %14514, 3247
  %14516 = load i64, i64* %PC
  %14517 = add i64 %14516, 5
  %14518 = load i64, i64* %PC
  %14519 = add i64 %14518, 5
  store i64 %14519, i64* %PC
  %14520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14521 = load i64, i64* %14520, align 8, !tbaa !2428
  %14522 = add i64 %14521, -8
  %14523 = inttoptr i64 %14522 to i64*
  store i64 %14517, i64* %14523
  store i64 %14522, i64* %14520, align 8, !tbaa !2428
  %14524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14515, i64* %14524, align 8, !tbaa !2428
  %14525 = load i64, i64* %PC
  %14526 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %14525, %struct.Memory* %13836)
  %14527 = load i64, i64* %PC
  %14528 = add i64 %14527, 10
  store i64 %14528, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %14529 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14530 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14531 = bitcast %union.vec128_t* %XMM0 to i8*
  %14532 = load i64, i64* %PC
  %14533 = add i64 %14532, 3
  store i64 %14533, i64* %PC
  %14534 = bitcast i8* %14530 to i64*
  %14535 = load i64, i64* %14534, align 1
  %14536 = getelementptr inbounds i8, i8* %14530, i64 8
  %14537 = bitcast i8* %14536 to i64*
  %14538 = load i64, i64* %14537, align 1
  %14539 = bitcast i8* %14531 to i64*
  %14540 = load i64, i64* %14539, align 1
  %14541 = getelementptr inbounds i8, i8* %14531, i64 8
  %14542 = bitcast i8* %14541 to i64*
  %14543 = load i64, i64* %14542, align 1
  %14544 = xor i64 %14540, %14535
  %14545 = xor i64 %14543, %14538
  %14546 = trunc i64 %14544 to i32
  %14547 = lshr i64 %14544, 32
  %14548 = trunc i64 %14547 to i32
  %14549 = bitcast i8* %14529 to i32*
  store i32 %14546, i32* %14549, align 1, !tbaa !2454
  %14550 = getelementptr inbounds i8, i8* %14529, i64 4
  %14551 = bitcast i8* %14550 to i32*
  store i32 %14548, i32* %14551, align 1, !tbaa !2454
  %14552 = trunc i64 %14545 to i32
  %14553 = getelementptr inbounds i8, i8* %14529, i64 8
  %14554 = bitcast i8* %14553 to i32*
  store i32 %14552, i32* %14554, align 1, !tbaa !2454
  %14555 = lshr i64 %14545, 32
  %14556 = trunc i64 %14555 to i32
  %14557 = getelementptr inbounds i8, i8* %14529, i64 12
  %14558 = bitcast i8* %14557 to i32*
  store i32 %14556, i32* %14558, align 1, !tbaa !2454
  %14559 = load i64, i64* %PC
  %14560 = add i64 %14559, 10
  store i64 %14560, i64* %PC
  store i64 -9223372036854775808, i64* %RCX, align 8, !tbaa !2428
  %14561 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14562 = load i64, i64* %PC
  %14563 = add i64 %14562, 9
  store i64 %14563, i64* %PC
  %14564 = load double, double* bitcast (%A3_type* @A3 to double*)
  %14565 = bitcast i8* %14561 to double*
  store double %14564, double* %14565, align 1, !tbaa !2451
  %14566 = getelementptr inbounds i8, i8* %14561, i64 8
  %14567 = bitcast i8* %14566 to double*
  store double 0.000000e+00, double* %14567, align 1, !tbaa !2451
  %14568 = bitcast %union.vec128_t* %XMM1 to i8*
  %14569 = load i64, i64* %PC
  %14570 = add i64 %14569, 5
  store i64 %14570, i64* %PC
  %14571 = bitcast i8* %14568 to i64*
  %14572 = load i64, i64* %14571, align 1
  store i64 %14572, i64* %RDX, align 1, !tbaa !2428
  %14573 = load i64, i64* %RDX
  %14574 = load i64, i64* %RCX
  %14575 = load i64, i64* %PC
  %14576 = add i64 %14575, 3
  store i64 %14576, i64* %PC
  %14577 = xor i64 %14574, %14573
  store i64 %14577, i64* %RDX, align 8, !tbaa !2428
  %14578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %14578, align 1, !tbaa !2432
  %14579 = trunc i64 %14577 to i32
  %14580 = and i32 %14579, 255
  %14581 = call i32 @llvm.ctpop.i32(i32 %14580) #16
  %14582 = trunc i32 %14581 to i8
  %14583 = and i8 %14582, 1
  %14584 = xor i8 %14583, 1
  %14585 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14584, i8* %14585, align 1, !tbaa !2446
  %14586 = icmp eq i64 %14577, 0
  %14587 = zext i1 %14586 to i8
  %14588 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14587, i8* %14588, align 1, !tbaa !2448
  %14589 = lshr i64 %14577, 63
  %14590 = trunc i64 %14589 to i8
  %14591 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14590, i8* %14591, align 1, !tbaa !2449
  %14592 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14592, align 1, !tbaa !2450
  %14593 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14593, align 1, !tbaa !2447
  %14594 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14595 = load i64, i64* %RDX
  %14596 = load i64, i64* %PC
  %14597 = add i64 %14596, 5
  store i64 %14597, i64* %PC
  %14598 = bitcast i8* %14594 to i64*
  store i64 %14595, i64* %14598, align 1, !tbaa !2428
  %14599 = getelementptr inbounds i8, i8* %14594, i64 8
  %14600 = bitcast i8* %14599 to i64*
  store i64 0, i64* %14600, align 1, !tbaa !2428
  %14601 = bitcast %union.vec128_t* %XMM1 to i8*
  %14602 = load i64, i64* %PC
  %14603 = add i64 %14602, 9
  store i64 %14603, i64* %PC
  %14604 = bitcast i8* %14601 to double*
  %14605 = load double, double* %14604, align 1
  store double %14605, double* bitcast (%A3_type* @A3 to double*)
  %14606 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14607 = load i64, i64* %PC
  %14608 = add i64 %14607, 9
  store i64 %14608, i64* %PC
  %14609 = load double, double* bitcast (%A5_type* @A5 to double*)
  %14610 = bitcast i8* %14606 to double*
  store double %14609, double* %14610, align 1, !tbaa !2451
  %14611 = getelementptr inbounds i8, i8* %14606, i64 8
  %14612 = bitcast i8* %14611 to double*
  store double 0.000000e+00, double* %14612, align 1, !tbaa !2451
  %14613 = bitcast %union.vec128_t* %XMM1 to i8*
  %14614 = load i64, i64* %PC
  %14615 = add i64 %14614, 5
  store i64 %14615, i64* %PC
  %14616 = bitcast i8* %14613 to i64*
  %14617 = load i64, i64* %14616, align 1
  store i64 %14617, i64* %RDX, align 1, !tbaa !2428
  %14618 = load i64, i64* %RDX
  %14619 = load i64, i64* %RCX
  %14620 = load i64, i64* %PC
  %14621 = add i64 %14620, 3
  store i64 %14621, i64* %PC
  %14622 = xor i64 %14619, %14618
  store i64 %14622, i64* %RDX, align 8, !tbaa !2428
  %14623 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %14623, align 1, !tbaa !2432
  %14624 = trunc i64 %14622 to i32
  %14625 = and i32 %14624, 255
  %14626 = call i32 @llvm.ctpop.i32(i32 %14625) #16
  %14627 = trunc i32 %14626 to i8
  %14628 = and i8 %14627, 1
  %14629 = xor i8 %14628, 1
  %14630 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14629, i8* %14630, align 1, !tbaa !2446
  %14631 = icmp eq i64 %14622, 0
  %14632 = zext i1 %14631 to i8
  %14633 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14632, i8* %14633, align 1, !tbaa !2448
  %14634 = lshr i64 %14622, 63
  %14635 = trunc i64 %14634 to i8
  %14636 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14635, i8* %14636, align 1, !tbaa !2449
  %14637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14637, align 1, !tbaa !2450
  %14638 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14638, align 1, !tbaa !2447
  %14639 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14640 = load i64, i64* %RDX
  %14641 = load i64, i64* %PC
  %14642 = add i64 %14641, 5
  store i64 %14642, i64* %PC
  %14643 = bitcast i8* %14639 to i64*
  store i64 %14640, i64* %14643, align 1, !tbaa !2428
  %14644 = getelementptr inbounds i8, i8* %14639, i64 8
  %14645 = bitcast i8* %14644 to i64*
  store i64 0, i64* %14645, align 1, !tbaa !2428
  %14646 = bitcast %union.vec128_t* %XMM1 to i8*
  %14647 = load i64, i64* %PC
  %14648 = add i64 %14647, 9
  store i64 %14648, i64* %PC
  %14649 = bitcast i8* %14646 to double*
  %14650 = load double, double* %14649, align 1
  store double %14650, double* bitcast (%A5_type* @A5 to double*)
  %14651 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14652 = load i64, i64* %PC
  %14653 = add i64 %14652, 9
  store i64 %14653, i64* %PC
  %14654 = load double, double* bitcast (%piref_type* @piref to double*)
  %14655 = bitcast i8* %14651 to double*
  store double %14654, double* %14655, align 1, !tbaa !2451
  %14656 = getelementptr inbounds i8, i8* %14651, i64 8
  %14657 = bitcast i8* %14656 to double*
  store double 0.000000e+00, double* %14657, align 1, !tbaa !2451
  %14658 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14659 = load i64, i64* %PC
  %14660 = add i64 %14659, 9
  store i64 %14660, i64* %PC
  %14661 = load double, double* bitcast (%three_type* @three to double*)
  %14662 = bitcast i8* %14658 to double*
  store double %14661, double* %14662, align 1, !tbaa !2451
  %14663 = getelementptr inbounds i8, i8* %14658, i64 8
  %14664 = bitcast i8* %14663 to double*
  store double 0.000000e+00, double* %14664, align 1, !tbaa !2451
  %14665 = load i64, i64* %RBP
  %14666 = sub i64 %14665, 80
  %14667 = load i64, i64* %PC
  %14668 = add i64 %14667, 4
  store i64 %14668, i64* %PC
  %14669 = inttoptr i64 %14666 to i64*
  %14670 = load i64, i64* %14669
  store i64 %14670, i64* %RCX, align 8, !tbaa !2428
  %14671 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14672 = load i64, i64* %RCX
  %14673 = load i64, i64* %PC
  %14674 = add i64 %14673, 5
  store i64 %14674, i64* %PC
  %14675 = sitofp i64 %14672 to double
  %14676 = bitcast i8* %14671 to double*
  store double %14675, double* %14676, align 1, !tbaa !2451
  %14677 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14678 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14679 = bitcast %union.vec128_t* %XMM3 to i8*
  %14680 = load i64, i64* %PC
  %14681 = add i64 %14680, 4
  store i64 %14681, i64* %PC
  %14682 = bitcast i8* %14678 to double*
  %14683 = load double, double* %14682, align 1
  %14684 = getelementptr inbounds i8, i8* %14678, i64 8
  %14685 = bitcast i8* %14684 to i64*
  %14686 = load i64, i64* %14685, align 1
  %14687 = bitcast i8* %14679 to double*
  %14688 = load double, double* %14687, align 1
  %14689 = fmul double %14683, %14688
  %14690 = bitcast i8* %14677 to double*
  store double %14689, double* %14690, align 1, !tbaa !2451
  %14691 = getelementptr inbounds i8, i8* %14677, i64 8
  %14692 = bitcast i8* %14691 to i64*
  store i64 %14686, i64* %14692, align 1, !tbaa !2451
  %14693 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14694 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14695 = bitcast %union.vec128_t* %XMM2 to i8*
  %14696 = load i64, i64* %PC
  %14697 = add i64 %14696, 4
  store i64 %14697, i64* %PC
  %14698 = bitcast i8* %14694 to double*
  %14699 = load double, double* %14698, align 1
  %14700 = getelementptr inbounds i8, i8* %14694, i64 8
  %14701 = bitcast i8* %14700 to i64*
  %14702 = load i64, i64* %14701, align 1
  %14703 = bitcast i8* %14695 to double*
  %14704 = load double, double* %14703, align 1
  %14705 = fdiv double %14699, %14704
  %14706 = bitcast i8* %14693 to double*
  store double %14705, double* %14706, align 1, !tbaa !2451
  %14707 = getelementptr inbounds i8, i8* %14693, i64 8
  %14708 = bitcast i8* %14707 to i64*
  store i64 %14702, i64* %14708, align 1, !tbaa !2451
  %14709 = load i64, i64* %RBP
  %14710 = sub i64 %14709, 48
  %14711 = bitcast %union.vec128_t* %XMM1 to i8*
  %14712 = load i64, i64* %PC
  %14713 = add i64 %14712, 5
  store i64 %14713, i64* %PC
  %14714 = bitcast i8* %14711 to double*
  %14715 = load double, double* %14714, align 1
  %14716 = inttoptr i64 %14710 to double*
  store double %14715, double* %14716
  %14717 = load i64, i64* %RBP
  %14718 = sub i64 %14717, 16
  %14719 = bitcast %union.vec128_t* %XMM0 to i8*
  %14720 = load i64, i64* %PC
  %14721 = add i64 %14720, 5
  store i64 %14721, i64* %PC
  %14722 = bitcast i8* %14719 to double*
  %14723 = load double, double* %14722, align 1
  %14724 = inttoptr i64 %14718 to double*
  store double %14723, double* %14724
  %14725 = load i64, i64* %RBP
  %14726 = sub i64 %14725, 32
  %14727 = bitcast %union.vec128_t* %XMM0 to i8*
  %14728 = load i64, i64* %PC
  %14729 = add i64 %14728, 5
  store i64 %14729, i64* %PC
  %14730 = bitcast i8* %14727 to double*
  %14731 = load double, double* %14730, align 1
  %14732 = inttoptr i64 %14726 to double*
  store double %14731, double* %14732
  %14733 = load i64, i64* %RBP
  %14734 = sub i64 %14733, 192
  %14735 = load i32, i32* %EAX
  %14736 = zext i32 %14735 to i64
  %14737 = load i64, i64* %PC
  %14738 = add i64 %14737, 6
  store i64 %14738, i64* %PC
  %14739 = inttoptr i64 %14734 to i32*
  store i32 %14735, i32* %14739
  %14740 = load i64, i64* %PC
  %14741 = add i64 %14740, 5247
  %14742 = load i64, i64* %PC
  %14743 = add i64 %14742, 5
  %14744 = load i64, i64* %PC
  %14745 = add i64 %14744, 5
  store i64 %14745, i64* %PC
  %14746 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14747 = load i64, i64* %14746, align 8, !tbaa !2428
  %14748 = add i64 %14747, -8
  %14749 = inttoptr i64 %14748 to i64*
  store i64 %14743, i64* %14749
  store i64 %14748, i64* %14746, align 8, !tbaa !2428
  %14750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14741, i64* %14750, align 8, !tbaa !2428
  %14751 = load i64, i64* %PC
  %14752 = call %struct.Memory* @sub_4025f0_dtime_renamed_(%struct.State* %0, i64 %14751, %struct.Memory* %14526)
  %14753 = load i64, i64* %RBP
  %14754 = sub i64 %14753, 72
  %14755 = load i64, i64* %PC
  %14756 = add i64 %14755, 8
  store i64 %14756, i64* %PC
  %14757 = inttoptr i64 %14754 to i64*
  store i64 1, i64* %14757
  %14758 = load i64, i64* %RBP
  %14759 = sub i64 %14758, 196
  %14760 = load i32, i32* %EAX
  %14761 = zext i32 %14760 to i64
  %14762 = load i64, i64* %PC
  %14763 = add i64 %14762, 6
  store i64 %14763, i64* %PC
  %14764 = inttoptr i64 %14759 to i32*
  store i32 %14760, i32* %14764
  br label %block_401184

block_4008ae:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1
  %14765 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14766 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14767 = bitcast %union.vec128_t* %XMM0 to i8*
  %14768 = load i64, i64* %PC
  %14769 = add i64 %14768, 3
  store i64 %14769, i64* %PC
  %14770 = bitcast i8* %14766 to i64*
  %14771 = load i64, i64* %14770, align 1
  %14772 = getelementptr inbounds i8, i8* %14766, i64 8
  %14773 = bitcast i8* %14772 to i64*
  %14774 = load i64, i64* %14773, align 1
  %14775 = bitcast i8* %14767 to i64*
  %14776 = load i64, i64* %14775, align 1
  %14777 = getelementptr inbounds i8, i8* %14767, i64 8
  %14778 = bitcast i8* %14777 to i64*
  %14779 = load i64, i64* %14778, align 1
  %14780 = xor i64 %14776, %14771
  %14781 = xor i64 %14779, %14774
  %14782 = trunc i64 %14780 to i32
  %14783 = lshr i64 %14780, 32
  %14784 = trunc i64 %14783 to i32
  %14785 = bitcast i8* %14765 to i32*
  store i32 %14782, i32* %14785, align 1, !tbaa !2454
  %14786 = getelementptr inbounds i8, i8* %14765, i64 4
  %14787 = bitcast i8* %14786 to i32*
  store i32 %14784, i32* %14787, align 1, !tbaa !2454
  %14788 = trunc i64 %14781 to i32
  %14789 = getelementptr inbounds i8, i8* %14765, i64 8
  %14790 = bitcast i8* %14789 to i32*
  store i32 %14788, i32* %14790, align 1, !tbaa !2454
  %14791 = lshr i64 %14781, 32
  %14792 = trunc i64 %14791 to i32
  %14793 = getelementptr inbounds i8, i8* %14765, i64 12
  %14794 = bitcast i8* %14793 to i32*
  store i32 %14792, i32* %14794, align 1, !tbaa !2454
  %14795 = bitcast %union.vec128_t* %XMM0 to i8*
  %14796 = load i64, i64* %PC
  %14797 = add i64 %14796, 9
  store i64 %14797, i64* %PC
  %14798 = bitcast i8* %14795 to double*
  %14799 = load double, double* %14798, align 1
  store double %14799, double* bitcast (%nulltime_type* @nulltime to double*)
  br label %block_4008ba

block_400802:                                     ; preds = %block_4007cb
  %14800 = sub i64 %10355, 377
  %14801 = load i64, i64* %PC
  %14802 = add i64 %14801, 5
  store i64 %14802, i64* %PC
  %14803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14800, i64* %14803, align 8, !tbaa !2428
  br label %block_400689

block_400859:                                     ; preds = %block_400844
  %14804 = add i64 %4929, 5
  %14805 = load i64, i64* %PC
  %14806 = add i64 %14805, 5
  store i64 %14806, i64* %PC
  %14807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14804, i64* %14807, align 8, !tbaa !2428
  %14808 = load i64, i64* %RBP
  %14809 = sub i64 %14808, 72
  %14810 = load i64, i64* %PC
  %14811 = add i64 %14810, 4
  store i64 %14811, i64* %PC
  %14812 = inttoptr i64 %14809 to i64*
  %14813 = load i64, i64* %14812
  store i64 %14813, i64* %RAX, align 8, !tbaa !2428
  %14814 = load i64, i64* %RAX
  %14815 = load i64, i64* %PC
  %14816 = add i64 %14815, 4
  store i64 %14816, i64* %PC
  %14817 = add i64 1, %14814
  store i64 %14817, i64* %RAX, align 8, !tbaa !2428
  %14818 = icmp ult i64 %14817, %14814
  %14819 = icmp ult i64 %14817, 1
  %14820 = or i1 %14818, %14819
  %14821 = zext i1 %14820 to i8
  %14822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14821, i8* %14822, align 1, !tbaa !2432
  %14823 = trunc i64 %14817 to i32
  %14824 = and i32 %14823, 255
  %14825 = call i32 @llvm.ctpop.i32(i32 %14824) #16
  %14826 = trunc i32 %14825 to i8
  %14827 = and i8 %14826, 1
  %14828 = xor i8 %14827, 1
  %14829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14828, i8* %14829, align 1, !tbaa !2446
  %14830 = xor i64 1, %14814
  %14831 = xor i64 %14830, %14817
  %14832 = lshr i64 %14831, 4
  %14833 = trunc i64 %14832 to i8
  %14834 = and i8 %14833, 1
  %14835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14834, i8* %14835, align 1, !tbaa !2447
  %14836 = icmp eq i64 %14817, 0
  %14837 = zext i1 %14836 to i8
  %14838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14837, i8* %14838, align 1, !tbaa !2448
  %14839 = lshr i64 %14817, 63
  %14840 = trunc i64 %14839 to i8
  %14841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14840, i8* %14841, align 1, !tbaa !2449
  %14842 = lshr i64 %14814, 63
  %14843 = xor i64 %14839, %14842
  %14844 = add nuw nsw i64 %14843, %14839
  %14845 = icmp eq i64 %14844, 2
  %14846 = zext i1 %14845 to i8
  %14847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14846, i8* %14847, align 1, !tbaa !2450
  %14848 = load i64, i64* %RBP
  %14849 = sub i64 %14848, 72
  %14850 = load i64, i64* %RAX
  %14851 = load i64, i64* %PC
  %14852 = add i64 %14851, 4
  store i64 %14852, i64* %PC
  %14853 = inttoptr i64 %14849 to i64*
  store i64 %14850, i64* %14853
  %14854 = load i64, i64* %PC
  %14855 = sub i64 %14854, 38
  %14856 = load i64, i64* %PC
  %14857 = add i64 %14856, 5
  store i64 %14857, i64* %PC
  %14858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14855, i64* %14858, align 8, !tbaa !2428
  br label %block_400844

block_400701:                                     ; preds = %block_400716, %block_4006a5
  %MEMORY.13 = phi %struct.Memory* [ %8324, %block_4006a5 ], [ %MEMORY.13, %block_400716 ]
  %14859 = load i64, i64* %RBP
  %14860 = sub i64 %14859, 72
  %14861 = load i64, i64* %PC
  %14862 = add i64 %14861, 4
  store i64 %14862, i64* %PC
  %14863 = inttoptr i64 %14860 to i64*
  %14864 = load i64, i64* %14863
  store i64 %14864, i64* %RAX, align 8, !tbaa !2428
  %14865 = load i64, i64* %RBP
  %14866 = sub i64 %14865, 88
  %14867 = load i64, i64* %PC
  %14868 = add i64 %14867, 4
  store i64 %14868, i64* %PC
  %14869 = inttoptr i64 %14866 to i64*
  %14870 = load i64, i64* %14869
  store i64 %14870, i64* %RCX, align 8, !tbaa !2428
  %14871 = load i64, i64* %RCX
  %14872 = load i64, i64* %PC
  %14873 = add i64 %14872, 4
  store i64 %14873, i64* %PC
  %14874 = sub i64 %14871, 1
  store i64 %14874, i64* %RCX, align 8, !tbaa !2428
  %14875 = icmp ult i64 %14871, 1
  %14876 = zext i1 %14875 to i8
  %14877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14876, i8* %14877, align 1, !tbaa !2432
  %14878 = trunc i64 %14874 to i32
  %14879 = and i32 %14878, 255
  %14880 = call i32 @llvm.ctpop.i32(i32 %14879) #16
  %14881 = trunc i32 %14880 to i8
  %14882 = and i8 %14881, 1
  %14883 = xor i8 %14882, 1
  %14884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14883, i8* %14884, align 1, !tbaa !2446
  %14885 = xor i64 1, %14871
  %14886 = xor i64 %14885, %14874
  %14887 = lshr i64 %14886, 4
  %14888 = trunc i64 %14887 to i8
  %14889 = and i8 %14888, 1
  %14890 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14889, i8* %14890, align 1, !tbaa !2447
  %14891 = icmp eq i64 %14874, 0
  %14892 = zext i1 %14891 to i8
  %14893 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14892, i8* %14893, align 1, !tbaa !2448
  %14894 = lshr i64 %14874, 63
  %14895 = trunc i64 %14894 to i8
  %14896 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14895, i8* %14896, align 1, !tbaa !2449
  %14897 = lshr i64 %14871, 63
  %14898 = xor i64 %14894, %14897
  %14899 = add nuw nsw i64 %14898, %14897
  %14900 = icmp eq i64 %14899, 2
  %14901 = zext i1 %14900 to i8
  %14902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14901, i8* %14902, align 1, !tbaa !2450
  %14903 = load i64, i64* %RAX
  %14904 = load i64, i64* %RCX
  %14905 = load i64, i64* %PC
  %14906 = add i64 %14905, 3
  store i64 %14906, i64* %PC
  %14907 = sub i64 %14903, %14904
  %14908 = icmp ult i64 %14903, %14904
  %14909 = zext i1 %14908 to i8
  %14910 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14909, i8* %14910, align 1, !tbaa !2432
  %14911 = trunc i64 %14907 to i32
  %14912 = and i32 %14911, 255
  %14913 = call i32 @llvm.ctpop.i32(i32 %14912) #16
  %14914 = trunc i32 %14913 to i8
  %14915 = and i8 %14914, 1
  %14916 = xor i8 %14915, 1
  %14917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14916, i8* %14917, align 1, !tbaa !2446
  %14918 = xor i64 %14904, %14903
  %14919 = xor i64 %14918, %14907
  %14920 = lshr i64 %14919, 4
  %14921 = trunc i64 %14920 to i8
  %14922 = and i8 %14921, 1
  %14923 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14922, i8* %14923, align 1, !tbaa !2447
  %14924 = icmp eq i64 %14907, 0
  %14925 = zext i1 %14924 to i8
  %14926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14925, i8* %14926, align 1, !tbaa !2448
  %14927 = lshr i64 %14907, 63
  %14928 = trunc i64 %14927 to i8
  %14929 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14928, i8* %14929, align 1, !tbaa !2449
  %14930 = lshr i64 %14903, 63
  %14931 = lshr i64 %14904, 63
  %14932 = xor i64 %14931, %14930
  %14933 = xor i64 %14927, %14930
  %14934 = add nuw nsw i64 %14933, %14932
  %14935 = icmp eq i64 %14934, 2
  %14936 = zext i1 %14935 to i8
  %14937 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14936, i8* %14937, align 1, !tbaa !2450
  %14938 = load i64, i64* %PC
  %14939 = add i64 %14938, 187
  %14940 = load i64, i64* %PC
  %14941 = add i64 %14940, 6
  %14942 = load i64, i64* %PC
  %14943 = add i64 %14942, 6
  store i64 %14943, i64* %PC
  %14944 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %14945 = load i8, i8* %14944, align 1, !tbaa !2448
  %14946 = icmp eq i8 %14945, 0
  %14947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %14948 = load i8, i8* %14947, align 1, !tbaa !2449
  %14949 = icmp ne i8 %14948, 0
  %14950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %14951 = load i8, i8* %14950, align 1, !tbaa !2450
  %14952 = icmp ne i8 %14951, 0
  %14953 = xor i1 %14949, %14952
  %14954 = xor i1 %14953, true
  %14955 = and i1 %14946, %14954
  %14956 = zext i1 %14955 to i8
  store i8 %14956, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %14957 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %14958 = select i1 %14955, i64 %14939, i64 %14941
  store i64 %14958, i64* %14957, align 8, !tbaa !2428
  %14959 = load i8, i8* %BRANCH_TAKEN
  %14960 = icmp eq i8 %14959, 1
  br i1 %14960, label %block_4007cb, label %block_400716
}

; Function Attrs: noinline
define %struct.Memory* @sub_400530_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400530:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_4004c0_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_400500___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400500:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%seg_603120__bss_type, %seg_603120__bss_type* @seg_603120__bss, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2447
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2448
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2449
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2450
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2448
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_400520, label %block_400509

block_400520:                                     ; preds = %block_400500
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400509:                                     ; preds = %block_400500
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_400490_deregister_tm_clones_renamed_(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%seg_603120__bss_type, %seg_603120__bss_type* @seg_603120__bss, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004c0_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004c0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 6304024, i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, 6304024
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, 6304024
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 6304024, %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2449
  %62 = lshr i64 %36, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2450
  %68 = load i64, i64* %RSP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  %71 = load i64, i64* %RSI
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = ashr i64 %71, 2
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  %77 = ashr i64 %74, 1
  store i64 %77, i64* %RSI, align 8, !tbaa !2428
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %76, i8* %78, align 1, !tbaa !2453
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %80 = trunc i64 %77 to i32
  %81 = and i32 %80, 255
  %82 = call i32 @llvm.ctpop.i32(i32 %81) #16
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 1
  %85 = xor i8 %84, 1
  store i8 %85, i8* %79, align 1, !tbaa !2453
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %86, align 1, !tbaa !2453
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %88 = icmp eq i64 %77, 0
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %87, align 1, !tbaa !2453
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %91 = lshr i64 %77, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %90, align 1, !tbaa !2453
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %93, align 1, !tbaa !2453
  %94 = load i64, i64* %RSI
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = lshr i64 %97, 62
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = lshr i64 %100, 1
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %102, i8* %104, align 1, !tbaa !2453
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %106 = trunc i64 %103 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %105, align 1, !tbaa !2453
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %112, align 1, !tbaa !2453
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %114 = icmp eq i64 %103, 0
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %113, align 1, !tbaa !2453
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %116, align 1, !tbaa !2453
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2453
  %118 = load i64, i64* %RSI
  %119 = load i64, i64* %RAX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 3
  store i64 %121, i64* %PC
  %122 = add i64 %119, %118
  store i64 %122, i64* %RSI, align 8, !tbaa !2428
  %123 = icmp ult i64 %122, %118
  %124 = icmp ult i64 %122, %119
  %125 = or i1 %123, %124
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %126, i8* %127, align 1, !tbaa !2432
  %128 = trunc i64 %122 to i32
  %129 = and i32 %128, 255
  %130 = call i32 @llvm.ctpop.i32(i32 %129) #16
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %133, i8* %134, align 1, !tbaa !2446
  %135 = xor i64 %119, %118
  %136 = xor i64 %135, %122
  %137 = lshr i64 %136, 4
  %138 = trunc i64 %137 to i8
  %139 = and i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %139, i8* %140, align 1, !tbaa !2447
  %141 = icmp eq i64 %122, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2448
  %144 = lshr i64 %122, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2449
  %147 = lshr i64 %118, 63
  %148 = lshr i64 %119, 63
  %149 = xor i64 %144, %147
  %150 = xor i64 %144, %148
  %151 = add nuw nsw i64 %149, %150
  %152 = icmp eq i64 %151, 2
  %153 = zext i1 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %153, i8* %154, align 1, !tbaa !2450
  %155 = load i64, i64* %RSI
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC
  %158 = trunc i64 %155 to i8
  %159 = and i8 %158, 1
  %160 = ashr i64 %155, 1
  store i64 %160, i64* %RSI, align 8, !tbaa !2428
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %159, i8* %161, align 1, !tbaa !2453
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %163 = trunc i64 %160 to i32
  %164 = and i32 %163, 255
  %165 = call i32 @llvm.ctpop.i32(i32 %164) #16
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %162, align 1, !tbaa !2453
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %169, align 1, !tbaa !2453
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %171 = icmp eq i64 %160, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %170, align 1, !tbaa !2453
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %174 = lshr i64 %160, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %173, align 1, !tbaa !2453
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %176, align 1, !tbaa !2453
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 23
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 2
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 2
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %184 = load i8, i8* %183, align 1, !tbaa !2448
  store i8 %184, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %186 = icmp ne i8 %184, 0
  %187 = select i1 %186, i64 %178, i64 %180
  store i64 %187, i64* %185, align 8, !tbaa !2428
  %188 = load i8, i8* %BRANCH_TAKEN
  %189 = icmp eq i8 %188, 1
  br i1 %189, label %block_4004f8, label %block_4004e3

block_4004fa:                                     ; preds = %block_4004ed
  %190 = load i64, i64* %RAX
  %191 = load i64, i64* %RAX
  %192 = add i64 %191, %190
  %193 = load i16, i16* %AX
  %194 = zext i16 %193 to i64
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 6
  store i64 %196, i64* %PC
  %197 = load i64, i64* %PC
  %198 = tail call %struct.Memory* @sub_400500___do_global_dtors_aux(%struct.State* %0, i64 %197, %struct.Memory* %2)
  ret %struct.Memory* %198

block_4004f5:                                     ; preds = %block_4004ed
  %199 = load i64, i64* %RAX
  %200 = load i32, i32* %EAX
  %201 = zext i32 %200 to i64
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  br label %block_4004f8

block_4004ed:                                     ; preds = %block_4004e3
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 1
  store i64 %205, i64* %PC
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %207 = load i64, i64* %206, align 8, !tbaa !2428
  %208 = add i64 %207, 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RBP, align 8, !tbaa !2428
  store i64 %208, i64* %206, align 8, !tbaa !2428
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 5
  store i64 %212, i64* %PC
  store i64 6304024, i64* %RDI, align 8, !tbaa !2428
  %213 = load i64, i64* %RAX
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 2
  store i64 %215, i64* %PC
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %216, align 8, !tbaa !2428
  %217 = load i64, i64* %PC
  switch i64 %217, label %269 [
    i64 4195578, label %block_4004fa
    i64 4195573, label %block_4004f5
  ]

block_4004f8:                                     ; preds = %block_4004e3, %block_4004f5, %block_4004c0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4004c0 ], [ %2, %block_4004e3 ], [ %2, %block_4004f5 ]
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 1
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %221 = load i64, i64* %220, align 8, !tbaa !2428
  %222 = add i64 %221, 8
  %223 = inttoptr i64 %221 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %RBP, align 8, !tbaa !2428
  store i64 %222, i64* %220, align 8, !tbaa !2428
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 1
  store i64 %226, i64* %PC
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %227, align 8, !tbaa !2428
  %232 = add i64 %229, 8
  store i64 %232, i64* %228, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4004e3:                                     ; preds = %block_4004c0
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 5
  store i64 %234, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %235 = load i64, i64* %RAX
  %236 = load i64, i64* %RAX
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC
  %239 = and i64 %236, %235
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %240, align 1, !tbaa !2432
  %241 = trunc i64 %239 to i32
  %242 = and i32 %241, 255
  %243 = call i32 @llvm.ctpop.i32(i32 %242) #16
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %246, i8* %247, align 1, !tbaa !2446
  %248 = icmp eq i64 %239, 0
  %249 = zext i1 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %249, i8* %250, align 1, !tbaa !2448
  %251 = lshr i64 %239, 63
  %252 = trunc i64 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %252, i8* %253, align 1, !tbaa !2449
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %254, align 1, !tbaa !2450
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %255, align 1, !tbaa !2447
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 13
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 2
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 2
  store i64 %261, i64* %PC
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %263 = load i8, i8* %262, align 1, !tbaa !2448
  store i8 %263, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %265 = icmp ne i8 %263, 0
  %266 = select i1 %265, i64 %257, i64 %259
  store i64 %266, i64* %264, align 8, !tbaa !2428
  %267 = load i8, i8* %BRANCH_TAKEN
  %268 = icmp eq i8 %267, 1
  br i1 %268, label %block_4004f8, label %block_4004ed

; <label>:269:                                    ; preds = %block_4004ed
  %270 = load i64, i64* %PC
  %271 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %270, %struct.Memory* %2)
  ret %struct.Memory* %271
}

; Function Attrs: noinline
define %struct.Memory* @sub_400480__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400480:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4026f0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4026f0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400450__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400450:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2448
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2449
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2450
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2447
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2448
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2449
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2450
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2447
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_4026f0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_402680___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_602ff0__got_type, %seg_602ff0__got_type* @seg_602ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_603320___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_402680___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402680:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_602df0__init_array_type* @seg_602df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_602df0__init_array_type* @seg_602df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2447
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2448
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2449
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2450
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2447
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2448
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2449
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2450
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2453
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2453
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2453
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2453
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2453
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2453
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 8876
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_400400__init_proc_renamed_(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2448
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2449
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2450
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2447
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2448
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_4026d6, label %block_4026b6

block_4026d6:                                     ; preds = %block_4026c0, %block_402680
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_402680 ], [ %387, %block_4026c0 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2447
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2448
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2449
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2450
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4026b6:                                     ; preds = %block_402680
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2448
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2449
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2450
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2447
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_4026c0

block_4026c0:                                     ; preds = %block_4026c0, %block_4026b6
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_4026b6 ], [ %387, %block_4026c0 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2447
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2448
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2449
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2450
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2447
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2448
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2449
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2450
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2448
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_4026c0, label %block_4026d6
}

; Function Attrs: noinline
define %struct.Memory* @sub_400400__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400400:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2449
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2450
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602ff0__got_type* @seg_602ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2448
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2449
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2450
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2447
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2448
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2453
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_400412, label %block_400410

block_400410:                                     ; preds = %block_400400
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_400412

block_400412:                                     ; preds = %block_400410, %block_400400
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400400 ], [ %92, %block_400410 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2447
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2448
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2449
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2450
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400530_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400530;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400530_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400530_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400500___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400500;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400500___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400500___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603318_gettimeofday(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603310_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4026f0___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4026f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4026f0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4026f0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402680___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402680;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_402680___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402680___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400540;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400540_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603320___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4026f4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4026f4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dtime() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4025f0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @dtime_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4025f0_dtime(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400400;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400400__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_4026f0___libc_csu_fini()
  ret void
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_402680___libc_csu_init()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }
attributes #17 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2069}
!2448 = !{!2433, !2430, i64 2071}
!2449 = !{!2433, !2430, i64 2073}
!2450 = !{!2433, !2430, i64 2077}
!2451 = !{!2452, !2452, i64 0}
!2452 = !{!"double", !2430, i64 0}
!2453 = !{!2430, !2430, i64 0}
!2454 = !{!2445, !2445, i64 0}
!2455 = !{!2456, !2456, i64 0}
!2456 = !{!"float", !2430, i64 0}
