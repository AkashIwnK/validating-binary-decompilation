; ModuleID = 'binary/test.mcsema.calls_renamed.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_400428__init_type = type <{ [23 x i8] }>
%seg_400440__plt_type = type <{ [48 x i8] }>
%seg_400470__text_type = type <{ [8818 x i8] }>
%seg_4026e4__fini_type = type <{ [9 x i8] }>
%seg_4026f0__rodata_type = type <{ [248 x i8], [58 x i8], [48 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [28 x i8], [30 x i8], [30 x i8], [30 x i8], [30 x i8], [31 x i8] }>
%seg_402a4c__eh_frame_hdr_type = type <{ [68 x i8] }>
%seg_402a90__eh_frame_type = type <{ [280 x i8] }>
%seg_602de0__init_array_type = type <{ i64, i64 }>
%seg_602ff0__got_type = type <{ i64, i64 }>
%seg_603000__got_plt_type = type <{ [24 x i8], i64, i64 }>
%seg_603028__data_type = type <{ [16 x i8] }>
%A0_type = type <{ [8 x i8] }>
%A1_0_type = type <{ [8 x i8] }>
%A2_0_type = type <{ [8 x i8] }>
%A3_type = type <{ [8 x i8] }>
%A4_type = type <{ [8 x i8] }>
%A5_type = type <{ [8 x i8] }>
%A6_type = type <{ [8 x i8] }>
%B0_type = type <{ [8 x i8] }>
%B1_0_type = type <{ [8 x i8] }>
%B2_type = type <{ [8 x i8] }>
%B3_type = type <{ [8 x i8] }>
%B4_type = type <{ [8 x i8] }>
%B5_type = type <{ [8 x i8] }>
%B6_type = type <{ [8 x i8] }>
%C0_type = type <{ [8 x i8] }>
%C1_0_type = type <{ [8 x i8] }>
%C2_type = type <{ [8 x i8] }>
%C3_type = type <{ [8 x i8] }>
%C4_type = type <{ [8 x i8] }>
%C5_type = type <{ [8 x i8] }>
%C6_type = type <{ [8 x i8] }>
%C7_type = type <{ [8 x i8] }>
%C8_type = type <{ [8 x i8] }>
%D1_0_type = type <{ [8 x i8] }>
%D2_0_type = type <{ [8 x i8] }>
%D3_type = type <{ [8 x i8] }>
%E2_0_type = type <{ [8 x i8] }>
%E3_type = type <{ [8 x i8] }>
%seg_603120__bss_type = type <{ [16 x i8] }>
%two_type = type <{ [8 x i8] }>
%five_type = type <{ [8 x i8] }>
%T_type = type <{ [288 x i8] }>
%sd_type = type <{ [8 x i8] }>
%sb_type = type <{ [8 x i8] }>
%piref_type = type <{ [8 x i8] }>
%pierr_type = type <{ [8 x i8] }>
%tnow_type = type <{ [16 x i8] }>
%nulltime_type = type <{ [8 x i8] }>
%four_type = type <{ [8 x i8] }>
%scale_type = type <{ [8 x i8] }>
%one_type = type <{ [8 x i8] }>
%sc_type = type <{ [8 x i8] }>
%sa_type = type <{ [8 x i8] }>
%three_type = type <{ [16 x i8] }>
%TimeArray_type = type <{ [24 x i8] }>
%piprg_type = type <{ [8 x i8] }>
%TLimit_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_400428__init = internal constant %seg_400428__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\C5+ \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400440__plt = internal constant %seg_400440__plt_type <{ [48 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\C2+ \00\00\00\00\00\00\00\00\00\00\00\FF%\BA+ \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400470__text = internal constant %seg_400470__text_type <{ [8818 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\E0&@\00H\C7\C1p&@\00H\C7\C7`\05@\00\FF\15V+ \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B8\181`\00H=\181`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF\181`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE\181`\00UH\81\EE\181`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF\181`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=\F9+ \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05\E7+ \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\81\EC`\01\00\00H\BF (@\00\00\00\00\00\C7E\FC\00\00\00\00\B0\00\E8\CD\FE\FF\FFH\BF\E8'@\00\00\00\00\00\89E\A4\B0\00\E8\B9\FE\FF\FFH\BF\22(@\00\00\00\00\00\F2\0F\10\05O!\00\00\F2\0F\10\0DO!\00\00\F2\0F\10\15O!\00\00\F2\0F\10\1DO!\00\00\F2\0F\10%O!\00\00\F2\0F\10-O!\00\00\F2\0F\105O!\00\00H\C7E\C8\09=\00\00\F2H\0F*}\C8\F2\0F^\F7\F2\0F\114%H1`\00\F2\0F\11$%\F02`\00H\C7E\C0\00\80\84\1E\F2\0F\11,%p2`\00\F2\0F\11$%\A82`\00\F2\0F\11\1C%01`\00\F2\0F\11\14%\C02`\00\F2\0F\11\0C%\982`\00\F2\0F\11\04%81`\00\F2\0F\10\04%\A82`\00\F2\0F\11\04%\A02`\00\89E\A0\B0\00\E8\F9\FD\FF\FFH\BFR(@\00\00\00\00\00\89E\9C\B0\00\E8\E5\FD\FF\FFH\BF\D02`\00\00\00\00\00\89E\98\E8c\1F\00\00H\BF\D02`\00\00\00\00\00\89E\94\E8Q\1F\00\00\0FW\C0H\8B}\C8H\89}\A8\F2\0F\11\04%\B82`\00\89E\90\F2\0F\10\04%\B82`\00\F2\0F\10\0C%\F02`\00f\0F.\C8\0F\86_\01\00\00H\BF\D02`\00\00\00\00\00\0FW\C0H\8BE\A8H\C1\E0\01H\89E\A8\F2\0F\10\0C%\A82`\00\F2H\0F*U\A8\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\F2\0F\10\04%\A82`\00\F2\0F\11E\D8\E8\D0\1E\00\00H\C7E\B8\01\00\00\00\89E\8CH\8BE\B8H\8BM\A8H\83\E9\01H9\C8\0F\8F\B5\00\00\00\F2\0F\10E\E0\F2\0FXE\D8\F2\0F\11E\E0\F2\0F\10E\E0\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\F0\F2\0F\10\0C%\F00`\00\F2\0F\10U\E8\F2\0F\10\1C%\F80`\00\F2\0F\10e\E8\F2\0FY$%\001`\00\F2\0FX\DC\F2\0FY\D3\F2\0FX\CA\F2\0F\10U\D8\F2\0F\10]\E8\F2\0F\10$%\F00`\00\F2\0F\10m\E8\F2\0F\104%\081`\00\F2\0F\10}\E8\F2\0FY<%\101`\00\F2\0FX\F7\F2\0FY\EE\F2\0FX\E5\F2\0FY\DC\F2\0FX\D3\F2\0F^\CA\F2\0FX\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E96\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8\EC\1D\00\00\F2\0F\10\04%\D82`\00\F2\0F\11\04%\B82`\00H\8B}\A8H;}\C0\89E\88\0F\85\05\00\00\00\E9\05\00\00\00\E9\85\FE\FF\FFH\BF\D02`\00\00\00\00\00\F2\0F\10\05\FD\1E\00\00\F2\0F\11\04%\A02`\00\F2\0F\10\04%\A02`\00\F2\0F\11\04%H1`\00\E8\8D\1D\00\00H\C7E\B8\01\00\00\00\89E\84H\8BE\B8H\8BM\A8H\83\E9\01H9\C8\0F\8F\16\00\00\00\E9\00\00\00\00H\8BE\B8H\83\C0\01H\89E\B8\E9\D5\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8H\1D\00\00\0FW\C0\F2\0F\10\0C%H1`\00\F2\0FY\0C%\D82`\00\F2\0F\11\0C%\902`\00f\0F.\04%\902`\00\89E\80\0F\86\0C\00\00\00\0FW\C0\F2\0F\11\04%\902`\00H\BFv(@\00\00\00\00\00\F2\0F\10\05R\1E\00\00\F2\0F\10\0DR\1E\00\00\F2\0F\10\15R\1E\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\B82`\00\F2\0F\5C\1C%\902`\00\F2\0F\11\1C%P1`\00\F2\0F\10\1C%\F00`\00\F2\0FX\1C%\F80`\00\F2\0FX\1C%\001`\00\F2\0F\10$%\A82`\00\F2\0FX$%\F00`\00\F2\0FX$%\081`\00\F2\0FX$%\101`\00\F2\0F^\DC\F2\0F\11\1C%\B82`\00\F2\0F\10\1C%\F00`\00\F2\0F\11\1C%h2`\00\F2\0F\10\1C%P1`\00\F2\0F^\DA\F2\0F\11\1C%X1`\00\F2\0F\10U\D0\F2\0F\10\1C%\B82`\00\F2\0FX\1C%h2`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F^\14%01`\00\F2\0F\11\14%\B82`\00\F2\0F\10\14%\A82`\00\F2\0F^\14%\B82`\00\F2\0F\11\14%h2`\00\F2H\0F,\04%h2`\00Hi\C0@\9C\00\00\F2H\0F*\D0\F2\0F^\14%\A02`\00\F2H\0F,\C2H\89E\A8\F2\0F\10\14%h2`\00\F2\0F\5C\D1\F2\0F\11\14%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%X1`\00\F2\0F\11\0C%`1`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%P1`\00\F2\0FY\04%`1`\00\F2\0F\11\85x\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95x\FF\FF\FF\B0\03\E8\D1\F9\FF\FFH\BF\D02`\00\00\00\00\00H\B9\00\00\00\00\00\00\00\80H\8BU\A8H\89U\B0\F2\0F\10\04%81`\00fH\0F~\C2H1\CAfH\0Fn\C2\F2\0F\11E\F0\F2\0F\10\04%\A82`\00fH\0F~\C2H1\CAfH\0Fn\C2\F2\0F\11\04%\B82`\00\89\85t\FF\FF\FF\E8\00\1B\00\00H\C7E\B8\01\00\00\00\89\85p\FF\FF\FFH\8BE\B8H;E\B0\0F\8FI\00\00\00H\B8\00\00\00\00\00\00\00\80\F2\0F\10E\F0fH\0F~\C1H1\C1fH\0Fn\C1\F2\0F\11E\F0\F2\0F\10\04%\B82`\00\F2\0FXE\F0\F2\0F\11\04%\B82`\00H\8BE\B8H\83\C0\01H\89E\B8\E9\A9\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8\8C\1A\00\00\0FW\C0\F2\0F\10\0C%H1`\00\F2\0FY\0C%\D82`\00\F2\0F\11\0C%h1`\00f\0F.\04%h1`\00\89\85l\FF\FF\FF\0F\86\0C\00\00\00\0FW\C0\F2\0F\11\04%h1`\00H\BF\D02`\00\00\00\00\00\0FW\C0\F2H\0F*M\B0\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\B82`\00\F2\0F\11M\E8\F2\0F\11E\E0\F2\0F\11E\D8\F2\0F\11E\D0\E8\0F\1A\00\00H\C7E\B8\01\00\00\00\89\85h\FF\FF\FFH\8BE\B8H;E\B0\0F\8F\A4\00\00\00H\B8\00\00\00\00\00\00\00\80\F2\0F\10E\F0fH\0F~\C1H1\C1fH\0Fn\C1\F2\0F\11E\F0\F2\0F\10\04%\B82`\00\F2\0FXE\F0\F2\0F\11\04%\B82`\00\F2\0F\10E\E8\F2\0FX\04%01`\00\F2\0F\11E\E8\F2\0F\10E\D0\F2\0F\10M\F0\F2\0F\5CM\E8\F2\0FX\C1\F2\0F\11E\D0\F2\0F\10E\E0\F2\0F\10M\F0\F2\0FYM\E8\F2\0F\5C\C1\F2\0F\11E\E0\F2\0F\10E\D8\F2\0F\10M\F0\F2\0F^M\E8\F2\0FX\C1\F2\0F\11E\D8H\8BE\B8H\83\C0\01H\89E\B8\E9N\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8@\19\00\00H\BF\9A(@\00\00\00\00\00\F2\0F\10\05\86\1A\00\00\F2\0F\10\0D\96\1A\00\00\F2\0F\10\15\96\1A\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\D82`\00\F2\0F\11\1C%p1`\00\F2\0F\10\1C%p1`\00\F2\0F\5C\1C%h1`\00\F2\0F^\DA\F2\0F\11\1C%x1`\00\F2\0F\10\14%\B82`\00\F2\0FYU\D0\F2\0F^\14%\B02`\00\F2H\0F,\CAH\89M\B0\F2\0F\10\14%\982`\00\F2\0FYU\D8\F2\0F^\14%81`\00\F2\0F\11\14%\B82`\00\F2\0F\10\14%\B82`\00\F2\0F\10\1C%81`\00\F2\0F^]\E0\F2\0FX\D3\F2\0F\11\14%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%h2`\00\F2\0F\10\14%\B02`\00\F2\0F\10]\E0\F2\0FY]\E0\F2\0FY]\E0\F2\0F^\D3\F2\0F\5C\CA\F2\0F\11\0C%\E82`\00\F2\0F\10\0C%\E82`\00\F2\0F\5C\0C%p2`\00\F2\0F\11\0C%x2`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%x1`\00\F2\0F\11\0C%\801`\00\0F(\C8\F2\0FY\0C%x2`\00\F2\0F\10\14%p1`\00\F2\0F\5C\14%h1`\00\F2\0FY\D0\F2\0FY\04%\801`\00\F2\0F\11\85`\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95`\FF\FF\FF\89\85\5C\FF\FF\FF\B0\03\E81\F6\FF\FFH\BF\D02`\00\00\00\00\00\0FW\C0\F2\0F\10\0C%p2`\00\F2\0F\10\14%\C02`\00\F2H\0F*]\B0\F2\0FY\D3\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\89\85X\FF\FF\FF\E8z\17\00\00H\C7E\B8\01\00\00\00\89\85T\FF\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F\B6\00\00\00\F2\0F\10E\E0\F2\0FX\04%\A82`\00\F2\0F\11E\E0\F2\0F\10E\E0\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\E8\F2\0FYE\E8\F2\0F\11E\D8\F2\0F\10E\F0\F2\0F\10M\E8\F2\0F\10\14%h0`\00\F2\0FYU\D8\F2\0F\5C\14%`0`\00\F2\0FYU\D8\F2\0FX\14%X0`\00\F2\0FYU\D8\F2\0F\5C\14%P0`\00\F2\0FYU\D8\F2\0FX\14%H0`\00\F2\0FYU\D8\F2\0FX\14%@0`\00\F2\0FYU\D8\F2\0FX\14%\A82`\00\F2\0FY\CA\F2\0FX\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E95\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8\92\16\00\00H\BF\BE(@\00\00\00\00\00\F2\0F\10\05\D8\17\00\00\F2\0F\10\0D\F8\17\00\00\F2\0F\10\15\F8\17\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\D82`\00\F2\0F\5C\1C%\902`\00\F2\0F\11\1C%\881`\00\F2\0F\10\1C%p2`\00\F2\0F^\1C%\C02`\00\F2\0F\11]\E8\F2\0F\10]\E8\F2\0FY]\E8\F2\0F\11]\D8\F2\0F\10]\E8\F2\0F\10$%h0`\00\F2\0FYe\D8\F2\0F\5C$%`0`\00\F2\0FYe\D8\F2\0FX$%X0`\00\F2\0FYe\D8\F2\0F\5C$%P0`\00\F2\0FYe\D8\F2\0FX$%H0`\00\F2\0FYe\D8\F2\0FX$%@0`\00\F2\0FYe\D8\F2\0FX$%\A82`\00\F2\0FY\DC\F2\0F\11\1C%\B82`\00\F2\0F\10\1C%\881`\00\F2\0F^\DA\F2\0F\11\1C%\901`\00\F2\0F\10U\D0\F2\0F\10\1C%\B82`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F^\14%01`\00\F2\0F\11\14%\B82`\00\F2\0F\11\0C%h2`\00\F2\0F\10\0C%\B82`\00\F2\0F\5C\0C%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\901`\00\F2\0F\11\0C%\981`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\881`\00\F2\0FY\04%\981`\00\F2\0F\11\85H\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95H\FF\FF\FF\89\85D\FF\FF\FF\B0\03\E8X\F3\FF\FFH\BF\D02`\00\00\00\00\00\0FW\C0H\B9\00\00\00\00\00\00\00\80\F2\0F\10\0C%P0`\00fH\0F~\CAH1\CAfH\0Fn\CA\F2\0F\11\0C%P0`\00\F2\0F\10\0C%`0`\00fH\0F~\CAH1\CAfH\0Fn\CA\F2\0F\11\0C%`0`\00\F2\0F\10\0C%p2`\00\F2\0F\10\14%\C02`\00\F2H\0F*]\B0\F2\0FY\D3\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\89\85@\FF\FF\FF\E8Y\14\00\00H\C7E\B8\01\00\00\00\89\85<\FF\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F\AF\00\00\00\F2H\0F*E\B8\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\E8\F2\0FYE\E8\F2\0F\11E\D8\F2\0F\10E\F0\F2\0F\10M\D8\F2\0F\10U\D8\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\104%\A00`\00\F2\0FYu\D8\F2\0FX4%\980`\00\F2\0FY\EE\F2\0FX,%\900`\00\F2\0FY\E5\F2\0FX$%\880`\00\F2\0FY\DC\F2\0FX\1C%\800`\00\F2\0FY\D3\F2\0FX\14%x0`\00\F2\0FY\CA\F2\0FX\C1\F2\0FX\04%\A82`\00\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E9<\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8x\13\00\00H\BF\E2(@\00\00\00\00\00\F2\0F\10\05\BE\14\00\00\F2\0F\10\0D\EE\14\00\00\F2\0F\10\14%H1`\00\F2\0FY\14%\D82`\00\F2\0F\5C\14%\902`\00\F2\0F\11\14%\A01`\00\F2\0F\10\14%p2`\00\F2\0F^\14%\C02`\00\F2\0F\11U\E8\F2\0F\10U\E8\F2\0FYU\E8\F2\0F\11U\D8\F2\0F\10U\D8\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10<%\A00`\00\F2\0FY}\D8\F2\0FX<%\980`\00\F2\0FY\F7\F2\0FX4%\900`\00\F2\0FY\EE\F2\0FX,%\880`\00\F2\0FY\E5\F2\0FX$%\800`\00\F2\0FY\DC\F2\0FX\1C%x0`\00\F2\0FY\D3\F2\0FX\14%\A82`\00\F2\0F\11\14%\B82`\00\F2\0F\10\14%\A01`\00\F2\0F^\D1\F2\0F\11\14%\A81`\00\F2\0F\10M\D0\F2\0F\10\14%\B82`\00\F2\0FX\14%\A82`\00\F2\0F\10\1C%01`\00\F2\0FY]\F0\F2\0FX\D3\F2\0FY\CA\F2\0F^\0C%01`\00\F2\0F\11\0C%\B82`\00\F2\0F\10\0C%p2`\00\F2\0F^\0C%\C02`\00\F2\0F\11M\E8\F2\0F\10M\E8\F2\0FYM\E8\F2\0F\11M\D8\F2\0F\10M\E8\F2\0F\10\14%h0`\00\F2\0FYU\D8\F2\0FX\14%`0`\00\F2\0FYU\D8\F2\0FX\14%X0`\00\F2\0FYU\D8\F2\0FX\14%P0`\00\F2\0FYU\D8\F2\0FX\14%H0`\00\F2\0FYU\D8\F2\0FX\14%@0`\00\F2\0FYU\D8\F2\0FX\14%80`\00\F2\0FY\CA\F2\0F\11\0C%h2`\00\F2\0F\10\0C%\B82`\00\F2\0F\5C\0C%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\A81`\00\F2\0F\11\0C%\B01`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\A01`\00\F2\0FY\04%\B01`\00\F2\0F\11\850\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\950\FF\FF\FF\89\85,\FF\FF\FF\B0\03\E8\A6\EF\FF\FFH\BF\D02`\00\00\00\00\00\0FW\C0\F2\0F\10\0C%p2`\00\F2\0F\10\14%\C02`\00\F2H\0F*]\B0\F2\0FY\D3\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\89\85(\FF\FF\FF\E8\EF\10\00\00H\C7E\B8\01\00\00\00\89\85$\FF\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F#\01\00\00\F2H\0F*E\B8\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\E8\F2\0FYE\E8\F2\0F\11E\D8\F2\0F\10E\E8\F2\0F\10\0C%h0`\00\F2\0FYM\D8\F2\0FX\0C%`0`\00\F2\0FYM\D8\F2\0FX\0C%X0`\00\F2\0FYM\D8\F2\0FX\0C%P0`\00\F2\0FYM\D8\F2\0FX\0C%H0`\00\F2\0FYM\D8\F2\0FX\0C%@0`\00\F2\0FYM\D8\F2\0FX\0C%\A82`\00\F2\0FY\C1\F2\0F\11E\E0\F2\0F\10E\F0\F2\0F\10M\E0\F2\0F\10U\D8\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10<%\A00`\00\F2\0FY}\D8\F2\0FX<%\980`\00\F2\0FY\F7\F2\0FX4%\900`\00\F2\0FY\EE\F2\0FX,%\880`\00\F2\0FY\E5\F2\0FX$%\800`\00\F2\0FY\DC\F2\0FX\1C%x0`\00\F2\0FY\D3\F2\0FX\14%\A82`\00\F2\0F^\CA\F2\0FX\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E9\C8\FE\FF\FFH\BF\D02`\00\00\00\00\00\E8\9A\0F\00\00H\BF\06)@\00\00\00\00\00\F2\0F\10\05\E0\10\00\00\F2\0F\10\0D\18\11\00\00\F2\0F\10\15\18\11\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\D82`\00\F2\0F\5C\1C%\902`\00\F2\0F\11\1C%\B81`\00\F2\0F\10\1C%p2`\00\F2\0F^\1C%\C02`\00\F2\0F\11]\E8\F2\0F\10]\E8\F2\0FY]\E8\F2\0F\11]\D8\F2\0F\10]\E8\F2\0F\10$%h0`\00\F2\0FYe\D8\F2\0FX$%`0`\00\F2\0FYe\D8\F2\0FX$%X0`\00\F2\0FYe\D8\F2\0FX$%P0`\00\F2\0FYe\D8\F2\0FX$%H0`\00\F2\0FYe\D8\F2\0FX$%@0`\00\F2\0FYe\D8\F2\0FX$%\A82`\00\F2\0FY\DC\F2\0F\11\1C%\B82`\00\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10}\D8\F2D\0F\10\04%\A00`\00\F2D\0FYE\D8\F2D\0FX\04%\980`\00\F2A\0FY\F8\F2\0FX<%\900`\00\F2\0FY\F7\F2\0FX4%\880`\00\F2\0FY\EE\F2\0FX,%\800`\00\F2\0FY\E5\F2\0FX$%x0`\00\F2\0FY\DC\F2\0FX\1C%\A82`\00\F2\0F\11\1C%h2`\00\F2\0F\10\1C%\B82`\00\F2\0F^\1C%h2`\00\F2\0F\11\1C%\B82`\00\F2\0F\10\1C%\B81`\00\F2\0F^\DA\F2\0F\11\1C%\C01`\00\F2\0F\10U\D0\F2\0F\10\1C%\B82`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F^\14%01`\00\F2\0F\11\14%\B82`\00\F2\0F\11\0C%h2`\00\F2\0F\10\0C%\B82`\00\F2\0F\5C\0C%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\C01`\00\F2\0F\11\0C%\C81`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\B81`\00\F2\0FY\04%\C81`\00\F2\0F\11\85\18\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95\18\FF\FF\FF\89\85\14\FF\FF\FF\B0\03\E8\C7\EB\FF\FFH\BF\D02`\00\00\00\00\00\0FW\C0\F2\0F\10\0C%p2`\00\F2\0F\10\14%\982`\00\F2H\0F*]\B0\F2\0FY\D3\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\89\85\10\FF\FF\FF\E8\10\0D\00\00H\C7E\B8\01\00\00\00\89\85\0C\FF\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F#\01\00\00\F2H\0F*E\B8\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\E8\F2\0FYE\E8\F2\0F\11E\D8\F2\0F\10E\E8\F2\0F\10\0C%h0`\00\F2\0FYM\D8\F2\0FX\0C%`0`\00\F2\0FYM\D8\F2\0FX\0C%X0`\00\F2\0FYM\D8\F2\0FX\0C%P0`\00\F2\0FYM\D8\F2\0FX\0C%H0`\00\F2\0FYM\D8\F2\0FX\0C%@0`\00\F2\0FYM\D8\F2\0FX\0C%\A82`\00\F2\0FY\C1\F2\0F\11E\E0\F2\0F\10E\F0\F2\0F\10M\E0\F2\0F\10U\D8\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10<%\A00`\00\F2\0FY}\D8\F2\0FX<%\980`\00\F2\0FY\F7\F2\0FX4%\900`\00\F2\0FY\EE\F2\0FX,%\880`\00\F2\0FY\E5\F2\0FX$%\800`\00\F2\0FY\DC\F2\0FX\1C%x0`\00\F2\0FY\D3\F2\0FX\14%\A82`\00\F2\0FY\CA\F2\0FX\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E9\C8\FE\FF\FFH\BF\D02`\00\00\00\00\00\E8\BB\0B\00\00H\BF*)@\00\00\00\00\00\F2\0F\10\05\01\0D\00\00\F2\0F\10\0DQ\0D\00\00\F2\0F\10\159\0D\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\D82`\00\F2\0F\5C\1C%\902`\00\F2\0F\11\1C%\D01`\00\F2\0F\10\1C%p2`\00\F2\0F^\1C%\982`\00\F2\0F\11]\E8\F2\0F\10]\E8\F2\0FY]\E8\F2\0F\11]\D8\F2\0F\10]\E8\F2\0F\10$%h0`\00\F2\0FYe\D8\F2\0FX$%`0`\00\F2\0FYe\D8\F2\0FX$%X0`\00\F2\0FYe\D8\F2\0FX$%P0`\00\F2\0FYe\D8\F2\0FX$%H0`\00\F2\0FYe\D8\F2\0FX$%@0`\00\F2\0FYe\D8\F2\0FX$%\A82`\00\F2\0FY\DC\F2\0F\11\1C%\B82`\00\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10}\D8\F2D\0F\10\04%\A00`\00\F2D\0FYE\D8\F2D\0FX\04%\980`\00\F2A\0FY\F8\F2\0FX<%\900`\00\F2\0FY\F7\F2\0FX4%\880`\00\F2\0FY\EE\F2\0FX,%\800`\00\F2\0FY\E5\F2\0FX$%x0`\00\F2\0FY\DC\F2\0FX\1C%\A82`\00\F2\0F\11\1C%h2`\00\F2\0F\10\1C%\B82`\00\F2\0FY\1C%h2`\00\F2\0F\11\1C%\B82`\00\F2\0F\10\1C%\D01`\00\F2\0F^\DA\F2\0F\11\1C%\D81`\00\F2\0F\10U\D0\F2\0F\10\1C%\B82`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F^\14%01`\00\F2\0F\11\14%\B82`\00\F2\0F\11\0C%h2`\00\F2\0F\10\0C%\B82`\00\F2\0F\5C\0C%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\D81`\00\F2\0F\11\0C%\E01`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\D01`\00\F2\0FY\04%\E01`\00\F2\0F\11\85\00\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95\00\FF\FF\FF\89\85\FC\FE\FF\FF\B0\03\E8\E8\E7\FF\FFH\BF\D02`\00\00\00\00\00\F2\0F\10\05\0E\0B\00\00\0FW\C9\F2\0F\11M\F0\F2\0F\10\0C%\A82`\00\F2\0F\11M\D8\F2\0F\11\04%\B82`\00\F2\0F\10\04%\B82`\00\F2H\0F*M\B0\F2\0F^\C1\F2\0F\11E\E0\89\85\F8\FE\FF\FF\E8$\09\00\00H\C7E\B8\01\00\00\00\89\85\F4\FE\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F\84\00\00\00\F2H\0F*E\B8\F2\0FYE\E0\F2\0F\11E\D0\F2\0F\10E\D0\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\F0\F2\0F\10M\D8\F2\0F\10U\D0\F2\0FXU\D8\F2\0F^\CA\F2\0F\5C\C1\F2\0F\10M\D0\F2\0F\10U\E8\F2\0FXU\D8\F2\0F^\CA\F2\0F\5C\C1\F2\0F\10M\E8\F2\0F\10U\D0\F2\0FYU\E8\F2\0FXU\D8\F2\0F^\CA\F2\0F\5C\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E9g\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8n\08\00\00H\BFN)@\00\00\00\00\00\F2\0F\10\05\B4\09\00\00\F2\0F\10\0D\0C\0A\00\00\F2\0F\10\15\0C\0A\00\00H\B9\00\00\00\00\00\00\00\80\F2\0F\10\1D\02\0A\00\00\F2\0F\10$%H1`\00\F2\0FY$%\D82`\00\F2\0F\5C$%\902`\00\F2\0F\11$%\E81`\00\F2\0F\10$%\E81`\00\F2\0F^\E3\F2\0F\11$%\F01`\00\F2\0F\10\1C%\B82`\00\F2\0F\11]\D0\F2\0F\10]\D0\F2\0FY]\D0\F2\0F\11]\E8\F2\0F\10]\D8fH\0F~\DAH1\CAfH\0Fn\DA\F2\0F\10e\D8\F2\0F\10m\D0\F2\0FXm\D8\F2\0F^\E5\F2\0F\5C\DC\F2\0F\10e\D0\F2\0F\10m\E8\F2\0FXm\D8\F2\0F^\E5\F2\0F\5C\DC\F2\0F\10e\E8\F2\0F\10m\D0\F2\0FYm\E8\F2\0FXm\D8\F2\0F^\E5\F2\0F\5C\DC\F2\0F\11\1C%\B82`\00\F2\0FYU\E0\F2\0F\10\1C%\B82`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F\11\14%\B82`\00\F2H\0F,\0C%\B82`\00Hi\C90\F8\FF\FFH\89M\B0\F2H\0F*U\B0\F2\0F^\14%\A02`\00\F2H\0F,\CAH\89M\B0\F2\0FX\0C%\B82`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\F01`\00\F2\0F\11\0C%\F81`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\E81`\00\F2\0FY\04%\F81`\00\F2\0F\11\85\E8\FE\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95\E8\FE\FF\FF\89\85\E4\FE\FF\FF\B0\03\E8#\E5\FF\FFH\BF\D02`\00\00\00\00\00\0FW\C0\F2\0F\10\0C%p2`\00\F2\0F\10\14%\C02`\00\F2H\0F*]\B0\F2\0FY\D3\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\89\85\E0\FE\FF\FF\E8l\06\00\00H\C7E\B8\01\00\00\00\89\85\DC\FE\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F$\01\00\00\F2H\0F*E\B8\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\E8\F2\0FYE\E8\F2\0F\11E\D8\F2\0F\10E\D8\F2\0F\10M\D8\F2\0F\10U\D8\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10,%\A00`\00\F2\0FYm\D8\F2\0FX,%\980`\00\F2\0FY\E5\F2\0FX$%\900`\00\F2\0FY\DC\F2\0FX\1C%\880`\00\F2\0FY\D3\F2\0FX\14%\800`\00\F2\0FY\CA\F2\0FX\0C%x0`\00\F2\0FY\C1\F2\0FX\04%\A82`\00\F2\0F\11E\E0\F2\0F\10E\F0\F2\0F\10M\E0\F2\0FYM\E0\F2\0FYM\E8\F2\0F\10\14%h0`\00\F2\0FYU\D8\F2\0FX\14%`0`\00\F2\0FYU\D8\F2\0FX\14%X0`\00\F2\0FYU\D8\F2\0FX\14%P0`\00\F2\0FYU\D8\F2\0FX\14%H0`\00\F2\0FYU\D8\F2\0FX\14%@0`\00\F2\0FYU\D8\F2\0FX\14%\A82`\00\F2\0FY\CA\F2\0FX\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E9\C7\FE\FF\FFH\BF\D02`\00\00\00\00\00\E8\16\05\00\00H\BFr)@\00\00\00\00\00\F2\0F\10\05\5C\06\00\00\F2\0F\10\0D\EC\06\00\00\F2\0F\10\15\EC\06\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\D82`\00\F2\0F\5C\1C%\902`\00\F2\0F\11\1C%\002`\00\F2\0F\10\1C%p2`\00\F2\0F^\1C%\C02`\00\F2\0F\11]\E8\F2\0F\10]\E8\F2\0FY]\E8\F2\0F\11]\D8\F2\0F\10]\E8\F2\0F\10$%h0`\00\F2\0FYe\D8\F2\0FX$%`0`\00\F2\0FYe\D8\F2\0FX$%X0`\00\F2\0FYe\D8\F2\0FX$%P0`\00\F2\0FYe\D8\F2\0FX$%H0`\00\F2\0FYe\D8\F2\0FX$%@0`\00\F2\0FYe\D8\F2\0FX$%\A82`\00\F2\0FY\DC\F2\0F\11\1C%\B82`\00\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10}\D8\F2D\0F\10\04%\A00`\00\F2D\0FYE\D8\F2D\0FX\04%\980`\00\F2A\0FY\F8\F2\0FX<%\900`\00\F2\0FY\F7\F2\0FX4%\880`\00\F2\0FY\EE\F2\0FX,%\800`\00\F2\0FY\E5\F2\0FX$%x0`\00\F2\0FY\DC\F2\0FX\1C%\A82`\00\F2\0F\11\1C%h2`\00\F2\0F\10\1C%\B82`\00\F2\0FY\1C%h2`\00\F2\0FY\1C%h2`\00\F2\0F\11\1C%\B82`\00\F2\0F\10\1C%\002`\00\F2\0F^\DA\F2\0F\11\1C%\082`\00\F2\0F\10U\D0\F2\0F\10\1C%\B82`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F^\14%01`\00\F2\0F\11\14%\B82`\00\F2\0F\11\0C%h2`\00\F2\0F\10\0C%\B82`\00\F2\0F\5C\0C%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\082`\00\F2\0F\11\0C%\102`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\002`\00\F2\0FY\04%\102`\00\F2\0F\11\85\D0\FE\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95\D0\FE\FF\FF\89\85\CC\FE\FF\FF\B0\03\E8:\E1\FF\FFH\BF (@\00\00\00\00\00\F2\0F\10\05\88\04\00\00\F2\0F\10\0D\88\04\00\00\F2\0F\10\15\88\04\00\00\F2\0F\10\1D\88\04\00\00\F2\0F\10$%81`\00\F2\0F\10,%p1`\00\F2\0F\5C,%h1`\00\F2\0FY\E5\F2\0FX$%\881`\00\F2\0F^\E3\F2\0F\11$%\182`\00\F2\0F\10\1C%\A82`\00\F2\0F^\1C%\182`\00\F2\0F\11\1C% 2`\00\F2\0F\10\1C%P1`\00\F2\0FX\1C%\881`\00\F2\0FX\1C%\A01`\00\F2\0FX\1C%\B81`\00\F2\0FX\1C%\D01`\00\F2\0F\11\1C%(2`\00\F2\0F\10\1C%(2`\00\F2\0F\10$%\982`\00\F2\0FY$%\E81`\00\F2\0FX\DC\F2\0F^\DA\F2\0F\11\1C%(2`\00\F2\0F\10\14%\A82`\00\F2\0F^\14%(2`\00\F2\0F\11\14%02`\00\F2\0F\10\14%P1`\00\F2\0FX\14%\881`\00\F2\0FX\14%\A01`\00\F2\0FX\14%\B81`\00\F2\0FX\14%\D01`\00\F2\0F\11\14%82`\00\F2\0F\10\14%82`\00\F2\0FX\14%\E81`\00\F2\0FX\14%\002`\00\F2\0F^\D1\F2\0F\11\14%82`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%82`\00\F2\0F\11\0C%@2`\00\F2\0F\10\0C%\881`\00\F2\0FX\0C%\A01`\00\F2\0FX\0C%\D01`\00\F2\0FX\0C%\002`\00\F2\0F^\C8\F2\0F\11\0C%H2`\00\F2\0F\10\04%\A82`\00\F2\0F^\04%H2`\00\F2\0F\11\04%P2`\00\89\85\C8\FE\FF\FF\B0\00\E8q\DF\FF\FFH\BF\96)@\00\00\00\00\00H\8Bu\B0\89\85\C4\FE\FF\FF\B0\00\E8V\DF\FF\FFH\BF\B2)@\00\00\00\00\00\F2\0F\10\05,\02\00\00\F2\0FY\04%\902`\00\89\85\C0\FE\FF\FF\B0\01\E8.\DF\FF\FFH\BF\D0)@\00\00\00\00\00\F2\0F\10\05\04\02\00\00\F2\0FY\04% 2`\00\89\85\BC\FE\FF\FF\B0\01\E8\06\DF\FF\FFH\BF\EE)@\00\00\00\00\00\F2\0F\10\05\DC\01\00\00\F2\0FY\04%02`\00\89\85\B8\FE\FF\FF\B0\01\E8\DE\DE\FF\FFH\BF\0C*@\00\00\00\00\00\F2\0F\10\05\B4\01\00\00\F2\0FY\04%@2`\00\89\85\B4\FE\FF\FF\B0\01\E8\B6\DE\FF\FFH\BF**@\00\00\00\00\00\F2\0F\10\05\8C\01\00\00\F2\0FY\04%P2`\00\89\85\B0\FE\FF\FF\B0\01\E8\8E\DE\FF\FF1\C9\89\85\AC\FE\FF\FF\89\C8H\81\C4`\01\00\00]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\B8\802`\00\00\00\00\001\C9\89\CEH\89}\F8H\8B}\F8\F2\0F\10G\10\F2\0F\11E\F0H\89\C7\E8P\DE\FF\FF1\C9\F2\0F\10\05\C6\01\00\00\F2H\0F*\0C%\802`\00\F2H\0F*\14%\882`\00\F2\0FY\D0\F2\0FX\CAH\8Bu\F8\F2\0F\11N\10H\8Bu\F8\F2\0F\10F\10\F2\0F\5CE\F0H\8Bu\F8\F2\0F\11F\08\89E\EC\89\C8H\83\C4 ]\C3f.\0F\1F\84\00\00\00\00\00\0F\1FD\00\00AWAVI\89\D7AUATL\8D%^\07 \00UH\8D-^\07 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\87\DD\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_4026e4__fini = internal constant %seg_4026e4__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_4026f0__rodata = internal constant %seg_4026f0__rodata_type <{ [248 x i8] c"\01\00\02\00\00\00\00\00\00\00\00\00\00\00\14@\00\00\00\00\00\00\10@\00\00\00\00\00\00\08@\00\00\00\00\00\00\00@\00\00\00\00\00\00\F0?\18-DT\FB!\09@\00\00\00\00\80\84.A\82\FF\ADd\C7F\90?\A0\C2\EB\FEKH\B493333339@\00\00\00\00\00\00,@\00\00\00\00\00@?@\00\00\00\00\00\00\1C@\00\00\00\00\00\00\E0?\00\00\00\00\00\001@\00\00\00\00\00\00.@\EF9\FA\FEB.\E6?\00\00\00\00\00\00=@\A4\92\F1\F7A\95Y@\00\00\00\00\00\00\D0?33333C\7F@\00\00\00\00\00\002@\00\00\00\00\00\00(@\00\00\00\00\00\C0V@\00\00\00\00\00@b@\00\00\00\00\00\00c@\00\00\00\00\00\00J@\AB\AA\AA\AA\AA\AA\D2?\00\00\00\00\00\00>@\8D\ED\B5\A0\F7\C6\B0>", [58 x i8] c"   FLOPS C Program (Double Precision), V2.0 18 Dec 1992\0A\0A\00", [48 x i8] c"   Module     Error        RunTime      MFLOPS\0A\00", [36 x i8] c"                            (usec)\0A\00", [36 x i8] c"     1   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     2   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     3   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     4   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     5   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     6   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     7   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     8   %13.4lf  %10.4lf  %10.4lf\0A\00", [28 x i8] c"   Iterations      = %10ld\0A\00", [30 x i8] c"   NullTime (usec) = %10.4lf\0A\00", [30 x i8] c"   MFLOPS(1)       = %10.4lf\0A\00", [30 x i8] c"   MFLOPS(2)       = %10.4lf\0A\00", [30 x i8] c"   MFLOPS(3)       = %10.4lf\0A\00", [31 x i8] c"   MFLOPS(4)       = %10.4lf\0A\0A\00" }>
@seg_402a4c__eh_frame_hdr = internal constant %seg_402a4c__eh_frame_hdr_type <{ [68 x i8] c"\01\1B\03;@\00\00\00\07\00\00\00\F4\D9\FF\FF\9C\00\00\00$\DA\FF\FF\5C\00\00\00T\DA\FF\FF\88\00\00\00\14\DB\FF\FF\C4\00\00\00\94\FB\FF\FF\E0\00\00\00$\FC\FF\FF\FC\00\00\00\94\FC\FF\FFD\01\00\00" }>
@seg_402a90__eh_frame = internal constant %seg_402a90__eh_frame_type <{ [280 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\C0\D9\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\C4\D9\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00P\D9\FF\FF0\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00H\DA\FF\FFu \00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00\AC\FA\FF\FF\81\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00D\00\00\00\90\00\00\00 \FB\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\D8\00\00\00H\FB\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_602de0__init_array = internal global %seg_602de0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400550_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400520___do_global_dtors_aux to i64) }>
@seg_602ff0__got = internal global %seg_602ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_603000__got_plt = internal global %seg_603000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64) }>
@seg_603028__data = internal global %seg_603028__data_type zeroinitializer
@A0 = global %A0_type <{ [8 x i8] c"\00\00\00\00\00\00\F0?" }>
@A1_0 = global %A1_0_type <{ [8 x i8] c"\05\97UUUU\C5\BF" }>
@A2_0 = global %A2_0_type <{ [8 x i8] c"\A3\E9:\11\11\11\81?" }>
@A3 = global %A3_type <{ [8 x i8] c"q\CA\B1?\A0\01*?" }>
@A4 = global %A4_type <{ [8 x i8] c"f5\AA\84\F2\1D\C7>" }>
@A5 = global %A5_type <{ [8 x i8] c"&\A4\F8\8CZ\EBZ>" }>
@A6 = global %A6_type <{ [8 x i8] c"\A6\C1)R\F7\8D\E6=" }>
@B0 = global %B0_type <{ [8 x i8] c"\00\00\00\00\00\00\F0?" }>
@B1_0 = global %B1_0_type <{ [8 x i8] c"V\81\FF\FF\FF\FF\DF\BF" }>
@B2 = global %B2_type <{ [8 x i8] c"$\02)UUU\A5?" }>
@B3 = global %B3_type <{ [8 x i8] c"\16e\E7\FFk\C1V\BF" }>
@B4 = global %B4_type <{ [8 x i8] c"\B7-$(\95\01\FA>" }>
@B5 = global %B5_type <{ [8 x i8] c"\8E\DB}\D4\B3{\92\BE" }>
@B6 = global %B6_type <{ [8 x i8] c"*\18\DFu\B2W!>" }>
@C0 = global %C0_type <{ [8 x i8] c"\00\00\00\00\00\00\F0?" }>
@C1_0 = global %C1_0_type <{ [8 x i8] c"\E2\B37\FE\FF\FF\EF?" }>
@C2 = global %C2_type <{ [8 x i8] c"\B8\A4+\CC\FF\FF\DF?" }>
@C3 = global %C3_type <{ [8 x i8] c"\15iG|XU\C5?" }>
@C4 = global %C4_type <{ [8 x i8] c"HUy~[U\A5?" }>
@C5 = global %C5_type <{ [8 x i8] c"\0C\12\D9J\9A\0D\81?" }>
@C6 = global %C6_type <{ [8 x i8] c"\05\8C\DB~\18\13W?" }>
@C7 = global %C7_type <{ [8 x i8] c":?\17\C8w\C0&?" }>
@C8 = global %C8_type <{ [8 x i8] c"\CF\B1\04\FE\03\9D\04?" }>
@D1_0 = global %D1_0_type <{ [8 x i8] c"t\83\13C\E1z\A4?" }>
@D2_0 = global %D2_0_type <{ [8 x i8] c"i\1DUM\10uO?" }>
@D3 = global %D3_type <{ [8 x i8] c"(\A7\F4\0FZ\B0\B4>" }>
@E2_0 = global %E2_0_type <{ [8 x i8] c"i\1DUM\10u??" }>
@E3 = global %E3_type <{ [8 x i8] c"\8A\89\9Bj\CD\95\9B>" }>
@seg_603120__bss = internal global %seg_603120__bss_type zeroinitializer
@two = global %two_type zeroinitializer
@five = global %five_type zeroinitializer
@T = global %T_type zeroinitializer
@sd = global %sd_type zeroinitializer
@sb = global %sb_type zeroinitializer
@piref = global %piref_type zeroinitializer
@pierr = global %pierr_type zeroinitializer
@tnow = global %tnow_type zeroinitializer
@nulltime = global %nulltime_type zeroinitializer
@four = global %four_type zeroinitializer
@scale = global %scale_type zeroinitializer
@one = global %one_type zeroinitializer
@sc = global %sc_type zeroinitializer
@sa = global %sa_type zeroinitializer
@three = global %three_type zeroinitializer
@TimeArray = global %TimeArray_type zeroinitializer
@piprg = global %piprg_type zeroinitializer
@TLimit = global %TLimit_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400550_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400520___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4026e0___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402670___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dtime_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]

declare %struct.Memory* @sub_4004b0_deregister_tm_clones_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @sub_400428__init_proc_renamed_(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias readnone returned)

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @gettimeofday(i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_4026e0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4026e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_400470__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400470:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2447
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2448
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2449
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2450
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2447
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2448
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2449
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2450
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_4026e0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_402670___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_602ff0__got_type, %seg_602ff0__got_type* @seg_602ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_603320___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_400550_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400550:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_4004e0_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_400520___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400520:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%seg_603120__bss_type, %seg_603120__bss_type* @seg_603120__bss, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2450
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2447
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_400540, label %block_400529

block_400540:                                     ; preds = %block_400520
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400529:                                     ; preds = %block_400520
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_4004b0_deregister_tm_clones_renamed_(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%seg_603120__bss_type, %seg_603120__bss_type* @seg_603120__bss, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_4025e0_dtime(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4025e0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %31 to %"class.std::bitset"*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %33 to %"class.std::bitset"*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %35 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %34, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %35 to %"class.std::bitset"*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %37 to %union.vec128_t*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %39 to %union.vec128_t*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = load i64, i64* %RBP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 1
  store i64 %44, i64* %PC
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %46 = load i64, i64* %45, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %42, i64* %48
  store i64 %47, i64* %45, align 8, !tbaa !2428
  %49 = load i64, i64* %RSP
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  store i64 %49, i64* %RBP, align 8, !tbaa !2428
  %52 = load i64, i64* %RSP
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = sub i64 %52, 32
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  %56 = icmp ult i64 %52, 32
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %57, i8* %58, align 1, !tbaa !2432
  %59 = trunc i64 %55 to i32
  %60 = and i32 %59, 255
  %61 = call i32 @llvm.ctpop.i32(i32 %60) #16
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %64, i8* %65, align 1, !tbaa !2446
  %66 = xor i64 32, %52
  %67 = xor i64 %66, %55
  %68 = lshr i64 %67, 4
  %69 = trunc i64 %68 to i8
  %70 = and i8 %69, 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %70, i8* %71, align 1, !tbaa !2450
  %72 = icmp eq i64 %55, 0
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %73, i8* %74, align 1, !tbaa !2447
  %75 = lshr i64 %55, 63
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i64 %52, 63
  %79 = xor i64 %75, %78
  %80 = add nuw nsw i64 %79, %78
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %82, i8* %83, align 1, !tbaa !2449
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 10
  store i64 %85, i64* %PC
  store i64 ptrtoint (%tnow_type* @tnow to i64), i64* %RAX, align 8, !tbaa !2428
  %86 = load i64, i64* %RCX
  %87 = load i32, i32* %ECX
  %88 = zext i32 %87 to i64
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 2
  store i64 %90, i64* %PC
  %91 = xor i64 %88, %86
  %92 = trunc i64 %91 to i32
  %93 = and i64 %91, 4294967295
  store i64 %93, i64* %RCX, align 8, !tbaa !2428
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %94, align 1, !tbaa !2432
  %95 = and i32 %92, 255
  %96 = call i32 @llvm.ctpop.i32(i32 %95) #16
  %97 = trunc i32 %96 to i8
  %98 = and i8 %97, 1
  %99 = xor i8 %98, 1
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %99, i8* %100, align 1, !tbaa !2446
  %101 = icmp eq i32 %92, 0
  %102 = zext i1 %101 to i8
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %102, i8* %103, align 1, !tbaa !2447
  %104 = lshr i32 %92, 31
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %105, i8* %106, align 1, !tbaa !2448
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %107, align 1, !tbaa !2449
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %108, align 1, !tbaa !2450
  %109 = load i32, i32* %ECX
  %110 = zext i32 %109 to i64
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 2
  store i64 %112, i64* %PC
  %113 = and i64 %110, 4294967295
  store i64 %113, i64* %RSI, align 8, !tbaa !2428
  %114 = load i64, i64* %RBP
  %115 = sub i64 %114, 8
  %116 = load i64, i64* %RDI
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %115 to i64*
  store i64 %116, i64* %119
  %120 = load i64, i64* %RBP
  %121 = sub i64 %120, 8
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 4
  store i64 %123, i64* %PC
  %124 = inttoptr i64 %121 to i64*
  %125 = load i64, i64* %124
  store i64 %125, i64* %RDI, align 8, !tbaa !2428
  %126 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %127 = load i64, i64* %RDI
  %128 = add i64 %127, 16
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 5
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to double*
  %132 = load double, double* %131
  %133 = bitcast i8* %126 to double*
  store double %132, double* %133, align 1, !tbaa !2452
  %134 = getelementptr inbounds i8, i8* %126, i64 8
  %135 = bitcast i8* %134 to double*
  store double 0.000000e+00, double* %135, align 1, !tbaa !2452
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 16
  %138 = bitcast %union.vec128_t* %XMM0 to i8*
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 5
  store i64 %140, i64* %PC
  %141 = bitcast i8* %138 to double*
  %142 = load double, double* %141, align 1
  %143 = inttoptr i64 %137 to double*
  store double %142, double* %143
  %144 = load i64, i64* %RAX
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 3
  store i64 %146, i64* %PC
  store i64 %144, i64* %RDI, align 8, !tbaa !2428
  %147 = load i64, i64* %PC
  %148 = sub i64 %147, 8619
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 5
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 5
  store i64 %152, i64* %PC
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %154 = load i64, i64* %153, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %150, i64* %156
  store i64 %155, i64* %153, align 8, !tbaa !2428
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %148, i64* %157, align 8, !tbaa !2428
  %158 = load i64, i64* %PC
  %159 = call %struct.Memory* @ext_603318_gettimeofday(%struct.State* %0, i64 %158, %struct.Memory* %2)
  %160 = load i64, i64* %RCX
  %161 = load i32, i32* %ECX
  %162 = zext i32 %161 to i64
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 2
  store i64 %164, i64* %PC
  %165 = xor i64 %162, %160
  %166 = trunc i64 %165 to i32
  %167 = and i64 %165, 4294967295
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %168, align 1, !tbaa !2432
  %169 = and i32 %166, 255
  %170 = call i32 @llvm.ctpop.i32(i32 %169) #16
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  %173 = xor i8 %172, 1
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %173, i8* %174, align 1, !tbaa !2446
  %175 = icmp eq i32 %166, 0
  %176 = zext i1 %175 to i8
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %176, i8* %177, align 1, !tbaa !2447
  %178 = lshr i32 %166, 31
  %179 = trunc i32 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %179, i8* %180, align 1, !tbaa !2448
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %181, align 1, !tbaa !2449
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %182, align 1, !tbaa !2450
  %183 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 8
  store i64 %185, i64* %PC
  %186 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 240) to double*)
  %187 = bitcast i8* %183 to double*
  store double %186, double* %187, align 1, !tbaa !2452
  %188 = getelementptr inbounds i8, i8* %183, i64 8
  %189 = bitcast i8* %188 to double*
  store double 0.000000e+00, double* %189, align 1, !tbaa !2452
  %190 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 10
  store i64 %192, i64* %PC
  %193 = load i64, i64* bitcast (%tnow_type* @tnow to i64*)
  %194 = sitofp i64 %193 to double
  %195 = bitcast i8* %190 to double*
  store double %194, double* %195, align 1, !tbaa !2452
  %196 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 10
  store i64 %198, i64* %PC
  %199 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%tnow_type* @tnow to i64), i64 8) to i64*)
  %200 = sitofp i64 %199 to double
  %201 = bitcast i8* %196 to double*
  store double %200, double* %201, align 1, !tbaa !2452
  %202 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %203 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %204 = bitcast %union.vec128_t* %XMM0 to i8*
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 4
  store i64 %206, i64* %PC
  %207 = bitcast i8* %203 to double*
  %208 = load double, double* %207, align 1
  %209 = getelementptr inbounds i8, i8* %203, i64 8
  %210 = bitcast i8* %209 to i64*
  %211 = load i64, i64* %210, align 1
  %212 = bitcast i8* %204 to double*
  %213 = load double, double* %212, align 1
  %214 = fmul double %208, %213
  %215 = bitcast i8* %202 to double*
  store double %214, double* %215, align 1, !tbaa !2452
  %216 = getelementptr inbounds i8, i8* %202, i64 8
  %217 = bitcast i8* %216 to i64*
  store i64 %211, i64* %217, align 1, !tbaa !2452
  %218 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %219 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %220 = bitcast %union.vec128_t* %XMM2 to i8*
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 4
  store i64 %222, i64* %PC
  %223 = bitcast i8* %219 to double*
  %224 = load double, double* %223, align 1
  %225 = getelementptr inbounds i8, i8* %219, i64 8
  %226 = bitcast i8* %225 to i64*
  %227 = load i64, i64* %226, align 1
  %228 = bitcast i8* %220 to double*
  %229 = load double, double* %228, align 1
  %230 = fadd double %224, %229
  %231 = bitcast i8* %218 to double*
  store double %230, double* %231, align 1, !tbaa !2452
  %232 = getelementptr inbounds i8, i8* %218, i64 8
  %233 = bitcast i8* %232 to i64*
  store i64 %227, i64* %233, align 1, !tbaa !2452
  %234 = load i64, i64* %RBP
  %235 = sub i64 %234, 8
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 4
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %235 to i64*
  %239 = load i64, i64* %238
  store i64 %239, i64* %RSI, align 8, !tbaa !2428
  %240 = load i64, i64* %RSI
  %241 = add i64 %240, 16
  %242 = bitcast %union.vec128_t* %XMM1 to i8*
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 5
  store i64 %244, i64* %PC
  %245 = bitcast i8* %242 to double*
  %246 = load double, double* %245, align 1
  %247 = inttoptr i64 %241 to double*
  store double %246, double* %247
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 8
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RSI, align 8, !tbaa !2428
  %254 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %255 = load i64, i64* %RSI
  %256 = add i64 %255, 16
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 5
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %256 to double*
  %260 = load double, double* %259
  %261 = bitcast i8* %254 to double*
  store double %260, double* %261, align 1, !tbaa !2452
  %262 = getelementptr inbounds i8, i8* %254, i64 8
  %263 = bitcast i8* %262 to double*
  store double 0.000000e+00, double* %263, align 1, !tbaa !2452
  %264 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %265 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 16
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 5
  store i64 %269, i64* %PC
  %270 = bitcast i8* %265 to double*
  %271 = load double, double* %270, align 1
  %272 = getelementptr inbounds i8, i8* %265, i64 8
  %273 = bitcast i8* %272 to i64*
  %274 = load i64, i64* %273, align 1
  %275 = inttoptr i64 %267 to double*
  %276 = load double, double* %275
  %277 = fsub double %271, %276
  %278 = bitcast i8* %264 to double*
  store double %277, double* %278, align 1, !tbaa !2452
  %279 = getelementptr inbounds i8, i8* %264, i64 8
  %280 = bitcast i8* %279 to i64*
  store i64 %274, i64* %280, align 1, !tbaa !2452
  %281 = load i64, i64* %RBP
  %282 = sub i64 %281, 8
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 4
  store i64 %284, i64* %PC
  %285 = inttoptr i64 %282 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RSI, align 8, !tbaa !2428
  %287 = load i64, i64* %RSI
  %288 = add i64 %287, 8
  %289 = bitcast %union.vec128_t* %XMM0 to i8*
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 5
  store i64 %291, i64* %PC
  %292 = bitcast i8* %289 to double*
  %293 = load double, double* %292, align 1
  %294 = inttoptr i64 %288 to double*
  store double %293, double* %294
  %295 = load i64, i64* %RBP
  %296 = sub i64 %295, 20
  %297 = load i32, i32* %EAX
  %298 = zext i32 %297 to i64
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 3
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %296 to i32*
  store i32 %297, i32* %301
  %302 = load i32, i32* %ECX
  %303 = zext i32 %302 to i64
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 2
  store i64 %305, i64* %PC
  %306 = and i64 %303, 4294967295
  store i64 %306, i64* %RAX, align 8, !tbaa !2428
  %307 = load i64, i64* %RSP
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 4
  store i64 %309, i64* %PC
  %310 = add i64 32, %307
  store i64 %310, i64* %RSP, align 8, !tbaa !2428
  %311 = icmp ult i64 %310, %307
  %312 = icmp ult i64 %310, 32
  %313 = or i1 %311, %312
  %314 = zext i1 %313 to i8
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %314, i8* %315, align 1, !tbaa !2432
  %316 = trunc i64 %310 to i32
  %317 = and i32 %316, 255
  %318 = call i32 @llvm.ctpop.i32(i32 %317) #16
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = xor i8 %320, 1
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %321, i8* %322, align 1, !tbaa !2446
  %323 = xor i64 32, %307
  %324 = xor i64 %323, %310
  %325 = lshr i64 %324, 4
  %326 = trunc i64 %325 to i8
  %327 = and i8 %326, 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %327, i8* %328, align 1, !tbaa !2450
  %329 = icmp eq i64 %310, 0
  %330 = zext i1 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %330, i8* %331, align 1, !tbaa !2447
  %332 = lshr i64 %310, 63
  %333 = trunc i64 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %333, i8* %334, align 1, !tbaa !2448
  %335 = lshr i64 %307, 63
  %336 = xor i64 %332, %335
  %337 = add nuw nsw i64 %336, %332
  %338 = icmp eq i64 %337, 2
  %339 = zext i1 %338 to i8
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %339, i8* %340, align 1, !tbaa !2449
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 1
  store i64 %342, i64* %PC
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %344 = load i64, i64* %343, align 8, !tbaa !2428
  %345 = add i64 %344, 8
  %346 = inttoptr i64 %344 to i64*
  %347 = load i64, i64* %346
  store i64 %347, i64* %RBP, align 8, !tbaa !2428
  store i64 %345, i64* %343, align 8, !tbaa !2428
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 1
  store i64 %349, i64* %PC
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %352 = load i64, i64* %351, align 8, !tbaa !2428
  %353 = inttoptr i64 %352 to i64*
  %354 = load i64, i64* %353
  store i64 %354, i64* %350, align 8, !tbaa !2428
  %355 = add i64 %352, 8
  store i64 %355, i64* %351, align 8, !tbaa !2428
  ret %struct.Memory* %159
}

; Function Attrs: noinline
define %struct.Memory* @sub_4026e4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4026e4:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2450
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2449
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2450
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2447
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2448
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2449
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004e0_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004e0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 6304024, i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, 6304024
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, 6304024
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 6304024, %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2450
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2448
  %62 = lshr i64 %36, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = load i64, i64* %RSP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  %71 = load i64, i64* %RSI
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = ashr i64 %71, 2
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  %77 = ashr i64 %74, 1
  store i64 %77, i64* %RSI, align 8, !tbaa !2428
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %76, i8* %78, align 1, !tbaa !2451
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %80 = trunc i64 %77 to i32
  %81 = and i32 %80, 255
  %82 = call i32 @llvm.ctpop.i32(i32 %81) #16
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 1
  %85 = xor i8 %84, 1
  store i8 %85, i8* %79, align 1, !tbaa !2451
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %86, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %88 = icmp eq i64 %77, 0
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %87, align 1, !tbaa !2451
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %91 = lshr i64 %77, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %90, align 1, !tbaa !2451
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %93, align 1, !tbaa !2451
  %94 = load i64, i64* %RSI
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = lshr i64 %97, 62
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = lshr i64 %100, 1
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %102, i8* %104, align 1, !tbaa !2451
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %106 = trunc i64 %103 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %105, align 1, !tbaa !2451
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %112, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %114 = icmp eq i64 %103, 0
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %113, align 1, !tbaa !2451
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %116, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = load i64, i64* %RSI
  %119 = load i64, i64* %RAX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 3
  store i64 %121, i64* %PC
  %122 = add i64 %119, %118
  store i64 %122, i64* %RSI, align 8, !tbaa !2428
  %123 = icmp ult i64 %122, %118
  %124 = icmp ult i64 %122, %119
  %125 = or i1 %123, %124
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %126, i8* %127, align 1, !tbaa !2432
  %128 = trunc i64 %122 to i32
  %129 = and i32 %128, 255
  %130 = call i32 @llvm.ctpop.i32(i32 %129) #16
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %133, i8* %134, align 1, !tbaa !2446
  %135 = xor i64 %119, %118
  %136 = xor i64 %135, %122
  %137 = lshr i64 %136, 4
  %138 = trunc i64 %137 to i8
  %139 = and i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %139, i8* %140, align 1, !tbaa !2450
  %141 = icmp eq i64 %122, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2447
  %144 = lshr i64 %122, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2448
  %147 = lshr i64 %118, 63
  %148 = lshr i64 %119, 63
  %149 = xor i64 %144, %147
  %150 = xor i64 %144, %148
  %151 = add nuw nsw i64 %149, %150
  %152 = icmp eq i64 %151, 2
  %153 = zext i1 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %153, i8* %154, align 1, !tbaa !2449
  %155 = load i64, i64* %RSI
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC
  %158 = trunc i64 %155 to i8
  %159 = and i8 %158, 1
  %160 = ashr i64 %155, 1
  store i64 %160, i64* %RSI, align 8, !tbaa !2428
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %159, i8* %161, align 1, !tbaa !2451
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %163 = trunc i64 %160 to i32
  %164 = and i32 %163, 255
  %165 = call i32 @llvm.ctpop.i32(i32 %164) #16
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %162, align 1, !tbaa !2451
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %169, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %171 = icmp eq i64 %160, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %170, align 1, !tbaa !2451
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %174 = lshr i64 %160, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %173, align 1, !tbaa !2451
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %176, align 1, !tbaa !2451
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 23
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 2
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 2
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %184 = load i8, i8* %183, align 1, !tbaa !2447
  store i8 %184, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %186 = icmp ne i8 %184, 0
  %187 = select i1 %186, i64 %178, i64 %180
  store i64 %187, i64* %185, align 8, !tbaa !2428
  %188 = load i8, i8* %BRANCH_TAKEN
  %189 = icmp eq i8 %188, 1
  br i1 %189, label %block_400518, label %block_400503

block_40051a:                                     ; preds = %block_40050d
  %190 = load i64, i64* %RAX
  %191 = load i64, i64* %RAX
  %192 = add i64 %191, %190
  %193 = load i16, i16* %AX
  %194 = zext i16 %193 to i64
  %195 = load i64, i64* %PC
  %196 = add i64 %195, 6
  store i64 %196, i64* %PC
  %197 = load i64, i64* %PC
  %198 = tail call %struct.Memory* @sub_400520___do_global_dtors_aux(%struct.State* %0, i64 %197, %struct.Memory* %2)
  ret %struct.Memory* %198

block_400515:                                     ; preds = %block_40050d
  %199 = load i64, i64* %RAX
  %200 = load i32, i32* %EAX
  %201 = zext i32 %200 to i64
  %202 = load i64, i64* %PC
  %203 = add i64 %202, 3
  store i64 %203, i64* %PC
  br label %block_400518

block_40050d:                                     ; preds = %block_400503
  %204 = load i64, i64* %PC
  %205 = add i64 %204, 1
  store i64 %205, i64* %PC
  %206 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %207 = load i64, i64* %206, align 8, !tbaa !2428
  %208 = add i64 %207, 8
  %209 = inttoptr i64 %207 to i64*
  %210 = load i64, i64* %209
  store i64 %210, i64* %RBP, align 8, !tbaa !2428
  store i64 %208, i64* %206, align 8, !tbaa !2428
  %211 = load i64, i64* %PC
  %212 = add i64 %211, 5
  store i64 %212, i64* %PC
  store i64 6304024, i64* %RDI, align 8, !tbaa !2428
  %213 = load i64, i64* %RAX
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 2
  store i64 %215, i64* %PC
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %213, i64* %216, align 8, !tbaa !2428
  %217 = load i64, i64* %PC
  switch i64 %217, label %269 [
    i64 4195610, label %block_40051a
    i64 4195605, label %block_400515
  ]

block_400518:                                     ; preds = %block_400503, %block_400515, %block_4004e0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4004e0 ], [ %2, %block_400503 ], [ %2, %block_400515 ]
  %218 = load i64, i64* %PC
  %219 = add i64 %218, 1
  store i64 %219, i64* %PC
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %221 = load i64, i64* %220, align 8, !tbaa !2428
  %222 = add i64 %221, 8
  %223 = inttoptr i64 %221 to i64*
  %224 = load i64, i64* %223
  store i64 %224, i64* %RBP, align 8, !tbaa !2428
  store i64 %222, i64* %220, align 8, !tbaa !2428
  %225 = load i64, i64* %PC
  %226 = add i64 %225, 1
  store i64 %226, i64* %PC
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %229 = load i64, i64* %228, align 8, !tbaa !2428
  %230 = inttoptr i64 %229 to i64*
  %231 = load i64, i64* %230
  store i64 %231, i64* %227, align 8, !tbaa !2428
  %232 = add i64 %229, 8
  store i64 %232, i64* %228, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400503:                                     ; preds = %block_4004e0
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 5
  store i64 %234, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %235 = load i64, i64* %RAX
  %236 = load i64, i64* %RAX
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 3
  store i64 %238, i64* %PC
  %239 = and i64 %236, %235
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %240, align 1, !tbaa !2432
  %241 = trunc i64 %239 to i32
  %242 = and i32 %241, 255
  %243 = call i32 @llvm.ctpop.i32(i32 %242) #16
  %244 = trunc i32 %243 to i8
  %245 = and i8 %244, 1
  %246 = xor i8 %245, 1
  %247 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %246, i8* %247, align 1, !tbaa !2446
  %248 = icmp eq i64 %239, 0
  %249 = zext i1 %248 to i8
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %249, i8* %250, align 1, !tbaa !2447
  %251 = lshr i64 %239, 63
  %252 = trunc i64 %251 to i8
  %253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %252, i8* %253, align 1, !tbaa !2448
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %254, align 1, !tbaa !2449
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %255, align 1, !tbaa !2450
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 13
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 2
  %260 = load i64, i64* %PC
  %261 = add i64 %260, 2
  store i64 %261, i64* %PC
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %263 = load i8, i8* %262, align 1, !tbaa !2447
  store i8 %263, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %265 = icmp ne i8 %263, 0
  %266 = select i1 %265, i64 %257, i64 %259
  store i64 %266, i64* %264, align 8, !tbaa !2428
  %267 = load i8, i8* %BRANCH_TAKEN
  %268 = icmp eq i8 %267, 1
  br i1 %268, label %block_400518, label %block_40050d

; <label>:269:                                    ; preds = %block_40050d
  %270 = load i64, i64* %PC
  %271 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %270, %struct.Memory* %2)
  ret %struct.Memory* %271
}

; Function Attrs: noinline
define %struct.Memory* @sub_400428__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400428:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2447
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2448
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2449
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602ff0__got_type* @seg_602ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2449
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2450
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2447
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_40043a, label %block_400438

block_400438:                                     ; preds = %block_400428
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_40043a

block_40043a:                                     ; preds = %block_400438, %block_400428
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400428 ], [ %92, %block_400438 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2450
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2448
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2449
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004a0__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004a0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004b0_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004b0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 6304024, i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, 6304024
  %37 = icmp ult i64 %33, 6304024
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 6304024, %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2450
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %33, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %59
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2449
  %65 = load i64, i64* %RSP
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %RBP, align 8, !tbaa !2428
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 25
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2447
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_4004d8, label %block_4004c1

block_4004d8:                                     ; preds = %block_4004c1, %block_4004d3, %block_4004b0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4004b0 ], [ %2, %block_4004c1 ], [ %2, %block_4004d3 ]
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4004da:                                     ; preds = %block_4004cb
  %96 = load i64, i64* %RAX
  %97 = load i64, i64* %RAX
  %98 = add i64 %97, %96
  %99 = load i16, i16* %AX
  %100 = zext i16 %99 to i64
  %101 = load i64, i64* %PC
  %102 = add i64 %101, 6
  store i64 %102, i64* %PC
  %103 = load i64, i64* %PC
  %104 = tail call %struct.Memory* @sub_4004e0_register_tm_clones(%struct.State* %0, i64 %103, %struct.Memory* %2)
  ret %struct.Memory* %104

block_4004d3:                                     ; preds = %block_4004cb
  %105 = load i64, i64* %RAX
  %106 = load i64, i64* %RAX
  %107 = add i64 %106, %105
  %108 = load i32, i32* %EAX
  %109 = zext i32 %108 to i64
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 5
  store i64 %111, i64* %PC
  br label %block_4004d8

block_4004cb:                                     ; preds = %block_4004c1
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 1
  store i64 %113, i64* %PC
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %115 = load i64, i64* %114, align 8, !tbaa !2428
  %116 = add i64 %115, 8
  %117 = inttoptr i64 %115 to i64*
  %118 = load i64, i64* %117
  store i64 %118, i64* %RBP, align 8, !tbaa !2428
  store i64 %116, i64* %114, align 8, !tbaa !2428
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 5
  store i64 %120, i64* %PC
  store i64 6304024, i64* %RDI, align 8, !tbaa !2428
  %121 = load i64, i64* %RAX
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 2
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %121, i64* %124, align 8, !tbaa !2428
  %125 = load i64, i64* %PC
  switch i64 %125, label %162 [
    i64 4195546, label %block_4004da
    i64 4195539, label %block_4004d3
  ]

block_4004c1:                                     ; preds = %block_4004b0
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 5
  store i64 %127, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %128 = load i64, i64* %RAX
  %129 = load i64, i64* %RAX
  %130 = load i64, i64* %PC
  %131 = add i64 %130, 3
  store i64 %131, i64* %PC
  %132 = and i64 %129, %128
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %133, align 1, !tbaa !2432
  %134 = trunc i64 %132 to i32
  %135 = and i32 %134, 255
  %136 = call i32 @llvm.ctpop.i32(i32 %135) #16
  %137 = trunc i32 %136 to i8
  %138 = and i8 %137, 1
  %139 = xor i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %139, i8* %140, align 1, !tbaa !2446
  %141 = icmp eq i64 %132, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2447
  %144 = lshr i64 %132, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2448
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %147, align 1, !tbaa !2449
  %148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %148, align 1, !tbaa !2450
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 15
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 2
  %153 = load i64, i64* %PC
  %154 = add i64 %153, 2
  store i64 %154, i64* %PC
  %155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %156 = load i8, i8* %155, align 1, !tbaa !2447
  store i8 %156, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %158 = icmp ne i8 %156, 0
  %159 = select i1 %158, i64 %150, i64 %152
  store i64 %159, i64* %157, align 8, !tbaa !2428
  %160 = load i8, i8* %BRANCH_TAKEN
  %161 = icmp eq i8 %160, 1
  br i1 %161, label %block_4004d8, label %block_4004cb

; <label>:162:                                    ; preds = %block_4004cb
  %163 = load i64, i64* %PC
  %164 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %163, %struct.Memory* %2)
  ret %struct.Memory* %164
}

; Function Attrs: noinline
define %struct.Memory* @sub_402670___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402670:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_602de0__init_array_type* @seg_602de0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_602de0__init_array_type* @seg_602de0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2450
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2447
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2448
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2449
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2450
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2447
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2448
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2449
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 8820
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_400428__init_proc_renamed_(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2447
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2448
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2449
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2450
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2447
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_4026c6, label %block_4026a6

block_4026c6:                                     ; preds = %block_4026b0, %block_402670
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_402670 ], [ %387, %block_4026b0 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2450
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2447
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2448
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2449
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4026a6:                                     ; preds = %block_402670
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2447
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2448
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2449
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2450
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_4026b0

block_4026b0:                                     ; preds = %block_4026b0, %block_4026a6
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_4026a6 ], [ %387, %block_4026b0 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2450
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2447
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2448
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2449
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2450
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2447
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2448
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2449
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2447
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_4026b0, label %block_4026c6
}

; Function Attrs: noinline
define %struct.Memory* @sub_400560_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400560:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RAX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 5
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RCX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 11
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDI = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 13
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSP = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 15
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RBP = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %38 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %37, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %38 to %"class.std::bitset"*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %40 to %"class.std::bitset"*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %42 to %"class.std::bitset"*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %44 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %43, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %44 to %"class.std::bitset"*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %46 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %45, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %46 to %"class.std::bitset"*
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %48 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %47, i64 0, i64 5
  %YMM5 = bitcast %union.VectorReg* %48 to %"class.std::bitset"*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %50 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %49, i64 0, i64 6
  %YMM6 = bitcast %union.VectorReg* %50 to %"class.std::bitset"*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %52 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %51, i64 0, i64 7
  %YMM7 = bitcast %union.VectorReg* %52 to %"class.std::bitset"*
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %54 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %53, i64 0, i64 8
  %YMM8 = bitcast %union.VectorReg* %54 to %"class.std::bitset"*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %56 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %55, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %56 to %union.vec128_t*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %58 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %57, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %58 to %union.vec128_t*
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %60 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %59, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %60 to %union.vec128_t*
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %62 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %61, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %62 to %union.vec128_t*
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %64 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %63, i64 0, i64 4
  %XMM4 = bitcast %union.VectorReg* %64 to %union.vec128_t*
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %66 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %65, i64 0, i64 5
  %XMM5 = bitcast %union.VectorReg* %66 to %union.vec128_t*
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %68 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %67, i64 0, i64 6
  %XMM6 = bitcast %union.VectorReg* %68 to %union.vec128_t*
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %70 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %69, i64 0, i64 7
  %XMM7 = bitcast %union.VectorReg* %70 to %union.vec128_t*
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %72 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %71, i64 0, i64 8
  %XMM8 = bitcast %union.VectorReg* %72 to %union.vec128_t*
  %73 = load i64, i64* %RBP
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 1
  store i64 %75, i64* %PC
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %77 = load i64, i64* %76, align 8, !tbaa !2428
  %78 = add i64 %77, -8
  %79 = inttoptr i64 %78 to i64*
  store i64 %73, i64* %79
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %80 = load i64, i64* %RSP
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC
  store i64 %80, i64* %RBP, align 8, !tbaa !2428
  %83 = load i64, i64* %RSP
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 7
  store i64 %85, i64* %PC
  %86 = sub i64 %83, 352
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  %87 = icmp ult i64 %83, 352
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %88, i8* %89, align 1, !tbaa !2432
  %90 = trunc i64 %86 to i32
  %91 = and i32 %90, 255
  %92 = call i32 @llvm.ctpop.i32(i32 %91) #16
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %95, i8* %96, align 1, !tbaa !2446
  %97 = xor i64 352, %83
  %98 = xor i64 %97, %86
  %99 = lshr i64 %98, 4
  %100 = trunc i64 %99 to i8
  %101 = and i8 %100, 1
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %101, i8* %102, align 1, !tbaa !2450
  %103 = icmp eq i64 %86, 0
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %104, i8* %105, align 1, !tbaa !2447
  %106 = lshr i64 %86, 63
  %107 = trunc i64 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %107, i8* %108, align 1, !tbaa !2448
  %109 = lshr i64 %83, 63
  %110 = xor i64 %106, %109
  %111 = add nuw nsw i64 %110, %109
  %112 = icmp eq i64 %111, 2
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %113, i8* %114, align 1, !tbaa !2449
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 10
  store i64 %116, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 304), i64* %RDI, align 8, !tbaa !2428
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 4
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 0, i32* %121
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 2
  store i64 %123, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %124 = load i64, i64* %PC
  %125 = sub i64 %124, 302
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 5
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 5
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = add i64 %131, -8
  %133 = inttoptr i64 %132 to i64*
  store i64 %127, i64* %133
  store i64 %132, i64* %130, align 8, !tbaa !2428
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %125, i64* %134, align 8, !tbaa !2428
  %135 = load i64, i64* %PC
  %136 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %135, %struct.Memory* %2)
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 10
  store i64 %138, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 248), i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %RBP
  %140 = sub i64 %139, 92
  %141 = load i32, i32* %EAX
  %142 = zext i32 %141 to i64
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 3
  store i64 %144, i64* %PC
  %145 = inttoptr i64 %140 to i32*
  store i32 %141, i32* %145
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 2
  store i64 %147, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %148 = load i64, i64* %PC
  %149 = sub i64 %148, 322
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 5
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 5
  store i64 %153, i64* %PC
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %155 = load i64, i64* %154, align 8, !tbaa !2428
  %156 = add i64 %155, -8
  %157 = inttoptr i64 %156 to i64*
  store i64 %151, i64* %157
  store i64 %156, i64* %154, align 8, !tbaa !2428
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %149, i64* %158, align 8, !tbaa !2428
  %159 = load i64, i64* %PC
  %160 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %159, %struct.Memory* %136)
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 10
  store i64 %162, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 306), i64* %RDI, align 8, !tbaa !2428
  %163 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 8
  store i64 %165, i64* %PC
  %166 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 8) to double*)
  %167 = bitcast i8* %163 to double*
  store double %166, double* %167, align 1, !tbaa !2452
  %168 = getelementptr inbounds i8, i8* %163, i64 8
  %169 = bitcast i8* %168 to double*
  store double 0.000000e+00, double* %169, align 1, !tbaa !2452
  %170 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 8
  store i64 %172, i64* %PC
  %173 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 16) to double*)
  %174 = bitcast i8* %170 to double*
  store double %173, double* %174, align 1, !tbaa !2452
  %175 = getelementptr inbounds i8, i8* %170, i64 8
  %176 = bitcast i8* %175 to double*
  store double 0.000000e+00, double* %176, align 1, !tbaa !2452
  %177 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 8
  store i64 %179, i64* %PC
  %180 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 24) to double*)
  %181 = bitcast i8* %177 to double*
  store double %180, double* %181, align 1, !tbaa !2452
  %182 = getelementptr inbounds i8, i8* %177, i64 8
  %183 = bitcast i8* %182 to double*
  store double 0.000000e+00, double* %183, align 1, !tbaa !2452
  %184 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 8
  store i64 %186, i64* %PC
  %187 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 32) to double*)
  %188 = bitcast i8* %184 to double*
  store double %187, double* %188, align 1, !tbaa !2452
  %189 = getelementptr inbounds i8, i8* %184, i64 8
  %190 = bitcast i8* %189 to double*
  store double 0.000000e+00, double* %190, align 1, !tbaa !2452
  %191 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 8
  store i64 %193, i64* %PC
  %194 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 40) to double*)
  %195 = bitcast i8* %191 to double*
  store double %194, double* %195, align 1, !tbaa !2452
  %196 = getelementptr inbounds i8, i8* %191, i64 8
  %197 = bitcast i8* %196 to double*
  store double 0.000000e+00, double* %197, align 1, !tbaa !2452
  %198 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 8
  store i64 %200, i64* %PC
  %201 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 48) to double*)
  %202 = bitcast i8* %198 to double*
  store double %201, double* %202, align 1, !tbaa !2452
  %203 = getelementptr inbounds i8, i8* %198, i64 8
  %204 = bitcast i8* %203 to double*
  store double 0.000000e+00, double* %204, align 1, !tbaa !2452
  %205 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 8
  store i64 %207, i64* %PC
  %208 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 56) to double*)
  %209 = bitcast i8* %205 to double*
  store double %208, double* %209, align 1, !tbaa !2452
  %210 = getelementptr inbounds i8, i8* %205, i64 8
  %211 = bitcast i8* %210 to double*
  store double 0.000000e+00, double* %211, align 1, !tbaa !2452
  %212 = load i64, i64* %RBP
  %213 = sub i64 %212, 56
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 8
  store i64 %215, i64* %PC
  %216 = inttoptr i64 %213 to i64*
  store i64 15625, i64* %216
  %217 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %218 = load i64, i64* %RBP
  %219 = sub i64 %218, 56
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 6
  store i64 %221, i64* %PC
  %222 = inttoptr i64 %219 to i64*
  %223 = load i64, i64* %222
  %224 = sitofp i64 %223 to double
  %225 = bitcast i8* %217 to double*
  store double %224, double* %225, align 1, !tbaa !2452
  %226 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %227 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %228 = bitcast %union.vec128_t* %XMM7 to i8*
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC
  %231 = bitcast i8* %227 to double*
  %232 = load double, double* %231, align 1
  %233 = getelementptr inbounds i8, i8* %227, i64 8
  %234 = bitcast i8* %233 to i64*
  %235 = load i64, i64* %234, align 1
  %236 = bitcast i8* %228 to double*
  %237 = load double, double* %236, align 1
  %238 = fdiv double %232, %237
  %239 = bitcast i8* %226 to double*
  store double %238, double* %239, align 1, !tbaa !2452
  %240 = getelementptr inbounds i8, i8* %226, i64 8
  %241 = bitcast i8* %240 to i64*
  store i64 %235, i64* %241, align 1, !tbaa !2452
  %242 = bitcast %union.vec128_t* %XMM6 to i8*
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 9
  store i64 %244, i64* %PC
  %245 = bitcast i8* %242 to double*
  %246 = load double, double* %245, align 1
  store double %246, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %247 = bitcast %union.vec128_t* %XMM4 to i8*
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 9
  store i64 %249, i64* %PC
  %250 = bitcast i8* %247 to double*
  %251 = load double, double* %250, align 1
  store double %251, double* bitcast (%TLimit_type* @TLimit to double*)
  %252 = load i64, i64* %RBP
  %253 = sub i64 %252, 64
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 8
  store i64 %255, i64* %PC
  %256 = inttoptr i64 %253 to i64*
  store i64 512000000, i64* %256
  %257 = bitcast %union.vec128_t* %XMM5 to i8*
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 9
  store i64 %259, i64* %PC
  %260 = bitcast i8* %257 to double*
  %261 = load double, double* %260, align 1
  store double %261, double* bitcast (%piref_type* @piref to double*)
  %262 = bitcast %union.vec128_t* %XMM4 to i8*
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 9
  store i64 %264, i64* %PC
  %265 = bitcast i8* %262 to double*
  %266 = load double, double* %265, align 1
  store double %266, double* bitcast (%one_type* @one to double*)
  %267 = bitcast %union.vec128_t* %XMM3 to i8*
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 9
  store i64 %269, i64* %PC
  %270 = bitcast i8* %267 to double*
  %271 = load double, double* %270, align 1
  store double %271, double* bitcast (%two_type* @two to double*)
  %272 = bitcast %union.vec128_t* %XMM2 to i8*
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 9
  store i64 %274, i64* %PC
  %275 = bitcast i8* %272 to double*
  %276 = load double, double* %275, align 1
  store double %276, double* bitcast (%three_type* @three to double*)
  %277 = bitcast %union.vec128_t* %XMM1 to i8*
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 9
  store i64 %279, i64* %PC
  %280 = bitcast i8* %277 to double*
  %281 = load double, double* %280, align 1
  store double %281, double* bitcast (%four_type* @four to double*)
  %282 = bitcast %union.vec128_t* %XMM0 to i8*
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 9
  store i64 %284, i64* %PC
  %285 = bitcast i8* %282 to double*
  %286 = load double, double* %285, align 1
  store double %286, double* bitcast (%five_type* @five to double*)
  %287 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 9
  store i64 %289, i64* %PC
  %290 = load double, double* bitcast (%one_type* @one to double*)
  %291 = bitcast i8* %287 to double*
  store double %290, double* %291, align 1, !tbaa !2452
  %292 = getelementptr inbounds i8, i8* %287, i64 8
  %293 = bitcast i8* %292 to double*
  store double 0.000000e+00, double* %293, align 1, !tbaa !2452
  %294 = bitcast %union.vec128_t* %XMM0 to i8*
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 9
  store i64 %296, i64* %PC
  %297 = bitcast i8* %294 to double*
  %298 = load double, double* %297, align 1
  store double %298, double* bitcast (%scale_type* @scale to double*)
  %299 = load i64, i64* %RBP
  %300 = sub i64 %299, 96
  %301 = load i32, i32* %EAX
  %302 = zext i32 %301 to i64
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 3
  store i64 %304, i64* %PC
  %305 = inttoptr i64 %300 to i32*
  store i32 %301, i32* %305
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 2
  store i64 %307, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %308 = load i64, i64* %PC
  %309 = sub i64 %308, 514
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 5
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 5
  store i64 %313, i64* %PC
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %315 = load i64, i64* %314, align 8, !tbaa !2428
  %316 = add i64 %315, -8
  %317 = inttoptr i64 %316 to i64*
  store i64 %311, i64* %317
  store i64 %316, i64* %314, align 8, !tbaa !2428
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %309, i64* %318, align 8, !tbaa !2428
  %319 = load i64, i64* %PC
  %320 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %319, %struct.Memory* %160)
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 10
  store i64 %322, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 354), i64* %RDI, align 8, !tbaa !2428
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 100
  %325 = load i32, i32* %EAX
  %326 = zext i32 %325 to i64
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 3
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %324 to i32*
  store i32 %325, i32* %329
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 2
  store i64 %331, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %332 = load i64, i64* %PC
  %333 = sub i64 %332, 534
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 5
  store i64 %337, i64* %PC
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %339 = load i64, i64* %338, align 8, !tbaa !2428
  %340 = add i64 %339, -8
  %341 = inttoptr i64 %340 to i64*
  store i64 %335, i64* %341
  store i64 %340, i64* %338, align 8, !tbaa !2428
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %333, i64* %342, align 8, !tbaa !2428
  %343 = load i64, i64* %PC
  %344 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %343, %struct.Memory* %320)
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 10
  store i64 %346, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %347 = load i64, i64* %RBP
  %348 = sub i64 %347, 104
  %349 = load i32, i32* %EAX
  %350 = zext i32 %349 to i64
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 3
  store i64 %352, i64* %PC
  %353 = inttoptr i64 %348 to i32*
  store i32 %349, i32* %353
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 8040
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 5
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 5
  store i64 %359, i64* %PC
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %361 = load i64, i64* %360, align 8, !tbaa !2428
  %362 = add i64 %361, -8
  %363 = inttoptr i64 %362 to i64*
  store i64 %357, i64* %363
  store i64 %362, i64* %360, align 8, !tbaa !2428
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %355, i64* %364, align 8, !tbaa !2428
  %365 = load i64, i64* %PC
  %366 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %365, %struct.Memory* %344)
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 10
  store i64 %368, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %369 = load i64, i64* %RBP
  %370 = sub i64 %369, 108
  %371 = load i32, i32* %EAX
  %372 = zext i32 %371 to i64
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 3
  store i64 %374, i64* %PC
  %375 = inttoptr i64 %370 to i32*
  store i32 %371, i32* %375
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 8022
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 5
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 5
  store i64 %381, i64* %PC
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %383 = load i64, i64* %382, align 8, !tbaa !2428
  %384 = add i64 %383, -8
  %385 = inttoptr i64 %384 to i64*
  store i64 %379, i64* %385
  store i64 %384, i64* %382, align 8, !tbaa !2428
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %377, i64* %386, align 8, !tbaa !2428
  %387 = load i64, i64* %PC
  %388 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %387, %struct.Memory* %366)
  %389 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %390 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %391 = bitcast %union.vec128_t* %XMM0 to i8*
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 3
  store i64 %393, i64* %PC
  %394 = bitcast i8* %390 to i64*
  %395 = load i64, i64* %394, align 1
  %396 = getelementptr inbounds i8, i8* %390, i64 8
  %397 = bitcast i8* %396 to i64*
  %398 = load i64, i64* %397, align 1
  %399 = bitcast i8* %391 to i64*
  %400 = load i64, i64* %399, align 1
  %401 = getelementptr inbounds i8, i8* %391, i64 8
  %402 = bitcast i8* %401 to i64*
  %403 = load i64, i64* %402, align 1
  %404 = xor i64 %400, %395
  %405 = xor i64 %403, %398
  %406 = trunc i64 %404 to i32
  %407 = lshr i64 %404, 32
  %408 = trunc i64 %407 to i32
  %409 = bitcast i8* %389 to i32*
  store i32 %406, i32* %409, align 1, !tbaa !2454
  %410 = getelementptr inbounds i8, i8* %389, i64 4
  %411 = bitcast i8* %410 to i32*
  store i32 %408, i32* %411, align 1, !tbaa !2454
  %412 = trunc i64 %405 to i32
  %413 = getelementptr inbounds i8, i8* %389, i64 8
  %414 = bitcast i8* %413 to i32*
  store i32 %412, i32* %414, align 1, !tbaa !2454
  %415 = lshr i64 %405, 32
  %416 = trunc i64 %415 to i32
  %417 = getelementptr inbounds i8, i8* %389, i64 12
  %418 = bitcast i8* %417 to i32*
  store i32 %416, i32* %418, align 1, !tbaa !2454
  %419 = load i64, i64* %RBP
  %420 = sub i64 %419, 56
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 4
  store i64 %422, i64* %PC
  %423 = inttoptr i64 %420 to i64*
  %424 = load i64, i64* %423
  store i64 %424, i64* %RDI, align 8, !tbaa !2428
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 88
  %427 = load i64, i64* %RDI
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 4
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %426 to i64*
  store i64 %427, i64* %430
  %431 = bitcast %union.vec128_t* %XMM0 to i8*
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 9
  store i64 %433, i64* %PC
  %434 = bitcast i8* %431 to double*
  %435 = load double, double* %434, align 1
  store double %435, double* bitcast (%sa_type* @sa to double*)
  %436 = load i64, i64* %RBP
  %437 = sub i64 %436, 112
  %438 = load i32, i32* %EAX
  %439 = zext i32 %438 to i64
  %440 = load i64, i64* %PC
  %441 = add i64 %440, 3
  store i64 %441, i64* %PC
  %442 = inttoptr i64 %437 to i32*
  store i32 %438, i32* %442
  br label %block_4006a6

block_4020bb:                                     ; preds = %block_401f82
  %443 = load i64, i64* %PC
  %444 = add i64 %443, 10
  store i64 %444, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %445 = load i64, i64* %PC
  %446 = add i64 %445, 1307
  %447 = load i64, i64* %PC
  %448 = add i64 %447, 5
  %449 = load i64, i64* %PC
  %450 = add i64 %449, 5
  store i64 %450, i64* %PC
  %451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %452 = load i64, i64* %451, align 8, !tbaa !2428
  %453 = add i64 %452, -8
  %454 = inttoptr i64 %453 to i64*
  store i64 %448, i64* %454
  store i64 %453, i64* %451, align 8, !tbaa !2428
  %455 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %446, i64* %455, align 8, !tbaa !2428
  %456 = load i64, i64* %PC
  %457 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %456, %struct.Memory* %MEMORY.13)
  %458 = load i64, i64* %PC
  %459 = add i64 %458, 10
  store i64 %459, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 642), i64* %RDI, align 8, !tbaa !2428
  %460 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 8
  store i64 %462, i64* %PC
  %463 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 72) to double*)
  %464 = bitcast i8* %460 to double*
  store double %463, double* %464, align 1, !tbaa !2452
  %465 = getelementptr inbounds i8, i8* %460, i64 8
  %466 = bitcast i8* %465 to double*
  store double 0.000000e+00, double* %466, align 1, !tbaa !2452
  %467 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %468 = load i64, i64* %PC
  %469 = add i64 %468, 8
  store i64 %469, i64* %PC
  %470 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 224) to double*)
  %471 = bitcast i8* %467 to double*
  store double %470, double* %471, align 1, !tbaa !2452
  %472 = getelementptr inbounds i8, i8* %467, i64 8
  %473 = bitcast i8* %472 to double*
  store double 0.000000e+00, double* %473, align 1, !tbaa !2452
  %474 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %475 = load i64, i64* %PC
  %476 = add i64 %475, 8
  store i64 %476, i64* %PC
  %477 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 232) to double*)
  %478 = bitcast i8* %474 to double*
  store double %477, double* %478, align 1, !tbaa !2452
  %479 = getelementptr inbounds i8, i8* %474, i64 8
  %480 = bitcast i8* %479 to double*
  store double 0.000000e+00, double* %480, align 1, !tbaa !2452
  %481 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 9
  store i64 %483, i64* %PC
  %484 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %485 = bitcast i8* %481 to double*
  store double %484, double* %485, align 1, !tbaa !2452
  %486 = getelementptr inbounds i8, i8* %481, i64 8
  %487 = bitcast i8* %486 to double*
  store double 0.000000e+00, double* %487, align 1, !tbaa !2452
  %488 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %489 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %490 = load i64, i64* %PC
  %491 = add i64 %490, 9
  store i64 %491, i64* %PC
  %492 = bitcast i8* %489 to double*
  %493 = load double, double* %492, align 1
  %494 = getelementptr inbounds i8, i8* %489, i64 8
  %495 = bitcast i8* %494 to i64*
  %496 = load i64, i64* %495, align 1
  %497 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %498 = fmul double %493, %497
  %499 = bitcast i8* %488 to double*
  store double %498, double* %499, align 1, !tbaa !2452
  %500 = getelementptr inbounds i8, i8* %488, i64 8
  %501 = bitcast i8* %500 to i64*
  store i64 %496, i64* %501, align 1, !tbaa !2452
  %502 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %503 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %504 = load i64, i64* %PC
  %505 = add i64 %504, 9
  store i64 %505, i64* %PC
  %506 = bitcast i8* %503 to double*
  %507 = load double, double* %506, align 1
  %508 = getelementptr inbounds i8, i8* %503, i64 8
  %509 = bitcast i8* %508 to i64*
  %510 = load i64, i64* %509, align 1
  %511 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %512 = fsub double %507, %511
  %513 = bitcast i8* %502 to double*
  store double %512, double* %513, align 1, !tbaa !2452
  %514 = getelementptr inbounds i8, i8* %502, i64 8
  %515 = bitcast i8* %514 to i64*
  store i64 %510, i64* %515, align 1, !tbaa !2452
  %516 = bitcast %union.vec128_t* %XMM3 to i8*
  %517 = load i64, i64* %PC
  %518 = add i64 %517, 9
  store i64 %518, i64* %PC
  %519 = bitcast i8* %516 to double*
  %520 = load double, double* %519, align 1
  store double %520, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 192) to double*)
  %521 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %522 = load i64, i64* %PC
  %523 = add i64 %522, 9
  store i64 %523, i64* %PC
  %524 = load double, double* bitcast (%piref_type* @piref to double*)
  %525 = bitcast i8* %521 to double*
  store double %524, double* %525, align 1, !tbaa !2452
  %526 = getelementptr inbounds i8, i8* %521, i64 8
  %527 = bitcast i8* %526 to double*
  store double 0.000000e+00, double* %527, align 1, !tbaa !2452
  %528 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %529 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %530 = load i64, i64* %PC
  %531 = add i64 %530, 9
  store i64 %531, i64* %PC
  %532 = bitcast i8* %529 to double*
  %533 = load double, double* %532, align 1
  %534 = getelementptr inbounds i8, i8* %529, i64 8
  %535 = bitcast i8* %534 to i64*
  %536 = load i64, i64* %535, align 1
  %537 = load double, double* bitcast (%three_type* @three to double*)
  %538 = fdiv double %533, %537
  %539 = bitcast i8* %528 to double*
  store double %538, double* %539, align 1, !tbaa !2452
  %540 = getelementptr inbounds i8, i8* %528, i64 8
  %541 = bitcast i8* %540 to i64*
  store i64 %536, i64* %541, align 1, !tbaa !2452
  %542 = load i64, i64* %RBP
  %543 = sub i64 %542, 24
  %544 = bitcast %union.vec128_t* %XMM3 to i8*
  %545 = load i64, i64* %PC
  %546 = add i64 %545, 5
  store i64 %546, i64* %PC
  %547 = bitcast i8* %544 to double*
  %548 = load double, double* %547, align 1
  %549 = inttoptr i64 %543 to double*
  store double %548, double* %549
  %550 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %551 = load i64, i64* %RBP
  %552 = sub i64 %551, 24
  %553 = load i64, i64* %PC
  %554 = add i64 %553, 5
  store i64 %554, i64* %PC
  %555 = inttoptr i64 %552 to double*
  %556 = load double, double* %555
  %557 = bitcast i8* %550 to double*
  store double %556, double* %557, align 1, !tbaa !2452
  %558 = getelementptr inbounds i8, i8* %550, i64 8
  %559 = bitcast i8* %558 to double*
  store double 0.000000e+00, double* %559, align 1, !tbaa !2452
  %560 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %561 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %562 = load i64, i64* %RBP
  %563 = sub i64 %562, 24
  %564 = load i64, i64* %PC
  %565 = add i64 %564, 5
  store i64 %565, i64* %PC
  %566 = bitcast i8* %561 to double*
  %567 = load double, double* %566, align 1
  %568 = getelementptr inbounds i8, i8* %561, i64 8
  %569 = bitcast i8* %568 to i64*
  %570 = load i64, i64* %569, align 1
  %571 = inttoptr i64 %563 to double*
  %572 = load double, double* %571
  %573 = fmul double %567, %572
  %574 = bitcast i8* %560 to double*
  store double %573, double* %574, align 1, !tbaa !2452
  %575 = getelementptr inbounds i8, i8* %560, i64 8
  %576 = bitcast i8* %575 to i64*
  store i64 %570, i64* %576, align 1, !tbaa !2452
  %577 = load i64, i64* %RBP
  %578 = sub i64 %577, 40
  %579 = bitcast %union.vec128_t* %XMM3 to i8*
  %580 = load i64, i64* %PC
  %581 = add i64 %580, 5
  store i64 %581, i64* %PC
  %582 = bitcast i8* %579 to double*
  %583 = load double, double* %582, align 1
  %584 = inttoptr i64 %578 to double*
  store double %583, double* %584
  %585 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %586 = load i64, i64* %RBP
  %587 = sub i64 %586, 24
  %588 = load i64, i64* %PC
  %589 = add i64 %588, 5
  store i64 %589, i64* %PC
  %590 = inttoptr i64 %587 to double*
  %591 = load double, double* %590
  %592 = bitcast i8* %585 to double*
  store double %591, double* %592, align 1, !tbaa !2452
  %593 = getelementptr inbounds i8, i8* %585, i64 8
  %594 = bitcast i8* %593 to double*
  store double 0.000000e+00, double* %594, align 1, !tbaa !2452
  %595 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %596 = load i64, i64* %PC
  %597 = add i64 %596, 9
  store i64 %597, i64* %PC
  %598 = load double, double* bitcast (%A6_type* @A6 to double*)
  %599 = bitcast i8* %595 to double*
  store double %598, double* %599, align 1, !tbaa !2452
  %600 = getelementptr inbounds i8, i8* %595, i64 8
  %601 = bitcast i8* %600 to double*
  store double 0.000000e+00, double* %601, align 1, !tbaa !2452
  %602 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %603 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %604 = load i64, i64* %RBP
  %605 = sub i64 %604, 40
  %606 = load i64, i64* %PC
  %607 = add i64 %606, 5
  store i64 %607, i64* %PC
  %608 = bitcast i8* %603 to double*
  %609 = load double, double* %608, align 1
  %610 = getelementptr inbounds i8, i8* %603, i64 8
  %611 = bitcast i8* %610 to i64*
  %612 = load i64, i64* %611, align 1
  %613 = inttoptr i64 %605 to double*
  %614 = load double, double* %613
  %615 = fmul double %609, %614
  %616 = bitcast i8* %602 to double*
  store double %615, double* %616, align 1, !tbaa !2452
  %617 = getelementptr inbounds i8, i8* %602, i64 8
  %618 = bitcast i8* %617 to i64*
  store i64 %612, i64* %618, align 1, !tbaa !2452
  %619 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %620 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %621 = load i64, i64* %PC
  %622 = add i64 %621, 9
  store i64 %622, i64* %PC
  %623 = bitcast i8* %620 to double*
  %624 = load double, double* %623, align 1
  %625 = getelementptr inbounds i8, i8* %620, i64 8
  %626 = bitcast i8* %625 to i64*
  %627 = load i64, i64* %626, align 1
  %628 = load double, double* bitcast (%A5_type* @A5 to double*)
  %629 = fadd double %624, %628
  %630 = bitcast i8* %619 to double*
  store double %629, double* %630, align 1, !tbaa !2452
  %631 = getelementptr inbounds i8, i8* %619, i64 8
  %632 = bitcast i8* %631 to i64*
  store i64 %627, i64* %632, align 1, !tbaa !2452
  %633 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %634 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %635 = load i64, i64* %RBP
  %636 = sub i64 %635, 40
  %637 = load i64, i64* %PC
  %638 = add i64 %637, 5
  store i64 %638, i64* %PC
  %639 = bitcast i8* %634 to double*
  %640 = load double, double* %639, align 1
  %641 = getelementptr inbounds i8, i8* %634, i64 8
  %642 = bitcast i8* %641 to i64*
  %643 = load i64, i64* %642, align 1
  %644 = inttoptr i64 %636 to double*
  %645 = load double, double* %644
  %646 = fmul double %640, %645
  %647 = bitcast i8* %633 to double*
  store double %646, double* %647, align 1, !tbaa !2452
  %648 = getelementptr inbounds i8, i8* %633, i64 8
  %649 = bitcast i8* %648 to i64*
  store i64 %643, i64* %649, align 1, !tbaa !2452
  %650 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %651 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %652 = load i64, i64* %PC
  %653 = add i64 %652, 9
  store i64 %653, i64* %PC
  %654 = bitcast i8* %651 to double*
  %655 = load double, double* %654, align 1
  %656 = getelementptr inbounds i8, i8* %651, i64 8
  %657 = bitcast i8* %656 to i64*
  %658 = load i64, i64* %657, align 1
  %659 = load double, double* bitcast (%A4_type* @A4 to double*)
  %660 = fadd double %655, %659
  %661 = bitcast i8* %650 to double*
  store double %660, double* %661, align 1, !tbaa !2452
  %662 = getelementptr inbounds i8, i8* %650, i64 8
  %663 = bitcast i8* %662 to i64*
  store i64 %658, i64* %663, align 1, !tbaa !2452
  %664 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %665 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %666 = load i64, i64* %RBP
  %667 = sub i64 %666, 40
  %668 = load i64, i64* %PC
  %669 = add i64 %668, 5
  store i64 %669, i64* %PC
  %670 = bitcast i8* %665 to double*
  %671 = load double, double* %670, align 1
  %672 = getelementptr inbounds i8, i8* %665, i64 8
  %673 = bitcast i8* %672 to i64*
  %674 = load i64, i64* %673, align 1
  %675 = inttoptr i64 %667 to double*
  %676 = load double, double* %675
  %677 = fmul double %671, %676
  %678 = bitcast i8* %664 to double*
  store double %677, double* %678, align 1, !tbaa !2452
  %679 = getelementptr inbounds i8, i8* %664, i64 8
  %680 = bitcast i8* %679 to i64*
  store i64 %674, i64* %680, align 1, !tbaa !2452
  %681 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %682 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %683 = load i64, i64* %PC
  %684 = add i64 %683, 9
  store i64 %684, i64* %PC
  %685 = bitcast i8* %682 to double*
  %686 = load double, double* %685, align 1
  %687 = getelementptr inbounds i8, i8* %682, i64 8
  %688 = bitcast i8* %687 to i64*
  %689 = load i64, i64* %688, align 1
  %690 = load double, double* bitcast (%A3_type* @A3 to double*)
  %691 = fadd double %686, %690
  %692 = bitcast i8* %681 to double*
  store double %691, double* %692, align 1, !tbaa !2452
  %693 = getelementptr inbounds i8, i8* %681, i64 8
  %694 = bitcast i8* %693 to i64*
  store i64 %689, i64* %694, align 1, !tbaa !2452
  %695 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %696 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %697 = load i64, i64* %RBP
  %698 = sub i64 %697, 40
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 5
  store i64 %700, i64* %PC
  %701 = bitcast i8* %696 to double*
  %702 = load double, double* %701, align 1
  %703 = getelementptr inbounds i8, i8* %696, i64 8
  %704 = bitcast i8* %703 to i64*
  %705 = load i64, i64* %704, align 1
  %706 = inttoptr i64 %698 to double*
  %707 = load double, double* %706
  %708 = fmul double %702, %707
  %709 = bitcast i8* %695 to double*
  store double %708, double* %709, align 1, !tbaa !2452
  %710 = getelementptr inbounds i8, i8* %695, i64 8
  %711 = bitcast i8* %710 to i64*
  store i64 %705, i64* %711, align 1, !tbaa !2452
  %712 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %713 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %714 = load i64, i64* %PC
  %715 = add i64 %714, 9
  store i64 %715, i64* %PC
  %716 = bitcast i8* %713 to double*
  %717 = load double, double* %716, align 1
  %718 = getelementptr inbounds i8, i8* %713, i64 8
  %719 = bitcast i8* %718 to i64*
  %720 = load i64, i64* %719, align 1
  %721 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %722 = fadd double %717, %721
  %723 = bitcast i8* %712 to double*
  store double %722, double* %723, align 1, !tbaa !2452
  %724 = getelementptr inbounds i8, i8* %712, i64 8
  %725 = bitcast i8* %724 to i64*
  store i64 %720, i64* %725, align 1, !tbaa !2452
  %726 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %727 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %728 = load i64, i64* %RBP
  %729 = sub i64 %728, 40
  %730 = load i64, i64* %PC
  %731 = add i64 %730, 5
  store i64 %731, i64* %PC
  %732 = bitcast i8* %727 to double*
  %733 = load double, double* %732, align 1
  %734 = getelementptr inbounds i8, i8* %727, i64 8
  %735 = bitcast i8* %734 to i64*
  %736 = load i64, i64* %735, align 1
  %737 = inttoptr i64 %729 to double*
  %738 = load double, double* %737
  %739 = fmul double %733, %738
  %740 = bitcast i8* %726 to double*
  store double %739, double* %740, align 1, !tbaa !2452
  %741 = getelementptr inbounds i8, i8* %726, i64 8
  %742 = bitcast i8* %741 to i64*
  store i64 %736, i64* %742, align 1, !tbaa !2452
  %743 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %744 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %745 = load i64, i64* %PC
  %746 = add i64 %745, 9
  store i64 %746, i64* %PC
  %747 = bitcast i8* %744 to double*
  %748 = load double, double* %747, align 1
  %749 = getelementptr inbounds i8, i8* %744, i64 8
  %750 = bitcast i8* %749 to i64*
  %751 = load i64, i64* %750, align 1
  %752 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %753 = fadd double %748, %752
  %754 = bitcast i8* %743 to double*
  store double %753, double* %754, align 1, !tbaa !2452
  %755 = getelementptr inbounds i8, i8* %743, i64 8
  %756 = bitcast i8* %755 to i64*
  store i64 %751, i64* %756, align 1, !tbaa !2452
  %757 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %758 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %759 = load i64, i64* %RBP
  %760 = sub i64 %759, 40
  %761 = load i64, i64* %PC
  %762 = add i64 %761, 5
  store i64 %762, i64* %PC
  %763 = bitcast i8* %758 to double*
  %764 = load double, double* %763, align 1
  %765 = getelementptr inbounds i8, i8* %758, i64 8
  %766 = bitcast i8* %765 to i64*
  %767 = load i64, i64* %766, align 1
  %768 = inttoptr i64 %760 to double*
  %769 = load double, double* %768
  %770 = fmul double %764, %769
  %771 = bitcast i8* %757 to double*
  store double %770, double* %771, align 1, !tbaa !2452
  %772 = getelementptr inbounds i8, i8* %757, i64 8
  %773 = bitcast i8* %772 to i64*
  store i64 %767, i64* %773, align 1, !tbaa !2452
  %774 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %775 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %776 = load i64, i64* %PC
  %777 = add i64 %776, 9
  store i64 %777, i64* %PC
  %778 = bitcast i8* %775 to double*
  %779 = load double, double* %778, align 1
  %780 = getelementptr inbounds i8, i8* %775, i64 8
  %781 = bitcast i8* %780 to i64*
  %782 = load i64, i64* %781, align 1
  %783 = load double, double* bitcast (%one_type* @one to double*)
  %784 = fadd double %779, %783
  %785 = bitcast i8* %774 to double*
  store double %784, double* %785, align 1, !tbaa !2452
  %786 = getelementptr inbounds i8, i8* %774, i64 8
  %787 = bitcast i8* %786 to i64*
  store i64 %782, i64* %787, align 1, !tbaa !2452
  %788 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %789 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %790 = bitcast %union.vec128_t* %XMM4 to i8*
  %791 = load i64, i64* %PC
  %792 = add i64 %791, 4
  store i64 %792, i64* %PC
  %793 = bitcast i8* %789 to double*
  %794 = load double, double* %793, align 1
  %795 = getelementptr inbounds i8, i8* %789, i64 8
  %796 = bitcast i8* %795 to i64*
  %797 = load i64, i64* %796, align 1
  %798 = bitcast i8* %790 to double*
  %799 = load double, double* %798, align 1
  %800 = fmul double %794, %799
  %801 = bitcast i8* %788 to double*
  store double %800, double* %801, align 1, !tbaa !2452
  %802 = getelementptr inbounds i8, i8* %788, i64 8
  %803 = bitcast i8* %802 to i64*
  store i64 %797, i64* %803, align 1, !tbaa !2452
  %804 = bitcast %union.vec128_t* %XMM3 to i8*
  %805 = load i64, i64* %PC
  %806 = add i64 %805, 9
  store i64 %806, i64* %PC
  %807 = bitcast i8* %804 to double*
  %808 = load double, double* %807, align 1
  store double %808, double* bitcast (%sa_type* @sa to double*)
  %809 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %810 = load i64, i64* %RBP
  %811 = sub i64 %810, 40
  %812 = load i64, i64* %PC
  %813 = add i64 %812, 5
  store i64 %813, i64* %PC
  %814 = inttoptr i64 %811 to double*
  %815 = load double, double* %814
  %816 = bitcast i8* %809 to double*
  store double %815, double* %816, align 1, !tbaa !2452
  %817 = getelementptr inbounds i8, i8* %809, i64 8
  %818 = bitcast i8* %817 to double*
  store double 0.000000e+00, double* %818, align 1, !tbaa !2452
  %819 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %820 = load i64, i64* %RBP
  %821 = sub i64 %820, 40
  %822 = load i64, i64* %PC
  %823 = add i64 %822, 5
  store i64 %823, i64* %PC
  %824 = inttoptr i64 %821 to double*
  %825 = load double, double* %824
  %826 = bitcast i8* %819 to double*
  store double %825, double* %826, align 1, !tbaa !2452
  %827 = getelementptr inbounds i8, i8* %819, i64 8
  %828 = bitcast i8* %827 to double*
  store double 0.000000e+00, double* %828, align 1, !tbaa !2452
  %829 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %830 = load i64, i64* %RBP
  %831 = sub i64 %830, 40
  %832 = load i64, i64* %PC
  %833 = add i64 %832, 5
  store i64 %833, i64* %PC
  %834 = inttoptr i64 %831 to double*
  %835 = load double, double* %834
  %836 = bitcast i8* %829 to double*
  store double %835, double* %836, align 1, !tbaa !2452
  %837 = getelementptr inbounds i8, i8* %829, i64 8
  %838 = bitcast i8* %837 to double*
  store double 0.000000e+00, double* %838, align 1, !tbaa !2452
  %839 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %840 = load i64, i64* %RBP
  %841 = sub i64 %840, 40
  %842 = load i64, i64* %PC
  %843 = add i64 %842, 5
  store i64 %843, i64* %PC
  %844 = inttoptr i64 %841 to double*
  %845 = load double, double* %844
  %846 = bitcast i8* %839 to double*
  store double %845, double* %846, align 1, !tbaa !2452
  %847 = getelementptr inbounds i8, i8* %839, i64 8
  %848 = bitcast i8* %847 to double*
  store double 0.000000e+00, double* %848, align 1, !tbaa !2452
  %849 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %850 = load i64, i64* %RBP
  %851 = sub i64 %850, 40
  %852 = load i64, i64* %PC
  %853 = add i64 %852, 5
  store i64 %853, i64* %PC
  %854 = inttoptr i64 %851 to double*
  %855 = load double, double* %854
  %856 = bitcast i8* %849 to double*
  store double %855, double* %856, align 1, !tbaa !2452
  %857 = getelementptr inbounds i8, i8* %849, i64 8
  %858 = bitcast i8* %857 to double*
  store double 0.000000e+00, double* %858, align 1, !tbaa !2452
  %859 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %860 = load i64, i64* %PC
  %861 = add i64 %860, 10
  store i64 %861, i64* %PC
  %862 = load double, double* bitcast (%B6_type* @B6 to double*)
  %863 = bitcast i8* %859 to double*
  store double %862, double* %863, align 1, !tbaa !2452
  %864 = getelementptr inbounds i8, i8* %859, i64 8
  %865 = bitcast i8* %864 to double*
  store double 0.000000e+00, double* %865, align 1, !tbaa !2452
  %866 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %867 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %868 = load i64, i64* %RBP
  %869 = sub i64 %868, 40
  %870 = load i64, i64* %PC
  %871 = add i64 %870, 6
  store i64 %871, i64* %PC
  %872 = bitcast i8* %867 to double*
  %873 = load double, double* %872, align 1
  %874 = getelementptr inbounds i8, i8* %867, i64 8
  %875 = bitcast i8* %874 to i64*
  %876 = load i64, i64* %875, align 1
  %877 = inttoptr i64 %869 to double*
  %878 = load double, double* %877
  %879 = fmul double %873, %878
  %880 = bitcast i8* %866 to double*
  store double %879, double* %880, align 1, !tbaa !2452
  %881 = getelementptr inbounds i8, i8* %866, i64 8
  %882 = bitcast i8* %881 to i64*
  store i64 %876, i64* %882, align 1, !tbaa !2452
  %883 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %884 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %885 = load i64, i64* %PC
  %886 = add i64 %885, 10
  store i64 %886, i64* %PC
  %887 = bitcast i8* %884 to double*
  %888 = load double, double* %887, align 1
  %889 = getelementptr inbounds i8, i8* %884, i64 8
  %890 = bitcast i8* %889 to i64*
  %891 = load i64, i64* %890, align 1
  %892 = load double, double* bitcast (%B5_type* @B5 to double*)
  %893 = fadd double %888, %892
  %894 = bitcast i8* %883 to double*
  store double %893, double* %894, align 1, !tbaa !2452
  %895 = getelementptr inbounds i8, i8* %883, i64 8
  %896 = bitcast i8* %895 to i64*
  store i64 %891, i64* %896, align 1, !tbaa !2452
  %897 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %898 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %899 = bitcast %union.vec128_t* %XMM8 to i8*
  %900 = load i64, i64* %PC
  %901 = add i64 %900, 5
  store i64 %901, i64* %PC
  %902 = bitcast i8* %898 to double*
  %903 = load double, double* %902, align 1
  %904 = getelementptr inbounds i8, i8* %898, i64 8
  %905 = bitcast i8* %904 to i64*
  %906 = load i64, i64* %905, align 1
  %907 = bitcast i8* %899 to double*
  %908 = load double, double* %907, align 1
  %909 = fmul double %903, %908
  %910 = bitcast i8* %897 to double*
  store double %909, double* %910, align 1, !tbaa !2452
  %911 = getelementptr inbounds i8, i8* %897, i64 8
  %912 = bitcast i8* %911 to i64*
  store i64 %906, i64* %912, align 1, !tbaa !2452
  %913 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %914 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %915 = load i64, i64* %PC
  %916 = add i64 %915, 9
  store i64 %916, i64* %PC
  %917 = bitcast i8* %914 to double*
  %918 = load double, double* %917, align 1
  %919 = getelementptr inbounds i8, i8* %914, i64 8
  %920 = bitcast i8* %919 to i64*
  %921 = load i64, i64* %920, align 1
  %922 = load double, double* bitcast (%B4_type* @B4 to double*)
  %923 = fadd double %918, %922
  %924 = bitcast i8* %913 to double*
  store double %923, double* %924, align 1, !tbaa !2452
  %925 = getelementptr inbounds i8, i8* %913, i64 8
  %926 = bitcast i8* %925 to i64*
  store i64 %921, i64* %926, align 1, !tbaa !2452
  %927 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %928 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %929 = bitcast %union.vec128_t* %XMM7 to i8*
  %930 = load i64, i64* %PC
  %931 = add i64 %930, 4
  store i64 %931, i64* %PC
  %932 = bitcast i8* %928 to double*
  %933 = load double, double* %932, align 1
  %934 = getelementptr inbounds i8, i8* %928, i64 8
  %935 = bitcast i8* %934 to i64*
  %936 = load i64, i64* %935, align 1
  %937 = bitcast i8* %929 to double*
  %938 = load double, double* %937, align 1
  %939 = fmul double %933, %938
  %940 = bitcast i8* %927 to double*
  store double %939, double* %940, align 1, !tbaa !2452
  %941 = getelementptr inbounds i8, i8* %927, i64 8
  %942 = bitcast i8* %941 to i64*
  store i64 %936, i64* %942, align 1, !tbaa !2452
  %943 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %944 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %945 = load i64, i64* %PC
  %946 = add i64 %945, 9
  store i64 %946, i64* %PC
  %947 = bitcast i8* %944 to double*
  %948 = load double, double* %947, align 1
  %949 = getelementptr inbounds i8, i8* %944, i64 8
  %950 = bitcast i8* %949 to i64*
  %951 = load i64, i64* %950, align 1
  %952 = load double, double* bitcast (%B3_type* @B3 to double*)
  %953 = fadd double %948, %952
  %954 = bitcast i8* %943 to double*
  store double %953, double* %954, align 1, !tbaa !2452
  %955 = getelementptr inbounds i8, i8* %943, i64 8
  %956 = bitcast i8* %955 to i64*
  store i64 %951, i64* %956, align 1, !tbaa !2452
  %957 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %958 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %959 = bitcast %union.vec128_t* %XMM6 to i8*
  %960 = load i64, i64* %PC
  %961 = add i64 %960, 4
  store i64 %961, i64* %PC
  %962 = bitcast i8* %958 to double*
  %963 = load double, double* %962, align 1
  %964 = getelementptr inbounds i8, i8* %958, i64 8
  %965 = bitcast i8* %964 to i64*
  %966 = load i64, i64* %965, align 1
  %967 = bitcast i8* %959 to double*
  %968 = load double, double* %967, align 1
  %969 = fmul double %963, %968
  %970 = bitcast i8* %957 to double*
  store double %969, double* %970, align 1, !tbaa !2452
  %971 = getelementptr inbounds i8, i8* %957, i64 8
  %972 = bitcast i8* %971 to i64*
  store i64 %966, i64* %972, align 1, !tbaa !2452
  %973 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %974 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %975 = load i64, i64* %PC
  %976 = add i64 %975, 9
  store i64 %976, i64* %PC
  %977 = bitcast i8* %974 to double*
  %978 = load double, double* %977, align 1
  %979 = getelementptr inbounds i8, i8* %974, i64 8
  %980 = bitcast i8* %979 to i64*
  %981 = load i64, i64* %980, align 1
  %982 = load double, double* bitcast (%B2_type* @B2 to double*)
  %983 = fadd double %978, %982
  %984 = bitcast i8* %973 to double*
  store double %983, double* %984, align 1, !tbaa !2452
  %985 = getelementptr inbounds i8, i8* %973, i64 8
  %986 = bitcast i8* %985 to i64*
  store i64 %981, i64* %986, align 1, !tbaa !2452
  %987 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %988 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %989 = bitcast %union.vec128_t* %XMM5 to i8*
  %990 = load i64, i64* %PC
  %991 = add i64 %990, 4
  store i64 %991, i64* %PC
  %992 = bitcast i8* %988 to double*
  %993 = load double, double* %992, align 1
  %994 = getelementptr inbounds i8, i8* %988, i64 8
  %995 = bitcast i8* %994 to i64*
  %996 = load i64, i64* %995, align 1
  %997 = bitcast i8* %989 to double*
  %998 = load double, double* %997, align 1
  %999 = fmul double %993, %998
  %1000 = bitcast i8* %987 to double*
  store double %999, double* %1000, align 1, !tbaa !2452
  %1001 = getelementptr inbounds i8, i8* %987, i64 8
  %1002 = bitcast i8* %1001 to i64*
  store i64 %996, i64* %1002, align 1, !tbaa !2452
  %1003 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1004 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1005 = load i64, i64* %PC
  %1006 = add i64 %1005, 9
  store i64 %1006, i64* %PC
  %1007 = bitcast i8* %1004 to double*
  %1008 = load double, double* %1007, align 1
  %1009 = getelementptr inbounds i8, i8* %1004, i64 8
  %1010 = bitcast i8* %1009 to i64*
  %1011 = load i64, i64* %1010, align 1
  %1012 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %1013 = fadd double %1008, %1012
  %1014 = bitcast i8* %1003 to double*
  store double %1013, double* %1014, align 1, !tbaa !2452
  %1015 = getelementptr inbounds i8, i8* %1003, i64 8
  %1016 = bitcast i8* %1015 to i64*
  store i64 %1011, i64* %1016, align 1, !tbaa !2452
  %1017 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1018 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1019 = bitcast %union.vec128_t* %XMM4 to i8*
  %1020 = load i64, i64* %PC
  %1021 = add i64 %1020, 4
  store i64 %1021, i64* %PC
  %1022 = bitcast i8* %1018 to double*
  %1023 = load double, double* %1022, align 1
  %1024 = getelementptr inbounds i8, i8* %1018, i64 8
  %1025 = bitcast i8* %1024 to i64*
  %1026 = load i64, i64* %1025, align 1
  %1027 = bitcast i8* %1019 to double*
  %1028 = load double, double* %1027, align 1
  %1029 = fmul double %1023, %1028
  %1030 = bitcast i8* %1017 to double*
  store double %1029, double* %1030, align 1, !tbaa !2452
  %1031 = getelementptr inbounds i8, i8* %1017, i64 8
  %1032 = bitcast i8* %1031 to i64*
  store i64 %1026, i64* %1032, align 1, !tbaa !2452
  %1033 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1034 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1035 = load i64, i64* %PC
  %1036 = add i64 %1035, 9
  store i64 %1036, i64* %PC
  %1037 = bitcast i8* %1034 to double*
  %1038 = load double, double* %1037, align 1
  %1039 = getelementptr inbounds i8, i8* %1034, i64 8
  %1040 = bitcast i8* %1039 to i64*
  %1041 = load i64, i64* %1040, align 1
  %1042 = load double, double* bitcast (%one_type* @one to double*)
  %1043 = fadd double %1038, %1042
  %1044 = bitcast i8* %1033 to double*
  store double %1043, double* %1044, align 1, !tbaa !2452
  %1045 = getelementptr inbounds i8, i8* %1033, i64 8
  %1046 = bitcast i8* %1045 to i64*
  store i64 %1041, i64* %1046, align 1, !tbaa !2452
  %1047 = bitcast %union.vec128_t* %XMM3 to i8*
  %1048 = load i64, i64* %PC
  %1049 = add i64 %1048, 9
  store i64 %1049, i64* %PC
  %1050 = bitcast i8* %1047 to double*
  %1051 = load double, double* %1050, align 1
  store double %1051, double* bitcast (%sb_type* @sb to double*)
  %1052 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1053 = load i64, i64* %PC
  %1054 = add i64 %1053, 9
  store i64 %1054, i64* %PC
  %1055 = load double, double* bitcast (%sa_type* @sa to double*)
  %1056 = bitcast i8* %1052 to double*
  store double %1055, double* %1056, align 1, !tbaa !2452
  %1057 = getelementptr inbounds i8, i8* %1052, i64 8
  %1058 = bitcast i8* %1057 to double*
  store double 0.000000e+00, double* %1058, align 1, !tbaa !2452
  %1059 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1060 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1061 = load i64, i64* %PC
  %1062 = add i64 %1061, 9
  store i64 %1062, i64* %PC
  %1063 = bitcast i8* %1060 to double*
  %1064 = load double, double* %1063, align 1
  %1065 = getelementptr inbounds i8, i8* %1060, i64 8
  %1066 = bitcast i8* %1065 to i64*
  %1067 = load i64, i64* %1066, align 1
  %1068 = load double, double* bitcast (%sb_type* @sb to double*)
  %1069 = fmul double %1064, %1068
  %1070 = bitcast i8* %1059 to double*
  store double %1069, double* %1070, align 1, !tbaa !2452
  %1071 = getelementptr inbounds i8, i8* %1059, i64 8
  %1072 = bitcast i8* %1071 to i64*
  store i64 %1067, i64* %1072, align 1, !tbaa !2452
  %1073 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1074 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1075 = load i64, i64* %PC
  %1076 = add i64 %1075, 9
  store i64 %1076, i64* %PC
  %1077 = bitcast i8* %1074 to double*
  %1078 = load double, double* %1077, align 1
  %1079 = getelementptr inbounds i8, i8* %1074, i64 8
  %1080 = bitcast i8* %1079 to i64*
  %1081 = load i64, i64* %1080, align 1
  %1082 = load double, double* bitcast (%sb_type* @sb to double*)
  %1083 = fmul double %1078, %1082
  %1084 = bitcast i8* %1073 to double*
  store double %1083, double* %1084, align 1, !tbaa !2452
  %1085 = getelementptr inbounds i8, i8* %1073, i64 8
  %1086 = bitcast i8* %1085 to i64*
  store i64 %1081, i64* %1086, align 1, !tbaa !2452
  %1087 = bitcast %union.vec128_t* %XMM3 to i8*
  %1088 = load i64, i64* %PC
  %1089 = add i64 %1088, 9
  store i64 %1089, i64* %PC
  %1090 = bitcast i8* %1087 to double*
  %1091 = load double, double* %1090, align 1
  store double %1091, double* bitcast (%sa_type* @sa to double*)
  %1092 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1093 = load i64, i64* %PC
  %1094 = add i64 %1093, 9
  store i64 %1094, i64* %PC
  %1095 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 192) to double*)
  %1096 = bitcast i8* %1092 to double*
  store double %1095, double* %1096, align 1, !tbaa !2452
  %1097 = getelementptr inbounds i8, i8* %1092, i64 8
  %1098 = bitcast i8* %1097 to double*
  store double 0.000000e+00, double* %1098, align 1, !tbaa !2452
  %1099 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1100 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1101 = bitcast %union.vec128_t* %XMM2 to i8*
  %1102 = load i64, i64* %PC
  %1103 = add i64 %1102, 4
  store i64 %1103, i64* %PC
  %1104 = bitcast i8* %1100 to double*
  %1105 = load double, double* %1104, align 1
  %1106 = getelementptr inbounds i8, i8* %1100, i64 8
  %1107 = bitcast i8* %1106 to i64*
  %1108 = load i64, i64* %1107, align 1
  %1109 = bitcast i8* %1101 to double*
  %1110 = load double, double* %1109, align 1
  %1111 = fdiv double %1105, %1110
  %1112 = bitcast i8* %1099 to double*
  store double %1111, double* %1112, align 1, !tbaa !2452
  %1113 = getelementptr inbounds i8, i8* %1099, i64 8
  %1114 = bitcast i8* %1113 to i64*
  store i64 %1108, i64* %1114, align 1, !tbaa !2452
  %1115 = bitcast %union.vec128_t* %XMM3 to i8*
  %1116 = load i64, i64* %PC
  %1117 = add i64 %1116, 9
  store i64 %1117, i64* %PC
  %1118 = bitcast i8* %1115 to double*
  %1119 = load double, double* %1118, align 1
  store double %1119, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 200) to double*)
  %1120 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1121 = load i64, i64* %RBP
  %1122 = sub i64 %1121, 48
  %1123 = load i64, i64* %PC
  %1124 = add i64 %1123, 5
  store i64 %1124, i64* %PC
  %1125 = inttoptr i64 %1122 to double*
  %1126 = load double, double* %1125
  %1127 = bitcast i8* %1120 to double*
  store double %1126, double* %1127, align 1, !tbaa !2452
  %1128 = getelementptr inbounds i8, i8* %1120, i64 8
  %1129 = bitcast i8* %1128 to double*
  store double 0.000000e+00, double* %1129, align 1, !tbaa !2452
  %1130 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1131 = load i64, i64* %PC
  %1132 = add i64 %1131, 9
  store i64 %1132, i64* %PC
  %1133 = load double, double* bitcast (%sa_type* @sa to double*)
  %1134 = bitcast i8* %1130 to double*
  store double %1133, double* %1134, align 1, !tbaa !2452
  %1135 = getelementptr inbounds i8, i8* %1130, i64 8
  %1136 = bitcast i8* %1135 to double*
  store double 0.000000e+00, double* %1136, align 1, !tbaa !2452
  %1137 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1138 = load i64, i64* %PC
  %1139 = add i64 %1138, 9
  store i64 %1139, i64* %PC
  %1140 = load double, double* bitcast (%two_type* @two to double*)
  %1141 = bitcast i8* %1137 to double*
  store double %1140, double* %1141, align 1, !tbaa !2452
  %1142 = getelementptr inbounds i8, i8* %1137, i64 8
  %1143 = bitcast i8* %1142 to double*
  store double 0.000000e+00, double* %1143, align 1, !tbaa !2452
  %1144 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1145 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1146 = load i64, i64* %RBP
  %1147 = sub i64 %1146, 16
  %1148 = load i64, i64* %PC
  %1149 = add i64 %1148, 5
  store i64 %1149, i64* %PC
  %1150 = bitcast i8* %1145 to double*
  %1151 = load double, double* %1150, align 1
  %1152 = getelementptr inbounds i8, i8* %1145, i64 8
  %1153 = bitcast i8* %1152 to i64*
  %1154 = load i64, i64* %1153, align 1
  %1155 = inttoptr i64 %1147 to double*
  %1156 = load double, double* %1155
  %1157 = fmul double %1151, %1156
  %1158 = bitcast i8* %1144 to double*
  store double %1157, double* %1158, align 1, !tbaa !2452
  %1159 = getelementptr inbounds i8, i8* %1144, i64 8
  %1160 = bitcast i8* %1159 to i64*
  store i64 %1154, i64* %1160, align 1, !tbaa !2452
  %1161 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1162 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1163 = bitcast %union.vec128_t* %XMM4 to i8*
  %1164 = load i64, i64* %PC
  %1165 = add i64 %1164, 4
  store i64 %1165, i64* %PC
  %1166 = bitcast i8* %1162 to double*
  %1167 = load double, double* %1166, align 1
  %1168 = getelementptr inbounds i8, i8* %1162, i64 8
  %1169 = bitcast i8* %1168 to i64*
  %1170 = load i64, i64* %1169, align 1
  %1171 = bitcast i8* %1163 to double*
  %1172 = load double, double* %1171, align 1
  %1173 = fadd double %1167, %1172
  %1174 = bitcast i8* %1161 to double*
  store double %1173, double* %1174, align 1, !tbaa !2452
  %1175 = getelementptr inbounds i8, i8* %1161, i64 8
  %1176 = bitcast i8* %1175 to i64*
  store i64 %1170, i64* %1176, align 1, !tbaa !2452
  %1177 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1178 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1179 = bitcast %union.vec128_t* %XMM3 to i8*
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 4
  store i64 %1181, i64* %PC
  %1182 = bitcast i8* %1178 to double*
  %1183 = load double, double* %1182, align 1
  %1184 = getelementptr inbounds i8, i8* %1178, i64 8
  %1185 = bitcast i8* %1184 to i64*
  %1186 = load i64, i64* %1185, align 1
  %1187 = bitcast i8* %1179 to double*
  %1188 = load double, double* %1187, align 1
  %1189 = fmul double %1183, %1188
  %1190 = bitcast i8* %1177 to double*
  store double %1189, double* %1190, align 1, !tbaa !2452
  %1191 = getelementptr inbounds i8, i8* %1177, i64 8
  %1192 = bitcast i8* %1191 to i64*
  store i64 %1186, i64* %1192, align 1, !tbaa !2452
  %1193 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1194 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1195 = load i64, i64* %PC
  %1196 = add i64 %1195, 9
  store i64 %1196, i64* %PC
  %1197 = bitcast i8* %1194 to double*
  %1198 = load double, double* %1197, align 1
  %1199 = getelementptr inbounds i8, i8* %1194, i64 8
  %1200 = bitcast i8* %1199 to i64*
  %1201 = load i64, i64* %1200, align 1
  %1202 = load double, double* bitcast (%two_type* @two to double*)
  %1203 = fdiv double %1198, %1202
  %1204 = bitcast i8* %1193 to double*
  store double %1203, double* %1204, align 1, !tbaa !2452
  %1205 = getelementptr inbounds i8, i8* %1193, i64 8
  %1206 = bitcast i8* %1205 to i64*
  store i64 %1201, i64* %1206, align 1, !tbaa !2452
  %1207 = bitcast %union.vec128_t* %XMM2 to i8*
  %1208 = load i64, i64* %PC
  %1209 = add i64 %1208, 9
  store i64 %1209, i64* %PC
  %1210 = bitcast i8* %1207 to double*
  %1211 = load double, double* %1210, align 1
  store double %1211, double* bitcast (%sa_type* @sa to double*)
  %1212 = bitcast %union.vec128_t* %XMM1 to i8*
  %1213 = load i64, i64* %PC
  %1214 = add i64 %1213, 9
  store i64 %1214, i64* %PC
  %1215 = bitcast i8* %1212 to double*
  %1216 = load double, double* %1215, align 1
  store double %1216, double* bitcast (%sb_type* @sb to double*)
  %1217 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1218 = load i64, i64* %PC
  %1219 = add i64 %1218, 9
  store i64 %1219, i64* %PC
  %1220 = load double, double* bitcast (%sa_type* @sa to double*)
  %1221 = bitcast i8* %1217 to double*
  store double %1220, double* %1221, align 1, !tbaa !2452
  %1222 = getelementptr inbounds i8, i8* %1217, i64 8
  %1223 = bitcast i8* %1222 to double*
  store double 0.000000e+00, double* %1223, align 1, !tbaa !2452
  %1224 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1225 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1226 = load i64, i64* %PC
  %1227 = add i64 %1226, 9
  store i64 %1227, i64* %PC
  %1228 = bitcast i8* %1225 to double*
  %1229 = load double, double* %1228, align 1
  %1230 = getelementptr inbounds i8, i8* %1225, i64 8
  %1231 = bitcast i8* %1230 to i64*
  %1232 = load i64, i64* %1231, align 1
  %1233 = load double, double* bitcast (%sb_type* @sb to double*)
  %1234 = fsub double %1229, %1233
  %1235 = bitcast i8* %1224 to double*
  store double %1234, double* %1235, align 1, !tbaa !2452
  %1236 = getelementptr inbounds i8, i8* %1224, i64 8
  %1237 = bitcast i8* %1236 to i64*
  store i64 %1232, i64* %1237, align 1, !tbaa !2452
  %1238 = bitcast %union.vec128_t* %XMM1 to i8*
  %1239 = load i64, i64* %PC
  %1240 = add i64 %1239, 9
  store i64 %1240, i64* %PC
  %1241 = bitcast i8* %1238 to double*
  %1242 = load double, double* %1241, align 1
  store double %1242, double* bitcast (%sc_type* @sc to double*)
  %1243 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1244 = load i64, i64* %PC
  %1245 = add i64 %1244, 9
  store i64 %1245, i64* %PC
  %1246 = load double, double* bitcast (%one_type* @one to double*)
  %1247 = bitcast i8* %1243 to double*
  store double %1246, double* %1247, align 1, !tbaa !2452
  %1248 = getelementptr inbounds i8, i8* %1243, i64 8
  %1249 = bitcast i8* %1248 to double*
  store double 0.000000e+00, double* %1249, align 1, !tbaa !2452
  %1250 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1251 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1252 = load i64, i64* %PC
  %1253 = add i64 %1252, 9
  store i64 %1253, i64* %PC
  %1254 = bitcast i8* %1251 to double*
  %1255 = load double, double* %1254, align 1
  %1256 = getelementptr inbounds i8, i8* %1251, i64 8
  %1257 = bitcast i8* %1256 to i64*
  %1258 = load i64, i64* %1257, align 1
  %1259 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 200) to double*)
  %1260 = fdiv double %1255, %1259
  %1261 = bitcast i8* %1250 to double*
  store double %1260, double* %1261, align 1, !tbaa !2452
  %1262 = getelementptr inbounds i8, i8* %1250, i64 8
  %1263 = bitcast i8* %1262 to i64*
  store i64 %1258, i64* %1263, align 1, !tbaa !2452
  %1264 = bitcast %union.vec128_t* %XMM1 to i8*
  %1265 = load i64, i64* %PC
  %1266 = add i64 %1265, 9
  store i64 %1266, i64* %PC
  %1267 = bitcast i8* %1264 to double*
  %1268 = load double, double* %1267, align 1
  store double %1268, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 208) to double*)
  %1269 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1270 = bitcast %union.vec128_t* %XMM0 to i8*
  %1271 = load i64, i64* %PC
  %1272 = add i64 %1271, 3
  store i64 %1272, i64* %PC
  %1273 = bitcast i8* %1270 to <2 x i32>*
  %1274 = load <2 x i32>, <2 x i32>* %1273, align 1
  %1275 = getelementptr inbounds i8, i8* %1270, i64 8
  %1276 = bitcast i8* %1275 to <2 x i32>*
  %1277 = load <2 x i32>, <2 x i32>* %1276, align 1
  %1278 = extractelement <2 x i32> %1274, i32 0
  %1279 = bitcast i8* %1269 to i32*
  store i32 %1278, i32* %1279, align 1, !tbaa !2455
  %1280 = extractelement <2 x i32> %1274, i32 1
  %1281 = getelementptr inbounds i8, i8* %1269, i64 4
  %1282 = bitcast i8* %1281 to i32*
  store i32 %1280, i32* %1282, align 1, !tbaa !2455
  %1283 = extractelement <2 x i32> %1277, i32 0
  %1284 = getelementptr inbounds i8, i8* %1269, i64 8
  %1285 = bitcast i8* %1284 to i32*
  store i32 %1283, i32* %1285, align 1, !tbaa !2455
  %1286 = extractelement <2 x i32> %1277, i32 1
  %1287 = getelementptr inbounds i8, i8* %1269, i64 12
  %1288 = bitcast i8* %1287 to i32*
  store i32 %1286, i32* %1288, align 1, !tbaa !2455
  %1289 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1290 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1291 = load i64, i64* %PC
  %1292 = add i64 %1291, 9
  store i64 %1292, i64* %PC
  %1293 = bitcast i8* %1290 to double*
  %1294 = load double, double* %1293, align 1
  %1295 = getelementptr inbounds i8, i8* %1290, i64 8
  %1296 = bitcast i8* %1295 to i64*
  %1297 = load i64, i64* %1296, align 1
  %1298 = load double, double* bitcast (%sc_type* @sc to double*)
  %1299 = fmul double %1294, %1298
  %1300 = bitcast i8* %1289 to double*
  store double %1299, double* %1300, align 1, !tbaa !2452
  %1301 = getelementptr inbounds i8, i8* %1289, i64 8
  %1302 = bitcast i8* %1301 to i64*
  store i64 %1297, i64* %1302, align 1, !tbaa !2452
  %1303 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1304 = bitcast %union.vec128_t* %XMM0 to i8*
  %1305 = load i64, i64* %PC
  %1306 = add i64 %1305, 3
  store i64 %1306, i64* %PC
  %1307 = bitcast i8* %1304 to <2 x i32>*
  %1308 = load <2 x i32>, <2 x i32>* %1307, align 1
  %1309 = getelementptr inbounds i8, i8* %1304, i64 8
  %1310 = bitcast i8* %1309 to <2 x i32>*
  %1311 = load <2 x i32>, <2 x i32>* %1310, align 1
  %1312 = extractelement <2 x i32> %1308, i32 0
  %1313 = bitcast i8* %1303 to i32*
  store i32 %1312, i32* %1313, align 1, !tbaa !2455
  %1314 = extractelement <2 x i32> %1308, i32 1
  %1315 = getelementptr inbounds i8, i8* %1303, i64 4
  %1316 = bitcast i8* %1315 to i32*
  store i32 %1314, i32* %1316, align 1, !tbaa !2455
  %1317 = extractelement <2 x i32> %1311, i32 0
  %1318 = getelementptr inbounds i8, i8* %1303, i64 8
  %1319 = bitcast i8* %1318 to i32*
  store i32 %1317, i32* %1319, align 1, !tbaa !2455
  %1320 = extractelement <2 x i32> %1311, i32 1
  %1321 = getelementptr inbounds i8, i8* %1303, i64 12
  %1322 = bitcast i8* %1321 to i32*
  store i32 %1320, i32* %1322, align 1, !tbaa !2455
  %1323 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1324 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1325 = load i64, i64* %PC
  %1326 = add i64 %1325, 9
  store i64 %1326, i64* %PC
  %1327 = bitcast i8* %1324 to double*
  %1328 = load double, double* %1327, align 1
  %1329 = getelementptr inbounds i8, i8* %1324, i64 8
  %1330 = bitcast i8* %1329 to i64*
  %1331 = load i64, i64* %1330, align 1
  %1332 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 192) to double*)
  %1333 = fmul double %1328, %1332
  %1334 = bitcast i8* %1323 to double*
  store double %1333, double* %1334, align 1, !tbaa !2452
  %1335 = getelementptr inbounds i8, i8* %1323, i64 8
  %1336 = bitcast i8* %1335 to i64*
  store i64 %1331, i64* %1336, align 1, !tbaa !2452
  %1337 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1338 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1339 = load i64, i64* %PC
  %1340 = add i64 %1339, 9
  store i64 %1340, i64* %PC
  %1341 = bitcast i8* %1338 to double*
  %1342 = load double, double* %1341, align 1
  %1343 = getelementptr inbounds i8, i8* %1338, i64 8
  %1344 = bitcast i8* %1343 to i64*
  %1345 = load i64, i64* %1344, align 1
  %1346 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 208) to double*)
  %1347 = fmul double %1342, %1346
  %1348 = bitcast i8* %1337 to double*
  store double %1347, double* %1348, align 1, !tbaa !2452
  %1349 = getelementptr inbounds i8, i8* %1337, i64 8
  %1350 = bitcast i8* %1349 to i64*
  store i64 %1345, i64* %1350, align 1, !tbaa !2452
  %1351 = load i64, i64* %RBP
  %1352 = sub i64 %1351, 304
  %1353 = bitcast %union.vec128_t* %XMM0 to i8*
  %1354 = load i64, i64* %PC
  %1355 = add i64 %1354, 8
  store i64 %1355, i64* %PC
  %1356 = bitcast i8* %1353 to double*
  %1357 = load double, double* %1356, align 1
  %1358 = inttoptr i64 %1352 to double*
  store double %1357, double* %1358
  %1359 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1360 = bitcast %union.vec128_t* %XMM1 to i8*
  %1361 = load i64, i64* %PC
  %1362 = add i64 %1361, 3
  store i64 %1362, i64* %PC
  %1363 = bitcast i8* %1360 to <2 x i32>*
  %1364 = load <2 x i32>, <2 x i32>* %1363, align 1
  %1365 = getelementptr inbounds i8, i8* %1360, i64 8
  %1366 = bitcast i8* %1365 to <2 x i32>*
  %1367 = load <2 x i32>, <2 x i32>* %1366, align 1
  %1368 = extractelement <2 x i32> %1364, i32 0
  %1369 = bitcast i8* %1359 to i32*
  store i32 %1368, i32* %1369, align 1, !tbaa !2455
  %1370 = extractelement <2 x i32> %1364, i32 1
  %1371 = getelementptr inbounds i8, i8* %1359, i64 4
  %1372 = bitcast i8* %1371 to i32*
  store i32 %1370, i32* %1372, align 1, !tbaa !2455
  %1373 = extractelement <2 x i32> %1367, i32 0
  %1374 = getelementptr inbounds i8, i8* %1359, i64 8
  %1375 = bitcast i8* %1374 to i32*
  store i32 %1373, i32* %1375, align 1, !tbaa !2455
  %1376 = extractelement <2 x i32> %1367, i32 1
  %1377 = getelementptr inbounds i8, i8* %1359, i64 12
  %1378 = bitcast i8* %1377 to i32*
  store i32 %1376, i32* %1378, align 1, !tbaa !2455
  %1379 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1380 = bitcast %union.vec128_t* %XMM2 to i8*
  %1381 = load i64, i64* %PC
  %1382 = add i64 %1381, 3
  store i64 %1382, i64* %PC
  %1383 = bitcast i8* %1380 to <2 x i32>*
  %1384 = load <2 x i32>, <2 x i32>* %1383, align 1
  %1385 = getelementptr inbounds i8, i8* %1380, i64 8
  %1386 = bitcast i8* %1385 to <2 x i32>*
  %1387 = load <2 x i32>, <2 x i32>* %1386, align 1
  %1388 = extractelement <2 x i32> %1384, i32 0
  %1389 = bitcast i8* %1379 to i32*
  store i32 %1388, i32* %1389, align 1, !tbaa !2455
  %1390 = extractelement <2 x i32> %1384, i32 1
  %1391 = getelementptr inbounds i8, i8* %1379, i64 4
  %1392 = bitcast i8* %1391 to i32*
  store i32 %1390, i32* %1392, align 1, !tbaa !2455
  %1393 = extractelement <2 x i32> %1387, i32 0
  %1394 = getelementptr inbounds i8, i8* %1379, i64 8
  %1395 = bitcast i8* %1394 to i32*
  store i32 %1393, i32* %1395, align 1, !tbaa !2455
  %1396 = extractelement <2 x i32> %1387, i32 1
  %1397 = getelementptr inbounds i8, i8* %1379, i64 12
  %1398 = bitcast i8* %1397 to i32*
  store i32 %1396, i32* %1398, align 1, !tbaa !2455
  %1399 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1400 = load i64, i64* %RBP
  %1401 = sub i64 %1400, 304
  %1402 = load i64, i64* %PC
  %1403 = add i64 %1402, 8
  store i64 %1403, i64* %PC
  %1404 = inttoptr i64 %1401 to double*
  %1405 = load double, double* %1404
  %1406 = bitcast i8* %1399 to double*
  store double %1405, double* %1406, align 1, !tbaa !2452
  %1407 = getelementptr inbounds i8, i8* %1399, i64 8
  %1408 = bitcast i8* %1407 to double*
  store double 0.000000e+00, double* %1408, align 1, !tbaa !2452
  %1409 = load i64, i64* %RBP
  %1410 = sub i64 %1409, 308
  %1411 = load i32, i32* %EAX
  %1412 = zext i32 %1411 to i64
  %1413 = load i64, i64* %PC
  %1414 = add i64 %1413, 6
  store i64 %1414, i64* %PC
  %1415 = inttoptr i64 %1410 to i32*
  store i32 %1411, i32* %1415
  %1416 = load i64, i64* %PC
  %1417 = add i64 %1416, 2
  store i64 %1417, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %1418 = load i64, i64* %PC
  %1419 = sub i64 %1418, 7873
  %1420 = load i64, i64* %PC
  %1421 = add i64 %1420, 5
  %1422 = load i64, i64* %PC
  %1423 = add i64 %1422, 5
  store i64 %1423, i64* %PC
  %1424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1425 = load i64, i64* %1424, align 8, !tbaa !2428
  %1426 = add i64 %1425, -8
  %1427 = inttoptr i64 %1426 to i64*
  store i64 %1421, i64* %1427
  store i64 %1426, i64* %1424, align 8, !tbaa !2428
  %1428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1419, i64* %1428, align 8, !tbaa !2428
  %1429 = load i64, i64* %PC
  %1430 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %1429, %struct.Memory* %457)
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 10
  store i64 %1432, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 304), i64* %RDI, align 8, !tbaa !2428
  %1433 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1434 = load i64, i64* %PC
  %1435 = add i64 %1434, 8
  store i64 %1435, i64* %PC
  %1436 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 192) to double*)
  %1437 = bitcast i8* %1433 to double*
  store double %1436, double* %1437, align 1, !tbaa !2452
  %1438 = getelementptr inbounds i8, i8* %1433, i64 8
  %1439 = bitcast i8* %1438 to double*
  store double 0.000000e+00, double* %1439, align 1, !tbaa !2452
  %1440 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1441 = load i64, i64* %PC
  %1442 = add i64 %1441, 8
  store i64 %1442, i64* %PC
  %1443 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 200) to double*)
  %1444 = bitcast i8* %1440 to double*
  store double %1443, double* %1444, align 1, !tbaa !2452
  %1445 = getelementptr inbounds i8, i8* %1440, i64 8
  %1446 = bitcast i8* %1445 to double*
  store double 0.000000e+00, double* %1446, align 1, !tbaa !2452
  %1447 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1448 = load i64, i64* %PC
  %1449 = add i64 %1448, 8
  store i64 %1449, i64* %PC
  %1450 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 208) to double*)
  %1451 = bitcast i8* %1447 to double*
  store double %1450, double* %1451, align 1, !tbaa !2452
  %1452 = getelementptr inbounds i8, i8* %1447, i64 8
  %1453 = bitcast i8* %1452 to double*
  store double 0.000000e+00, double* %1453, align 1, !tbaa !2452
  %1454 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1455 = load i64, i64* %PC
  %1456 = add i64 %1455, 8
  store i64 %1456, i64* %PC
  %1457 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 216) to double*)
  %1458 = bitcast i8* %1454 to double*
  store double %1457, double* %1458, align 1, !tbaa !2452
  %1459 = getelementptr inbounds i8, i8* %1454, i64 8
  %1460 = bitcast i8* %1459 to double*
  store double 0.000000e+00, double* %1460, align 1, !tbaa !2452
  %1461 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1462 = load i64, i64* %PC
  %1463 = add i64 %1462, 9
  store i64 %1463, i64* %PC
  %1464 = load double, double* bitcast (%five_type* @five to double*)
  %1465 = bitcast i8* %1461 to double*
  store double %1464, double* %1465, align 1, !tbaa !2452
  %1466 = getelementptr inbounds i8, i8* %1461, i64 8
  %1467 = bitcast i8* %1466 to double*
  store double 0.000000e+00, double* %1467, align 1, !tbaa !2452
  %1468 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %1469 = load i64, i64* %PC
  %1470 = add i64 %1469, 9
  store i64 %1470, i64* %PC
  %1471 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 48) to double*)
  %1472 = bitcast i8* %1468 to double*
  store double %1471, double* %1472, align 1, !tbaa !2452
  %1473 = getelementptr inbounds i8, i8* %1468, i64 8
  %1474 = bitcast i8* %1473 to double*
  store double 0.000000e+00, double* %1474, align 1, !tbaa !2452
  %1475 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %1476 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %1477 = load i64, i64* %PC
  %1478 = add i64 %1477, 9
  store i64 %1478, i64* %PC
  %1479 = bitcast i8* %1476 to double*
  %1480 = load double, double* %1479, align 1
  %1481 = getelementptr inbounds i8, i8* %1476, i64 8
  %1482 = bitcast i8* %1481 to i64*
  %1483 = load i64, i64* %1482, align 1
  %1484 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  %1485 = fsub double %1480, %1484
  %1486 = bitcast i8* %1475 to double*
  store double %1485, double* %1486, align 1, !tbaa !2452
  %1487 = getelementptr inbounds i8, i8* %1475, i64 8
  %1488 = bitcast i8* %1487 to i64*
  store i64 %1483, i64* %1488, align 1, !tbaa !2452
  %1489 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1490 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1491 = bitcast %union.vec128_t* %XMM5 to i8*
  %1492 = load i64, i64* %PC
  %1493 = add i64 %1492, 4
  store i64 %1493, i64* %PC
  %1494 = bitcast i8* %1490 to double*
  %1495 = load double, double* %1494, align 1
  %1496 = getelementptr inbounds i8, i8* %1490, i64 8
  %1497 = bitcast i8* %1496 to i64*
  %1498 = load i64, i64* %1497, align 1
  %1499 = bitcast i8* %1491 to double*
  %1500 = load double, double* %1499, align 1
  %1501 = fmul double %1495, %1500
  %1502 = bitcast i8* %1489 to double*
  store double %1501, double* %1502, align 1, !tbaa !2452
  %1503 = getelementptr inbounds i8, i8* %1489, i64 8
  %1504 = bitcast i8* %1503 to i64*
  store i64 %1498, i64* %1504, align 1, !tbaa !2452
  %1505 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1506 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1507 = load i64, i64* %PC
  %1508 = add i64 %1507, 9
  store i64 %1508, i64* %PC
  %1509 = bitcast i8* %1506 to double*
  %1510 = load double, double* %1509, align 1
  %1511 = getelementptr inbounds i8, i8* %1506, i64 8
  %1512 = bitcast i8* %1511 to i64*
  %1513 = load i64, i64* %1512, align 1
  %1514 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %1515 = fadd double %1510, %1514
  %1516 = bitcast i8* %1505 to double*
  store double %1515, double* %1516, align 1, !tbaa !2452
  %1517 = getelementptr inbounds i8, i8* %1505, i64 8
  %1518 = bitcast i8* %1517 to i64*
  store i64 %1513, i64* %1518, align 1, !tbaa !2452
  %1519 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1520 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1521 = bitcast %union.vec128_t* %XMM3 to i8*
  %1522 = load i64, i64* %PC
  %1523 = add i64 %1522, 4
  store i64 %1523, i64* %PC
  %1524 = bitcast i8* %1520 to double*
  %1525 = load double, double* %1524, align 1
  %1526 = getelementptr inbounds i8, i8* %1520, i64 8
  %1527 = bitcast i8* %1526 to i64*
  %1528 = load i64, i64* %1527, align 1
  %1529 = bitcast i8* %1521 to double*
  %1530 = load double, double* %1529, align 1
  %1531 = fdiv double %1525, %1530
  %1532 = bitcast i8* %1519 to double*
  store double %1531, double* %1532, align 1, !tbaa !2452
  %1533 = getelementptr inbounds i8, i8* %1519, i64 8
  %1534 = bitcast i8* %1533 to i64*
  store i64 %1528, i64* %1534, align 1, !tbaa !2452
  %1535 = bitcast %union.vec128_t* %XMM4 to i8*
  %1536 = load i64, i64* %PC
  %1537 = add i64 %1536, 9
  store i64 %1537, i64* %PC
  %1538 = bitcast i8* %1535 to double*
  %1539 = load double, double* %1538, align 1
  store double %1539, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 216) to double*)
  %1540 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1541 = load i64, i64* %PC
  %1542 = add i64 %1541, 9
  store i64 %1542, i64* %PC
  %1543 = load double, double* bitcast (%one_type* @one to double*)
  %1544 = bitcast i8* %1540 to double*
  store double %1543, double* %1544, align 1, !tbaa !2452
  %1545 = getelementptr inbounds i8, i8* %1540, i64 8
  %1546 = bitcast i8* %1545 to double*
  store double 0.000000e+00, double* %1546, align 1, !tbaa !2452
  %1547 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1548 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1549 = load i64, i64* %PC
  %1550 = add i64 %1549, 9
  store i64 %1550, i64* %PC
  %1551 = bitcast i8* %1548 to double*
  %1552 = load double, double* %1551, align 1
  %1553 = getelementptr inbounds i8, i8* %1548, i64 8
  %1554 = bitcast i8* %1553 to i64*
  %1555 = load i64, i64* %1554, align 1
  %1556 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 216) to double*)
  %1557 = fdiv double %1552, %1556
  %1558 = bitcast i8* %1547 to double*
  store double %1557, double* %1558, align 1, !tbaa !2452
  %1559 = getelementptr inbounds i8, i8* %1547, i64 8
  %1560 = bitcast i8* %1559 to i64*
  store i64 %1555, i64* %1560, align 1, !tbaa !2452
  %1561 = bitcast %union.vec128_t* %XMM3 to i8*
  %1562 = load i64, i64* %PC
  %1563 = add i64 %1562, 9
  store i64 %1563, i64* %PC
  %1564 = bitcast i8* %1561 to double*
  %1565 = load double, double* %1564, align 1
  store double %1565, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 224) to double*)
  %1566 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1567 = load i64, i64* %PC
  %1568 = add i64 %1567, 9
  store i64 %1568, i64* %PC
  %1569 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 16) to double*)
  %1570 = bitcast i8* %1566 to double*
  store double %1569, double* %1570, align 1, !tbaa !2452
  %1571 = getelementptr inbounds i8, i8* %1566, i64 8
  %1572 = bitcast i8* %1571 to double*
  store double 0.000000e+00, double* %1572, align 1, !tbaa !2452
  %1573 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1574 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1575 = load i64, i64* %PC
  %1576 = add i64 %1575, 9
  store i64 %1576, i64* %PC
  %1577 = bitcast i8* %1574 to double*
  %1578 = load double, double* %1577, align 1
  %1579 = getelementptr inbounds i8, i8* %1574, i64 8
  %1580 = bitcast i8* %1579 to i64*
  %1581 = load i64, i64* %1580, align 1
  %1582 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %1583 = fadd double %1578, %1582
  %1584 = bitcast i8* %1573 to double*
  store double %1583, double* %1584, align 1, !tbaa !2452
  %1585 = getelementptr inbounds i8, i8* %1573, i64 8
  %1586 = bitcast i8* %1585 to i64*
  store i64 %1581, i64* %1586, align 1, !tbaa !2452
  %1587 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1588 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1589 = load i64, i64* %PC
  %1590 = add i64 %1589, 9
  store i64 %1590, i64* %PC
  %1591 = bitcast i8* %1588 to double*
  %1592 = load double, double* %1591, align 1
  %1593 = getelementptr inbounds i8, i8* %1588, i64 8
  %1594 = bitcast i8* %1593 to i64*
  %1595 = load i64, i64* %1594, align 1
  %1596 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %1597 = fadd double %1592, %1596
  %1598 = bitcast i8* %1587 to double*
  store double %1597, double* %1598, align 1, !tbaa !2452
  %1599 = getelementptr inbounds i8, i8* %1587, i64 8
  %1600 = bitcast i8* %1599 to i64*
  store i64 %1595, i64* %1600, align 1, !tbaa !2452
  %1601 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1602 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1603 = load i64, i64* %PC
  %1604 = add i64 %1603, 9
  store i64 %1604, i64* %PC
  %1605 = bitcast i8* %1602 to double*
  %1606 = load double, double* %1605, align 1
  %1607 = getelementptr inbounds i8, i8* %1602, i64 8
  %1608 = bitcast i8* %1607 to i64*
  %1609 = load i64, i64* %1608, align 1
  %1610 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 120) to double*)
  %1611 = fadd double %1606, %1610
  %1612 = bitcast i8* %1601 to double*
  store double %1611, double* %1612, align 1, !tbaa !2452
  %1613 = getelementptr inbounds i8, i8* %1601, i64 8
  %1614 = bitcast i8* %1613 to i64*
  store i64 %1609, i64* %1614, align 1, !tbaa !2452
  %1615 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1616 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1617 = load i64, i64* %PC
  %1618 = add i64 %1617, 9
  store i64 %1618, i64* %PC
  %1619 = bitcast i8* %1616 to double*
  %1620 = load double, double* %1619, align 1
  %1621 = getelementptr inbounds i8, i8* %1616, i64 8
  %1622 = bitcast i8* %1621 to i64*
  %1623 = load i64, i64* %1622, align 1
  %1624 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %1625 = fadd double %1620, %1624
  %1626 = bitcast i8* %1615 to double*
  store double %1625, double* %1626, align 1, !tbaa !2452
  %1627 = getelementptr inbounds i8, i8* %1615, i64 8
  %1628 = bitcast i8* %1627 to i64*
  store i64 %1623, i64* %1628, align 1, !tbaa !2452
  %1629 = bitcast %union.vec128_t* %XMM3 to i8*
  %1630 = load i64, i64* %PC
  %1631 = add i64 %1630, 9
  store i64 %1631, i64* %PC
  %1632 = bitcast i8* %1629 to double*
  %1633 = load double, double* %1632, align 1
  store double %1633, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 232) to double*)
  %1634 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1635 = load i64, i64* %PC
  %1636 = add i64 %1635, 9
  store i64 %1636, i64* %PC
  %1637 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 232) to double*)
  %1638 = bitcast i8* %1634 to double*
  store double %1637, double* %1638, align 1, !tbaa !2452
  %1639 = getelementptr inbounds i8, i8* %1634, i64 8
  %1640 = bitcast i8* %1639 to double*
  store double 0.000000e+00, double* %1640, align 1, !tbaa !2452
  %1641 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1642 = load i64, i64* %PC
  %1643 = add i64 %1642, 9
  store i64 %1643, i64* %PC
  %1644 = load double, double* bitcast (%four_type* @four to double*)
  %1645 = bitcast i8* %1641 to double*
  store double %1644, double* %1645, align 1, !tbaa !2452
  %1646 = getelementptr inbounds i8, i8* %1641, i64 8
  %1647 = bitcast i8* %1646 to double*
  store double 0.000000e+00, double* %1647, align 1, !tbaa !2452
  %1648 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1649 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %1650 = load i64, i64* %PC
  %1651 = add i64 %1650, 9
  store i64 %1651, i64* %PC
  %1652 = bitcast i8* %1649 to double*
  %1653 = load double, double* %1652, align 1
  %1654 = getelementptr inbounds i8, i8* %1649, i64 8
  %1655 = bitcast i8* %1654 to i64*
  %1656 = load i64, i64* %1655, align 1
  %1657 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 168) to double*)
  %1658 = fmul double %1653, %1657
  %1659 = bitcast i8* %1648 to double*
  store double %1658, double* %1659, align 1, !tbaa !2452
  %1660 = getelementptr inbounds i8, i8* %1648, i64 8
  %1661 = bitcast i8* %1660 to i64*
  store i64 %1656, i64* %1661, align 1, !tbaa !2452
  %1662 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1663 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1664 = bitcast %union.vec128_t* %XMM4 to i8*
  %1665 = load i64, i64* %PC
  %1666 = add i64 %1665, 4
  store i64 %1666, i64* %PC
  %1667 = bitcast i8* %1663 to double*
  %1668 = load double, double* %1667, align 1
  %1669 = getelementptr inbounds i8, i8* %1663, i64 8
  %1670 = bitcast i8* %1669 to i64*
  %1671 = load i64, i64* %1670, align 1
  %1672 = bitcast i8* %1664 to double*
  %1673 = load double, double* %1672, align 1
  %1674 = fadd double %1668, %1673
  %1675 = bitcast i8* %1662 to double*
  store double %1674, double* %1675, align 1, !tbaa !2452
  %1676 = getelementptr inbounds i8, i8* %1662, i64 8
  %1677 = bitcast i8* %1676 to i64*
  store i64 %1671, i64* %1677, align 1, !tbaa !2452
  %1678 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1679 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1680 = bitcast %union.vec128_t* %XMM2 to i8*
  %1681 = load i64, i64* %PC
  %1682 = add i64 %1681, 4
  store i64 %1682, i64* %PC
  %1683 = bitcast i8* %1679 to double*
  %1684 = load double, double* %1683, align 1
  %1685 = getelementptr inbounds i8, i8* %1679, i64 8
  %1686 = bitcast i8* %1685 to i64*
  %1687 = load i64, i64* %1686, align 1
  %1688 = bitcast i8* %1680 to double*
  %1689 = load double, double* %1688, align 1
  %1690 = fdiv double %1684, %1689
  %1691 = bitcast i8* %1678 to double*
  store double %1690, double* %1691, align 1, !tbaa !2452
  %1692 = getelementptr inbounds i8, i8* %1678, i64 8
  %1693 = bitcast i8* %1692 to i64*
  store i64 %1687, i64* %1693, align 1, !tbaa !2452
  %1694 = bitcast %union.vec128_t* %XMM3 to i8*
  %1695 = load i64, i64* %PC
  %1696 = add i64 %1695, 9
  store i64 %1696, i64* %PC
  %1697 = bitcast i8* %1694 to double*
  %1698 = load double, double* %1697, align 1
  store double %1698, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 232) to double*)
  %1699 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1700 = load i64, i64* %PC
  %1701 = add i64 %1700, 9
  store i64 %1701, i64* %PC
  %1702 = load double, double* bitcast (%one_type* @one to double*)
  %1703 = bitcast i8* %1699 to double*
  store double %1702, double* %1703, align 1, !tbaa !2452
  %1704 = getelementptr inbounds i8, i8* %1699, i64 8
  %1705 = bitcast i8* %1704 to double*
  store double 0.000000e+00, double* %1705, align 1, !tbaa !2452
  %1706 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1707 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1708 = load i64, i64* %PC
  %1709 = add i64 %1708, 9
  store i64 %1709, i64* %PC
  %1710 = bitcast i8* %1707 to double*
  %1711 = load double, double* %1710, align 1
  %1712 = getelementptr inbounds i8, i8* %1707, i64 8
  %1713 = bitcast i8* %1712 to i64*
  %1714 = load i64, i64* %1713, align 1
  %1715 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 232) to double*)
  %1716 = fdiv double %1711, %1715
  %1717 = bitcast i8* %1706 to double*
  store double %1716, double* %1717, align 1, !tbaa !2452
  %1718 = getelementptr inbounds i8, i8* %1706, i64 8
  %1719 = bitcast i8* %1718 to i64*
  store i64 %1714, i64* %1719, align 1, !tbaa !2452
  %1720 = bitcast %union.vec128_t* %XMM2 to i8*
  %1721 = load i64, i64* %PC
  %1722 = add i64 %1721, 9
  store i64 %1722, i64* %PC
  %1723 = bitcast i8* %1720 to double*
  %1724 = load double, double* %1723, align 1
  store double %1724, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 240) to double*)
  %1725 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1726 = load i64, i64* %PC
  %1727 = add i64 %1726, 9
  store i64 %1727, i64* %PC
  %1728 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 16) to double*)
  %1729 = bitcast i8* %1725 to double*
  store double %1728, double* %1729, align 1, !tbaa !2452
  %1730 = getelementptr inbounds i8, i8* %1725, i64 8
  %1731 = bitcast i8* %1730 to double*
  store double 0.000000e+00, double* %1731, align 1, !tbaa !2452
  %1732 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1733 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1734 = load i64, i64* %PC
  %1735 = add i64 %1734, 9
  store i64 %1735, i64* %PC
  %1736 = bitcast i8* %1733 to double*
  %1737 = load double, double* %1736, align 1
  %1738 = getelementptr inbounds i8, i8* %1733, i64 8
  %1739 = bitcast i8* %1738 to i64*
  %1740 = load i64, i64* %1739, align 1
  %1741 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %1742 = fadd double %1737, %1741
  %1743 = bitcast i8* %1732 to double*
  store double %1742, double* %1743, align 1, !tbaa !2452
  %1744 = getelementptr inbounds i8, i8* %1732, i64 8
  %1745 = bitcast i8* %1744 to i64*
  store i64 %1740, i64* %1745, align 1, !tbaa !2452
  %1746 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1747 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 9
  store i64 %1749, i64* %PC
  %1750 = bitcast i8* %1747 to double*
  %1751 = load double, double* %1750, align 1
  %1752 = getelementptr inbounds i8, i8* %1747, i64 8
  %1753 = bitcast i8* %1752 to i64*
  %1754 = load i64, i64* %1753, align 1
  %1755 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %1756 = fadd double %1751, %1755
  %1757 = bitcast i8* %1746 to double*
  store double %1756, double* %1757, align 1, !tbaa !2452
  %1758 = getelementptr inbounds i8, i8* %1746, i64 8
  %1759 = bitcast i8* %1758 to i64*
  store i64 %1754, i64* %1759, align 1, !tbaa !2452
  %1760 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1761 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1762 = load i64, i64* %PC
  %1763 = add i64 %1762, 9
  store i64 %1763, i64* %PC
  %1764 = bitcast i8* %1761 to double*
  %1765 = load double, double* %1764, align 1
  %1766 = getelementptr inbounds i8, i8* %1761, i64 8
  %1767 = bitcast i8* %1766 to i64*
  %1768 = load i64, i64* %1767, align 1
  %1769 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 120) to double*)
  %1770 = fadd double %1765, %1769
  %1771 = bitcast i8* %1760 to double*
  store double %1770, double* %1771, align 1, !tbaa !2452
  %1772 = getelementptr inbounds i8, i8* %1760, i64 8
  %1773 = bitcast i8* %1772 to i64*
  store i64 %1768, i64* %1773, align 1, !tbaa !2452
  %1774 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1775 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1776 = load i64, i64* %PC
  %1777 = add i64 %1776, 9
  store i64 %1777, i64* %PC
  %1778 = bitcast i8* %1775 to double*
  %1779 = load double, double* %1778, align 1
  %1780 = getelementptr inbounds i8, i8* %1775, i64 8
  %1781 = bitcast i8* %1780 to i64*
  %1782 = load i64, i64* %1781, align 1
  %1783 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %1784 = fadd double %1779, %1783
  %1785 = bitcast i8* %1774 to double*
  store double %1784, double* %1785, align 1, !tbaa !2452
  %1786 = getelementptr inbounds i8, i8* %1774, i64 8
  %1787 = bitcast i8* %1786 to i64*
  store i64 %1782, i64* %1787, align 1, !tbaa !2452
  %1788 = bitcast %union.vec128_t* %XMM2 to i8*
  %1789 = load i64, i64* %PC
  %1790 = add i64 %1789, 9
  store i64 %1790, i64* %PC
  %1791 = bitcast i8* %1788 to double*
  %1792 = load double, double* %1791, align 1
  store double %1792, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 248) to double*)
  %1793 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1794 = load i64, i64* %PC
  %1795 = add i64 %1794, 9
  store i64 %1795, i64* %PC
  %1796 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 248) to double*)
  %1797 = bitcast i8* %1793 to double*
  store double %1796, double* %1797, align 1, !tbaa !2452
  %1798 = getelementptr inbounds i8, i8* %1793, i64 8
  %1799 = bitcast i8* %1798 to double*
  store double 0.000000e+00, double* %1799, align 1, !tbaa !2452
  %1800 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1801 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1802 = load i64, i64* %PC
  %1803 = add i64 %1802, 9
  store i64 %1803, i64* %PC
  %1804 = bitcast i8* %1801 to double*
  %1805 = load double, double* %1804, align 1
  %1806 = getelementptr inbounds i8, i8* %1801, i64 8
  %1807 = bitcast i8* %1806 to i64*
  %1808 = load i64, i64* %1807, align 1
  %1809 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 168) to double*)
  %1810 = fadd double %1805, %1809
  %1811 = bitcast i8* %1800 to double*
  store double %1810, double* %1811, align 1, !tbaa !2452
  %1812 = getelementptr inbounds i8, i8* %1800, i64 8
  %1813 = bitcast i8* %1812 to i64*
  store i64 %1808, i64* %1813, align 1, !tbaa !2452
  %1814 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1815 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1816 = load i64, i64* %PC
  %1817 = add i64 %1816, 9
  store i64 %1817, i64* %PC
  %1818 = bitcast i8* %1815 to double*
  %1819 = load double, double* %1818, align 1
  %1820 = getelementptr inbounds i8, i8* %1815, i64 8
  %1821 = bitcast i8* %1820 to i64*
  %1822 = load i64, i64* %1821, align 1
  %1823 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 192) to double*)
  %1824 = fadd double %1819, %1823
  %1825 = bitcast i8* %1814 to double*
  store double %1824, double* %1825, align 1, !tbaa !2452
  %1826 = getelementptr inbounds i8, i8* %1814, i64 8
  %1827 = bitcast i8* %1826 to i64*
  store i64 %1822, i64* %1827, align 1, !tbaa !2452
  %1828 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1829 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1830 = bitcast %union.vec128_t* %XMM1 to i8*
  %1831 = load i64, i64* %PC
  %1832 = add i64 %1831, 4
  store i64 %1832, i64* %PC
  %1833 = bitcast i8* %1829 to double*
  %1834 = load double, double* %1833, align 1
  %1835 = getelementptr inbounds i8, i8* %1829, i64 8
  %1836 = bitcast i8* %1835 to i64*
  %1837 = load i64, i64* %1836, align 1
  %1838 = bitcast i8* %1830 to double*
  %1839 = load double, double* %1838, align 1
  %1840 = fdiv double %1834, %1839
  %1841 = bitcast i8* %1828 to double*
  store double %1840, double* %1841, align 1, !tbaa !2452
  %1842 = getelementptr inbounds i8, i8* %1828, i64 8
  %1843 = bitcast i8* %1842 to i64*
  store i64 %1837, i64* %1843, align 1, !tbaa !2452
  %1844 = bitcast %union.vec128_t* %XMM2 to i8*
  %1845 = load i64, i64* %PC
  %1846 = add i64 %1845, 9
  store i64 %1846, i64* %PC
  %1847 = bitcast i8* %1844 to double*
  %1848 = load double, double* %1847, align 1
  store double %1848, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 248) to double*)
  %1849 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1850 = load i64, i64* %PC
  %1851 = add i64 %1850, 9
  store i64 %1851, i64* %PC
  %1852 = load double, double* bitcast (%one_type* @one to double*)
  %1853 = bitcast i8* %1849 to double*
  store double %1852, double* %1853, align 1, !tbaa !2452
  %1854 = getelementptr inbounds i8, i8* %1849, i64 8
  %1855 = bitcast i8* %1854 to double*
  store double 0.000000e+00, double* %1855, align 1, !tbaa !2452
  %1856 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1857 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1858 = load i64, i64* %PC
  %1859 = add i64 %1858, 9
  store i64 %1859, i64* %PC
  %1860 = bitcast i8* %1857 to double*
  %1861 = load double, double* %1860, align 1
  %1862 = getelementptr inbounds i8, i8* %1857, i64 8
  %1863 = bitcast i8* %1862 to i64*
  %1864 = load i64, i64* %1863, align 1
  %1865 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 248) to double*)
  %1866 = fdiv double %1861, %1865
  %1867 = bitcast i8* %1856 to double*
  store double %1866, double* %1867, align 1, !tbaa !2452
  %1868 = getelementptr inbounds i8, i8* %1856, i64 8
  %1869 = bitcast i8* %1868 to i64*
  store i64 %1864, i64* %1869, align 1, !tbaa !2452
  %1870 = bitcast %union.vec128_t* %XMM1 to i8*
  %1871 = load i64, i64* %PC
  %1872 = add i64 %1871, 9
  store i64 %1872, i64* %PC
  %1873 = bitcast i8* %1870 to double*
  %1874 = load double, double* %1873, align 1
  store double %1874, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 256) to double*)
  %1875 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1876 = load i64, i64* %PC
  %1877 = add i64 %1876, 9
  store i64 %1877, i64* %PC
  %1878 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %1879 = bitcast i8* %1875 to double*
  store double %1878, double* %1879, align 1, !tbaa !2452
  %1880 = getelementptr inbounds i8, i8* %1875, i64 8
  %1881 = bitcast i8* %1880 to double*
  store double 0.000000e+00, double* %1881, align 1, !tbaa !2452
  %1882 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1883 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1884 = load i64, i64* %PC
  %1885 = add i64 %1884, 9
  store i64 %1885, i64* %PC
  %1886 = bitcast i8* %1883 to double*
  %1887 = load double, double* %1886, align 1
  %1888 = getelementptr inbounds i8, i8* %1883, i64 8
  %1889 = bitcast i8* %1888 to i64*
  %1890 = load i64, i64* %1889, align 1
  %1891 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %1892 = fadd double %1887, %1891
  %1893 = bitcast i8* %1882 to double*
  store double %1892, double* %1893, align 1, !tbaa !2452
  %1894 = getelementptr inbounds i8, i8* %1882, i64 8
  %1895 = bitcast i8* %1894 to i64*
  store i64 %1890, i64* %1895, align 1, !tbaa !2452
  %1896 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1897 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1898 = load i64, i64* %PC
  %1899 = add i64 %1898, 9
  store i64 %1899, i64* %PC
  %1900 = bitcast i8* %1897 to double*
  %1901 = load double, double* %1900, align 1
  %1902 = getelementptr inbounds i8, i8* %1897, i64 8
  %1903 = bitcast i8* %1902 to i64*
  %1904 = load i64, i64* %1903, align 1
  %1905 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %1906 = fadd double %1901, %1905
  %1907 = bitcast i8* %1896 to double*
  store double %1906, double* %1907, align 1, !tbaa !2452
  %1908 = getelementptr inbounds i8, i8* %1896, i64 8
  %1909 = bitcast i8* %1908 to i64*
  store i64 %1904, i64* %1909, align 1, !tbaa !2452
  %1910 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1911 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1912 = load i64, i64* %PC
  %1913 = add i64 %1912, 9
  store i64 %1913, i64* %PC
  %1914 = bitcast i8* %1911 to double*
  %1915 = load double, double* %1914, align 1
  %1916 = getelementptr inbounds i8, i8* %1911, i64 8
  %1917 = bitcast i8* %1916 to i64*
  %1918 = load i64, i64* %1917, align 1
  %1919 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 192) to double*)
  %1920 = fadd double %1915, %1919
  %1921 = bitcast i8* %1910 to double*
  store double %1920, double* %1921, align 1, !tbaa !2452
  %1922 = getelementptr inbounds i8, i8* %1910, i64 8
  %1923 = bitcast i8* %1922 to i64*
  store i64 %1918, i64* %1923, align 1, !tbaa !2452
  %1924 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1925 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1926 = bitcast %union.vec128_t* %XMM0 to i8*
  %1927 = load i64, i64* %PC
  %1928 = add i64 %1927, 4
  store i64 %1928, i64* %PC
  %1929 = bitcast i8* %1925 to double*
  %1930 = load double, double* %1929, align 1
  %1931 = getelementptr inbounds i8, i8* %1925, i64 8
  %1932 = bitcast i8* %1931 to i64*
  %1933 = load i64, i64* %1932, align 1
  %1934 = bitcast i8* %1926 to double*
  %1935 = load double, double* %1934, align 1
  %1936 = fdiv double %1930, %1935
  %1937 = bitcast i8* %1924 to double*
  store double %1936, double* %1937, align 1, !tbaa !2452
  %1938 = getelementptr inbounds i8, i8* %1924, i64 8
  %1939 = bitcast i8* %1938 to i64*
  store i64 %1933, i64* %1939, align 1, !tbaa !2452
  %1940 = bitcast %union.vec128_t* %XMM1 to i8*
  %1941 = load i64, i64* %PC
  %1942 = add i64 %1941, 9
  store i64 %1942, i64* %PC
  %1943 = bitcast i8* %1940 to double*
  %1944 = load double, double* %1943, align 1
  store double %1944, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 264) to double*)
  %1945 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1946 = load i64, i64* %PC
  %1947 = add i64 %1946, 9
  store i64 %1947, i64* %PC
  %1948 = load double, double* bitcast (%one_type* @one to double*)
  %1949 = bitcast i8* %1945 to double*
  store double %1948, double* %1949, align 1, !tbaa !2452
  %1950 = getelementptr inbounds i8, i8* %1945, i64 8
  %1951 = bitcast i8* %1950 to double*
  store double 0.000000e+00, double* %1951, align 1, !tbaa !2452
  %1952 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1953 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1954 = load i64, i64* %PC
  %1955 = add i64 %1954, 9
  store i64 %1955, i64* %PC
  %1956 = bitcast i8* %1953 to double*
  %1957 = load double, double* %1956, align 1
  %1958 = getelementptr inbounds i8, i8* %1953, i64 8
  %1959 = bitcast i8* %1958 to i64*
  %1960 = load i64, i64* %1959, align 1
  %1961 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 264) to double*)
  %1962 = fdiv double %1957, %1961
  %1963 = bitcast i8* %1952 to double*
  store double %1962, double* %1963, align 1, !tbaa !2452
  %1964 = getelementptr inbounds i8, i8* %1952, i64 8
  %1965 = bitcast i8* %1964 to i64*
  store i64 %1960, i64* %1965, align 1, !tbaa !2452
  %1966 = bitcast %union.vec128_t* %XMM0 to i8*
  %1967 = load i64, i64* %PC
  %1968 = add i64 %1967, 9
  store i64 %1968, i64* %PC
  %1969 = bitcast i8* %1966 to double*
  %1970 = load double, double* %1969, align 1
  store double %1970, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 272) to double*)
  %1971 = load i64, i64* %RBP
  %1972 = sub i64 %1971, 312
  %1973 = load i32, i32* %EAX
  %1974 = zext i32 %1973 to i64
  %1975 = load i64, i64* %PC
  %1976 = add i64 %1975, 6
  store i64 %1976, i64* %PC
  %1977 = inttoptr i64 %1972 to i32*
  store i32 %1973, i32* %1977
  %1978 = load i64, i64* %PC
  %1979 = add i64 %1978, 2
  store i64 %1979, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %1980 = load i64, i64* %PC
  %1981 = sub i64 %1980, 8330
  %1982 = load i64, i64* %PC
  %1983 = add i64 %1982, 5
  %1984 = load i64, i64* %PC
  %1985 = add i64 %1984, 5
  store i64 %1985, i64* %PC
  %1986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1987 = load i64, i64* %1986, align 8, !tbaa !2428
  %1988 = add i64 %1987, -8
  %1989 = inttoptr i64 %1988 to i64*
  store i64 %1983, i64* %1989
  store i64 %1988, i64* %1986, align 8, !tbaa !2428
  %1990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1981, i64* %1990, align 8, !tbaa !2428
  %1991 = load i64, i64* %PC
  %1992 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %1991, %struct.Memory* %1430)
  %1993 = load i64, i64* %PC
  %1994 = add i64 %1993, 10
  store i64 %1994, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 678), i64* %RDI, align 8, !tbaa !2428
  %1995 = load i64, i64* %RBP
  %1996 = sub i64 %1995, 80
  %1997 = load i64, i64* %PC
  %1998 = add i64 %1997, 4
  store i64 %1998, i64* %PC
  %1999 = inttoptr i64 %1996 to i64*
  %2000 = load i64, i64* %1999
  store i64 %2000, i64* %RSI, align 8, !tbaa !2428
  %2001 = load i64, i64* %RBP
  %2002 = sub i64 %2001, 316
  %2003 = load i32, i32* %EAX
  %2004 = zext i32 %2003 to i64
  %2005 = load i64, i64* %PC
  %2006 = add i64 %2005, 6
  store i64 %2006, i64* %PC
  %2007 = inttoptr i64 %2002 to i32*
  store i32 %2003, i32* %2007
  %2008 = load i64, i64* %PC
  %2009 = add i64 %2008, 2
  store i64 %2009, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %2010 = load i64, i64* %PC
  %2011 = sub i64 %2010, 8357
  %2012 = load i64, i64* %PC
  %2013 = add i64 %2012, 5
  %2014 = load i64, i64* %PC
  %2015 = add i64 %2014, 5
  store i64 %2015, i64* %PC
  %2016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2017 = load i64, i64* %2016, align 8, !tbaa !2428
  %2018 = add i64 %2017, -8
  %2019 = inttoptr i64 %2018 to i64*
  store i64 %2013, i64* %2019
  store i64 %2018, i64* %2016, align 8, !tbaa !2428
  %2020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2011, i64* %2020, align 8, !tbaa !2428
  %2021 = load i64, i64* %PC
  %2022 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %2021, %struct.Memory* %1992)
  %2023 = load i64, i64* %PC
  %2024 = add i64 %2023, 10
  store i64 %2024, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 706), i64* %RDI, align 8, !tbaa !2428
  %2025 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2026 = load i64, i64* %PC
  %2027 = add i64 %2026, 8
  store i64 %2027, i64* %PC
  %2028 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 72) to double*)
  %2029 = bitcast i8* %2025 to double*
  store double %2028, double* %2029, align 1, !tbaa !2452
  %2030 = getelementptr inbounds i8, i8* %2025, i64 8
  %2031 = bitcast i8* %2030 to double*
  store double 0.000000e+00, double* %2031, align 1, !tbaa !2452
  %2032 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2033 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2034 = load i64, i64* %PC
  %2035 = add i64 %2034, 9
  store i64 %2035, i64* %PC
  %2036 = bitcast i8* %2033 to double*
  %2037 = load double, double* %2036, align 1
  %2038 = getelementptr inbounds i8, i8* %2033, i64 8
  %2039 = bitcast i8* %2038 to i64*
  %2040 = load i64, i64* %2039, align 1
  %2041 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %2042 = fmul double %2037, %2041
  %2043 = bitcast i8* %2032 to double*
  store double %2042, double* %2043, align 1, !tbaa !2452
  %2044 = getelementptr inbounds i8, i8* %2032, i64 8
  %2045 = bitcast i8* %2044 to i64*
  store i64 %2040, i64* %2045, align 1, !tbaa !2452
  %2046 = load i64, i64* %RBP
  %2047 = sub i64 %2046, 320
  %2048 = load i32, i32* %EAX
  %2049 = zext i32 %2048 to i64
  %2050 = load i64, i64* %PC
  %2051 = add i64 %2050, 6
  store i64 %2051, i64* %PC
  %2052 = inttoptr i64 %2047 to i32*
  store i32 %2048, i32* %2052
  %2053 = load i64, i64* %PC
  %2054 = add i64 %2053, 2
  store i64 %2054, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %2055 = load i64, i64* %PC
  %2056 = sub i64 %2055, 8397
  %2057 = load i64, i64* %PC
  %2058 = add i64 %2057, 5
  %2059 = load i64, i64* %PC
  %2060 = add i64 %2059, 5
  store i64 %2060, i64* %PC
  %2061 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2062 = load i64, i64* %2061, align 8, !tbaa !2428
  %2063 = add i64 %2062, -8
  %2064 = inttoptr i64 %2063 to i64*
  store i64 %2058, i64* %2064
  store i64 %2063, i64* %2061, align 8, !tbaa !2428
  %2065 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2056, i64* %2065, align 8, !tbaa !2428
  %2066 = load i64, i64* %PC
  %2067 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %2066, %struct.Memory* %2022)
  %2068 = load i64, i64* %PC
  %2069 = add i64 %2068, 10
  store i64 %2069, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 736), i64* %RDI, align 8, !tbaa !2428
  %2070 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2071 = load i64, i64* %PC
  %2072 = add i64 %2071, 8
  store i64 %2072, i64* %PC
  %2073 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 72) to double*)
  %2074 = bitcast i8* %2070 to double*
  store double %2073, double* %2074, align 1, !tbaa !2452
  %2075 = getelementptr inbounds i8, i8* %2070, i64 8
  %2076 = bitcast i8* %2075 to double*
  store double 0.000000e+00, double* %2076, align 1, !tbaa !2452
  %2077 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2078 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2079 = load i64, i64* %PC
  %2080 = add i64 %2079, 9
  store i64 %2080, i64* %PC
  %2081 = bitcast i8* %2078 to double*
  %2082 = load double, double* %2081, align 1
  %2083 = getelementptr inbounds i8, i8* %2078, i64 8
  %2084 = bitcast i8* %2083 to i64*
  %2085 = load i64, i64* %2084, align 1
  %2086 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 224) to double*)
  %2087 = fmul double %2082, %2086
  %2088 = bitcast i8* %2077 to double*
  store double %2087, double* %2088, align 1, !tbaa !2452
  %2089 = getelementptr inbounds i8, i8* %2077, i64 8
  %2090 = bitcast i8* %2089 to i64*
  store i64 %2085, i64* %2090, align 1, !tbaa !2452
  %2091 = load i64, i64* %RBP
  %2092 = sub i64 %2091, 324
  %2093 = load i32, i32* %EAX
  %2094 = zext i32 %2093 to i64
  %2095 = load i64, i64* %PC
  %2096 = add i64 %2095, 6
  store i64 %2096, i64* %PC
  %2097 = inttoptr i64 %2092 to i32*
  store i32 %2093, i32* %2097
  %2098 = load i64, i64* %PC
  %2099 = add i64 %2098, 2
  store i64 %2099, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %2100 = load i64, i64* %PC
  %2101 = sub i64 %2100, 8437
  %2102 = load i64, i64* %PC
  %2103 = add i64 %2102, 5
  %2104 = load i64, i64* %PC
  %2105 = add i64 %2104, 5
  store i64 %2105, i64* %PC
  %2106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2107 = load i64, i64* %2106, align 8, !tbaa !2428
  %2108 = add i64 %2107, -8
  %2109 = inttoptr i64 %2108 to i64*
  store i64 %2103, i64* %2109
  store i64 %2108, i64* %2106, align 8, !tbaa !2428
  %2110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2101, i64* %2110, align 8, !tbaa !2428
  %2111 = load i64, i64* %PC
  %2112 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %2111, %struct.Memory* %2067)
  %2113 = load i64, i64* %PC
  %2114 = add i64 %2113, 10
  store i64 %2114, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 766), i64* %RDI, align 8, !tbaa !2428
  %2115 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2116 = load i64, i64* %PC
  %2117 = add i64 %2116, 8
  store i64 %2117, i64* %PC
  %2118 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 72) to double*)
  %2119 = bitcast i8* %2115 to double*
  store double %2118, double* %2119, align 1, !tbaa !2452
  %2120 = getelementptr inbounds i8, i8* %2115, i64 8
  %2121 = bitcast i8* %2120 to double*
  store double 0.000000e+00, double* %2121, align 1, !tbaa !2452
  %2122 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2123 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2124 = load i64, i64* %PC
  %2125 = add i64 %2124, 9
  store i64 %2125, i64* %PC
  %2126 = bitcast i8* %2123 to double*
  %2127 = load double, double* %2126, align 1
  %2128 = getelementptr inbounds i8, i8* %2123, i64 8
  %2129 = bitcast i8* %2128 to i64*
  %2130 = load i64, i64* %2129, align 1
  %2131 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 240) to double*)
  %2132 = fmul double %2127, %2131
  %2133 = bitcast i8* %2122 to double*
  store double %2132, double* %2133, align 1, !tbaa !2452
  %2134 = getelementptr inbounds i8, i8* %2122, i64 8
  %2135 = bitcast i8* %2134 to i64*
  store i64 %2130, i64* %2135, align 1, !tbaa !2452
  %2136 = load i64, i64* %RBP
  %2137 = sub i64 %2136, 328
  %2138 = load i32, i32* %EAX
  %2139 = zext i32 %2138 to i64
  %2140 = load i64, i64* %PC
  %2141 = add i64 %2140, 6
  store i64 %2141, i64* %PC
  %2142 = inttoptr i64 %2137 to i32*
  store i32 %2138, i32* %2142
  %2143 = load i64, i64* %PC
  %2144 = add i64 %2143, 2
  store i64 %2144, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %2145 = load i64, i64* %PC
  %2146 = sub i64 %2145, 8477
  %2147 = load i64, i64* %PC
  %2148 = add i64 %2147, 5
  %2149 = load i64, i64* %PC
  %2150 = add i64 %2149, 5
  store i64 %2150, i64* %PC
  %2151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2152 = load i64, i64* %2151, align 8, !tbaa !2428
  %2153 = add i64 %2152, -8
  %2154 = inttoptr i64 %2153 to i64*
  store i64 %2148, i64* %2154
  store i64 %2153, i64* %2151, align 8, !tbaa !2428
  %2155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2146, i64* %2155, align 8, !tbaa !2428
  %2156 = load i64, i64* %PC
  %2157 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %2156, %struct.Memory* %2112)
  %2158 = load i64, i64* %PC
  %2159 = add i64 %2158, 10
  store i64 %2159, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 796), i64* %RDI, align 8, !tbaa !2428
  %2160 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2161 = load i64, i64* %PC
  %2162 = add i64 %2161, 8
  store i64 %2162, i64* %PC
  %2163 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 72) to double*)
  %2164 = bitcast i8* %2160 to double*
  store double %2163, double* %2164, align 1, !tbaa !2452
  %2165 = getelementptr inbounds i8, i8* %2160, i64 8
  %2166 = bitcast i8* %2165 to double*
  store double 0.000000e+00, double* %2166, align 1, !tbaa !2452
  %2167 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2168 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2169 = load i64, i64* %PC
  %2170 = add i64 %2169, 9
  store i64 %2170, i64* %PC
  %2171 = bitcast i8* %2168 to double*
  %2172 = load double, double* %2171, align 1
  %2173 = getelementptr inbounds i8, i8* %2168, i64 8
  %2174 = bitcast i8* %2173 to i64*
  %2175 = load i64, i64* %2174, align 1
  %2176 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 256) to double*)
  %2177 = fmul double %2172, %2176
  %2178 = bitcast i8* %2167 to double*
  store double %2177, double* %2178, align 1, !tbaa !2452
  %2179 = getelementptr inbounds i8, i8* %2167, i64 8
  %2180 = bitcast i8* %2179 to i64*
  store i64 %2175, i64* %2180, align 1, !tbaa !2452
  %2181 = load i64, i64* %RBP
  %2182 = sub i64 %2181, 332
  %2183 = load i32, i32* %EAX
  %2184 = zext i32 %2183 to i64
  %2185 = load i64, i64* %PC
  %2186 = add i64 %2185, 6
  store i64 %2186, i64* %PC
  %2187 = inttoptr i64 %2182 to i32*
  store i32 %2183, i32* %2187
  %2188 = load i64, i64* %PC
  %2189 = add i64 %2188, 2
  store i64 %2189, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %2190 = load i64, i64* %PC
  %2191 = sub i64 %2190, 8517
  %2192 = load i64, i64* %PC
  %2193 = add i64 %2192, 5
  %2194 = load i64, i64* %PC
  %2195 = add i64 %2194, 5
  store i64 %2195, i64* %PC
  %2196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2197 = load i64, i64* %2196, align 8, !tbaa !2428
  %2198 = add i64 %2197, -8
  %2199 = inttoptr i64 %2198 to i64*
  store i64 %2193, i64* %2199
  store i64 %2198, i64* %2196, align 8, !tbaa !2428
  %2200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2191, i64* %2200, align 8, !tbaa !2428
  %2201 = load i64, i64* %PC
  %2202 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %2201, %struct.Memory* %2157)
  %2203 = load i64, i64* %PC
  %2204 = add i64 %2203, 10
  store i64 %2204, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 826), i64* %RDI, align 8, !tbaa !2428
  %2205 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2206 = load i64, i64* %PC
  %2207 = add i64 %2206, 8
  store i64 %2207, i64* %PC
  %2208 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 72) to double*)
  %2209 = bitcast i8* %2205 to double*
  store double %2208, double* %2209, align 1, !tbaa !2452
  %2210 = getelementptr inbounds i8, i8* %2205, i64 8
  %2211 = bitcast i8* %2210 to double*
  store double 0.000000e+00, double* %2211, align 1, !tbaa !2452
  %2212 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2213 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2214 = load i64, i64* %PC
  %2215 = add i64 %2214, 9
  store i64 %2215, i64* %PC
  %2216 = bitcast i8* %2213 to double*
  %2217 = load double, double* %2216, align 1
  %2218 = getelementptr inbounds i8, i8* %2213, i64 8
  %2219 = bitcast i8* %2218 to i64*
  %2220 = load i64, i64* %2219, align 1
  %2221 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 272) to double*)
  %2222 = fmul double %2217, %2221
  %2223 = bitcast i8* %2212 to double*
  store double %2222, double* %2223, align 1, !tbaa !2452
  %2224 = getelementptr inbounds i8, i8* %2212, i64 8
  %2225 = bitcast i8* %2224 to i64*
  store i64 %2220, i64* %2225, align 1, !tbaa !2452
  %2226 = load i64, i64* %RBP
  %2227 = sub i64 %2226, 336
  %2228 = load i32, i32* %EAX
  %2229 = zext i32 %2228 to i64
  %2230 = load i64, i64* %PC
  %2231 = add i64 %2230, 6
  store i64 %2231, i64* %PC
  %2232 = inttoptr i64 %2227 to i32*
  store i32 %2228, i32* %2232
  %2233 = load i64, i64* %PC
  %2234 = add i64 %2233, 2
  store i64 %2234, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %2235 = load i64, i64* %PC
  %2236 = sub i64 %2235, 8557
  %2237 = load i64, i64* %PC
  %2238 = add i64 %2237, 5
  %2239 = load i64, i64* %PC
  %2240 = add i64 %2239, 5
  store i64 %2240, i64* %PC
  %2241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2242 = load i64, i64* %2241, align 8, !tbaa !2428
  %2243 = add i64 %2242, -8
  %2244 = inttoptr i64 %2243 to i64*
  store i64 %2238, i64* %2244
  store i64 %2243, i64* %2241, align 8, !tbaa !2428
  %2245 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2236, i64* %2245, align 8, !tbaa !2428
  %2246 = load i64, i64* %PC
  %2247 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %2246, %struct.Memory* %2202)
  %2248 = load i64, i64* %RCX
  %2249 = load i32, i32* %ECX
  %2250 = zext i32 %2249 to i64
  %2251 = load i64, i64* %PC
  %2252 = add i64 %2251, 2
  store i64 %2252, i64* %PC
  %2253 = xor i64 %2250, %2248
  %2254 = trunc i64 %2253 to i32
  %2255 = and i64 %2253, 4294967295
  store i64 %2255, i64* %RCX, align 8, !tbaa !2428
  %2256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2256, align 1, !tbaa !2432
  %2257 = and i32 %2254, 255
  %2258 = call i32 @llvm.ctpop.i32(i32 %2257) #16
  %2259 = trunc i32 %2258 to i8
  %2260 = and i8 %2259, 1
  %2261 = xor i8 %2260, 1
  %2262 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2261, i8* %2262, align 1, !tbaa !2446
  %2263 = icmp eq i32 %2254, 0
  %2264 = zext i1 %2263 to i8
  %2265 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2264, i8* %2265, align 1, !tbaa !2447
  %2266 = lshr i32 %2254, 31
  %2267 = trunc i32 %2266 to i8
  %2268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2267, i8* %2268, align 1, !tbaa !2448
  %2269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2269, align 1, !tbaa !2449
  %2270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2270, align 1, !tbaa !2450
  %2271 = load i64, i64* %RBP
  %2272 = sub i64 %2271, 340
  %2273 = load i32, i32* %EAX
  %2274 = zext i32 %2273 to i64
  %2275 = load i64, i64* %PC
  %2276 = add i64 %2275, 6
  store i64 %2276, i64* %PC
  %2277 = inttoptr i64 %2272 to i32*
  store i32 %2273, i32* %2277
  %2278 = load i32, i32* %ECX
  %2279 = zext i32 %2278 to i64
  %2280 = load i64, i64* %PC
  %2281 = add i64 %2280, 2
  store i64 %2281, i64* %PC
  %2282 = and i64 %2279, 4294967295
  store i64 %2282, i64* %RAX, align 8, !tbaa !2428
  %2283 = load i64, i64* %RSP
  %2284 = load i64, i64* %PC
  %2285 = add i64 %2284, 7
  store i64 %2285, i64* %PC
  %2286 = add i64 352, %2283
  store i64 %2286, i64* %RSP, align 8, !tbaa !2428
  %2287 = icmp ult i64 %2286, %2283
  %2288 = icmp ult i64 %2286, 352
  %2289 = or i1 %2287, %2288
  %2290 = zext i1 %2289 to i8
  %2291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2290, i8* %2291, align 1, !tbaa !2432
  %2292 = trunc i64 %2286 to i32
  %2293 = and i32 %2292, 255
  %2294 = call i32 @llvm.ctpop.i32(i32 %2293) #16
  %2295 = trunc i32 %2294 to i8
  %2296 = and i8 %2295, 1
  %2297 = xor i8 %2296, 1
  %2298 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2297, i8* %2298, align 1, !tbaa !2446
  %2299 = xor i64 352, %2283
  %2300 = xor i64 %2299, %2286
  %2301 = lshr i64 %2300, 4
  %2302 = trunc i64 %2301 to i8
  %2303 = and i8 %2302, 1
  %2304 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2303, i8* %2304, align 1, !tbaa !2450
  %2305 = icmp eq i64 %2286, 0
  %2306 = zext i1 %2305 to i8
  %2307 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2306, i8* %2307, align 1, !tbaa !2447
  %2308 = lshr i64 %2286, 63
  %2309 = trunc i64 %2308 to i8
  %2310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2309, i8* %2310, align 1, !tbaa !2448
  %2311 = lshr i64 %2283, 63
  %2312 = xor i64 %2308, %2311
  %2313 = add nuw nsw i64 %2312, %2308
  %2314 = icmp eq i64 %2313, 2
  %2315 = zext i1 %2314 to i8
  %2316 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2315, i8* %2316, align 1, !tbaa !2449
  %2317 = load i64, i64* %PC
  %2318 = add i64 %2317, 1
  store i64 %2318, i64* %PC
  %2319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2320 = load i64, i64* %2319, align 8, !tbaa !2428
  %2321 = add i64 %2320, 8
  %2322 = inttoptr i64 %2320 to i64*
  %2323 = load i64, i64* %2322
  store i64 %2323, i64* %RBP, align 8, !tbaa !2428
  store i64 %2321, i64* %2319, align 8, !tbaa !2428
  %2324 = load i64, i64* %PC
  %2325 = add i64 %2324, 1
  store i64 %2325, i64* %PC
  %2326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %2327 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2328 = load i64, i64* %2327, align 8, !tbaa !2428
  %2329 = inttoptr i64 %2328 to i64*
  %2330 = load i64, i64* %2329
  store i64 %2330, i64* %2326, align 8, !tbaa !2428
  %2331 = add i64 %2328, 8
  store i64 %2331, i64* %2327, align 8, !tbaa !2428
  ret %struct.Memory* %2247

block_401d63:                                     ; preds = %block_401cca
  %2332 = load i64, i64* %PC
  %2333 = add i64 %2332, 10
  store i64 %2333, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %2334 = load i64, i64* %PC
  %2335 = add i64 %2334, 2163
  %2336 = load i64, i64* %PC
  %2337 = add i64 %2336, 5
  %2338 = load i64, i64* %PC
  %2339 = add i64 %2338, 5
  store i64 %2339, i64* %PC
  %2340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %2341 = load i64, i64* %2340, align 8, !tbaa !2428
  %2342 = add i64 %2341, -8
  %2343 = inttoptr i64 %2342 to i64*
  store i64 %2337, i64* %2343
  store i64 %2342, i64* %2340, align 8, !tbaa !2428
  %2344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2335, i64* %2344, align 8, !tbaa !2428
  %2345 = load i64, i64* %PC
  %2346 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %2345, %struct.Memory* %MEMORY.4)
  %2347 = load i64, i64* %PC
  %2348 = add i64 %2347, 10
  store i64 %2348, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 606), i64* %RDI, align 8, !tbaa !2428
  %2349 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2350 = load i64, i64* %PC
  %2351 = add i64 %2350, 8
  store i64 %2351, i64* %PC
  %2352 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 72) to double*)
  %2353 = bitcast i8* %2349 to double*
  store double %2352, double* %2353, align 1, !tbaa !2452
  %2354 = getelementptr inbounds i8, i8* %2349, i64 8
  %2355 = bitcast i8* %2354 to double*
  store double 0.000000e+00, double* %2355, align 1, !tbaa !2452
  %2356 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2357 = load i64, i64* %PC
  %2358 = add i64 %2357, 8
  store i64 %2358, i64* %PC
  %2359 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 168) to double*)
  %2360 = bitcast i8* %2356 to double*
  store double %2359, double* %2360, align 1, !tbaa !2452
  %2361 = getelementptr inbounds i8, i8* %2356, i64 8
  %2362 = bitcast i8* %2361 to double*
  store double 0.000000e+00, double* %2362, align 1, !tbaa !2452
  %2363 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2364 = load i64, i64* %PC
  %2365 = add i64 %2364, 8
  store i64 %2365, i64* %PC
  %2366 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 176) to double*)
  %2367 = bitcast i8* %2363 to double*
  store double %2366, double* %2367, align 1, !tbaa !2452
  %2368 = getelementptr inbounds i8, i8* %2363, i64 8
  %2369 = bitcast i8* %2368 to double*
  store double 0.000000e+00, double* %2369, align 1, !tbaa !2452
  %2370 = load i64, i64* %PC
  %2371 = add i64 %2370, 10
  store i64 %2371, i64* %PC
  store i64 -9223372036854775808, i64* %RCX, align 8, !tbaa !2428
  %2372 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2373 = load i64, i64* %PC
  %2374 = add i64 %2373, 8
  store i64 %2374, i64* %PC
  %2375 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 184) to double*)
  %2376 = bitcast i8* %2372 to double*
  store double %2375, double* %2376, align 1, !tbaa !2452
  %2377 = getelementptr inbounds i8, i8* %2372, i64 8
  %2378 = bitcast i8* %2377 to double*
  store double 0.000000e+00, double* %2378, align 1, !tbaa !2452
  %2379 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2380 = load i64, i64* %PC
  %2381 = add i64 %2380, 9
  store i64 %2381, i64* %PC
  %2382 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %2383 = bitcast i8* %2379 to double*
  store double %2382, double* %2383, align 1, !tbaa !2452
  %2384 = getelementptr inbounds i8, i8* %2379, i64 8
  %2385 = bitcast i8* %2384 to double*
  store double 0.000000e+00, double* %2385, align 1, !tbaa !2452
  %2386 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2387 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2388 = load i64, i64* %PC
  %2389 = add i64 %2388, 9
  store i64 %2389, i64* %PC
  %2390 = bitcast i8* %2387 to double*
  %2391 = load double, double* %2390, align 1
  %2392 = getelementptr inbounds i8, i8* %2387, i64 8
  %2393 = bitcast i8* %2392 to i64*
  %2394 = load i64, i64* %2393, align 1
  %2395 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %2396 = fmul double %2391, %2395
  %2397 = bitcast i8* %2386 to double*
  store double %2396, double* %2397, align 1, !tbaa !2452
  %2398 = getelementptr inbounds i8, i8* %2386, i64 8
  %2399 = bitcast i8* %2398 to i64*
  store i64 %2394, i64* %2399, align 1, !tbaa !2452
  %2400 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2401 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2402 = load i64, i64* %PC
  %2403 = add i64 %2402, 9
  store i64 %2403, i64* %PC
  %2404 = bitcast i8* %2401 to double*
  %2405 = load double, double* %2404, align 1
  %2406 = getelementptr inbounds i8, i8* %2401, i64 8
  %2407 = bitcast i8* %2406 to i64*
  %2408 = load i64, i64* %2407, align 1
  %2409 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %2410 = fsub double %2405, %2409
  %2411 = bitcast i8* %2400 to double*
  store double %2410, double* %2411, align 1, !tbaa !2452
  %2412 = getelementptr inbounds i8, i8* %2400, i64 8
  %2413 = bitcast i8* %2412 to i64*
  store i64 %2408, i64* %2413, align 1, !tbaa !2452
  %2414 = bitcast %union.vec128_t* %XMM4 to i8*
  %2415 = load i64, i64* %PC
  %2416 = add i64 %2415, 9
  store i64 %2416, i64* %PC
  %2417 = bitcast i8* %2414 to double*
  %2418 = load double, double* %2417, align 1
  store double %2418, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 168) to double*)
  %2419 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2420 = load i64, i64* %PC
  %2421 = add i64 %2420, 9
  store i64 %2421, i64* %PC
  %2422 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 168) to double*)
  %2423 = bitcast i8* %2419 to double*
  store double %2422, double* %2423, align 1, !tbaa !2452
  %2424 = getelementptr inbounds i8, i8* %2419, i64 8
  %2425 = bitcast i8* %2424 to double*
  store double 0.000000e+00, double* %2425, align 1, !tbaa !2452
  %2426 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2427 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2428 = bitcast %union.vec128_t* %XMM3 to i8*
  %2429 = load i64, i64* %PC
  %2430 = add i64 %2429, 4
  store i64 %2430, i64* %PC
  %2431 = bitcast i8* %2427 to double*
  %2432 = load double, double* %2431, align 1
  %2433 = getelementptr inbounds i8, i8* %2427, i64 8
  %2434 = bitcast i8* %2433 to i64*
  %2435 = load i64, i64* %2434, align 1
  %2436 = bitcast i8* %2428 to double*
  %2437 = load double, double* %2436, align 1
  %2438 = fdiv double %2432, %2437
  %2439 = bitcast i8* %2426 to double*
  store double %2438, double* %2439, align 1, !tbaa !2452
  %2440 = getelementptr inbounds i8, i8* %2426, i64 8
  %2441 = bitcast i8* %2440 to i64*
  store i64 %2435, i64* %2441, align 1, !tbaa !2452
  %2442 = bitcast %union.vec128_t* %XMM4 to i8*
  %2443 = load i64, i64* %PC
  %2444 = add i64 %2443, 9
  store i64 %2444, i64* %PC
  %2445 = bitcast i8* %2442 to double*
  %2446 = load double, double* %2445, align 1
  store double %2446, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 176) to double*)
  %2447 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2448 = load i64, i64* %PC
  %2449 = add i64 %2448, 9
  store i64 %2449, i64* %PC
  %2450 = load double, double* bitcast (%sa_type* @sa to double*)
  %2451 = bitcast i8* %2447 to double*
  store double %2450, double* %2451, align 1, !tbaa !2452
  %2452 = getelementptr inbounds i8, i8* %2447, i64 8
  %2453 = bitcast i8* %2452 to double*
  store double 0.000000e+00, double* %2453, align 1, !tbaa !2452
  %2454 = load i64, i64* %RBP
  %2455 = sub i64 %2454, 48
  %2456 = bitcast %union.vec128_t* %XMM3 to i8*
  %2457 = load i64, i64* %PC
  %2458 = add i64 %2457, 5
  store i64 %2458, i64* %PC
  %2459 = bitcast i8* %2456 to double*
  %2460 = load double, double* %2459, align 1
  %2461 = inttoptr i64 %2455 to double*
  store double %2460, double* %2461
  %2462 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2463 = load i64, i64* %RBP
  %2464 = sub i64 %2463, 48
  %2465 = load i64, i64* %PC
  %2466 = add i64 %2465, 5
  store i64 %2466, i64* %PC
  %2467 = inttoptr i64 %2464 to double*
  %2468 = load double, double* %2467
  %2469 = bitcast i8* %2462 to double*
  store double %2468, double* %2469, align 1, !tbaa !2452
  %2470 = getelementptr inbounds i8, i8* %2462, i64 8
  %2471 = bitcast i8* %2470 to double*
  store double 0.000000e+00, double* %2471, align 1, !tbaa !2452
  %2472 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2473 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2474 = load i64, i64* %RBP
  %2475 = sub i64 %2474, 48
  %2476 = load i64, i64* %PC
  %2477 = add i64 %2476, 5
  store i64 %2477, i64* %PC
  %2478 = bitcast i8* %2473 to double*
  %2479 = load double, double* %2478, align 1
  %2480 = getelementptr inbounds i8, i8* %2473, i64 8
  %2481 = bitcast i8* %2480 to i64*
  %2482 = load i64, i64* %2481, align 1
  %2483 = inttoptr i64 %2475 to double*
  %2484 = load double, double* %2483
  %2485 = fmul double %2479, %2484
  %2486 = bitcast i8* %2472 to double*
  store double %2485, double* %2486, align 1, !tbaa !2452
  %2487 = getelementptr inbounds i8, i8* %2472, i64 8
  %2488 = bitcast i8* %2487 to i64*
  store i64 %2482, i64* %2488, align 1, !tbaa !2452
  %2489 = load i64, i64* %RBP
  %2490 = sub i64 %2489, 24
  %2491 = bitcast %union.vec128_t* %XMM3 to i8*
  %2492 = load i64, i64* %PC
  %2493 = add i64 %2492, 5
  store i64 %2493, i64* %PC
  %2494 = bitcast i8* %2491 to double*
  %2495 = load double, double* %2494, align 1
  %2496 = inttoptr i64 %2490 to double*
  store double %2495, double* %2496
  %2497 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2498 = load i64, i64* %RBP
  %2499 = sub i64 %2498, 40
  %2500 = load i64, i64* %PC
  %2501 = add i64 %2500, 5
  store i64 %2501, i64* %PC
  %2502 = inttoptr i64 %2499 to double*
  %2503 = load double, double* %2502
  %2504 = bitcast i8* %2497 to double*
  store double %2503, double* %2504, align 1, !tbaa !2452
  %2505 = getelementptr inbounds i8, i8* %2497, i64 8
  %2506 = bitcast i8* %2505 to double*
  store double 0.000000e+00, double* %2506, align 1, !tbaa !2452
  %2507 = bitcast %union.vec128_t* %XMM3 to i8*
  %2508 = load i64, i64* %PC
  %2509 = add i64 %2508, 5
  store i64 %2509, i64* %PC
  %2510 = bitcast i8* %2507 to i64*
  %2511 = load i64, i64* %2510, align 1
  store i64 %2511, i64* %RDX, align 1, !tbaa !2428
  %2512 = load i64, i64* %RDX
  %2513 = load i64, i64* %RCX
  %2514 = load i64, i64* %PC
  %2515 = add i64 %2514, 3
  store i64 %2515, i64* %PC
  %2516 = xor i64 %2513, %2512
  store i64 %2516, i64* %RDX, align 8, !tbaa !2428
  %2517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %2517, align 1, !tbaa !2432
  %2518 = trunc i64 %2516 to i32
  %2519 = and i32 %2518, 255
  %2520 = call i32 @llvm.ctpop.i32(i32 %2519) #16
  %2521 = trunc i32 %2520 to i8
  %2522 = and i8 %2521, 1
  %2523 = xor i8 %2522, 1
  %2524 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2523, i8* %2524, align 1, !tbaa !2446
  %2525 = icmp eq i64 %2516, 0
  %2526 = zext i1 %2525 to i8
  %2527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2526, i8* %2527, align 1, !tbaa !2447
  %2528 = lshr i64 %2516, 63
  %2529 = trunc i64 %2528 to i8
  %2530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2529, i8* %2530, align 1, !tbaa !2448
  %2531 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %2531, align 1, !tbaa !2449
  %2532 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2532, align 1, !tbaa !2450
  %2533 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2534 = load i64, i64* %RDX
  %2535 = load i64, i64* %PC
  %2536 = add i64 %2535, 5
  store i64 %2536, i64* %PC
  %2537 = bitcast i8* %2533 to i64*
  store i64 %2534, i64* %2537, align 1, !tbaa !2428
  %2538 = getelementptr inbounds i8, i8* %2533, i64 8
  %2539 = bitcast i8* %2538 to i64*
  store i64 0, i64* %2539, align 1, !tbaa !2428
  %2540 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2541 = load i64, i64* %RBP
  %2542 = sub i64 %2541, 40
  %2543 = load i64, i64* %PC
  %2544 = add i64 %2543, 5
  store i64 %2544, i64* %PC
  %2545 = inttoptr i64 %2542 to double*
  %2546 = load double, double* %2545
  %2547 = bitcast i8* %2540 to double*
  store double %2546, double* %2547, align 1, !tbaa !2452
  %2548 = getelementptr inbounds i8, i8* %2540, i64 8
  %2549 = bitcast i8* %2548 to double*
  store double 0.000000e+00, double* %2549, align 1, !tbaa !2452
  %2550 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2551 = load i64, i64* %RBP
  %2552 = sub i64 %2551, 48
  %2553 = load i64, i64* %PC
  %2554 = add i64 %2553, 5
  store i64 %2554, i64* %PC
  %2555 = inttoptr i64 %2552 to double*
  %2556 = load double, double* %2555
  %2557 = bitcast i8* %2550 to double*
  store double %2556, double* %2557, align 1, !tbaa !2452
  %2558 = getelementptr inbounds i8, i8* %2550, i64 8
  %2559 = bitcast i8* %2558 to double*
  store double 0.000000e+00, double* %2559, align 1, !tbaa !2452
  %2560 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2561 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2562 = load i64, i64* %RBP
  %2563 = sub i64 %2562, 40
  %2564 = load i64, i64* %PC
  %2565 = add i64 %2564, 5
  store i64 %2565, i64* %PC
  %2566 = bitcast i8* %2561 to double*
  %2567 = load double, double* %2566, align 1
  %2568 = getelementptr inbounds i8, i8* %2561, i64 8
  %2569 = bitcast i8* %2568 to i64*
  %2570 = load i64, i64* %2569, align 1
  %2571 = inttoptr i64 %2563 to double*
  %2572 = load double, double* %2571
  %2573 = fadd double %2567, %2572
  %2574 = bitcast i8* %2560 to double*
  store double %2573, double* %2574, align 1, !tbaa !2452
  %2575 = getelementptr inbounds i8, i8* %2560, i64 8
  %2576 = bitcast i8* %2575 to i64*
  store i64 %2570, i64* %2576, align 1, !tbaa !2452
  %2577 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2578 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2579 = bitcast %union.vec128_t* %XMM5 to i8*
  %2580 = load i64, i64* %PC
  %2581 = add i64 %2580, 4
  store i64 %2581, i64* %PC
  %2582 = bitcast i8* %2578 to double*
  %2583 = load double, double* %2582, align 1
  %2584 = getelementptr inbounds i8, i8* %2578, i64 8
  %2585 = bitcast i8* %2584 to i64*
  %2586 = load i64, i64* %2585, align 1
  %2587 = bitcast i8* %2579 to double*
  %2588 = load double, double* %2587, align 1
  %2589 = fdiv double %2583, %2588
  %2590 = bitcast i8* %2577 to double*
  store double %2589, double* %2590, align 1, !tbaa !2452
  %2591 = getelementptr inbounds i8, i8* %2577, i64 8
  %2592 = bitcast i8* %2591 to i64*
  store i64 %2586, i64* %2592, align 1, !tbaa !2452
  %2593 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2594 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2595 = bitcast %union.vec128_t* %XMM4 to i8*
  %2596 = load i64, i64* %PC
  %2597 = add i64 %2596, 4
  store i64 %2597, i64* %PC
  %2598 = bitcast i8* %2594 to double*
  %2599 = load double, double* %2598, align 1
  %2600 = getelementptr inbounds i8, i8* %2594, i64 8
  %2601 = bitcast i8* %2600 to i64*
  %2602 = load i64, i64* %2601, align 1
  %2603 = bitcast i8* %2595 to double*
  %2604 = load double, double* %2603, align 1
  %2605 = fsub double %2599, %2604
  %2606 = bitcast i8* %2593 to double*
  store double %2605, double* %2606, align 1, !tbaa !2452
  %2607 = getelementptr inbounds i8, i8* %2593, i64 8
  %2608 = bitcast i8* %2607 to i64*
  store i64 %2602, i64* %2608, align 1, !tbaa !2452
  %2609 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2610 = load i64, i64* %RBP
  %2611 = sub i64 %2610, 48
  %2612 = load i64, i64* %PC
  %2613 = add i64 %2612, 5
  store i64 %2613, i64* %PC
  %2614 = inttoptr i64 %2611 to double*
  %2615 = load double, double* %2614
  %2616 = bitcast i8* %2609 to double*
  store double %2615, double* %2616, align 1, !tbaa !2452
  %2617 = getelementptr inbounds i8, i8* %2609, i64 8
  %2618 = bitcast i8* %2617 to double*
  store double 0.000000e+00, double* %2618, align 1, !tbaa !2452
  %2619 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2620 = load i64, i64* %RBP
  %2621 = sub i64 %2620, 24
  %2622 = load i64, i64* %PC
  %2623 = add i64 %2622, 5
  store i64 %2623, i64* %PC
  %2624 = inttoptr i64 %2621 to double*
  %2625 = load double, double* %2624
  %2626 = bitcast i8* %2619 to double*
  store double %2625, double* %2626, align 1, !tbaa !2452
  %2627 = getelementptr inbounds i8, i8* %2619, i64 8
  %2628 = bitcast i8* %2627 to double*
  store double 0.000000e+00, double* %2628, align 1, !tbaa !2452
  %2629 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2630 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2631 = load i64, i64* %RBP
  %2632 = sub i64 %2631, 40
  %2633 = load i64, i64* %PC
  %2634 = add i64 %2633, 5
  store i64 %2634, i64* %PC
  %2635 = bitcast i8* %2630 to double*
  %2636 = load double, double* %2635, align 1
  %2637 = getelementptr inbounds i8, i8* %2630, i64 8
  %2638 = bitcast i8* %2637 to i64*
  %2639 = load i64, i64* %2638, align 1
  %2640 = inttoptr i64 %2632 to double*
  %2641 = load double, double* %2640
  %2642 = fadd double %2636, %2641
  %2643 = bitcast i8* %2629 to double*
  store double %2642, double* %2643, align 1, !tbaa !2452
  %2644 = getelementptr inbounds i8, i8* %2629, i64 8
  %2645 = bitcast i8* %2644 to i64*
  store i64 %2639, i64* %2645, align 1, !tbaa !2452
  %2646 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2647 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2648 = bitcast %union.vec128_t* %XMM5 to i8*
  %2649 = load i64, i64* %PC
  %2650 = add i64 %2649, 4
  store i64 %2650, i64* %PC
  %2651 = bitcast i8* %2647 to double*
  %2652 = load double, double* %2651, align 1
  %2653 = getelementptr inbounds i8, i8* %2647, i64 8
  %2654 = bitcast i8* %2653 to i64*
  %2655 = load i64, i64* %2654, align 1
  %2656 = bitcast i8* %2648 to double*
  %2657 = load double, double* %2656, align 1
  %2658 = fdiv double %2652, %2657
  %2659 = bitcast i8* %2646 to double*
  store double %2658, double* %2659, align 1, !tbaa !2452
  %2660 = getelementptr inbounds i8, i8* %2646, i64 8
  %2661 = bitcast i8* %2660 to i64*
  store i64 %2655, i64* %2661, align 1, !tbaa !2452
  %2662 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2663 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2664 = bitcast %union.vec128_t* %XMM4 to i8*
  %2665 = load i64, i64* %PC
  %2666 = add i64 %2665, 4
  store i64 %2666, i64* %PC
  %2667 = bitcast i8* %2663 to double*
  %2668 = load double, double* %2667, align 1
  %2669 = getelementptr inbounds i8, i8* %2663, i64 8
  %2670 = bitcast i8* %2669 to i64*
  %2671 = load i64, i64* %2670, align 1
  %2672 = bitcast i8* %2664 to double*
  %2673 = load double, double* %2672, align 1
  %2674 = fsub double %2668, %2673
  %2675 = bitcast i8* %2662 to double*
  store double %2674, double* %2675, align 1, !tbaa !2452
  %2676 = getelementptr inbounds i8, i8* %2662, i64 8
  %2677 = bitcast i8* %2676 to i64*
  store i64 %2671, i64* %2677, align 1, !tbaa !2452
  %2678 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2679 = load i64, i64* %RBP
  %2680 = sub i64 %2679, 24
  %2681 = load i64, i64* %PC
  %2682 = add i64 %2681, 5
  store i64 %2682, i64* %PC
  %2683 = inttoptr i64 %2680 to double*
  %2684 = load double, double* %2683
  %2685 = bitcast i8* %2678 to double*
  store double %2684, double* %2685, align 1, !tbaa !2452
  %2686 = getelementptr inbounds i8, i8* %2678, i64 8
  %2687 = bitcast i8* %2686 to double*
  store double 0.000000e+00, double* %2687, align 1, !tbaa !2452
  %2688 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2689 = load i64, i64* %RBP
  %2690 = sub i64 %2689, 48
  %2691 = load i64, i64* %PC
  %2692 = add i64 %2691, 5
  store i64 %2692, i64* %PC
  %2693 = inttoptr i64 %2690 to double*
  %2694 = load double, double* %2693
  %2695 = bitcast i8* %2688 to double*
  store double %2694, double* %2695, align 1, !tbaa !2452
  %2696 = getelementptr inbounds i8, i8* %2688, i64 8
  %2697 = bitcast i8* %2696 to double*
  store double 0.000000e+00, double* %2697, align 1, !tbaa !2452
  %2698 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2699 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2700 = load i64, i64* %RBP
  %2701 = sub i64 %2700, 24
  %2702 = load i64, i64* %PC
  %2703 = add i64 %2702, 5
  store i64 %2703, i64* %PC
  %2704 = bitcast i8* %2699 to double*
  %2705 = load double, double* %2704, align 1
  %2706 = getelementptr inbounds i8, i8* %2699, i64 8
  %2707 = bitcast i8* %2706 to i64*
  %2708 = load i64, i64* %2707, align 1
  %2709 = inttoptr i64 %2701 to double*
  %2710 = load double, double* %2709
  %2711 = fmul double %2705, %2710
  %2712 = bitcast i8* %2698 to double*
  store double %2711, double* %2712, align 1, !tbaa !2452
  %2713 = getelementptr inbounds i8, i8* %2698, i64 8
  %2714 = bitcast i8* %2713 to i64*
  store i64 %2708, i64* %2714, align 1, !tbaa !2452
  %2715 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2716 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2717 = load i64, i64* %RBP
  %2718 = sub i64 %2717, 40
  %2719 = load i64, i64* %PC
  %2720 = add i64 %2719, 5
  store i64 %2720, i64* %PC
  %2721 = bitcast i8* %2716 to double*
  %2722 = load double, double* %2721, align 1
  %2723 = getelementptr inbounds i8, i8* %2716, i64 8
  %2724 = bitcast i8* %2723 to i64*
  %2725 = load i64, i64* %2724, align 1
  %2726 = inttoptr i64 %2718 to double*
  %2727 = load double, double* %2726
  %2728 = fadd double %2722, %2727
  %2729 = bitcast i8* %2715 to double*
  store double %2728, double* %2729, align 1, !tbaa !2452
  %2730 = getelementptr inbounds i8, i8* %2715, i64 8
  %2731 = bitcast i8* %2730 to i64*
  store i64 %2725, i64* %2731, align 1, !tbaa !2452
  %2732 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2733 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2734 = bitcast %union.vec128_t* %XMM5 to i8*
  %2735 = load i64, i64* %PC
  %2736 = add i64 %2735, 4
  store i64 %2736, i64* %PC
  %2737 = bitcast i8* %2733 to double*
  %2738 = load double, double* %2737, align 1
  %2739 = getelementptr inbounds i8, i8* %2733, i64 8
  %2740 = bitcast i8* %2739 to i64*
  %2741 = load i64, i64* %2740, align 1
  %2742 = bitcast i8* %2734 to double*
  %2743 = load double, double* %2742, align 1
  %2744 = fdiv double %2738, %2743
  %2745 = bitcast i8* %2732 to double*
  store double %2744, double* %2745, align 1, !tbaa !2452
  %2746 = getelementptr inbounds i8, i8* %2732, i64 8
  %2747 = bitcast i8* %2746 to i64*
  store i64 %2741, i64* %2747, align 1, !tbaa !2452
  %2748 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2749 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2750 = bitcast %union.vec128_t* %XMM4 to i8*
  %2751 = load i64, i64* %PC
  %2752 = add i64 %2751, 4
  store i64 %2752, i64* %PC
  %2753 = bitcast i8* %2749 to double*
  %2754 = load double, double* %2753, align 1
  %2755 = getelementptr inbounds i8, i8* %2749, i64 8
  %2756 = bitcast i8* %2755 to i64*
  %2757 = load i64, i64* %2756, align 1
  %2758 = bitcast i8* %2750 to double*
  %2759 = load double, double* %2758, align 1
  %2760 = fsub double %2754, %2759
  %2761 = bitcast i8* %2748 to double*
  store double %2760, double* %2761, align 1, !tbaa !2452
  %2762 = getelementptr inbounds i8, i8* %2748, i64 8
  %2763 = bitcast i8* %2762 to i64*
  store i64 %2757, i64* %2763, align 1, !tbaa !2452
  %2764 = bitcast %union.vec128_t* %XMM3 to i8*
  %2765 = load i64, i64* %PC
  %2766 = add i64 %2765, 9
  store i64 %2766, i64* %PC
  %2767 = bitcast i8* %2764 to double*
  %2768 = load double, double* %2767, align 1
  store double %2768, double* bitcast (%sa_type* @sa to double*)
  %2769 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2770 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2771 = load i64, i64* %RBP
  %2772 = sub i64 %2771, 32
  %2773 = load i64, i64* %PC
  %2774 = add i64 %2773, 5
  store i64 %2774, i64* %PC
  %2775 = bitcast i8* %2770 to double*
  %2776 = load double, double* %2775, align 1
  %2777 = getelementptr inbounds i8, i8* %2770, i64 8
  %2778 = bitcast i8* %2777 to i64*
  %2779 = load i64, i64* %2778, align 1
  %2780 = inttoptr i64 %2772 to double*
  %2781 = load double, double* %2780
  %2782 = fmul double %2776, %2781
  %2783 = bitcast i8* %2769 to double*
  store double %2782, double* %2783, align 1, !tbaa !2452
  %2784 = getelementptr inbounds i8, i8* %2769, i64 8
  %2785 = bitcast i8* %2784 to i64*
  store i64 %2779, i64* %2785, align 1, !tbaa !2452
  %2786 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2787 = load i64, i64* %PC
  %2788 = add i64 %2787, 9
  store i64 %2788, i64* %PC
  %2789 = load double, double* bitcast (%sa_type* @sa to double*)
  %2790 = bitcast i8* %2786 to double*
  store double %2789, double* %2790, align 1, !tbaa !2452
  %2791 = getelementptr inbounds i8, i8* %2786, i64 8
  %2792 = bitcast i8* %2791 to double*
  store double 0.000000e+00, double* %2792, align 1, !tbaa !2452
  %2793 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2794 = load i64, i64* %PC
  %2795 = add i64 %2794, 9
  store i64 %2795, i64* %PC
  %2796 = load double, double* bitcast (%two_type* @two to double*)
  %2797 = bitcast i8* %2793 to double*
  store double %2796, double* %2797, align 1, !tbaa !2452
  %2798 = getelementptr inbounds i8, i8* %2793, i64 8
  %2799 = bitcast i8* %2798 to double*
  store double 0.000000e+00, double* %2799, align 1, !tbaa !2452
  %2800 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2801 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2802 = load i64, i64* %RBP
  %2803 = sub i64 %2802, 16
  %2804 = load i64, i64* %PC
  %2805 = add i64 %2804, 5
  store i64 %2805, i64* %PC
  %2806 = bitcast i8* %2801 to double*
  %2807 = load double, double* %2806, align 1
  %2808 = getelementptr inbounds i8, i8* %2801, i64 8
  %2809 = bitcast i8* %2808 to i64*
  %2810 = load i64, i64* %2809, align 1
  %2811 = inttoptr i64 %2803 to double*
  %2812 = load double, double* %2811
  %2813 = fmul double %2807, %2812
  %2814 = bitcast i8* %2800 to double*
  store double %2813, double* %2814, align 1, !tbaa !2452
  %2815 = getelementptr inbounds i8, i8* %2800, i64 8
  %2816 = bitcast i8* %2815 to i64*
  store i64 %2810, i64* %2816, align 1, !tbaa !2452
  %2817 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2818 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2819 = bitcast %union.vec128_t* %XMM4 to i8*
  %2820 = load i64, i64* %PC
  %2821 = add i64 %2820, 4
  store i64 %2821, i64* %PC
  %2822 = bitcast i8* %2818 to double*
  %2823 = load double, double* %2822, align 1
  %2824 = getelementptr inbounds i8, i8* %2818, i64 8
  %2825 = bitcast i8* %2824 to i64*
  %2826 = load i64, i64* %2825, align 1
  %2827 = bitcast i8* %2819 to double*
  %2828 = load double, double* %2827, align 1
  %2829 = fadd double %2823, %2828
  %2830 = bitcast i8* %2817 to double*
  store double %2829, double* %2830, align 1, !tbaa !2452
  %2831 = getelementptr inbounds i8, i8* %2817, i64 8
  %2832 = bitcast i8* %2831 to i64*
  store i64 %2826, i64* %2832, align 1, !tbaa !2452
  %2833 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2834 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2835 = bitcast %union.vec128_t* %XMM3 to i8*
  %2836 = load i64, i64* %PC
  %2837 = add i64 %2836, 4
  store i64 %2837, i64* %PC
  %2838 = bitcast i8* %2834 to double*
  %2839 = load double, double* %2838, align 1
  %2840 = getelementptr inbounds i8, i8* %2834, i64 8
  %2841 = bitcast i8* %2840 to i64*
  %2842 = load i64, i64* %2841, align 1
  %2843 = bitcast i8* %2835 to double*
  %2844 = load double, double* %2843, align 1
  %2845 = fmul double %2839, %2844
  %2846 = bitcast i8* %2833 to double*
  store double %2845, double* %2846, align 1, !tbaa !2452
  %2847 = getelementptr inbounds i8, i8* %2833, i64 8
  %2848 = bitcast i8* %2847 to i64*
  store i64 %2842, i64* %2848, align 1, !tbaa !2452
  %2849 = bitcast %union.vec128_t* %XMM2 to i8*
  %2850 = load i64, i64* %PC
  %2851 = add i64 %2850, 9
  store i64 %2851, i64* %PC
  %2852 = bitcast i8* %2849 to double*
  %2853 = load double, double* %2852, align 1
  store double %2853, double* bitcast (%sa_type* @sa to double*)
  %2854 = load i64, i64* %PC
  %2855 = add i64 %2854, 10
  store i64 %2855, i64* %PC
  %2856 = load double, double* bitcast (%sa_type* @sa to double*)
  %2857 = call double @llvm.trunc.f64(double %2856) #16
  %2858 = call double @llvm.fabs.f64(double %2857) #16
  %2859 = fcmp ogt double %2858, 0x43E0000000000000
  %2860 = fptosi double %2857 to i64
  %2861 = select i1 %2859, i64 -9223372036854775808, i64 %2860
  store i64 %2861, i64* %RCX, align 8, !tbaa !2428
  %2862 = load i64, i64* %RCX
  %2863 = load i64, i64* %PC
  %2864 = add i64 %2863, 7
  store i64 %2864, i64* %PC
  %2865 = sext i64 %2862 to i128
  %2866 = and i128 %2865, -18446744073709551616
  %2867 = zext i64 %2862 to i128
  %2868 = or i128 %2866, %2867
  %2869 = mul nsw i128 -2000, %2868
  %2870 = trunc i128 %2869 to i64
  store i64 %2870, i64* %RCX, align 8, !tbaa !2428
  %2871 = sext i64 %2870 to i128
  %2872 = icmp ne i128 %2871, %2869
  %2873 = zext i1 %2872 to i8
  %2874 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2873, i8* %2874, align 1, !tbaa !2432
  %2875 = trunc i128 %2869 to i32
  %2876 = and i32 %2875, 255
  %2877 = call i32 @llvm.ctpop.i32(i32 %2876) #16
  %2878 = trunc i32 %2877 to i8
  %2879 = and i8 %2878, 1
  %2880 = xor i8 %2879, 1
  %2881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2880, i8* %2881, align 1, !tbaa !2446
  %2882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %2882, align 1, !tbaa !2450
  %2883 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %2883, align 1, !tbaa !2447
  %2884 = lshr i64 %2870, 63
  %2885 = trunc i64 %2884 to i8
  %2886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2885, i8* %2886, align 1, !tbaa !2448
  %2887 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2873, i8* %2887, align 1, !tbaa !2449
  %2888 = load i64, i64* %RBP
  %2889 = sub i64 %2888, 80
  %2890 = load i64, i64* %RCX
  %2891 = load i64, i64* %PC
  %2892 = add i64 %2891, 4
  store i64 %2892, i64* %PC
  %2893 = inttoptr i64 %2889 to i64*
  store i64 %2890, i64* %2893
  %2894 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2895 = load i64, i64* %RBP
  %2896 = sub i64 %2895, 80
  %2897 = load i64, i64* %PC
  %2898 = add i64 %2897, 6
  store i64 %2898, i64* %PC
  %2899 = inttoptr i64 %2896 to i64*
  %2900 = load i64, i64* %2899
  %2901 = sitofp i64 %2900 to double
  %2902 = bitcast i8* %2894 to double*
  store double %2901, double* %2902, align 1, !tbaa !2452
  %2903 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2904 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2905 = load i64, i64* %PC
  %2906 = add i64 %2905, 9
  store i64 %2906, i64* %PC
  %2907 = bitcast i8* %2904 to double*
  %2908 = load double, double* %2907, align 1
  %2909 = getelementptr inbounds i8, i8* %2904, i64 8
  %2910 = bitcast i8* %2909 to i64*
  %2911 = load i64, i64* %2910, align 1
  %2912 = load double, double* bitcast (%scale_type* @scale to double*)
  %2913 = fdiv double %2908, %2912
  %2914 = bitcast i8* %2903 to double*
  store double %2913, double* %2914, align 1, !tbaa !2452
  %2915 = getelementptr inbounds i8, i8* %2903, i64 8
  %2916 = bitcast i8* %2915 to i64*
  store i64 %2911, i64* %2916, align 1, !tbaa !2452
  %2917 = bitcast %union.vec128_t* %XMM2 to i8*
  %2918 = load i64, i64* %PC
  %2919 = add i64 %2918, 5
  store i64 %2919, i64* %PC
  %2920 = bitcast i8* %2917 to double*
  %2921 = load double, double* %2920, align 1
  %2922 = call double @llvm.trunc.f64(double %2921) #16
  %2923 = call double @llvm.fabs.f64(double %2922) #16
  %2924 = fcmp ogt double %2923, 0x43E0000000000000
  %2925 = fptosi double %2922 to i64
  %2926 = select i1 %2924, i64 -9223372036854775808, i64 %2925
  store i64 %2926, i64* %RCX, align 8, !tbaa !2428
  %2927 = load i64, i64* %RBP
  %2928 = sub i64 %2927, 80
  %2929 = load i64, i64* %RCX
  %2930 = load i64, i64* %PC
  %2931 = add i64 %2930, 4
  store i64 %2931, i64* %PC
  %2932 = inttoptr i64 %2928 to i64*
  store i64 %2929, i64* %2932
  %2933 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2934 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2935 = load i64, i64* %PC
  %2936 = add i64 %2935, 9
  store i64 %2936, i64* %PC
  %2937 = bitcast i8* %2934 to double*
  %2938 = load double, double* %2937, align 1
  %2939 = getelementptr inbounds i8, i8* %2934, i64 8
  %2940 = bitcast i8* %2939 to i64*
  %2941 = load i64, i64* %2940, align 1
  %2942 = load double, double* bitcast (%sa_type* @sa to double*)
  %2943 = fadd double %2938, %2942
  %2944 = bitcast i8* %2933 to double*
  store double %2943, double* %2944, align 1, !tbaa !2452
  %2945 = getelementptr inbounds i8, i8* %2933, i64 8
  %2946 = bitcast i8* %2945 to i64*
  store i64 %2941, i64* %2946, align 1, !tbaa !2452
  %2947 = bitcast %union.vec128_t* %XMM1 to i8*
  %2948 = load i64, i64* %PC
  %2949 = add i64 %2948, 9
  store i64 %2949, i64* %PC
  %2950 = bitcast i8* %2947 to double*
  %2951 = load double, double* %2950, align 1
  store double %2951, double* bitcast (%sc_type* @sc to double*)
  %2952 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2953 = load i64, i64* %PC
  %2954 = add i64 %2953, 9
  store i64 %2954, i64* %PC
  %2955 = load double, double* bitcast (%one_type* @one to double*)
  %2956 = bitcast i8* %2952 to double*
  store double %2955, double* %2956, align 1, !tbaa !2452
  %2957 = getelementptr inbounds i8, i8* %2952, i64 8
  %2958 = bitcast i8* %2957 to double*
  store double 0.000000e+00, double* %2958, align 1, !tbaa !2452
  %2959 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2960 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2961 = load i64, i64* %PC
  %2962 = add i64 %2961, 9
  store i64 %2962, i64* %PC
  %2963 = bitcast i8* %2960 to double*
  %2964 = load double, double* %2963, align 1
  %2965 = getelementptr inbounds i8, i8* %2960, i64 8
  %2966 = bitcast i8* %2965 to i64*
  %2967 = load i64, i64* %2966, align 1
  %2968 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 176) to double*)
  %2969 = fdiv double %2964, %2968
  %2970 = bitcast i8* %2959 to double*
  store double %2969, double* %2970, align 1, !tbaa !2452
  %2971 = getelementptr inbounds i8, i8* %2959, i64 8
  %2972 = bitcast i8* %2971 to i64*
  store i64 %2967, i64* %2972, align 1, !tbaa !2452
  %2973 = bitcast %union.vec128_t* %XMM1 to i8*
  %2974 = load i64, i64* %PC
  %2975 = add i64 %2974, 9
  store i64 %2975, i64* %PC
  %2976 = bitcast i8* %2973 to double*
  %2977 = load double, double* %2976, align 1
  store double %2977, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 184) to double*)
  %2978 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2979 = bitcast %union.vec128_t* %XMM0 to i8*
  %2980 = load i64, i64* %PC
  %2981 = add i64 %2980, 3
  store i64 %2981, i64* %PC
  %2982 = bitcast i8* %2979 to <2 x i32>*
  %2983 = load <2 x i32>, <2 x i32>* %2982, align 1
  %2984 = getelementptr inbounds i8, i8* %2979, i64 8
  %2985 = bitcast i8* %2984 to <2 x i32>*
  %2986 = load <2 x i32>, <2 x i32>* %2985, align 1
  %2987 = extractelement <2 x i32> %2983, i32 0
  %2988 = bitcast i8* %2978 to i32*
  store i32 %2987, i32* %2988, align 1, !tbaa !2455
  %2989 = extractelement <2 x i32> %2983, i32 1
  %2990 = getelementptr inbounds i8, i8* %2978, i64 4
  %2991 = bitcast i8* %2990 to i32*
  store i32 %2989, i32* %2991, align 1, !tbaa !2455
  %2992 = extractelement <2 x i32> %2986, i32 0
  %2993 = getelementptr inbounds i8, i8* %2978, i64 8
  %2994 = bitcast i8* %2993 to i32*
  store i32 %2992, i32* %2994, align 1, !tbaa !2455
  %2995 = extractelement <2 x i32> %2986, i32 1
  %2996 = getelementptr inbounds i8, i8* %2978, i64 12
  %2997 = bitcast i8* %2996 to i32*
  store i32 %2995, i32* %2997, align 1, !tbaa !2455
  %2998 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2999 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3000 = load i64, i64* %PC
  %3001 = add i64 %3000, 9
  store i64 %3001, i64* %PC
  %3002 = bitcast i8* %2999 to double*
  %3003 = load double, double* %3002, align 1
  %3004 = getelementptr inbounds i8, i8* %2999, i64 8
  %3005 = bitcast i8* %3004 to i64*
  %3006 = load i64, i64* %3005, align 1
  %3007 = load double, double* bitcast (%sc_type* @sc to double*)
  %3008 = fmul double %3003, %3007
  %3009 = bitcast i8* %2998 to double*
  store double %3008, double* %3009, align 1, !tbaa !2452
  %3010 = getelementptr inbounds i8, i8* %2998, i64 8
  %3011 = bitcast i8* %3010 to i64*
  store i64 %3006, i64* %3011, align 1, !tbaa !2452
  %3012 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3013 = bitcast %union.vec128_t* %XMM0 to i8*
  %3014 = load i64, i64* %PC
  %3015 = add i64 %3014, 3
  store i64 %3015, i64* %PC
  %3016 = bitcast i8* %3013 to <2 x i32>*
  %3017 = load <2 x i32>, <2 x i32>* %3016, align 1
  %3018 = getelementptr inbounds i8, i8* %3013, i64 8
  %3019 = bitcast i8* %3018 to <2 x i32>*
  %3020 = load <2 x i32>, <2 x i32>* %3019, align 1
  %3021 = extractelement <2 x i32> %3017, i32 0
  %3022 = bitcast i8* %3012 to i32*
  store i32 %3021, i32* %3022, align 1, !tbaa !2455
  %3023 = extractelement <2 x i32> %3017, i32 1
  %3024 = getelementptr inbounds i8, i8* %3012, i64 4
  %3025 = bitcast i8* %3024 to i32*
  store i32 %3023, i32* %3025, align 1, !tbaa !2455
  %3026 = extractelement <2 x i32> %3020, i32 0
  %3027 = getelementptr inbounds i8, i8* %3012, i64 8
  %3028 = bitcast i8* %3027 to i32*
  store i32 %3026, i32* %3028, align 1, !tbaa !2455
  %3029 = extractelement <2 x i32> %3020, i32 1
  %3030 = getelementptr inbounds i8, i8* %3012, i64 12
  %3031 = bitcast i8* %3030 to i32*
  store i32 %3029, i32* %3031, align 1, !tbaa !2455
  %3032 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3033 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3034 = load i64, i64* %PC
  %3035 = add i64 %3034, 9
  store i64 %3035, i64* %PC
  %3036 = bitcast i8* %3033 to double*
  %3037 = load double, double* %3036, align 1
  %3038 = getelementptr inbounds i8, i8* %3033, i64 8
  %3039 = bitcast i8* %3038 to i64*
  %3040 = load i64, i64* %3039, align 1
  %3041 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 168) to double*)
  %3042 = fmul double %3037, %3041
  %3043 = bitcast i8* %3032 to double*
  store double %3042, double* %3043, align 1, !tbaa !2452
  %3044 = getelementptr inbounds i8, i8* %3032, i64 8
  %3045 = bitcast i8* %3044 to i64*
  store i64 %3040, i64* %3045, align 1, !tbaa !2452
  %3046 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3047 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3048 = load i64, i64* %PC
  %3049 = add i64 %3048, 9
  store i64 %3049, i64* %PC
  %3050 = bitcast i8* %3047 to double*
  %3051 = load double, double* %3050, align 1
  %3052 = getelementptr inbounds i8, i8* %3047, i64 8
  %3053 = bitcast i8* %3052 to i64*
  %3054 = load i64, i64* %3053, align 1
  %3055 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 184) to double*)
  %3056 = fmul double %3051, %3055
  %3057 = bitcast i8* %3046 to double*
  store double %3056, double* %3057, align 1, !tbaa !2452
  %3058 = getelementptr inbounds i8, i8* %3046, i64 8
  %3059 = bitcast i8* %3058 to i64*
  store i64 %3054, i64* %3059, align 1, !tbaa !2452
  %3060 = load i64, i64* %RBP
  %3061 = sub i64 %3060, 280
  %3062 = bitcast %union.vec128_t* %XMM0 to i8*
  %3063 = load i64, i64* %PC
  %3064 = add i64 %3063, 8
  store i64 %3064, i64* %PC
  %3065 = bitcast i8* %3062 to double*
  %3066 = load double, double* %3065, align 1
  %3067 = inttoptr i64 %3061 to double*
  store double %3066, double* %3067
  %3068 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3069 = bitcast %union.vec128_t* %XMM1 to i8*
  %3070 = load i64, i64* %PC
  %3071 = add i64 %3070, 3
  store i64 %3071, i64* %PC
  %3072 = bitcast i8* %3069 to <2 x i32>*
  %3073 = load <2 x i32>, <2 x i32>* %3072, align 1
  %3074 = getelementptr inbounds i8, i8* %3069, i64 8
  %3075 = bitcast i8* %3074 to <2 x i32>*
  %3076 = load <2 x i32>, <2 x i32>* %3075, align 1
  %3077 = extractelement <2 x i32> %3073, i32 0
  %3078 = bitcast i8* %3068 to i32*
  store i32 %3077, i32* %3078, align 1, !tbaa !2455
  %3079 = extractelement <2 x i32> %3073, i32 1
  %3080 = getelementptr inbounds i8, i8* %3068, i64 4
  %3081 = bitcast i8* %3080 to i32*
  store i32 %3079, i32* %3081, align 1, !tbaa !2455
  %3082 = extractelement <2 x i32> %3076, i32 0
  %3083 = getelementptr inbounds i8, i8* %3068, i64 8
  %3084 = bitcast i8* %3083 to i32*
  store i32 %3082, i32* %3084, align 1, !tbaa !2455
  %3085 = extractelement <2 x i32> %3076, i32 1
  %3086 = getelementptr inbounds i8, i8* %3068, i64 12
  %3087 = bitcast i8* %3086 to i32*
  store i32 %3085, i32* %3087, align 1, !tbaa !2455
  %3088 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3089 = bitcast %union.vec128_t* %XMM2 to i8*
  %3090 = load i64, i64* %PC
  %3091 = add i64 %3090, 3
  store i64 %3091, i64* %PC
  %3092 = bitcast i8* %3089 to <2 x i32>*
  %3093 = load <2 x i32>, <2 x i32>* %3092, align 1
  %3094 = getelementptr inbounds i8, i8* %3089, i64 8
  %3095 = bitcast i8* %3094 to <2 x i32>*
  %3096 = load <2 x i32>, <2 x i32>* %3095, align 1
  %3097 = extractelement <2 x i32> %3093, i32 0
  %3098 = bitcast i8* %3088 to i32*
  store i32 %3097, i32* %3098, align 1, !tbaa !2455
  %3099 = extractelement <2 x i32> %3093, i32 1
  %3100 = getelementptr inbounds i8, i8* %3088, i64 4
  %3101 = bitcast i8* %3100 to i32*
  store i32 %3099, i32* %3101, align 1, !tbaa !2455
  %3102 = extractelement <2 x i32> %3096, i32 0
  %3103 = getelementptr inbounds i8, i8* %3088, i64 8
  %3104 = bitcast i8* %3103 to i32*
  store i32 %3102, i32* %3104, align 1, !tbaa !2455
  %3105 = extractelement <2 x i32> %3096, i32 1
  %3106 = getelementptr inbounds i8, i8* %3088, i64 12
  %3107 = bitcast i8* %3106 to i32*
  store i32 %3105, i32* %3107, align 1, !tbaa !2455
  %3108 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3109 = load i64, i64* %RBP
  %3110 = sub i64 %3109, 280
  %3111 = load i64, i64* %PC
  %3112 = add i64 %3111, 8
  store i64 %3112, i64* %PC
  %3113 = inttoptr i64 %3110 to double*
  %3114 = load double, double* %3113
  %3115 = bitcast i8* %3108 to double*
  store double %3114, double* %3115, align 1, !tbaa !2452
  %3116 = getelementptr inbounds i8, i8* %3108, i64 8
  %3117 = bitcast i8* %3116 to double*
  store double 0.000000e+00, double* %3117, align 1, !tbaa !2452
  %3118 = load i64, i64* %RBP
  %3119 = sub i64 %3118, 284
  %3120 = load i32, i32* %EAX
  %3121 = zext i32 %3120 to i64
  %3122 = load i64, i64* %PC
  %3123 = add i64 %3122, 6
  store i64 %3123, i64* %PC
  %3124 = inttoptr i64 %3119 to i32*
  store i32 %3120, i32* %3124
  %3125 = load i64, i64* %PC
  %3126 = add i64 %3125, 2
  store i64 %3126, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %3127 = load i64, i64* %PC
  %3128 = sub i64 %3127, 6872
  %3129 = load i64, i64* %PC
  %3130 = add i64 %3129, 5
  %3131 = load i64, i64* %PC
  %3132 = add i64 %3131, 5
  store i64 %3132, i64* %PC
  %3133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3134 = load i64, i64* %3133, align 8, !tbaa !2428
  %3135 = add i64 %3134, -8
  %3136 = inttoptr i64 %3135 to i64*
  store i64 %3130, i64* %3136
  store i64 %3135, i64* %3133, align 8, !tbaa !2428
  %3137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3128, i64* %3137, align 8, !tbaa !2428
  %3138 = load i64, i64* %PC
  %3139 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %3138, %struct.Memory* %2346)
  %3140 = load i64, i64* %PC
  %3141 = add i64 %3140, 10
  store i64 %3141, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %3142 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3143 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3144 = bitcast %union.vec128_t* %XMM0 to i8*
  %3145 = load i64, i64* %PC
  %3146 = add i64 %3145, 3
  store i64 %3146, i64* %PC
  %3147 = bitcast i8* %3143 to i64*
  %3148 = load i64, i64* %3147, align 1
  %3149 = getelementptr inbounds i8, i8* %3143, i64 8
  %3150 = bitcast i8* %3149 to i64*
  %3151 = load i64, i64* %3150, align 1
  %3152 = bitcast i8* %3144 to i64*
  %3153 = load i64, i64* %3152, align 1
  %3154 = getelementptr inbounds i8, i8* %3144, i64 8
  %3155 = bitcast i8* %3154 to i64*
  %3156 = load i64, i64* %3155, align 1
  %3157 = xor i64 %3153, %3148
  %3158 = xor i64 %3156, %3151
  %3159 = trunc i64 %3157 to i32
  %3160 = lshr i64 %3157, 32
  %3161 = trunc i64 %3160 to i32
  %3162 = bitcast i8* %3142 to i32*
  store i32 %3159, i32* %3162, align 1, !tbaa !2454
  %3163 = getelementptr inbounds i8, i8* %3142, i64 4
  %3164 = bitcast i8* %3163 to i32*
  store i32 %3161, i32* %3164, align 1, !tbaa !2454
  %3165 = trunc i64 %3158 to i32
  %3166 = getelementptr inbounds i8, i8* %3142, i64 8
  %3167 = bitcast i8* %3166 to i32*
  store i32 %3165, i32* %3167, align 1, !tbaa !2454
  %3168 = lshr i64 %3158, 32
  %3169 = trunc i64 %3168 to i32
  %3170 = getelementptr inbounds i8, i8* %3142, i64 12
  %3171 = bitcast i8* %3170 to i32*
  store i32 %3169, i32* %3171, align 1, !tbaa !2454
  %3172 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3173 = load i64, i64* %PC
  %3174 = add i64 %3173, 9
  store i64 %3174, i64* %PC
  %3175 = load double, double* bitcast (%piref_type* @piref to double*)
  %3176 = bitcast i8* %3172 to double*
  store double %3175, double* %3176, align 1, !tbaa !2452
  %3177 = getelementptr inbounds i8, i8* %3172, i64 8
  %3178 = bitcast i8* %3177 to double*
  store double 0.000000e+00, double* %3178, align 1, !tbaa !2452
  %3179 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3180 = load i64, i64* %PC
  %3181 = add i64 %3180, 9
  store i64 %3181, i64* %PC
  %3182 = load double, double* bitcast (%three_type* @three to double*)
  %3183 = bitcast i8* %3179 to double*
  store double %3182, double* %3183, align 1, !tbaa !2452
  %3184 = getelementptr inbounds i8, i8* %3179, i64 8
  %3185 = bitcast i8* %3184 to double*
  store double 0.000000e+00, double* %3185, align 1, !tbaa !2452
  %3186 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3187 = load i64, i64* %RBP
  %3188 = sub i64 %3187, 80
  %3189 = load i64, i64* %PC
  %3190 = add i64 %3189, 6
  store i64 %3190, i64* %PC
  %3191 = inttoptr i64 %3188 to i64*
  %3192 = load i64, i64* %3191
  %3193 = sitofp i64 %3192 to double
  %3194 = bitcast i8* %3186 to double*
  store double %3193, double* %3194, align 1, !tbaa !2452
  %3195 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3196 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3197 = bitcast %union.vec128_t* %XMM3 to i8*
  %3198 = load i64, i64* %PC
  %3199 = add i64 %3198, 4
  store i64 %3199, i64* %PC
  %3200 = bitcast i8* %3196 to double*
  %3201 = load double, double* %3200, align 1
  %3202 = getelementptr inbounds i8, i8* %3196, i64 8
  %3203 = bitcast i8* %3202 to i64*
  %3204 = load i64, i64* %3203, align 1
  %3205 = bitcast i8* %3197 to double*
  %3206 = load double, double* %3205, align 1
  %3207 = fmul double %3201, %3206
  %3208 = bitcast i8* %3195 to double*
  store double %3207, double* %3208, align 1, !tbaa !2452
  %3209 = getelementptr inbounds i8, i8* %3195, i64 8
  %3210 = bitcast i8* %3209 to i64*
  store i64 %3204, i64* %3210, align 1, !tbaa !2452
  %3211 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3212 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3213 = bitcast %union.vec128_t* %XMM2 to i8*
  %3214 = load i64, i64* %PC
  %3215 = add i64 %3214, 4
  store i64 %3215, i64* %PC
  %3216 = bitcast i8* %3212 to double*
  %3217 = load double, double* %3216, align 1
  %3218 = getelementptr inbounds i8, i8* %3212, i64 8
  %3219 = bitcast i8* %3218 to i64*
  %3220 = load i64, i64* %3219, align 1
  %3221 = bitcast i8* %3213 to double*
  %3222 = load double, double* %3221, align 1
  %3223 = fdiv double %3217, %3222
  %3224 = bitcast i8* %3211 to double*
  store double %3223, double* %3224, align 1, !tbaa !2452
  %3225 = getelementptr inbounds i8, i8* %3211, i64 8
  %3226 = bitcast i8* %3225 to i64*
  store i64 %3220, i64* %3226, align 1, !tbaa !2452
  %3227 = load i64, i64* %RBP
  %3228 = sub i64 %3227, 48
  %3229 = bitcast %union.vec128_t* %XMM1 to i8*
  %3230 = load i64, i64* %PC
  %3231 = add i64 %3230, 5
  store i64 %3231, i64* %PC
  %3232 = bitcast i8* %3229 to double*
  %3233 = load double, double* %3232, align 1
  %3234 = inttoptr i64 %3228 to double*
  store double %3233, double* %3234
  %3235 = load i64, i64* %RBP
  %3236 = sub i64 %3235, 16
  %3237 = bitcast %union.vec128_t* %XMM0 to i8*
  %3238 = load i64, i64* %PC
  %3239 = add i64 %3238, 5
  store i64 %3239, i64* %PC
  %3240 = bitcast i8* %3237 to double*
  %3241 = load double, double* %3240, align 1
  %3242 = inttoptr i64 %3236 to double*
  store double %3241, double* %3242
  %3243 = load i64, i64* %RBP
  %3244 = sub i64 %3243, 32
  %3245 = bitcast %union.vec128_t* %XMM0 to i8*
  %3246 = load i64, i64* %PC
  %3247 = add i64 %3246, 5
  store i64 %3247, i64* %PC
  %3248 = bitcast i8* %3245 to double*
  %3249 = load double, double* %3248, align 1
  %3250 = inttoptr i64 %3244 to double*
  store double %3249, double* %3250
  %3251 = load i64, i64* %RBP
  %3252 = sub i64 %3251, 288
  %3253 = load i32, i32* %EAX
  %3254 = zext i32 %3253 to i64
  %3255 = load i64, i64* %PC
  %3256 = add i64 %3255, 6
  store i64 %3256, i64* %PC
  %3257 = inttoptr i64 %3252 to i32*
  store i32 %3253, i32* %3257
  %3258 = load i64, i64* %PC
  %3259 = add i64 %3258, 1649
  %3260 = load i64, i64* %PC
  %3261 = add i64 %3260, 5
  %3262 = load i64, i64* %PC
  %3263 = add i64 %3262, 5
  store i64 %3263, i64* %PC
  %3264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3265 = load i64, i64* %3264, align 8, !tbaa !2428
  %3266 = add i64 %3265, -8
  %3267 = inttoptr i64 %3266 to i64*
  store i64 %3261, i64* %3267
  store i64 %3266, i64* %3264, align 8, !tbaa !2428
  %3268 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3259, i64* %3268, align 8, !tbaa !2428
  %3269 = load i64, i64* %PC
  %3270 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %3269, %struct.Memory* %3139)
  %3271 = load i64, i64* %RBP
  %3272 = sub i64 %3271, 72
  %3273 = load i64, i64* %PC
  %3274 = add i64 %3273, 8
  store i64 %3274, i64* %PC
  %3275 = inttoptr i64 %3272 to i64*
  store i64 1, i64* %3275
  %3276 = load i64, i64* %RBP
  %3277 = sub i64 %3276, 292
  %3278 = load i32, i32* %EAX
  %3279 = zext i32 %3278 to i64
  %3280 = load i64, i64* %PC
  %3281 = add i64 %3280, 6
  store i64 %3281, i64* %PC
  %3282 = inttoptr i64 %3277 to i32*
  store i32 %3278, i32* %3282
  br label %block_401f82

block_4014ff:                                     ; preds = %block_401514, %block_401259
  %MEMORY.0 = phi %struct.Memory* [ %7541, %block_401259 ], [ %MEMORY.0, %block_401514 ]
  %3283 = load i64, i64* %RBP
  %3284 = sub i64 %3283, 72
  %3285 = load i64, i64* %PC
  %3286 = add i64 %3285, 4
  store i64 %3286, i64* %PC
  %3287 = inttoptr i64 %3284 to i64*
  %3288 = load i64, i64* %3287
  store i64 %3288, i64* %RAX, align 8, !tbaa !2428
  %3289 = load i64, i64* %RBP
  %3290 = sub i64 %3289, 80
  %3291 = load i64, i64* %PC
  %3292 = add i64 %3291, 4
  store i64 %3292, i64* %PC
  %3293 = inttoptr i64 %3290 to i64*
  %3294 = load i64, i64* %3293
  store i64 %3294, i64* %RCX, align 8, !tbaa !2428
  %3295 = load i64, i64* %RCX
  %3296 = load i64, i64* %PC
  %3297 = add i64 %3296, 4
  store i64 %3297, i64* %PC
  %3298 = sub i64 %3295, 1
  store i64 %3298, i64* %RCX, align 8, !tbaa !2428
  %3299 = icmp ult i64 %3295, 1
  %3300 = zext i1 %3299 to i8
  %3301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3300, i8* %3301, align 1, !tbaa !2432
  %3302 = trunc i64 %3298 to i32
  %3303 = and i32 %3302, 255
  %3304 = call i32 @llvm.ctpop.i32(i32 %3303) #16
  %3305 = trunc i32 %3304 to i8
  %3306 = and i8 %3305, 1
  %3307 = xor i8 %3306, 1
  %3308 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3307, i8* %3308, align 1, !tbaa !2446
  %3309 = xor i64 1, %3295
  %3310 = xor i64 %3309, %3298
  %3311 = lshr i64 %3310, 4
  %3312 = trunc i64 %3311 to i8
  %3313 = and i8 %3312, 1
  %3314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3313, i8* %3314, align 1, !tbaa !2450
  %3315 = icmp eq i64 %3298, 0
  %3316 = zext i1 %3315 to i8
  %3317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3316, i8* %3317, align 1, !tbaa !2447
  %3318 = lshr i64 %3298, 63
  %3319 = trunc i64 %3318 to i8
  %3320 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3319, i8* %3320, align 1, !tbaa !2448
  %3321 = lshr i64 %3295, 63
  %3322 = xor i64 %3318, %3321
  %3323 = add nuw nsw i64 %3322, %3321
  %3324 = icmp eq i64 %3323, 2
  %3325 = zext i1 %3324 to i8
  %3326 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3325, i8* %3326, align 1, !tbaa !2449
  %3327 = load i64, i64* %RAX
  %3328 = load i64, i64* %RCX
  %3329 = load i64, i64* %PC
  %3330 = add i64 %3329, 3
  store i64 %3330, i64* %PC
  %3331 = sub i64 %3327, %3328
  %3332 = icmp ult i64 %3327, %3328
  %3333 = zext i1 %3332 to i8
  %3334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3333, i8* %3334, align 1, !tbaa !2432
  %3335 = trunc i64 %3331 to i32
  %3336 = and i32 %3335, 255
  %3337 = call i32 @llvm.ctpop.i32(i32 %3336) #16
  %3338 = trunc i32 %3337 to i8
  %3339 = and i8 %3338, 1
  %3340 = xor i8 %3339, 1
  %3341 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3340, i8* %3341, align 1, !tbaa !2446
  %3342 = xor i64 %3328, %3327
  %3343 = xor i64 %3342, %3331
  %3344 = lshr i64 %3343, 4
  %3345 = trunc i64 %3344 to i8
  %3346 = and i8 %3345, 1
  %3347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3346, i8* %3347, align 1, !tbaa !2450
  %3348 = icmp eq i64 %3331, 0
  %3349 = zext i1 %3348 to i8
  %3350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3349, i8* %3350, align 1, !tbaa !2447
  %3351 = lshr i64 %3331, 63
  %3352 = trunc i64 %3351 to i8
  %3353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3352, i8* %3353, align 1, !tbaa !2448
  %3354 = lshr i64 %3327, 63
  %3355 = lshr i64 %3328, 63
  %3356 = xor i64 %3355, %3354
  %3357 = xor i64 %3351, %3354
  %3358 = add nuw nsw i64 %3357, %3356
  %3359 = icmp eq i64 %3358, 2
  %3360 = zext i1 %3359 to i8
  %3361 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3360, i8* %3361, align 1, !tbaa !2449
  %3362 = load i64, i64* %PC
  %3363 = add i64 %3362, 297
  %3364 = load i64, i64* %PC
  %3365 = add i64 %3364, 6
  %3366 = load i64, i64* %PC
  %3367 = add i64 %3366, 6
  store i64 %3367, i64* %PC
  %3368 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3369 = load i8, i8* %3368, align 1, !tbaa !2447
  %3370 = icmp eq i8 %3369, 0
  %3371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3372 = load i8, i8* %3371, align 1, !tbaa !2448
  %3373 = icmp ne i8 %3372, 0
  %3374 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3375 = load i8, i8* %3374, align 1, !tbaa !2449
  %3376 = icmp ne i8 %3375, 0
  %3377 = xor i1 %3373, %3376
  %3378 = xor i1 %3377, true
  %3379 = and i1 %3370, %3378
  %3380 = zext i1 %3379 to i8
  store i8 %3380, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3381 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3382 = select i1 %3379, i64 %3363, i64 %3365
  store i64 %3382, i64* %3381, align 8, !tbaa !2428
  %3383 = load i8, i8* %BRANCH_TAKEN
  %3384 = icmp eq i8 %3383, 1
  br i1 %3384, label %block_401637, label %block_401514

block_400bed:                                     ; preds = %block_400bdf
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %3385 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3386 = load i64, i64* %RBP
  %3387 = sub i64 %3386, 16
  %3388 = load i64, i64* %PC
  %3389 = add i64 %3388, 5
  store i64 %3389, i64* %PC
  %3390 = inttoptr i64 %3387 to double*
  %3391 = load double, double* %3390
  %3392 = bitcast i8* %3385 to double*
  store double %3391, double* %3392, align 1, !tbaa !2452
  %3393 = getelementptr inbounds i8, i8* %3385, i64 8
  %3394 = bitcast i8* %3393 to double*
  store double 0.000000e+00, double* %3394, align 1, !tbaa !2452
  %3395 = bitcast %union.vec128_t* %XMM0 to i8*
  %3396 = load i64, i64* %PC
  %3397 = add i64 %3396, 5
  store i64 %3397, i64* %PC
  %3398 = bitcast i8* %3395 to i64*
  %3399 = load i64, i64* %3398, align 1
  store i64 %3399, i64* %RCX, align 1, !tbaa !2428
  %3400 = load i64, i64* %RCX
  %3401 = load i64, i64* %RAX
  %3402 = load i64, i64* %PC
  %3403 = add i64 %3402, 3
  store i64 %3403, i64* %PC
  %3404 = xor i64 %3401, %3400
  store i64 %3404, i64* %RCX, align 8, !tbaa !2428
  %3405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3405, align 1, !tbaa !2432
  %3406 = trunc i64 %3404 to i32
  %3407 = and i32 %3406, 255
  %3408 = call i32 @llvm.ctpop.i32(i32 %3407) #16
  %3409 = trunc i32 %3408 to i8
  %3410 = and i8 %3409, 1
  %3411 = xor i8 %3410, 1
  %3412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3411, i8* %3412, align 1, !tbaa !2446
  %3413 = icmp eq i64 %3404, 0
  %3414 = zext i1 %3413 to i8
  %3415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3414, i8* %3415, align 1, !tbaa !2447
  %3416 = lshr i64 %3404, 63
  %3417 = trunc i64 %3416 to i8
  %3418 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3417, i8* %3418, align 1, !tbaa !2448
  %3419 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3419, align 1, !tbaa !2449
  %3420 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3420, align 1, !tbaa !2450
  %3421 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3422 = load i64, i64* %RCX
  %3423 = load i64, i64* %PC
  %3424 = add i64 %3423, 5
  store i64 %3424, i64* %PC
  %3425 = bitcast i8* %3421 to i64*
  store i64 %3422, i64* %3425, align 1, !tbaa !2428
  %3426 = getelementptr inbounds i8, i8* %3421, i64 8
  %3427 = bitcast i8* %3426 to i64*
  store i64 0, i64* %3427, align 1, !tbaa !2428
  %3428 = load i64, i64* %RBP
  %3429 = sub i64 %3428, 16
  %3430 = bitcast %union.vec128_t* %XMM0 to i8*
  %3431 = load i64, i64* %PC
  %3432 = add i64 %3431, 5
  store i64 %3432, i64* %PC
  %3433 = bitcast i8* %3430 to double*
  %3434 = load double, double* %3433, align 1
  %3435 = inttoptr i64 %3429 to double*
  store double %3434, double* %3435
  %3436 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3437 = load i64, i64* %PC
  %3438 = add i64 %3437, 9
  store i64 %3438, i64* %PC
  %3439 = load double, double* bitcast (%sa_type* @sa to double*)
  %3440 = bitcast i8* %3436 to double*
  store double %3439, double* %3440, align 1, !tbaa !2452
  %3441 = getelementptr inbounds i8, i8* %3436, i64 8
  %3442 = bitcast i8* %3441 to double*
  store double 0.000000e+00, double* %3442, align 1, !tbaa !2452
  %3443 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3444 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3445 = load i64, i64* %RBP
  %3446 = sub i64 %3445, 16
  %3447 = load i64, i64* %PC
  %3448 = add i64 %3447, 5
  store i64 %3448, i64* %PC
  %3449 = bitcast i8* %3444 to double*
  %3450 = load double, double* %3449, align 1
  %3451 = getelementptr inbounds i8, i8* %3444, i64 8
  %3452 = bitcast i8* %3451 to i64*
  %3453 = load i64, i64* %3452, align 1
  %3454 = inttoptr i64 %3446 to double*
  %3455 = load double, double* %3454
  %3456 = fadd double %3450, %3455
  %3457 = bitcast i8* %3443 to double*
  store double %3456, double* %3457, align 1, !tbaa !2452
  %3458 = getelementptr inbounds i8, i8* %3443, i64 8
  %3459 = bitcast i8* %3458 to i64*
  store i64 %3453, i64* %3459, align 1, !tbaa !2452
  %3460 = bitcast %union.vec128_t* %XMM0 to i8*
  %3461 = load i64, i64* %PC
  %3462 = add i64 %3461, 9
  store i64 %3462, i64* %PC
  %3463 = bitcast i8* %3460 to double*
  %3464 = load double, double* %3463, align 1
  store double %3464, double* bitcast (%sa_type* @sa to double*)
  %3465 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3466 = load i64, i64* %RBP
  %3467 = sub i64 %3466, 24
  %3468 = load i64, i64* %PC
  %3469 = add i64 %3468, 5
  store i64 %3469, i64* %PC
  %3470 = inttoptr i64 %3467 to double*
  %3471 = load double, double* %3470
  %3472 = bitcast i8* %3465 to double*
  store double %3471, double* %3472, align 1, !tbaa !2452
  %3473 = getelementptr inbounds i8, i8* %3465, i64 8
  %3474 = bitcast i8* %3473 to double*
  store double 0.000000e+00, double* %3474, align 1, !tbaa !2452
  %3475 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3476 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3477 = load i64, i64* %PC
  %3478 = add i64 %3477, 9
  store i64 %3478, i64* %PC
  %3479 = bitcast i8* %3476 to double*
  %3480 = load double, double* %3479, align 1
  %3481 = getelementptr inbounds i8, i8* %3476, i64 8
  %3482 = bitcast i8* %3481 to i64*
  %3483 = load i64, i64* %3482, align 1
  %3484 = load double, double* bitcast (%two_type* @two to double*)
  %3485 = fadd double %3480, %3484
  %3486 = bitcast i8* %3475 to double*
  store double %3485, double* %3486, align 1, !tbaa !2452
  %3487 = getelementptr inbounds i8, i8* %3475, i64 8
  %3488 = bitcast i8* %3487 to i64*
  store i64 %3483, i64* %3488, align 1, !tbaa !2452
  %3489 = load i64, i64* %RBP
  %3490 = sub i64 %3489, 24
  %3491 = bitcast %union.vec128_t* %XMM0 to i8*
  %3492 = load i64, i64* %PC
  %3493 = add i64 %3492, 5
  store i64 %3493, i64* %PC
  %3494 = bitcast i8* %3491 to double*
  %3495 = load double, double* %3494, align 1
  %3496 = inttoptr i64 %3490 to double*
  store double %3495, double* %3496
  %3497 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3498 = load i64, i64* %RBP
  %3499 = sub i64 %3498, 48
  %3500 = load i64, i64* %PC
  %3501 = add i64 %3500, 5
  store i64 %3501, i64* %PC
  %3502 = inttoptr i64 %3499 to double*
  %3503 = load double, double* %3502
  %3504 = bitcast i8* %3497 to double*
  store double %3503, double* %3504, align 1, !tbaa !2452
  %3505 = getelementptr inbounds i8, i8* %3497, i64 8
  %3506 = bitcast i8* %3505 to double*
  store double 0.000000e+00, double* %3506, align 1, !tbaa !2452
  %3507 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3508 = load i64, i64* %RBP
  %3509 = sub i64 %3508, 16
  %3510 = load i64, i64* %PC
  %3511 = add i64 %3510, 5
  store i64 %3511, i64* %PC
  %3512 = inttoptr i64 %3509 to double*
  %3513 = load double, double* %3512
  %3514 = bitcast i8* %3507 to double*
  store double %3513, double* %3514, align 1, !tbaa !2452
  %3515 = getelementptr inbounds i8, i8* %3507, i64 8
  %3516 = bitcast i8* %3515 to double*
  store double 0.000000e+00, double* %3516, align 1, !tbaa !2452
  %3517 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3518 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3519 = load i64, i64* %RBP
  %3520 = sub i64 %3519, 24
  %3521 = load i64, i64* %PC
  %3522 = add i64 %3521, 5
  store i64 %3522, i64* %PC
  %3523 = bitcast i8* %3518 to double*
  %3524 = load double, double* %3523, align 1
  %3525 = getelementptr inbounds i8, i8* %3518, i64 8
  %3526 = bitcast i8* %3525 to i64*
  %3527 = load i64, i64* %3526, align 1
  %3528 = inttoptr i64 %3520 to double*
  %3529 = load double, double* %3528
  %3530 = fsub double %3524, %3529
  %3531 = bitcast i8* %3517 to double*
  store double %3530, double* %3531, align 1, !tbaa !2452
  %3532 = getelementptr inbounds i8, i8* %3517, i64 8
  %3533 = bitcast i8* %3532 to i64*
  store i64 %3527, i64* %3533, align 1, !tbaa !2452
  %3534 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3535 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3536 = bitcast %union.vec128_t* %XMM1 to i8*
  %3537 = load i64, i64* %PC
  %3538 = add i64 %3537, 4
  store i64 %3538, i64* %PC
  %3539 = bitcast i8* %3535 to double*
  %3540 = load double, double* %3539, align 1
  %3541 = getelementptr inbounds i8, i8* %3535, i64 8
  %3542 = bitcast i8* %3541 to i64*
  %3543 = load i64, i64* %3542, align 1
  %3544 = bitcast i8* %3536 to double*
  %3545 = load double, double* %3544, align 1
  %3546 = fadd double %3540, %3545
  %3547 = bitcast i8* %3534 to double*
  store double %3546, double* %3547, align 1, !tbaa !2452
  %3548 = getelementptr inbounds i8, i8* %3534, i64 8
  %3549 = bitcast i8* %3548 to i64*
  store i64 %3543, i64* %3549, align 1, !tbaa !2452
  %3550 = load i64, i64* %RBP
  %3551 = sub i64 %3550, 48
  %3552 = bitcast %union.vec128_t* %XMM0 to i8*
  %3553 = load i64, i64* %PC
  %3554 = add i64 %3553, 5
  store i64 %3554, i64* %PC
  %3555 = bitcast i8* %3552 to double*
  %3556 = load double, double* %3555, align 1
  %3557 = inttoptr i64 %3551 to double*
  store double %3556, double* %3557
  %3558 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3559 = load i64, i64* %RBP
  %3560 = sub i64 %3559, 32
  %3561 = load i64, i64* %PC
  %3562 = add i64 %3561, 5
  store i64 %3562, i64* %PC
  %3563 = inttoptr i64 %3560 to double*
  %3564 = load double, double* %3563
  %3565 = bitcast i8* %3558 to double*
  store double %3564, double* %3565, align 1, !tbaa !2452
  %3566 = getelementptr inbounds i8, i8* %3558, i64 8
  %3567 = bitcast i8* %3566 to double*
  store double 0.000000e+00, double* %3567, align 1, !tbaa !2452
  %3568 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3569 = load i64, i64* %RBP
  %3570 = sub i64 %3569, 16
  %3571 = load i64, i64* %PC
  %3572 = add i64 %3571, 5
  store i64 %3572, i64* %PC
  %3573 = inttoptr i64 %3570 to double*
  %3574 = load double, double* %3573
  %3575 = bitcast i8* %3568 to double*
  store double %3574, double* %3575, align 1, !tbaa !2452
  %3576 = getelementptr inbounds i8, i8* %3568, i64 8
  %3577 = bitcast i8* %3576 to double*
  store double 0.000000e+00, double* %3577, align 1, !tbaa !2452
  %3578 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3579 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3580 = load i64, i64* %RBP
  %3581 = sub i64 %3580, 24
  %3582 = load i64, i64* %PC
  %3583 = add i64 %3582, 5
  store i64 %3583, i64* %PC
  %3584 = bitcast i8* %3579 to double*
  %3585 = load double, double* %3584, align 1
  %3586 = getelementptr inbounds i8, i8* %3579, i64 8
  %3587 = bitcast i8* %3586 to i64*
  %3588 = load i64, i64* %3587, align 1
  %3589 = inttoptr i64 %3581 to double*
  %3590 = load double, double* %3589
  %3591 = fmul double %3585, %3590
  %3592 = bitcast i8* %3578 to double*
  store double %3591, double* %3592, align 1, !tbaa !2452
  %3593 = getelementptr inbounds i8, i8* %3578, i64 8
  %3594 = bitcast i8* %3593 to i64*
  store i64 %3588, i64* %3594, align 1, !tbaa !2452
  %3595 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3596 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3597 = bitcast %union.vec128_t* %XMM1 to i8*
  %3598 = load i64, i64* %PC
  %3599 = add i64 %3598, 4
  store i64 %3599, i64* %PC
  %3600 = bitcast i8* %3596 to double*
  %3601 = load double, double* %3600, align 1
  %3602 = getelementptr inbounds i8, i8* %3596, i64 8
  %3603 = bitcast i8* %3602 to i64*
  %3604 = load i64, i64* %3603, align 1
  %3605 = bitcast i8* %3597 to double*
  %3606 = load double, double* %3605, align 1
  %3607 = fsub double %3601, %3606
  %3608 = bitcast i8* %3595 to double*
  store double %3607, double* %3608, align 1, !tbaa !2452
  %3609 = getelementptr inbounds i8, i8* %3595, i64 8
  %3610 = bitcast i8* %3609 to i64*
  store i64 %3604, i64* %3610, align 1, !tbaa !2452
  %3611 = load i64, i64* %RBP
  %3612 = sub i64 %3611, 32
  %3613 = bitcast %union.vec128_t* %XMM0 to i8*
  %3614 = load i64, i64* %PC
  %3615 = add i64 %3614, 5
  store i64 %3615, i64* %PC
  %3616 = bitcast i8* %3613 to double*
  %3617 = load double, double* %3616, align 1
  %3618 = inttoptr i64 %3612 to double*
  store double %3617, double* %3618
  %3619 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3620 = load i64, i64* %RBP
  %3621 = sub i64 %3620, 40
  %3622 = load i64, i64* %PC
  %3623 = add i64 %3622, 5
  store i64 %3623, i64* %PC
  %3624 = inttoptr i64 %3621 to double*
  %3625 = load double, double* %3624
  %3626 = bitcast i8* %3619 to double*
  store double %3625, double* %3626, align 1, !tbaa !2452
  %3627 = getelementptr inbounds i8, i8* %3619, i64 8
  %3628 = bitcast i8* %3627 to double*
  store double 0.000000e+00, double* %3628, align 1, !tbaa !2452
  %3629 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3630 = load i64, i64* %RBP
  %3631 = sub i64 %3630, 16
  %3632 = load i64, i64* %PC
  %3633 = add i64 %3632, 5
  store i64 %3633, i64* %PC
  %3634 = inttoptr i64 %3631 to double*
  %3635 = load double, double* %3634
  %3636 = bitcast i8* %3629 to double*
  store double %3635, double* %3636, align 1, !tbaa !2452
  %3637 = getelementptr inbounds i8, i8* %3629, i64 8
  %3638 = bitcast i8* %3637 to double*
  store double 0.000000e+00, double* %3638, align 1, !tbaa !2452
  %3639 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3640 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3641 = load i64, i64* %RBP
  %3642 = sub i64 %3641, 24
  %3643 = load i64, i64* %PC
  %3644 = add i64 %3643, 5
  store i64 %3644, i64* %PC
  %3645 = bitcast i8* %3640 to double*
  %3646 = load double, double* %3645, align 1
  %3647 = getelementptr inbounds i8, i8* %3640, i64 8
  %3648 = bitcast i8* %3647 to i64*
  %3649 = load i64, i64* %3648, align 1
  %3650 = inttoptr i64 %3642 to double*
  %3651 = load double, double* %3650
  %3652 = fdiv double %3646, %3651
  %3653 = bitcast i8* %3639 to double*
  store double %3652, double* %3653, align 1, !tbaa !2452
  %3654 = getelementptr inbounds i8, i8* %3639, i64 8
  %3655 = bitcast i8* %3654 to i64*
  store i64 %3649, i64* %3655, align 1, !tbaa !2452
  %3656 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3657 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3658 = bitcast %union.vec128_t* %XMM1 to i8*
  %3659 = load i64, i64* %PC
  %3660 = add i64 %3659, 4
  store i64 %3660, i64* %PC
  %3661 = bitcast i8* %3657 to double*
  %3662 = load double, double* %3661, align 1
  %3663 = getelementptr inbounds i8, i8* %3657, i64 8
  %3664 = bitcast i8* %3663 to i64*
  %3665 = load i64, i64* %3664, align 1
  %3666 = bitcast i8* %3658 to double*
  %3667 = load double, double* %3666, align 1
  %3668 = fadd double %3662, %3667
  %3669 = bitcast i8* %3656 to double*
  store double %3668, double* %3669, align 1, !tbaa !2452
  %3670 = getelementptr inbounds i8, i8* %3656, i64 8
  %3671 = bitcast i8* %3670 to i64*
  store i64 %3665, i64* %3671, align 1, !tbaa !2452
  %3672 = load i64, i64* %RBP
  %3673 = sub i64 %3672, 40
  %3674 = bitcast %union.vec128_t* %XMM0 to i8*
  %3675 = load i64, i64* %PC
  %3676 = add i64 %3675, 5
  store i64 %3676, i64* %PC
  %3677 = bitcast i8* %3674 to double*
  %3678 = load double, double* %3677, align 1
  %3679 = inttoptr i64 %3673 to double*
  store double %3678, double* %3679
  %3680 = load i64, i64* %RBP
  %3681 = sub i64 %3680, 72
  %3682 = load i64, i64* %PC
  %3683 = add i64 %3682, 4
  store i64 %3683, i64* %PC
  %3684 = inttoptr i64 %3681 to i64*
  %3685 = load i64, i64* %3684
  store i64 %3685, i64* %RAX, align 8, !tbaa !2428
  %3686 = load i64, i64* %RAX
  %3687 = load i64, i64* %PC
  %3688 = add i64 %3687, 4
  store i64 %3688, i64* %PC
  %3689 = add i64 1, %3686
  store i64 %3689, i64* %RAX, align 8, !tbaa !2428
  %3690 = icmp ult i64 %3689, %3686
  %3691 = icmp ult i64 %3689, 1
  %3692 = or i1 %3690, %3691
  %3693 = zext i1 %3692 to i8
  %3694 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3693, i8* %3694, align 1, !tbaa !2432
  %3695 = trunc i64 %3689 to i32
  %3696 = and i32 %3695, 255
  %3697 = call i32 @llvm.ctpop.i32(i32 %3696) #16
  %3698 = trunc i32 %3697 to i8
  %3699 = and i8 %3698, 1
  %3700 = xor i8 %3699, 1
  %3701 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3700, i8* %3701, align 1, !tbaa !2446
  %3702 = xor i64 1, %3686
  %3703 = xor i64 %3702, %3689
  %3704 = lshr i64 %3703, 4
  %3705 = trunc i64 %3704 to i8
  %3706 = and i8 %3705, 1
  %3707 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3706, i8* %3707, align 1, !tbaa !2450
  %3708 = icmp eq i64 %3689, 0
  %3709 = zext i1 %3708 to i8
  %3710 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3709, i8* %3710, align 1, !tbaa !2447
  %3711 = lshr i64 %3689, 63
  %3712 = trunc i64 %3711 to i8
  %3713 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3712, i8* %3713, align 1, !tbaa !2448
  %3714 = lshr i64 %3686, 63
  %3715 = xor i64 %3711, %3714
  %3716 = add nuw nsw i64 %3715, %3711
  %3717 = icmp eq i64 %3716, 2
  %3718 = zext i1 %3717 to i8
  %3719 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3718, i8* %3719, align 1, !tbaa !2449
  %3720 = load i64, i64* %RBP
  %3721 = sub i64 %3720, 72
  %3722 = load i64, i64* %RAX
  %3723 = load i64, i64* %PC
  %3724 = add i64 %3723, 4
  store i64 %3724, i64* %PC
  %3725 = inttoptr i64 %3721 to i64*
  store i64 %3722, i64* %3725
  %3726 = load i64, i64* %PC
  %3727 = sub i64 %3726, 173
  %3728 = load i64, i64* %PC
  %3729 = add i64 %3728, 5
  store i64 %3729, i64* %PC
  %3730 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3727, i64* %3730, align 8, !tbaa !2428
  br label %block_400bdf

block_4007e5:                                     ; preds = %block_40071b
  %3731 = load i64, i64* %PC
  %3732 = add i64 %3731, 10
  store i64 %3732, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %3733 = load i64, i64* %PC
  %3734 = add i64 %3733, 7665
  %3735 = load i64, i64* %PC
  %3736 = add i64 %3735, 5
  %3737 = load i64, i64* %PC
  %3738 = add i64 %3737, 5
  store i64 %3738, i64* %PC
  %3739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3740 = load i64, i64* %3739, align 8, !tbaa !2428
  %3741 = add i64 %3740, -8
  %3742 = inttoptr i64 %3741 to i64*
  store i64 %3736, i64* %3742
  store i64 %3741, i64* %3739, align 8, !tbaa !2428
  %3743 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3734, i64* %3743, align 8, !tbaa !2428
  %3744 = load i64, i64* %PC
  %3745 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %3744, %struct.Memory* %MEMORY.6)
  %3746 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3747 = load i64, i64* %PC
  %3748 = add i64 %3747, 9
  store i64 %3748, i64* %PC
  %3749 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %3750 = bitcast i8* %3746 to double*
  store double %3749, double* %3750, align 1, !tbaa !2452
  %3751 = getelementptr inbounds i8, i8* %3746, i64 8
  %3752 = bitcast i8* %3751 to double*
  store double 0.000000e+00, double* %3752, align 1, !tbaa !2452
  %3753 = bitcast %union.vec128_t* %XMM0 to i8*
  %3754 = load i64, i64* %PC
  %3755 = add i64 %3754, 9
  store i64 %3755, i64* %PC
  %3756 = bitcast i8* %3753 to double*
  %3757 = load double, double* %3756, align 1
  store double %3757, double* bitcast (%sa_type* @sa to double*)
  %3758 = load i64, i64* %RBP
  %3759 = sub i64 %3758, 88
  %3760 = load i64, i64* %PC
  %3761 = add i64 %3760, 4
  store i64 %3761, i64* %PC
  %3762 = inttoptr i64 %3759 to i64*
  %3763 = load i64, i64* %3762
  store i64 %3763, i64* %RDI, align 8, !tbaa !2428
  %3764 = load i64, i64* %RDI
  %3765 = load i64, i64* %RBP
  %3766 = sub i64 %3765, 64
  %3767 = load i64, i64* %PC
  %3768 = add i64 %3767, 4
  store i64 %3768, i64* %PC
  %3769 = inttoptr i64 %3766 to i64*
  %3770 = load i64, i64* %3769
  %3771 = sub i64 %3764, %3770
  %3772 = icmp ugt i64 %3770, %3764
  %3773 = zext i1 %3772 to i8
  %3774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3773, i8* %3774, align 1, !tbaa !2432
  %3775 = trunc i64 %3771 to i32
  %3776 = and i32 %3775, 255
  %3777 = call i32 @llvm.ctpop.i32(i32 %3776) #16
  %3778 = trunc i32 %3777 to i8
  %3779 = and i8 %3778, 1
  %3780 = xor i8 %3779, 1
  %3781 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3780, i8* %3781, align 1, !tbaa !2446
  %3782 = xor i64 %3770, %3764
  %3783 = xor i64 %3782, %3771
  %3784 = lshr i64 %3783, 4
  %3785 = trunc i64 %3784 to i8
  %3786 = and i8 %3785, 1
  %3787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3786, i8* %3787, align 1, !tbaa !2450
  %3788 = icmp eq i64 %3771, 0
  %3789 = zext i1 %3788 to i8
  %3790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3789, i8* %3790, align 1, !tbaa !2447
  %3791 = lshr i64 %3771, 63
  %3792 = trunc i64 %3791 to i8
  %3793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3792, i8* %3793, align 1, !tbaa !2448
  %3794 = lshr i64 %3764, 63
  %3795 = lshr i64 %3770, 63
  %3796 = xor i64 %3795, %3794
  %3797 = xor i64 %3791, %3794
  %3798 = add nuw nsw i64 %3797, %3796
  %3799 = icmp eq i64 %3798, 2
  %3800 = zext i1 %3799 to i8
  %3801 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3800, i8* %3801, align 1, !tbaa !2449
  %3802 = load i64, i64* %RBP
  %3803 = sub i64 %3802, 120
  %3804 = load i32, i32* %EAX
  %3805 = zext i32 %3804 to i64
  %3806 = load i64, i64* %PC
  %3807 = add i64 %3806, 3
  store i64 %3807, i64* %PC
  %3808 = inttoptr i64 %3803 to i32*
  store i32 %3804, i32* %3808
  %3809 = load i64, i64* %PC
  %3810 = add i64 %3809, 11
  %3811 = load i64, i64* %PC
  %3812 = add i64 %3811, 6
  %3813 = load i64, i64* %PC
  %3814 = add i64 %3813, 6
  store i64 %3814, i64* %PC
  %3815 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3816 = load i8, i8* %3815, align 1, !tbaa !2447
  %3817 = icmp eq i8 %3816, 0
  %3818 = zext i1 %3817 to i8
  store i8 %3818, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3819 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3820 = select i1 %3817, i64 %3810, i64 %3812
  store i64 %3820, i64* %3819, align 8, !tbaa !2428
  %3821 = load i8, i8* %BRANCH_TAKEN
  %3822 = icmp eq i8 %3821, 1
  %3823 = load i64, i64* %PC
  br i1 %3822, label %block_40081c, label %block_400817

block_401cdf:                                     ; preds = %block_401cca
  %3824 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3825 = load i64, i64* %RBP
  %3826 = sub i64 %3825, 72
  %3827 = load i64, i64* %PC
  %3828 = add i64 %3827, 6
  store i64 %3828, i64* %PC
  %3829 = inttoptr i64 %3826 to i64*
  %3830 = load i64, i64* %3829
  %3831 = sitofp i64 %3830 to double
  %3832 = bitcast i8* %3824 to double*
  store double %3831, double* %3832, align 1, !tbaa !2452
  %3833 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3834 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3835 = load i64, i64* %RBP
  %3836 = sub i64 %3835, 32
  %3837 = load i64, i64* %PC
  %3838 = add i64 %3837, 5
  store i64 %3838, i64* %PC
  %3839 = bitcast i8* %3834 to double*
  %3840 = load double, double* %3839, align 1
  %3841 = getelementptr inbounds i8, i8* %3834, i64 8
  %3842 = bitcast i8* %3841 to i64*
  %3843 = load i64, i64* %3842, align 1
  %3844 = inttoptr i64 %3836 to double*
  %3845 = load double, double* %3844
  %3846 = fmul double %3840, %3845
  %3847 = bitcast i8* %3833 to double*
  store double %3846, double* %3847, align 1, !tbaa !2452
  %3848 = getelementptr inbounds i8, i8* %3833, i64 8
  %3849 = bitcast i8* %3848 to i64*
  store i64 %3843, i64* %3849, align 1, !tbaa !2452
  %3850 = load i64, i64* %RBP
  %3851 = sub i64 %3850, 48
  %3852 = bitcast %union.vec128_t* %XMM0 to i8*
  %3853 = load i64, i64* %PC
  %3854 = add i64 %3853, 5
  store i64 %3854, i64* %PC
  %3855 = bitcast i8* %3852 to double*
  %3856 = load double, double* %3855, align 1
  %3857 = inttoptr i64 %3851 to double*
  store double %3856, double* %3857
  %3858 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3859 = load i64, i64* %RBP
  %3860 = sub i64 %3859, 48
  %3861 = load i64, i64* %PC
  %3862 = add i64 %3861, 5
  store i64 %3862, i64* %PC
  %3863 = inttoptr i64 %3860 to double*
  %3864 = load double, double* %3863
  %3865 = bitcast i8* %3858 to double*
  store double %3864, double* %3865, align 1, !tbaa !2452
  %3866 = getelementptr inbounds i8, i8* %3858, i64 8
  %3867 = bitcast i8* %3866 to double*
  store double 0.000000e+00, double* %3867, align 1, !tbaa !2452
  %3868 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3869 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3870 = load i64, i64* %RBP
  %3871 = sub i64 %3870, 48
  %3872 = load i64, i64* %PC
  %3873 = add i64 %3872, 5
  store i64 %3873, i64* %PC
  %3874 = bitcast i8* %3869 to double*
  %3875 = load double, double* %3874, align 1
  %3876 = getelementptr inbounds i8, i8* %3869, i64 8
  %3877 = bitcast i8* %3876 to i64*
  %3878 = load i64, i64* %3877, align 1
  %3879 = inttoptr i64 %3871 to double*
  %3880 = load double, double* %3879
  %3881 = fmul double %3875, %3880
  %3882 = bitcast i8* %3868 to double*
  store double %3881, double* %3882, align 1, !tbaa !2452
  %3883 = getelementptr inbounds i8, i8* %3868, i64 8
  %3884 = bitcast i8* %3883 to i64*
  store i64 %3878, i64* %3884, align 1, !tbaa !2452
  %3885 = load i64, i64* %RBP
  %3886 = sub i64 %3885, 24
  %3887 = bitcast %union.vec128_t* %XMM0 to i8*
  %3888 = load i64, i64* %PC
  %3889 = add i64 %3888, 5
  store i64 %3889, i64* %PC
  %3890 = bitcast i8* %3887 to double*
  %3891 = load double, double* %3890, align 1
  %3892 = inttoptr i64 %3886 to double*
  store double %3891, double* %3892
  %3893 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3894 = load i64, i64* %RBP
  %3895 = sub i64 %3894, 16
  %3896 = load i64, i64* %PC
  %3897 = add i64 %3896, 5
  store i64 %3897, i64* %PC
  %3898 = inttoptr i64 %3895 to double*
  %3899 = load double, double* %3898
  %3900 = bitcast i8* %3893 to double*
  store double %3899, double* %3900, align 1, !tbaa !2452
  %3901 = getelementptr inbounds i8, i8* %3893, i64 8
  %3902 = bitcast i8* %3901 to double*
  store double 0.000000e+00, double* %3902, align 1, !tbaa !2452
  %3903 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3904 = load i64, i64* %RBP
  %3905 = sub i64 %3904, 40
  %3906 = load i64, i64* %PC
  %3907 = add i64 %3906, 5
  store i64 %3907, i64* %PC
  %3908 = inttoptr i64 %3905 to double*
  %3909 = load double, double* %3908
  %3910 = bitcast i8* %3903 to double*
  store double %3909, double* %3910, align 1, !tbaa !2452
  %3911 = getelementptr inbounds i8, i8* %3903, i64 8
  %3912 = bitcast i8* %3911 to double*
  store double 0.000000e+00, double* %3912, align 1, !tbaa !2452
  %3913 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3914 = load i64, i64* %RBP
  %3915 = sub i64 %3914, 48
  %3916 = load i64, i64* %PC
  %3917 = add i64 %3916, 5
  store i64 %3917, i64* %PC
  %3918 = inttoptr i64 %3915 to double*
  %3919 = load double, double* %3918
  %3920 = bitcast i8* %3913 to double*
  store double %3919, double* %3920, align 1, !tbaa !2452
  %3921 = getelementptr inbounds i8, i8* %3913, i64 8
  %3922 = bitcast i8* %3921 to double*
  store double 0.000000e+00, double* %3922, align 1, !tbaa !2452
  %3923 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3924 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3925 = load i64, i64* %RBP
  %3926 = sub i64 %3925, 40
  %3927 = load i64, i64* %PC
  %3928 = add i64 %3927, 5
  store i64 %3928, i64* %PC
  %3929 = bitcast i8* %3924 to double*
  %3930 = load double, double* %3929, align 1
  %3931 = getelementptr inbounds i8, i8* %3924, i64 8
  %3932 = bitcast i8* %3931 to i64*
  %3933 = load i64, i64* %3932, align 1
  %3934 = inttoptr i64 %3926 to double*
  %3935 = load double, double* %3934
  %3936 = fadd double %3930, %3935
  %3937 = bitcast i8* %3923 to double*
  store double %3936, double* %3937, align 1, !tbaa !2452
  %3938 = getelementptr inbounds i8, i8* %3923, i64 8
  %3939 = bitcast i8* %3938 to i64*
  store i64 %3933, i64* %3939, align 1, !tbaa !2452
  %3940 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3941 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3942 = bitcast %union.vec128_t* %XMM2 to i8*
  %3943 = load i64, i64* %PC
  %3944 = add i64 %3943, 4
  store i64 %3944, i64* %PC
  %3945 = bitcast i8* %3941 to double*
  %3946 = load double, double* %3945, align 1
  %3947 = getelementptr inbounds i8, i8* %3941, i64 8
  %3948 = bitcast i8* %3947 to i64*
  %3949 = load i64, i64* %3948, align 1
  %3950 = bitcast i8* %3942 to double*
  %3951 = load double, double* %3950, align 1
  %3952 = fdiv double %3946, %3951
  %3953 = bitcast i8* %3940 to double*
  store double %3952, double* %3953, align 1, !tbaa !2452
  %3954 = getelementptr inbounds i8, i8* %3940, i64 8
  %3955 = bitcast i8* %3954 to i64*
  store i64 %3949, i64* %3955, align 1, !tbaa !2452
  %3956 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3957 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3958 = bitcast %union.vec128_t* %XMM1 to i8*
  %3959 = load i64, i64* %PC
  %3960 = add i64 %3959, 4
  store i64 %3960, i64* %PC
  %3961 = bitcast i8* %3957 to double*
  %3962 = load double, double* %3961, align 1
  %3963 = getelementptr inbounds i8, i8* %3957, i64 8
  %3964 = bitcast i8* %3963 to i64*
  %3965 = load i64, i64* %3964, align 1
  %3966 = bitcast i8* %3958 to double*
  %3967 = load double, double* %3966, align 1
  %3968 = fsub double %3962, %3967
  %3969 = bitcast i8* %3956 to double*
  store double %3968, double* %3969, align 1, !tbaa !2452
  %3970 = getelementptr inbounds i8, i8* %3956, i64 8
  %3971 = bitcast i8* %3970 to i64*
  store i64 %3965, i64* %3971, align 1, !tbaa !2452
  %3972 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3973 = load i64, i64* %RBP
  %3974 = sub i64 %3973, 48
  %3975 = load i64, i64* %PC
  %3976 = add i64 %3975, 5
  store i64 %3976, i64* %PC
  %3977 = inttoptr i64 %3974 to double*
  %3978 = load double, double* %3977
  %3979 = bitcast i8* %3972 to double*
  store double %3978, double* %3979, align 1, !tbaa !2452
  %3980 = getelementptr inbounds i8, i8* %3972, i64 8
  %3981 = bitcast i8* %3980 to double*
  store double 0.000000e+00, double* %3981, align 1, !tbaa !2452
  %3982 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3983 = load i64, i64* %RBP
  %3984 = sub i64 %3983, 24
  %3985 = load i64, i64* %PC
  %3986 = add i64 %3985, 5
  store i64 %3986, i64* %PC
  %3987 = inttoptr i64 %3984 to double*
  %3988 = load double, double* %3987
  %3989 = bitcast i8* %3982 to double*
  store double %3988, double* %3989, align 1, !tbaa !2452
  %3990 = getelementptr inbounds i8, i8* %3982, i64 8
  %3991 = bitcast i8* %3990 to double*
  store double 0.000000e+00, double* %3991, align 1, !tbaa !2452
  %3992 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3993 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3994 = load i64, i64* %RBP
  %3995 = sub i64 %3994, 40
  %3996 = load i64, i64* %PC
  %3997 = add i64 %3996, 5
  store i64 %3997, i64* %PC
  %3998 = bitcast i8* %3993 to double*
  %3999 = load double, double* %3998, align 1
  %4000 = getelementptr inbounds i8, i8* %3993, i64 8
  %4001 = bitcast i8* %4000 to i64*
  %4002 = load i64, i64* %4001, align 1
  %4003 = inttoptr i64 %3995 to double*
  %4004 = load double, double* %4003
  %4005 = fadd double %3999, %4004
  %4006 = bitcast i8* %3992 to double*
  store double %4005, double* %4006, align 1, !tbaa !2452
  %4007 = getelementptr inbounds i8, i8* %3992, i64 8
  %4008 = bitcast i8* %4007 to i64*
  store i64 %4002, i64* %4008, align 1, !tbaa !2452
  %4009 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4010 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4011 = bitcast %union.vec128_t* %XMM2 to i8*
  %4012 = load i64, i64* %PC
  %4013 = add i64 %4012, 4
  store i64 %4013, i64* %PC
  %4014 = bitcast i8* %4010 to double*
  %4015 = load double, double* %4014, align 1
  %4016 = getelementptr inbounds i8, i8* %4010, i64 8
  %4017 = bitcast i8* %4016 to i64*
  %4018 = load i64, i64* %4017, align 1
  %4019 = bitcast i8* %4011 to double*
  %4020 = load double, double* %4019, align 1
  %4021 = fdiv double %4015, %4020
  %4022 = bitcast i8* %4009 to double*
  store double %4021, double* %4022, align 1, !tbaa !2452
  %4023 = getelementptr inbounds i8, i8* %4009, i64 8
  %4024 = bitcast i8* %4023 to i64*
  store i64 %4018, i64* %4024, align 1, !tbaa !2452
  %4025 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4026 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4027 = bitcast %union.vec128_t* %XMM1 to i8*
  %4028 = load i64, i64* %PC
  %4029 = add i64 %4028, 4
  store i64 %4029, i64* %PC
  %4030 = bitcast i8* %4026 to double*
  %4031 = load double, double* %4030, align 1
  %4032 = getelementptr inbounds i8, i8* %4026, i64 8
  %4033 = bitcast i8* %4032 to i64*
  %4034 = load i64, i64* %4033, align 1
  %4035 = bitcast i8* %4027 to double*
  %4036 = load double, double* %4035, align 1
  %4037 = fsub double %4031, %4036
  %4038 = bitcast i8* %4025 to double*
  store double %4037, double* %4038, align 1, !tbaa !2452
  %4039 = getelementptr inbounds i8, i8* %4025, i64 8
  %4040 = bitcast i8* %4039 to i64*
  store i64 %4034, i64* %4040, align 1, !tbaa !2452
  %4041 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4042 = load i64, i64* %RBP
  %4043 = sub i64 %4042, 24
  %4044 = load i64, i64* %PC
  %4045 = add i64 %4044, 5
  store i64 %4045, i64* %PC
  %4046 = inttoptr i64 %4043 to double*
  %4047 = load double, double* %4046
  %4048 = bitcast i8* %4041 to double*
  store double %4047, double* %4048, align 1, !tbaa !2452
  %4049 = getelementptr inbounds i8, i8* %4041, i64 8
  %4050 = bitcast i8* %4049 to double*
  store double 0.000000e+00, double* %4050, align 1, !tbaa !2452
  %4051 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4052 = load i64, i64* %RBP
  %4053 = sub i64 %4052, 48
  %4054 = load i64, i64* %PC
  %4055 = add i64 %4054, 5
  store i64 %4055, i64* %PC
  %4056 = inttoptr i64 %4053 to double*
  %4057 = load double, double* %4056
  %4058 = bitcast i8* %4051 to double*
  store double %4057, double* %4058, align 1, !tbaa !2452
  %4059 = getelementptr inbounds i8, i8* %4051, i64 8
  %4060 = bitcast i8* %4059 to double*
  store double 0.000000e+00, double* %4060, align 1, !tbaa !2452
  %4061 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4062 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4063 = load i64, i64* %RBP
  %4064 = sub i64 %4063, 24
  %4065 = load i64, i64* %PC
  %4066 = add i64 %4065, 5
  store i64 %4066, i64* %PC
  %4067 = bitcast i8* %4062 to double*
  %4068 = load double, double* %4067, align 1
  %4069 = getelementptr inbounds i8, i8* %4062, i64 8
  %4070 = bitcast i8* %4069 to i64*
  %4071 = load i64, i64* %4070, align 1
  %4072 = inttoptr i64 %4064 to double*
  %4073 = load double, double* %4072
  %4074 = fmul double %4068, %4073
  %4075 = bitcast i8* %4061 to double*
  store double %4074, double* %4075, align 1, !tbaa !2452
  %4076 = getelementptr inbounds i8, i8* %4061, i64 8
  %4077 = bitcast i8* %4076 to i64*
  store i64 %4071, i64* %4077, align 1, !tbaa !2452
  %4078 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4079 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4080 = load i64, i64* %RBP
  %4081 = sub i64 %4080, 40
  %4082 = load i64, i64* %PC
  %4083 = add i64 %4082, 5
  store i64 %4083, i64* %PC
  %4084 = bitcast i8* %4079 to double*
  %4085 = load double, double* %4084, align 1
  %4086 = getelementptr inbounds i8, i8* %4079, i64 8
  %4087 = bitcast i8* %4086 to i64*
  %4088 = load i64, i64* %4087, align 1
  %4089 = inttoptr i64 %4081 to double*
  %4090 = load double, double* %4089
  %4091 = fadd double %4085, %4090
  %4092 = bitcast i8* %4078 to double*
  store double %4091, double* %4092, align 1, !tbaa !2452
  %4093 = getelementptr inbounds i8, i8* %4078, i64 8
  %4094 = bitcast i8* %4093 to i64*
  store i64 %4088, i64* %4094, align 1, !tbaa !2452
  %4095 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4096 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4097 = bitcast %union.vec128_t* %XMM2 to i8*
  %4098 = load i64, i64* %PC
  %4099 = add i64 %4098, 4
  store i64 %4099, i64* %PC
  %4100 = bitcast i8* %4096 to double*
  %4101 = load double, double* %4100, align 1
  %4102 = getelementptr inbounds i8, i8* %4096, i64 8
  %4103 = bitcast i8* %4102 to i64*
  %4104 = load i64, i64* %4103, align 1
  %4105 = bitcast i8* %4097 to double*
  %4106 = load double, double* %4105, align 1
  %4107 = fdiv double %4101, %4106
  %4108 = bitcast i8* %4095 to double*
  store double %4107, double* %4108, align 1, !tbaa !2452
  %4109 = getelementptr inbounds i8, i8* %4095, i64 8
  %4110 = bitcast i8* %4109 to i64*
  store i64 %4104, i64* %4110, align 1, !tbaa !2452
  %4111 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4112 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4113 = bitcast %union.vec128_t* %XMM1 to i8*
  %4114 = load i64, i64* %PC
  %4115 = add i64 %4114, 4
  store i64 %4115, i64* %PC
  %4116 = bitcast i8* %4112 to double*
  %4117 = load double, double* %4116, align 1
  %4118 = getelementptr inbounds i8, i8* %4112, i64 8
  %4119 = bitcast i8* %4118 to i64*
  %4120 = load i64, i64* %4119, align 1
  %4121 = bitcast i8* %4113 to double*
  %4122 = load double, double* %4121, align 1
  %4123 = fsub double %4117, %4122
  %4124 = bitcast i8* %4111 to double*
  store double %4123, double* %4124, align 1, !tbaa !2452
  %4125 = getelementptr inbounds i8, i8* %4111, i64 8
  %4126 = bitcast i8* %4125 to i64*
  store i64 %4120, i64* %4126, align 1, !tbaa !2452
  %4127 = load i64, i64* %RBP
  %4128 = sub i64 %4127, 16
  %4129 = bitcast %union.vec128_t* %XMM0 to i8*
  %4130 = load i64, i64* %PC
  %4131 = add i64 %4130, 5
  store i64 %4131, i64* %PC
  %4132 = bitcast i8* %4129 to double*
  %4133 = load double, double* %4132, align 1
  %4134 = inttoptr i64 %4128 to double*
  store double %4133, double* %4134
  %4135 = load i64, i64* %RBP
  %4136 = sub i64 %4135, 72
  %4137 = load i64, i64* %PC
  %4138 = add i64 %4137, 4
  store i64 %4138, i64* %PC
  %4139 = inttoptr i64 %4136 to i64*
  %4140 = load i64, i64* %4139
  store i64 %4140, i64* %RAX, align 8, !tbaa !2428
  %4141 = load i64, i64* %RAX
  %4142 = load i64, i64* %PC
  %4143 = add i64 %4142, 4
  store i64 %4143, i64* %PC
  %4144 = add i64 1, %4141
  store i64 %4144, i64* %RAX, align 8, !tbaa !2428
  %4145 = icmp ult i64 %4144, %4141
  %4146 = icmp ult i64 %4144, 1
  %4147 = or i1 %4145, %4146
  %4148 = zext i1 %4147 to i8
  %4149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4148, i8* %4149, align 1, !tbaa !2432
  %4150 = trunc i64 %4144 to i32
  %4151 = and i32 %4150, 255
  %4152 = call i32 @llvm.ctpop.i32(i32 %4151) #16
  %4153 = trunc i32 %4152 to i8
  %4154 = and i8 %4153, 1
  %4155 = xor i8 %4154, 1
  %4156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4155, i8* %4156, align 1, !tbaa !2446
  %4157 = xor i64 1, %4141
  %4158 = xor i64 %4157, %4144
  %4159 = lshr i64 %4158, 4
  %4160 = trunc i64 %4159 to i8
  %4161 = and i8 %4160, 1
  %4162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4161, i8* %4162, align 1, !tbaa !2450
  %4163 = icmp eq i64 %4144, 0
  %4164 = zext i1 %4163 to i8
  %4165 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4164, i8* %4165, align 1, !tbaa !2447
  %4166 = lshr i64 %4144, 63
  %4167 = trunc i64 %4166 to i8
  %4168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4167, i8* %4168, align 1, !tbaa !2448
  %4169 = lshr i64 %4141, 63
  %4170 = xor i64 %4166, %4169
  %4171 = add nuw nsw i64 %4170, %4166
  %4172 = icmp eq i64 %4171, 2
  %4173 = zext i1 %4172 to i8
  %4174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4173, i8* %4174, align 1, !tbaa !2449
  %4175 = load i64, i64* %RBP
  %4176 = sub i64 %4175, 72
  %4177 = load i64, i64* %RAX
  %4178 = load i64, i64* %PC
  %4179 = add i64 %4178, 4
  store i64 %4179, i64* %PC
  %4180 = inttoptr i64 %4176 to i64*
  store i64 %4177, i64* %4180
  %4181 = load i64, i64* %PC
  %4182 = sub i64 %4181, 148
  %4183 = load i64, i64* %PC
  %4184 = add i64 %4183, 5
  store i64 %4184, i64* %PC
  %4185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4182, i64* %4185, align 8, !tbaa !2428
  br label %block_401cca

block_400e74:                                     ; preds = %block_400e89, %block_400c91
  %MEMORY.1 = phi %struct.Memory* [ %12923, %block_400c91 ], [ %MEMORY.1, %block_400e89 ]
  %4186 = load i64, i64* %RBP
  %4187 = sub i64 %4186, 72
  %4188 = load i64, i64* %PC
  %4189 = add i64 %4188, 4
  store i64 %4189, i64* %PC
  %4190 = inttoptr i64 %4187 to i64*
  %4191 = load i64, i64* %4190
  store i64 %4191, i64* %RAX, align 8, !tbaa !2428
  %4192 = load i64, i64* %RBP
  %4193 = sub i64 %4192, 80
  %4194 = load i64, i64* %PC
  %4195 = add i64 %4194, 4
  store i64 %4195, i64* %PC
  %4196 = inttoptr i64 %4193 to i64*
  %4197 = load i64, i64* %4196
  store i64 %4197, i64* %RCX, align 8, !tbaa !2428
  %4198 = load i64, i64* %RCX
  %4199 = load i64, i64* %PC
  %4200 = add i64 %4199, 4
  store i64 %4200, i64* %PC
  %4201 = sub i64 %4198, 1
  store i64 %4201, i64* %RCX, align 8, !tbaa !2428
  %4202 = icmp ult i64 %4198, 1
  %4203 = zext i1 %4202 to i8
  %4204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4203, i8* %4204, align 1, !tbaa !2432
  %4205 = trunc i64 %4201 to i32
  %4206 = and i32 %4205, 255
  %4207 = call i32 @llvm.ctpop.i32(i32 %4206) #16
  %4208 = trunc i32 %4207 to i8
  %4209 = and i8 %4208, 1
  %4210 = xor i8 %4209, 1
  %4211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4210, i8* %4211, align 1, !tbaa !2446
  %4212 = xor i64 1, %4198
  %4213 = xor i64 %4212, %4201
  %4214 = lshr i64 %4213, 4
  %4215 = trunc i64 %4214 to i8
  %4216 = and i8 %4215, 1
  %4217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4216, i8* %4217, align 1, !tbaa !2450
  %4218 = icmp eq i64 %4201, 0
  %4219 = zext i1 %4218 to i8
  %4220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4219, i8* %4220, align 1, !tbaa !2447
  %4221 = lshr i64 %4201, 63
  %4222 = trunc i64 %4221 to i8
  %4223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4222, i8* %4223, align 1, !tbaa !2448
  %4224 = lshr i64 %4198, 63
  %4225 = xor i64 %4221, %4224
  %4226 = add nuw nsw i64 %4225, %4224
  %4227 = icmp eq i64 %4226, 2
  %4228 = zext i1 %4227 to i8
  %4229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4228, i8* %4229, align 1, !tbaa !2449
  %4230 = load i64, i64* %RAX
  %4231 = load i64, i64* %RCX
  %4232 = load i64, i64* %PC
  %4233 = add i64 %4232, 3
  store i64 %4233, i64* %PC
  %4234 = sub i64 %4230, %4231
  %4235 = icmp ult i64 %4230, %4231
  %4236 = zext i1 %4235 to i8
  %4237 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4236, i8* %4237, align 1, !tbaa !2432
  %4238 = trunc i64 %4234 to i32
  %4239 = and i32 %4238, 255
  %4240 = call i32 @llvm.ctpop.i32(i32 %4239) #16
  %4241 = trunc i32 %4240 to i8
  %4242 = and i8 %4241, 1
  %4243 = xor i8 %4242, 1
  %4244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4243, i8* %4244, align 1, !tbaa !2446
  %4245 = xor i64 %4231, %4230
  %4246 = xor i64 %4245, %4234
  %4247 = lshr i64 %4246, 4
  %4248 = trunc i64 %4247 to i8
  %4249 = and i8 %4248, 1
  %4250 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4249, i8* %4250, align 1, !tbaa !2450
  %4251 = icmp eq i64 %4234, 0
  %4252 = zext i1 %4251 to i8
  %4253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4252, i8* %4253, align 1, !tbaa !2447
  %4254 = lshr i64 %4234, 63
  %4255 = trunc i64 %4254 to i8
  %4256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4255, i8* %4256, align 1, !tbaa !2448
  %4257 = lshr i64 %4230, 63
  %4258 = lshr i64 %4231, 63
  %4259 = xor i64 %4258, %4257
  %4260 = xor i64 %4254, %4257
  %4261 = add nuw nsw i64 %4260, %4259
  %4262 = icmp eq i64 %4261, 2
  %4263 = zext i1 %4262 to i8
  %4264 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4263, i8* %4264, align 1, !tbaa !2449
  %4265 = load i64, i64* %PC
  %4266 = add i64 %4265, 188
  %4267 = load i64, i64* %PC
  %4268 = add i64 %4267, 6
  %4269 = load i64, i64* %PC
  %4270 = add i64 %4269, 6
  store i64 %4270, i64* %PC
  %4271 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4272 = load i8, i8* %4271, align 1, !tbaa !2447
  %4273 = icmp eq i8 %4272, 0
  %4274 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4275 = load i8, i8* %4274, align 1, !tbaa !2448
  %4276 = icmp ne i8 %4275, 0
  %4277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4278 = load i8, i8* %4277, align 1, !tbaa !2449
  %4279 = icmp ne i8 %4278, 0
  %4280 = xor i1 %4276, %4279
  %4281 = xor i1 %4280, true
  %4282 = and i1 %4273, %4281
  %4283 = zext i1 %4282 to i8
  store i8 %4283, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4284 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4285 = select i1 %4282, i64 %4266, i64 %4268
  store i64 %4285, i64* %4284, align 8, !tbaa !2428
  %4286 = load i8, i8* %BRANCH_TAKEN
  %4287 = icmp eq i8 %4286, 1
  br i1 %4287, label %block_400f3f, label %block_400e89

block_4018de:                                     ; preds = %block_4018f3, %block_401637
  %MEMORY.2 = phi %struct.Memory* [ %6254, %block_401637 ], [ %MEMORY.2, %block_4018f3 ]
  %4288 = load i64, i64* %RBP
  %4289 = sub i64 %4288, 72
  %4290 = load i64, i64* %PC
  %4291 = add i64 %4290, 4
  store i64 %4291, i64* %PC
  %4292 = inttoptr i64 %4289 to i64*
  %4293 = load i64, i64* %4292
  store i64 %4293, i64* %RAX, align 8, !tbaa !2428
  %4294 = load i64, i64* %RBP
  %4295 = sub i64 %4294, 80
  %4296 = load i64, i64* %PC
  %4297 = add i64 %4296, 4
  store i64 %4297, i64* %PC
  %4298 = inttoptr i64 %4295 to i64*
  %4299 = load i64, i64* %4298
  store i64 %4299, i64* %RCX, align 8, !tbaa !2428
  %4300 = load i64, i64* %RCX
  %4301 = load i64, i64* %PC
  %4302 = add i64 %4301, 4
  store i64 %4302, i64* %PC
  %4303 = sub i64 %4300, 1
  store i64 %4303, i64* %RCX, align 8, !tbaa !2428
  %4304 = icmp ult i64 %4300, 1
  %4305 = zext i1 %4304 to i8
  %4306 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4305, i8* %4306, align 1, !tbaa !2432
  %4307 = trunc i64 %4303 to i32
  %4308 = and i32 %4307, 255
  %4309 = call i32 @llvm.ctpop.i32(i32 %4308) #16
  %4310 = trunc i32 %4309 to i8
  %4311 = and i8 %4310, 1
  %4312 = xor i8 %4311, 1
  %4313 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4312, i8* %4313, align 1, !tbaa !2446
  %4314 = xor i64 1, %4300
  %4315 = xor i64 %4314, %4303
  %4316 = lshr i64 %4315, 4
  %4317 = trunc i64 %4316 to i8
  %4318 = and i8 %4317, 1
  %4319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4318, i8* %4319, align 1, !tbaa !2450
  %4320 = icmp eq i64 %4303, 0
  %4321 = zext i1 %4320 to i8
  %4322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4321, i8* %4322, align 1, !tbaa !2447
  %4323 = lshr i64 %4303, 63
  %4324 = trunc i64 %4323 to i8
  %4325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4324, i8* %4325, align 1, !tbaa !2448
  %4326 = lshr i64 %4300, 63
  %4327 = xor i64 %4323, %4326
  %4328 = add nuw nsw i64 %4327, %4326
  %4329 = icmp eq i64 %4328, 2
  %4330 = zext i1 %4329 to i8
  %4331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4330, i8* %4331, align 1, !tbaa !2449
  %4332 = load i64, i64* %RAX
  %4333 = load i64, i64* %RCX
  %4334 = load i64, i64* %PC
  %4335 = add i64 %4334, 3
  store i64 %4335, i64* %PC
  %4336 = sub i64 %4332, %4333
  %4337 = icmp ult i64 %4332, %4333
  %4338 = zext i1 %4337 to i8
  %4339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4338, i8* %4339, align 1, !tbaa !2432
  %4340 = trunc i64 %4336 to i32
  %4341 = and i32 %4340, 255
  %4342 = call i32 @llvm.ctpop.i32(i32 %4341) #16
  %4343 = trunc i32 %4342 to i8
  %4344 = and i8 %4343, 1
  %4345 = xor i8 %4344, 1
  %4346 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4345, i8* %4346, align 1, !tbaa !2446
  %4347 = xor i64 %4333, %4332
  %4348 = xor i64 %4347, %4336
  %4349 = lshr i64 %4348, 4
  %4350 = trunc i64 %4349 to i8
  %4351 = and i8 %4350, 1
  %4352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %4351, i8* %4352, align 1, !tbaa !2450
  %4353 = icmp eq i64 %4336, 0
  %4354 = zext i1 %4353 to i8
  %4355 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4354, i8* %4355, align 1, !tbaa !2447
  %4356 = lshr i64 %4336, 63
  %4357 = trunc i64 %4356 to i8
  %4358 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4357, i8* %4358, align 1, !tbaa !2448
  %4359 = lshr i64 %4332, 63
  %4360 = lshr i64 %4333, 63
  %4361 = xor i64 %4360, %4359
  %4362 = xor i64 %4356, %4359
  %4363 = add nuw nsw i64 %4362, %4361
  %4364 = icmp eq i64 %4363, 2
  %4365 = zext i1 %4364 to i8
  %4366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4365, i8* %4366, align 1, !tbaa !2449
  %4367 = load i64, i64* %PC
  %4368 = add i64 %4367, 297
  %4369 = load i64, i64* %PC
  %4370 = add i64 %4369, 6
  %4371 = load i64, i64* %PC
  %4372 = add i64 %4371, 6
  store i64 %4372, i64* %PC
  %4373 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4374 = load i8, i8* %4373, align 1, !tbaa !2447
  %4375 = icmp eq i8 %4374, 0
  %4376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %4377 = load i8, i8* %4376, align 1, !tbaa !2448
  %4378 = icmp ne i8 %4377, 0
  %4379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %4380 = load i8, i8* %4379, align 1, !tbaa !2449
  %4381 = icmp ne i8 %4380, 0
  %4382 = xor i1 %4378, %4381
  %4383 = xor i1 %4382, true
  %4384 = and i1 %4375, %4383
  %4385 = zext i1 %4384 to i8
  store i8 %4385, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4387 = select i1 %4384, i64 %4368, i64 %4370
  store i64 %4387, i64* %4386, align 8, !tbaa !2428
  %4388 = load i8, i8* %BRANCH_TAKEN
  %4389 = icmp eq i8 %4388, 1
  br i1 %4389, label %block_401a16, label %block_4018f3

block_4008d4:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit, %block_4008c8
  %MEMORY.3 = phi %struct.Memory* [ %12095, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit ], [ %12095, %block_4008c8 ]
  %4390 = load i64, i64* %PC
  %4391 = add i64 %4390, 10
  store i64 %4391, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 390), i64* %RDI, align 8, !tbaa !2428
  %4392 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4393 = load i64, i64* %PC
  %4394 = add i64 %4393, 8
  store i64 %4394, i64* %PC
  %4395 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 72) to double*)
  %4396 = bitcast i8* %4392 to double*
  store double %4395, double* %4396, align 1, !tbaa !2452
  %4397 = getelementptr inbounds i8, i8* %4392, i64 8
  %4398 = bitcast i8* %4397 to double*
  store double 0.000000e+00, double* %4398, align 1, !tbaa !2452
  %4399 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4400 = load i64, i64* %PC
  %4401 = add i64 %4400, 8
  store i64 %4401, i64* %PC
  %4402 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 80) to double*)
  %4403 = bitcast i8* %4399 to double*
  store double %4402, double* %4403, align 1, !tbaa !2452
  %4404 = getelementptr inbounds i8, i8* %4399, i64 8
  %4405 = bitcast i8* %4404 to double*
  store double 0.000000e+00, double* %4405, align 1, !tbaa !2452
  %4406 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4407 = load i64, i64* %PC
  %4408 = add i64 %4407, 8
  store i64 %4408, i64* %PC
  %4409 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 88) to double*)
  %4410 = bitcast i8* %4406 to double*
  store double %4409, double* %4410, align 1, !tbaa !2452
  %4411 = getelementptr inbounds i8, i8* %4406, i64 8
  %4412 = bitcast i8* %4411 to double*
  store double 0.000000e+00, double* %4412, align 1, !tbaa !2452
  %4413 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4414 = load i64, i64* %PC
  %4415 = add i64 %4414, 9
  store i64 %4415, i64* %PC
  %4416 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %4417 = bitcast i8* %4413 to double*
  store double %4416, double* %4417, align 1, !tbaa !2452
  %4418 = getelementptr inbounds i8, i8* %4413, i64 8
  %4419 = bitcast i8* %4418 to double*
  store double 0.000000e+00, double* %4419, align 1, !tbaa !2452
  %4420 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4421 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4422 = load i64, i64* %PC
  %4423 = add i64 %4422, 9
  store i64 %4423, i64* %PC
  %4424 = bitcast i8* %4421 to double*
  %4425 = load double, double* %4424, align 1
  %4426 = getelementptr inbounds i8, i8* %4421, i64 8
  %4427 = bitcast i8* %4426 to i64*
  %4428 = load i64, i64* %4427, align 1
  %4429 = load double, double* bitcast (%sa_type* @sa to double*)
  %4430 = fmul double %4425, %4429
  %4431 = bitcast i8* %4420 to double*
  store double %4430, double* %4431, align 1, !tbaa !2452
  %4432 = getelementptr inbounds i8, i8* %4420, i64 8
  %4433 = bitcast i8* %4432 to i64*
  store i64 %4428, i64* %4433, align 1, !tbaa !2452
  %4434 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4435 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4436 = load i64, i64* %PC
  %4437 = add i64 %4436, 9
  store i64 %4437, i64* %PC
  %4438 = bitcast i8* %4435 to double*
  %4439 = load double, double* %4438, align 1
  %4440 = getelementptr inbounds i8, i8* %4435, i64 8
  %4441 = bitcast i8* %4440 to i64*
  %4442 = load i64, i64* %4441, align 1
  %4443 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %4444 = fsub double %4439, %4443
  %4445 = bitcast i8* %4434 to double*
  store double %4444, double* %4445, align 1, !tbaa !2452
  %4446 = getelementptr inbounds i8, i8* %4434, i64 8
  %4447 = bitcast i8* %4446 to i64*
  store i64 %4442, i64* %4447, align 1, !tbaa !2452
  %4448 = bitcast %union.vec128_t* %XMM3 to i8*
  %4449 = load i64, i64* %PC
  %4450 = add i64 %4449, 9
  store i64 %4450, i64* %PC
  %4451 = bitcast i8* %4448 to double*
  %4452 = load double, double* %4451, align 1
  store double %4452, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 16) to double*)
  %4453 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4454 = load i64, i64* %PC
  %4455 = add i64 %4454, 9
  store i64 %4455, i64* %PC
  %4456 = load double, double* bitcast (%D1_0_type* @D1_0 to double*)
  %4457 = bitcast i8* %4453 to double*
  store double %4456, double* %4457, align 1, !tbaa !2452
  %4458 = getelementptr inbounds i8, i8* %4453, i64 8
  %4459 = bitcast i8* %4458 to double*
  store double 0.000000e+00, double* %4459, align 1, !tbaa !2452
  %4460 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4461 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4462 = load i64, i64* %PC
  %4463 = add i64 %4462, 9
  store i64 %4463, i64* %PC
  %4464 = bitcast i8* %4461 to double*
  %4465 = load double, double* %4464, align 1
  %4466 = getelementptr inbounds i8, i8* %4461, i64 8
  %4467 = bitcast i8* %4466 to i64*
  %4468 = load i64, i64* %4467, align 1
  %4469 = load double, double* bitcast (%D2_0_type* @D2_0 to double*)
  %4470 = fadd double %4465, %4469
  %4471 = bitcast i8* %4460 to double*
  store double %4470, double* %4471, align 1, !tbaa !2452
  %4472 = getelementptr inbounds i8, i8* %4460, i64 8
  %4473 = bitcast i8* %4472 to i64*
  store i64 %4468, i64* %4473, align 1, !tbaa !2452
  %4474 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4475 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4476 = load i64, i64* %PC
  %4477 = add i64 %4476, 9
  store i64 %4477, i64* %PC
  %4478 = bitcast i8* %4475 to double*
  %4479 = load double, double* %4478, align 1
  %4480 = getelementptr inbounds i8, i8* %4475, i64 8
  %4481 = bitcast i8* %4480 to i64*
  %4482 = load i64, i64* %4481, align 1
  %4483 = load double, double* bitcast (%D3_type* @D3 to double*)
  %4484 = fadd double %4479, %4483
  %4485 = bitcast i8* %4474 to double*
  store double %4484, double* %4485, align 1, !tbaa !2452
  %4486 = getelementptr inbounds i8, i8* %4474, i64 8
  %4487 = bitcast i8* %4486 to i64*
  store i64 %4482, i64* %4487, align 1, !tbaa !2452
  %4488 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4489 = load i64, i64* %PC
  %4490 = add i64 %4489, 9
  store i64 %4490, i64* %PC
  %4491 = load double, double* bitcast (%one_type* @one to double*)
  %4492 = bitcast i8* %4488 to double*
  store double %4491, double* %4492, align 1, !tbaa !2452
  %4493 = getelementptr inbounds i8, i8* %4488, i64 8
  %4494 = bitcast i8* %4493 to double*
  store double 0.000000e+00, double* %4494, align 1, !tbaa !2452
  %4495 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4496 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4497 = load i64, i64* %PC
  %4498 = add i64 %4497, 9
  store i64 %4498, i64* %PC
  %4499 = bitcast i8* %4496 to double*
  %4500 = load double, double* %4499, align 1
  %4501 = getelementptr inbounds i8, i8* %4496, i64 8
  %4502 = bitcast i8* %4501 to i64*
  %4503 = load i64, i64* %4502, align 1
  %4504 = load double, double* bitcast (%D1_0_type* @D1_0 to double*)
  %4505 = fadd double %4500, %4504
  %4506 = bitcast i8* %4495 to double*
  store double %4505, double* %4506, align 1, !tbaa !2452
  %4507 = getelementptr inbounds i8, i8* %4495, i64 8
  %4508 = bitcast i8* %4507 to i64*
  store i64 %4503, i64* %4508, align 1, !tbaa !2452
  %4509 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4510 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4511 = load i64, i64* %PC
  %4512 = add i64 %4511, 9
  store i64 %4512, i64* %PC
  %4513 = bitcast i8* %4510 to double*
  %4514 = load double, double* %4513, align 1
  %4515 = getelementptr inbounds i8, i8* %4510, i64 8
  %4516 = bitcast i8* %4515 to i64*
  %4517 = load i64, i64* %4516, align 1
  %4518 = load double, double* bitcast (%E2_0_type* @E2_0 to double*)
  %4519 = fadd double %4514, %4518
  %4520 = bitcast i8* %4509 to double*
  store double %4519, double* %4520, align 1, !tbaa !2452
  %4521 = getelementptr inbounds i8, i8* %4509, i64 8
  %4522 = bitcast i8* %4521 to i64*
  store i64 %4517, i64* %4522, align 1, !tbaa !2452
  %4523 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4524 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4525 = load i64, i64* %PC
  %4526 = add i64 %4525, 9
  store i64 %4526, i64* %PC
  %4527 = bitcast i8* %4524 to double*
  %4528 = load double, double* %4527, align 1
  %4529 = getelementptr inbounds i8, i8* %4524, i64 8
  %4530 = bitcast i8* %4529 to i64*
  %4531 = load i64, i64* %4530, align 1
  %4532 = load double, double* bitcast (%E3_type* @E3 to double*)
  %4533 = fadd double %4528, %4532
  %4534 = bitcast i8* %4523 to double*
  store double %4533, double* %4534, align 1, !tbaa !2452
  %4535 = getelementptr inbounds i8, i8* %4523, i64 8
  %4536 = bitcast i8* %4535 to i64*
  store i64 %4531, i64* %4536, align 1, !tbaa !2452
  %4537 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4538 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4539 = bitcast %union.vec128_t* %XMM4 to i8*
  %4540 = load i64, i64* %PC
  %4541 = add i64 %4540, 4
  store i64 %4541, i64* %PC
  %4542 = bitcast i8* %4538 to double*
  %4543 = load double, double* %4542, align 1
  %4544 = getelementptr inbounds i8, i8* %4538, i64 8
  %4545 = bitcast i8* %4544 to i64*
  %4546 = load i64, i64* %4545, align 1
  %4547 = bitcast i8* %4539 to double*
  %4548 = load double, double* %4547, align 1
  %4549 = fdiv double %4543, %4548
  %4550 = bitcast i8* %4537 to double*
  store double %4549, double* %4550, align 1, !tbaa !2452
  %4551 = getelementptr inbounds i8, i8* %4537, i64 8
  %4552 = bitcast i8* %4551 to i64*
  store i64 %4546, i64* %4552, align 1, !tbaa !2452
  %4553 = bitcast %union.vec128_t* %XMM3 to i8*
  %4554 = load i64, i64* %PC
  %4555 = add i64 %4554, 9
  store i64 %4555, i64* %PC
  %4556 = bitcast i8* %4553 to double*
  %4557 = load double, double* %4556, align 1
  store double %4557, double* bitcast (%sa_type* @sa to double*)
  %4558 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4559 = load i64, i64* %PC
  %4560 = add i64 %4559, 9
  store i64 %4560, i64* %PC
  %4561 = load double, double* bitcast (%D1_0_type* @D1_0 to double*)
  %4562 = bitcast i8* %4558 to double*
  store double %4561, double* %4562, align 1, !tbaa !2452
  %4563 = getelementptr inbounds i8, i8* %4558, i64 8
  %4564 = bitcast i8* %4563 to double*
  store double 0.000000e+00, double* %4564, align 1, !tbaa !2452
  %4565 = bitcast %union.vec128_t* %XMM3 to i8*
  %4566 = load i64, i64* %PC
  %4567 = add i64 %4566, 9
  store i64 %4567, i64* %PC
  %4568 = bitcast i8* %4565 to double*
  %4569 = load double, double* %4568, align 1
  store double %4569, double* bitcast (%sb_type* @sb to double*)
  %4570 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4571 = load i64, i64* %PC
  %4572 = add i64 %4571, 9
  store i64 %4572, i64* %PC
  %4573 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 16) to double*)
  %4574 = bitcast i8* %4570 to double*
  store double %4573, double* %4574, align 1, !tbaa !2452
  %4575 = getelementptr inbounds i8, i8* %4570, i64 8
  %4576 = bitcast i8* %4575 to double*
  store double 0.000000e+00, double* %4576, align 1, !tbaa !2452
  %4577 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4578 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4579 = bitcast %union.vec128_t* %XMM2 to i8*
  %4580 = load i64, i64* %PC
  %4581 = add i64 %4580, 4
  store i64 %4581, i64* %PC
  %4582 = bitcast i8* %4578 to double*
  %4583 = load double, double* %4582, align 1
  %4584 = getelementptr inbounds i8, i8* %4578, i64 8
  %4585 = bitcast i8* %4584 to i64*
  %4586 = load i64, i64* %4585, align 1
  %4587 = bitcast i8* %4579 to double*
  %4588 = load double, double* %4587, align 1
  %4589 = fdiv double %4583, %4588
  %4590 = bitcast i8* %4577 to double*
  store double %4589, double* %4590, align 1, !tbaa !2452
  %4591 = getelementptr inbounds i8, i8* %4577, i64 8
  %4592 = bitcast i8* %4591 to i64*
  store i64 %4586, i64* %4592, align 1, !tbaa !2452
  %4593 = bitcast %union.vec128_t* %XMM3 to i8*
  %4594 = load i64, i64* %PC
  %4595 = add i64 %4594, 9
  store i64 %4595, i64* %PC
  %4596 = bitcast i8* %4593 to double*
  %4597 = load double, double* %4596, align 1
  store double %4597, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 24) to double*)
  %4598 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4599 = load i64, i64* %RBP
  %4600 = sub i64 %4599, 48
  %4601 = load i64, i64* %PC
  %4602 = add i64 %4601, 5
  store i64 %4602, i64* %PC
  %4603 = inttoptr i64 %4600 to double*
  %4604 = load double, double* %4603
  %4605 = bitcast i8* %4598 to double*
  store double %4604, double* %4605, align 1, !tbaa !2452
  %4606 = getelementptr inbounds i8, i8* %4598, i64 8
  %4607 = bitcast i8* %4606 to double*
  store double 0.000000e+00, double* %4607, align 1, !tbaa !2452
  %4608 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4609 = load i64, i64* %PC
  %4610 = add i64 %4609, 9
  store i64 %4610, i64* %PC
  %4611 = load double, double* bitcast (%sa_type* @sa to double*)
  %4612 = bitcast i8* %4608 to double*
  store double %4611, double* %4612, align 1, !tbaa !2452
  %4613 = getelementptr inbounds i8, i8* %4608, i64 8
  %4614 = bitcast i8* %4613 to double*
  store double 0.000000e+00, double* %4614, align 1, !tbaa !2452
  %4615 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4616 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4617 = load i64, i64* %PC
  %4618 = add i64 %4617, 9
  store i64 %4618, i64* %PC
  %4619 = bitcast i8* %4616 to double*
  %4620 = load double, double* %4619, align 1
  %4621 = getelementptr inbounds i8, i8* %4616, i64 8
  %4622 = bitcast i8* %4621 to i64*
  %4623 = load i64, i64* %4622, align 1
  %4624 = load double, double* bitcast (%sb_type* @sb to double*)
  %4625 = fadd double %4620, %4624
  %4626 = bitcast i8* %4615 to double*
  store double %4625, double* %4626, align 1, !tbaa !2452
  %4627 = getelementptr inbounds i8, i8* %4615, i64 8
  %4628 = bitcast i8* %4627 to i64*
  store i64 %4623, i64* %4628, align 1, !tbaa !2452
  %4629 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4630 = load i64, i64* %PC
  %4631 = add i64 %4630, 9
  store i64 %4631, i64* %PC
  %4632 = load double, double* bitcast (%two_type* @two to double*)
  %4633 = bitcast i8* %4629 to double*
  store double %4632, double* %4633, align 1, !tbaa !2452
  %4634 = getelementptr inbounds i8, i8* %4629, i64 8
  %4635 = bitcast i8* %4634 to double*
  store double 0.000000e+00, double* %4635, align 1, !tbaa !2452
  %4636 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4637 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4638 = load i64, i64* %RBP
  %4639 = sub i64 %4638, 16
  %4640 = load i64, i64* %PC
  %4641 = add i64 %4640, 5
  store i64 %4641, i64* %PC
  %4642 = bitcast i8* %4637 to double*
  %4643 = load double, double* %4642, align 1
  %4644 = getelementptr inbounds i8, i8* %4637, i64 8
  %4645 = bitcast i8* %4644 to i64*
  %4646 = load i64, i64* %4645, align 1
  %4647 = inttoptr i64 %4639 to double*
  %4648 = load double, double* %4647
  %4649 = fmul double %4643, %4648
  %4650 = bitcast i8* %4636 to double*
  store double %4649, double* %4650, align 1, !tbaa !2452
  %4651 = getelementptr inbounds i8, i8* %4636, i64 8
  %4652 = bitcast i8* %4651 to i64*
  store i64 %4646, i64* %4652, align 1, !tbaa !2452
  %4653 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4654 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4655 = bitcast %union.vec128_t* %XMM4 to i8*
  %4656 = load i64, i64* %PC
  %4657 = add i64 %4656, 4
  store i64 %4657, i64* %PC
  %4658 = bitcast i8* %4654 to double*
  %4659 = load double, double* %4658, align 1
  %4660 = getelementptr inbounds i8, i8* %4654, i64 8
  %4661 = bitcast i8* %4660 to i64*
  %4662 = load i64, i64* %4661, align 1
  %4663 = bitcast i8* %4655 to double*
  %4664 = load double, double* %4663, align 1
  %4665 = fadd double %4659, %4664
  %4666 = bitcast i8* %4653 to double*
  store double %4665, double* %4666, align 1, !tbaa !2452
  %4667 = getelementptr inbounds i8, i8* %4653, i64 8
  %4668 = bitcast i8* %4667 to i64*
  store i64 %4662, i64* %4668, align 1, !tbaa !2452
  %4669 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4670 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4671 = bitcast %union.vec128_t* %XMM3 to i8*
  %4672 = load i64, i64* %PC
  %4673 = add i64 %4672, 4
  store i64 %4673, i64* %PC
  %4674 = bitcast i8* %4670 to double*
  %4675 = load double, double* %4674, align 1
  %4676 = getelementptr inbounds i8, i8* %4670, i64 8
  %4677 = bitcast i8* %4676 to i64*
  %4678 = load i64, i64* %4677, align 1
  %4679 = bitcast i8* %4671 to double*
  %4680 = load double, double* %4679, align 1
  %4681 = fmul double %4675, %4680
  %4682 = bitcast i8* %4669 to double*
  store double %4681, double* %4682, align 1, !tbaa !2452
  %4683 = getelementptr inbounds i8, i8* %4669, i64 8
  %4684 = bitcast i8* %4683 to i64*
  store i64 %4678, i64* %4684, align 1, !tbaa !2452
  %4685 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4686 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4687 = load i64, i64* %PC
  %4688 = add i64 %4687, 9
  store i64 %4688, i64* %PC
  %4689 = bitcast i8* %4686 to double*
  %4690 = load double, double* %4689, align 1
  %4691 = getelementptr inbounds i8, i8* %4686, i64 8
  %4692 = bitcast i8* %4691 to i64*
  %4693 = load i64, i64* %4692, align 1
  %4694 = load double, double* bitcast (%two_type* @two to double*)
  %4695 = fdiv double %4690, %4694
  %4696 = bitcast i8* %4685 to double*
  store double %4695, double* %4696, align 1, !tbaa !2452
  %4697 = getelementptr inbounds i8, i8* %4685, i64 8
  %4698 = bitcast i8* %4697 to i64*
  store i64 %4693, i64* %4698, align 1, !tbaa !2452
  %4699 = bitcast %union.vec128_t* %XMM2 to i8*
  %4700 = load i64, i64* %PC
  %4701 = add i64 %4700, 9
  store i64 %4701, i64* %PC
  %4702 = bitcast i8* %4699 to double*
  %4703 = load double, double* %4702, align 1
  store double %4703, double* bitcast (%sa_type* @sa to double*)
  %4704 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4705 = load i64, i64* %PC
  %4706 = add i64 %4705, 9
  store i64 %4706, i64* %PC
  %4707 = load double, double* bitcast (%one_type* @one to double*)
  %4708 = bitcast i8* %4704 to double*
  store double %4707, double* %4708, align 1, !tbaa !2452
  %4709 = getelementptr inbounds i8, i8* %4704, i64 8
  %4710 = bitcast i8* %4709 to double*
  store double 0.000000e+00, double* %4710, align 1, !tbaa !2452
  %4711 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4712 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4713 = load i64, i64* %PC
  %4714 = add i64 %4713, 9
  store i64 %4714, i64* %PC
  %4715 = bitcast i8* %4712 to double*
  %4716 = load double, double* %4715, align 1
  %4717 = getelementptr inbounds i8, i8* %4712, i64 8
  %4718 = bitcast i8* %4717 to i64*
  %4719 = load i64, i64* %4718, align 1
  %4720 = load double, double* bitcast (%sa_type* @sa to double*)
  %4721 = fdiv double %4716, %4720
  %4722 = bitcast i8* %4711 to double*
  store double %4721, double* %4722, align 1, !tbaa !2452
  %4723 = getelementptr inbounds i8, i8* %4711, i64 8
  %4724 = bitcast i8* %4723 to i64*
  store i64 %4719, i64* %4724, align 1, !tbaa !2452
  %4725 = bitcast %union.vec128_t* %XMM2 to i8*
  %4726 = load i64, i64* %PC
  %4727 = add i64 %4726, 9
  store i64 %4727, i64* %PC
  %4728 = bitcast i8* %4725 to double*
  %4729 = load double, double* %4728, align 1
  store double %4729, double* bitcast (%sb_type* @sb to double*)
  %4730 = load i64, i64* %PC
  %4731 = add i64 %4730, 10
  store i64 %4731, i64* %PC
  %4732 = load double, double* bitcast (%sb_type* @sb to double*)
  %4733 = call double @llvm.trunc.f64(double %4732) #16
  %4734 = call double @llvm.fabs.f64(double %4733) #16
  %4735 = fcmp ogt double %4734, 0x43E0000000000000
  %4736 = fptosi double %4733 to i64
  %4737 = select i1 %4735, i64 -9223372036854775808, i64 %4736
  store i64 %4737, i64* %RAX, align 8, !tbaa !2428
  %4738 = load i64, i64* %RAX
  %4739 = load i64, i64* %PC
  %4740 = add i64 %4739, 7
  store i64 %4740, i64* %PC
  %4741 = sext i64 %4738 to i128
  %4742 = and i128 %4741, -18446744073709551616
  %4743 = zext i64 %4738 to i128
  %4744 = or i128 %4742, %4743
  %4745 = mul nsw i128 40000, %4744
  %4746 = trunc i128 %4745 to i64
  store i64 %4746, i64* %RAX, align 8, !tbaa !2428
  %4747 = sext i64 %4746 to i128
  %4748 = icmp ne i128 %4747, %4745
  %4749 = zext i1 %4748 to i8
  %4750 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4749, i8* %4750, align 1, !tbaa !2432
  %4751 = trunc i128 %4745 to i32
  %4752 = and i32 %4751, 255
  %4753 = call i32 @llvm.ctpop.i32(i32 %4752) #16
  %4754 = trunc i32 %4753 to i8
  %4755 = and i8 %4754, 1
  %4756 = xor i8 %4755, 1
  %4757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4756, i8* %4757, align 1, !tbaa !2446
  %4758 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4758, align 1, !tbaa !2450
  %4759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %4759, align 1, !tbaa !2447
  %4760 = lshr i64 %4746, 63
  %4761 = trunc i64 %4760 to i8
  %4762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4761, i8* %4762, align 1, !tbaa !2448
  %4763 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %4749, i8* %4763, align 1, !tbaa !2449
  %4764 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4765 = load i64, i64* %RAX
  %4766 = load i64, i64* %PC
  %4767 = add i64 %4766, 5
  store i64 %4767, i64* %PC
  %4768 = sitofp i64 %4765 to double
  %4769 = bitcast i8* %4764 to double*
  store double %4768, double* %4769, align 1, !tbaa !2452
  %4770 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4771 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4772 = load i64, i64* %PC
  %4773 = add i64 %4772, 9
  store i64 %4773, i64* %PC
  %4774 = bitcast i8* %4771 to double*
  %4775 = load double, double* %4774, align 1
  %4776 = getelementptr inbounds i8, i8* %4771, i64 8
  %4777 = bitcast i8* %4776 to i64*
  %4778 = load i64, i64* %4777, align 1
  %4779 = load double, double* bitcast (%scale_type* @scale to double*)
  %4780 = fdiv double %4775, %4779
  %4781 = bitcast i8* %4770 to double*
  store double %4780, double* %4781, align 1, !tbaa !2452
  %4782 = getelementptr inbounds i8, i8* %4770, i64 8
  %4783 = bitcast i8* %4782 to i64*
  store i64 %4778, i64* %4783, align 1, !tbaa !2452
  %4784 = bitcast %union.vec128_t* %XMM2 to i8*
  %4785 = load i64, i64* %PC
  %4786 = add i64 %4785, 5
  store i64 %4786, i64* %PC
  %4787 = bitcast i8* %4784 to double*
  %4788 = load double, double* %4787, align 1
  %4789 = call double @llvm.trunc.f64(double %4788) #16
  %4790 = call double @llvm.fabs.f64(double %4789) #16
  %4791 = fcmp ogt double %4790, 0x43E0000000000000
  %4792 = fptosi double %4789 to i64
  %4793 = select i1 %4791, i64 -9223372036854775808, i64 %4792
  store i64 %4793, i64* %RAX, align 8, !tbaa !2428
  %4794 = load i64, i64* %RBP
  %4795 = sub i64 %4794, 88
  %4796 = load i64, i64* %RAX
  %4797 = load i64, i64* %PC
  %4798 = add i64 %4797, 4
  store i64 %4798, i64* %PC
  %4799 = inttoptr i64 %4795 to i64*
  store i64 %4796, i64* %4799
  %4800 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4801 = load i64, i64* %PC
  %4802 = add i64 %4801, 9
  store i64 %4802, i64* %PC
  %4803 = load double, double* bitcast (%sb_type* @sb to double*)
  %4804 = bitcast i8* %4800 to double*
  store double %4803, double* %4804, align 1, !tbaa !2452
  %4805 = getelementptr inbounds i8, i8* %4800, i64 8
  %4806 = bitcast i8* %4805 to double*
  store double 0.000000e+00, double* %4806, align 1, !tbaa !2452
  %4807 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4808 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4809 = bitcast %union.vec128_t* %XMM1 to i8*
  %4810 = load i64, i64* %PC
  %4811 = add i64 %4810, 4
  store i64 %4811, i64* %PC
  %4812 = bitcast i8* %4808 to double*
  %4813 = load double, double* %4812, align 1
  %4814 = getelementptr inbounds i8, i8* %4808, i64 8
  %4815 = bitcast i8* %4814 to i64*
  %4816 = load i64, i64* %4815, align 1
  %4817 = bitcast i8* %4809 to double*
  %4818 = load double, double* %4817, align 1
  %4819 = fsub double %4813, %4818
  %4820 = bitcast i8* %4807 to double*
  store double %4819, double* %4820, align 1, !tbaa !2452
  %4821 = getelementptr inbounds i8, i8* %4807, i64 8
  %4822 = bitcast i8* %4821 to i64*
  store i64 %4816, i64* %4822, align 1, !tbaa !2452
  %4823 = bitcast %union.vec128_t* %XMM2 to i8*
  %4824 = load i64, i64* %PC
  %4825 = add i64 %4824, 9
  store i64 %4825, i64* %PC
  %4826 = bitcast i8* %4823 to double*
  %4827 = load double, double* %4826, align 1
  store double %4827, double* bitcast (%sc_type* @sc to double*)
  %4828 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4829 = load i64, i64* %PC
  %4830 = add i64 %4829, 9
  store i64 %4830, i64* %PC
  %4831 = load double, double* bitcast (%one_type* @one to double*)
  %4832 = bitcast i8* %4828 to double*
  store double %4831, double* %4832, align 1, !tbaa !2452
  %4833 = getelementptr inbounds i8, i8* %4828, i64 8
  %4834 = bitcast i8* %4833 to double*
  store double 0.000000e+00, double* %4834, align 1, !tbaa !2452
  %4835 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4836 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4837 = load i64, i64* %PC
  %4838 = add i64 %4837, 9
  store i64 %4838, i64* %PC
  %4839 = bitcast i8* %4836 to double*
  %4840 = load double, double* %4839, align 1
  %4841 = getelementptr inbounds i8, i8* %4836, i64 8
  %4842 = bitcast i8* %4841 to i64*
  %4843 = load i64, i64* %4842, align 1
  %4844 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 24) to double*)
  %4845 = fdiv double %4840, %4844
  %4846 = bitcast i8* %4835 to double*
  store double %4845, double* %4846, align 1, !tbaa !2452
  %4847 = getelementptr inbounds i8, i8* %4835, i64 8
  %4848 = bitcast i8* %4847 to i64*
  store i64 %4843, i64* %4848, align 1, !tbaa !2452
  %4849 = bitcast %union.vec128_t* %XMM1 to i8*
  %4850 = load i64, i64* %PC
  %4851 = add i64 %4850, 9
  store i64 %4851, i64* %PC
  %4852 = bitcast i8* %4849 to double*
  %4853 = load double, double* %4852, align 1
  store double %4853, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 32) to double*)
  %4854 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4855 = bitcast %union.vec128_t* %XMM0 to i8*
  %4856 = load i64, i64* %PC
  %4857 = add i64 %4856, 3
  store i64 %4857, i64* %PC
  %4858 = bitcast i8* %4855 to <2 x i32>*
  %4859 = load <2 x i32>, <2 x i32>* %4858, align 1
  %4860 = getelementptr inbounds i8, i8* %4855, i64 8
  %4861 = bitcast i8* %4860 to <2 x i32>*
  %4862 = load <2 x i32>, <2 x i32>* %4861, align 1
  %4863 = extractelement <2 x i32> %4859, i32 0
  %4864 = bitcast i8* %4854 to i32*
  store i32 %4863, i32* %4864, align 1, !tbaa !2455
  %4865 = extractelement <2 x i32> %4859, i32 1
  %4866 = getelementptr inbounds i8, i8* %4854, i64 4
  %4867 = bitcast i8* %4866 to i32*
  store i32 %4865, i32* %4867, align 1, !tbaa !2455
  %4868 = extractelement <2 x i32> %4862, i32 0
  %4869 = getelementptr inbounds i8, i8* %4854, i64 8
  %4870 = bitcast i8* %4869 to i32*
  store i32 %4868, i32* %4870, align 1, !tbaa !2455
  %4871 = extractelement <2 x i32> %4862, i32 1
  %4872 = getelementptr inbounds i8, i8* %4854, i64 12
  %4873 = bitcast i8* %4872 to i32*
  store i32 %4871, i32* %4873, align 1, !tbaa !2455
  %4874 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4875 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4876 = load i64, i64* %PC
  %4877 = add i64 %4876, 9
  store i64 %4877, i64* %PC
  %4878 = bitcast i8* %4875 to double*
  %4879 = load double, double* %4878, align 1
  %4880 = getelementptr inbounds i8, i8* %4875, i64 8
  %4881 = bitcast i8* %4880 to i64*
  %4882 = load i64, i64* %4881, align 1
  %4883 = load double, double* bitcast (%sc_type* @sc to double*)
  %4884 = fmul double %4879, %4883
  %4885 = bitcast i8* %4874 to double*
  store double %4884, double* %4885, align 1, !tbaa !2452
  %4886 = getelementptr inbounds i8, i8* %4874, i64 8
  %4887 = bitcast i8* %4886 to i64*
  store i64 %4882, i64* %4887, align 1, !tbaa !2452
  %4888 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4889 = bitcast %union.vec128_t* %XMM0 to i8*
  %4890 = load i64, i64* %PC
  %4891 = add i64 %4890, 3
  store i64 %4891, i64* %PC
  %4892 = bitcast i8* %4889 to <2 x i32>*
  %4893 = load <2 x i32>, <2 x i32>* %4892, align 1
  %4894 = getelementptr inbounds i8, i8* %4889, i64 8
  %4895 = bitcast i8* %4894 to <2 x i32>*
  %4896 = load <2 x i32>, <2 x i32>* %4895, align 1
  %4897 = extractelement <2 x i32> %4893, i32 0
  %4898 = bitcast i8* %4888 to i32*
  store i32 %4897, i32* %4898, align 1, !tbaa !2455
  %4899 = extractelement <2 x i32> %4893, i32 1
  %4900 = getelementptr inbounds i8, i8* %4888, i64 4
  %4901 = bitcast i8* %4900 to i32*
  store i32 %4899, i32* %4901, align 1, !tbaa !2455
  %4902 = extractelement <2 x i32> %4896, i32 0
  %4903 = getelementptr inbounds i8, i8* %4888, i64 8
  %4904 = bitcast i8* %4903 to i32*
  store i32 %4902, i32* %4904, align 1, !tbaa !2455
  %4905 = extractelement <2 x i32> %4896, i32 1
  %4906 = getelementptr inbounds i8, i8* %4888, i64 12
  %4907 = bitcast i8* %4906 to i32*
  store i32 %4905, i32* %4907, align 1, !tbaa !2455
  %4908 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4909 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4910 = load i64, i64* %PC
  %4911 = add i64 %4910, 9
  store i64 %4911, i64* %PC
  %4912 = bitcast i8* %4909 to double*
  %4913 = load double, double* %4912, align 1
  %4914 = getelementptr inbounds i8, i8* %4909, i64 8
  %4915 = bitcast i8* %4914 to i64*
  %4916 = load i64, i64* %4915, align 1
  %4917 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 16) to double*)
  %4918 = fmul double %4913, %4917
  %4919 = bitcast i8* %4908 to double*
  store double %4918, double* %4919, align 1, !tbaa !2452
  %4920 = getelementptr inbounds i8, i8* %4908, i64 8
  %4921 = bitcast i8* %4920 to i64*
  store i64 %4916, i64* %4921, align 1, !tbaa !2452
  %4922 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4923 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4924 = load i64, i64* %PC
  %4925 = add i64 %4924, 9
  store i64 %4925, i64* %PC
  %4926 = bitcast i8* %4923 to double*
  %4927 = load double, double* %4926, align 1
  %4928 = getelementptr inbounds i8, i8* %4923, i64 8
  %4929 = bitcast i8* %4928 to i64*
  %4930 = load i64, i64* %4929, align 1
  %4931 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 32) to double*)
  %4932 = fmul double %4927, %4931
  %4933 = bitcast i8* %4922 to double*
  store double %4932, double* %4933, align 1, !tbaa !2452
  %4934 = getelementptr inbounds i8, i8* %4922, i64 8
  %4935 = bitcast i8* %4934 to i64*
  store i64 %4930, i64* %4935, align 1, !tbaa !2452
  %4936 = load i64, i64* %RBP
  %4937 = sub i64 %4936, 136
  %4938 = bitcast %union.vec128_t* %XMM0 to i8*
  %4939 = load i64, i64* %PC
  %4940 = add i64 %4939, 8
  store i64 %4940, i64* %PC
  %4941 = bitcast i8* %4938 to double*
  %4942 = load double, double* %4941, align 1
  %4943 = inttoptr i64 %4937 to double*
  store double %4942, double* %4943
  %4944 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4945 = bitcast %union.vec128_t* %XMM1 to i8*
  %4946 = load i64, i64* %PC
  %4947 = add i64 %4946, 3
  store i64 %4947, i64* %PC
  %4948 = bitcast i8* %4945 to <2 x i32>*
  %4949 = load <2 x i32>, <2 x i32>* %4948, align 1
  %4950 = getelementptr inbounds i8, i8* %4945, i64 8
  %4951 = bitcast i8* %4950 to <2 x i32>*
  %4952 = load <2 x i32>, <2 x i32>* %4951, align 1
  %4953 = extractelement <2 x i32> %4949, i32 0
  %4954 = bitcast i8* %4944 to i32*
  store i32 %4953, i32* %4954, align 1, !tbaa !2455
  %4955 = extractelement <2 x i32> %4949, i32 1
  %4956 = getelementptr inbounds i8, i8* %4944, i64 4
  %4957 = bitcast i8* %4956 to i32*
  store i32 %4955, i32* %4957, align 1, !tbaa !2455
  %4958 = extractelement <2 x i32> %4952, i32 0
  %4959 = getelementptr inbounds i8, i8* %4944, i64 8
  %4960 = bitcast i8* %4959 to i32*
  store i32 %4958, i32* %4960, align 1, !tbaa !2455
  %4961 = extractelement <2 x i32> %4952, i32 1
  %4962 = getelementptr inbounds i8, i8* %4944, i64 12
  %4963 = bitcast i8* %4962 to i32*
  store i32 %4961, i32* %4963, align 1, !tbaa !2455
  %4964 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4965 = bitcast %union.vec128_t* %XMM2 to i8*
  %4966 = load i64, i64* %PC
  %4967 = add i64 %4966, 3
  store i64 %4967, i64* %PC
  %4968 = bitcast i8* %4965 to <2 x i32>*
  %4969 = load <2 x i32>, <2 x i32>* %4968, align 1
  %4970 = getelementptr inbounds i8, i8* %4965, i64 8
  %4971 = bitcast i8* %4970 to <2 x i32>*
  %4972 = load <2 x i32>, <2 x i32>* %4971, align 1
  %4973 = extractelement <2 x i32> %4969, i32 0
  %4974 = bitcast i8* %4964 to i32*
  store i32 %4973, i32* %4974, align 1, !tbaa !2455
  %4975 = extractelement <2 x i32> %4969, i32 1
  %4976 = getelementptr inbounds i8, i8* %4964, i64 4
  %4977 = bitcast i8* %4976 to i32*
  store i32 %4975, i32* %4977, align 1, !tbaa !2455
  %4978 = extractelement <2 x i32> %4972, i32 0
  %4979 = getelementptr inbounds i8, i8* %4964, i64 8
  %4980 = bitcast i8* %4979 to i32*
  store i32 %4978, i32* %4980, align 1, !tbaa !2455
  %4981 = extractelement <2 x i32> %4972, i32 1
  %4982 = getelementptr inbounds i8, i8* %4964, i64 12
  %4983 = bitcast i8* %4982 to i32*
  store i32 %4981, i32* %4983, align 1, !tbaa !2455
  %4984 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4985 = load i64, i64* %RBP
  %4986 = sub i64 %4985, 136
  %4987 = load i64, i64* %PC
  %4988 = add i64 %4987, 8
  store i64 %4988, i64* %PC
  %4989 = inttoptr i64 %4986 to double*
  %4990 = load double, double* %4989
  %4991 = bitcast i8* %4984 to double*
  store double %4990, double* %4991, align 1, !tbaa !2452
  %4992 = getelementptr inbounds i8, i8* %4984, i64 8
  %4993 = bitcast i8* %4992 to double*
  store double 0.000000e+00, double* %4993, align 1, !tbaa !2452
  %4994 = load i64, i64* %PC
  %4995 = add i64 %4994, 2
  store i64 %4995, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %4996 = load i64, i64* %PC
  %4997 = sub i64 %4996, 1578
  %4998 = load i64, i64* %PC
  %4999 = add i64 %4998, 5
  %5000 = load i64, i64* %PC
  %5001 = add i64 %5000, 5
  store i64 %5001, i64* %PC
  %5002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5003 = load i64, i64* %5002, align 8, !tbaa !2428
  %5004 = add i64 %5003, -8
  %5005 = inttoptr i64 %5004 to i64*
  store i64 %4999, i64* %5005
  store i64 %5004, i64* %5002, align 8, !tbaa !2428
  %5006 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4997, i64* %5006, align 8, !tbaa !2428
  %5007 = load i64, i64* %PC
  %5008 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %5007, %struct.Memory* %MEMORY.3)
  %5009 = load i64, i64* %PC
  %5010 = add i64 %5009, 10
  store i64 %5010, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %5011 = load i64, i64* %PC
  %5012 = add i64 %5011, 10
  store i64 %5012, i64* %PC
  store i64 -9223372036854775808, i64* %RCX, align 8, !tbaa !2428
  %5013 = load i64, i64* %RBP
  %5014 = sub i64 %5013, 88
  %5015 = load i64, i64* %PC
  %5016 = add i64 %5015, 4
  store i64 %5016, i64* %PC
  %5017 = inttoptr i64 %5014 to i64*
  %5018 = load i64, i64* %5017
  store i64 %5018, i64* %RDX, align 8, !tbaa !2428
  %5019 = load i64, i64* %RBP
  %5020 = sub i64 %5019, 80
  %5021 = load i64, i64* %RDX
  %5022 = load i64, i64* %PC
  %5023 = add i64 %5022, 4
  store i64 %5023, i64* %PC
  %5024 = inttoptr i64 %5020 to i64*
  store i64 %5021, i64* %5024
  %5025 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5026 = load i64, i64* %PC
  %5027 = add i64 %5026, 9
  store i64 %5027, i64* %PC
  %5028 = load double, double* bitcast (%five_type* @five to double*)
  %5029 = bitcast i8* %5025 to double*
  store double %5028, double* %5029, align 1, !tbaa !2452
  %5030 = getelementptr inbounds i8, i8* %5025, i64 8
  %5031 = bitcast i8* %5030 to double*
  store double 0.000000e+00, double* %5031, align 1, !tbaa !2452
  %5032 = bitcast %union.vec128_t* %XMM0 to i8*
  %5033 = load i64, i64* %PC
  %5034 = add i64 %5033, 5
  store i64 %5034, i64* %PC
  %5035 = bitcast i8* %5032 to i64*
  %5036 = load i64, i64* %5035, align 1
  store i64 %5036, i64* %RDX, align 1, !tbaa !2428
  %5037 = load i64, i64* %RDX
  %5038 = load i64, i64* %RCX
  %5039 = load i64, i64* %PC
  %5040 = add i64 %5039, 3
  store i64 %5040, i64* %PC
  %5041 = xor i64 %5038, %5037
  store i64 %5041, i64* %RDX, align 8, !tbaa !2428
  %5042 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5042, align 1, !tbaa !2432
  %5043 = trunc i64 %5041 to i32
  %5044 = and i32 %5043, 255
  %5045 = call i32 @llvm.ctpop.i32(i32 %5044) #16
  %5046 = trunc i32 %5045 to i8
  %5047 = and i8 %5046, 1
  %5048 = xor i8 %5047, 1
  %5049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5048, i8* %5049, align 1, !tbaa !2446
  %5050 = icmp eq i64 %5041, 0
  %5051 = zext i1 %5050 to i8
  %5052 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5051, i8* %5052, align 1, !tbaa !2447
  %5053 = lshr i64 %5041, 63
  %5054 = trunc i64 %5053 to i8
  %5055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5054, i8* %5055, align 1, !tbaa !2448
  %5056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5056, align 1, !tbaa !2449
  %5057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5057, align 1, !tbaa !2450
  %5058 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5059 = load i64, i64* %RDX
  %5060 = load i64, i64* %PC
  %5061 = add i64 %5060, 5
  store i64 %5061, i64* %PC
  %5062 = bitcast i8* %5058 to i64*
  store i64 %5059, i64* %5062, align 1, !tbaa !2428
  %5063 = getelementptr inbounds i8, i8* %5058, i64 8
  %5064 = bitcast i8* %5063 to i64*
  store i64 0, i64* %5064, align 1, !tbaa !2428
  %5065 = load i64, i64* %RBP
  %5066 = sub i64 %5065, 16
  %5067 = bitcast %union.vec128_t* %XMM0 to i8*
  %5068 = load i64, i64* %PC
  %5069 = add i64 %5068, 5
  store i64 %5069, i64* %PC
  %5070 = bitcast i8* %5067 to double*
  %5071 = load double, double* %5070, align 1
  %5072 = inttoptr i64 %5066 to double*
  store double %5071, double* %5072
  %5073 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5074 = load i64, i64* %PC
  %5075 = add i64 %5074, 9
  store i64 %5075, i64* %PC
  %5076 = load double, double* bitcast (%one_type* @one to double*)
  %5077 = bitcast i8* %5073 to double*
  store double %5076, double* %5077, align 1, !tbaa !2452
  %5078 = getelementptr inbounds i8, i8* %5073, i64 8
  %5079 = bitcast i8* %5078 to double*
  store double 0.000000e+00, double* %5079, align 1, !tbaa !2452
  %5080 = bitcast %union.vec128_t* %XMM0 to i8*
  %5081 = load i64, i64* %PC
  %5082 = add i64 %5081, 5
  store i64 %5082, i64* %PC
  %5083 = bitcast i8* %5080 to i64*
  %5084 = load i64, i64* %5083, align 1
  store i64 %5084, i64* %RDX, align 1, !tbaa !2428
  %5085 = load i64, i64* %RDX
  %5086 = load i64, i64* %RCX
  %5087 = load i64, i64* %PC
  %5088 = add i64 %5087, 3
  store i64 %5088, i64* %PC
  %5089 = xor i64 %5086, %5085
  store i64 %5089, i64* %RDX, align 8, !tbaa !2428
  %5090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %5090, align 1, !tbaa !2432
  %5091 = trunc i64 %5089 to i32
  %5092 = and i32 %5091, 255
  %5093 = call i32 @llvm.ctpop.i32(i32 %5092) #16
  %5094 = trunc i32 %5093 to i8
  %5095 = and i8 %5094, 1
  %5096 = xor i8 %5095, 1
  %5097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %5096, i8* %5097, align 1, !tbaa !2446
  %5098 = icmp eq i64 %5089, 0
  %5099 = zext i1 %5098 to i8
  %5100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %5099, i8* %5100, align 1, !tbaa !2447
  %5101 = lshr i64 %5089, 63
  %5102 = trunc i64 %5101 to i8
  %5103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %5102, i8* %5103, align 1, !tbaa !2448
  %5104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %5104, align 1, !tbaa !2449
  %5105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5105, align 1, !tbaa !2450
  %5106 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5107 = load i64, i64* %RDX
  %5108 = load i64, i64* %PC
  %5109 = add i64 %5108, 5
  store i64 %5109, i64* %PC
  %5110 = bitcast i8* %5106 to i64*
  store i64 %5107, i64* %5110, align 1, !tbaa !2428
  %5111 = getelementptr inbounds i8, i8* %5106, i64 8
  %5112 = bitcast i8* %5111 to i64*
  store i64 0, i64* %5112, align 1, !tbaa !2428
  %5113 = bitcast %union.vec128_t* %XMM0 to i8*
  %5114 = load i64, i64* %PC
  %5115 = add i64 %5114, 9
  store i64 %5115, i64* %PC
  %5116 = bitcast i8* %5113 to double*
  %5117 = load double, double* %5116, align 1
  store double %5117, double* bitcast (%sa_type* @sa to double*)
  %5118 = load i64, i64* %RBP
  %5119 = sub i64 %5118, 140
  %5120 = load i32, i32* %EAX
  %5121 = zext i32 %5120 to i64
  %5122 = load i64, i64* %PC
  %5123 = add i64 %5122, 6
  store i64 %5123, i64* %PC
  %5124 = inttoptr i64 %5119 to i32*
  store i32 %5120, i32* %5124
  %5125 = load i64, i64* %PC
  %5126 = add i64 %5125, 6917
  %5127 = load i64, i64* %PC
  %5128 = add i64 %5127, 5
  %5129 = load i64, i64* %PC
  %5130 = add i64 %5129, 5
  store i64 %5130, i64* %PC
  %5131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5132 = load i64, i64* %5131, align 8, !tbaa !2428
  %5133 = add i64 %5132, -8
  %5134 = inttoptr i64 %5133 to i64*
  store i64 %5128, i64* %5134
  store i64 %5133, i64* %5131, align 8, !tbaa !2428
  %5135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5126, i64* %5135, align 8, !tbaa !2428
  %5136 = load i64, i64* %PC
  %5137 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %5136, %struct.Memory* %5008)
  %5138 = load i64, i64* %RBP
  %5139 = sub i64 %5138, 72
  %5140 = load i64, i64* %PC
  %5141 = add i64 %5140, 8
  store i64 %5141, i64* %PC
  %5142 = inttoptr i64 %5139 to i64*
  store i64 1, i64* %5142
  %5143 = load i64, i64* %RBP
  %5144 = sub i64 %5143, 144
  %5145 = load i32, i32* %EAX
  %5146 = zext i32 %5145 to i64
  %5147 = load i64, i64* %PC
  %5148 = add i64 %5147, 6
  store i64 %5148, i64* %PC
  %5149 = inttoptr i64 %5144 to i32*
  store i32 %5145, i32* %5149
  br label %block_400aee

block_401637:                                     ; preds = %block_4014ff
  %5150 = load i64, i64* %PC
  %5151 = add i64 %5150, 10
  store i64 %5151, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %5152 = load i64, i64* %PC
  %5153 = add i64 %5152, 3999
  %5154 = load i64, i64* %PC
  %5155 = add i64 %5154, 5
  %5156 = load i64, i64* %PC
  %5157 = add i64 %5156, 5
  store i64 %5157, i64* %PC
  %5158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5159 = load i64, i64* %5158, align 8, !tbaa !2428
  %5160 = add i64 %5159, -8
  %5161 = inttoptr i64 %5160 to i64*
  store i64 %5155, i64* %5161
  store i64 %5160, i64* %5158, align 8, !tbaa !2428
  %5162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5153, i64* %5162, align 8, !tbaa !2428
  %5163 = load i64, i64* %PC
  %5164 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %5163, %struct.Memory* %MEMORY.0)
  %5165 = load i64, i64* %PC
  %5166 = add i64 %5165, 10
  store i64 %5166, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 534), i64* %RDI, align 8, !tbaa !2428
  %5167 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5168 = load i64, i64* %PC
  %5169 = add i64 %5168, 8
  store i64 %5169, i64* %PC
  %5170 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 72) to double*)
  %5171 = bitcast i8* %5167 to double*
  store double %5170, double* %5171, align 1, !tbaa !2452
  %5172 = getelementptr inbounds i8, i8* %5167, i64 8
  %5173 = bitcast i8* %5172 to double*
  store double 0.000000e+00, double* %5173, align 1, !tbaa !2452
  %5174 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5175 = load i64, i64* %PC
  %5176 = add i64 %5175, 8
  store i64 %5176, i64* %PC
  %5177 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 136) to double*)
  %5178 = bitcast i8* %5174 to double*
  store double %5177, double* %5178, align 1, !tbaa !2452
  %5179 = getelementptr inbounds i8, i8* %5174, i64 8
  %5180 = bitcast i8* %5179 to double*
  store double 0.000000e+00, double* %5180, align 1, !tbaa !2452
  %5181 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5182 = load i64, i64* %PC
  %5183 = add i64 %5182, 8
  store i64 %5183, i64* %PC
  %5184 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 144) to double*)
  %5185 = bitcast i8* %5181 to double*
  store double %5184, double* %5185, align 1, !tbaa !2452
  %5186 = getelementptr inbounds i8, i8* %5181, i64 8
  %5187 = bitcast i8* %5186 to double*
  store double 0.000000e+00, double* %5187, align 1, !tbaa !2452
  %5188 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5189 = load i64, i64* %PC
  %5190 = add i64 %5189, 9
  store i64 %5190, i64* %PC
  %5191 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %5192 = bitcast i8* %5188 to double*
  store double %5191, double* %5192, align 1, !tbaa !2452
  %5193 = getelementptr inbounds i8, i8* %5188, i64 8
  %5194 = bitcast i8* %5193 to double*
  store double 0.000000e+00, double* %5194, align 1, !tbaa !2452
  %5195 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5196 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5197 = load i64, i64* %PC
  %5198 = add i64 %5197, 9
  store i64 %5198, i64* %PC
  %5199 = bitcast i8* %5196 to double*
  %5200 = load double, double* %5199, align 1
  %5201 = getelementptr inbounds i8, i8* %5196, i64 8
  %5202 = bitcast i8* %5201 to i64*
  %5203 = load i64, i64* %5202, align 1
  %5204 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %5205 = fmul double %5200, %5204
  %5206 = bitcast i8* %5195 to double*
  store double %5205, double* %5206, align 1, !tbaa !2452
  %5207 = getelementptr inbounds i8, i8* %5195, i64 8
  %5208 = bitcast i8* %5207 to i64*
  store i64 %5203, i64* %5208, align 1, !tbaa !2452
  %5209 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5210 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5211 = load i64, i64* %PC
  %5212 = add i64 %5211, 9
  store i64 %5212, i64* %PC
  %5213 = bitcast i8* %5210 to double*
  %5214 = load double, double* %5213, align 1
  %5215 = getelementptr inbounds i8, i8* %5210, i64 8
  %5216 = bitcast i8* %5215 to i64*
  %5217 = load i64, i64* %5216, align 1
  %5218 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %5219 = fsub double %5214, %5218
  %5220 = bitcast i8* %5209 to double*
  store double %5219, double* %5220, align 1, !tbaa !2452
  %5221 = getelementptr inbounds i8, i8* %5209, i64 8
  %5222 = bitcast i8* %5221 to i64*
  store i64 %5217, i64* %5222, align 1, !tbaa !2452
  %5223 = bitcast %union.vec128_t* %XMM3 to i8*
  %5224 = load i64, i64* %PC
  %5225 = add i64 %5224, 9
  store i64 %5225, i64* %PC
  %5226 = bitcast i8* %5223 to double*
  %5227 = load double, double* %5226, align 1
  store double %5227, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 120) to double*)
  %5228 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5229 = load i64, i64* %PC
  %5230 = add i64 %5229, 9
  store i64 %5230, i64* %PC
  %5231 = load double, double* bitcast (%piref_type* @piref to double*)
  %5232 = bitcast i8* %5228 to double*
  store double %5231, double* %5232, align 1, !tbaa !2452
  %5233 = getelementptr inbounds i8, i8* %5228, i64 8
  %5234 = bitcast i8* %5233 to double*
  store double 0.000000e+00, double* %5234, align 1, !tbaa !2452
  %5235 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5236 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5237 = load i64, i64* %PC
  %5238 = add i64 %5237, 9
  store i64 %5238, i64* %PC
  %5239 = bitcast i8* %5236 to double*
  %5240 = load double, double* %5239, align 1
  %5241 = getelementptr inbounds i8, i8* %5236, i64 8
  %5242 = bitcast i8* %5241 to i64*
  %5243 = load i64, i64* %5242, align 1
  %5244 = load double, double* bitcast (%three_type* @three to double*)
  %5245 = fdiv double %5240, %5244
  %5246 = bitcast i8* %5235 to double*
  store double %5245, double* %5246, align 1, !tbaa !2452
  %5247 = getelementptr inbounds i8, i8* %5235, i64 8
  %5248 = bitcast i8* %5247 to i64*
  store i64 %5243, i64* %5248, align 1, !tbaa !2452
  %5249 = load i64, i64* %RBP
  %5250 = sub i64 %5249, 24
  %5251 = bitcast %union.vec128_t* %XMM3 to i8*
  %5252 = load i64, i64* %PC
  %5253 = add i64 %5252, 5
  store i64 %5253, i64* %PC
  %5254 = bitcast i8* %5251 to double*
  %5255 = load double, double* %5254, align 1
  %5256 = inttoptr i64 %5250 to double*
  store double %5255, double* %5256
  %5257 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5258 = load i64, i64* %RBP
  %5259 = sub i64 %5258, 24
  %5260 = load i64, i64* %PC
  %5261 = add i64 %5260, 5
  store i64 %5261, i64* %PC
  %5262 = inttoptr i64 %5259 to double*
  %5263 = load double, double* %5262
  %5264 = bitcast i8* %5257 to double*
  store double %5263, double* %5264, align 1, !tbaa !2452
  %5265 = getelementptr inbounds i8, i8* %5257, i64 8
  %5266 = bitcast i8* %5265 to double*
  store double 0.000000e+00, double* %5266, align 1, !tbaa !2452
  %5267 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5268 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5269 = load i64, i64* %RBP
  %5270 = sub i64 %5269, 24
  %5271 = load i64, i64* %PC
  %5272 = add i64 %5271, 5
  store i64 %5272, i64* %PC
  %5273 = bitcast i8* %5268 to double*
  %5274 = load double, double* %5273, align 1
  %5275 = getelementptr inbounds i8, i8* %5268, i64 8
  %5276 = bitcast i8* %5275 to i64*
  %5277 = load i64, i64* %5276, align 1
  %5278 = inttoptr i64 %5270 to double*
  %5279 = load double, double* %5278
  %5280 = fmul double %5274, %5279
  %5281 = bitcast i8* %5267 to double*
  store double %5280, double* %5281, align 1, !tbaa !2452
  %5282 = getelementptr inbounds i8, i8* %5267, i64 8
  %5283 = bitcast i8* %5282 to i64*
  store i64 %5277, i64* %5283, align 1, !tbaa !2452
  %5284 = load i64, i64* %RBP
  %5285 = sub i64 %5284, 40
  %5286 = bitcast %union.vec128_t* %XMM3 to i8*
  %5287 = load i64, i64* %PC
  %5288 = add i64 %5287, 5
  store i64 %5288, i64* %PC
  %5289 = bitcast i8* %5286 to double*
  %5290 = load double, double* %5289, align 1
  %5291 = inttoptr i64 %5285 to double*
  store double %5290, double* %5291
  %5292 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5293 = load i64, i64* %RBP
  %5294 = sub i64 %5293, 24
  %5295 = load i64, i64* %PC
  %5296 = add i64 %5295, 5
  store i64 %5296, i64* %PC
  %5297 = inttoptr i64 %5294 to double*
  %5298 = load double, double* %5297
  %5299 = bitcast i8* %5292 to double*
  store double %5298, double* %5299, align 1, !tbaa !2452
  %5300 = getelementptr inbounds i8, i8* %5292, i64 8
  %5301 = bitcast i8* %5300 to double*
  store double 0.000000e+00, double* %5301, align 1, !tbaa !2452
  %5302 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5303 = load i64, i64* %PC
  %5304 = add i64 %5303, 9
  store i64 %5304, i64* %PC
  %5305 = load double, double* bitcast (%A6_type* @A6 to double*)
  %5306 = bitcast i8* %5302 to double*
  store double %5305, double* %5306, align 1, !tbaa !2452
  %5307 = getelementptr inbounds i8, i8* %5302, i64 8
  %5308 = bitcast i8* %5307 to double*
  store double 0.000000e+00, double* %5308, align 1, !tbaa !2452
  %5309 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5310 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5311 = load i64, i64* %RBP
  %5312 = sub i64 %5311, 40
  %5313 = load i64, i64* %PC
  %5314 = add i64 %5313, 5
  store i64 %5314, i64* %PC
  %5315 = bitcast i8* %5310 to double*
  %5316 = load double, double* %5315, align 1
  %5317 = getelementptr inbounds i8, i8* %5310, i64 8
  %5318 = bitcast i8* %5317 to i64*
  %5319 = load i64, i64* %5318, align 1
  %5320 = inttoptr i64 %5312 to double*
  %5321 = load double, double* %5320
  %5322 = fmul double %5316, %5321
  %5323 = bitcast i8* %5309 to double*
  store double %5322, double* %5323, align 1, !tbaa !2452
  %5324 = getelementptr inbounds i8, i8* %5309, i64 8
  %5325 = bitcast i8* %5324 to i64*
  store i64 %5319, i64* %5325, align 1, !tbaa !2452
  %5326 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5327 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5328 = load i64, i64* %PC
  %5329 = add i64 %5328, 9
  store i64 %5329, i64* %PC
  %5330 = bitcast i8* %5327 to double*
  %5331 = load double, double* %5330, align 1
  %5332 = getelementptr inbounds i8, i8* %5327, i64 8
  %5333 = bitcast i8* %5332 to i64*
  %5334 = load i64, i64* %5333, align 1
  %5335 = load double, double* bitcast (%A5_type* @A5 to double*)
  %5336 = fadd double %5331, %5335
  %5337 = bitcast i8* %5326 to double*
  store double %5336, double* %5337, align 1, !tbaa !2452
  %5338 = getelementptr inbounds i8, i8* %5326, i64 8
  %5339 = bitcast i8* %5338 to i64*
  store i64 %5334, i64* %5339, align 1, !tbaa !2452
  %5340 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5341 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5342 = load i64, i64* %RBP
  %5343 = sub i64 %5342, 40
  %5344 = load i64, i64* %PC
  %5345 = add i64 %5344, 5
  store i64 %5345, i64* %PC
  %5346 = bitcast i8* %5341 to double*
  %5347 = load double, double* %5346, align 1
  %5348 = getelementptr inbounds i8, i8* %5341, i64 8
  %5349 = bitcast i8* %5348 to i64*
  %5350 = load i64, i64* %5349, align 1
  %5351 = inttoptr i64 %5343 to double*
  %5352 = load double, double* %5351
  %5353 = fmul double %5347, %5352
  %5354 = bitcast i8* %5340 to double*
  store double %5353, double* %5354, align 1, !tbaa !2452
  %5355 = getelementptr inbounds i8, i8* %5340, i64 8
  %5356 = bitcast i8* %5355 to i64*
  store i64 %5350, i64* %5356, align 1, !tbaa !2452
  %5357 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5358 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5359 = load i64, i64* %PC
  %5360 = add i64 %5359, 9
  store i64 %5360, i64* %PC
  %5361 = bitcast i8* %5358 to double*
  %5362 = load double, double* %5361, align 1
  %5363 = getelementptr inbounds i8, i8* %5358, i64 8
  %5364 = bitcast i8* %5363 to i64*
  %5365 = load i64, i64* %5364, align 1
  %5366 = load double, double* bitcast (%A4_type* @A4 to double*)
  %5367 = fadd double %5362, %5366
  %5368 = bitcast i8* %5357 to double*
  store double %5367, double* %5368, align 1, !tbaa !2452
  %5369 = getelementptr inbounds i8, i8* %5357, i64 8
  %5370 = bitcast i8* %5369 to i64*
  store i64 %5365, i64* %5370, align 1, !tbaa !2452
  %5371 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5372 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5373 = load i64, i64* %RBP
  %5374 = sub i64 %5373, 40
  %5375 = load i64, i64* %PC
  %5376 = add i64 %5375, 5
  store i64 %5376, i64* %PC
  %5377 = bitcast i8* %5372 to double*
  %5378 = load double, double* %5377, align 1
  %5379 = getelementptr inbounds i8, i8* %5372, i64 8
  %5380 = bitcast i8* %5379 to i64*
  %5381 = load i64, i64* %5380, align 1
  %5382 = inttoptr i64 %5374 to double*
  %5383 = load double, double* %5382
  %5384 = fmul double %5378, %5383
  %5385 = bitcast i8* %5371 to double*
  store double %5384, double* %5385, align 1, !tbaa !2452
  %5386 = getelementptr inbounds i8, i8* %5371, i64 8
  %5387 = bitcast i8* %5386 to i64*
  store i64 %5381, i64* %5387, align 1, !tbaa !2452
  %5388 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5389 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5390 = load i64, i64* %PC
  %5391 = add i64 %5390, 9
  store i64 %5391, i64* %PC
  %5392 = bitcast i8* %5389 to double*
  %5393 = load double, double* %5392, align 1
  %5394 = getelementptr inbounds i8, i8* %5389, i64 8
  %5395 = bitcast i8* %5394 to i64*
  %5396 = load i64, i64* %5395, align 1
  %5397 = load double, double* bitcast (%A3_type* @A3 to double*)
  %5398 = fadd double %5393, %5397
  %5399 = bitcast i8* %5388 to double*
  store double %5398, double* %5399, align 1, !tbaa !2452
  %5400 = getelementptr inbounds i8, i8* %5388, i64 8
  %5401 = bitcast i8* %5400 to i64*
  store i64 %5396, i64* %5401, align 1, !tbaa !2452
  %5402 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5403 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5404 = load i64, i64* %RBP
  %5405 = sub i64 %5404, 40
  %5406 = load i64, i64* %PC
  %5407 = add i64 %5406, 5
  store i64 %5407, i64* %PC
  %5408 = bitcast i8* %5403 to double*
  %5409 = load double, double* %5408, align 1
  %5410 = getelementptr inbounds i8, i8* %5403, i64 8
  %5411 = bitcast i8* %5410 to i64*
  %5412 = load i64, i64* %5411, align 1
  %5413 = inttoptr i64 %5405 to double*
  %5414 = load double, double* %5413
  %5415 = fmul double %5409, %5414
  %5416 = bitcast i8* %5402 to double*
  store double %5415, double* %5416, align 1, !tbaa !2452
  %5417 = getelementptr inbounds i8, i8* %5402, i64 8
  %5418 = bitcast i8* %5417 to i64*
  store i64 %5412, i64* %5418, align 1, !tbaa !2452
  %5419 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5420 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5421 = load i64, i64* %PC
  %5422 = add i64 %5421, 9
  store i64 %5422, i64* %PC
  %5423 = bitcast i8* %5420 to double*
  %5424 = load double, double* %5423, align 1
  %5425 = getelementptr inbounds i8, i8* %5420, i64 8
  %5426 = bitcast i8* %5425 to i64*
  %5427 = load i64, i64* %5426, align 1
  %5428 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %5429 = fadd double %5424, %5428
  %5430 = bitcast i8* %5419 to double*
  store double %5429, double* %5430, align 1, !tbaa !2452
  %5431 = getelementptr inbounds i8, i8* %5419, i64 8
  %5432 = bitcast i8* %5431 to i64*
  store i64 %5427, i64* %5432, align 1, !tbaa !2452
  %5433 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5434 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5435 = load i64, i64* %RBP
  %5436 = sub i64 %5435, 40
  %5437 = load i64, i64* %PC
  %5438 = add i64 %5437, 5
  store i64 %5438, i64* %PC
  %5439 = bitcast i8* %5434 to double*
  %5440 = load double, double* %5439, align 1
  %5441 = getelementptr inbounds i8, i8* %5434, i64 8
  %5442 = bitcast i8* %5441 to i64*
  %5443 = load i64, i64* %5442, align 1
  %5444 = inttoptr i64 %5436 to double*
  %5445 = load double, double* %5444
  %5446 = fmul double %5440, %5445
  %5447 = bitcast i8* %5433 to double*
  store double %5446, double* %5447, align 1, !tbaa !2452
  %5448 = getelementptr inbounds i8, i8* %5433, i64 8
  %5449 = bitcast i8* %5448 to i64*
  store i64 %5443, i64* %5449, align 1, !tbaa !2452
  %5450 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5451 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5452 = load i64, i64* %PC
  %5453 = add i64 %5452, 9
  store i64 %5453, i64* %PC
  %5454 = bitcast i8* %5451 to double*
  %5455 = load double, double* %5454, align 1
  %5456 = getelementptr inbounds i8, i8* %5451, i64 8
  %5457 = bitcast i8* %5456 to i64*
  %5458 = load i64, i64* %5457, align 1
  %5459 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %5460 = fadd double %5455, %5459
  %5461 = bitcast i8* %5450 to double*
  store double %5460, double* %5461, align 1, !tbaa !2452
  %5462 = getelementptr inbounds i8, i8* %5450, i64 8
  %5463 = bitcast i8* %5462 to i64*
  store i64 %5458, i64* %5463, align 1, !tbaa !2452
  %5464 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5465 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5466 = load i64, i64* %RBP
  %5467 = sub i64 %5466, 40
  %5468 = load i64, i64* %PC
  %5469 = add i64 %5468, 5
  store i64 %5469, i64* %PC
  %5470 = bitcast i8* %5465 to double*
  %5471 = load double, double* %5470, align 1
  %5472 = getelementptr inbounds i8, i8* %5465, i64 8
  %5473 = bitcast i8* %5472 to i64*
  %5474 = load i64, i64* %5473, align 1
  %5475 = inttoptr i64 %5467 to double*
  %5476 = load double, double* %5475
  %5477 = fmul double %5471, %5476
  %5478 = bitcast i8* %5464 to double*
  store double %5477, double* %5478, align 1, !tbaa !2452
  %5479 = getelementptr inbounds i8, i8* %5464, i64 8
  %5480 = bitcast i8* %5479 to i64*
  store i64 %5474, i64* %5480, align 1, !tbaa !2452
  %5481 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5482 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5483 = load i64, i64* %PC
  %5484 = add i64 %5483, 9
  store i64 %5484, i64* %PC
  %5485 = bitcast i8* %5482 to double*
  %5486 = load double, double* %5485, align 1
  %5487 = getelementptr inbounds i8, i8* %5482, i64 8
  %5488 = bitcast i8* %5487 to i64*
  %5489 = load i64, i64* %5488, align 1
  %5490 = load double, double* bitcast (%one_type* @one to double*)
  %5491 = fadd double %5486, %5490
  %5492 = bitcast i8* %5481 to double*
  store double %5491, double* %5492, align 1, !tbaa !2452
  %5493 = getelementptr inbounds i8, i8* %5481, i64 8
  %5494 = bitcast i8* %5493 to i64*
  store i64 %5489, i64* %5494, align 1, !tbaa !2452
  %5495 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5496 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5497 = bitcast %union.vec128_t* %XMM4 to i8*
  %5498 = load i64, i64* %PC
  %5499 = add i64 %5498, 4
  store i64 %5499, i64* %PC
  %5500 = bitcast i8* %5496 to double*
  %5501 = load double, double* %5500, align 1
  %5502 = getelementptr inbounds i8, i8* %5496, i64 8
  %5503 = bitcast i8* %5502 to i64*
  %5504 = load i64, i64* %5503, align 1
  %5505 = bitcast i8* %5497 to double*
  %5506 = load double, double* %5505, align 1
  %5507 = fmul double %5501, %5506
  %5508 = bitcast i8* %5495 to double*
  store double %5507, double* %5508, align 1, !tbaa !2452
  %5509 = getelementptr inbounds i8, i8* %5495, i64 8
  %5510 = bitcast i8* %5509 to i64*
  store i64 %5504, i64* %5510, align 1, !tbaa !2452
  %5511 = bitcast %union.vec128_t* %XMM3 to i8*
  %5512 = load i64, i64* %PC
  %5513 = add i64 %5512, 9
  store i64 %5513, i64* %PC
  %5514 = bitcast i8* %5511 to double*
  %5515 = load double, double* %5514, align 1
  store double %5515, double* bitcast (%sa_type* @sa to double*)
  %5516 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5517 = load i64, i64* %RBP
  %5518 = sub i64 %5517, 40
  %5519 = load i64, i64* %PC
  %5520 = add i64 %5519, 5
  store i64 %5520, i64* %PC
  %5521 = inttoptr i64 %5518 to double*
  %5522 = load double, double* %5521
  %5523 = bitcast i8* %5516 to double*
  store double %5522, double* %5523, align 1, !tbaa !2452
  %5524 = getelementptr inbounds i8, i8* %5516, i64 8
  %5525 = bitcast i8* %5524 to double*
  store double 0.000000e+00, double* %5525, align 1, !tbaa !2452
  %5526 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5527 = load i64, i64* %RBP
  %5528 = sub i64 %5527, 40
  %5529 = load i64, i64* %PC
  %5530 = add i64 %5529, 5
  store i64 %5530, i64* %PC
  %5531 = inttoptr i64 %5528 to double*
  %5532 = load double, double* %5531
  %5533 = bitcast i8* %5526 to double*
  store double %5532, double* %5533, align 1, !tbaa !2452
  %5534 = getelementptr inbounds i8, i8* %5526, i64 8
  %5535 = bitcast i8* %5534 to double*
  store double 0.000000e+00, double* %5535, align 1, !tbaa !2452
  %5536 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %5537 = load i64, i64* %RBP
  %5538 = sub i64 %5537, 40
  %5539 = load i64, i64* %PC
  %5540 = add i64 %5539, 5
  store i64 %5540, i64* %PC
  %5541 = inttoptr i64 %5538 to double*
  %5542 = load double, double* %5541
  %5543 = bitcast i8* %5536 to double*
  store double %5542, double* %5543, align 1, !tbaa !2452
  %5544 = getelementptr inbounds i8, i8* %5536, i64 8
  %5545 = bitcast i8* %5544 to double*
  store double 0.000000e+00, double* %5545, align 1, !tbaa !2452
  %5546 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %5547 = load i64, i64* %RBP
  %5548 = sub i64 %5547, 40
  %5549 = load i64, i64* %PC
  %5550 = add i64 %5549, 5
  store i64 %5550, i64* %PC
  %5551 = inttoptr i64 %5548 to double*
  %5552 = load double, double* %5551
  %5553 = bitcast i8* %5546 to double*
  store double %5552, double* %5553, align 1, !tbaa !2452
  %5554 = getelementptr inbounds i8, i8* %5546, i64 8
  %5555 = bitcast i8* %5554 to double*
  store double 0.000000e+00, double* %5555, align 1, !tbaa !2452
  %5556 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %5557 = load i64, i64* %RBP
  %5558 = sub i64 %5557, 40
  %5559 = load i64, i64* %PC
  %5560 = add i64 %5559, 5
  store i64 %5560, i64* %PC
  %5561 = inttoptr i64 %5558 to double*
  %5562 = load double, double* %5561
  %5563 = bitcast i8* %5556 to double*
  store double %5562, double* %5563, align 1, !tbaa !2452
  %5564 = getelementptr inbounds i8, i8* %5556, i64 8
  %5565 = bitcast i8* %5564 to double*
  store double 0.000000e+00, double* %5565, align 1, !tbaa !2452
  %5566 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %5567 = load i64, i64* %PC
  %5568 = add i64 %5567, 10
  store i64 %5568, i64* %PC
  %5569 = load double, double* bitcast (%B6_type* @B6 to double*)
  %5570 = bitcast i8* %5566 to double*
  store double %5569, double* %5570, align 1, !tbaa !2452
  %5571 = getelementptr inbounds i8, i8* %5566, i64 8
  %5572 = bitcast i8* %5571 to double*
  store double 0.000000e+00, double* %5572, align 1, !tbaa !2452
  %5573 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %5574 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %5575 = load i64, i64* %RBP
  %5576 = sub i64 %5575, 40
  %5577 = load i64, i64* %PC
  %5578 = add i64 %5577, 6
  store i64 %5578, i64* %PC
  %5579 = bitcast i8* %5574 to double*
  %5580 = load double, double* %5579, align 1
  %5581 = getelementptr inbounds i8, i8* %5574, i64 8
  %5582 = bitcast i8* %5581 to i64*
  %5583 = load i64, i64* %5582, align 1
  %5584 = inttoptr i64 %5576 to double*
  %5585 = load double, double* %5584
  %5586 = fmul double %5580, %5585
  %5587 = bitcast i8* %5573 to double*
  store double %5586, double* %5587, align 1, !tbaa !2452
  %5588 = getelementptr inbounds i8, i8* %5573, i64 8
  %5589 = bitcast i8* %5588 to i64*
  store i64 %5583, i64* %5589, align 1, !tbaa !2452
  %5590 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %5591 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %5592 = load i64, i64* %PC
  %5593 = add i64 %5592, 10
  store i64 %5593, i64* %PC
  %5594 = bitcast i8* %5591 to double*
  %5595 = load double, double* %5594, align 1
  %5596 = getelementptr inbounds i8, i8* %5591, i64 8
  %5597 = bitcast i8* %5596 to i64*
  %5598 = load i64, i64* %5597, align 1
  %5599 = load double, double* bitcast (%B5_type* @B5 to double*)
  %5600 = fadd double %5595, %5599
  %5601 = bitcast i8* %5590 to double*
  store double %5600, double* %5601, align 1, !tbaa !2452
  %5602 = getelementptr inbounds i8, i8* %5590, i64 8
  %5603 = bitcast i8* %5602 to i64*
  store i64 %5598, i64* %5603, align 1, !tbaa !2452
  %5604 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %5605 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %5606 = bitcast %union.vec128_t* %XMM8 to i8*
  %5607 = load i64, i64* %PC
  %5608 = add i64 %5607, 5
  store i64 %5608, i64* %PC
  %5609 = bitcast i8* %5605 to double*
  %5610 = load double, double* %5609, align 1
  %5611 = getelementptr inbounds i8, i8* %5605, i64 8
  %5612 = bitcast i8* %5611 to i64*
  %5613 = load i64, i64* %5612, align 1
  %5614 = bitcast i8* %5606 to double*
  %5615 = load double, double* %5614, align 1
  %5616 = fmul double %5610, %5615
  %5617 = bitcast i8* %5604 to double*
  store double %5616, double* %5617, align 1, !tbaa !2452
  %5618 = getelementptr inbounds i8, i8* %5604, i64 8
  %5619 = bitcast i8* %5618 to i64*
  store i64 %5613, i64* %5619, align 1, !tbaa !2452
  %5620 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %5621 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %5622 = load i64, i64* %PC
  %5623 = add i64 %5622, 9
  store i64 %5623, i64* %PC
  %5624 = bitcast i8* %5621 to double*
  %5625 = load double, double* %5624, align 1
  %5626 = getelementptr inbounds i8, i8* %5621, i64 8
  %5627 = bitcast i8* %5626 to i64*
  %5628 = load i64, i64* %5627, align 1
  %5629 = load double, double* bitcast (%B4_type* @B4 to double*)
  %5630 = fadd double %5625, %5629
  %5631 = bitcast i8* %5620 to double*
  store double %5630, double* %5631, align 1, !tbaa !2452
  %5632 = getelementptr inbounds i8, i8* %5620, i64 8
  %5633 = bitcast i8* %5632 to i64*
  store i64 %5628, i64* %5633, align 1, !tbaa !2452
  %5634 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %5635 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %5636 = bitcast %union.vec128_t* %XMM7 to i8*
  %5637 = load i64, i64* %PC
  %5638 = add i64 %5637, 4
  store i64 %5638, i64* %PC
  %5639 = bitcast i8* %5635 to double*
  %5640 = load double, double* %5639, align 1
  %5641 = getelementptr inbounds i8, i8* %5635, i64 8
  %5642 = bitcast i8* %5641 to i64*
  %5643 = load i64, i64* %5642, align 1
  %5644 = bitcast i8* %5636 to double*
  %5645 = load double, double* %5644, align 1
  %5646 = fmul double %5640, %5645
  %5647 = bitcast i8* %5634 to double*
  store double %5646, double* %5647, align 1, !tbaa !2452
  %5648 = getelementptr inbounds i8, i8* %5634, i64 8
  %5649 = bitcast i8* %5648 to i64*
  store i64 %5643, i64* %5649, align 1, !tbaa !2452
  %5650 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %5651 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %5652 = load i64, i64* %PC
  %5653 = add i64 %5652, 9
  store i64 %5653, i64* %PC
  %5654 = bitcast i8* %5651 to double*
  %5655 = load double, double* %5654, align 1
  %5656 = getelementptr inbounds i8, i8* %5651, i64 8
  %5657 = bitcast i8* %5656 to i64*
  %5658 = load i64, i64* %5657, align 1
  %5659 = load double, double* bitcast (%B3_type* @B3 to double*)
  %5660 = fadd double %5655, %5659
  %5661 = bitcast i8* %5650 to double*
  store double %5660, double* %5661, align 1, !tbaa !2452
  %5662 = getelementptr inbounds i8, i8* %5650, i64 8
  %5663 = bitcast i8* %5662 to i64*
  store i64 %5658, i64* %5663, align 1, !tbaa !2452
  %5664 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %5665 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %5666 = bitcast %union.vec128_t* %XMM6 to i8*
  %5667 = load i64, i64* %PC
  %5668 = add i64 %5667, 4
  store i64 %5668, i64* %PC
  %5669 = bitcast i8* %5665 to double*
  %5670 = load double, double* %5669, align 1
  %5671 = getelementptr inbounds i8, i8* %5665, i64 8
  %5672 = bitcast i8* %5671 to i64*
  %5673 = load i64, i64* %5672, align 1
  %5674 = bitcast i8* %5666 to double*
  %5675 = load double, double* %5674, align 1
  %5676 = fmul double %5670, %5675
  %5677 = bitcast i8* %5664 to double*
  store double %5676, double* %5677, align 1, !tbaa !2452
  %5678 = getelementptr inbounds i8, i8* %5664, i64 8
  %5679 = bitcast i8* %5678 to i64*
  store i64 %5673, i64* %5679, align 1, !tbaa !2452
  %5680 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %5681 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %5682 = load i64, i64* %PC
  %5683 = add i64 %5682, 9
  store i64 %5683, i64* %PC
  %5684 = bitcast i8* %5681 to double*
  %5685 = load double, double* %5684, align 1
  %5686 = getelementptr inbounds i8, i8* %5681, i64 8
  %5687 = bitcast i8* %5686 to i64*
  %5688 = load i64, i64* %5687, align 1
  %5689 = load double, double* bitcast (%B2_type* @B2 to double*)
  %5690 = fadd double %5685, %5689
  %5691 = bitcast i8* %5680 to double*
  store double %5690, double* %5691, align 1, !tbaa !2452
  %5692 = getelementptr inbounds i8, i8* %5680, i64 8
  %5693 = bitcast i8* %5692 to i64*
  store i64 %5688, i64* %5693, align 1, !tbaa !2452
  %5694 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5695 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5696 = bitcast %union.vec128_t* %XMM5 to i8*
  %5697 = load i64, i64* %PC
  %5698 = add i64 %5697, 4
  store i64 %5698, i64* %PC
  %5699 = bitcast i8* %5695 to double*
  %5700 = load double, double* %5699, align 1
  %5701 = getelementptr inbounds i8, i8* %5695, i64 8
  %5702 = bitcast i8* %5701 to i64*
  %5703 = load i64, i64* %5702, align 1
  %5704 = bitcast i8* %5696 to double*
  %5705 = load double, double* %5704, align 1
  %5706 = fmul double %5700, %5705
  %5707 = bitcast i8* %5694 to double*
  store double %5706, double* %5707, align 1, !tbaa !2452
  %5708 = getelementptr inbounds i8, i8* %5694, i64 8
  %5709 = bitcast i8* %5708 to i64*
  store i64 %5703, i64* %5709, align 1, !tbaa !2452
  %5710 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5711 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5712 = load i64, i64* %PC
  %5713 = add i64 %5712, 9
  store i64 %5713, i64* %PC
  %5714 = bitcast i8* %5711 to double*
  %5715 = load double, double* %5714, align 1
  %5716 = getelementptr inbounds i8, i8* %5711, i64 8
  %5717 = bitcast i8* %5716 to i64*
  %5718 = load i64, i64* %5717, align 1
  %5719 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %5720 = fadd double %5715, %5719
  %5721 = bitcast i8* %5710 to double*
  store double %5720, double* %5721, align 1, !tbaa !2452
  %5722 = getelementptr inbounds i8, i8* %5710, i64 8
  %5723 = bitcast i8* %5722 to i64*
  store i64 %5718, i64* %5723, align 1, !tbaa !2452
  %5724 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5725 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5726 = bitcast %union.vec128_t* %XMM4 to i8*
  %5727 = load i64, i64* %PC
  %5728 = add i64 %5727, 4
  store i64 %5728, i64* %PC
  %5729 = bitcast i8* %5725 to double*
  %5730 = load double, double* %5729, align 1
  %5731 = getelementptr inbounds i8, i8* %5725, i64 8
  %5732 = bitcast i8* %5731 to i64*
  %5733 = load i64, i64* %5732, align 1
  %5734 = bitcast i8* %5726 to double*
  %5735 = load double, double* %5734, align 1
  %5736 = fmul double %5730, %5735
  %5737 = bitcast i8* %5724 to double*
  store double %5736, double* %5737, align 1, !tbaa !2452
  %5738 = getelementptr inbounds i8, i8* %5724, i64 8
  %5739 = bitcast i8* %5738 to i64*
  store i64 %5733, i64* %5739, align 1, !tbaa !2452
  %5740 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5741 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5742 = load i64, i64* %PC
  %5743 = add i64 %5742, 9
  store i64 %5743, i64* %PC
  %5744 = bitcast i8* %5741 to double*
  %5745 = load double, double* %5744, align 1
  %5746 = getelementptr inbounds i8, i8* %5741, i64 8
  %5747 = bitcast i8* %5746 to i64*
  %5748 = load i64, i64* %5747, align 1
  %5749 = load double, double* bitcast (%one_type* @one to double*)
  %5750 = fadd double %5745, %5749
  %5751 = bitcast i8* %5740 to double*
  store double %5750, double* %5751, align 1, !tbaa !2452
  %5752 = getelementptr inbounds i8, i8* %5740, i64 8
  %5753 = bitcast i8* %5752 to i64*
  store i64 %5748, i64* %5753, align 1, !tbaa !2452
  %5754 = bitcast %union.vec128_t* %XMM3 to i8*
  %5755 = load i64, i64* %PC
  %5756 = add i64 %5755, 9
  store i64 %5756, i64* %PC
  %5757 = bitcast i8* %5754 to double*
  %5758 = load double, double* %5757, align 1
  store double %5758, double* bitcast (%sb_type* @sb to double*)
  %5759 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5760 = load i64, i64* %PC
  %5761 = add i64 %5760, 9
  store i64 %5761, i64* %PC
  %5762 = load double, double* bitcast (%sa_type* @sa to double*)
  %5763 = bitcast i8* %5759 to double*
  store double %5762, double* %5763, align 1, !tbaa !2452
  %5764 = getelementptr inbounds i8, i8* %5759, i64 8
  %5765 = bitcast i8* %5764 to double*
  store double 0.000000e+00, double* %5765, align 1, !tbaa !2452
  %5766 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5767 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5768 = load i64, i64* %PC
  %5769 = add i64 %5768, 9
  store i64 %5769, i64* %PC
  %5770 = bitcast i8* %5767 to double*
  %5771 = load double, double* %5770, align 1
  %5772 = getelementptr inbounds i8, i8* %5767, i64 8
  %5773 = bitcast i8* %5772 to i64*
  %5774 = load i64, i64* %5773, align 1
  %5775 = load double, double* bitcast (%sb_type* @sb to double*)
  %5776 = fdiv double %5771, %5775
  %5777 = bitcast i8* %5766 to double*
  store double %5776, double* %5777, align 1, !tbaa !2452
  %5778 = getelementptr inbounds i8, i8* %5766, i64 8
  %5779 = bitcast i8* %5778 to i64*
  store i64 %5774, i64* %5779, align 1, !tbaa !2452
  %5780 = bitcast %union.vec128_t* %XMM3 to i8*
  %5781 = load i64, i64* %PC
  %5782 = add i64 %5781, 9
  store i64 %5782, i64* %PC
  %5783 = bitcast i8* %5780 to double*
  %5784 = load double, double* %5783, align 1
  store double %5784, double* bitcast (%sa_type* @sa to double*)
  %5785 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5786 = load i64, i64* %PC
  %5787 = add i64 %5786, 9
  store i64 %5787, i64* %PC
  %5788 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 120) to double*)
  %5789 = bitcast i8* %5785 to double*
  store double %5788, double* %5789, align 1, !tbaa !2452
  %5790 = getelementptr inbounds i8, i8* %5785, i64 8
  %5791 = bitcast i8* %5790 to double*
  store double 0.000000e+00, double* %5791, align 1, !tbaa !2452
  %5792 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5793 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5794 = bitcast %union.vec128_t* %XMM2 to i8*
  %5795 = load i64, i64* %PC
  %5796 = add i64 %5795, 4
  store i64 %5796, i64* %PC
  %5797 = bitcast i8* %5793 to double*
  %5798 = load double, double* %5797, align 1
  %5799 = getelementptr inbounds i8, i8* %5793, i64 8
  %5800 = bitcast i8* %5799 to i64*
  %5801 = load i64, i64* %5800, align 1
  %5802 = bitcast i8* %5794 to double*
  %5803 = load double, double* %5802, align 1
  %5804 = fdiv double %5798, %5803
  %5805 = bitcast i8* %5792 to double*
  store double %5804, double* %5805, align 1, !tbaa !2452
  %5806 = getelementptr inbounds i8, i8* %5792, i64 8
  %5807 = bitcast i8* %5806 to i64*
  store i64 %5801, i64* %5807, align 1, !tbaa !2452
  %5808 = bitcast %union.vec128_t* %XMM3 to i8*
  %5809 = load i64, i64* %PC
  %5810 = add i64 %5809, 9
  store i64 %5810, i64* %PC
  %5811 = bitcast i8* %5808 to double*
  %5812 = load double, double* %5811, align 1
  store double %5812, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 128) to double*)
  %5813 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5814 = load i64, i64* %RBP
  %5815 = sub i64 %5814, 48
  %5816 = load i64, i64* %PC
  %5817 = add i64 %5816, 5
  store i64 %5817, i64* %PC
  %5818 = inttoptr i64 %5815 to double*
  %5819 = load double, double* %5818
  %5820 = bitcast i8* %5813 to double*
  store double %5819, double* %5820, align 1, !tbaa !2452
  %5821 = getelementptr inbounds i8, i8* %5813, i64 8
  %5822 = bitcast i8* %5821 to double*
  store double 0.000000e+00, double* %5822, align 1, !tbaa !2452
  %5823 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5824 = load i64, i64* %PC
  %5825 = add i64 %5824, 9
  store i64 %5825, i64* %PC
  %5826 = load double, double* bitcast (%sa_type* @sa to double*)
  %5827 = bitcast i8* %5823 to double*
  store double %5826, double* %5827, align 1, !tbaa !2452
  %5828 = getelementptr inbounds i8, i8* %5823, i64 8
  %5829 = bitcast i8* %5828 to double*
  store double 0.000000e+00, double* %5829, align 1, !tbaa !2452
  %5830 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5831 = load i64, i64* %PC
  %5832 = add i64 %5831, 9
  store i64 %5832, i64* %PC
  %5833 = load double, double* bitcast (%two_type* @two to double*)
  %5834 = bitcast i8* %5830 to double*
  store double %5833, double* %5834, align 1, !tbaa !2452
  %5835 = getelementptr inbounds i8, i8* %5830, i64 8
  %5836 = bitcast i8* %5835 to double*
  store double 0.000000e+00, double* %5836, align 1, !tbaa !2452
  %5837 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5838 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5839 = load i64, i64* %RBP
  %5840 = sub i64 %5839, 16
  %5841 = load i64, i64* %PC
  %5842 = add i64 %5841, 5
  store i64 %5842, i64* %PC
  %5843 = bitcast i8* %5838 to double*
  %5844 = load double, double* %5843, align 1
  %5845 = getelementptr inbounds i8, i8* %5838, i64 8
  %5846 = bitcast i8* %5845 to i64*
  %5847 = load i64, i64* %5846, align 1
  %5848 = inttoptr i64 %5840 to double*
  %5849 = load double, double* %5848
  %5850 = fmul double %5844, %5849
  %5851 = bitcast i8* %5837 to double*
  store double %5850, double* %5851, align 1, !tbaa !2452
  %5852 = getelementptr inbounds i8, i8* %5837, i64 8
  %5853 = bitcast i8* %5852 to i64*
  store i64 %5847, i64* %5853, align 1, !tbaa !2452
  %5854 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5855 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5856 = bitcast %union.vec128_t* %XMM4 to i8*
  %5857 = load i64, i64* %PC
  %5858 = add i64 %5857, 4
  store i64 %5858, i64* %PC
  %5859 = bitcast i8* %5855 to double*
  %5860 = load double, double* %5859, align 1
  %5861 = getelementptr inbounds i8, i8* %5855, i64 8
  %5862 = bitcast i8* %5861 to i64*
  %5863 = load i64, i64* %5862, align 1
  %5864 = bitcast i8* %5856 to double*
  %5865 = load double, double* %5864, align 1
  %5866 = fadd double %5860, %5865
  %5867 = bitcast i8* %5854 to double*
  store double %5866, double* %5867, align 1, !tbaa !2452
  %5868 = getelementptr inbounds i8, i8* %5854, i64 8
  %5869 = bitcast i8* %5868 to i64*
  store i64 %5863, i64* %5869, align 1, !tbaa !2452
  %5870 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5871 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5872 = bitcast %union.vec128_t* %XMM3 to i8*
  %5873 = load i64, i64* %PC
  %5874 = add i64 %5873, 4
  store i64 %5874, i64* %PC
  %5875 = bitcast i8* %5871 to double*
  %5876 = load double, double* %5875, align 1
  %5877 = getelementptr inbounds i8, i8* %5871, i64 8
  %5878 = bitcast i8* %5877 to i64*
  %5879 = load i64, i64* %5878, align 1
  %5880 = bitcast i8* %5872 to double*
  %5881 = load double, double* %5880, align 1
  %5882 = fmul double %5876, %5881
  %5883 = bitcast i8* %5870 to double*
  store double %5882, double* %5883, align 1, !tbaa !2452
  %5884 = getelementptr inbounds i8, i8* %5870, i64 8
  %5885 = bitcast i8* %5884 to i64*
  store i64 %5879, i64* %5885, align 1, !tbaa !2452
  %5886 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5887 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5888 = load i64, i64* %PC
  %5889 = add i64 %5888, 9
  store i64 %5889, i64* %PC
  %5890 = bitcast i8* %5887 to double*
  %5891 = load double, double* %5890, align 1
  %5892 = getelementptr inbounds i8, i8* %5887, i64 8
  %5893 = bitcast i8* %5892 to i64*
  %5894 = load i64, i64* %5893, align 1
  %5895 = load double, double* bitcast (%two_type* @two to double*)
  %5896 = fdiv double %5891, %5895
  %5897 = bitcast i8* %5886 to double*
  store double %5896, double* %5897, align 1, !tbaa !2452
  %5898 = getelementptr inbounds i8, i8* %5886, i64 8
  %5899 = bitcast i8* %5898 to i64*
  store i64 %5894, i64* %5899, align 1, !tbaa !2452
  %5900 = bitcast %union.vec128_t* %XMM2 to i8*
  %5901 = load i64, i64* %PC
  %5902 = add i64 %5901, 9
  store i64 %5902, i64* %PC
  %5903 = bitcast i8* %5900 to double*
  %5904 = load double, double* %5903, align 1
  store double %5904, double* bitcast (%sa_type* @sa to double*)
  %5905 = bitcast %union.vec128_t* %XMM1 to i8*
  %5906 = load i64, i64* %PC
  %5907 = add i64 %5906, 9
  store i64 %5907, i64* %PC
  %5908 = bitcast i8* %5905 to double*
  %5909 = load double, double* %5908, align 1
  store double %5909, double* bitcast (%sb_type* @sb to double*)
  %5910 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5911 = load i64, i64* %PC
  %5912 = add i64 %5911, 9
  store i64 %5912, i64* %PC
  %5913 = load double, double* bitcast (%sa_type* @sa to double*)
  %5914 = bitcast i8* %5910 to double*
  store double %5913, double* %5914, align 1, !tbaa !2452
  %5915 = getelementptr inbounds i8, i8* %5910, i64 8
  %5916 = bitcast i8* %5915 to double*
  store double 0.000000e+00, double* %5916, align 1, !tbaa !2452
  %5917 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5918 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5919 = load i64, i64* %PC
  %5920 = add i64 %5919, 9
  store i64 %5920, i64* %PC
  %5921 = bitcast i8* %5918 to double*
  %5922 = load double, double* %5921, align 1
  %5923 = getelementptr inbounds i8, i8* %5918, i64 8
  %5924 = bitcast i8* %5923 to i64*
  %5925 = load i64, i64* %5924, align 1
  %5926 = load double, double* bitcast (%sb_type* @sb to double*)
  %5927 = fsub double %5922, %5926
  %5928 = bitcast i8* %5917 to double*
  store double %5927, double* %5928, align 1, !tbaa !2452
  %5929 = getelementptr inbounds i8, i8* %5917, i64 8
  %5930 = bitcast i8* %5929 to i64*
  store i64 %5925, i64* %5930, align 1, !tbaa !2452
  %5931 = bitcast %union.vec128_t* %XMM1 to i8*
  %5932 = load i64, i64* %PC
  %5933 = add i64 %5932, 9
  store i64 %5933, i64* %PC
  %5934 = bitcast i8* %5931 to double*
  %5935 = load double, double* %5934, align 1
  store double %5935, double* bitcast (%sc_type* @sc to double*)
  %5936 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5937 = load i64, i64* %PC
  %5938 = add i64 %5937, 9
  store i64 %5938, i64* %PC
  %5939 = load double, double* bitcast (%one_type* @one to double*)
  %5940 = bitcast i8* %5936 to double*
  store double %5939, double* %5940, align 1, !tbaa !2452
  %5941 = getelementptr inbounds i8, i8* %5936, i64 8
  %5942 = bitcast i8* %5941 to double*
  store double 0.000000e+00, double* %5942, align 1, !tbaa !2452
  %5943 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5944 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5945 = load i64, i64* %PC
  %5946 = add i64 %5945, 9
  store i64 %5946, i64* %PC
  %5947 = bitcast i8* %5944 to double*
  %5948 = load double, double* %5947, align 1
  %5949 = getelementptr inbounds i8, i8* %5944, i64 8
  %5950 = bitcast i8* %5949 to i64*
  %5951 = load i64, i64* %5950, align 1
  %5952 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 128) to double*)
  %5953 = fdiv double %5948, %5952
  %5954 = bitcast i8* %5943 to double*
  store double %5953, double* %5954, align 1, !tbaa !2452
  %5955 = getelementptr inbounds i8, i8* %5943, i64 8
  %5956 = bitcast i8* %5955 to i64*
  store i64 %5951, i64* %5956, align 1, !tbaa !2452
  %5957 = bitcast %union.vec128_t* %XMM1 to i8*
  %5958 = load i64, i64* %PC
  %5959 = add i64 %5958, 9
  store i64 %5959, i64* %PC
  %5960 = bitcast i8* %5957 to double*
  %5961 = load double, double* %5960, align 1
  store double %5961, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 136) to double*)
  %5962 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5963 = bitcast %union.vec128_t* %XMM0 to i8*
  %5964 = load i64, i64* %PC
  %5965 = add i64 %5964, 3
  store i64 %5965, i64* %PC
  %5966 = bitcast i8* %5963 to <2 x i32>*
  %5967 = load <2 x i32>, <2 x i32>* %5966, align 1
  %5968 = getelementptr inbounds i8, i8* %5963, i64 8
  %5969 = bitcast i8* %5968 to <2 x i32>*
  %5970 = load <2 x i32>, <2 x i32>* %5969, align 1
  %5971 = extractelement <2 x i32> %5967, i32 0
  %5972 = bitcast i8* %5962 to i32*
  store i32 %5971, i32* %5972, align 1, !tbaa !2455
  %5973 = extractelement <2 x i32> %5967, i32 1
  %5974 = getelementptr inbounds i8, i8* %5962, i64 4
  %5975 = bitcast i8* %5974 to i32*
  store i32 %5973, i32* %5975, align 1, !tbaa !2455
  %5976 = extractelement <2 x i32> %5970, i32 0
  %5977 = getelementptr inbounds i8, i8* %5962, i64 8
  %5978 = bitcast i8* %5977 to i32*
  store i32 %5976, i32* %5978, align 1, !tbaa !2455
  %5979 = extractelement <2 x i32> %5970, i32 1
  %5980 = getelementptr inbounds i8, i8* %5962, i64 12
  %5981 = bitcast i8* %5980 to i32*
  store i32 %5979, i32* %5981, align 1, !tbaa !2455
  %5982 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5983 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5984 = load i64, i64* %PC
  %5985 = add i64 %5984, 9
  store i64 %5985, i64* %PC
  %5986 = bitcast i8* %5983 to double*
  %5987 = load double, double* %5986, align 1
  %5988 = getelementptr inbounds i8, i8* %5983, i64 8
  %5989 = bitcast i8* %5988 to i64*
  %5990 = load i64, i64* %5989, align 1
  %5991 = load double, double* bitcast (%sc_type* @sc to double*)
  %5992 = fmul double %5987, %5991
  %5993 = bitcast i8* %5982 to double*
  store double %5992, double* %5993, align 1, !tbaa !2452
  %5994 = getelementptr inbounds i8, i8* %5982, i64 8
  %5995 = bitcast i8* %5994 to i64*
  store i64 %5990, i64* %5995, align 1, !tbaa !2452
  %5996 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5997 = bitcast %union.vec128_t* %XMM0 to i8*
  %5998 = load i64, i64* %PC
  %5999 = add i64 %5998, 3
  store i64 %5999, i64* %PC
  %6000 = bitcast i8* %5997 to <2 x i32>*
  %6001 = load <2 x i32>, <2 x i32>* %6000, align 1
  %6002 = getelementptr inbounds i8, i8* %5997, i64 8
  %6003 = bitcast i8* %6002 to <2 x i32>*
  %6004 = load <2 x i32>, <2 x i32>* %6003, align 1
  %6005 = extractelement <2 x i32> %6001, i32 0
  %6006 = bitcast i8* %5996 to i32*
  store i32 %6005, i32* %6006, align 1, !tbaa !2455
  %6007 = extractelement <2 x i32> %6001, i32 1
  %6008 = getelementptr inbounds i8, i8* %5996, i64 4
  %6009 = bitcast i8* %6008 to i32*
  store i32 %6007, i32* %6009, align 1, !tbaa !2455
  %6010 = extractelement <2 x i32> %6004, i32 0
  %6011 = getelementptr inbounds i8, i8* %5996, i64 8
  %6012 = bitcast i8* %6011 to i32*
  store i32 %6010, i32* %6012, align 1, !tbaa !2455
  %6013 = extractelement <2 x i32> %6004, i32 1
  %6014 = getelementptr inbounds i8, i8* %5996, i64 12
  %6015 = bitcast i8* %6014 to i32*
  store i32 %6013, i32* %6015, align 1, !tbaa !2455
  %6016 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6017 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6018 = load i64, i64* %PC
  %6019 = add i64 %6018, 9
  store i64 %6019, i64* %PC
  %6020 = bitcast i8* %6017 to double*
  %6021 = load double, double* %6020, align 1
  %6022 = getelementptr inbounds i8, i8* %6017, i64 8
  %6023 = bitcast i8* %6022 to i64*
  %6024 = load i64, i64* %6023, align 1
  %6025 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 120) to double*)
  %6026 = fmul double %6021, %6025
  %6027 = bitcast i8* %6016 to double*
  store double %6026, double* %6027, align 1, !tbaa !2452
  %6028 = getelementptr inbounds i8, i8* %6016, i64 8
  %6029 = bitcast i8* %6028 to i64*
  store i64 %6024, i64* %6029, align 1, !tbaa !2452
  %6030 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6031 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6032 = load i64, i64* %PC
  %6033 = add i64 %6032, 9
  store i64 %6033, i64* %PC
  %6034 = bitcast i8* %6031 to double*
  %6035 = load double, double* %6034, align 1
  %6036 = getelementptr inbounds i8, i8* %6031, i64 8
  %6037 = bitcast i8* %6036 to i64*
  %6038 = load i64, i64* %6037, align 1
  %6039 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 136) to double*)
  %6040 = fmul double %6035, %6039
  %6041 = bitcast i8* %6030 to double*
  store double %6040, double* %6041, align 1, !tbaa !2452
  %6042 = getelementptr inbounds i8, i8* %6030, i64 8
  %6043 = bitcast i8* %6042 to i64*
  store i64 %6038, i64* %6043, align 1, !tbaa !2452
  %6044 = load i64, i64* %RBP
  %6045 = sub i64 %6044, 232
  %6046 = bitcast %union.vec128_t* %XMM0 to i8*
  %6047 = load i64, i64* %PC
  %6048 = add i64 %6047, 8
  store i64 %6048, i64* %PC
  %6049 = bitcast i8* %6046 to double*
  %6050 = load double, double* %6049, align 1
  %6051 = inttoptr i64 %6045 to double*
  store double %6050, double* %6051
  %6052 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6053 = bitcast %union.vec128_t* %XMM1 to i8*
  %6054 = load i64, i64* %PC
  %6055 = add i64 %6054, 3
  store i64 %6055, i64* %PC
  %6056 = bitcast i8* %6053 to <2 x i32>*
  %6057 = load <2 x i32>, <2 x i32>* %6056, align 1
  %6058 = getelementptr inbounds i8, i8* %6053, i64 8
  %6059 = bitcast i8* %6058 to <2 x i32>*
  %6060 = load <2 x i32>, <2 x i32>* %6059, align 1
  %6061 = extractelement <2 x i32> %6057, i32 0
  %6062 = bitcast i8* %6052 to i32*
  store i32 %6061, i32* %6062, align 1, !tbaa !2455
  %6063 = extractelement <2 x i32> %6057, i32 1
  %6064 = getelementptr inbounds i8, i8* %6052, i64 4
  %6065 = bitcast i8* %6064 to i32*
  store i32 %6063, i32* %6065, align 1, !tbaa !2455
  %6066 = extractelement <2 x i32> %6060, i32 0
  %6067 = getelementptr inbounds i8, i8* %6052, i64 8
  %6068 = bitcast i8* %6067 to i32*
  store i32 %6066, i32* %6068, align 1, !tbaa !2455
  %6069 = extractelement <2 x i32> %6060, i32 1
  %6070 = getelementptr inbounds i8, i8* %6052, i64 12
  %6071 = bitcast i8* %6070 to i32*
  store i32 %6069, i32* %6071, align 1, !tbaa !2455
  %6072 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6073 = bitcast %union.vec128_t* %XMM2 to i8*
  %6074 = load i64, i64* %PC
  %6075 = add i64 %6074, 3
  store i64 %6075, i64* %PC
  %6076 = bitcast i8* %6073 to <2 x i32>*
  %6077 = load <2 x i32>, <2 x i32>* %6076, align 1
  %6078 = getelementptr inbounds i8, i8* %6073, i64 8
  %6079 = bitcast i8* %6078 to <2 x i32>*
  %6080 = load <2 x i32>, <2 x i32>* %6079, align 1
  %6081 = extractelement <2 x i32> %6077, i32 0
  %6082 = bitcast i8* %6072 to i32*
  store i32 %6081, i32* %6082, align 1, !tbaa !2455
  %6083 = extractelement <2 x i32> %6077, i32 1
  %6084 = getelementptr inbounds i8, i8* %6072, i64 4
  %6085 = bitcast i8* %6084 to i32*
  store i32 %6083, i32* %6085, align 1, !tbaa !2455
  %6086 = extractelement <2 x i32> %6080, i32 0
  %6087 = getelementptr inbounds i8, i8* %6072, i64 8
  %6088 = bitcast i8* %6087 to i32*
  store i32 %6086, i32* %6088, align 1, !tbaa !2455
  %6089 = extractelement <2 x i32> %6080, i32 1
  %6090 = getelementptr inbounds i8, i8* %6072, i64 12
  %6091 = bitcast i8* %6090 to i32*
  store i32 %6089, i32* %6091, align 1, !tbaa !2455
  %6092 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6093 = load i64, i64* %RBP
  %6094 = sub i64 %6093, 232
  %6095 = load i64, i64* %PC
  %6096 = add i64 %6095, 8
  store i64 %6096, i64* %PC
  %6097 = inttoptr i64 %6094 to double*
  %6098 = load double, double* %6097
  %6099 = bitcast i8* %6092 to double*
  store double %6098, double* %6099, align 1, !tbaa !2452
  %6100 = getelementptr inbounds i8, i8* %6092, i64 8
  %6101 = bitcast i8* %6100 to double*
  store double 0.000000e+00, double* %6101, align 1, !tbaa !2452
  %6102 = load i64, i64* %RBP
  %6103 = sub i64 %6102, 236
  %6104 = load i32, i32* %EAX
  %6105 = zext i32 %6104 to i64
  %6106 = load i64, i64* %PC
  %6107 = add i64 %6106, 6
  store i64 %6107, i64* %PC
  %6108 = inttoptr i64 %6103 to i32*
  store i32 %6104, i32* %6108
  %6109 = load i64, i64* %PC
  %6110 = add i64 %6109, 2
  store i64 %6110, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %6111 = load i64, i64* %PC
  %6112 = sub i64 %6111, 5172
  %6113 = load i64, i64* %PC
  %6114 = add i64 %6113, 5
  %6115 = load i64, i64* %PC
  %6116 = add i64 %6115, 5
  store i64 %6116, i64* %PC
  %6117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6118 = load i64, i64* %6117, align 8, !tbaa !2428
  %6119 = add i64 %6118, -8
  %6120 = inttoptr i64 %6119 to i64*
  store i64 %6114, i64* %6120
  store i64 %6119, i64* %6117, align 8, !tbaa !2428
  %6121 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6112, i64* %6121, align 8, !tbaa !2428
  %6122 = load i64, i64* %PC
  %6123 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %6122, %struct.Memory* %5164)
  %6124 = load i64, i64* %PC
  %6125 = add i64 %6124, 10
  store i64 %6125, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %6126 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6127 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6128 = bitcast %union.vec128_t* %XMM0 to i8*
  %6129 = load i64, i64* %PC
  %6130 = add i64 %6129, 3
  store i64 %6130, i64* %PC
  %6131 = bitcast i8* %6127 to i64*
  %6132 = load i64, i64* %6131, align 1
  %6133 = getelementptr inbounds i8, i8* %6127, i64 8
  %6134 = bitcast i8* %6133 to i64*
  %6135 = load i64, i64* %6134, align 1
  %6136 = bitcast i8* %6128 to i64*
  %6137 = load i64, i64* %6136, align 1
  %6138 = getelementptr inbounds i8, i8* %6128, i64 8
  %6139 = bitcast i8* %6138 to i64*
  %6140 = load i64, i64* %6139, align 1
  %6141 = xor i64 %6137, %6132
  %6142 = xor i64 %6140, %6135
  %6143 = trunc i64 %6141 to i32
  %6144 = lshr i64 %6141, 32
  %6145 = trunc i64 %6144 to i32
  %6146 = bitcast i8* %6126 to i32*
  store i32 %6143, i32* %6146, align 1, !tbaa !2454
  %6147 = getelementptr inbounds i8, i8* %6126, i64 4
  %6148 = bitcast i8* %6147 to i32*
  store i32 %6145, i32* %6148, align 1, !tbaa !2454
  %6149 = trunc i64 %6142 to i32
  %6150 = getelementptr inbounds i8, i8* %6126, i64 8
  %6151 = bitcast i8* %6150 to i32*
  store i32 %6149, i32* %6151, align 1, !tbaa !2454
  %6152 = lshr i64 %6142, 32
  %6153 = trunc i64 %6152 to i32
  %6154 = getelementptr inbounds i8, i8* %6126, i64 12
  %6155 = bitcast i8* %6154 to i32*
  store i32 %6153, i32* %6155, align 1, !tbaa !2454
  %6156 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6157 = load i64, i64* %PC
  %6158 = add i64 %6157, 9
  store i64 %6158, i64* %PC
  %6159 = load double, double* bitcast (%piref_type* @piref to double*)
  %6160 = bitcast i8* %6156 to double*
  store double %6159, double* %6160, align 1, !tbaa !2452
  %6161 = getelementptr inbounds i8, i8* %6156, i64 8
  %6162 = bitcast i8* %6161 to double*
  store double 0.000000e+00, double* %6162, align 1, !tbaa !2452
  %6163 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6164 = load i64, i64* %PC
  %6165 = add i64 %6164, 9
  store i64 %6165, i64* %PC
  %6166 = load double, double* bitcast (%four_type* @four to double*)
  %6167 = bitcast i8* %6163 to double*
  store double %6166, double* %6167, align 1, !tbaa !2452
  %6168 = getelementptr inbounds i8, i8* %6163, i64 8
  %6169 = bitcast i8* %6168 to double*
  store double 0.000000e+00, double* %6169, align 1, !tbaa !2452
  %6170 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6171 = load i64, i64* %RBP
  %6172 = sub i64 %6171, 80
  %6173 = load i64, i64* %PC
  %6174 = add i64 %6173, 6
  store i64 %6174, i64* %PC
  %6175 = inttoptr i64 %6172 to i64*
  %6176 = load i64, i64* %6175
  %6177 = sitofp i64 %6176 to double
  %6178 = bitcast i8* %6170 to double*
  store double %6177, double* %6178, align 1, !tbaa !2452
  %6179 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6180 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6181 = bitcast %union.vec128_t* %XMM3 to i8*
  %6182 = load i64, i64* %PC
  %6183 = add i64 %6182, 4
  store i64 %6183, i64* %PC
  %6184 = bitcast i8* %6180 to double*
  %6185 = load double, double* %6184, align 1
  %6186 = getelementptr inbounds i8, i8* %6180, i64 8
  %6187 = bitcast i8* %6186 to i64*
  %6188 = load i64, i64* %6187, align 1
  %6189 = bitcast i8* %6181 to double*
  %6190 = load double, double* %6189, align 1
  %6191 = fmul double %6185, %6190
  %6192 = bitcast i8* %6179 to double*
  store double %6191, double* %6192, align 1, !tbaa !2452
  %6193 = getelementptr inbounds i8, i8* %6179, i64 8
  %6194 = bitcast i8* %6193 to i64*
  store i64 %6188, i64* %6194, align 1, !tbaa !2452
  %6195 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6196 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6197 = bitcast %union.vec128_t* %XMM2 to i8*
  %6198 = load i64, i64* %PC
  %6199 = add i64 %6198, 4
  store i64 %6199, i64* %PC
  %6200 = bitcast i8* %6196 to double*
  %6201 = load double, double* %6200, align 1
  %6202 = getelementptr inbounds i8, i8* %6196, i64 8
  %6203 = bitcast i8* %6202 to i64*
  %6204 = load i64, i64* %6203, align 1
  %6205 = bitcast i8* %6197 to double*
  %6206 = load double, double* %6205, align 1
  %6207 = fdiv double %6201, %6206
  %6208 = bitcast i8* %6195 to double*
  store double %6207, double* %6208, align 1, !tbaa !2452
  %6209 = getelementptr inbounds i8, i8* %6195, i64 8
  %6210 = bitcast i8* %6209 to i64*
  store i64 %6204, i64* %6210, align 1, !tbaa !2452
  %6211 = load i64, i64* %RBP
  %6212 = sub i64 %6211, 48
  %6213 = bitcast %union.vec128_t* %XMM1 to i8*
  %6214 = load i64, i64* %PC
  %6215 = add i64 %6214, 5
  store i64 %6215, i64* %PC
  %6216 = bitcast i8* %6213 to double*
  %6217 = load double, double* %6216, align 1
  %6218 = inttoptr i64 %6212 to double*
  store double %6217, double* %6218
  %6219 = load i64, i64* %RBP
  %6220 = sub i64 %6219, 16
  %6221 = bitcast %union.vec128_t* %XMM0 to i8*
  %6222 = load i64, i64* %PC
  %6223 = add i64 %6222, 5
  store i64 %6223, i64* %PC
  %6224 = bitcast i8* %6221 to double*
  %6225 = load double, double* %6224, align 1
  %6226 = inttoptr i64 %6220 to double*
  store double %6225, double* %6226
  %6227 = load i64, i64* %RBP
  %6228 = sub i64 %6227, 32
  %6229 = bitcast %union.vec128_t* %XMM0 to i8*
  %6230 = load i64, i64* %PC
  %6231 = add i64 %6230, 5
  store i64 %6231, i64* %PC
  %6232 = bitcast i8* %6229 to double*
  %6233 = load double, double* %6232, align 1
  %6234 = inttoptr i64 %6228 to double*
  store double %6233, double* %6234
  %6235 = load i64, i64* %RBP
  %6236 = sub i64 %6235, 240
  %6237 = load i32, i32* %EAX
  %6238 = zext i32 %6237 to i64
  %6239 = load i64, i64* %PC
  %6240 = add i64 %6239, 6
  store i64 %6240, i64* %PC
  %6241 = inttoptr i64 %6236 to i32*
  store i32 %6237, i32* %6241
  %6242 = load i64, i64* %PC
  %6243 = add i64 %6242, 3349
  %6244 = load i64, i64* %PC
  %6245 = add i64 %6244, 5
  %6246 = load i64, i64* %PC
  %6247 = add i64 %6246, 5
  store i64 %6247, i64* %PC
  %6248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6249 = load i64, i64* %6248, align 8, !tbaa !2428
  %6250 = add i64 %6249, -8
  %6251 = inttoptr i64 %6250 to i64*
  store i64 %6245, i64* %6251
  store i64 %6250, i64* %6248, align 8, !tbaa !2428
  %6252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6243, i64* %6252, align 8, !tbaa !2428
  %6253 = load i64, i64* %PC
  %6254 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %6253, %struct.Memory* %6123)
  %6255 = load i64, i64* %RBP
  %6256 = sub i64 %6255, 72
  %6257 = load i64, i64* %PC
  %6258 = add i64 %6257, 8
  store i64 %6258, i64* %PC
  %6259 = inttoptr i64 %6256 to i64*
  store i64 1, i64* %6259
  %6260 = load i64, i64* %RBP
  %6261 = sub i64 %6260, 244
  %6262 = load i32, i32* %EAX
  %6263 = zext i32 %6262 to i64
  %6264 = load i64, i64* %PC
  %6265 = add i64 %6264, 6
  store i64 %6265, i64* %PC
  %6266 = inttoptr i64 %6261 to i32*
  store i32 %6262, i32* %6266
  br label %block_4018de

block_400b45:                                     ; preds = %block_400aee
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %6267 = load i64, i64* %PC
  %6268 = add i64 %6267, 6801
  %6269 = load i64, i64* %PC
  %6270 = add i64 %6269, 5
  %6271 = load i64, i64* %PC
  %6272 = add i64 %6271, 5
  store i64 %6272, i64* %PC
  %6273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6274 = load i64, i64* %6273, align 8, !tbaa !2428
  %6275 = add i64 %6274, -8
  %6276 = inttoptr i64 %6275 to i64*
  store i64 %6270, i64* %6276
  store i64 %6275, i64* %6273, align 8, !tbaa !2428
  %6277 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6268, i64* %6277, align 8, !tbaa !2428
  %6278 = load i64, i64* %PC
  %6279 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %6278, %struct.Memory* %MEMORY.11)
  %6280 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6281 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6282 = bitcast %union.vec128_t* %XMM0 to i8*
  %6283 = load i64, i64* %PC
  %6284 = add i64 %6283, 3
  store i64 %6284, i64* %PC
  %6285 = bitcast i8* %6281 to i64*
  %6286 = load i64, i64* %6285, align 1
  %6287 = getelementptr inbounds i8, i8* %6281, i64 8
  %6288 = bitcast i8* %6287 to i64*
  %6289 = load i64, i64* %6288, align 1
  %6290 = bitcast i8* %6282 to i64*
  %6291 = load i64, i64* %6290, align 1
  %6292 = getelementptr inbounds i8, i8* %6282, i64 8
  %6293 = bitcast i8* %6292 to i64*
  %6294 = load i64, i64* %6293, align 1
  %6295 = xor i64 %6291, %6286
  %6296 = xor i64 %6294, %6289
  %6297 = trunc i64 %6295 to i32
  %6298 = lshr i64 %6295, 32
  %6299 = trunc i64 %6298 to i32
  %6300 = bitcast i8* %6280 to i32*
  store i32 %6297, i32* %6300, align 1, !tbaa !2454
  %6301 = getelementptr inbounds i8, i8* %6280, i64 4
  %6302 = bitcast i8* %6301 to i32*
  store i32 %6299, i32* %6302, align 1, !tbaa !2454
  %6303 = trunc i64 %6296 to i32
  %6304 = getelementptr inbounds i8, i8* %6280, i64 8
  %6305 = bitcast i8* %6304 to i32*
  store i32 %6303, i32* %6305, align 1, !tbaa !2454
  %6306 = lshr i64 %6296, 32
  %6307 = trunc i64 %6306 to i32
  %6308 = getelementptr inbounds i8, i8* %6280, i64 12
  %6309 = bitcast i8* %6308 to i32*
  store i32 %6307, i32* %6309, align 1, !tbaa !2454
  %6310 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6311 = load i64, i64* %PC
  %6312 = add i64 %6311, 9
  store i64 %6312, i64* %PC
  %6313 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %6314 = bitcast i8* %6310 to double*
  store double %6313, double* %6314, align 1, !tbaa !2452
  %6315 = getelementptr inbounds i8, i8* %6310, i64 8
  %6316 = bitcast i8* %6315 to double*
  store double 0.000000e+00, double* %6316, align 1, !tbaa !2452
  %6317 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6318 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6319 = load i64, i64* %PC
  %6320 = add i64 %6319, 9
  store i64 %6320, i64* %PC
  %6321 = bitcast i8* %6318 to double*
  %6322 = load double, double* %6321, align 1
  %6323 = getelementptr inbounds i8, i8* %6318, i64 8
  %6324 = bitcast i8* %6323 to i64*
  %6325 = load i64, i64* %6324, align 1
  %6326 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %6327 = fmul double %6322, %6326
  %6328 = bitcast i8* %6317 to double*
  store double %6327, double* %6328, align 1, !tbaa !2452
  %6329 = getelementptr inbounds i8, i8* %6317, i64 8
  %6330 = bitcast i8* %6329 to i64*
  store i64 %6325, i64* %6330, align 1, !tbaa !2452
  %6331 = bitcast %union.vec128_t* %XMM1 to i8*
  %6332 = load i64, i64* %PC
  %6333 = add i64 %6332, 9
  store i64 %6333, i64* %PC
  %6334 = bitcast i8* %6331 to double*
  %6335 = load double, double* %6334, align 1
  store double %6335, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  %6336 = bitcast %union.vec128_t* %XMM0 to i8*
  %6337 = load i64, i64* %PC
  %6338 = add i64 %6337, 9
  store i64 %6338, i64* %PC
  %6339 = bitcast i8* %6336 to double*
  %6340 = load double, double* %6339, align 1
  %6341 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  %6342 = fcmp uno double %6340, %6341
  br i1 %6342, label %6343, label %6355

; <label>:6343:                                   ; preds = %block_400b45
  %6344 = fadd double %6340, %6341
  %6345 = bitcast double %6344 to i64
  %6346 = and i64 %6345, 9221120237041090560
  %6347 = icmp eq i64 %6346, 9218868437227405312
  %6348 = and i64 %6345, 2251799813685247
  %6349 = icmp ne i64 %6348, 0
  %6350 = and i1 %6347, %6349
  br i1 %6350, label %6351, label %6361

; <label>:6351:                                   ; preds = %6343
  %6352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6353 = load i64, i64* %6352, align 8, !tbaa !2428
  %6354 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %6353, %struct.Memory* %6279) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1

; <label>:6355:                                   ; preds = %block_400b45
  %6356 = fcmp ogt double %6340, %6341
  br i1 %6356, label %6361, label %6357

; <label>:6357:                                   ; preds = %6355
  %6358 = fcmp olt double %6340, %6341
  br i1 %6358, label %6361, label %6359

; <label>:6359:                                   ; preds = %6357
  %6360 = fcmp oeq double %6340, %6341
  br i1 %6360, label %6361, label %6368

; <label>:6361:                                   ; preds = %6359, %6357, %6355, %6343
  %6362 = phi i8 [ 0, %6355 ], [ 0, %6357 ], [ 1, %6359 ], [ 1, %6343 ]
  %6363 = phi i8 [ 0, %6355 ], [ 0, %6357 ], [ 0, %6359 ], [ 1, %6343 ]
  %6364 = phi i8 [ 0, %6355 ], [ 1, %6357 ], [ 0, %6359 ], [ 1, %6343 ]
  %6365 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6362, i8* %6365, align 1, !tbaa !2451
  %6366 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6363, i8* %6366, align 1, !tbaa !2451
  %6367 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6364, i8* %6367, align 1, !tbaa !2451
  br label %6368

; <label>:6368:                                   ; preds = %6361, %6359
  %6369 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6369, align 1, !tbaa !2451
  %6370 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %6370, align 1, !tbaa !2451
  %6371 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6371, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1: ; preds = %6351, %6368
  %6372 = phi %struct.Memory* [ %6354, %6351 ], [ %6279, %6368 ]
  %6373 = load i64, i64* %RBP
  %6374 = sub i64 %6373, 148
  %6375 = load i32, i32* %EAX
  %6376 = zext i32 %6375 to i64
  %6377 = load i64, i64* %PC
  %6378 = add i64 %6377, 6
  store i64 %6378, i64* %PC
  %6379 = inttoptr i64 %6374 to i32*
  store i32 %6375, i32* %6379
  %6380 = load i64, i64* %PC
  %6381 = add i64 %6380, 18
  %6382 = load i64, i64* %PC
  %6383 = add i64 %6382, 6
  %6384 = load i64, i64* %PC
  %6385 = add i64 %6384, 6
  store i64 %6385, i64* %PC
  %6386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %6387 = load i8, i8* %6386, align 1, !tbaa !2432
  %6388 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6389 = load i8, i8* %6388, align 1, !tbaa !2447
  %6390 = or i8 %6389, %6387
  %6391 = icmp ne i8 %6390, 0
  %6392 = zext i1 %6391 to i8
  store i8 %6392, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6393 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6394 = select i1 %6391, i64 %6381, i64 %6383
  store i64 %6394, i64* %6393, align 8, !tbaa !2428
  %6395 = load i8, i8* %BRANCH_TAKEN
  %6396 = icmp eq i8 %6395, 1
  br i1 %6396, label %block_400b93, label %block_400b87

block_401259:                                     ; preds = %block_401195
  %6397 = load i64, i64* %PC
  %6398 = add i64 %6397, 10
  store i64 %6398, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %6399 = load i64, i64* %PC
  %6400 = add i64 %6399, 4989
  %6401 = load i64, i64* %PC
  %6402 = add i64 %6401, 5
  %6403 = load i64, i64* %PC
  %6404 = add i64 %6403, 5
  store i64 %6404, i64* %PC
  %6405 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6406 = load i64, i64* %6405, align 8, !tbaa !2428
  %6407 = add i64 %6406, -8
  %6408 = inttoptr i64 %6407 to i64*
  store i64 %6402, i64* %6408
  store i64 %6407, i64* %6405, align 8, !tbaa !2428
  %6409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6400, i64* %6409, align 8, !tbaa !2428
  %6410 = load i64, i64* %PC
  %6411 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %6410, %struct.Memory* %MEMORY.8)
  %6412 = load i64, i64* %PC
  %6413 = add i64 %6412, 10
  store i64 %6413, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 498), i64* %RDI, align 8, !tbaa !2428
  %6414 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6415 = load i64, i64* %PC
  %6416 = add i64 %6415, 8
  store i64 %6416, i64* %PC
  %6417 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 72) to double*)
  %6418 = bitcast i8* %6414 to double*
  store double %6417, double* %6418, align 1, !tbaa !2452
  %6419 = getelementptr inbounds i8, i8* %6414, i64 8
  %6420 = bitcast i8* %6419 to double*
  store double 0.000000e+00, double* %6420, align 1, !tbaa !2452
  %6421 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6422 = load i64, i64* %PC
  %6423 = add i64 %6422, 8
  store i64 %6423, i64* %PC
  %6424 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 128) to double*)
  %6425 = bitcast i8* %6421 to double*
  store double %6424, double* %6425, align 1, !tbaa !2452
  %6426 = getelementptr inbounds i8, i8* %6421, i64 8
  %6427 = bitcast i8* %6426 to double*
  store double 0.000000e+00, double* %6427, align 1, !tbaa !2452
  %6428 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6429 = load i64, i64* %PC
  %6430 = add i64 %6429, 9
  store i64 %6430, i64* %PC
  %6431 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %6432 = bitcast i8* %6428 to double*
  store double %6431, double* %6432, align 1, !tbaa !2452
  %6433 = getelementptr inbounds i8, i8* %6428, i64 8
  %6434 = bitcast i8* %6433 to double*
  store double 0.000000e+00, double* %6434, align 1, !tbaa !2452
  %6435 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6436 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6437 = load i64, i64* %PC
  %6438 = add i64 %6437, 9
  store i64 %6438, i64* %PC
  %6439 = bitcast i8* %6436 to double*
  %6440 = load double, double* %6439, align 1
  %6441 = getelementptr inbounds i8, i8* %6436, i64 8
  %6442 = bitcast i8* %6441 to i64*
  %6443 = load i64, i64* %6442, align 1
  %6444 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %6445 = fmul double %6440, %6444
  %6446 = bitcast i8* %6435 to double*
  store double %6445, double* %6446, align 1, !tbaa !2452
  %6447 = getelementptr inbounds i8, i8* %6435, i64 8
  %6448 = bitcast i8* %6447 to i64*
  store i64 %6443, i64* %6448, align 1, !tbaa !2452
  %6449 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6450 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6451 = load i64, i64* %PC
  %6452 = add i64 %6451, 9
  store i64 %6452, i64* %PC
  %6453 = bitcast i8* %6450 to double*
  %6454 = load double, double* %6453, align 1
  %6455 = getelementptr inbounds i8, i8* %6450, i64 8
  %6456 = bitcast i8* %6455 to i64*
  %6457 = load i64, i64* %6456, align 1
  %6458 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %6459 = fsub double %6454, %6458
  %6460 = bitcast i8* %6449 to double*
  store double %6459, double* %6460, align 1, !tbaa !2452
  %6461 = getelementptr inbounds i8, i8* %6449, i64 8
  %6462 = bitcast i8* %6461 to i64*
  store i64 %6457, i64* %6462, align 1, !tbaa !2452
  %6463 = bitcast %union.vec128_t* %XMM2 to i8*
  %6464 = load i64, i64* %PC
  %6465 = add i64 %6464, 9
  store i64 %6465, i64* %PC
  %6466 = bitcast i8* %6463 to double*
  %6467 = load double, double* %6466, align 1
  store double %6467, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %6468 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6469 = load i64, i64* %PC
  %6470 = add i64 %6469, 9
  store i64 %6470, i64* %PC
  %6471 = load double, double* bitcast (%piref_type* @piref to double*)
  %6472 = bitcast i8* %6468 to double*
  store double %6471, double* %6472, align 1, !tbaa !2452
  %6473 = getelementptr inbounds i8, i8* %6468, i64 8
  %6474 = bitcast i8* %6473 to double*
  store double 0.000000e+00, double* %6474, align 1, !tbaa !2452
  %6475 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6476 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6477 = load i64, i64* %PC
  %6478 = add i64 %6477, 9
  store i64 %6478, i64* %PC
  %6479 = bitcast i8* %6476 to double*
  %6480 = load double, double* %6479, align 1
  %6481 = getelementptr inbounds i8, i8* %6476, i64 8
  %6482 = bitcast i8* %6481 to i64*
  %6483 = load i64, i64* %6482, align 1
  %6484 = load double, double* bitcast (%three_type* @three to double*)
  %6485 = fdiv double %6480, %6484
  %6486 = bitcast i8* %6475 to double*
  store double %6485, double* %6486, align 1, !tbaa !2452
  %6487 = getelementptr inbounds i8, i8* %6475, i64 8
  %6488 = bitcast i8* %6487 to i64*
  store i64 %6483, i64* %6488, align 1, !tbaa !2452
  %6489 = load i64, i64* %RBP
  %6490 = sub i64 %6489, 24
  %6491 = bitcast %union.vec128_t* %XMM2 to i8*
  %6492 = load i64, i64* %PC
  %6493 = add i64 %6492, 5
  store i64 %6493, i64* %PC
  %6494 = bitcast i8* %6491 to double*
  %6495 = load double, double* %6494, align 1
  %6496 = inttoptr i64 %6490 to double*
  store double %6495, double* %6496
  %6497 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6498 = load i64, i64* %RBP
  %6499 = sub i64 %6498, 24
  %6500 = load i64, i64* %PC
  %6501 = add i64 %6500, 5
  store i64 %6501, i64* %PC
  %6502 = inttoptr i64 %6499 to double*
  %6503 = load double, double* %6502
  %6504 = bitcast i8* %6497 to double*
  store double %6503, double* %6504, align 1, !tbaa !2452
  %6505 = getelementptr inbounds i8, i8* %6497, i64 8
  %6506 = bitcast i8* %6505 to double*
  store double 0.000000e+00, double* %6506, align 1, !tbaa !2452
  %6507 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6508 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6509 = load i64, i64* %RBP
  %6510 = sub i64 %6509, 24
  %6511 = load i64, i64* %PC
  %6512 = add i64 %6511, 5
  store i64 %6512, i64* %PC
  %6513 = bitcast i8* %6508 to double*
  %6514 = load double, double* %6513, align 1
  %6515 = getelementptr inbounds i8, i8* %6508, i64 8
  %6516 = bitcast i8* %6515 to i64*
  %6517 = load i64, i64* %6516, align 1
  %6518 = inttoptr i64 %6510 to double*
  %6519 = load double, double* %6518
  %6520 = fmul double %6514, %6519
  %6521 = bitcast i8* %6507 to double*
  store double %6520, double* %6521, align 1, !tbaa !2452
  %6522 = getelementptr inbounds i8, i8* %6507, i64 8
  %6523 = bitcast i8* %6522 to i64*
  store i64 %6517, i64* %6523, align 1, !tbaa !2452
  %6524 = load i64, i64* %RBP
  %6525 = sub i64 %6524, 40
  %6526 = bitcast %union.vec128_t* %XMM2 to i8*
  %6527 = load i64, i64* %PC
  %6528 = add i64 %6527, 5
  store i64 %6528, i64* %PC
  %6529 = bitcast i8* %6526 to double*
  %6530 = load double, double* %6529, align 1
  %6531 = inttoptr i64 %6525 to double*
  store double %6530, double* %6531
  %6532 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6533 = load i64, i64* %RBP
  %6534 = sub i64 %6533, 40
  %6535 = load i64, i64* %PC
  %6536 = add i64 %6535, 5
  store i64 %6536, i64* %PC
  %6537 = inttoptr i64 %6534 to double*
  %6538 = load double, double* %6537
  %6539 = bitcast i8* %6532 to double*
  store double %6538, double* %6539, align 1, !tbaa !2452
  %6540 = getelementptr inbounds i8, i8* %6532, i64 8
  %6541 = bitcast i8* %6540 to double*
  store double 0.000000e+00, double* %6541, align 1, !tbaa !2452
  %6542 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6543 = load i64, i64* %RBP
  %6544 = sub i64 %6543, 40
  %6545 = load i64, i64* %PC
  %6546 = add i64 %6545, 5
  store i64 %6546, i64* %PC
  %6547 = inttoptr i64 %6544 to double*
  %6548 = load double, double* %6547
  %6549 = bitcast i8* %6542 to double*
  store double %6548, double* %6549, align 1, !tbaa !2452
  %6550 = getelementptr inbounds i8, i8* %6542, i64 8
  %6551 = bitcast i8* %6550 to double*
  store double 0.000000e+00, double* %6551, align 1, !tbaa !2452
  %6552 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6553 = load i64, i64* %RBP
  %6554 = sub i64 %6553, 40
  %6555 = load i64, i64* %PC
  %6556 = add i64 %6555, 5
  store i64 %6556, i64* %PC
  %6557 = inttoptr i64 %6554 to double*
  %6558 = load double, double* %6557
  %6559 = bitcast i8* %6552 to double*
  store double %6558, double* %6559, align 1, !tbaa !2452
  %6560 = getelementptr inbounds i8, i8* %6552, i64 8
  %6561 = bitcast i8* %6560 to double*
  store double 0.000000e+00, double* %6561, align 1, !tbaa !2452
  %6562 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %6563 = load i64, i64* %RBP
  %6564 = sub i64 %6563, 40
  %6565 = load i64, i64* %PC
  %6566 = add i64 %6565, 5
  store i64 %6566, i64* %PC
  %6567 = inttoptr i64 %6564 to double*
  %6568 = load double, double* %6567
  %6569 = bitcast i8* %6562 to double*
  store double %6568, double* %6569, align 1, !tbaa !2452
  %6570 = getelementptr inbounds i8, i8* %6562, i64 8
  %6571 = bitcast i8* %6570 to double*
  store double 0.000000e+00, double* %6571, align 1, !tbaa !2452
  %6572 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %6573 = load i64, i64* %RBP
  %6574 = sub i64 %6573, 40
  %6575 = load i64, i64* %PC
  %6576 = add i64 %6575, 5
  store i64 %6576, i64* %PC
  %6577 = inttoptr i64 %6574 to double*
  %6578 = load double, double* %6577
  %6579 = bitcast i8* %6572 to double*
  store double %6578, double* %6579, align 1, !tbaa !2452
  %6580 = getelementptr inbounds i8, i8* %6572, i64 8
  %6581 = bitcast i8* %6580 to double*
  store double 0.000000e+00, double* %6581, align 1, !tbaa !2452
  %6582 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %6583 = load i64, i64* %PC
  %6584 = add i64 %6583, 9
  store i64 %6584, i64* %PC
  %6585 = load double, double* bitcast (%B6_type* @B6 to double*)
  %6586 = bitcast i8* %6582 to double*
  store double %6585, double* %6586, align 1, !tbaa !2452
  %6587 = getelementptr inbounds i8, i8* %6582, i64 8
  %6588 = bitcast i8* %6587 to double*
  store double 0.000000e+00, double* %6588, align 1, !tbaa !2452
  %6589 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %6590 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %6591 = load i64, i64* %RBP
  %6592 = sub i64 %6591, 40
  %6593 = load i64, i64* %PC
  %6594 = add i64 %6593, 5
  store i64 %6594, i64* %PC
  %6595 = bitcast i8* %6590 to double*
  %6596 = load double, double* %6595, align 1
  %6597 = getelementptr inbounds i8, i8* %6590, i64 8
  %6598 = bitcast i8* %6597 to i64*
  %6599 = load i64, i64* %6598, align 1
  %6600 = inttoptr i64 %6592 to double*
  %6601 = load double, double* %6600
  %6602 = fmul double %6596, %6601
  %6603 = bitcast i8* %6589 to double*
  store double %6602, double* %6603, align 1, !tbaa !2452
  %6604 = getelementptr inbounds i8, i8* %6589, i64 8
  %6605 = bitcast i8* %6604 to i64*
  store i64 %6599, i64* %6605, align 1, !tbaa !2452
  %6606 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %6607 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %6608 = load i64, i64* %PC
  %6609 = add i64 %6608, 9
  store i64 %6609, i64* %PC
  %6610 = bitcast i8* %6607 to double*
  %6611 = load double, double* %6610, align 1
  %6612 = getelementptr inbounds i8, i8* %6607, i64 8
  %6613 = bitcast i8* %6612 to i64*
  %6614 = load i64, i64* %6613, align 1
  %6615 = load double, double* bitcast (%B5_type* @B5 to double*)
  %6616 = fadd double %6611, %6615
  %6617 = bitcast i8* %6606 to double*
  store double %6616, double* %6617, align 1, !tbaa !2452
  %6618 = getelementptr inbounds i8, i8* %6606, i64 8
  %6619 = bitcast i8* %6618 to i64*
  store i64 %6614, i64* %6619, align 1, !tbaa !2452
  %6620 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %6621 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %6622 = bitcast %union.vec128_t* %XMM7 to i8*
  %6623 = load i64, i64* %PC
  %6624 = add i64 %6623, 4
  store i64 %6624, i64* %PC
  %6625 = bitcast i8* %6621 to double*
  %6626 = load double, double* %6625, align 1
  %6627 = getelementptr inbounds i8, i8* %6621, i64 8
  %6628 = bitcast i8* %6627 to i64*
  %6629 = load i64, i64* %6628, align 1
  %6630 = bitcast i8* %6622 to double*
  %6631 = load double, double* %6630, align 1
  %6632 = fmul double %6626, %6631
  %6633 = bitcast i8* %6620 to double*
  store double %6632, double* %6633, align 1, !tbaa !2452
  %6634 = getelementptr inbounds i8, i8* %6620, i64 8
  %6635 = bitcast i8* %6634 to i64*
  store i64 %6629, i64* %6635, align 1, !tbaa !2452
  %6636 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %6637 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %6638 = load i64, i64* %PC
  %6639 = add i64 %6638, 9
  store i64 %6639, i64* %PC
  %6640 = bitcast i8* %6637 to double*
  %6641 = load double, double* %6640, align 1
  %6642 = getelementptr inbounds i8, i8* %6637, i64 8
  %6643 = bitcast i8* %6642 to i64*
  %6644 = load i64, i64* %6643, align 1
  %6645 = load double, double* bitcast (%B4_type* @B4 to double*)
  %6646 = fadd double %6641, %6645
  %6647 = bitcast i8* %6636 to double*
  store double %6646, double* %6647, align 1, !tbaa !2452
  %6648 = getelementptr inbounds i8, i8* %6636, i64 8
  %6649 = bitcast i8* %6648 to i64*
  store i64 %6644, i64* %6649, align 1, !tbaa !2452
  %6650 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %6651 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %6652 = bitcast %union.vec128_t* %XMM6 to i8*
  %6653 = load i64, i64* %PC
  %6654 = add i64 %6653, 4
  store i64 %6654, i64* %PC
  %6655 = bitcast i8* %6651 to double*
  %6656 = load double, double* %6655, align 1
  %6657 = getelementptr inbounds i8, i8* %6651, i64 8
  %6658 = bitcast i8* %6657 to i64*
  %6659 = load i64, i64* %6658, align 1
  %6660 = bitcast i8* %6652 to double*
  %6661 = load double, double* %6660, align 1
  %6662 = fmul double %6656, %6661
  %6663 = bitcast i8* %6650 to double*
  store double %6662, double* %6663, align 1, !tbaa !2452
  %6664 = getelementptr inbounds i8, i8* %6650, i64 8
  %6665 = bitcast i8* %6664 to i64*
  store i64 %6659, i64* %6665, align 1, !tbaa !2452
  %6666 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %6667 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %6668 = load i64, i64* %PC
  %6669 = add i64 %6668, 9
  store i64 %6669, i64* %PC
  %6670 = bitcast i8* %6667 to double*
  %6671 = load double, double* %6670, align 1
  %6672 = getelementptr inbounds i8, i8* %6667, i64 8
  %6673 = bitcast i8* %6672 to i64*
  %6674 = load i64, i64* %6673, align 1
  %6675 = load double, double* bitcast (%B3_type* @B3 to double*)
  %6676 = fadd double %6671, %6675
  %6677 = bitcast i8* %6666 to double*
  store double %6676, double* %6677, align 1, !tbaa !2452
  %6678 = getelementptr inbounds i8, i8* %6666, i64 8
  %6679 = bitcast i8* %6678 to i64*
  store i64 %6674, i64* %6679, align 1, !tbaa !2452
  %6680 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6681 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6682 = bitcast %union.vec128_t* %XMM5 to i8*
  %6683 = load i64, i64* %PC
  %6684 = add i64 %6683, 4
  store i64 %6684, i64* %PC
  %6685 = bitcast i8* %6681 to double*
  %6686 = load double, double* %6685, align 1
  %6687 = getelementptr inbounds i8, i8* %6681, i64 8
  %6688 = bitcast i8* %6687 to i64*
  %6689 = load i64, i64* %6688, align 1
  %6690 = bitcast i8* %6682 to double*
  %6691 = load double, double* %6690, align 1
  %6692 = fmul double %6686, %6691
  %6693 = bitcast i8* %6680 to double*
  store double %6692, double* %6693, align 1, !tbaa !2452
  %6694 = getelementptr inbounds i8, i8* %6680, i64 8
  %6695 = bitcast i8* %6694 to i64*
  store i64 %6689, i64* %6695, align 1, !tbaa !2452
  %6696 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6697 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6698 = load i64, i64* %PC
  %6699 = add i64 %6698, 9
  store i64 %6699, i64* %PC
  %6700 = bitcast i8* %6697 to double*
  %6701 = load double, double* %6700, align 1
  %6702 = getelementptr inbounds i8, i8* %6697, i64 8
  %6703 = bitcast i8* %6702 to i64*
  %6704 = load i64, i64* %6703, align 1
  %6705 = load double, double* bitcast (%B2_type* @B2 to double*)
  %6706 = fadd double %6701, %6705
  %6707 = bitcast i8* %6696 to double*
  store double %6706, double* %6707, align 1, !tbaa !2452
  %6708 = getelementptr inbounds i8, i8* %6696, i64 8
  %6709 = bitcast i8* %6708 to i64*
  store i64 %6704, i64* %6709, align 1, !tbaa !2452
  %6710 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6711 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6712 = bitcast %union.vec128_t* %XMM4 to i8*
  %6713 = load i64, i64* %PC
  %6714 = add i64 %6713, 4
  store i64 %6714, i64* %PC
  %6715 = bitcast i8* %6711 to double*
  %6716 = load double, double* %6715, align 1
  %6717 = getelementptr inbounds i8, i8* %6711, i64 8
  %6718 = bitcast i8* %6717 to i64*
  %6719 = load i64, i64* %6718, align 1
  %6720 = bitcast i8* %6712 to double*
  %6721 = load double, double* %6720, align 1
  %6722 = fmul double %6716, %6721
  %6723 = bitcast i8* %6710 to double*
  store double %6722, double* %6723, align 1, !tbaa !2452
  %6724 = getelementptr inbounds i8, i8* %6710, i64 8
  %6725 = bitcast i8* %6724 to i64*
  store i64 %6719, i64* %6725, align 1, !tbaa !2452
  %6726 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6727 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6728 = load i64, i64* %PC
  %6729 = add i64 %6728, 9
  store i64 %6729, i64* %PC
  %6730 = bitcast i8* %6727 to double*
  %6731 = load double, double* %6730, align 1
  %6732 = getelementptr inbounds i8, i8* %6727, i64 8
  %6733 = bitcast i8* %6732 to i64*
  %6734 = load i64, i64* %6733, align 1
  %6735 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %6736 = fadd double %6731, %6735
  %6737 = bitcast i8* %6726 to double*
  store double %6736, double* %6737, align 1, !tbaa !2452
  %6738 = getelementptr inbounds i8, i8* %6726, i64 8
  %6739 = bitcast i8* %6738 to i64*
  store i64 %6734, i64* %6739, align 1, !tbaa !2452
  %6740 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6741 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6742 = bitcast %union.vec128_t* %XMM3 to i8*
  %6743 = load i64, i64* %PC
  %6744 = add i64 %6743, 4
  store i64 %6744, i64* %PC
  %6745 = bitcast i8* %6741 to double*
  %6746 = load double, double* %6745, align 1
  %6747 = getelementptr inbounds i8, i8* %6741, i64 8
  %6748 = bitcast i8* %6747 to i64*
  %6749 = load i64, i64* %6748, align 1
  %6750 = bitcast i8* %6742 to double*
  %6751 = load double, double* %6750, align 1
  %6752 = fmul double %6746, %6751
  %6753 = bitcast i8* %6740 to double*
  store double %6752, double* %6753, align 1, !tbaa !2452
  %6754 = getelementptr inbounds i8, i8* %6740, i64 8
  %6755 = bitcast i8* %6754 to i64*
  store i64 %6749, i64* %6755, align 1, !tbaa !2452
  %6756 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6757 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6758 = load i64, i64* %PC
  %6759 = add i64 %6758, 9
  store i64 %6759, i64* %PC
  %6760 = bitcast i8* %6757 to double*
  %6761 = load double, double* %6760, align 1
  %6762 = getelementptr inbounds i8, i8* %6757, i64 8
  %6763 = bitcast i8* %6762 to i64*
  %6764 = load i64, i64* %6763, align 1
  %6765 = load double, double* bitcast (%one_type* @one to double*)
  %6766 = fadd double %6761, %6765
  %6767 = bitcast i8* %6756 to double*
  store double %6766, double* %6767, align 1, !tbaa !2452
  %6768 = getelementptr inbounds i8, i8* %6756, i64 8
  %6769 = bitcast i8* %6768 to i64*
  store i64 %6764, i64* %6769, align 1, !tbaa !2452
  %6770 = bitcast %union.vec128_t* %XMM2 to i8*
  %6771 = load i64, i64* %PC
  %6772 = add i64 %6771, 9
  store i64 %6772, i64* %PC
  %6773 = bitcast i8* %6770 to double*
  %6774 = load double, double* %6773, align 1
  store double %6774, double* bitcast (%sa_type* @sa to double*)
  %6775 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6776 = load i64, i64* %PC
  %6777 = add i64 %6776, 9
  store i64 %6777, i64* %PC
  %6778 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %6779 = bitcast i8* %6775 to double*
  store double %6778, double* %6779, align 1, !tbaa !2452
  %6780 = getelementptr inbounds i8, i8* %6775, i64 8
  %6781 = bitcast i8* %6780 to double*
  store double 0.000000e+00, double* %6781, align 1, !tbaa !2452
  %6782 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6783 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6784 = bitcast %union.vec128_t* %XMM1 to i8*
  %6785 = load i64, i64* %PC
  %6786 = add i64 %6785, 4
  store i64 %6786, i64* %PC
  %6787 = bitcast i8* %6783 to double*
  %6788 = load double, double* %6787, align 1
  %6789 = getelementptr inbounds i8, i8* %6783, i64 8
  %6790 = bitcast i8* %6789 to i64*
  %6791 = load i64, i64* %6790, align 1
  %6792 = bitcast i8* %6784 to double*
  %6793 = load double, double* %6792, align 1
  %6794 = fdiv double %6788, %6793
  %6795 = bitcast i8* %6782 to double*
  store double %6794, double* %6795, align 1, !tbaa !2452
  %6796 = getelementptr inbounds i8, i8* %6782, i64 8
  %6797 = bitcast i8* %6796 to i64*
  store i64 %6791, i64* %6797, align 1, !tbaa !2452
  %6798 = bitcast %union.vec128_t* %XMM2 to i8*
  %6799 = load i64, i64* %PC
  %6800 = add i64 %6799, 9
  store i64 %6800, i64* %PC
  %6801 = bitcast i8* %6798 to double*
  %6802 = load double, double* %6801, align 1
  store double %6802, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 104) to double*)
  %6803 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6804 = load i64, i64* %RBP
  %6805 = sub i64 %6804, 48
  %6806 = load i64, i64* %PC
  %6807 = add i64 %6806, 5
  store i64 %6807, i64* %PC
  %6808 = inttoptr i64 %6805 to double*
  %6809 = load double, double* %6808
  %6810 = bitcast i8* %6803 to double*
  store double %6809, double* %6810, align 1, !tbaa !2452
  %6811 = getelementptr inbounds i8, i8* %6803, i64 8
  %6812 = bitcast i8* %6811 to double*
  store double 0.000000e+00, double* %6812, align 1, !tbaa !2452
  %6813 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6814 = load i64, i64* %PC
  %6815 = add i64 %6814, 9
  store i64 %6815, i64* %PC
  %6816 = load double, double* bitcast (%sa_type* @sa to double*)
  %6817 = bitcast i8* %6813 to double*
  store double %6816, double* %6817, align 1, !tbaa !2452
  %6818 = getelementptr inbounds i8, i8* %6813, i64 8
  %6819 = bitcast i8* %6818 to double*
  store double 0.000000e+00, double* %6819, align 1, !tbaa !2452
  %6820 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6821 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6822 = load i64, i64* %PC
  %6823 = add i64 %6822, 9
  store i64 %6823, i64* %PC
  %6824 = bitcast i8* %6821 to double*
  %6825 = load double, double* %6824, align 1
  %6826 = getelementptr inbounds i8, i8* %6821, i64 8
  %6827 = bitcast i8* %6826 to i64*
  %6828 = load i64, i64* %6827, align 1
  %6829 = load double, double* bitcast (%one_type* @one to double*)
  %6830 = fadd double %6825, %6829
  %6831 = bitcast i8* %6820 to double*
  store double %6830, double* %6831, align 1, !tbaa !2452
  %6832 = getelementptr inbounds i8, i8* %6820, i64 8
  %6833 = bitcast i8* %6832 to i64*
  store i64 %6828, i64* %6833, align 1, !tbaa !2452
  %6834 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6835 = load i64, i64* %PC
  %6836 = add i64 %6835, 9
  store i64 %6836, i64* %PC
  %6837 = load double, double* bitcast (%two_type* @two to double*)
  %6838 = bitcast i8* %6834 to double*
  store double %6837, double* %6838, align 1, !tbaa !2452
  %6839 = getelementptr inbounds i8, i8* %6834, i64 8
  %6840 = bitcast i8* %6839 to double*
  store double 0.000000e+00, double* %6840, align 1, !tbaa !2452
  %6841 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6842 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6843 = load i64, i64* %RBP
  %6844 = sub i64 %6843, 16
  %6845 = load i64, i64* %PC
  %6846 = add i64 %6845, 5
  store i64 %6846, i64* %PC
  %6847 = bitcast i8* %6842 to double*
  %6848 = load double, double* %6847, align 1
  %6849 = getelementptr inbounds i8, i8* %6842, i64 8
  %6850 = bitcast i8* %6849 to i64*
  %6851 = load i64, i64* %6850, align 1
  %6852 = inttoptr i64 %6844 to double*
  %6853 = load double, double* %6852
  %6854 = fmul double %6848, %6853
  %6855 = bitcast i8* %6841 to double*
  store double %6854, double* %6855, align 1, !tbaa !2452
  %6856 = getelementptr inbounds i8, i8* %6841, i64 8
  %6857 = bitcast i8* %6856 to i64*
  store i64 %6851, i64* %6857, align 1, !tbaa !2452
  %6858 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6859 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6860 = bitcast %union.vec128_t* %XMM3 to i8*
  %6861 = load i64, i64* %PC
  %6862 = add i64 %6861, 4
  store i64 %6862, i64* %PC
  %6863 = bitcast i8* %6859 to double*
  %6864 = load double, double* %6863, align 1
  %6865 = getelementptr inbounds i8, i8* %6859, i64 8
  %6866 = bitcast i8* %6865 to i64*
  %6867 = load i64, i64* %6866, align 1
  %6868 = bitcast i8* %6860 to double*
  %6869 = load double, double* %6868, align 1
  %6870 = fadd double %6864, %6869
  %6871 = bitcast i8* %6858 to double*
  store double %6870, double* %6871, align 1, !tbaa !2452
  %6872 = getelementptr inbounds i8, i8* %6858, i64 8
  %6873 = bitcast i8* %6872 to i64*
  store i64 %6867, i64* %6873, align 1, !tbaa !2452
  %6874 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6875 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6876 = bitcast %union.vec128_t* %XMM2 to i8*
  %6877 = load i64, i64* %PC
  %6878 = add i64 %6877, 4
  store i64 %6878, i64* %PC
  %6879 = bitcast i8* %6875 to double*
  %6880 = load double, double* %6879, align 1
  %6881 = getelementptr inbounds i8, i8* %6875, i64 8
  %6882 = bitcast i8* %6881 to i64*
  %6883 = load i64, i64* %6882, align 1
  %6884 = bitcast i8* %6876 to double*
  %6885 = load double, double* %6884, align 1
  %6886 = fmul double %6880, %6885
  %6887 = bitcast i8* %6874 to double*
  store double %6886, double* %6887, align 1, !tbaa !2452
  %6888 = getelementptr inbounds i8, i8* %6874, i64 8
  %6889 = bitcast i8* %6888 to i64*
  store i64 %6883, i64* %6889, align 1, !tbaa !2452
  %6890 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6891 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6892 = load i64, i64* %PC
  %6893 = add i64 %6892, 9
  store i64 %6893, i64* %PC
  %6894 = bitcast i8* %6891 to double*
  %6895 = load double, double* %6894, align 1
  %6896 = getelementptr inbounds i8, i8* %6891, i64 8
  %6897 = bitcast i8* %6896 to i64*
  %6898 = load i64, i64* %6897, align 1
  %6899 = load double, double* bitcast (%two_type* @two to double*)
  %6900 = fdiv double %6895, %6899
  %6901 = bitcast i8* %6890 to double*
  store double %6900, double* %6901, align 1, !tbaa !2452
  %6902 = getelementptr inbounds i8, i8* %6890, i64 8
  %6903 = bitcast i8* %6902 to i64*
  store i64 %6898, i64* %6903, align 1, !tbaa !2452
  %6904 = bitcast %union.vec128_t* %XMM1 to i8*
  %6905 = load i64, i64* %PC
  %6906 = add i64 %6905, 9
  store i64 %6906, i64* %PC
  %6907 = bitcast i8* %6904 to double*
  %6908 = load double, double* %6907, align 1
  store double %6908, double* bitcast (%sa_type* @sa to double*)
  %6909 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6910 = load i64, i64* %PC
  %6911 = add i64 %6910, 9
  store i64 %6911, i64* %PC
  %6912 = load double, double* bitcast (%piref_type* @piref to double*)
  %6913 = bitcast i8* %6909 to double*
  store double %6912, double* %6913, align 1, !tbaa !2452
  %6914 = getelementptr inbounds i8, i8* %6909, i64 8
  %6915 = bitcast i8* %6914 to double*
  store double 0.000000e+00, double* %6915, align 1, !tbaa !2452
  %6916 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6917 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6918 = load i64, i64* %PC
  %6919 = add i64 %6918, 9
  store i64 %6919, i64* %PC
  %6920 = bitcast i8* %6917 to double*
  %6921 = load double, double* %6920, align 1
  %6922 = getelementptr inbounds i8, i8* %6917, i64 8
  %6923 = bitcast i8* %6922 to i64*
  %6924 = load i64, i64* %6923, align 1
  %6925 = load double, double* bitcast (%three_type* @three to double*)
  %6926 = fdiv double %6921, %6925
  %6927 = bitcast i8* %6916 to double*
  store double %6926, double* %6927, align 1, !tbaa !2452
  %6928 = getelementptr inbounds i8, i8* %6916, i64 8
  %6929 = bitcast i8* %6928 to i64*
  store i64 %6924, i64* %6929, align 1, !tbaa !2452
  %6930 = load i64, i64* %RBP
  %6931 = sub i64 %6930, 24
  %6932 = bitcast %union.vec128_t* %XMM1 to i8*
  %6933 = load i64, i64* %PC
  %6934 = add i64 %6933, 5
  store i64 %6934, i64* %PC
  %6935 = bitcast i8* %6932 to double*
  %6936 = load double, double* %6935, align 1
  %6937 = inttoptr i64 %6931 to double*
  store double %6936, double* %6937
  %6938 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6939 = load i64, i64* %RBP
  %6940 = sub i64 %6939, 24
  %6941 = load i64, i64* %PC
  %6942 = add i64 %6941, 5
  store i64 %6942, i64* %PC
  %6943 = inttoptr i64 %6940 to double*
  %6944 = load double, double* %6943
  %6945 = bitcast i8* %6938 to double*
  store double %6944, double* %6945, align 1, !tbaa !2452
  %6946 = getelementptr inbounds i8, i8* %6938, i64 8
  %6947 = bitcast i8* %6946 to double*
  store double 0.000000e+00, double* %6947, align 1, !tbaa !2452
  %6948 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6949 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6950 = load i64, i64* %RBP
  %6951 = sub i64 %6950, 24
  %6952 = load i64, i64* %PC
  %6953 = add i64 %6952, 5
  store i64 %6953, i64* %PC
  %6954 = bitcast i8* %6949 to double*
  %6955 = load double, double* %6954, align 1
  %6956 = getelementptr inbounds i8, i8* %6949, i64 8
  %6957 = bitcast i8* %6956 to i64*
  %6958 = load i64, i64* %6957, align 1
  %6959 = inttoptr i64 %6951 to double*
  %6960 = load double, double* %6959
  %6961 = fmul double %6955, %6960
  %6962 = bitcast i8* %6948 to double*
  store double %6961, double* %6962, align 1, !tbaa !2452
  %6963 = getelementptr inbounds i8, i8* %6948, i64 8
  %6964 = bitcast i8* %6963 to i64*
  store i64 %6958, i64* %6964, align 1, !tbaa !2452
  %6965 = load i64, i64* %RBP
  %6966 = sub i64 %6965, 40
  %6967 = bitcast %union.vec128_t* %XMM1 to i8*
  %6968 = load i64, i64* %PC
  %6969 = add i64 %6968, 5
  store i64 %6969, i64* %PC
  %6970 = bitcast i8* %6967 to double*
  %6971 = load double, double* %6970, align 1
  %6972 = inttoptr i64 %6966 to double*
  store double %6971, double* %6972
  %6973 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6974 = load i64, i64* %RBP
  %6975 = sub i64 %6974, 24
  %6976 = load i64, i64* %PC
  %6977 = add i64 %6976, 5
  store i64 %6977, i64* %PC
  %6978 = inttoptr i64 %6975 to double*
  %6979 = load double, double* %6978
  %6980 = bitcast i8* %6973 to double*
  store double %6979, double* %6980, align 1, !tbaa !2452
  %6981 = getelementptr inbounds i8, i8* %6973, i64 8
  %6982 = bitcast i8* %6981 to double*
  store double 0.000000e+00, double* %6982, align 1, !tbaa !2452
  %6983 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6984 = load i64, i64* %PC
  %6985 = add i64 %6984, 9
  store i64 %6985, i64* %PC
  %6986 = load double, double* bitcast (%A6_type* @A6 to double*)
  %6987 = bitcast i8* %6983 to double*
  store double %6986, double* %6987, align 1, !tbaa !2452
  %6988 = getelementptr inbounds i8, i8* %6983, i64 8
  %6989 = bitcast i8* %6988 to double*
  store double 0.000000e+00, double* %6989, align 1, !tbaa !2452
  %6990 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6991 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6992 = load i64, i64* %RBP
  %6993 = sub i64 %6992, 40
  %6994 = load i64, i64* %PC
  %6995 = add i64 %6994, 5
  store i64 %6995, i64* %PC
  %6996 = bitcast i8* %6991 to double*
  %6997 = load double, double* %6996, align 1
  %6998 = getelementptr inbounds i8, i8* %6991, i64 8
  %6999 = bitcast i8* %6998 to i64*
  %7000 = load i64, i64* %6999, align 1
  %7001 = inttoptr i64 %6993 to double*
  %7002 = load double, double* %7001
  %7003 = fmul double %6997, %7002
  %7004 = bitcast i8* %6990 to double*
  store double %7003, double* %7004, align 1, !tbaa !2452
  %7005 = getelementptr inbounds i8, i8* %6990, i64 8
  %7006 = bitcast i8* %7005 to i64*
  store i64 %7000, i64* %7006, align 1, !tbaa !2452
  %7007 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7008 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7009 = load i64, i64* %PC
  %7010 = add i64 %7009, 9
  store i64 %7010, i64* %PC
  %7011 = bitcast i8* %7008 to double*
  %7012 = load double, double* %7011, align 1
  %7013 = getelementptr inbounds i8, i8* %7008, i64 8
  %7014 = bitcast i8* %7013 to i64*
  %7015 = load i64, i64* %7014, align 1
  %7016 = load double, double* bitcast (%A5_type* @A5 to double*)
  %7017 = fadd double %7012, %7016
  %7018 = bitcast i8* %7007 to double*
  store double %7017, double* %7018, align 1, !tbaa !2452
  %7019 = getelementptr inbounds i8, i8* %7007, i64 8
  %7020 = bitcast i8* %7019 to i64*
  store i64 %7015, i64* %7020, align 1, !tbaa !2452
  %7021 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7022 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7023 = load i64, i64* %RBP
  %7024 = sub i64 %7023, 40
  %7025 = load i64, i64* %PC
  %7026 = add i64 %7025, 5
  store i64 %7026, i64* %PC
  %7027 = bitcast i8* %7022 to double*
  %7028 = load double, double* %7027, align 1
  %7029 = getelementptr inbounds i8, i8* %7022, i64 8
  %7030 = bitcast i8* %7029 to i64*
  %7031 = load i64, i64* %7030, align 1
  %7032 = inttoptr i64 %7024 to double*
  %7033 = load double, double* %7032
  %7034 = fmul double %7028, %7033
  %7035 = bitcast i8* %7021 to double*
  store double %7034, double* %7035, align 1, !tbaa !2452
  %7036 = getelementptr inbounds i8, i8* %7021, i64 8
  %7037 = bitcast i8* %7036 to i64*
  store i64 %7031, i64* %7037, align 1, !tbaa !2452
  %7038 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7039 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7040 = load i64, i64* %PC
  %7041 = add i64 %7040, 9
  store i64 %7041, i64* %PC
  %7042 = bitcast i8* %7039 to double*
  %7043 = load double, double* %7042, align 1
  %7044 = getelementptr inbounds i8, i8* %7039, i64 8
  %7045 = bitcast i8* %7044 to i64*
  %7046 = load i64, i64* %7045, align 1
  %7047 = load double, double* bitcast (%A4_type* @A4 to double*)
  %7048 = fadd double %7043, %7047
  %7049 = bitcast i8* %7038 to double*
  store double %7048, double* %7049, align 1, !tbaa !2452
  %7050 = getelementptr inbounds i8, i8* %7038, i64 8
  %7051 = bitcast i8* %7050 to i64*
  store i64 %7046, i64* %7051, align 1, !tbaa !2452
  %7052 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7053 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7054 = load i64, i64* %RBP
  %7055 = sub i64 %7054, 40
  %7056 = load i64, i64* %PC
  %7057 = add i64 %7056, 5
  store i64 %7057, i64* %PC
  %7058 = bitcast i8* %7053 to double*
  %7059 = load double, double* %7058, align 1
  %7060 = getelementptr inbounds i8, i8* %7053, i64 8
  %7061 = bitcast i8* %7060 to i64*
  %7062 = load i64, i64* %7061, align 1
  %7063 = inttoptr i64 %7055 to double*
  %7064 = load double, double* %7063
  %7065 = fmul double %7059, %7064
  %7066 = bitcast i8* %7052 to double*
  store double %7065, double* %7066, align 1, !tbaa !2452
  %7067 = getelementptr inbounds i8, i8* %7052, i64 8
  %7068 = bitcast i8* %7067 to i64*
  store i64 %7062, i64* %7068, align 1, !tbaa !2452
  %7069 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7070 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7071 = load i64, i64* %PC
  %7072 = add i64 %7071, 9
  store i64 %7072, i64* %PC
  %7073 = bitcast i8* %7070 to double*
  %7074 = load double, double* %7073, align 1
  %7075 = getelementptr inbounds i8, i8* %7070, i64 8
  %7076 = bitcast i8* %7075 to i64*
  %7077 = load i64, i64* %7076, align 1
  %7078 = load double, double* bitcast (%A3_type* @A3 to double*)
  %7079 = fadd double %7074, %7078
  %7080 = bitcast i8* %7069 to double*
  store double %7079, double* %7080, align 1, !tbaa !2452
  %7081 = getelementptr inbounds i8, i8* %7069, i64 8
  %7082 = bitcast i8* %7081 to i64*
  store i64 %7077, i64* %7082, align 1, !tbaa !2452
  %7083 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7084 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7085 = load i64, i64* %RBP
  %7086 = sub i64 %7085, 40
  %7087 = load i64, i64* %PC
  %7088 = add i64 %7087, 5
  store i64 %7088, i64* %PC
  %7089 = bitcast i8* %7084 to double*
  %7090 = load double, double* %7089, align 1
  %7091 = getelementptr inbounds i8, i8* %7084, i64 8
  %7092 = bitcast i8* %7091 to i64*
  %7093 = load i64, i64* %7092, align 1
  %7094 = inttoptr i64 %7086 to double*
  %7095 = load double, double* %7094
  %7096 = fmul double %7090, %7095
  %7097 = bitcast i8* %7083 to double*
  store double %7096, double* %7097, align 1, !tbaa !2452
  %7098 = getelementptr inbounds i8, i8* %7083, i64 8
  %7099 = bitcast i8* %7098 to i64*
  store i64 %7093, i64* %7099, align 1, !tbaa !2452
  %7100 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7101 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7102 = load i64, i64* %PC
  %7103 = add i64 %7102, 9
  store i64 %7103, i64* %PC
  %7104 = bitcast i8* %7101 to double*
  %7105 = load double, double* %7104, align 1
  %7106 = getelementptr inbounds i8, i8* %7101, i64 8
  %7107 = bitcast i8* %7106 to i64*
  %7108 = load i64, i64* %7107, align 1
  %7109 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %7110 = fadd double %7105, %7109
  %7111 = bitcast i8* %7100 to double*
  store double %7110, double* %7111, align 1, !tbaa !2452
  %7112 = getelementptr inbounds i8, i8* %7100, i64 8
  %7113 = bitcast i8* %7112 to i64*
  store i64 %7108, i64* %7113, align 1, !tbaa !2452
  %7114 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7115 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7116 = load i64, i64* %RBP
  %7117 = sub i64 %7116, 40
  %7118 = load i64, i64* %PC
  %7119 = add i64 %7118, 5
  store i64 %7119, i64* %PC
  %7120 = bitcast i8* %7115 to double*
  %7121 = load double, double* %7120, align 1
  %7122 = getelementptr inbounds i8, i8* %7115, i64 8
  %7123 = bitcast i8* %7122 to i64*
  %7124 = load i64, i64* %7123, align 1
  %7125 = inttoptr i64 %7117 to double*
  %7126 = load double, double* %7125
  %7127 = fmul double %7121, %7126
  %7128 = bitcast i8* %7114 to double*
  store double %7127, double* %7128, align 1, !tbaa !2452
  %7129 = getelementptr inbounds i8, i8* %7114, i64 8
  %7130 = bitcast i8* %7129 to i64*
  store i64 %7124, i64* %7130, align 1, !tbaa !2452
  %7131 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7132 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7133 = load i64, i64* %PC
  %7134 = add i64 %7133, 9
  store i64 %7134, i64* %PC
  %7135 = bitcast i8* %7132 to double*
  %7136 = load double, double* %7135, align 1
  %7137 = getelementptr inbounds i8, i8* %7132, i64 8
  %7138 = bitcast i8* %7137 to i64*
  %7139 = load i64, i64* %7138, align 1
  %7140 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %7141 = fadd double %7136, %7140
  %7142 = bitcast i8* %7131 to double*
  store double %7141, double* %7142, align 1, !tbaa !2452
  %7143 = getelementptr inbounds i8, i8* %7131, i64 8
  %7144 = bitcast i8* %7143 to i64*
  store i64 %7139, i64* %7144, align 1, !tbaa !2452
  %7145 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7146 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7147 = load i64, i64* %RBP
  %7148 = sub i64 %7147, 40
  %7149 = load i64, i64* %PC
  %7150 = add i64 %7149, 5
  store i64 %7150, i64* %PC
  %7151 = bitcast i8* %7146 to double*
  %7152 = load double, double* %7151, align 1
  %7153 = getelementptr inbounds i8, i8* %7146, i64 8
  %7154 = bitcast i8* %7153 to i64*
  %7155 = load i64, i64* %7154, align 1
  %7156 = inttoptr i64 %7148 to double*
  %7157 = load double, double* %7156
  %7158 = fmul double %7152, %7157
  %7159 = bitcast i8* %7145 to double*
  store double %7158, double* %7159, align 1, !tbaa !2452
  %7160 = getelementptr inbounds i8, i8* %7145, i64 8
  %7161 = bitcast i8* %7160 to i64*
  store i64 %7155, i64* %7161, align 1, !tbaa !2452
  %7162 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7163 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7164 = load i64, i64* %PC
  %7165 = add i64 %7164, 9
  store i64 %7165, i64* %PC
  %7166 = bitcast i8* %7163 to double*
  %7167 = load double, double* %7166, align 1
  %7168 = getelementptr inbounds i8, i8* %7163, i64 8
  %7169 = bitcast i8* %7168 to i64*
  %7170 = load i64, i64* %7169, align 1
  %7171 = load double, double* bitcast (%A0_type* @A0 to double*)
  %7172 = fadd double %7167, %7171
  %7173 = bitcast i8* %7162 to double*
  store double %7172, double* %7173, align 1, !tbaa !2452
  %7174 = getelementptr inbounds i8, i8* %7162, i64 8
  %7175 = bitcast i8* %7174 to i64*
  store i64 %7170, i64* %7175, align 1, !tbaa !2452
  %7176 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7177 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7178 = bitcast %union.vec128_t* %XMM2 to i8*
  %7179 = load i64, i64* %PC
  %7180 = add i64 %7179, 4
  store i64 %7180, i64* %PC
  %7181 = bitcast i8* %7177 to double*
  %7182 = load double, double* %7181, align 1
  %7183 = getelementptr inbounds i8, i8* %7177, i64 8
  %7184 = bitcast i8* %7183 to i64*
  %7185 = load i64, i64* %7184, align 1
  %7186 = bitcast i8* %7178 to double*
  %7187 = load double, double* %7186, align 1
  %7188 = fmul double %7182, %7187
  %7189 = bitcast i8* %7176 to double*
  store double %7188, double* %7189, align 1, !tbaa !2452
  %7190 = getelementptr inbounds i8, i8* %7176, i64 8
  %7191 = bitcast i8* %7190 to i64*
  store i64 %7185, i64* %7191, align 1, !tbaa !2452
  %7192 = bitcast %union.vec128_t* %XMM1 to i8*
  %7193 = load i64, i64* %PC
  %7194 = add i64 %7193, 9
  store i64 %7194, i64* %PC
  %7195 = bitcast i8* %7192 to double*
  %7196 = load double, double* %7195, align 1
  store double %7196, double* bitcast (%sb_type* @sb to double*)
  %7197 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7198 = load i64, i64* %PC
  %7199 = add i64 %7198, 9
  store i64 %7199, i64* %PC
  %7200 = load double, double* bitcast (%sa_type* @sa to double*)
  %7201 = bitcast i8* %7197 to double*
  store double %7200, double* %7201, align 1, !tbaa !2452
  %7202 = getelementptr inbounds i8, i8* %7197, i64 8
  %7203 = bitcast i8* %7202 to double*
  store double 0.000000e+00, double* %7203, align 1, !tbaa !2452
  %7204 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7205 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7206 = load i64, i64* %PC
  %7207 = add i64 %7206, 9
  store i64 %7207, i64* %PC
  %7208 = bitcast i8* %7205 to double*
  %7209 = load double, double* %7208, align 1
  %7210 = getelementptr inbounds i8, i8* %7205, i64 8
  %7211 = bitcast i8* %7210 to i64*
  %7212 = load i64, i64* %7211, align 1
  %7213 = load double, double* bitcast (%sb_type* @sb to double*)
  %7214 = fsub double %7209, %7213
  %7215 = bitcast i8* %7204 to double*
  store double %7214, double* %7215, align 1, !tbaa !2452
  %7216 = getelementptr inbounds i8, i8* %7204, i64 8
  %7217 = bitcast i8* %7216 to i64*
  store i64 %7212, i64* %7217, align 1, !tbaa !2452
  %7218 = bitcast %union.vec128_t* %XMM1 to i8*
  %7219 = load i64, i64* %PC
  %7220 = add i64 %7219, 9
  store i64 %7220, i64* %PC
  %7221 = bitcast i8* %7218 to double*
  %7222 = load double, double* %7221, align 1
  store double %7222, double* bitcast (%sc_type* @sc to double*)
  %7223 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7224 = load i64, i64* %PC
  %7225 = add i64 %7224, 9
  store i64 %7225, i64* %PC
  %7226 = load double, double* bitcast (%one_type* @one to double*)
  %7227 = bitcast i8* %7223 to double*
  store double %7226, double* %7227, align 1, !tbaa !2452
  %7228 = getelementptr inbounds i8, i8* %7223, i64 8
  %7229 = bitcast i8* %7228 to double*
  store double 0.000000e+00, double* %7229, align 1, !tbaa !2452
  %7230 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7231 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7232 = load i64, i64* %PC
  %7233 = add i64 %7232, 9
  store i64 %7233, i64* %PC
  %7234 = bitcast i8* %7231 to double*
  %7235 = load double, double* %7234, align 1
  %7236 = getelementptr inbounds i8, i8* %7231, i64 8
  %7237 = bitcast i8* %7236 to i64*
  %7238 = load i64, i64* %7237, align 1
  %7239 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 104) to double*)
  %7240 = fdiv double %7235, %7239
  %7241 = bitcast i8* %7230 to double*
  store double %7240, double* %7241, align 1, !tbaa !2452
  %7242 = getelementptr inbounds i8, i8* %7230, i64 8
  %7243 = bitcast i8* %7242 to i64*
  store i64 %7238, i64* %7243, align 1, !tbaa !2452
  %7244 = bitcast %union.vec128_t* %XMM1 to i8*
  %7245 = load i64, i64* %PC
  %7246 = add i64 %7245, 9
  store i64 %7246, i64* %PC
  %7247 = bitcast i8* %7244 to double*
  %7248 = load double, double* %7247, align 1
  store double %7248, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 112) to double*)
  %7249 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7250 = bitcast %union.vec128_t* %XMM0 to i8*
  %7251 = load i64, i64* %PC
  %7252 = add i64 %7251, 3
  store i64 %7252, i64* %PC
  %7253 = bitcast i8* %7250 to <2 x i32>*
  %7254 = load <2 x i32>, <2 x i32>* %7253, align 1
  %7255 = getelementptr inbounds i8, i8* %7250, i64 8
  %7256 = bitcast i8* %7255 to <2 x i32>*
  %7257 = load <2 x i32>, <2 x i32>* %7256, align 1
  %7258 = extractelement <2 x i32> %7254, i32 0
  %7259 = bitcast i8* %7249 to i32*
  store i32 %7258, i32* %7259, align 1, !tbaa !2455
  %7260 = extractelement <2 x i32> %7254, i32 1
  %7261 = getelementptr inbounds i8, i8* %7249, i64 4
  %7262 = bitcast i8* %7261 to i32*
  store i32 %7260, i32* %7262, align 1, !tbaa !2455
  %7263 = extractelement <2 x i32> %7257, i32 0
  %7264 = getelementptr inbounds i8, i8* %7249, i64 8
  %7265 = bitcast i8* %7264 to i32*
  store i32 %7263, i32* %7265, align 1, !tbaa !2455
  %7266 = extractelement <2 x i32> %7257, i32 1
  %7267 = getelementptr inbounds i8, i8* %7249, i64 12
  %7268 = bitcast i8* %7267 to i32*
  store i32 %7266, i32* %7268, align 1, !tbaa !2455
  %7269 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7270 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7271 = load i64, i64* %PC
  %7272 = add i64 %7271, 9
  store i64 %7272, i64* %PC
  %7273 = bitcast i8* %7270 to double*
  %7274 = load double, double* %7273, align 1
  %7275 = getelementptr inbounds i8, i8* %7270, i64 8
  %7276 = bitcast i8* %7275 to i64*
  %7277 = load i64, i64* %7276, align 1
  %7278 = load double, double* bitcast (%sc_type* @sc to double*)
  %7279 = fmul double %7274, %7278
  %7280 = bitcast i8* %7269 to double*
  store double %7279, double* %7280, align 1, !tbaa !2452
  %7281 = getelementptr inbounds i8, i8* %7269, i64 8
  %7282 = bitcast i8* %7281 to i64*
  store i64 %7277, i64* %7282, align 1, !tbaa !2452
  %7283 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7284 = bitcast %union.vec128_t* %XMM0 to i8*
  %7285 = load i64, i64* %PC
  %7286 = add i64 %7285, 3
  store i64 %7286, i64* %PC
  %7287 = bitcast i8* %7284 to <2 x i32>*
  %7288 = load <2 x i32>, <2 x i32>* %7287, align 1
  %7289 = getelementptr inbounds i8, i8* %7284, i64 8
  %7290 = bitcast i8* %7289 to <2 x i32>*
  %7291 = load <2 x i32>, <2 x i32>* %7290, align 1
  %7292 = extractelement <2 x i32> %7288, i32 0
  %7293 = bitcast i8* %7283 to i32*
  store i32 %7292, i32* %7293, align 1, !tbaa !2455
  %7294 = extractelement <2 x i32> %7288, i32 1
  %7295 = getelementptr inbounds i8, i8* %7283, i64 4
  %7296 = bitcast i8* %7295 to i32*
  store i32 %7294, i32* %7296, align 1, !tbaa !2455
  %7297 = extractelement <2 x i32> %7291, i32 0
  %7298 = getelementptr inbounds i8, i8* %7283, i64 8
  %7299 = bitcast i8* %7298 to i32*
  store i32 %7297, i32* %7299, align 1, !tbaa !2455
  %7300 = extractelement <2 x i32> %7291, i32 1
  %7301 = getelementptr inbounds i8, i8* %7283, i64 12
  %7302 = bitcast i8* %7301 to i32*
  store i32 %7300, i32* %7302, align 1, !tbaa !2455
  %7303 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7304 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7305 = load i64, i64* %PC
  %7306 = add i64 %7305, 9
  store i64 %7306, i64* %PC
  %7307 = bitcast i8* %7304 to double*
  %7308 = load double, double* %7307, align 1
  %7309 = getelementptr inbounds i8, i8* %7304, i64 8
  %7310 = bitcast i8* %7309 to i64*
  %7311 = load i64, i64* %7310, align 1
  %7312 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %7313 = fmul double %7308, %7312
  %7314 = bitcast i8* %7303 to double*
  store double %7313, double* %7314, align 1, !tbaa !2452
  %7315 = getelementptr inbounds i8, i8* %7303, i64 8
  %7316 = bitcast i8* %7315 to i64*
  store i64 %7311, i64* %7316, align 1, !tbaa !2452
  %7317 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7318 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7319 = load i64, i64* %PC
  %7320 = add i64 %7319, 9
  store i64 %7320, i64* %PC
  %7321 = bitcast i8* %7318 to double*
  %7322 = load double, double* %7321, align 1
  %7323 = getelementptr inbounds i8, i8* %7318, i64 8
  %7324 = bitcast i8* %7323 to i64*
  %7325 = load i64, i64* %7324, align 1
  %7326 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 112) to double*)
  %7327 = fmul double %7322, %7326
  %7328 = bitcast i8* %7317 to double*
  store double %7327, double* %7328, align 1, !tbaa !2452
  %7329 = getelementptr inbounds i8, i8* %7317, i64 8
  %7330 = bitcast i8* %7329 to i64*
  store i64 %7325, i64* %7330, align 1, !tbaa !2452
  %7331 = load i64, i64* %RBP
  %7332 = sub i64 %7331, 208
  %7333 = bitcast %union.vec128_t* %XMM0 to i8*
  %7334 = load i64, i64* %PC
  %7335 = add i64 %7334, 8
  store i64 %7335, i64* %PC
  %7336 = bitcast i8* %7333 to double*
  %7337 = load double, double* %7336, align 1
  %7338 = inttoptr i64 %7332 to double*
  store double %7337, double* %7338
  %7339 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7340 = bitcast %union.vec128_t* %XMM1 to i8*
  %7341 = load i64, i64* %PC
  %7342 = add i64 %7341, 3
  store i64 %7342, i64* %PC
  %7343 = bitcast i8* %7340 to <2 x i32>*
  %7344 = load <2 x i32>, <2 x i32>* %7343, align 1
  %7345 = getelementptr inbounds i8, i8* %7340, i64 8
  %7346 = bitcast i8* %7345 to <2 x i32>*
  %7347 = load <2 x i32>, <2 x i32>* %7346, align 1
  %7348 = extractelement <2 x i32> %7344, i32 0
  %7349 = bitcast i8* %7339 to i32*
  store i32 %7348, i32* %7349, align 1, !tbaa !2455
  %7350 = extractelement <2 x i32> %7344, i32 1
  %7351 = getelementptr inbounds i8, i8* %7339, i64 4
  %7352 = bitcast i8* %7351 to i32*
  store i32 %7350, i32* %7352, align 1, !tbaa !2455
  %7353 = extractelement <2 x i32> %7347, i32 0
  %7354 = getelementptr inbounds i8, i8* %7339, i64 8
  %7355 = bitcast i8* %7354 to i32*
  store i32 %7353, i32* %7355, align 1, !tbaa !2455
  %7356 = extractelement <2 x i32> %7347, i32 1
  %7357 = getelementptr inbounds i8, i8* %7339, i64 12
  %7358 = bitcast i8* %7357 to i32*
  store i32 %7356, i32* %7358, align 1, !tbaa !2455
  %7359 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7360 = bitcast %union.vec128_t* %XMM2 to i8*
  %7361 = load i64, i64* %PC
  %7362 = add i64 %7361, 3
  store i64 %7362, i64* %PC
  %7363 = bitcast i8* %7360 to <2 x i32>*
  %7364 = load <2 x i32>, <2 x i32>* %7363, align 1
  %7365 = getelementptr inbounds i8, i8* %7360, i64 8
  %7366 = bitcast i8* %7365 to <2 x i32>*
  %7367 = load <2 x i32>, <2 x i32>* %7366, align 1
  %7368 = extractelement <2 x i32> %7364, i32 0
  %7369 = bitcast i8* %7359 to i32*
  store i32 %7368, i32* %7369, align 1, !tbaa !2455
  %7370 = extractelement <2 x i32> %7364, i32 1
  %7371 = getelementptr inbounds i8, i8* %7359, i64 4
  %7372 = bitcast i8* %7371 to i32*
  store i32 %7370, i32* %7372, align 1, !tbaa !2455
  %7373 = extractelement <2 x i32> %7367, i32 0
  %7374 = getelementptr inbounds i8, i8* %7359, i64 8
  %7375 = bitcast i8* %7374 to i32*
  store i32 %7373, i32* %7375, align 1, !tbaa !2455
  %7376 = extractelement <2 x i32> %7367, i32 1
  %7377 = getelementptr inbounds i8, i8* %7359, i64 12
  %7378 = bitcast i8* %7377 to i32*
  store i32 %7376, i32* %7378, align 1, !tbaa !2455
  %7379 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7380 = load i64, i64* %RBP
  %7381 = sub i64 %7380, 208
  %7382 = load i64, i64* %PC
  %7383 = add i64 %7382, 8
  store i64 %7383, i64* %PC
  %7384 = inttoptr i64 %7381 to double*
  %7385 = load double, double* %7384
  %7386 = bitcast i8* %7379 to double*
  store double %7385, double* %7386, align 1, !tbaa !2452
  %7387 = getelementptr inbounds i8, i8* %7379, i64 8
  %7388 = bitcast i8* %7387 to double*
  store double 0.000000e+00, double* %7388, align 1, !tbaa !2452
  %7389 = load i64, i64* %RBP
  %7390 = sub i64 %7389, 212
  %7391 = load i32, i32* %EAX
  %7392 = zext i32 %7391 to i64
  %7393 = load i64, i64* %PC
  %7394 = add i64 %7393, 6
  store i64 %7394, i64* %PC
  %7395 = inttoptr i64 %7390 to i32*
  store i32 %7391, i32* %7395
  %7396 = load i64, i64* %PC
  %7397 = add i64 %7396, 2
  store i64 %7397, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %7398 = load i64, i64* %PC
  %7399 = sub i64 %7398, 4181
  %7400 = load i64, i64* %PC
  %7401 = add i64 %7400, 5
  %7402 = load i64, i64* %PC
  %7403 = add i64 %7402, 5
  store i64 %7403, i64* %PC
  %7404 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7405 = load i64, i64* %7404, align 8, !tbaa !2428
  %7406 = add i64 %7405, -8
  %7407 = inttoptr i64 %7406 to i64*
  store i64 %7401, i64* %7407
  store i64 %7406, i64* %7404, align 8, !tbaa !2428
  %7408 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7399, i64* %7408, align 8, !tbaa !2428
  %7409 = load i64, i64* %PC
  %7410 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %7409, %struct.Memory* %6411)
  %7411 = load i64, i64* %PC
  %7412 = add i64 %7411, 10
  store i64 %7412, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %7413 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7414 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7415 = bitcast %union.vec128_t* %XMM0 to i8*
  %7416 = load i64, i64* %PC
  %7417 = add i64 %7416, 3
  store i64 %7417, i64* %PC
  %7418 = bitcast i8* %7414 to i64*
  %7419 = load i64, i64* %7418, align 1
  %7420 = getelementptr inbounds i8, i8* %7414, i64 8
  %7421 = bitcast i8* %7420 to i64*
  %7422 = load i64, i64* %7421, align 1
  %7423 = bitcast i8* %7415 to i64*
  %7424 = load i64, i64* %7423, align 1
  %7425 = getelementptr inbounds i8, i8* %7415, i64 8
  %7426 = bitcast i8* %7425 to i64*
  %7427 = load i64, i64* %7426, align 1
  %7428 = xor i64 %7424, %7419
  %7429 = xor i64 %7427, %7422
  %7430 = trunc i64 %7428 to i32
  %7431 = lshr i64 %7428, 32
  %7432 = trunc i64 %7431 to i32
  %7433 = bitcast i8* %7413 to i32*
  store i32 %7430, i32* %7433, align 1, !tbaa !2454
  %7434 = getelementptr inbounds i8, i8* %7413, i64 4
  %7435 = bitcast i8* %7434 to i32*
  store i32 %7432, i32* %7435, align 1, !tbaa !2454
  %7436 = trunc i64 %7429 to i32
  %7437 = getelementptr inbounds i8, i8* %7413, i64 8
  %7438 = bitcast i8* %7437 to i32*
  store i32 %7436, i32* %7438, align 1, !tbaa !2454
  %7439 = lshr i64 %7429, 32
  %7440 = trunc i64 %7439 to i32
  %7441 = getelementptr inbounds i8, i8* %7413, i64 12
  %7442 = bitcast i8* %7441 to i32*
  store i32 %7440, i32* %7442, align 1, !tbaa !2454
  %7443 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7444 = load i64, i64* %PC
  %7445 = add i64 %7444, 9
  store i64 %7445, i64* %PC
  %7446 = load double, double* bitcast (%piref_type* @piref to double*)
  %7447 = bitcast i8* %7443 to double*
  store double %7446, double* %7447, align 1, !tbaa !2452
  %7448 = getelementptr inbounds i8, i8* %7443, i64 8
  %7449 = bitcast i8* %7448 to double*
  store double 0.000000e+00, double* %7449, align 1, !tbaa !2452
  %7450 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7451 = load i64, i64* %PC
  %7452 = add i64 %7451, 9
  store i64 %7452, i64* %PC
  %7453 = load double, double* bitcast (%three_type* @three to double*)
  %7454 = bitcast i8* %7450 to double*
  store double %7453, double* %7454, align 1, !tbaa !2452
  %7455 = getelementptr inbounds i8, i8* %7450, i64 8
  %7456 = bitcast i8* %7455 to double*
  store double 0.000000e+00, double* %7456, align 1, !tbaa !2452
  %7457 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7458 = load i64, i64* %RBP
  %7459 = sub i64 %7458, 80
  %7460 = load i64, i64* %PC
  %7461 = add i64 %7460, 6
  store i64 %7461, i64* %PC
  %7462 = inttoptr i64 %7459 to i64*
  %7463 = load i64, i64* %7462
  %7464 = sitofp i64 %7463 to double
  %7465 = bitcast i8* %7457 to double*
  store double %7464, double* %7465, align 1, !tbaa !2452
  %7466 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7467 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7468 = bitcast %union.vec128_t* %XMM3 to i8*
  %7469 = load i64, i64* %PC
  %7470 = add i64 %7469, 4
  store i64 %7470, i64* %PC
  %7471 = bitcast i8* %7467 to double*
  %7472 = load double, double* %7471, align 1
  %7473 = getelementptr inbounds i8, i8* %7467, i64 8
  %7474 = bitcast i8* %7473 to i64*
  %7475 = load i64, i64* %7474, align 1
  %7476 = bitcast i8* %7468 to double*
  %7477 = load double, double* %7476, align 1
  %7478 = fmul double %7472, %7477
  %7479 = bitcast i8* %7466 to double*
  store double %7478, double* %7479, align 1, !tbaa !2452
  %7480 = getelementptr inbounds i8, i8* %7466, i64 8
  %7481 = bitcast i8* %7480 to i64*
  store i64 %7475, i64* %7481, align 1, !tbaa !2452
  %7482 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7483 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7484 = bitcast %union.vec128_t* %XMM2 to i8*
  %7485 = load i64, i64* %PC
  %7486 = add i64 %7485, 4
  store i64 %7486, i64* %PC
  %7487 = bitcast i8* %7483 to double*
  %7488 = load double, double* %7487, align 1
  %7489 = getelementptr inbounds i8, i8* %7483, i64 8
  %7490 = bitcast i8* %7489 to i64*
  %7491 = load i64, i64* %7490, align 1
  %7492 = bitcast i8* %7484 to double*
  %7493 = load double, double* %7492, align 1
  %7494 = fdiv double %7488, %7493
  %7495 = bitcast i8* %7482 to double*
  store double %7494, double* %7495, align 1, !tbaa !2452
  %7496 = getelementptr inbounds i8, i8* %7482, i64 8
  %7497 = bitcast i8* %7496 to i64*
  store i64 %7491, i64* %7497, align 1, !tbaa !2452
  %7498 = load i64, i64* %RBP
  %7499 = sub i64 %7498, 48
  %7500 = bitcast %union.vec128_t* %XMM1 to i8*
  %7501 = load i64, i64* %PC
  %7502 = add i64 %7501, 5
  store i64 %7502, i64* %PC
  %7503 = bitcast i8* %7500 to double*
  %7504 = load double, double* %7503, align 1
  %7505 = inttoptr i64 %7499 to double*
  store double %7504, double* %7505
  %7506 = load i64, i64* %RBP
  %7507 = sub i64 %7506, 16
  %7508 = bitcast %union.vec128_t* %XMM0 to i8*
  %7509 = load i64, i64* %PC
  %7510 = add i64 %7509, 5
  store i64 %7510, i64* %PC
  %7511 = bitcast i8* %7508 to double*
  %7512 = load double, double* %7511, align 1
  %7513 = inttoptr i64 %7507 to double*
  store double %7512, double* %7513
  %7514 = load i64, i64* %RBP
  %7515 = sub i64 %7514, 32
  %7516 = bitcast %union.vec128_t* %XMM0 to i8*
  %7517 = load i64, i64* %PC
  %7518 = add i64 %7517, 5
  store i64 %7518, i64* %PC
  %7519 = bitcast i8* %7516 to double*
  %7520 = load double, double* %7519, align 1
  %7521 = inttoptr i64 %7515 to double*
  store double %7520, double* %7521
  %7522 = load i64, i64* %RBP
  %7523 = sub i64 %7522, 216
  %7524 = load i32, i32* %EAX
  %7525 = zext i32 %7524 to i64
  %7526 = load i64, i64* %PC
  %7527 = add i64 %7526, 6
  store i64 %7527, i64* %PC
  %7528 = inttoptr i64 %7523 to i32*
  store i32 %7524, i32* %7528
  %7529 = load i64, i64* %PC
  %7530 = add i64 %7529, 4340
  %7531 = load i64, i64* %PC
  %7532 = add i64 %7531, 5
  %7533 = load i64, i64* %PC
  %7534 = add i64 %7533, 5
  store i64 %7534, i64* %PC
  %7535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7536 = load i64, i64* %7535, align 8, !tbaa !2428
  %7537 = add i64 %7536, -8
  %7538 = inttoptr i64 %7537 to i64*
  store i64 %7532, i64* %7538
  store i64 %7537, i64* %7535, align 8, !tbaa !2428
  %7539 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7530, i64* %7539, align 8, !tbaa !2428
  %7540 = load i64, i64* %PC
  %7541 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %7540, %struct.Memory* %7410)
  %7542 = load i64, i64* %RBP
  %7543 = sub i64 %7542, 72
  %7544 = load i64, i64* %PC
  %7545 = add i64 %7544, 8
  store i64 %7545, i64* %PC
  %7546 = inttoptr i64 %7543 to i64*
  store i64 1, i64* %7546
  %7547 = load i64, i64* %RBP
  %7548 = sub i64 %7547, 220
  %7549 = load i32, i32* %EAX
  %7550 = zext i32 %7549 to i64
  %7551 = load i64, i64* %PC
  %7552 = add i64 %7551, 6
  store i64 %7552, i64* %PC
  %7553 = inttoptr i64 %7548 to i32*
  store i32 %7549, i32* %7553
  br label %block_4014ff

block_4006c2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %7554 = load i64, i64* %PC
  %7555 = add i64 %7554, 10
  store i64 %7555, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %7556 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7557 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7558 = bitcast %union.vec128_t* %XMM0 to i8*
  %7559 = load i64, i64* %PC
  %7560 = add i64 %7559, 3
  store i64 %7560, i64* %PC
  %7561 = bitcast i8* %7557 to i64*
  %7562 = load i64, i64* %7561, align 1
  %7563 = getelementptr inbounds i8, i8* %7557, i64 8
  %7564 = bitcast i8* %7563 to i64*
  %7565 = load i64, i64* %7564, align 1
  %7566 = bitcast i8* %7558 to i64*
  %7567 = load i64, i64* %7566, align 1
  %7568 = getelementptr inbounds i8, i8* %7558, i64 8
  %7569 = bitcast i8* %7568 to i64*
  %7570 = load i64, i64* %7569, align 1
  %7571 = xor i64 %7567, %7562
  %7572 = xor i64 %7570, %7565
  %7573 = trunc i64 %7571 to i32
  %7574 = lshr i64 %7571, 32
  %7575 = trunc i64 %7574 to i32
  %7576 = bitcast i8* %7556 to i32*
  store i32 %7573, i32* %7576, align 1, !tbaa !2454
  %7577 = getelementptr inbounds i8, i8* %7556, i64 4
  %7578 = bitcast i8* %7577 to i32*
  store i32 %7575, i32* %7578, align 1, !tbaa !2454
  %7579 = trunc i64 %7572 to i32
  %7580 = getelementptr inbounds i8, i8* %7556, i64 8
  %7581 = bitcast i8* %7580 to i32*
  store i32 %7579, i32* %7581, align 1, !tbaa !2454
  %7582 = lshr i64 %7572, 32
  %7583 = trunc i64 %7582 to i32
  %7584 = getelementptr inbounds i8, i8* %7556, i64 12
  %7585 = bitcast i8* %7584 to i32*
  store i32 %7583, i32* %7585, align 1, !tbaa !2454
  %7586 = load i64, i64* %RBP
  %7587 = sub i64 %7586, 88
  %7588 = load i64, i64* %PC
  %7589 = add i64 %7588, 4
  store i64 %7589, i64* %PC
  %7590 = inttoptr i64 %7587 to i64*
  %7591 = load i64, i64* %7590
  store i64 %7591, i64* %RAX, align 8, !tbaa !2428
  %7592 = load i64, i64* %RAX
  %7593 = load i64, i64* %PC
  %7594 = add i64 %7593, 4
  store i64 %7594, i64* %PC
  %7595 = shl i64 %7592, 1
  %7596 = icmp slt i64 %7592, 0
  %7597 = icmp slt i64 %7595, 0
  %7598 = xor i1 %7596, %7597
  store i64 %7595, i64* %RAX, align 8, !tbaa !2428
  %7599 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %7600 = zext i1 %7596 to i8
  store i8 %7600, i8* %7599, align 1, !tbaa !2451
  %7601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %7602 = trunc i64 %7595 to i32
  %7603 = and i32 %7602, 254
  %7604 = call i32 @llvm.ctpop.i32(i32 %7603) #16
  %7605 = trunc i32 %7604 to i8
  %7606 = and i8 %7605, 1
  %7607 = xor i8 %7606, 1
  store i8 %7607, i8* %7601, align 1, !tbaa !2451
  %7608 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %7608, align 1, !tbaa !2451
  %7609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %7610 = icmp eq i64 %7595, 0
  %7611 = zext i1 %7610 to i8
  store i8 %7611, i8* %7609, align 1, !tbaa !2451
  %7612 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %7613 = lshr i64 %7595, 63
  %7614 = trunc i64 %7613 to i8
  store i8 %7614, i8* %7612, align 1, !tbaa !2451
  %7615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %7616 = zext i1 %7598 to i8
  store i8 %7616, i8* %7615, align 1, !tbaa !2451
  %7617 = load i64, i64* %RBP
  %7618 = sub i64 %7617, 88
  %7619 = load i64, i64* %RAX
  %7620 = load i64, i64* %PC
  %7621 = add i64 %7620, 4
  store i64 %7621, i64* %PC
  %7622 = inttoptr i64 %7618 to i64*
  store i64 %7619, i64* %7622
  %7623 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7624 = load i64, i64* %PC
  %7625 = add i64 %7624, 9
  store i64 %7625, i64* %PC
  %7626 = load double, double* bitcast (%one_type* @one to double*)
  %7627 = bitcast i8* %7623 to double*
  store double %7626, double* %7627, align 1, !tbaa !2452
  %7628 = getelementptr inbounds i8, i8* %7623, i64 8
  %7629 = bitcast i8* %7628 to double*
  store double 0.000000e+00, double* %7629, align 1, !tbaa !2452
  %7630 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7631 = load i64, i64* %RBP
  %7632 = sub i64 %7631, 88
  %7633 = load i64, i64* %PC
  %7634 = add i64 %7633, 6
  store i64 %7634, i64* %PC
  %7635 = inttoptr i64 %7632 to i64*
  %7636 = load i64, i64* %7635
  %7637 = sitofp i64 %7636 to double
  %7638 = bitcast i8* %7630 to double*
  store double %7637, double* %7638, align 1, !tbaa !2452
  %7639 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7640 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7641 = bitcast %union.vec128_t* %XMM2 to i8*
  %7642 = load i64, i64* %PC
  %7643 = add i64 %7642, 4
  store i64 %7643, i64* %PC
  %7644 = bitcast i8* %7640 to double*
  %7645 = load double, double* %7644, align 1
  %7646 = getelementptr inbounds i8, i8* %7640, i64 8
  %7647 = bitcast i8* %7646 to i64*
  %7648 = load i64, i64* %7647, align 1
  %7649 = bitcast i8* %7641 to double*
  %7650 = load double, double* %7649, align 1
  %7651 = fdiv double %7645, %7650
  %7652 = bitcast i8* %7639 to double*
  store double %7651, double* %7652, align 1, !tbaa !2452
  %7653 = getelementptr inbounds i8, i8* %7639, i64 8
  %7654 = bitcast i8* %7653 to i64*
  store i64 %7648, i64* %7654, align 1, !tbaa !2452
  %7655 = load i64, i64* %RBP
  %7656 = sub i64 %7655, 48
  %7657 = bitcast %union.vec128_t* %XMM1 to i8*
  %7658 = load i64, i64* %PC
  %7659 = add i64 %7658, 5
  store i64 %7659, i64* %PC
  %7660 = bitcast i8* %7657 to double*
  %7661 = load double, double* %7660, align 1
  %7662 = inttoptr i64 %7656 to double*
  store double %7661, double* %7662
  %7663 = load i64, i64* %RBP
  %7664 = sub i64 %7663, 16
  %7665 = bitcast %union.vec128_t* %XMM0 to i8*
  %7666 = load i64, i64* %PC
  %7667 = add i64 %7666, 5
  store i64 %7667, i64* %PC
  %7668 = bitcast i8* %7665 to double*
  %7669 = load double, double* %7668, align 1
  %7670 = inttoptr i64 %7664 to double*
  store double %7669, double* %7670
  %7671 = load i64, i64* %RBP
  %7672 = sub i64 %7671, 32
  %7673 = bitcast %union.vec128_t* %XMM0 to i8*
  %7674 = load i64, i64* %PC
  %7675 = add i64 %7674, 5
  store i64 %7675, i64* %PC
  %7676 = bitcast i8* %7673 to double*
  %7677 = load double, double* %7676, align 1
  %7678 = inttoptr i64 %7672 to double*
  store double %7677, double* %7678
  %7679 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7680 = load i64, i64* %PC
  %7681 = add i64 %7680, 9
  store i64 %7681, i64* %PC
  %7682 = load double, double* bitcast (%one_type* @one to double*)
  %7683 = bitcast i8* %7679 to double*
  store double %7682, double* %7683, align 1, !tbaa !2452
  %7684 = getelementptr inbounds i8, i8* %7679, i64 8
  %7685 = bitcast i8* %7684 to double*
  store double 0.000000e+00, double* %7685, align 1, !tbaa !2452
  %7686 = load i64, i64* %RBP
  %7687 = sub i64 %7686, 40
  %7688 = bitcast %union.vec128_t* %XMM0 to i8*
  %7689 = load i64, i64* %PC
  %7690 = add i64 %7689, 5
  store i64 %7690, i64* %PC
  %7691 = bitcast i8* %7688 to double*
  %7692 = load double, double* %7691, align 1
  %7693 = inttoptr i64 %7687 to double*
  store double %7692, double* %7693
  %7694 = load i64, i64* %PC
  %7695 = add i64 %7694, 7893
  %7696 = load i64, i64* %PC
  %7697 = add i64 %7696, 5
  %7698 = load i64, i64* %PC
  %7699 = add i64 %7698, 5
  store i64 %7699, i64* %PC
  %7700 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7701 = load i64, i64* %7700, align 8, !tbaa !2428
  %7702 = add i64 %7701, -8
  %7703 = inttoptr i64 %7702 to i64*
  store i64 %7697, i64* %7703
  store i64 %7702, i64* %7700, align 8, !tbaa !2428
  %7704 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7695, i64* %7704, align 8, !tbaa !2428
  %7705 = load i64, i64* %PC
  %7706 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %7705, %struct.Memory* %14796)
  %7707 = load i64, i64* %RBP
  %7708 = sub i64 %7707, 72
  %7709 = load i64, i64* %PC
  %7710 = add i64 %7709, 8
  store i64 %7710, i64* %PC
  %7711 = inttoptr i64 %7708 to i64*
  store i64 1, i64* %7711
  %7712 = load i64, i64* %RBP
  %7713 = sub i64 %7712, 116
  %7714 = load i32, i32* %EAX
  %7715 = zext i32 %7714 to i64
  %7716 = load i64, i64* %PC
  %7717 = add i64 %7716, 3
  store i64 %7717, i64* %PC
  %7718 = inttoptr i64 %7713 to i32*
  store i32 %7714, i32* %7718
  br label %block_40071b

block_400f3f:                                     ; preds = %block_400e74
  %7719 = load i64, i64* %PC
  %7720 = add i64 %7719, 10
  store i64 %7720, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %7721 = load i64, i64* %PC
  %7722 = add i64 %7721, 5783
  %7723 = load i64, i64* %PC
  %7724 = add i64 %7723, 5
  %7725 = load i64, i64* %PC
  %7726 = add i64 %7725, 5
  store i64 %7726, i64* %PC
  %7727 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7728 = load i64, i64* %7727, align 8, !tbaa !2428
  %7729 = add i64 %7728, -8
  %7730 = inttoptr i64 %7729 to i64*
  store i64 %7724, i64* %7730
  store i64 %7729, i64* %7727, align 8, !tbaa !2428
  %7731 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7722, i64* %7731, align 8, !tbaa !2428
  %7732 = load i64, i64* %PC
  %7733 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %7732, %struct.Memory* %MEMORY.1)
  %7734 = load i64, i64* %PC
  %7735 = add i64 %7734, 10
  store i64 %7735, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 462), i64* %RDI, align 8, !tbaa !2428
  %7736 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7737 = load i64, i64* %PC
  %7738 = add i64 %7737, 8
  store i64 %7738, i64* %PC
  %7739 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 72) to double*)
  %7740 = bitcast i8* %7736 to double*
  store double %7739, double* %7740, align 1, !tbaa !2452
  %7741 = getelementptr inbounds i8, i8* %7736, i64 8
  %7742 = bitcast i8* %7741 to double*
  store double 0.000000e+00, double* %7742, align 1, !tbaa !2452
  %7743 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7744 = load i64, i64* %PC
  %7745 = add i64 %7744, 8
  store i64 %7745, i64* %PC
  %7746 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 112) to double*)
  %7747 = bitcast i8* %7743 to double*
  store double %7746, double* %7747, align 1, !tbaa !2452
  %7748 = getelementptr inbounds i8, i8* %7743, i64 8
  %7749 = bitcast i8* %7748 to double*
  store double 0.000000e+00, double* %7749, align 1, !tbaa !2452
  %7750 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7751 = load i64, i64* %PC
  %7752 = add i64 %7751, 8
  store i64 %7752, i64* %PC
  %7753 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 120) to double*)
  %7754 = bitcast i8* %7750 to double*
  store double %7753, double* %7754, align 1, !tbaa !2452
  %7755 = getelementptr inbounds i8, i8* %7750, i64 8
  %7756 = bitcast i8* %7755 to double*
  store double 0.000000e+00, double* %7756, align 1, !tbaa !2452
  %7757 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7758 = load i64, i64* %PC
  %7759 = add i64 %7758, 9
  store i64 %7759, i64* %PC
  %7760 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %7761 = bitcast i8* %7757 to double*
  store double %7760, double* %7761, align 1, !tbaa !2452
  %7762 = getelementptr inbounds i8, i8* %7757, i64 8
  %7763 = bitcast i8* %7762 to double*
  store double 0.000000e+00, double* %7763, align 1, !tbaa !2452
  %7764 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7765 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7766 = load i64, i64* %PC
  %7767 = add i64 %7766, 9
  store i64 %7767, i64* %PC
  %7768 = bitcast i8* %7765 to double*
  %7769 = load double, double* %7768, align 1
  %7770 = getelementptr inbounds i8, i8* %7765, i64 8
  %7771 = bitcast i8* %7770 to i64*
  %7772 = load i64, i64* %7771, align 1
  %7773 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %7774 = fmul double %7769, %7773
  %7775 = bitcast i8* %7764 to double*
  store double %7774, double* %7775, align 1, !tbaa !2452
  %7776 = getelementptr inbounds i8, i8* %7764, i64 8
  %7777 = bitcast i8* %7776 to i64*
  store i64 %7772, i64* %7777, align 1, !tbaa !2452
  %7778 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7779 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7780 = load i64, i64* %PC
  %7781 = add i64 %7780, 9
  store i64 %7781, i64* %PC
  %7782 = bitcast i8* %7779 to double*
  %7783 = load double, double* %7782, align 1
  %7784 = getelementptr inbounds i8, i8* %7779, i64 8
  %7785 = bitcast i8* %7784 to i64*
  %7786 = load i64, i64* %7785, align 1
  %7787 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %7788 = fsub double %7783, %7787
  %7789 = bitcast i8* %7778 to double*
  store double %7788, double* %7789, align 1, !tbaa !2452
  %7790 = getelementptr inbounds i8, i8* %7778, i64 8
  %7791 = bitcast i8* %7790 to i64*
  store i64 %7786, i64* %7791, align 1, !tbaa !2452
  %7792 = bitcast %union.vec128_t* %XMM3 to i8*
  %7793 = load i64, i64* %PC
  %7794 = add i64 %7793, 9
  store i64 %7794, i64* %PC
  %7795 = bitcast i8* %7792 to double*
  %7796 = load double, double* %7795, align 1
  store double %7796, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %7797 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7798 = load i64, i64* %PC
  %7799 = add i64 %7798, 9
  store i64 %7799, i64* %PC
  %7800 = load double, double* bitcast (%piref_type* @piref to double*)
  %7801 = bitcast i8* %7797 to double*
  store double %7800, double* %7801, align 1, !tbaa !2452
  %7802 = getelementptr inbounds i8, i8* %7797, i64 8
  %7803 = bitcast i8* %7802 to double*
  store double 0.000000e+00, double* %7803, align 1, !tbaa !2452
  %7804 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7805 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7806 = load i64, i64* %PC
  %7807 = add i64 %7806, 9
  store i64 %7807, i64* %PC
  %7808 = bitcast i8* %7805 to double*
  %7809 = load double, double* %7808, align 1
  %7810 = getelementptr inbounds i8, i8* %7805, i64 8
  %7811 = bitcast i8* %7810 to i64*
  %7812 = load i64, i64* %7811, align 1
  %7813 = load double, double* bitcast (%three_type* @three to double*)
  %7814 = fdiv double %7809, %7813
  %7815 = bitcast i8* %7804 to double*
  store double %7814, double* %7815, align 1, !tbaa !2452
  %7816 = getelementptr inbounds i8, i8* %7804, i64 8
  %7817 = bitcast i8* %7816 to i64*
  store i64 %7812, i64* %7817, align 1, !tbaa !2452
  %7818 = load i64, i64* %RBP
  %7819 = sub i64 %7818, 24
  %7820 = bitcast %union.vec128_t* %XMM3 to i8*
  %7821 = load i64, i64* %PC
  %7822 = add i64 %7821, 5
  store i64 %7822, i64* %PC
  %7823 = bitcast i8* %7820 to double*
  %7824 = load double, double* %7823, align 1
  %7825 = inttoptr i64 %7819 to double*
  store double %7824, double* %7825
  %7826 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7827 = load i64, i64* %RBP
  %7828 = sub i64 %7827, 24
  %7829 = load i64, i64* %PC
  %7830 = add i64 %7829, 5
  store i64 %7830, i64* %PC
  %7831 = inttoptr i64 %7828 to double*
  %7832 = load double, double* %7831
  %7833 = bitcast i8* %7826 to double*
  store double %7832, double* %7833, align 1, !tbaa !2452
  %7834 = getelementptr inbounds i8, i8* %7826, i64 8
  %7835 = bitcast i8* %7834 to double*
  store double 0.000000e+00, double* %7835, align 1, !tbaa !2452
  %7836 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7837 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7838 = load i64, i64* %RBP
  %7839 = sub i64 %7838, 24
  %7840 = load i64, i64* %PC
  %7841 = add i64 %7840, 5
  store i64 %7841, i64* %PC
  %7842 = bitcast i8* %7837 to double*
  %7843 = load double, double* %7842, align 1
  %7844 = getelementptr inbounds i8, i8* %7837, i64 8
  %7845 = bitcast i8* %7844 to i64*
  %7846 = load i64, i64* %7845, align 1
  %7847 = inttoptr i64 %7839 to double*
  %7848 = load double, double* %7847
  %7849 = fmul double %7843, %7848
  %7850 = bitcast i8* %7836 to double*
  store double %7849, double* %7850, align 1, !tbaa !2452
  %7851 = getelementptr inbounds i8, i8* %7836, i64 8
  %7852 = bitcast i8* %7851 to i64*
  store i64 %7846, i64* %7852, align 1, !tbaa !2452
  %7853 = load i64, i64* %RBP
  %7854 = sub i64 %7853, 40
  %7855 = bitcast %union.vec128_t* %XMM3 to i8*
  %7856 = load i64, i64* %PC
  %7857 = add i64 %7856, 5
  store i64 %7857, i64* %PC
  %7858 = bitcast i8* %7855 to double*
  %7859 = load double, double* %7858, align 1
  %7860 = inttoptr i64 %7854 to double*
  store double %7859, double* %7860
  %7861 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7862 = load i64, i64* %RBP
  %7863 = sub i64 %7862, 24
  %7864 = load i64, i64* %PC
  %7865 = add i64 %7864, 5
  store i64 %7865, i64* %PC
  %7866 = inttoptr i64 %7863 to double*
  %7867 = load double, double* %7866
  %7868 = bitcast i8* %7861 to double*
  store double %7867, double* %7868, align 1, !tbaa !2452
  %7869 = getelementptr inbounds i8, i8* %7861, i64 8
  %7870 = bitcast i8* %7869 to double*
  store double 0.000000e+00, double* %7870, align 1, !tbaa !2452
  %7871 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7872 = load i64, i64* %PC
  %7873 = add i64 %7872, 9
  store i64 %7873, i64* %PC
  %7874 = load double, double* bitcast (%A6_type* @A6 to double*)
  %7875 = bitcast i8* %7871 to double*
  store double %7874, double* %7875, align 1, !tbaa !2452
  %7876 = getelementptr inbounds i8, i8* %7871, i64 8
  %7877 = bitcast i8* %7876 to double*
  store double 0.000000e+00, double* %7877, align 1, !tbaa !2452
  %7878 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7879 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7880 = load i64, i64* %RBP
  %7881 = sub i64 %7880, 40
  %7882 = load i64, i64* %PC
  %7883 = add i64 %7882, 5
  store i64 %7883, i64* %PC
  %7884 = bitcast i8* %7879 to double*
  %7885 = load double, double* %7884, align 1
  %7886 = getelementptr inbounds i8, i8* %7879, i64 8
  %7887 = bitcast i8* %7886 to i64*
  %7888 = load i64, i64* %7887, align 1
  %7889 = inttoptr i64 %7881 to double*
  %7890 = load double, double* %7889
  %7891 = fmul double %7885, %7890
  %7892 = bitcast i8* %7878 to double*
  store double %7891, double* %7892, align 1, !tbaa !2452
  %7893 = getelementptr inbounds i8, i8* %7878, i64 8
  %7894 = bitcast i8* %7893 to i64*
  store i64 %7888, i64* %7894, align 1, !tbaa !2452
  %7895 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7896 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7897 = load i64, i64* %PC
  %7898 = add i64 %7897, 9
  store i64 %7898, i64* %PC
  %7899 = bitcast i8* %7896 to double*
  %7900 = load double, double* %7899, align 1
  %7901 = getelementptr inbounds i8, i8* %7896, i64 8
  %7902 = bitcast i8* %7901 to i64*
  %7903 = load i64, i64* %7902, align 1
  %7904 = load double, double* bitcast (%A5_type* @A5 to double*)
  %7905 = fsub double %7900, %7904
  %7906 = bitcast i8* %7895 to double*
  store double %7905, double* %7906, align 1, !tbaa !2452
  %7907 = getelementptr inbounds i8, i8* %7895, i64 8
  %7908 = bitcast i8* %7907 to i64*
  store i64 %7903, i64* %7908, align 1, !tbaa !2452
  %7909 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7910 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7911 = load i64, i64* %RBP
  %7912 = sub i64 %7911, 40
  %7913 = load i64, i64* %PC
  %7914 = add i64 %7913, 5
  store i64 %7914, i64* %PC
  %7915 = bitcast i8* %7910 to double*
  %7916 = load double, double* %7915, align 1
  %7917 = getelementptr inbounds i8, i8* %7910, i64 8
  %7918 = bitcast i8* %7917 to i64*
  %7919 = load i64, i64* %7918, align 1
  %7920 = inttoptr i64 %7912 to double*
  %7921 = load double, double* %7920
  %7922 = fmul double %7916, %7921
  %7923 = bitcast i8* %7909 to double*
  store double %7922, double* %7923, align 1, !tbaa !2452
  %7924 = getelementptr inbounds i8, i8* %7909, i64 8
  %7925 = bitcast i8* %7924 to i64*
  store i64 %7919, i64* %7925, align 1, !tbaa !2452
  %7926 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7927 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7928 = load i64, i64* %PC
  %7929 = add i64 %7928, 9
  store i64 %7929, i64* %PC
  %7930 = bitcast i8* %7927 to double*
  %7931 = load double, double* %7930, align 1
  %7932 = getelementptr inbounds i8, i8* %7927, i64 8
  %7933 = bitcast i8* %7932 to i64*
  %7934 = load i64, i64* %7933, align 1
  %7935 = load double, double* bitcast (%A4_type* @A4 to double*)
  %7936 = fadd double %7931, %7935
  %7937 = bitcast i8* %7926 to double*
  store double %7936, double* %7937, align 1, !tbaa !2452
  %7938 = getelementptr inbounds i8, i8* %7926, i64 8
  %7939 = bitcast i8* %7938 to i64*
  store i64 %7934, i64* %7939, align 1, !tbaa !2452
  %7940 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7941 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7942 = load i64, i64* %RBP
  %7943 = sub i64 %7942, 40
  %7944 = load i64, i64* %PC
  %7945 = add i64 %7944, 5
  store i64 %7945, i64* %PC
  %7946 = bitcast i8* %7941 to double*
  %7947 = load double, double* %7946, align 1
  %7948 = getelementptr inbounds i8, i8* %7941, i64 8
  %7949 = bitcast i8* %7948 to i64*
  %7950 = load i64, i64* %7949, align 1
  %7951 = inttoptr i64 %7943 to double*
  %7952 = load double, double* %7951
  %7953 = fmul double %7947, %7952
  %7954 = bitcast i8* %7940 to double*
  store double %7953, double* %7954, align 1, !tbaa !2452
  %7955 = getelementptr inbounds i8, i8* %7940, i64 8
  %7956 = bitcast i8* %7955 to i64*
  store i64 %7950, i64* %7956, align 1, !tbaa !2452
  %7957 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7958 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7959 = load i64, i64* %PC
  %7960 = add i64 %7959, 9
  store i64 %7960, i64* %PC
  %7961 = bitcast i8* %7958 to double*
  %7962 = load double, double* %7961, align 1
  %7963 = getelementptr inbounds i8, i8* %7958, i64 8
  %7964 = bitcast i8* %7963 to i64*
  %7965 = load i64, i64* %7964, align 1
  %7966 = load double, double* bitcast (%A3_type* @A3 to double*)
  %7967 = fsub double %7962, %7966
  %7968 = bitcast i8* %7957 to double*
  store double %7967, double* %7968, align 1, !tbaa !2452
  %7969 = getelementptr inbounds i8, i8* %7957, i64 8
  %7970 = bitcast i8* %7969 to i64*
  store i64 %7965, i64* %7970, align 1, !tbaa !2452
  %7971 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7972 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7973 = load i64, i64* %RBP
  %7974 = sub i64 %7973, 40
  %7975 = load i64, i64* %PC
  %7976 = add i64 %7975, 5
  store i64 %7976, i64* %PC
  %7977 = bitcast i8* %7972 to double*
  %7978 = load double, double* %7977, align 1
  %7979 = getelementptr inbounds i8, i8* %7972, i64 8
  %7980 = bitcast i8* %7979 to i64*
  %7981 = load i64, i64* %7980, align 1
  %7982 = inttoptr i64 %7974 to double*
  %7983 = load double, double* %7982
  %7984 = fmul double %7978, %7983
  %7985 = bitcast i8* %7971 to double*
  store double %7984, double* %7985, align 1, !tbaa !2452
  %7986 = getelementptr inbounds i8, i8* %7971, i64 8
  %7987 = bitcast i8* %7986 to i64*
  store i64 %7981, i64* %7987, align 1, !tbaa !2452
  %7988 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7989 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7990 = load i64, i64* %PC
  %7991 = add i64 %7990, 9
  store i64 %7991, i64* %PC
  %7992 = bitcast i8* %7989 to double*
  %7993 = load double, double* %7992, align 1
  %7994 = getelementptr inbounds i8, i8* %7989, i64 8
  %7995 = bitcast i8* %7994 to i64*
  %7996 = load i64, i64* %7995, align 1
  %7997 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %7998 = fadd double %7993, %7997
  %7999 = bitcast i8* %7988 to double*
  store double %7998, double* %7999, align 1, !tbaa !2452
  %8000 = getelementptr inbounds i8, i8* %7988, i64 8
  %8001 = bitcast i8* %8000 to i64*
  store i64 %7996, i64* %8001, align 1, !tbaa !2452
  %8002 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8003 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8004 = load i64, i64* %RBP
  %8005 = sub i64 %8004, 40
  %8006 = load i64, i64* %PC
  %8007 = add i64 %8006, 5
  store i64 %8007, i64* %PC
  %8008 = bitcast i8* %8003 to double*
  %8009 = load double, double* %8008, align 1
  %8010 = getelementptr inbounds i8, i8* %8003, i64 8
  %8011 = bitcast i8* %8010 to i64*
  %8012 = load i64, i64* %8011, align 1
  %8013 = inttoptr i64 %8005 to double*
  %8014 = load double, double* %8013
  %8015 = fmul double %8009, %8014
  %8016 = bitcast i8* %8002 to double*
  store double %8015, double* %8016, align 1, !tbaa !2452
  %8017 = getelementptr inbounds i8, i8* %8002, i64 8
  %8018 = bitcast i8* %8017 to i64*
  store i64 %8012, i64* %8018, align 1, !tbaa !2452
  %8019 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8020 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8021 = load i64, i64* %PC
  %8022 = add i64 %8021, 9
  store i64 %8022, i64* %PC
  %8023 = bitcast i8* %8020 to double*
  %8024 = load double, double* %8023, align 1
  %8025 = getelementptr inbounds i8, i8* %8020, i64 8
  %8026 = bitcast i8* %8025 to i64*
  %8027 = load i64, i64* %8026, align 1
  %8028 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %8029 = fadd double %8024, %8028
  %8030 = bitcast i8* %8019 to double*
  store double %8029, double* %8030, align 1, !tbaa !2452
  %8031 = getelementptr inbounds i8, i8* %8019, i64 8
  %8032 = bitcast i8* %8031 to i64*
  store i64 %8027, i64* %8032, align 1, !tbaa !2452
  %8033 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8034 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8035 = load i64, i64* %RBP
  %8036 = sub i64 %8035, 40
  %8037 = load i64, i64* %PC
  %8038 = add i64 %8037, 5
  store i64 %8038, i64* %PC
  %8039 = bitcast i8* %8034 to double*
  %8040 = load double, double* %8039, align 1
  %8041 = getelementptr inbounds i8, i8* %8034, i64 8
  %8042 = bitcast i8* %8041 to i64*
  %8043 = load i64, i64* %8042, align 1
  %8044 = inttoptr i64 %8036 to double*
  %8045 = load double, double* %8044
  %8046 = fmul double %8040, %8045
  %8047 = bitcast i8* %8033 to double*
  store double %8046, double* %8047, align 1, !tbaa !2452
  %8048 = getelementptr inbounds i8, i8* %8033, i64 8
  %8049 = bitcast i8* %8048 to i64*
  store i64 %8043, i64* %8049, align 1, !tbaa !2452
  %8050 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8051 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8052 = load i64, i64* %PC
  %8053 = add i64 %8052, 9
  store i64 %8053, i64* %PC
  %8054 = bitcast i8* %8051 to double*
  %8055 = load double, double* %8054, align 1
  %8056 = getelementptr inbounds i8, i8* %8051, i64 8
  %8057 = bitcast i8* %8056 to i64*
  %8058 = load i64, i64* %8057, align 1
  %8059 = load double, double* bitcast (%one_type* @one to double*)
  %8060 = fadd double %8055, %8059
  %8061 = bitcast i8* %8050 to double*
  store double %8060, double* %8061, align 1, !tbaa !2452
  %8062 = getelementptr inbounds i8, i8* %8050, i64 8
  %8063 = bitcast i8* %8062 to i64*
  store i64 %8058, i64* %8063, align 1, !tbaa !2452
  %8064 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8065 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8066 = bitcast %union.vec128_t* %XMM4 to i8*
  %8067 = load i64, i64* %PC
  %8068 = add i64 %8067, 4
  store i64 %8068, i64* %PC
  %8069 = bitcast i8* %8065 to double*
  %8070 = load double, double* %8069, align 1
  %8071 = getelementptr inbounds i8, i8* %8065, i64 8
  %8072 = bitcast i8* %8071 to i64*
  %8073 = load i64, i64* %8072, align 1
  %8074 = bitcast i8* %8066 to double*
  %8075 = load double, double* %8074, align 1
  %8076 = fmul double %8070, %8075
  %8077 = bitcast i8* %8064 to double*
  store double %8076, double* %8077, align 1, !tbaa !2452
  %8078 = getelementptr inbounds i8, i8* %8064, i64 8
  %8079 = bitcast i8* %8078 to i64*
  store i64 %8073, i64* %8079, align 1, !tbaa !2452
  %8080 = bitcast %union.vec128_t* %XMM3 to i8*
  %8081 = load i64, i64* %PC
  %8082 = add i64 %8081, 9
  store i64 %8082, i64* %PC
  %8083 = bitcast i8* %8080 to double*
  %8084 = load double, double* %8083, align 1
  store double %8084, double* bitcast (%sa_type* @sa to double*)
  %8085 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8086 = load i64, i64* %PC
  %8087 = add i64 %8086, 9
  store i64 %8087, i64* %PC
  %8088 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %8089 = bitcast i8* %8085 to double*
  store double %8088, double* %8089, align 1, !tbaa !2452
  %8090 = getelementptr inbounds i8, i8* %8085, i64 8
  %8091 = bitcast i8* %8090 to double*
  store double 0.000000e+00, double* %8091, align 1, !tbaa !2452
  %8092 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8093 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8094 = bitcast %union.vec128_t* %XMM2 to i8*
  %8095 = load i64, i64* %PC
  %8096 = add i64 %8095, 4
  store i64 %8096, i64* %PC
  %8097 = bitcast i8* %8093 to double*
  %8098 = load double, double* %8097, align 1
  %8099 = getelementptr inbounds i8, i8* %8093, i64 8
  %8100 = bitcast i8* %8099 to i64*
  %8101 = load i64, i64* %8100, align 1
  %8102 = bitcast i8* %8094 to double*
  %8103 = load double, double* %8102, align 1
  %8104 = fdiv double %8098, %8103
  %8105 = bitcast i8* %8092 to double*
  store double %8104, double* %8105, align 1, !tbaa !2452
  %8106 = getelementptr inbounds i8, i8* %8092, i64 8
  %8107 = bitcast i8* %8106 to i64*
  store i64 %8101, i64* %8107, align 1, !tbaa !2452
  %8108 = bitcast %union.vec128_t* %XMM3 to i8*
  %8109 = load i64, i64* %PC
  %8110 = add i64 %8109, 9
  store i64 %8110, i64* %PC
  %8111 = bitcast i8* %8108 to double*
  %8112 = load double, double* %8111, align 1
  store double %8112, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 80) to double*)
  %8113 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8114 = load i64, i64* %RBP
  %8115 = sub i64 %8114, 48
  %8116 = load i64, i64* %PC
  %8117 = add i64 %8116, 5
  store i64 %8117, i64* %PC
  %8118 = inttoptr i64 %8115 to double*
  %8119 = load double, double* %8118
  %8120 = bitcast i8* %8113 to double*
  store double %8119, double* %8120, align 1, !tbaa !2452
  %8121 = getelementptr inbounds i8, i8* %8113, i64 8
  %8122 = bitcast i8* %8121 to double*
  store double 0.000000e+00, double* %8122, align 1, !tbaa !2452
  %8123 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8124 = load i64, i64* %PC
  %8125 = add i64 %8124, 9
  store i64 %8125, i64* %PC
  %8126 = load double, double* bitcast (%sa_type* @sa to double*)
  %8127 = bitcast i8* %8123 to double*
  store double %8126, double* %8127, align 1, !tbaa !2452
  %8128 = getelementptr inbounds i8, i8* %8123, i64 8
  %8129 = bitcast i8* %8128 to double*
  store double 0.000000e+00, double* %8129, align 1, !tbaa !2452
  %8130 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8131 = load i64, i64* %PC
  %8132 = add i64 %8131, 9
  store i64 %8132, i64* %PC
  %8133 = load double, double* bitcast (%two_type* @two to double*)
  %8134 = bitcast i8* %8130 to double*
  store double %8133, double* %8134, align 1, !tbaa !2452
  %8135 = getelementptr inbounds i8, i8* %8130, i64 8
  %8136 = bitcast i8* %8135 to double*
  store double 0.000000e+00, double* %8136, align 1, !tbaa !2452
  %8137 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8138 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8139 = load i64, i64* %RBP
  %8140 = sub i64 %8139, 16
  %8141 = load i64, i64* %PC
  %8142 = add i64 %8141, 5
  store i64 %8142, i64* %PC
  %8143 = bitcast i8* %8138 to double*
  %8144 = load double, double* %8143, align 1
  %8145 = getelementptr inbounds i8, i8* %8138, i64 8
  %8146 = bitcast i8* %8145 to i64*
  %8147 = load i64, i64* %8146, align 1
  %8148 = inttoptr i64 %8140 to double*
  %8149 = load double, double* %8148
  %8150 = fmul double %8144, %8149
  %8151 = bitcast i8* %8137 to double*
  store double %8150, double* %8151, align 1, !tbaa !2452
  %8152 = getelementptr inbounds i8, i8* %8137, i64 8
  %8153 = bitcast i8* %8152 to i64*
  store i64 %8147, i64* %8153, align 1, !tbaa !2452
  %8154 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8155 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8156 = bitcast %union.vec128_t* %XMM4 to i8*
  %8157 = load i64, i64* %PC
  %8158 = add i64 %8157, 4
  store i64 %8158, i64* %PC
  %8159 = bitcast i8* %8155 to double*
  %8160 = load double, double* %8159, align 1
  %8161 = getelementptr inbounds i8, i8* %8155, i64 8
  %8162 = bitcast i8* %8161 to i64*
  %8163 = load i64, i64* %8162, align 1
  %8164 = bitcast i8* %8156 to double*
  %8165 = load double, double* %8164, align 1
  %8166 = fadd double %8160, %8165
  %8167 = bitcast i8* %8154 to double*
  store double %8166, double* %8167, align 1, !tbaa !2452
  %8168 = getelementptr inbounds i8, i8* %8154, i64 8
  %8169 = bitcast i8* %8168 to i64*
  store i64 %8163, i64* %8169, align 1, !tbaa !2452
  %8170 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8171 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8172 = bitcast %union.vec128_t* %XMM3 to i8*
  %8173 = load i64, i64* %PC
  %8174 = add i64 %8173, 4
  store i64 %8174, i64* %PC
  %8175 = bitcast i8* %8171 to double*
  %8176 = load double, double* %8175, align 1
  %8177 = getelementptr inbounds i8, i8* %8171, i64 8
  %8178 = bitcast i8* %8177 to i64*
  %8179 = load i64, i64* %8178, align 1
  %8180 = bitcast i8* %8172 to double*
  %8181 = load double, double* %8180, align 1
  %8182 = fmul double %8176, %8181
  %8183 = bitcast i8* %8170 to double*
  store double %8182, double* %8183, align 1, !tbaa !2452
  %8184 = getelementptr inbounds i8, i8* %8170, i64 8
  %8185 = bitcast i8* %8184 to i64*
  store i64 %8179, i64* %8185, align 1, !tbaa !2452
  %8186 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8187 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8188 = load i64, i64* %PC
  %8189 = add i64 %8188, 9
  store i64 %8189, i64* %PC
  %8190 = bitcast i8* %8187 to double*
  %8191 = load double, double* %8190, align 1
  %8192 = getelementptr inbounds i8, i8* %8187, i64 8
  %8193 = bitcast i8* %8192 to i64*
  %8194 = load i64, i64* %8193, align 1
  %8195 = load double, double* bitcast (%two_type* @two to double*)
  %8196 = fdiv double %8191, %8195
  %8197 = bitcast i8* %8186 to double*
  store double %8196, double* %8197, align 1, !tbaa !2452
  %8198 = getelementptr inbounds i8, i8* %8186, i64 8
  %8199 = bitcast i8* %8198 to i64*
  store i64 %8194, i64* %8199, align 1, !tbaa !2452
  %8200 = bitcast %union.vec128_t* %XMM2 to i8*
  %8201 = load i64, i64* %PC
  %8202 = add i64 %8201, 9
  store i64 %8202, i64* %PC
  %8203 = bitcast i8* %8200 to double*
  %8204 = load double, double* %8203, align 1
  store double %8204, double* bitcast (%sa_type* @sa to double*)
  %8205 = bitcast %union.vec128_t* %XMM1 to i8*
  %8206 = load i64, i64* %PC
  %8207 = add i64 %8206, 9
  store i64 %8207, i64* %PC
  %8208 = bitcast i8* %8205 to double*
  %8209 = load double, double* %8208, align 1
  store double %8209, double* bitcast (%sb_type* @sb to double*)
  %8210 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8211 = load i64, i64* %PC
  %8212 = add i64 %8211, 9
  store i64 %8212, i64* %PC
  %8213 = load double, double* bitcast (%sa_type* @sa to double*)
  %8214 = bitcast i8* %8210 to double*
  store double %8213, double* %8214, align 1, !tbaa !2452
  %8215 = getelementptr inbounds i8, i8* %8210, i64 8
  %8216 = bitcast i8* %8215 to double*
  store double 0.000000e+00, double* %8216, align 1, !tbaa !2452
  %8217 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8218 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8219 = load i64, i64* %PC
  %8220 = add i64 %8219, 9
  store i64 %8220, i64* %PC
  %8221 = bitcast i8* %8218 to double*
  %8222 = load double, double* %8221, align 1
  %8223 = getelementptr inbounds i8, i8* %8218, i64 8
  %8224 = bitcast i8* %8223 to i64*
  %8225 = load i64, i64* %8224, align 1
  %8226 = load double, double* bitcast (%sb_type* @sb to double*)
  %8227 = fsub double %8222, %8226
  %8228 = bitcast i8* %8217 to double*
  store double %8227, double* %8228, align 1, !tbaa !2452
  %8229 = getelementptr inbounds i8, i8* %8217, i64 8
  %8230 = bitcast i8* %8229 to i64*
  store i64 %8225, i64* %8230, align 1, !tbaa !2452
  %8231 = bitcast %union.vec128_t* %XMM1 to i8*
  %8232 = load i64, i64* %PC
  %8233 = add i64 %8232, 9
  store i64 %8233, i64* %PC
  %8234 = bitcast i8* %8231 to double*
  %8235 = load double, double* %8234, align 1
  store double %8235, double* bitcast (%sc_type* @sc to double*)
  %8236 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8237 = load i64, i64* %PC
  %8238 = add i64 %8237, 9
  store i64 %8238, i64* %PC
  %8239 = load double, double* bitcast (%one_type* @one to double*)
  %8240 = bitcast i8* %8236 to double*
  store double %8239, double* %8240, align 1, !tbaa !2452
  %8241 = getelementptr inbounds i8, i8* %8236, i64 8
  %8242 = bitcast i8* %8241 to double*
  store double 0.000000e+00, double* %8242, align 1, !tbaa !2452
  %8243 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8244 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8245 = load i64, i64* %PC
  %8246 = add i64 %8245, 9
  store i64 %8246, i64* %PC
  %8247 = bitcast i8* %8244 to double*
  %8248 = load double, double* %8247, align 1
  %8249 = getelementptr inbounds i8, i8* %8244, i64 8
  %8250 = bitcast i8* %8249 to i64*
  %8251 = load i64, i64* %8250, align 1
  %8252 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 80) to double*)
  %8253 = fdiv double %8248, %8252
  %8254 = bitcast i8* %8243 to double*
  store double %8253, double* %8254, align 1, !tbaa !2452
  %8255 = getelementptr inbounds i8, i8* %8243, i64 8
  %8256 = bitcast i8* %8255 to i64*
  store i64 %8251, i64* %8256, align 1, !tbaa !2452
  %8257 = bitcast %union.vec128_t* %XMM1 to i8*
  %8258 = load i64, i64* %PC
  %8259 = add i64 %8258, 9
  store i64 %8259, i64* %PC
  %8260 = bitcast i8* %8257 to double*
  %8261 = load double, double* %8260, align 1
  store double %8261, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 88) to double*)
  %8262 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8263 = bitcast %union.vec128_t* %XMM0 to i8*
  %8264 = load i64, i64* %PC
  %8265 = add i64 %8264, 3
  store i64 %8265, i64* %PC
  %8266 = bitcast i8* %8263 to <2 x i32>*
  %8267 = load <2 x i32>, <2 x i32>* %8266, align 1
  %8268 = getelementptr inbounds i8, i8* %8263, i64 8
  %8269 = bitcast i8* %8268 to <2 x i32>*
  %8270 = load <2 x i32>, <2 x i32>* %8269, align 1
  %8271 = extractelement <2 x i32> %8267, i32 0
  %8272 = bitcast i8* %8262 to i32*
  store i32 %8271, i32* %8272, align 1, !tbaa !2455
  %8273 = extractelement <2 x i32> %8267, i32 1
  %8274 = getelementptr inbounds i8, i8* %8262, i64 4
  %8275 = bitcast i8* %8274 to i32*
  store i32 %8273, i32* %8275, align 1, !tbaa !2455
  %8276 = extractelement <2 x i32> %8270, i32 0
  %8277 = getelementptr inbounds i8, i8* %8262, i64 8
  %8278 = bitcast i8* %8277 to i32*
  store i32 %8276, i32* %8278, align 1, !tbaa !2455
  %8279 = extractelement <2 x i32> %8270, i32 1
  %8280 = getelementptr inbounds i8, i8* %8262, i64 12
  %8281 = bitcast i8* %8280 to i32*
  store i32 %8279, i32* %8281, align 1, !tbaa !2455
  %8282 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8283 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8284 = load i64, i64* %PC
  %8285 = add i64 %8284, 9
  store i64 %8285, i64* %PC
  %8286 = bitcast i8* %8283 to double*
  %8287 = load double, double* %8286, align 1
  %8288 = getelementptr inbounds i8, i8* %8283, i64 8
  %8289 = bitcast i8* %8288 to i64*
  %8290 = load i64, i64* %8289, align 1
  %8291 = load double, double* bitcast (%sc_type* @sc to double*)
  %8292 = fmul double %8287, %8291
  %8293 = bitcast i8* %8282 to double*
  store double %8292, double* %8293, align 1, !tbaa !2452
  %8294 = getelementptr inbounds i8, i8* %8282, i64 8
  %8295 = bitcast i8* %8294 to i64*
  store i64 %8290, i64* %8295, align 1, !tbaa !2452
  %8296 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8297 = bitcast %union.vec128_t* %XMM0 to i8*
  %8298 = load i64, i64* %PC
  %8299 = add i64 %8298, 3
  store i64 %8299, i64* %PC
  %8300 = bitcast i8* %8297 to <2 x i32>*
  %8301 = load <2 x i32>, <2 x i32>* %8300, align 1
  %8302 = getelementptr inbounds i8, i8* %8297, i64 8
  %8303 = bitcast i8* %8302 to <2 x i32>*
  %8304 = load <2 x i32>, <2 x i32>* %8303, align 1
  %8305 = extractelement <2 x i32> %8301, i32 0
  %8306 = bitcast i8* %8296 to i32*
  store i32 %8305, i32* %8306, align 1, !tbaa !2455
  %8307 = extractelement <2 x i32> %8301, i32 1
  %8308 = getelementptr inbounds i8, i8* %8296, i64 4
  %8309 = bitcast i8* %8308 to i32*
  store i32 %8307, i32* %8309, align 1, !tbaa !2455
  %8310 = extractelement <2 x i32> %8304, i32 0
  %8311 = getelementptr inbounds i8, i8* %8296, i64 8
  %8312 = bitcast i8* %8311 to i32*
  store i32 %8310, i32* %8312, align 1, !tbaa !2455
  %8313 = extractelement <2 x i32> %8304, i32 1
  %8314 = getelementptr inbounds i8, i8* %8296, i64 12
  %8315 = bitcast i8* %8314 to i32*
  store i32 %8313, i32* %8315, align 1, !tbaa !2455
  %8316 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8317 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8318 = load i64, i64* %PC
  %8319 = add i64 %8318, 9
  store i64 %8319, i64* %PC
  %8320 = bitcast i8* %8317 to double*
  %8321 = load double, double* %8320, align 1
  %8322 = getelementptr inbounds i8, i8* %8317, i64 8
  %8323 = bitcast i8* %8322 to i64*
  %8324 = load i64, i64* %8323, align 1
  %8325 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %8326 = fmul double %8321, %8325
  %8327 = bitcast i8* %8316 to double*
  store double %8326, double* %8327, align 1, !tbaa !2452
  %8328 = getelementptr inbounds i8, i8* %8316, i64 8
  %8329 = bitcast i8* %8328 to i64*
  store i64 %8324, i64* %8329, align 1, !tbaa !2452
  %8330 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8331 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8332 = load i64, i64* %PC
  %8333 = add i64 %8332, 9
  store i64 %8333, i64* %PC
  %8334 = bitcast i8* %8331 to double*
  %8335 = load double, double* %8334, align 1
  %8336 = getelementptr inbounds i8, i8* %8331, i64 8
  %8337 = bitcast i8* %8336 to i64*
  %8338 = load i64, i64* %8337, align 1
  %8339 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 88) to double*)
  %8340 = fmul double %8335, %8339
  %8341 = bitcast i8* %8330 to double*
  store double %8340, double* %8341, align 1, !tbaa !2452
  %8342 = getelementptr inbounds i8, i8* %8330, i64 8
  %8343 = bitcast i8* %8342 to i64*
  store i64 %8338, i64* %8343, align 1, !tbaa !2452
  %8344 = load i64, i64* %RBP
  %8345 = sub i64 %8344, 184
  %8346 = bitcast %union.vec128_t* %XMM0 to i8*
  %8347 = load i64, i64* %PC
  %8348 = add i64 %8347, 8
  store i64 %8348, i64* %PC
  %8349 = bitcast i8* %8346 to double*
  %8350 = load double, double* %8349, align 1
  %8351 = inttoptr i64 %8345 to double*
  store double %8350, double* %8351
  %8352 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8353 = bitcast %union.vec128_t* %XMM1 to i8*
  %8354 = load i64, i64* %PC
  %8355 = add i64 %8354, 3
  store i64 %8355, i64* %PC
  %8356 = bitcast i8* %8353 to <2 x i32>*
  %8357 = load <2 x i32>, <2 x i32>* %8356, align 1
  %8358 = getelementptr inbounds i8, i8* %8353, i64 8
  %8359 = bitcast i8* %8358 to <2 x i32>*
  %8360 = load <2 x i32>, <2 x i32>* %8359, align 1
  %8361 = extractelement <2 x i32> %8357, i32 0
  %8362 = bitcast i8* %8352 to i32*
  store i32 %8361, i32* %8362, align 1, !tbaa !2455
  %8363 = extractelement <2 x i32> %8357, i32 1
  %8364 = getelementptr inbounds i8, i8* %8352, i64 4
  %8365 = bitcast i8* %8364 to i32*
  store i32 %8363, i32* %8365, align 1, !tbaa !2455
  %8366 = extractelement <2 x i32> %8360, i32 0
  %8367 = getelementptr inbounds i8, i8* %8352, i64 8
  %8368 = bitcast i8* %8367 to i32*
  store i32 %8366, i32* %8368, align 1, !tbaa !2455
  %8369 = extractelement <2 x i32> %8360, i32 1
  %8370 = getelementptr inbounds i8, i8* %8352, i64 12
  %8371 = bitcast i8* %8370 to i32*
  store i32 %8369, i32* %8371, align 1, !tbaa !2455
  %8372 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8373 = bitcast %union.vec128_t* %XMM2 to i8*
  %8374 = load i64, i64* %PC
  %8375 = add i64 %8374, 3
  store i64 %8375, i64* %PC
  %8376 = bitcast i8* %8373 to <2 x i32>*
  %8377 = load <2 x i32>, <2 x i32>* %8376, align 1
  %8378 = getelementptr inbounds i8, i8* %8373, i64 8
  %8379 = bitcast i8* %8378 to <2 x i32>*
  %8380 = load <2 x i32>, <2 x i32>* %8379, align 1
  %8381 = extractelement <2 x i32> %8377, i32 0
  %8382 = bitcast i8* %8372 to i32*
  store i32 %8381, i32* %8382, align 1, !tbaa !2455
  %8383 = extractelement <2 x i32> %8377, i32 1
  %8384 = getelementptr inbounds i8, i8* %8372, i64 4
  %8385 = bitcast i8* %8384 to i32*
  store i32 %8383, i32* %8385, align 1, !tbaa !2455
  %8386 = extractelement <2 x i32> %8380, i32 0
  %8387 = getelementptr inbounds i8, i8* %8372, i64 8
  %8388 = bitcast i8* %8387 to i32*
  store i32 %8386, i32* %8388, align 1, !tbaa !2455
  %8389 = extractelement <2 x i32> %8380, i32 1
  %8390 = getelementptr inbounds i8, i8* %8372, i64 12
  %8391 = bitcast i8* %8390 to i32*
  store i32 %8389, i32* %8391, align 1, !tbaa !2455
  %8392 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8393 = load i64, i64* %RBP
  %8394 = sub i64 %8393, 184
  %8395 = load i64, i64* %PC
  %8396 = add i64 %8395, 8
  store i64 %8396, i64* %PC
  %8397 = inttoptr i64 %8394 to double*
  %8398 = load double, double* %8397
  %8399 = bitcast i8* %8392 to double*
  store double %8398, double* %8399, align 1, !tbaa !2452
  %8400 = getelementptr inbounds i8, i8* %8392, i64 8
  %8401 = bitcast i8* %8400 to double*
  store double 0.000000e+00, double* %8401, align 1, !tbaa !2452
  %8402 = load i64, i64* %RBP
  %8403 = sub i64 %8402, 188
  %8404 = load i32, i32* %EAX
  %8405 = zext i32 %8404 to i64
  %8406 = load i64, i64* %PC
  %8407 = add i64 %8406, 6
  store i64 %8407, i64* %PC
  %8408 = inttoptr i64 %8403 to i32*
  store i32 %8404, i32* %8408
  %8409 = load i64, i64* %PC
  %8410 = add i64 %8409, 2
  store i64 %8410, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %8411 = load i64, i64* %PC
  %8412 = sub i64 %8411, 3235
  %8413 = load i64, i64* %PC
  %8414 = add i64 %8413, 5
  %8415 = load i64, i64* %PC
  %8416 = add i64 %8415, 5
  store i64 %8416, i64* %PC
  %8417 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8418 = load i64, i64* %8417, align 8, !tbaa !2428
  %8419 = add i64 %8418, -8
  %8420 = inttoptr i64 %8419 to i64*
  store i64 %8414, i64* %8420
  store i64 %8419, i64* %8417, align 8, !tbaa !2428
  %8421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8412, i64* %8421, align 8, !tbaa !2428
  %8422 = load i64, i64* %PC
  %8423 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %8422, %struct.Memory* %7733)
  %8424 = load i64, i64* %PC
  %8425 = add i64 %8424, 10
  store i64 %8425, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %8426 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8427 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8428 = bitcast %union.vec128_t* %XMM0 to i8*
  %8429 = load i64, i64* %PC
  %8430 = add i64 %8429, 3
  store i64 %8430, i64* %PC
  %8431 = bitcast i8* %8427 to i64*
  %8432 = load i64, i64* %8431, align 1
  %8433 = getelementptr inbounds i8, i8* %8427, i64 8
  %8434 = bitcast i8* %8433 to i64*
  %8435 = load i64, i64* %8434, align 1
  %8436 = bitcast i8* %8428 to i64*
  %8437 = load i64, i64* %8436, align 1
  %8438 = getelementptr inbounds i8, i8* %8428, i64 8
  %8439 = bitcast i8* %8438 to i64*
  %8440 = load i64, i64* %8439, align 1
  %8441 = xor i64 %8437, %8432
  %8442 = xor i64 %8440, %8435
  %8443 = trunc i64 %8441 to i32
  %8444 = lshr i64 %8441, 32
  %8445 = trunc i64 %8444 to i32
  %8446 = bitcast i8* %8426 to i32*
  store i32 %8443, i32* %8446, align 1, !tbaa !2454
  %8447 = getelementptr inbounds i8, i8* %8426, i64 4
  %8448 = bitcast i8* %8447 to i32*
  store i32 %8445, i32* %8448, align 1, !tbaa !2454
  %8449 = trunc i64 %8442 to i32
  %8450 = getelementptr inbounds i8, i8* %8426, i64 8
  %8451 = bitcast i8* %8450 to i32*
  store i32 %8449, i32* %8451, align 1, !tbaa !2454
  %8452 = lshr i64 %8442, 32
  %8453 = trunc i64 %8452 to i32
  %8454 = getelementptr inbounds i8, i8* %8426, i64 12
  %8455 = bitcast i8* %8454 to i32*
  store i32 %8453, i32* %8455, align 1, !tbaa !2454
  %8456 = load i64, i64* %PC
  %8457 = add i64 %8456, 10
  store i64 %8457, i64* %PC
  store i64 -9223372036854775808, i64* %RCX, align 8, !tbaa !2428
  %8458 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8459 = load i64, i64* %PC
  %8460 = add i64 %8459, 9
  store i64 %8460, i64* %PC
  %8461 = load double, double* bitcast (%A3_type* @A3 to double*)
  %8462 = bitcast i8* %8458 to double*
  store double %8461, double* %8462, align 1, !tbaa !2452
  %8463 = getelementptr inbounds i8, i8* %8458, i64 8
  %8464 = bitcast i8* %8463 to double*
  store double 0.000000e+00, double* %8464, align 1, !tbaa !2452
  %8465 = bitcast %union.vec128_t* %XMM1 to i8*
  %8466 = load i64, i64* %PC
  %8467 = add i64 %8466, 5
  store i64 %8467, i64* %PC
  %8468 = bitcast i8* %8465 to i64*
  %8469 = load i64, i64* %8468, align 1
  store i64 %8469, i64* %RDX, align 1, !tbaa !2428
  %8470 = load i64, i64* %RDX
  %8471 = load i64, i64* %RCX
  %8472 = load i64, i64* %PC
  %8473 = add i64 %8472, 3
  store i64 %8473, i64* %PC
  %8474 = xor i64 %8471, %8470
  store i64 %8474, i64* %RDX, align 8, !tbaa !2428
  %8475 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8475, align 1, !tbaa !2432
  %8476 = trunc i64 %8474 to i32
  %8477 = and i32 %8476, 255
  %8478 = call i32 @llvm.ctpop.i32(i32 %8477) #16
  %8479 = trunc i32 %8478 to i8
  %8480 = and i8 %8479, 1
  %8481 = xor i8 %8480, 1
  %8482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8481, i8* %8482, align 1, !tbaa !2446
  %8483 = icmp eq i64 %8474, 0
  %8484 = zext i1 %8483 to i8
  %8485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8484, i8* %8485, align 1, !tbaa !2447
  %8486 = lshr i64 %8474, 63
  %8487 = trunc i64 %8486 to i8
  %8488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8487, i8* %8488, align 1, !tbaa !2448
  %8489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8489, align 1, !tbaa !2449
  %8490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8490, align 1, !tbaa !2450
  %8491 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8492 = load i64, i64* %RDX
  %8493 = load i64, i64* %PC
  %8494 = add i64 %8493, 5
  store i64 %8494, i64* %PC
  %8495 = bitcast i8* %8491 to i64*
  store i64 %8492, i64* %8495, align 1, !tbaa !2428
  %8496 = getelementptr inbounds i8, i8* %8491, i64 8
  %8497 = bitcast i8* %8496 to i64*
  store i64 0, i64* %8497, align 1, !tbaa !2428
  %8498 = bitcast %union.vec128_t* %XMM1 to i8*
  %8499 = load i64, i64* %PC
  %8500 = add i64 %8499, 9
  store i64 %8500, i64* %PC
  %8501 = bitcast i8* %8498 to double*
  %8502 = load double, double* %8501, align 1
  store double %8502, double* bitcast (%A3_type* @A3 to double*)
  %8503 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8504 = load i64, i64* %PC
  %8505 = add i64 %8504, 9
  store i64 %8505, i64* %PC
  %8506 = load double, double* bitcast (%A5_type* @A5 to double*)
  %8507 = bitcast i8* %8503 to double*
  store double %8506, double* %8507, align 1, !tbaa !2452
  %8508 = getelementptr inbounds i8, i8* %8503, i64 8
  %8509 = bitcast i8* %8508 to double*
  store double 0.000000e+00, double* %8509, align 1, !tbaa !2452
  %8510 = bitcast %union.vec128_t* %XMM1 to i8*
  %8511 = load i64, i64* %PC
  %8512 = add i64 %8511, 5
  store i64 %8512, i64* %PC
  %8513 = bitcast i8* %8510 to i64*
  %8514 = load i64, i64* %8513, align 1
  store i64 %8514, i64* %RDX, align 1, !tbaa !2428
  %8515 = load i64, i64* %RDX
  %8516 = load i64, i64* %RCX
  %8517 = load i64, i64* %PC
  %8518 = add i64 %8517, 3
  store i64 %8518, i64* %PC
  %8519 = xor i64 %8516, %8515
  store i64 %8519, i64* %RDX, align 8, !tbaa !2428
  %8520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %8520, align 1, !tbaa !2432
  %8521 = trunc i64 %8519 to i32
  %8522 = and i32 %8521, 255
  %8523 = call i32 @llvm.ctpop.i32(i32 %8522) #16
  %8524 = trunc i32 %8523 to i8
  %8525 = and i8 %8524, 1
  %8526 = xor i8 %8525, 1
  %8527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8526, i8* %8527, align 1, !tbaa !2446
  %8528 = icmp eq i64 %8519, 0
  %8529 = zext i1 %8528 to i8
  %8530 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8529, i8* %8530, align 1, !tbaa !2447
  %8531 = lshr i64 %8519, 63
  %8532 = trunc i64 %8531 to i8
  %8533 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8532, i8* %8533, align 1, !tbaa !2448
  %8534 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %8534, align 1, !tbaa !2449
  %8535 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %8535, align 1, !tbaa !2450
  %8536 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8537 = load i64, i64* %RDX
  %8538 = load i64, i64* %PC
  %8539 = add i64 %8538, 5
  store i64 %8539, i64* %PC
  %8540 = bitcast i8* %8536 to i64*
  store i64 %8537, i64* %8540, align 1, !tbaa !2428
  %8541 = getelementptr inbounds i8, i8* %8536, i64 8
  %8542 = bitcast i8* %8541 to i64*
  store i64 0, i64* %8542, align 1, !tbaa !2428
  %8543 = bitcast %union.vec128_t* %XMM1 to i8*
  %8544 = load i64, i64* %PC
  %8545 = add i64 %8544, 9
  store i64 %8545, i64* %PC
  %8546 = bitcast i8* %8543 to double*
  %8547 = load double, double* %8546, align 1
  store double %8547, double* bitcast (%A5_type* @A5 to double*)
  %8548 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8549 = load i64, i64* %PC
  %8550 = add i64 %8549, 9
  store i64 %8550, i64* %PC
  %8551 = load double, double* bitcast (%piref_type* @piref to double*)
  %8552 = bitcast i8* %8548 to double*
  store double %8551, double* %8552, align 1, !tbaa !2452
  %8553 = getelementptr inbounds i8, i8* %8548, i64 8
  %8554 = bitcast i8* %8553 to double*
  store double 0.000000e+00, double* %8554, align 1, !tbaa !2452
  %8555 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8556 = load i64, i64* %PC
  %8557 = add i64 %8556, 9
  store i64 %8557, i64* %PC
  %8558 = load double, double* bitcast (%three_type* @three to double*)
  %8559 = bitcast i8* %8555 to double*
  store double %8558, double* %8559, align 1, !tbaa !2452
  %8560 = getelementptr inbounds i8, i8* %8555, i64 8
  %8561 = bitcast i8* %8560 to double*
  store double 0.000000e+00, double* %8561, align 1, !tbaa !2452
  %8562 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8563 = load i64, i64* %RBP
  %8564 = sub i64 %8563, 80
  %8565 = load i64, i64* %PC
  %8566 = add i64 %8565, 6
  store i64 %8566, i64* %PC
  %8567 = inttoptr i64 %8564 to i64*
  %8568 = load i64, i64* %8567
  %8569 = sitofp i64 %8568 to double
  %8570 = bitcast i8* %8562 to double*
  store double %8569, double* %8570, align 1, !tbaa !2452
  %8571 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8572 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8573 = bitcast %union.vec128_t* %XMM3 to i8*
  %8574 = load i64, i64* %PC
  %8575 = add i64 %8574, 4
  store i64 %8575, i64* %PC
  %8576 = bitcast i8* %8572 to double*
  %8577 = load double, double* %8576, align 1
  %8578 = getelementptr inbounds i8, i8* %8572, i64 8
  %8579 = bitcast i8* %8578 to i64*
  %8580 = load i64, i64* %8579, align 1
  %8581 = bitcast i8* %8573 to double*
  %8582 = load double, double* %8581, align 1
  %8583 = fmul double %8577, %8582
  %8584 = bitcast i8* %8571 to double*
  store double %8583, double* %8584, align 1, !tbaa !2452
  %8585 = getelementptr inbounds i8, i8* %8571, i64 8
  %8586 = bitcast i8* %8585 to i64*
  store i64 %8580, i64* %8586, align 1, !tbaa !2452
  %8587 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8588 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8589 = bitcast %union.vec128_t* %XMM2 to i8*
  %8590 = load i64, i64* %PC
  %8591 = add i64 %8590, 4
  store i64 %8591, i64* %PC
  %8592 = bitcast i8* %8588 to double*
  %8593 = load double, double* %8592, align 1
  %8594 = getelementptr inbounds i8, i8* %8588, i64 8
  %8595 = bitcast i8* %8594 to i64*
  %8596 = load i64, i64* %8595, align 1
  %8597 = bitcast i8* %8589 to double*
  %8598 = load double, double* %8597, align 1
  %8599 = fdiv double %8593, %8598
  %8600 = bitcast i8* %8587 to double*
  store double %8599, double* %8600, align 1, !tbaa !2452
  %8601 = getelementptr inbounds i8, i8* %8587, i64 8
  %8602 = bitcast i8* %8601 to i64*
  store i64 %8596, i64* %8602, align 1, !tbaa !2452
  %8603 = load i64, i64* %RBP
  %8604 = sub i64 %8603, 48
  %8605 = bitcast %union.vec128_t* %XMM1 to i8*
  %8606 = load i64, i64* %PC
  %8607 = add i64 %8606, 5
  store i64 %8607, i64* %PC
  %8608 = bitcast i8* %8605 to double*
  %8609 = load double, double* %8608, align 1
  %8610 = inttoptr i64 %8604 to double*
  store double %8609, double* %8610
  %8611 = load i64, i64* %RBP
  %8612 = sub i64 %8611, 16
  %8613 = bitcast %union.vec128_t* %XMM0 to i8*
  %8614 = load i64, i64* %PC
  %8615 = add i64 %8614, 5
  store i64 %8615, i64* %PC
  %8616 = bitcast i8* %8613 to double*
  %8617 = load double, double* %8616, align 1
  %8618 = inttoptr i64 %8612 to double*
  store double %8617, double* %8618
  %8619 = load i64, i64* %RBP
  %8620 = sub i64 %8619, 32
  %8621 = bitcast %union.vec128_t* %XMM0 to i8*
  %8622 = load i64, i64* %PC
  %8623 = add i64 %8622, 5
  store i64 %8623, i64* %PC
  %8624 = bitcast i8* %8621 to double*
  %8625 = load double, double* %8624, align 1
  %8626 = inttoptr i64 %8620 to double*
  store double %8625, double* %8626
  %8627 = load i64, i64* %RBP
  %8628 = sub i64 %8627, 192
  %8629 = load i32, i32* %EAX
  %8630 = zext i32 %8629 to i64
  %8631 = load i64, i64* %PC
  %8632 = add i64 %8631, 6
  store i64 %8632, i64* %PC
  %8633 = inttoptr i64 %8628 to i32*
  store i32 %8629, i32* %8633
  %8634 = load i64, i64* %PC
  %8635 = add i64 %8634, 5214
  %8636 = load i64, i64* %PC
  %8637 = add i64 %8636, 5
  %8638 = load i64, i64* %PC
  %8639 = add i64 %8638, 5
  store i64 %8639, i64* %PC
  %8640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8641 = load i64, i64* %8640, align 8, !tbaa !2428
  %8642 = add i64 %8641, -8
  %8643 = inttoptr i64 %8642 to i64*
  store i64 %8637, i64* %8643
  store i64 %8642, i64* %8640, align 8, !tbaa !2428
  %8644 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8635, i64* %8644, align 8, !tbaa !2428
  %8645 = load i64, i64* %PC
  %8646 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %8645, %struct.Memory* %8423)
  %8647 = load i64, i64* %RBP
  %8648 = sub i64 %8647, 72
  %8649 = load i64, i64* %PC
  %8650 = add i64 %8649, 8
  store i64 %8650, i64* %PC
  %8651 = inttoptr i64 %8648 to i64*
  store i64 1, i64* %8651
  %8652 = load i64, i64* %RBP
  %8653 = sub i64 %8652, 196
  %8654 = load i32, i32* %EAX
  %8655 = zext i32 %8654 to i64
  %8656 = load i64, i64* %PC
  %8657 = add i64 %8656, 6
  store i64 %8657, i64* %PC
  %8658 = inttoptr i64 %8653 to i32*
  store i32 %8654, i32* %8658
  br label %block_401195

block_400730:                                     ; preds = %block_40071b
  %8659 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8660 = load i64, i64* %RBP
  %8661 = sub i64 %8660, 32
  %8662 = load i64, i64* %PC
  %8663 = add i64 %8662, 5
  store i64 %8663, i64* %PC
  %8664 = inttoptr i64 %8661 to double*
  %8665 = load double, double* %8664
  %8666 = bitcast i8* %8659 to double*
  store double %8665, double* %8666, align 1, !tbaa !2452
  %8667 = getelementptr inbounds i8, i8* %8659, i64 8
  %8668 = bitcast i8* %8667 to double*
  store double 0.000000e+00, double* %8668, align 1, !tbaa !2452
  %8669 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8670 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8671 = load i64, i64* %RBP
  %8672 = sub i64 %8671, 40
  %8673 = load i64, i64* %PC
  %8674 = add i64 %8673, 5
  store i64 %8674, i64* %PC
  %8675 = bitcast i8* %8670 to double*
  %8676 = load double, double* %8675, align 1
  %8677 = getelementptr inbounds i8, i8* %8670, i64 8
  %8678 = bitcast i8* %8677 to i64*
  %8679 = load i64, i64* %8678, align 1
  %8680 = inttoptr i64 %8672 to double*
  %8681 = load double, double* %8680
  %8682 = fadd double %8676, %8681
  %8683 = bitcast i8* %8669 to double*
  store double %8682, double* %8683, align 1, !tbaa !2452
  %8684 = getelementptr inbounds i8, i8* %8669, i64 8
  %8685 = bitcast i8* %8684 to i64*
  store i64 %8679, i64* %8685, align 1, !tbaa !2452
  %8686 = load i64, i64* %RBP
  %8687 = sub i64 %8686, 32
  %8688 = bitcast %union.vec128_t* %XMM0 to i8*
  %8689 = load i64, i64* %PC
  %8690 = add i64 %8689, 5
  store i64 %8690, i64* %PC
  %8691 = bitcast i8* %8688 to double*
  %8692 = load double, double* %8691, align 1
  %8693 = inttoptr i64 %8687 to double*
  store double %8692, double* %8693
  %8694 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8695 = load i64, i64* %RBP
  %8696 = sub i64 %8695, 32
  %8697 = load i64, i64* %PC
  %8698 = add i64 %8697, 5
  store i64 %8698, i64* %PC
  %8699 = inttoptr i64 %8696 to double*
  %8700 = load double, double* %8699
  %8701 = bitcast i8* %8694 to double*
  store double %8700, double* %8701, align 1, !tbaa !2452
  %8702 = getelementptr inbounds i8, i8* %8694, i64 8
  %8703 = bitcast i8* %8702 to double*
  store double 0.000000e+00, double* %8703, align 1, !tbaa !2452
  %8704 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8705 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8706 = load i64, i64* %RBP
  %8707 = sub i64 %8706, 48
  %8708 = load i64, i64* %PC
  %8709 = add i64 %8708, 5
  store i64 %8709, i64* %PC
  %8710 = bitcast i8* %8705 to double*
  %8711 = load double, double* %8710, align 1
  %8712 = getelementptr inbounds i8, i8* %8705, i64 8
  %8713 = bitcast i8* %8712 to i64*
  %8714 = load i64, i64* %8713, align 1
  %8715 = inttoptr i64 %8707 to double*
  %8716 = load double, double* %8715
  %8717 = fmul double %8711, %8716
  %8718 = bitcast i8* %8704 to double*
  store double %8717, double* %8718, align 1, !tbaa !2452
  %8719 = getelementptr inbounds i8, i8* %8704, i64 8
  %8720 = bitcast i8* %8719 to i64*
  store i64 %8714, i64* %8720, align 1, !tbaa !2452
  %8721 = load i64, i64* %RBP
  %8722 = sub i64 %8721, 24
  %8723 = bitcast %union.vec128_t* %XMM0 to i8*
  %8724 = load i64, i64* %PC
  %8725 = add i64 %8724, 5
  store i64 %8725, i64* %PC
  %8726 = bitcast i8* %8723 to double*
  %8727 = load double, double* %8726, align 1
  %8728 = inttoptr i64 %8722 to double*
  store double %8727, double* %8728
  %8729 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8730 = load i64, i64* %RBP
  %8731 = sub i64 %8730, 16
  %8732 = load i64, i64* %PC
  %8733 = add i64 %8732, 5
  store i64 %8733, i64* %PC
  %8734 = inttoptr i64 %8731 to double*
  %8735 = load double, double* %8734
  %8736 = bitcast i8* %8729 to double*
  store double %8735, double* %8736, align 1, !tbaa !2452
  %8737 = getelementptr inbounds i8, i8* %8729, i64 8
  %8738 = bitcast i8* %8737 to double*
  store double 0.000000e+00, double* %8738, align 1, !tbaa !2452
  %8739 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8740 = load i64, i64* %PC
  %8741 = add i64 %8740, 9
  store i64 %8741, i64* %PC
  %8742 = load double, double* bitcast (%D1_0_type* @D1_0 to double*)
  %8743 = bitcast i8* %8739 to double*
  store double %8742, double* %8743, align 1, !tbaa !2452
  %8744 = getelementptr inbounds i8, i8* %8739, i64 8
  %8745 = bitcast i8* %8744 to double*
  store double 0.000000e+00, double* %8745, align 1, !tbaa !2452
  %8746 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8747 = load i64, i64* %RBP
  %8748 = sub i64 %8747, 24
  %8749 = load i64, i64* %PC
  %8750 = add i64 %8749, 5
  store i64 %8750, i64* %PC
  %8751 = inttoptr i64 %8748 to double*
  %8752 = load double, double* %8751
  %8753 = bitcast i8* %8746 to double*
  store double %8752, double* %8753, align 1, !tbaa !2452
  %8754 = getelementptr inbounds i8, i8* %8746, i64 8
  %8755 = bitcast i8* %8754 to double*
  store double 0.000000e+00, double* %8755, align 1, !tbaa !2452
  %8756 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8757 = load i64, i64* %PC
  %8758 = add i64 %8757, 9
  store i64 %8758, i64* %PC
  %8759 = load double, double* bitcast (%D2_0_type* @D2_0 to double*)
  %8760 = bitcast i8* %8756 to double*
  store double %8759, double* %8760, align 1, !tbaa !2452
  %8761 = getelementptr inbounds i8, i8* %8756, i64 8
  %8762 = bitcast i8* %8761 to double*
  store double 0.000000e+00, double* %8762, align 1, !tbaa !2452
  %8763 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8764 = load i64, i64* %RBP
  %8765 = sub i64 %8764, 24
  %8766 = load i64, i64* %PC
  %8767 = add i64 %8766, 5
  store i64 %8767, i64* %PC
  %8768 = inttoptr i64 %8765 to double*
  %8769 = load double, double* %8768
  %8770 = bitcast i8* %8763 to double*
  store double %8769, double* %8770, align 1, !tbaa !2452
  %8771 = getelementptr inbounds i8, i8* %8763, i64 8
  %8772 = bitcast i8* %8771 to double*
  store double 0.000000e+00, double* %8772, align 1, !tbaa !2452
  %8773 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8774 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8775 = load i64, i64* %PC
  %8776 = add i64 %8775, 9
  store i64 %8776, i64* %PC
  %8777 = bitcast i8* %8774 to double*
  %8778 = load double, double* %8777, align 1
  %8779 = getelementptr inbounds i8, i8* %8774, i64 8
  %8780 = bitcast i8* %8779 to i64*
  %8781 = load i64, i64* %8780, align 1
  %8782 = load double, double* bitcast (%D3_type* @D3 to double*)
  %8783 = fmul double %8778, %8782
  %8784 = bitcast i8* %8773 to double*
  store double %8783, double* %8784, align 1, !tbaa !2452
  %8785 = getelementptr inbounds i8, i8* %8773, i64 8
  %8786 = bitcast i8* %8785 to i64*
  store i64 %8781, i64* %8786, align 1, !tbaa !2452
  %8787 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8788 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8789 = bitcast %union.vec128_t* %XMM4 to i8*
  %8790 = load i64, i64* %PC
  %8791 = add i64 %8790, 4
  store i64 %8791, i64* %PC
  %8792 = bitcast i8* %8788 to double*
  %8793 = load double, double* %8792, align 1
  %8794 = getelementptr inbounds i8, i8* %8788, i64 8
  %8795 = bitcast i8* %8794 to i64*
  %8796 = load i64, i64* %8795, align 1
  %8797 = bitcast i8* %8789 to double*
  %8798 = load double, double* %8797, align 1
  %8799 = fadd double %8793, %8798
  %8800 = bitcast i8* %8787 to double*
  store double %8799, double* %8800, align 1, !tbaa !2452
  %8801 = getelementptr inbounds i8, i8* %8787, i64 8
  %8802 = bitcast i8* %8801 to i64*
  store i64 %8796, i64* %8802, align 1, !tbaa !2452
  %8803 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8804 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8805 = bitcast %union.vec128_t* %XMM3 to i8*
  %8806 = load i64, i64* %PC
  %8807 = add i64 %8806, 4
  store i64 %8807, i64* %PC
  %8808 = bitcast i8* %8804 to double*
  %8809 = load double, double* %8808, align 1
  %8810 = getelementptr inbounds i8, i8* %8804, i64 8
  %8811 = bitcast i8* %8810 to i64*
  %8812 = load i64, i64* %8811, align 1
  %8813 = bitcast i8* %8805 to double*
  %8814 = load double, double* %8813, align 1
  %8815 = fmul double %8809, %8814
  %8816 = bitcast i8* %8803 to double*
  store double %8815, double* %8816, align 1, !tbaa !2452
  %8817 = getelementptr inbounds i8, i8* %8803, i64 8
  %8818 = bitcast i8* %8817 to i64*
  store i64 %8812, i64* %8818, align 1, !tbaa !2452
  %8819 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8820 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8821 = bitcast %union.vec128_t* %XMM2 to i8*
  %8822 = load i64, i64* %PC
  %8823 = add i64 %8822, 4
  store i64 %8823, i64* %PC
  %8824 = bitcast i8* %8820 to double*
  %8825 = load double, double* %8824, align 1
  %8826 = getelementptr inbounds i8, i8* %8820, i64 8
  %8827 = bitcast i8* %8826 to i64*
  %8828 = load i64, i64* %8827, align 1
  %8829 = bitcast i8* %8821 to double*
  %8830 = load double, double* %8829, align 1
  %8831 = fadd double %8825, %8830
  %8832 = bitcast i8* %8819 to double*
  store double %8831, double* %8832, align 1, !tbaa !2452
  %8833 = getelementptr inbounds i8, i8* %8819, i64 8
  %8834 = bitcast i8* %8833 to i64*
  store i64 %8828, i64* %8834, align 1, !tbaa !2452
  %8835 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8836 = load i64, i64* %RBP
  %8837 = sub i64 %8836, 40
  %8838 = load i64, i64* %PC
  %8839 = add i64 %8838, 5
  store i64 %8839, i64* %PC
  %8840 = inttoptr i64 %8837 to double*
  %8841 = load double, double* %8840
  %8842 = bitcast i8* %8835 to double*
  store double %8841, double* %8842, align 1, !tbaa !2452
  %8843 = getelementptr inbounds i8, i8* %8835, i64 8
  %8844 = bitcast i8* %8843 to double*
  store double 0.000000e+00, double* %8844, align 1, !tbaa !2452
  %8845 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8846 = load i64, i64* %RBP
  %8847 = sub i64 %8846, 24
  %8848 = load i64, i64* %PC
  %8849 = add i64 %8848, 5
  store i64 %8849, i64* %PC
  %8850 = inttoptr i64 %8847 to double*
  %8851 = load double, double* %8850
  %8852 = bitcast i8* %8845 to double*
  store double %8851, double* %8852, align 1, !tbaa !2452
  %8853 = getelementptr inbounds i8, i8* %8845, i64 8
  %8854 = bitcast i8* %8853 to double*
  store double 0.000000e+00, double* %8854, align 1, !tbaa !2452
  %8855 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8856 = load i64, i64* %PC
  %8857 = add i64 %8856, 9
  store i64 %8857, i64* %PC
  %8858 = load double, double* bitcast (%D1_0_type* @D1_0 to double*)
  %8859 = bitcast i8* %8855 to double*
  store double %8858, double* %8859, align 1, !tbaa !2452
  %8860 = getelementptr inbounds i8, i8* %8855, i64 8
  %8861 = bitcast i8* %8860 to double*
  store double 0.000000e+00, double* %8861, align 1, !tbaa !2452
  %8862 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %8863 = load i64, i64* %RBP
  %8864 = sub i64 %8863, 24
  %8865 = load i64, i64* %PC
  %8866 = add i64 %8865, 5
  store i64 %8866, i64* %PC
  %8867 = inttoptr i64 %8864 to double*
  %8868 = load double, double* %8867
  %8869 = bitcast i8* %8862 to double*
  store double %8868, double* %8869, align 1, !tbaa !2452
  %8870 = getelementptr inbounds i8, i8* %8862, i64 8
  %8871 = bitcast i8* %8870 to double*
  store double 0.000000e+00, double* %8871, align 1, !tbaa !2452
  %8872 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %8873 = load i64, i64* %PC
  %8874 = add i64 %8873, 9
  store i64 %8874, i64* %PC
  %8875 = load double, double* bitcast (%E2_0_type* @E2_0 to double*)
  %8876 = bitcast i8* %8872 to double*
  store double %8875, double* %8876, align 1, !tbaa !2452
  %8877 = getelementptr inbounds i8, i8* %8872, i64 8
  %8878 = bitcast i8* %8877 to double*
  store double 0.000000e+00, double* %8878, align 1, !tbaa !2452
  %8879 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %8880 = load i64, i64* %RBP
  %8881 = sub i64 %8880, 24
  %8882 = load i64, i64* %PC
  %8883 = add i64 %8882, 5
  store i64 %8883, i64* %PC
  %8884 = inttoptr i64 %8881 to double*
  %8885 = load double, double* %8884
  %8886 = bitcast i8* %8879 to double*
  store double %8885, double* %8886, align 1, !tbaa !2452
  %8887 = getelementptr inbounds i8, i8* %8879, i64 8
  %8888 = bitcast i8* %8887 to double*
  store double 0.000000e+00, double* %8888, align 1, !tbaa !2452
  %8889 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %8890 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %8891 = load i64, i64* %PC
  %8892 = add i64 %8891, 9
  store i64 %8892, i64* %PC
  %8893 = bitcast i8* %8890 to double*
  %8894 = load double, double* %8893, align 1
  %8895 = getelementptr inbounds i8, i8* %8890, i64 8
  %8896 = bitcast i8* %8895 to i64*
  %8897 = load i64, i64* %8896, align 1
  %8898 = load double, double* bitcast (%E3_type* @E3 to double*)
  %8899 = fmul double %8894, %8898
  %8900 = bitcast i8* %8889 to double*
  store double %8899, double* %8900, align 1, !tbaa !2452
  %8901 = getelementptr inbounds i8, i8* %8889, i64 8
  %8902 = bitcast i8* %8901 to i64*
  store i64 %8897, i64* %8902, align 1, !tbaa !2452
  %8903 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %8904 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %8905 = bitcast %union.vec128_t* %XMM7 to i8*
  %8906 = load i64, i64* %PC
  %8907 = add i64 %8906, 4
  store i64 %8907, i64* %PC
  %8908 = bitcast i8* %8904 to double*
  %8909 = load double, double* %8908, align 1
  %8910 = getelementptr inbounds i8, i8* %8904, i64 8
  %8911 = bitcast i8* %8910 to i64*
  %8912 = load i64, i64* %8911, align 1
  %8913 = bitcast i8* %8905 to double*
  %8914 = load double, double* %8913, align 1
  %8915 = fadd double %8909, %8914
  %8916 = bitcast i8* %8903 to double*
  store double %8915, double* %8916, align 1, !tbaa !2452
  %8917 = getelementptr inbounds i8, i8* %8903, i64 8
  %8918 = bitcast i8* %8917 to i64*
  store i64 %8912, i64* %8918, align 1, !tbaa !2452
  %8919 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %8920 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %8921 = bitcast %union.vec128_t* %XMM6 to i8*
  %8922 = load i64, i64* %PC
  %8923 = add i64 %8922, 4
  store i64 %8923, i64* %PC
  %8924 = bitcast i8* %8920 to double*
  %8925 = load double, double* %8924, align 1
  %8926 = getelementptr inbounds i8, i8* %8920, i64 8
  %8927 = bitcast i8* %8926 to i64*
  %8928 = load i64, i64* %8927, align 1
  %8929 = bitcast i8* %8921 to double*
  %8930 = load double, double* %8929, align 1
  %8931 = fmul double %8925, %8930
  %8932 = bitcast i8* %8919 to double*
  store double %8931, double* %8932, align 1, !tbaa !2452
  %8933 = getelementptr inbounds i8, i8* %8919, i64 8
  %8934 = bitcast i8* %8933 to i64*
  store i64 %8928, i64* %8934, align 1, !tbaa !2452
  %8935 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8936 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8937 = bitcast %union.vec128_t* %XMM5 to i8*
  %8938 = load i64, i64* %PC
  %8939 = add i64 %8938, 4
  store i64 %8939, i64* %PC
  %8940 = bitcast i8* %8936 to double*
  %8941 = load double, double* %8940, align 1
  %8942 = getelementptr inbounds i8, i8* %8936, i64 8
  %8943 = bitcast i8* %8942 to i64*
  %8944 = load i64, i64* %8943, align 1
  %8945 = bitcast i8* %8937 to double*
  %8946 = load double, double* %8945, align 1
  %8947 = fadd double %8941, %8946
  %8948 = bitcast i8* %8935 to double*
  store double %8947, double* %8948, align 1, !tbaa !2452
  %8949 = getelementptr inbounds i8, i8* %8935, i64 8
  %8950 = bitcast i8* %8949 to i64*
  store i64 %8944, i64* %8950, align 1, !tbaa !2452
  %8951 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8952 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8953 = bitcast %union.vec128_t* %XMM4 to i8*
  %8954 = load i64, i64* %PC
  %8955 = add i64 %8954, 4
  store i64 %8955, i64* %PC
  %8956 = bitcast i8* %8952 to double*
  %8957 = load double, double* %8956, align 1
  %8958 = getelementptr inbounds i8, i8* %8952, i64 8
  %8959 = bitcast i8* %8958 to i64*
  %8960 = load i64, i64* %8959, align 1
  %8961 = bitcast i8* %8953 to double*
  %8962 = load double, double* %8961, align 1
  %8963 = fmul double %8957, %8962
  %8964 = bitcast i8* %8951 to double*
  store double %8963, double* %8964, align 1, !tbaa !2452
  %8965 = getelementptr inbounds i8, i8* %8951, i64 8
  %8966 = bitcast i8* %8965 to i64*
  store i64 %8960, i64* %8966, align 1, !tbaa !2452
  %8967 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8968 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8969 = bitcast %union.vec128_t* %XMM3 to i8*
  %8970 = load i64, i64* %PC
  %8971 = add i64 %8970, 4
  store i64 %8971, i64* %PC
  %8972 = bitcast i8* %8968 to double*
  %8973 = load double, double* %8972, align 1
  %8974 = getelementptr inbounds i8, i8* %8968, i64 8
  %8975 = bitcast i8* %8974 to i64*
  %8976 = load i64, i64* %8975, align 1
  %8977 = bitcast i8* %8969 to double*
  %8978 = load double, double* %8977, align 1
  %8979 = fadd double %8973, %8978
  %8980 = bitcast i8* %8967 to double*
  store double %8979, double* %8980, align 1, !tbaa !2452
  %8981 = getelementptr inbounds i8, i8* %8967, i64 8
  %8982 = bitcast i8* %8981 to i64*
  store i64 %8976, i64* %8982, align 1, !tbaa !2452
  %8983 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8984 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8985 = bitcast %union.vec128_t* %XMM2 to i8*
  %8986 = load i64, i64* %PC
  %8987 = add i64 %8986, 4
  store i64 %8987, i64* %PC
  %8988 = bitcast i8* %8984 to double*
  %8989 = load double, double* %8988, align 1
  %8990 = getelementptr inbounds i8, i8* %8984, i64 8
  %8991 = bitcast i8* %8990 to i64*
  %8992 = load i64, i64* %8991, align 1
  %8993 = bitcast i8* %8985 to double*
  %8994 = load double, double* %8993, align 1
  %8995 = fdiv double %8989, %8994
  %8996 = bitcast i8* %8983 to double*
  store double %8995, double* %8996, align 1, !tbaa !2452
  %8997 = getelementptr inbounds i8, i8* %8983, i64 8
  %8998 = bitcast i8* %8997 to i64*
  store i64 %8992, i64* %8998, align 1, !tbaa !2452
  %8999 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9000 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9001 = bitcast %union.vec128_t* %XMM1 to i8*
  %9002 = load i64, i64* %PC
  %9003 = add i64 %9002, 4
  store i64 %9003, i64* %PC
  %9004 = bitcast i8* %9000 to double*
  %9005 = load double, double* %9004, align 1
  %9006 = getelementptr inbounds i8, i8* %9000, i64 8
  %9007 = bitcast i8* %9006 to i64*
  %9008 = load i64, i64* %9007, align 1
  %9009 = bitcast i8* %9001 to double*
  %9010 = load double, double* %9009, align 1
  %9011 = fadd double %9005, %9010
  %9012 = bitcast i8* %8999 to double*
  store double %9011, double* %9012, align 1, !tbaa !2452
  %9013 = getelementptr inbounds i8, i8* %8999, i64 8
  %9014 = bitcast i8* %9013 to i64*
  store i64 %9008, i64* %9014, align 1, !tbaa !2452
  %9015 = load i64, i64* %RBP
  %9016 = sub i64 %9015, 16
  %9017 = bitcast %union.vec128_t* %XMM0 to i8*
  %9018 = load i64, i64* %PC
  %9019 = add i64 %9018, 5
  store i64 %9019, i64* %PC
  %9020 = bitcast i8* %9017 to double*
  %9021 = load double, double* %9020, align 1
  %9022 = inttoptr i64 %9016 to double*
  store double %9021, double* %9022
  %9023 = load i64, i64* %RBP
  %9024 = sub i64 %9023, 72
  %9025 = load i64, i64* %PC
  %9026 = add i64 %9025, 4
  store i64 %9026, i64* %PC
  %9027 = inttoptr i64 %9024 to i64*
  %9028 = load i64, i64* %9027
  store i64 %9028, i64* %RAX, align 8, !tbaa !2428
  %9029 = load i64, i64* %RAX
  %9030 = load i64, i64* %PC
  %9031 = add i64 %9030, 4
  store i64 %9031, i64* %PC
  %9032 = add i64 1, %9029
  store i64 %9032, i64* %RAX, align 8, !tbaa !2428
  %9033 = icmp ult i64 %9032, %9029
  %9034 = icmp ult i64 %9032, 1
  %9035 = or i1 %9033, %9034
  %9036 = zext i1 %9035 to i8
  %9037 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9036, i8* %9037, align 1, !tbaa !2432
  %9038 = trunc i64 %9032 to i32
  %9039 = and i32 %9038, 255
  %9040 = call i32 @llvm.ctpop.i32(i32 %9039) #16
  %9041 = trunc i32 %9040 to i8
  %9042 = and i8 %9041, 1
  %9043 = xor i8 %9042, 1
  %9044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9043, i8* %9044, align 1, !tbaa !2446
  %9045 = xor i64 1, %9029
  %9046 = xor i64 %9045, %9032
  %9047 = lshr i64 %9046, 4
  %9048 = trunc i64 %9047 to i8
  %9049 = and i8 %9048, 1
  %9050 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9049, i8* %9050, align 1, !tbaa !2450
  %9051 = icmp eq i64 %9032, 0
  %9052 = zext i1 %9051 to i8
  %9053 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9052, i8* %9053, align 1, !tbaa !2447
  %9054 = lshr i64 %9032, 63
  %9055 = trunc i64 %9054 to i8
  %9056 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9055, i8* %9056, align 1, !tbaa !2448
  %9057 = lshr i64 %9029, 63
  %9058 = xor i64 %9054, %9057
  %9059 = add nuw nsw i64 %9058, %9054
  %9060 = icmp eq i64 %9059, 2
  %9061 = zext i1 %9060 to i8
  %9062 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9061, i8* %9062, align 1, !tbaa !2449
  %9063 = load i64, i64* %RBP
  %9064 = sub i64 %9063, 72
  %9065 = load i64, i64* %RAX
  %9066 = load i64, i64* %PC
  %9067 = add i64 %9066, 4
  store i64 %9067, i64* %PC
  %9068 = inttoptr i64 %9064 to i64*
  store i64 %9065, i64* %9068
  %9069 = load i64, i64* %PC
  %9070 = sub i64 %9069, 197
  %9071 = load i64, i64* %PC
  %9072 = add i64 %9071, 5
  store i64 %9072, i64* %PC
  %9073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9070, i64* %9073, align 8, !tbaa !2428
  br label %block_40071b

block_400afc:                                     ; preds = %block_400aee
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %9074 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9075 = load i64, i64* %RBP
  %9076 = sub i64 %9075, 16
  %9077 = load i64, i64* %PC
  %9078 = add i64 %9077, 5
  store i64 %9078, i64* %PC
  %9079 = inttoptr i64 %9076 to double*
  %9080 = load double, double* %9079
  %9081 = bitcast i8* %9074 to double*
  store double %9080, double* %9081, align 1, !tbaa !2452
  %9082 = getelementptr inbounds i8, i8* %9074, i64 8
  %9083 = bitcast i8* %9082 to double*
  store double 0.000000e+00, double* %9083, align 1, !tbaa !2452
  %9084 = bitcast %union.vec128_t* %XMM0 to i8*
  %9085 = load i64, i64* %PC
  %9086 = add i64 %9085, 5
  store i64 %9086, i64* %PC
  %9087 = bitcast i8* %9084 to i64*
  %9088 = load i64, i64* %9087, align 1
  store i64 %9088, i64* %RCX, align 1, !tbaa !2428
  %9089 = load i64, i64* %RCX
  %9090 = load i64, i64* %RAX
  %9091 = load i64, i64* %PC
  %9092 = add i64 %9091, 3
  store i64 %9092, i64* %PC
  %9093 = xor i64 %9090, %9089
  store i64 %9093, i64* %RCX, align 8, !tbaa !2428
  %9094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %9094, align 1, !tbaa !2432
  %9095 = trunc i64 %9093 to i32
  %9096 = and i32 %9095, 255
  %9097 = call i32 @llvm.ctpop.i32(i32 %9096) #16
  %9098 = trunc i32 %9097 to i8
  %9099 = and i8 %9098, 1
  %9100 = xor i8 %9099, 1
  %9101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9100, i8* %9101, align 1, !tbaa !2446
  %9102 = icmp eq i64 %9093, 0
  %9103 = zext i1 %9102 to i8
  %9104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9103, i8* %9104, align 1, !tbaa !2447
  %9105 = lshr i64 %9093, 63
  %9106 = trunc i64 %9105 to i8
  %9107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9106, i8* %9107, align 1, !tbaa !2448
  %9108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9108, align 1, !tbaa !2449
  %9109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9109, align 1, !tbaa !2450
  %9110 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9111 = load i64, i64* %RCX
  %9112 = load i64, i64* %PC
  %9113 = add i64 %9112, 5
  store i64 %9113, i64* %PC
  %9114 = bitcast i8* %9110 to i64*
  store i64 %9111, i64* %9114, align 1, !tbaa !2428
  %9115 = getelementptr inbounds i8, i8* %9110, i64 8
  %9116 = bitcast i8* %9115 to i64*
  store i64 0, i64* %9116, align 1, !tbaa !2428
  %9117 = load i64, i64* %RBP
  %9118 = sub i64 %9117, 16
  %9119 = bitcast %union.vec128_t* %XMM0 to i8*
  %9120 = load i64, i64* %PC
  %9121 = add i64 %9120, 5
  store i64 %9121, i64* %PC
  %9122 = bitcast i8* %9119 to double*
  %9123 = load double, double* %9122, align 1
  %9124 = inttoptr i64 %9118 to double*
  store double %9123, double* %9124
  %9125 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9126 = load i64, i64* %PC
  %9127 = add i64 %9126, 9
  store i64 %9127, i64* %PC
  %9128 = load double, double* bitcast (%sa_type* @sa to double*)
  %9129 = bitcast i8* %9125 to double*
  store double %9128, double* %9129, align 1, !tbaa !2452
  %9130 = getelementptr inbounds i8, i8* %9125, i64 8
  %9131 = bitcast i8* %9130 to double*
  store double 0.000000e+00, double* %9131, align 1, !tbaa !2452
  %9132 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9133 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9134 = load i64, i64* %RBP
  %9135 = sub i64 %9134, 16
  %9136 = load i64, i64* %PC
  %9137 = add i64 %9136, 5
  store i64 %9137, i64* %PC
  %9138 = bitcast i8* %9133 to double*
  %9139 = load double, double* %9138, align 1
  %9140 = getelementptr inbounds i8, i8* %9133, i64 8
  %9141 = bitcast i8* %9140 to i64*
  %9142 = load i64, i64* %9141, align 1
  %9143 = inttoptr i64 %9135 to double*
  %9144 = load double, double* %9143
  %9145 = fadd double %9139, %9144
  %9146 = bitcast i8* %9132 to double*
  store double %9145, double* %9146, align 1, !tbaa !2452
  %9147 = getelementptr inbounds i8, i8* %9132, i64 8
  %9148 = bitcast i8* %9147 to i64*
  store i64 %9142, i64* %9148, align 1, !tbaa !2452
  %9149 = bitcast %union.vec128_t* %XMM0 to i8*
  %9150 = load i64, i64* %PC
  %9151 = add i64 %9150, 9
  store i64 %9151, i64* %PC
  %9152 = bitcast i8* %9149 to double*
  %9153 = load double, double* %9152, align 1
  store double %9153, double* bitcast (%sa_type* @sa to double*)
  %9154 = load i64, i64* %RBP
  %9155 = sub i64 %9154, 72
  %9156 = load i64, i64* %PC
  %9157 = add i64 %9156, 4
  store i64 %9157, i64* %PC
  %9158 = inttoptr i64 %9155 to i64*
  %9159 = load i64, i64* %9158
  store i64 %9159, i64* %RAX, align 8, !tbaa !2428
  %9160 = load i64, i64* %RAX
  %9161 = load i64, i64* %PC
  %9162 = add i64 %9161, 4
  store i64 %9162, i64* %PC
  %9163 = add i64 1, %9160
  store i64 %9163, i64* %RAX, align 8, !tbaa !2428
  %9164 = icmp ult i64 %9163, %9160
  %9165 = icmp ult i64 %9163, 1
  %9166 = or i1 %9164, %9165
  %9167 = zext i1 %9166 to i8
  %9168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9167, i8* %9168, align 1, !tbaa !2432
  %9169 = trunc i64 %9163 to i32
  %9170 = and i32 %9169, 255
  %9171 = call i32 @llvm.ctpop.i32(i32 %9170) #16
  %9172 = trunc i32 %9171 to i8
  %9173 = and i8 %9172, 1
  %9174 = xor i8 %9173, 1
  %9175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9174, i8* %9175, align 1, !tbaa !2446
  %9176 = xor i64 1, %9160
  %9177 = xor i64 %9176, %9163
  %9178 = lshr i64 %9177, 4
  %9179 = trunc i64 %9178 to i8
  %9180 = and i8 %9179, 1
  %9181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9180, i8* %9181, align 1, !tbaa !2450
  %9182 = icmp eq i64 %9163, 0
  %9183 = zext i1 %9182 to i8
  %9184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9183, i8* %9184, align 1, !tbaa !2447
  %9185 = lshr i64 %9163, 63
  %9186 = trunc i64 %9185 to i8
  %9187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9186, i8* %9187, align 1, !tbaa !2448
  %9188 = lshr i64 %9160, 63
  %9189 = xor i64 %9185, %9188
  %9190 = add nuw nsw i64 %9189, %9185
  %9191 = icmp eq i64 %9190, 2
  %9192 = zext i1 %9191 to i8
  %9193 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9192, i8* %9193, align 1, !tbaa !2449
  %9194 = load i64, i64* %RBP
  %9195 = sub i64 %9194, 72
  %9196 = load i64, i64* %RAX
  %9197 = load i64, i64* %PC
  %9198 = add i64 %9197, 4
  store i64 %9198, i64* %PC
  %9199 = inttoptr i64 %9195 to i64*
  store i64 %9196, i64* %9199
  %9200 = load i64, i64* %PC
  %9201 = sub i64 %9200, 82
  %9202 = load i64, i64* %PC
  %9203 = add i64 %9202, 5
  store i64 %9203, i64* %PC
  %9204 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9201, i64* %9204, align 8, !tbaa !2428
  br label %block_400aee

block_401cca:                                     ; preds = %block_401a16, %block_401cdf
  %MEMORY.4 = phi %struct.Memory* [ %11050, %block_401a16 ], [ %MEMORY.4, %block_401cdf ]
  %9205 = load i64, i64* %RBP
  %9206 = sub i64 %9205, 72
  %9207 = load i64, i64* %PC
  %9208 = add i64 %9207, 4
  store i64 %9208, i64* %PC
  %9209 = inttoptr i64 %9206 to i64*
  %9210 = load i64, i64* %9209
  store i64 %9210, i64* %RAX, align 8, !tbaa !2428
  %9211 = load i64, i64* %RBP
  %9212 = sub i64 %9211, 80
  %9213 = load i64, i64* %PC
  %9214 = add i64 %9213, 4
  store i64 %9214, i64* %PC
  %9215 = inttoptr i64 %9212 to i64*
  %9216 = load i64, i64* %9215
  store i64 %9216, i64* %RCX, align 8, !tbaa !2428
  %9217 = load i64, i64* %RCX
  %9218 = load i64, i64* %PC
  %9219 = add i64 %9218, 4
  store i64 %9219, i64* %PC
  %9220 = sub i64 %9217, 1
  store i64 %9220, i64* %RCX, align 8, !tbaa !2428
  %9221 = icmp ult i64 %9217, 1
  %9222 = zext i1 %9221 to i8
  %9223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9222, i8* %9223, align 1, !tbaa !2432
  %9224 = trunc i64 %9220 to i32
  %9225 = and i32 %9224, 255
  %9226 = call i32 @llvm.ctpop.i32(i32 %9225) #16
  %9227 = trunc i32 %9226 to i8
  %9228 = and i8 %9227, 1
  %9229 = xor i8 %9228, 1
  %9230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9229, i8* %9230, align 1, !tbaa !2446
  %9231 = xor i64 1, %9217
  %9232 = xor i64 %9231, %9220
  %9233 = lshr i64 %9232, 4
  %9234 = trunc i64 %9233 to i8
  %9235 = and i8 %9234, 1
  %9236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9235, i8* %9236, align 1, !tbaa !2450
  %9237 = icmp eq i64 %9220, 0
  %9238 = zext i1 %9237 to i8
  %9239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9238, i8* %9239, align 1, !tbaa !2447
  %9240 = lshr i64 %9220, 63
  %9241 = trunc i64 %9240 to i8
  %9242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9241, i8* %9242, align 1, !tbaa !2448
  %9243 = lshr i64 %9217, 63
  %9244 = xor i64 %9240, %9243
  %9245 = add nuw nsw i64 %9244, %9243
  %9246 = icmp eq i64 %9245, 2
  %9247 = zext i1 %9246 to i8
  %9248 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9247, i8* %9248, align 1, !tbaa !2449
  %9249 = load i64, i64* %RAX
  %9250 = load i64, i64* %RCX
  %9251 = load i64, i64* %PC
  %9252 = add i64 %9251, 3
  store i64 %9252, i64* %PC
  %9253 = sub i64 %9249, %9250
  %9254 = icmp ult i64 %9249, %9250
  %9255 = zext i1 %9254 to i8
  %9256 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9255, i8* %9256, align 1, !tbaa !2432
  %9257 = trunc i64 %9253 to i32
  %9258 = and i32 %9257, 255
  %9259 = call i32 @llvm.ctpop.i32(i32 %9258) #16
  %9260 = trunc i32 %9259 to i8
  %9261 = and i8 %9260, 1
  %9262 = xor i8 %9261, 1
  %9263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9262, i8* %9263, align 1, !tbaa !2446
  %9264 = xor i64 %9250, %9249
  %9265 = xor i64 %9264, %9253
  %9266 = lshr i64 %9265, 4
  %9267 = trunc i64 %9266 to i8
  %9268 = and i8 %9267, 1
  %9269 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9268, i8* %9269, align 1, !tbaa !2450
  %9270 = icmp eq i64 %9253, 0
  %9271 = zext i1 %9270 to i8
  %9272 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9271, i8* %9272, align 1, !tbaa !2447
  %9273 = lshr i64 %9253, 63
  %9274 = trunc i64 %9273 to i8
  %9275 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9274, i8* %9275, align 1, !tbaa !2448
  %9276 = lshr i64 %9249, 63
  %9277 = lshr i64 %9250, 63
  %9278 = xor i64 %9277, %9276
  %9279 = xor i64 %9273, %9276
  %9280 = add nuw nsw i64 %9279, %9278
  %9281 = icmp eq i64 %9280, 2
  %9282 = zext i1 %9281 to i8
  %9283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9282, i8* %9283, align 1, !tbaa !2449
  %9284 = load i64, i64* %PC
  %9285 = add i64 %9284, 138
  %9286 = load i64, i64* %PC
  %9287 = add i64 %9286, 6
  %9288 = load i64, i64* %PC
  %9289 = add i64 %9288, 6
  store i64 %9289, i64* %PC
  %9290 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9291 = load i8, i8* %9290, align 1, !tbaa !2447
  %9292 = icmp eq i8 %9291, 0
  %9293 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9294 = load i8, i8* %9293, align 1, !tbaa !2448
  %9295 = icmp ne i8 %9294, 0
  %9296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9297 = load i8, i8* %9296, align 1, !tbaa !2449
  %9298 = icmp ne i8 %9297, 0
  %9299 = xor i1 %9295, %9298
  %9300 = xor i1 %9299, true
  %9301 = and i1 %9292, %9300
  %9302 = zext i1 %9301 to i8
  store i8 %9302, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9304 = select i1 %9301, i64 %9285, i64 %9287
  store i64 %9304, i64* %9303, align 8, !tbaa !2428
  %9305 = load i8, i8* %BRANCH_TAKEN
  %9306 = icmp eq i8 %9305, 1
  br i1 %9306, label %block_401d63, label %block_401cdf

block_400821:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit, %block_400817
  %MEMORY.5 = phi %struct.Memory* [ %14796, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %3745, %block_400817 ]
  %9307 = load i64, i64* %PC
  %9308 = add i64 %9307, 10
  store i64 %9308, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %9309 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9310 = load i64, i64* %PC
  %9311 = add i64 %9310, 8
  store i64 %9311, i64* %PC
  %9312 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 64) to double*)
  %9313 = bitcast i8* %9309 to double*
  store double %9312, double* %9313, align 1, !tbaa !2452
  %9314 = getelementptr inbounds i8, i8* %9309, i64 8
  %9315 = bitcast i8* %9314 to double*
  store double 0.000000e+00, double* %9315, align 1, !tbaa !2452
  %9316 = bitcast %union.vec128_t* %XMM0 to i8*
  %9317 = load i64, i64* %PC
  %9318 = add i64 %9317, 9
  store i64 %9318, i64* %PC
  %9319 = bitcast i8* %9316 to double*
  %9320 = load double, double* %9319, align 1
  store double %9320, double* bitcast (%scale_type* @scale to double*)
  %9321 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9322 = load i64, i64* %PC
  %9323 = add i64 %9322, 9
  store i64 %9323, i64* %PC
  %9324 = load double, double* bitcast (%scale_type* @scale to double*)
  %9325 = bitcast i8* %9321 to double*
  store double %9324, double* %9325, align 1, !tbaa !2452
  %9326 = getelementptr inbounds i8, i8* %9321, i64 8
  %9327 = bitcast i8* %9326 to double*
  store double 0.000000e+00, double* %9327, align 1, !tbaa !2452
  %9328 = bitcast %union.vec128_t* %XMM0 to i8*
  %9329 = load i64, i64* %PC
  %9330 = add i64 %9329, 9
  store i64 %9330, i64* %PC
  %9331 = bitcast i8* %9328 to double*
  %9332 = load double, double* %9331, align 1
  store double %9332, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %9333 = load i64, i64* %PC
  %9334 = add i64 %9333, 7570
  %9335 = load i64, i64* %PC
  %9336 = add i64 %9335, 5
  %9337 = load i64, i64* %PC
  %9338 = add i64 %9337, 5
  store i64 %9338, i64* %PC
  %9339 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9340 = load i64, i64* %9339, align 8, !tbaa !2428
  %9341 = add i64 %9340, -8
  %9342 = inttoptr i64 %9341 to i64*
  store i64 %9336, i64* %9342
  store i64 %9341, i64* %9339, align 8, !tbaa !2428
  %9343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9334, i64* %9343, align 8, !tbaa !2428
  %9344 = load i64, i64* %PC
  %9345 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %9344, %struct.Memory* %MEMORY.5)
  %9346 = load i64, i64* %RBP
  %9347 = sub i64 %9346, 72
  %9348 = load i64, i64* %PC
  %9349 = add i64 %9348, 8
  store i64 %9349, i64* %PC
  %9350 = inttoptr i64 %9347 to i64*
  store i64 1, i64* %9350
  %9351 = load i64, i64* %RBP
  %9352 = sub i64 %9351, 124
  %9353 = load i32, i32* %EAX
  %9354 = zext i32 %9353 to i64
  %9355 = load i64, i64* %PC
  %9356 = add i64 %9355, 3
  store i64 %9356, i64* %PC
  %9357 = inttoptr i64 %9352 to i32*
  store i32 %9353, i32* %9357
  br label %block_40085e

block_4008c8:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %9358 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9359 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9360 = bitcast %union.vec128_t* %XMM0 to i8*
  %9361 = load i64, i64* %PC
  %9362 = add i64 %9361, 3
  store i64 %9362, i64* %PC
  %9363 = bitcast i8* %9359 to i64*
  %9364 = load i64, i64* %9363, align 1
  %9365 = getelementptr inbounds i8, i8* %9359, i64 8
  %9366 = bitcast i8* %9365 to i64*
  %9367 = load i64, i64* %9366, align 1
  %9368 = bitcast i8* %9360 to i64*
  %9369 = load i64, i64* %9368, align 1
  %9370 = getelementptr inbounds i8, i8* %9360, i64 8
  %9371 = bitcast i8* %9370 to i64*
  %9372 = load i64, i64* %9371, align 1
  %9373 = xor i64 %9369, %9364
  %9374 = xor i64 %9372, %9367
  %9375 = trunc i64 %9373 to i32
  %9376 = lshr i64 %9373, 32
  %9377 = trunc i64 %9376 to i32
  %9378 = bitcast i8* %9358 to i32*
  store i32 %9375, i32* %9378, align 1, !tbaa !2454
  %9379 = getelementptr inbounds i8, i8* %9358, i64 4
  %9380 = bitcast i8* %9379 to i32*
  store i32 %9377, i32* %9380, align 1, !tbaa !2454
  %9381 = trunc i64 %9374 to i32
  %9382 = getelementptr inbounds i8, i8* %9358, i64 8
  %9383 = bitcast i8* %9382 to i32*
  store i32 %9381, i32* %9383, align 1, !tbaa !2454
  %9384 = lshr i64 %9374, 32
  %9385 = trunc i64 %9384 to i32
  %9386 = getelementptr inbounds i8, i8* %9358, i64 12
  %9387 = bitcast i8* %9386 to i32*
  store i32 %9385, i32* %9387, align 1, !tbaa !2454
  %9388 = bitcast %union.vec128_t* %XMM0 to i8*
  %9389 = load i64, i64* %PC
  %9390 = add i64 %9389, 9
  store i64 %9390, i64* %PC
  %9391 = bitcast i8* %9388 to double*
  %9392 = load double, double* %9391, align 1
  store double %9392, double* bitcast (%nulltime_type* @nulltime to double*)
  br label %block_4008d4

block_40081c:                                     ; preds = %block_4007e5
  %9393 = sub i64 %3823, 374
  %9394 = load i64, i64* %PC
  %9395 = add i64 %9394, 5
  store i64 %9395, i64* %PC
  %9396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9393, i64* %9396, align 8, !tbaa !2428
  br label %block_4006a6

block_4011aa:                                     ; preds = %block_401195
  %9397 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9398 = load i64, i64* %RBP
  %9399 = sub i64 %9398, 72
  %9400 = load i64, i64* %PC
  %9401 = add i64 %9400, 6
  store i64 %9401, i64* %PC
  %9402 = inttoptr i64 %9399 to i64*
  %9403 = load i64, i64* %9402
  %9404 = sitofp i64 %9403 to double
  %9405 = bitcast i8* %9397 to double*
  store double %9404, double* %9405, align 1, !tbaa !2452
  %9406 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9407 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9408 = load i64, i64* %RBP
  %9409 = sub i64 %9408, 48
  %9410 = load i64, i64* %PC
  %9411 = add i64 %9410, 5
  store i64 %9411, i64* %PC
  %9412 = bitcast i8* %9407 to double*
  %9413 = load double, double* %9412, align 1
  %9414 = getelementptr inbounds i8, i8* %9407, i64 8
  %9415 = bitcast i8* %9414 to i64*
  %9416 = load i64, i64* %9415, align 1
  %9417 = inttoptr i64 %9409 to double*
  %9418 = load double, double* %9417
  %9419 = fmul double %9413, %9418
  %9420 = bitcast i8* %9406 to double*
  store double %9419, double* %9420, align 1, !tbaa !2452
  %9421 = getelementptr inbounds i8, i8* %9406, i64 8
  %9422 = bitcast i8* %9421 to i64*
  store i64 %9416, i64* %9422, align 1, !tbaa !2452
  %9423 = load i64, i64* %RBP
  %9424 = sub i64 %9423, 24
  %9425 = bitcast %union.vec128_t* %XMM0 to i8*
  %9426 = load i64, i64* %PC
  %9427 = add i64 %9426, 5
  store i64 %9427, i64* %PC
  %9428 = bitcast i8* %9425 to double*
  %9429 = load double, double* %9428, align 1
  %9430 = inttoptr i64 %9424 to double*
  store double %9429, double* %9430
  %9431 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9432 = load i64, i64* %RBP
  %9433 = sub i64 %9432, 24
  %9434 = load i64, i64* %PC
  %9435 = add i64 %9434, 5
  store i64 %9435, i64* %PC
  %9436 = inttoptr i64 %9433 to double*
  %9437 = load double, double* %9436
  %9438 = bitcast i8* %9431 to double*
  store double %9437, double* %9438, align 1, !tbaa !2452
  %9439 = getelementptr inbounds i8, i8* %9431, i64 8
  %9440 = bitcast i8* %9439 to double*
  store double 0.000000e+00, double* %9440, align 1, !tbaa !2452
  %9441 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9442 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9443 = load i64, i64* %RBP
  %9444 = sub i64 %9443, 24
  %9445 = load i64, i64* %PC
  %9446 = add i64 %9445, 5
  store i64 %9446, i64* %PC
  %9447 = bitcast i8* %9442 to double*
  %9448 = load double, double* %9447, align 1
  %9449 = getelementptr inbounds i8, i8* %9442, i64 8
  %9450 = bitcast i8* %9449 to i64*
  %9451 = load i64, i64* %9450, align 1
  %9452 = inttoptr i64 %9444 to double*
  %9453 = load double, double* %9452
  %9454 = fmul double %9448, %9453
  %9455 = bitcast i8* %9441 to double*
  store double %9454, double* %9455, align 1, !tbaa !2452
  %9456 = getelementptr inbounds i8, i8* %9441, i64 8
  %9457 = bitcast i8* %9456 to i64*
  store i64 %9451, i64* %9457, align 1, !tbaa !2452
  %9458 = load i64, i64* %RBP
  %9459 = sub i64 %9458, 40
  %9460 = bitcast %union.vec128_t* %XMM0 to i8*
  %9461 = load i64, i64* %PC
  %9462 = add i64 %9461, 5
  store i64 %9462, i64* %PC
  %9463 = bitcast i8* %9460 to double*
  %9464 = load double, double* %9463, align 1
  %9465 = inttoptr i64 %9459 to double*
  store double %9464, double* %9465
  %9466 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9467 = load i64, i64* %RBP
  %9468 = sub i64 %9467, 16
  %9469 = load i64, i64* %PC
  %9470 = add i64 %9469, 5
  store i64 %9470, i64* %PC
  %9471 = inttoptr i64 %9468 to double*
  %9472 = load double, double* %9471
  %9473 = bitcast i8* %9466 to double*
  store double %9472, double* %9473, align 1, !tbaa !2452
  %9474 = getelementptr inbounds i8, i8* %9466, i64 8
  %9475 = bitcast i8* %9474 to double*
  store double 0.000000e+00, double* %9475, align 1, !tbaa !2452
  %9476 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9477 = load i64, i64* %RBP
  %9478 = sub i64 %9477, 40
  %9479 = load i64, i64* %PC
  %9480 = add i64 %9479, 5
  store i64 %9480, i64* %PC
  %9481 = inttoptr i64 %9478 to double*
  %9482 = load double, double* %9481
  %9483 = bitcast i8* %9476 to double*
  store double %9482, double* %9483, align 1, !tbaa !2452
  %9484 = getelementptr inbounds i8, i8* %9476, i64 8
  %9485 = bitcast i8* %9484 to double*
  store double 0.000000e+00, double* %9485, align 1, !tbaa !2452
  %9486 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9487 = load i64, i64* %RBP
  %9488 = sub i64 %9487, 40
  %9489 = load i64, i64* %PC
  %9490 = add i64 %9489, 5
  store i64 %9490, i64* %PC
  %9491 = inttoptr i64 %9488 to double*
  %9492 = load double, double* %9491
  %9493 = bitcast i8* %9486 to double*
  store double %9492, double* %9493, align 1, !tbaa !2452
  %9494 = getelementptr inbounds i8, i8* %9486, i64 8
  %9495 = bitcast i8* %9494 to double*
  store double 0.000000e+00, double* %9495, align 1, !tbaa !2452
  %9496 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9497 = load i64, i64* %RBP
  %9498 = sub i64 %9497, 40
  %9499 = load i64, i64* %PC
  %9500 = add i64 %9499, 5
  store i64 %9500, i64* %PC
  %9501 = inttoptr i64 %9498 to double*
  %9502 = load double, double* %9501
  %9503 = bitcast i8* %9496 to double*
  store double %9502, double* %9503, align 1, !tbaa !2452
  %9504 = getelementptr inbounds i8, i8* %9496, i64 8
  %9505 = bitcast i8* %9504 to double*
  store double 0.000000e+00, double* %9505, align 1, !tbaa !2452
  %9506 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9507 = load i64, i64* %RBP
  %9508 = sub i64 %9507, 40
  %9509 = load i64, i64* %PC
  %9510 = add i64 %9509, 5
  store i64 %9510, i64* %PC
  %9511 = inttoptr i64 %9508 to double*
  %9512 = load double, double* %9511
  %9513 = bitcast i8* %9506 to double*
  store double %9512, double* %9513, align 1, !tbaa !2452
  %9514 = getelementptr inbounds i8, i8* %9506, i64 8
  %9515 = bitcast i8* %9514 to double*
  store double 0.000000e+00, double* %9515, align 1, !tbaa !2452
  %9516 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %9517 = load i64, i64* %RBP
  %9518 = sub i64 %9517, 40
  %9519 = load i64, i64* %PC
  %9520 = add i64 %9519, 5
  store i64 %9520, i64* %PC
  %9521 = inttoptr i64 %9518 to double*
  %9522 = load double, double* %9521
  %9523 = bitcast i8* %9516 to double*
  store double %9522, double* %9523, align 1, !tbaa !2452
  %9524 = getelementptr inbounds i8, i8* %9516, i64 8
  %9525 = bitcast i8* %9524 to double*
  store double 0.000000e+00, double* %9525, align 1, !tbaa !2452
  %9526 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %9527 = load i64, i64* %PC
  %9528 = add i64 %9527, 9
  store i64 %9528, i64* %PC
  %9529 = load double, double* bitcast (%B6_type* @B6 to double*)
  %9530 = bitcast i8* %9526 to double*
  store double %9529, double* %9530, align 1, !tbaa !2452
  %9531 = getelementptr inbounds i8, i8* %9526, i64 8
  %9532 = bitcast i8* %9531 to double*
  store double 0.000000e+00, double* %9532, align 1, !tbaa !2452
  %9533 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %9534 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %9535 = load i64, i64* %RBP
  %9536 = sub i64 %9535, 40
  %9537 = load i64, i64* %PC
  %9538 = add i64 %9537, 5
  store i64 %9538, i64* %PC
  %9539 = bitcast i8* %9534 to double*
  %9540 = load double, double* %9539, align 1
  %9541 = getelementptr inbounds i8, i8* %9534, i64 8
  %9542 = bitcast i8* %9541 to i64*
  %9543 = load i64, i64* %9542, align 1
  %9544 = inttoptr i64 %9536 to double*
  %9545 = load double, double* %9544
  %9546 = fmul double %9540, %9545
  %9547 = bitcast i8* %9533 to double*
  store double %9546, double* %9547, align 1, !tbaa !2452
  %9548 = getelementptr inbounds i8, i8* %9533, i64 8
  %9549 = bitcast i8* %9548 to i64*
  store i64 %9543, i64* %9549, align 1, !tbaa !2452
  %9550 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %9551 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %9552 = load i64, i64* %PC
  %9553 = add i64 %9552, 9
  store i64 %9553, i64* %PC
  %9554 = bitcast i8* %9551 to double*
  %9555 = load double, double* %9554, align 1
  %9556 = getelementptr inbounds i8, i8* %9551, i64 8
  %9557 = bitcast i8* %9556 to i64*
  %9558 = load i64, i64* %9557, align 1
  %9559 = load double, double* bitcast (%B5_type* @B5 to double*)
  %9560 = fadd double %9555, %9559
  %9561 = bitcast i8* %9550 to double*
  store double %9560, double* %9561, align 1, !tbaa !2452
  %9562 = getelementptr inbounds i8, i8* %9550, i64 8
  %9563 = bitcast i8* %9562 to i64*
  store i64 %9558, i64* %9563, align 1, !tbaa !2452
  %9564 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %9565 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %9566 = bitcast %union.vec128_t* %XMM6 to i8*
  %9567 = load i64, i64* %PC
  %9568 = add i64 %9567, 4
  store i64 %9568, i64* %PC
  %9569 = bitcast i8* %9565 to double*
  %9570 = load double, double* %9569, align 1
  %9571 = getelementptr inbounds i8, i8* %9565, i64 8
  %9572 = bitcast i8* %9571 to i64*
  %9573 = load i64, i64* %9572, align 1
  %9574 = bitcast i8* %9566 to double*
  %9575 = load double, double* %9574, align 1
  %9576 = fmul double %9570, %9575
  %9577 = bitcast i8* %9564 to double*
  store double %9576, double* %9577, align 1, !tbaa !2452
  %9578 = getelementptr inbounds i8, i8* %9564, i64 8
  %9579 = bitcast i8* %9578 to i64*
  store i64 %9573, i64* %9579, align 1, !tbaa !2452
  %9580 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %9581 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %9582 = load i64, i64* %PC
  %9583 = add i64 %9582, 9
  store i64 %9583, i64* %PC
  %9584 = bitcast i8* %9581 to double*
  %9585 = load double, double* %9584, align 1
  %9586 = getelementptr inbounds i8, i8* %9581, i64 8
  %9587 = bitcast i8* %9586 to i64*
  %9588 = load i64, i64* %9587, align 1
  %9589 = load double, double* bitcast (%B4_type* @B4 to double*)
  %9590 = fadd double %9585, %9589
  %9591 = bitcast i8* %9580 to double*
  store double %9590, double* %9591, align 1, !tbaa !2452
  %9592 = getelementptr inbounds i8, i8* %9580, i64 8
  %9593 = bitcast i8* %9592 to i64*
  store i64 %9588, i64* %9593, align 1, !tbaa !2452
  %9594 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9595 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9596 = bitcast %union.vec128_t* %XMM5 to i8*
  %9597 = load i64, i64* %PC
  %9598 = add i64 %9597, 4
  store i64 %9598, i64* %PC
  %9599 = bitcast i8* %9595 to double*
  %9600 = load double, double* %9599, align 1
  %9601 = getelementptr inbounds i8, i8* %9595, i64 8
  %9602 = bitcast i8* %9601 to i64*
  %9603 = load i64, i64* %9602, align 1
  %9604 = bitcast i8* %9596 to double*
  %9605 = load double, double* %9604, align 1
  %9606 = fmul double %9600, %9605
  %9607 = bitcast i8* %9594 to double*
  store double %9606, double* %9607, align 1, !tbaa !2452
  %9608 = getelementptr inbounds i8, i8* %9594, i64 8
  %9609 = bitcast i8* %9608 to i64*
  store i64 %9603, i64* %9609, align 1, !tbaa !2452
  %9610 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9611 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9612 = load i64, i64* %PC
  %9613 = add i64 %9612, 9
  store i64 %9613, i64* %PC
  %9614 = bitcast i8* %9611 to double*
  %9615 = load double, double* %9614, align 1
  %9616 = getelementptr inbounds i8, i8* %9611, i64 8
  %9617 = bitcast i8* %9616 to i64*
  %9618 = load i64, i64* %9617, align 1
  %9619 = load double, double* bitcast (%B3_type* @B3 to double*)
  %9620 = fadd double %9615, %9619
  %9621 = bitcast i8* %9610 to double*
  store double %9620, double* %9621, align 1, !tbaa !2452
  %9622 = getelementptr inbounds i8, i8* %9610, i64 8
  %9623 = bitcast i8* %9622 to i64*
  store i64 %9618, i64* %9623, align 1, !tbaa !2452
  %9624 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9625 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9626 = bitcast %union.vec128_t* %XMM4 to i8*
  %9627 = load i64, i64* %PC
  %9628 = add i64 %9627, 4
  store i64 %9628, i64* %PC
  %9629 = bitcast i8* %9625 to double*
  %9630 = load double, double* %9629, align 1
  %9631 = getelementptr inbounds i8, i8* %9625, i64 8
  %9632 = bitcast i8* %9631 to i64*
  %9633 = load i64, i64* %9632, align 1
  %9634 = bitcast i8* %9626 to double*
  %9635 = load double, double* %9634, align 1
  %9636 = fmul double %9630, %9635
  %9637 = bitcast i8* %9624 to double*
  store double %9636, double* %9637, align 1, !tbaa !2452
  %9638 = getelementptr inbounds i8, i8* %9624, i64 8
  %9639 = bitcast i8* %9638 to i64*
  store i64 %9633, i64* %9639, align 1, !tbaa !2452
  %9640 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9641 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9642 = load i64, i64* %PC
  %9643 = add i64 %9642, 9
  store i64 %9643, i64* %PC
  %9644 = bitcast i8* %9641 to double*
  %9645 = load double, double* %9644, align 1
  %9646 = getelementptr inbounds i8, i8* %9641, i64 8
  %9647 = bitcast i8* %9646 to i64*
  %9648 = load i64, i64* %9647, align 1
  %9649 = load double, double* bitcast (%B2_type* @B2 to double*)
  %9650 = fadd double %9645, %9649
  %9651 = bitcast i8* %9640 to double*
  store double %9650, double* %9651, align 1, !tbaa !2452
  %9652 = getelementptr inbounds i8, i8* %9640, i64 8
  %9653 = bitcast i8* %9652 to i64*
  store i64 %9648, i64* %9653, align 1, !tbaa !2452
  %9654 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9655 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9656 = bitcast %union.vec128_t* %XMM3 to i8*
  %9657 = load i64, i64* %PC
  %9658 = add i64 %9657, 4
  store i64 %9658, i64* %PC
  %9659 = bitcast i8* %9655 to double*
  %9660 = load double, double* %9659, align 1
  %9661 = getelementptr inbounds i8, i8* %9655, i64 8
  %9662 = bitcast i8* %9661 to i64*
  %9663 = load i64, i64* %9662, align 1
  %9664 = bitcast i8* %9656 to double*
  %9665 = load double, double* %9664, align 1
  %9666 = fmul double %9660, %9665
  %9667 = bitcast i8* %9654 to double*
  store double %9666, double* %9667, align 1, !tbaa !2452
  %9668 = getelementptr inbounds i8, i8* %9654, i64 8
  %9669 = bitcast i8* %9668 to i64*
  store i64 %9663, i64* %9669, align 1, !tbaa !2452
  %9670 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9671 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9672 = load i64, i64* %PC
  %9673 = add i64 %9672, 9
  store i64 %9673, i64* %PC
  %9674 = bitcast i8* %9671 to double*
  %9675 = load double, double* %9674, align 1
  %9676 = getelementptr inbounds i8, i8* %9671, i64 8
  %9677 = bitcast i8* %9676 to i64*
  %9678 = load i64, i64* %9677, align 1
  %9679 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %9680 = fadd double %9675, %9679
  %9681 = bitcast i8* %9670 to double*
  store double %9680, double* %9681, align 1, !tbaa !2452
  %9682 = getelementptr inbounds i8, i8* %9670, i64 8
  %9683 = bitcast i8* %9682 to i64*
  store i64 %9678, i64* %9683, align 1, !tbaa !2452
  %9684 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9685 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9686 = bitcast %union.vec128_t* %XMM2 to i8*
  %9687 = load i64, i64* %PC
  %9688 = add i64 %9687, 4
  store i64 %9688, i64* %PC
  %9689 = bitcast i8* %9685 to double*
  %9690 = load double, double* %9689, align 1
  %9691 = getelementptr inbounds i8, i8* %9685, i64 8
  %9692 = bitcast i8* %9691 to i64*
  %9693 = load i64, i64* %9692, align 1
  %9694 = bitcast i8* %9686 to double*
  %9695 = load double, double* %9694, align 1
  %9696 = fmul double %9690, %9695
  %9697 = bitcast i8* %9684 to double*
  store double %9696, double* %9697, align 1, !tbaa !2452
  %9698 = getelementptr inbounds i8, i8* %9684, i64 8
  %9699 = bitcast i8* %9698 to i64*
  store i64 %9693, i64* %9699, align 1, !tbaa !2452
  %9700 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9701 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9702 = bitcast %union.vec128_t* %XMM1 to i8*
  %9703 = load i64, i64* %PC
  %9704 = add i64 %9703, 4
  store i64 %9704, i64* %PC
  %9705 = bitcast i8* %9701 to double*
  %9706 = load double, double* %9705, align 1
  %9707 = getelementptr inbounds i8, i8* %9701, i64 8
  %9708 = bitcast i8* %9707 to i64*
  %9709 = load i64, i64* %9708, align 1
  %9710 = bitcast i8* %9702 to double*
  %9711 = load double, double* %9710, align 1
  %9712 = fadd double %9706, %9711
  %9713 = bitcast i8* %9700 to double*
  store double %9712, double* %9713, align 1, !tbaa !2452
  %9714 = getelementptr inbounds i8, i8* %9700, i64 8
  %9715 = bitcast i8* %9714 to i64*
  store i64 %9709, i64* %9715, align 1, !tbaa !2452
  %9716 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9717 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9718 = load i64, i64* %PC
  %9719 = add i64 %9718, 9
  store i64 %9719, i64* %PC
  %9720 = bitcast i8* %9717 to double*
  %9721 = load double, double* %9720, align 1
  %9722 = getelementptr inbounds i8, i8* %9717, i64 8
  %9723 = bitcast i8* %9722 to i64*
  %9724 = load i64, i64* %9723, align 1
  %9725 = load double, double* bitcast (%one_type* @one to double*)
  %9726 = fadd double %9721, %9725
  %9727 = bitcast i8* %9716 to double*
  store double %9726, double* %9727, align 1, !tbaa !2452
  %9728 = getelementptr inbounds i8, i8* %9716, i64 8
  %9729 = bitcast i8* %9728 to i64*
  store i64 %9724, i64* %9729, align 1, !tbaa !2452
  %9730 = load i64, i64* %RBP
  %9731 = sub i64 %9730, 16
  %9732 = bitcast %union.vec128_t* %XMM0 to i8*
  %9733 = load i64, i64* %PC
  %9734 = add i64 %9733, 5
  store i64 %9734, i64* %PC
  %9735 = bitcast i8* %9732 to double*
  %9736 = load double, double* %9735, align 1
  %9737 = inttoptr i64 %9731 to double*
  store double %9736, double* %9737
  %9738 = load i64, i64* %RBP
  %9739 = sub i64 %9738, 72
  %9740 = load i64, i64* %PC
  %9741 = add i64 %9740, 4
  store i64 %9741, i64* %PC
  %9742 = inttoptr i64 %9739 to i64*
  %9743 = load i64, i64* %9742
  store i64 %9743, i64* %RAX, align 8, !tbaa !2428
  %9744 = load i64, i64* %RAX
  %9745 = load i64, i64* %PC
  %9746 = add i64 %9745, 4
  store i64 %9746, i64* %PC
  %9747 = add i64 1, %9744
  store i64 %9747, i64* %RAX, align 8, !tbaa !2428
  %9748 = icmp ult i64 %9747, %9744
  %9749 = icmp ult i64 %9747, 1
  %9750 = or i1 %9748, %9749
  %9751 = zext i1 %9750 to i8
  %9752 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9751, i8* %9752, align 1, !tbaa !2432
  %9753 = trunc i64 %9747 to i32
  %9754 = and i32 %9753, 255
  %9755 = call i32 @llvm.ctpop.i32(i32 %9754) #16
  %9756 = trunc i32 %9755 to i8
  %9757 = and i8 %9756, 1
  %9758 = xor i8 %9757, 1
  %9759 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9758, i8* %9759, align 1, !tbaa !2446
  %9760 = xor i64 1, %9744
  %9761 = xor i64 %9760, %9747
  %9762 = lshr i64 %9761, 4
  %9763 = trunc i64 %9762 to i8
  %9764 = and i8 %9763, 1
  %9765 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9764, i8* %9765, align 1, !tbaa !2450
  %9766 = icmp eq i64 %9747, 0
  %9767 = zext i1 %9766 to i8
  %9768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9767, i8* %9768, align 1, !tbaa !2447
  %9769 = lshr i64 %9747, 63
  %9770 = trunc i64 %9769 to i8
  %9771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9770, i8* %9771, align 1, !tbaa !2448
  %9772 = lshr i64 %9744, 63
  %9773 = xor i64 %9769, %9772
  %9774 = add nuw nsw i64 %9773, %9769
  %9775 = icmp eq i64 %9774, 2
  %9776 = zext i1 %9775 to i8
  %9777 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9776, i8* %9777, align 1, !tbaa !2449
  %9778 = load i64, i64* %RBP
  %9779 = sub i64 %9778, 72
  %9780 = load i64, i64* %RAX
  %9781 = load i64, i64* %PC
  %9782 = add i64 %9781, 4
  store i64 %9782, i64* %PC
  %9783 = inttoptr i64 %9779 to i64*
  store i64 %9780, i64* %9783
  %9784 = load i64, i64* %PC
  %9785 = sub i64 %9784, 191
  %9786 = load i64, i64* %PC
  %9787 = add i64 %9786, 5
  store i64 %9787, i64* %PC
  %9788 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9785, i64* %9788, align 8, !tbaa !2428
  br label %block_401195

block_400817:                                     ; preds = %block_4007e5
  %9789 = add i64 %3823, 10
  %9790 = load i64, i64* %PC
  %9791 = add i64 %9790, 5
  store i64 %9791, i64* %PC
  %9792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9789, i64* %9792, align 8, !tbaa !2428
  br label %block_400821

block_400873:                                     ; preds = %block_40085e
  %9793 = add i64 %12222, 5
  %9794 = load i64, i64* %PC
  %9795 = add i64 %9794, 5
  store i64 %9795, i64* %PC
  %9796 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9793, i64* %9796, align 8, !tbaa !2428
  %9797 = load i64, i64* %RBP
  %9798 = sub i64 %9797, 72
  %9799 = load i64, i64* %PC
  %9800 = add i64 %9799, 4
  store i64 %9800, i64* %PC
  %9801 = inttoptr i64 %9798 to i64*
  %9802 = load i64, i64* %9801
  store i64 %9802, i64* %RAX, align 8, !tbaa !2428
  %9803 = load i64, i64* %RAX
  %9804 = load i64, i64* %PC
  %9805 = add i64 %9804, 4
  store i64 %9805, i64* %PC
  %9806 = add i64 1, %9803
  store i64 %9806, i64* %RAX, align 8, !tbaa !2428
  %9807 = icmp ult i64 %9806, %9803
  %9808 = icmp ult i64 %9806, 1
  %9809 = or i1 %9807, %9808
  %9810 = zext i1 %9809 to i8
  %9811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9810, i8* %9811, align 1, !tbaa !2432
  %9812 = trunc i64 %9806 to i32
  %9813 = and i32 %9812, 255
  %9814 = call i32 @llvm.ctpop.i32(i32 %9813) #16
  %9815 = trunc i32 %9814 to i8
  %9816 = and i8 %9815, 1
  %9817 = xor i8 %9816, 1
  %9818 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9817, i8* %9818, align 1, !tbaa !2446
  %9819 = xor i64 1, %9803
  %9820 = xor i64 %9819, %9806
  %9821 = lshr i64 %9820, 4
  %9822 = trunc i64 %9821 to i8
  %9823 = and i8 %9822, 1
  %9824 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9823, i8* %9824, align 1, !tbaa !2450
  %9825 = icmp eq i64 %9806, 0
  %9826 = zext i1 %9825 to i8
  %9827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9826, i8* %9827, align 1, !tbaa !2447
  %9828 = lshr i64 %9806, 63
  %9829 = trunc i64 %9828 to i8
  %9830 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9829, i8* %9830, align 1, !tbaa !2448
  %9831 = lshr i64 %9803, 63
  %9832 = xor i64 %9828, %9831
  %9833 = add nuw nsw i64 %9832, %9828
  %9834 = icmp eq i64 %9833, 2
  %9835 = zext i1 %9834 to i8
  %9836 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9835, i8* %9836, align 1, !tbaa !2449
  %9837 = load i64, i64* %RBP
  %9838 = sub i64 %9837, 72
  %9839 = load i64, i64* %RAX
  %9840 = load i64, i64* %PC
  %9841 = add i64 %9840, 4
  store i64 %9841, i64* %PC
  %9842 = inttoptr i64 %9838 to i64*
  store i64 %9839, i64* %9842
  %9843 = load i64, i64* %PC
  %9844 = sub i64 %9843, 38
  %9845 = load i64, i64* %PC
  %9846 = add i64 %9845, 5
  store i64 %9846, i64* %PC
  %9847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9844, i64* %9847, align 8, !tbaa !2428
  br label %block_40085e

block_40071b:                                     ; preds = %block_400730, %block_4006c2
  %MEMORY.6 = phi %struct.Memory* [ %7706, %block_4006c2 ], [ %MEMORY.6, %block_400730 ]
  %9848 = load i64, i64* %RBP
  %9849 = sub i64 %9848, 72
  %9850 = load i64, i64* %PC
  %9851 = add i64 %9850, 4
  store i64 %9851, i64* %PC
  %9852 = inttoptr i64 %9849 to i64*
  %9853 = load i64, i64* %9852
  store i64 %9853, i64* %RAX, align 8, !tbaa !2428
  %9854 = load i64, i64* %RBP
  %9855 = sub i64 %9854, 88
  %9856 = load i64, i64* %PC
  %9857 = add i64 %9856, 4
  store i64 %9857, i64* %PC
  %9858 = inttoptr i64 %9855 to i64*
  %9859 = load i64, i64* %9858
  store i64 %9859, i64* %RCX, align 8, !tbaa !2428
  %9860 = load i64, i64* %RCX
  %9861 = load i64, i64* %PC
  %9862 = add i64 %9861, 4
  store i64 %9862, i64* %PC
  %9863 = sub i64 %9860, 1
  store i64 %9863, i64* %RCX, align 8, !tbaa !2428
  %9864 = icmp ult i64 %9860, 1
  %9865 = zext i1 %9864 to i8
  %9866 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9865, i8* %9866, align 1, !tbaa !2432
  %9867 = trunc i64 %9863 to i32
  %9868 = and i32 %9867, 255
  %9869 = call i32 @llvm.ctpop.i32(i32 %9868) #16
  %9870 = trunc i32 %9869 to i8
  %9871 = and i8 %9870, 1
  %9872 = xor i8 %9871, 1
  %9873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9872, i8* %9873, align 1, !tbaa !2446
  %9874 = xor i64 1, %9860
  %9875 = xor i64 %9874, %9863
  %9876 = lshr i64 %9875, 4
  %9877 = trunc i64 %9876 to i8
  %9878 = and i8 %9877, 1
  %9879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9878, i8* %9879, align 1, !tbaa !2450
  %9880 = icmp eq i64 %9863, 0
  %9881 = zext i1 %9880 to i8
  %9882 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9881, i8* %9882, align 1, !tbaa !2447
  %9883 = lshr i64 %9863, 63
  %9884 = trunc i64 %9883 to i8
  %9885 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9884, i8* %9885, align 1, !tbaa !2448
  %9886 = lshr i64 %9860, 63
  %9887 = xor i64 %9883, %9886
  %9888 = add nuw nsw i64 %9887, %9886
  %9889 = icmp eq i64 %9888, 2
  %9890 = zext i1 %9889 to i8
  %9891 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9890, i8* %9891, align 1, !tbaa !2449
  %9892 = load i64, i64* %RAX
  %9893 = load i64, i64* %RCX
  %9894 = load i64, i64* %PC
  %9895 = add i64 %9894, 3
  store i64 %9895, i64* %PC
  %9896 = sub i64 %9892, %9893
  %9897 = icmp ult i64 %9892, %9893
  %9898 = zext i1 %9897 to i8
  %9899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9898, i8* %9899, align 1, !tbaa !2432
  %9900 = trunc i64 %9896 to i32
  %9901 = and i32 %9900, 255
  %9902 = call i32 @llvm.ctpop.i32(i32 %9901) #16
  %9903 = trunc i32 %9902 to i8
  %9904 = and i8 %9903, 1
  %9905 = xor i8 %9904, 1
  %9906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9905, i8* %9906, align 1, !tbaa !2446
  %9907 = xor i64 %9893, %9892
  %9908 = xor i64 %9907, %9896
  %9909 = lshr i64 %9908, 4
  %9910 = trunc i64 %9909 to i8
  %9911 = and i8 %9910, 1
  %9912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9911, i8* %9912, align 1, !tbaa !2450
  %9913 = icmp eq i64 %9896, 0
  %9914 = zext i1 %9913 to i8
  %9915 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9914, i8* %9915, align 1, !tbaa !2447
  %9916 = lshr i64 %9896, 63
  %9917 = trunc i64 %9916 to i8
  %9918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9917, i8* %9918, align 1, !tbaa !2448
  %9919 = lshr i64 %9892, 63
  %9920 = lshr i64 %9893, 63
  %9921 = xor i64 %9920, %9919
  %9922 = xor i64 %9916, %9919
  %9923 = add nuw nsw i64 %9922, %9921
  %9924 = icmp eq i64 %9923, 2
  %9925 = zext i1 %9924 to i8
  %9926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9925, i8* %9926, align 1, !tbaa !2449
  %9927 = load i64, i64* %PC
  %9928 = add i64 %9927, 187
  %9929 = load i64, i64* %PC
  %9930 = add i64 %9929, 6
  %9931 = load i64, i64* %PC
  %9932 = add i64 %9931, 6
  store i64 %9932, i64* %PC
  %9933 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9934 = load i8, i8* %9933, align 1, !tbaa !2447
  %9935 = icmp eq i8 %9934, 0
  %9936 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9937 = load i8, i8* %9936, align 1, !tbaa !2448
  %9938 = icmp ne i8 %9937, 0
  %9939 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9940 = load i8, i8* %9939, align 1, !tbaa !2449
  %9941 = icmp ne i8 %9940, 0
  %9942 = xor i1 %9938, %9941
  %9943 = xor i1 %9942, true
  %9944 = and i1 %9935, %9943
  %9945 = zext i1 %9944 to i8
  store i8 %9945, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9946 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9947 = select i1 %9944, i64 %9928, i64 %9930
  store i64 %9947, i64* %9946, align 8, !tbaa !2428
  %9948 = load i8, i8* %BRANCH_TAKEN
  %9949 = icmp eq i8 %9948, 1
  br i1 %9949, label %block_4007e5, label %block_400730

block_401a16:                                     ; preds = %block_4018de
  %9950 = load i64, i64* %PC
  %9951 = add i64 %9950, 10
  store i64 %9951, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %9952 = load i64, i64* %PC
  %9953 = add i64 %9952, 3008
  %9954 = load i64, i64* %PC
  %9955 = add i64 %9954, 5
  %9956 = load i64, i64* %PC
  %9957 = add i64 %9956, 5
  store i64 %9957, i64* %PC
  %9958 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9959 = load i64, i64* %9958, align 8, !tbaa !2428
  %9960 = add i64 %9959, -8
  %9961 = inttoptr i64 %9960 to i64*
  store i64 %9955, i64* %9961
  store i64 %9960, i64* %9958, align 8, !tbaa !2428
  %9962 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9953, i64* %9962, align 8, !tbaa !2428
  %9963 = load i64, i64* %PC
  %9964 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %9963, %struct.Memory* %MEMORY.2)
  %9965 = load i64, i64* %PC
  %9966 = add i64 %9965, 10
  store i64 %9966, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 570), i64* %RDI, align 8, !tbaa !2428
  %9967 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9968 = load i64, i64* %PC
  %9969 = add i64 %9968, 8
  store i64 %9969, i64* %PC
  %9970 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 72) to double*)
  %9971 = bitcast i8* %9967 to double*
  store double %9970, double* %9971, align 1, !tbaa !2452
  %9972 = getelementptr inbounds i8, i8* %9967, i64 8
  %9973 = bitcast i8* %9972 to double*
  store double 0.000000e+00, double* %9973, align 1, !tbaa !2452
  %9974 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9975 = load i64, i64* %PC
  %9976 = add i64 %9975, 8
  store i64 %9976, i64* %PC
  %9977 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 160) to double*)
  %9978 = bitcast i8* %9974 to double*
  store double %9977, double* %9978, align 1, !tbaa !2452
  %9979 = getelementptr inbounds i8, i8* %9974, i64 8
  %9980 = bitcast i8* %9979 to double*
  store double 0.000000e+00, double* %9980, align 1, !tbaa !2452
  %9981 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9982 = load i64, i64* %PC
  %9983 = add i64 %9982, 8
  store i64 %9983, i64* %PC
  %9984 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 144) to double*)
  %9985 = bitcast i8* %9981 to double*
  store double %9984, double* %9985, align 1, !tbaa !2452
  %9986 = getelementptr inbounds i8, i8* %9981, i64 8
  %9987 = bitcast i8* %9986 to double*
  store double 0.000000e+00, double* %9987, align 1, !tbaa !2452
  %9988 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9989 = load i64, i64* %PC
  %9990 = add i64 %9989, 9
  store i64 %9990, i64* %PC
  %9991 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %9992 = bitcast i8* %9988 to double*
  store double %9991, double* %9992, align 1, !tbaa !2452
  %9993 = getelementptr inbounds i8, i8* %9988, i64 8
  %9994 = bitcast i8* %9993 to double*
  store double 0.000000e+00, double* %9994, align 1, !tbaa !2452
  %9995 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9996 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9997 = load i64, i64* %PC
  %9998 = add i64 %9997, 9
  store i64 %9998, i64* %PC
  %9999 = bitcast i8* %9996 to double*
  %10000 = load double, double* %9999, align 1
  %10001 = getelementptr inbounds i8, i8* %9996, i64 8
  %10002 = bitcast i8* %10001 to i64*
  %10003 = load i64, i64* %10002, align 1
  %10004 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %10005 = fmul double %10000, %10004
  %10006 = bitcast i8* %9995 to double*
  store double %10005, double* %10006, align 1, !tbaa !2452
  %10007 = getelementptr inbounds i8, i8* %9995, i64 8
  %10008 = bitcast i8* %10007 to i64*
  store i64 %10003, i64* %10008, align 1, !tbaa !2452
  %10009 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10010 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10011 = load i64, i64* %PC
  %10012 = add i64 %10011, 9
  store i64 %10012, i64* %PC
  %10013 = bitcast i8* %10010 to double*
  %10014 = load double, double* %10013, align 1
  %10015 = getelementptr inbounds i8, i8* %10010, i64 8
  %10016 = bitcast i8* %10015 to i64*
  %10017 = load i64, i64* %10016, align 1
  %10018 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %10019 = fsub double %10014, %10018
  %10020 = bitcast i8* %10009 to double*
  store double %10019, double* %10020, align 1, !tbaa !2452
  %10021 = getelementptr inbounds i8, i8* %10009, i64 8
  %10022 = bitcast i8* %10021 to i64*
  store i64 %10017, i64* %10022, align 1, !tbaa !2452
  %10023 = bitcast %union.vec128_t* %XMM3 to i8*
  %10024 = load i64, i64* %PC
  %10025 = add i64 %10024, 9
  store i64 %10025, i64* %PC
  %10026 = bitcast i8* %10023 to double*
  %10027 = load double, double* %10026, align 1
  store double %10027, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %10028 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10029 = load i64, i64* %PC
  %10030 = add i64 %10029, 9
  store i64 %10030, i64* %PC
  %10031 = load double, double* bitcast (%piref_type* @piref to double*)
  %10032 = bitcast i8* %10028 to double*
  store double %10031, double* %10032, align 1, !tbaa !2452
  %10033 = getelementptr inbounds i8, i8* %10028, i64 8
  %10034 = bitcast i8* %10033 to double*
  store double 0.000000e+00, double* %10034, align 1, !tbaa !2452
  %10035 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10036 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10037 = load i64, i64* %PC
  %10038 = add i64 %10037, 9
  store i64 %10038, i64* %PC
  %10039 = bitcast i8* %10036 to double*
  %10040 = load double, double* %10039, align 1
  %10041 = getelementptr inbounds i8, i8* %10036, i64 8
  %10042 = bitcast i8* %10041 to i64*
  %10043 = load i64, i64* %10042, align 1
  %10044 = load double, double* bitcast (%four_type* @four to double*)
  %10045 = fdiv double %10040, %10044
  %10046 = bitcast i8* %10035 to double*
  store double %10045, double* %10046, align 1, !tbaa !2452
  %10047 = getelementptr inbounds i8, i8* %10035, i64 8
  %10048 = bitcast i8* %10047 to i64*
  store i64 %10043, i64* %10048, align 1, !tbaa !2452
  %10049 = load i64, i64* %RBP
  %10050 = sub i64 %10049, 24
  %10051 = bitcast %union.vec128_t* %XMM3 to i8*
  %10052 = load i64, i64* %PC
  %10053 = add i64 %10052, 5
  store i64 %10053, i64* %PC
  %10054 = bitcast i8* %10051 to double*
  %10055 = load double, double* %10054, align 1
  %10056 = inttoptr i64 %10050 to double*
  store double %10055, double* %10056
  %10057 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10058 = load i64, i64* %RBP
  %10059 = sub i64 %10058, 24
  %10060 = load i64, i64* %PC
  %10061 = add i64 %10060, 5
  store i64 %10061, i64* %PC
  %10062 = inttoptr i64 %10059 to double*
  %10063 = load double, double* %10062
  %10064 = bitcast i8* %10057 to double*
  store double %10063, double* %10064, align 1, !tbaa !2452
  %10065 = getelementptr inbounds i8, i8* %10057, i64 8
  %10066 = bitcast i8* %10065 to double*
  store double 0.000000e+00, double* %10066, align 1, !tbaa !2452
  %10067 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10068 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10069 = load i64, i64* %RBP
  %10070 = sub i64 %10069, 24
  %10071 = load i64, i64* %PC
  %10072 = add i64 %10071, 5
  store i64 %10072, i64* %PC
  %10073 = bitcast i8* %10068 to double*
  %10074 = load double, double* %10073, align 1
  %10075 = getelementptr inbounds i8, i8* %10068, i64 8
  %10076 = bitcast i8* %10075 to i64*
  %10077 = load i64, i64* %10076, align 1
  %10078 = inttoptr i64 %10070 to double*
  %10079 = load double, double* %10078
  %10080 = fmul double %10074, %10079
  %10081 = bitcast i8* %10067 to double*
  store double %10080, double* %10081, align 1, !tbaa !2452
  %10082 = getelementptr inbounds i8, i8* %10067, i64 8
  %10083 = bitcast i8* %10082 to i64*
  store i64 %10077, i64* %10083, align 1, !tbaa !2452
  %10084 = load i64, i64* %RBP
  %10085 = sub i64 %10084, 40
  %10086 = bitcast %union.vec128_t* %XMM3 to i8*
  %10087 = load i64, i64* %PC
  %10088 = add i64 %10087, 5
  store i64 %10088, i64* %PC
  %10089 = bitcast i8* %10086 to double*
  %10090 = load double, double* %10089, align 1
  %10091 = inttoptr i64 %10085 to double*
  store double %10090, double* %10091
  %10092 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10093 = load i64, i64* %RBP
  %10094 = sub i64 %10093, 24
  %10095 = load i64, i64* %PC
  %10096 = add i64 %10095, 5
  store i64 %10096, i64* %PC
  %10097 = inttoptr i64 %10094 to double*
  %10098 = load double, double* %10097
  %10099 = bitcast i8* %10092 to double*
  store double %10098, double* %10099, align 1, !tbaa !2452
  %10100 = getelementptr inbounds i8, i8* %10092, i64 8
  %10101 = bitcast i8* %10100 to double*
  store double 0.000000e+00, double* %10101, align 1, !tbaa !2452
  %10102 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10103 = load i64, i64* %PC
  %10104 = add i64 %10103, 9
  store i64 %10104, i64* %PC
  %10105 = load double, double* bitcast (%A6_type* @A6 to double*)
  %10106 = bitcast i8* %10102 to double*
  store double %10105, double* %10106, align 1, !tbaa !2452
  %10107 = getelementptr inbounds i8, i8* %10102, i64 8
  %10108 = bitcast i8* %10107 to double*
  store double 0.000000e+00, double* %10108, align 1, !tbaa !2452
  %10109 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10110 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10111 = load i64, i64* %RBP
  %10112 = sub i64 %10111, 40
  %10113 = load i64, i64* %PC
  %10114 = add i64 %10113, 5
  store i64 %10114, i64* %PC
  %10115 = bitcast i8* %10110 to double*
  %10116 = load double, double* %10115, align 1
  %10117 = getelementptr inbounds i8, i8* %10110, i64 8
  %10118 = bitcast i8* %10117 to i64*
  %10119 = load i64, i64* %10118, align 1
  %10120 = inttoptr i64 %10112 to double*
  %10121 = load double, double* %10120
  %10122 = fmul double %10116, %10121
  %10123 = bitcast i8* %10109 to double*
  store double %10122, double* %10123, align 1, !tbaa !2452
  %10124 = getelementptr inbounds i8, i8* %10109, i64 8
  %10125 = bitcast i8* %10124 to i64*
  store i64 %10119, i64* %10125, align 1, !tbaa !2452
  %10126 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10127 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10128 = load i64, i64* %PC
  %10129 = add i64 %10128, 9
  store i64 %10129, i64* %PC
  %10130 = bitcast i8* %10127 to double*
  %10131 = load double, double* %10130, align 1
  %10132 = getelementptr inbounds i8, i8* %10127, i64 8
  %10133 = bitcast i8* %10132 to i64*
  %10134 = load i64, i64* %10133, align 1
  %10135 = load double, double* bitcast (%A5_type* @A5 to double*)
  %10136 = fadd double %10131, %10135
  %10137 = bitcast i8* %10126 to double*
  store double %10136, double* %10137, align 1, !tbaa !2452
  %10138 = getelementptr inbounds i8, i8* %10126, i64 8
  %10139 = bitcast i8* %10138 to i64*
  store i64 %10134, i64* %10139, align 1, !tbaa !2452
  %10140 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10141 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10142 = load i64, i64* %RBP
  %10143 = sub i64 %10142, 40
  %10144 = load i64, i64* %PC
  %10145 = add i64 %10144, 5
  store i64 %10145, i64* %PC
  %10146 = bitcast i8* %10141 to double*
  %10147 = load double, double* %10146, align 1
  %10148 = getelementptr inbounds i8, i8* %10141, i64 8
  %10149 = bitcast i8* %10148 to i64*
  %10150 = load i64, i64* %10149, align 1
  %10151 = inttoptr i64 %10143 to double*
  %10152 = load double, double* %10151
  %10153 = fmul double %10147, %10152
  %10154 = bitcast i8* %10140 to double*
  store double %10153, double* %10154, align 1, !tbaa !2452
  %10155 = getelementptr inbounds i8, i8* %10140, i64 8
  %10156 = bitcast i8* %10155 to i64*
  store i64 %10150, i64* %10156, align 1, !tbaa !2452
  %10157 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10158 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10159 = load i64, i64* %PC
  %10160 = add i64 %10159, 9
  store i64 %10160, i64* %PC
  %10161 = bitcast i8* %10158 to double*
  %10162 = load double, double* %10161, align 1
  %10163 = getelementptr inbounds i8, i8* %10158, i64 8
  %10164 = bitcast i8* %10163 to i64*
  %10165 = load i64, i64* %10164, align 1
  %10166 = load double, double* bitcast (%A4_type* @A4 to double*)
  %10167 = fadd double %10162, %10166
  %10168 = bitcast i8* %10157 to double*
  store double %10167, double* %10168, align 1, !tbaa !2452
  %10169 = getelementptr inbounds i8, i8* %10157, i64 8
  %10170 = bitcast i8* %10169 to i64*
  store i64 %10165, i64* %10170, align 1, !tbaa !2452
  %10171 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10172 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10173 = load i64, i64* %RBP
  %10174 = sub i64 %10173, 40
  %10175 = load i64, i64* %PC
  %10176 = add i64 %10175, 5
  store i64 %10176, i64* %PC
  %10177 = bitcast i8* %10172 to double*
  %10178 = load double, double* %10177, align 1
  %10179 = getelementptr inbounds i8, i8* %10172, i64 8
  %10180 = bitcast i8* %10179 to i64*
  %10181 = load i64, i64* %10180, align 1
  %10182 = inttoptr i64 %10174 to double*
  %10183 = load double, double* %10182
  %10184 = fmul double %10178, %10183
  %10185 = bitcast i8* %10171 to double*
  store double %10184, double* %10185, align 1, !tbaa !2452
  %10186 = getelementptr inbounds i8, i8* %10171, i64 8
  %10187 = bitcast i8* %10186 to i64*
  store i64 %10181, i64* %10187, align 1, !tbaa !2452
  %10188 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10189 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10190 = load i64, i64* %PC
  %10191 = add i64 %10190, 9
  store i64 %10191, i64* %PC
  %10192 = bitcast i8* %10189 to double*
  %10193 = load double, double* %10192, align 1
  %10194 = getelementptr inbounds i8, i8* %10189, i64 8
  %10195 = bitcast i8* %10194 to i64*
  %10196 = load i64, i64* %10195, align 1
  %10197 = load double, double* bitcast (%A3_type* @A3 to double*)
  %10198 = fadd double %10193, %10197
  %10199 = bitcast i8* %10188 to double*
  store double %10198, double* %10199, align 1, !tbaa !2452
  %10200 = getelementptr inbounds i8, i8* %10188, i64 8
  %10201 = bitcast i8* %10200 to i64*
  store i64 %10196, i64* %10201, align 1, !tbaa !2452
  %10202 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10203 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10204 = load i64, i64* %RBP
  %10205 = sub i64 %10204, 40
  %10206 = load i64, i64* %PC
  %10207 = add i64 %10206, 5
  store i64 %10207, i64* %PC
  %10208 = bitcast i8* %10203 to double*
  %10209 = load double, double* %10208, align 1
  %10210 = getelementptr inbounds i8, i8* %10203, i64 8
  %10211 = bitcast i8* %10210 to i64*
  %10212 = load i64, i64* %10211, align 1
  %10213 = inttoptr i64 %10205 to double*
  %10214 = load double, double* %10213
  %10215 = fmul double %10209, %10214
  %10216 = bitcast i8* %10202 to double*
  store double %10215, double* %10216, align 1, !tbaa !2452
  %10217 = getelementptr inbounds i8, i8* %10202, i64 8
  %10218 = bitcast i8* %10217 to i64*
  store i64 %10212, i64* %10218, align 1, !tbaa !2452
  %10219 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10220 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10221 = load i64, i64* %PC
  %10222 = add i64 %10221, 9
  store i64 %10222, i64* %PC
  %10223 = bitcast i8* %10220 to double*
  %10224 = load double, double* %10223, align 1
  %10225 = getelementptr inbounds i8, i8* %10220, i64 8
  %10226 = bitcast i8* %10225 to i64*
  %10227 = load i64, i64* %10226, align 1
  %10228 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %10229 = fadd double %10224, %10228
  %10230 = bitcast i8* %10219 to double*
  store double %10229, double* %10230, align 1, !tbaa !2452
  %10231 = getelementptr inbounds i8, i8* %10219, i64 8
  %10232 = bitcast i8* %10231 to i64*
  store i64 %10227, i64* %10232, align 1, !tbaa !2452
  %10233 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10234 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10235 = load i64, i64* %RBP
  %10236 = sub i64 %10235, 40
  %10237 = load i64, i64* %PC
  %10238 = add i64 %10237, 5
  store i64 %10238, i64* %PC
  %10239 = bitcast i8* %10234 to double*
  %10240 = load double, double* %10239, align 1
  %10241 = getelementptr inbounds i8, i8* %10234, i64 8
  %10242 = bitcast i8* %10241 to i64*
  %10243 = load i64, i64* %10242, align 1
  %10244 = inttoptr i64 %10236 to double*
  %10245 = load double, double* %10244
  %10246 = fmul double %10240, %10245
  %10247 = bitcast i8* %10233 to double*
  store double %10246, double* %10247, align 1, !tbaa !2452
  %10248 = getelementptr inbounds i8, i8* %10233, i64 8
  %10249 = bitcast i8* %10248 to i64*
  store i64 %10243, i64* %10249, align 1, !tbaa !2452
  %10250 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10251 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10252 = load i64, i64* %PC
  %10253 = add i64 %10252, 9
  store i64 %10253, i64* %PC
  %10254 = bitcast i8* %10251 to double*
  %10255 = load double, double* %10254, align 1
  %10256 = getelementptr inbounds i8, i8* %10251, i64 8
  %10257 = bitcast i8* %10256 to i64*
  %10258 = load i64, i64* %10257, align 1
  %10259 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %10260 = fadd double %10255, %10259
  %10261 = bitcast i8* %10250 to double*
  store double %10260, double* %10261, align 1, !tbaa !2452
  %10262 = getelementptr inbounds i8, i8* %10250, i64 8
  %10263 = bitcast i8* %10262 to i64*
  store i64 %10258, i64* %10263, align 1, !tbaa !2452
  %10264 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10265 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10266 = load i64, i64* %RBP
  %10267 = sub i64 %10266, 40
  %10268 = load i64, i64* %PC
  %10269 = add i64 %10268, 5
  store i64 %10269, i64* %PC
  %10270 = bitcast i8* %10265 to double*
  %10271 = load double, double* %10270, align 1
  %10272 = getelementptr inbounds i8, i8* %10265, i64 8
  %10273 = bitcast i8* %10272 to i64*
  %10274 = load i64, i64* %10273, align 1
  %10275 = inttoptr i64 %10267 to double*
  %10276 = load double, double* %10275
  %10277 = fmul double %10271, %10276
  %10278 = bitcast i8* %10264 to double*
  store double %10277, double* %10278, align 1, !tbaa !2452
  %10279 = getelementptr inbounds i8, i8* %10264, i64 8
  %10280 = bitcast i8* %10279 to i64*
  store i64 %10274, i64* %10280, align 1, !tbaa !2452
  %10281 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10282 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10283 = load i64, i64* %PC
  %10284 = add i64 %10283, 9
  store i64 %10284, i64* %PC
  %10285 = bitcast i8* %10282 to double*
  %10286 = load double, double* %10285, align 1
  %10287 = getelementptr inbounds i8, i8* %10282, i64 8
  %10288 = bitcast i8* %10287 to i64*
  %10289 = load i64, i64* %10288, align 1
  %10290 = load double, double* bitcast (%one_type* @one to double*)
  %10291 = fadd double %10286, %10290
  %10292 = bitcast i8* %10281 to double*
  store double %10291, double* %10292, align 1, !tbaa !2452
  %10293 = getelementptr inbounds i8, i8* %10281, i64 8
  %10294 = bitcast i8* %10293 to i64*
  store i64 %10289, i64* %10294, align 1, !tbaa !2452
  %10295 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10296 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10297 = bitcast %union.vec128_t* %XMM4 to i8*
  %10298 = load i64, i64* %PC
  %10299 = add i64 %10298, 4
  store i64 %10299, i64* %PC
  %10300 = bitcast i8* %10296 to double*
  %10301 = load double, double* %10300, align 1
  %10302 = getelementptr inbounds i8, i8* %10296, i64 8
  %10303 = bitcast i8* %10302 to i64*
  %10304 = load i64, i64* %10303, align 1
  %10305 = bitcast i8* %10297 to double*
  %10306 = load double, double* %10305, align 1
  %10307 = fmul double %10301, %10306
  %10308 = bitcast i8* %10295 to double*
  store double %10307, double* %10308, align 1, !tbaa !2452
  %10309 = getelementptr inbounds i8, i8* %10295, i64 8
  %10310 = bitcast i8* %10309 to i64*
  store i64 %10304, i64* %10310, align 1, !tbaa !2452
  %10311 = bitcast %union.vec128_t* %XMM3 to i8*
  %10312 = load i64, i64* %PC
  %10313 = add i64 %10312, 9
  store i64 %10313, i64* %PC
  %10314 = bitcast i8* %10311 to double*
  %10315 = load double, double* %10314, align 1
  store double %10315, double* bitcast (%sa_type* @sa to double*)
  %10316 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10317 = load i64, i64* %RBP
  %10318 = sub i64 %10317, 40
  %10319 = load i64, i64* %PC
  %10320 = add i64 %10319, 5
  store i64 %10320, i64* %PC
  %10321 = inttoptr i64 %10318 to double*
  %10322 = load double, double* %10321
  %10323 = bitcast i8* %10316 to double*
  store double %10322, double* %10323, align 1, !tbaa !2452
  %10324 = getelementptr inbounds i8, i8* %10316, i64 8
  %10325 = bitcast i8* %10324 to double*
  store double 0.000000e+00, double* %10325, align 1, !tbaa !2452
  %10326 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10327 = load i64, i64* %RBP
  %10328 = sub i64 %10327, 40
  %10329 = load i64, i64* %PC
  %10330 = add i64 %10329, 5
  store i64 %10330, i64* %PC
  %10331 = inttoptr i64 %10328 to double*
  %10332 = load double, double* %10331
  %10333 = bitcast i8* %10326 to double*
  store double %10332, double* %10333, align 1, !tbaa !2452
  %10334 = getelementptr inbounds i8, i8* %10326, i64 8
  %10335 = bitcast i8* %10334 to double*
  store double 0.000000e+00, double* %10335, align 1, !tbaa !2452
  %10336 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %10337 = load i64, i64* %RBP
  %10338 = sub i64 %10337, 40
  %10339 = load i64, i64* %PC
  %10340 = add i64 %10339, 5
  store i64 %10340, i64* %PC
  %10341 = inttoptr i64 %10338 to double*
  %10342 = load double, double* %10341
  %10343 = bitcast i8* %10336 to double*
  store double %10342, double* %10343, align 1, !tbaa !2452
  %10344 = getelementptr inbounds i8, i8* %10336, i64 8
  %10345 = bitcast i8* %10344 to double*
  store double 0.000000e+00, double* %10345, align 1, !tbaa !2452
  %10346 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %10347 = load i64, i64* %RBP
  %10348 = sub i64 %10347, 40
  %10349 = load i64, i64* %PC
  %10350 = add i64 %10349, 5
  store i64 %10350, i64* %PC
  %10351 = inttoptr i64 %10348 to double*
  %10352 = load double, double* %10351
  %10353 = bitcast i8* %10346 to double*
  store double %10352, double* %10353, align 1, !tbaa !2452
  %10354 = getelementptr inbounds i8, i8* %10346, i64 8
  %10355 = bitcast i8* %10354 to double*
  store double 0.000000e+00, double* %10355, align 1, !tbaa !2452
  %10356 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %10357 = load i64, i64* %RBP
  %10358 = sub i64 %10357, 40
  %10359 = load i64, i64* %PC
  %10360 = add i64 %10359, 5
  store i64 %10360, i64* %PC
  %10361 = inttoptr i64 %10358 to double*
  %10362 = load double, double* %10361
  %10363 = bitcast i8* %10356 to double*
  store double %10362, double* %10363, align 1, !tbaa !2452
  %10364 = getelementptr inbounds i8, i8* %10356, i64 8
  %10365 = bitcast i8* %10364 to double*
  store double 0.000000e+00, double* %10365, align 1, !tbaa !2452
  %10366 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %10367 = load i64, i64* %PC
  %10368 = add i64 %10367, 10
  store i64 %10368, i64* %PC
  %10369 = load double, double* bitcast (%B6_type* @B6 to double*)
  %10370 = bitcast i8* %10366 to double*
  store double %10369, double* %10370, align 1, !tbaa !2452
  %10371 = getelementptr inbounds i8, i8* %10366, i64 8
  %10372 = bitcast i8* %10371 to double*
  store double 0.000000e+00, double* %10372, align 1, !tbaa !2452
  %10373 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %10374 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %10375 = load i64, i64* %RBP
  %10376 = sub i64 %10375, 40
  %10377 = load i64, i64* %PC
  %10378 = add i64 %10377, 6
  store i64 %10378, i64* %PC
  %10379 = bitcast i8* %10374 to double*
  %10380 = load double, double* %10379, align 1
  %10381 = getelementptr inbounds i8, i8* %10374, i64 8
  %10382 = bitcast i8* %10381 to i64*
  %10383 = load i64, i64* %10382, align 1
  %10384 = inttoptr i64 %10376 to double*
  %10385 = load double, double* %10384
  %10386 = fmul double %10380, %10385
  %10387 = bitcast i8* %10373 to double*
  store double %10386, double* %10387, align 1, !tbaa !2452
  %10388 = getelementptr inbounds i8, i8* %10373, i64 8
  %10389 = bitcast i8* %10388 to i64*
  store i64 %10383, i64* %10389, align 1, !tbaa !2452
  %10390 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %10391 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %10392 = load i64, i64* %PC
  %10393 = add i64 %10392, 10
  store i64 %10393, i64* %PC
  %10394 = bitcast i8* %10391 to double*
  %10395 = load double, double* %10394, align 1
  %10396 = getelementptr inbounds i8, i8* %10391, i64 8
  %10397 = bitcast i8* %10396 to i64*
  %10398 = load i64, i64* %10397, align 1
  %10399 = load double, double* bitcast (%B5_type* @B5 to double*)
  %10400 = fadd double %10395, %10399
  %10401 = bitcast i8* %10390 to double*
  store double %10400, double* %10401, align 1, !tbaa !2452
  %10402 = getelementptr inbounds i8, i8* %10390, i64 8
  %10403 = bitcast i8* %10402 to i64*
  store i64 %10398, i64* %10403, align 1, !tbaa !2452
  %10404 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %10405 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %10406 = bitcast %union.vec128_t* %XMM8 to i8*
  %10407 = load i64, i64* %PC
  %10408 = add i64 %10407, 5
  store i64 %10408, i64* %PC
  %10409 = bitcast i8* %10405 to double*
  %10410 = load double, double* %10409, align 1
  %10411 = getelementptr inbounds i8, i8* %10405, i64 8
  %10412 = bitcast i8* %10411 to i64*
  %10413 = load i64, i64* %10412, align 1
  %10414 = bitcast i8* %10406 to double*
  %10415 = load double, double* %10414, align 1
  %10416 = fmul double %10410, %10415
  %10417 = bitcast i8* %10404 to double*
  store double %10416, double* %10417, align 1, !tbaa !2452
  %10418 = getelementptr inbounds i8, i8* %10404, i64 8
  %10419 = bitcast i8* %10418 to i64*
  store i64 %10413, i64* %10419, align 1, !tbaa !2452
  %10420 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %10421 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %10422 = load i64, i64* %PC
  %10423 = add i64 %10422, 9
  store i64 %10423, i64* %PC
  %10424 = bitcast i8* %10421 to double*
  %10425 = load double, double* %10424, align 1
  %10426 = getelementptr inbounds i8, i8* %10421, i64 8
  %10427 = bitcast i8* %10426 to i64*
  %10428 = load i64, i64* %10427, align 1
  %10429 = load double, double* bitcast (%B4_type* @B4 to double*)
  %10430 = fadd double %10425, %10429
  %10431 = bitcast i8* %10420 to double*
  store double %10430, double* %10431, align 1, !tbaa !2452
  %10432 = getelementptr inbounds i8, i8* %10420, i64 8
  %10433 = bitcast i8* %10432 to i64*
  store i64 %10428, i64* %10433, align 1, !tbaa !2452
  %10434 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %10435 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %10436 = bitcast %union.vec128_t* %XMM7 to i8*
  %10437 = load i64, i64* %PC
  %10438 = add i64 %10437, 4
  store i64 %10438, i64* %PC
  %10439 = bitcast i8* %10435 to double*
  %10440 = load double, double* %10439, align 1
  %10441 = getelementptr inbounds i8, i8* %10435, i64 8
  %10442 = bitcast i8* %10441 to i64*
  %10443 = load i64, i64* %10442, align 1
  %10444 = bitcast i8* %10436 to double*
  %10445 = load double, double* %10444, align 1
  %10446 = fmul double %10440, %10445
  %10447 = bitcast i8* %10434 to double*
  store double %10446, double* %10447, align 1, !tbaa !2452
  %10448 = getelementptr inbounds i8, i8* %10434, i64 8
  %10449 = bitcast i8* %10448 to i64*
  store i64 %10443, i64* %10449, align 1, !tbaa !2452
  %10450 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %10451 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %10452 = load i64, i64* %PC
  %10453 = add i64 %10452, 9
  store i64 %10453, i64* %PC
  %10454 = bitcast i8* %10451 to double*
  %10455 = load double, double* %10454, align 1
  %10456 = getelementptr inbounds i8, i8* %10451, i64 8
  %10457 = bitcast i8* %10456 to i64*
  %10458 = load i64, i64* %10457, align 1
  %10459 = load double, double* bitcast (%B3_type* @B3 to double*)
  %10460 = fadd double %10455, %10459
  %10461 = bitcast i8* %10450 to double*
  store double %10460, double* %10461, align 1, !tbaa !2452
  %10462 = getelementptr inbounds i8, i8* %10450, i64 8
  %10463 = bitcast i8* %10462 to i64*
  store i64 %10458, i64* %10463, align 1, !tbaa !2452
  %10464 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %10465 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %10466 = bitcast %union.vec128_t* %XMM6 to i8*
  %10467 = load i64, i64* %PC
  %10468 = add i64 %10467, 4
  store i64 %10468, i64* %PC
  %10469 = bitcast i8* %10465 to double*
  %10470 = load double, double* %10469, align 1
  %10471 = getelementptr inbounds i8, i8* %10465, i64 8
  %10472 = bitcast i8* %10471 to i64*
  %10473 = load i64, i64* %10472, align 1
  %10474 = bitcast i8* %10466 to double*
  %10475 = load double, double* %10474, align 1
  %10476 = fmul double %10470, %10475
  %10477 = bitcast i8* %10464 to double*
  store double %10476, double* %10477, align 1, !tbaa !2452
  %10478 = getelementptr inbounds i8, i8* %10464, i64 8
  %10479 = bitcast i8* %10478 to i64*
  store i64 %10473, i64* %10479, align 1, !tbaa !2452
  %10480 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %10481 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %10482 = load i64, i64* %PC
  %10483 = add i64 %10482, 9
  store i64 %10483, i64* %PC
  %10484 = bitcast i8* %10481 to double*
  %10485 = load double, double* %10484, align 1
  %10486 = getelementptr inbounds i8, i8* %10481, i64 8
  %10487 = bitcast i8* %10486 to i64*
  %10488 = load i64, i64* %10487, align 1
  %10489 = load double, double* bitcast (%B2_type* @B2 to double*)
  %10490 = fadd double %10485, %10489
  %10491 = bitcast i8* %10480 to double*
  store double %10490, double* %10491, align 1, !tbaa !2452
  %10492 = getelementptr inbounds i8, i8* %10480, i64 8
  %10493 = bitcast i8* %10492 to i64*
  store i64 %10488, i64* %10493, align 1, !tbaa !2452
  %10494 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10495 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10496 = bitcast %union.vec128_t* %XMM5 to i8*
  %10497 = load i64, i64* %PC
  %10498 = add i64 %10497, 4
  store i64 %10498, i64* %PC
  %10499 = bitcast i8* %10495 to double*
  %10500 = load double, double* %10499, align 1
  %10501 = getelementptr inbounds i8, i8* %10495, i64 8
  %10502 = bitcast i8* %10501 to i64*
  %10503 = load i64, i64* %10502, align 1
  %10504 = bitcast i8* %10496 to double*
  %10505 = load double, double* %10504, align 1
  %10506 = fmul double %10500, %10505
  %10507 = bitcast i8* %10494 to double*
  store double %10506, double* %10507, align 1, !tbaa !2452
  %10508 = getelementptr inbounds i8, i8* %10494, i64 8
  %10509 = bitcast i8* %10508 to i64*
  store i64 %10503, i64* %10509, align 1, !tbaa !2452
  %10510 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10511 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10512 = load i64, i64* %PC
  %10513 = add i64 %10512, 9
  store i64 %10513, i64* %PC
  %10514 = bitcast i8* %10511 to double*
  %10515 = load double, double* %10514, align 1
  %10516 = getelementptr inbounds i8, i8* %10511, i64 8
  %10517 = bitcast i8* %10516 to i64*
  %10518 = load i64, i64* %10517, align 1
  %10519 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %10520 = fadd double %10515, %10519
  %10521 = bitcast i8* %10510 to double*
  store double %10520, double* %10521, align 1, !tbaa !2452
  %10522 = getelementptr inbounds i8, i8* %10510, i64 8
  %10523 = bitcast i8* %10522 to i64*
  store i64 %10518, i64* %10523, align 1, !tbaa !2452
  %10524 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10525 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10526 = bitcast %union.vec128_t* %XMM4 to i8*
  %10527 = load i64, i64* %PC
  %10528 = add i64 %10527, 4
  store i64 %10528, i64* %PC
  %10529 = bitcast i8* %10525 to double*
  %10530 = load double, double* %10529, align 1
  %10531 = getelementptr inbounds i8, i8* %10525, i64 8
  %10532 = bitcast i8* %10531 to i64*
  %10533 = load i64, i64* %10532, align 1
  %10534 = bitcast i8* %10526 to double*
  %10535 = load double, double* %10534, align 1
  %10536 = fmul double %10530, %10535
  %10537 = bitcast i8* %10524 to double*
  store double %10536, double* %10537, align 1, !tbaa !2452
  %10538 = getelementptr inbounds i8, i8* %10524, i64 8
  %10539 = bitcast i8* %10538 to i64*
  store i64 %10533, i64* %10539, align 1, !tbaa !2452
  %10540 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10541 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10542 = load i64, i64* %PC
  %10543 = add i64 %10542, 9
  store i64 %10543, i64* %PC
  %10544 = bitcast i8* %10541 to double*
  %10545 = load double, double* %10544, align 1
  %10546 = getelementptr inbounds i8, i8* %10541, i64 8
  %10547 = bitcast i8* %10546 to i64*
  %10548 = load i64, i64* %10547, align 1
  %10549 = load double, double* bitcast (%one_type* @one to double*)
  %10550 = fadd double %10545, %10549
  %10551 = bitcast i8* %10540 to double*
  store double %10550, double* %10551, align 1, !tbaa !2452
  %10552 = getelementptr inbounds i8, i8* %10540, i64 8
  %10553 = bitcast i8* %10552 to i64*
  store i64 %10548, i64* %10553, align 1, !tbaa !2452
  %10554 = bitcast %union.vec128_t* %XMM3 to i8*
  %10555 = load i64, i64* %PC
  %10556 = add i64 %10555, 9
  store i64 %10556, i64* %PC
  %10557 = bitcast i8* %10554 to double*
  %10558 = load double, double* %10557, align 1
  store double %10558, double* bitcast (%sb_type* @sb to double*)
  %10559 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10560 = load i64, i64* %PC
  %10561 = add i64 %10560, 9
  store i64 %10561, i64* %PC
  %10562 = load double, double* bitcast (%sa_type* @sa to double*)
  %10563 = bitcast i8* %10559 to double*
  store double %10562, double* %10563, align 1, !tbaa !2452
  %10564 = getelementptr inbounds i8, i8* %10559, i64 8
  %10565 = bitcast i8* %10564 to double*
  store double 0.000000e+00, double* %10565, align 1, !tbaa !2452
  %10566 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10567 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10568 = load i64, i64* %PC
  %10569 = add i64 %10568, 9
  store i64 %10569, i64* %PC
  %10570 = bitcast i8* %10567 to double*
  %10571 = load double, double* %10570, align 1
  %10572 = getelementptr inbounds i8, i8* %10567, i64 8
  %10573 = bitcast i8* %10572 to i64*
  %10574 = load i64, i64* %10573, align 1
  %10575 = load double, double* bitcast (%sb_type* @sb to double*)
  %10576 = fmul double %10571, %10575
  %10577 = bitcast i8* %10566 to double*
  store double %10576, double* %10577, align 1, !tbaa !2452
  %10578 = getelementptr inbounds i8, i8* %10566, i64 8
  %10579 = bitcast i8* %10578 to i64*
  store i64 %10574, i64* %10579, align 1, !tbaa !2452
  %10580 = bitcast %union.vec128_t* %XMM3 to i8*
  %10581 = load i64, i64* %PC
  %10582 = add i64 %10581, 9
  store i64 %10582, i64* %PC
  %10583 = bitcast i8* %10580 to double*
  %10584 = load double, double* %10583, align 1
  store double %10584, double* bitcast (%sa_type* @sa to double*)
  %10585 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10586 = load i64, i64* %PC
  %10587 = add i64 %10586, 9
  store i64 %10587, i64* %PC
  %10588 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %10589 = bitcast i8* %10585 to double*
  store double %10588, double* %10589, align 1, !tbaa !2452
  %10590 = getelementptr inbounds i8, i8* %10585, i64 8
  %10591 = bitcast i8* %10590 to double*
  store double 0.000000e+00, double* %10591, align 1, !tbaa !2452
  %10592 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10593 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10594 = bitcast %union.vec128_t* %XMM2 to i8*
  %10595 = load i64, i64* %PC
  %10596 = add i64 %10595, 4
  store i64 %10596, i64* %PC
  %10597 = bitcast i8* %10593 to double*
  %10598 = load double, double* %10597, align 1
  %10599 = getelementptr inbounds i8, i8* %10593, i64 8
  %10600 = bitcast i8* %10599 to i64*
  %10601 = load i64, i64* %10600, align 1
  %10602 = bitcast i8* %10594 to double*
  %10603 = load double, double* %10602, align 1
  %10604 = fdiv double %10598, %10603
  %10605 = bitcast i8* %10592 to double*
  store double %10604, double* %10605, align 1, !tbaa !2452
  %10606 = getelementptr inbounds i8, i8* %10592, i64 8
  %10607 = bitcast i8* %10606 to i64*
  store i64 %10601, i64* %10607, align 1, !tbaa !2452
  %10608 = bitcast %union.vec128_t* %XMM3 to i8*
  %10609 = load i64, i64* %PC
  %10610 = add i64 %10609, 9
  store i64 %10610, i64* %PC
  %10611 = bitcast i8* %10608 to double*
  %10612 = load double, double* %10611, align 1
  store double %10612, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 152) to double*)
  %10613 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10614 = load i64, i64* %RBP
  %10615 = sub i64 %10614, 48
  %10616 = load i64, i64* %PC
  %10617 = add i64 %10616, 5
  store i64 %10617, i64* %PC
  %10618 = inttoptr i64 %10615 to double*
  %10619 = load double, double* %10618
  %10620 = bitcast i8* %10613 to double*
  store double %10619, double* %10620, align 1, !tbaa !2452
  %10621 = getelementptr inbounds i8, i8* %10613, i64 8
  %10622 = bitcast i8* %10621 to double*
  store double 0.000000e+00, double* %10622, align 1, !tbaa !2452
  %10623 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10624 = load i64, i64* %PC
  %10625 = add i64 %10624, 9
  store i64 %10625, i64* %PC
  %10626 = load double, double* bitcast (%sa_type* @sa to double*)
  %10627 = bitcast i8* %10623 to double*
  store double %10626, double* %10627, align 1, !tbaa !2452
  %10628 = getelementptr inbounds i8, i8* %10623, i64 8
  %10629 = bitcast i8* %10628 to double*
  store double 0.000000e+00, double* %10629, align 1, !tbaa !2452
  %10630 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10631 = load i64, i64* %PC
  %10632 = add i64 %10631, 9
  store i64 %10632, i64* %PC
  %10633 = load double, double* bitcast (%two_type* @two to double*)
  %10634 = bitcast i8* %10630 to double*
  store double %10633, double* %10634, align 1, !tbaa !2452
  %10635 = getelementptr inbounds i8, i8* %10630, i64 8
  %10636 = bitcast i8* %10635 to double*
  store double 0.000000e+00, double* %10636, align 1, !tbaa !2452
  %10637 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10638 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10639 = load i64, i64* %RBP
  %10640 = sub i64 %10639, 16
  %10641 = load i64, i64* %PC
  %10642 = add i64 %10641, 5
  store i64 %10642, i64* %PC
  %10643 = bitcast i8* %10638 to double*
  %10644 = load double, double* %10643, align 1
  %10645 = getelementptr inbounds i8, i8* %10638, i64 8
  %10646 = bitcast i8* %10645 to i64*
  %10647 = load i64, i64* %10646, align 1
  %10648 = inttoptr i64 %10640 to double*
  %10649 = load double, double* %10648
  %10650 = fmul double %10644, %10649
  %10651 = bitcast i8* %10637 to double*
  store double %10650, double* %10651, align 1, !tbaa !2452
  %10652 = getelementptr inbounds i8, i8* %10637, i64 8
  %10653 = bitcast i8* %10652 to i64*
  store i64 %10647, i64* %10653, align 1, !tbaa !2452
  %10654 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10655 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10656 = bitcast %union.vec128_t* %XMM4 to i8*
  %10657 = load i64, i64* %PC
  %10658 = add i64 %10657, 4
  store i64 %10658, i64* %PC
  %10659 = bitcast i8* %10655 to double*
  %10660 = load double, double* %10659, align 1
  %10661 = getelementptr inbounds i8, i8* %10655, i64 8
  %10662 = bitcast i8* %10661 to i64*
  %10663 = load i64, i64* %10662, align 1
  %10664 = bitcast i8* %10656 to double*
  %10665 = load double, double* %10664, align 1
  %10666 = fadd double %10660, %10665
  %10667 = bitcast i8* %10654 to double*
  store double %10666, double* %10667, align 1, !tbaa !2452
  %10668 = getelementptr inbounds i8, i8* %10654, i64 8
  %10669 = bitcast i8* %10668 to i64*
  store i64 %10663, i64* %10669, align 1, !tbaa !2452
  %10670 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10671 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10672 = bitcast %union.vec128_t* %XMM3 to i8*
  %10673 = load i64, i64* %PC
  %10674 = add i64 %10673, 4
  store i64 %10674, i64* %PC
  %10675 = bitcast i8* %10671 to double*
  %10676 = load double, double* %10675, align 1
  %10677 = getelementptr inbounds i8, i8* %10671, i64 8
  %10678 = bitcast i8* %10677 to i64*
  %10679 = load i64, i64* %10678, align 1
  %10680 = bitcast i8* %10672 to double*
  %10681 = load double, double* %10680, align 1
  %10682 = fmul double %10676, %10681
  %10683 = bitcast i8* %10670 to double*
  store double %10682, double* %10683, align 1, !tbaa !2452
  %10684 = getelementptr inbounds i8, i8* %10670, i64 8
  %10685 = bitcast i8* %10684 to i64*
  store i64 %10679, i64* %10685, align 1, !tbaa !2452
  %10686 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10687 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10688 = load i64, i64* %PC
  %10689 = add i64 %10688, 9
  store i64 %10689, i64* %PC
  %10690 = bitcast i8* %10687 to double*
  %10691 = load double, double* %10690, align 1
  %10692 = getelementptr inbounds i8, i8* %10687, i64 8
  %10693 = bitcast i8* %10692 to i64*
  %10694 = load i64, i64* %10693, align 1
  %10695 = load double, double* bitcast (%two_type* @two to double*)
  %10696 = fdiv double %10691, %10695
  %10697 = bitcast i8* %10686 to double*
  store double %10696, double* %10697, align 1, !tbaa !2452
  %10698 = getelementptr inbounds i8, i8* %10686, i64 8
  %10699 = bitcast i8* %10698 to i64*
  store i64 %10694, i64* %10699, align 1, !tbaa !2452
  %10700 = bitcast %union.vec128_t* %XMM2 to i8*
  %10701 = load i64, i64* %PC
  %10702 = add i64 %10701, 9
  store i64 %10702, i64* %PC
  %10703 = bitcast i8* %10700 to double*
  %10704 = load double, double* %10703, align 1
  store double %10704, double* bitcast (%sa_type* @sa to double*)
  %10705 = bitcast %union.vec128_t* %XMM1 to i8*
  %10706 = load i64, i64* %PC
  %10707 = add i64 %10706, 9
  store i64 %10707, i64* %PC
  %10708 = bitcast i8* %10705 to double*
  %10709 = load double, double* %10708, align 1
  store double %10709, double* bitcast (%sb_type* @sb to double*)
  %10710 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10711 = load i64, i64* %PC
  %10712 = add i64 %10711, 9
  store i64 %10712, i64* %PC
  %10713 = load double, double* bitcast (%sa_type* @sa to double*)
  %10714 = bitcast i8* %10710 to double*
  store double %10713, double* %10714, align 1, !tbaa !2452
  %10715 = getelementptr inbounds i8, i8* %10710, i64 8
  %10716 = bitcast i8* %10715 to double*
  store double 0.000000e+00, double* %10716, align 1, !tbaa !2452
  %10717 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10718 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10719 = load i64, i64* %PC
  %10720 = add i64 %10719, 9
  store i64 %10720, i64* %PC
  %10721 = bitcast i8* %10718 to double*
  %10722 = load double, double* %10721, align 1
  %10723 = getelementptr inbounds i8, i8* %10718, i64 8
  %10724 = bitcast i8* %10723 to i64*
  %10725 = load i64, i64* %10724, align 1
  %10726 = load double, double* bitcast (%sb_type* @sb to double*)
  %10727 = fsub double %10722, %10726
  %10728 = bitcast i8* %10717 to double*
  store double %10727, double* %10728, align 1, !tbaa !2452
  %10729 = getelementptr inbounds i8, i8* %10717, i64 8
  %10730 = bitcast i8* %10729 to i64*
  store i64 %10725, i64* %10730, align 1, !tbaa !2452
  %10731 = bitcast %union.vec128_t* %XMM1 to i8*
  %10732 = load i64, i64* %PC
  %10733 = add i64 %10732, 9
  store i64 %10733, i64* %PC
  %10734 = bitcast i8* %10731 to double*
  %10735 = load double, double* %10734, align 1
  store double %10735, double* bitcast (%sc_type* @sc to double*)
  %10736 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10737 = load i64, i64* %PC
  %10738 = add i64 %10737, 9
  store i64 %10738, i64* %PC
  %10739 = load double, double* bitcast (%one_type* @one to double*)
  %10740 = bitcast i8* %10736 to double*
  store double %10739, double* %10740, align 1, !tbaa !2452
  %10741 = getelementptr inbounds i8, i8* %10736, i64 8
  %10742 = bitcast i8* %10741 to double*
  store double 0.000000e+00, double* %10742, align 1, !tbaa !2452
  %10743 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10744 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10745 = load i64, i64* %PC
  %10746 = add i64 %10745, 9
  store i64 %10746, i64* %PC
  %10747 = bitcast i8* %10744 to double*
  %10748 = load double, double* %10747, align 1
  %10749 = getelementptr inbounds i8, i8* %10744, i64 8
  %10750 = bitcast i8* %10749 to i64*
  %10751 = load i64, i64* %10750, align 1
  %10752 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 152) to double*)
  %10753 = fdiv double %10748, %10752
  %10754 = bitcast i8* %10743 to double*
  store double %10753, double* %10754, align 1, !tbaa !2452
  %10755 = getelementptr inbounds i8, i8* %10743, i64 8
  %10756 = bitcast i8* %10755 to i64*
  store i64 %10751, i64* %10756, align 1, !tbaa !2452
  %10757 = bitcast %union.vec128_t* %XMM1 to i8*
  %10758 = load i64, i64* %PC
  %10759 = add i64 %10758, 9
  store i64 %10759, i64* %PC
  %10760 = bitcast i8* %10757 to double*
  %10761 = load double, double* %10760, align 1
  store double %10761, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 160) to double*)
  %10762 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10763 = bitcast %union.vec128_t* %XMM0 to i8*
  %10764 = load i64, i64* %PC
  %10765 = add i64 %10764, 3
  store i64 %10765, i64* %PC
  %10766 = bitcast i8* %10763 to <2 x i32>*
  %10767 = load <2 x i32>, <2 x i32>* %10766, align 1
  %10768 = getelementptr inbounds i8, i8* %10763, i64 8
  %10769 = bitcast i8* %10768 to <2 x i32>*
  %10770 = load <2 x i32>, <2 x i32>* %10769, align 1
  %10771 = extractelement <2 x i32> %10767, i32 0
  %10772 = bitcast i8* %10762 to i32*
  store i32 %10771, i32* %10772, align 1, !tbaa !2455
  %10773 = extractelement <2 x i32> %10767, i32 1
  %10774 = getelementptr inbounds i8, i8* %10762, i64 4
  %10775 = bitcast i8* %10774 to i32*
  store i32 %10773, i32* %10775, align 1, !tbaa !2455
  %10776 = extractelement <2 x i32> %10770, i32 0
  %10777 = getelementptr inbounds i8, i8* %10762, i64 8
  %10778 = bitcast i8* %10777 to i32*
  store i32 %10776, i32* %10778, align 1, !tbaa !2455
  %10779 = extractelement <2 x i32> %10770, i32 1
  %10780 = getelementptr inbounds i8, i8* %10762, i64 12
  %10781 = bitcast i8* %10780 to i32*
  store i32 %10779, i32* %10781, align 1, !tbaa !2455
  %10782 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10783 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10784 = load i64, i64* %PC
  %10785 = add i64 %10784, 9
  store i64 %10785, i64* %PC
  %10786 = bitcast i8* %10783 to double*
  %10787 = load double, double* %10786, align 1
  %10788 = getelementptr inbounds i8, i8* %10783, i64 8
  %10789 = bitcast i8* %10788 to i64*
  %10790 = load i64, i64* %10789, align 1
  %10791 = load double, double* bitcast (%sc_type* @sc to double*)
  %10792 = fmul double %10787, %10791
  %10793 = bitcast i8* %10782 to double*
  store double %10792, double* %10793, align 1, !tbaa !2452
  %10794 = getelementptr inbounds i8, i8* %10782, i64 8
  %10795 = bitcast i8* %10794 to i64*
  store i64 %10790, i64* %10795, align 1, !tbaa !2452
  %10796 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10797 = bitcast %union.vec128_t* %XMM0 to i8*
  %10798 = load i64, i64* %PC
  %10799 = add i64 %10798, 3
  store i64 %10799, i64* %PC
  %10800 = bitcast i8* %10797 to <2 x i32>*
  %10801 = load <2 x i32>, <2 x i32>* %10800, align 1
  %10802 = getelementptr inbounds i8, i8* %10797, i64 8
  %10803 = bitcast i8* %10802 to <2 x i32>*
  %10804 = load <2 x i32>, <2 x i32>* %10803, align 1
  %10805 = extractelement <2 x i32> %10801, i32 0
  %10806 = bitcast i8* %10796 to i32*
  store i32 %10805, i32* %10806, align 1, !tbaa !2455
  %10807 = extractelement <2 x i32> %10801, i32 1
  %10808 = getelementptr inbounds i8, i8* %10796, i64 4
  %10809 = bitcast i8* %10808 to i32*
  store i32 %10807, i32* %10809, align 1, !tbaa !2455
  %10810 = extractelement <2 x i32> %10804, i32 0
  %10811 = getelementptr inbounds i8, i8* %10796, i64 8
  %10812 = bitcast i8* %10811 to i32*
  store i32 %10810, i32* %10812, align 1, !tbaa !2455
  %10813 = extractelement <2 x i32> %10804, i32 1
  %10814 = getelementptr inbounds i8, i8* %10796, i64 12
  %10815 = bitcast i8* %10814 to i32*
  store i32 %10813, i32* %10815, align 1, !tbaa !2455
  %10816 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10817 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10818 = load i64, i64* %PC
  %10819 = add i64 %10818, 9
  store i64 %10819, i64* %PC
  %10820 = bitcast i8* %10817 to double*
  %10821 = load double, double* %10820, align 1
  %10822 = getelementptr inbounds i8, i8* %10817, i64 8
  %10823 = bitcast i8* %10822 to i64*
  %10824 = load i64, i64* %10823, align 1
  %10825 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %10826 = fmul double %10821, %10825
  %10827 = bitcast i8* %10816 to double*
  store double %10826, double* %10827, align 1, !tbaa !2452
  %10828 = getelementptr inbounds i8, i8* %10816, i64 8
  %10829 = bitcast i8* %10828 to i64*
  store i64 %10824, i64* %10829, align 1, !tbaa !2452
  %10830 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10831 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10832 = load i64, i64* %PC
  %10833 = add i64 %10832, 9
  store i64 %10833, i64* %PC
  %10834 = bitcast i8* %10831 to double*
  %10835 = load double, double* %10834, align 1
  %10836 = getelementptr inbounds i8, i8* %10831, i64 8
  %10837 = bitcast i8* %10836 to i64*
  %10838 = load i64, i64* %10837, align 1
  %10839 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 160) to double*)
  %10840 = fmul double %10835, %10839
  %10841 = bitcast i8* %10830 to double*
  store double %10840, double* %10841, align 1, !tbaa !2452
  %10842 = getelementptr inbounds i8, i8* %10830, i64 8
  %10843 = bitcast i8* %10842 to i64*
  store i64 %10838, i64* %10843, align 1, !tbaa !2452
  %10844 = load i64, i64* %RBP
  %10845 = sub i64 %10844, 256
  %10846 = bitcast %union.vec128_t* %XMM0 to i8*
  %10847 = load i64, i64* %PC
  %10848 = add i64 %10847, 8
  store i64 %10848, i64* %PC
  %10849 = bitcast i8* %10846 to double*
  %10850 = load double, double* %10849, align 1
  %10851 = inttoptr i64 %10845 to double*
  store double %10850, double* %10851
  %10852 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10853 = bitcast %union.vec128_t* %XMM1 to i8*
  %10854 = load i64, i64* %PC
  %10855 = add i64 %10854, 3
  store i64 %10855, i64* %PC
  %10856 = bitcast i8* %10853 to <2 x i32>*
  %10857 = load <2 x i32>, <2 x i32>* %10856, align 1
  %10858 = getelementptr inbounds i8, i8* %10853, i64 8
  %10859 = bitcast i8* %10858 to <2 x i32>*
  %10860 = load <2 x i32>, <2 x i32>* %10859, align 1
  %10861 = extractelement <2 x i32> %10857, i32 0
  %10862 = bitcast i8* %10852 to i32*
  store i32 %10861, i32* %10862, align 1, !tbaa !2455
  %10863 = extractelement <2 x i32> %10857, i32 1
  %10864 = getelementptr inbounds i8, i8* %10852, i64 4
  %10865 = bitcast i8* %10864 to i32*
  store i32 %10863, i32* %10865, align 1, !tbaa !2455
  %10866 = extractelement <2 x i32> %10860, i32 0
  %10867 = getelementptr inbounds i8, i8* %10852, i64 8
  %10868 = bitcast i8* %10867 to i32*
  store i32 %10866, i32* %10868, align 1, !tbaa !2455
  %10869 = extractelement <2 x i32> %10860, i32 1
  %10870 = getelementptr inbounds i8, i8* %10852, i64 12
  %10871 = bitcast i8* %10870 to i32*
  store i32 %10869, i32* %10871, align 1, !tbaa !2455
  %10872 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10873 = bitcast %union.vec128_t* %XMM2 to i8*
  %10874 = load i64, i64* %PC
  %10875 = add i64 %10874, 3
  store i64 %10875, i64* %PC
  %10876 = bitcast i8* %10873 to <2 x i32>*
  %10877 = load <2 x i32>, <2 x i32>* %10876, align 1
  %10878 = getelementptr inbounds i8, i8* %10873, i64 8
  %10879 = bitcast i8* %10878 to <2 x i32>*
  %10880 = load <2 x i32>, <2 x i32>* %10879, align 1
  %10881 = extractelement <2 x i32> %10877, i32 0
  %10882 = bitcast i8* %10872 to i32*
  store i32 %10881, i32* %10882, align 1, !tbaa !2455
  %10883 = extractelement <2 x i32> %10877, i32 1
  %10884 = getelementptr inbounds i8, i8* %10872, i64 4
  %10885 = bitcast i8* %10884 to i32*
  store i32 %10883, i32* %10885, align 1, !tbaa !2455
  %10886 = extractelement <2 x i32> %10880, i32 0
  %10887 = getelementptr inbounds i8, i8* %10872, i64 8
  %10888 = bitcast i8* %10887 to i32*
  store i32 %10886, i32* %10888, align 1, !tbaa !2455
  %10889 = extractelement <2 x i32> %10880, i32 1
  %10890 = getelementptr inbounds i8, i8* %10872, i64 12
  %10891 = bitcast i8* %10890 to i32*
  store i32 %10889, i32* %10891, align 1, !tbaa !2455
  %10892 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10893 = load i64, i64* %RBP
  %10894 = sub i64 %10893, 256
  %10895 = load i64, i64* %PC
  %10896 = add i64 %10895, 8
  store i64 %10896, i64* %PC
  %10897 = inttoptr i64 %10894 to double*
  %10898 = load double, double* %10897
  %10899 = bitcast i8* %10892 to double*
  store double %10898, double* %10899, align 1, !tbaa !2452
  %10900 = getelementptr inbounds i8, i8* %10892, i64 8
  %10901 = bitcast i8* %10900 to double*
  store double 0.000000e+00, double* %10901, align 1, !tbaa !2452
  %10902 = load i64, i64* %RBP
  %10903 = sub i64 %10902, 260
  %10904 = load i32, i32* %EAX
  %10905 = zext i32 %10904 to i64
  %10906 = load i64, i64* %PC
  %10907 = add i64 %10906, 6
  store i64 %10907, i64* %PC
  %10908 = inttoptr i64 %10903 to i32*
  store i32 %10904, i32* %10908
  %10909 = load i64, i64* %PC
  %10910 = add i64 %10909, 2
  store i64 %10910, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %10911 = load i64, i64* %PC
  %10912 = sub i64 %10911, 6163
  %10913 = load i64, i64* %PC
  %10914 = add i64 %10913, 5
  %10915 = load i64, i64* %PC
  %10916 = add i64 %10915, 5
  store i64 %10916, i64* %PC
  %10917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10918 = load i64, i64* %10917, align 8, !tbaa !2428
  %10919 = add i64 %10918, -8
  %10920 = inttoptr i64 %10919 to i64*
  store i64 %10914, i64* %10920
  store i64 %10919, i64* %10917, align 8, !tbaa !2428
  %10921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10912, i64* %10921, align 8, !tbaa !2428
  %10922 = load i64, i64* %PC
  %10923 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %10922, %struct.Memory* %9964)
  %10924 = load i64, i64* %PC
  %10925 = add i64 %10924, 10
  store i64 %10925, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %10926 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10927 = load i64, i64* %PC
  %10928 = add i64 %10927, 8
  store i64 %10928, i64* %PC
  %10929 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 152) to double*)
  %10930 = bitcast i8* %10926 to double*
  store double %10929, double* %10930, align 1, !tbaa !2452
  %10931 = getelementptr inbounds i8, i8* %10926, i64 8
  %10932 = bitcast i8* %10931 to double*
  store double 0.000000e+00, double* %10932, align 1, !tbaa !2452
  %10933 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10934 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10935 = bitcast %union.vec128_t* %XMM1 to i8*
  %10936 = load i64, i64* %PC
  %10937 = add i64 %10936, 3
  store i64 %10937, i64* %PC
  %10938 = bitcast i8* %10934 to i64*
  %10939 = load i64, i64* %10938, align 1
  %10940 = getelementptr inbounds i8, i8* %10934, i64 8
  %10941 = bitcast i8* %10940 to i64*
  %10942 = load i64, i64* %10941, align 1
  %10943 = bitcast i8* %10935 to i64*
  %10944 = load i64, i64* %10943, align 1
  %10945 = getelementptr inbounds i8, i8* %10935, i64 8
  %10946 = bitcast i8* %10945 to i64*
  %10947 = load i64, i64* %10946, align 1
  %10948 = xor i64 %10944, %10939
  %10949 = xor i64 %10947, %10942
  %10950 = trunc i64 %10948 to i32
  %10951 = lshr i64 %10948, 32
  %10952 = trunc i64 %10951 to i32
  %10953 = bitcast i8* %10933 to i32*
  store i32 %10950, i32* %10953, align 1, !tbaa !2454
  %10954 = getelementptr inbounds i8, i8* %10933, i64 4
  %10955 = bitcast i8* %10954 to i32*
  store i32 %10952, i32* %10955, align 1, !tbaa !2454
  %10956 = trunc i64 %10949 to i32
  %10957 = getelementptr inbounds i8, i8* %10933, i64 8
  %10958 = bitcast i8* %10957 to i32*
  store i32 %10956, i32* %10958, align 1, !tbaa !2454
  %10959 = lshr i64 %10949, 32
  %10960 = trunc i64 %10959 to i32
  %10961 = getelementptr inbounds i8, i8* %10933, i64 12
  %10962 = bitcast i8* %10961 to i32*
  store i32 %10960, i32* %10962, align 1, !tbaa !2454
  %10963 = load i64, i64* %RBP
  %10964 = sub i64 %10963, 16
  %10965 = bitcast %union.vec128_t* %XMM1 to i8*
  %10966 = load i64, i64* %PC
  %10967 = add i64 %10966, 5
  store i64 %10967, i64* %PC
  %10968 = bitcast i8* %10965 to double*
  %10969 = load double, double* %10968, align 1
  %10970 = inttoptr i64 %10964 to double*
  store double %10969, double* %10970
  %10971 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10972 = load i64, i64* %PC
  %10973 = add i64 %10972, 9
  store i64 %10973, i64* %PC
  %10974 = load double, double* bitcast (%one_type* @one to double*)
  %10975 = bitcast i8* %10971 to double*
  store double %10974, double* %10975, align 1, !tbaa !2452
  %10976 = getelementptr inbounds i8, i8* %10971, i64 8
  %10977 = bitcast i8* %10976 to double*
  store double 0.000000e+00, double* %10977, align 1, !tbaa !2452
  %10978 = load i64, i64* %RBP
  %10979 = sub i64 %10978, 40
  %10980 = bitcast %union.vec128_t* %XMM1 to i8*
  %10981 = load i64, i64* %PC
  %10982 = add i64 %10981, 5
  store i64 %10982, i64* %PC
  %10983 = bitcast i8* %10980 to double*
  %10984 = load double, double* %10983, align 1
  %10985 = inttoptr i64 %10979 to double*
  store double %10984, double* %10985
  %10986 = bitcast %union.vec128_t* %XMM0 to i8*
  %10987 = load i64, i64* %PC
  %10988 = add i64 %10987, 9
  store i64 %10988, i64* %PC
  %10989 = bitcast i8* %10986 to double*
  %10990 = load double, double* %10989, align 1
  store double %10990, double* bitcast (%sa_type* @sa to double*)
  %10991 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10992 = load i64, i64* %PC
  %10993 = add i64 %10992, 9
  store i64 %10993, i64* %PC
  %10994 = load double, double* bitcast (%sa_type* @sa to double*)
  %10995 = bitcast i8* %10991 to double*
  store double %10994, double* %10995, align 1, !tbaa !2452
  %10996 = getelementptr inbounds i8, i8* %10991, i64 8
  %10997 = bitcast i8* %10996 to double*
  store double 0.000000e+00, double* %10997, align 1, !tbaa !2452
  %10998 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10999 = load i64, i64* %RBP
  %11000 = sub i64 %10999, 80
  %11001 = load i64, i64* %PC
  %11002 = add i64 %11001, 6
  store i64 %11002, i64* %PC
  %11003 = inttoptr i64 %11000 to i64*
  %11004 = load i64, i64* %11003
  %11005 = sitofp i64 %11004 to double
  %11006 = bitcast i8* %10998 to double*
  store double %11005, double* %11006, align 1, !tbaa !2452
  %11007 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11008 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11009 = bitcast %union.vec128_t* %XMM1 to i8*
  %11010 = load i64, i64* %PC
  %11011 = add i64 %11010, 4
  store i64 %11011, i64* %PC
  %11012 = bitcast i8* %11008 to double*
  %11013 = load double, double* %11012, align 1
  %11014 = getelementptr inbounds i8, i8* %11008, i64 8
  %11015 = bitcast i8* %11014 to i64*
  %11016 = load i64, i64* %11015, align 1
  %11017 = bitcast i8* %11009 to double*
  %11018 = load double, double* %11017, align 1
  %11019 = fdiv double %11013, %11018
  %11020 = bitcast i8* %11007 to double*
  store double %11019, double* %11020, align 1, !tbaa !2452
  %11021 = getelementptr inbounds i8, i8* %11007, i64 8
  %11022 = bitcast i8* %11021 to i64*
  store i64 %11016, i64* %11022, align 1, !tbaa !2452
  %11023 = load i64, i64* %RBP
  %11024 = sub i64 %11023, 32
  %11025 = bitcast %union.vec128_t* %XMM0 to i8*
  %11026 = load i64, i64* %PC
  %11027 = add i64 %11026, 5
  store i64 %11027, i64* %PC
  %11028 = bitcast i8* %11025 to double*
  %11029 = load double, double* %11028, align 1
  %11030 = inttoptr i64 %11024 to double*
  store double %11029, double* %11030
  %11031 = load i64, i64* %RBP
  %11032 = sub i64 %11031, 264
  %11033 = load i32, i32* %EAX
  %11034 = zext i32 %11033 to i64
  %11035 = load i64, i64* %PC
  %11036 = add i64 %11035, 6
  store i64 %11036, i64* %PC
  %11037 = inttoptr i64 %11032 to i32*
  store i32 %11033, i32* %11037
  %11038 = load i64, i64* %PC
  %11039 = add i64 %11038, 2345
  %11040 = load i64, i64* %PC
  %11041 = add i64 %11040, 5
  %11042 = load i64, i64* %PC
  %11043 = add i64 %11042, 5
  store i64 %11043, i64* %PC
  %11044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11045 = load i64, i64* %11044, align 8, !tbaa !2428
  %11046 = add i64 %11045, -8
  %11047 = inttoptr i64 %11046 to i64*
  store i64 %11041, i64* %11047
  store i64 %11046, i64* %11044, align 8, !tbaa !2428
  %11048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11039, i64* %11048, align 8, !tbaa !2428
  %11049 = load i64, i64* %PC
  %11050 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %11049, %struct.Memory* %10923)
  %11051 = load i64, i64* %RBP
  %11052 = sub i64 %11051, 72
  %11053 = load i64, i64* %PC
  %11054 = add i64 %11053, 8
  store i64 %11054, i64* %PC
  %11055 = inttoptr i64 %11052 to i64*
  store i64 1, i64* %11055
  %11056 = load i64, i64* %RBP
  %11057 = sub i64 %11056, 268
  %11058 = load i32, i32* %EAX
  %11059 = zext i32 %11058 to i64
  %11060 = load i64, i64* %PC
  %11061 = add i64 %11060, 6
  store i64 %11061, i64* %PC
  %11062 = inttoptr i64 %11057 to i32*
  store i32 %11058, i32* %11062
  br label %block_401cca

block_400bdf:                                     ; preds = %block_400b93, %block_400bed
  %MEMORY.7 = phi %struct.Memory* [ %11976, %block_400b93 ], [ %MEMORY.7, %block_400bed ]
  %11063 = load i64, i64* %RBP
  %11064 = sub i64 %11063, 72
  %11065 = load i64, i64* %PC
  %11066 = add i64 %11065, 4
  store i64 %11066, i64* %PC
  %11067 = inttoptr i64 %11064 to i64*
  %11068 = load i64, i64* %11067
  store i64 %11068, i64* %RAX, align 8, !tbaa !2428
  %11069 = load i64, i64* %RAX
  %11070 = load i64, i64* %RBP
  %11071 = sub i64 %11070, 80
  %11072 = load i64, i64* %PC
  %11073 = add i64 %11072, 4
  store i64 %11073, i64* %PC
  %11074 = inttoptr i64 %11071 to i64*
  %11075 = load i64, i64* %11074
  %11076 = sub i64 %11069, %11075
  %11077 = icmp ugt i64 %11075, %11069
  %11078 = zext i1 %11077 to i8
  %11079 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11078, i8* %11079, align 1, !tbaa !2432
  %11080 = trunc i64 %11076 to i32
  %11081 = and i32 %11080, 255
  %11082 = call i32 @llvm.ctpop.i32(i32 %11081) #16
  %11083 = trunc i32 %11082 to i8
  %11084 = and i8 %11083, 1
  %11085 = xor i8 %11084, 1
  %11086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11085, i8* %11086, align 1, !tbaa !2446
  %11087 = xor i64 %11075, %11069
  %11088 = xor i64 %11087, %11076
  %11089 = lshr i64 %11088, 4
  %11090 = trunc i64 %11089 to i8
  %11091 = and i8 %11090, 1
  %11092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11091, i8* %11092, align 1, !tbaa !2450
  %11093 = icmp eq i64 %11076, 0
  %11094 = zext i1 %11093 to i8
  %11095 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11094, i8* %11095, align 1, !tbaa !2447
  %11096 = lshr i64 %11076, 63
  %11097 = trunc i64 %11096 to i8
  %11098 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11097, i8* %11098, align 1, !tbaa !2448
  %11099 = lshr i64 %11069, 63
  %11100 = lshr i64 %11075, 63
  %11101 = xor i64 %11100, %11099
  %11102 = xor i64 %11096, %11099
  %11103 = add nuw nsw i64 %11102, %11101
  %11104 = icmp eq i64 %11103, 2
  %11105 = zext i1 %11104 to i8
  %11106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11105, i8* %11106, align 1, !tbaa !2449
  %11107 = load i64, i64* %PC
  %11108 = add i64 %11107, 170
  %11109 = load i64, i64* %PC
  %11110 = add i64 %11109, 6
  %11111 = load i64, i64* %PC
  %11112 = add i64 %11111, 6
  store i64 %11112, i64* %PC
  %11113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11114 = load i8, i8* %11113, align 1, !tbaa !2447
  %11115 = icmp eq i8 %11114, 0
  %11116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %11117 = load i8, i8* %11116, align 1, !tbaa !2448
  %11118 = icmp ne i8 %11117, 0
  %11119 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11120 = load i8, i8* %11119, align 1, !tbaa !2449
  %11121 = icmp ne i8 %11120, 0
  %11122 = xor i1 %11118, %11121
  %11123 = xor i1 %11122, true
  %11124 = and i1 %11115, %11123
  %11125 = zext i1 %11124 to i8
  store i8 %11125, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11127 = select i1 %11124, i64 %11108, i64 %11110
  store i64 %11127, i64* %11126, align 8, !tbaa !2428
  %11128 = load i8, i8* %BRANCH_TAKEN
  %11129 = icmp eq i8 %11128, 1
  %11130 = load i64, i64* %PC
  %11131 = add i64 %11130, 10
  store i64 %11131, i64* %PC
  br i1 %11129, label %block_400c91, label %block_400bed

block_401195:                                     ; preds = %block_4011aa, %block_400f3f
  %MEMORY.8 = phi %struct.Memory* [ %8646, %block_400f3f ], [ %MEMORY.8, %block_4011aa ]
  %11132 = load i64, i64* %RBP
  %11133 = sub i64 %11132, 72
  %11134 = load i64, i64* %PC
  %11135 = add i64 %11134, 4
  store i64 %11135, i64* %PC
  %11136 = inttoptr i64 %11133 to i64*
  %11137 = load i64, i64* %11136
  store i64 %11137, i64* %RAX, align 8, !tbaa !2428
  %11138 = load i64, i64* %RBP
  %11139 = sub i64 %11138, 80
  %11140 = load i64, i64* %PC
  %11141 = add i64 %11140, 4
  store i64 %11141, i64* %PC
  %11142 = inttoptr i64 %11139 to i64*
  %11143 = load i64, i64* %11142
  store i64 %11143, i64* %RCX, align 8, !tbaa !2428
  %11144 = load i64, i64* %RCX
  %11145 = load i64, i64* %PC
  %11146 = add i64 %11145, 4
  store i64 %11146, i64* %PC
  %11147 = sub i64 %11144, 1
  store i64 %11147, i64* %RCX, align 8, !tbaa !2428
  %11148 = icmp ult i64 %11144, 1
  %11149 = zext i1 %11148 to i8
  %11150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11149, i8* %11150, align 1, !tbaa !2432
  %11151 = trunc i64 %11147 to i32
  %11152 = and i32 %11151, 255
  %11153 = call i32 @llvm.ctpop.i32(i32 %11152) #16
  %11154 = trunc i32 %11153 to i8
  %11155 = and i8 %11154, 1
  %11156 = xor i8 %11155, 1
  %11157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11156, i8* %11157, align 1, !tbaa !2446
  %11158 = xor i64 1, %11144
  %11159 = xor i64 %11158, %11147
  %11160 = lshr i64 %11159, 4
  %11161 = trunc i64 %11160 to i8
  %11162 = and i8 %11161, 1
  %11163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11162, i8* %11163, align 1, !tbaa !2450
  %11164 = icmp eq i64 %11147, 0
  %11165 = zext i1 %11164 to i8
  %11166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11165, i8* %11166, align 1, !tbaa !2447
  %11167 = lshr i64 %11147, 63
  %11168 = trunc i64 %11167 to i8
  %11169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11168, i8* %11169, align 1, !tbaa !2448
  %11170 = lshr i64 %11144, 63
  %11171 = xor i64 %11167, %11170
  %11172 = add nuw nsw i64 %11171, %11170
  %11173 = icmp eq i64 %11172, 2
  %11174 = zext i1 %11173 to i8
  %11175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11174, i8* %11175, align 1, !tbaa !2449
  %11176 = load i64, i64* %RAX
  %11177 = load i64, i64* %RCX
  %11178 = load i64, i64* %PC
  %11179 = add i64 %11178, 3
  store i64 %11179, i64* %PC
  %11180 = sub i64 %11176, %11177
  %11181 = icmp ult i64 %11176, %11177
  %11182 = zext i1 %11181 to i8
  %11183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11182, i8* %11183, align 1, !tbaa !2432
  %11184 = trunc i64 %11180 to i32
  %11185 = and i32 %11184, 255
  %11186 = call i32 @llvm.ctpop.i32(i32 %11185) #16
  %11187 = trunc i32 %11186 to i8
  %11188 = and i8 %11187, 1
  %11189 = xor i8 %11188, 1
  %11190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11189, i8* %11190, align 1, !tbaa !2446
  %11191 = xor i64 %11177, %11176
  %11192 = xor i64 %11191, %11180
  %11193 = lshr i64 %11192, 4
  %11194 = trunc i64 %11193 to i8
  %11195 = and i8 %11194, 1
  %11196 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11195, i8* %11196, align 1, !tbaa !2450
  %11197 = icmp eq i64 %11180, 0
  %11198 = zext i1 %11197 to i8
  %11199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11198, i8* %11199, align 1, !tbaa !2447
  %11200 = lshr i64 %11180, 63
  %11201 = trunc i64 %11200 to i8
  %11202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11201, i8* %11202, align 1, !tbaa !2448
  %11203 = lshr i64 %11176, 63
  %11204 = lshr i64 %11177, 63
  %11205 = xor i64 %11204, %11203
  %11206 = xor i64 %11200, %11203
  %11207 = add nuw nsw i64 %11206, %11205
  %11208 = icmp eq i64 %11207, 2
  %11209 = zext i1 %11208 to i8
  %11210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11209, i8* %11210, align 1, !tbaa !2449
  %11211 = load i64, i64* %PC
  %11212 = add i64 %11211, 181
  %11213 = load i64, i64* %PC
  %11214 = add i64 %11213, 6
  %11215 = load i64, i64* %PC
  %11216 = add i64 %11215, 6
  store i64 %11216, i64* %PC
  %11217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11218 = load i8, i8* %11217, align 1, !tbaa !2447
  %11219 = icmp eq i8 %11218, 0
  %11220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %11221 = load i8, i8* %11220, align 1, !tbaa !2448
  %11222 = icmp ne i8 %11221, 0
  %11223 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11224 = load i8, i8* %11223, align 1, !tbaa !2449
  %11225 = icmp ne i8 %11224, 0
  %11226 = xor i1 %11222, %11225
  %11227 = xor i1 %11226, true
  %11228 = and i1 %11219, %11227
  %11229 = zext i1 %11228 to i8
  store i8 %11229, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11231 = select i1 %11228, i64 %11212, i64 %11214
  store i64 %11231, i64* %11230, align 8, !tbaa !2428
  %11232 = load i8, i8* %BRANCH_TAKEN
  %11233 = icmp eq i8 %11232, 1
  br i1 %11233, label %block_401259, label %block_4011aa

block_401514:                                     ; preds = %block_4014ff
  %11234 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11235 = load i64, i64* %RBP
  %11236 = sub i64 %11235, 72
  %11237 = load i64, i64* %PC
  %11238 = add i64 %11237, 6
  store i64 %11238, i64* %PC
  %11239 = inttoptr i64 %11236 to i64*
  %11240 = load i64, i64* %11239
  %11241 = sitofp i64 %11240 to double
  %11242 = bitcast i8* %11234 to double*
  store double %11241, double* %11242, align 1, !tbaa !2452
  %11243 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11244 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11245 = load i64, i64* %RBP
  %11246 = sub i64 %11245, 48
  %11247 = load i64, i64* %PC
  %11248 = add i64 %11247, 5
  store i64 %11248, i64* %PC
  %11249 = bitcast i8* %11244 to double*
  %11250 = load double, double* %11249, align 1
  %11251 = getelementptr inbounds i8, i8* %11244, i64 8
  %11252 = bitcast i8* %11251 to i64*
  %11253 = load i64, i64* %11252, align 1
  %11254 = inttoptr i64 %11246 to double*
  %11255 = load double, double* %11254
  %11256 = fmul double %11250, %11255
  %11257 = bitcast i8* %11243 to double*
  store double %11256, double* %11257, align 1, !tbaa !2452
  %11258 = getelementptr inbounds i8, i8* %11243, i64 8
  %11259 = bitcast i8* %11258 to i64*
  store i64 %11253, i64* %11259, align 1, !tbaa !2452
  %11260 = load i64, i64* %RBP
  %11261 = sub i64 %11260, 24
  %11262 = bitcast %union.vec128_t* %XMM0 to i8*
  %11263 = load i64, i64* %PC
  %11264 = add i64 %11263, 5
  store i64 %11264, i64* %PC
  %11265 = bitcast i8* %11262 to double*
  %11266 = load double, double* %11265, align 1
  %11267 = inttoptr i64 %11261 to double*
  store double %11266, double* %11267
  %11268 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11269 = load i64, i64* %RBP
  %11270 = sub i64 %11269, 24
  %11271 = load i64, i64* %PC
  %11272 = add i64 %11271, 5
  store i64 %11272, i64* %PC
  %11273 = inttoptr i64 %11270 to double*
  %11274 = load double, double* %11273
  %11275 = bitcast i8* %11268 to double*
  store double %11274, double* %11275, align 1, !tbaa !2452
  %11276 = getelementptr inbounds i8, i8* %11268, i64 8
  %11277 = bitcast i8* %11276 to double*
  store double 0.000000e+00, double* %11277, align 1, !tbaa !2452
  %11278 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11279 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11280 = load i64, i64* %RBP
  %11281 = sub i64 %11280, 24
  %11282 = load i64, i64* %PC
  %11283 = add i64 %11282, 5
  store i64 %11283, i64* %PC
  %11284 = bitcast i8* %11279 to double*
  %11285 = load double, double* %11284, align 1
  %11286 = getelementptr inbounds i8, i8* %11279, i64 8
  %11287 = bitcast i8* %11286 to i64*
  %11288 = load i64, i64* %11287, align 1
  %11289 = inttoptr i64 %11281 to double*
  %11290 = load double, double* %11289
  %11291 = fmul double %11285, %11290
  %11292 = bitcast i8* %11278 to double*
  store double %11291, double* %11292, align 1, !tbaa !2452
  %11293 = getelementptr inbounds i8, i8* %11278, i64 8
  %11294 = bitcast i8* %11293 to i64*
  store i64 %11288, i64* %11294, align 1, !tbaa !2452
  %11295 = load i64, i64* %RBP
  %11296 = sub i64 %11295, 40
  %11297 = bitcast %union.vec128_t* %XMM0 to i8*
  %11298 = load i64, i64* %PC
  %11299 = add i64 %11298, 5
  store i64 %11299, i64* %PC
  %11300 = bitcast i8* %11297 to double*
  %11301 = load double, double* %11300, align 1
  %11302 = inttoptr i64 %11296 to double*
  store double %11301, double* %11302
  %11303 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11304 = load i64, i64* %RBP
  %11305 = sub i64 %11304, 24
  %11306 = load i64, i64* %PC
  %11307 = add i64 %11306, 5
  store i64 %11307, i64* %PC
  %11308 = inttoptr i64 %11305 to double*
  %11309 = load double, double* %11308
  %11310 = bitcast i8* %11303 to double*
  store double %11309, double* %11310, align 1, !tbaa !2452
  %11311 = getelementptr inbounds i8, i8* %11303, i64 8
  %11312 = bitcast i8* %11311 to double*
  store double 0.000000e+00, double* %11312, align 1, !tbaa !2452
  %11313 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11314 = load i64, i64* %PC
  %11315 = add i64 %11314, 9
  store i64 %11315, i64* %PC
  %11316 = load double, double* bitcast (%A6_type* @A6 to double*)
  %11317 = bitcast i8* %11313 to double*
  store double %11316, double* %11317, align 1, !tbaa !2452
  %11318 = getelementptr inbounds i8, i8* %11313, i64 8
  %11319 = bitcast i8* %11318 to double*
  store double 0.000000e+00, double* %11319, align 1, !tbaa !2452
  %11320 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11321 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11322 = load i64, i64* %RBP
  %11323 = sub i64 %11322, 40
  %11324 = load i64, i64* %PC
  %11325 = add i64 %11324, 5
  store i64 %11325, i64* %PC
  %11326 = bitcast i8* %11321 to double*
  %11327 = load double, double* %11326, align 1
  %11328 = getelementptr inbounds i8, i8* %11321, i64 8
  %11329 = bitcast i8* %11328 to i64*
  %11330 = load i64, i64* %11329, align 1
  %11331 = inttoptr i64 %11323 to double*
  %11332 = load double, double* %11331
  %11333 = fmul double %11327, %11332
  %11334 = bitcast i8* %11320 to double*
  store double %11333, double* %11334, align 1, !tbaa !2452
  %11335 = getelementptr inbounds i8, i8* %11320, i64 8
  %11336 = bitcast i8* %11335 to i64*
  store i64 %11330, i64* %11336, align 1, !tbaa !2452
  %11337 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11338 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11339 = load i64, i64* %PC
  %11340 = add i64 %11339, 9
  store i64 %11340, i64* %PC
  %11341 = bitcast i8* %11338 to double*
  %11342 = load double, double* %11341, align 1
  %11343 = getelementptr inbounds i8, i8* %11338, i64 8
  %11344 = bitcast i8* %11343 to i64*
  %11345 = load i64, i64* %11344, align 1
  %11346 = load double, double* bitcast (%A5_type* @A5 to double*)
  %11347 = fadd double %11342, %11346
  %11348 = bitcast i8* %11337 to double*
  store double %11347, double* %11348, align 1, !tbaa !2452
  %11349 = getelementptr inbounds i8, i8* %11337, i64 8
  %11350 = bitcast i8* %11349 to i64*
  store i64 %11345, i64* %11350, align 1, !tbaa !2452
  %11351 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11352 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11353 = load i64, i64* %RBP
  %11354 = sub i64 %11353, 40
  %11355 = load i64, i64* %PC
  %11356 = add i64 %11355, 5
  store i64 %11356, i64* %PC
  %11357 = bitcast i8* %11352 to double*
  %11358 = load double, double* %11357, align 1
  %11359 = getelementptr inbounds i8, i8* %11352, i64 8
  %11360 = bitcast i8* %11359 to i64*
  %11361 = load i64, i64* %11360, align 1
  %11362 = inttoptr i64 %11354 to double*
  %11363 = load double, double* %11362
  %11364 = fmul double %11358, %11363
  %11365 = bitcast i8* %11351 to double*
  store double %11364, double* %11365, align 1, !tbaa !2452
  %11366 = getelementptr inbounds i8, i8* %11351, i64 8
  %11367 = bitcast i8* %11366 to i64*
  store i64 %11361, i64* %11367, align 1, !tbaa !2452
  %11368 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11369 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11370 = load i64, i64* %PC
  %11371 = add i64 %11370, 9
  store i64 %11371, i64* %PC
  %11372 = bitcast i8* %11369 to double*
  %11373 = load double, double* %11372, align 1
  %11374 = getelementptr inbounds i8, i8* %11369, i64 8
  %11375 = bitcast i8* %11374 to i64*
  %11376 = load i64, i64* %11375, align 1
  %11377 = load double, double* bitcast (%A4_type* @A4 to double*)
  %11378 = fadd double %11373, %11377
  %11379 = bitcast i8* %11368 to double*
  store double %11378, double* %11379, align 1, !tbaa !2452
  %11380 = getelementptr inbounds i8, i8* %11368, i64 8
  %11381 = bitcast i8* %11380 to i64*
  store i64 %11376, i64* %11381, align 1, !tbaa !2452
  %11382 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11383 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11384 = load i64, i64* %RBP
  %11385 = sub i64 %11384, 40
  %11386 = load i64, i64* %PC
  %11387 = add i64 %11386, 5
  store i64 %11387, i64* %PC
  %11388 = bitcast i8* %11383 to double*
  %11389 = load double, double* %11388, align 1
  %11390 = getelementptr inbounds i8, i8* %11383, i64 8
  %11391 = bitcast i8* %11390 to i64*
  %11392 = load i64, i64* %11391, align 1
  %11393 = inttoptr i64 %11385 to double*
  %11394 = load double, double* %11393
  %11395 = fmul double %11389, %11394
  %11396 = bitcast i8* %11382 to double*
  store double %11395, double* %11396, align 1, !tbaa !2452
  %11397 = getelementptr inbounds i8, i8* %11382, i64 8
  %11398 = bitcast i8* %11397 to i64*
  store i64 %11392, i64* %11398, align 1, !tbaa !2452
  %11399 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11400 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11401 = load i64, i64* %PC
  %11402 = add i64 %11401, 9
  store i64 %11402, i64* %PC
  %11403 = bitcast i8* %11400 to double*
  %11404 = load double, double* %11403, align 1
  %11405 = getelementptr inbounds i8, i8* %11400, i64 8
  %11406 = bitcast i8* %11405 to i64*
  %11407 = load i64, i64* %11406, align 1
  %11408 = load double, double* bitcast (%A3_type* @A3 to double*)
  %11409 = fadd double %11404, %11408
  %11410 = bitcast i8* %11399 to double*
  store double %11409, double* %11410, align 1, !tbaa !2452
  %11411 = getelementptr inbounds i8, i8* %11399, i64 8
  %11412 = bitcast i8* %11411 to i64*
  store i64 %11407, i64* %11412, align 1, !tbaa !2452
  %11413 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11414 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11415 = load i64, i64* %RBP
  %11416 = sub i64 %11415, 40
  %11417 = load i64, i64* %PC
  %11418 = add i64 %11417, 5
  store i64 %11418, i64* %PC
  %11419 = bitcast i8* %11414 to double*
  %11420 = load double, double* %11419, align 1
  %11421 = getelementptr inbounds i8, i8* %11414, i64 8
  %11422 = bitcast i8* %11421 to i64*
  %11423 = load i64, i64* %11422, align 1
  %11424 = inttoptr i64 %11416 to double*
  %11425 = load double, double* %11424
  %11426 = fmul double %11420, %11425
  %11427 = bitcast i8* %11413 to double*
  store double %11426, double* %11427, align 1, !tbaa !2452
  %11428 = getelementptr inbounds i8, i8* %11413, i64 8
  %11429 = bitcast i8* %11428 to i64*
  store i64 %11423, i64* %11429, align 1, !tbaa !2452
  %11430 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11431 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11432 = load i64, i64* %PC
  %11433 = add i64 %11432, 9
  store i64 %11433, i64* %PC
  %11434 = bitcast i8* %11431 to double*
  %11435 = load double, double* %11434, align 1
  %11436 = getelementptr inbounds i8, i8* %11431, i64 8
  %11437 = bitcast i8* %11436 to i64*
  %11438 = load i64, i64* %11437, align 1
  %11439 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %11440 = fadd double %11435, %11439
  %11441 = bitcast i8* %11430 to double*
  store double %11440, double* %11441, align 1, !tbaa !2452
  %11442 = getelementptr inbounds i8, i8* %11430, i64 8
  %11443 = bitcast i8* %11442 to i64*
  store i64 %11438, i64* %11443, align 1, !tbaa !2452
  %11444 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11445 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11446 = load i64, i64* %RBP
  %11447 = sub i64 %11446, 40
  %11448 = load i64, i64* %PC
  %11449 = add i64 %11448, 5
  store i64 %11449, i64* %PC
  %11450 = bitcast i8* %11445 to double*
  %11451 = load double, double* %11450, align 1
  %11452 = getelementptr inbounds i8, i8* %11445, i64 8
  %11453 = bitcast i8* %11452 to i64*
  %11454 = load i64, i64* %11453, align 1
  %11455 = inttoptr i64 %11447 to double*
  %11456 = load double, double* %11455
  %11457 = fmul double %11451, %11456
  %11458 = bitcast i8* %11444 to double*
  store double %11457, double* %11458, align 1, !tbaa !2452
  %11459 = getelementptr inbounds i8, i8* %11444, i64 8
  %11460 = bitcast i8* %11459 to i64*
  store i64 %11454, i64* %11460, align 1, !tbaa !2452
  %11461 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11462 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11463 = load i64, i64* %PC
  %11464 = add i64 %11463, 9
  store i64 %11464, i64* %PC
  %11465 = bitcast i8* %11462 to double*
  %11466 = load double, double* %11465, align 1
  %11467 = getelementptr inbounds i8, i8* %11462, i64 8
  %11468 = bitcast i8* %11467 to i64*
  %11469 = load i64, i64* %11468, align 1
  %11470 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %11471 = fadd double %11466, %11470
  %11472 = bitcast i8* %11461 to double*
  store double %11471, double* %11472, align 1, !tbaa !2452
  %11473 = getelementptr inbounds i8, i8* %11461, i64 8
  %11474 = bitcast i8* %11473 to i64*
  store i64 %11469, i64* %11474, align 1, !tbaa !2452
  %11475 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11476 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11477 = load i64, i64* %RBP
  %11478 = sub i64 %11477, 40
  %11479 = load i64, i64* %PC
  %11480 = add i64 %11479, 5
  store i64 %11480, i64* %PC
  %11481 = bitcast i8* %11476 to double*
  %11482 = load double, double* %11481, align 1
  %11483 = getelementptr inbounds i8, i8* %11476, i64 8
  %11484 = bitcast i8* %11483 to i64*
  %11485 = load i64, i64* %11484, align 1
  %11486 = inttoptr i64 %11478 to double*
  %11487 = load double, double* %11486
  %11488 = fmul double %11482, %11487
  %11489 = bitcast i8* %11475 to double*
  store double %11488, double* %11489, align 1, !tbaa !2452
  %11490 = getelementptr inbounds i8, i8* %11475, i64 8
  %11491 = bitcast i8* %11490 to i64*
  store i64 %11485, i64* %11491, align 1, !tbaa !2452
  %11492 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11493 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11494 = load i64, i64* %PC
  %11495 = add i64 %11494, 9
  store i64 %11495, i64* %PC
  %11496 = bitcast i8* %11493 to double*
  %11497 = load double, double* %11496, align 1
  %11498 = getelementptr inbounds i8, i8* %11493, i64 8
  %11499 = bitcast i8* %11498 to i64*
  %11500 = load i64, i64* %11499, align 1
  %11501 = load double, double* bitcast (%one_type* @one to double*)
  %11502 = fadd double %11497, %11501
  %11503 = bitcast i8* %11492 to double*
  store double %11502, double* %11503, align 1, !tbaa !2452
  %11504 = getelementptr inbounds i8, i8* %11492, i64 8
  %11505 = bitcast i8* %11504 to i64*
  store i64 %11500, i64* %11505, align 1, !tbaa !2452
  %11506 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11507 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11508 = bitcast %union.vec128_t* %XMM1 to i8*
  %11509 = load i64, i64* %PC
  %11510 = add i64 %11509, 4
  store i64 %11510, i64* %PC
  %11511 = bitcast i8* %11507 to double*
  %11512 = load double, double* %11511, align 1
  %11513 = getelementptr inbounds i8, i8* %11507, i64 8
  %11514 = bitcast i8* %11513 to i64*
  %11515 = load i64, i64* %11514, align 1
  %11516 = bitcast i8* %11508 to double*
  %11517 = load double, double* %11516, align 1
  %11518 = fmul double %11512, %11517
  %11519 = bitcast i8* %11506 to double*
  store double %11518, double* %11519, align 1, !tbaa !2452
  %11520 = getelementptr inbounds i8, i8* %11506, i64 8
  %11521 = bitcast i8* %11520 to i64*
  store i64 %11515, i64* %11521, align 1, !tbaa !2452
  %11522 = load i64, i64* %RBP
  %11523 = sub i64 %11522, 32
  %11524 = bitcast %union.vec128_t* %XMM0 to i8*
  %11525 = load i64, i64* %PC
  %11526 = add i64 %11525, 5
  store i64 %11526, i64* %PC
  %11527 = bitcast i8* %11524 to double*
  %11528 = load double, double* %11527, align 1
  %11529 = inttoptr i64 %11523 to double*
  store double %11528, double* %11529
  %11530 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11531 = load i64, i64* %RBP
  %11532 = sub i64 %11531, 16
  %11533 = load i64, i64* %PC
  %11534 = add i64 %11533, 5
  store i64 %11534, i64* %PC
  %11535 = inttoptr i64 %11532 to double*
  %11536 = load double, double* %11535
  %11537 = bitcast i8* %11530 to double*
  store double %11536, double* %11537, align 1, !tbaa !2452
  %11538 = getelementptr inbounds i8, i8* %11530, i64 8
  %11539 = bitcast i8* %11538 to double*
  store double 0.000000e+00, double* %11539, align 1, !tbaa !2452
  %11540 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11541 = load i64, i64* %RBP
  %11542 = sub i64 %11541, 32
  %11543 = load i64, i64* %PC
  %11544 = add i64 %11543, 5
  store i64 %11544, i64* %PC
  %11545 = inttoptr i64 %11542 to double*
  %11546 = load double, double* %11545
  %11547 = bitcast i8* %11540 to double*
  store double %11546, double* %11547, align 1, !tbaa !2452
  %11548 = getelementptr inbounds i8, i8* %11540, i64 8
  %11549 = bitcast i8* %11548 to double*
  store double 0.000000e+00, double* %11549, align 1, !tbaa !2452
  %11550 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11551 = load i64, i64* %RBP
  %11552 = sub i64 %11551, 40
  %11553 = load i64, i64* %PC
  %11554 = add i64 %11553, 5
  store i64 %11554, i64* %PC
  %11555 = inttoptr i64 %11552 to double*
  %11556 = load double, double* %11555
  %11557 = bitcast i8* %11550 to double*
  store double %11556, double* %11557, align 1, !tbaa !2452
  %11558 = getelementptr inbounds i8, i8* %11550, i64 8
  %11559 = bitcast i8* %11558 to double*
  store double 0.000000e+00, double* %11559, align 1, !tbaa !2452
  %11560 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11561 = load i64, i64* %RBP
  %11562 = sub i64 %11561, 40
  %11563 = load i64, i64* %PC
  %11564 = add i64 %11563, 5
  store i64 %11564, i64* %PC
  %11565 = inttoptr i64 %11562 to double*
  %11566 = load double, double* %11565
  %11567 = bitcast i8* %11560 to double*
  store double %11566, double* %11567, align 1, !tbaa !2452
  %11568 = getelementptr inbounds i8, i8* %11560, i64 8
  %11569 = bitcast i8* %11568 to double*
  store double 0.000000e+00, double* %11569, align 1, !tbaa !2452
  %11570 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %11571 = load i64, i64* %RBP
  %11572 = sub i64 %11571, 40
  %11573 = load i64, i64* %PC
  %11574 = add i64 %11573, 5
  store i64 %11574, i64* %PC
  %11575 = inttoptr i64 %11572 to double*
  %11576 = load double, double* %11575
  %11577 = bitcast i8* %11570 to double*
  store double %11576, double* %11577, align 1, !tbaa !2452
  %11578 = getelementptr inbounds i8, i8* %11570, i64 8
  %11579 = bitcast i8* %11578 to double*
  store double 0.000000e+00, double* %11579, align 1, !tbaa !2452
  %11580 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %11581 = load i64, i64* %RBP
  %11582 = sub i64 %11581, 40
  %11583 = load i64, i64* %PC
  %11584 = add i64 %11583, 5
  store i64 %11584, i64* %PC
  %11585 = inttoptr i64 %11582 to double*
  %11586 = load double, double* %11585
  %11587 = bitcast i8* %11580 to double*
  store double %11586, double* %11587, align 1, !tbaa !2452
  %11588 = getelementptr inbounds i8, i8* %11580, i64 8
  %11589 = bitcast i8* %11588 to double*
  store double 0.000000e+00, double* %11589, align 1, !tbaa !2452
  %11590 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %11591 = load i64, i64* %RBP
  %11592 = sub i64 %11591, 40
  %11593 = load i64, i64* %PC
  %11594 = add i64 %11593, 5
  store i64 %11594, i64* %PC
  %11595 = inttoptr i64 %11592 to double*
  %11596 = load double, double* %11595
  %11597 = bitcast i8* %11590 to double*
  store double %11596, double* %11597, align 1, !tbaa !2452
  %11598 = getelementptr inbounds i8, i8* %11590, i64 8
  %11599 = bitcast i8* %11598 to double*
  store double 0.000000e+00, double* %11599, align 1, !tbaa !2452
  %11600 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %11601 = load i64, i64* %PC
  %11602 = add i64 %11601, 9
  store i64 %11602, i64* %PC
  %11603 = load double, double* bitcast (%B6_type* @B6 to double*)
  %11604 = bitcast i8* %11600 to double*
  store double %11603, double* %11604, align 1, !tbaa !2452
  %11605 = getelementptr inbounds i8, i8* %11600, i64 8
  %11606 = bitcast i8* %11605 to double*
  store double 0.000000e+00, double* %11606, align 1, !tbaa !2452
  %11607 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %11608 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %11609 = load i64, i64* %RBP
  %11610 = sub i64 %11609, 40
  %11611 = load i64, i64* %PC
  %11612 = add i64 %11611, 5
  store i64 %11612, i64* %PC
  %11613 = bitcast i8* %11608 to double*
  %11614 = load double, double* %11613, align 1
  %11615 = getelementptr inbounds i8, i8* %11608, i64 8
  %11616 = bitcast i8* %11615 to i64*
  %11617 = load i64, i64* %11616, align 1
  %11618 = inttoptr i64 %11610 to double*
  %11619 = load double, double* %11618
  %11620 = fmul double %11614, %11619
  %11621 = bitcast i8* %11607 to double*
  store double %11620, double* %11621, align 1, !tbaa !2452
  %11622 = getelementptr inbounds i8, i8* %11607, i64 8
  %11623 = bitcast i8* %11622 to i64*
  store i64 %11617, i64* %11623, align 1, !tbaa !2452
  %11624 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %11625 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %11626 = load i64, i64* %PC
  %11627 = add i64 %11626, 9
  store i64 %11627, i64* %PC
  %11628 = bitcast i8* %11625 to double*
  %11629 = load double, double* %11628, align 1
  %11630 = getelementptr inbounds i8, i8* %11625, i64 8
  %11631 = bitcast i8* %11630 to i64*
  %11632 = load i64, i64* %11631, align 1
  %11633 = load double, double* bitcast (%B5_type* @B5 to double*)
  %11634 = fadd double %11629, %11633
  %11635 = bitcast i8* %11624 to double*
  store double %11634, double* %11635, align 1, !tbaa !2452
  %11636 = getelementptr inbounds i8, i8* %11624, i64 8
  %11637 = bitcast i8* %11636 to i64*
  store i64 %11632, i64* %11637, align 1, !tbaa !2452
  %11638 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %11639 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %11640 = bitcast %union.vec128_t* %XMM7 to i8*
  %11641 = load i64, i64* %PC
  %11642 = add i64 %11641, 4
  store i64 %11642, i64* %PC
  %11643 = bitcast i8* %11639 to double*
  %11644 = load double, double* %11643, align 1
  %11645 = getelementptr inbounds i8, i8* %11639, i64 8
  %11646 = bitcast i8* %11645 to i64*
  %11647 = load i64, i64* %11646, align 1
  %11648 = bitcast i8* %11640 to double*
  %11649 = load double, double* %11648, align 1
  %11650 = fmul double %11644, %11649
  %11651 = bitcast i8* %11638 to double*
  store double %11650, double* %11651, align 1, !tbaa !2452
  %11652 = getelementptr inbounds i8, i8* %11638, i64 8
  %11653 = bitcast i8* %11652 to i64*
  store i64 %11647, i64* %11653, align 1, !tbaa !2452
  %11654 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %11655 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %11656 = load i64, i64* %PC
  %11657 = add i64 %11656, 9
  store i64 %11657, i64* %PC
  %11658 = bitcast i8* %11655 to double*
  %11659 = load double, double* %11658, align 1
  %11660 = getelementptr inbounds i8, i8* %11655, i64 8
  %11661 = bitcast i8* %11660 to i64*
  %11662 = load i64, i64* %11661, align 1
  %11663 = load double, double* bitcast (%B4_type* @B4 to double*)
  %11664 = fadd double %11659, %11663
  %11665 = bitcast i8* %11654 to double*
  store double %11664, double* %11665, align 1, !tbaa !2452
  %11666 = getelementptr inbounds i8, i8* %11654, i64 8
  %11667 = bitcast i8* %11666 to i64*
  store i64 %11662, i64* %11667, align 1, !tbaa !2452
  %11668 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %11669 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %11670 = bitcast %union.vec128_t* %XMM6 to i8*
  %11671 = load i64, i64* %PC
  %11672 = add i64 %11671, 4
  store i64 %11672, i64* %PC
  %11673 = bitcast i8* %11669 to double*
  %11674 = load double, double* %11673, align 1
  %11675 = getelementptr inbounds i8, i8* %11669, i64 8
  %11676 = bitcast i8* %11675 to i64*
  %11677 = load i64, i64* %11676, align 1
  %11678 = bitcast i8* %11670 to double*
  %11679 = load double, double* %11678, align 1
  %11680 = fmul double %11674, %11679
  %11681 = bitcast i8* %11668 to double*
  store double %11680, double* %11681, align 1, !tbaa !2452
  %11682 = getelementptr inbounds i8, i8* %11668, i64 8
  %11683 = bitcast i8* %11682 to i64*
  store i64 %11677, i64* %11683, align 1, !tbaa !2452
  %11684 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %11685 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %11686 = load i64, i64* %PC
  %11687 = add i64 %11686, 9
  store i64 %11687, i64* %PC
  %11688 = bitcast i8* %11685 to double*
  %11689 = load double, double* %11688, align 1
  %11690 = getelementptr inbounds i8, i8* %11685, i64 8
  %11691 = bitcast i8* %11690 to i64*
  %11692 = load i64, i64* %11691, align 1
  %11693 = load double, double* bitcast (%B3_type* @B3 to double*)
  %11694 = fadd double %11689, %11693
  %11695 = bitcast i8* %11684 to double*
  store double %11694, double* %11695, align 1, !tbaa !2452
  %11696 = getelementptr inbounds i8, i8* %11684, i64 8
  %11697 = bitcast i8* %11696 to i64*
  store i64 %11692, i64* %11697, align 1, !tbaa !2452
  %11698 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %11699 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %11700 = bitcast %union.vec128_t* %XMM5 to i8*
  %11701 = load i64, i64* %PC
  %11702 = add i64 %11701, 4
  store i64 %11702, i64* %PC
  %11703 = bitcast i8* %11699 to double*
  %11704 = load double, double* %11703, align 1
  %11705 = getelementptr inbounds i8, i8* %11699, i64 8
  %11706 = bitcast i8* %11705 to i64*
  %11707 = load i64, i64* %11706, align 1
  %11708 = bitcast i8* %11700 to double*
  %11709 = load double, double* %11708, align 1
  %11710 = fmul double %11704, %11709
  %11711 = bitcast i8* %11698 to double*
  store double %11710, double* %11711, align 1, !tbaa !2452
  %11712 = getelementptr inbounds i8, i8* %11698, i64 8
  %11713 = bitcast i8* %11712 to i64*
  store i64 %11707, i64* %11713, align 1, !tbaa !2452
  %11714 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %11715 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %11716 = load i64, i64* %PC
  %11717 = add i64 %11716, 9
  store i64 %11717, i64* %PC
  %11718 = bitcast i8* %11715 to double*
  %11719 = load double, double* %11718, align 1
  %11720 = getelementptr inbounds i8, i8* %11715, i64 8
  %11721 = bitcast i8* %11720 to i64*
  %11722 = load i64, i64* %11721, align 1
  %11723 = load double, double* bitcast (%B2_type* @B2 to double*)
  %11724 = fadd double %11719, %11723
  %11725 = bitcast i8* %11714 to double*
  store double %11724, double* %11725, align 1, !tbaa !2452
  %11726 = getelementptr inbounds i8, i8* %11714, i64 8
  %11727 = bitcast i8* %11726 to i64*
  store i64 %11722, i64* %11727, align 1, !tbaa !2452
  %11728 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11729 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11730 = bitcast %union.vec128_t* %XMM4 to i8*
  %11731 = load i64, i64* %PC
  %11732 = add i64 %11731, 4
  store i64 %11732, i64* %PC
  %11733 = bitcast i8* %11729 to double*
  %11734 = load double, double* %11733, align 1
  %11735 = getelementptr inbounds i8, i8* %11729, i64 8
  %11736 = bitcast i8* %11735 to i64*
  %11737 = load i64, i64* %11736, align 1
  %11738 = bitcast i8* %11730 to double*
  %11739 = load double, double* %11738, align 1
  %11740 = fmul double %11734, %11739
  %11741 = bitcast i8* %11728 to double*
  store double %11740, double* %11741, align 1, !tbaa !2452
  %11742 = getelementptr inbounds i8, i8* %11728, i64 8
  %11743 = bitcast i8* %11742 to i64*
  store i64 %11737, i64* %11743, align 1, !tbaa !2452
  %11744 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11745 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11746 = load i64, i64* %PC
  %11747 = add i64 %11746, 9
  store i64 %11747, i64* %PC
  %11748 = bitcast i8* %11745 to double*
  %11749 = load double, double* %11748, align 1
  %11750 = getelementptr inbounds i8, i8* %11745, i64 8
  %11751 = bitcast i8* %11750 to i64*
  %11752 = load i64, i64* %11751, align 1
  %11753 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %11754 = fadd double %11749, %11753
  %11755 = bitcast i8* %11744 to double*
  store double %11754, double* %11755, align 1, !tbaa !2452
  %11756 = getelementptr inbounds i8, i8* %11744, i64 8
  %11757 = bitcast i8* %11756 to i64*
  store i64 %11752, i64* %11757, align 1, !tbaa !2452
  %11758 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11759 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11760 = bitcast %union.vec128_t* %XMM3 to i8*
  %11761 = load i64, i64* %PC
  %11762 = add i64 %11761, 4
  store i64 %11762, i64* %PC
  %11763 = bitcast i8* %11759 to double*
  %11764 = load double, double* %11763, align 1
  %11765 = getelementptr inbounds i8, i8* %11759, i64 8
  %11766 = bitcast i8* %11765 to i64*
  %11767 = load i64, i64* %11766, align 1
  %11768 = bitcast i8* %11760 to double*
  %11769 = load double, double* %11768, align 1
  %11770 = fmul double %11764, %11769
  %11771 = bitcast i8* %11758 to double*
  store double %11770, double* %11771, align 1, !tbaa !2452
  %11772 = getelementptr inbounds i8, i8* %11758, i64 8
  %11773 = bitcast i8* %11772 to i64*
  store i64 %11767, i64* %11773, align 1, !tbaa !2452
  %11774 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11775 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11776 = load i64, i64* %PC
  %11777 = add i64 %11776, 9
  store i64 %11777, i64* %PC
  %11778 = bitcast i8* %11775 to double*
  %11779 = load double, double* %11778, align 1
  %11780 = getelementptr inbounds i8, i8* %11775, i64 8
  %11781 = bitcast i8* %11780 to i64*
  %11782 = load i64, i64* %11781, align 1
  %11783 = load double, double* bitcast (%one_type* @one to double*)
  %11784 = fadd double %11779, %11783
  %11785 = bitcast i8* %11774 to double*
  store double %11784, double* %11785, align 1, !tbaa !2452
  %11786 = getelementptr inbounds i8, i8* %11774, i64 8
  %11787 = bitcast i8* %11786 to i64*
  store i64 %11782, i64* %11787, align 1, !tbaa !2452
  %11788 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11789 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11790 = bitcast %union.vec128_t* %XMM2 to i8*
  %11791 = load i64, i64* %PC
  %11792 = add i64 %11791, 4
  store i64 %11792, i64* %PC
  %11793 = bitcast i8* %11789 to double*
  %11794 = load double, double* %11793, align 1
  %11795 = getelementptr inbounds i8, i8* %11789, i64 8
  %11796 = bitcast i8* %11795 to i64*
  %11797 = load i64, i64* %11796, align 1
  %11798 = bitcast i8* %11790 to double*
  %11799 = load double, double* %11798, align 1
  %11800 = fdiv double %11794, %11799
  %11801 = bitcast i8* %11788 to double*
  store double %11800, double* %11801, align 1, !tbaa !2452
  %11802 = getelementptr inbounds i8, i8* %11788, i64 8
  %11803 = bitcast i8* %11802 to i64*
  store i64 %11797, i64* %11803, align 1, !tbaa !2452
  %11804 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11805 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11806 = bitcast %union.vec128_t* %XMM1 to i8*
  %11807 = load i64, i64* %PC
  %11808 = add i64 %11807, 4
  store i64 %11808, i64* %PC
  %11809 = bitcast i8* %11805 to double*
  %11810 = load double, double* %11809, align 1
  %11811 = getelementptr inbounds i8, i8* %11805, i64 8
  %11812 = bitcast i8* %11811 to i64*
  %11813 = load i64, i64* %11812, align 1
  %11814 = bitcast i8* %11806 to double*
  %11815 = load double, double* %11814, align 1
  %11816 = fadd double %11810, %11815
  %11817 = bitcast i8* %11804 to double*
  store double %11816, double* %11817, align 1, !tbaa !2452
  %11818 = getelementptr inbounds i8, i8* %11804, i64 8
  %11819 = bitcast i8* %11818 to i64*
  store i64 %11813, i64* %11819, align 1, !tbaa !2452
  %11820 = load i64, i64* %RBP
  %11821 = sub i64 %11820, 16
  %11822 = bitcast %union.vec128_t* %XMM0 to i8*
  %11823 = load i64, i64* %PC
  %11824 = add i64 %11823, 5
  store i64 %11824, i64* %PC
  %11825 = bitcast i8* %11822 to double*
  %11826 = load double, double* %11825, align 1
  %11827 = inttoptr i64 %11821 to double*
  store double %11826, double* %11827
  %11828 = load i64, i64* %RBP
  %11829 = sub i64 %11828, 72
  %11830 = load i64, i64* %PC
  %11831 = add i64 %11830, 4
  store i64 %11831, i64* %PC
  %11832 = inttoptr i64 %11829 to i64*
  %11833 = load i64, i64* %11832
  store i64 %11833, i64* %RAX, align 8, !tbaa !2428
  %11834 = load i64, i64* %RAX
  %11835 = load i64, i64* %PC
  %11836 = add i64 %11835, 4
  store i64 %11836, i64* %PC
  %11837 = add i64 1, %11834
  store i64 %11837, i64* %RAX, align 8, !tbaa !2428
  %11838 = icmp ult i64 %11837, %11834
  %11839 = icmp ult i64 %11837, 1
  %11840 = or i1 %11838, %11839
  %11841 = zext i1 %11840 to i8
  %11842 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11841, i8* %11842, align 1, !tbaa !2432
  %11843 = trunc i64 %11837 to i32
  %11844 = and i32 %11843, 255
  %11845 = call i32 @llvm.ctpop.i32(i32 %11844) #16
  %11846 = trunc i32 %11845 to i8
  %11847 = and i8 %11846, 1
  %11848 = xor i8 %11847, 1
  %11849 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11848, i8* %11849, align 1, !tbaa !2446
  %11850 = xor i64 1, %11834
  %11851 = xor i64 %11850, %11837
  %11852 = lshr i64 %11851, 4
  %11853 = trunc i64 %11852 to i8
  %11854 = and i8 %11853, 1
  %11855 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11854, i8* %11855, align 1, !tbaa !2450
  %11856 = icmp eq i64 %11837, 0
  %11857 = zext i1 %11856 to i8
  %11858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11857, i8* %11858, align 1, !tbaa !2447
  %11859 = lshr i64 %11837, 63
  %11860 = trunc i64 %11859 to i8
  %11861 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11860, i8* %11861, align 1, !tbaa !2448
  %11862 = lshr i64 %11834, 63
  %11863 = xor i64 %11859, %11862
  %11864 = add nuw nsw i64 %11863, %11859
  %11865 = icmp eq i64 %11864, 2
  %11866 = zext i1 %11865 to i8
  %11867 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11866, i8* %11867, align 1, !tbaa !2449
  %11868 = load i64, i64* %RBP
  %11869 = sub i64 %11868, 72
  %11870 = load i64, i64* %RAX
  %11871 = load i64, i64* %PC
  %11872 = add i64 %11871, 4
  store i64 %11872, i64* %PC
  %11873 = inttoptr i64 %11869 to i64*
  store i64 %11870, i64* %11873
  %11874 = load i64, i64* %PC
  %11875 = sub i64 %11874, 307
  %11876 = load i64, i64* %PC
  %11877 = add i64 %11876, 5
  store i64 %11877, i64* %PC
  %11878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11875, i64* %11878, align 8, !tbaa !2428
  br label %block_4014ff

block_400b93:                                     ; preds = %block_400b87, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1
  %MEMORY.9 = phi %struct.Memory* [ %6372, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1 ], [ %6372, %block_400b87 ]
  %11879 = load i64, i64* %PC
  %11880 = add i64 %11879, 10
  store i64 %11880, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %11881 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11882 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11883 = bitcast %union.vec128_t* %XMM0 to i8*
  %11884 = load i64, i64* %PC
  %11885 = add i64 %11884, 3
  store i64 %11885, i64* %PC
  %11886 = bitcast i8* %11882 to i64*
  %11887 = load i64, i64* %11886, align 1
  %11888 = getelementptr inbounds i8, i8* %11882, i64 8
  %11889 = bitcast i8* %11888 to i64*
  %11890 = load i64, i64* %11889, align 1
  %11891 = bitcast i8* %11883 to i64*
  %11892 = load i64, i64* %11891, align 1
  %11893 = getelementptr inbounds i8, i8* %11883, i64 8
  %11894 = bitcast i8* %11893 to i64*
  %11895 = load i64, i64* %11894, align 1
  %11896 = xor i64 %11892, %11887
  %11897 = xor i64 %11895, %11890
  %11898 = trunc i64 %11896 to i32
  %11899 = lshr i64 %11896, 32
  %11900 = trunc i64 %11899 to i32
  %11901 = bitcast i8* %11881 to i32*
  store i32 %11898, i32* %11901, align 1, !tbaa !2454
  %11902 = getelementptr inbounds i8, i8* %11881, i64 4
  %11903 = bitcast i8* %11902 to i32*
  store i32 %11900, i32* %11903, align 1, !tbaa !2454
  %11904 = trunc i64 %11897 to i32
  %11905 = getelementptr inbounds i8, i8* %11881, i64 8
  %11906 = bitcast i8* %11905 to i32*
  store i32 %11904, i32* %11906, align 1, !tbaa !2454
  %11907 = lshr i64 %11897, 32
  %11908 = trunc i64 %11907 to i32
  %11909 = getelementptr inbounds i8, i8* %11881, i64 12
  %11910 = bitcast i8* %11909 to i32*
  store i32 %11908, i32* %11910, align 1, !tbaa !2454
  %11911 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11912 = load i64, i64* %RBP
  %11913 = sub i64 %11912, 80
  %11914 = load i64, i64* %PC
  %11915 = add i64 %11914, 6
  store i64 %11915, i64* %PC
  %11916 = inttoptr i64 %11913 to i64*
  %11917 = load i64, i64* %11916
  %11918 = sitofp i64 %11917 to double
  %11919 = bitcast i8* %11911 to double*
  store double %11918, double* %11919, align 1, !tbaa !2452
  %11920 = bitcast %union.vec128_t* %XMM1 to i8*
  %11921 = load i64, i64* %PC
  %11922 = add i64 %11921, 9
  store i64 %11922, i64* %PC
  %11923 = bitcast i8* %11920 to double*
  %11924 = load double, double* %11923, align 1
  store double %11924, double* bitcast (%sc_type* @sc to double*)
  %11925 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11926 = load i64, i64* %PC
  %11927 = add i64 %11926, 9
  store i64 %11927, i64* %PC
  %11928 = load double, double* bitcast (%sa_type* @sa to double*)
  %11929 = bitcast i8* %11925 to double*
  store double %11928, double* %11929, align 1, !tbaa !2452
  %11930 = getelementptr inbounds i8, i8* %11925, i64 8
  %11931 = bitcast i8* %11930 to double*
  store double 0.000000e+00, double* %11931, align 1, !tbaa !2452
  %11932 = load i64, i64* %RBP
  %11933 = sub i64 %11932, 24
  %11934 = bitcast %union.vec128_t* %XMM1 to i8*
  %11935 = load i64, i64* %PC
  %11936 = add i64 %11935, 5
  store i64 %11936, i64* %PC
  %11937 = bitcast i8* %11934 to double*
  %11938 = load double, double* %11937, align 1
  %11939 = inttoptr i64 %11933 to double*
  store double %11938, double* %11939
  %11940 = load i64, i64* %RBP
  %11941 = sub i64 %11940, 32
  %11942 = bitcast %union.vec128_t* %XMM0 to i8*
  %11943 = load i64, i64* %PC
  %11944 = add i64 %11943, 5
  store i64 %11944, i64* %PC
  %11945 = bitcast i8* %11942 to double*
  %11946 = load double, double* %11945, align 1
  %11947 = inttoptr i64 %11941 to double*
  store double %11946, double* %11947
  %11948 = load i64, i64* %RBP
  %11949 = sub i64 %11948, 40
  %11950 = bitcast %union.vec128_t* %XMM0 to i8*
  %11951 = load i64, i64* %PC
  %11952 = add i64 %11951, 5
  store i64 %11952, i64* %PC
  %11953 = bitcast i8* %11950 to double*
  %11954 = load double, double* %11953, align 1
  %11955 = inttoptr i64 %11949 to double*
  store double %11954, double* %11955
  %11956 = load i64, i64* %RBP
  %11957 = sub i64 %11956, 48
  %11958 = bitcast %union.vec128_t* %XMM0 to i8*
  %11959 = load i64, i64* %PC
  %11960 = add i64 %11959, 5
  store i64 %11960, i64* %PC
  %11961 = bitcast i8* %11958 to double*
  %11962 = load double, double* %11961, align 1
  %11963 = inttoptr i64 %11957 to double*
  store double %11962, double* %11963
  %11964 = load i64, i64* %PC
  %11965 = add i64 %11964, 6676
  %11966 = load i64, i64* %PC
  %11967 = add i64 %11966, 5
  %11968 = load i64, i64* %PC
  %11969 = add i64 %11968, 5
  store i64 %11969, i64* %PC
  %11970 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11971 = load i64, i64* %11970, align 8, !tbaa !2428
  %11972 = add i64 %11971, -8
  %11973 = inttoptr i64 %11972 to i64*
  store i64 %11967, i64* %11973
  store i64 %11972, i64* %11970, align 8, !tbaa !2428
  %11974 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11965, i64* %11974, align 8, !tbaa !2428
  %11975 = load i64, i64* %PC
  %11976 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %11975, %struct.Memory* %MEMORY.9)
  %11977 = load i64, i64* %RBP
  %11978 = sub i64 %11977, 72
  %11979 = load i64, i64* %PC
  %11980 = add i64 %11979, 8
  store i64 %11980, i64* %PC
  %11981 = inttoptr i64 %11978 to i64*
  store i64 1, i64* %11981
  %11982 = load i64, i64* %RBP
  %11983 = sub i64 %11982, 152
  %11984 = load i32, i32* %EAX
  %11985 = zext i32 %11984 to i64
  %11986 = load i64, i64* %PC
  %11987 = add i64 %11986, 6
  store i64 %11987, i64* %PC
  %11988 = inttoptr i64 %11983 to i32*
  store i32 %11984, i32* %11988
  br label %block_400bdf

block_400889:                                     ; preds = %block_40085e
  %11989 = add i64 %12222, 10
  store i64 %11989, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %11990 = load i64, i64* %PC
  %11991 = add i64 %11990, 7501
  %11992 = load i64, i64* %PC
  %11993 = add i64 %11992, 5
  %11994 = load i64, i64* %PC
  %11995 = add i64 %11994, 5
  store i64 %11995, i64* %PC
  %11996 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11997 = load i64, i64* %11996, align 8, !tbaa !2428
  %11998 = add i64 %11997, -8
  %11999 = inttoptr i64 %11998 to i64*
  store i64 %11993, i64* %11999
  store i64 %11998, i64* %11996, align 8, !tbaa !2428
  %12000 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11991, i64* %12000, align 8, !tbaa !2428
  %12001 = load i64, i64* %PC
  %12002 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %12001, %struct.Memory* %MEMORY.10)
  %12003 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12004 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12005 = bitcast %union.vec128_t* %XMM0 to i8*
  %12006 = load i64, i64* %PC
  %12007 = add i64 %12006, 3
  store i64 %12007, i64* %PC
  %12008 = bitcast i8* %12004 to i64*
  %12009 = load i64, i64* %12008, align 1
  %12010 = getelementptr inbounds i8, i8* %12004, i64 8
  %12011 = bitcast i8* %12010 to i64*
  %12012 = load i64, i64* %12011, align 1
  %12013 = bitcast i8* %12005 to i64*
  %12014 = load i64, i64* %12013, align 1
  %12015 = getelementptr inbounds i8, i8* %12005, i64 8
  %12016 = bitcast i8* %12015 to i64*
  %12017 = load i64, i64* %12016, align 1
  %12018 = xor i64 %12014, %12009
  %12019 = xor i64 %12017, %12012
  %12020 = trunc i64 %12018 to i32
  %12021 = lshr i64 %12018, 32
  %12022 = trunc i64 %12021 to i32
  %12023 = bitcast i8* %12003 to i32*
  store i32 %12020, i32* %12023, align 1, !tbaa !2454
  %12024 = getelementptr inbounds i8, i8* %12003, i64 4
  %12025 = bitcast i8* %12024 to i32*
  store i32 %12022, i32* %12025, align 1, !tbaa !2454
  %12026 = trunc i64 %12019 to i32
  %12027 = getelementptr inbounds i8, i8* %12003, i64 8
  %12028 = bitcast i8* %12027 to i32*
  store i32 %12026, i32* %12028, align 1, !tbaa !2454
  %12029 = lshr i64 %12019, 32
  %12030 = trunc i64 %12029 to i32
  %12031 = getelementptr inbounds i8, i8* %12003, i64 12
  %12032 = bitcast i8* %12031 to i32*
  store i32 %12030, i32* %12032, align 1, !tbaa !2454
  %12033 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12034 = load i64, i64* %PC
  %12035 = add i64 %12034, 9
  store i64 %12035, i64* %PC
  %12036 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %12037 = bitcast i8* %12033 to double*
  store double %12036, double* %12037, align 1, !tbaa !2452
  %12038 = getelementptr inbounds i8, i8* %12033, i64 8
  %12039 = bitcast i8* %12038 to double*
  store double 0.000000e+00, double* %12039, align 1, !tbaa !2452
  %12040 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12041 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12042 = load i64, i64* %PC
  %12043 = add i64 %12042, 9
  store i64 %12043, i64* %PC
  %12044 = bitcast i8* %12041 to double*
  %12045 = load double, double* %12044, align 1
  %12046 = getelementptr inbounds i8, i8* %12041, i64 8
  %12047 = bitcast i8* %12046 to i64*
  %12048 = load i64, i64* %12047, align 1
  %12049 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %12050 = fmul double %12045, %12049
  %12051 = bitcast i8* %12040 to double*
  store double %12050, double* %12051, align 1, !tbaa !2452
  %12052 = getelementptr inbounds i8, i8* %12040, i64 8
  %12053 = bitcast i8* %12052 to i64*
  store i64 %12048, i64* %12053, align 1, !tbaa !2452
  %12054 = bitcast %union.vec128_t* %XMM1 to i8*
  %12055 = load i64, i64* %PC
  %12056 = add i64 %12055, 9
  store i64 %12056, i64* %PC
  %12057 = bitcast i8* %12054 to double*
  %12058 = load double, double* %12057, align 1
  store double %12058, double* bitcast (%nulltime_type* @nulltime to double*)
  %12059 = bitcast %union.vec128_t* %XMM0 to i8*
  %12060 = load i64, i64* %PC
  %12061 = add i64 %12060, 9
  store i64 %12061, i64* %PC
  %12062 = bitcast i8* %12059 to double*
  %12063 = load double, double* %12062, align 1
  %12064 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %12065 = fcmp uno double %12063, %12064
  br i1 %12065, label %12066, label %12078

; <label>:12066:                                  ; preds = %block_400889
  %12067 = fadd double %12063, %12064
  %12068 = bitcast double %12067 to i64
  %12069 = and i64 %12068, 9221120237041090560
  %12070 = icmp eq i64 %12069, 9218868437227405312
  %12071 = and i64 %12068, 2251799813685247
  %12072 = icmp ne i64 %12071, 0
  %12073 = and i1 %12070, %12072
  br i1 %12073, label %12074, label %12084

; <label>:12074:                                  ; preds = %12066
  %12075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %12076 = load i64, i64* %12075, align 8, !tbaa !2428
  %12077 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %12076, %struct.Memory* %12002) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:12078:                                  ; preds = %block_400889
  %12079 = fcmp ogt double %12063, %12064
  br i1 %12079, label %12084, label %12080

; <label>:12080:                                  ; preds = %12078
  %12081 = fcmp olt double %12063, %12064
  br i1 %12081, label %12084, label %12082

; <label>:12082:                                  ; preds = %12080
  %12083 = fcmp oeq double %12063, %12064
  br i1 %12083, label %12084, label %12091

; <label>:12084:                                  ; preds = %12082, %12080, %12078, %12066
  %12085 = phi i8 [ 0, %12078 ], [ 0, %12080 ], [ 1, %12082 ], [ 1, %12066 ]
  %12086 = phi i8 [ 0, %12078 ], [ 0, %12080 ], [ 0, %12082 ], [ 1, %12066 ]
  %12087 = phi i8 [ 0, %12078 ], [ 1, %12080 ], [ 0, %12082 ], [ 1, %12066 ]
  %12088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12085, i8* %12088, align 1, !tbaa !2451
  %12089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12086, i8* %12089, align 1, !tbaa !2451
  %12090 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12087, i8* %12090, align 1, !tbaa !2451
  br label %12091

; <label>:12091:                                  ; preds = %12084, %12082
  %12092 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %12092, align 1, !tbaa !2451
  %12093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %12093, align 1, !tbaa !2451
  %12094 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %12094, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %12074, %12091
  %12095 = phi %struct.Memory* [ %12077, %12074 ], [ %12002, %12091 ]
  %12096 = load i64, i64* %RBP
  %12097 = sub i64 %12096, 128
  %12098 = load i32, i32* %EAX
  %12099 = zext i32 %12098 to i64
  %12100 = load i64, i64* %PC
  %12101 = add i64 %12100, 3
  store i64 %12101, i64* %PC
  %12102 = inttoptr i64 %12097 to i32*
  store i32 %12098, i32* %12102
  %12103 = load i64, i64* %PC
  %12104 = add i64 %12103, 18
  %12105 = load i64, i64* %PC
  %12106 = add i64 %12105, 6
  %12107 = load i64, i64* %PC
  %12108 = add i64 %12107, 6
  store i64 %12108, i64* %PC
  %12109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %12110 = load i8, i8* %12109, align 1, !tbaa !2432
  %12111 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %12112 = load i8, i8* %12111, align 1, !tbaa !2447
  %12113 = or i8 %12112, %12110
  %12114 = icmp ne i8 %12113, 0
  %12115 = zext i1 %12114 to i8
  store i8 %12115, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %12116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %12117 = select i1 %12114, i64 %12104, i64 %12106
  store i64 %12117, i64* %12116, align 8, !tbaa !2428
  %12118 = load i8, i8* %BRANCH_TAKEN
  %12119 = icmp eq i8 %12118, 1
  br i1 %12119, label %block_4008d4, label %block_4008c8

block_40085e:                                     ; preds = %block_400873, %block_400821
  %MEMORY.10 = phi %struct.Memory* [ %9345, %block_400821 ], [ %MEMORY.10, %block_400873 ]
  %12120 = load i64, i64* %RBP
  %12121 = sub i64 %12120, 72
  %12122 = load i64, i64* %PC
  %12123 = add i64 %12122, 4
  store i64 %12123, i64* %PC
  %12124 = inttoptr i64 %12121 to i64*
  %12125 = load i64, i64* %12124
  store i64 %12125, i64* %RAX, align 8, !tbaa !2428
  %12126 = load i64, i64* %RBP
  %12127 = sub i64 %12126, 88
  %12128 = load i64, i64* %PC
  %12129 = add i64 %12128, 4
  store i64 %12129, i64* %PC
  %12130 = inttoptr i64 %12127 to i64*
  %12131 = load i64, i64* %12130
  store i64 %12131, i64* %RCX, align 8, !tbaa !2428
  %12132 = load i64, i64* %RCX
  %12133 = load i64, i64* %PC
  %12134 = add i64 %12133, 4
  store i64 %12134, i64* %PC
  %12135 = sub i64 %12132, 1
  store i64 %12135, i64* %RCX, align 8, !tbaa !2428
  %12136 = icmp ult i64 %12132, 1
  %12137 = zext i1 %12136 to i8
  %12138 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12137, i8* %12138, align 1, !tbaa !2432
  %12139 = trunc i64 %12135 to i32
  %12140 = and i32 %12139, 255
  %12141 = call i32 @llvm.ctpop.i32(i32 %12140) #16
  %12142 = trunc i32 %12141 to i8
  %12143 = and i8 %12142, 1
  %12144 = xor i8 %12143, 1
  %12145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12144, i8* %12145, align 1, !tbaa !2446
  %12146 = xor i64 1, %12132
  %12147 = xor i64 %12146, %12135
  %12148 = lshr i64 %12147, 4
  %12149 = trunc i64 %12148 to i8
  %12150 = and i8 %12149, 1
  %12151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12150, i8* %12151, align 1, !tbaa !2450
  %12152 = icmp eq i64 %12135, 0
  %12153 = zext i1 %12152 to i8
  %12154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12153, i8* %12154, align 1, !tbaa !2447
  %12155 = lshr i64 %12135, 63
  %12156 = trunc i64 %12155 to i8
  %12157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12156, i8* %12157, align 1, !tbaa !2448
  %12158 = lshr i64 %12132, 63
  %12159 = xor i64 %12155, %12158
  %12160 = add nuw nsw i64 %12159, %12158
  %12161 = icmp eq i64 %12160, 2
  %12162 = zext i1 %12161 to i8
  %12163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12162, i8* %12163, align 1, !tbaa !2449
  %12164 = load i64, i64* %RAX
  %12165 = load i64, i64* %RCX
  %12166 = load i64, i64* %PC
  %12167 = add i64 %12166, 3
  store i64 %12167, i64* %PC
  %12168 = sub i64 %12164, %12165
  %12169 = icmp ult i64 %12164, %12165
  %12170 = zext i1 %12169 to i8
  %12171 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12170, i8* %12171, align 1, !tbaa !2432
  %12172 = trunc i64 %12168 to i32
  %12173 = and i32 %12172, 255
  %12174 = call i32 @llvm.ctpop.i32(i32 %12173) #16
  %12175 = trunc i32 %12174 to i8
  %12176 = and i8 %12175, 1
  %12177 = xor i8 %12176, 1
  %12178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12177, i8* %12178, align 1, !tbaa !2446
  %12179 = xor i64 %12165, %12164
  %12180 = xor i64 %12179, %12168
  %12181 = lshr i64 %12180, 4
  %12182 = trunc i64 %12181 to i8
  %12183 = and i8 %12182, 1
  %12184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12183, i8* %12184, align 1, !tbaa !2450
  %12185 = icmp eq i64 %12168, 0
  %12186 = zext i1 %12185 to i8
  %12187 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12186, i8* %12187, align 1, !tbaa !2447
  %12188 = lshr i64 %12168, 63
  %12189 = trunc i64 %12188 to i8
  %12190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12189, i8* %12190, align 1, !tbaa !2448
  %12191 = lshr i64 %12164, 63
  %12192 = lshr i64 %12165, 63
  %12193 = xor i64 %12192, %12191
  %12194 = xor i64 %12188, %12191
  %12195 = add nuw nsw i64 %12194, %12193
  %12196 = icmp eq i64 %12195, 2
  %12197 = zext i1 %12196 to i8
  %12198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12197, i8* %12198, align 1, !tbaa !2449
  %12199 = load i64, i64* %PC
  %12200 = add i64 %12199, 28
  %12201 = load i64, i64* %PC
  %12202 = add i64 %12201, 6
  %12203 = load i64, i64* %PC
  %12204 = add i64 %12203, 6
  store i64 %12204, i64* %PC
  %12205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %12206 = load i8, i8* %12205, align 1, !tbaa !2447
  %12207 = icmp eq i8 %12206, 0
  %12208 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %12209 = load i8, i8* %12208, align 1, !tbaa !2448
  %12210 = icmp ne i8 %12209, 0
  %12211 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %12212 = load i8, i8* %12211, align 1, !tbaa !2449
  %12213 = icmp ne i8 %12212, 0
  %12214 = xor i1 %12210, %12213
  %12215 = xor i1 %12214, true
  %12216 = and i1 %12207, %12215
  %12217 = zext i1 %12216 to i8
  store i8 %12217, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %12218 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %12219 = select i1 %12216, i64 %12200, i64 %12202
  store i64 %12219, i64* %12218, align 8, !tbaa !2428
  %12220 = load i8, i8* %BRANCH_TAKEN
  %12221 = icmp eq i8 %12220, 1
  %12222 = load i64, i64* %PC
  br i1 %12221, label %block_400889, label %block_400873

block_400c91:                                     ; preds = %block_400bdf
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %12223 = load i64, i64* %PC
  %12224 = add i64 %12223, 6469
  %12225 = load i64, i64* %PC
  %12226 = add i64 %12225, 5
  %12227 = load i64, i64* %PC
  %12228 = add i64 %12227, 5
  store i64 %12228, i64* %PC
  %12229 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12230 = load i64, i64* %12229, align 8, !tbaa !2428
  %12231 = add i64 %12230, -8
  %12232 = inttoptr i64 %12231 to i64*
  store i64 %12226, i64* %12232
  store i64 %12231, i64* %12229, align 8, !tbaa !2428
  %12233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %12224, i64* %12233, align 8, !tbaa !2428
  %12234 = load i64, i64* %PC
  %12235 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %12234, %struct.Memory* %MEMORY.7)
  %12236 = load i64, i64* %PC
  %12237 = add i64 %12236, 10
  store i64 %12237, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 426), i64* %RDI, align 8, !tbaa !2428
  %12238 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12239 = load i64, i64* %PC
  %12240 = add i64 %12239, 8
  store i64 %12240, i64* %PC
  %12241 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 72) to double*)
  %12242 = bitcast i8* %12238 to double*
  store double %12241, double* %12242, align 1, !tbaa !2452
  %12243 = getelementptr inbounds i8, i8* %12238, i64 8
  %12244 = bitcast i8* %12243 to double*
  store double 0.000000e+00, double* %12244, align 1, !tbaa !2452
  %12245 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12246 = load i64, i64* %PC
  %12247 = add i64 %12246, 8
  store i64 %12247, i64* %PC
  %12248 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 96) to double*)
  %12249 = bitcast i8* %12245 to double*
  store double %12248, double* %12249, align 1, !tbaa !2452
  %12250 = getelementptr inbounds i8, i8* %12245, i64 8
  %12251 = bitcast i8* %12250 to double*
  store double 0.000000e+00, double* %12251, align 1, !tbaa !2452
  %12252 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12253 = load i64, i64* %PC
  %12254 = add i64 %12253, 8
  store i64 %12254, i64* %PC
  %12255 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026f0__rodata_type* @seg_4026f0__rodata to i64), i64 104) to double*)
  %12256 = bitcast i8* %12252 to double*
  store double %12255, double* %12256, align 1, !tbaa !2452
  %12257 = getelementptr inbounds i8, i8* %12252, i64 8
  %12258 = bitcast i8* %12257 to double*
  store double 0.000000e+00, double* %12258, align 1, !tbaa !2452
  %12259 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12260 = load i64, i64* %PC
  %12261 = add i64 %12260, 9
  store i64 %12261, i64* %PC
  %12262 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %12263 = bitcast i8* %12259 to double*
  store double %12262, double* %12263, align 1, !tbaa !2452
  %12264 = getelementptr inbounds i8, i8* %12259, i64 8
  %12265 = bitcast i8* %12264 to double*
  store double 0.000000e+00, double* %12265, align 1, !tbaa !2452
  %12266 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12267 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12268 = load i64, i64* %PC
  %12269 = add i64 %12268, 9
  store i64 %12269, i64* %PC
  %12270 = bitcast i8* %12267 to double*
  %12271 = load double, double* %12270, align 1
  %12272 = getelementptr inbounds i8, i8* %12267, i64 8
  %12273 = bitcast i8* %12272 to i64*
  %12274 = load i64, i64* %12273, align 1
  %12275 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %12276 = fmul double %12271, %12275
  %12277 = bitcast i8* %12266 to double*
  store double %12276, double* %12277, align 1, !tbaa !2452
  %12278 = getelementptr inbounds i8, i8* %12266, i64 8
  %12279 = bitcast i8* %12278 to i64*
  store i64 %12274, i64* %12279, align 1, !tbaa !2452
  %12280 = bitcast %union.vec128_t* %XMM3 to i8*
  %12281 = load i64, i64* %PC
  %12282 = add i64 %12281, 9
  store i64 %12282, i64* %PC
  %12283 = bitcast i8* %12280 to double*
  %12284 = load double, double* %12283, align 1
  store double %12284, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 48) to double*)
  %12285 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12286 = load i64, i64* %PC
  %12287 = add i64 %12286, 9
  store i64 %12287, i64* %PC
  %12288 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 48) to double*)
  %12289 = bitcast i8* %12285 to double*
  store double %12288, double* %12289, align 1, !tbaa !2452
  %12290 = getelementptr inbounds i8, i8* %12285, i64 8
  %12291 = bitcast i8* %12290 to double*
  store double 0.000000e+00, double* %12291, align 1, !tbaa !2452
  %12292 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12293 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12294 = load i64, i64* %PC
  %12295 = add i64 %12294, 9
  store i64 %12295, i64* %PC
  %12296 = bitcast i8* %12293 to double*
  %12297 = load double, double* %12296, align 1
  %12298 = getelementptr inbounds i8, i8* %12293, i64 8
  %12299 = bitcast i8* %12298 to i64*
  %12300 = load i64, i64* %12299, align 1
  %12301 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  %12302 = fsub double %12297, %12301
  %12303 = bitcast i8* %12292 to double*
  store double %12302, double* %12303, align 1, !tbaa !2452
  %12304 = getelementptr inbounds i8, i8* %12292, i64 8
  %12305 = bitcast i8* %12304 to i64*
  store i64 %12300, i64* %12305, align 1, !tbaa !2452
  %12306 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12307 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12308 = bitcast %union.vec128_t* %XMM2 to i8*
  %12309 = load i64, i64* %PC
  %12310 = add i64 %12309, 4
  store i64 %12310, i64* %PC
  %12311 = bitcast i8* %12307 to double*
  %12312 = load double, double* %12311, align 1
  %12313 = getelementptr inbounds i8, i8* %12307, i64 8
  %12314 = bitcast i8* %12313 to i64*
  %12315 = load i64, i64* %12314, align 1
  %12316 = bitcast i8* %12308 to double*
  %12317 = load double, double* %12316, align 1
  %12318 = fdiv double %12312, %12317
  %12319 = bitcast i8* %12306 to double*
  store double %12318, double* %12319, align 1, !tbaa !2452
  %12320 = getelementptr inbounds i8, i8* %12306, i64 8
  %12321 = bitcast i8* %12320 to i64*
  store i64 %12315, i64* %12321, align 1, !tbaa !2452
  %12322 = bitcast %union.vec128_t* %XMM3 to i8*
  %12323 = load i64, i64* %PC
  %12324 = add i64 %12323, 9
  store i64 %12324, i64* %PC
  %12325 = bitcast i8* %12322 to double*
  %12326 = load double, double* %12325, align 1
  store double %12326, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 56) to double*)
  %12327 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12328 = load i64, i64* %PC
  %12329 = add i64 %12328, 9
  store i64 %12329, i64* %PC
  %12330 = load double, double* bitcast (%sa_type* @sa to double*)
  %12331 = bitcast i8* %12327 to double*
  store double %12330, double* %12331, align 1, !tbaa !2452
  %12332 = getelementptr inbounds i8, i8* %12327, i64 8
  %12333 = bitcast i8* %12332 to double*
  store double 0.000000e+00, double* %12333, align 1, !tbaa !2452
  %12334 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12335 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12336 = load i64, i64* %RBP
  %12337 = sub i64 %12336, 48
  %12338 = load i64, i64* %PC
  %12339 = add i64 %12338, 5
  store i64 %12339, i64* %PC
  %12340 = bitcast i8* %12335 to double*
  %12341 = load double, double* %12340, align 1
  %12342 = getelementptr inbounds i8, i8* %12335, i64 8
  %12343 = bitcast i8* %12342 to i64*
  %12344 = load i64, i64* %12343, align 1
  %12345 = inttoptr i64 %12337 to double*
  %12346 = load double, double* %12345
  %12347 = fmul double %12341, %12346
  %12348 = bitcast i8* %12334 to double*
  store double %12347, double* %12348, align 1, !tbaa !2452
  %12349 = getelementptr inbounds i8, i8* %12334, i64 8
  %12350 = bitcast i8* %12349 to i64*
  store i64 %12344, i64* %12350, align 1, !tbaa !2452
  %12351 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12352 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12353 = load i64, i64* %PC
  %12354 = add i64 %12353, 9
  store i64 %12354, i64* %PC
  %12355 = bitcast i8* %12352 to double*
  %12356 = load double, double* %12355, align 1
  %12357 = getelementptr inbounds i8, i8* %12352, i64 8
  %12358 = bitcast i8* %12357 to i64*
  %12359 = load i64, i64* %12358, align 1
  %12360 = load double, double* bitcast (%sc_type* @sc to double*)
  %12361 = fdiv double %12356, %12360
  %12362 = bitcast i8* %12351 to double*
  store double %12361, double* %12362, align 1, !tbaa !2452
  %12363 = getelementptr inbounds i8, i8* %12351, i64 8
  %12364 = bitcast i8* %12363 to i64*
  store i64 %12359, i64* %12364, align 1, !tbaa !2452
  %12365 = bitcast %union.vec128_t* %XMM2 to i8*
  %12366 = load i64, i64* %PC
  %12367 = add i64 %12366, 5
  store i64 %12367, i64* %PC
  %12368 = bitcast i8* %12365 to double*
  %12369 = load double, double* %12368, align 1
  %12370 = call double @llvm.trunc.f64(double %12369) #16
  %12371 = call double @llvm.fabs.f64(double %12370) #16
  %12372 = fcmp ogt double %12371, 0x43E0000000000000
  %12373 = fptosi double %12370 to i64
  %12374 = select i1 %12372, i64 -9223372036854775808, i64 %12373
  store i64 %12374, i64* %RCX, align 8, !tbaa !2428
  %12375 = load i64, i64* %RBP
  %12376 = sub i64 %12375, 80
  %12377 = load i64, i64* %RCX
  %12378 = load i64, i64* %PC
  %12379 = add i64 %12378, 4
  store i64 %12379, i64* %PC
  %12380 = inttoptr i64 %12376 to i64*
  store i64 %12377, i64* %12380
  %12381 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12382 = load i64, i64* %PC
  %12383 = add i64 %12382, 9
  store i64 %12383, i64* %PC
  %12384 = load double, double* bitcast (%four_type* @four to double*)
  %12385 = bitcast i8* %12381 to double*
  store double %12384, double* %12385, align 1, !tbaa !2452
  %12386 = getelementptr inbounds i8, i8* %12381, i64 8
  %12387 = bitcast i8* %12386 to double*
  store double 0.000000e+00, double* %12387, align 1, !tbaa !2452
  %12388 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12389 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12390 = load i64, i64* %RBP
  %12391 = sub i64 %12390, 40
  %12392 = load i64, i64* %PC
  %12393 = add i64 %12392, 5
  store i64 %12393, i64* %PC
  %12394 = bitcast i8* %12389 to double*
  %12395 = load double, double* %12394, align 1
  %12396 = getelementptr inbounds i8, i8* %12389, i64 8
  %12397 = bitcast i8* %12396 to i64*
  %12398 = load i64, i64* %12397, align 1
  %12399 = inttoptr i64 %12391 to double*
  %12400 = load double, double* %12399
  %12401 = fmul double %12395, %12400
  %12402 = bitcast i8* %12388 to double*
  store double %12401, double* %12402, align 1, !tbaa !2452
  %12403 = getelementptr inbounds i8, i8* %12388, i64 8
  %12404 = bitcast i8* %12403 to i64*
  store i64 %12398, i64* %12404, align 1, !tbaa !2452
  %12405 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12406 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12407 = load i64, i64* %PC
  %12408 = add i64 %12407, 9
  store i64 %12408, i64* %PC
  %12409 = bitcast i8* %12406 to double*
  %12410 = load double, double* %12409, align 1
  %12411 = getelementptr inbounds i8, i8* %12406, i64 8
  %12412 = bitcast i8* %12411 to i64*
  %12413 = load i64, i64* %12412, align 1
  %12414 = load double, double* bitcast (%five_type* @five to double*)
  %12415 = fdiv double %12410, %12414
  %12416 = bitcast i8* %12405 to double*
  store double %12415, double* %12416, align 1, !tbaa !2452
  %12417 = getelementptr inbounds i8, i8* %12405, i64 8
  %12418 = bitcast i8* %12417 to i64*
  store i64 %12413, i64* %12418, align 1, !tbaa !2452
  %12419 = bitcast %union.vec128_t* %XMM2 to i8*
  %12420 = load i64, i64* %PC
  %12421 = add i64 %12420, 9
  store i64 %12421, i64* %PC
  %12422 = bitcast i8* %12419 to double*
  %12423 = load double, double* %12422, align 1
  store double %12423, double* bitcast (%sa_type* @sa to double*)
  %12424 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12425 = load i64, i64* %PC
  %12426 = add i64 %12425, 9
  store i64 %12426, i64* %PC
  %12427 = load double, double* bitcast (%sa_type* @sa to double*)
  %12428 = bitcast i8* %12424 to double*
  store double %12427, double* %12428, align 1, !tbaa !2452
  %12429 = getelementptr inbounds i8, i8* %12424, i64 8
  %12430 = bitcast i8* %12429 to double*
  store double 0.000000e+00, double* %12430, align 1, !tbaa !2452
  %12431 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12432 = load i64, i64* %PC
  %12433 = add i64 %12432, 9
  store i64 %12433, i64* %PC
  %12434 = load double, double* bitcast (%five_type* @five to double*)
  %12435 = bitcast i8* %12431 to double*
  store double %12434, double* %12435, align 1, !tbaa !2452
  %12436 = getelementptr inbounds i8, i8* %12431, i64 8
  %12437 = bitcast i8* %12436 to double*
  store double 0.000000e+00, double* %12437, align 1, !tbaa !2452
  %12438 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12439 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12440 = load i64, i64* %RBP
  %12441 = sub i64 %12440, 32
  %12442 = load i64, i64* %PC
  %12443 = add i64 %12442, 5
  store i64 %12443, i64* %PC
  %12444 = bitcast i8* %12439 to double*
  %12445 = load double, double* %12444, align 1
  %12446 = getelementptr inbounds i8, i8* %12439, i64 8
  %12447 = bitcast i8* %12446 to i64*
  %12448 = load i64, i64* %12447, align 1
  %12449 = inttoptr i64 %12441 to double*
  %12450 = load double, double* %12449
  %12451 = fdiv double %12445, %12450
  %12452 = bitcast i8* %12438 to double*
  store double %12451, double* %12452, align 1, !tbaa !2452
  %12453 = getelementptr inbounds i8, i8* %12438, i64 8
  %12454 = bitcast i8* %12453 to i64*
  store i64 %12448, i64* %12454, align 1, !tbaa !2452
  %12455 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12456 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12457 = bitcast %union.vec128_t* %XMM3 to i8*
  %12458 = load i64, i64* %PC
  %12459 = add i64 %12458, 4
  store i64 %12459, i64* %PC
  %12460 = bitcast i8* %12456 to double*
  %12461 = load double, double* %12460, align 1
  %12462 = getelementptr inbounds i8, i8* %12456, i64 8
  %12463 = bitcast i8* %12462 to i64*
  %12464 = load i64, i64* %12463, align 1
  %12465 = bitcast i8* %12457 to double*
  %12466 = load double, double* %12465, align 1
  %12467 = fadd double %12461, %12466
  %12468 = bitcast i8* %12455 to double*
  store double %12467, double* %12468, align 1, !tbaa !2452
  %12469 = getelementptr inbounds i8, i8* %12455, i64 8
  %12470 = bitcast i8* %12469 to i64*
  store i64 %12464, i64* %12470, align 1, !tbaa !2452
  %12471 = bitcast %union.vec128_t* %XMM2 to i8*
  %12472 = load i64, i64* %PC
  %12473 = add i64 %12472, 9
  store i64 %12473, i64* %PC
  %12474 = bitcast i8* %12471 to double*
  %12475 = load double, double* %12474, align 1
  store double %12475, double* bitcast (%sb_type* @sb to double*)
  %12476 = bitcast %union.vec128_t* %XMM1 to i8*
  %12477 = load i64, i64* %PC
  %12478 = add i64 %12477, 9
  store i64 %12478, i64* %PC
  %12479 = bitcast i8* %12476 to double*
  %12480 = load double, double* %12479, align 1
  store double %12480, double* bitcast (%sc_type* @sc to double*)
  %12481 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12482 = load i64, i64* %PC
  %12483 = add i64 %12482, 9
  store i64 %12483, i64* %PC
  %12484 = load double, double* bitcast (%sb_type* @sb to double*)
  %12485 = bitcast i8* %12481 to double*
  store double %12484, double* %12485, align 1, !tbaa !2452
  %12486 = getelementptr inbounds i8, i8* %12481, i64 8
  %12487 = bitcast i8* %12486 to double*
  store double 0.000000e+00, double* %12487, align 1, !tbaa !2452
  %12488 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12489 = load i64, i64* %PC
  %12490 = add i64 %12489, 9
  store i64 %12490, i64* %PC
  %12491 = load double, double* bitcast (%sc_type* @sc to double*)
  %12492 = bitcast i8* %12488 to double*
  store double %12491, double* %12492, align 1, !tbaa !2452
  %12493 = getelementptr inbounds i8, i8* %12488, i64 8
  %12494 = bitcast i8* %12493 to double*
  store double 0.000000e+00, double* %12494, align 1, !tbaa !2452
  %12495 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12496 = load i64, i64* %RBP
  %12497 = sub i64 %12496, 32
  %12498 = load i64, i64* %PC
  %12499 = add i64 %12498, 5
  store i64 %12499, i64* %PC
  %12500 = inttoptr i64 %12497 to double*
  %12501 = load double, double* %12500
  %12502 = bitcast i8* %12495 to double*
  store double %12501, double* %12502, align 1, !tbaa !2452
  %12503 = getelementptr inbounds i8, i8* %12495, i64 8
  %12504 = bitcast i8* %12503 to double*
  store double 0.000000e+00, double* %12504, align 1, !tbaa !2452
  %12505 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12506 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12507 = load i64, i64* %RBP
  %12508 = sub i64 %12507, 32
  %12509 = load i64, i64* %PC
  %12510 = add i64 %12509, 5
  store i64 %12510, i64* %PC
  %12511 = bitcast i8* %12506 to double*
  %12512 = load double, double* %12511, align 1
  %12513 = getelementptr inbounds i8, i8* %12506, i64 8
  %12514 = bitcast i8* %12513 to i64*
  %12515 = load i64, i64* %12514, align 1
  %12516 = inttoptr i64 %12508 to double*
  %12517 = load double, double* %12516
  %12518 = fmul double %12512, %12517
  %12519 = bitcast i8* %12505 to double*
  store double %12518, double* %12519, align 1, !tbaa !2452
  %12520 = getelementptr inbounds i8, i8* %12505, i64 8
  %12521 = bitcast i8* %12520 to i64*
  store i64 %12515, i64* %12521, align 1, !tbaa !2452
  %12522 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12523 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12524 = load i64, i64* %RBP
  %12525 = sub i64 %12524, 32
  %12526 = load i64, i64* %PC
  %12527 = add i64 %12526, 5
  store i64 %12527, i64* %PC
  %12528 = bitcast i8* %12523 to double*
  %12529 = load double, double* %12528, align 1
  %12530 = getelementptr inbounds i8, i8* %12523, i64 8
  %12531 = bitcast i8* %12530 to i64*
  %12532 = load i64, i64* %12531, align 1
  %12533 = inttoptr i64 %12525 to double*
  %12534 = load double, double* %12533
  %12535 = fmul double %12529, %12534
  %12536 = bitcast i8* %12522 to double*
  store double %12535, double* %12536, align 1, !tbaa !2452
  %12537 = getelementptr inbounds i8, i8* %12522, i64 8
  %12538 = bitcast i8* %12537 to i64*
  store i64 %12532, i64* %12538, align 1, !tbaa !2452
  %12539 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12540 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12541 = bitcast %union.vec128_t* %XMM3 to i8*
  %12542 = load i64, i64* %PC
  %12543 = add i64 %12542, 4
  store i64 %12543, i64* %PC
  %12544 = bitcast i8* %12540 to double*
  %12545 = load double, double* %12544, align 1
  %12546 = getelementptr inbounds i8, i8* %12540, i64 8
  %12547 = bitcast i8* %12546 to i64*
  %12548 = load i64, i64* %12547, align 1
  %12549 = bitcast i8* %12541 to double*
  %12550 = load double, double* %12549, align 1
  %12551 = fdiv double %12545, %12550
  %12552 = bitcast i8* %12539 to double*
  store double %12551, double* %12552, align 1, !tbaa !2452
  %12553 = getelementptr inbounds i8, i8* %12539, i64 8
  %12554 = bitcast i8* %12553 to i64*
  store i64 %12548, i64* %12554, align 1, !tbaa !2452
  %12555 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12556 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12557 = bitcast %union.vec128_t* %XMM2 to i8*
  %12558 = load i64, i64* %PC
  %12559 = add i64 %12558, 4
  store i64 %12559, i64* %PC
  %12560 = bitcast i8* %12556 to double*
  %12561 = load double, double* %12560, align 1
  %12562 = getelementptr inbounds i8, i8* %12556, i64 8
  %12563 = bitcast i8* %12562 to i64*
  %12564 = load i64, i64* %12563, align 1
  %12565 = bitcast i8* %12557 to double*
  %12566 = load double, double* %12565, align 1
  %12567 = fsub double %12561, %12566
  %12568 = bitcast i8* %12555 to double*
  store double %12567, double* %12568, align 1, !tbaa !2452
  %12569 = getelementptr inbounds i8, i8* %12555, i64 8
  %12570 = bitcast i8* %12569 to i64*
  store i64 %12564, i64* %12570, align 1, !tbaa !2452
  %12571 = bitcast %union.vec128_t* %XMM1 to i8*
  %12572 = load i64, i64* %PC
  %12573 = add i64 %12572, 9
  store i64 %12573, i64* %PC
  %12574 = bitcast i8* %12571 to double*
  %12575 = load double, double* %12574, align 1
  store double %12575, double* bitcast (%piprg_type* @piprg to double*)
  %12576 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12577 = load i64, i64* %PC
  %12578 = add i64 %12577, 9
  store i64 %12578, i64* %PC
  %12579 = load double, double* bitcast (%piprg_type* @piprg to double*)
  %12580 = bitcast i8* %12576 to double*
  store double %12579, double* %12580, align 1, !tbaa !2452
  %12581 = getelementptr inbounds i8, i8* %12576, i64 8
  %12582 = bitcast i8* %12581 to double*
  store double 0.000000e+00, double* %12582, align 1, !tbaa !2452
  %12583 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12584 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12585 = load i64, i64* %PC
  %12586 = add i64 %12585, 9
  store i64 %12586, i64* %PC
  %12587 = bitcast i8* %12584 to double*
  %12588 = load double, double* %12587, align 1
  %12589 = getelementptr inbounds i8, i8* %12584, i64 8
  %12590 = bitcast i8* %12589 to i64*
  %12591 = load i64, i64* %12590, align 1
  %12592 = load double, double* bitcast (%piref_type* @piref to double*)
  %12593 = fsub double %12588, %12592
  %12594 = bitcast i8* %12583 to double*
  store double %12593, double* %12594, align 1, !tbaa !2452
  %12595 = getelementptr inbounds i8, i8* %12583, i64 8
  %12596 = bitcast i8* %12595 to i64*
  store i64 %12591, i64* %12596, align 1, !tbaa !2452
  %12597 = bitcast %union.vec128_t* %XMM1 to i8*
  %12598 = load i64, i64* %PC
  %12599 = add i64 %12598, 9
  store i64 %12599, i64* %PC
  %12600 = bitcast i8* %12597 to double*
  %12601 = load double, double* %12600, align 1
  store double %12601, double* bitcast (%pierr_type* @pierr to double*)
  %12602 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12603 = load i64, i64* %PC
  %12604 = add i64 %12603, 9
  store i64 %12604, i64* %PC
  %12605 = load double, double* bitcast (%one_type* @one to double*)
  %12606 = bitcast i8* %12602 to double*
  store double %12605, double* %12606, align 1, !tbaa !2452
  %12607 = getelementptr inbounds i8, i8* %12602, i64 8
  %12608 = bitcast i8* %12607 to double*
  store double 0.000000e+00, double* %12608, align 1, !tbaa !2452
  %12609 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12610 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12611 = load i64, i64* %PC
  %12612 = add i64 %12611, 9
  store i64 %12612, i64* %PC
  %12613 = bitcast i8* %12610 to double*
  %12614 = load double, double* %12613, align 1
  %12615 = getelementptr inbounds i8, i8* %12610, i64 8
  %12616 = bitcast i8* %12615 to i64*
  %12617 = load i64, i64* %12616, align 1
  %12618 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 56) to double*)
  %12619 = fdiv double %12614, %12618
  %12620 = bitcast i8* %12609 to double*
  store double %12619, double* %12620, align 1, !tbaa !2452
  %12621 = getelementptr inbounds i8, i8* %12609, i64 8
  %12622 = bitcast i8* %12621 to i64*
  store i64 %12617, i64* %12622, align 1, !tbaa !2452
  %12623 = bitcast %union.vec128_t* %XMM1 to i8*
  %12624 = load i64, i64* %PC
  %12625 = add i64 %12624, 9
  store i64 %12625, i64* %PC
  %12626 = bitcast i8* %12623 to double*
  %12627 = load double, double* %12626, align 1
  store double %12627, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 64) to double*)
  %12628 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12629 = bitcast %union.vec128_t* %XMM0 to i8*
  %12630 = load i64, i64* %PC
  %12631 = add i64 %12630, 3
  store i64 %12631, i64* %PC
  %12632 = bitcast i8* %12629 to <2 x i32>*
  %12633 = load <2 x i32>, <2 x i32>* %12632, align 1
  %12634 = getelementptr inbounds i8, i8* %12629, i64 8
  %12635 = bitcast i8* %12634 to <2 x i32>*
  %12636 = load <2 x i32>, <2 x i32>* %12635, align 1
  %12637 = extractelement <2 x i32> %12633, i32 0
  %12638 = bitcast i8* %12628 to i32*
  store i32 %12637, i32* %12638, align 1, !tbaa !2455
  %12639 = extractelement <2 x i32> %12633, i32 1
  %12640 = getelementptr inbounds i8, i8* %12628, i64 4
  %12641 = bitcast i8* %12640 to i32*
  store i32 %12639, i32* %12641, align 1, !tbaa !2455
  %12642 = extractelement <2 x i32> %12636, i32 0
  %12643 = getelementptr inbounds i8, i8* %12628, i64 8
  %12644 = bitcast i8* %12643 to i32*
  store i32 %12642, i32* %12644, align 1, !tbaa !2455
  %12645 = extractelement <2 x i32> %12636, i32 1
  %12646 = getelementptr inbounds i8, i8* %12628, i64 12
  %12647 = bitcast i8* %12646 to i32*
  store i32 %12645, i32* %12647, align 1, !tbaa !2455
  %12648 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12649 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12650 = load i64, i64* %PC
  %12651 = add i64 %12650, 9
  store i64 %12651, i64* %PC
  %12652 = bitcast i8* %12649 to double*
  %12653 = load double, double* %12652, align 1
  %12654 = getelementptr inbounds i8, i8* %12649, i64 8
  %12655 = bitcast i8* %12654 to i64*
  %12656 = load i64, i64* %12655, align 1
  %12657 = load double, double* bitcast (%pierr_type* @pierr to double*)
  %12658 = fmul double %12653, %12657
  %12659 = bitcast i8* %12648 to double*
  store double %12658, double* %12659, align 1, !tbaa !2452
  %12660 = getelementptr inbounds i8, i8* %12648, i64 8
  %12661 = bitcast i8* %12660 to i64*
  store i64 %12656, i64* %12661, align 1, !tbaa !2452
  %12662 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12663 = load i64, i64* %PC
  %12664 = add i64 %12663, 9
  store i64 %12664, i64* %PC
  %12665 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 48) to double*)
  %12666 = bitcast i8* %12662 to double*
  store double %12665, double* %12666, align 1, !tbaa !2452
  %12667 = getelementptr inbounds i8, i8* %12662, i64 8
  %12668 = bitcast i8* %12667 to double*
  store double 0.000000e+00, double* %12668, align 1, !tbaa !2452
  %12669 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12670 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12671 = load i64, i64* %PC
  %12672 = add i64 %12671, 9
  store i64 %12672, i64* %PC
  %12673 = bitcast i8* %12670 to double*
  %12674 = load double, double* %12673, align 1
  %12675 = getelementptr inbounds i8, i8* %12670, i64 8
  %12676 = bitcast i8* %12675 to i64*
  %12677 = load i64, i64* %12676, align 1
  %12678 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  %12679 = fsub double %12674, %12678
  %12680 = bitcast i8* %12669 to double*
  store double %12679, double* %12680, align 1, !tbaa !2452
  %12681 = getelementptr inbounds i8, i8* %12669, i64 8
  %12682 = bitcast i8* %12681 to i64*
  store i64 %12677, i64* %12682, align 1, !tbaa !2452
  %12683 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12684 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12685 = bitcast %union.vec128_t* %XMM0 to i8*
  %12686 = load i64, i64* %PC
  %12687 = add i64 %12686, 4
  store i64 %12687, i64* %PC
  %12688 = bitcast i8* %12684 to double*
  %12689 = load double, double* %12688, align 1
  %12690 = getelementptr inbounds i8, i8* %12684, i64 8
  %12691 = bitcast i8* %12690 to i64*
  %12692 = load i64, i64* %12691, align 1
  %12693 = bitcast i8* %12685 to double*
  %12694 = load double, double* %12693, align 1
  %12695 = fmul double %12689, %12694
  %12696 = bitcast i8* %12683 to double*
  store double %12695, double* %12696, align 1, !tbaa !2452
  %12697 = getelementptr inbounds i8, i8* %12683, i64 8
  %12698 = bitcast i8* %12697 to i64*
  store i64 %12692, i64* %12698, align 1, !tbaa !2452
  %12699 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12700 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12701 = load i64, i64* %PC
  %12702 = add i64 %12701, 9
  store i64 %12702, i64* %PC
  %12703 = bitcast i8* %12700 to double*
  %12704 = load double, double* %12703, align 1
  %12705 = getelementptr inbounds i8, i8* %12700, i64 8
  %12706 = bitcast i8* %12705 to i64*
  %12707 = load i64, i64* %12706, align 1
  %12708 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 64) to double*)
  %12709 = fmul double %12704, %12708
  %12710 = bitcast i8* %12699 to double*
  store double %12709, double* %12710, align 1, !tbaa !2452
  %12711 = getelementptr inbounds i8, i8* %12699, i64 8
  %12712 = bitcast i8* %12711 to i64*
  store i64 %12707, i64* %12712, align 1, !tbaa !2452
  %12713 = load i64, i64* %RBP
  %12714 = sub i64 %12713, 160
  %12715 = bitcast %union.vec128_t* %XMM0 to i8*
  %12716 = load i64, i64* %PC
  %12717 = add i64 %12716, 8
  store i64 %12717, i64* %PC
  %12718 = bitcast i8* %12715 to double*
  %12719 = load double, double* %12718, align 1
  %12720 = inttoptr i64 %12714 to double*
  store double %12719, double* %12720
  %12721 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12722 = bitcast %union.vec128_t* %XMM1 to i8*
  %12723 = load i64, i64* %PC
  %12724 = add i64 %12723, 3
  store i64 %12724, i64* %PC
  %12725 = bitcast i8* %12722 to <2 x i32>*
  %12726 = load <2 x i32>, <2 x i32>* %12725, align 1
  %12727 = getelementptr inbounds i8, i8* %12722, i64 8
  %12728 = bitcast i8* %12727 to <2 x i32>*
  %12729 = load <2 x i32>, <2 x i32>* %12728, align 1
  %12730 = extractelement <2 x i32> %12726, i32 0
  %12731 = bitcast i8* %12721 to i32*
  store i32 %12730, i32* %12731, align 1, !tbaa !2455
  %12732 = extractelement <2 x i32> %12726, i32 1
  %12733 = getelementptr inbounds i8, i8* %12721, i64 4
  %12734 = bitcast i8* %12733 to i32*
  store i32 %12732, i32* %12734, align 1, !tbaa !2455
  %12735 = extractelement <2 x i32> %12729, i32 0
  %12736 = getelementptr inbounds i8, i8* %12721, i64 8
  %12737 = bitcast i8* %12736 to i32*
  store i32 %12735, i32* %12737, align 1, !tbaa !2455
  %12738 = extractelement <2 x i32> %12729, i32 1
  %12739 = getelementptr inbounds i8, i8* %12721, i64 12
  %12740 = bitcast i8* %12739 to i32*
  store i32 %12738, i32* %12740, align 1, !tbaa !2455
  %12741 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12742 = bitcast %union.vec128_t* %XMM2 to i8*
  %12743 = load i64, i64* %PC
  %12744 = add i64 %12743, 3
  store i64 %12744, i64* %PC
  %12745 = bitcast i8* %12742 to <2 x i32>*
  %12746 = load <2 x i32>, <2 x i32>* %12745, align 1
  %12747 = getelementptr inbounds i8, i8* %12742, i64 8
  %12748 = bitcast i8* %12747 to <2 x i32>*
  %12749 = load <2 x i32>, <2 x i32>* %12748, align 1
  %12750 = extractelement <2 x i32> %12746, i32 0
  %12751 = bitcast i8* %12741 to i32*
  store i32 %12750, i32* %12751, align 1, !tbaa !2455
  %12752 = extractelement <2 x i32> %12746, i32 1
  %12753 = getelementptr inbounds i8, i8* %12741, i64 4
  %12754 = bitcast i8* %12753 to i32*
  store i32 %12752, i32* %12754, align 1, !tbaa !2455
  %12755 = extractelement <2 x i32> %12749, i32 0
  %12756 = getelementptr inbounds i8, i8* %12741, i64 8
  %12757 = bitcast i8* %12756 to i32*
  store i32 %12755, i32* %12757, align 1, !tbaa !2455
  %12758 = extractelement <2 x i32> %12749, i32 1
  %12759 = getelementptr inbounds i8, i8* %12741, i64 12
  %12760 = bitcast i8* %12759 to i32*
  store i32 %12758, i32* %12760, align 1, !tbaa !2455
  %12761 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12762 = load i64, i64* %RBP
  %12763 = sub i64 %12762, 160
  %12764 = load i64, i64* %PC
  %12765 = add i64 %12764, 8
  store i64 %12765, i64* %PC
  %12766 = inttoptr i64 %12763 to double*
  %12767 = load double, double* %12766
  %12768 = bitcast i8* %12761 to double*
  store double %12767, double* %12768, align 1, !tbaa !2452
  %12769 = getelementptr inbounds i8, i8* %12761, i64 8
  %12770 = bitcast i8* %12769 to double*
  store double 0.000000e+00, double* %12770, align 1, !tbaa !2452
  %12771 = load i64, i64* %RBP
  %12772 = sub i64 %12771, 164
  %12773 = load i32, i32* %EAX
  %12774 = zext i32 %12773 to i64
  %12775 = load i64, i64* %PC
  %12776 = add i64 %12775, 6
  store i64 %12776, i64* %PC
  %12777 = inttoptr i64 %12772 to i32*
  store i32 %12773, i32* %12777
  %12778 = load i64, i64* %PC
  %12779 = add i64 %12778, 2
  store i64 %12779, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %12780 = load i64, i64* %PC
  %12781 = sub i64 %12780, 2506
  %12782 = load i64, i64* %PC
  %12783 = add i64 %12782, 5
  %12784 = load i64, i64* %PC
  %12785 = add i64 %12784, 5
  store i64 %12785, i64* %PC
  %12786 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12787 = load i64, i64* %12786, align 8, !tbaa !2428
  %12788 = add i64 %12787, -8
  %12789 = inttoptr i64 %12788 to i64*
  store i64 %12783, i64* %12789
  store i64 %12788, i64* %12786, align 8, !tbaa !2428
  %12790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %12781, i64* %12790, align 8, !tbaa !2428
  %12791 = load i64, i64* %PC
  %12792 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %12791, %struct.Memory* %12235)
  %12793 = load i64, i64* %PC
  %12794 = add i64 %12793, 10
  store i64 %12794, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %12795 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12796 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12797 = bitcast %union.vec128_t* %XMM0 to i8*
  %12798 = load i64, i64* %PC
  %12799 = add i64 %12798, 3
  store i64 %12799, i64* %PC
  %12800 = bitcast i8* %12796 to i64*
  %12801 = load i64, i64* %12800, align 1
  %12802 = getelementptr inbounds i8, i8* %12796, i64 8
  %12803 = bitcast i8* %12802 to i64*
  %12804 = load i64, i64* %12803, align 1
  %12805 = bitcast i8* %12797 to i64*
  %12806 = load i64, i64* %12805, align 1
  %12807 = getelementptr inbounds i8, i8* %12797, i64 8
  %12808 = bitcast i8* %12807 to i64*
  %12809 = load i64, i64* %12808, align 1
  %12810 = xor i64 %12806, %12801
  %12811 = xor i64 %12809, %12804
  %12812 = trunc i64 %12810 to i32
  %12813 = lshr i64 %12810, 32
  %12814 = trunc i64 %12813 to i32
  %12815 = bitcast i8* %12795 to i32*
  store i32 %12812, i32* %12815, align 1, !tbaa !2454
  %12816 = getelementptr inbounds i8, i8* %12795, i64 4
  %12817 = bitcast i8* %12816 to i32*
  store i32 %12814, i32* %12817, align 1, !tbaa !2454
  %12818 = trunc i64 %12811 to i32
  %12819 = getelementptr inbounds i8, i8* %12795, i64 8
  %12820 = bitcast i8* %12819 to i32*
  store i32 %12818, i32* %12820, align 1, !tbaa !2454
  %12821 = lshr i64 %12811, 32
  %12822 = trunc i64 %12821 to i32
  %12823 = getelementptr inbounds i8, i8* %12795, i64 12
  %12824 = bitcast i8* %12823 to i32*
  store i32 %12822, i32* %12824, align 1, !tbaa !2454
  %12825 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12826 = load i64, i64* %PC
  %12827 = add i64 %12826, 9
  store i64 %12827, i64* %PC
  %12828 = load double, double* bitcast (%piref_type* @piref to double*)
  %12829 = bitcast i8* %12825 to double*
  store double %12828, double* %12829, align 1, !tbaa !2452
  %12830 = getelementptr inbounds i8, i8* %12825, i64 8
  %12831 = bitcast i8* %12830 to double*
  store double 0.000000e+00, double* %12831, align 1, !tbaa !2452
  %12832 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12833 = load i64, i64* %PC
  %12834 = add i64 %12833, 9
  store i64 %12834, i64* %PC
  %12835 = load double, double* bitcast (%three_type* @three to double*)
  %12836 = bitcast i8* %12832 to double*
  store double %12835, double* %12836, align 1, !tbaa !2452
  %12837 = getelementptr inbounds i8, i8* %12832, i64 8
  %12838 = bitcast i8* %12837 to double*
  store double 0.000000e+00, double* %12838, align 1, !tbaa !2452
  %12839 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12840 = load i64, i64* %RBP
  %12841 = sub i64 %12840, 80
  %12842 = load i64, i64* %PC
  %12843 = add i64 %12842, 6
  store i64 %12843, i64* %PC
  %12844 = inttoptr i64 %12841 to i64*
  %12845 = load i64, i64* %12844
  %12846 = sitofp i64 %12845 to double
  %12847 = bitcast i8* %12839 to double*
  store double %12846, double* %12847, align 1, !tbaa !2452
  %12848 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12849 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12850 = bitcast %union.vec128_t* %XMM3 to i8*
  %12851 = load i64, i64* %PC
  %12852 = add i64 %12851, 4
  store i64 %12852, i64* %PC
  %12853 = bitcast i8* %12849 to double*
  %12854 = load double, double* %12853, align 1
  %12855 = getelementptr inbounds i8, i8* %12849, i64 8
  %12856 = bitcast i8* %12855 to i64*
  %12857 = load i64, i64* %12856, align 1
  %12858 = bitcast i8* %12850 to double*
  %12859 = load double, double* %12858, align 1
  %12860 = fmul double %12854, %12859
  %12861 = bitcast i8* %12848 to double*
  store double %12860, double* %12861, align 1, !tbaa !2452
  %12862 = getelementptr inbounds i8, i8* %12848, i64 8
  %12863 = bitcast i8* %12862 to i64*
  store i64 %12857, i64* %12863, align 1, !tbaa !2452
  %12864 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12865 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12866 = bitcast %union.vec128_t* %XMM2 to i8*
  %12867 = load i64, i64* %PC
  %12868 = add i64 %12867, 4
  store i64 %12868, i64* %PC
  %12869 = bitcast i8* %12865 to double*
  %12870 = load double, double* %12869, align 1
  %12871 = getelementptr inbounds i8, i8* %12865, i64 8
  %12872 = bitcast i8* %12871 to i64*
  %12873 = load i64, i64* %12872, align 1
  %12874 = bitcast i8* %12866 to double*
  %12875 = load double, double* %12874, align 1
  %12876 = fdiv double %12870, %12875
  %12877 = bitcast i8* %12864 to double*
  store double %12876, double* %12877, align 1, !tbaa !2452
  %12878 = getelementptr inbounds i8, i8* %12864, i64 8
  %12879 = bitcast i8* %12878 to i64*
  store i64 %12873, i64* %12879, align 1, !tbaa !2452
  %12880 = load i64, i64* %RBP
  %12881 = sub i64 %12880, 48
  %12882 = bitcast %union.vec128_t* %XMM1 to i8*
  %12883 = load i64, i64* %PC
  %12884 = add i64 %12883, 5
  store i64 %12884, i64* %PC
  %12885 = bitcast i8* %12882 to double*
  %12886 = load double, double* %12885, align 1
  %12887 = inttoptr i64 %12881 to double*
  store double %12886, double* %12887
  %12888 = load i64, i64* %RBP
  %12889 = sub i64 %12888, 16
  %12890 = bitcast %union.vec128_t* %XMM0 to i8*
  %12891 = load i64, i64* %PC
  %12892 = add i64 %12891, 5
  store i64 %12892, i64* %PC
  %12893 = bitcast i8* %12890 to double*
  %12894 = load double, double* %12893, align 1
  %12895 = inttoptr i64 %12889 to double*
  store double %12894, double* %12895
  %12896 = load i64, i64* %RBP
  %12897 = sub i64 %12896, 32
  %12898 = bitcast %union.vec128_t* %XMM0 to i8*
  %12899 = load i64, i64* %PC
  %12900 = add i64 %12899, 5
  store i64 %12900, i64* %PC
  %12901 = bitcast i8* %12898 to double*
  %12902 = load double, double* %12901, align 1
  %12903 = inttoptr i64 %12897 to double*
  store double %12902, double* %12903
  %12904 = load i64, i64* %RBP
  %12905 = sub i64 %12904, 168
  %12906 = load i32, i32* %EAX
  %12907 = zext i32 %12906 to i64
  %12908 = load i64, i64* %PC
  %12909 = add i64 %12908, 6
  store i64 %12909, i64* %PC
  %12910 = inttoptr i64 %12905 to i32*
  store i32 %12906, i32* %12910
  %12911 = load i64, i64* %PC
  %12912 = add i64 %12911, 6015
  %12913 = load i64, i64* %PC
  %12914 = add i64 %12913, 5
  %12915 = load i64, i64* %PC
  %12916 = add i64 %12915, 5
  store i64 %12916, i64* %PC
  %12917 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12918 = load i64, i64* %12917, align 8, !tbaa !2428
  %12919 = add i64 %12918, -8
  %12920 = inttoptr i64 %12919 to i64*
  store i64 %12914, i64* %12920
  store i64 %12919, i64* %12917, align 8, !tbaa !2428
  %12921 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %12912, i64* %12921, align 8, !tbaa !2428
  %12922 = load i64, i64* %PC
  %12923 = call %struct.Memory* @sub_4025e0_dtime_renamed_(%struct.State* %0, i64 %12922, %struct.Memory* %12792)
  %12924 = load i64, i64* %RBP
  %12925 = sub i64 %12924, 72
  %12926 = load i64, i64* %PC
  %12927 = add i64 %12926, 8
  store i64 %12927, i64* %PC
  %12928 = inttoptr i64 %12925 to i64*
  store i64 1, i64* %12928
  %12929 = load i64, i64* %RBP
  %12930 = sub i64 %12929, 172
  %12931 = load i32, i32* %EAX
  %12932 = zext i32 %12931 to i64
  %12933 = load i64, i64* %PC
  %12934 = add i64 %12933, 6
  store i64 %12934, i64* %PC
  %12935 = inttoptr i64 %12930 to i32*
  store i32 %12931, i32* %12935
  br label %block_400e74

block_400aee:                                     ; preds = %block_400afc, %block_4008d4
  %MEMORY.11 = phi %struct.Memory* [ %5137, %block_4008d4 ], [ %MEMORY.11, %block_400afc ]
  %12936 = load i64, i64* %RBP
  %12937 = sub i64 %12936, 72
  %12938 = load i64, i64* %PC
  %12939 = add i64 %12938, 4
  store i64 %12939, i64* %PC
  %12940 = inttoptr i64 %12937 to i64*
  %12941 = load i64, i64* %12940
  store i64 %12941, i64* %RAX, align 8, !tbaa !2428
  %12942 = load i64, i64* %RAX
  %12943 = load i64, i64* %RBP
  %12944 = sub i64 %12943, 80
  %12945 = load i64, i64* %PC
  %12946 = add i64 %12945, 4
  store i64 %12946, i64* %PC
  %12947 = inttoptr i64 %12944 to i64*
  %12948 = load i64, i64* %12947
  %12949 = sub i64 %12942, %12948
  %12950 = icmp ugt i64 %12948, %12942
  %12951 = zext i1 %12950 to i8
  %12952 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %12951, i8* %12952, align 1, !tbaa !2432
  %12953 = trunc i64 %12949 to i32
  %12954 = and i32 %12953, 255
  %12955 = call i32 @llvm.ctpop.i32(i32 %12954) #16
  %12956 = trunc i32 %12955 to i8
  %12957 = and i8 %12956, 1
  %12958 = xor i8 %12957, 1
  %12959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %12958, i8* %12959, align 1, !tbaa !2446
  %12960 = xor i64 %12948, %12942
  %12961 = xor i64 %12960, %12949
  %12962 = lshr i64 %12961, 4
  %12963 = trunc i64 %12962 to i8
  %12964 = and i8 %12963, 1
  %12965 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %12964, i8* %12965, align 1, !tbaa !2450
  %12966 = icmp eq i64 %12949, 0
  %12967 = zext i1 %12966 to i8
  %12968 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %12967, i8* %12968, align 1, !tbaa !2447
  %12969 = lshr i64 %12949, 63
  %12970 = trunc i64 %12969 to i8
  %12971 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %12970, i8* %12971, align 1, !tbaa !2448
  %12972 = lshr i64 %12942, 63
  %12973 = lshr i64 %12948, 63
  %12974 = xor i64 %12973, %12972
  %12975 = xor i64 %12969, %12972
  %12976 = add nuw nsw i64 %12975, %12974
  %12977 = icmp eq i64 %12976, 2
  %12978 = zext i1 %12977 to i8
  %12979 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %12978, i8* %12979, align 1, !tbaa !2449
  %12980 = load i64, i64* %PC
  %12981 = add i64 %12980, 79
  %12982 = load i64, i64* %PC
  %12983 = add i64 %12982, 6
  %12984 = load i64, i64* %PC
  %12985 = add i64 %12984, 6
  store i64 %12985, i64* %PC
  %12986 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %12987 = load i8, i8* %12986, align 1, !tbaa !2447
  %12988 = icmp eq i8 %12987, 0
  %12989 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %12990 = load i8, i8* %12989, align 1, !tbaa !2448
  %12991 = icmp ne i8 %12990, 0
  %12992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %12993 = load i8, i8* %12992, align 1, !tbaa !2449
  %12994 = icmp ne i8 %12993, 0
  %12995 = xor i1 %12991, %12994
  %12996 = xor i1 %12995, true
  %12997 = and i1 %12988, %12996
  %12998 = zext i1 %12997 to i8
  store i8 %12998, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %12999 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %13000 = select i1 %12997, i64 %12981, i64 %12983
  store i64 %13000, i64* %12999, align 8, !tbaa !2428
  %13001 = load i8, i8* %BRANCH_TAKEN
  %13002 = icmp eq i8 %13001, 1
  %13003 = load i64, i64* %PC
  %13004 = add i64 %13003, 10
  store i64 %13004, i64* %PC
  br i1 %13002, label %block_400b45, label %block_400afc

block_401f97:                                     ; preds = %block_401f82
  %13005 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13006 = load i64, i64* %RBP
  %13007 = sub i64 %13006, 72
  %13008 = load i64, i64* %PC
  %13009 = add i64 %13008, 6
  store i64 %13009, i64* %PC
  %13010 = inttoptr i64 %13007 to i64*
  %13011 = load i64, i64* %13010
  %13012 = sitofp i64 %13011 to double
  %13013 = bitcast i8* %13005 to double*
  store double %13012, double* %13013, align 1, !tbaa !2452
  %13014 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13015 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13016 = load i64, i64* %RBP
  %13017 = sub i64 %13016, 48
  %13018 = load i64, i64* %PC
  %13019 = add i64 %13018, 5
  store i64 %13019, i64* %PC
  %13020 = bitcast i8* %13015 to double*
  %13021 = load double, double* %13020, align 1
  %13022 = getelementptr inbounds i8, i8* %13015, i64 8
  %13023 = bitcast i8* %13022 to i64*
  %13024 = load i64, i64* %13023, align 1
  %13025 = inttoptr i64 %13017 to double*
  %13026 = load double, double* %13025
  %13027 = fmul double %13021, %13026
  %13028 = bitcast i8* %13014 to double*
  store double %13027, double* %13028, align 1, !tbaa !2452
  %13029 = getelementptr inbounds i8, i8* %13014, i64 8
  %13030 = bitcast i8* %13029 to i64*
  store i64 %13024, i64* %13030, align 1, !tbaa !2452
  %13031 = load i64, i64* %RBP
  %13032 = sub i64 %13031, 24
  %13033 = bitcast %union.vec128_t* %XMM0 to i8*
  %13034 = load i64, i64* %PC
  %13035 = add i64 %13034, 5
  store i64 %13035, i64* %PC
  %13036 = bitcast i8* %13033 to double*
  %13037 = load double, double* %13036, align 1
  %13038 = inttoptr i64 %13032 to double*
  store double %13037, double* %13038
  %13039 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13040 = load i64, i64* %RBP
  %13041 = sub i64 %13040, 24
  %13042 = load i64, i64* %PC
  %13043 = add i64 %13042, 5
  store i64 %13043, i64* %PC
  %13044 = inttoptr i64 %13041 to double*
  %13045 = load double, double* %13044
  %13046 = bitcast i8* %13039 to double*
  store double %13045, double* %13046, align 1, !tbaa !2452
  %13047 = getelementptr inbounds i8, i8* %13039, i64 8
  %13048 = bitcast i8* %13047 to double*
  store double 0.000000e+00, double* %13048, align 1, !tbaa !2452
  %13049 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13050 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13051 = load i64, i64* %RBP
  %13052 = sub i64 %13051, 24
  %13053 = load i64, i64* %PC
  %13054 = add i64 %13053, 5
  store i64 %13054, i64* %PC
  %13055 = bitcast i8* %13050 to double*
  %13056 = load double, double* %13055, align 1
  %13057 = getelementptr inbounds i8, i8* %13050, i64 8
  %13058 = bitcast i8* %13057 to i64*
  %13059 = load i64, i64* %13058, align 1
  %13060 = inttoptr i64 %13052 to double*
  %13061 = load double, double* %13060
  %13062 = fmul double %13056, %13061
  %13063 = bitcast i8* %13049 to double*
  store double %13062, double* %13063, align 1, !tbaa !2452
  %13064 = getelementptr inbounds i8, i8* %13049, i64 8
  %13065 = bitcast i8* %13064 to i64*
  store i64 %13059, i64* %13065, align 1, !tbaa !2452
  %13066 = load i64, i64* %RBP
  %13067 = sub i64 %13066, 40
  %13068 = bitcast %union.vec128_t* %XMM0 to i8*
  %13069 = load i64, i64* %PC
  %13070 = add i64 %13069, 5
  store i64 %13070, i64* %PC
  %13071 = bitcast i8* %13068 to double*
  %13072 = load double, double* %13071, align 1
  %13073 = inttoptr i64 %13067 to double*
  store double %13072, double* %13073
  %13074 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13075 = load i64, i64* %RBP
  %13076 = sub i64 %13075, 40
  %13077 = load i64, i64* %PC
  %13078 = add i64 %13077, 5
  store i64 %13078, i64* %PC
  %13079 = inttoptr i64 %13076 to double*
  %13080 = load double, double* %13079
  %13081 = bitcast i8* %13074 to double*
  store double %13080, double* %13081, align 1, !tbaa !2452
  %13082 = getelementptr inbounds i8, i8* %13074, i64 8
  %13083 = bitcast i8* %13082 to double*
  store double 0.000000e+00, double* %13083, align 1, !tbaa !2452
  %13084 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13085 = load i64, i64* %RBP
  %13086 = sub i64 %13085, 40
  %13087 = load i64, i64* %PC
  %13088 = add i64 %13087, 5
  store i64 %13088, i64* %PC
  %13089 = inttoptr i64 %13086 to double*
  %13090 = load double, double* %13089
  %13091 = bitcast i8* %13084 to double*
  store double %13090, double* %13091, align 1, !tbaa !2452
  %13092 = getelementptr inbounds i8, i8* %13084, i64 8
  %13093 = bitcast i8* %13092 to double*
  store double 0.000000e+00, double* %13093, align 1, !tbaa !2452
  %13094 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13095 = load i64, i64* %RBP
  %13096 = sub i64 %13095, 40
  %13097 = load i64, i64* %PC
  %13098 = add i64 %13097, 5
  store i64 %13098, i64* %PC
  %13099 = inttoptr i64 %13096 to double*
  %13100 = load double, double* %13099
  %13101 = bitcast i8* %13094 to double*
  store double %13100, double* %13101, align 1, !tbaa !2452
  %13102 = getelementptr inbounds i8, i8* %13094, i64 8
  %13103 = bitcast i8* %13102 to double*
  store double 0.000000e+00, double* %13103, align 1, !tbaa !2452
  %13104 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13105 = load i64, i64* %RBP
  %13106 = sub i64 %13105, 40
  %13107 = load i64, i64* %PC
  %13108 = add i64 %13107, 5
  store i64 %13108, i64* %PC
  %13109 = inttoptr i64 %13106 to double*
  %13110 = load double, double* %13109
  %13111 = bitcast i8* %13104 to double*
  store double %13110, double* %13111, align 1, !tbaa !2452
  %13112 = getelementptr inbounds i8, i8* %13104, i64 8
  %13113 = bitcast i8* %13112 to double*
  store double 0.000000e+00, double* %13113, align 1, !tbaa !2452
  %13114 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13115 = load i64, i64* %RBP
  %13116 = sub i64 %13115, 40
  %13117 = load i64, i64* %PC
  %13118 = add i64 %13117, 5
  store i64 %13118, i64* %PC
  %13119 = inttoptr i64 %13116 to double*
  %13120 = load double, double* %13119
  %13121 = bitcast i8* %13114 to double*
  store double %13120, double* %13121, align 1, !tbaa !2452
  %13122 = getelementptr inbounds i8, i8* %13114, i64 8
  %13123 = bitcast i8* %13122 to double*
  store double 0.000000e+00, double* %13123, align 1, !tbaa !2452
  %13124 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %13125 = load i64, i64* %PC
  %13126 = add i64 %13125, 9
  store i64 %13126, i64* %PC
  %13127 = load double, double* bitcast (%B6_type* @B6 to double*)
  %13128 = bitcast i8* %13124 to double*
  store double %13127, double* %13128, align 1, !tbaa !2452
  %13129 = getelementptr inbounds i8, i8* %13124, i64 8
  %13130 = bitcast i8* %13129 to double*
  store double 0.000000e+00, double* %13130, align 1, !tbaa !2452
  %13131 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %13132 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %13133 = load i64, i64* %RBP
  %13134 = sub i64 %13133, 40
  %13135 = load i64, i64* %PC
  %13136 = add i64 %13135, 5
  store i64 %13136, i64* %PC
  %13137 = bitcast i8* %13132 to double*
  %13138 = load double, double* %13137, align 1
  %13139 = getelementptr inbounds i8, i8* %13132, i64 8
  %13140 = bitcast i8* %13139 to i64*
  %13141 = load i64, i64* %13140, align 1
  %13142 = inttoptr i64 %13134 to double*
  %13143 = load double, double* %13142
  %13144 = fmul double %13138, %13143
  %13145 = bitcast i8* %13131 to double*
  store double %13144, double* %13145, align 1, !tbaa !2452
  %13146 = getelementptr inbounds i8, i8* %13131, i64 8
  %13147 = bitcast i8* %13146 to i64*
  store i64 %13141, i64* %13147, align 1, !tbaa !2452
  %13148 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %13149 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %13150 = load i64, i64* %PC
  %13151 = add i64 %13150, 9
  store i64 %13151, i64* %PC
  %13152 = bitcast i8* %13149 to double*
  %13153 = load double, double* %13152, align 1
  %13154 = getelementptr inbounds i8, i8* %13149, i64 8
  %13155 = bitcast i8* %13154 to i64*
  %13156 = load i64, i64* %13155, align 1
  %13157 = load double, double* bitcast (%B5_type* @B5 to double*)
  %13158 = fadd double %13153, %13157
  %13159 = bitcast i8* %13148 to double*
  store double %13158, double* %13159, align 1, !tbaa !2452
  %13160 = getelementptr inbounds i8, i8* %13148, i64 8
  %13161 = bitcast i8* %13160 to i64*
  store i64 %13156, i64* %13161, align 1, !tbaa !2452
  %13162 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13163 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13164 = bitcast %union.vec128_t* %XMM5 to i8*
  %13165 = load i64, i64* %PC
  %13166 = add i64 %13165, 4
  store i64 %13166, i64* %PC
  %13167 = bitcast i8* %13163 to double*
  %13168 = load double, double* %13167, align 1
  %13169 = getelementptr inbounds i8, i8* %13163, i64 8
  %13170 = bitcast i8* %13169 to i64*
  %13171 = load i64, i64* %13170, align 1
  %13172 = bitcast i8* %13164 to double*
  %13173 = load double, double* %13172, align 1
  %13174 = fmul double %13168, %13173
  %13175 = bitcast i8* %13162 to double*
  store double %13174, double* %13175, align 1, !tbaa !2452
  %13176 = getelementptr inbounds i8, i8* %13162, i64 8
  %13177 = bitcast i8* %13176 to i64*
  store i64 %13171, i64* %13177, align 1, !tbaa !2452
  %13178 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13179 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13180 = load i64, i64* %PC
  %13181 = add i64 %13180, 9
  store i64 %13181, i64* %PC
  %13182 = bitcast i8* %13179 to double*
  %13183 = load double, double* %13182, align 1
  %13184 = getelementptr inbounds i8, i8* %13179, i64 8
  %13185 = bitcast i8* %13184 to i64*
  %13186 = load i64, i64* %13185, align 1
  %13187 = load double, double* bitcast (%B4_type* @B4 to double*)
  %13188 = fadd double %13183, %13187
  %13189 = bitcast i8* %13178 to double*
  store double %13188, double* %13189, align 1, !tbaa !2452
  %13190 = getelementptr inbounds i8, i8* %13178, i64 8
  %13191 = bitcast i8* %13190 to i64*
  store i64 %13186, i64* %13191, align 1, !tbaa !2452
  %13192 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13193 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13194 = bitcast %union.vec128_t* %XMM4 to i8*
  %13195 = load i64, i64* %PC
  %13196 = add i64 %13195, 4
  store i64 %13196, i64* %PC
  %13197 = bitcast i8* %13193 to double*
  %13198 = load double, double* %13197, align 1
  %13199 = getelementptr inbounds i8, i8* %13193, i64 8
  %13200 = bitcast i8* %13199 to i64*
  %13201 = load i64, i64* %13200, align 1
  %13202 = bitcast i8* %13194 to double*
  %13203 = load double, double* %13202, align 1
  %13204 = fmul double %13198, %13203
  %13205 = bitcast i8* %13192 to double*
  store double %13204, double* %13205, align 1, !tbaa !2452
  %13206 = getelementptr inbounds i8, i8* %13192, i64 8
  %13207 = bitcast i8* %13206 to i64*
  store i64 %13201, i64* %13207, align 1, !tbaa !2452
  %13208 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13209 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13210 = load i64, i64* %PC
  %13211 = add i64 %13210, 9
  store i64 %13211, i64* %PC
  %13212 = bitcast i8* %13209 to double*
  %13213 = load double, double* %13212, align 1
  %13214 = getelementptr inbounds i8, i8* %13209, i64 8
  %13215 = bitcast i8* %13214 to i64*
  %13216 = load i64, i64* %13215, align 1
  %13217 = load double, double* bitcast (%B3_type* @B3 to double*)
  %13218 = fadd double %13213, %13217
  %13219 = bitcast i8* %13208 to double*
  store double %13218, double* %13219, align 1, !tbaa !2452
  %13220 = getelementptr inbounds i8, i8* %13208, i64 8
  %13221 = bitcast i8* %13220 to i64*
  store i64 %13216, i64* %13221, align 1, !tbaa !2452
  %13222 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13223 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13224 = bitcast %union.vec128_t* %XMM3 to i8*
  %13225 = load i64, i64* %PC
  %13226 = add i64 %13225, 4
  store i64 %13226, i64* %PC
  %13227 = bitcast i8* %13223 to double*
  %13228 = load double, double* %13227, align 1
  %13229 = getelementptr inbounds i8, i8* %13223, i64 8
  %13230 = bitcast i8* %13229 to i64*
  %13231 = load i64, i64* %13230, align 1
  %13232 = bitcast i8* %13224 to double*
  %13233 = load double, double* %13232, align 1
  %13234 = fmul double %13228, %13233
  %13235 = bitcast i8* %13222 to double*
  store double %13234, double* %13235, align 1, !tbaa !2452
  %13236 = getelementptr inbounds i8, i8* %13222, i64 8
  %13237 = bitcast i8* %13236 to i64*
  store i64 %13231, i64* %13237, align 1, !tbaa !2452
  %13238 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13239 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13240 = load i64, i64* %PC
  %13241 = add i64 %13240, 9
  store i64 %13241, i64* %PC
  %13242 = bitcast i8* %13239 to double*
  %13243 = load double, double* %13242, align 1
  %13244 = getelementptr inbounds i8, i8* %13239, i64 8
  %13245 = bitcast i8* %13244 to i64*
  %13246 = load i64, i64* %13245, align 1
  %13247 = load double, double* bitcast (%B2_type* @B2 to double*)
  %13248 = fadd double %13243, %13247
  %13249 = bitcast i8* %13238 to double*
  store double %13248, double* %13249, align 1, !tbaa !2452
  %13250 = getelementptr inbounds i8, i8* %13238, i64 8
  %13251 = bitcast i8* %13250 to i64*
  store i64 %13246, i64* %13251, align 1, !tbaa !2452
  %13252 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13253 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13254 = bitcast %union.vec128_t* %XMM2 to i8*
  %13255 = load i64, i64* %PC
  %13256 = add i64 %13255, 4
  store i64 %13256, i64* %PC
  %13257 = bitcast i8* %13253 to double*
  %13258 = load double, double* %13257, align 1
  %13259 = getelementptr inbounds i8, i8* %13253, i64 8
  %13260 = bitcast i8* %13259 to i64*
  %13261 = load i64, i64* %13260, align 1
  %13262 = bitcast i8* %13254 to double*
  %13263 = load double, double* %13262, align 1
  %13264 = fmul double %13258, %13263
  %13265 = bitcast i8* %13252 to double*
  store double %13264, double* %13265, align 1, !tbaa !2452
  %13266 = getelementptr inbounds i8, i8* %13252, i64 8
  %13267 = bitcast i8* %13266 to i64*
  store i64 %13261, i64* %13267, align 1, !tbaa !2452
  %13268 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13269 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13270 = load i64, i64* %PC
  %13271 = add i64 %13270, 9
  store i64 %13271, i64* %PC
  %13272 = bitcast i8* %13269 to double*
  %13273 = load double, double* %13272, align 1
  %13274 = getelementptr inbounds i8, i8* %13269, i64 8
  %13275 = bitcast i8* %13274 to i64*
  %13276 = load i64, i64* %13275, align 1
  %13277 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %13278 = fadd double %13273, %13277
  %13279 = bitcast i8* %13268 to double*
  store double %13278, double* %13279, align 1, !tbaa !2452
  %13280 = getelementptr inbounds i8, i8* %13268, i64 8
  %13281 = bitcast i8* %13280 to i64*
  store i64 %13276, i64* %13281, align 1, !tbaa !2452
  %13282 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13283 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13284 = bitcast %union.vec128_t* %XMM1 to i8*
  %13285 = load i64, i64* %PC
  %13286 = add i64 %13285, 4
  store i64 %13286, i64* %PC
  %13287 = bitcast i8* %13283 to double*
  %13288 = load double, double* %13287, align 1
  %13289 = getelementptr inbounds i8, i8* %13283, i64 8
  %13290 = bitcast i8* %13289 to i64*
  %13291 = load i64, i64* %13290, align 1
  %13292 = bitcast i8* %13284 to double*
  %13293 = load double, double* %13292, align 1
  %13294 = fmul double %13288, %13293
  %13295 = bitcast i8* %13282 to double*
  store double %13294, double* %13295, align 1, !tbaa !2452
  %13296 = getelementptr inbounds i8, i8* %13282, i64 8
  %13297 = bitcast i8* %13296 to i64*
  store i64 %13291, i64* %13297, align 1, !tbaa !2452
  %13298 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13299 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13300 = load i64, i64* %PC
  %13301 = add i64 %13300, 9
  store i64 %13301, i64* %PC
  %13302 = bitcast i8* %13299 to double*
  %13303 = load double, double* %13302, align 1
  %13304 = getelementptr inbounds i8, i8* %13299, i64 8
  %13305 = bitcast i8* %13304 to i64*
  %13306 = load i64, i64* %13305, align 1
  %13307 = load double, double* bitcast (%one_type* @one to double*)
  %13308 = fadd double %13303, %13307
  %13309 = bitcast i8* %13298 to double*
  store double %13308, double* %13309, align 1, !tbaa !2452
  %13310 = getelementptr inbounds i8, i8* %13298, i64 8
  %13311 = bitcast i8* %13310 to i64*
  store i64 %13306, i64* %13311, align 1, !tbaa !2452
  %13312 = load i64, i64* %RBP
  %13313 = sub i64 %13312, 32
  %13314 = bitcast %union.vec128_t* %XMM0 to i8*
  %13315 = load i64, i64* %PC
  %13316 = add i64 %13315, 5
  store i64 %13316, i64* %PC
  %13317 = bitcast i8* %13314 to double*
  %13318 = load double, double* %13317, align 1
  %13319 = inttoptr i64 %13313 to double*
  store double %13318, double* %13319
  %13320 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13321 = load i64, i64* %RBP
  %13322 = sub i64 %13321, 16
  %13323 = load i64, i64* %PC
  %13324 = add i64 %13323, 5
  store i64 %13324, i64* %PC
  %13325 = inttoptr i64 %13322 to double*
  %13326 = load double, double* %13325
  %13327 = bitcast i8* %13320 to double*
  store double %13326, double* %13327, align 1, !tbaa !2452
  %13328 = getelementptr inbounds i8, i8* %13320, i64 8
  %13329 = bitcast i8* %13328 to double*
  store double 0.000000e+00, double* %13329, align 1, !tbaa !2452
  %13330 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13331 = load i64, i64* %RBP
  %13332 = sub i64 %13331, 32
  %13333 = load i64, i64* %PC
  %13334 = add i64 %13333, 5
  store i64 %13334, i64* %PC
  %13335 = inttoptr i64 %13332 to double*
  %13336 = load double, double* %13335
  %13337 = bitcast i8* %13330 to double*
  store double %13336, double* %13337, align 1, !tbaa !2452
  %13338 = getelementptr inbounds i8, i8* %13330, i64 8
  %13339 = bitcast i8* %13338 to double*
  store double 0.000000e+00, double* %13339, align 1, !tbaa !2452
  %13340 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13341 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13342 = load i64, i64* %RBP
  %13343 = sub i64 %13342, 32
  %13344 = load i64, i64* %PC
  %13345 = add i64 %13344, 5
  store i64 %13345, i64* %PC
  %13346 = bitcast i8* %13341 to double*
  %13347 = load double, double* %13346, align 1
  %13348 = getelementptr inbounds i8, i8* %13341, i64 8
  %13349 = bitcast i8* %13348 to i64*
  %13350 = load i64, i64* %13349, align 1
  %13351 = inttoptr i64 %13343 to double*
  %13352 = load double, double* %13351
  %13353 = fmul double %13347, %13352
  %13354 = bitcast i8* %13340 to double*
  store double %13353, double* %13354, align 1, !tbaa !2452
  %13355 = getelementptr inbounds i8, i8* %13340, i64 8
  %13356 = bitcast i8* %13355 to i64*
  store i64 %13350, i64* %13356, align 1, !tbaa !2452
  %13357 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13358 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13359 = load i64, i64* %RBP
  %13360 = sub i64 %13359, 24
  %13361 = load i64, i64* %PC
  %13362 = add i64 %13361, 5
  store i64 %13362, i64* %PC
  %13363 = bitcast i8* %13358 to double*
  %13364 = load double, double* %13363, align 1
  %13365 = getelementptr inbounds i8, i8* %13358, i64 8
  %13366 = bitcast i8* %13365 to i64*
  %13367 = load i64, i64* %13366, align 1
  %13368 = inttoptr i64 %13360 to double*
  %13369 = load double, double* %13368
  %13370 = fmul double %13364, %13369
  %13371 = bitcast i8* %13357 to double*
  store double %13370, double* %13371, align 1, !tbaa !2452
  %13372 = getelementptr inbounds i8, i8* %13357, i64 8
  %13373 = bitcast i8* %13372 to i64*
  store i64 %13367, i64* %13373, align 1, !tbaa !2452
  %13374 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13375 = load i64, i64* %PC
  %13376 = add i64 %13375, 9
  store i64 %13376, i64* %PC
  %13377 = load double, double* bitcast (%A6_type* @A6 to double*)
  %13378 = bitcast i8* %13374 to double*
  store double %13377, double* %13378, align 1, !tbaa !2452
  %13379 = getelementptr inbounds i8, i8* %13374, i64 8
  %13380 = bitcast i8* %13379 to double*
  store double 0.000000e+00, double* %13380, align 1, !tbaa !2452
  %13381 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13382 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13383 = load i64, i64* %RBP
  %13384 = sub i64 %13383, 40
  %13385 = load i64, i64* %PC
  %13386 = add i64 %13385, 5
  store i64 %13386, i64* %PC
  %13387 = bitcast i8* %13382 to double*
  %13388 = load double, double* %13387, align 1
  %13389 = getelementptr inbounds i8, i8* %13382, i64 8
  %13390 = bitcast i8* %13389 to i64*
  %13391 = load i64, i64* %13390, align 1
  %13392 = inttoptr i64 %13384 to double*
  %13393 = load double, double* %13392
  %13394 = fmul double %13388, %13393
  %13395 = bitcast i8* %13381 to double*
  store double %13394, double* %13395, align 1, !tbaa !2452
  %13396 = getelementptr inbounds i8, i8* %13381, i64 8
  %13397 = bitcast i8* %13396 to i64*
  store i64 %13391, i64* %13397, align 1, !tbaa !2452
  %13398 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13399 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13400 = load i64, i64* %PC
  %13401 = add i64 %13400, 9
  store i64 %13401, i64* %PC
  %13402 = bitcast i8* %13399 to double*
  %13403 = load double, double* %13402, align 1
  %13404 = getelementptr inbounds i8, i8* %13399, i64 8
  %13405 = bitcast i8* %13404 to i64*
  %13406 = load i64, i64* %13405, align 1
  %13407 = load double, double* bitcast (%A5_type* @A5 to double*)
  %13408 = fadd double %13403, %13407
  %13409 = bitcast i8* %13398 to double*
  store double %13408, double* %13409, align 1, !tbaa !2452
  %13410 = getelementptr inbounds i8, i8* %13398, i64 8
  %13411 = bitcast i8* %13410 to i64*
  store i64 %13406, i64* %13411, align 1, !tbaa !2452
  %13412 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13413 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13414 = load i64, i64* %RBP
  %13415 = sub i64 %13414, 40
  %13416 = load i64, i64* %PC
  %13417 = add i64 %13416, 5
  store i64 %13417, i64* %PC
  %13418 = bitcast i8* %13413 to double*
  %13419 = load double, double* %13418, align 1
  %13420 = getelementptr inbounds i8, i8* %13413, i64 8
  %13421 = bitcast i8* %13420 to i64*
  %13422 = load i64, i64* %13421, align 1
  %13423 = inttoptr i64 %13415 to double*
  %13424 = load double, double* %13423
  %13425 = fmul double %13419, %13424
  %13426 = bitcast i8* %13412 to double*
  store double %13425, double* %13426, align 1, !tbaa !2452
  %13427 = getelementptr inbounds i8, i8* %13412, i64 8
  %13428 = bitcast i8* %13427 to i64*
  store i64 %13422, i64* %13428, align 1, !tbaa !2452
  %13429 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13430 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13431 = load i64, i64* %PC
  %13432 = add i64 %13431, 9
  store i64 %13432, i64* %PC
  %13433 = bitcast i8* %13430 to double*
  %13434 = load double, double* %13433, align 1
  %13435 = getelementptr inbounds i8, i8* %13430, i64 8
  %13436 = bitcast i8* %13435 to i64*
  %13437 = load i64, i64* %13436, align 1
  %13438 = load double, double* bitcast (%A4_type* @A4 to double*)
  %13439 = fadd double %13434, %13438
  %13440 = bitcast i8* %13429 to double*
  store double %13439, double* %13440, align 1, !tbaa !2452
  %13441 = getelementptr inbounds i8, i8* %13429, i64 8
  %13442 = bitcast i8* %13441 to i64*
  store i64 %13437, i64* %13442, align 1, !tbaa !2452
  %13443 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13444 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13445 = load i64, i64* %RBP
  %13446 = sub i64 %13445, 40
  %13447 = load i64, i64* %PC
  %13448 = add i64 %13447, 5
  store i64 %13448, i64* %PC
  %13449 = bitcast i8* %13444 to double*
  %13450 = load double, double* %13449, align 1
  %13451 = getelementptr inbounds i8, i8* %13444, i64 8
  %13452 = bitcast i8* %13451 to i64*
  %13453 = load i64, i64* %13452, align 1
  %13454 = inttoptr i64 %13446 to double*
  %13455 = load double, double* %13454
  %13456 = fmul double %13450, %13455
  %13457 = bitcast i8* %13443 to double*
  store double %13456, double* %13457, align 1, !tbaa !2452
  %13458 = getelementptr inbounds i8, i8* %13443, i64 8
  %13459 = bitcast i8* %13458 to i64*
  store i64 %13453, i64* %13459, align 1, !tbaa !2452
  %13460 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13461 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13462 = load i64, i64* %PC
  %13463 = add i64 %13462, 9
  store i64 %13463, i64* %PC
  %13464 = bitcast i8* %13461 to double*
  %13465 = load double, double* %13464, align 1
  %13466 = getelementptr inbounds i8, i8* %13461, i64 8
  %13467 = bitcast i8* %13466 to i64*
  %13468 = load i64, i64* %13467, align 1
  %13469 = load double, double* bitcast (%A3_type* @A3 to double*)
  %13470 = fadd double %13465, %13469
  %13471 = bitcast i8* %13460 to double*
  store double %13470, double* %13471, align 1, !tbaa !2452
  %13472 = getelementptr inbounds i8, i8* %13460, i64 8
  %13473 = bitcast i8* %13472 to i64*
  store i64 %13468, i64* %13473, align 1, !tbaa !2452
  %13474 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13475 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13476 = load i64, i64* %RBP
  %13477 = sub i64 %13476, 40
  %13478 = load i64, i64* %PC
  %13479 = add i64 %13478, 5
  store i64 %13479, i64* %PC
  %13480 = bitcast i8* %13475 to double*
  %13481 = load double, double* %13480, align 1
  %13482 = getelementptr inbounds i8, i8* %13475, i64 8
  %13483 = bitcast i8* %13482 to i64*
  %13484 = load i64, i64* %13483, align 1
  %13485 = inttoptr i64 %13477 to double*
  %13486 = load double, double* %13485
  %13487 = fmul double %13481, %13486
  %13488 = bitcast i8* %13474 to double*
  store double %13487, double* %13488, align 1, !tbaa !2452
  %13489 = getelementptr inbounds i8, i8* %13474, i64 8
  %13490 = bitcast i8* %13489 to i64*
  store i64 %13484, i64* %13490, align 1, !tbaa !2452
  %13491 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13492 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13493 = load i64, i64* %PC
  %13494 = add i64 %13493, 9
  store i64 %13494, i64* %PC
  %13495 = bitcast i8* %13492 to double*
  %13496 = load double, double* %13495, align 1
  %13497 = getelementptr inbounds i8, i8* %13492, i64 8
  %13498 = bitcast i8* %13497 to i64*
  %13499 = load i64, i64* %13498, align 1
  %13500 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %13501 = fadd double %13496, %13500
  %13502 = bitcast i8* %13491 to double*
  store double %13501, double* %13502, align 1, !tbaa !2452
  %13503 = getelementptr inbounds i8, i8* %13491, i64 8
  %13504 = bitcast i8* %13503 to i64*
  store i64 %13499, i64* %13504, align 1, !tbaa !2452
  %13505 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13506 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13507 = load i64, i64* %RBP
  %13508 = sub i64 %13507, 40
  %13509 = load i64, i64* %PC
  %13510 = add i64 %13509, 5
  store i64 %13510, i64* %PC
  %13511 = bitcast i8* %13506 to double*
  %13512 = load double, double* %13511, align 1
  %13513 = getelementptr inbounds i8, i8* %13506, i64 8
  %13514 = bitcast i8* %13513 to i64*
  %13515 = load i64, i64* %13514, align 1
  %13516 = inttoptr i64 %13508 to double*
  %13517 = load double, double* %13516
  %13518 = fmul double %13512, %13517
  %13519 = bitcast i8* %13505 to double*
  store double %13518, double* %13519, align 1, !tbaa !2452
  %13520 = getelementptr inbounds i8, i8* %13505, i64 8
  %13521 = bitcast i8* %13520 to i64*
  store i64 %13515, i64* %13521, align 1, !tbaa !2452
  %13522 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13523 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13524 = load i64, i64* %PC
  %13525 = add i64 %13524, 9
  store i64 %13525, i64* %PC
  %13526 = bitcast i8* %13523 to double*
  %13527 = load double, double* %13526, align 1
  %13528 = getelementptr inbounds i8, i8* %13523, i64 8
  %13529 = bitcast i8* %13528 to i64*
  %13530 = load i64, i64* %13529, align 1
  %13531 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %13532 = fadd double %13527, %13531
  %13533 = bitcast i8* %13522 to double*
  store double %13532, double* %13533, align 1, !tbaa !2452
  %13534 = getelementptr inbounds i8, i8* %13522, i64 8
  %13535 = bitcast i8* %13534 to i64*
  store i64 %13530, i64* %13535, align 1, !tbaa !2452
  %13536 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13537 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13538 = load i64, i64* %RBP
  %13539 = sub i64 %13538, 40
  %13540 = load i64, i64* %PC
  %13541 = add i64 %13540, 5
  store i64 %13541, i64* %PC
  %13542 = bitcast i8* %13537 to double*
  %13543 = load double, double* %13542, align 1
  %13544 = getelementptr inbounds i8, i8* %13537, i64 8
  %13545 = bitcast i8* %13544 to i64*
  %13546 = load i64, i64* %13545, align 1
  %13547 = inttoptr i64 %13539 to double*
  %13548 = load double, double* %13547
  %13549 = fmul double %13543, %13548
  %13550 = bitcast i8* %13536 to double*
  store double %13549, double* %13550, align 1, !tbaa !2452
  %13551 = getelementptr inbounds i8, i8* %13536, i64 8
  %13552 = bitcast i8* %13551 to i64*
  store i64 %13546, i64* %13552, align 1, !tbaa !2452
  %13553 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13554 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13555 = load i64, i64* %PC
  %13556 = add i64 %13555, 9
  store i64 %13556, i64* %PC
  %13557 = bitcast i8* %13554 to double*
  %13558 = load double, double* %13557, align 1
  %13559 = getelementptr inbounds i8, i8* %13554, i64 8
  %13560 = bitcast i8* %13559 to i64*
  %13561 = load i64, i64* %13560, align 1
  %13562 = load double, double* bitcast (%one_type* @one to double*)
  %13563 = fadd double %13558, %13562
  %13564 = bitcast i8* %13553 to double*
  store double %13563, double* %13564, align 1, !tbaa !2452
  %13565 = getelementptr inbounds i8, i8* %13553, i64 8
  %13566 = bitcast i8* %13565 to i64*
  store i64 %13561, i64* %13566, align 1, !tbaa !2452
  %13567 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13568 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13569 = bitcast %union.vec128_t* %XMM2 to i8*
  %13570 = load i64, i64* %PC
  %13571 = add i64 %13570, 4
  store i64 %13571, i64* %PC
  %13572 = bitcast i8* %13568 to double*
  %13573 = load double, double* %13572, align 1
  %13574 = getelementptr inbounds i8, i8* %13568, i64 8
  %13575 = bitcast i8* %13574 to i64*
  %13576 = load i64, i64* %13575, align 1
  %13577 = bitcast i8* %13569 to double*
  %13578 = load double, double* %13577, align 1
  %13579 = fmul double %13573, %13578
  %13580 = bitcast i8* %13567 to double*
  store double %13579, double* %13580, align 1, !tbaa !2452
  %13581 = getelementptr inbounds i8, i8* %13567, i64 8
  %13582 = bitcast i8* %13581 to i64*
  store i64 %13576, i64* %13582, align 1, !tbaa !2452
  %13583 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13584 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13585 = bitcast %union.vec128_t* %XMM1 to i8*
  %13586 = load i64, i64* %PC
  %13587 = add i64 %13586, 4
  store i64 %13587, i64* %PC
  %13588 = bitcast i8* %13584 to double*
  %13589 = load double, double* %13588, align 1
  %13590 = getelementptr inbounds i8, i8* %13584, i64 8
  %13591 = bitcast i8* %13590 to i64*
  %13592 = load i64, i64* %13591, align 1
  %13593 = bitcast i8* %13585 to double*
  %13594 = load double, double* %13593, align 1
  %13595 = fadd double %13589, %13594
  %13596 = bitcast i8* %13583 to double*
  store double %13595, double* %13596, align 1, !tbaa !2452
  %13597 = getelementptr inbounds i8, i8* %13583, i64 8
  %13598 = bitcast i8* %13597 to i64*
  store i64 %13592, i64* %13598, align 1, !tbaa !2452
  %13599 = load i64, i64* %RBP
  %13600 = sub i64 %13599, 16
  %13601 = bitcast %union.vec128_t* %XMM0 to i8*
  %13602 = load i64, i64* %PC
  %13603 = add i64 %13602, 5
  store i64 %13603, i64* %PC
  %13604 = bitcast i8* %13601 to double*
  %13605 = load double, double* %13604, align 1
  %13606 = inttoptr i64 %13600 to double*
  store double %13605, double* %13606
  %13607 = load i64, i64* %RBP
  %13608 = sub i64 %13607, 72
  %13609 = load i64, i64* %PC
  %13610 = add i64 %13609, 4
  store i64 %13610, i64* %PC
  %13611 = inttoptr i64 %13608 to i64*
  %13612 = load i64, i64* %13611
  store i64 %13612, i64* %RAX, align 8, !tbaa !2428
  %13613 = load i64, i64* %RAX
  %13614 = load i64, i64* %PC
  %13615 = add i64 %13614, 4
  store i64 %13615, i64* %PC
  %13616 = add i64 1, %13613
  store i64 %13616, i64* %RAX, align 8, !tbaa !2428
  %13617 = icmp ult i64 %13616, %13613
  %13618 = icmp ult i64 %13616, 1
  %13619 = or i1 %13617, %13618
  %13620 = zext i1 %13619 to i8
  %13621 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13620, i8* %13621, align 1, !tbaa !2432
  %13622 = trunc i64 %13616 to i32
  %13623 = and i32 %13622, 255
  %13624 = call i32 @llvm.ctpop.i32(i32 %13623) #16
  %13625 = trunc i32 %13624 to i8
  %13626 = and i8 %13625, 1
  %13627 = xor i8 %13626, 1
  %13628 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13627, i8* %13628, align 1, !tbaa !2446
  %13629 = xor i64 1, %13613
  %13630 = xor i64 %13629, %13616
  %13631 = lshr i64 %13630, 4
  %13632 = trunc i64 %13631 to i8
  %13633 = and i8 %13632, 1
  %13634 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13633, i8* %13634, align 1, !tbaa !2450
  %13635 = icmp eq i64 %13616, 0
  %13636 = zext i1 %13635 to i8
  %13637 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13636, i8* %13637, align 1, !tbaa !2447
  %13638 = lshr i64 %13616, 63
  %13639 = trunc i64 %13638 to i8
  %13640 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13639, i8* %13640, align 1, !tbaa !2448
  %13641 = lshr i64 %13613, 63
  %13642 = xor i64 %13638, %13641
  %13643 = add nuw nsw i64 %13642, %13638
  %13644 = icmp eq i64 %13643, 2
  %13645 = zext i1 %13644 to i8
  %13646 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13645, i8* %13646, align 1, !tbaa !2449
  %13647 = load i64, i64* %RBP
  %13648 = sub i64 %13647, 72
  %13649 = load i64, i64* %RAX
  %13650 = load i64, i64* %PC
  %13651 = add i64 %13650, 4
  store i64 %13651, i64* %PC
  %13652 = inttoptr i64 %13648 to i64*
  store i64 %13649, i64* %13652
  %13653 = load i64, i64* %PC
  %13654 = sub i64 %13653, 308
  %13655 = load i64, i64* %PC
  %13656 = add i64 %13655, 5
  store i64 %13656, i64* %PC
  %13657 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %13654, i64* %13657, align 8, !tbaa !2428
  br label %block_401f82

block_4018f3:                                     ; preds = %block_4018de
  %13658 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13659 = load i64, i64* %RBP
  %13660 = sub i64 %13659, 72
  %13661 = load i64, i64* %PC
  %13662 = add i64 %13661, 6
  store i64 %13662, i64* %PC
  %13663 = inttoptr i64 %13660 to i64*
  %13664 = load i64, i64* %13663
  %13665 = sitofp i64 %13664 to double
  %13666 = bitcast i8* %13658 to double*
  store double %13665, double* %13666, align 1, !tbaa !2452
  %13667 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13668 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13669 = load i64, i64* %RBP
  %13670 = sub i64 %13669, 48
  %13671 = load i64, i64* %PC
  %13672 = add i64 %13671, 5
  store i64 %13672, i64* %PC
  %13673 = bitcast i8* %13668 to double*
  %13674 = load double, double* %13673, align 1
  %13675 = getelementptr inbounds i8, i8* %13668, i64 8
  %13676 = bitcast i8* %13675 to i64*
  %13677 = load i64, i64* %13676, align 1
  %13678 = inttoptr i64 %13670 to double*
  %13679 = load double, double* %13678
  %13680 = fmul double %13674, %13679
  %13681 = bitcast i8* %13667 to double*
  store double %13680, double* %13681, align 1, !tbaa !2452
  %13682 = getelementptr inbounds i8, i8* %13667, i64 8
  %13683 = bitcast i8* %13682 to i64*
  store i64 %13677, i64* %13683, align 1, !tbaa !2452
  %13684 = load i64, i64* %RBP
  %13685 = sub i64 %13684, 24
  %13686 = bitcast %union.vec128_t* %XMM0 to i8*
  %13687 = load i64, i64* %PC
  %13688 = add i64 %13687, 5
  store i64 %13688, i64* %PC
  %13689 = bitcast i8* %13686 to double*
  %13690 = load double, double* %13689, align 1
  %13691 = inttoptr i64 %13685 to double*
  store double %13690, double* %13691
  %13692 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13693 = load i64, i64* %RBP
  %13694 = sub i64 %13693, 24
  %13695 = load i64, i64* %PC
  %13696 = add i64 %13695, 5
  store i64 %13696, i64* %PC
  %13697 = inttoptr i64 %13694 to double*
  %13698 = load double, double* %13697
  %13699 = bitcast i8* %13692 to double*
  store double %13698, double* %13699, align 1, !tbaa !2452
  %13700 = getelementptr inbounds i8, i8* %13692, i64 8
  %13701 = bitcast i8* %13700 to double*
  store double 0.000000e+00, double* %13701, align 1, !tbaa !2452
  %13702 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13703 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13704 = load i64, i64* %RBP
  %13705 = sub i64 %13704, 24
  %13706 = load i64, i64* %PC
  %13707 = add i64 %13706, 5
  store i64 %13707, i64* %PC
  %13708 = bitcast i8* %13703 to double*
  %13709 = load double, double* %13708, align 1
  %13710 = getelementptr inbounds i8, i8* %13703, i64 8
  %13711 = bitcast i8* %13710 to i64*
  %13712 = load i64, i64* %13711, align 1
  %13713 = inttoptr i64 %13705 to double*
  %13714 = load double, double* %13713
  %13715 = fmul double %13709, %13714
  %13716 = bitcast i8* %13702 to double*
  store double %13715, double* %13716, align 1, !tbaa !2452
  %13717 = getelementptr inbounds i8, i8* %13702, i64 8
  %13718 = bitcast i8* %13717 to i64*
  store i64 %13712, i64* %13718, align 1, !tbaa !2452
  %13719 = load i64, i64* %RBP
  %13720 = sub i64 %13719, 40
  %13721 = bitcast %union.vec128_t* %XMM0 to i8*
  %13722 = load i64, i64* %PC
  %13723 = add i64 %13722, 5
  store i64 %13723, i64* %PC
  %13724 = bitcast i8* %13721 to double*
  %13725 = load double, double* %13724, align 1
  %13726 = inttoptr i64 %13720 to double*
  store double %13725, double* %13726
  %13727 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13728 = load i64, i64* %RBP
  %13729 = sub i64 %13728, 24
  %13730 = load i64, i64* %PC
  %13731 = add i64 %13730, 5
  store i64 %13731, i64* %PC
  %13732 = inttoptr i64 %13729 to double*
  %13733 = load double, double* %13732
  %13734 = bitcast i8* %13727 to double*
  store double %13733, double* %13734, align 1, !tbaa !2452
  %13735 = getelementptr inbounds i8, i8* %13727, i64 8
  %13736 = bitcast i8* %13735 to double*
  store double 0.000000e+00, double* %13736, align 1, !tbaa !2452
  %13737 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13738 = load i64, i64* %PC
  %13739 = add i64 %13738, 9
  store i64 %13739, i64* %PC
  %13740 = load double, double* bitcast (%A6_type* @A6 to double*)
  %13741 = bitcast i8* %13737 to double*
  store double %13740, double* %13741, align 1, !tbaa !2452
  %13742 = getelementptr inbounds i8, i8* %13737, i64 8
  %13743 = bitcast i8* %13742 to double*
  store double 0.000000e+00, double* %13743, align 1, !tbaa !2452
  %13744 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13745 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13746 = load i64, i64* %RBP
  %13747 = sub i64 %13746, 40
  %13748 = load i64, i64* %PC
  %13749 = add i64 %13748, 5
  store i64 %13749, i64* %PC
  %13750 = bitcast i8* %13745 to double*
  %13751 = load double, double* %13750, align 1
  %13752 = getelementptr inbounds i8, i8* %13745, i64 8
  %13753 = bitcast i8* %13752 to i64*
  %13754 = load i64, i64* %13753, align 1
  %13755 = inttoptr i64 %13747 to double*
  %13756 = load double, double* %13755
  %13757 = fmul double %13751, %13756
  %13758 = bitcast i8* %13744 to double*
  store double %13757, double* %13758, align 1, !tbaa !2452
  %13759 = getelementptr inbounds i8, i8* %13744, i64 8
  %13760 = bitcast i8* %13759 to i64*
  store i64 %13754, i64* %13760, align 1, !tbaa !2452
  %13761 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13762 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13763 = load i64, i64* %PC
  %13764 = add i64 %13763, 9
  store i64 %13764, i64* %PC
  %13765 = bitcast i8* %13762 to double*
  %13766 = load double, double* %13765, align 1
  %13767 = getelementptr inbounds i8, i8* %13762, i64 8
  %13768 = bitcast i8* %13767 to i64*
  %13769 = load i64, i64* %13768, align 1
  %13770 = load double, double* bitcast (%A5_type* @A5 to double*)
  %13771 = fadd double %13766, %13770
  %13772 = bitcast i8* %13761 to double*
  store double %13771, double* %13772, align 1, !tbaa !2452
  %13773 = getelementptr inbounds i8, i8* %13761, i64 8
  %13774 = bitcast i8* %13773 to i64*
  store i64 %13769, i64* %13774, align 1, !tbaa !2452
  %13775 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13776 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13777 = load i64, i64* %RBP
  %13778 = sub i64 %13777, 40
  %13779 = load i64, i64* %PC
  %13780 = add i64 %13779, 5
  store i64 %13780, i64* %PC
  %13781 = bitcast i8* %13776 to double*
  %13782 = load double, double* %13781, align 1
  %13783 = getelementptr inbounds i8, i8* %13776, i64 8
  %13784 = bitcast i8* %13783 to i64*
  %13785 = load i64, i64* %13784, align 1
  %13786 = inttoptr i64 %13778 to double*
  %13787 = load double, double* %13786
  %13788 = fmul double %13782, %13787
  %13789 = bitcast i8* %13775 to double*
  store double %13788, double* %13789, align 1, !tbaa !2452
  %13790 = getelementptr inbounds i8, i8* %13775, i64 8
  %13791 = bitcast i8* %13790 to i64*
  store i64 %13785, i64* %13791, align 1, !tbaa !2452
  %13792 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13793 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13794 = load i64, i64* %PC
  %13795 = add i64 %13794, 9
  store i64 %13795, i64* %PC
  %13796 = bitcast i8* %13793 to double*
  %13797 = load double, double* %13796, align 1
  %13798 = getelementptr inbounds i8, i8* %13793, i64 8
  %13799 = bitcast i8* %13798 to i64*
  %13800 = load i64, i64* %13799, align 1
  %13801 = load double, double* bitcast (%A4_type* @A4 to double*)
  %13802 = fadd double %13797, %13801
  %13803 = bitcast i8* %13792 to double*
  store double %13802, double* %13803, align 1, !tbaa !2452
  %13804 = getelementptr inbounds i8, i8* %13792, i64 8
  %13805 = bitcast i8* %13804 to i64*
  store i64 %13800, i64* %13805, align 1, !tbaa !2452
  %13806 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13807 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13808 = load i64, i64* %RBP
  %13809 = sub i64 %13808, 40
  %13810 = load i64, i64* %PC
  %13811 = add i64 %13810, 5
  store i64 %13811, i64* %PC
  %13812 = bitcast i8* %13807 to double*
  %13813 = load double, double* %13812, align 1
  %13814 = getelementptr inbounds i8, i8* %13807, i64 8
  %13815 = bitcast i8* %13814 to i64*
  %13816 = load i64, i64* %13815, align 1
  %13817 = inttoptr i64 %13809 to double*
  %13818 = load double, double* %13817
  %13819 = fmul double %13813, %13818
  %13820 = bitcast i8* %13806 to double*
  store double %13819, double* %13820, align 1, !tbaa !2452
  %13821 = getelementptr inbounds i8, i8* %13806, i64 8
  %13822 = bitcast i8* %13821 to i64*
  store i64 %13816, i64* %13822, align 1, !tbaa !2452
  %13823 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13824 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13825 = load i64, i64* %PC
  %13826 = add i64 %13825, 9
  store i64 %13826, i64* %PC
  %13827 = bitcast i8* %13824 to double*
  %13828 = load double, double* %13827, align 1
  %13829 = getelementptr inbounds i8, i8* %13824, i64 8
  %13830 = bitcast i8* %13829 to i64*
  %13831 = load i64, i64* %13830, align 1
  %13832 = load double, double* bitcast (%A3_type* @A3 to double*)
  %13833 = fadd double %13828, %13832
  %13834 = bitcast i8* %13823 to double*
  store double %13833, double* %13834, align 1, !tbaa !2452
  %13835 = getelementptr inbounds i8, i8* %13823, i64 8
  %13836 = bitcast i8* %13835 to i64*
  store i64 %13831, i64* %13836, align 1, !tbaa !2452
  %13837 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13838 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13839 = load i64, i64* %RBP
  %13840 = sub i64 %13839, 40
  %13841 = load i64, i64* %PC
  %13842 = add i64 %13841, 5
  store i64 %13842, i64* %PC
  %13843 = bitcast i8* %13838 to double*
  %13844 = load double, double* %13843, align 1
  %13845 = getelementptr inbounds i8, i8* %13838, i64 8
  %13846 = bitcast i8* %13845 to i64*
  %13847 = load i64, i64* %13846, align 1
  %13848 = inttoptr i64 %13840 to double*
  %13849 = load double, double* %13848
  %13850 = fmul double %13844, %13849
  %13851 = bitcast i8* %13837 to double*
  store double %13850, double* %13851, align 1, !tbaa !2452
  %13852 = getelementptr inbounds i8, i8* %13837, i64 8
  %13853 = bitcast i8* %13852 to i64*
  store i64 %13847, i64* %13853, align 1, !tbaa !2452
  %13854 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13855 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13856 = load i64, i64* %PC
  %13857 = add i64 %13856, 9
  store i64 %13857, i64* %PC
  %13858 = bitcast i8* %13855 to double*
  %13859 = load double, double* %13858, align 1
  %13860 = getelementptr inbounds i8, i8* %13855, i64 8
  %13861 = bitcast i8* %13860 to i64*
  %13862 = load i64, i64* %13861, align 1
  %13863 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %13864 = fadd double %13859, %13863
  %13865 = bitcast i8* %13854 to double*
  store double %13864, double* %13865, align 1, !tbaa !2452
  %13866 = getelementptr inbounds i8, i8* %13854, i64 8
  %13867 = bitcast i8* %13866 to i64*
  store i64 %13862, i64* %13867, align 1, !tbaa !2452
  %13868 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13869 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13870 = load i64, i64* %RBP
  %13871 = sub i64 %13870, 40
  %13872 = load i64, i64* %PC
  %13873 = add i64 %13872, 5
  store i64 %13873, i64* %PC
  %13874 = bitcast i8* %13869 to double*
  %13875 = load double, double* %13874, align 1
  %13876 = getelementptr inbounds i8, i8* %13869, i64 8
  %13877 = bitcast i8* %13876 to i64*
  %13878 = load i64, i64* %13877, align 1
  %13879 = inttoptr i64 %13871 to double*
  %13880 = load double, double* %13879
  %13881 = fmul double %13875, %13880
  %13882 = bitcast i8* %13868 to double*
  store double %13881, double* %13882, align 1, !tbaa !2452
  %13883 = getelementptr inbounds i8, i8* %13868, i64 8
  %13884 = bitcast i8* %13883 to i64*
  store i64 %13878, i64* %13884, align 1, !tbaa !2452
  %13885 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13886 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13887 = load i64, i64* %PC
  %13888 = add i64 %13887, 9
  store i64 %13888, i64* %PC
  %13889 = bitcast i8* %13886 to double*
  %13890 = load double, double* %13889, align 1
  %13891 = getelementptr inbounds i8, i8* %13886, i64 8
  %13892 = bitcast i8* %13891 to i64*
  %13893 = load i64, i64* %13892, align 1
  %13894 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %13895 = fadd double %13890, %13894
  %13896 = bitcast i8* %13885 to double*
  store double %13895, double* %13896, align 1, !tbaa !2452
  %13897 = getelementptr inbounds i8, i8* %13885, i64 8
  %13898 = bitcast i8* %13897 to i64*
  store i64 %13893, i64* %13898, align 1, !tbaa !2452
  %13899 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13900 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13901 = load i64, i64* %RBP
  %13902 = sub i64 %13901, 40
  %13903 = load i64, i64* %PC
  %13904 = add i64 %13903, 5
  store i64 %13904, i64* %PC
  %13905 = bitcast i8* %13900 to double*
  %13906 = load double, double* %13905, align 1
  %13907 = getelementptr inbounds i8, i8* %13900, i64 8
  %13908 = bitcast i8* %13907 to i64*
  %13909 = load i64, i64* %13908, align 1
  %13910 = inttoptr i64 %13902 to double*
  %13911 = load double, double* %13910
  %13912 = fmul double %13906, %13911
  %13913 = bitcast i8* %13899 to double*
  store double %13912, double* %13913, align 1, !tbaa !2452
  %13914 = getelementptr inbounds i8, i8* %13899, i64 8
  %13915 = bitcast i8* %13914 to i64*
  store i64 %13909, i64* %13915, align 1, !tbaa !2452
  %13916 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13917 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13918 = load i64, i64* %PC
  %13919 = add i64 %13918, 9
  store i64 %13919, i64* %PC
  %13920 = bitcast i8* %13917 to double*
  %13921 = load double, double* %13920, align 1
  %13922 = getelementptr inbounds i8, i8* %13917, i64 8
  %13923 = bitcast i8* %13922 to i64*
  %13924 = load i64, i64* %13923, align 1
  %13925 = load double, double* bitcast (%one_type* @one to double*)
  %13926 = fadd double %13921, %13925
  %13927 = bitcast i8* %13916 to double*
  store double %13926, double* %13927, align 1, !tbaa !2452
  %13928 = getelementptr inbounds i8, i8* %13916, i64 8
  %13929 = bitcast i8* %13928 to i64*
  store i64 %13924, i64* %13929, align 1, !tbaa !2452
  %13930 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13931 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13932 = bitcast %union.vec128_t* %XMM1 to i8*
  %13933 = load i64, i64* %PC
  %13934 = add i64 %13933, 4
  store i64 %13934, i64* %PC
  %13935 = bitcast i8* %13931 to double*
  %13936 = load double, double* %13935, align 1
  %13937 = getelementptr inbounds i8, i8* %13931, i64 8
  %13938 = bitcast i8* %13937 to i64*
  %13939 = load i64, i64* %13938, align 1
  %13940 = bitcast i8* %13932 to double*
  %13941 = load double, double* %13940, align 1
  %13942 = fmul double %13936, %13941
  %13943 = bitcast i8* %13930 to double*
  store double %13942, double* %13943, align 1, !tbaa !2452
  %13944 = getelementptr inbounds i8, i8* %13930, i64 8
  %13945 = bitcast i8* %13944 to i64*
  store i64 %13939, i64* %13945, align 1, !tbaa !2452
  %13946 = load i64, i64* %RBP
  %13947 = sub i64 %13946, 32
  %13948 = bitcast %union.vec128_t* %XMM0 to i8*
  %13949 = load i64, i64* %PC
  %13950 = add i64 %13949, 5
  store i64 %13950, i64* %PC
  %13951 = bitcast i8* %13948 to double*
  %13952 = load double, double* %13951, align 1
  %13953 = inttoptr i64 %13947 to double*
  store double %13952, double* %13953
  %13954 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13955 = load i64, i64* %RBP
  %13956 = sub i64 %13955, 16
  %13957 = load i64, i64* %PC
  %13958 = add i64 %13957, 5
  store i64 %13958, i64* %PC
  %13959 = inttoptr i64 %13956 to double*
  %13960 = load double, double* %13959
  %13961 = bitcast i8* %13954 to double*
  store double %13960, double* %13961, align 1, !tbaa !2452
  %13962 = getelementptr inbounds i8, i8* %13954, i64 8
  %13963 = bitcast i8* %13962 to double*
  store double 0.000000e+00, double* %13963, align 1, !tbaa !2452
  %13964 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13965 = load i64, i64* %RBP
  %13966 = sub i64 %13965, 32
  %13967 = load i64, i64* %PC
  %13968 = add i64 %13967, 5
  store i64 %13968, i64* %PC
  %13969 = inttoptr i64 %13966 to double*
  %13970 = load double, double* %13969
  %13971 = bitcast i8* %13964 to double*
  store double %13970, double* %13971, align 1, !tbaa !2452
  %13972 = getelementptr inbounds i8, i8* %13964, i64 8
  %13973 = bitcast i8* %13972 to double*
  store double 0.000000e+00, double* %13973, align 1, !tbaa !2452
  %13974 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13975 = load i64, i64* %RBP
  %13976 = sub i64 %13975, 40
  %13977 = load i64, i64* %PC
  %13978 = add i64 %13977, 5
  store i64 %13978, i64* %PC
  %13979 = inttoptr i64 %13976 to double*
  %13980 = load double, double* %13979
  %13981 = bitcast i8* %13974 to double*
  store double %13980, double* %13981, align 1, !tbaa !2452
  %13982 = getelementptr inbounds i8, i8* %13974, i64 8
  %13983 = bitcast i8* %13982 to double*
  store double 0.000000e+00, double* %13983, align 1, !tbaa !2452
  %13984 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13985 = load i64, i64* %RBP
  %13986 = sub i64 %13985, 40
  %13987 = load i64, i64* %PC
  %13988 = add i64 %13987, 5
  store i64 %13988, i64* %PC
  %13989 = inttoptr i64 %13986 to double*
  %13990 = load double, double* %13989
  %13991 = bitcast i8* %13984 to double*
  store double %13990, double* %13991, align 1, !tbaa !2452
  %13992 = getelementptr inbounds i8, i8* %13984, i64 8
  %13993 = bitcast i8* %13992 to double*
  store double 0.000000e+00, double* %13993, align 1, !tbaa !2452
  %13994 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13995 = load i64, i64* %RBP
  %13996 = sub i64 %13995, 40
  %13997 = load i64, i64* %PC
  %13998 = add i64 %13997, 5
  store i64 %13998, i64* %PC
  %13999 = inttoptr i64 %13996 to double*
  %14000 = load double, double* %13999
  %14001 = bitcast i8* %13994 to double*
  store double %14000, double* %14001, align 1, !tbaa !2452
  %14002 = getelementptr inbounds i8, i8* %13994, i64 8
  %14003 = bitcast i8* %14002 to double*
  store double 0.000000e+00, double* %14003, align 1, !tbaa !2452
  %14004 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %14005 = load i64, i64* %RBP
  %14006 = sub i64 %14005, 40
  %14007 = load i64, i64* %PC
  %14008 = add i64 %14007, 5
  store i64 %14008, i64* %PC
  %14009 = inttoptr i64 %14006 to double*
  %14010 = load double, double* %14009
  %14011 = bitcast i8* %14004 to double*
  store double %14010, double* %14011, align 1, !tbaa !2452
  %14012 = getelementptr inbounds i8, i8* %14004, i64 8
  %14013 = bitcast i8* %14012 to double*
  store double 0.000000e+00, double* %14013, align 1, !tbaa !2452
  %14014 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %14015 = load i64, i64* %RBP
  %14016 = sub i64 %14015, 40
  %14017 = load i64, i64* %PC
  %14018 = add i64 %14017, 5
  store i64 %14018, i64* %PC
  %14019 = inttoptr i64 %14016 to double*
  %14020 = load double, double* %14019
  %14021 = bitcast i8* %14014 to double*
  store double %14020, double* %14021, align 1, !tbaa !2452
  %14022 = getelementptr inbounds i8, i8* %14014, i64 8
  %14023 = bitcast i8* %14022 to double*
  store double 0.000000e+00, double* %14023, align 1, !tbaa !2452
  %14024 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %14025 = load i64, i64* %PC
  %14026 = add i64 %14025, 9
  store i64 %14026, i64* %PC
  %14027 = load double, double* bitcast (%B6_type* @B6 to double*)
  %14028 = bitcast i8* %14024 to double*
  store double %14027, double* %14028, align 1, !tbaa !2452
  %14029 = getelementptr inbounds i8, i8* %14024, i64 8
  %14030 = bitcast i8* %14029 to double*
  store double 0.000000e+00, double* %14030, align 1, !tbaa !2452
  %14031 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %14032 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %14033 = load i64, i64* %RBP
  %14034 = sub i64 %14033, 40
  %14035 = load i64, i64* %PC
  %14036 = add i64 %14035, 5
  store i64 %14036, i64* %PC
  %14037 = bitcast i8* %14032 to double*
  %14038 = load double, double* %14037, align 1
  %14039 = getelementptr inbounds i8, i8* %14032, i64 8
  %14040 = bitcast i8* %14039 to i64*
  %14041 = load i64, i64* %14040, align 1
  %14042 = inttoptr i64 %14034 to double*
  %14043 = load double, double* %14042
  %14044 = fmul double %14038, %14043
  %14045 = bitcast i8* %14031 to double*
  store double %14044, double* %14045, align 1, !tbaa !2452
  %14046 = getelementptr inbounds i8, i8* %14031, i64 8
  %14047 = bitcast i8* %14046 to i64*
  store i64 %14041, i64* %14047, align 1, !tbaa !2452
  %14048 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %14049 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %14050 = load i64, i64* %PC
  %14051 = add i64 %14050, 9
  store i64 %14051, i64* %PC
  %14052 = bitcast i8* %14049 to double*
  %14053 = load double, double* %14052, align 1
  %14054 = getelementptr inbounds i8, i8* %14049, i64 8
  %14055 = bitcast i8* %14054 to i64*
  %14056 = load i64, i64* %14055, align 1
  %14057 = load double, double* bitcast (%B5_type* @B5 to double*)
  %14058 = fadd double %14053, %14057
  %14059 = bitcast i8* %14048 to double*
  store double %14058, double* %14059, align 1, !tbaa !2452
  %14060 = getelementptr inbounds i8, i8* %14048, i64 8
  %14061 = bitcast i8* %14060 to i64*
  store i64 %14056, i64* %14061, align 1, !tbaa !2452
  %14062 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %14063 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %14064 = bitcast %union.vec128_t* %XMM7 to i8*
  %14065 = load i64, i64* %PC
  %14066 = add i64 %14065, 4
  store i64 %14066, i64* %PC
  %14067 = bitcast i8* %14063 to double*
  %14068 = load double, double* %14067, align 1
  %14069 = getelementptr inbounds i8, i8* %14063, i64 8
  %14070 = bitcast i8* %14069 to i64*
  %14071 = load i64, i64* %14070, align 1
  %14072 = bitcast i8* %14064 to double*
  %14073 = load double, double* %14072, align 1
  %14074 = fmul double %14068, %14073
  %14075 = bitcast i8* %14062 to double*
  store double %14074, double* %14075, align 1, !tbaa !2452
  %14076 = getelementptr inbounds i8, i8* %14062, i64 8
  %14077 = bitcast i8* %14076 to i64*
  store i64 %14071, i64* %14077, align 1, !tbaa !2452
  %14078 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %14079 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %14080 = load i64, i64* %PC
  %14081 = add i64 %14080, 9
  store i64 %14081, i64* %PC
  %14082 = bitcast i8* %14079 to double*
  %14083 = load double, double* %14082, align 1
  %14084 = getelementptr inbounds i8, i8* %14079, i64 8
  %14085 = bitcast i8* %14084 to i64*
  %14086 = load i64, i64* %14085, align 1
  %14087 = load double, double* bitcast (%B4_type* @B4 to double*)
  %14088 = fadd double %14083, %14087
  %14089 = bitcast i8* %14078 to double*
  store double %14088, double* %14089, align 1, !tbaa !2452
  %14090 = getelementptr inbounds i8, i8* %14078, i64 8
  %14091 = bitcast i8* %14090 to i64*
  store i64 %14086, i64* %14091, align 1, !tbaa !2452
  %14092 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %14093 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %14094 = bitcast %union.vec128_t* %XMM6 to i8*
  %14095 = load i64, i64* %PC
  %14096 = add i64 %14095, 4
  store i64 %14096, i64* %PC
  %14097 = bitcast i8* %14093 to double*
  %14098 = load double, double* %14097, align 1
  %14099 = getelementptr inbounds i8, i8* %14093, i64 8
  %14100 = bitcast i8* %14099 to i64*
  %14101 = load i64, i64* %14100, align 1
  %14102 = bitcast i8* %14094 to double*
  %14103 = load double, double* %14102, align 1
  %14104 = fmul double %14098, %14103
  %14105 = bitcast i8* %14092 to double*
  store double %14104, double* %14105, align 1, !tbaa !2452
  %14106 = getelementptr inbounds i8, i8* %14092, i64 8
  %14107 = bitcast i8* %14106 to i64*
  store i64 %14101, i64* %14107, align 1, !tbaa !2452
  %14108 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %14109 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %14110 = load i64, i64* %PC
  %14111 = add i64 %14110, 9
  store i64 %14111, i64* %PC
  %14112 = bitcast i8* %14109 to double*
  %14113 = load double, double* %14112, align 1
  %14114 = getelementptr inbounds i8, i8* %14109, i64 8
  %14115 = bitcast i8* %14114 to i64*
  %14116 = load i64, i64* %14115, align 1
  %14117 = load double, double* bitcast (%B3_type* @B3 to double*)
  %14118 = fadd double %14113, %14117
  %14119 = bitcast i8* %14108 to double*
  store double %14118, double* %14119, align 1, !tbaa !2452
  %14120 = getelementptr inbounds i8, i8* %14108, i64 8
  %14121 = bitcast i8* %14120 to i64*
  store i64 %14116, i64* %14121, align 1, !tbaa !2452
  %14122 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14123 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14124 = bitcast %union.vec128_t* %XMM5 to i8*
  %14125 = load i64, i64* %PC
  %14126 = add i64 %14125, 4
  store i64 %14126, i64* %PC
  %14127 = bitcast i8* %14123 to double*
  %14128 = load double, double* %14127, align 1
  %14129 = getelementptr inbounds i8, i8* %14123, i64 8
  %14130 = bitcast i8* %14129 to i64*
  %14131 = load i64, i64* %14130, align 1
  %14132 = bitcast i8* %14124 to double*
  %14133 = load double, double* %14132, align 1
  %14134 = fmul double %14128, %14133
  %14135 = bitcast i8* %14122 to double*
  store double %14134, double* %14135, align 1, !tbaa !2452
  %14136 = getelementptr inbounds i8, i8* %14122, i64 8
  %14137 = bitcast i8* %14136 to i64*
  store i64 %14131, i64* %14137, align 1, !tbaa !2452
  %14138 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14139 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %14140 = load i64, i64* %PC
  %14141 = add i64 %14140, 9
  store i64 %14141, i64* %PC
  %14142 = bitcast i8* %14139 to double*
  %14143 = load double, double* %14142, align 1
  %14144 = getelementptr inbounds i8, i8* %14139, i64 8
  %14145 = bitcast i8* %14144 to i64*
  %14146 = load i64, i64* %14145, align 1
  %14147 = load double, double* bitcast (%B2_type* @B2 to double*)
  %14148 = fadd double %14143, %14147
  %14149 = bitcast i8* %14138 to double*
  store double %14148, double* %14149, align 1, !tbaa !2452
  %14150 = getelementptr inbounds i8, i8* %14138, i64 8
  %14151 = bitcast i8* %14150 to i64*
  store i64 %14146, i64* %14151, align 1, !tbaa !2452
  %14152 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14153 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14154 = bitcast %union.vec128_t* %XMM4 to i8*
  %14155 = load i64, i64* %PC
  %14156 = add i64 %14155, 4
  store i64 %14156, i64* %PC
  %14157 = bitcast i8* %14153 to double*
  %14158 = load double, double* %14157, align 1
  %14159 = getelementptr inbounds i8, i8* %14153, i64 8
  %14160 = bitcast i8* %14159 to i64*
  %14161 = load i64, i64* %14160, align 1
  %14162 = bitcast i8* %14154 to double*
  %14163 = load double, double* %14162, align 1
  %14164 = fmul double %14158, %14163
  %14165 = bitcast i8* %14152 to double*
  store double %14164, double* %14165, align 1, !tbaa !2452
  %14166 = getelementptr inbounds i8, i8* %14152, i64 8
  %14167 = bitcast i8* %14166 to i64*
  store i64 %14161, i64* %14167, align 1, !tbaa !2452
  %14168 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14169 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14170 = load i64, i64* %PC
  %14171 = add i64 %14170, 9
  store i64 %14171, i64* %PC
  %14172 = bitcast i8* %14169 to double*
  %14173 = load double, double* %14172, align 1
  %14174 = getelementptr inbounds i8, i8* %14169, i64 8
  %14175 = bitcast i8* %14174 to i64*
  %14176 = load i64, i64* %14175, align 1
  %14177 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %14178 = fadd double %14173, %14177
  %14179 = bitcast i8* %14168 to double*
  store double %14178, double* %14179, align 1, !tbaa !2452
  %14180 = getelementptr inbounds i8, i8* %14168, i64 8
  %14181 = bitcast i8* %14180 to i64*
  store i64 %14176, i64* %14181, align 1, !tbaa !2452
  %14182 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14183 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14184 = bitcast %union.vec128_t* %XMM3 to i8*
  %14185 = load i64, i64* %PC
  %14186 = add i64 %14185, 4
  store i64 %14186, i64* %PC
  %14187 = bitcast i8* %14183 to double*
  %14188 = load double, double* %14187, align 1
  %14189 = getelementptr inbounds i8, i8* %14183, i64 8
  %14190 = bitcast i8* %14189 to i64*
  %14191 = load i64, i64* %14190, align 1
  %14192 = bitcast i8* %14184 to double*
  %14193 = load double, double* %14192, align 1
  %14194 = fmul double %14188, %14193
  %14195 = bitcast i8* %14182 to double*
  store double %14194, double* %14195, align 1, !tbaa !2452
  %14196 = getelementptr inbounds i8, i8* %14182, i64 8
  %14197 = bitcast i8* %14196 to i64*
  store i64 %14191, i64* %14197, align 1, !tbaa !2452
  %14198 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14199 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14200 = load i64, i64* %PC
  %14201 = add i64 %14200, 9
  store i64 %14201, i64* %PC
  %14202 = bitcast i8* %14199 to double*
  %14203 = load double, double* %14202, align 1
  %14204 = getelementptr inbounds i8, i8* %14199, i64 8
  %14205 = bitcast i8* %14204 to i64*
  %14206 = load i64, i64* %14205, align 1
  %14207 = load double, double* bitcast (%one_type* @one to double*)
  %14208 = fadd double %14203, %14207
  %14209 = bitcast i8* %14198 to double*
  store double %14208, double* %14209, align 1, !tbaa !2452
  %14210 = getelementptr inbounds i8, i8* %14198, i64 8
  %14211 = bitcast i8* %14210 to i64*
  store i64 %14206, i64* %14211, align 1, !tbaa !2452
  %14212 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14213 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14214 = bitcast %union.vec128_t* %XMM2 to i8*
  %14215 = load i64, i64* %PC
  %14216 = add i64 %14215, 4
  store i64 %14216, i64* %PC
  %14217 = bitcast i8* %14213 to double*
  %14218 = load double, double* %14217, align 1
  %14219 = getelementptr inbounds i8, i8* %14213, i64 8
  %14220 = bitcast i8* %14219 to i64*
  %14221 = load i64, i64* %14220, align 1
  %14222 = bitcast i8* %14214 to double*
  %14223 = load double, double* %14222, align 1
  %14224 = fmul double %14218, %14223
  %14225 = bitcast i8* %14212 to double*
  store double %14224, double* %14225, align 1, !tbaa !2452
  %14226 = getelementptr inbounds i8, i8* %14212, i64 8
  %14227 = bitcast i8* %14226 to i64*
  store i64 %14221, i64* %14227, align 1, !tbaa !2452
  %14228 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14229 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14230 = bitcast %union.vec128_t* %XMM1 to i8*
  %14231 = load i64, i64* %PC
  %14232 = add i64 %14231, 4
  store i64 %14232, i64* %PC
  %14233 = bitcast i8* %14229 to double*
  %14234 = load double, double* %14233, align 1
  %14235 = getelementptr inbounds i8, i8* %14229, i64 8
  %14236 = bitcast i8* %14235 to i64*
  %14237 = load i64, i64* %14236, align 1
  %14238 = bitcast i8* %14230 to double*
  %14239 = load double, double* %14238, align 1
  %14240 = fadd double %14234, %14239
  %14241 = bitcast i8* %14228 to double*
  store double %14240, double* %14241, align 1, !tbaa !2452
  %14242 = getelementptr inbounds i8, i8* %14228, i64 8
  %14243 = bitcast i8* %14242 to i64*
  store i64 %14237, i64* %14243, align 1, !tbaa !2452
  %14244 = load i64, i64* %RBP
  %14245 = sub i64 %14244, 16
  %14246 = bitcast %union.vec128_t* %XMM0 to i8*
  %14247 = load i64, i64* %PC
  %14248 = add i64 %14247, 5
  store i64 %14248, i64* %PC
  %14249 = bitcast i8* %14246 to double*
  %14250 = load double, double* %14249, align 1
  %14251 = inttoptr i64 %14245 to double*
  store double %14250, double* %14251
  %14252 = load i64, i64* %RBP
  %14253 = sub i64 %14252, 72
  %14254 = load i64, i64* %PC
  %14255 = add i64 %14254, 4
  store i64 %14255, i64* %PC
  %14256 = inttoptr i64 %14253 to i64*
  %14257 = load i64, i64* %14256
  store i64 %14257, i64* %RAX, align 8, !tbaa !2428
  %14258 = load i64, i64* %RAX
  %14259 = load i64, i64* %PC
  %14260 = add i64 %14259, 4
  store i64 %14260, i64* %PC
  %14261 = add i64 1, %14258
  store i64 %14261, i64* %RAX, align 8, !tbaa !2428
  %14262 = icmp ult i64 %14261, %14258
  %14263 = icmp ult i64 %14261, 1
  %14264 = or i1 %14262, %14263
  %14265 = zext i1 %14264 to i8
  %14266 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14265, i8* %14266, align 1, !tbaa !2432
  %14267 = trunc i64 %14261 to i32
  %14268 = and i32 %14267, 255
  %14269 = call i32 @llvm.ctpop.i32(i32 %14268) #16
  %14270 = trunc i32 %14269 to i8
  %14271 = and i8 %14270, 1
  %14272 = xor i8 %14271, 1
  %14273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14272, i8* %14273, align 1, !tbaa !2446
  %14274 = xor i64 1, %14258
  %14275 = xor i64 %14274, %14261
  %14276 = lshr i64 %14275, 4
  %14277 = trunc i64 %14276 to i8
  %14278 = and i8 %14277, 1
  %14279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14278, i8* %14279, align 1, !tbaa !2450
  %14280 = icmp eq i64 %14261, 0
  %14281 = zext i1 %14280 to i8
  %14282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14281, i8* %14282, align 1, !tbaa !2447
  %14283 = lshr i64 %14261, 63
  %14284 = trunc i64 %14283 to i8
  %14285 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14284, i8* %14285, align 1, !tbaa !2448
  %14286 = lshr i64 %14258, 63
  %14287 = xor i64 %14283, %14286
  %14288 = add nuw nsw i64 %14287, %14283
  %14289 = icmp eq i64 %14288, 2
  %14290 = zext i1 %14289 to i8
  %14291 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14290, i8* %14291, align 1, !tbaa !2449
  %14292 = load i64, i64* %RBP
  %14293 = sub i64 %14292, 72
  %14294 = load i64, i64* %RAX
  %14295 = load i64, i64* %PC
  %14296 = add i64 %14295, 4
  store i64 %14296, i64* %PC
  %14297 = inttoptr i64 %14293 to i64*
  store i64 %14294, i64* %14297
  %14298 = load i64, i64* %PC
  %14299 = sub i64 %14298, 307
  %14300 = load i64, i64* %PC
  %14301 = add i64 %14300, 5
  store i64 %14301, i64* %PC
  %14302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14299, i64* %14302, align 8, !tbaa !2428
  br label %block_4018de

block_400e89:                                     ; preds = %block_400e74
  %14303 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14304 = load i64, i64* %RBP
  %14305 = sub i64 %14304, 32
  %14306 = load i64, i64* %PC
  %14307 = add i64 %14306, 5
  store i64 %14307, i64* %PC
  %14308 = inttoptr i64 %14305 to double*
  %14309 = load double, double* %14308
  %14310 = bitcast i8* %14303 to double*
  store double %14309, double* %14310, align 1, !tbaa !2452
  %14311 = getelementptr inbounds i8, i8* %14303, i64 8
  %14312 = bitcast i8* %14311 to double*
  store double 0.000000e+00, double* %14312, align 1, !tbaa !2452
  %14313 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14314 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14315 = load i64, i64* %PC
  %14316 = add i64 %14315, 9
  store i64 %14316, i64* %PC
  %14317 = bitcast i8* %14314 to double*
  %14318 = load double, double* %14317, align 1
  %14319 = getelementptr inbounds i8, i8* %14314, i64 8
  %14320 = bitcast i8* %14319 to i64*
  %14321 = load i64, i64* %14320, align 1
  %14322 = load double, double* bitcast (%one_type* @one to double*)
  %14323 = fadd double %14318, %14322
  %14324 = bitcast i8* %14313 to double*
  store double %14323, double* %14324, align 1, !tbaa !2452
  %14325 = getelementptr inbounds i8, i8* %14313, i64 8
  %14326 = bitcast i8* %14325 to i64*
  store i64 %14321, i64* %14326, align 1, !tbaa !2452
  %14327 = load i64, i64* %RBP
  %14328 = sub i64 %14327, 32
  %14329 = bitcast %union.vec128_t* %XMM0 to i8*
  %14330 = load i64, i64* %PC
  %14331 = add i64 %14330, 5
  store i64 %14331, i64* %PC
  %14332 = bitcast i8* %14329 to double*
  %14333 = load double, double* %14332, align 1
  %14334 = inttoptr i64 %14328 to double*
  store double %14333, double* %14334
  %14335 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14336 = load i64, i64* %RBP
  %14337 = sub i64 %14336, 32
  %14338 = load i64, i64* %PC
  %14339 = add i64 %14338, 5
  store i64 %14339, i64* %PC
  %14340 = inttoptr i64 %14337 to double*
  %14341 = load double, double* %14340
  %14342 = bitcast i8* %14335 to double*
  store double %14341, double* %14342, align 1, !tbaa !2452
  %14343 = getelementptr inbounds i8, i8* %14335, i64 8
  %14344 = bitcast i8* %14343 to double*
  store double 0.000000e+00, double* %14344, align 1, !tbaa !2452
  %14345 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14346 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14347 = load i64, i64* %RBP
  %14348 = sub i64 %14347, 48
  %14349 = load i64, i64* %PC
  %14350 = add i64 %14349, 5
  store i64 %14350, i64* %PC
  %14351 = bitcast i8* %14346 to double*
  %14352 = load double, double* %14351, align 1
  %14353 = getelementptr inbounds i8, i8* %14346, i64 8
  %14354 = bitcast i8* %14353 to i64*
  %14355 = load i64, i64* %14354, align 1
  %14356 = inttoptr i64 %14348 to double*
  %14357 = load double, double* %14356
  %14358 = fmul double %14352, %14357
  %14359 = bitcast i8* %14345 to double*
  store double %14358, double* %14359, align 1, !tbaa !2452
  %14360 = getelementptr inbounds i8, i8* %14345, i64 8
  %14361 = bitcast i8* %14360 to i64*
  store i64 %14355, i64* %14361, align 1, !tbaa !2452
  %14362 = load i64, i64* %RBP
  %14363 = sub i64 %14362, 24
  %14364 = bitcast %union.vec128_t* %XMM0 to i8*
  %14365 = load i64, i64* %PC
  %14366 = add i64 %14365, 5
  store i64 %14366, i64* %PC
  %14367 = bitcast i8* %14364 to double*
  %14368 = load double, double* %14367, align 1
  %14369 = inttoptr i64 %14363 to double*
  store double %14368, double* %14369
  %14370 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14371 = load i64, i64* %RBP
  %14372 = sub i64 %14371, 24
  %14373 = load i64, i64* %PC
  %14374 = add i64 %14373, 5
  store i64 %14374, i64* %PC
  %14375 = inttoptr i64 %14372 to double*
  %14376 = load double, double* %14375
  %14377 = bitcast i8* %14370 to double*
  store double %14376, double* %14377, align 1, !tbaa !2452
  %14378 = getelementptr inbounds i8, i8* %14370, i64 8
  %14379 = bitcast i8* %14378 to double*
  store double 0.000000e+00, double* %14379, align 1, !tbaa !2452
  %14380 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14381 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14382 = load i64, i64* %RBP
  %14383 = sub i64 %14382, 24
  %14384 = load i64, i64* %PC
  %14385 = add i64 %14384, 5
  store i64 %14385, i64* %PC
  %14386 = bitcast i8* %14381 to double*
  %14387 = load double, double* %14386, align 1
  %14388 = getelementptr inbounds i8, i8* %14381, i64 8
  %14389 = bitcast i8* %14388 to i64*
  %14390 = load i64, i64* %14389, align 1
  %14391 = inttoptr i64 %14383 to double*
  %14392 = load double, double* %14391
  %14393 = fmul double %14387, %14392
  %14394 = bitcast i8* %14380 to double*
  store double %14393, double* %14394, align 1, !tbaa !2452
  %14395 = getelementptr inbounds i8, i8* %14380, i64 8
  %14396 = bitcast i8* %14395 to i64*
  store i64 %14390, i64* %14396, align 1, !tbaa !2452
  %14397 = load i64, i64* %RBP
  %14398 = sub i64 %14397, 40
  %14399 = bitcast %union.vec128_t* %XMM0 to i8*
  %14400 = load i64, i64* %PC
  %14401 = add i64 %14400, 5
  store i64 %14401, i64* %PC
  %14402 = bitcast i8* %14399 to double*
  %14403 = load double, double* %14402, align 1
  %14404 = inttoptr i64 %14398 to double*
  store double %14403, double* %14404
  %14405 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14406 = load i64, i64* %RBP
  %14407 = sub i64 %14406, 16
  %14408 = load i64, i64* %PC
  %14409 = add i64 %14408, 5
  store i64 %14409, i64* %PC
  %14410 = inttoptr i64 %14407 to double*
  %14411 = load double, double* %14410
  %14412 = bitcast i8* %14405 to double*
  store double %14411, double* %14412, align 1, !tbaa !2452
  %14413 = getelementptr inbounds i8, i8* %14405, i64 8
  %14414 = bitcast i8* %14413 to double*
  store double 0.000000e+00, double* %14414, align 1, !tbaa !2452
  %14415 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14416 = load i64, i64* %RBP
  %14417 = sub i64 %14416, 24
  %14418 = load i64, i64* %PC
  %14419 = add i64 %14418, 5
  store i64 %14419, i64* %PC
  %14420 = inttoptr i64 %14417 to double*
  %14421 = load double, double* %14420
  %14422 = bitcast i8* %14415 to double*
  store double %14421, double* %14422, align 1, !tbaa !2452
  %14423 = getelementptr inbounds i8, i8* %14415, i64 8
  %14424 = bitcast i8* %14423 to double*
  store double 0.000000e+00, double* %14424, align 1, !tbaa !2452
  %14425 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14426 = load i64, i64* %PC
  %14427 = add i64 %14426, 9
  store i64 %14427, i64* %PC
  %14428 = load double, double* bitcast (%A6_type* @A6 to double*)
  %14429 = bitcast i8* %14425 to double*
  store double %14428, double* %14429, align 1, !tbaa !2452
  %14430 = getelementptr inbounds i8, i8* %14425, i64 8
  %14431 = bitcast i8* %14430 to double*
  store double 0.000000e+00, double* %14431, align 1, !tbaa !2452
  %14432 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14433 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14434 = load i64, i64* %RBP
  %14435 = sub i64 %14434, 40
  %14436 = load i64, i64* %PC
  %14437 = add i64 %14436, 5
  store i64 %14437, i64* %PC
  %14438 = bitcast i8* %14433 to double*
  %14439 = load double, double* %14438, align 1
  %14440 = getelementptr inbounds i8, i8* %14433, i64 8
  %14441 = bitcast i8* %14440 to i64*
  %14442 = load i64, i64* %14441, align 1
  %14443 = inttoptr i64 %14435 to double*
  %14444 = load double, double* %14443
  %14445 = fmul double %14439, %14444
  %14446 = bitcast i8* %14432 to double*
  store double %14445, double* %14446, align 1, !tbaa !2452
  %14447 = getelementptr inbounds i8, i8* %14432, i64 8
  %14448 = bitcast i8* %14447 to i64*
  store i64 %14442, i64* %14448, align 1, !tbaa !2452
  %14449 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14450 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14451 = load i64, i64* %PC
  %14452 = add i64 %14451, 9
  store i64 %14452, i64* %PC
  %14453 = bitcast i8* %14450 to double*
  %14454 = load double, double* %14453, align 1
  %14455 = getelementptr inbounds i8, i8* %14450, i64 8
  %14456 = bitcast i8* %14455 to i64*
  %14457 = load i64, i64* %14456, align 1
  %14458 = load double, double* bitcast (%A5_type* @A5 to double*)
  %14459 = fsub double %14454, %14458
  %14460 = bitcast i8* %14449 to double*
  store double %14459, double* %14460, align 1, !tbaa !2452
  %14461 = getelementptr inbounds i8, i8* %14449, i64 8
  %14462 = bitcast i8* %14461 to i64*
  store i64 %14457, i64* %14462, align 1, !tbaa !2452
  %14463 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14464 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14465 = load i64, i64* %RBP
  %14466 = sub i64 %14465, 40
  %14467 = load i64, i64* %PC
  %14468 = add i64 %14467, 5
  store i64 %14468, i64* %PC
  %14469 = bitcast i8* %14464 to double*
  %14470 = load double, double* %14469, align 1
  %14471 = getelementptr inbounds i8, i8* %14464, i64 8
  %14472 = bitcast i8* %14471 to i64*
  %14473 = load i64, i64* %14472, align 1
  %14474 = inttoptr i64 %14466 to double*
  %14475 = load double, double* %14474
  %14476 = fmul double %14470, %14475
  %14477 = bitcast i8* %14463 to double*
  store double %14476, double* %14477, align 1, !tbaa !2452
  %14478 = getelementptr inbounds i8, i8* %14463, i64 8
  %14479 = bitcast i8* %14478 to i64*
  store i64 %14473, i64* %14479, align 1, !tbaa !2452
  %14480 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14481 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14482 = load i64, i64* %PC
  %14483 = add i64 %14482, 9
  store i64 %14483, i64* %PC
  %14484 = bitcast i8* %14481 to double*
  %14485 = load double, double* %14484, align 1
  %14486 = getelementptr inbounds i8, i8* %14481, i64 8
  %14487 = bitcast i8* %14486 to i64*
  %14488 = load i64, i64* %14487, align 1
  %14489 = load double, double* bitcast (%A4_type* @A4 to double*)
  %14490 = fadd double %14485, %14489
  %14491 = bitcast i8* %14480 to double*
  store double %14490, double* %14491, align 1, !tbaa !2452
  %14492 = getelementptr inbounds i8, i8* %14480, i64 8
  %14493 = bitcast i8* %14492 to i64*
  store i64 %14488, i64* %14493, align 1, !tbaa !2452
  %14494 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14495 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14496 = load i64, i64* %RBP
  %14497 = sub i64 %14496, 40
  %14498 = load i64, i64* %PC
  %14499 = add i64 %14498, 5
  store i64 %14499, i64* %PC
  %14500 = bitcast i8* %14495 to double*
  %14501 = load double, double* %14500, align 1
  %14502 = getelementptr inbounds i8, i8* %14495, i64 8
  %14503 = bitcast i8* %14502 to i64*
  %14504 = load i64, i64* %14503, align 1
  %14505 = inttoptr i64 %14497 to double*
  %14506 = load double, double* %14505
  %14507 = fmul double %14501, %14506
  %14508 = bitcast i8* %14494 to double*
  store double %14507, double* %14508, align 1, !tbaa !2452
  %14509 = getelementptr inbounds i8, i8* %14494, i64 8
  %14510 = bitcast i8* %14509 to i64*
  store i64 %14504, i64* %14510, align 1, !tbaa !2452
  %14511 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14512 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14513 = load i64, i64* %PC
  %14514 = add i64 %14513, 9
  store i64 %14514, i64* %PC
  %14515 = bitcast i8* %14512 to double*
  %14516 = load double, double* %14515, align 1
  %14517 = getelementptr inbounds i8, i8* %14512, i64 8
  %14518 = bitcast i8* %14517 to i64*
  %14519 = load i64, i64* %14518, align 1
  %14520 = load double, double* bitcast (%A3_type* @A3 to double*)
  %14521 = fsub double %14516, %14520
  %14522 = bitcast i8* %14511 to double*
  store double %14521, double* %14522, align 1, !tbaa !2452
  %14523 = getelementptr inbounds i8, i8* %14511, i64 8
  %14524 = bitcast i8* %14523 to i64*
  store i64 %14519, i64* %14524, align 1, !tbaa !2452
  %14525 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14526 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14527 = load i64, i64* %RBP
  %14528 = sub i64 %14527, 40
  %14529 = load i64, i64* %PC
  %14530 = add i64 %14529, 5
  store i64 %14530, i64* %PC
  %14531 = bitcast i8* %14526 to double*
  %14532 = load double, double* %14531, align 1
  %14533 = getelementptr inbounds i8, i8* %14526, i64 8
  %14534 = bitcast i8* %14533 to i64*
  %14535 = load i64, i64* %14534, align 1
  %14536 = inttoptr i64 %14528 to double*
  %14537 = load double, double* %14536
  %14538 = fmul double %14532, %14537
  %14539 = bitcast i8* %14525 to double*
  store double %14538, double* %14539, align 1, !tbaa !2452
  %14540 = getelementptr inbounds i8, i8* %14525, i64 8
  %14541 = bitcast i8* %14540 to i64*
  store i64 %14535, i64* %14541, align 1, !tbaa !2452
  %14542 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14543 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14544 = load i64, i64* %PC
  %14545 = add i64 %14544, 9
  store i64 %14545, i64* %PC
  %14546 = bitcast i8* %14543 to double*
  %14547 = load double, double* %14546, align 1
  %14548 = getelementptr inbounds i8, i8* %14543, i64 8
  %14549 = bitcast i8* %14548 to i64*
  %14550 = load i64, i64* %14549, align 1
  %14551 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %14552 = fadd double %14547, %14551
  %14553 = bitcast i8* %14542 to double*
  store double %14552, double* %14553, align 1, !tbaa !2452
  %14554 = getelementptr inbounds i8, i8* %14542, i64 8
  %14555 = bitcast i8* %14554 to i64*
  store i64 %14550, i64* %14555, align 1, !tbaa !2452
  %14556 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14557 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14558 = load i64, i64* %RBP
  %14559 = sub i64 %14558, 40
  %14560 = load i64, i64* %PC
  %14561 = add i64 %14560, 5
  store i64 %14561, i64* %PC
  %14562 = bitcast i8* %14557 to double*
  %14563 = load double, double* %14562, align 1
  %14564 = getelementptr inbounds i8, i8* %14557, i64 8
  %14565 = bitcast i8* %14564 to i64*
  %14566 = load i64, i64* %14565, align 1
  %14567 = inttoptr i64 %14559 to double*
  %14568 = load double, double* %14567
  %14569 = fmul double %14563, %14568
  %14570 = bitcast i8* %14556 to double*
  store double %14569, double* %14570, align 1, !tbaa !2452
  %14571 = getelementptr inbounds i8, i8* %14556, i64 8
  %14572 = bitcast i8* %14571 to i64*
  store i64 %14566, i64* %14572, align 1, !tbaa !2452
  %14573 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14574 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14575 = load i64, i64* %PC
  %14576 = add i64 %14575, 9
  store i64 %14576, i64* %PC
  %14577 = bitcast i8* %14574 to double*
  %14578 = load double, double* %14577, align 1
  %14579 = getelementptr inbounds i8, i8* %14574, i64 8
  %14580 = bitcast i8* %14579 to i64*
  %14581 = load i64, i64* %14580, align 1
  %14582 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %14583 = fadd double %14578, %14582
  %14584 = bitcast i8* %14573 to double*
  store double %14583, double* %14584, align 1, !tbaa !2452
  %14585 = getelementptr inbounds i8, i8* %14573, i64 8
  %14586 = bitcast i8* %14585 to i64*
  store i64 %14581, i64* %14586, align 1, !tbaa !2452
  %14587 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14588 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14589 = load i64, i64* %RBP
  %14590 = sub i64 %14589, 40
  %14591 = load i64, i64* %PC
  %14592 = add i64 %14591, 5
  store i64 %14592, i64* %PC
  %14593 = bitcast i8* %14588 to double*
  %14594 = load double, double* %14593, align 1
  %14595 = getelementptr inbounds i8, i8* %14588, i64 8
  %14596 = bitcast i8* %14595 to i64*
  %14597 = load i64, i64* %14596, align 1
  %14598 = inttoptr i64 %14590 to double*
  %14599 = load double, double* %14598
  %14600 = fmul double %14594, %14599
  %14601 = bitcast i8* %14587 to double*
  store double %14600, double* %14601, align 1, !tbaa !2452
  %14602 = getelementptr inbounds i8, i8* %14587, i64 8
  %14603 = bitcast i8* %14602 to i64*
  store i64 %14597, i64* %14603, align 1, !tbaa !2452
  %14604 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14605 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14606 = load i64, i64* %PC
  %14607 = add i64 %14606, 9
  store i64 %14607, i64* %PC
  %14608 = bitcast i8* %14605 to double*
  %14609 = load double, double* %14608, align 1
  %14610 = getelementptr inbounds i8, i8* %14605, i64 8
  %14611 = bitcast i8* %14610 to i64*
  %14612 = load i64, i64* %14611, align 1
  %14613 = load double, double* bitcast (%one_type* @one to double*)
  %14614 = fadd double %14609, %14613
  %14615 = bitcast i8* %14604 to double*
  store double %14614, double* %14615, align 1, !tbaa !2452
  %14616 = getelementptr inbounds i8, i8* %14604, i64 8
  %14617 = bitcast i8* %14616 to i64*
  store i64 %14612, i64* %14617, align 1, !tbaa !2452
  %14618 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14619 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14620 = bitcast %union.vec128_t* %XMM2 to i8*
  %14621 = load i64, i64* %PC
  %14622 = add i64 %14621, 4
  store i64 %14622, i64* %PC
  %14623 = bitcast i8* %14619 to double*
  %14624 = load double, double* %14623, align 1
  %14625 = getelementptr inbounds i8, i8* %14619, i64 8
  %14626 = bitcast i8* %14625 to i64*
  %14627 = load i64, i64* %14626, align 1
  %14628 = bitcast i8* %14620 to double*
  %14629 = load double, double* %14628, align 1
  %14630 = fmul double %14624, %14629
  %14631 = bitcast i8* %14618 to double*
  store double %14630, double* %14631, align 1, !tbaa !2452
  %14632 = getelementptr inbounds i8, i8* %14618, i64 8
  %14633 = bitcast i8* %14632 to i64*
  store i64 %14627, i64* %14633, align 1, !tbaa !2452
  %14634 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14635 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14636 = bitcast %union.vec128_t* %XMM1 to i8*
  %14637 = load i64, i64* %PC
  %14638 = add i64 %14637, 4
  store i64 %14638, i64* %PC
  %14639 = bitcast i8* %14635 to double*
  %14640 = load double, double* %14639, align 1
  %14641 = getelementptr inbounds i8, i8* %14635, i64 8
  %14642 = bitcast i8* %14641 to i64*
  %14643 = load i64, i64* %14642, align 1
  %14644 = bitcast i8* %14636 to double*
  %14645 = load double, double* %14644, align 1
  %14646 = fadd double %14640, %14645
  %14647 = bitcast i8* %14634 to double*
  store double %14646, double* %14647, align 1, !tbaa !2452
  %14648 = getelementptr inbounds i8, i8* %14634, i64 8
  %14649 = bitcast i8* %14648 to i64*
  store i64 %14643, i64* %14649, align 1, !tbaa !2452
  %14650 = load i64, i64* %RBP
  %14651 = sub i64 %14650, 16
  %14652 = bitcast %union.vec128_t* %XMM0 to i8*
  %14653 = load i64, i64* %PC
  %14654 = add i64 %14653, 5
  store i64 %14654, i64* %PC
  %14655 = bitcast i8* %14652 to double*
  %14656 = load double, double* %14655, align 1
  %14657 = inttoptr i64 %14651 to double*
  store double %14656, double* %14657
  %14658 = load i64, i64* %RBP
  %14659 = sub i64 %14658, 72
  %14660 = load i64, i64* %PC
  %14661 = add i64 %14660, 4
  store i64 %14661, i64* %PC
  %14662 = inttoptr i64 %14659 to i64*
  %14663 = load i64, i64* %14662
  store i64 %14663, i64* %RAX, align 8, !tbaa !2428
  %14664 = load i64, i64* %RAX
  %14665 = load i64, i64* %PC
  %14666 = add i64 %14665, 4
  store i64 %14666, i64* %PC
  %14667 = add i64 1, %14664
  store i64 %14667, i64* %RAX, align 8, !tbaa !2428
  %14668 = icmp ult i64 %14667, %14664
  %14669 = icmp ult i64 %14667, 1
  %14670 = or i1 %14668, %14669
  %14671 = zext i1 %14670 to i8
  %14672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14671, i8* %14672, align 1, !tbaa !2432
  %14673 = trunc i64 %14667 to i32
  %14674 = and i32 %14673, 255
  %14675 = call i32 @llvm.ctpop.i32(i32 %14674) #16
  %14676 = trunc i32 %14675 to i8
  %14677 = and i8 %14676, 1
  %14678 = xor i8 %14677, 1
  %14679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14678, i8* %14679, align 1, !tbaa !2446
  %14680 = xor i64 1, %14664
  %14681 = xor i64 %14680, %14667
  %14682 = lshr i64 %14681, 4
  %14683 = trunc i64 %14682 to i8
  %14684 = and i8 %14683, 1
  %14685 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14684, i8* %14685, align 1, !tbaa !2450
  %14686 = icmp eq i64 %14667, 0
  %14687 = zext i1 %14686 to i8
  %14688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14687, i8* %14688, align 1, !tbaa !2447
  %14689 = lshr i64 %14667, 63
  %14690 = trunc i64 %14689 to i8
  %14691 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14690, i8* %14691, align 1, !tbaa !2448
  %14692 = lshr i64 %14664, 63
  %14693 = xor i64 %14689, %14692
  %14694 = add nuw nsw i64 %14693, %14689
  %14695 = icmp eq i64 %14694, 2
  %14696 = zext i1 %14695 to i8
  %14697 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14696, i8* %14697, align 1, !tbaa !2449
  %14698 = load i64, i64* %RBP
  %14699 = sub i64 %14698, 72
  %14700 = load i64, i64* %RAX
  %14701 = load i64, i64* %PC
  %14702 = add i64 %14701, 4
  store i64 %14702, i64* %PC
  %14703 = inttoptr i64 %14699 to i64*
  store i64 %14700, i64* %14703
  %14704 = load i64, i64* %PC
  %14705 = sub i64 %14704, 198
  %14706 = load i64, i64* %PC
  %14707 = add i64 %14706, 5
  store i64 %14707, i64* %PC
  %14708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14705, i64* %14708, align 8, !tbaa !2428
  br label %block_400e74

block_400b87:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1
  %14709 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14710 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14711 = bitcast %union.vec128_t* %XMM0 to i8*
  %14712 = load i64, i64* %PC
  %14713 = add i64 %14712, 3
  store i64 %14713, i64* %PC
  %14714 = bitcast i8* %14710 to i64*
  %14715 = load i64, i64* %14714, align 1
  %14716 = getelementptr inbounds i8, i8* %14710, i64 8
  %14717 = bitcast i8* %14716 to i64*
  %14718 = load i64, i64* %14717, align 1
  %14719 = bitcast i8* %14711 to i64*
  %14720 = load i64, i64* %14719, align 1
  %14721 = getelementptr inbounds i8, i8* %14711, i64 8
  %14722 = bitcast i8* %14721 to i64*
  %14723 = load i64, i64* %14722, align 1
  %14724 = xor i64 %14720, %14715
  %14725 = xor i64 %14723, %14718
  %14726 = trunc i64 %14724 to i32
  %14727 = lshr i64 %14724, 32
  %14728 = trunc i64 %14727 to i32
  %14729 = bitcast i8* %14709 to i32*
  store i32 %14726, i32* %14729, align 1, !tbaa !2454
  %14730 = getelementptr inbounds i8, i8* %14709, i64 4
  %14731 = bitcast i8* %14730 to i32*
  store i32 %14728, i32* %14731, align 1, !tbaa !2454
  %14732 = trunc i64 %14725 to i32
  %14733 = getelementptr inbounds i8, i8* %14709, i64 8
  %14734 = bitcast i8* %14733 to i32*
  store i32 %14732, i32* %14734, align 1, !tbaa !2454
  %14735 = lshr i64 %14725, 32
  %14736 = trunc i64 %14735 to i32
  %14737 = getelementptr inbounds i8, i8* %14709, i64 12
  %14738 = bitcast i8* %14737 to i32*
  store i32 %14736, i32* %14738, align 1, !tbaa !2454
  %14739 = bitcast %union.vec128_t* %XMM0 to i8*
  %14740 = load i64, i64* %PC
  %14741 = add i64 %14740, 9
  store i64 %14741, i64* %PC
  %14742 = bitcast i8* %14739 to double*
  %14743 = load double, double* %14742, align 1
  store double %14743, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  br label %block_400b93

block_4006a6:                                     ; preds = %block_40081c, %block_400560
  %MEMORY.12 = phi %struct.Memory* [ %388, %block_400560 ], [ %3745, %block_40081c ]
  %14744 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14745 = load i64, i64* %PC
  %14746 = add i64 %14745, 9
  store i64 %14746, i64* %PC
  %14747 = load double, double* bitcast (%sa_type* @sa to double*)
  %14748 = bitcast i8* %14744 to double*
  store double %14747, double* %14748, align 1, !tbaa !2452
  %14749 = getelementptr inbounds i8, i8* %14744, i64 8
  %14750 = bitcast i8* %14749 to double*
  store double 0.000000e+00, double* %14750, align 1, !tbaa !2452
  %14751 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14752 = load i64, i64* %PC
  %14753 = add i64 %14752, 9
  store i64 %14753, i64* %PC
  %14754 = load double, double* bitcast (%TLimit_type* @TLimit to double*)
  %14755 = bitcast i8* %14751 to double*
  store double %14754, double* %14755, align 1, !tbaa !2452
  %14756 = getelementptr inbounds i8, i8* %14751, i64 8
  %14757 = bitcast i8* %14756 to double*
  store double 0.000000e+00, double* %14757, align 1, !tbaa !2452
  %14758 = bitcast %union.vec128_t* %XMM1 to i8*
  %14759 = bitcast %union.vec128_t* %XMM0 to i8*
  %14760 = load i64, i64* %PC
  %14761 = add i64 %14760, 4
  store i64 %14761, i64* %PC
  %14762 = bitcast i8* %14758 to double*
  %14763 = load double, double* %14762, align 1
  %14764 = bitcast i8* %14759 to double*
  %14765 = load double, double* %14764, align 1
  %14766 = fcmp uno double %14763, %14765
  br i1 %14766, label %14767, label %14779

; <label>:14767:                                  ; preds = %block_4006a6
  %14768 = fadd double %14763, %14765
  %14769 = bitcast double %14768 to i64
  %14770 = and i64 %14769, 9221120237041090560
  %14771 = icmp eq i64 %14770, 9218868437227405312
  %14772 = and i64 %14769, 2251799813685247
  %14773 = icmp ne i64 %14772, 0
  %14774 = and i1 %14771, %14773
  br i1 %14774, label %14775, label %14785

; <label>:14775:                                  ; preds = %14767
  %14776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %14777 = load i64, i64* %14776, align 8, !tbaa !2428
  %14778 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %14777, %struct.Memory* %MEMORY.12) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:14779:                                  ; preds = %block_4006a6
  %14780 = fcmp ogt double %14763, %14765
  br i1 %14780, label %14785, label %14781

; <label>:14781:                                  ; preds = %14779
  %14782 = fcmp olt double %14763, %14765
  br i1 %14782, label %14785, label %14783

; <label>:14783:                                  ; preds = %14781
  %14784 = fcmp oeq double %14763, %14765
  br i1 %14784, label %14785, label %14792

; <label>:14785:                                  ; preds = %14783, %14781, %14779, %14767
  %14786 = phi i8 [ 0, %14779 ], [ 0, %14781 ], [ 1, %14783 ], [ 1, %14767 ]
  %14787 = phi i8 [ 0, %14779 ], [ 0, %14781 ], [ 0, %14783 ], [ 1, %14767 ]
  %14788 = phi i8 [ 0, %14779 ], [ 1, %14781 ], [ 0, %14783 ], [ 1, %14767 ]
  %14789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14786, i8* %14789, align 1, !tbaa !2451
  %14790 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14787, i8* %14790, align 1, !tbaa !2451
  %14791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14788, i8* %14791, align 1, !tbaa !2451
  br label %14792

; <label>:14792:                                  ; preds = %14785, %14783
  %14793 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14793, align 1, !tbaa !2451
  %14794 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %14794, align 1, !tbaa !2451
  %14795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14795, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %14775, %14792
  %14796 = phi %struct.Memory* [ %14778, %14775 ], [ %MEMORY.12, %14792 ]
  %14797 = load i64, i64* %PC
  %14798 = add i64 %14797, 357
  %14799 = load i64, i64* %PC
  %14800 = add i64 %14799, 6
  %14801 = load i64, i64* %PC
  %14802 = add i64 %14801, 6
  store i64 %14802, i64* %PC
  %14803 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14804 = load i8, i8* %14803, align 1, !tbaa !2432
  %14805 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %14806 = load i8, i8* %14805, align 1, !tbaa !2447
  %14807 = or i8 %14806, %14804
  %14808 = icmp ne i8 %14807, 0
  %14809 = zext i1 %14808 to i8
  store i8 %14809, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %14810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %14811 = select i1 %14808, i64 %14798, i64 %14800
  store i64 %14811, i64* %14810, align 8, !tbaa !2428
  %14812 = load i8, i8* %BRANCH_TAKEN
  %14813 = icmp eq i8 %14812, 1
  br i1 %14813, label %block_400821, label %block_4006c2

block_401f82:                                     ; preds = %block_401f97, %block_401d63
  %MEMORY.13 = phi %struct.Memory* [ %3270, %block_401d63 ], [ %MEMORY.13, %block_401f97 ]
  %14814 = load i64, i64* %RBP
  %14815 = sub i64 %14814, 72
  %14816 = load i64, i64* %PC
  %14817 = add i64 %14816, 4
  store i64 %14817, i64* %PC
  %14818 = inttoptr i64 %14815 to i64*
  %14819 = load i64, i64* %14818
  store i64 %14819, i64* %RAX, align 8, !tbaa !2428
  %14820 = load i64, i64* %RBP
  %14821 = sub i64 %14820, 80
  %14822 = load i64, i64* %PC
  %14823 = add i64 %14822, 4
  store i64 %14823, i64* %PC
  %14824 = inttoptr i64 %14821 to i64*
  %14825 = load i64, i64* %14824
  store i64 %14825, i64* %RCX, align 8, !tbaa !2428
  %14826 = load i64, i64* %RCX
  %14827 = load i64, i64* %PC
  %14828 = add i64 %14827, 4
  store i64 %14828, i64* %PC
  %14829 = sub i64 %14826, 1
  store i64 %14829, i64* %RCX, align 8, !tbaa !2428
  %14830 = icmp ult i64 %14826, 1
  %14831 = zext i1 %14830 to i8
  %14832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14831, i8* %14832, align 1, !tbaa !2432
  %14833 = trunc i64 %14829 to i32
  %14834 = and i32 %14833, 255
  %14835 = call i32 @llvm.ctpop.i32(i32 %14834) #16
  %14836 = trunc i32 %14835 to i8
  %14837 = and i8 %14836, 1
  %14838 = xor i8 %14837, 1
  %14839 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14838, i8* %14839, align 1, !tbaa !2446
  %14840 = xor i64 1, %14826
  %14841 = xor i64 %14840, %14829
  %14842 = lshr i64 %14841, 4
  %14843 = trunc i64 %14842 to i8
  %14844 = and i8 %14843, 1
  %14845 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14844, i8* %14845, align 1, !tbaa !2450
  %14846 = icmp eq i64 %14829, 0
  %14847 = zext i1 %14846 to i8
  %14848 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14847, i8* %14848, align 1, !tbaa !2447
  %14849 = lshr i64 %14829, 63
  %14850 = trunc i64 %14849 to i8
  %14851 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14850, i8* %14851, align 1, !tbaa !2448
  %14852 = lshr i64 %14826, 63
  %14853 = xor i64 %14849, %14852
  %14854 = add nuw nsw i64 %14853, %14852
  %14855 = icmp eq i64 %14854, 2
  %14856 = zext i1 %14855 to i8
  %14857 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14856, i8* %14857, align 1, !tbaa !2449
  %14858 = load i64, i64* %RAX
  %14859 = load i64, i64* %RCX
  %14860 = load i64, i64* %PC
  %14861 = add i64 %14860, 3
  store i64 %14861, i64* %PC
  %14862 = sub i64 %14858, %14859
  %14863 = icmp ult i64 %14858, %14859
  %14864 = zext i1 %14863 to i8
  %14865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14864, i8* %14865, align 1, !tbaa !2432
  %14866 = trunc i64 %14862 to i32
  %14867 = and i32 %14866, 255
  %14868 = call i32 @llvm.ctpop.i32(i32 %14867) #16
  %14869 = trunc i32 %14868 to i8
  %14870 = and i8 %14869, 1
  %14871 = xor i8 %14870, 1
  %14872 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14871, i8* %14872, align 1, !tbaa !2446
  %14873 = xor i64 %14859, %14858
  %14874 = xor i64 %14873, %14862
  %14875 = lshr i64 %14874, 4
  %14876 = trunc i64 %14875 to i8
  %14877 = and i8 %14876, 1
  %14878 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14877, i8* %14878, align 1, !tbaa !2450
  %14879 = icmp eq i64 %14862, 0
  %14880 = zext i1 %14879 to i8
  %14881 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14880, i8* %14881, align 1, !tbaa !2447
  %14882 = lshr i64 %14862, 63
  %14883 = trunc i64 %14882 to i8
  %14884 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14883, i8* %14884, align 1, !tbaa !2448
  %14885 = lshr i64 %14858, 63
  %14886 = lshr i64 %14859, 63
  %14887 = xor i64 %14886, %14885
  %14888 = xor i64 %14882, %14885
  %14889 = add nuw nsw i64 %14888, %14887
  %14890 = icmp eq i64 %14889, 2
  %14891 = zext i1 %14890 to i8
  %14892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14891, i8* %14892, align 1, !tbaa !2449
  %14893 = load i64, i64* %PC
  %14894 = add i64 %14893, 298
  %14895 = load i64, i64* %PC
  %14896 = add i64 %14895, 6
  %14897 = load i64, i64* %PC
  %14898 = add i64 %14897, 6
  store i64 %14898, i64* %PC
  %14899 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %14900 = load i8, i8* %14899, align 1, !tbaa !2447
  %14901 = icmp eq i8 %14900, 0
  %14902 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %14903 = load i8, i8* %14902, align 1, !tbaa !2448
  %14904 = icmp ne i8 %14903, 0
  %14905 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %14906 = load i8, i8* %14905, align 1, !tbaa !2449
  %14907 = icmp ne i8 %14906, 0
  %14908 = xor i1 %14904, %14907
  %14909 = xor i1 %14908, true
  %14910 = and i1 %14901, %14909
  %14911 = zext i1 %14910 to i8
  store i8 %14911, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %14912 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %14913 = select i1 %14910, i64 %14894, i64 %14896
  store i64 %14913, i64* %14912, align 8, !tbaa !2428
  %14914 = load i8, i8* %BRANCH_TAKEN
  %14915 = icmp eq i8 %14914, 1
  br i1 %14915, label %block_4020bb, label %block_401f97
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400550_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400550;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400550_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400550_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400520___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400520;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400520___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400520___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4026e0___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4026e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4026e0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4026e0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402670___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402670;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_402670___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402670___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400560;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400560_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603320___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603318_gettimeofday(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603310_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dtime() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4025e0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @dtime_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4025e0_dtime(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4026e4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4026e4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400428;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400428__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_4026e0___libc_csu_fini()
  ret void
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_402670___libc_csu_init()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }
attributes #17 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2071}
!2448 = !{!2433, !2430, i64 2073}
!2449 = !{!2433, !2430, i64 2077}
!2450 = !{!2433, !2430, i64 2069}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"double", !2430, i64 0}
!2454 = !{!2445, !2445, i64 0}
!2455 = !{!2456, !2456, i64 0}
!2456 = !{!"float", !2430, i64 0}
