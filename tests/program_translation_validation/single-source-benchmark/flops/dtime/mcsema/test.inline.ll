; ModuleID = '../binary/test.mcsema.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu-elf"

%union.anon = type { i64 }
%seg_400418__init_type = type <{ [23 x i8] }>
%seg_400430__plt_type = type <{ [48 x i8] }>
%seg_400460__text_type = type <{ [8818 x i8] }>
%seg_4026d4__fini_type = type <{ [9 x i8] }>
%seg_4026e0__rodata_type = type <{ [248 x i8], [58 x i8], [48 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [36 x i8], [28 x i8], [30 x i8], [30 x i8], [30 x i8], [30 x i8], [31 x i8] }>
%seg_402a3c__eh_frame_hdr_type = type <{ [68 x i8] }>
%seg_402a80__eh_frame_type = type <{ [280 x i8] }>
%seg_602df0__init_array_type = type <{ i64, i64 }>
%seg_602ff0__got_type = type <{ i64, i64 }>
%seg_603000__got_plt_type = type <{ [24 x i8], i64, i64 }>
%seg_603028__data_type = type <{ [16 x i8] }>
%A0_type = type <{ [8 x i8] }>
%A1_0_type = type <{ [8 x i8] }>
%A2_0_type = type <{ [8 x i8] }>
%A3_type = type <{ [8 x i8] }>
%A4_type = type <{ [8 x i8] }>
%A5_type = type <{ [8 x i8] }>
%A6_type = type <{ [8 x i8] }>
%B0_type = type <{ [8 x i8] }>
%B1_0_type = type <{ [8 x i8] }>
%B2_type = type <{ [8 x i8] }>
%B3_type = type <{ [8 x i8] }>
%B4_type = type <{ [8 x i8] }>
%B5_type = type <{ [8 x i8] }>
%B6_type = type <{ [8 x i8] }>
%C0_type = type <{ [8 x i8] }>
%C1_0_type = type <{ [8 x i8] }>
%C2_type = type <{ [8 x i8] }>
%C3_type = type <{ [8 x i8] }>
%C4_type = type <{ [8 x i8] }>
%C5_type = type <{ [8 x i8] }>
%C6_type = type <{ [8 x i8] }>
%C7_type = type <{ [8 x i8] }>
%C8_type = type <{ [8 x i8] }>
%D1_0_type = type <{ [8 x i8] }>
%D2_0_type = type <{ [8 x i8] }>
%D3_type = type <{ [8 x i8] }>
%E2_0_type = type <{ [8 x i8] }>
%E3_type = type <{ [8 x i8] }>
%seg_603120__bss_type = type <{ [16 x i8] }>
%two_type = type <{ [8 x i8] }>
%five_type = type <{ [8 x i8] }>
%T_type = type <{ [288 x i8] }>
%sd_type = type <{ [8 x i8] }>
%sb_type = type <{ [8 x i8] }>
%piref_type = type <{ [8 x i8] }>
%pierr_type = type <{ [8 x i8] }>
%tnow_type = type <{ [16 x i8] }>
%nulltime_type = type <{ [8 x i8] }>
%four_type = type <{ [8 x i8] }>
%scale_type = type <{ [8 x i8] }>
%one_type = type <{ [8 x i8] }>
%sc_type = type <{ [8 x i8] }>
%sa_type = type <{ [8 x i8] }>
%three_type = type <{ [16 x i8] }>
%TimeArray_type = type <{ [24 x i8] }>
%piprg_type = type <{ [8 x i8] }>
%TLimit_type = type <{ [8 x i8] }>
%struct.State = type { %struct.ArchState, [32 x %union.VectorReg], %struct.ArithFlags, %union.anon, %struct.Segments, %struct.AddressSpace, %struct.GPR, %struct.X87Stack, %struct.MMX, %struct.FPUStatusFlags, %union.anon, %union.FPU, %struct.SegmentCaches }
%struct.ArchState = type { i32, i32, %union.anon }
%union.VectorReg = type { %union.vec512_t }
%union.vec512_t = type { %struct.uint64v8_t }
%struct.uint64v8_t = type { [8 x i64] }
%struct.ArithFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.Segments = type { i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector, i16, %union.SegmentSelector }
%union.SegmentSelector = type { i16 }
%struct.AddressSpace = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.Reg = type { %union.anon }
%struct.GPR = type { i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg, i64, %struct.Reg }
%struct.X87Stack = type { [8 x %struct.anon.3] }
%struct.anon.3 = type { i64, double }
%struct.MMX = type { [8 x %struct.anon.4] }
%struct.anon.4 = type { i64, %union.vec64_t }
%union.vec64_t = type { %struct.uint64v1_t }
%struct.uint64v1_t = type { [1 x i64] }
%struct.FPUStatusFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [4 x i8] }
%union.FPU = type { %struct.anon.13 }
%struct.anon.13 = type { %struct.FpuFXSAVE, [96 x i8] }
%struct.FpuFXSAVE = type { %union.SegmentSelector, %union.SegmentSelector, %union.FPUAbridgedTagWord, i8, i16, i32, %union.SegmentSelector, i16, i32, %union.SegmentSelector, i16, %union.FPUControlStatus, %union.FPUControlStatus, [8 x %struct.FPUStackElem], [16 x %union.vec128_t] }
%union.FPUAbridgedTagWord = type { i8 }
%union.FPUControlStatus = type { i32 }
%struct.FPUStackElem = type { %union.anon.11, [6 x i8] }
%union.anon.11 = type { %struct.float80_t }
%struct.float80_t = type { [10 x i8] }
%union.vec128_t = type { %struct.uint128v1_t }
%struct.uint128v1_t = type { [1 x i128] }
%struct.SegmentCaches = type { %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow, %struct.SegmentShadow }
%struct.SegmentShadow = type { %union.anon, i32, i32 }
%struct.Memory = type opaque
%struct.anon.2 = type { i8, i8 }
%"class.std::bitset" = type { %struct.uint64v4_t }
%struct.uint64v4_t = type { [4 x i64] }

@switch.table = private unnamed_addr constant [4 x i32] [i32 2048, i32 3072, i32 0, i32 1024]
@DR0 = external global i64, align 8
@DR1 = external global i64, align 8
@DR2 = external global i64, align 8
@DR3 = external global i64, align 8
@DR4 = external global i64, align 8
@DR5 = external global i64, align 8
@DR6 = external global i64, align 8
@DR7 = external global i64, align 8
@gCR0 = external global %union.anon, align 1
@gCR1 = external global %union.anon, align 1
@gCR2 = external global %union.anon, align 1
@gCR3 = external global %union.anon, align 1
@gCR4 = external global %union.anon, align 1
@gCR8 = external global %union.anon, align 1
@seg_400418__init = internal constant %seg_400418__init_type <{ [23 x i8] c"H\83\EC\08H\8B\05\D5+ \00H\85\C0t\02\FF\D0H\83\C4\08\C3" }>
@seg_400430__plt = internal constant %seg_400430__plt_type <{ [48 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF%\D2+ \00\00\00\00\00\00\00\00\00\00\00\FF%\CA+ \00\00\00\00\00\00\00\00\00\00\00" }>
@seg_400460__text = internal constant %seg_400460__text_type <{ [8818 x i8] c"1\EDI\89\D1^H\89\E2H\83\E4\F0PTI\C7\C0\D0&@\00H\C7\C1`&@\00H\C7\C7P\05@\00\FF\15f+ \00\F4\0F\1FD\00\00\F3\C3f.\0F\1F\84\00\00\00\00\00\0F\1F@\00U\B8\181`\00H=\181`\00H\89\E5t\17\B8\00\00\00\00H\85\C0t\0D]\BF\181`\00\FF\E0\0F\1FD\00\00]\C3f\0F\1FD\00\00\BE\181`\00UH\81\EE\181`\00H\89\E5H\C1\FE\03H\89\F0H\C1\E8?H\01\C6H\D1\FEt\15\B8\00\00\00\00H\85\C0t\0B]\BF\181`\00\FF\E0\0F\1F\00]\C3f\0F\1FD\00\00\80=\09, \00\00u\17UH\89\E5\E8~\FF\FF\FF\C6\05\F7+ \00\01]\C3\0F\1FD\00\00\F3\C3\0F\1F@\00f.\0F\1F\84\00\00\00\00\00UH\89\E5]\EB\89f\0F\1F\84\00\00\00\00\00UH\89\E5H\81\EC`\01\00\00H\BF\10(@\00\00\00\00\00\C7E\FC\00\00\00\00\B0\00\E8\CD\FE\FF\FFH\BF\D8'@\00\00\00\00\00\89E\A4\B0\00\E8\B9\FE\FF\FFH\BF\12(@\00\00\00\00\00\F2\0F\10\05O!\00\00\F2\0F\10\0DO!\00\00\F2\0F\10\15O!\00\00\F2\0F\10\1DO!\00\00\F2\0F\10%O!\00\00\F2\0F\10-O!\00\00\F2\0F\105O!\00\00H\C7E\C8\09=\00\00\F2H\0F*}\C8\F2\0F^\F7\F2\0F\114%H1`\00\F2\0F\11$%\F02`\00H\C7E\C0\00\80\84\1E\F2\0F\11,%p2`\00\F2\0F\11$%\A82`\00\F2\0F\11\1C%01`\00\F2\0F\11\14%\C02`\00\F2\0F\11\0C%\982`\00\F2\0F\11\04%81`\00\F2\0F\10\04%\A82`\00\F2\0F\11\04%\A02`\00\89E\A0\B0\00\E8\F9\FD\FF\FFH\BFB(@\00\00\00\00\00\89E\9C\B0\00\E8\E5\FD\FF\FFH\BF\D02`\00\00\00\00\00\89E\98\E8c\1F\00\00H\BF\D02`\00\00\00\00\00\89E\94\E8Q\1F\00\00\0FW\C0H\8B}\C8H\89}\A8\F2\0F\11\04%\B82`\00\89E\90\F2\0F\10\04%\B82`\00\F2\0F\10\0C%\F02`\00f\0F.\C8\0F\86_\01\00\00H\BF\D02`\00\00\00\00\00\0FW\C0H\8BE\A8H\C1\E0\01H\89E\A8\F2\0F\10\0C%\A82`\00\F2H\0F*U\A8\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\F2\0F\10\04%\A82`\00\F2\0F\11E\D8\E8\D0\1E\00\00H\C7E\B8\01\00\00\00\89E\8CH\8BE\B8H\8BM\A8H\83\E9\01H9\C8\0F\8F\B5\00\00\00\F2\0F\10E\E0\F2\0FXE\D8\F2\0F\11E\E0\F2\0F\10E\E0\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\F0\F2\0F\10\0C%\F00`\00\F2\0F\10U\E8\F2\0F\10\1C%\F80`\00\F2\0F\10e\E8\F2\0FY$%\001`\00\F2\0FX\DC\F2\0FY\D3\F2\0FX\CA\F2\0F\10U\D8\F2\0F\10]\E8\F2\0F\10$%\F00`\00\F2\0F\10m\E8\F2\0F\104%\081`\00\F2\0F\10}\E8\F2\0FY<%\101`\00\F2\0FX\F7\F2\0FY\EE\F2\0FX\E5\F2\0FY\DC\F2\0FX\D3\F2\0F^\CA\F2\0FX\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E96\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8\EC\1D\00\00\F2\0F\10\04%\D82`\00\F2\0F\11\04%\B82`\00H\8B}\A8H;}\C0\89E\88\0F\85\05\00\00\00\E9\05\00\00\00\E9\85\FE\FF\FFH\BF\D02`\00\00\00\00\00\F2\0F\10\05\FD\1E\00\00\F2\0F\11\04%\A02`\00\F2\0F\10\04%\A02`\00\F2\0F\11\04%H1`\00\E8\8D\1D\00\00H\C7E\B8\01\00\00\00\89E\84H\8BE\B8H\8BM\A8H\83\E9\01H9\C8\0F\8F\16\00\00\00\E9\00\00\00\00H\8BE\B8H\83\C0\01H\89E\B8\E9\D5\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8H\1D\00\00\0FW\C0\F2\0F\10\0C%H1`\00\F2\0FY\0C%\D82`\00\F2\0F\11\0C%\902`\00f\0F.\04%\902`\00\89E\80\0F\86\0C\00\00\00\0FW\C0\F2\0F\11\04%\902`\00H\BFf(@\00\00\00\00\00\F2\0F\10\05R\1E\00\00\F2\0F\10\0DR\1E\00\00\F2\0F\10\15R\1E\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\B82`\00\F2\0F\5C\1C%\902`\00\F2\0F\11\1C%P1`\00\F2\0F\10\1C%\F00`\00\F2\0FX\1C%\F80`\00\F2\0FX\1C%\001`\00\F2\0F\10$%\A82`\00\F2\0FX$%\F00`\00\F2\0FX$%\081`\00\F2\0FX$%\101`\00\F2\0F^\DC\F2\0F\11\1C%\B82`\00\F2\0F\10\1C%\F00`\00\F2\0F\11\1C%h2`\00\F2\0F\10\1C%P1`\00\F2\0F^\DA\F2\0F\11\1C%X1`\00\F2\0F\10U\D0\F2\0F\10\1C%\B82`\00\F2\0FX\1C%h2`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F^\14%01`\00\F2\0F\11\14%\B82`\00\F2\0F\10\14%\A82`\00\F2\0F^\14%\B82`\00\F2\0F\11\14%h2`\00\F2H\0F,\04%h2`\00Hi\C0@\9C\00\00\F2H\0F*\D0\F2\0F^\14%\A02`\00\F2H\0F,\C2H\89E\A8\F2\0F\10\14%h2`\00\F2\0F\5C\D1\F2\0F\11\14%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%X1`\00\F2\0F\11\0C%`1`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%P1`\00\F2\0FY\04%`1`\00\F2\0F\11\85x\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95x\FF\FF\FF\B0\03\E8\D1\F9\FF\FFH\BF\D02`\00\00\00\00\00H\B9\00\00\00\00\00\00\00\80H\8BU\A8H\89U\B0\F2\0F\10\04%81`\00fH\0F~\C2H1\CAfH\0Fn\C2\F2\0F\11E\F0\F2\0F\10\04%\A82`\00fH\0F~\C2H1\CAfH\0Fn\C2\F2\0F\11\04%\B82`\00\89\85t\FF\FF\FF\E8\00\1B\00\00H\C7E\B8\01\00\00\00\89\85p\FF\FF\FFH\8BE\B8H;E\B0\0F\8FI\00\00\00H\B8\00\00\00\00\00\00\00\80\F2\0F\10E\F0fH\0F~\C1H1\C1fH\0Fn\C1\F2\0F\11E\F0\F2\0F\10\04%\B82`\00\F2\0FXE\F0\F2\0F\11\04%\B82`\00H\8BE\B8H\83\C0\01H\89E\B8\E9\A9\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8\8C\1A\00\00\0FW\C0\F2\0F\10\0C%H1`\00\F2\0FY\0C%\D82`\00\F2\0F\11\0C%h1`\00f\0F.\04%h1`\00\89\85l\FF\FF\FF\0F\86\0C\00\00\00\0FW\C0\F2\0F\11\04%h1`\00H\BF\D02`\00\00\00\00\00\0FW\C0\F2H\0F*M\B0\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\B82`\00\F2\0F\11M\E8\F2\0F\11E\E0\F2\0F\11E\D8\F2\0F\11E\D0\E8\0F\1A\00\00H\C7E\B8\01\00\00\00\89\85h\FF\FF\FFH\8BE\B8H;E\B0\0F\8F\A4\00\00\00H\B8\00\00\00\00\00\00\00\80\F2\0F\10E\F0fH\0F~\C1H1\C1fH\0Fn\C1\F2\0F\11E\F0\F2\0F\10\04%\B82`\00\F2\0FXE\F0\F2\0F\11\04%\B82`\00\F2\0F\10E\E8\F2\0FX\04%01`\00\F2\0F\11E\E8\F2\0F\10E\D0\F2\0F\10M\F0\F2\0F\5CM\E8\F2\0FX\C1\F2\0F\11E\D0\F2\0F\10E\E0\F2\0F\10M\F0\F2\0FYM\E8\F2\0F\5C\C1\F2\0F\11E\E0\F2\0F\10E\D8\F2\0F\10M\F0\F2\0F^M\E8\F2\0FX\C1\F2\0F\11E\D8H\8BE\B8H\83\C0\01H\89E\B8\E9N\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8@\19\00\00H\BF\8A(@\00\00\00\00\00\F2\0F\10\05\86\1A\00\00\F2\0F\10\0D\96\1A\00\00\F2\0F\10\15\96\1A\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\D82`\00\F2\0F\11\1C%p1`\00\F2\0F\10\1C%p1`\00\F2\0F\5C\1C%h1`\00\F2\0F^\DA\F2\0F\11\1C%x1`\00\F2\0F\10\14%\B82`\00\F2\0FYU\D0\F2\0F^\14%\B02`\00\F2H\0F,\CAH\89M\B0\F2\0F\10\14%\982`\00\F2\0FYU\D8\F2\0F^\14%81`\00\F2\0F\11\14%\B82`\00\F2\0F\10\14%\B82`\00\F2\0F\10\1C%81`\00\F2\0F^]\E0\F2\0FX\D3\F2\0F\11\14%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%h2`\00\F2\0F\10\14%\B02`\00\F2\0F\10]\E0\F2\0FY]\E0\F2\0FY]\E0\F2\0F^\D3\F2\0F\5C\CA\F2\0F\11\0C%\E82`\00\F2\0F\10\0C%\E82`\00\F2\0F\5C\0C%p2`\00\F2\0F\11\0C%x2`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%x1`\00\F2\0F\11\0C%\801`\00\0F(\C8\F2\0FY\0C%x2`\00\F2\0F\10\14%p1`\00\F2\0F\5C\14%h1`\00\F2\0FY\D0\F2\0FY\04%\801`\00\F2\0F\11\85`\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95`\FF\FF\FF\89\85\5C\FF\FF\FF\B0\03\E81\F6\FF\FFH\BF\D02`\00\00\00\00\00\0FW\C0\F2\0F\10\0C%p2`\00\F2\0F\10\14%\C02`\00\F2H\0F*]\B0\F2\0FY\D3\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\89\85X\FF\FF\FF\E8z\17\00\00H\C7E\B8\01\00\00\00\89\85T\FF\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F\B6\00\00\00\F2\0F\10E\E0\F2\0FX\04%\A82`\00\F2\0F\11E\E0\F2\0F\10E\E0\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\E8\F2\0FYE\E8\F2\0F\11E\D8\F2\0F\10E\F0\F2\0F\10M\E8\F2\0F\10\14%h0`\00\F2\0FYU\D8\F2\0F\5C\14%`0`\00\F2\0FYU\D8\F2\0FX\14%X0`\00\F2\0FYU\D8\F2\0F\5C\14%P0`\00\F2\0FYU\D8\F2\0FX\14%H0`\00\F2\0FYU\D8\F2\0FX\14%@0`\00\F2\0FYU\D8\F2\0FX\14%\A82`\00\F2\0FY\CA\F2\0FX\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E95\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8\92\16\00\00H\BF\AE(@\00\00\00\00\00\F2\0F\10\05\D8\17\00\00\F2\0F\10\0D\F8\17\00\00\F2\0F\10\15\F8\17\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\D82`\00\F2\0F\5C\1C%\902`\00\F2\0F\11\1C%\881`\00\F2\0F\10\1C%p2`\00\F2\0F^\1C%\C02`\00\F2\0F\11]\E8\F2\0F\10]\E8\F2\0FY]\E8\F2\0F\11]\D8\F2\0F\10]\E8\F2\0F\10$%h0`\00\F2\0FYe\D8\F2\0F\5C$%`0`\00\F2\0FYe\D8\F2\0FX$%X0`\00\F2\0FYe\D8\F2\0F\5C$%P0`\00\F2\0FYe\D8\F2\0FX$%H0`\00\F2\0FYe\D8\F2\0FX$%@0`\00\F2\0FYe\D8\F2\0FX$%\A82`\00\F2\0FY\DC\F2\0F\11\1C%\B82`\00\F2\0F\10\1C%\881`\00\F2\0F^\DA\F2\0F\11\1C%\901`\00\F2\0F\10U\D0\F2\0F\10\1C%\B82`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F^\14%01`\00\F2\0F\11\14%\B82`\00\F2\0F\11\0C%h2`\00\F2\0F\10\0C%\B82`\00\F2\0F\5C\0C%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\901`\00\F2\0F\11\0C%\981`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\881`\00\F2\0FY\04%\981`\00\F2\0F\11\85H\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95H\FF\FF\FF\89\85D\FF\FF\FF\B0\03\E8X\F3\FF\FFH\BF\D02`\00\00\00\00\00\0FW\C0H\B9\00\00\00\00\00\00\00\80\F2\0F\10\0C%P0`\00fH\0F~\CAH1\CAfH\0Fn\CA\F2\0F\11\0C%P0`\00\F2\0F\10\0C%`0`\00fH\0F~\CAH1\CAfH\0Fn\CA\F2\0F\11\0C%`0`\00\F2\0F\10\0C%p2`\00\F2\0F\10\14%\C02`\00\F2H\0F*]\B0\F2\0FY\D3\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\89\85@\FF\FF\FF\E8Y\14\00\00H\C7E\B8\01\00\00\00\89\85<\FF\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F\AF\00\00\00\F2H\0F*E\B8\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\E8\F2\0FYE\E8\F2\0F\11E\D8\F2\0F\10E\F0\F2\0F\10M\D8\F2\0F\10U\D8\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\104%\A00`\00\F2\0FYu\D8\F2\0FX4%\980`\00\F2\0FY\EE\F2\0FX,%\900`\00\F2\0FY\E5\F2\0FX$%\880`\00\F2\0FY\DC\F2\0FX\1C%\800`\00\F2\0FY\D3\F2\0FX\14%x0`\00\F2\0FY\CA\F2\0FX\C1\F2\0FX\04%\A82`\00\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E9<\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8x\13\00\00H\BF\D2(@\00\00\00\00\00\F2\0F\10\05\BE\14\00\00\F2\0F\10\0D\EE\14\00\00\F2\0F\10\14%H1`\00\F2\0FY\14%\D82`\00\F2\0F\5C\14%\902`\00\F2\0F\11\14%\A01`\00\F2\0F\10\14%p2`\00\F2\0F^\14%\C02`\00\F2\0F\11U\E8\F2\0F\10U\E8\F2\0FYU\E8\F2\0F\11U\D8\F2\0F\10U\D8\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10<%\A00`\00\F2\0FY}\D8\F2\0FX<%\980`\00\F2\0FY\F7\F2\0FX4%\900`\00\F2\0FY\EE\F2\0FX,%\880`\00\F2\0FY\E5\F2\0FX$%\800`\00\F2\0FY\DC\F2\0FX\1C%x0`\00\F2\0FY\D3\F2\0FX\14%\A82`\00\F2\0F\11\14%\B82`\00\F2\0F\10\14%\A01`\00\F2\0F^\D1\F2\0F\11\14%\A81`\00\F2\0F\10M\D0\F2\0F\10\14%\B82`\00\F2\0FX\14%\A82`\00\F2\0F\10\1C%01`\00\F2\0FY]\F0\F2\0FX\D3\F2\0FY\CA\F2\0F^\0C%01`\00\F2\0F\11\0C%\B82`\00\F2\0F\10\0C%p2`\00\F2\0F^\0C%\C02`\00\F2\0F\11M\E8\F2\0F\10M\E8\F2\0FYM\E8\F2\0F\11M\D8\F2\0F\10M\E8\F2\0F\10\14%h0`\00\F2\0FYU\D8\F2\0FX\14%`0`\00\F2\0FYU\D8\F2\0FX\14%X0`\00\F2\0FYU\D8\F2\0FX\14%P0`\00\F2\0FYU\D8\F2\0FX\14%H0`\00\F2\0FYU\D8\F2\0FX\14%@0`\00\F2\0FYU\D8\F2\0FX\14%80`\00\F2\0FY\CA\F2\0F\11\0C%h2`\00\F2\0F\10\0C%\B82`\00\F2\0F\5C\0C%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\A81`\00\F2\0F\11\0C%\B01`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\A01`\00\F2\0FY\04%\B01`\00\F2\0F\11\850\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\950\FF\FF\FF\89\85,\FF\FF\FF\B0\03\E8\A6\EF\FF\FFH\BF\D02`\00\00\00\00\00\0FW\C0\F2\0F\10\0C%p2`\00\F2\0F\10\14%\C02`\00\F2H\0F*]\B0\F2\0FY\D3\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\89\85(\FF\FF\FF\E8\EF\10\00\00H\C7E\B8\01\00\00\00\89\85$\FF\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F#\01\00\00\F2H\0F*E\B8\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\E8\F2\0FYE\E8\F2\0F\11E\D8\F2\0F\10E\E8\F2\0F\10\0C%h0`\00\F2\0FYM\D8\F2\0FX\0C%`0`\00\F2\0FYM\D8\F2\0FX\0C%X0`\00\F2\0FYM\D8\F2\0FX\0C%P0`\00\F2\0FYM\D8\F2\0FX\0C%H0`\00\F2\0FYM\D8\F2\0FX\0C%@0`\00\F2\0FYM\D8\F2\0FX\0C%\A82`\00\F2\0FY\C1\F2\0F\11E\E0\F2\0F\10E\F0\F2\0F\10M\E0\F2\0F\10U\D8\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10<%\A00`\00\F2\0FY}\D8\F2\0FX<%\980`\00\F2\0FY\F7\F2\0FX4%\900`\00\F2\0FY\EE\F2\0FX,%\880`\00\F2\0FY\E5\F2\0FX$%\800`\00\F2\0FY\DC\F2\0FX\1C%x0`\00\F2\0FY\D3\F2\0FX\14%\A82`\00\F2\0F^\CA\F2\0FX\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E9\C8\FE\FF\FFH\BF\D02`\00\00\00\00\00\E8\9A\0F\00\00H\BF\F6(@\00\00\00\00\00\F2\0F\10\05\E0\10\00\00\F2\0F\10\0D\18\11\00\00\F2\0F\10\15\18\11\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\D82`\00\F2\0F\5C\1C%\902`\00\F2\0F\11\1C%\B81`\00\F2\0F\10\1C%p2`\00\F2\0F^\1C%\C02`\00\F2\0F\11]\E8\F2\0F\10]\E8\F2\0FY]\E8\F2\0F\11]\D8\F2\0F\10]\E8\F2\0F\10$%h0`\00\F2\0FYe\D8\F2\0FX$%`0`\00\F2\0FYe\D8\F2\0FX$%X0`\00\F2\0FYe\D8\F2\0FX$%P0`\00\F2\0FYe\D8\F2\0FX$%H0`\00\F2\0FYe\D8\F2\0FX$%@0`\00\F2\0FYe\D8\F2\0FX$%\A82`\00\F2\0FY\DC\F2\0F\11\1C%\B82`\00\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10}\D8\F2D\0F\10\04%\A00`\00\F2D\0FYE\D8\F2D\0FX\04%\980`\00\F2A\0FY\F8\F2\0FX<%\900`\00\F2\0FY\F7\F2\0FX4%\880`\00\F2\0FY\EE\F2\0FX,%\800`\00\F2\0FY\E5\F2\0FX$%x0`\00\F2\0FY\DC\F2\0FX\1C%\A82`\00\F2\0F\11\1C%h2`\00\F2\0F\10\1C%\B82`\00\F2\0F^\1C%h2`\00\F2\0F\11\1C%\B82`\00\F2\0F\10\1C%\B81`\00\F2\0F^\DA\F2\0F\11\1C%\C01`\00\F2\0F\10U\D0\F2\0F\10\1C%\B82`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F^\14%01`\00\F2\0F\11\14%\B82`\00\F2\0F\11\0C%h2`\00\F2\0F\10\0C%\B82`\00\F2\0F\5C\0C%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\C01`\00\F2\0F\11\0C%\C81`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\B81`\00\F2\0FY\04%\C81`\00\F2\0F\11\85\18\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95\18\FF\FF\FF\89\85\14\FF\FF\FF\B0\03\E8\C7\EB\FF\FFH\BF\D02`\00\00\00\00\00\0FW\C0\F2\0F\10\0C%p2`\00\F2\0F\10\14%\982`\00\F2H\0F*]\B0\F2\0FY\D3\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\89\85\10\FF\FF\FF\E8\10\0D\00\00H\C7E\B8\01\00\00\00\89\85\0C\FF\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F#\01\00\00\F2H\0F*E\B8\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\E8\F2\0FYE\E8\F2\0F\11E\D8\F2\0F\10E\E8\F2\0F\10\0C%h0`\00\F2\0FYM\D8\F2\0FX\0C%`0`\00\F2\0FYM\D8\F2\0FX\0C%X0`\00\F2\0FYM\D8\F2\0FX\0C%P0`\00\F2\0FYM\D8\F2\0FX\0C%H0`\00\F2\0FYM\D8\F2\0FX\0C%@0`\00\F2\0FYM\D8\F2\0FX\0C%\A82`\00\F2\0FY\C1\F2\0F\11E\E0\F2\0F\10E\F0\F2\0F\10M\E0\F2\0F\10U\D8\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10<%\A00`\00\F2\0FY}\D8\F2\0FX<%\980`\00\F2\0FY\F7\F2\0FX4%\900`\00\F2\0FY\EE\F2\0FX,%\880`\00\F2\0FY\E5\F2\0FX$%\800`\00\F2\0FY\DC\F2\0FX\1C%x0`\00\F2\0FY\D3\F2\0FX\14%\A82`\00\F2\0FY\CA\F2\0FX\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E9\C8\FE\FF\FFH\BF\D02`\00\00\00\00\00\E8\BB\0B\00\00H\BF\1A)@\00\00\00\00\00\F2\0F\10\05\01\0D\00\00\F2\0F\10\0DQ\0D\00\00\F2\0F\10\159\0D\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\D82`\00\F2\0F\5C\1C%\902`\00\F2\0F\11\1C%\D01`\00\F2\0F\10\1C%p2`\00\F2\0F^\1C%\982`\00\F2\0F\11]\E8\F2\0F\10]\E8\F2\0FY]\E8\F2\0F\11]\D8\F2\0F\10]\E8\F2\0F\10$%h0`\00\F2\0FYe\D8\F2\0FX$%`0`\00\F2\0FYe\D8\F2\0FX$%X0`\00\F2\0FYe\D8\F2\0FX$%P0`\00\F2\0FYe\D8\F2\0FX$%H0`\00\F2\0FYe\D8\F2\0FX$%@0`\00\F2\0FYe\D8\F2\0FX$%\A82`\00\F2\0FY\DC\F2\0F\11\1C%\B82`\00\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10}\D8\F2D\0F\10\04%\A00`\00\F2D\0FYE\D8\F2D\0FX\04%\980`\00\F2A\0FY\F8\F2\0FX<%\900`\00\F2\0FY\F7\F2\0FX4%\880`\00\F2\0FY\EE\F2\0FX,%\800`\00\F2\0FY\E5\F2\0FX$%x0`\00\F2\0FY\DC\F2\0FX\1C%\A82`\00\F2\0F\11\1C%h2`\00\F2\0F\10\1C%\B82`\00\F2\0FY\1C%h2`\00\F2\0F\11\1C%\B82`\00\F2\0F\10\1C%\D01`\00\F2\0F^\DA\F2\0F\11\1C%\D81`\00\F2\0F\10U\D0\F2\0F\10\1C%\B82`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F^\14%01`\00\F2\0F\11\14%\B82`\00\F2\0F\11\0C%h2`\00\F2\0F\10\0C%\B82`\00\F2\0F\5C\0C%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\D81`\00\F2\0F\11\0C%\E01`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\D01`\00\F2\0FY\04%\E01`\00\F2\0F\11\85\00\FF\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95\00\FF\FF\FF\89\85\FC\FE\FF\FF\B0\03\E8\E8\E7\FF\FFH\BF\D02`\00\00\00\00\00\F2\0F\10\05\0E\0B\00\00\0FW\C9\F2\0F\11M\F0\F2\0F\10\0C%\A82`\00\F2\0F\11M\D8\F2\0F\11\04%\B82`\00\F2\0F\10\04%\B82`\00\F2H\0F*M\B0\F2\0F^\C1\F2\0F\11E\E0\89\85\F8\FE\FF\FF\E8$\09\00\00H\C7E\B8\01\00\00\00\89\85\F4\FE\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F\84\00\00\00\F2H\0F*E\B8\F2\0FYE\E0\F2\0F\11E\D0\F2\0F\10E\D0\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\F0\F2\0F\10M\D8\F2\0F\10U\D0\F2\0FXU\D8\F2\0F^\CA\F2\0F\5C\C1\F2\0F\10M\D0\F2\0F\10U\E8\F2\0FXU\D8\F2\0F^\CA\F2\0F\5C\C1\F2\0F\10M\E8\F2\0F\10U\D0\F2\0FYU\E8\F2\0FXU\D8\F2\0F^\CA\F2\0F\5C\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E9g\FF\FF\FFH\BF\D02`\00\00\00\00\00\E8n\08\00\00H\BF>)@\00\00\00\00\00\F2\0F\10\05\B4\09\00\00\F2\0F\10\0D\0C\0A\00\00\F2\0F\10\15\0C\0A\00\00H\B9\00\00\00\00\00\00\00\80\F2\0F\10\1D\02\0A\00\00\F2\0F\10$%H1`\00\F2\0FY$%\D82`\00\F2\0F\5C$%\902`\00\F2\0F\11$%\E81`\00\F2\0F\10$%\E81`\00\F2\0F^\E3\F2\0F\11$%\F01`\00\F2\0F\10\1C%\B82`\00\F2\0F\11]\D0\F2\0F\10]\D0\F2\0FY]\D0\F2\0F\11]\E8\F2\0F\10]\D8fH\0F~\DAH1\CAfH\0Fn\DA\F2\0F\10e\D8\F2\0F\10m\D0\F2\0FXm\D8\F2\0F^\E5\F2\0F\5C\DC\F2\0F\10e\D0\F2\0F\10m\E8\F2\0FXm\D8\F2\0F^\E5\F2\0F\5C\DC\F2\0F\10e\E8\F2\0F\10m\D0\F2\0FYm\E8\F2\0FXm\D8\F2\0F^\E5\F2\0F\5C\DC\F2\0F\11\1C%\B82`\00\F2\0FYU\E0\F2\0F\10\1C%\B82`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F\11\14%\B82`\00\F2H\0F,\0C%\B82`\00Hi\C90\F8\FF\FFH\89M\B0\F2H\0F*U\B0\F2\0F^\14%\A02`\00\F2H\0F,\CAH\89M\B0\F2\0FX\0C%\B82`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\F01`\00\F2\0F\11\0C%\F81`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\E81`\00\F2\0FY\04%\F81`\00\F2\0F\11\85\E8\FE\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95\E8\FE\FF\FF\89\85\E4\FE\FF\FF\B0\03\E8#\E5\FF\FFH\BF\D02`\00\00\00\00\00\0FW\C0\F2\0F\10\0C%p2`\00\F2\0F\10\14%\C02`\00\F2H\0F*]\B0\F2\0FY\D3\F2\0F^\CA\F2\0F\11M\D0\F2\0F\11E\F0\F2\0F\11E\E0\89\85\E0\FE\FF\FF\E8l\06\00\00H\C7E\B8\01\00\00\00\89\85\DC\FE\FF\FFH\8BE\B8H\8BM\B0H\83\E9\01H9\C8\0F\8F$\01\00\00\F2H\0F*E\B8\F2\0FYE\D0\F2\0F\11E\E8\F2\0F\10E\E8\F2\0FYE\E8\F2\0F\11E\D8\F2\0F\10E\D8\F2\0F\10M\D8\F2\0F\10U\D8\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10,%\A00`\00\F2\0FYm\D8\F2\0FX,%\980`\00\F2\0FY\E5\F2\0FX$%\900`\00\F2\0FY\DC\F2\0FX\1C%\880`\00\F2\0FY\D3\F2\0FX\14%\800`\00\F2\0FY\CA\F2\0FX\0C%x0`\00\F2\0FY\C1\F2\0FX\04%\A82`\00\F2\0F\11E\E0\F2\0F\10E\F0\F2\0F\10M\E0\F2\0FYM\E0\F2\0FYM\E8\F2\0F\10\14%h0`\00\F2\0FYU\D8\F2\0FX\14%`0`\00\F2\0FYU\D8\F2\0FX\14%X0`\00\F2\0FYU\D8\F2\0FX\14%P0`\00\F2\0FYU\D8\F2\0FX\14%H0`\00\F2\0FYU\D8\F2\0FX\14%@0`\00\F2\0FYU\D8\F2\0FX\14%\A82`\00\F2\0FY\CA\F2\0FX\C1\F2\0F\11E\F0H\8BE\B8H\83\C0\01H\89E\B8\E9\C7\FE\FF\FFH\BF\D02`\00\00\00\00\00\E8\16\05\00\00H\BFb)@\00\00\00\00\00\F2\0F\10\05\5C\06\00\00\F2\0F\10\0D\EC\06\00\00\F2\0F\10\15\EC\06\00\00\F2\0F\10\1C%H1`\00\F2\0FY\1C%\D82`\00\F2\0F\5C\1C%\902`\00\F2\0F\11\1C%\002`\00\F2\0F\10\1C%p2`\00\F2\0F^\1C%\C02`\00\F2\0F\11]\E8\F2\0F\10]\E8\F2\0FY]\E8\F2\0F\11]\D8\F2\0F\10]\E8\F2\0F\10$%h0`\00\F2\0FYe\D8\F2\0FX$%`0`\00\F2\0FYe\D8\F2\0FX$%X0`\00\F2\0FYe\D8\F2\0FX$%P0`\00\F2\0FYe\D8\F2\0FX$%H0`\00\F2\0FYe\D8\F2\0FX$%@0`\00\F2\0FYe\D8\F2\0FX$%\A82`\00\F2\0FY\DC\F2\0F\11\1C%\B82`\00\F2\0F\10]\D8\F2\0F\10e\D8\F2\0F\10m\D8\F2\0F\10u\D8\F2\0F\10}\D8\F2D\0F\10\04%\A00`\00\F2D\0FYE\D8\F2D\0FX\04%\980`\00\F2A\0FY\F8\F2\0FX<%\900`\00\F2\0FY\F7\F2\0FX4%\880`\00\F2\0FY\EE\F2\0FX,%\800`\00\F2\0FY\E5\F2\0FX$%x0`\00\F2\0FY\DC\F2\0FX\1C%\A82`\00\F2\0F\11\1C%h2`\00\F2\0F\10\1C%\B82`\00\F2\0FY\1C%h2`\00\F2\0FY\1C%h2`\00\F2\0F\11\1C%\B82`\00\F2\0F\10\1C%\002`\00\F2\0F^\DA\F2\0F\11\1C%\082`\00\F2\0F\10U\D0\F2\0F\10\1C%\B82`\00\F2\0F\10$%01`\00\F2\0FYe\F0\F2\0FX\DC\F2\0FY\D3\F2\0F^\14%01`\00\F2\0F\11\14%\B82`\00\F2\0F\11\0C%h2`\00\F2\0F\10\0C%\B82`\00\F2\0F\5C\0C%h2`\00\F2\0F\11\0C%\B02`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%\082`\00\F2\0F\11\0C%\102`\00\0F(\C8\F2\0FY\0C%\B02`\00\0F(\D0\F2\0FY\14%\002`\00\F2\0FY\04%\102`\00\F2\0F\11\85\D0\FE\FF\FF\0F(\C1\0F(\CA\F2\0F\10\95\D0\FE\FF\FF\89\85\CC\FE\FF\FF\B0\03\E8:\E1\FF\FFH\BF\10(@\00\00\00\00\00\F2\0F\10\05\88\04\00\00\F2\0F\10\0D\88\04\00\00\F2\0F\10\15\88\04\00\00\F2\0F\10\1D\88\04\00\00\F2\0F\10$%81`\00\F2\0F\10,%p1`\00\F2\0F\5C,%h1`\00\F2\0FY\E5\F2\0FX$%\881`\00\F2\0F^\E3\F2\0F\11$%\182`\00\F2\0F\10\1C%\A82`\00\F2\0F^\1C%\182`\00\F2\0F\11\1C% 2`\00\F2\0F\10\1C%P1`\00\F2\0FX\1C%\881`\00\F2\0FX\1C%\A01`\00\F2\0FX\1C%\B81`\00\F2\0FX\1C%\D01`\00\F2\0F\11\1C%(2`\00\F2\0F\10\1C%(2`\00\F2\0F\10$%\982`\00\F2\0FY$%\E81`\00\F2\0FX\DC\F2\0F^\DA\F2\0F\11\1C%(2`\00\F2\0F\10\14%\A82`\00\F2\0F^\14%(2`\00\F2\0F\11\14%02`\00\F2\0F\10\14%P1`\00\F2\0FX\14%\881`\00\F2\0FX\14%\A01`\00\F2\0FX\14%\B81`\00\F2\0FX\14%\D01`\00\F2\0F\11\14%82`\00\F2\0F\10\14%82`\00\F2\0FX\14%\E81`\00\F2\0FX\14%\002`\00\F2\0F^\D1\F2\0F\11\14%82`\00\F2\0F\10\0C%\A82`\00\F2\0F^\0C%82`\00\F2\0F\11\0C%@2`\00\F2\0F\10\0C%\881`\00\F2\0FX\0C%\A01`\00\F2\0FX\0C%\D01`\00\F2\0FX\0C%\002`\00\F2\0F^\C8\F2\0F\11\0C%H2`\00\F2\0F\10\04%\A82`\00\F2\0F^\04%H2`\00\F2\0F\11\04%P2`\00\89\85\C8\FE\FF\FF\B0\00\E8q\DF\FF\FFH\BF\86)@\00\00\00\00\00H\8Bu\B0\89\85\C4\FE\FF\FF\B0\00\E8V\DF\FF\FFH\BF\A2)@\00\00\00\00\00\F2\0F\10\05,\02\00\00\F2\0FY\04%\902`\00\89\85\C0\FE\FF\FF\B0\01\E8.\DF\FF\FFH\BF\C0)@\00\00\00\00\00\F2\0F\10\05\04\02\00\00\F2\0FY\04% 2`\00\89\85\BC\FE\FF\FF\B0\01\E8\06\DF\FF\FFH\BF\DE)@\00\00\00\00\00\F2\0F\10\05\DC\01\00\00\F2\0FY\04%02`\00\89\85\B8\FE\FF\FF\B0\01\E8\DE\DE\FF\FFH\BF\FC)@\00\00\00\00\00\F2\0F\10\05\B4\01\00\00\F2\0FY\04%@2`\00\89\85\B4\FE\FF\FF\B0\01\E8\B6\DE\FF\FFH\BF\1A*@\00\00\00\00\00\F2\0F\10\05\8C\01\00\00\F2\0FY\04%P2`\00\89\85\B0\FE\FF\FF\B0\01\E8\8E\DE\FF\FF1\C9\89\85\AC\FE\FF\FF\89\C8H\81\C4`\01\00\00]\C3ff.\0F\1F\84\00\00\00\00\00UH\89\E5H\83\EC H\B8\802`\00\00\00\00\001\C9\89\CEH\89}\F8H\8B}\F8\F2\0F\10G\10\F2\0F\11E\F0H\89\C7\E8P\DE\FF\FF1\C9\F2\0F\10\05\C6\01\00\00\F2H\0F*\0C%\802`\00\F2H\0F*\14%\882`\00\F2\0FY\D0\F2\0FX\CAH\8Bu\F8\F2\0F\11N\10H\8Bu\F8\F2\0F\10F\10\F2\0F\5CE\F0H\8Bu\F8\F2\0F\11F\08\89E\EC\89\C8H\83\C4 ]\C3f.\0F\1F\84\00\00\00\00\00\0F\1FD\00\00AWAVI\89\D7AUATL\8D%~\07 \00UH\8D-~\07 \00SA\89\FDI\89\F6L)\E5H\83\EC\08H\C1\FD\03\E8\87\DD\FF\FFH\85\EDt 1\DB\0F\1F\84\00\00\00\00\00L\89\FAL\89\F6D\89\EFA\FF\14\DCH\83\C3\01H9\DDu\EAH\83\C4\08[]A\5CA]A^A_\C3\90f.\0F\1F\84\00\00\00\00\00\F3\C3" }>
@seg_4026d4__fini = internal constant %seg_4026d4__fini_type <{ [9 x i8] c"H\83\EC\08H\83\C4\08\C3" }>
@seg_4026e0__rodata = internal constant %seg_4026e0__rodata_type <{ [248 x i8] c"\01\00\02\00\00\00\00\00\00\00\00\00\00\00\14@\00\00\00\00\00\00\10@\00\00\00\00\00\00\08@\00\00\00\00\00\00\00@\00\00\00\00\00\00\F0?\18-DT\FB!\09@\00\00\00\00\80\84.A\82\FF\ADd\C7F\90?\A0\C2\EB\FEKH\B493333339@\00\00\00\00\00\00,@\00\00\00\00\00@?@\00\00\00\00\00\00\1C@\00\00\00\00\00\00\E0?\00\00\00\00\00\001@\00\00\00\00\00\00.@\EF9\FA\FEB.\E6?\00\00\00\00\00\00=@\A4\92\F1\F7A\95Y@\00\00\00\00\00\00\D0?33333C\7F@\00\00\00\00\00\002@\00\00\00\00\00\00(@\00\00\00\00\00\C0V@\00\00\00\00\00@b@\00\00\00\00\00\00c@\00\00\00\00\00\00J@\AB\AA\AA\AA\AA\AA\D2?\00\00\00\00\00\00>@\8D\ED\B5\A0\F7\C6\B0>", [58 x i8] c"   FLOPS C Program (Double Precision), V2.0 18 Dec 1992\0A\0A\00", [48 x i8] c"   Module     Error        RunTime      MFLOPS\0A\00", [36 x i8] c"                            (usec)\0A\00", [36 x i8] c"     1   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     2   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     3   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     4   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     5   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     6   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     7   %13.4lf  %10.4lf  %10.4lf\0A\00", [36 x i8] c"     8   %13.4lf  %10.4lf  %10.4lf\0A\00", [28 x i8] c"   Iterations      = %10ld\0A\00", [30 x i8] c"   NullTime (usec) = %10.4lf\0A\00", [30 x i8] c"   MFLOPS(1)       = %10.4lf\0A\00", [30 x i8] c"   MFLOPS(2)       = %10.4lf\0A\00", [30 x i8] c"   MFLOPS(3)       = %10.4lf\0A\00", [31 x i8] c"   MFLOPS(4)       = %10.4lf\0A\0A\00" }>
@seg_402a3c__eh_frame_hdr = internal constant %seg_402a3c__eh_frame_hdr_type <{ [68 x i8] c"\01\1B\03;@\00\00\00\07\00\00\00\F4\D9\FF\FF\9C\00\00\00$\DA\FF\FF\5C\00\00\00T\DA\FF\FF\88\00\00\00\14\DB\FF\FF\C4\00\00\00\94\FB\FF\FF\E0\00\00\00$\FC\FF\FF\FC\00\00\00\94\FC\FF\FFD\01\00\00" }>
@seg_402a80__eh_frame = internal constant %seg_402a80__eh_frame_type <{ [280 x i8] c"\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\07\10\10\00\00\00\1C\00\00\00\C0\D9\FF\FF+\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\01zR\00\01x\10\01\1B\0C\07\08\90\01\00\00\10\00\00\00\1C\00\00\00\C4\D9\FF\FF\02\00\00\00\00\00\00\00$\00\00\000\00\00\00P\D9\FF\FF0\00\00\00\00\0E\10F\0E\18J\0F\0Bw\08\80\00?\1A;*3$\22\00\00\00\00\18\00\00\00X\00\00\00H\DA\FF\FFu \00\00\00A\0E\10\86\02C\0D\06\00\00\00\18\00\00\00t\00\00\00\AC\FA\FF\FF\81\00\00\00\00A\0E\10\86\02C\0D\06\00\00\00D\00\00\00\90\00\00\00 \FB\FF\FFe\00\00\00\00B\0E\10\8F\02B\0E\18\8E\03E\0E \8D\04B\0E(\8C\05H\0E0\86\06H\0E8\83\07M\0E@r\0E8A\0E0A\0E(B\0E B\0E\18B\0E\10B\0E\08\00\10\00\00\00\D8\00\00\00H\FB\FF\FF\02\00\00\00\00\00\00\00\00\00\00\00" }>
@seg_602df0__init_array = internal global %seg_602df0__init_array_type <{ i64 ptrtoint (void ()* @callback_sub_400540_frame_dummy to i64), i64 ptrtoint (void ()* @callback_sub_400510___do_global_dtors_aux to i64) }>
@seg_602ff0__got = internal global %seg_602ff0__got_type <{ i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), i64 ptrtoint (i64 ()* @__gmon_start__ to i64) }>
@seg_603000__got_plt = internal global %seg_603000__got_plt_type <{ [24 x i8] zeroinitializer, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64) }>
@seg_603028__data = internal global %seg_603028__data_type zeroinitializer
@A0 = global %A0_type <{ [8 x i8] c"\00\00\00\00\00\00\F0?" }>
@A1_0 = global %A1_0_type <{ [8 x i8] c"\05\97UUUU\C5\BF" }>
@A2_0 = global %A2_0_type <{ [8 x i8] c"\A3\E9:\11\11\11\81?" }>
@A3 = global %A3_type <{ [8 x i8] c"q\CA\B1?\A0\01*?" }>
@A4 = global %A4_type <{ [8 x i8] c"f5\AA\84\F2\1D\C7>" }>
@A5 = global %A5_type <{ [8 x i8] c"&\A4\F8\8CZ\EBZ>" }>
@A6 = global %A6_type <{ [8 x i8] c"\A6\C1)R\F7\8D\E6=" }>
@B0 = global %B0_type <{ [8 x i8] c"\00\00\00\00\00\00\F0?" }>
@B1_0 = global %B1_0_type <{ [8 x i8] c"V\81\FF\FF\FF\FF\DF\BF" }>
@B2 = global %B2_type <{ [8 x i8] c"$\02)UUU\A5?" }>
@B3 = global %B3_type <{ [8 x i8] c"\16e\E7\FFk\C1V\BF" }>
@B4 = global %B4_type <{ [8 x i8] c"\B7-$(\95\01\FA>" }>
@B5 = global %B5_type <{ [8 x i8] c"\8E\DB}\D4\B3{\92\BE" }>
@B6 = global %B6_type <{ [8 x i8] c"*\18\DFu\B2W!>" }>
@C0 = global %C0_type <{ [8 x i8] c"\00\00\00\00\00\00\F0?" }>
@C1_0 = global %C1_0_type <{ [8 x i8] c"\E2\B37\FE\FF\FF\EF?" }>
@C2 = global %C2_type <{ [8 x i8] c"\B8\A4+\CC\FF\FF\DF?" }>
@C3 = global %C3_type <{ [8 x i8] c"\15iG|XU\C5?" }>
@C4 = global %C4_type <{ [8 x i8] c"HUy~[U\A5?" }>
@C5 = global %C5_type <{ [8 x i8] c"\0C\12\D9J\9A\0D\81?" }>
@C6 = global %C6_type <{ [8 x i8] c"\05\8C\DB~\18\13W?" }>
@C7 = global %C7_type <{ [8 x i8] c":?\17\C8w\C0&?" }>
@C8 = global %C8_type <{ [8 x i8] c"\CF\B1\04\FE\03\9D\04?" }>
@D1_0 = global %D1_0_type <{ [8 x i8] c"t\83\13C\E1z\A4?" }>
@D2_0 = global %D2_0_type <{ [8 x i8] c"i\1DUM\10uO?" }>
@D3 = global %D3_type <{ [8 x i8] c"(\A7\F4\0FZ\B0\B4>" }>
@E2_0 = global %E2_0_type <{ [8 x i8] c"i\1DUM\10u??" }>
@E3 = global %E3_type <{ [8 x i8] c"\8A\89\9Bj\CD\95\9B>" }>
@seg_603120__bss = internal global %seg_603120__bss_type zeroinitializer
@two = global %two_type zeroinitializer
@five = global %five_type zeroinitializer
@T = global %T_type zeroinitializer
@sd = global %sd_type zeroinitializer
@sb = global %sb_type zeroinitializer
@piref = global %piref_type zeroinitializer
@pierr = global %pierr_type zeroinitializer
@tnow = global %tnow_type zeroinitializer
@nulltime = global %nulltime_type zeroinitializer
@four = global %four_type zeroinitializer
@scale = global %scale_type zeroinitializer
@one = global %one_type zeroinitializer
@sc = global %sc_type zeroinitializer
@sa = global %sa_type zeroinitializer
@three = global %three_type zeroinitializer
@TimeArray = global %TimeArray_type zeroinitializer
@piprg = global %piprg_type zeroinitializer
@TLimit = global %TLimit_type zeroinitializer
@0 = internal global i1 false
@1 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400540_frame_dummy_wrapper
@2 = internal constant void ()* @__mcsema_attach_call
@3 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_400510___do_global_dtors_aux_wrapper
@4 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_4026d0___libc_csu_fini_wrapper
@5 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @callback_sub_402660___libc_csu_init_wrapper
@6 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @main_wrapper
@7 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.init_proc_wrapper
@8 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @.term_proc_wrapper
@9 = internal constant %struct.Memory* (%struct.State*, i64, %struct.Memory*)* @dtime_wrapper
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_constructor, i8* null }]
@llvm.global_dtors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 101, void ()* @__mcsema_destructor, i8* null }]

declare %struct.Memory* @__remill_sync_hyper_call(%struct.State* dereferenceable(3376), %struct.Memory*, i32) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_read_memory_8(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_8(%struct.Memory*, i64, i8 zeroext) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.ctpop.i32(i32) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_read_memory_16(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_16(%struct.Memory*, i64, i16 zeroext) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_read_memory_32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_32(%struct.Memory*, i64, i32) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_read_memory_64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_64(%struct.Memory*, i64, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_read_memory_f32(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f64(%struct.Memory*, i64) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i8 @__remill_undefined_8() #2

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_error(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #4

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.bswap.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.cttz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.cttz.i64(i64, i1) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.ctlz.i64(i64, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare double @llvm.nearbyint.f64(double) #3

; Function Attrs: nounwind readnone
declare double @llvm.fabs.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.nearbyint.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.fabs.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare double @llvm.trunc.f64(double) #3

; Function Attrs: nounwind readnone
declare <4 x double> @llvm.trunc.v4f64(<4 x double>) #3

; Function Attrs: nounwind readnone
declare float @llvm.nearbyint.f32(float) #3

; Function Attrs: nounwind readnone
declare float @llvm.fabs.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.nearbyint.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #3

; Function Attrs: nounwind readnone
declare float @llvm.trunc.f32(float) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.trunc.v4f32(<4 x float>) #3

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f32(%struct.Memory*, i64, float) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f64(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare zeroext i8 @__remill_read_io_port_8(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare zeroext i16 @__remill_read_io_port_16(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i32 @__remill_read_io_port_32(%struct.Memory*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_8(%struct.Memory*, i64, i8 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_16(%struct.Memory*, i64, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare %struct.Memory* @__remill_write_io_port_32(%struct.Memory*, i64, i32) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_load(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_store_store(%struct.Memory*) #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_load(%struct.Memory*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i64 @__remill_undefined_64() #2

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_undefined_f64() #2

declare %struct.Memory* @__remill_compare_exchange_memory_8(%struct.Memory*, i64, i8* dereferenceable(1), i8 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_16(%struct.Memory*, i64, i16* dereferenceable(2), i16 zeroext) #0

declare %struct.Memory* @__remill_compare_exchange_memory_32(%struct.Memory*, i64, i32* dereferenceable(4), i32) #0

declare %struct.Memory* @__remill_compare_exchange_memory_64(%struct.Memory*, i64, i64* dereferenceable(8), i64) #0

declare %struct.Memory* @__remill_compare_exchange_memory_128(%struct.Memory*, i64, i128* dereferenceable(16), i128* dereferenceable(16)) local_unnamed_addr #0

declare %struct.Memory* @__remill_fetch_and_add_8(%struct.Memory*, i64, i8* dereferenceable(1)) #0

declare %struct.Memory* @__remill_fetch_and_add_16(%struct.Memory*, i64, i16* dereferenceable(2)) #0

declare %struct.Memory* @__remill_fetch_and_add_32(%struct.Memory*, i64, i32* dereferenceable(4)) #0

declare %struct.Memory* @__remill_fetch_and_add_64(%struct.Memory*, i64, i64* dereferenceable(8)) #0

; Function Attrs: nounwind readnone
declare float @sqrtf(float) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @fesetround(i32) local_unnamed_addr #6

; Function Attrs: nounwind readonly
declare i32 @fegetround() local_unnamed_addr #7

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare double @__remill_read_memory_f80(%struct.Memory*, i64) #2

; Function Attrs: nounwind
declare i32 @fetestexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feraiseexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @feclearexcept(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32 @__remill_fpu_exception_test_and_clear(i32, i32) #5

; Function Attrs: nounwind readnone
declare double @cos(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @sin(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @tan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @atan(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @exp2(double) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare double @remainder(double, double) local_unnamed_addr #5

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_write_memory_f80(%struct.Memory*, i64, double) #2

; Function Attrs: nounwind readnone
declare double @log2(double) local_unnamed_addr #5

; Function Attrs: noinline nounwind optnone
define %struct.Memory* @__remill_basic_block(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #8 !dbg !1261 {
  %state = alloca %struct.State*, align 8
  %curr_pc = alloca i64, align 8
  %memory = alloca %struct.Memory*, align 8
  %BRANCH_TAKEN = alloca i8, align 1
  %SS_BASE = alloca i64, align 8
  %ES_BASE = alloca i64, align 8
  %DS_BASE = alloca i64, align 8
  %CS_BASE = alloca i64, align 8
  %STATE = alloca %struct.State*, align 8
  %MEMORY = alloca %struct.Memory*, align 8
  %_DR0 = alloca i64*, align 8
  %_DR1 = alloca i64*, align 8
  %_DR2 = alloca i64*, align 8
  %_DR3 = alloca i64*, align 8
  %_DR4 = alloca i64*, align 8
  %_DR5 = alloca i64*, align 8
  %_DR6 = alloca i64*, align 8
  %_DR7 = alloca i64*, align 8
  %CR0 = alloca i64*, align 8
  %CR1 = alloca i64*, align 8
  %CR2 = alloca i64*, align 8
  %CR3 = alloca i64*, align 8
  %CR4 = alloca i64*, align 8
  %CR8 = alloca i64*, align 8
  store %struct.State* %0, %struct.State** %state, align 8
  store i64 %1, i64* %curr_pc, align 8
  store %struct.Memory* %2, %struct.Memory** %memory, align 8
  store i8 0, i8* %BRANCH_TAKEN, align 1, !dbg !1952
  store i64 0, i64* %SS_BASE, align 8, !dbg !1953
  store i64 0, i64* %ES_BASE, align 8, !dbg !1954
  store i64 0, i64* %DS_BASE, align 8, !dbg !1955
  store i64 0, i64* %CS_BASE, align 8, !dbg !1956
  store %struct.State* %0, %struct.State** %STATE, align 8, !dbg !1957
  store %struct.Memory* %2, %struct.Memory** %MEMORY, align 8, !dbg !1958
  %4 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1959
  %5 = getelementptr inbounds %struct.GPR, %struct.GPR* %4, i32 0, i32 33, !dbg !1960
  %6 = getelementptr inbounds %struct.Reg, %struct.Reg* %5, i32 0, i32 0, !dbg !1961
  %PC = bitcast %union.anon* %6 to i64*, !dbg !1961
  store i64 %1, i64* %PC, align 8, !dbg !1962
  %7 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1963
  %8 = getelementptr inbounds %struct.GPR, %struct.GPR* %7, i32 0, i32 1, !dbg !1964
  %9 = getelementptr inbounds %struct.Reg, %struct.Reg* %8, i32 0, i32 0, !dbg !1965
  %10 = bitcast %union.anon* %9 to %struct.anon.2*, !dbg !1965
  %AH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %10, i32 0, i32 1, !dbg !1966
  %11 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1967
  %12 = getelementptr inbounds %struct.GPR, %struct.GPR* %11, i32 0, i32 3, !dbg !1968
  %13 = getelementptr inbounds %struct.Reg, %struct.Reg* %12, i32 0, i32 0, !dbg !1969
  %14 = bitcast %union.anon* %13 to %struct.anon.2*, !dbg !1969
  %BH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %14, i32 0, i32 1, !dbg !1970
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1971
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5, !dbg !1972
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0, !dbg !1973
  %18 = bitcast %union.anon* %17 to %struct.anon.2*, !dbg !1973
  %CH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %18, i32 0, i32 1, !dbg !1974
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1975
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 7, !dbg !1976
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0, !dbg !1977
  %22 = bitcast %union.anon* %21 to %struct.anon.2*, !dbg !1977
  %DH = getelementptr inbounds %struct.anon.2, %struct.anon.2* %22, i32 0, i32 1, !dbg !1978
  %23 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1979
  %24 = getelementptr inbounds %struct.GPR, %struct.GPR* %23, i32 0, i32 1, !dbg !1980
  %25 = getelementptr inbounds %struct.Reg, %struct.Reg* %24, i32 0, i32 0, !dbg !1981
  %26 = bitcast %union.anon* %25 to %struct.anon.2*, !dbg !1981
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %26, i32 0, i32 0, !dbg !1982
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1983
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 3, !dbg !1984
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0, !dbg !1985
  %30 = bitcast %union.anon* %29 to %struct.anon.2*, !dbg !1985
  %BL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %30, i32 0, i32 0, !dbg !1986
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1987
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 5, !dbg !1988
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0, !dbg !1989
  %34 = bitcast %union.anon* %33 to %struct.anon.2*, !dbg !1989
  %CL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %34, i32 0, i32 0, !dbg !1990
  %35 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1991
  %36 = getelementptr inbounds %struct.GPR, %struct.GPR* %35, i32 0, i32 7, !dbg !1992
  %37 = getelementptr inbounds %struct.Reg, %struct.Reg* %36, i32 0, i32 0, !dbg !1993
  %38 = bitcast %union.anon* %37 to %struct.anon.2*, !dbg !1993
  %DL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %38, i32 0, i32 0, !dbg !1994
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1995
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 9, !dbg !1996
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0, !dbg !1997
  %42 = bitcast %union.anon* %41 to %struct.anon.2*, !dbg !1997
  %SIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %42, i32 0, i32 0, !dbg !1998
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !1999
  %44 = getelementptr inbounds %struct.GPR, %struct.GPR* %43, i32 0, i32 11, !dbg !2000
  %45 = getelementptr inbounds %struct.Reg, %struct.Reg* %44, i32 0, i32 0, !dbg !2001
  %46 = bitcast %union.anon* %45 to %struct.anon.2*, !dbg !2001
  %DIL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %46, i32 0, i32 0, !dbg !2002
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2003
  %48 = getelementptr inbounds %struct.GPR, %struct.GPR* %47, i32 0, i32 13, !dbg !2004
  %49 = getelementptr inbounds %struct.Reg, %struct.Reg* %48, i32 0, i32 0, !dbg !2005
  %50 = bitcast %union.anon* %49 to %struct.anon.2*, !dbg !2005
  %SPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %50, i32 0, i32 0, !dbg !2006
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2007
  %52 = getelementptr inbounds %struct.GPR, %struct.GPR* %51, i32 0, i32 15, !dbg !2008
  %53 = getelementptr inbounds %struct.Reg, %struct.Reg* %52, i32 0, i32 0, !dbg !2009
  %54 = bitcast %union.anon* %53 to %struct.anon.2*, !dbg !2009
  %BPL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %54, i32 0, i32 0, !dbg !2010
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2011
  %56 = getelementptr inbounds %struct.GPR, %struct.GPR* %55, i32 0, i32 17, !dbg !2012
  %57 = getelementptr inbounds %struct.Reg, %struct.Reg* %56, i32 0, i32 0, !dbg !2013
  %58 = bitcast %union.anon* %57 to %struct.anon.2*, !dbg !2013
  %R8B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %58, i32 0, i32 0, !dbg !2014
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2015
  %60 = getelementptr inbounds %struct.GPR, %struct.GPR* %59, i32 0, i32 19, !dbg !2016
  %61 = getelementptr inbounds %struct.Reg, %struct.Reg* %60, i32 0, i32 0, !dbg !2017
  %62 = bitcast %union.anon* %61 to %struct.anon.2*, !dbg !2017
  %R9B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %62, i32 0, i32 0, !dbg !2018
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2019
  %64 = getelementptr inbounds %struct.GPR, %struct.GPR* %63, i32 0, i32 21, !dbg !2020
  %65 = getelementptr inbounds %struct.Reg, %struct.Reg* %64, i32 0, i32 0, !dbg !2021
  %66 = bitcast %union.anon* %65 to %struct.anon.2*, !dbg !2021
  %R10B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %66, i32 0, i32 0, !dbg !2022
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2023
  %68 = getelementptr inbounds %struct.GPR, %struct.GPR* %67, i32 0, i32 23, !dbg !2024
  %69 = getelementptr inbounds %struct.Reg, %struct.Reg* %68, i32 0, i32 0, !dbg !2025
  %70 = bitcast %union.anon* %69 to %struct.anon.2*, !dbg !2025
  %R11B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %70, i32 0, i32 0, !dbg !2026
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2027
  %72 = getelementptr inbounds %struct.GPR, %struct.GPR* %71, i32 0, i32 25, !dbg !2028
  %73 = getelementptr inbounds %struct.Reg, %struct.Reg* %72, i32 0, i32 0, !dbg !2029
  %74 = bitcast %union.anon* %73 to %struct.anon.2*, !dbg !2029
  %R12B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %74, i32 0, i32 0, !dbg !2030
  %75 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2031
  %76 = getelementptr inbounds %struct.GPR, %struct.GPR* %75, i32 0, i32 27, !dbg !2032
  %77 = getelementptr inbounds %struct.Reg, %struct.Reg* %76, i32 0, i32 0, !dbg !2033
  %78 = bitcast %union.anon* %77 to %struct.anon.2*, !dbg !2033
  %R13B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %78, i32 0, i32 0, !dbg !2034
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2035
  %80 = getelementptr inbounds %struct.GPR, %struct.GPR* %79, i32 0, i32 29, !dbg !2036
  %81 = getelementptr inbounds %struct.Reg, %struct.Reg* %80, i32 0, i32 0, !dbg !2037
  %82 = bitcast %union.anon* %81 to %struct.anon.2*, !dbg !2037
  %R14B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %82, i32 0, i32 0, !dbg !2038
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2039
  %84 = getelementptr inbounds %struct.GPR, %struct.GPR* %83, i32 0, i32 31, !dbg !2040
  %85 = getelementptr inbounds %struct.Reg, %struct.Reg* %84, i32 0, i32 0, !dbg !2041
  %86 = bitcast %union.anon* %85 to %struct.anon.2*, !dbg !2041
  %R15B = getelementptr inbounds %struct.anon.2, %struct.anon.2* %86, i32 0, i32 0, !dbg !2042
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2043
  %88 = getelementptr inbounds %struct.GPR, %struct.GPR* %87, i32 0, i32 1, !dbg !2044
  %89 = getelementptr inbounds %struct.Reg, %struct.Reg* %88, i32 0, i32 0, !dbg !2045
  %AX = bitcast %union.anon* %89 to i16*, !dbg !2045
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2046
  %91 = getelementptr inbounds %struct.GPR, %struct.GPR* %90, i32 0, i32 3, !dbg !2047
  %92 = getelementptr inbounds %struct.Reg, %struct.Reg* %91, i32 0, i32 0, !dbg !2048
  %BX = bitcast %union.anon* %92 to i16*, !dbg !2048
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2049
  %94 = getelementptr inbounds %struct.GPR, %struct.GPR* %93, i32 0, i32 5, !dbg !2050
  %95 = getelementptr inbounds %struct.Reg, %struct.Reg* %94, i32 0, i32 0, !dbg !2051
  %CX = bitcast %union.anon* %95 to i16*, !dbg !2051
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2052
  %97 = getelementptr inbounds %struct.GPR, %struct.GPR* %96, i32 0, i32 7, !dbg !2053
  %98 = getelementptr inbounds %struct.Reg, %struct.Reg* %97, i32 0, i32 0, !dbg !2054
  %DX = bitcast %union.anon* %98 to i16*, !dbg !2054
  %99 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2055
  %100 = getelementptr inbounds %struct.GPR, %struct.GPR* %99, i32 0, i32 9, !dbg !2056
  %101 = getelementptr inbounds %struct.Reg, %struct.Reg* %100, i32 0, i32 0, !dbg !2057
  %SI = bitcast %union.anon* %101 to i16*, !dbg !2057
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2058
  %103 = getelementptr inbounds %struct.GPR, %struct.GPR* %102, i32 0, i32 11, !dbg !2059
  %104 = getelementptr inbounds %struct.Reg, %struct.Reg* %103, i32 0, i32 0, !dbg !2060
  %DI = bitcast %union.anon* %104 to i16*, !dbg !2060
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2061
  %106 = getelementptr inbounds %struct.GPR, %struct.GPR* %105, i32 0, i32 13, !dbg !2062
  %107 = getelementptr inbounds %struct.Reg, %struct.Reg* %106, i32 0, i32 0, !dbg !2063
  %SP = bitcast %union.anon* %107 to i16*, !dbg !2063
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2064
  %109 = getelementptr inbounds %struct.GPR, %struct.GPR* %108, i32 0, i32 15, !dbg !2065
  %110 = getelementptr inbounds %struct.Reg, %struct.Reg* %109, i32 0, i32 0, !dbg !2066
  %BP = bitcast %union.anon* %110 to i16*, !dbg !2066
  %111 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2067
  %112 = getelementptr inbounds %struct.GPR, %struct.GPR* %111, i32 0, i32 17, !dbg !2068
  %113 = getelementptr inbounds %struct.Reg, %struct.Reg* %112, i32 0, i32 0, !dbg !2069
  %R8W = bitcast %union.anon* %113 to i16*, !dbg !2069
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2070
  %115 = getelementptr inbounds %struct.GPR, %struct.GPR* %114, i32 0, i32 19, !dbg !2071
  %116 = getelementptr inbounds %struct.Reg, %struct.Reg* %115, i32 0, i32 0, !dbg !2072
  %R9W = bitcast %union.anon* %116 to i16*, !dbg !2072
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2073
  %118 = getelementptr inbounds %struct.GPR, %struct.GPR* %117, i32 0, i32 21, !dbg !2074
  %119 = getelementptr inbounds %struct.Reg, %struct.Reg* %118, i32 0, i32 0, !dbg !2075
  %R10W = bitcast %union.anon* %119 to i16*, !dbg !2075
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2076
  %121 = getelementptr inbounds %struct.GPR, %struct.GPR* %120, i32 0, i32 23, !dbg !2077
  %122 = getelementptr inbounds %struct.Reg, %struct.Reg* %121, i32 0, i32 0, !dbg !2078
  %R11W = bitcast %union.anon* %122 to i16*, !dbg !2078
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2079
  %124 = getelementptr inbounds %struct.GPR, %struct.GPR* %123, i32 0, i32 25, !dbg !2080
  %125 = getelementptr inbounds %struct.Reg, %struct.Reg* %124, i32 0, i32 0, !dbg !2081
  %R12W = bitcast %union.anon* %125 to i16*, !dbg !2081
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2082
  %127 = getelementptr inbounds %struct.GPR, %struct.GPR* %126, i32 0, i32 27, !dbg !2083
  %128 = getelementptr inbounds %struct.Reg, %struct.Reg* %127, i32 0, i32 0, !dbg !2084
  %R13W = bitcast %union.anon* %128 to i16*, !dbg !2084
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2085
  %130 = getelementptr inbounds %struct.GPR, %struct.GPR* %129, i32 0, i32 29, !dbg !2086
  %131 = getelementptr inbounds %struct.Reg, %struct.Reg* %130, i32 0, i32 0, !dbg !2087
  %R14W = bitcast %union.anon* %131 to i16*, !dbg !2087
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2088
  %133 = getelementptr inbounds %struct.GPR, %struct.GPR* %132, i32 0, i32 31, !dbg !2089
  %134 = getelementptr inbounds %struct.Reg, %struct.Reg* %133, i32 0, i32 0, !dbg !2090
  %R15W = bitcast %union.anon* %134 to i16*, !dbg !2090
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2091
  %136 = getelementptr inbounds %struct.GPR, %struct.GPR* %135, i32 0, i32 33, !dbg !2092
  %137 = getelementptr inbounds %struct.Reg, %struct.Reg* %136, i32 0, i32 0, !dbg !2093
  %IP = bitcast %union.anon* %137 to i16*, !dbg !2093
  %138 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2094
  %139 = getelementptr inbounds %struct.GPR, %struct.GPR* %138, i32 0, i32 1, !dbg !2095
  %140 = getelementptr inbounds %struct.Reg, %struct.Reg* %139, i32 0, i32 0, !dbg !2096
  %EAX = bitcast %union.anon* %140 to i32*, !dbg !2096
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2097
  %142 = getelementptr inbounds %struct.GPR, %struct.GPR* %141, i32 0, i32 3, !dbg !2098
  %143 = getelementptr inbounds %struct.Reg, %struct.Reg* %142, i32 0, i32 0, !dbg !2099
  %EBX = bitcast %union.anon* %143 to i32*, !dbg !2099
  %144 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2100
  %145 = getelementptr inbounds %struct.GPR, %struct.GPR* %144, i32 0, i32 5, !dbg !2101
  %146 = getelementptr inbounds %struct.Reg, %struct.Reg* %145, i32 0, i32 0, !dbg !2102
  %ECX = bitcast %union.anon* %146 to i32*, !dbg !2102
  %147 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2103
  %148 = getelementptr inbounds %struct.GPR, %struct.GPR* %147, i32 0, i32 7, !dbg !2104
  %149 = getelementptr inbounds %struct.Reg, %struct.Reg* %148, i32 0, i32 0, !dbg !2105
  %EDX = bitcast %union.anon* %149 to i32*, !dbg !2105
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2106
  %151 = getelementptr inbounds %struct.GPR, %struct.GPR* %150, i32 0, i32 9, !dbg !2107
  %152 = getelementptr inbounds %struct.Reg, %struct.Reg* %151, i32 0, i32 0, !dbg !2108
  %ESI = bitcast %union.anon* %152 to i32*, !dbg !2108
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2109
  %154 = getelementptr inbounds %struct.GPR, %struct.GPR* %153, i32 0, i32 11, !dbg !2110
  %155 = getelementptr inbounds %struct.Reg, %struct.Reg* %154, i32 0, i32 0, !dbg !2111
  %EDI = bitcast %union.anon* %155 to i32*, !dbg !2111
  %156 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2112
  %157 = getelementptr inbounds %struct.GPR, %struct.GPR* %156, i32 0, i32 13, !dbg !2113
  %158 = getelementptr inbounds %struct.Reg, %struct.Reg* %157, i32 0, i32 0, !dbg !2114
  %ESP = bitcast %union.anon* %158 to i32*, !dbg !2114
  %159 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2115
  %160 = getelementptr inbounds %struct.GPR, %struct.GPR* %159, i32 0, i32 15, !dbg !2116
  %161 = getelementptr inbounds %struct.Reg, %struct.Reg* %160, i32 0, i32 0, !dbg !2117
  %EBP = bitcast %union.anon* %161 to i32*, !dbg !2117
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2118
  %163 = getelementptr inbounds %struct.GPR, %struct.GPR* %162, i32 0, i32 33, !dbg !2119
  %164 = getelementptr inbounds %struct.Reg, %struct.Reg* %163, i32 0, i32 0, !dbg !2120
  %EIP = bitcast %union.anon* %164 to i32*, !dbg !2120
  %165 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2121
  %166 = getelementptr inbounds %struct.GPR, %struct.GPR* %165, i32 0, i32 17, !dbg !2122
  %167 = getelementptr inbounds %struct.Reg, %struct.Reg* %166, i32 0, i32 0, !dbg !2123
  %R8D = bitcast %union.anon* %167 to i32*, !dbg !2123
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2124
  %169 = getelementptr inbounds %struct.GPR, %struct.GPR* %168, i32 0, i32 19, !dbg !2125
  %170 = getelementptr inbounds %struct.Reg, %struct.Reg* %169, i32 0, i32 0, !dbg !2126
  %R9D = bitcast %union.anon* %170 to i32*, !dbg !2126
  %171 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2127
  %172 = getelementptr inbounds %struct.GPR, %struct.GPR* %171, i32 0, i32 21, !dbg !2128
  %173 = getelementptr inbounds %struct.Reg, %struct.Reg* %172, i32 0, i32 0, !dbg !2129
  %R10D = bitcast %union.anon* %173 to i32*, !dbg !2129
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2130
  %175 = getelementptr inbounds %struct.GPR, %struct.GPR* %174, i32 0, i32 23, !dbg !2131
  %176 = getelementptr inbounds %struct.Reg, %struct.Reg* %175, i32 0, i32 0, !dbg !2132
  %R11D = bitcast %union.anon* %176 to i32*, !dbg !2132
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2133
  %178 = getelementptr inbounds %struct.GPR, %struct.GPR* %177, i32 0, i32 25, !dbg !2134
  %179 = getelementptr inbounds %struct.Reg, %struct.Reg* %178, i32 0, i32 0, !dbg !2135
  %R12D = bitcast %union.anon* %179 to i32*, !dbg !2135
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2136
  %181 = getelementptr inbounds %struct.GPR, %struct.GPR* %180, i32 0, i32 27, !dbg !2137
  %182 = getelementptr inbounds %struct.Reg, %struct.Reg* %181, i32 0, i32 0, !dbg !2138
  %R13D = bitcast %union.anon* %182 to i32*, !dbg !2138
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2139
  %184 = getelementptr inbounds %struct.GPR, %struct.GPR* %183, i32 0, i32 29, !dbg !2140
  %185 = getelementptr inbounds %struct.Reg, %struct.Reg* %184, i32 0, i32 0, !dbg !2141
  %R14D = bitcast %union.anon* %185 to i32*, !dbg !2141
  %186 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2142
  %187 = getelementptr inbounds %struct.GPR, %struct.GPR* %186, i32 0, i32 31, !dbg !2143
  %188 = getelementptr inbounds %struct.Reg, %struct.Reg* %187, i32 0, i32 0, !dbg !2144
  %R15D = bitcast %union.anon* %188 to i32*, !dbg !2144
  %189 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2145
  %190 = getelementptr inbounds %struct.GPR, %struct.GPR* %189, i32 0, i32 1, !dbg !2146
  %191 = getelementptr inbounds %struct.Reg, %struct.Reg* %190, i32 0, i32 0, !dbg !2147
  %RAX = bitcast %union.anon* %191 to i64*, !dbg !2147
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2148
  %193 = getelementptr inbounds %struct.GPR, %struct.GPR* %192, i32 0, i32 3, !dbg !2149
  %194 = getelementptr inbounds %struct.Reg, %struct.Reg* %193, i32 0, i32 0, !dbg !2150
  %RBX = bitcast %union.anon* %194 to i64*, !dbg !2150
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2151
  %196 = getelementptr inbounds %struct.GPR, %struct.GPR* %195, i32 0, i32 5, !dbg !2152
  %197 = getelementptr inbounds %struct.Reg, %struct.Reg* %196, i32 0, i32 0, !dbg !2153
  %RCX = bitcast %union.anon* %197 to i64*, !dbg !2153
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2154
  %199 = getelementptr inbounds %struct.GPR, %struct.GPR* %198, i32 0, i32 7, !dbg !2155
  %200 = getelementptr inbounds %struct.Reg, %struct.Reg* %199, i32 0, i32 0, !dbg !2156
  %RDX = bitcast %union.anon* %200 to i64*, !dbg !2156
  %201 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2157
  %202 = getelementptr inbounds %struct.GPR, %struct.GPR* %201, i32 0, i32 9, !dbg !2158
  %203 = getelementptr inbounds %struct.Reg, %struct.Reg* %202, i32 0, i32 0, !dbg !2159
  %RSI = bitcast %union.anon* %203 to i64*, !dbg !2159
  %204 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2160
  %205 = getelementptr inbounds %struct.GPR, %struct.GPR* %204, i32 0, i32 11, !dbg !2161
  %206 = getelementptr inbounds %struct.Reg, %struct.Reg* %205, i32 0, i32 0, !dbg !2162
  %RDI = bitcast %union.anon* %206 to i64*, !dbg !2162
  %207 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2163
  %208 = getelementptr inbounds %struct.GPR, %struct.GPR* %207, i32 0, i32 13, !dbg !2164
  %209 = getelementptr inbounds %struct.Reg, %struct.Reg* %208, i32 0, i32 0, !dbg !2165
  %RSP = bitcast %union.anon* %209 to i64*, !dbg !2165
  %210 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2166
  %211 = getelementptr inbounds %struct.GPR, %struct.GPR* %210, i32 0, i32 15, !dbg !2167
  %212 = getelementptr inbounds %struct.Reg, %struct.Reg* %211, i32 0, i32 0, !dbg !2168
  %RBP = bitcast %union.anon* %212 to i64*, !dbg !2168
  %213 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2169
  %214 = getelementptr inbounds %struct.GPR, %struct.GPR* %213, i32 0, i32 17, !dbg !2170
  %215 = getelementptr inbounds %struct.Reg, %struct.Reg* %214, i32 0, i32 0, !dbg !2171
  %R8 = bitcast %union.anon* %215 to i64*, !dbg !2171
  %216 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2172
  %217 = getelementptr inbounds %struct.GPR, %struct.GPR* %216, i32 0, i32 19, !dbg !2173
  %218 = getelementptr inbounds %struct.Reg, %struct.Reg* %217, i32 0, i32 0, !dbg !2174
  %R9 = bitcast %union.anon* %218 to i64*, !dbg !2174
  %219 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2175
  %220 = getelementptr inbounds %struct.GPR, %struct.GPR* %219, i32 0, i32 21, !dbg !2176
  %221 = getelementptr inbounds %struct.Reg, %struct.Reg* %220, i32 0, i32 0, !dbg !2177
  %R10 = bitcast %union.anon* %221 to i64*, !dbg !2177
  %222 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2178
  %223 = getelementptr inbounds %struct.GPR, %struct.GPR* %222, i32 0, i32 23, !dbg !2179
  %224 = getelementptr inbounds %struct.Reg, %struct.Reg* %223, i32 0, i32 0, !dbg !2180
  %R11 = bitcast %union.anon* %224 to i64*, !dbg !2180
  %225 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2181
  %226 = getelementptr inbounds %struct.GPR, %struct.GPR* %225, i32 0, i32 25, !dbg !2182
  %227 = getelementptr inbounds %struct.Reg, %struct.Reg* %226, i32 0, i32 0, !dbg !2183
  %R12 = bitcast %union.anon* %227 to i64*, !dbg !2183
  %228 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2184
  %229 = getelementptr inbounds %struct.GPR, %struct.GPR* %228, i32 0, i32 27, !dbg !2185
  %230 = getelementptr inbounds %struct.Reg, %struct.Reg* %229, i32 0, i32 0, !dbg !2186
  %R13 = bitcast %union.anon* %230 to i64*, !dbg !2186
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2187
  %232 = getelementptr inbounds %struct.GPR, %struct.GPR* %231, i32 0, i32 29, !dbg !2188
  %233 = getelementptr inbounds %struct.Reg, %struct.Reg* %232, i32 0, i32 0, !dbg !2189
  %R14 = bitcast %union.anon* %233 to i64*, !dbg !2189
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2190
  %235 = getelementptr inbounds %struct.GPR, %struct.GPR* %234, i32 0, i32 31, !dbg !2191
  %236 = getelementptr inbounds %struct.Reg, %struct.Reg* %235, i32 0, i32 0, !dbg !2192
  %R15 = bitcast %union.anon* %236 to i64*, !dbg !2192
  %237 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6, !dbg !2193
  %238 = getelementptr inbounds %struct.GPR, %struct.GPR* %237, i32 0, i32 33, !dbg !2194
  %239 = getelementptr inbounds %struct.Reg, %struct.Reg* %238, i32 0, i32 0, !dbg !2195
  %RIP = bitcast %union.anon* %239 to i64*, !dbg !2195
  %240 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2196
  %241 = getelementptr inbounds %struct.Segments, %struct.Segments* %240, i32 0, i32 1, !dbg !2197
  %SS = bitcast %union.SegmentSelector* %241 to i16*, !dbg !2198
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2199
  %243 = getelementptr inbounds %struct.Segments, %struct.Segments* %242, i32 0, i32 3, !dbg !2200
  %ES = bitcast %union.SegmentSelector* %243 to i16*, !dbg !2201
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2202
  %245 = getelementptr inbounds %struct.Segments, %struct.Segments* %244, i32 0, i32 5, !dbg !2203
  %GS = bitcast %union.SegmentSelector* %245 to i16*, !dbg !2204
  %246 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2205
  %247 = getelementptr inbounds %struct.Segments, %struct.Segments* %246, i32 0, i32 7, !dbg !2206
  %FS = bitcast %union.SegmentSelector* %247 to i16*, !dbg !2207
  %248 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2208
  %249 = getelementptr inbounds %struct.Segments, %struct.Segments* %248, i32 0, i32 9, !dbg !2209
  %DS = bitcast %union.SegmentSelector* %249 to i16*, !dbg !2210
  %250 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 4, !dbg !2211
  %251 = getelementptr inbounds %struct.Segments, %struct.Segments* %250, i32 0, i32 11, !dbg !2212
  %CS = bitcast %union.SegmentSelector* %251 to i16*, !dbg !2213
  %252 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2214
  %253 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %252, i32 0, i32 5, !dbg !2215
  %254 = getelementptr inbounds %struct.Reg, %struct.Reg* %253, i32 0, i32 0, !dbg !2216
  %GS_BASE = bitcast %union.anon* %254 to i64*, !dbg !2216
  %255 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 5, !dbg !2217
  %256 = getelementptr inbounds %struct.AddressSpace, %struct.AddressSpace* %255, i32 0, i32 7, !dbg !2218
  %257 = getelementptr inbounds %struct.Reg, %struct.Reg* %256, i32 0, i32 0, !dbg !2219
  %FS_BASE = bitcast %union.anon* %257 to i64*, !dbg !2219
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2220
  %259 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %258, i64 0, i64 0, !dbg !2221
  %YMM0 = bitcast %union.VectorReg* %259 to %"class.std::bitset"*, !dbg !2222
  %260 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2223
  %261 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %260, i64 0, i64 1, !dbg !2224
  %YMM1 = bitcast %union.VectorReg* %261 to %"class.std::bitset"*, !dbg !2225
  %262 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2226
  %263 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %262, i64 0, i64 2, !dbg !2227
  %YMM2 = bitcast %union.VectorReg* %263 to %"class.std::bitset"*, !dbg !2228
  %264 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2229
  %265 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %264, i64 0, i64 3, !dbg !2230
  %YMM3 = bitcast %union.VectorReg* %265 to %"class.std::bitset"*, !dbg !2231
  %266 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2232
  %267 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %266, i64 0, i64 4, !dbg !2233
  %YMM4 = bitcast %union.VectorReg* %267 to %"class.std::bitset"*, !dbg !2234
  %268 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2235
  %269 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %268, i64 0, i64 5, !dbg !2236
  %YMM5 = bitcast %union.VectorReg* %269 to %"class.std::bitset"*, !dbg !2237
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2238
  %271 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %270, i64 0, i64 6, !dbg !2239
  %YMM6 = bitcast %union.VectorReg* %271 to %"class.std::bitset"*, !dbg !2240
  %272 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2241
  %273 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %272, i64 0, i64 7, !dbg !2242
  %YMM7 = bitcast %union.VectorReg* %273 to %"class.std::bitset"*, !dbg !2243
  %274 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2244
  %275 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %274, i64 0, i64 8, !dbg !2245
  %YMM8 = bitcast %union.VectorReg* %275 to %"class.std::bitset"*, !dbg !2246
  %276 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2247
  %277 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %276, i64 0, i64 9, !dbg !2248
  %YMM9 = bitcast %union.VectorReg* %277 to %"class.std::bitset"*, !dbg !2249
  %278 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2250
  %279 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %278, i64 0, i64 10, !dbg !2251
  %YMM10 = bitcast %union.VectorReg* %279 to %"class.std::bitset"*, !dbg !2252
  %280 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2253
  %281 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %280, i64 0, i64 11, !dbg !2254
  %YMM11 = bitcast %union.VectorReg* %281 to %"class.std::bitset"*, !dbg !2255
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2256
  %283 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %282, i64 0, i64 12, !dbg !2257
  %YMM12 = bitcast %union.VectorReg* %283 to %"class.std::bitset"*, !dbg !2258
  %284 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2259
  %285 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %284, i64 0, i64 13, !dbg !2260
  %YMM13 = bitcast %union.VectorReg* %285 to %"class.std::bitset"*, !dbg !2261
  %286 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2262
  %287 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %286, i64 0, i64 14, !dbg !2263
  %YMM14 = bitcast %union.VectorReg* %287 to %"class.std::bitset"*, !dbg !2264
  %288 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2265
  %289 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %288, i64 0, i64 15, !dbg !2266
  %YMM15 = bitcast %union.VectorReg* %289 to %"class.std::bitset"*, !dbg !2267
  %290 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2268
  %291 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %290, i64 0, i64 0, !dbg !2269
  %XMM0 = bitcast %union.VectorReg* %291 to %union.vec128_t*, !dbg !2270
  %292 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2271
  %293 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %292, i64 0, i64 1, !dbg !2272
  %XMM1 = bitcast %union.VectorReg* %293 to %union.vec128_t*, !dbg !2273
  %294 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2274
  %295 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %294, i64 0, i64 2, !dbg !2275
  %XMM2 = bitcast %union.VectorReg* %295 to %union.vec128_t*, !dbg !2276
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2277
  %297 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %296, i64 0, i64 3, !dbg !2278
  %XMM3 = bitcast %union.VectorReg* %297 to %union.vec128_t*, !dbg !2279
  %298 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2280
  %299 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %298, i64 0, i64 4, !dbg !2281
  %XMM4 = bitcast %union.VectorReg* %299 to %union.vec128_t*, !dbg !2282
  %300 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2283
  %301 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %300, i64 0, i64 5, !dbg !2284
  %XMM5 = bitcast %union.VectorReg* %301 to %union.vec128_t*, !dbg !2285
  %302 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2286
  %303 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %302, i64 0, i64 6, !dbg !2287
  %XMM6 = bitcast %union.VectorReg* %303 to %union.vec128_t*, !dbg !2288
  %304 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2289
  %305 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %304, i64 0, i64 7, !dbg !2290
  %XMM7 = bitcast %union.VectorReg* %305 to %union.vec128_t*, !dbg !2291
  %306 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2292
  %307 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %306, i64 0, i64 8, !dbg !2293
  %XMM8 = bitcast %union.VectorReg* %307 to %union.vec128_t*, !dbg !2294
  %308 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2295
  %309 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %308, i64 0, i64 9, !dbg !2296
  %XMM9 = bitcast %union.VectorReg* %309 to %union.vec128_t*, !dbg !2297
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2298
  %311 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %310, i64 0, i64 10, !dbg !2299
  %XMM10 = bitcast %union.VectorReg* %311 to %union.vec128_t*, !dbg !2300
  %312 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2301
  %313 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %312, i64 0, i64 11, !dbg !2302
  %XMM11 = bitcast %union.VectorReg* %313 to %union.vec128_t*, !dbg !2303
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2304
  %315 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %314, i64 0, i64 12, !dbg !2305
  %XMM12 = bitcast %union.VectorReg* %315 to %union.vec128_t*, !dbg !2306
  %316 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2307
  %317 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %316, i64 0, i64 13, !dbg !2308
  %XMM13 = bitcast %union.VectorReg* %317 to %union.vec128_t*, !dbg !2309
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2310
  %319 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %318, i64 0, i64 14, !dbg !2311
  %XMM14 = bitcast %union.VectorReg* %319 to %union.vec128_t*, !dbg !2312
  %320 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1, !dbg !2313
  %321 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %320, i64 0, i64 15, !dbg !2314
  %XMM15 = bitcast %union.VectorReg* %321 to %union.vec128_t*, !dbg !2315
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2316
  %323 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %322, i32 0, i32 0, !dbg !2317
  %324 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %323, i64 0, i64 0, !dbg !2318
  %ST0 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %324, i32 0, i32 1, !dbg !2319
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2320
  %326 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %325, i32 0, i32 0, !dbg !2321
  %327 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %326, i64 0, i64 1, !dbg !2322
  %ST1 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %327, i32 0, i32 1, !dbg !2323
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2324
  %329 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %328, i32 0, i32 0, !dbg !2325
  %330 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %329, i64 0, i64 2, !dbg !2326
  %ST2 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %330, i32 0, i32 1, !dbg !2327
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2328
  %332 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %331, i32 0, i32 0, !dbg !2329
  %333 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %332, i64 0, i64 3, !dbg !2330
  %ST3 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %333, i32 0, i32 1, !dbg !2331
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2332
  %335 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %334, i32 0, i32 0, !dbg !2333
  %336 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %335, i64 0, i64 4, !dbg !2334
  %ST4 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %336, i32 0, i32 1, !dbg !2335
  %337 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2336
  %338 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %337, i32 0, i32 0, !dbg !2337
  %339 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %338, i64 0, i64 5, !dbg !2338
  %ST5 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %339, i32 0, i32 1, !dbg !2339
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2340
  %341 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %340, i32 0, i32 0, !dbg !2341
  %342 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %341, i64 0, i64 6, !dbg !2342
  %ST6 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %342, i32 0, i32 1, !dbg !2343
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 7, !dbg !2344
  %344 = getelementptr inbounds %struct.X87Stack, %struct.X87Stack* %343, i32 0, i32 0, !dbg !2345
  %345 = getelementptr inbounds [8 x %struct.anon.3], [8 x %struct.anon.3]* %344, i64 0, i64 7, !dbg !2346
  %ST7 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %345, i32 0, i32 1, !dbg !2347
  %346 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2348
  %347 = getelementptr inbounds %struct.MMX, %struct.MMX* %346, i32 0, i32 0, !dbg !2349
  %348 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %347, i64 0, i64 0, !dbg !2350
  %349 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %348, i32 0, i32 1, !dbg !2351
  %350 = bitcast %union.vec64_t* %349 to %struct.uint64v1_t*, !dbg !2352
  %351 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %350, i32 0, i32 0, !dbg !2353
  %MM0 = getelementptr inbounds [1 x i64], [1 x i64]* %351, i64 0, i64 0, !dbg !2350
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2354
  %353 = getelementptr inbounds %struct.MMX, %struct.MMX* %352, i32 0, i32 0, !dbg !2355
  %354 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %353, i64 0, i64 1, !dbg !2356
  %355 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %354, i32 0, i32 1, !dbg !2357
  %356 = bitcast %union.vec64_t* %355 to %struct.uint64v1_t*, !dbg !2358
  %357 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %356, i32 0, i32 0, !dbg !2359
  %MM1 = getelementptr inbounds [1 x i64], [1 x i64]* %357, i64 0, i64 0, !dbg !2356
  %358 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2360
  %359 = getelementptr inbounds %struct.MMX, %struct.MMX* %358, i32 0, i32 0, !dbg !2361
  %360 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %359, i64 0, i64 2, !dbg !2362
  %361 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %360, i32 0, i32 1, !dbg !2363
  %362 = bitcast %union.vec64_t* %361 to %struct.uint64v1_t*, !dbg !2364
  %363 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %362, i32 0, i32 0, !dbg !2365
  %MM2 = getelementptr inbounds [1 x i64], [1 x i64]* %363, i64 0, i64 0, !dbg !2362
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2366
  %365 = getelementptr inbounds %struct.MMX, %struct.MMX* %364, i32 0, i32 0, !dbg !2367
  %366 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %365, i64 0, i64 3, !dbg !2368
  %367 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %366, i32 0, i32 1, !dbg !2369
  %368 = bitcast %union.vec64_t* %367 to %struct.uint64v1_t*, !dbg !2370
  %369 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %368, i32 0, i32 0, !dbg !2371
  %MM3 = getelementptr inbounds [1 x i64], [1 x i64]* %369, i64 0, i64 0, !dbg !2368
  %370 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2372
  %371 = getelementptr inbounds %struct.MMX, %struct.MMX* %370, i32 0, i32 0, !dbg !2373
  %372 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %371, i64 0, i64 4, !dbg !2374
  %373 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %372, i32 0, i32 1, !dbg !2375
  %374 = bitcast %union.vec64_t* %373 to %struct.uint64v1_t*, !dbg !2376
  %375 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %374, i32 0, i32 0, !dbg !2377
  %MM4 = getelementptr inbounds [1 x i64], [1 x i64]* %375, i64 0, i64 0, !dbg !2374
  %376 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2378
  %377 = getelementptr inbounds %struct.MMX, %struct.MMX* %376, i32 0, i32 0, !dbg !2379
  %378 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %377, i64 0, i64 5, !dbg !2380
  %379 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %378, i32 0, i32 1, !dbg !2381
  %380 = bitcast %union.vec64_t* %379 to %struct.uint64v1_t*, !dbg !2382
  %381 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %380, i32 0, i32 0, !dbg !2383
  %MM5 = getelementptr inbounds [1 x i64], [1 x i64]* %381, i64 0, i64 0, !dbg !2380
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2384
  %383 = getelementptr inbounds %struct.MMX, %struct.MMX* %382, i32 0, i32 0, !dbg !2385
  %384 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %383, i64 0, i64 6, !dbg !2386
  %385 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %384, i32 0, i32 1, !dbg !2387
  %386 = bitcast %union.vec64_t* %385 to %struct.uint64v1_t*, !dbg !2388
  %387 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %386, i32 0, i32 0, !dbg !2389
  %MM6 = getelementptr inbounds [1 x i64], [1 x i64]* %387, i64 0, i64 0, !dbg !2386
  %388 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 8, !dbg !2390
  %389 = getelementptr inbounds %struct.MMX, %struct.MMX* %388, i32 0, i32 0, !dbg !2391
  %390 = getelementptr inbounds [8 x %struct.anon.4], [8 x %struct.anon.4]* %389, i64 0, i64 7, !dbg !2392
  %391 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %390, i32 0, i32 1, !dbg !2393
  %392 = bitcast %union.vec64_t* %391 to %struct.uint64v1_t*, !dbg !2394
  %393 = getelementptr inbounds %struct.uint64v1_t, %struct.uint64v1_t* %392, i32 0, i32 0, !dbg !2395
  %MM7 = getelementptr inbounds [1 x i64], [1 x i64]* %393, i64 0, i64 0, !dbg !2392
  %394 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2396
  %AF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %394, i32 0, i32 5, !dbg !2397
  %395 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2398
  %CF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %395, i32 0, i32 1, !dbg !2399
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2400
  %DF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %396, i32 0, i32 11, !dbg !2401
  %397 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2402
  %OF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %397, i32 0, i32 13, !dbg !2403
  %398 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2404
  %PF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %398, i32 0, i32 3, !dbg !2405
  %399 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2406
  %SF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %399, i32 0, i32 9, !dbg !2407
  %400 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 2, !dbg !2408
  %ZF = getelementptr inbounds %struct.ArithFlags, %struct.ArithFlags* %400, i32 0, i32 7, !dbg !2409
  store i64* @DR0, i64** %_DR0, align 8, !dbg !2410
  store i64* @DR1, i64** %_DR1, align 8, !dbg !2411
  store i64* @DR2, i64** %_DR2, align 8, !dbg !2412
  store i64* @DR3, i64** %_DR3, align 8, !dbg !2413
  store i64* @DR4, i64** %_DR4, align 8, !dbg !2414
  store i64* @DR5, i64** %_DR5, align 8, !dbg !2415
  store i64* @DR6, i64** %_DR6, align 8, !dbg !2416
  store i64* @DR7, i64** %_DR7, align 8, !dbg !2417
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR0, i32 0, i32 0), i64** %CR0, align 8, !dbg !2418
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR1, i32 0, i32 0), i64** %CR1, align 8, !dbg !2419
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR2, i32 0, i32 0), i64** %CR2, align 8, !dbg !2420
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR3, i32 0, i32 0), i64** %CR3, align 8, !dbg !2421
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR4, i32 0, i32 0), i64** %CR4, align 8, !dbg !2422
  store i64* getelementptr inbounds (%union.anon, %union.anon* @gCR8, i32 0, i32 0), i64** %CR8, align 8, !dbg !2423
  ret %struct.Memory* %2, !dbg !2424
}

; Function Attrs: noduplicate noinline nounwind optnone
define void @__remill_intrinsics() #9 !dbg !2425 {
  ret void, !dbg !2427
}

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_barrier_load_store(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_begin(%struct.Memory*) #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare %struct.Memory* @__remill_atomic_end(%struct.Memory*) #10

declare %struct.Memory* @__remill_fetch_and_sub_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_sub_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_sub_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_sub_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_or_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_or_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_or_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_or_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_and_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_and_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_and_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_and_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

declare %struct.Memory* @__remill_fetch_and_xor_8(%struct.Memory*, i64, i8* dereferenceable(1)) #11

declare %struct.Memory* @__remill_fetch_and_xor_16(%struct.Memory*, i64, i16* dereferenceable(2)) #11

declare %struct.Memory* @__remill_fetch_and_xor_32(%struct.Memory*, i64, i32* dereferenceable(4)) #11

declare %struct.Memory* @__remill_fetch_and_xor_64(%struct.Memory*, i64, i64* dereferenceable(8)) #11

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_function_return(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_jump(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_missing_block(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone
declare %struct.Memory* @__remill_async_hyper_call(%struct.State* dereferenceable(3376), i64, %struct.Memory*) #12

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare zeroext i16 @__remill_undefined_16() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare i32 @__remill_undefined_32() #10

; Function Attrs: noduplicate noinline nounwind optnone readnone
declare float @__remill_undefined_f32() #10

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #3

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__gmon_start__() #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @printf(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @__libc_start_main(i64, i64, i64, i64, i64, i64, i64, i64) #13

; Function Attrs: noinline
declare extern_weak x86_64_sysvcc i64 @gettimeofday(i64, i64) #13

; Function Attrs: noinline
define %struct.Memory* @sub_400460__start(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400460:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 15
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EBP = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RAX = bitcast %union.anon* %11 to i64*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 5
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RCX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 7
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 17
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %R8 = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 19
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %R9 = bitcast %union.anon* %35 to i64*
  %36 = load i64, i64* %RBP
  %37 = load i32, i32* %EBP
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* %PC
  %40 = add i64 %39, 2
  store i64 %40, i64* %PC
  %41 = xor i64 %38, %36
  %42 = trunc i64 %41 to i32
  %43 = and i64 %41, 4294967295
  store i64 %43, i64* %RBP, align 8, !tbaa !2428
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %44, align 1, !tbaa !2432
  %45 = and i32 %42, 255
  %46 = call i32 @llvm.ctpop.i32(i32 %45) #16
  %47 = trunc i32 %46 to i8
  %48 = and i8 %47, 1
  %49 = xor i8 %48, 1
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %49, i8* %50, align 1, !tbaa !2446
  %51 = icmp eq i32 %42, 0
  %52 = zext i1 %51 to i8
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %52, i8* %53, align 1, !tbaa !2447
  %54 = lshr i32 %42, 31
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %55, i8* %56, align 1, !tbaa !2448
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %57, align 1, !tbaa !2449
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %58, align 1, !tbaa !2450
  %59 = load i64, i64* %RDX
  %60 = load i64, i64* %PC
  %61 = add i64 %60, 3
  store i64 %61, i64* %PC
  store i64 %59, i64* %R9, align 8, !tbaa !2428
  %62 = load i64, i64* %PC
  %63 = add i64 %62, 1
  store i64 %63, i64* %PC
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %65 = load i64, i64* %64, align 8, !tbaa !2428
  %66 = add i64 %65, 8
  %67 = inttoptr i64 %65 to i64*
  %68 = load i64, i64* %67
  store i64 %68, i64* %RSI, align 8, !tbaa !2428
  store i64 %66, i64* %64, align 8, !tbaa !2428
  %69 = load i64, i64* %RSP
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 3
  store i64 %71, i64* %PC
  store i64 %69, i64* %RDX, align 8, !tbaa !2428
  %72 = load i64, i64* %RSP
  %73 = load i64, i64* %PC
  %74 = add i64 %73, 4
  store i64 %74, i64* %PC
  %75 = and i64 -16, %72
  store i64 %75, i64* %RSP, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %76, align 1, !tbaa !2432
  %77 = trunc i64 %75 to i32
  %78 = and i32 %77, 255
  %79 = call i32 @llvm.ctpop.i32(i32 %78) #16
  %80 = trunc i32 %79 to i8
  %81 = and i8 %80, 1
  %82 = xor i8 %81, 1
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %82, i8* %83, align 1, !tbaa !2446
  %84 = icmp eq i64 %75, 0
  %85 = zext i1 %84 to i8
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %85, i8* %86, align 1, !tbaa !2447
  %87 = lshr i64 %75, 63
  %88 = trunc i64 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %88, i8* %89, align 1, !tbaa !2448
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %90, align 1, !tbaa !2449
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %91, align 1, !tbaa !2450
  %92 = load i64, i64* %RAX
  %93 = load i64, i64* %PC
  %94 = add i64 %93, 1
  store i64 %94, i64* %PC
  %95 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %96 = load i64, i64* %95, align 8, !tbaa !2428
  %97 = add i64 %96, -8
  %98 = inttoptr i64 %97 to i64*
  store i64 %92, i64* %98
  store i64 %97, i64* %95, align 8, !tbaa !2428
  %99 = load i64, i64* %RSP
  %100 = load i64, i64* %PC
  %101 = add i64 %100, 1
  store i64 %101, i64* %PC
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %103 = load i64, i64* %102, align 8, !tbaa !2428
  %104 = add i64 %103, -8
  %105 = inttoptr i64 %104 to i64*
  store i64 %99, i64* %105
  store i64 %104, i64* %102, align 8, !tbaa !2428
  %106 = load i64, i64* %PC
  %107 = add i64 %106, 7
  store i64 %107, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_4026d0___libc_csu_fini to i64), i64* %R8, align 8, !tbaa !2428
  %108 = load i64, i64* %PC
  %109 = add i64 %108, 7
  store i64 %109, i64* %PC
  store i64 ptrtoint (void ()* @callback_sub_402660___libc_csu_init to i64), i64* %RCX, align 8, !tbaa !2428
  %110 = load i64, i64* %PC
  %111 = add i64 %110, 7
  store i64 %111, i64* %PC
  store i64 ptrtoint (void ()* @main to i64), i64* %RDI, align 8, !tbaa !2428
  %112 = load i64, i64* %PC
  %113 = add i64 %112, 6
  %114 = load i64, i64* %PC
  %115 = add i64 %114, 6
  store i64 %115, i64* %PC
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %117 = load i64, i64* %116, align 8, !tbaa !2428
  %118 = add i64 %117, -8
  %119 = inttoptr i64 %118 to i64*
  store i64 %113, i64* %119
  store i64 %118, i64* %116, align 8, !tbaa !2428
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %121 = load i64, i64* getelementptr inbounds (%seg_602ff0__got_type, %seg_602ff0__got_type* @seg_602ff0__got, i32 0, i32 0)
  store i64 %121, i64* %120, align 8, !tbaa !2428
  %122 = load i64, i64* %PC
  %123 = call %struct.Memory* @ext_603320___libc_start_main(%struct.State* %0, i64 %122, %struct.Memory* %2)
  %124 = load i64, i64* %PC
  %125 = add i64 %124, 1
  store i64 %125, i64* %PC
  %126 = load i64, i64* %PC
  %127 = tail call %struct.Memory* @__remill_error(%struct.State* %0, i64 %126, %struct.Memory* %123)
  ret %struct.Memory* %127
}

; Function Attrs: noinline
define %struct.Memory* @sub_400540_frame_dummy(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400540:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RBP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 1
  store i64 %14, i64* %PC
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !tbaa !2428
  %17 = add i64 %16, -8
  %18 = inttoptr i64 %17 to i64*
  store i64 %12, i64* %18
  store i64 %17, i64* %15, align 8, !tbaa !2428
  %19 = load i64, i64* %RSP
  %20 = load i64, i64* %PC
  %21 = add i64 %20, 3
  store i64 %21, i64* %PC
  store i64 %19, i64* %RBP, align 8, !tbaa !2428
  %22 = load i64, i64* %PC
  %23 = add i64 %22, 1
  store i64 %23, i64* %PC
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %25 = load i64, i64* %24, align 8, !tbaa !2428
  %26 = add i64 %25, 8
  %27 = inttoptr i64 %25 to i64*
  %28 = load i64, i64* %27
  store i64 %28, i64* %RBP, align 8, !tbaa !2428
  store i64 %26, i64* %24, align 8, !tbaa !2428
  %29 = load i64, i64* %PC
  %30 = sub i64 %29, 117
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 2
  store i64 %32, i64* %PC
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %30, i64* %33, align 8, !tbaa !2428
  %34 = load i64, i64* %PC
  %35 = tail call %struct.Memory* @sub_4004d0_register_tm_clones(%struct.State* %0, i64 %34, %struct.Memory* %2)
  ret %struct.Memory* %35
}

; Function Attrs: noinline
define %struct.Memory* @sub_400510___do_global_dtors_aux(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400510:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 15
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RBP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %PC
  %13 = add i64 %12, 7
  store i64 %13, i64* %PC
  %14 = load i8, i8* getelementptr inbounds (%seg_603120__bss_type, %seg_603120__bss_type* @seg_603120__bss, i32 0, i32 0, i32 0)
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %15, align 1, !tbaa !2432
  %16 = zext i8 %14 to i32
  %17 = call i32 @llvm.ctpop.i32(i32 %16) #16
  %18 = trunc i32 %17 to i8
  %19 = and i8 %18, 1
  %20 = xor i8 %19, 1
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %20, i8* %21, align 1, !tbaa !2446
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %22, align 1, !tbaa !2450
  %23 = icmp eq i8 %14, 0
  %24 = zext i1 %23 to i8
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %24, i8* %25, align 1, !tbaa !2447
  %26 = lshr i8 %14, 7
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %26, i8* %27, align 1, !tbaa !2448
  %28 = lshr i8 %14, 7
  %29 = xor i8 %26, %28
  %30 = add nuw nsw i8 %29, %28
  %31 = icmp eq i8 %30, 2
  %32 = zext i1 %31 to i8
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %32, i8* %33, align 1, !tbaa !2449
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 25
  %36 = load i64, i64* %PC
  %37 = add i64 %36, 2
  %38 = load i64, i64* %PC
  %39 = add i64 %38, 2
  store i64 %39, i64* %PC
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %41 = load i8, i8* %40, align 1, !tbaa !2447
  %42 = icmp eq i8 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %44 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %45 = select i1 %42, i64 %35, i64 %37
  store i64 %45, i64* %44, align 8, !tbaa !2428
  %46 = load i8, i8* %BRANCH_TAKEN
  %47 = icmp eq i8 %46, 1
  br i1 %47, label %block_400530, label %block_400519

block_400530:                                     ; preds = %block_400510
  %48 = load i64, i64* %PC
  %49 = add i64 %48, 2
  store i64 %49, i64* %PC
  %50 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %52 = load i64, i64* %51, align 8, !tbaa !2428
  %53 = inttoptr i64 %52 to i64*
  %54 = load i64, i64* %53
  store i64 %54, i64* %50, align 8, !tbaa !2428
  %55 = add i64 %52, 8
  store i64 %55, i64* %51, align 8, !tbaa !2428
  ret %struct.Memory* %2

block_400519:                                     ; preds = %block_400510
  %56 = load i64, i64* %RBP
  %57 = load i64, i64* %PC
  %58 = add i64 %57, 1
  store i64 %58, i64* %PC
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %60 = load i64, i64* %59, align 8, !tbaa !2428
  %61 = add i64 %60, -8
  %62 = inttoptr i64 %61 to i64*
  store i64 %56, i64* %62
  store i64 %61, i64* %59, align 8, !tbaa !2428
  %63 = load i64, i64* %RSP
  %64 = load i64, i64* %PC
  %65 = add i64 %64, 3
  store i64 %65, i64* %PC
  store i64 %63, i64* %RBP, align 8, !tbaa !2428
  %66 = load i64, i64* %PC
  %67 = sub i64 %66, 125
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 5
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 5
  store i64 %71, i64* %PC
  %72 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %73 = load i64, i64* %72, align 8, !tbaa !2428
  %74 = add i64 %73, -8
  %75 = inttoptr i64 %74 to i64*
  store i64 %69, i64* %75
  store i64 %74, i64* %72, align 8, !tbaa !2428
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %67, i64* %76, align 8, !tbaa !2428
  %77 = load i64, i64* %PC
  %78 = call %struct.Memory* @sub_4004a0_deregister_tm_clones(%struct.State* %0, i64 %77, %struct.Memory* %2)
  %79 = load i64, i64* %PC
  %80 = add i64 %79, 7
  store i64 %80, i64* %PC
  store i8 1, i8* getelementptr inbounds (%seg_603120__bss_type, %seg_603120__bss_type* @seg_603120__bss, i32 0, i32 0, i32 0)
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 1
  store i64 %89, i64* %PC
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %91 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %92 = load i64, i64* %91, align 8, !tbaa !2428
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93
  store i64 %94, i64* %90, align 8, !tbaa !2428
  %95 = add i64 %92, 8
  store i64 %95, i64* %91, align 8, !tbaa !2428
  ret %struct.Memory* %78
}

; Function Attrs: noinline
define %struct.Memory* @sub_400490__dl_relocate_static_pie(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400490:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_402660___libc_csu_init(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_402660:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EBX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 11
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %EDI = bitcast %union.anon* %14 to i32*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 27
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %R13D = bitcast %union.anon* %17 to i32*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 1
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RAX = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBX = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 7
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RDX = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 9
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RSI = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %31 = getelementptr inbounds %struct.GPR, %struct.GPR* %30, i32 0, i32 11
  %32 = getelementptr inbounds %struct.Reg, %struct.Reg* %31, i32 0, i32 0
  %RDI = bitcast %union.anon* %32 to i64*
  %33 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %34 = getelementptr inbounds %struct.GPR, %struct.GPR* %33, i32 0, i32 13
  %35 = getelementptr inbounds %struct.Reg, %struct.Reg* %34, i32 0, i32 0
  %RSP = bitcast %union.anon* %35 to i64*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %37 = getelementptr inbounds %struct.GPR, %struct.GPR* %36, i32 0, i32 15
  %38 = getelementptr inbounds %struct.Reg, %struct.Reg* %37, i32 0, i32 0
  %RBP = bitcast %union.anon* %38 to i64*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %40 = getelementptr inbounds %struct.GPR, %struct.GPR* %39, i32 0, i32 25
  %41 = getelementptr inbounds %struct.Reg, %struct.Reg* %40, i32 0, i32 0
  %R12 = bitcast %union.anon* %41 to i64*
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %43 = getelementptr inbounds %struct.GPR, %struct.GPR* %42, i32 0, i32 27
  %44 = getelementptr inbounds %struct.Reg, %struct.Reg* %43, i32 0, i32 0
  %R13 = bitcast %union.anon* %44 to i64*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %46 = getelementptr inbounds %struct.GPR, %struct.GPR* %45, i32 0, i32 29
  %47 = getelementptr inbounds %struct.Reg, %struct.Reg* %46, i32 0, i32 0
  %R14 = bitcast %union.anon* %47 to i64*
  %48 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %49 = getelementptr inbounds %struct.GPR, %struct.GPR* %48, i32 0, i32 31
  %50 = getelementptr inbounds %struct.Reg, %struct.Reg* %49, i32 0, i32 0
  %R15 = bitcast %union.anon* %50 to i64*
  %51 = load i64, i64* %R15
  %52 = load i64, i64* %PC
  %53 = add i64 %52, 2
  store i64 %53, i64* %PC
  %54 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %55 = load i64, i64* %54, align 8, !tbaa !2428
  %56 = add i64 %55, -8
  %57 = inttoptr i64 %56 to i64*
  store i64 %51, i64* %57
  store i64 %56, i64* %54, align 8, !tbaa !2428
  %58 = load i64, i64* %R14
  %59 = load i64, i64* %PC
  %60 = add i64 %59, 2
  store i64 %60, i64* %PC
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %62 = load i64, i64* %61, align 8, !tbaa !2428
  %63 = add i64 %62, -8
  %64 = inttoptr i64 %63 to i64*
  store i64 %58, i64* %64
  store i64 %63, i64* %61, align 8, !tbaa !2428
  %65 = load i64, i64* %RDX
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %R15, align 8, !tbaa !2428
  %68 = load i64, i64* %R13
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 2
  store i64 %70, i64* %PC
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %72 = load i64, i64* %71, align 8, !tbaa !2428
  %73 = add i64 %72, -8
  %74 = inttoptr i64 %73 to i64*
  store i64 %68, i64* %74
  store i64 %73, i64* %71, align 8, !tbaa !2428
  %75 = load i64, i64* %R12
  %76 = load i64, i64* %PC
  %77 = add i64 %76, 2
  store i64 %77, i64* %PC
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = add i64 %79, -8
  %81 = inttoptr i64 %80 to i64*
  store i64 %75, i64* %81
  store i64 %80, i64* %78, align 8, !tbaa !2428
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 7
  store i64 %83, i64* %PC
  store i64 ptrtoint (%seg_602df0__init_array_type* @seg_602df0__init_array to i64), i64* %R12, align 8, !tbaa !2428
  %84 = load i64, i64* %RBP
  %85 = load i64, i64* %PC
  %86 = add i64 %85, 1
  store i64 %86, i64* %PC
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %88 = load i64, i64* %87, align 8, !tbaa !2428
  %89 = add i64 %88, -8
  %90 = inttoptr i64 %89 to i64*
  store i64 %84, i64* %90
  store i64 %89, i64* %87, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 7
  store i64 %92, i64* %PC
  store i64 add (i64 ptrtoint (%seg_602df0__init_array_type* @seg_602df0__init_array to i64), i64 8), i64* %RBP, align 8, !tbaa !2428
  %93 = load i64, i64* %RBX
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 1
  store i64 %95, i64* %PC
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %97 = load i64, i64* %96, align 8, !tbaa !2428
  %98 = add i64 %97, -8
  %99 = inttoptr i64 %98 to i64*
  store i64 %93, i64* %99
  store i64 %98, i64* %96, align 8, !tbaa !2428
  %100 = bitcast i32* %R13D to i64*
  %101 = load i32, i32* %EDI
  %102 = zext i32 %101 to i64
  %103 = load i64, i64* %PC
  %104 = add i64 %103, 3
  store i64 %104, i64* %PC
  %105 = and i64 %102, 4294967295
  store i64 %105, i64* %100, align 8, !tbaa !2428
  %106 = load i64, i64* %RSI
  %107 = load i64, i64* %PC
  %108 = add i64 %107, 3
  store i64 %108, i64* %PC
  store i64 %106, i64* %R14, align 8, !tbaa !2428
  %109 = load i64, i64* %RBP
  %110 = load i64, i64* %R12
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 3
  store i64 %112, i64* %PC
  %113 = sub i64 %109, %110
  store i64 %113, i64* %RBP, align 8, !tbaa !2428
  %114 = icmp ult i64 %109, %110
  %115 = zext i1 %114 to i8
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %115, i8* %116, align 1, !tbaa !2432
  %117 = trunc i64 %113 to i32
  %118 = and i32 %117, 255
  %119 = call i32 @llvm.ctpop.i32(i32 %118) #16
  %120 = trunc i32 %119 to i8
  %121 = and i8 %120, 1
  %122 = xor i8 %121, 1
  %123 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %122, i8* %123, align 1, !tbaa !2446
  %124 = xor i64 %110, %109
  %125 = xor i64 %124, %113
  %126 = lshr i64 %125, 4
  %127 = trunc i64 %126 to i8
  %128 = and i8 %127, 1
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %128, i8* %129, align 1, !tbaa !2450
  %130 = icmp eq i64 %113, 0
  %131 = zext i1 %130 to i8
  %132 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %131, i8* %132, align 1, !tbaa !2447
  %133 = lshr i64 %113, 63
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %134, i8* %135, align 1, !tbaa !2448
  %136 = lshr i64 %109, 63
  %137 = lshr i64 %110, 63
  %138 = xor i64 %137, %136
  %139 = xor i64 %133, %136
  %140 = add nuw nsw i64 %139, %138
  %141 = icmp eq i64 %140, 2
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %142, i8* %143, align 1, !tbaa !2449
  %144 = load i64, i64* %RSP
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 4
  store i64 %146, i64* %PC
  %147 = sub i64 %144, 8
  store i64 %147, i64* %RSP, align 8, !tbaa !2428
  %148 = icmp ult i64 %144, 8
  %149 = zext i1 %148 to i8
  %150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %149, i8* %150, align 1, !tbaa !2432
  %151 = trunc i64 %147 to i32
  %152 = and i32 %151, 255
  %153 = call i32 @llvm.ctpop.i32(i32 %152) #16
  %154 = trunc i32 %153 to i8
  %155 = and i8 %154, 1
  %156 = xor i8 %155, 1
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %156, i8* %157, align 1, !tbaa !2446
  %158 = xor i64 8, %144
  %159 = xor i64 %158, %147
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i8
  %162 = and i8 %161, 1
  %163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %162, i8* %163, align 1, !tbaa !2450
  %164 = icmp eq i64 %147, 0
  %165 = zext i1 %164 to i8
  %166 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %165, i8* %166, align 1, !tbaa !2447
  %167 = lshr i64 %147, 63
  %168 = trunc i64 %167 to i8
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %168, i8* %169, align 1, !tbaa !2448
  %170 = lshr i64 %144, 63
  %171 = xor i64 %167, %170
  %172 = add nuw nsw i64 %171, %170
  %173 = icmp eq i64 %172, 2
  %174 = zext i1 %173 to i8
  %175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %174, i8* %175, align 1, !tbaa !2449
  %176 = load i64, i64* %RBP
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 4
  store i64 %178, i64* %PC
  %179 = ashr i64 %176, 2
  %180 = trunc i64 %179 to i8
  %181 = and i8 %180, 1
  %182 = ashr i64 %179, 1
  store i64 %182, i64* %RBP, align 8, !tbaa !2428
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %181, i8* %183, align 1, !tbaa !2451
  %184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %185 = trunc i64 %182 to i32
  %186 = and i32 %185, 255
  %187 = call i32 @llvm.ctpop.i32(i32 %186) #16
  %188 = trunc i32 %187 to i8
  %189 = and i8 %188, 1
  %190 = xor i8 %189, 1
  store i8 %190, i8* %184, align 1, !tbaa !2451
  %191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %191, align 1, !tbaa !2451
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %193 = icmp eq i64 %182, 0
  %194 = zext i1 %193 to i8
  store i8 %194, i8* %192, align 1, !tbaa !2451
  %195 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %196 = lshr i64 %182, 63
  %197 = trunc i64 %196 to i8
  store i8 %197, i8* %195, align 1, !tbaa !2451
  %198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %198, align 1, !tbaa !2451
  %199 = load i64, i64* %PC
  %200 = sub i64 %199, 8820
  %201 = load i64, i64* %PC
  %202 = add i64 %201, 5
  %203 = load i64, i64* %PC
  %204 = add i64 %203, 5
  store i64 %204, i64* %PC
  %205 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %206 = load i64, i64* %205, align 8, !tbaa !2428
  %207 = add i64 %206, -8
  %208 = inttoptr i64 %207 to i64*
  store i64 %202, i64* %208
  store i64 %207, i64* %205, align 8, !tbaa !2428
  %209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %200, i64* %209, align 8, !tbaa !2428
  %210 = load i64, i64* %PC
  %211 = call %struct.Memory* @sub_400418__init_proc(%struct.State* %0, i64 %210, %struct.Memory* %2)
  %212 = load i64, i64* %RBP
  %213 = load i64, i64* %RBP
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 3
  store i64 %215, i64* %PC
  %216 = and i64 %213, %212
  %217 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %217, align 1, !tbaa !2432
  %218 = trunc i64 %216 to i32
  %219 = and i32 %218, 255
  %220 = call i32 @llvm.ctpop.i32(i32 %219) #16
  %221 = trunc i32 %220 to i8
  %222 = and i8 %221, 1
  %223 = xor i8 %222, 1
  %224 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %223, i8* %224, align 1, !tbaa !2446
  %225 = icmp eq i64 %216, 0
  %226 = zext i1 %225 to i8
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %226, i8* %227, align 1, !tbaa !2447
  %228 = lshr i64 %216, 63
  %229 = trunc i64 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %229, i8* %230, align 1, !tbaa !2448
  %231 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %231, align 1, !tbaa !2449
  %232 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %232, align 1, !tbaa !2450
  %233 = load i64, i64* %PC
  %234 = add i64 %233, 34
  %235 = load i64, i64* %PC
  %236 = add i64 %235, 2
  %237 = load i64, i64* %PC
  %238 = add i64 %237, 2
  store i64 %238, i64* %PC
  %239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %240 = load i8, i8* %239, align 1, !tbaa !2447
  store i8 %240, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %241 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %242 = icmp ne i8 %240, 0
  %243 = select i1 %242, i64 %234, i64 %236
  store i64 %243, i64* %241, align 8, !tbaa !2428
  %244 = load i8, i8* %BRANCH_TAKEN
  %245 = icmp eq i8 %244, 1
  br i1 %245, label %block_4026b6, label %block_402696

block_4026b6:                                     ; preds = %block_4026a0, %block_402660
  %MEMORY.0 = phi %struct.Memory* [ %211, %block_402660 ], [ %387, %block_4026a0 ]
  %246 = load i64, i64* %RSP
  %247 = load i64, i64* %PC
  %248 = add i64 %247, 4
  store i64 %248, i64* %PC
  %249 = add i64 8, %246
  store i64 %249, i64* %RSP, align 8, !tbaa !2428
  %250 = icmp ult i64 %249, %246
  %251 = icmp ult i64 %249, 8
  %252 = or i1 %250, %251
  %253 = zext i1 %252 to i8
  %254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %253, i8* %254, align 1, !tbaa !2432
  %255 = trunc i64 %249 to i32
  %256 = and i32 %255, 255
  %257 = call i32 @llvm.ctpop.i32(i32 %256) #16
  %258 = trunc i32 %257 to i8
  %259 = and i8 %258, 1
  %260 = xor i8 %259, 1
  %261 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %260, i8* %261, align 1, !tbaa !2446
  %262 = xor i64 8, %246
  %263 = xor i64 %262, %249
  %264 = lshr i64 %263, 4
  %265 = trunc i64 %264 to i8
  %266 = and i8 %265, 1
  %267 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %266, i8* %267, align 1, !tbaa !2450
  %268 = icmp eq i64 %249, 0
  %269 = zext i1 %268 to i8
  %270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %269, i8* %270, align 1, !tbaa !2447
  %271 = lshr i64 %249, 63
  %272 = trunc i64 %271 to i8
  %273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %272, i8* %273, align 1, !tbaa !2448
  %274 = lshr i64 %246, 63
  %275 = xor i64 %271, %274
  %276 = add nuw nsw i64 %275, %271
  %277 = icmp eq i64 %276, 2
  %278 = zext i1 %277 to i8
  %279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %278, i8* %279, align 1, !tbaa !2449
  %280 = load i64, i64* %PC
  %281 = add i64 %280, 1
  store i64 %281, i64* %PC
  %282 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %283 = load i64, i64* %282, align 8, !tbaa !2428
  %284 = add i64 %283, 8
  %285 = inttoptr i64 %283 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RBX, align 8, !tbaa !2428
  store i64 %284, i64* %282, align 8, !tbaa !2428
  %287 = load i64, i64* %PC
  %288 = add i64 %287, 1
  store i64 %288, i64* %PC
  %289 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %290 = load i64, i64* %289, align 8, !tbaa !2428
  %291 = add i64 %290, 8
  %292 = inttoptr i64 %290 to i64*
  %293 = load i64, i64* %292
  store i64 %293, i64* %RBP, align 8, !tbaa !2428
  store i64 %291, i64* %289, align 8, !tbaa !2428
  %294 = load i64, i64* %PC
  %295 = add i64 %294, 2
  store i64 %295, i64* %PC
  %296 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %297 = load i64, i64* %296, align 8, !tbaa !2428
  %298 = add i64 %297, 8
  %299 = inttoptr i64 %297 to i64*
  %300 = load i64, i64* %299
  store i64 %300, i64* %R12, align 8, !tbaa !2428
  store i64 %298, i64* %296, align 8, !tbaa !2428
  %301 = load i64, i64* %PC
  %302 = add i64 %301, 2
  store i64 %302, i64* %PC
  %303 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %304 = load i64, i64* %303, align 8, !tbaa !2428
  %305 = add i64 %304, 8
  %306 = inttoptr i64 %304 to i64*
  %307 = load i64, i64* %306
  store i64 %307, i64* %R13, align 8, !tbaa !2428
  store i64 %305, i64* %303, align 8, !tbaa !2428
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 2
  store i64 %309, i64* %PC
  %310 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %311 = load i64, i64* %310, align 8, !tbaa !2428
  %312 = add i64 %311, 8
  %313 = inttoptr i64 %311 to i64*
  %314 = load i64, i64* %313
  store i64 %314, i64* %R14, align 8, !tbaa !2428
  store i64 %312, i64* %310, align 8, !tbaa !2428
  %315 = load i64, i64* %PC
  %316 = add i64 %315, 2
  store i64 %316, i64* %PC
  %317 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %318 = load i64, i64* %317, align 8, !tbaa !2428
  %319 = add i64 %318, 8
  %320 = inttoptr i64 %318 to i64*
  %321 = load i64, i64* %320
  store i64 %321, i64* %R15, align 8, !tbaa !2428
  store i64 %319, i64* %317, align 8, !tbaa !2428
  %322 = load i64, i64* %PC
  %323 = add i64 %322, 1
  store i64 %323, i64* %PC
  %324 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %325 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %326 = load i64, i64* %325, align 8, !tbaa !2428
  %327 = inttoptr i64 %326 to i64*
  %328 = load i64, i64* %327
  store i64 %328, i64* %324, align 8, !tbaa !2428
  %329 = add i64 %326, 8
  store i64 %329, i64* %325, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_402696:                                     ; preds = %block_402660
  %330 = load i64, i64* %RBX
  %331 = load i32, i32* %EBX
  %332 = zext i32 %331 to i64
  %333 = load i64, i64* %PC
  %334 = add i64 %333, 2
  store i64 %334, i64* %PC
  %335 = xor i64 %332, %330
  %336 = trunc i64 %335 to i32
  %337 = and i64 %335, 4294967295
  store i64 %337, i64* %RBX, align 8, !tbaa !2428
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %338, align 1, !tbaa !2432
  %339 = and i32 %336, 255
  %340 = call i32 @llvm.ctpop.i32(i32 %339) #16
  %341 = trunc i32 %340 to i8
  %342 = and i8 %341, 1
  %343 = xor i8 %342, 1
  %344 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %343, i8* %344, align 1, !tbaa !2446
  %345 = icmp eq i32 %336, 0
  %346 = zext i1 %345 to i8
  %347 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %346, i8* %347, align 1, !tbaa !2447
  %348 = lshr i32 %336, 31
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %349, i8* %350, align 1, !tbaa !2448
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %351, align 1, !tbaa !2449
  %352 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %352, align 1, !tbaa !2450
  %353 = load i64, i64* %RAX
  %354 = load i64, i64* %RAX
  %355 = add i64 %354, %353
  %356 = load i32, i32* %EAX
  %357 = zext i32 %356 to i64
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 8
  store i64 %359, i64* %PC
  br label %block_4026a0

block_4026a0:                                     ; preds = %block_4026a0, %block_402696
  %MEMORY.1 = phi %struct.Memory* [ %211, %block_402696 ], [ %387, %block_4026a0 ]
  %360 = load i64, i64* %R15
  %361 = load i64, i64* %PC
  %362 = add i64 %361, 3
  store i64 %362, i64* %PC
  store i64 %360, i64* %RDX, align 8, !tbaa !2428
  %363 = load i64, i64* %R14
  %364 = load i64, i64* %PC
  %365 = add i64 %364, 3
  store i64 %365, i64* %PC
  store i64 %363, i64* %RSI, align 8, !tbaa !2428
  %366 = load i32, i32* %R13D
  %367 = zext i32 %366 to i64
  %368 = load i64, i64* %PC
  %369 = add i64 %368, 3
  store i64 %369, i64* %PC
  %370 = and i64 %367, 4294967295
  store i64 %370, i64* %RDI, align 8, !tbaa !2428
  %371 = load i64, i64* %R12
  %372 = load i64, i64* %RBX
  %373 = mul i64 %372, 8
  %374 = add i64 %373, %371
  %375 = load i64, i64* %PC
  %376 = add i64 %375, 4
  %377 = load i64, i64* %PC
  %378 = add i64 %377, 4
  store i64 %378, i64* %PC
  %379 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %380 = load i64, i64* %379, align 8, !tbaa !2428
  %381 = add i64 %380, -8
  %382 = inttoptr i64 %381 to i64*
  store i64 %376, i64* %382
  store i64 %381, i64* %379, align 8, !tbaa !2428
  %383 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %384 = inttoptr i64 %374 to i64*
  %385 = load i64, i64* %384
  store i64 %385, i64* %383, align 8, !tbaa !2428
  %386 = load i64, i64* %PC
  %387 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %386, %struct.Memory* %MEMORY.1)
  %388 = load i64, i64* %RBX
  %389 = load i64, i64* %PC
  %390 = add i64 %389, 4
  store i64 %390, i64* %PC
  %391 = add i64 1, %388
  store i64 %391, i64* %RBX, align 8, !tbaa !2428
  %392 = icmp ult i64 %391, %388
  %393 = icmp ult i64 %391, 1
  %394 = or i1 %392, %393
  %395 = zext i1 %394 to i8
  %396 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %395, i8* %396, align 1, !tbaa !2432
  %397 = trunc i64 %391 to i32
  %398 = and i32 %397, 255
  %399 = call i32 @llvm.ctpop.i32(i32 %398) #16
  %400 = trunc i32 %399 to i8
  %401 = and i8 %400, 1
  %402 = xor i8 %401, 1
  %403 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %402, i8* %403, align 1, !tbaa !2446
  %404 = xor i64 1, %388
  %405 = xor i64 %404, %391
  %406 = lshr i64 %405, 4
  %407 = trunc i64 %406 to i8
  %408 = and i8 %407, 1
  %409 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %408, i8* %409, align 1, !tbaa !2450
  %410 = icmp eq i64 %391, 0
  %411 = zext i1 %410 to i8
  %412 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %411, i8* %412, align 1, !tbaa !2447
  %413 = lshr i64 %391, 63
  %414 = trunc i64 %413 to i8
  %415 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %414, i8* %415, align 1, !tbaa !2448
  %416 = lshr i64 %388, 63
  %417 = xor i64 %413, %416
  %418 = add nuw nsw i64 %417, %413
  %419 = icmp eq i64 %418, 2
  %420 = zext i1 %419 to i8
  %421 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %420, i8* %421, align 1, !tbaa !2449
  %422 = load i64, i64* %RBP
  %423 = load i64, i64* %RBX
  %424 = load i64, i64* %PC
  %425 = add i64 %424, 3
  store i64 %425, i64* %PC
  %426 = sub i64 %422, %423
  %427 = icmp ult i64 %422, %423
  %428 = zext i1 %427 to i8
  %429 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %428, i8* %429, align 1, !tbaa !2432
  %430 = trunc i64 %426 to i32
  %431 = and i32 %430, 255
  %432 = call i32 @llvm.ctpop.i32(i32 %431) #16
  %433 = trunc i32 %432 to i8
  %434 = and i8 %433, 1
  %435 = xor i8 %434, 1
  %436 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %435, i8* %436, align 1, !tbaa !2446
  %437 = xor i64 %423, %422
  %438 = xor i64 %437, %426
  %439 = lshr i64 %438, 4
  %440 = trunc i64 %439 to i8
  %441 = and i8 %440, 1
  %442 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %441, i8* %442, align 1, !tbaa !2450
  %443 = icmp eq i64 %426, 0
  %444 = zext i1 %443 to i8
  %445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %444, i8* %445, align 1, !tbaa !2447
  %446 = lshr i64 %426, 63
  %447 = trunc i64 %446 to i8
  %448 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %447, i8* %448, align 1, !tbaa !2448
  %449 = lshr i64 %422, 63
  %450 = lshr i64 %423, 63
  %451 = xor i64 %450, %449
  %452 = xor i64 %446, %449
  %453 = add nuw nsw i64 %452, %451
  %454 = icmp eq i64 %453, 2
  %455 = zext i1 %454 to i8
  %456 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %455, i8* %456, align 1, !tbaa !2449
  %457 = load i64, i64* %PC
  %458 = sub i64 %457, 20
  %459 = load i64, i64* %PC
  %460 = add i64 %459, 2
  %461 = load i64, i64* %PC
  %462 = add i64 %461, 2
  store i64 %462, i64* %PC
  %463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %464 = load i8, i8* %463, align 1, !tbaa !2447
  %465 = icmp eq i8 %464, 0
  %466 = zext i1 %465 to i8
  store i8 %466, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %467 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %468 = select i1 %465, i64 %458, i64 %460
  store i64 %468, i64* %467, align 8, !tbaa !2428
  %469 = load i8, i8* %BRANCH_TAKEN
  %470 = icmp eq i8 %469, 1
  br i1 %470, label %block_4026a0, label %block_4026b6
}

; Function Attrs: noinline
define %struct.Memory* @sub_400550_main(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400550:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %9 = bitcast %union.anon* %8 to %struct.anon.2*
  %AL = getelementptr inbounds %struct.anon.2, %struct.anon.2* %9, i32 0, i32 0
  %10 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %11 = getelementptr inbounds %struct.GPR, %struct.GPR* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.Reg, %struct.Reg* %11, i32 0, i32 0
  %EAX = bitcast %union.anon* %12 to i32*
  %13 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %14 = getelementptr inbounds %struct.GPR, %struct.GPR* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.Reg, %struct.Reg* %14, i32 0, i32 0
  %ECX = bitcast %union.anon* %15 to i32*
  %16 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %17 = getelementptr inbounds %struct.GPR, %struct.GPR* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.Reg, %struct.Reg* %17, i32 0, i32 0
  %RAX = bitcast %union.anon* %18 to i64*
  %19 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %20 = getelementptr inbounds %struct.GPR, %struct.GPR* %19, i32 0, i32 5
  %21 = getelementptr inbounds %struct.Reg, %struct.Reg* %20, i32 0, i32 0
  %RCX = bitcast %union.anon* %21 to i64*
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %23 = getelementptr inbounds %struct.GPR, %struct.GPR* %22, i32 0, i32 7
  %24 = getelementptr inbounds %struct.Reg, %struct.Reg* %23, i32 0, i32 0
  %RDX = bitcast %union.anon* %24 to i64*
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %26 = getelementptr inbounds %struct.GPR, %struct.GPR* %25, i32 0, i32 9
  %27 = getelementptr inbounds %struct.Reg, %struct.Reg* %26, i32 0, i32 0
  %RSI = bitcast %union.anon* %27 to i64*
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %29 = getelementptr inbounds %struct.GPR, %struct.GPR* %28, i32 0, i32 11
  %30 = getelementptr inbounds %struct.Reg, %struct.Reg* %29, i32 0, i32 0
  %RDI = bitcast %union.anon* %30 to i64*
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %32 = getelementptr inbounds %struct.GPR, %struct.GPR* %31, i32 0, i32 13
  %33 = getelementptr inbounds %struct.Reg, %struct.Reg* %32, i32 0, i32 0
  %RSP = bitcast %union.anon* %33 to i64*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %35 = getelementptr inbounds %struct.GPR, %struct.GPR* %34, i32 0, i32 15
  %36 = getelementptr inbounds %struct.Reg, %struct.Reg* %35, i32 0, i32 0
  %RBP = bitcast %union.anon* %36 to i64*
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %38 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %37, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %38 to %"class.std::bitset"*
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %40 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %39, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %40 to %"class.std::bitset"*
  %41 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %42 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %41, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %42 to %"class.std::bitset"*
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %44 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %43, i64 0, i64 3
  %YMM3 = bitcast %union.VectorReg* %44 to %"class.std::bitset"*
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %46 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %45, i64 0, i64 4
  %YMM4 = bitcast %union.VectorReg* %46 to %"class.std::bitset"*
  %47 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %48 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %47, i64 0, i64 5
  %YMM5 = bitcast %union.VectorReg* %48 to %"class.std::bitset"*
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %50 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %49, i64 0, i64 6
  %YMM6 = bitcast %union.VectorReg* %50 to %"class.std::bitset"*
  %51 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %52 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %51, i64 0, i64 7
  %YMM7 = bitcast %union.VectorReg* %52 to %"class.std::bitset"*
  %53 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %54 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %53, i64 0, i64 8
  %YMM8 = bitcast %union.VectorReg* %54 to %"class.std::bitset"*
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %56 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %55, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %56 to %union.vec128_t*
  %57 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %58 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %57, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %58 to %union.vec128_t*
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %60 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %59, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %60 to %union.vec128_t*
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %62 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %61, i64 0, i64 3
  %XMM3 = bitcast %union.VectorReg* %62 to %union.vec128_t*
  %63 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %64 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %63, i64 0, i64 4
  %XMM4 = bitcast %union.VectorReg* %64 to %union.vec128_t*
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %66 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %65, i64 0, i64 5
  %XMM5 = bitcast %union.VectorReg* %66 to %union.vec128_t*
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %68 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %67, i64 0, i64 6
  %XMM6 = bitcast %union.VectorReg* %68 to %union.vec128_t*
  %69 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %70 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %69, i64 0, i64 7
  %XMM7 = bitcast %union.VectorReg* %70 to %union.vec128_t*
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %72 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %71, i64 0, i64 8
  %XMM8 = bitcast %union.VectorReg* %72 to %union.vec128_t*
  %73 = load i64, i64* %RBP
  %74 = load i64, i64* %PC
  %75 = add i64 %74, 1
  store i64 %75, i64* %PC
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %77 = load i64, i64* %76, align 8, !tbaa !2428
  %78 = add i64 %77, -8
  %79 = inttoptr i64 %78 to i64*
  store i64 %73, i64* %79
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %80 = load i64, i64* %RSP
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 3
  store i64 %82, i64* %PC
  store i64 %80, i64* %RBP, align 8, !tbaa !2428
  %83 = load i64, i64* %RSP
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 7
  store i64 %85, i64* %PC
  %86 = sub i64 %83, 352
  store i64 %86, i64* %RSP, align 8, !tbaa !2428
  %87 = icmp ult i64 %83, 352
  %88 = zext i1 %87 to i8
  %89 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %88, i8* %89, align 1, !tbaa !2432
  %90 = trunc i64 %86 to i32
  %91 = and i32 %90, 255
  %92 = call i32 @llvm.ctpop.i32(i32 %91) #16
  %93 = trunc i32 %92 to i8
  %94 = and i8 %93, 1
  %95 = xor i8 %94, 1
  %96 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %95, i8* %96, align 1, !tbaa !2446
  %97 = xor i64 352, %83
  %98 = xor i64 %97, %86
  %99 = lshr i64 %98, 4
  %100 = trunc i64 %99 to i8
  %101 = and i8 %100, 1
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %101, i8* %102, align 1, !tbaa !2450
  %103 = icmp eq i64 %86, 0
  %104 = zext i1 %103 to i8
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %104, i8* %105, align 1, !tbaa !2447
  %106 = lshr i64 %86, 63
  %107 = trunc i64 %106 to i8
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %107, i8* %108, align 1, !tbaa !2448
  %109 = lshr i64 %83, 63
  %110 = xor i64 %106, %109
  %111 = add nuw nsw i64 %110, %109
  %112 = icmp eq i64 %111, 2
  %113 = zext i1 %112 to i8
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %113, i8* %114, align 1, !tbaa !2449
  %115 = load i64, i64* %PC
  %116 = add i64 %115, 10
  store i64 %116, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 304), i64* %RDI, align 8, !tbaa !2428
  %117 = load i64, i64* %RBP
  %118 = sub i64 %117, 4
  %119 = load i64, i64* %PC
  %120 = add i64 %119, 7
  store i64 %120, i64* %PC
  %121 = inttoptr i64 %118 to i32*
  store i32 0, i32* %121
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 2
  store i64 %123, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %124 = load i64, i64* %PC
  %125 = sub i64 %124, 302
  %126 = load i64, i64* %PC
  %127 = add i64 %126, 5
  %128 = load i64, i64* %PC
  %129 = add i64 %128, 5
  store i64 %129, i64* %PC
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = add i64 %131, -8
  %133 = inttoptr i64 %132 to i64*
  store i64 %127, i64* %133
  store i64 %132, i64* %130, align 8, !tbaa !2428
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %125, i64* %134, align 8, !tbaa !2428
  %135 = load i64, i64* %PC
  %136 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %135, %struct.Memory* %2)
  %137 = load i64, i64* %PC
  %138 = add i64 %137, 10
  store i64 %138, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 248), i64* %RDI, align 8, !tbaa !2428
  %139 = load i64, i64* %RBP
  %140 = sub i64 %139, 92
  %141 = load i32, i32* %EAX
  %142 = zext i32 %141 to i64
  %143 = load i64, i64* %PC
  %144 = add i64 %143, 3
  store i64 %144, i64* %PC
  %145 = inttoptr i64 %140 to i32*
  store i32 %141, i32* %145
  %146 = load i64, i64* %PC
  %147 = add i64 %146, 2
  store i64 %147, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %148 = load i64, i64* %PC
  %149 = sub i64 %148, 322
  %150 = load i64, i64* %PC
  %151 = add i64 %150, 5
  %152 = load i64, i64* %PC
  %153 = add i64 %152, 5
  store i64 %153, i64* %PC
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %155 = load i64, i64* %154, align 8, !tbaa !2428
  %156 = add i64 %155, -8
  %157 = inttoptr i64 %156 to i64*
  store i64 %151, i64* %157
  store i64 %156, i64* %154, align 8, !tbaa !2428
  %158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %149, i64* %158, align 8, !tbaa !2428
  %159 = load i64, i64* %PC
  %160 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %159, %struct.Memory* %136)
  %161 = load i64, i64* %PC
  %162 = add i64 %161, 10
  store i64 %162, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 306), i64* %RDI, align 8, !tbaa !2428
  %163 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %164 = load i64, i64* %PC
  %165 = add i64 %164, 8
  store i64 %165, i64* %PC
  %166 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 8) to double*)
  %167 = bitcast i8* %163 to double*
  store double %166, double* %167, align 1, !tbaa !2452
  %168 = getelementptr inbounds i8, i8* %163, i64 8
  %169 = bitcast i8* %168 to double*
  store double 0.000000e+00, double* %169, align 1, !tbaa !2452
  %170 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %171 = load i64, i64* %PC
  %172 = add i64 %171, 8
  store i64 %172, i64* %PC
  %173 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 16) to double*)
  %174 = bitcast i8* %170 to double*
  store double %173, double* %174, align 1, !tbaa !2452
  %175 = getelementptr inbounds i8, i8* %170, i64 8
  %176 = bitcast i8* %175 to double*
  store double 0.000000e+00, double* %176, align 1, !tbaa !2452
  %177 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %178 = load i64, i64* %PC
  %179 = add i64 %178, 8
  store i64 %179, i64* %PC
  %180 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 24) to double*)
  %181 = bitcast i8* %177 to double*
  store double %180, double* %181, align 1, !tbaa !2452
  %182 = getelementptr inbounds i8, i8* %177, i64 8
  %183 = bitcast i8* %182 to double*
  store double 0.000000e+00, double* %183, align 1, !tbaa !2452
  %184 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %185 = load i64, i64* %PC
  %186 = add i64 %185, 8
  store i64 %186, i64* %PC
  %187 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 32) to double*)
  %188 = bitcast i8* %184 to double*
  store double %187, double* %188, align 1, !tbaa !2452
  %189 = getelementptr inbounds i8, i8* %184, i64 8
  %190 = bitcast i8* %189 to double*
  store double 0.000000e+00, double* %190, align 1, !tbaa !2452
  %191 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %192 = load i64, i64* %PC
  %193 = add i64 %192, 8
  store i64 %193, i64* %PC
  %194 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 40) to double*)
  %195 = bitcast i8* %191 to double*
  store double %194, double* %195, align 1, !tbaa !2452
  %196 = getelementptr inbounds i8, i8* %191, i64 8
  %197 = bitcast i8* %196 to double*
  store double 0.000000e+00, double* %197, align 1, !tbaa !2452
  %198 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %199 = load i64, i64* %PC
  %200 = add i64 %199, 8
  store i64 %200, i64* %PC
  %201 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 48) to double*)
  %202 = bitcast i8* %198 to double*
  store double %201, double* %202, align 1, !tbaa !2452
  %203 = getelementptr inbounds i8, i8* %198, i64 8
  %204 = bitcast i8* %203 to double*
  store double 0.000000e+00, double* %204, align 1, !tbaa !2452
  %205 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %206 = load i64, i64* %PC
  %207 = add i64 %206, 8
  store i64 %207, i64* %PC
  %208 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 56) to double*)
  %209 = bitcast i8* %205 to double*
  store double %208, double* %209, align 1, !tbaa !2452
  %210 = getelementptr inbounds i8, i8* %205, i64 8
  %211 = bitcast i8* %210 to double*
  store double 0.000000e+00, double* %211, align 1, !tbaa !2452
  %212 = load i64, i64* %RBP
  %213 = sub i64 %212, 56
  %214 = load i64, i64* %PC
  %215 = add i64 %214, 8
  store i64 %215, i64* %PC
  %216 = inttoptr i64 %213 to i64*
  store i64 15625, i64* %216
  %217 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %218 = load i64, i64* %RBP
  %219 = sub i64 %218, 56
  %220 = load i64, i64* %PC
  %221 = add i64 %220, 6
  store i64 %221, i64* %PC
  %222 = inttoptr i64 %219 to i64*
  %223 = load i64, i64* %222
  %224 = sitofp i64 %223 to double
  %225 = bitcast i8* %217 to double*
  store double %224, double* %225, align 1, !tbaa !2452
  %226 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %227 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %228 = bitcast %union.vec128_t* %XMM7 to i8*
  %229 = load i64, i64* %PC
  %230 = add i64 %229, 4
  store i64 %230, i64* %PC
  %231 = bitcast i8* %227 to double*
  %232 = load double, double* %231, align 1
  %233 = getelementptr inbounds i8, i8* %227, i64 8
  %234 = bitcast i8* %233 to i64*
  %235 = load i64, i64* %234, align 1
  %236 = bitcast i8* %228 to double*
  %237 = load double, double* %236, align 1
  %238 = fdiv double %232, %237
  %239 = bitcast i8* %226 to double*
  store double %238, double* %239, align 1, !tbaa !2452
  %240 = getelementptr inbounds i8, i8* %226, i64 8
  %241 = bitcast i8* %240 to i64*
  store i64 %235, i64* %241, align 1, !tbaa !2452
  %242 = bitcast %union.vec128_t* %XMM6 to i8*
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 9
  store i64 %244, i64* %PC
  %245 = bitcast i8* %242 to double*
  %246 = load double, double* %245, align 1
  store double %246, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %247 = bitcast %union.vec128_t* %XMM4 to i8*
  %248 = load i64, i64* %PC
  %249 = add i64 %248, 9
  store i64 %249, i64* %PC
  %250 = bitcast i8* %247 to double*
  %251 = load double, double* %250, align 1
  store double %251, double* bitcast (%TLimit_type* @TLimit to double*)
  %252 = load i64, i64* %RBP
  %253 = sub i64 %252, 64
  %254 = load i64, i64* %PC
  %255 = add i64 %254, 8
  store i64 %255, i64* %PC
  %256 = inttoptr i64 %253 to i64*
  store i64 512000000, i64* %256
  %257 = bitcast %union.vec128_t* %XMM5 to i8*
  %258 = load i64, i64* %PC
  %259 = add i64 %258, 9
  store i64 %259, i64* %PC
  %260 = bitcast i8* %257 to double*
  %261 = load double, double* %260, align 1
  store double %261, double* bitcast (%piref_type* @piref to double*)
  %262 = bitcast %union.vec128_t* %XMM4 to i8*
  %263 = load i64, i64* %PC
  %264 = add i64 %263, 9
  store i64 %264, i64* %PC
  %265 = bitcast i8* %262 to double*
  %266 = load double, double* %265, align 1
  store double %266, double* bitcast (%one_type* @one to double*)
  %267 = bitcast %union.vec128_t* %XMM3 to i8*
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 9
  store i64 %269, i64* %PC
  %270 = bitcast i8* %267 to double*
  %271 = load double, double* %270, align 1
  store double %271, double* bitcast (%two_type* @two to double*)
  %272 = bitcast %union.vec128_t* %XMM2 to i8*
  %273 = load i64, i64* %PC
  %274 = add i64 %273, 9
  store i64 %274, i64* %PC
  %275 = bitcast i8* %272 to double*
  %276 = load double, double* %275, align 1
  store double %276, double* bitcast (%three_type* @three to double*)
  %277 = bitcast %union.vec128_t* %XMM1 to i8*
  %278 = load i64, i64* %PC
  %279 = add i64 %278, 9
  store i64 %279, i64* %PC
  %280 = bitcast i8* %277 to double*
  %281 = load double, double* %280, align 1
  store double %281, double* bitcast (%four_type* @four to double*)
  %282 = bitcast %union.vec128_t* %XMM0 to i8*
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 9
  store i64 %284, i64* %PC
  %285 = bitcast i8* %282 to double*
  %286 = load double, double* %285, align 1
  store double %286, double* bitcast (%five_type* @five to double*)
  %287 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %288 = load i64, i64* %PC
  %289 = add i64 %288, 9
  store i64 %289, i64* %PC
  %290 = load double, double* bitcast (%one_type* @one to double*)
  %291 = bitcast i8* %287 to double*
  store double %290, double* %291, align 1, !tbaa !2452
  %292 = getelementptr inbounds i8, i8* %287, i64 8
  %293 = bitcast i8* %292 to double*
  store double 0.000000e+00, double* %293, align 1, !tbaa !2452
  %294 = bitcast %union.vec128_t* %XMM0 to i8*
  %295 = load i64, i64* %PC
  %296 = add i64 %295, 9
  store i64 %296, i64* %PC
  %297 = bitcast i8* %294 to double*
  %298 = load double, double* %297, align 1
  store double %298, double* bitcast (%scale_type* @scale to double*)
  %299 = load i64, i64* %RBP
  %300 = sub i64 %299, 96
  %301 = load i32, i32* %EAX
  %302 = zext i32 %301 to i64
  %303 = load i64, i64* %PC
  %304 = add i64 %303, 3
  store i64 %304, i64* %PC
  %305 = inttoptr i64 %300 to i32*
  store i32 %301, i32* %305
  %306 = load i64, i64* %PC
  %307 = add i64 %306, 2
  store i64 %307, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %308 = load i64, i64* %PC
  %309 = sub i64 %308, 514
  %310 = load i64, i64* %PC
  %311 = add i64 %310, 5
  %312 = load i64, i64* %PC
  %313 = add i64 %312, 5
  store i64 %313, i64* %PC
  %314 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %315 = load i64, i64* %314, align 8, !tbaa !2428
  %316 = add i64 %315, -8
  %317 = inttoptr i64 %316 to i64*
  store i64 %311, i64* %317
  store i64 %316, i64* %314, align 8, !tbaa !2428
  %318 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %309, i64* %318, align 8, !tbaa !2428
  %319 = load i64, i64* %PC
  %320 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %319, %struct.Memory* %160)
  %321 = load i64, i64* %PC
  %322 = add i64 %321, 10
  store i64 %322, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 354), i64* %RDI, align 8, !tbaa !2428
  %323 = load i64, i64* %RBP
  %324 = sub i64 %323, 100
  %325 = load i32, i32* %EAX
  %326 = zext i32 %325 to i64
  %327 = load i64, i64* %PC
  %328 = add i64 %327, 3
  store i64 %328, i64* %PC
  %329 = inttoptr i64 %324 to i32*
  store i32 %325, i32* %329
  %330 = load i64, i64* %PC
  %331 = add i64 %330, 2
  store i64 %331, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %332 = load i64, i64* %PC
  %333 = sub i64 %332, 534
  %334 = load i64, i64* %PC
  %335 = add i64 %334, 5
  %336 = load i64, i64* %PC
  %337 = add i64 %336, 5
  store i64 %337, i64* %PC
  %338 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %339 = load i64, i64* %338, align 8, !tbaa !2428
  %340 = add i64 %339, -8
  %341 = inttoptr i64 %340 to i64*
  store i64 %335, i64* %341
  store i64 %340, i64* %338, align 8, !tbaa !2428
  %342 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %333, i64* %342, align 8, !tbaa !2428
  %343 = load i64, i64* %PC
  %344 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %343, %struct.Memory* %320)
  %345 = load i64, i64* %PC
  %346 = add i64 %345, 10
  store i64 %346, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %347 = load i64, i64* %RBP
  %348 = sub i64 %347, 104
  %349 = load i32, i32* %EAX
  %350 = zext i32 %349 to i64
  %351 = load i64, i64* %PC
  %352 = add i64 %351, 3
  store i64 %352, i64* %PC
  %353 = inttoptr i64 %348 to i32*
  store i32 %349, i32* %353
  %354 = load i64, i64* %PC
  %355 = add i64 %354, 8040
  %356 = load i64, i64* %PC
  %357 = add i64 %356, 5
  %358 = load i64, i64* %PC
  %359 = add i64 %358, 5
  store i64 %359, i64* %PC
  %360 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %361 = load i64, i64* %360, align 8, !tbaa !2428
  %362 = add i64 %361, -8
  %363 = inttoptr i64 %362 to i64*
  store i64 %357, i64* %363
  store i64 %362, i64* %360, align 8, !tbaa !2428
  %364 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %355, i64* %364, align 8, !tbaa !2428
  %365 = load i64, i64* %PC
  %366 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %365, %struct.Memory* %344)
  %367 = load i64, i64* %PC
  %368 = add i64 %367, 10
  store i64 %368, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %369 = load i64, i64* %RBP
  %370 = sub i64 %369, 108
  %371 = load i32, i32* %EAX
  %372 = zext i32 %371 to i64
  %373 = load i64, i64* %PC
  %374 = add i64 %373, 3
  store i64 %374, i64* %PC
  %375 = inttoptr i64 %370 to i32*
  store i32 %371, i32* %375
  %376 = load i64, i64* %PC
  %377 = add i64 %376, 8022
  %378 = load i64, i64* %PC
  %379 = add i64 %378, 5
  %380 = load i64, i64* %PC
  %381 = add i64 %380, 5
  store i64 %381, i64* %PC
  %382 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %383 = load i64, i64* %382, align 8, !tbaa !2428
  %384 = add i64 %383, -8
  %385 = inttoptr i64 %384 to i64*
  store i64 %379, i64* %385
  store i64 %384, i64* %382, align 8, !tbaa !2428
  %386 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %377, i64* %386, align 8, !tbaa !2428
  %387 = load i64, i64* %PC
  %388 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %387, %struct.Memory* %366)
  %389 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %390 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %391 = bitcast %union.vec128_t* %XMM0 to i8*
  %392 = load i64, i64* %PC
  %393 = add i64 %392, 3
  store i64 %393, i64* %PC
  %394 = bitcast i8* %390 to i64*
  %395 = load i64, i64* %394, align 1
  %396 = getelementptr inbounds i8, i8* %390, i64 8
  %397 = bitcast i8* %396 to i64*
  %398 = load i64, i64* %397, align 1
  %399 = bitcast i8* %391 to i64*
  %400 = load i64, i64* %399, align 1
  %401 = getelementptr inbounds i8, i8* %391, i64 8
  %402 = bitcast i8* %401 to i64*
  %403 = load i64, i64* %402, align 1
  %404 = xor i64 %400, %395
  %405 = xor i64 %403, %398
  %406 = trunc i64 %404 to i32
  %407 = lshr i64 %404, 32
  %408 = trunc i64 %407 to i32
  %409 = bitcast i8* %389 to i32*
  store i32 %406, i32* %409, align 1, !tbaa !2454
  %410 = getelementptr inbounds i8, i8* %389, i64 4
  %411 = bitcast i8* %410 to i32*
  store i32 %408, i32* %411, align 1, !tbaa !2454
  %412 = trunc i64 %405 to i32
  %413 = getelementptr inbounds i8, i8* %389, i64 8
  %414 = bitcast i8* %413 to i32*
  store i32 %412, i32* %414, align 1, !tbaa !2454
  %415 = lshr i64 %405, 32
  %416 = trunc i64 %415 to i32
  %417 = getelementptr inbounds i8, i8* %389, i64 12
  %418 = bitcast i8* %417 to i32*
  store i32 %416, i32* %418, align 1, !tbaa !2454
  %419 = load i64, i64* %RBP
  %420 = sub i64 %419, 56
  %421 = load i64, i64* %PC
  %422 = add i64 %421, 4
  store i64 %422, i64* %PC
  %423 = inttoptr i64 %420 to i64*
  %424 = load i64, i64* %423
  store i64 %424, i64* %RDI, align 8, !tbaa !2428
  %425 = load i64, i64* %RBP
  %426 = sub i64 %425, 88
  %427 = load i64, i64* %RDI
  %428 = load i64, i64* %PC
  %429 = add i64 %428, 4
  store i64 %429, i64* %PC
  %430 = inttoptr i64 %426 to i64*
  store i64 %427, i64* %430
  %431 = bitcast %union.vec128_t* %XMM0 to i8*
  %432 = load i64, i64* %PC
  %433 = add i64 %432, 9
  store i64 %433, i64* %PC
  %434 = bitcast i8* %431 to double*
  %435 = load double, double* %434, align 1
  store double %435, double* bitcast (%sa_type* @sa to double*)
  %436 = load i64, i64* %RBP
  %437 = sub i64 %436, 112
  %438 = load i32, i32* %EAX
  %439 = zext i32 %438 to i64
  %440 = load i64, i64* %PC
  %441 = add i64 %440, 3
  store i64 %441, i64* %PC
  %442 = inttoptr i64 %437 to i32*
  store i32 %438, i32* %442
  br label %block_400696

block_400b77:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1
  %443 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %444 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %445 = bitcast %union.vec128_t* %XMM0 to i8*
  %446 = load i64, i64* %PC
  %447 = add i64 %446, 3
  store i64 %447, i64* %PC
  %448 = bitcast i8* %444 to i64*
  %449 = load i64, i64* %448, align 1
  %450 = getelementptr inbounds i8, i8* %444, i64 8
  %451 = bitcast i8* %450 to i64*
  %452 = load i64, i64* %451, align 1
  %453 = bitcast i8* %445 to i64*
  %454 = load i64, i64* %453, align 1
  %455 = getelementptr inbounds i8, i8* %445, i64 8
  %456 = bitcast i8* %455 to i64*
  %457 = load i64, i64* %456, align 1
  %458 = xor i64 %454, %449
  %459 = xor i64 %457, %452
  %460 = trunc i64 %458 to i32
  %461 = lshr i64 %458, 32
  %462 = trunc i64 %461 to i32
  %463 = bitcast i8* %443 to i32*
  store i32 %460, i32* %463, align 1, !tbaa !2454
  %464 = getelementptr inbounds i8, i8* %443, i64 4
  %465 = bitcast i8* %464 to i32*
  store i32 %462, i32* %465, align 1, !tbaa !2454
  %466 = trunc i64 %459 to i32
  %467 = getelementptr inbounds i8, i8* %443, i64 8
  %468 = bitcast i8* %467 to i32*
  store i32 %466, i32* %468, align 1, !tbaa !2454
  %469 = lshr i64 %459, 32
  %470 = trunc i64 %469 to i32
  %471 = getelementptr inbounds i8, i8* %443, i64 12
  %472 = bitcast i8* %471 to i32*
  store i32 %470, i32* %472, align 1, !tbaa !2454
  %473 = bitcast %union.vec128_t* %XMM0 to i8*
  %474 = load i64, i64* %PC
  %475 = add i64 %474, 9
  store i64 %475, i64* %PC
  %476 = bitcast i8* %473 to double*
  %477 = load double, double* %476, align 1
  store double %477, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  br label %block_400b83

block_401d53:                                     ; preds = %block_401cba
  %478 = load i64, i64* %PC
  %479 = add i64 %478, 10
  store i64 %479, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %480 = load i64, i64* %PC
  %481 = add i64 %480, 2163
  %482 = load i64, i64* %PC
  %483 = add i64 %482, 5
  %484 = load i64, i64* %PC
  %485 = add i64 %484, 5
  store i64 %485, i64* %PC
  %486 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %487 = load i64, i64* %486, align 8, !tbaa !2428
  %488 = add i64 %487, -8
  %489 = inttoptr i64 %488 to i64*
  store i64 %483, i64* %489
  store i64 %488, i64* %486, align 8, !tbaa !2428
  %490 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %481, i64* %490, align 8, !tbaa !2428
  %491 = load i64, i64* %PC
  %492 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %491, %struct.Memory* %MEMORY.7)
  %493 = load i64, i64* %PC
  %494 = add i64 %493, 10
  store i64 %494, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 606), i64* %RDI, align 8, !tbaa !2428
  %495 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %496 = load i64, i64* %PC
  %497 = add i64 %496, 8
  store i64 %497, i64* %PC
  %498 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 72) to double*)
  %499 = bitcast i8* %495 to double*
  store double %498, double* %499, align 1, !tbaa !2452
  %500 = getelementptr inbounds i8, i8* %495, i64 8
  %501 = bitcast i8* %500 to double*
  store double 0.000000e+00, double* %501, align 1, !tbaa !2452
  %502 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %503 = load i64, i64* %PC
  %504 = add i64 %503, 8
  store i64 %504, i64* %PC
  %505 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 168) to double*)
  %506 = bitcast i8* %502 to double*
  store double %505, double* %506, align 1, !tbaa !2452
  %507 = getelementptr inbounds i8, i8* %502, i64 8
  %508 = bitcast i8* %507 to double*
  store double 0.000000e+00, double* %508, align 1, !tbaa !2452
  %509 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %510 = load i64, i64* %PC
  %511 = add i64 %510, 8
  store i64 %511, i64* %PC
  %512 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 176) to double*)
  %513 = bitcast i8* %509 to double*
  store double %512, double* %513, align 1, !tbaa !2452
  %514 = getelementptr inbounds i8, i8* %509, i64 8
  %515 = bitcast i8* %514 to double*
  store double 0.000000e+00, double* %515, align 1, !tbaa !2452
  %516 = load i64, i64* %PC
  %517 = add i64 %516, 10
  store i64 %517, i64* %PC
  store i64 -9223372036854775808, i64* %RCX, align 8, !tbaa !2428
  %518 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %519 = load i64, i64* %PC
  %520 = add i64 %519, 8
  store i64 %520, i64* %PC
  %521 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 184) to double*)
  %522 = bitcast i8* %518 to double*
  store double %521, double* %522, align 1, !tbaa !2452
  %523 = getelementptr inbounds i8, i8* %518, i64 8
  %524 = bitcast i8* %523 to double*
  store double 0.000000e+00, double* %524, align 1, !tbaa !2452
  %525 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %526 = load i64, i64* %PC
  %527 = add i64 %526, 9
  store i64 %527, i64* %PC
  %528 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %529 = bitcast i8* %525 to double*
  store double %528, double* %529, align 1, !tbaa !2452
  %530 = getelementptr inbounds i8, i8* %525, i64 8
  %531 = bitcast i8* %530 to double*
  store double 0.000000e+00, double* %531, align 1, !tbaa !2452
  %532 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %533 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %534 = load i64, i64* %PC
  %535 = add i64 %534, 9
  store i64 %535, i64* %PC
  %536 = bitcast i8* %533 to double*
  %537 = load double, double* %536, align 1
  %538 = getelementptr inbounds i8, i8* %533, i64 8
  %539 = bitcast i8* %538 to i64*
  %540 = load i64, i64* %539, align 1
  %541 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %542 = fmul double %537, %541
  %543 = bitcast i8* %532 to double*
  store double %542, double* %543, align 1, !tbaa !2452
  %544 = getelementptr inbounds i8, i8* %532, i64 8
  %545 = bitcast i8* %544 to i64*
  store i64 %540, i64* %545, align 1, !tbaa !2452
  %546 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %547 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %548 = load i64, i64* %PC
  %549 = add i64 %548, 9
  store i64 %549, i64* %PC
  %550 = bitcast i8* %547 to double*
  %551 = load double, double* %550, align 1
  %552 = getelementptr inbounds i8, i8* %547, i64 8
  %553 = bitcast i8* %552 to i64*
  %554 = load i64, i64* %553, align 1
  %555 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %556 = fsub double %551, %555
  %557 = bitcast i8* %546 to double*
  store double %556, double* %557, align 1, !tbaa !2452
  %558 = getelementptr inbounds i8, i8* %546, i64 8
  %559 = bitcast i8* %558 to i64*
  store i64 %554, i64* %559, align 1, !tbaa !2452
  %560 = bitcast %union.vec128_t* %XMM4 to i8*
  %561 = load i64, i64* %PC
  %562 = add i64 %561, 9
  store i64 %562, i64* %PC
  %563 = bitcast i8* %560 to double*
  %564 = load double, double* %563, align 1
  store double %564, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 168) to double*)
  %565 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %566 = load i64, i64* %PC
  %567 = add i64 %566, 9
  store i64 %567, i64* %PC
  %568 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 168) to double*)
  %569 = bitcast i8* %565 to double*
  store double %568, double* %569, align 1, !tbaa !2452
  %570 = getelementptr inbounds i8, i8* %565, i64 8
  %571 = bitcast i8* %570 to double*
  store double 0.000000e+00, double* %571, align 1, !tbaa !2452
  %572 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %573 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %574 = bitcast %union.vec128_t* %XMM3 to i8*
  %575 = load i64, i64* %PC
  %576 = add i64 %575, 4
  store i64 %576, i64* %PC
  %577 = bitcast i8* %573 to double*
  %578 = load double, double* %577, align 1
  %579 = getelementptr inbounds i8, i8* %573, i64 8
  %580 = bitcast i8* %579 to i64*
  %581 = load i64, i64* %580, align 1
  %582 = bitcast i8* %574 to double*
  %583 = load double, double* %582, align 1
  %584 = fdiv double %578, %583
  %585 = bitcast i8* %572 to double*
  store double %584, double* %585, align 1, !tbaa !2452
  %586 = getelementptr inbounds i8, i8* %572, i64 8
  %587 = bitcast i8* %586 to i64*
  store i64 %581, i64* %587, align 1, !tbaa !2452
  %588 = bitcast %union.vec128_t* %XMM4 to i8*
  %589 = load i64, i64* %PC
  %590 = add i64 %589, 9
  store i64 %590, i64* %PC
  %591 = bitcast i8* %588 to double*
  %592 = load double, double* %591, align 1
  store double %592, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 176) to double*)
  %593 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %594 = load i64, i64* %PC
  %595 = add i64 %594, 9
  store i64 %595, i64* %PC
  %596 = load double, double* bitcast (%sa_type* @sa to double*)
  %597 = bitcast i8* %593 to double*
  store double %596, double* %597, align 1, !tbaa !2452
  %598 = getelementptr inbounds i8, i8* %593, i64 8
  %599 = bitcast i8* %598 to double*
  store double 0.000000e+00, double* %599, align 1, !tbaa !2452
  %600 = load i64, i64* %RBP
  %601 = sub i64 %600, 48
  %602 = bitcast %union.vec128_t* %XMM3 to i8*
  %603 = load i64, i64* %PC
  %604 = add i64 %603, 5
  store i64 %604, i64* %PC
  %605 = bitcast i8* %602 to double*
  %606 = load double, double* %605, align 1
  %607 = inttoptr i64 %601 to double*
  store double %606, double* %607
  %608 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %609 = load i64, i64* %RBP
  %610 = sub i64 %609, 48
  %611 = load i64, i64* %PC
  %612 = add i64 %611, 5
  store i64 %612, i64* %PC
  %613 = inttoptr i64 %610 to double*
  %614 = load double, double* %613
  %615 = bitcast i8* %608 to double*
  store double %614, double* %615, align 1, !tbaa !2452
  %616 = getelementptr inbounds i8, i8* %608, i64 8
  %617 = bitcast i8* %616 to double*
  store double 0.000000e+00, double* %617, align 1, !tbaa !2452
  %618 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %619 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %620 = load i64, i64* %RBP
  %621 = sub i64 %620, 48
  %622 = load i64, i64* %PC
  %623 = add i64 %622, 5
  store i64 %623, i64* %PC
  %624 = bitcast i8* %619 to double*
  %625 = load double, double* %624, align 1
  %626 = getelementptr inbounds i8, i8* %619, i64 8
  %627 = bitcast i8* %626 to i64*
  %628 = load i64, i64* %627, align 1
  %629 = inttoptr i64 %621 to double*
  %630 = load double, double* %629
  %631 = fmul double %625, %630
  %632 = bitcast i8* %618 to double*
  store double %631, double* %632, align 1, !tbaa !2452
  %633 = getelementptr inbounds i8, i8* %618, i64 8
  %634 = bitcast i8* %633 to i64*
  store i64 %628, i64* %634, align 1, !tbaa !2452
  %635 = load i64, i64* %RBP
  %636 = sub i64 %635, 24
  %637 = bitcast %union.vec128_t* %XMM3 to i8*
  %638 = load i64, i64* %PC
  %639 = add i64 %638, 5
  store i64 %639, i64* %PC
  %640 = bitcast i8* %637 to double*
  %641 = load double, double* %640, align 1
  %642 = inttoptr i64 %636 to double*
  store double %641, double* %642
  %643 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %644 = load i64, i64* %RBP
  %645 = sub i64 %644, 40
  %646 = load i64, i64* %PC
  %647 = add i64 %646, 5
  store i64 %647, i64* %PC
  %648 = inttoptr i64 %645 to double*
  %649 = load double, double* %648
  %650 = bitcast i8* %643 to double*
  store double %649, double* %650, align 1, !tbaa !2452
  %651 = getelementptr inbounds i8, i8* %643, i64 8
  %652 = bitcast i8* %651 to double*
  store double 0.000000e+00, double* %652, align 1, !tbaa !2452
  %653 = bitcast %union.vec128_t* %XMM3 to i8*
  %654 = load i64, i64* %PC
  %655 = add i64 %654, 5
  store i64 %655, i64* %PC
  %656 = bitcast i8* %653 to i64*
  %657 = load i64, i64* %656, align 1
  store i64 %657, i64* %RDX, align 1, !tbaa !2428
  %658 = load i64, i64* %RDX
  %659 = load i64, i64* %RCX
  %660 = load i64, i64* %PC
  %661 = add i64 %660, 3
  store i64 %661, i64* %PC
  %662 = xor i64 %659, %658
  store i64 %662, i64* %RDX, align 8, !tbaa !2428
  %663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %663, align 1, !tbaa !2432
  %664 = trunc i64 %662 to i32
  %665 = and i32 %664, 255
  %666 = call i32 @llvm.ctpop.i32(i32 %665) #16
  %667 = trunc i32 %666 to i8
  %668 = and i8 %667, 1
  %669 = xor i8 %668, 1
  %670 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %669, i8* %670, align 1, !tbaa !2446
  %671 = icmp eq i64 %662, 0
  %672 = zext i1 %671 to i8
  %673 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %672, i8* %673, align 1, !tbaa !2447
  %674 = lshr i64 %662, 63
  %675 = trunc i64 %674 to i8
  %676 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %675, i8* %676, align 1, !tbaa !2448
  %677 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %677, align 1, !tbaa !2449
  %678 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %678, align 1, !tbaa !2450
  %679 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %680 = load i64, i64* %RDX
  %681 = load i64, i64* %PC
  %682 = add i64 %681, 5
  store i64 %682, i64* %PC
  %683 = bitcast i8* %679 to i64*
  store i64 %680, i64* %683, align 1, !tbaa !2428
  %684 = getelementptr inbounds i8, i8* %679, i64 8
  %685 = bitcast i8* %684 to i64*
  store i64 0, i64* %685, align 1, !tbaa !2428
  %686 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %687 = load i64, i64* %RBP
  %688 = sub i64 %687, 40
  %689 = load i64, i64* %PC
  %690 = add i64 %689, 5
  store i64 %690, i64* %PC
  %691 = inttoptr i64 %688 to double*
  %692 = load double, double* %691
  %693 = bitcast i8* %686 to double*
  store double %692, double* %693, align 1, !tbaa !2452
  %694 = getelementptr inbounds i8, i8* %686, i64 8
  %695 = bitcast i8* %694 to double*
  store double 0.000000e+00, double* %695, align 1, !tbaa !2452
  %696 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %697 = load i64, i64* %RBP
  %698 = sub i64 %697, 48
  %699 = load i64, i64* %PC
  %700 = add i64 %699, 5
  store i64 %700, i64* %PC
  %701 = inttoptr i64 %698 to double*
  %702 = load double, double* %701
  %703 = bitcast i8* %696 to double*
  store double %702, double* %703, align 1, !tbaa !2452
  %704 = getelementptr inbounds i8, i8* %696, i64 8
  %705 = bitcast i8* %704 to double*
  store double 0.000000e+00, double* %705, align 1, !tbaa !2452
  %706 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %707 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %708 = load i64, i64* %RBP
  %709 = sub i64 %708, 40
  %710 = load i64, i64* %PC
  %711 = add i64 %710, 5
  store i64 %711, i64* %PC
  %712 = bitcast i8* %707 to double*
  %713 = load double, double* %712, align 1
  %714 = getelementptr inbounds i8, i8* %707, i64 8
  %715 = bitcast i8* %714 to i64*
  %716 = load i64, i64* %715, align 1
  %717 = inttoptr i64 %709 to double*
  %718 = load double, double* %717
  %719 = fadd double %713, %718
  %720 = bitcast i8* %706 to double*
  store double %719, double* %720, align 1, !tbaa !2452
  %721 = getelementptr inbounds i8, i8* %706, i64 8
  %722 = bitcast i8* %721 to i64*
  store i64 %716, i64* %722, align 1, !tbaa !2452
  %723 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %724 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %725 = bitcast %union.vec128_t* %XMM5 to i8*
  %726 = load i64, i64* %PC
  %727 = add i64 %726, 4
  store i64 %727, i64* %PC
  %728 = bitcast i8* %724 to double*
  %729 = load double, double* %728, align 1
  %730 = getelementptr inbounds i8, i8* %724, i64 8
  %731 = bitcast i8* %730 to i64*
  %732 = load i64, i64* %731, align 1
  %733 = bitcast i8* %725 to double*
  %734 = load double, double* %733, align 1
  %735 = fdiv double %729, %734
  %736 = bitcast i8* %723 to double*
  store double %735, double* %736, align 1, !tbaa !2452
  %737 = getelementptr inbounds i8, i8* %723, i64 8
  %738 = bitcast i8* %737 to i64*
  store i64 %732, i64* %738, align 1, !tbaa !2452
  %739 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %740 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %741 = bitcast %union.vec128_t* %XMM4 to i8*
  %742 = load i64, i64* %PC
  %743 = add i64 %742, 4
  store i64 %743, i64* %PC
  %744 = bitcast i8* %740 to double*
  %745 = load double, double* %744, align 1
  %746 = getelementptr inbounds i8, i8* %740, i64 8
  %747 = bitcast i8* %746 to i64*
  %748 = load i64, i64* %747, align 1
  %749 = bitcast i8* %741 to double*
  %750 = load double, double* %749, align 1
  %751 = fsub double %745, %750
  %752 = bitcast i8* %739 to double*
  store double %751, double* %752, align 1, !tbaa !2452
  %753 = getelementptr inbounds i8, i8* %739, i64 8
  %754 = bitcast i8* %753 to i64*
  store i64 %748, i64* %754, align 1, !tbaa !2452
  %755 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %756 = load i64, i64* %RBP
  %757 = sub i64 %756, 48
  %758 = load i64, i64* %PC
  %759 = add i64 %758, 5
  store i64 %759, i64* %PC
  %760 = inttoptr i64 %757 to double*
  %761 = load double, double* %760
  %762 = bitcast i8* %755 to double*
  store double %761, double* %762, align 1, !tbaa !2452
  %763 = getelementptr inbounds i8, i8* %755, i64 8
  %764 = bitcast i8* %763 to double*
  store double 0.000000e+00, double* %764, align 1, !tbaa !2452
  %765 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %766 = load i64, i64* %RBP
  %767 = sub i64 %766, 24
  %768 = load i64, i64* %PC
  %769 = add i64 %768, 5
  store i64 %769, i64* %PC
  %770 = inttoptr i64 %767 to double*
  %771 = load double, double* %770
  %772 = bitcast i8* %765 to double*
  store double %771, double* %772, align 1, !tbaa !2452
  %773 = getelementptr inbounds i8, i8* %765, i64 8
  %774 = bitcast i8* %773 to double*
  store double 0.000000e+00, double* %774, align 1, !tbaa !2452
  %775 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %776 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %777 = load i64, i64* %RBP
  %778 = sub i64 %777, 40
  %779 = load i64, i64* %PC
  %780 = add i64 %779, 5
  store i64 %780, i64* %PC
  %781 = bitcast i8* %776 to double*
  %782 = load double, double* %781, align 1
  %783 = getelementptr inbounds i8, i8* %776, i64 8
  %784 = bitcast i8* %783 to i64*
  %785 = load i64, i64* %784, align 1
  %786 = inttoptr i64 %778 to double*
  %787 = load double, double* %786
  %788 = fadd double %782, %787
  %789 = bitcast i8* %775 to double*
  store double %788, double* %789, align 1, !tbaa !2452
  %790 = getelementptr inbounds i8, i8* %775, i64 8
  %791 = bitcast i8* %790 to i64*
  store i64 %785, i64* %791, align 1, !tbaa !2452
  %792 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %793 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %794 = bitcast %union.vec128_t* %XMM5 to i8*
  %795 = load i64, i64* %PC
  %796 = add i64 %795, 4
  store i64 %796, i64* %PC
  %797 = bitcast i8* %793 to double*
  %798 = load double, double* %797, align 1
  %799 = getelementptr inbounds i8, i8* %793, i64 8
  %800 = bitcast i8* %799 to i64*
  %801 = load i64, i64* %800, align 1
  %802 = bitcast i8* %794 to double*
  %803 = load double, double* %802, align 1
  %804 = fdiv double %798, %803
  %805 = bitcast i8* %792 to double*
  store double %804, double* %805, align 1, !tbaa !2452
  %806 = getelementptr inbounds i8, i8* %792, i64 8
  %807 = bitcast i8* %806 to i64*
  store i64 %801, i64* %807, align 1, !tbaa !2452
  %808 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %809 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %810 = bitcast %union.vec128_t* %XMM4 to i8*
  %811 = load i64, i64* %PC
  %812 = add i64 %811, 4
  store i64 %812, i64* %PC
  %813 = bitcast i8* %809 to double*
  %814 = load double, double* %813, align 1
  %815 = getelementptr inbounds i8, i8* %809, i64 8
  %816 = bitcast i8* %815 to i64*
  %817 = load i64, i64* %816, align 1
  %818 = bitcast i8* %810 to double*
  %819 = load double, double* %818, align 1
  %820 = fsub double %814, %819
  %821 = bitcast i8* %808 to double*
  store double %820, double* %821, align 1, !tbaa !2452
  %822 = getelementptr inbounds i8, i8* %808, i64 8
  %823 = bitcast i8* %822 to i64*
  store i64 %817, i64* %823, align 1, !tbaa !2452
  %824 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %825 = load i64, i64* %RBP
  %826 = sub i64 %825, 24
  %827 = load i64, i64* %PC
  %828 = add i64 %827, 5
  store i64 %828, i64* %PC
  %829 = inttoptr i64 %826 to double*
  %830 = load double, double* %829
  %831 = bitcast i8* %824 to double*
  store double %830, double* %831, align 1, !tbaa !2452
  %832 = getelementptr inbounds i8, i8* %824, i64 8
  %833 = bitcast i8* %832 to double*
  store double 0.000000e+00, double* %833, align 1, !tbaa !2452
  %834 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %835 = load i64, i64* %RBP
  %836 = sub i64 %835, 48
  %837 = load i64, i64* %PC
  %838 = add i64 %837, 5
  store i64 %838, i64* %PC
  %839 = inttoptr i64 %836 to double*
  %840 = load double, double* %839
  %841 = bitcast i8* %834 to double*
  store double %840, double* %841, align 1, !tbaa !2452
  %842 = getelementptr inbounds i8, i8* %834, i64 8
  %843 = bitcast i8* %842 to double*
  store double 0.000000e+00, double* %843, align 1, !tbaa !2452
  %844 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %845 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %846 = load i64, i64* %RBP
  %847 = sub i64 %846, 24
  %848 = load i64, i64* %PC
  %849 = add i64 %848, 5
  store i64 %849, i64* %PC
  %850 = bitcast i8* %845 to double*
  %851 = load double, double* %850, align 1
  %852 = getelementptr inbounds i8, i8* %845, i64 8
  %853 = bitcast i8* %852 to i64*
  %854 = load i64, i64* %853, align 1
  %855 = inttoptr i64 %847 to double*
  %856 = load double, double* %855
  %857 = fmul double %851, %856
  %858 = bitcast i8* %844 to double*
  store double %857, double* %858, align 1, !tbaa !2452
  %859 = getelementptr inbounds i8, i8* %844, i64 8
  %860 = bitcast i8* %859 to i64*
  store i64 %854, i64* %860, align 1, !tbaa !2452
  %861 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %862 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %863 = load i64, i64* %RBP
  %864 = sub i64 %863, 40
  %865 = load i64, i64* %PC
  %866 = add i64 %865, 5
  store i64 %866, i64* %PC
  %867 = bitcast i8* %862 to double*
  %868 = load double, double* %867, align 1
  %869 = getelementptr inbounds i8, i8* %862, i64 8
  %870 = bitcast i8* %869 to i64*
  %871 = load i64, i64* %870, align 1
  %872 = inttoptr i64 %864 to double*
  %873 = load double, double* %872
  %874 = fadd double %868, %873
  %875 = bitcast i8* %861 to double*
  store double %874, double* %875, align 1, !tbaa !2452
  %876 = getelementptr inbounds i8, i8* %861, i64 8
  %877 = bitcast i8* %876 to i64*
  store i64 %871, i64* %877, align 1, !tbaa !2452
  %878 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %879 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %880 = bitcast %union.vec128_t* %XMM5 to i8*
  %881 = load i64, i64* %PC
  %882 = add i64 %881, 4
  store i64 %882, i64* %PC
  %883 = bitcast i8* %879 to double*
  %884 = load double, double* %883, align 1
  %885 = getelementptr inbounds i8, i8* %879, i64 8
  %886 = bitcast i8* %885 to i64*
  %887 = load i64, i64* %886, align 1
  %888 = bitcast i8* %880 to double*
  %889 = load double, double* %888, align 1
  %890 = fdiv double %884, %889
  %891 = bitcast i8* %878 to double*
  store double %890, double* %891, align 1, !tbaa !2452
  %892 = getelementptr inbounds i8, i8* %878, i64 8
  %893 = bitcast i8* %892 to i64*
  store i64 %887, i64* %893, align 1, !tbaa !2452
  %894 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %895 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %896 = bitcast %union.vec128_t* %XMM4 to i8*
  %897 = load i64, i64* %PC
  %898 = add i64 %897, 4
  store i64 %898, i64* %PC
  %899 = bitcast i8* %895 to double*
  %900 = load double, double* %899, align 1
  %901 = getelementptr inbounds i8, i8* %895, i64 8
  %902 = bitcast i8* %901 to i64*
  %903 = load i64, i64* %902, align 1
  %904 = bitcast i8* %896 to double*
  %905 = load double, double* %904, align 1
  %906 = fsub double %900, %905
  %907 = bitcast i8* %894 to double*
  store double %906, double* %907, align 1, !tbaa !2452
  %908 = getelementptr inbounds i8, i8* %894, i64 8
  %909 = bitcast i8* %908 to i64*
  store i64 %903, i64* %909, align 1, !tbaa !2452
  %910 = bitcast %union.vec128_t* %XMM3 to i8*
  %911 = load i64, i64* %PC
  %912 = add i64 %911, 9
  store i64 %912, i64* %PC
  %913 = bitcast i8* %910 to double*
  %914 = load double, double* %913, align 1
  store double %914, double* bitcast (%sa_type* @sa to double*)
  %915 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %916 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %917 = load i64, i64* %RBP
  %918 = sub i64 %917, 32
  %919 = load i64, i64* %PC
  %920 = add i64 %919, 5
  store i64 %920, i64* %PC
  %921 = bitcast i8* %916 to double*
  %922 = load double, double* %921, align 1
  %923 = getelementptr inbounds i8, i8* %916, i64 8
  %924 = bitcast i8* %923 to i64*
  %925 = load i64, i64* %924, align 1
  %926 = inttoptr i64 %918 to double*
  %927 = load double, double* %926
  %928 = fmul double %922, %927
  %929 = bitcast i8* %915 to double*
  store double %928, double* %929, align 1, !tbaa !2452
  %930 = getelementptr inbounds i8, i8* %915, i64 8
  %931 = bitcast i8* %930 to i64*
  store i64 %925, i64* %931, align 1, !tbaa !2452
  %932 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %933 = load i64, i64* %PC
  %934 = add i64 %933, 9
  store i64 %934, i64* %PC
  %935 = load double, double* bitcast (%sa_type* @sa to double*)
  %936 = bitcast i8* %932 to double*
  store double %935, double* %936, align 1, !tbaa !2452
  %937 = getelementptr inbounds i8, i8* %932, i64 8
  %938 = bitcast i8* %937 to double*
  store double 0.000000e+00, double* %938, align 1, !tbaa !2452
  %939 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %940 = load i64, i64* %PC
  %941 = add i64 %940, 9
  store i64 %941, i64* %PC
  %942 = load double, double* bitcast (%two_type* @two to double*)
  %943 = bitcast i8* %939 to double*
  store double %942, double* %943, align 1, !tbaa !2452
  %944 = getelementptr inbounds i8, i8* %939, i64 8
  %945 = bitcast i8* %944 to double*
  store double 0.000000e+00, double* %945, align 1, !tbaa !2452
  %946 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %947 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %948 = load i64, i64* %RBP
  %949 = sub i64 %948, 16
  %950 = load i64, i64* %PC
  %951 = add i64 %950, 5
  store i64 %951, i64* %PC
  %952 = bitcast i8* %947 to double*
  %953 = load double, double* %952, align 1
  %954 = getelementptr inbounds i8, i8* %947, i64 8
  %955 = bitcast i8* %954 to i64*
  %956 = load i64, i64* %955, align 1
  %957 = inttoptr i64 %949 to double*
  %958 = load double, double* %957
  %959 = fmul double %953, %958
  %960 = bitcast i8* %946 to double*
  store double %959, double* %960, align 1, !tbaa !2452
  %961 = getelementptr inbounds i8, i8* %946, i64 8
  %962 = bitcast i8* %961 to i64*
  store i64 %956, i64* %962, align 1, !tbaa !2452
  %963 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %964 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %965 = bitcast %union.vec128_t* %XMM4 to i8*
  %966 = load i64, i64* %PC
  %967 = add i64 %966, 4
  store i64 %967, i64* %PC
  %968 = bitcast i8* %964 to double*
  %969 = load double, double* %968, align 1
  %970 = getelementptr inbounds i8, i8* %964, i64 8
  %971 = bitcast i8* %970 to i64*
  %972 = load i64, i64* %971, align 1
  %973 = bitcast i8* %965 to double*
  %974 = load double, double* %973, align 1
  %975 = fadd double %969, %974
  %976 = bitcast i8* %963 to double*
  store double %975, double* %976, align 1, !tbaa !2452
  %977 = getelementptr inbounds i8, i8* %963, i64 8
  %978 = bitcast i8* %977 to i64*
  store i64 %972, i64* %978, align 1, !tbaa !2452
  %979 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %980 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %981 = bitcast %union.vec128_t* %XMM3 to i8*
  %982 = load i64, i64* %PC
  %983 = add i64 %982, 4
  store i64 %983, i64* %PC
  %984 = bitcast i8* %980 to double*
  %985 = load double, double* %984, align 1
  %986 = getelementptr inbounds i8, i8* %980, i64 8
  %987 = bitcast i8* %986 to i64*
  %988 = load i64, i64* %987, align 1
  %989 = bitcast i8* %981 to double*
  %990 = load double, double* %989, align 1
  %991 = fmul double %985, %990
  %992 = bitcast i8* %979 to double*
  store double %991, double* %992, align 1, !tbaa !2452
  %993 = getelementptr inbounds i8, i8* %979, i64 8
  %994 = bitcast i8* %993 to i64*
  store i64 %988, i64* %994, align 1, !tbaa !2452
  %995 = bitcast %union.vec128_t* %XMM2 to i8*
  %996 = load i64, i64* %PC
  %997 = add i64 %996, 9
  store i64 %997, i64* %PC
  %998 = bitcast i8* %995 to double*
  %999 = load double, double* %998, align 1
  store double %999, double* bitcast (%sa_type* @sa to double*)
  %1000 = load i64, i64* %PC
  %1001 = add i64 %1000, 10
  store i64 %1001, i64* %PC
  %1002 = load double, double* bitcast (%sa_type* @sa to double*)
  %1003 = call double @llvm.trunc.f64(double %1002) #16
  %1004 = call double @llvm.fabs.f64(double %1003) #16
  %1005 = fcmp ogt double %1004, 0x43E0000000000000
  %1006 = fptosi double %1003 to i64
  %1007 = select i1 %1005, i64 -9223372036854775808, i64 %1006
  store i64 %1007, i64* %RCX, align 8, !tbaa !2428
  %1008 = load i64, i64* %RCX
  %1009 = load i64, i64* %PC
  %1010 = add i64 %1009, 7
  store i64 %1010, i64* %PC
  %1011 = sext i64 %1008 to i128
  %1012 = and i128 %1011, -18446744073709551616
  %1013 = zext i64 %1008 to i128
  %1014 = or i128 %1012, %1013
  %1015 = mul nsw i128 -2000, %1014
  %1016 = trunc i128 %1015 to i64
  store i64 %1016, i64* %RCX, align 8, !tbaa !2428
  %1017 = sext i64 %1016 to i128
  %1018 = icmp ne i128 %1017, %1015
  %1019 = zext i1 %1018 to i8
  %1020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1019, i8* %1020, align 1, !tbaa !2432
  %1021 = trunc i128 %1015 to i32
  %1022 = and i32 %1021, 255
  %1023 = call i32 @llvm.ctpop.i32(i32 %1022) #16
  %1024 = trunc i32 %1023 to i8
  %1025 = and i8 %1024, 1
  %1026 = xor i8 %1025, 1
  %1027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1026, i8* %1027, align 1, !tbaa !2446
  %1028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %1028, align 1, !tbaa !2450
  %1029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %1029, align 1, !tbaa !2447
  %1030 = lshr i64 %1016, 63
  %1031 = trunc i64 %1030 to i8
  %1032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1031, i8* %1032, align 1, !tbaa !2448
  %1033 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1019, i8* %1033, align 1, !tbaa !2449
  %1034 = load i64, i64* %RBP
  %1035 = sub i64 %1034, 80
  %1036 = load i64, i64* %RCX
  %1037 = load i64, i64* %PC
  %1038 = add i64 %1037, 4
  store i64 %1038, i64* %PC
  %1039 = inttoptr i64 %1035 to i64*
  store i64 %1036, i64* %1039
  %1040 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1041 = load i64, i64* %RBP
  %1042 = sub i64 %1041, 80
  %1043 = load i64, i64* %PC
  %1044 = add i64 %1043, 6
  store i64 %1044, i64* %PC
  %1045 = inttoptr i64 %1042 to i64*
  %1046 = load i64, i64* %1045
  %1047 = sitofp i64 %1046 to double
  %1048 = bitcast i8* %1040 to double*
  store double %1047, double* %1048, align 1, !tbaa !2452
  %1049 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1050 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1051 = load i64, i64* %PC
  %1052 = add i64 %1051, 9
  store i64 %1052, i64* %PC
  %1053 = bitcast i8* %1050 to double*
  %1054 = load double, double* %1053, align 1
  %1055 = getelementptr inbounds i8, i8* %1050, i64 8
  %1056 = bitcast i8* %1055 to i64*
  %1057 = load i64, i64* %1056, align 1
  %1058 = load double, double* bitcast (%scale_type* @scale to double*)
  %1059 = fdiv double %1054, %1058
  %1060 = bitcast i8* %1049 to double*
  store double %1059, double* %1060, align 1, !tbaa !2452
  %1061 = getelementptr inbounds i8, i8* %1049, i64 8
  %1062 = bitcast i8* %1061 to i64*
  store i64 %1057, i64* %1062, align 1, !tbaa !2452
  %1063 = bitcast %union.vec128_t* %XMM2 to i8*
  %1064 = load i64, i64* %PC
  %1065 = add i64 %1064, 5
  store i64 %1065, i64* %PC
  %1066 = bitcast i8* %1063 to double*
  %1067 = load double, double* %1066, align 1
  %1068 = call double @llvm.trunc.f64(double %1067) #16
  %1069 = call double @llvm.fabs.f64(double %1068) #16
  %1070 = fcmp ogt double %1069, 0x43E0000000000000
  %1071 = fptosi double %1068 to i64
  %1072 = select i1 %1070, i64 -9223372036854775808, i64 %1071
  store i64 %1072, i64* %RCX, align 8, !tbaa !2428
  %1073 = load i64, i64* %RBP
  %1074 = sub i64 %1073, 80
  %1075 = load i64, i64* %RCX
  %1076 = load i64, i64* %PC
  %1077 = add i64 %1076, 4
  store i64 %1077, i64* %PC
  %1078 = inttoptr i64 %1074 to i64*
  store i64 %1075, i64* %1078
  %1079 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1080 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1081 = load i64, i64* %PC
  %1082 = add i64 %1081, 9
  store i64 %1082, i64* %PC
  %1083 = bitcast i8* %1080 to double*
  %1084 = load double, double* %1083, align 1
  %1085 = getelementptr inbounds i8, i8* %1080, i64 8
  %1086 = bitcast i8* %1085 to i64*
  %1087 = load i64, i64* %1086, align 1
  %1088 = load double, double* bitcast (%sa_type* @sa to double*)
  %1089 = fadd double %1084, %1088
  %1090 = bitcast i8* %1079 to double*
  store double %1089, double* %1090, align 1, !tbaa !2452
  %1091 = getelementptr inbounds i8, i8* %1079, i64 8
  %1092 = bitcast i8* %1091 to i64*
  store i64 %1087, i64* %1092, align 1, !tbaa !2452
  %1093 = bitcast %union.vec128_t* %XMM1 to i8*
  %1094 = load i64, i64* %PC
  %1095 = add i64 %1094, 9
  store i64 %1095, i64* %PC
  %1096 = bitcast i8* %1093 to double*
  %1097 = load double, double* %1096, align 1
  store double %1097, double* bitcast (%sc_type* @sc to double*)
  %1098 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1099 = load i64, i64* %PC
  %1100 = add i64 %1099, 9
  store i64 %1100, i64* %PC
  %1101 = load double, double* bitcast (%one_type* @one to double*)
  %1102 = bitcast i8* %1098 to double*
  store double %1101, double* %1102, align 1, !tbaa !2452
  %1103 = getelementptr inbounds i8, i8* %1098, i64 8
  %1104 = bitcast i8* %1103 to double*
  store double 0.000000e+00, double* %1104, align 1, !tbaa !2452
  %1105 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1106 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1107 = load i64, i64* %PC
  %1108 = add i64 %1107, 9
  store i64 %1108, i64* %PC
  %1109 = bitcast i8* %1106 to double*
  %1110 = load double, double* %1109, align 1
  %1111 = getelementptr inbounds i8, i8* %1106, i64 8
  %1112 = bitcast i8* %1111 to i64*
  %1113 = load i64, i64* %1112, align 1
  %1114 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 176) to double*)
  %1115 = fdiv double %1110, %1114
  %1116 = bitcast i8* %1105 to double*
  store double %1115, double* %1116, align 1, !tbaa !2452
  %1117 = getelementptr inbounds i8, i8* %1105, i64 8
  %1118 = bitcast i8* %1117 to i64*
  store i64 %1113, i64* %1118, align 1, !tbaa !2452
  %1119 = bitcast %union.vec128_t* %XMM1 to i8*
  %1120 = load i64, i64* %PC
  %1121 = add i64 %1120, 9
  store i64 %1121, i64* %PC
  %1122 = bitcast i8* %1119 to double*
  %1123 = load double, double* %1122, align 1
  store double %1123, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 184) to double*)
  %1124 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1125 = bitcast %union.vec128_t* %XMM0 to i8*
  %1126 = load i64, i64* %PC
  %1127 = add i64 %1126, 3
  store i64 %1127, i64* %PC
  %1128 = bitcast i8* %1125 to <2 x i32>*
  %1129 = load <2 x i32>, <2 x i32>* %1128, align 1
  %1130 = getelementptr inbounds i8, i8* %1125, i64 8
  %1131 = bitcast i8* %1130 to <2 x i32>*
  %1132 = load <2 x i32>, <2 x i32>* %1131, align 1
  %1133 = extractelement <2 x i32> %1129, i32 0
  %1134 = bitcast i8* %1124 to i32*
  store i32 %1133, i32* %1134, align 1, !tbaa !2455
  %1135 = extractelement <2 x i32> %1129, i32 1
  %1136 = getelementptr inbounds i8, i8* %1124, i64 4
  %1137 = bitcast i8* %1136 to i32*
  store i32 %1135, i32* %1137, align 1, !tbaa !2455
  %1138 = extractelement <2 x i32> %1132, i32 0
  %1139 = getelementptr inbounds i8, i8* %1124, i64 8
  %1140 = bitcast i8* %1139 to i32*
  store i32 %1138, i32* %1140, align 1, !tbaa !2455
  %1141 = extractelement <2 x i32> %1132, i32 1
  %1142 = getelementptr inbounds i8, i8* %1124, i64 12
  %1143 = bitcast i8* %1142 to i32*
  store i32 %1141, i32* %1143, align 1, !tbaa !2455
  %1144 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1145 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1146 = load i64, i64* %PC
  %1147 = add i64 %1146, 9
  store i64 %1147, i64* %PC
  %1148 = bitcast i8* %1145 to double*
  %1149 = load double, double* %1148, align 1
  %1150 = getelementptr inbounds i8, i8* %1145, i64 8
  %1151 = bitcast i8* %1150 to i64*
  %1152 = load i64, i64* %1151, align 1
  %1153 = load double, double* bitcast (%sc_type* @sc to double*)
  %1154 = fmul double %1149, %1153
  %1155 = bitcast i8* %1144 to double*
  store double %1154, double* %1155, align 1, !tbaa !2452
  %1156 = getelementptr inbounds i8, i8* %1144, i64 8
  %1157 = bitcast i8* %1156 to i64*
  store i64 %1152, i64* %1157, align 1, !tbaa !2452
  %1158 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1159 = bitcast %union.vec128_t* %XMM0 to i8*
  %1160 = load i64, i64* %PC
  %1161 = add i64 %1160, 3
  store i64 %1161, i64* %PC
  %1162 = bitcast i8* %1159 to <2 x i32>*
  %1163 = load <2 x i32>, <2 x i32>* %1162, align 1
  %1164 = getelementptr inbounds i8, i8* %1159, i64 8
  %1165 = bitcast i8* %1164 to <2 x i32>*
  %1166 = load <2 x i32>, <2 x i32>* %1165, align 1
  %1167 = extractelement <2 x i32> %1163, i32 0
  %1168 = bitcast i8* %1158 to i32*
  store i32 %1167, i32* %1168, align 1, !tbaa !2455
  %1169 = extractelement <2 x i32> %1163, i32 1
  %1170 = getelementptr inbounds i8, i8* %1158, i64 4
  %1171 = bitcast i8* %1170 to i32*
  store i32 %1169, i32* %1171, align 1, !tbaa !2455
  %1172 = extractelement <2 x i32> %1166, i32 0
  %1173 = getelementptr inbounds i8, i8* %1158, i64 8
  %1174 = bitcast i8* %1173 to i32*
  store i32 %1172, i32* %1174, align 1, !tbaa !2455
  %1175 = extractelement <2 x i32> %1166, i32 1
  %1176 = getelementptr inbounds i8, i8* %1158, i64 12
  %1177 = bitcast i8* %1176 to i32*
  store i32 %1175, i32* %1177, align 1, !tbaa !2455
  %1178 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1179 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1180 = load i64, i64* %PC
  %1181 = add i64 %1180, 9
  store i64 %1181, i64* %PC
  %1182 = bitcast i8* %1179 to double*
  %1183 = load double, double* %1182, align 1
  %1184 = getelementptr inbounds i8, i8* %1179, i64 8
  %1185 = bitcast i8* %1184 to i64*
  %1186 = load i64, i64* %1185, align 1
  %1187 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 168) to double*)
  %1188 = fmul double %1183, %1187
  %1189 = bitcast i8* %1178 to double*
  store double %1188, double* %1189, align 1, !tbaa !2452
  %1190 = getelementptr inbounds i8, i8* %1178, i64 8
  %1191 = bitcast i8* %1190 to i64*
  store i64 %1186, i64* %1191, align 1, !tbaa !2452
  %1192 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1193 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1194 = load i64, i64* %PC
  %1195 = add i64 %1194, 9
  store i64 %1195, i64* %PC
  %1196 = bitcast i8* %1193 to double*
  %1197 = load double, double* %1196, align 1
  %1198 = getelementptr inbounds i8, i8* %1193, i64 8
  %1199 = bitcast i8* %1198 to i64*
  %1200 = load i64, i64* %1199, align 1
  %1201 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 184) to double*)
  %1202 = fmul double %1197, %1201
  %1203 = bitcast i8* %1192 to double*
  store double %1202, double* %1203, align 1, !tbaa !2452
  %1204 = getelementptr inbounds i8, i8* %1192, i64 8
  %1205 = bitcast i8* %1204 to i64*
  store i64 %1200, i64* %1205, align 1, !tbaa !2452
  %1206 = load i64, i64* %RBP
  %1207 = sub i64 %1206, 280
  %1208 = bitcast %union.vec128_t* %XMM0 to i8*
  %1209 = load i64, i64* %PC
  %1210 = add i64 %1209, 8
  store i64 %1210, i64* %PC
  %1211 = bitcast i8* %1208 to double*
  %1212 = load double, double* %1211, align 1
  %1213 = inttoptr i64 %1207 to double*
  store double %1212, double* %1213
  %1214 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1215 = bitcast %union.vec128_t* %XMM1 to i8*
  %1216 = load i64, i64* %PC
  %1217 = add i64 %1216, 3
  store i64 %1217, i64* %PC
  %1218 = bitcast i8* %1215 to <2 x i32>*
  %1219 = load <2 x i32>, <2 x i32>* %1218, align 1
  %1220 = getelementptr inbounds i8, i8* %1215, i64 8
  %1221 = bitcast i8* %1220 to <2 x i32>*
  %1222 = load <2 x i32>, <2 x i32>* %1221, align 1
  %1223 = extractelement <2 x i32> %1219, i32 0
  %1224 = bitcast i8* %1214 to i32*
  store i32 %1223, i32* %1224, align 1, !tbaa !2455
  %1225 = extractelement <2 x i32> %1219, i32 1
  %1226 = getelementptr inbounds i8, i8* %1214, i64 4
  %1227 = bitcast i8* %1226 to i32*
  store i32 %1225, i32* %1227, align 1, !tbaa !2455
  %1228 = extractelement <2 x i32> %1222, i32 0
  %1229 = getelementptr inbounds i8, i8* %1214, i64 8
  %1230 = bitcast i8* %1229 to i32*
  store i32 %1228, i32* %1230, align 1, !tbaa !2455
  %1231 = extractelement <2 x i32> %1222, i32 1
  %1232 = getelementptr inbounds i8, i8* %1214, i64 12
  %1233 = bitcast i8* %1232 to i32*
  store i32 %1231, i32* %1233, align 1, !tbaa !2455
  %1234 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1235 = bitcast %union.vec128_t* %XMM2 to i8*
  %1236 = load i64, i64* %PC
  %1237 = add i64 %1236, 3
  store i64 %1237, i64* %PC
  %1238 = bitcast i8* %1235 to <2 x i32>*
  %1239 = load <2 x i32>, <2 x i32>* %1238, align 1
  %1240 = getelementptr inbounds i8, i8* %1235, i64 8
  %1241 = bitcast i8* %1240 to <2 x i32>*
  %1242 = load <2 x i32>, <2 x i32>* %1241, align 1
  %1243 = extractelement <2 x i32> %1239, i32 0
  %1244 = bitcast i8* %1234 to i32*
  store i32 %1243, i32* %1244, align 1, !tbaa !2455
  %1245 = extractelement <2 x i32> %1239, i32 1
  %1246 = getelementptr inbounds i8, i8* %1234, i64 4
  %1247 = bitcast i8* %1246 to i32*
  store i32 %1245, i32* %1247, align 1, !tbaa !2455
  %1248 = extractelement <2 x i32> %1242, i32 0
  %1249 = getelementptr inbounds i8, i8* %1234, i64 8
  %1250 = bitcast i8* %1249 to i32*
  store i32 %1248, i32* %1250, align 1, !tbaa !2455
  %1251 = extractelement <2 x i32> %1242, i32 1
  %1252 = getelementptr inbounds i8, i8* %1234, i64 12
  %1253 = bitcast i8* %1252 to i32*
  store i32 %1251, i32* %1253, align 1, !tbaa !2455
  %1254 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1255 = load i64, i64* %RBP
  %1256 = sub i64 %1255, 280
  %1257 = load i64, i64* %PC
  %1258 = add i64 %1257, 8
  store i64 %1258, i64* %PC
  %1259 = inttoptr i64 %1256 to double*
  %1260 = load double, double* %1259
  %1261 = bitcast i8* %1254 to double*
  store double %1260, double* %1261, align 1, !tbaa !2452
  %1262 = getelementptr inbounds i8, i8* %1254, i64 8
  %1263 = bitcast i8* %1262 to double*
  store double 0.000000e+00, double* %1263, align 1, !tbaa !2452
  %1264 = load i64, i64* %RBP
  %1265 = sub i64 %1264, 284
  %1266 = load i32, i32* %EAX
  %1267 = zext i32 %1266 to i64
  %1268 = load i64, i64* %PC
  %1269 = add i64 %1268, 6
  store i64 %1269, i64* %PC
  %1270 = inttoptr i64 %1265 to i32*
  store i32 %1266, i32* %1270
  %1271 = load i64, i64* %PC
  %1272 = add i64 %1271, 2
  store i64 %1272, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %1273 = load i64, i64* %PC
  %1274 = sub i64 %1273, 6872
  %1275 = load i64, i64* %PC
  %1276 = add i64 %1275, 5
  %1277 = load i64, i64* %PC
  %1278 = add i64 %1277, 5
  store i64 %1278, i64* %PC
  %1279 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1280 = load i64, i64* %1279, align 8, !tbaa !2428
  %1281 = add i64 %1280, -8
  %1282 = inttoptr i64 %1281 to i64*
  store i64 %1276, i64* %1282
  store i64 %1281, i64* %1279, align 8, !tbaa !2428
  %1283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1274, i64* %1283, align 8, !tbaa !2428
  %1284 = load i64, i64* %PC
  %1285 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %1284, %struct.Memory* %492)
  %1286 = load i64, i64* %PC
  %1287 = add i64 %1286, 10
  store i64 %1287, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %1288 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1289 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1290 = bitcast %union.vec128_t* %XMM0 to i8*
  %1291 = load i64, i64* %PC
  %1292 = add i64 %1291, 3
  store i64 %1292, i64* %PC
  %1293 = bitcast i8* %1289 to i64*
  %1294 = load i64, i64* %1293, align 1
  %1295 = getelementptr inbounds i8, i8* %1289, i64 8
  %1296 = bitcast i8* %1295 to i64*
  %1297 = load i64, i64* %1296, align 1
  %1298 = bitcast i8* %1290 to i64*
  %1299 = load i64, i64* %1298, align 1
  %1300 = getelementptr inbounds i8, i8* %1290, i64 8
  %1301 = bitcast i8* %1300 to i64*
  %1302 = load i64, i64* %1301, align 1
  %1303 = xor i64 %1299, %1294
  %1304 = xor i64 %1302, %1297
  %1305 = trunc i64 %1303 to i32
  %1306 = lshr i64 %1303, 32
  %1307 = trunc i64 %1306 to i32
  %1308 = bitcast i8* %1288 to i32*
  store i32 %1305, i32* %1308, align 1, !tbaa !2454
  %1309 = getelementptr inbounds i8, i8* %1288, i64 4
  %1310 = bitcast i8* %1309 to i32*
  store i32 %1307, i32* %1310, align 1, !tbaa !2454
  %1311 = trunc i64 %1304 to i32
  %1312 = getelementptr inbounds i8, i8* %1288, i64 8
  %1313 = bitcast i8* %1312 to i32*
  store i32 %1311, i32* %1313, align 1, !tbaa !2454
  %1314 = lshr i64 %1304, 32
  %1315 = trunc i64 %1314 to i32
  %1316 = getelementptr inbounds i8, i8* %1288, i64 12
  %1317 = bitcast i8* %1316 to i32*
  store i32 %1315, i32* %1317, align 1, !tbaa !2454
  %1318 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1319 = load i64, i64* %PC
  %1320 = add i64 %1319, 9
  store i64 %1320, i64* %PC
  %1321 = load double, double* bitcast (%piref_type* @piref to double*)
  %1322 = bitcast i8* %1318 to double*
  store double %1321, double* %1322, align 1, !tbaa !2452
  %1323 = getelementptr inbounds i8, i8* %1318, i64 8
  %1324 = bitcast i8* %1323 to double*
  store double 0.000000e+00, double* %1324, align 1, !tbaa !2452
  %1325 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1326 = load i64, i64* %PC
  %1327 = add i64 %1326, 9
  store i64 %1327, i64* %PC
  %1328 = load double, double* bitcast (%three_type* @three to double*)
  %1329 = bitcast i8* %1325 to double*
  store double %1328, double* %1329, align 1, !tbaa !2452
  %1330 = getelementptr inbounds i8, i8* %1325, i64 8
  %1331 = bitcast i8* %1330 to double*
  store double 0.000000e+00, double* %1331, align 1, !tbaa !2452
  %1332 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %1333 = load i64, i64* %RBP
  %1334 = sub i64 %1333, 80
  %1335 = load i64, i64* %PC
  %1336 = add i64 %1335, 6
  store i64 %1336, i64* %PC
  %1337 = inttoptr i64 %1334 to i64*
  %1338 = load i64, i64* %1337
  %1339 = sitofp i64 %1338 to double
  %1340 = bitcast i8* %1332 to double*
  store double %1339, double* %1340, align 1, !tbaa !2452
  %1341 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1342 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1343 = bitcast %union.vec128_t* %XMM3 to i8*
  %1344 = load i64, i64* %PC
  %1345 = add i64 %1344, 4
  store i64 %1345, i64* %PC
  %1346 = bitcast i8* %1342 to double*
  %1347 = load double, double* %1346, align 1
  %1348 = getelementptr inbounds i8, i8* %1342, i64 8
  %1349 = bitcast i8* %1348 to i64*
  %1350 = load i64, i64* %1349, align 1
  %1351 = bitcast i8* %1343 to double*
  %1352 = load double, double* %1351, align 1
  %1353 = fmul double %1347, %1352
  %1354 = bitcast i8* %1341 to double*
  store double %1353, double* %1354, align 1, !tbaa !2452
  %1355 = getelementptr inbounds i8, i8* %1341, i64 8
  %1356 = bitcast i8* %1355 to i64*
  store i64 %1350, i64* %1356, align 1, !tbaa !2452
  %1357 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1358 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1359 = bitcast %union.vec128_t* %XMM2 to i8*
  %1360 = load i64, i64* %PC
  %1361 = add i64 %1360, 4
  store i64 %1361, i64* %PC
  %1362 = bitcast i8* %1358 to double*
  %1363 = load double, double* %1362, align 1
  %1364 = getelementptr inbounds i8, i8* %1358, i64 8
  %1365 = bitcast i8* %1364 to i64*
  %1366 = load i64, i64* %1365, align 1
  %1367 = bitcast i8* %1359 to double*
  %1368 = load double, double* %1367, align 1
  %1369 = fdiv double %1363, %1368
  %1370 = bitcast i8* %1357 to double*
  store double %1369, double* %1370, align 1, !tbaa !2452
  %1371 = getelementptr inbounds i8, i8* %1357, i64 8
  %1372 = bitcast i8* %1371 to i64*
  store i64 %1366, i64* %1372, align 1, !tbaa !2452
  %1373 = load i64, i64* %RBP
  %1374 = sub i64 %1373, 48
  %1375 = bitcast %union.vec128_t* %XMM1 to i8*
  %1376 = load i64, i64* %PC
  %1377 = add i64 %1376, 5
  store i64 %1377, i64* %PC
  %1378 = bitcast i8* %1375 to double*
  %1379 = load double, double* %1378, align 1
  %1380 = inttoptr i64 %1374 to double*
  store double %1379, double* %1380
  %1381 = load i64, i64* %RBP
  %1382 = sub i64 %1381, 16
  %1383 = bitcast %union.vec128_t* %XMM0 to i8*
  %1384 = load i64, i64* %PC
  %1385 = add i64 %1384, 5
  store i64 %1385, i64* %PC
  %1386 = bitcast i8* %1383 to double*
  %1387 = load double, double* %1386, align 1
  %1388 = inttoptr i64 %1382 to double*
  store double %1387, double* %1388
  %1389 = load i64, i64* %RBP
  %1390 = sub i64 %1389, 32
  %1391 = bitcast %union.vec128_t* %XMM0 to i8*
  %1392 = load i64, i64* %PC
  %1393 = add i64 %1392, 5
  store i64 %1393, i64* %PC
  %1394 = bitcast i8* %1391 to double*
  %1395 = load double, double* %1394, align 1
  %1396 = inttoptr i64 %1390 to double*
  store double %1395, double* %1396
  %1397 = load i64, i64* %RBP
  %1398 = sub i64 %1397, 288
  %1399 = load i32, i32* %EAX
  %1400 = zext i32 %1399 to i64
  %1401 = load i64, i64* %PC
  %1402 = add i64 %1401, 6
  store i64 %1402, i64* %PC
  %1403 = inttoptr i64 %1398 to i32*
  store i32 %1399, i32* %1403
  %1404 = load i64, i64* %PC
  %1405 = add i64 %1404, 1649
  %1406 = load i64, i64* %PC
  %1407 = add i64 %1406, 5
  %1408 = load i64, i64* %PC
  %1409 = add i64 %1408, 5
  store i64 %1409, i64* %PC
  %1410 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %1411 = load i64, i64* %1410, align 8, !tbaa !2428
  %1412 = add i64 %1411, -8
  %1413 = inttoptr i64 %1412 to i64*
  store i64 %1407, i64* %1413
  store i64 %1412, i64* %1410, align 8, !tbaa !2428
  %1414 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %1405, i64* %1414, align 8, !tbaa !2428
  %1415 = load i64, i64* %PC
  %1416 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %1415, %struct.Memory* %1285)
  %1417 = load i64, i64* %RBP
  %1418 = sub i64 %1417, 72
  %1419 = load i64, i64* %PC
  %1420 = add i64 %1419, 8
  store i64 %1420, i64* %PC
  %1421 = inttoptr i64 %1418 to i64*
  store i64 1, i64* %1421
  %1422 = load i64, i64* %RBP
  %1423 = sub i64 %1422, 292
  %1424 = load i32, i32* %EAX
  %1425 = zext i32 %1424 to i64
  %1426 = load i64, i64* %PC
  %1427 = add i64 %1426, 6
  store i64 %1427, i64* %PC
  %1428 = inttoptr i64 %1423 to i32*
  store i32 %1424, i32* %1428
  br label %block_401f72

block_4018ce:                                     ; preds = %block_401627, %block_4018e3
  %MEMORY.0 = phi %struct.Memory* [ %8565, %block_401627 ], [ %MEMORY.0, %block_4018e3 ]
  %1429 = load i64, i64* %RBP
  %1430 = sub i64 %1429, 72
  %1431 = load i64, i64* %PC
  %1432 = add i64 %1431, 4
  store i64 %1432, i64* %PC
  %1433 = inttoptr i64 %1430 to i64*
  %1434 = load i64, i64* %1433
  store i64 %1434, i64* %RAX, align 8, !tbaa !2428
  %1435 = load i64, i64* %RBP
  %1436 = sub i64 %1435, 80
  %1437 = load i64, i64* %PC
  %1438 = add i64 %1437, 4
  store i64 %1438, i64* %PC
  %1439 = inttoptr i64 %1436 to i64*
  %1440 = load i64, i64* %1439
  store i64 %1440, i64* %RCX, align 8, !tbaa !2428
  %1441 = load i64, i64* %RCX
  %1442 = load i64, i64* %PC
  %1443 = add i64 %1442, 4
  store i64 %1443, i64* %PC
  %1444 = sub i64 %1441, 1
  store i64 %1444, i64* %RCX, align 8, !tbaa !2428
  %1445 = icmp ult i64 %1441, 1
  %1446 = zext i1 %1445 to i8
  %1447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1446, i8* %1447, align 1, !tbaa !2432
  %1448 = trunc i64 %1444 to i32
  %1449 = and i32 %1448, 255
  %1450 = call i32 @llvm.ctpop.i32(i32 %1449) #16
  %1451 = trunc i32 %1450 to i8
  %1452 = and i8 %1451, 1
  %1453 = xor i8 %1452, 1
  %1454 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1453, i8* %1454, align 1, !tbaa !2446
  %1455 = xor i64 1, %1441
  %1456 = xor i64 %1455, %1444
  %1457 = lshr i64 %1456, 4
  %1458 = trunc i64 %1457 to i8
  %1459 = and i8 %1458, 1
  %1460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1459, i8* %1460, align 1, !tbaa !2450
  %1461 = icmp eq i64 %1444, 0
  %1462 = zext i1 %1461 to i8
  %1463 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1462, i8* %1463, align 1, !tbaa !2447
  %1464 = lshr i64 %1444, 63
  %1465 = trunc i64 %1464 to i8
  %1466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1465, i8* %1466, align 1, !tbaa !2448
  %1467 = lshr i64 %1441, 63
  %1468 = xor i64 %1464, %1467
  %1469 = add nuw nsw i64 %1468, %1467
  %1470 = icmp eq i64 %1469, 2
  %1471 = zext i1 %1470 to i8
  %1472 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1471, i8* %1472, align 1, !tbaa !2449
  %1473 = load i64, i64* %RAX
  %1474 = load i64, i64* %RCX
  %1475 = load i64, i64* %PC
  %1476 = add i64 %1475, 3
  store i64 %1476, i64* %PC
  %1477 = sub i64 %1473, %1474
  %1478 = icmp ult i64 %1473, %1474
  %1479 = zext i1 %1478 to i8
  %1480 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1479, i8* %1480, align 1, !tbaa !2432
  %1481 = trunc i64 %1477 to i32
  %1482 = and i32 %1481, 255
  %1483 = call i32 @llvm.ctpop.i32(i32 %1482) #16
  %1484 = trunc i32 %1483 to i8
  %1485 = and i8 %1484, 1
  %1486 = xor i8 %1485, 1
  %1487 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1486, i8* %1487, align 1, !tbaa !2446
  %1488 = xor i64 %1474, %1473
  %1489 = xor i64 %1488, %1477
  %1490 = lshr i64 %1489, 4
  %1491 = trunc i64 %1490 to i8
  %1492 = and i8 %1491, 1
  %1493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1492, i8* %1493, align 1, !tbaa !2450
  %1494 = icmp eq i64 %1477, 0
  %1495 = zext i1 %1494 to i8
  %1496 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1495, i8* %1496, align 1, !tbaa !2447
  %1497 = lshr i64 %1477, 63
  %1498 = trunc i64 %1497 to i8
  %1499 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1498, i8* %1499, align 1, !tbaa !2448
  %1500 = lshr i64 %1473, 63
  %1501 = lshr i64 %1474, 63
  %1502 = xor i64 %1501, %1500
  %1503 = xor i64 %1497, %1500
  %1504 = add nuw nsw i64 %1503, %1502
  %1505 = icmp eq i64 %1504, 2
  %1506 = zext i1 %1505 to i8
  %1507 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1506, i8* %1507, align 1, !tbaa !2449
  %1508 = load i64, i64* %PC
  %1509 = add i64 %1508, 297
  %1510 = load i64, i64* %PC
  %1511 = add i64 %1510, 6
  %1512 = load i64, i64* %PC
  %1513 = add i64 %1512, 6
  store i64 %1513, i64* %PC
  %1514 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1515 = load i8, i8* %1514, align 1, !tbaa !2447
  %1516 = icmp eq i8 %1515, 0
  %1517 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1518 = load i8, i8* %1517, align 1, !tbaa !2448
  %1519 = icmp ne i8 %1518, 0
  %1520 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1521 = load i8, i8* %1520, align 1, !tbaa !2449
  %1522 = icmp ne i8 %1521, 0
  %1523 = xor i1 %1519, %1522
  %1524 = xor i1 %1523, true
  %1525 = and i1 %1516, %1524
  %1526 = zext i1 %1525 to i8
  store i8 %1526, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1527 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1528 = select i1 %1525, i64 %1509, i64 %1511
  store i64 %1528, i64* %1527, align 8, !tbaa !2428
  %1529 = load i8, i8* %BRANCH_TAKEN
  %1530 = icmp eq i8 %1529, 1
  br i1 %1530, label %block_401a06, label %block_4018e3

block_400e64:                                     ; preds = %block_400c81, %block_400e79
  %MEMORY.1 = phi %struct.Memory* [ %14903, %block_400c81 ], [ %MEMORY.1, %block_400e79 ]
  %1531 = load i64, i64* %RBP
  %1532 = sub i64 %1531, 72
  %1533 = load i64, i64* %PC
  %1534 = add i64 %1533, 4
  store i64 %1534, i64* %PC
  %1535 = inttoptr i64 %1532 to i64*
  %1536 = load i64, i64* %1535
  store i64 %1536, i64* %RAX, align 8, !tbaa !2428
  %1537 = load i64, i64* %RBP
  %1538 = sub i64 %1537, 80
  %1539 = load i64, i64* %PC
  %1540 = add i64 %1539, 4
  store i64 %1540, i64* %PC
  %1541 = inttoptr i64 %1538 to i64*
  %1542 = load i64, i64* %1541
  store i64 %1542, i64* %RCX, align 8, !tbaa !2428
  %1543 = load i64, i64* %RCX
  %1544 = load i64, i64* %PC
  %1545 = add i64 %1544, 4
  store i64 %1545, i64* %PC
  %1546 = sub i64 %1543, 1
  store i64 %1546, i64* %RCX, align 8, !tbaa !2428
  %1547 = icmp ult i64 %1543, 1
  %1548 = zext i1 %1547 to i8
  %1549 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1548, i8* %1549, align 1, !tbaa !2432
  %1550 = trunc i64 %1546 to i32
  %1551 = and i32 %1550, 255
  %1552 = call i32 @llvm.ctpop.i32(i32 %1551) #16
  %1553 = trunc i32 %1552 to i8
  %1554 = and i8 %1553, 1
  %1555 = xor i8 %1554, 1
  %1556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1555, i8* %1556, align 1, !tbaa !2446
  %1557 = xor i64 1, %1543
  %1558 = xor i64 %1557, %1546
  %1559 = lshr i64 %1558, 4
  %1560 = trunc i64 %1559 to i8
  %1561 = and i8 %1560, 1
  %1562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1561, i8* %1562, align 1, !tbaa !2450
  %1563 = icmp eq i64 %1546, 0
  %1564 = zext i1 %1563 to i8
  %1565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1564, i8* %1565, align 1, !tbaa !2447
  %1566 = lshr i64 %1546, 63
  %1567 = trunc i64 %1566 to i8
  %1568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1567, i8* %1568, align 1, !tbaa !2448
  %1569 = lshr i64 %1543, 63
  %1570 = xor i64 %1566, %1569
  %1571 = add nuw nsw i64 %1570, %1569
  %1572 = icmp eq i64 %1571, 2
  %1573 = zext i1 %1572 to i8
  %1574 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1573, i8* %1574, align 1, !tbaa !2449
  %1575 = load i64, i64* %RAX
  %1576 = load i64, i64* %RCX
  %1577 = load i64, i64* %PC
  %1578 = add i64 %1577, 3
  store i64 %1578, i64* %PC
  %1579 = sub i64 %1575, %1576
  %1580 = icmp ult i64 %1575, %1576
  %1581 = zext i1 %1580 to i8
  %1582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %1581, i8* %1582, align 1, !tbaa !2432
  %1583 = trunc i64 %1579 to i32
  %1584 = and i32 %1583, 255
  %1585 = call i32 @llvm.ctpop.i32(i32 %1584) #16
  %1586 = trunc i32 %1585 to i8
  %1587 = and i8 %1586, 1
  %1588 = xor i8 %1587, 1
  %1589 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %1588, i8* %1589, align 1, !tbaa !2446
  %1590 = xor i64 %1576, %1575
  %1591 = xor i64 %1590, %1579
  %1592 = lshr i64 %1591, 4
  %1593 = trunc i64 %1592 to i8
  %1594 = and i8 %1593, 1
  %1595 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %1594, i8* %1595, align 1, !tbaa !2450
  %1596 = icmp eq i64 %1579, 0
  %1597 = zext i1 %1596 to i8
  %1598 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %1597, i8* %1598, align 1, !tbaa !2447
  %1599 = lshr i64 %1579, 63
  %1600 = trunc i64 %1599 to i8
  %1601 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %1600, i8* %1601, align 1, !tbaa !2448
  %1602 = lshr i64 %1575, 63
  %1603 = lshr i64 %1576, 63
  %1604 = xor i64 %1603, %1602
  %1605 = xor i64 %1599, %1602
  %1606 = add nuw nsw i64 %1605, %1604
  %1607 = icmp eq i64 %1606, 2
  %1608 = zext i1 %1607 to i8
  %1609 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %1608, i8* %1609, align 1, !tbaa !2449
  %1610 = load i64, i64* %PC
  %1611 = add i64 %1610, 188
  %1612 = load i64, i64* %PC
  %1613 = add i64 %1612, 6
  %1614 = load i64, i64* %PC
  %1615 = add i64 %1614, 6
  store i64 %1615, i64* %PC
  %1616 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %1617 = load i8, i8* %1616, align 1, !tbaa !2447
  %1618 = icmp eq i8 %1617, 0
  %1619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %1620 = load i8, i8* %1619, align 1, !tbaa !2448
  %1621 = icmp ne i8 %1620, 0
  %1622 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %1623 = load i8, i8* %1622, align 1, !tbaa !2449
  %1624 = icmp ne i8 %1623, 0
  %1625 = xor i1 %1621, %1624
  %1626 = xor i1 %1625, true
  %1627 = and i1 %1618, %1626
  %1628 = zext i1 %1627 to i8
  store i8 %1628, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %1629 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %1630 = select i1 %1627, i64 %1611, i64 %1613
  store i64 %1630, i64* %1629, align 8, !tbaa !2428
  %1631 = load i8, i8* %BRANCH_TAKEN
  %1632 = icmp eq i8 %1631, 1
  br i1 %1632, label %block_400f2f, label %block_400e79

block_400e79:                                     ; preds = %block_400e64
  %1633 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1634 = load i64, i64* %RBP
  %1635 = sub i64 %1634, 32
  %1636 = load i64, i64* %PC
  %1637 = add i64 %1636, 5
  store i64 %1637, i64* %PC
  %1638 = inttoptr i64 %1635 to double*
  %1639 = load double, double* %1638
  %1640 = bitcast i8* %1633 to double*
  store double %1639, double* %1640, align 1, !tbaa !2452
  %1641 = getelementptr inbounds i8, i8* %1633, i64 8
  %1642 = bitcast i8* %1641 to double*
  store double 0.000000e+00, double* %1642, align 1, !tbaa !2452
  %1643 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1644 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1645 = load i64, i64* %PC
  %1646 = add i64 %1645, 9
  store i64 %1646, i64* %PC
  %1647 = bitcast i8* %1644 to double*
  %1648 = load double, double* %1647, align 1
  %1649 = getelementptr inbounds i8, i8* %1644, i64 8
  %1650 = bitcast i8* %1649 to i64*
  %1651 = load i64, i64* %1650, align 1
  %1652 = load double, double* bitcast (%one_type* @one to double*)
  %1653 = fadd double %1648, %1652
  %1654 = bitcast i8* %1643 to double*
  store double %1653, double* %1654, align 1, !tbaa !2452
  %1655 = getelementptr inbounds i8, i8* %1643, i64 8
  %1656 = bitcast i8* %1655 to i64*
  store i64 %1651, i64* %1656, align 1, !tbaa !2452
  %1657 = load i64, i64* %RBP
  %1658 = sub i64 %1657, 32
  %1659 = bitcast %union.vec128_t* %XMM0 to i8*
  %1660 = load i64, i64* %PC
  %1661 = add i64 %1660, 5
  store i64 %1661, i64* %PC
  %1662 = bitcast i8* %1659 to double*
  %1663 = load double, double* %1662, align 1
  %1664 = inttoptr i64 %1658 to double*
  store double %1663, double* %1664
  %1665 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1666 = load i64, i64* %RBP
  %1667 = sub i64 %1666, 32
  %1668 = load i64, i64* %PC
  %1669 = add i64 %1668, 5
  store i64 %1669, i64* %PC
  %1670 = inttoptr i64 %1667 to double*
  %1671 = load double, double* %1670
  %1672 = bitcast i8* %1665 to double*
  store double %1671, double* %1672, align 1, !tbaa !2452
  %1673 = getelementptr inbounds i8, i8* %1665, i64 8
  %1674 = bitcast i8* %1673 to double*
  store double 0.000000e+00, double* %1674, align 1, !tbaa !2452
  %1675 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1676 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1677 = load i64, i64* %RBP
  %1678 = sub i64 %1677, 48
  %1679 = load i64, i64* %PC
  %1680 = add i64 %1679, 5
  store i64 %1680, i64* %PC
  %1681 = bitcast i8* %1676 to double*
  %1682 = load double, double* %1681, align 1
  %1683 = getelementptr inbounds i8, i8* %1676, i64 8
  %1684 = bitcast i8* %1683 to i64*
  %1685 = load i64, i64* %1684, align 1
  %1686 = inttoptr i64 %1678 to double*
  %1687 = load double, double* %1686
  %1688 = fmul double %1682, %1687
  %1689 = bitcast i8* %1675 to double*
  store double %1688, double* %1689, align 1, !tbaa !2452
  %1690 = getelementptr inbounds i8, i8* %1675, i64 8
  %1691 = bitcast i8* %1690 to i64*
  store i64 %1685, i64* %1691, align 1, !tbaa !2452
  %1692 = load i64, i64* %RBP
  %1693 = sub i64 %1692, 24
  %1694 = bitcast %union.vec128_t* %XMM0 to i8*
  %1695 = load i64, i64* %PC
  %1696 = add i64 %1695, 5
  store i64 %1696, i64* %PC
  %1697 = bitcast i8* %1694 to double*
  %1698 = load double, double* %1697, align 1
  %1699 = inttoptr i64 %1693 to double*
  store double %1698, double* %1699
  %1700 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1701 = load i64, i64* %RBP
  %1702 = sub i64 %1701, 24
  %1703 = load i64, i64* %PC
  %1704 = add i64 %1703, 5
  store i64 %1704, i64* %PC
  %1705 = inttoptr i64 %1702 to double*
  %1706 = load double, double* %1705
  %1707 = bitcast i8* %1700 to double*
  store double %1706, double* %1707, align 1, !tbaa !2452
  %1708 = getelementptr inbounds i8, i8* %1700, i64 8
  %1709 = bitcast i8* %1708 to double*
  store double 0.000000e+00, double* %1709, align 1, !tbaa !2452
  %1710 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1711 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1712 = load i64, i64* %RBP
  %1713 = sub i64 %1712, 24
  %1714 = load i64, i64* %PC
  %1715 = add i64 %1714, 5
  store i64 %1715, i64* %PC
  %1716 = bitcast i8* %1711 to double*
  %1717 = load double, double* %1716, align 1
  %1718 = getelementptr inbounds i8, i8* %1711, i64 8
  %1719 = bitcast i8* %1718 to i64*
  %1720 = load i64, i64* %1719, align 1
  %1721 = inttoptr i64 %1713 to double*
  %1722 = load double, double* %1721
  %1723 = fmul double %1717, %1722
  %1724 = bitcast i8* %1710 to double*
  store double %1723, double* %1724, align 1, !tbaa !2452
  %1725 = getelementptr inbounds i8, i8* %1710, i64 8
  %1726 = bitcast i8* %1725 to i64*
  store i64 %1720, i64* %1726, align 1, !tbaa !2452
  %1727 = load i64, i64* %RBP
  %1728 = sub i64 %1727, 40
  %1729 = bitcast %union.vec128_t* %XMM0 to i8*
  %1730 = load i64, i64* %PC
  %1731 = add i64 %1730, 5
  store i64 %1731, i64* %PC
  %1732 = bitcast i8* %1729 to double*
  %1733 = load double, double* %1732, align 1
  %1734 = inttoptr i64 %1728 to double*
  store double %1733, double* %1734
  %1735 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1736 = load i64, i64* %RBP
  %1737 = sub i64 %1736, 16
  %1738 = load i64, i64* %PC
  %1739 = add i64 %1738, 5
  store i64 %1739, i64* %PC
  %1740 = inttoptr i64 %1737 to double*
  %1741 = load double, double* %1740
  %1742 = bitcast i8* %1735 to double*
  store double %1741, double* %1742, align 1, !tbaa !2452
  %1743 = getelementptr inbounds i8, i8* %1735, i64 8
  %1744 = bitcast i8* %1743 to double*
  store double 0.000000e+00, double* %1744, align 1, !tbaa !2452
  %1745 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1746 = load i64, i64* %RBP
  %1747 = sub i64 %1746, 24
  %1748 = load i64, i64* %PC
  %1749 = add i64 %1748, 5
  store i64 %1749, i64* %PC
  %1750 = inttoptr i64 %1747 to double*
  %1751 = load double, double* %1750
  %1752 = bitcast i8* %1745 to double*
  store double %1751, double* %1752, align 1, !tbaa !2452
  %1753 = getelementptr inbounds i8, i8* %1745, i64 8
  %1754 = bitcast i8* %1753 to double*
  store double 0.000000e+00, double* %1754, align 1, !tbaa !2452
  %1755 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1756 = load i64, i64* %PC
  %1757 = add i64 %1756, 9
  store i64 %1757, i64* %PC
  %1758 = load double, double* bitcast (%A6_type* @A6 to double*)
  %1759 = bitcast i8* %1755 to double*
  store double %1758, double* %1759, align 1, !tbaa !2452
  %1760 = getelementptr inbounds i8, i8* %1755, i64 8
  %1761 = bitcast i8* %1760 to double*
  store double 0.000000e+00, double* %1761, align 1, !tbaa !2452
  %1762 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1763 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1764 = load i64, i64* %RBP
  %1765 = sub i64 %1764, 40
  %1766 = load i64, i64* %PC
  %1767 = add i64 %1766, 5
  store i64 %1767, i64* %PC
  %1768 = bitcast i8* %1763 to double*
  %1769 = load double, double* %1768, align 1
  %1770 = getelementptr inbounds i8, i8* %1763, i64 8
  %1771 = bitcast i8* %1770 to i64*
  %1772 = load i64, i64* %1771, align 1
  %1773 = inttoptr i64 %1765 to double*
  %1774 = load double, double* %1773
  %1775 = fmul double %1769, %1774
  %1776 = bitcast i8* %1762 to double*
  store double %1775, double* %1776, align 1, !tbaa !2452
  %1777 = getelementptr inbounds i8, i8* %1762, i64 8
  %1778 = bitcast i8* %1777 to i64*
  store i64 %1772, i64* %1778, align 1, !tbaa !2452
  %1779 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1780 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1781 = load i64, i64* %PC
  %1782 = add i64 %1781, 9
  store i64 %1782, i64* %PC
  %1783 = bitcast i8* %1780 to double*
  %1784 = load double, double* %1783, align 1
  %1785 = getelementptr inbounds i8, i8* %1780, i64 8
  %1786 = bitcast i8* %1785 to i64*
  %1787 = load i64, i64* %1786, align 1
  %1788 = load double, double* bitcast (%A5_type* @A5 to double*)
  %1789 = fsub double %1784, %1788
  %1790 = bitcast i8* %1779 to double*
  store double %1789, double* %1790, align 1, !tbaa !2452
  %1791 = getelementptr inbounds i8, i8* %1779, i64 8
  %1792 = bitcast i8* %1791 to i64*
  store i64 %1787, i64* %1792, align 1, !tbaa !2452
  %1793 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1794 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1795 = load i64, i64* %RBP
  %1796 = sub i64 %1795, 40
  %1797 = load i64, i64* %PC
  %1798 = add i64 %1797, 5
  store i64 %1798, i64* %PC
  %1799 = bitcast i8* %1794 to double*
  %1800 = load double, double* %1799, align 1
  %1801 = getelementptr inbounds i8, i8* %1794, i64 8
  %1802 = bitcast i8* %1801 to i64*
  %1803 = load i64, i64* %1802, align 1
  %1804 = inttoptr i64 %1796 to double*
  %1805 = load double, double* %1804
  %1806 = fmul double %1800, %1805
  %1807 = bitcast i8* %1793 to double*
  store double %1806, double* %1807, align 1, !tbaa !2452
  %1808 = getelementptr inbounds i8, i8* %1793, i64 8
  %1809 = bitcast i8* %1808 to i64*
  store i64 %1803, i64* %1809, align 1, !tbaa !2452
  %1810 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1811 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1812 = load i64, i64* %PC
  %1813 = add i64 %1812, 9
  store i64 %1813, i64* %PC
  %1814 = bitcast i8* %1811 to double*
  %1815 = load double, double* %1814, align 1
  %1816 = getelementptr inbounds i8, i8* %1811, i64 8
  %1817 = bitcast i8* %1816 to i64*
  %1818 = load i64, i64* %1817, align 1
  %1819 = load double, double* bitcast (%A4_type* @A4 to double*)
  %1820 = fadd double %1815, %1819
  %1821 = bitcast i8* %1810 to double*
  store double %1820, double* %1821, align 1, !tbaa !2452
  %1822 = getelementptr inbounds i8, i8* %1810, i64 8
  %1823 = bitcast i8* %1822 to i64*
  store i64 %1818, i64* %1823, align 1, !tbaa !2452
  %1824 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1825 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1826 = load i64, i64* %RBP
  %1827 = sub i64 %1826, 40
  %1828 = load i64, i64* %PC
  %1829 = add i64 %1828, 5
  store i64 %1829, i64* %PC
  %1830 = bitcast i8* %1825 to double*
  %1831 = load double, double* %1830, align 1
  %1832 = getelementptr inbounds i8, i8* %1825, i64 8
  %1833 = bitcast i8* %1832 to i64*
  %1834 = load i64, i64* %1833, align 1
  %1835 = inttoptr i64 %1827 to double*
  %1836 = load double, double* %1835
  %1837 = fmul double %1831, %1836
  %1838 = bitcast i8* %1824 to double*
  store double %1837, double* %1838, align 1, !tbaa !2452
  %1839 = getelementptr inbounds i8, i8* %1824, i64 8
  %1840 = bitcast i8* %1839 to i64*
  store i64 %1834, i64* %1840, align 1, !tbaa !2452
  %1841 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1842 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1843 = load i64, i64* %PC
  %1844 = add i64 %1843, 9
  store i64 %1844, i64* %PC
  %1845 = bitcast i8* %1842 to double*
  %1846 = load double, double* %1845, align 1
  %1847 = getelementptr inbounds i8, i8* %1842, i64 8
  %1848 = bitcast i8* %1847 to i64*
  %1849 = load i64, i64* %1848, align 1
  %1850 = load double, double* bitcast (%A3_type* @A3 to double*)
  %1851 = fsub double %1846, %1850
  %1852 = bitcast i8* %1841 to double*
  store double %1851, double* %1852, align 1, !tbaa !2452
  %1853 = getelementptr inbounds i8, i8* %1841, i64 8
  %1854 = bitcast i8* %1853 to i64*
  store i64 %1849, i64* %1854, align 1, !tbaa !2452
  %1855 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1856 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1857 = load i64, i64* %RBP
  %1858 = sub i64 %1857, 40
  %1859 = load i64, i64* %PC
  %1860 = add i64 %1859, 5
  store i64 %1860, i64* %PC
  %1861 = bitcast i8* %1856 to double*
  %1862 = load double, double* %1861, align 1
  %1863 = getelementptr inbounds i8, i8* %1856, i64 8
  %1864 = bitcast i8* %1863 to i64*
  %1865 = load i64, i64* %1864, align 1
  %1866 = inttoptr i64 %1858 to double*
  %1867 = load double, double* %1866
  %1868 = fmul double %1862, %1867
  %1869 = bitcast i8* %1855 to double*
  store double %1868, double* %1869, align 1, !tbaa !2452
  %1870 = getelementptr inbounds i8, i8* %1855, i64 8
  %1871 = bitcast i8* %1870 to i64*
  store i64 %1865, i64* %1871, align 1, !tbaa !2452
  %1872 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1873 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1874 = load i64, i64* %PC
  %1875 = add i64 %1874, 9
  store i64 %1875, i64* %PC
  %1876 = bitcast i8* %1873 to double*
  %1877 = load double, double* %1876, align 1
  %1878 = getelementptr inbounds i8, i8* %1873, i64 8
  %1879 = bitcast i8* %1878 to i64*
  %1880 = load i64, i64* %1879, align 1
  %1881 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %1882 = fadd double %1877, %1881
  %1883 = bitcast i8* %1872 to double*
  store double %1882, double* %1883, align 1, !tbaa !2452
  %1884 = getelementptr inbounds i8, i8* %1872, i64 8
  %1885 = bitcast i8* %1884 to i64*
  store i64 %1880, i64* %1885, align 1, !tbaa !2452
  %1886 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1887 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1888 = load i64, i64* %RBP
  %1889 = sub i64 %1888, 40
  %1890 = load i64, i64* %PC
  %1891 = add i64 %1890, 5
  store i64 %1891, i64* %PC
  %1892 = bitcast i8* %1887 to double*
  %1893 = load double, double* %1892, align 1
  %1894 = getelementptr inbounds i8, i8* %1887, i64 8
  %1895 = bitcast i8* %1894 to i64*
  %1896 = load i64, i64* %1895, align 1
  %1897 = inttoptr i64 %1889 to double*
  %1898 = load double, double* %1897
  %1899 = fmul double %1893, %1898
  %1900 = bitcast i8* %1886 to double*
  store double %1899, double* %1900, align 1, !tbaa !2452
  %1901 = getelementptr inbounds i8, i8* %1886, i64 8
  %1902 = bitcast i8* %1901 to i64*
  store i64 %1896, i64* %1902, align 1, !tbaa !2452
  %1903 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1904 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1905 = load i64, i64* %PC
  %1906 = add i64 %1905, 9
  store i64 %1906, i64* %PC
  %1907 = bitcast i8* %1904 to double*
  %1908 = load double, double* %1907, align 1
  %1909 = getelementptr inbounds i8, i8* %1904, i64 8
  %1910 = bitcast i8* %1909 to i64*
  %1911 = load i64, i64* %1910, align 1
  %1912 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %1913 = fadd double %1908, %1912
  %1914 = bitcast i8* %1903 to double*
  store double %1913, double* %1914, align 1, !tbaa !2452
  %1915 = getelementptr inbounds i8, i8* %1903, i64 8
  %1916 = bitcast i8* %1915 to i64*
  store i64 %1911, i64* %1916, align 1, !tbaa !2452
  %1917 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1918 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1919 = load i64, i64* %RBP
  %1920 = sub i64 %1919, 40
  %1921 = load i64, i64* %PC
  %1922 = add i64 %1921, 5
  store i64 %1922, i64* %PC
  %1923 = bitcast i8* %1918 to double*
  %1924 = load double, double* %1923, align 1
  %1925 = getelementptr inbounds i8, i8* %1918, i64 8
  %1926 = bitcast i8* %1925 to i64*
  %1927 = load i64, i64* %1926, align 1
  %1928 = inttoptr i64 %1920 to double*
  %1929 = load double, double* %1928
  %1930 = fmul double %1924, %1929
  %1931 = bitcast i8* %1917 to double*
  store double %1930, double* %1931, align 1, !tbaa !2452
  %1932 = getelementptr inbounds i8, i8* %1917, i64 8
  %1933 = bitcast i8* %1932 to i64*
  store i64 %1927, i64* %1933, align 1, !tbaa !2452
  %1934 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1935 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %1936 = load i64, i64* %PC
  %1937 = add i64 %1936, 9
  store i64 %1937, i64* %PC
  %1938 = bitcast i8* %1935 to double*
  %1939 = load double, double* %1938, align 1
  %1940 = getelementptr inbounds i8, i8* %1935, i64 8
  %1941 = bitcast i8* %1940 to i64*
  %1942 = load i64, i64* %1941, align 1
  %1943 = load double, double* bitcast (%one_type* @one to double*)
  %1944 = fadd double %1939, %1943
  %1945 = bitcast i8* %1934 to double*
  store double %1944, double* %1945, align 1, !tbaa !2452
  %1946 = getelementptr inbounds i8, i8* %1934, i64 8
  %1947 = bitcast i8* %1946 to i64*
  store i64 %1942, i64* %1947, align 1, !tbaa !2452
  %1948 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1949 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %1950 = bitcast %union.vec128_t* %XMM2 to i8*
  %1951 = load i64, i64* %PC
  %1952 = add i64 %1951, 4
  store i64 %1952, i64* %PC
  %1953 = bitcast i8* %1949 to double*
  %1954 = load double, double* %1953, align 1
  %1955 = getelementptr inbounds i8, i8* %1949, i64 8
  %1956 = bitcast i8* %1955 to i64*
  %1957 = load i64, i64* %1956, align 1
  %1958 = bitcast i8* %1950 to double*
  %1959 = load double, double* %1958, align 1
  %1960 = fmul double %1954, %1959
  %1961 = bitcast i8* %1948 to double*
  store double %1960, double* %1961, align 1, !tbaa !2452
  %1962 = getelementptr inbounds i8, i8* %1948, i64 8
  %1963 = bitcast i8* %1962 to i64*
  store i64 %1957, i64* %1963, align 1, !tbaa !2452
  %1964 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1965 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %1966 = bitcast %union.vec128_t* %XMM1 to i8*
  %1967 = load i64, i64* %PC
  %1968 = add i64 %1967, 4
  store i64 %1968, i64* %PC
  %1969 = bitcast i8* %1965 to double*
  %1970 = load double, double* %1969, align 1
  %1971 = getelementptr inbounds i8, i8* %1965, i64 8
  %1972 = bitcast i8* %1971 to i64*
  %1973 = load i64, i64* %1972, align 1
  %1974 = bitcast i8* %1966 to double*
  %1975 = load double, double* %1974, align 1
  %1976 = fadd double %1970, %1975
  %1977 = bitcast i8* %1964 to double*
  store double %1976, double* %1977, align 1, !tbaa !2452
  %1978 = getelementptr inbounds i8, i8* %1964, i64 8
  %1979 = bitcast i8* %1978 to i64*
  store i64 %1973, i64* %1979, align 1, !tbaa !2452
  %1980 = load i64, i64* %RBP
  %1981 = sub i64 %1980, 16
  %1982 = bitcast %union.vec128_t* %XMM0 to i8*
  %1983 = load i64, i64* %PC
  %1984 = add i64 %1983, 5
  store i64 %1984, i64* %PC
  %1985 = bitcast i8* %1982 to double*
  %1986 = load double, double* %1985, align 1
  %1987 = inttoptr i64 %1981 to double*
  store double %1986, double* %1987
  %1988 = load i64, i64* %RBP
  %1989 = sub i64 %1988, 72
  %1990 = load i64, i64* %PC
  %1991 = add i64 %1990, 4
  store i64 %1991, i64* %PC
  %1992 = inttoptr i64 %1989 to i64*
  %1993 = load i64, i64* %1992
  store i64 %1993, i64* %RAX, align 8, !tbaa !2428
  %1994 = load i64, i64* %RAX
  %1995 = load i64, i64* %PC
  %1996 = add i64 %1995, 4
  store i64 %1996, i64* %PC
  %1997 = add i64 1, %1994
  store i64 %1997, i64* %RAX, align 8, !tbaa !2428
  %1998 = icmp ult i64 %1997, %1994
  %1999 = icmp ult i64 %1997, 1
  %2000 = or i1 %1998, %1999
  %2001 = zext i1 %2000 to i8
  %2002 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2001, i8* %2002, align 1, !tbaa !2432
  %2003 = trunc i64 %1997 to i32
  %2004 = and i32 %2003, 255
  %2005 = call i32 @llvm.ctpop.i32(i32 %2004) #16
  %2006 = trunc i32 %2005 to i8
  %2007 = and i8 %2006, 1
  %2008 = xor i8 %2007, 1
  %2009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2008, i8* %2009, align 1, !tbaa !2446
  %2010 = xor i64 1, %1994
  %2011 = xor i64 %2010, %1997
  %2012 = lshr i64 %2011, 4
  %2013 = trunc i64 %2012 to i8
  %2014 = and i8 %2013, 1
  %2015 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2014, i8* %2015, align 1, !tbaa !2450
  %2016 = icmp eq i64 %1997, 0
  %2017 = zext i1 %2016 to i8
  %2018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2017, i8* %2018, align 1, !tbaa !2447
  %2019 = lshr i64 %1997, 63
  %2020 = trunc i64 %2019 to i8
  %2021 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2020, i8* %2021, align 1, !tbaa !2448
  %2022 = lshr i64 %1994, 63
  %2023 = xor i64 %2019, %2022
  %2024 = add nuw nsw i64 %2023, %2019
  %2025 = icmp eq i64 %2024, 2
  %2026 = zext i1 %2025 to i8
  %2027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2026, i8* %2027, align 1, !tbaa !2449
  %2028 = load i64, i64* %RBP
  %2029 = sub i64 %2028, 72
  %2030 = load i64, i64* %RAX
  %2031 = load i64, i64* %PC
  %2032 = add i64 %2031, 4
  store i64 %2032, i64* %PC
  %2033 = inttoptr i64 %2029 to i64*
  store i64 %2030, i64* %2033
  %2034 = load i64, i64* %PC
  %2035 = sub i64 %2034, 198
  %2036 = load i64, i64* %PC
  %2037 = add i64 %2036, 5
  store i64 %2037, i64* %PC
  %2038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2035, i64* %2038, align 8, !tbaa !2428
  br label %block_400e64

block_4018e3:                                     ; preds = %block_4018ce
  %2039 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2040 = load i64, i64* %RBP
  %2041 = sub i64 %2040, 72
  %2042 = load i64, i64* %PC
  %2043 = add i64 %2042, 6
  store i64 %2043, i64* %PC
  %2044 = inttoptr i64 %2041 to i64*
  %2045 = load i64, i64* %2044
  %2046 = sitofp i64 %2045 to double
  %2047 = bitcast i8* %2039 to double*
  store double %2046, double* %2047, align 1, !tbaa !2452
  %2048 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2049 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2050 = load i64, i64* %RBP
  %2051 = sub i64 %2050, 48
  %2052 = load i64, i64* %PC
  %2053 = add i64 %2052, 5
  store i64 %2053, i64* %PC
  %2054 = bitcast i8* %2049 to double*
  %2055 = load double, double* %2054, align 1
  %2056 = getelementptr inbounds i8, i8* %2049, i64 8
  %2057 = bitcast i8* %2056 to i64*
  %2058 = load i64, i64* %2057, align 1
  %2059 = inttoptr i64 %2051 to double*
  %2060 = load double, double* %2059
  %2061 = fmul double %2055, %2060
  %2062 = bitcast i8* %2048 to double*
  store double %2061, double* %2062, align 1, !tbaa !2452
  %2063 = getelementptr inbounds i8, i8* %2048, i64 8
  %2064 = bitcast i8* %2063 to i64*
  store i64 %2058, i64* %2064, align 1, !tbaa !2452
  %2065 = load i64, i64* %RBP
  %2066 = sub i64 %2065, 24
  %2067 = bitcast %union.vec128_t* %XMM0 to i8*
  %2068 = load i64, i64* %PC
  %2069 = add i64 %2068, 5
  store i64 %2069, i64* %PC
  %2070 = bitcast i8* %2067 to double*
  %2071 = load double, double* %2070, align 1
  %2072 = inttoptr i64 %2066 to double*
  store double %2071, double* %2072
  %2073 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2074 = load i64, i64* %RBP
  %2075 = sub i64 %2074, 24
  %2076 = load i64, i64* %PC
  %2077 = add i64 %2076, 5
  store i64 %2077, i64* %PC
  %2078 = inttoptr i64 %2075 to double*
  %2079 = load double, double* %2078
  %2080 = bitcast i8* %2073 to double*
  store double %2079, double* %2080, align 1, !tbaa !2452
  %2081 = getelementptr inbounds i8, i8* %2073, i64 8
  %2082 = bitcast i8* %2081 to double*
  store double 0.000000e+00, double* %2082, align 1, !tbaa !2452
  %2083 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2084 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2085 = load i64, i64* %RBP
  %2086 = sub i64 %2085, 24
  %2087 = load i64, i64* %PC
  %2088 = add i64 %2087, 5
  store i64 %2088, i64* %PC
  %2089 = bitcast i8* %2084 to double*
  %2090 = load double, double* %2089, align 1
  %2091 = getelementptr inbounds i8, i8* %2084, i64 8
  %2092 = bitcast i8* %2091 to i64*
  %2093 = load i64, i64* %2092, align 1
  %2094 = inttoptr i64 %2086 to double*
  %2095 = load double, double* %2094
  %2096 = fmul double %2090, %2095
  %2097 = bitcast i8* %2083 to double*
  store double %2096, double* %2097, align 1, !tbaa !2452
  %2098 = getelementptr inbounds i8, i8* %2083, i64 8
  %2099 = bitcast i8* %2098 to i64*
  store i64 %2093, i64* %2099, align 1, !tbaa !2452
  %2100 = load i64, i64* %RBP
  %2101 = sub i64 %2100, 40
  %2102 = bitcast %union.vec128_t* %XMM0 to i8*
  %2103 = load i64, i64* %PC
  %2104 = add i64 %2103, 5
  store i64 %2104, i64* %PC
  %2105 = bitcast i8* %2102 to double*
  %2106 = load double, double* %2105, align 1
  %2107 = inttoptr i64 %2101 to double*
  store double %2106, double* %2107
  %2108 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2109 = load i64, i64* %RBP
  %2110 = sub i64 %2109, 24
  %2111 = load i64, i64* %PC
  %2112 = add i64 %2111, 5
  store i64 %2112, i64* %PC
  %2113 = inttoptr i64 %2110 to double*
  %2114 = load double, double* %2113
  %2115 = bitcast i8* %2108 to double*
  store double %2114, double* %2115, align 1, !tbaa !2452
  %2116 = getelementptr inbounds i8, i8* %2108, i64 8
  %2117 = bitcast i8* %2116 to double*
  store double 0.000000e+00, double* %2117, align 1, !tbaa !2452
  %2118 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2119 = load i64, i64* %PC
  %2120 = add i64 %2119, 9
  store i64 %2120, i64* %PC
  %2121 = load double, double* bitcast (%A6_type* @A6 to double*)
  %2122 = bitcast i8* %2118 to double*
  store double %2121, double* %2122, align 1, !tbaa !2452
  %2123 = getelementptr inbounds i8, i8* %2118, i64 8
  %2124 = bitcast i8* %2123 to double*
  store double 0.000000e+00, double* %2124, align 1, !tbaa !2452
  %2125 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2126 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2127 = load i64, i64* %RBP
  %2128 = sub i64 %2127, 40
  %2129 = load i64, i64* %PC
  %2130 = add i64 %2129, 5
  store i64 %2130, i64* %PC
  %2131 = bitcast i8* %2126 to double*
  %2132 = load double, double* %2131, align 1
  %2133 = getelementptr inbounds i8, i8* %2126, i64 8
  %2134 = bitcast i8* %2133 to i64*
  %2135 = load i64, i64* %2134, align 1
  %2136 = inttoptr i64 %2128 to double*
  %2137 = load double, double* %2136
  %2138 = fmul double %2132, %2137
  %2139 = bitcast i8* %2125 to double*
  store double %2138, double* %2139, align 1, !tbaa !2452
  %2140 = getelementptr inbounds i8, i8* %2125, i64 8
  %2141 = bitcast i8* %2140 to i64*
  store i64 %2135, i64* %2141, align 1, !tbaa !2452
  %2142 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2143 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2144 = load i64, i64* %PC
  %2145 = add i64 %2144, 9
  store i64 %2145, i64* %PC
  %2146 = bitcast i8* %2143 to double*
  %2147 = load double, double* %2146, align 1
  %2148 = getelementptr inbounds i8, i8* %2143, i64 8
  %2149 = bitcast i8* %2148 to i64*
  %2150 = load i64, i64* %2149, align 1
  %2151 = load double, double* bitcast (%A5_type* @A5 to double*)
  %2152 = fadd double %2147, %2151
  %2153 = bitcast i8* %2142 to double*
  store double %2152, double* %2153, align 1, !tbaa !2452
  %2154 = getelementptr inbounds i8, i8* %2142, i64 8
  %2155 = bitcast i8* %2154 to i64*
  store i64 %2150, i64* %2155, align 1, !tbaa !2452
  %2156 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2157 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2158 = load i64, i64* %RBP
  %2159 = sub i64 %2158, 40
  %2160 = load i64, i64* %PC
  %2161 = add i64 %2160, 5
  store i64 %2161, i64* %PC
  %2162 = bitcast i8* %2157 to double*
  %2163 = load double, double* %2162, align 1
  %2164 = getelementptr inbounds i8, i8* %2157, i64 8
  %2165 = bitcast i8* %2164 to i64*
  %2166 = load i64, i64* %2165, align 1
  %2167 = inttoptr i64 %2159 to double*
  %2168 = load double, double* %2167
  %2169 = fmul double %2163, %2168
  %2170 = bitcast i8* %2156 to double*
  store double %2169, double* %2170, align 1, !tbaa !2452
  %2171 = getelementptr inbounds i8, i8* %2156, i64 8
  %2172 = bitcast i8* %2171 to i64*
  store i64 %2166, i64* %2172, align 1, !tbaa !2452
  %2173 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2174 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2175 = load i64, i64* %PC
  %2176 = add i64 %2175, 9
  store i64 %2176, i64* %PC
  %2177 = bitcast i8* %2174 to double*
  %2178 = load double, double* %2177, align 1
  %2179 = getelementptr inbounds i8, i8* %2174, i64 8
  %2180 = bitcast i8* %2179 to i64*
  %2181 = load i64, i64* %2180, align 1
  %2182 = load double, double* bitcast (%A4_type* @A4 to double*)
  %2183 = fadd double %2178, %2182
  %2184 = bitcast i8* %2173 to double*
  store double %2183, double* %2184, align 1, !tbaa !2452
  %2185 = getelementptr inbounds i8, i8* %2173, i64 8
  %2186 = bitcast i8* %2185 to i64*
  store i64 %2181, i64* %2186, align 1, !tbaa !2452
  %2187 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2188 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2189 = load i64, i64* %RBP
  %2190 = sub i64 %2189, 40
  %2191 = load i64, i64* %PC
  %2192 = add i64 %2191, 5
  store i64 %2192, i64* %PC
  %2193 = bitcast i8* %2188 to double*
  %2194 = load double, double* %2193, align 1
  %2195 = getelementptr inbounds i8, i8* %2188, i64 8
  %2196 = bitcast i8* %2195 to i64*
  %2197 = load i64, i64* %2196, align 1
  %2198 = inttoptr i64 %2190 to double*
  %2199 = load double, double* %2198
  %2200 = fmul double %2194, %2199
  %2201 = bitcast i8* %2187 to double*
  store double %2200, double* %2201, align 1, !tbaa !2452
  %2202 = getelementptr inbounds i8, i8* %2187, i64 8
  %2203 = bitcast i8* %2202 to i64*
  store i64 %2197, i64* %2203, align 1, !tbaa !2452
  %2204 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2205 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2206 = load i64, i64* %PC
  %2207 = add i64 %2206, 9
  store i64 %2207, i64* %PC
  %2208 = bitcast i8* %2205 to double*
  %2209 = load double, double* %2208, align 1
  %2210 = getelementptr inbounds i8, i8* %2205, i64 8
  %2211 = bitcast i8* %2210 to i64*
  %2212 = load i64, i64* %2211, align 1
  %2213 = load double, double* bitcast (%A3_type* @A3 to double*)
  %2214 = fadd double %2209, %2213
  %2215 = bitcast i8* %2204 to double*
  store double %2214, double* %2215, align 1, !tbaa !2452
  %2216 = getelementptr inbounds i8, i8* %2204, i64 8
  %2217 = bitcast i8* %2216 to i64*
  store i64 %2212, i64* %2217, align 1, !tbaa !2452
  %2218 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2219 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2220 = load i64, i64* %RBP
  %2221 = sub i64 %2220, 40
  %2222 = load i64, i64* %PC
  %2223 = add i64 %2222, 5
  store i64 %2223, i64* %PC
  %2224 = bitcast i8* %2219 to double*
  %2225 = load double, double* %2224, align 1
  %2226 = getelementptr inbounds i8, i8* %2219, i64 8
  %2227 = bitcast i8* %2226 to i64*
  %2228 = load i64, i64* %2227, align 1
  %2229 = inttoptr i64 %2221 to double*
  %2230 = load double, double* %2229
  %2231 = fmul double %2225, %2230
  %2232 = bitcast i8* %2218 to double*
  store double %2231, double* %2232, align 1, !tbaa !2452
  %2233 = getelementptr inbounds i8, i8* %2218, i64 8
  %2234 = bitcast i8* %2233 to i64*
  store i64 %2228, i64* %2234, align 1, !tbaa !2452
  %2235 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2236 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2237 = load i64, i64* %PC
  %2238 = add i64 %2237, 9
  store i64 %2238, i64* %PC
  %2239 = bitcast i8* %2236 to double*
  %2240 = load double, double* %2239, align 1
  %2241 = getelementptr inbounds i8, i8* %2236, i64 8
  %2242 = bitcast i8* %2241 to i64*
  %2243 = load i64, i64* %2242, align 1
  %2244 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %2245 = fadd double %2240, %2244
  %2246 = bitcast i8* %2235 to double*
  store double %2245, double* %2246, align 1, !tbaa !2452
  %2247 = getelementptr inbounds i8, i8* %2235, i64 8
  %2248 = bitcast i8* %2247 to i64*
  store i64 %2243, i64* %2248, align 1, !tbaa !2452
  %2249 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2250 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2251 = load i64, i64* %RBP
  %2252 = sub i64 %2251, 40
  %2253 = load i64, i64* %PC
  %2254 = add i64 %2253, 5
  store i64 %2254, i64* %PC
  %2255 = bitcast i8* %2250 to double*
  %2256 = load double, double* %2255, align 1
  %2257 = getelementptr inbounds i8, i8* %2250, i64 8
  %2258 = bitcast i8* %2257 to i64*
  %2259 = load i64, i64* %2258, align 1
  %2260 = inttoptr i64 %2252 to double*
  %2261 = load double, double* %2260
  %2262 = fmul double %2256, %2261
  %2263 = bitcast i8* %2249 to double*
  store double %2262, double* %2263, align 1, !tbaa !2452
  %2264 = getelementptr inbounds i8, i8* %2249, i64 8
  %2265 = bitcast i8* %2264 to i64*
  store i64 %2259, i64* %2265, align 1, !tbaa !2452
  %2266 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2267 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2268 = load i64, i64* %PC
  %2269 = add i64 %2268, 9
  store i64 %2269, i64* %PC
  %2270 = bitcast i8* %2267 to double*
  %2271 = load double, double* %2270, align 1
  %2272 = getelementptr inbounds i8, i8* %2267, i64 8
  %2273 = bitcast i8* %2272 to i64*
  %2274 = load i64, i64* %2273, align 1
  %2275 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %2276 = fadd double %2271, %2275
  %2277 = bitcast i8* %2266 to double*
  store double %2276, double* %2277, align 1, !tbaa !2452
  %2278 = getelementptr inbounds i8, i8* %2266, i64 8
  %2279 = bitcast i8* %2278 to i64*
  store i64 %2274, i64* %2279, align 1, !tbaa !2452
  %2280 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2281 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2282 = load i64, i64* %RBP
  %2283 = sub i64 %2282, 40
  %2284 = load i64, i64* %PC
  %2285 = add i64 %2284, 5
  store i64 %2285, i64* %PC
  %2286 = bitcast i8* %2281 to double*
  %2287 = load double, double* %2286, align 1
  %2288 = getelementptr inbounds i8, i8* %2281, i64 8
  %2289 = bitcast i8* %2288 to i64*
  %2290 = load i64, i64* %2289, align 1
  %2291 = inttoptr i64 %2283 to double*
  %2292 = load double, double* %2291
  %2293 = fmul double %2287, %2292
  %2294 = bitcast i8* %2280 to double*
  store double %2293, double* %2294, align 1, !tbaa !2452
  %2295 = getelementptr inbounds i8, i8* %2280, i64 8
  %2296 = bitcast i8* %2295 to i64*
  store i64 %2290, i64* %2296, align 1, !tbaa !2452
  %2297 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2298 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2299 = load i64, i64* %PC
  %2300 = add i64 %2299, 9
  store i64 %2300, i64* %PC
  %2301 = bitcast i8* %2298 to double*
  %2302 = load double, double* %2301, align 1
  %2303 = getelementptr inbounds i8, i8* %2298, i64 8
  %2304 = bitcast i8* %2303 to i64*
  %2305 = load i64, i64* %2304, align 1
  %2306 = load double, double* bitcast (%one_type* @one to double*)
  %2307 = fadd double %2302, %2306
  %2308 = bitcast i8* %2297 to double*
  store double %2307, double* %2308, align 1, !tbaa !2452
  %2309 = getelementptr inbounds i8, i8* %2297, i64 8
  %2310 = bitcast i8* %2309 to i64*
  store i64 %2305, i64* %2310, align 1, !tbaa !2452
  %2311 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2312 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2313 = bitcast %union.vec128_t* %XMM1 to i8*
  %2314 = load i64, i64* %PC
  %2315 = add i64 %2314, 4
  store i64 %2315, i64* %PC
  %2316 = bitcast i8* %2312 to double*
  %2317 = load double, double* %2316, align 1
  %2318 = getelementptr inbounds i8, i8* %2312, i64 8
  %2319 = bitcast i8* %2318 to i64*
  %2320 = load i64, i64* %2319, align 1
  %2321 = bitcast i8* %2313 to double*
  %2322 = load double, double* %2321, align 1
  %2323 = fmul double %2317, %2322
  %2324 = bitcast i8* %2311 to double*
  store double %2323, double* %2324, align 1, !tbaa !2452
  %2325 = getelementptr inbounds i8, i8* %2311, i64 8
  %2326 = bitcast i8* %2325 to i64*
  store i64 %2320, i64* %2326, align 1, !tbaa !2452
  %2327 = load i64, i64* %RBP
  %2328 = sub i64 %2327, 32
  %2329 = bitcast %union.vec128_t* %XMM0 to i8*
  %2330 = load i64, i64* %PC
  %2331 = add i64 %2330, 5
  store i64 %2331, i64* %PC
  %2332 = bitcast i8* %2329 to double*
  %2333 = load double, double* %2332, align 1
  %2334 = inttoptr i64 %2328 to double*
  store double %2333, double* %2334
  %2335 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2336 = load i64, i64* %RBP
  %2337 = sub i64 %2336, 16
  %2338 = load i64, i64* %PC
  %2339 = add i64 %2338, 5
  store i64 %2339, i64* %PC
  %2340 = inttoptr i64 %2337 to double*
  %2341 = load double, double* %2340
  %2342 = bitcast i8* %2335 to double*
  store double %2341, double* %2342, align 1, !tbaa !2452
  %2343 = getelementptr inbounds i8, i8* %2335, i64 8
  %2344 = bitcast i8* %2343 to double*
  store double 0.000000e+00, double* %2344, align 1, !tbaa !2452
  %2345 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2346 = load i64, i64* %RBP
  %2347 = sub i64 %2346, 32
  %2348 = load i64, i64* %PC
  %2349 = add i64 %2348, 5
  store i64 %2349, i64* %PC
  %2350 = inttoptr i64 %2347 to double*
  %2351 = load double, double* %2350
  %2352 = bitcast i8* %2345 to double*
  store double %2351, double* %2352, align 1, !tbaa !2452
  %2353 = getelementptr inbounds i8, i8* %2345, i64 8
  %2354 = bitcast i8* %2353 to double*
  store double 0.000000e+00, double* %2354, align 1, !tbaa !2452
  %2355 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2356 = load i64, i64* %RBP
  %2357 = sub i64 %2356, 40
  %2358 = load i64, i64* %PC
  %2359 = add i64 %2358, 5
  store i64 %2359, i64* %PC
  %2360 = inttoptr i64 %2357 to double*
  %2361 = load double, double* %2360
  %2362 = bitcast i8* %2355 to double*
  store double %2361, double* %2362, align 1, !tbaa !2452
  %2363 = getelementptr inbounds i8, i8* %2355, i64 8
  %2364 = bitcast i8* %2363 to double*
  store double 0.000000e+00, double* %2364, align 1, !tbaa !2452
  %2365 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2366 = load i64, i64* %RBP
  %2367 = sub i64 %2366, 40
  %2368 = load i64, i64* %PC
  %2369 = add i64 %2368, 5
  store i64 %2369, i64* %PC
  %2370 = inttoptr i64 %2367 to double*
  %2371 = load double, double* %2370
  %2372 = bitcast i8* %2365 to double*
  store double %2371, double* %2372, align 1, !tbaa !2452
  %2373 = getelementptr inbounds i8, i8* %2365, i64 8
  %2374 = bitcast i8* %2373 to double*
  store double 0.000000e+00, double* %2374, align 1, !tbaa !2452
  %2375 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2376 = load i64, i64* %RBP
  %2377 = sub i64 %2376, 40
  %2378 = load i64, i64* %PC
  %2379 = add i64 %2378, 5
  store i64 %2379, i64* %PC
  %2380 = inttoptr i64 %2377 to double*
  %2381 = load double, double* %2380
  %2382 = bitcast i8* %2375 to double*
  store double %2381, double* %2382, align 1, !tbaa !2452
  %2383 = getelementptr inbounds i8, i8* %2375, i64 8
  %2384 = bitcast i8* %2383 to double*
  store double 0.000000e+00, double* %2384, align 1, !tbaa !2452
  %2385 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2386 = load i64, i64* %RBP
  %2387 = sub i64 %2386, 40
  %2388 = load i64, i64* %PC
  %2389 = add i64 %2388, 5
  store i64 %2389, i64* %PC
  %2390 = inttoptr i64 %2387 to double*
  %2391 = load double, double* %2390
  %2392 = bitcast i8* %2385 to double*
  store double %2391, double* %2392, align 1, !tbaa !2452
  %2393 = getelementptr inbounds i8, i8* %2385, i64 8
  %2394 = bitcast i8* %2393 to double*
  store double 0.000000e+00, double* %2394, align 1, !tbaa !2452
  %2395 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %2396 = load i64, i64* %RBP
  %2397 = sub i64 %2396, 40
  %2398 = load i64, i64* %PC
  %2399 = add i64 %2398, 5
  store i64 %2399, i64* %PC
  %2400 = inttoptr i64 %2397 to double*
  %2401 = load double, double* %2400
  %2402 = bitcast i8* %2395 to double*
  store double %2401, double* %2402, align 1, !tbaa !2452
  %2403 = getelementptr inbounds i8, i8* %2395, i64 8
  %2404 = bitcast i8* %2403 to double*
  store double 0.000000e+00, double* %2404, align 1, !tbaa !2452
  %2405 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %2406 = load i64, i64* %PC
  %2407 = add i64 %2406, 9
  store i64 %2407, i64* %PC
  %2408 = load double, double* bitcast (%B6_type* @B6 to double*)
  %2409 = bitcast i8* %2405 to double*
  store double %2408, double* %2409, align 1, !tbaa !2452
  %2410 = getelementptr inbounds i8, i8* %2405, i64 8
  %2411 = bitcast i8* %2410 to double*
  store double 0.000000e+00, double* %2411, align 1, !tbaa !2452
  %2412 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %2413 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %2414 = load i64, i64* %RBP
  %2415 = sub i64 %2414, 40
  %2416 = load i64, i64* %PC
  %2417 = add i64 %2416, 5
  store i64 %2417, i64* %PC
  %2418 = bitcast i8* %2413 to double*
  %2419 = load double, double* %2418, align 1
  %2420 = getelementptr inbounds i8, i8* %2413, i64 8
  %2421 = bitcast i8* %2420 to i64*
  %2422 = load i64, i64* %2421, align 1
  %2423 = inttoptr i64 %2415 to double*
  %2424 = load double, double* %2423
  %2425 = fmul double %2419, %2424
  %2426 = bitcast i8* %2412 to double*
  store double %2425, double* %2426, align 1, !tbaa !2452
  %2427 = getelementptr inbounds i8, i8* %2412, i64 8
  %2428 = bitcast i8* %2427 to i64*
  store i64 %2422, i64* %2428, align 1, !tbaa !2452
  %2429 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %2430 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %2431 = load i64, i64* %PC
  %2432 = add i64 %2431, 9
  store i64 %2432, i64* %PC
  %2433 = bitcast i8* %2430 to double*
  %2434 = load double, double* %2433, align 1
  %2435 = getelementptr inbounds i8, i8* %2430, i64 8
  %2436 = bitcast i8* %2435 to i64*
  %2437 = load i64, i64* %2436, align 1
  %2438 = load double, double* bitcast (%B5_type* @B5 to double*)
  %2439 = fadd double %2434, %2438
  %2440 = bitcast i8* %2429 to double*
  store double %2439, double* %2440, align 1, !tbaa !2452
  %2441 = getelementptr inbounds i8, i8* %2429, i64 8
  %2442 = bitcast i8* %2441 to i64*
  store i64 %2437, i64* %2442, align 1, !tbaa !2452
  %2443 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %2444 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %2445 = bitcast %union.vec128_t* %XMM7 to i8*
  %2446 = load i64, i64* %PC
  %2447 = add i64 %2446, 4
  store i64 %2447, i64* %PC
  %2448 = bitcast i8* %2444 to double*
  %2449 = load double, double* %2448, align 1
  %2450 = getelementptr inbounds i8, i8* %2444, i64 8
  %2451 = bitcast i8* %2450 to i64*
  %2452 = load i64, i64* %2451, align 1
  %2453 = bitcast i8* %2445 to double*
  %2454 = load double, double* %2453, align 1
  %2455 = fmul double %2449, %2454
  %2456 = bitcast i8* %2443 to double*
  store double %2455, double* %2456, align 1, !tbaa !2452
  %2457 = getelementptr inbounds i8, i8* %2443, i64 8
  %2458 = bitcast i8* %2457 to i64*
  store i64 %2452, i64* %2458, align 1, !tbaa !2452
  %2459 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %2460 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %2461 = load i64, i64* %PC
  %2462 = add i64 %2461, 9
  store i64 %2462, i64* %PC
  %2463 = bitcast i8* %2460 to double*
  %2464 = load double, double* %2463, align 1
  %2465 = getelementptr inbounds i8, i8* %2460, i64 8
  %2466 = bitcast i8* %2465 to i64*
  %2467 = load i64, i64* %2466, align 1
  %2468 = load double, double* bitcast (%B4_type* @B4 to double*)
  %2469 = fadd double %2464, %2468
  %2470 = bitcast i8* %2459 to double*
  store double %2469, double* %2470, align 1, !tbaa !2452
  %2471 = getelementptr inbounds i8, i8* %2459, i64 8
  %2472 = bitcast i8* %2471 to i64*
  store i64 %2467, i64* %2472, align 1, !tbaa !2452
  %2473 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2474 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2475 = bitcast %union.vec128_t* %XMM6 to i8*
  %2476 = load i64, i64* %PC
  %2477 = add i64 %2476, 4
  store i64 %2477, i64* %PC
  %2478 = bitcast i8* %2474 to double*
  %2479 = load double, double* %2478, align 1
  %2480 = getelementptr inbounds i8, i8* %2474, i64 8
  %2481 = bitcast i8* %2480 to i64*
  %2482 = load i64, i64* %2481, align 1
  %2483 = bitcast i8* %2475 to double*
  %2484 = load double, double* %2483, align 1
  %2485 = fmul double %2479, %2484
  %2486 = bitcast i8* %2473 to double*
  store double %2485, double* %2486, align 1, !tbaa !2452
  %2487 = getelementptr inbounds i8, i8* %2473, i64 8
  %2488 = bitcast i8* %2487 to i64*
  store i64 %2482, i64* %2488, align 1, !tbaa !2452
  %2489 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2490 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %2491 = load i64, i64* %PC
  %2492 = add i64 %2491, 9
  store i64 %2492, i64* %PC
  %2493 = bitcast i8* %2490 to double*
  %2494 = load double, double* %2493, align 1
  %2495 = getelementptr inbounds i8, i8* %2490, i64 8
  %2496 = bitcast i8* %2495 to i64*
  %2497 = load i64, i64* %2496, align 1
  %2498 = load double, double* bitcast (%B3_type* @B3 to double*)
  %2499 = fadd double %2494, %2498
  %2500 = bitcast i8* %2489 to double*
  store double %2499, double* %2500, align 1, !tbaa !2452
  %2501 = getelementptr inbounds i8, i8* %2489, i64 8
  %2502 = bitcast i8* %2501 to i64*
  store i64 %2497, i64* %2502, align 1, !tbaa !2452
  %2503 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2504 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2505 = bitcast %union.vec128_t* %XMM5 to i8*
  %2506 = load i64, i64* %PC
  %2507 = add i64 %2506, 4
  store i64 %2507, i64* %PC
  %2508 = bitcast i8* %2504 to double*
  %2509 = load double, double* %2508, align 1
  %2510 = getelementptr inbounds i8, i8* %2504, i64 8
  %2511 = bitcast i8* %2510 to i64*
  %2512 = load i64, i64* %2511, align 1
  %2513 = bitcast i8* %2505 to double*
  %2514 = load double, double* %2513, align 1
  %2515 = fmul double %2509, %2514
  %2516 = bitcast i8* %2503 to double*
  store double %2515, double* %2516, align 1, !tbaa !2452
  %2517 = getelementptr inbounds i8, i8* %2503, i64 8
  %2518 = bitcast i8* %2517 to i64*
  store i64 %2512, i64* %2518, align 1, !tbaa !2452
  %2519 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2520 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %2521 = load i64, i64* %PC
  %2522 = add i64 %2521, 9
  store i64 %2522, i64* %PC
  %2523 = bitcast i8* %2520 to double*
  %2524 = load double, double* %2523, align 1
  %2525 = getelementptr inbounds i8, i8* %2520, i64 8
  %2526 = bitcast i8* %2525 to i64*
  %2527 = load i64, i64* %2526, align 1
  %2528 = load double, double* bitcast (%B2_type* @B2 to double*)
  %2529 = fadd double %2524, %2528
  %2530 = bitcast i8* %2519 to double*
  store double %2529, double* %2530, align 1, !tbaa !2452
  %2531 = getelementptr inbounds i8, i8* %2519, i64 8
  %2532 = bitcast i8* %2531 to i64*
  store i64 %2527, i64* %2532, align 1, !tbaa !2452
  %2533 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2534 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2535 = bitcast %union.vec128_t* %XMM4 to i8*
  %2536 = load i64, i64* %PC
  %2537 = add i64 %2536, 4
  store i64 %2537, i64* %PC
  %2538 = bitcast i8* %2534 to double*
  %2539 = load double, double* %2538, align 1
  %2540 = getelementptr inbounds i8, i8* %2534, i64 8
  %2541 = bitcast i8* %2540 to i64*
  %2542 = load i64, i64* %2541, align 1
  %2543 = bitcast i8* %2535 to double*
  %2544 = load double, double* %2543, align 1
  %2545 = fmul double %2539, %2544
  %2546 = bitcast i8* %2533 to double*
  store double %2545, double* %2546, align 1, !tbaa !2452
  %2547 = getelementptr inbounds i8, i8* %2533, i64 8
  %2548 = bitcast i8* %2547 to i64*
  store i64 %2542, i64* %2548, align 1, !tbaa !2452
  %2549 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2550 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %2551 = load i64, i64* %PC
  %2552 = add i64 %2551, 9
  store i64 %2552, i64* %PC
  %2553 = bitcast i8* %2550 to double*
  %2554 = load double, double* %2553, align 1
  %2555 = getelementptr inbounds i8, i8* %2550, i64 8
  %2556 = bitcast i8* %2555 to i64*
  %2557 = load i64, i64* %2556, align 1
  %2558 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %2559 = fadd double %2554, %2558
  %2560 = bitcast i8* %2549 to double*
  store double %2559, double* %2560, align 1, !tbaa !2452
  %2561 = getelementptr inbounds i8, i8* %2549, i64 8
  %2562 = bitcast i8* %2561 to i64*
  store i64 %2557, i64* %2562, align 1, !tbaa !2452
  %2563 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2564 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2565 = bitcast %union.vec128_t* %XMM3 to i8*
  %2566 = load i64, i64* %PC
  %2567 = add i64 %2566, 4
  store i64 %2567, i64* %PC
  %2568 = bitcast i8* %2564 to double*
  %2569 = load double, double* %2568, align 1
  %2570 = getelementptr inbounds i8, i8* %2564, i64 8
  %2571 = bitcast i8* %2570 to i64*
  %2572 = load i64, i64* %2571, align 1
  %2573 = bitcast i8* %2565 to double*
  %2574 = load double, double* %2573, align 1
  %2575 = fmul double %2569, %2574
  %2576 = bitcast i8* %2563 to double*
  store double %2575, double* %2576, align 1, !tbaa !2452
  %2577 = getelementptr inbounds i8, i8* %2563, i64 8
  %2578 = bitcast i8* %2577 to i64*
  store i64 %2572, i64* %2578, align 1, !tbaa !2452
  %2579 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2580 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2581 = load i64, i64* %PC
  %2582 = add i64 %2581, 9
  store i64 %2582, i64* %PC
  %2583 = bitcast i8* %2580 to double*
  %2584 = load double, double* %2583, align 1
  %2585 = getelementptr inbounds i8, i8* %2580, i64 8
  %2586 = bitcast i8* %2585 to i64*
  %2587 = load i64, i64* %2586, align 1
  %2588 = load double, double* bitcast (%one_type* @one to double*)
  %2589 = fadd double %2584, %2588
  %2590 = bitcast i8* %2579 to double*
  store double %2589, double* %2590, align 1, !tbaa !2452
  %2591 = getelementptr inbounds i8, i8* %2579, i64 8
  %2592 = bitcast i8* %2591 to i64*
  store i64 %2587, i64* %2592, align 1, !tbaa !2452
  %2593 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2594 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2595 = bitcast %union.vec128_t* %XMM2 to i8*
  %2596 = load i64, i64* %PC
  %2597 = add i64 %2596, 4
  store i64 %2597, i64* %PC
  %2598 = bitcast i8* %2594 to double*
  %2599 = load double, double* %2598, align 1
  %2600 = getelementptr inbounds i8, i8* %2594, i64 8
  %2601 = bitcast i8* %2600 to i64*
  %2602 = load i64, i64* %2601, align 1
  %2603 = bitcast i8* %2595 to double*
  %2604 = load double, double* %2603, align 1
  %2605 = fmul double %2599, %2604
  %2606 = bitcast i8* %2593 to double*
  store double %2605, double* %2606, align 1, !tbaa !2452
  %2607 = getelementptr inbounds i8, i8* %2593, i64 8
  %2608 = bitcast i8* %2607 to i64*
  store i64 %2602, i64* %2608, align 1, !tbaa !2452
  %2609 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2610 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2611 = bitcast %union.vec128_t* %XMM1 to i8*
  %2612 = load i64, i64* %PC
  %2613 = add i64 %2612, 4
  store i64 %2613, i64* %PC
  %2614 = bitcast i8* %2610 to double*
  %2615 = load double, double* %2614, align 1
  %2616 = getelementptr inbounds i8, i8* %2610, i64 8
  %2617 = bitcast i8* %2616 to i64*
  %2618 = load i64, i64* %2617, align 1
  %2619 = bitcast i8* %2611 to double*
  %2620 = load double, double* %2619, align 1
  %2621 = fadd double %2615, %2620
  %2622 = bitcast i8* %2609 to double*
  store double %2621, double* %2622, align 1, !tbaa !2452
  %2623 = getelementptr inbounds i8, i8* %2609, i64 8
  %2624 = bitcast i8* %2623 to i64*
  store i64 %2618, i64* %2624, align 1, !tbaa !2452
  %2625 = load i64, i64* %RBP
  %2626 = sub i64 %2625, 16
  %2627 = bitcast %union.vec128_t* %XMM0 to i8*
  %2628 = load i64, i64* %PC
  %2629 = add i64 %2628, 5
  store i64 %2629, i64* %PC
  %2630 = bitcast i8* %2627 to double*
  %2631 = load double, double* %2630, align 1
  %2632 = inttoptr i64 %2626 to double*
  store double %2631, double* %2632
  %2633 = load i64, i64* %RBP
  %2634 = sub i64 %2633, 72
  %2635 = load i64, i64* %PC
  %2636 = add i64 %2635, 4
  store i64 %2636, i64* %PC
  %2637 = inttoptr i64 %2634 to i64*
  %2638 = load i64, i64* %2637
  store i64 %2638, i64* %RAX, align 8, !tbaa !2428
  %2639 = load i64, i64* %RAX
  %2640 = load i64, i64* %PC
  %2641 = add i64 %2640, 4
  store i64 %2641, i64* %PC
  %2642 = add i64 1, %2639
  store i64 %2642, i64* %RAX, align 8, !tbaa !2428
  %2643 = icmp ult i64 %2642, %2639
  %2644 = icmp ult i64 %2642, 1
  %2645 = or i1 %2643, %2644
  %2646 = zext i1 %2645 to i8
  %2647 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %2646, i8* %2647, align 1, !tbaa !2432
  %2648 = trunc i64 %2642 to i32
  %2649 = and i32 %2648, 255
  %2650 = call i32 @llvm.ctpop.i32(i32 %2649) #16
  %2651 = trunc i32 %2650 to i8
  %2652 = and i8 %2651, 1
  %2653 = xor i8 %2652, 1
  %2654 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %2653, i8* %2654, align 1, !tbaa !2446
  %2655 = xor i64 1, %2639
  %2656 = xor i64 %2655, %2642
  %2657 = lshr i64 %2656, 4
  %2658 = trunc i64 %2657 to i8
  %2659 = and i8 %2658, 1
  %2660 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %2659, i8* %2660, align 1, !tbaa !2450
  %2661 = icmp eq i64 %2642, 0
  %2662 = zext i1 %2661 to i8
  %2663 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %2662, i8* %2663, align 1, !tbaa !2447
  %2664 = lshr i64 %2642, 63
  %2665 = trunc i64 %2664 to i8
  %2666 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %2665, i8* %2666, align 1, !tbaa !2448
  %2667 = lshr i64 %2639, 63
  %2668 = xor i64 %2664, %2667
  %2669 = add nuw nsw i64 %2668, %2664
  %2670 = icmp eq i64 %2669, 2
  %2671 = zext i1 %2670 to i8
  %2672 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %2671, i8* %2672, align 1, !tbaa !2449
  %2673 = load i64, i64* %RBP
  %2674 = sub i64 %2673, 72
  %2675 = load i64, i64* %RAX
  %2676 = load i64, i64* %PC
  %2677 = add i64 %2676, 4
  store i64 %2677, i64* %PC
  %2678 = inttoptr i64 %2674 to i64*
  store i64 %2675, i64* %2678
  %2679 = load i64, i64* %PC
  %2680 = sub i64 %2679, 307
  %2681 = load i64, i64* %PC
  %2682 = add i64 %2681, 5
  store i64 %2682, i64* %PC
  %2683 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %2680, i64* %2683, align 8, !tbaa !2428
  br label %block_4018ce

block_401ccf:                                     ; preds = %block_401cba
  %2684 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2685 = load i64, i64* %RBP
  %2686 = sub i64 %2685, 72
  %2687 = load i64, i64* %PC
  %2688 = add i64 %2687, 6
  store i64 %2688, i64* %PC
  %2689 = inttoptr i64 %2686 to i64*
  %2690 = load i64, i64* %2689
  %2691 = sitofp i64 %2690 to double
  %2692 = bitcast i8* %2684 to double*
  store double %2691, double* %2692, align 1, !tbaa !2452
  %2693 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2694 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2695 = load i64, i64* %RBP
  %2696 = sub i64 %2695, 32
  %2697 = load i64, i64* %PC
  %2698 = add i64 %2697, 5
  store i64 %2698, i64* %PC
  %2699 = bitcast i8* %2694 to double*
  %2700 = load double, double* %2699, align 1
  %2701 = getelementptr inbounds i8, i8* %2694, i64 8
  %2702 = bitcast i8* %2701 to i64*
  %2703 = load i64, i64* %2702, align 1
  %2704 = inttoptr i64 %2696 to double*
  %2705 = load double, double* %2704
  %2706 = fmul double %2700, %2705
  %2707 = bitcast i8* %2693 to double*
  store double %2706, double* %2707, align 1, !tbaa !2452
  %2708 = getelementptr inbounds i8, i8* %2693, i64 8
  %2709 = bitcast i8* %2708 to i64*
  store i64 %2703, i64* %2709, align 1, !tbaa !2452
  %2710 = load i64, i64* %RBP
  %2711 = sub i64 %2710, 48
  %2712 = bitcast %union.vec128_t* %XMM0 to i8*
  %2713 = load i64, i64* %PC
  %2714 = add i64 %2713, 5
  store i64 %2714, i64* %PC
  %2715 = bitcast i8* %2712 to double*
  %2716 = load double, double* %2715, align 1
  %2717 = inttoptr i64 %2711 to double*
  store double %2716, double* %2717
  %2718 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2719 = load i64, i64* %RBP
  %2720 = sub i64 %2719, 48
  %2721 = load i64, i64* %PC
  %2722 = add i64 %2721, 5
  store i64 %2722, i64* %PC
  %2723 = inttoptr i64 %2720 to double*
  %2724 = load double, double* %2723
  %2725 = bitcast i8* %2718 to double*
  store double %2724, double* %2725, align 1, !tbaa !2452
  %2726 = getelementptr inbounds i8, i8* %2718, i64 8
  %2727 = bitcast i8* %2726 to double*
  store double 0.000000e+00, double* %2727, align 1, !tbaa !2452
  %2728 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2729 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2730 = load i64, i64* %RBP
  %2731 = sub i64 %2730, 48
  %2732 = load i64, i64* %PC
  %2733 = add i64 %2732, 5
  store i64 %2733, i64* %PC
  %2734 = bitcast i8* %2729 to double*
  %2735 = load double, double* %2734, align 1
  %2736 = getelementptr inbounds i8, i8* %2729, i64 8
  %2737 = bitcast i8* %2736 to i64*
  %2738 = load i64, i64* %2737, align 1
  %2739 = inttoptr i64 %2731 to double*
  %2740 = load double, double* %2739
  %2741 = fmul double %2735, %2740
  %2742 = bitcast i8* %2728 to double*
  store double %2741, double* %2742, align 1, !tbaa !2452
  %2743 = getelementptr inbounds i8, i8* %2728, i64 8
  %2744 = bitcast i8* %2743 to i64*
  store i64 %2738, i64* %2744, align 1, !tbaa !2452
  %2745 = load i64, i64* %RBP
  %2746 = sub i64 %2745, 24
  %2747 = bitcast %union.vec128_t* %XMM0 to i8*
  %2748 = load i64, i64* %PC
  %2749 = add i64 %2748, 5
  store i64 %2749, i64* %PC
  %2750 = bitcast i8* %2747 to double*
  %2751 = load double, double* %2750, align 1
  %2752 = inttoptr i64 %2746 to double*
  store double %2751, double* %2752
  %2753 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2754 = load i64, i64* %RBP
  %2755 = sub i64 %2754, 16
  %2756 = load i64, i64* %PC
  %2757 = add i64 %2756, 5
  store i64 %2757, i64* %PC
  %2758 = inttoptr i64 %2755 to double*
  %2759 = load double, double* %2758
  %2760 = bitcast i8* %2753 to double*
  store double %2759, double* %2760, align 1, !tbaa !2452
  %2761 = getelementptr inbounds i8, i8* %2753, i64 8
  %2762 = bitcast i8* %2761 to double*
  store double 0.000000e+00, double* %2762, align 1, !tbaa !2452
  %2763 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2764 = load i64, i64* %RBP
  %2765 = sub i64 %2764, 40
  %2766 = load i64, i64* %PC
  %2767 = add i64 %2766, 5
  store i64 %2767, i64* %PC
  %2768 = inttoptr i64 %2765 to double*
  %2769 = load double, double* %2768
  %2770 = bitcast i8* %2763 to double*
  store double %2769, double* %2770, align 1, !tbaa !2452
  %2771 = getelementptr inbounds i8, i8* %2763, i64 8
  %2772 = bitcast i8* %2771 to double*
  store double 0.000000e+00, double* %2772, align 1, !tbaa !2452
  %2773 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2774 = load i64, i64* %RBP
  %2775 = sub i64 %2774, 48
  %2776 = load i64, i64* %PC
  %2777 = add i64 %2776, 5
  store i64 %2777, i64* %PC
  %2778 = inttoptr i64 %2775 to double*
  %2779 = load double, double* %2778
  %2780 = bitcast i8* %2773 to double*
  store double %2779, double* %2780, align 1, !tbaa !2452
  %2781 = getelementptr inbounds i8, i8* %2773, i64 8
  %2782 = bitcast i8* %2781 to double*
  store double 0.000000e+00, double* %2782, align 1, !tbaa !2452
  %2783 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2784 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2785 = load i64, i64* %RBP
  %2786 = sub i64 %2785, 40
  %2787 = load i64, i64* %PC
  %2788 = add i64 %2787, 5
  store i64 %2788, i64* %PC
  %2789 = bitcast i8* %2784 to double*
  %2790 = load double, double* %2789, align 1
  %2791 = getelementptr inbounds i8, i8* %2784, i64 8
  %2792 = bitcast i8* %2791 to i64*
  %2793 = load i64, i64* %2792, align 1
  %2794 = inttoptr i64 %2786 to double*
  %2795 = load double, double* %2794
  %2796 = fadd double %2790, %2795
  %2797 = bitcast i8* %2783 to double*
  store double %2796, double* %2797, align 1, !tbaa !2452
  %2798 = getelementptr inbounds i8, i8* %2783, i64 8
  %2799 = bitcast i8* %2798 to i64*
  store i64 %2793, i64* %2799, align 1, !tbaa !2452
  %2800 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2801 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2802 = bitcast %union.vec128_t* %XMM2 to i8*
  %2803 = load i64, i64* %PC
  %2804 = add i64 %2803, 4
  store i64 %2804, i64* %PC
  %2805 = bitcast i8* %2801 to double*
  %2806 = load double, double* %2805, align 1
  %2807 = getelementptr inbounds i8, i8* %2801, i64 8
  %2808 = bitcast i8* %2807 to i64*
  %2809 = load i64, i64* %2808, align 1
  %2810 = bitcast i8* %2802 to double*
  %2811 = load double, double* %2810, align 1
  %2812 = fdiv double %2806, %2811
  %2813 = bitcast i8* %2800 to double*
  store double %2812, double* %2813, align 1, !tbaa !2452
  %2814 = getelementptr inbounds i8, i8* %2800, i64 8
  %2815 = bitcast i8* %2814 to i64*
  store i64 %2809, i64* %2815, align 1, !tbaa !2452
  %2816 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2817 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2818 = bitcast %union.vec128_t* %XMM1 to i8*
  %2819 = load i64, i64* %PC
  %2820 = add i64 %2819, 4
  store i64 %2820, i64* %PC
  %2821 = bitcast i8* %2817 to double*
  %2822 = load double, double* %2821, align 1
  %2823 = getelementptr inbounds i8, i8* %2817, i64 8
  %2824 = bitcast i8* %2823 to i64*
  %2825 = load i64, i64* %2824, align 1
  %2826 = bitcast i8* %2818 to double*
  %2827 = load double, double* %2826, align 1
  %2828 = fsub double %2822, %2827
  %2829 = bitcast i8* %2816 to double*
  store double %2828, double* %2829, align 1, !tbaa !2452
  %2830 = getelementptr inbounds i8, i8* %2816, i64 8
  %2831 = bitcast i8* %2830 to i64*
  store i64 %2825, i64* %2831, align 1, !tbaa !2452
  %2832 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2833 = load i64, i64* %RBP
  %2834 = sub i64 %2833, 48
  %2835 = load i64, i64* %PC
  %2836 = add i64 %2835, 5
  store i64 %2836, i64* %PC
  %2837 = inttoptr i64 %2834 to double*
  %2838 = load double, double* %2837
  %2839 = bitcast i8* %2832 to double*
  store double %2838, double* %2839, align 1, !tbaa !2452
  %2840 = getelementptr inbounds i8, i8* %2832, i64 8
  %2841 = bitcast i8* %2840 to double*
  store double 0.000000e+00, double* %2841, align 1, !tbaa !2452
  %2842 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2843 = load i64, i64* %RBP
  %2844 = sub i64 %2843, 24
  %2845 = load i64, i64* %PC
  %2846 = add i64 %2845, 5
  store i64 %2846, i64* %PC
  %2847 = inttoptr i64 %2844 to double*
  %2848 = load double, double* %2847
  %2849 = bitcast i8* %2842 to double*
  store double %2848, double* %2849, align 1, !tbaa !2452
  %2850 = getelementptr inbounds i8, i8* %2842, i64 8
  %2851 = bitcast i8* %2850 to double*
  store double 0.000000e+00, double* %2851, align 1, !tbaa !2452
  %2852 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2853 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2854 = load i64, i64* %RBP
  %2855 = sub i64 %2854, 40
  %2856 = load i64, i64* %PC
  %2857 = add i64 %2856, 5
  store i64 %2857, i64* %PC
  %2858 = bitcast i8* %2853 to double*
  %2859 = load double, double* %2858, align 1
  %2860 = getelementptr inbounds i8, i8* %2853, i64 8
  %2861 = bitcast i8* %2860 to i64*
  %2862 = load i64, i64* %2861, align 1
  %2863 = inttoptr i64 %2855 to double*
  %2864 = load double, double* %2863
  %2865 = fadd double %2859, %2864
  %2866 = bitcast i8* %2852 to double*
  store double %2865, double* %2866, align 1, !tbaa !2452
  %2867 = getelementptr inbounds i8, i8* %2852, i64 8
  %2868 = bitcast i8* %2867 to i64*
  store i64 %2862, i64* %2868, align 1, !tbaa !2452
  %2869 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2870 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2871 = bitcast %union.vec128_t* %XMM2 to i8*
  %2872 = load i64, i64* %PC
  %2873 = add i64 %2872, 4
  store i64 %2873, i64* %PC
  %2874 = bitcast i8* %2870 to double*
  %2875 = load double, double* %2874, align 1
  %2876 = getelementptr inbounds i8, i8* %2870, i64 8
  %2877 = bitcast i8* %2876 to i64*
  %2878 = load i64, i64* %2877, align 1
  %2879 = bitcast i8* %2871 to double*
  %2880 = load double, double* %2879, align 1
  %2881 = fdiv double %2875, %2880
  %2882 = bitcast i8* %2869 to double*
  store double %2881, double* %2882, align 1, !tbaa !2452
  %2883 = getelementptr inbounds i8, i8* %2869, i64 8
  %2884 = bitcast i8* %2883 to i64*
  store i64 %2878, i64* %2884, align 1, !tbaa !2452
  %2885 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2886 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2887 = bitcast %union.vec128_t* %XMM1 to i8*
  %2888 = load i64, i64* %PC
  %2889 = add i64 %2888, 4
  store i64 %2889, i64* %PC
  %2890 = bitcast i8* %2886 to double*
  %2891 = load double, double* %2890, align 1
  %2892 = getelementptr inbounds i8, i8* %2886, i64 8
  %2893 = bitcast i8* %2892 to i64*
  %2894 = load i64, i64* %2893, align 1
  %2895 = bitcast i8* %2887 to double*
  %2896 = load double, double* %2895, align 1
  %2897 = fsub double %2891, %2896
  %2898 = bitcast i8* %2885 to double*
  store double %2897, double* %2898, align 1, !tbaa !2452
  %2899 = getelementptr inbounds i8, i8* %2885, i64 8
  %2900 = bitcast i8* %2899 to i64*
  store i64 %2894, i64* %2900, align 1, !tbaa !2452
  %2901 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2902 = load i64, i64* %RBP
  %2903 = sub i64 %2902, 24
  %2904 = load i64, i64* %PC
  %2905 = add i64 %2904, 5
  store i64 %2905, i64* %PC
  %2906 = inttoptr i64 %2903 to double*
  %2907 = load double, double* %2906
  %2908 = bitcast i8* %2901 to double*
  store double %2907, double* %2908, align 1, !tbaa !2452
  %2909 = getelementptr inbounds i8, i8* %2901, i64 8
  %2910 = bitcast i8* %2909 to double*
  store double 0.000000e+00, double* %2910, align 1, !tbaa !2452
  %2911 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2912 = load i64, i64* %RBP
  %2913 = sub i64 %2912, 48
  %2914 = load i64, i64* %PC
  %2915 = add i64 %2914, 5
  store i64 %2915, i64* %PC
  %2916 = inttoptr i64 %2913 to double*
  %2917 = load double, double* %2916
  %2918 = bitcast i8* %2911 to double*
  store double %2917, double* %2918, align 1, !tbaa !2452
  %2919 = getelementptr inbounds i8, i8* %2911, i64 8
  %2920 = bitcast i8* %2919 to double*
  store double 0.000000e+00, double* %2920, align 1, !tbaa !2452
  %2921 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2922 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2923 = load i64, i64* %RBP
  %2924 = sub i64 %2923, 24
  %2925 = load i64, i64* %PC
  %2926 = add i64 %2925, 5
  store i64 %2926, i64* %PC
  %2927 = bitcast i8* %2922 to double*
  %2928 = load double, double* %2927, align 1
  %2929 = getelementptr inbounds i8, i8* %2922, i64 8
  %2930 = bitcast i8* %2929 to i64*
  %2931 = load i64, i64* %2930, align 1
  %2932 = inttoptr i64 %2924 to double*
  %2933 = load double, double* %2932
  %2934 = fmul double %2928, %2933
  %2935 = bitcast i8* %2921 to double*
  store double %2934, double* %2935, align 1, !tbaa !2452
  %2936 = getelementptr inbounds i8, i8* %2921, i64 8
  %2937 = bitcast i8* %2936 to i64*
  store i64 %2931, i64* %2937, align 1, !tbaa !2452
  %2938 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2939 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %2940 = load i64, i64* %RBP
  %2941 = sub i64 %2940, 40
  %2942 = load i64, i64* %PC
  %2943 = add i64 %2942, 5
  store i64 %2943, i64* %PC
  %2944 = bitcast i8* %2939 to double*
  %2945 = load double, double* %2944, align 1
  %2946 = getelementptr inbounds i8, i8* %2939, i64 8
  %2947 = bitcast i8* %2946 to i64*
  %2948 = load i64, i64* %2947, align 1
  %2949 = inttoptr i64 %2941 to double*
  %2950 = load double, double* %2949
  %2951 = fadd double %2945, %2950
  %2952 = bitcast i8* %2938 to double*
  store double %2951, double* %2952, align 1, !tbaa !2452
  %2953 = getelementptr inbounds i8, i8* %2938, i64 8
  %2954 = bitcast i8* %2953 to i64*
  store i64 %2948, i64* %2954, align 1, !tbaa !2452
  %2955 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2956 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %2957 = bitcast %union.vec128_t* %XMM2 to i8*
  %2958 = load i64, i64* %PC
  %2959 = add i64 %2958, 4
  store i64 %2959, i64* %PC
  %2960 = bitcast i8* %2956 to double*
  %2961 = load double, double* %2960, align 1
  %2962 = getelementptr inbounds i8, i8* %2956, i64 8
  %2963 = bitcast i8* %2962 to i64*
  %2964 = load i64, i64* %2963, align 1
  %2965 = bitcast i8* %2957 to double*
  %2966 = load double, double* %2965, align 1
  %2967 = fdiv double %2961, %2966
  %2968 = bitcast i8* %2955 to double*
  store double %2967, double* %2968, align 1, !tbaa !2452
  %2969 = getelementptr inbounds i8, i8* %2955, i64 8
  %2970 = bitcast i8* %2969 to i64*
  store i64 %2964, i64* %2970, align 1, !tbaa !2452
  %2971 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2972 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %2973 = bitcast %union.vec128_t* %XMM1 to i8*
  %2974 = load i64, i64* %PC
  %2975 = add i64 %2974, 4
  store i64 %2975, i64* %PC
  %2976 = bitcast i8* %2972 to double*
  %2977 = load double, double* %2976, align 1
  %2978 = getelementptr inbounds i8, i8* %2972, i64 8
  %2979 = bitcast i8* %2978 to i64*
  %2980 = load i64, i64* %2979, align 1
  %2981 = bitcast i8* %2973 to double*
  %2982 = load double, double* %2981, align 1
  %2983 = fsub double %2977, %2982
  %2984 = bitcast i8* %2971 to double*
  store double %2983, double* %2984, align 1, !tbaa !2452
  %2985 = getelementptr inbounds i8, i8* %2971, i64 8
  %2986 = bitcast i8* %2985 to i64*
  store i64 %2980, i64* %2986, align 1, !tbaa !2452
  %2987 = load i64, i64* %RBP
  %2988 = sub i64 %2987, 16
  %2989 = bitcast %union.vec128_t* %XMM0 to i8*
  %2990 = load i64, i64* %PC
  %2991 = add i64 %2990, 5
  store i64 %2991, i64* %PC
  %2992 = bitcast i8* %2989 to double*
  %2993 = load double, double* %2992, align 1
  %2994 = inttoptr i64 %2988 to double*
  store double %2993, double* %2994
  %2995 = load i64, i64* %RBP
  %2996 = sub i64 %2995, 72
  %2997 = load i64, i64* %PC
  %2998 = add i64 %2997, 4
  store i64 %2998, i64* %PC
  %2999 = inttoptr i64 %2996 to i64*
  %3000 = load i64, i64* %2999
  store i64 %3000, i64* %RAX, align 8, !tbaa !2428
  %3001 = load i64, i64* %RAX
  %3002 = load i64, i64* %PC
  %3003 = add i64 %3002, 4
  store i64 %3003, i64* %PC
  %3004 = add i64 1, %3001
  store i64 %3004, i64* %RAX, align 8, !tbaa !2428
  %3005 = icmp ult i64 %3004, %3001
  %3006 = icmp ult i64 %3004, 1
  %3007 = or i1 %3005, %3006
  %3008 = zext i1 %3007 to i8
  %3009 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3008, i8* %3009, align 1, !tbaa !2432
  %3010 = trunc i64 %3004 to i32
  %3011 = and i32 %3010, 255
  %3012 = call i32 @llvm.ctpop.i32(i32 %3011) #16
  %3013 = trunc i32 %3012 to i8
  %3014 = and i8 %3013, 1
  %3015 = xor i8 %3014, 1
  %3016 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3015, i8* %3016, align 1, !tbaa !2446
  %3017 = xor i64 1, %3001
  %3018 = xor i64 %3017, %3004
  %3019 = lshr i64 %3018, 4
  %3020 = trunc i64 %3019 to i8
  %3021 = and i8 %3020, 1
  %3022 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3021, i8* %3022, align 1, !tbaa !2450
  %3023 = icmp eq i64 %3004, 0
  %3024 = zext i1 %3023 to i8
  %3025 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3024, i8* %3025, align 1, !tbaa !2447
  %3026 = lshr i64 %3004, 63
  %3027 = trunc i64 %3026 to i8
  %3028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3027, i8* %3028, align 1, !tbaa !2448
  %3029 = lshr i64 %3001, 63
  %3030 = xor i64 %3026, %3029
  %3031 = add nuw nsw i64 %3030, %3026
  %3032 = icmp eq i64 %3031, 2
  %3033 = zext i1 %3032 to i8
  %3034 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3033, i8* %3034, align 1, !tbaa !2449
  %3035 = load i64, i64* %RBP
  %3036 = sub i64 %3035, 72
  %3037 = load i64, i64* %RAX
  %3038 = load i64, i64* %PC
  %3039 = add i64 %3038, 4
  store i64 %3039, i64* %PC
  %3040 = inttoptr i64 %3036 to i64*
  store i64 %3037, i64* %3040
  %3041 = load i64, i64* %PC
  %3042 = sub i64 %3041, 148
  %3043 = load i64, i64* %PC
  %3044 = add i64 %3043, 5
  store i64 %3044, i64* %PC
  %3045 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3042, i64* %3045, align 8, !tbaa !2428
  br label %block_401cba

block_4014ef:                                     ; preds = %block_401504, %block_401249
  %MEMORY.2 = phi %struct.Memory* [ %5621, %block_401249 ], [ %MEMORY.2, %block_401504 ]
  %3046 = load i64, i64* %RBP
  %3047 = sub i64 %3046, 72
  %3048 = load i64, i64* %PC
  %3049 = add i64 %3048, 4
  store i64 %3049, i64* %PC
  %3050 = inttoptr i64 %3047 to i64*
  %3051 = load i64, i64* %3050
  store i64 %3051, i64* %RAX, align 8, !tbaa !2428
  %3052 = load i64, i64* %RBP
  %3053 = sub i64 %3052, 80
  %3054 = load i64, i64* %PC
  %3055 = add i64 %3054, 4
  store i64 %3055, i64* %PC
  %3056 = inttoptr i64 %3053 to i64*
  %3057 = load i64, i64* %3056
  store i64 %3057, i64* %RCX, align 8, !tbaa !2428
  %3058 = load i64, i64* %RCX
  %3059 = load i64, i64* %PC
  %3060 = add i64 %3059, 4
  store i64 %3060, i64* %PC
  %3061 = sub i64 %3058, 1
  store i64 %3061, i64* %RCX, align 8, !tbaa !2428
  %3062 = icmp ult i64 %3058, 1
  %3063 = zext i1 %3062 to i8
  %3064 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3063, i8* %3064, align 1, !tbaa !2432
  %3065 = trunc i64 %3061 to i32
  %3066 = and i32 %3065, 255
  %3067 = call i32 @llvm.ctpop.i32(i32 %3066) #16
  %3068 = trunc i32 %3067 to i8
  %3069 = and i8 %3068, 1
  %3070 = xor i8 %3069, 1
  %3071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3070, i8* %3071, align 1, !tbaa !2446
  %3072 = xor i64 1, %3058
  %3073 = xor i64 %3072, %3061
  %3074 = lshr i64 %3073, 4
  %3075 = trunc i64 %3074 to i8
  %3076 = and i8 %3075, 1
  %3077 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3076, i8* %3077, align 1, !tbaa !2450
  %3078 = icmp eq i64 %3061, 0
  %3079 = zext i1 %3078 to i8
  %3080 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3079, i8* %3080, align 1, !tbaa !2447
  %3081 = lshr i64 %3061, 63
  %3082 = trunc i64 %3081 to i8
  %3083 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3082, i8* %3083, align 1, !tbaa !2448
  %3084 = lshr i64 %3058, 63
  %3085 = xor i64 %3081, %3084
  %3086 = add nuw nsw i64 %3085, %3084
  %3087 = icmp eq i64 %3086, 2
  %3088 = zext i1 %3087 to i8
  %3089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3088, i8* %3089, align 1, !tbaa !2449
  %3090 = load i64, i64* %RAX
  %3091 = load i64, i64* %RCX
  %3092 = load i64, i64* %PC
  %3093 = add i64 %3092, 3
  store i64 %3093, i64* %PC
  %3094 = sub i64 %3090, %3091
  %3095 = icmp ult i64 %3090, %3091
  %3096 = zext i1 %3095 to i8
  %3097 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3096, i8* %3097, align 1, !tbaa !2432
  %3098 = trunc i64 %3094 to i32
  %3099 = and i32 %3098, 255
  %3100 = call i32 @llvm.ctpop.i32(i32 %3099) #16
  %3101 = trunc i32 %3100 to i8
  %3102 = and i8 %3101, 1
  %3103 = xor i8 %3102, 1
  %3104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3103, i8* %3104, align 1, !tbaa !2446
  %3105 = xor i64 %3091, %3090
  %3106 = xor i64 %3105, %3094
  %3107 = lshr i64 %3106, 4
  %3108 = trunc i64 %3107 to i8
  %3109 = and i8 %3108, 1
  %3110 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3109, i8* %3110, align 1, !tbaa !2450
  %3111 = icmp eq i64 %3094, 0
  %3112 = zext i1 %3111 to i8
  %3113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3112, i8* %3113, align 1, !tbaa !2447
  %3114 = lshr i64 %3094, 63
  %3115 = trunc i64 %3114 to i8
  %3116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3115, i8* %3116, align 1, !tbaa !2448
  %3117 = lshr i64 %3090, 63
  %3118 = lshr i64 %3091, 63
  %3119 = xor i64 %3118, %3117
  %3120 = xor i64 %3114, %3117
  %3121 = add nuw nsw i64 %3120, %3119
  %3122 = icmp eq i64 %3121, 2
  %3123 = zext i1 %3122 to i8
  %3124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3123, i8* %3124, align 1, !tbaa !2449
  %3125 = load i64, i64* %PC
  %3126 = add i64 %3125, 297
  %3127 = load i64, i64* %PC
  %3128 = add i64 %3127, 6
  %3129 = load i64, i64* %PC
  %3130 = add i64 %3129, 6
  store i64 %3130, i64* %PC
  %3131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3132 = load i8, i8* %3131, align 1, !tbaa !2447
  %3133 = icmp eq i8 %3132, 0
  %3134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %3135 = load i8, i8* %3134, align 1, !tbaa !2448
  %3136 = icmp ne i8 %3135, 0
  %3137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %3138 = load i8, i8* %3137, align 1, !tbaa !2449
  %3139 = icmp ne i8 %3138, 0
  %3140 = xor i1 %3136, %3139
  %3141 = xor i1 %3140, true
  %3142 = and i1 %3133, %3141
  %3143 = zext i1 %3142 to i8
  store i8 %3143, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3145 = select i1 %3142, i64 %3126, i64 %3128
  store i64 %3145, i64* %3144, align 8, !tbaa !2428
  %3146 = load i8, i8* %BRANCH_TAKEN
  %3147 = icmp eq i8 %3146, 1
  br i1 %3147, label %block_401627, label %block_401504

block_400bdd:                                     ; preds = %block_400bcf
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %3148 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3149 = load i64, i64* %RBP
  %3150 = sub i64 %3149, 16
  %3151 = load i64, i64* %PC
  %3152 = add i64 %3151, 5
  store i64 %3152, i64* %PC
  %3153 = inttoptr i64 %3150 to double*
  %3154 = load double, double* %3153
  %3155 = bitcast i8* %3148 to double*
  store double %3154, double* %3155, align 1, !tbaa !2452
  %3156 = getelementptr inbounds i8, i8* %3148, i64 8
  %3157 = bitcast i8* %3156 to double*
  store double 0.000000e+00, double* %3157, align 1, !tbaa !2452
  %3158 = bitcast %union.vec128_t* %XMM0 to i8*
  %3159 = load i64, i64* %PC
  %3160 = add i64 %3159, 5
  store i64 %3160, i64* %PC
  %3161 = bitcast i8* %3158 to i64*
  %3162 = load i64, i64* %3161, align 1
  store i64 %3162, i64* %RCX, align 1, !tbaa !2428
  %3163 = load i64, i64* %RCX
  %3164 = load i64, i64* %RAX
  %3165 = load i64, i64* %PC
  %3166 = add i64 %3165, 3
  store i64 %3166, i64* %PC
  %3167 = xor i64 %3164, %3163
  store i64 %3167, i64* %RCX, align 8, !tbaa !2428
  %3168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %3168, align 1, !tbaa !2432
  %3169 = trunc i64 %3167 to i32
  %3170 = and i32 %3169, 255
  %3171 = call i32 @llvm.ctpop.i32(i32 %3170) #16
  %3172 = trunc i32 %3171 to i8
  %3173 = and i8 %3172, 1
  %3174 = xor i8 %3173, 1
  %3175 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3174, i8* %3175, align 1, !tbaa !2446
  %3176 = icmp eq i64 %3167, 0
  %3177 = zext i1 %3176 to i8
  %3178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3177, i8* %3178, align 1, !tbaa !2447
  %3179 = lshr i64 %3167, 63
  %3180 = trunc i64 %3179 to i8
  %3181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3180, i8* %3181, align 1, !tbaa !2448
  %3182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %3182, align 1, !tbaa !2449
  %3183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3183, align 1, !tbaa !2450
  %3184 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3185 = load i64, i64* %RCX
  %3186 = load i64, i64* %PC
  %3187 = add i64 %3186, 5
  store i64 %3187, i64* %PC
  %3188 = bitcast i8* %3184 to i64*
  store i64 %3185, i64* %3188, align 1, !tbaa !2428
  %3189 = getelementptr inbounds i8, i8* %3184, i64 8
  %3190 = bitcast i8* %3189 to i64*
  store i64 0, i64* %3190, align 1, !tbaa !2428
  %3191 = load i64, i64* %RBP
  %3192 = sub i64 %3191, 16
  %3193 = bitcast %union.vec128_t* %XMM0 to i8*
  %3194 = load i64, i64* %PC
  %3195 = add i64 %3194, 5
  store i64 %3195, i64* %PC
  %3196 = bitcast i8* %3193 to double*
  %3197 = load double, double* %3196, align 1
  %3198 = inttoptr i64 %3192 to double*
  store double %3197, double* %3198
  %3199 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3200 = load i64, i64* %PC
  %3201 = add i64 %3200, 9
  store i64 %3201, i64* %PC
  %3202 = load double, double* bitcast (%sa_type* @sa to double*)
  %3203 = bitcast i8* %3199 to double*
  store double %3202, double* %3203, align 1, !tbaa !2452
  %3204 = getelementptr inbounds i8, i8* %3199, i64 8
  %3205 = bitcast i8* %3204 to double*
  store double 0.000000e+00, double* %3205, align 1, !tbaa !2452
  %3206 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3207 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3208 = load i64, i64* %RBP
  %3209 = sub i64 %3208, 16
  %3210 = load i64, i64* %PC
  %3211 = add i64 %3210, 5
  store i64 %3211, i64* %PC
  %3212 = bitcast i8* %3207 to double*
  %3213 = load double, double* %3212, align 1
  %3214 = getelementptr inbounds i8, i8* %3207, i64 8
  %3215 = bitcast i8* %3214 to i64*
  %3216 = load i64, i64* %3215, align 1
  %3217 = inttoptr i64 %3209 to double*
  %3218 = load double, double* %3217
  %3219 = fadd double %3213, %3218
  %3220 = bitcast i8* %3206 to double*
  store double %3219, double* %3220, align 1, !tbaa !2452
  %3221 = getelementptr inbounds i8, i8* %3206, i64 8
  %3222 = bitcast i8* %3221 to i64*
  store i64 %3216, i64* %3222, align 1, !tbaa !2452
  %3223 = bitcast %union.vec128_t* %XMM0 to i8*
  %3224 = load i64, i64* %PC
  %3225 = add i64 %3224, 9
  store i64 %3225, i64* %PC
  %3226 = bitcast i8* %3223 to double*
  %3227 = load double, double* %3226, align 1
  store double %3227, double* bitcast (%sa_type* @sa to double*)
  %3228 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3229 = load i64, i64* %RBP
  %3230 = sub i64 %3229, 24
  %3231 = load i64, i64* %PC
  %3232 = add i64 %3231, 5
  store i64 %3232, i64* %PC
  %3233 = inttoptr i64 %3230 to double*
  %3234 = load double, double* %3233
  %3235 = bitcast i8* %3228 to double*
  store double %3234, double* %3235, align 1, !tbaa !2452
  %3236 = getelementptr inbounds i8, i8* %3228, i64 8
  %3237 = bitcast i8* %3236 to double*
  store double 0.000000e+00, double* %3237, align 1, !tbaa !2452
  %3238 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3239 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3240 = load i64, i64* %PC
  %3241 = add i64 %3240, 9
  store i64 %3241, i64* %PC
  %3242 = bitcast i8* %3239 to double*
  %3243 = load double, double* %3242, align 1
  %3244 = getelementptr inbounds i8, i8* %3239, i64 8
  %3245 = bitcast i8* %3244 to i64*
  %3246 = load i64, i64* %3245, align 1
  %3247 = load double, double* bitcast (%two_type* @two to double*)
  %3248 = fadd double %3243, %3247
  %3249 = bitcast i8* %3238 to double*
  store double %3248, double* %3249, align 1, !tbaa !2452
  %3250 = getelementptr inbounds i8, i8* %3238, i64 8
  %3251 = bitcast i8* %3250 to i64*
  store i64 %3246, i64* %3251, align 1, !tbaa !2452
  %3252 = load i64, i64* %RBP
  %3253 = sub i64 %3252, 24
  %3254 = bitcast %union.vec128_t* %XMM0 to i8*
  %3255 = load i64, i64* %PC
  %3256 = add i64 %3255, 5
  store i64 %3256, i64* %PC
  %3257 = bitcast i8* %3254 to double*
  %3258 = load double, double* %3257, align 1
  %3259 = inttoptr i64 %3253 to double*
  store double %3258, double* %3259
  %3260 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3261 = load i64, i64* %RBP
  %3262 = sub i64 %3261, 48
  %3263 = load i64, i64* %PC
  %3264 = add i64 %3263, 5
  store i64 %3264, i64* %PC
  %3265 = inttoptr i64 %3262 to double*
  %3266 = load double, double* %3265
  %3267 = bitcast i8* %3260 to double*
  store double %3266, double* %3267, align 1, !tbaa !2452
  %3268 = getelementptr inbounds i8, i8* %3260, i64 8
  %3269 = bitcast i8* %3268 to double*
  store double 0.000000e+00, double* %3269, align 1, !tbaa !2452
  %3270 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3271 = load i64, i64* %RBP
  %3272 = sub i64 %3271, 16
  %3273 = load i64, i64* %PC
  %3274 = add i64 %3273, 5
  store i64 %3274, i64* %PC
  %3275 = inttoptr i64 %3272 to double*
  %3276 = load double, double* %3275
  %3277 = bitcast i8* %3270 to double*
  store double %3276, double* %3277, align 1, !tbaa !2452
  %3278 = getelementptr inbounds i8, i8* %3270, i64 8
  %3279 = bitcast i8* %3278 to double*
  store double 0.000000e+00, double* %3279, align 1, !tbaa !2452
  %3280 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3281 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3282 = load i64, i64* %RBP
  %3283 = sub i64 %3282, 24
  %3284 = load i64, i64* %PC
  %3285 = add i64 %3284, 5
  store i64 %3285, i64* %PC
  %3286 = bitcast i8* %3281 to double*
  %3287 = load double, double* %3286, align 1
  %3288 = getelementptr inbounds i8, i8* %3281, i64 8
  %3289 = bitcast i8* %3288 to i64*
  %3290 = load i64, i64* %3289, align 1
  %3291 = inttoptr i64 %3283 to double*
  %3292 = load double, double* %3291
  %3293 = fsub double %3287, %3292
  %3294 = bitcast i8* %3280 to double*
  store double %3293, double* %3294, align 1, !tbaa !2452
  %3295 = getelementptr inbounds i8, i8* %3280, i64 8
  %3296 = bitcast i8* %3295 to i64*
  store i64 %3290, i64* %3296, align 1, !tbaa !2452
  %3297 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3298 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3299 = bitcast %union.vec128_t* %XMM1 to i8*
  %3300 = load i64, i64* %PC
  %3301 = add i64 %3300, 4
  store i64 %3301, i64* %PC
  %3302 = bitcast i8* %3298 to double*
  %3303 = load double, double* %3302, align 1
  %3304 = getelementptr inbounds i8, i8* %3298, i64 8
  %3305 = bitcast i8* %3304 to i64*
  %3306 = load i64, i64* %3305, align 1
  %3307 = bitcast i8* %3299 to double*
  %3308 = load double, double* %3307, align 1
  %3309 = fadd double %3303, %3308
  %3310 = bitcast i8* %3297 to double*
  store double %3309, double* %3310, align 1, !tbaa !2452
  %3311 = getelementptr inbounds i8, i8* %3297, i64 8
  %3312 = bitcast i8* %3311 to i64*
  store i64 %3306, i64* %3312, align 1, !tbaa !2452
  %3313 = load i64, i64* %RBP
  %3314 = sub i64 %3313, 48
  %3315 = bitcast %union.vec128_t* %XMM0 to i8*
  %3316 = load i64, i64* %PC
  %3317 = add i64 %3316, 5
  store i64 %3317, i64* %PC
  %3318 = bitcast i8* %3315 to double*
  %3319 = load double, double* %3318, align 1
  %3320 = inttoptr i64 %3314 to double*
  store double %3319, double* %3320
  %3321 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3322 = load i64, i64* %RBP
  %3323 = sub i64 %3322, 32
  %3324 = load i64, i64* %PC
  %3325 = add i64 %3324, 5
  store i64 %3325, i64* %PC
  %3326 = inttoptr i64 %3323 to double*
  %3327 = load double, double* %3326
  %3328 = bitcast i8* %3321 to double*
  store double %3327, double* %3328, align 1, !tbaa !2452
  %3329 = getelementptr inbounds i8, i8* %3321, i64 8
  %3330 = bitcast i8* %3329 to double*
  store double 0.000000e+00, double* %3330, align 1, !tbaa !2452
  %3331 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3332 = load i64, i64* %RBP
  %3333 = sub i64 %3332, 16
  %3334 = load i64, i64* %PC
  %3335 = add i64 %3334, 5
  store i64 %3335, i64* %PC
  %3336 = inttoptr i64 %3333 to double*
  %3337 = load double, double* %3336
  %3338 = bitcast i8* %3331 to double*
  store double %3337, double* %3338, align 1, !tbaa !2452
  %3339 = getelementptr inbounds i8, i8* %3331, i64 8
  %3340 = bitcast i8* %3339 to double*
  store double 0.000000e+00, double* %3340, align 1, !tbaa !2452
  %3341 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3342 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3343 = load i64, i64* %RBP
  %3344 = sub i64 %3343, 24
  %3345 = load i64, i64* %PC
  %3346 = add i64 %3345, 5
  store i64 %3346, i64* %PC
  %3347 = bitcast i8* %3342 to double*
  %3348 = load double, double* %3347, align 1
  %3349 = getelementptr inbounds i8, i8* %3342, i64 8
  %3350 = bitcast i8* %3349 to i64*
  %3351 = load i64, i64* %3350, align 1
  %3352 = inttoptr i64 %3344 to double*
  %3353 = load double, double* %3352
  %3354 = fmul double %3348, %3353
  %3355 = bitcast i8* %3341 to double*
  store double %3354, double* %3355, align 1, !tbaa !2452
  %3356 = getelementptr inbounds i8, i8* %3341, i64 8
  %3357 = bitcast i8* %3356 to i64*
  store i64 %3351, i64* %3357, align 1, !tbaa !2452
  %3358 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3359 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3360 = bitcast %union.vec128_t* %XMM1 to i8*
  %3361 = load i64, i64* %PC
  %3362 = add i64 %3361, 4
  store i64 %3362, i64* %PC
  %3363 = bitcast i8* %3359 to double*
  %3364 = load double, double* %3363, align 1
  %3365 = getelementptr inbounds i8, i8* %3359, i64 8
  %3366 = bitcast i8* %3365 to i64*
  %3367 = load i64, i64* %3366, align 1
  %3368 = bitcast i8* %3360 to double*
  %3369 = load double, double* %3368, align 1
  %3370 = fsub double %3364, %3369
  %3371 = bitcast i8* %3358 to double*
  store double %3370, double* %3371, align 1, !tbaa !2452
  %3372 = getelementptr inbounds i8, i8* %3358, i64 8
  %3373 = bitcast i8* %3372 to i64*
  store i64 %3367, i64* %3373, align 1, !tbaa !2452
  %3374 = load i64, i64* %RBP
  %3375 = sub i64 %3374, 32
  %3376 = bitcast %union.vec128_t* %XMM0 to i8*
  %3377 = load i64, i64* %PC
  %3378 = add i64 %3377, 5
  store i64 %3378, i64* %PC
  %3379 = bitcast i8* %3376 to double*
  %3380 = load double, double* %3379, align 1
  %3381 = inttoptr i64 %3375 to double*
  store double %3380, double* %3381
  %3382 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3383 = load i64, i64* %RBP
  %3384 = sub i64 %3383, 40
  %3385 = load i64, i64* %PC
  %3386 = add i64 %3385, 5
  store i64 %3386, i64* %PC
  %3387 = inttoptr i64 %3384 to double*
  %3388 = load double, double* %3387
  %3389 = bitcast i8* %3382 to double*
  store double %3388, double* %3389, align 1, !tbaa !2452
  %3390 = getelementptr inbounds i8, i8* %3382, i64 8
  %3391 = bitcast i8* %3390 to double*
  store double 0.000000e+00, double* %3391, align 1, !tbaa !2452
  %3392 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3393 = load i64, i64* %RBP
  %3394 = sub i64 %3393, 16
  %3395 = load i64, i64* %PC
  %3396 = add i64 %3395, 5
  store i64 %3396, i64* %PC
  %3397 = inttoptr i64 %3394 to double*
  %3398 = load double, double* %3397
  %3399 = bitcast i8* %3392 to double*
  store double %3398, double* %3399, align 1, !tbaa !2452
  %3400 = getelementptr inbounds i8, i8* %3392, i64 8
  %3401 = bitcast i8* %3400 to double*
  store double 0.000000e+00, double* %3401, align 1, !tbaa !2452
  %3402 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3403 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3404 = load i64, i64* %RBP
  %3405 = sub i64 %3404, 24
  %3406 = load i64, i64* %PC
  %3407 = add i64 %3406, 5
  store i64 %3407, i64* %PC
  %3408 = bitcast i8* %3403 to double*
  %3409 = load double, double* %3408, align 1
  %3410 = getelementptr inbounds i8, i8* %3403, i64 8
  %3411 = bitcast i8* %3410 to i64*
  %3412 = load i64, i64* %3411, align 1
  %3413 = inttoptr i64 %3405 to double*
  %3414 = load double, double* %3413
  %3415 = fdiv double %3409, %3414
  %3416 = bitcast i8* %3402 to double*
  store double %3415, double* %3416, align 1, !tbaa !2452
  %3417 = getelementptr inbounds i8, i8* %3402, i64 8
  %3418 = bitcast i8* %3417 to i64*
  store i64 %3412, i64* %3418, align 1, !tbaa !2452
  %3419 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3420 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3421 = bitcast %union.vec128_t* %XMM1 to i8*
  %3422 = load i64, i64* %PC
  %3423 = add i64 %3422, 4
  store i64 %3423, i64* %PC
  %3424 = bitcast i8* %3420 to double*
  %3425 = load double, double* %3424, align 1
  %3426 = getelementptr inbounds i8, i8* %3420, i64 8
  %3427 = bitcast i8* %3426 to i64*
  %3428 = load i64, i64* %3427, align 1
  %3429 = bitcast i8* %3421 to double*
  %3430 = load double, double* %3429, align 1
  %3431 = fadd double %3425, %3430
  %3432 = bitcast i8* %3419 to double*
  store double %3431, double* %3432, align 1, !tbaa !2452
  %3433 = getelementptr inbounds i8, i8* %3419, i64 8
  %3434 = bitcast i8* %3433 to i64*
  store i64 %3428, i64* %3434, align 1, !tbaa !2452
  %3435 = load i64, i64* %RBP
  %3436 = sub i64 %3435, 40
  %3437 = bitcast %union.vec128_t* %XMM0 to i8*
  %3438 = load i64, i64* %PC
  %3439 = add i64 %3438, 5
  store i64 %3439, i64* %PC
  %3440 = bitcast i8* %3437 to double*
  %3441 = load double, double* %3440, align 1
  %3442 = inttoptr i64 %3436 to double*
  store double %3441, double* %3442
  %3443 = load i64, i64* %RBP
  %3444 = sub i64 %3443, 72
  %3445 = load i64, i64* %PC
  %3446 = add i64 %3445, 4
  store i64 %3446, i64* %PC
  %3447 = inttoptr i64 %3444 to i64*
  %3448 = load i64, i64* %3447
  store i64 %3448, i64* %RAX, align 8, !tbaa !2428
  %3449 = load i64, i64* %RAX
  %3450 = load i64, i64* %PC
  %3451 = add i64 %3450, 4
  store i64 %3451, i64* %PC
  %3452 = add i64 1, %3449
  store i64 %3452, i64* %RAX, align 8, !tbaa !2428
  %3453 = icmp ult i64 %3452, %3449
  %3454 = icmp ult i64 %3452, 1
  %3455 = or i1 %3453, %3454
  %3456 = zext i1 %3455 to i8
  %3457 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3456, i8* %3457, align 1, !tbaa !2432
  %3458 = trunc i64 %3452 to i32
  %3459 = and i32 %3458, 255
  %3460 = call i32 @llvm.ctpop.i32(i32 %3459) #16
  %3461 = trunc i32 %3460 to i8
  %3462 = and i8 %3461, 1
  %3463 = xor i8 %3462, 1
  %3464 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3463, i8* %3464, align 1, !tbaa !2446
  %3465 = xor i64 1, %3449
  %3466 = xor i64 %3465, %3452
  %3467 = lshr i64 %3466, 4
  %3468 = trunc i64 %3467 to i8
  %3469 = and i8 %3468, 1
  %3470 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3469, i8* %3470, align 1, !tbaa !2450
  %3471 = icmp eq i64 %3452, 0
  %3472 = zext i1 %3471 to i8
  %3473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3472, i8* %3473, align 1, !tbaa !2447
  %3474 = lshr i64 %3452, 63
  %3475 = trunc i64 %3474 to i8
  %3476 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3475, i8* %3476, align 1, !tbaa !2448
  %3477 = lshr i64 %3449, 63
  %3478 = xor i64 %3474, %3477
  %3479 = add nuw nsw i64 %3478, %3474
  %3480 = icmp eq i64 %3479, 2
  %3481 = zext i1 %3480 to i8
  %3482 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3481, i8* %3482, align 1, !tbaa !2449
  %3483 = load i64, i64* %RBP
  %3484 = sub i64 %3483, 72
  %3485 = load i64, i64* %RAX
  %3486 = load i64, i64* %PC
  %3487 = add i64 %3486, 4
  store i64 %3487, i64* %PC
  %3488 = inttoptr i64 %3484 to i64*
  store i64 %3485, i64* %3488
  %3489 = load i64, i64* %PC
  %3490 = sub i64 %3489, 173
  %3491 = load i64, i64* %PC
  %3492 = add i64 %3491, 5
  store i64 %3492, i64* %PC
  %3493 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3490, i64* %3493, align 8, !tbaa !2428
  br label %block_400bcf

block_4007d5:                                     ; preds = %block_40070b
  %3494 = load i64, i64* %PC
  %3495 = add i64 %3494, 10
  store i64 %3495, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %3496 = load i64, i64* %PC
  %3497 = add i64 %3496, 7665
  %3498 = load i64, i64* %PC
  %3499 = add i64 %3498, 5
  %3500 = load i64, i64* %PC
  %3501 = add i64 %3500, 5
  store i64 %3501, i64* %PC
  %3502 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %3503 = load i64, i64* %3502, align 8, !tbaa !2428
  %3504 = add i64 %3503, -8
  %3505 = inttoptr i64 %3504 to i64*
  store i64 %3499, i64* %3505
  store i64 %3504, i64* %3502, align 8, !tbaa !2428
  %3506 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %3497, i64* %3506, align 8, !tbaa !2428
  %3507 = load i64, i64* %PC
  %3508 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %3507, %struct.Memory* %MEMORY.9)
  %3509 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3510 = load i64, i64* %PC
  %3511 = add i64 %3510, 9
  store i64 %3511, i64* %PC
  %3512 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %3513 = bitcast i8* %3509 to double*
  store double %3512, double* %3513, align 1, !tbaa !2452
  %3514 = getelementptr inbounds i8, i8* %3509, i64 8
  %3515 = bitcast i8* %3514 to double*
  store double 0.000000e+00, double* %3515, align 1, !tbaa !2452
  %3516 = bitcast %union.vec128_t* %XMM0 to i8*
  %3517 = load i64, i64* %PC
  %3518 = add i64 %3517, 9
  store i64 %3518, i64* %PC
  %3519 = bitcast i8* %3516 to double*
  %3520 = load double, double* %3519, align 1
  store double %3520, double* bitcast (%sa_type* @sa to double*)
  %3521 = load i64, i64* %RBP
  %3522 = sub i64 %3521, 88
  %3523 = load i64, i64* %PC
  %3524 = add i64 %3523, 4
  store i64 %3524, i64* %PC
  %3525 = inttoptr i64 %3522 to i64*
  %3526 = load i64, i64* %3525
  store i64 %3526, i64* %RDI, align 8, !tbaa !2428
  %3527 = load i64, i64* %RDI
  %3528 = load i64, i64* %RBP
  %3529 = sub i64 %3528, 64
  %3530 = load i64, i64* %PC
  %3531 = add i64 %3530, 4
  store i64 %3531, i64* %PC
  %3532 = inttoptr i64 %3529 to i64*
  %3533 = load i64, i64* %3532
  %3534 = sub i64 %3527, %3533
  %3535 = icmp ugt i64 %3533, %3527
  %3536 = zext i1 %3535 to i8
  %3537 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3536, i8* %3537, align 1, !tbaa !2432
  %3538 = trunc i64 %3534 to i32
  %3539 = and i32 %3538, 255
  %3540 = call i32 @llvm.ctpop.i32(i32 %3539) #16
  %3541 = trunc i32 %3540 to i8
  %3542 = and i8 %3541, 1
  %3543 = xor i8 %3542, 1
  %3544 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3543, i8* %3544, align 1, !tbaa !2446
  %3545 = xor i64 %3533, %3527
  %3546 = xor i64 %3545, %3534
  %3547 = lshr i64 %3546, 4
  %3548 = trunc i64 %3547 to i8
  %3549 = and i8 %3548, 1
  %3550 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %3549, i8* %3550, align 1, !tbaa !2450
  %3551 = icmp eq i64 %3534, 0
  %3552 = zext i1 %3551 to i8
  %3553 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %3552, i8* %3553, align 1, !tbaa !2447
  %3554 = lshr i64 %3534, 63
  %3555 = trunc i64 %3554 to i8
  %3556 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3555, i8* %3556, align 1, !tbaa !2448
  %3557 = lshr i64 %3527, 63
  %3558 = lshr i64 %3533, 63
  %3559 = xor i64 %3558, %3557
  %3560 = xor i64 %3554, %3557
  %3561 = add nuw nsw i64 %3560, %3559
  %3562 = icmp eq i64 %3561, 2
  %3563 = zext i1 %3562 to i8
  %3564 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3563, i8* %3564, align 1, !tbaa !2449
  %3565 = load i64, i64* %RBP
  %3566 = sub i64 %3565, 120
  %3567 = load i32, i32* %EAX
  %3568 = zext i32 %3567 to i64
  %3569 = load i64, i64* %PC
  %3570 = add i64 %3569, 3
  store i64 %3570, i64* %PC
  %3571 = inttoptr i64 %3566 to i32*
  store i32 %3567, i32* %3571
  %3572 = load i64, i64* %PC
  %3573 = add i64 %3572, 11
  %3574 = load i64, i64* %PC
  %3575 = add i64 %3574, 6
  %3576 = load i64, i64* %PC
  %3577 = add i64 %3576, 6
  store i64 %3577, i64* %PC
  %3578 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %3579 = load i8, i8* %3578, align 1, !tbaa !2447
  %3580 = icmp eq i8 %3579, 0
  %3581 = zext i1 %3580 to i8
  store i8 %3581, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %3582 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %3583 = select i1 %3580, i64 %3573, i64 %3575
  store i64 %3583, i64* %3582, align 8, !tbaa !2428
  %3584 = load i8, i8* %BRANCH_TAKEN
  %3585 = icmp eq i8 %3584, 1
  %3586 = load i64, i64* %PC
  br i1 %3585, label %block_40080c, label %block_400807

block_4008c4:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit, %block_4008b8
  %MEMORY.3 = phi %struct.Memory* [ %14075, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit ], [ %14075, %block_4008b8 ]
  %3587 = load i64, i64* %PC
  %3588 = add i64 %3587, 10
  store i64 %3588, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 390), i64* %RDI, align 8, !tbaa !2428
  %3589 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %3590 = load i64, i64* %PC
  %3591 = add i64 %3590, 8
  store i64 %3591, i64* %PC
  %3592 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 72) to double*)
  %3593 = bitcast i8* %3589 to double*
  store double %3592, double* %3593, align 1, !tbaa !2452
  %3594 = getelementptr inbounds i8, i8* %3589, i64 8
  %3595 = bitcast i8* %3594 to double*
  store double 0.000000e+00, double* %3595, align 1, !tbaa !2452
  %3596 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %3597 = load i64, i64* %PC
  %3598 = add i64 %3597, 8
  store i64 %3598, i64* %PC
  %3599 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 80) to double*)
  %3600 = bitcast i8* %3596 to double*
  store double %3599, double* %3600, align 1, !tbaa !2452
  %3601 = getelementptr inbounds i8, i8* %3596, i64 8
  %3602 = bitcast i8* %3601 to double*
  store double 0.000000e+00, double* %3602, align 1, !tbaa !2452
  %3603 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3604 = load i64, i64* %PC
  %3605 = add i64 %3604, 8
  store i64 %3605, i64* %PC
  %3606 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 88) to double*)
  %3607 = bitcast i8* %3603 to double*
  store double %3606, double* %3607, align 1, !tbaa !2452
  %3608 = getelementptr inbounds i8, i8* %3603, i64 8
  %3609 = bitcast i8* %3608 to double*
  store double 0.000000e+00, double* %3609, align 1, !tbaa !2452
  %3610 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3611 = load i64, i64* %PC
  %3612 = add i64 %3611, 9
  store i64 %3612, i64* %PC
  %3613 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %3614 = bitcast i8* %3610 to double*
  store double %3613, double* %3614, align 1, !tbaa !2452
  %3615 = getelementptr inbounds i8, i8* %3610, i64 8
  %3616 = bitcast i8* %3615 to double*
  store double 0.000000e+00, double* %3616, align 1, !tbaa !2452
  %3617 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3618 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3619 = load i64, i64* %PC
  %3620 = add i64 %3619, 9
  store i64 %3620, i64* %PC
  %3621 = bitcast i8* %3618 to double*
  %3622 = load double, double* %3621, align 1
  %3623 = getelementptr inbounds i8, i8* %3618, i64 8
  %3624 = bitcast i8* %3623 to i64*
  %3625 = load i64, i64* %3624, align 1
  %3626 = load double, double* bitcast (%sa_type* @sa to double*)
  %3627 = fmul double %3622, %3626
  %3628 = bitcast i8* %3617 to double*
  store double %3627, double* %3628, align 1, !tbaa !2452
  %3629 = getelementptr inbounds i8, i8* %3617, i64 8
  %3630 = bitcast i8* %3629 to i64*
  store i64 %3625, i64* %3630, align 1, !tbaa !2452
  %3631 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3632 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3633 = load i64, i64* %PC
  %3634 = add i64 %3633, 9
  store i64 %3634, i64* %PC
  %3635 = bitcast i8* %3632 to double*
  %3636 = load double, double* %3635, align 1
  %3637 = getelementptr inbounds i8, i8* %3632, i64 8
  %3638 = bitcast i8* %3637 to i64*
  %3639 = load i64, i64* %3638, align 1
  %3640 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %3641 = fsub double %3636, %3640
  %3642 = bitcast i8* %3631 to double*
  store double %3641, double* %3642, align 1, !tbaa !2452
  %3643 = getelementptr inbounds i8, i8* %3631, i64 8
  %3644 = bitcast i8* %3643 to i64*
  store i64 %3639, i64* %3644, align 1, !tbaa !2452
  %3645 = bitcast %union.vec128_t* %XMM3 to i8*
  %3646 = load i64, i64* %PC
  %3647 = add i64 %3646, 9
  store i64 %3647, i64* %PC
  %3648 = bitcast i8* %3645 to double*
  %3649 = load double, double* %3648, align 1
  store double %3649, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 16) to double*)
  %3650 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3651 = load i64, i64* %PC
  %3652 = add i64 %3651, 9
  store i64 %3652, i64* %PC
  %3653 = load double, double* bitcast (%D1_0_type* @D1_0 to double*)
  %3654 = bitcast i8* %3650 to double*
  store double %3653, double* %3654, align 1, !tbaa !2452
  %3655 = getelementptr inbounds i8, i8* %3650, i64 8
  %3656 = bitcast i8* %3655 to double*
  store double 0.000000e+00, double* %3656, align 1, !tbaa !2452
  %3657 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3658 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3659 = load i64, i64* %PC
  %3660 = add i64 %3659, 9
  store i64 %3660, i64* %PC
  %3661 = bitcast i8* %3658 to double*
  %3662 = load double, double* %3661, align 1
  %3663 = getelementptr inbounds i8, i8* %3658, i64 8
  %3664 = bitcast i8* %3663 to i64*
  %3665 = load i64, i64* %3664, align 1
  %3666 = load double, double* bitcast (%D2_0_type* @D2_0 to double*)
  %3667 = fadd double %3662, %3666
  %3668 = bitcast i8* %3657 to double*
  store double %3667, double* %3668, align 1, !tbaa !2452
  %3669 = getelementptr inbounds i8, i8* %3657, i64 8
  %3670 = bitcast i8* %3669 to i64*
  store i64 %3665, i64* %3670, align 1, !tbaa !2452
  %3671 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3672 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3673 = load i64, i64* %PC
  %3674 = add i64 %3673, 9
  store i64 %3674, i64* %PC
  %3675 = bitcast i8* %3672 to double*
  %3676 = load double, double* %3675, align 1
  %3677 = getelementptr inbounds i8, i8* %3672, i64 8
  %3678 = bitcast i8* %3677 to i64*
  %3679 = load i64, i64* %3678, align 1
  %3680 = load double, double* bitcast (%D3_type* @D3 to double*)
  %3681 = fadd double %3676, %3680
  %3682 = bitcast i8* %3671 to double*
  store double %3681, double* %3682, align 1, !tbaa !2452
  %3683 = getelementptr inbounds i8, i8* %3671, i64 8
  %3684 = bitcast i8* %3683 to i64*
  store i64 %3679, i64* %3684, align 1, !tbaa !2452
  %3685 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3686 = load i64, i64* %PC
  %3687 = add i64 %3686, 9
  store i64 %3687, i64* %PC
  %3688 = load double, double* bitcast (%one_type* @one to double*)
  %3689 = bitcast i8* %3685 to double*
  store double %3688, double* %3689, align 1, !tbaa !2452
  %3690 = getelementptr inbounds i8, i8* %3685, i64 8
  %3691 = bitcast i8* %3690 to double*
  store double 0.000000e+00, double* %3691, align 1, !tbaa !2452
  %3692 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3693 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3694 = load i64, i64* %PC
  %3695 = add i64 %3694, 9
  store i64 %3695, i64* %PC
  %3696 = bitcast i8* %3693 to double*
  %3697 = load double, double* %3696, align 1
  %3698 = getelementptr inbounds i8, i8* %3693, i64 8
  %3699 = bitcast i8* %3698 to i64*
  %3700 = load i64, i64* %3699, align 1
  %3701 = load double, double* bitcast (%D1_0_type* @D1_0 to double*)
  %3702 = fadd double %3697, %3701
  %3703 = bitcast i8* %3692 to double*
  store double %3702, double* %3703, align 1, !tbaa !2452
  %3704 = getelementptr inbounds i8, i8* %3692, i64 8
  %3705 = bitcast i8* %3704 to i64*
  store i64 %3700, i64* %3705, align 1, !tbaa !2452
  %3706 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3707 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3708 = load i64, i64* %PC
  %3709 = add i64 %3708, 9
  store i64 %3709, i64* %PC
  %3710 = bitcast i8* %3707 to double*
  %3711 = load double, double* %3710, align 1
  %3712 = getelementptr inbounds i8, i8* %3707, i64 8
  %3713 = bitcast i8* %3712 to i64*
  %3714 = load i64, i64* %3713, align 1
  %3715 = load double, double* bitcast (%E2_0_type* @E2_0 to double*)
  %3716 = fadd double %3711, %3715
  %3717 = bitcast i8* %3706 to double*
  store double %3716, double* %3717, align 1, !tbaa !2452
  %3718 = getelementptr inbounds i8, i8* %3706, i64 8
  %3719 = bitcast i8* %3718 to i64*
  store i64 %3714, i64* %3719, align 1, !tbaa !2452
  %3720 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3721 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3722 = load i64, i64* %PC
  %3723 = add i64 %3722, 9
  store i64 %3723, i64* %PC
  %3724 = bitcast i8* %3721 to double*
  %3725 = load double, double* %3724, align 1
  %3726 = getelementptr inbounds i8, i8* %3721, i64 8
  %3727 = bitcast i8* %3726 to i64*
  %3728 = load i64, i64* %3727, align 1
  %3729 = load double, double* bitcast (%E3_type* @E3 to double*)
  %3730 = fadd double %3725, %3729
  %3731 = bitcast i8* %3720 to double*
  store double %3730, double* %3731, align 1, !tbaa !2452
  %3732 = getelementptr inbounds i8, i8* %3720, i64 8
  %3733 = bitcast i8* %3732 to i64*
  store i64 %3728, i64* %3733, align 1, !tbaa !2452
  %3734 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3735 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3736 = bitcast %union.vec128_t* %XMM4 to i8*
  %3737 = load i64, i64* %PC
  %3738 = add i64 %3737, 4
  store i64 %3738, i64* %PC
  %3739 = bitcast i8* %3735 to double*
  %3740 = load double, double* %3739, align 1
  %3741 = getelementptr inbounds i8, i8* %3735, i64 8
  %3742 = bitcast i8* %3741 to i64*
  %3743 = load i64, i64* %3742, align 1
  %3744 = bitcast i8* %3736 to double*
  %3745 = load double, double* %3744, align 1
  %3746 = fdiv double %3740, %3745
  %3747 = bitcast i8* %3734 to double*
  store double %3746, double* %3747, align 1, !tbaa !2452
  %3748 = getelementptr inbounds i8, i8* %3734, i64 8
  %3749 = bitcast i8* %3748 to i64*
  store i64 %3743, i64* %3749, align 1, !tbaa !2452
  %3750 = bitcast %union.vec128_t* %XMM3 to i8*
  %3751 = load i64, i64* %PC
  %3752 = add i64 %3751, 9
  store i64 %3752, i64* %PC
  %3753 = bitcast i8* %3750 to double*
  %3754 = load double, double* %3753, align 1
  store double %3754, double* bitcast (%sa_type* @sa to double*)
  %3755 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3756 = load i64, i64* %PC
  %3757 = add i64 %3756, 9
  store i64 %3757, i64* %PC
  %3758 = load double, double* bitcast (%D1_0_type* @D1_0 to double*)
  %3759 = bitcast i8* %3755 to double*
  store double %3758, double* %3759, align 1, !tbaa !2452
  %3760 = getelementptr inbounds i8, i8* %3755, i64 8
  %3761 = bitcast i8* %3760 to double*
  store double 0.000000e+00, double* %3761, align 1, !tbaa !2452
  %3762 = bitcast %union.vec128_t* %XMM3 to i8*
  %3763 = load i64, i64* %PC
  %3764 = add i64 %3763, 9
  store i64 %3764, i64* %PC
  %3765 = bitcast i8* %3762 to double*
  %3766 = load double, double* %3765, align 1
  store double %3766, double* bitcast (%sb_type* @sb to double*)
  %3767 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3768 = load i64, i64* %PC
  %3769 = add i64 %3768, 9
  store i64 %3769, i64* %PC
  %3770 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 16) to double*)
  %3771 = bitcast i8* %3767 to double*
  store double %3770, double* %3771, align 1, !tbaa !2452
  %3772 = getelementptr inbounds i8, i8* %3767, i64 8
  %3773 = bitcast i8* %3772 to double*
  store double 0.000000e+00, double* %3773, align 1, !tbaa !2452
  %3774 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3775 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3776 = bitcast %union.vec128_t* %XMM2 to i8*
  %3777 = load i64, i64* %PC
  %3778 = add i64 %3777, 4
  store i64 %3778, i64* %PC
  %3779 = bitcast i8* %3775 to double*
  %3780 = load double, double* %3779, align 1
  %3781 = getelementptr inbounds i8, i8* %3775, i64 8
  %3782 = bitcast i8* %3781 to i64*
  %3783 = load i64, i64* %3782, align 1
  %3784 = bitcast i8* %3776 to double*
  %3785 = load double, double* %3784, align 1
  %3786 = fdiv double %3780, %3785
  %3787 = bitcast i8* %3774 to double*
  store double %3786, double* %3787, align 1, !tbaa !2452
  %3788 = getelementptr inbounds i8, i8* %3774, i64 8
  %3789 = bitcast i8* %3788 to i64*
  store i64 %3783, i64* %3789, align 1, !tbaa !2452
  %3790 = bitcast %union.vec128_t* %XMM3 to i8*
  %3791 = load i64, i64* %PC
  %3792 = add i64 %3791, 9
  store i64 %3792, i64* %PC
  %3793 = bitcast i8* %3790 to double*
  %3794 = load double, double* %3793, align 1
  store double %3794, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 24) to double*)
  %3795 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3796 = load i64, i64* %RBP
  %3797 = sub i64 %3796, 48
  %3798 = load i64, i64* %PC
  %3799 = add i64 %3798, 5
  store i64 %3799, i64* %PC
  %3800 = inttoptr i64 %3797 to double*
  %3801 = load double, double* %3800
  %3802 = bitcast i8* %3795 to double*
  store double %3801, double* %3802, align 1, !tbaa !2452
  %3803 = getelementptr inbounds i8, i8* %3795, i64 8
  %3804 = bitcast i8* %3803 to double*
  store double 0.000000e+00, double* %3804, align 1, !tbaa !2452
  %3805 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3806 = load i64, i64* %PC
  %3807 = add i64 %3806, 9
  store i64 %3807, i64* %PC
  %3808 = load double, double* bitcast (%sa_type* @sa to double*)
  %3809 = bitcast i8* %3805 to double*
  store double %3808, double* %3809, align 1, !tbaa !2452
  %3810 = getelementptr inbounds i8, i8* %3805, i64 8
  %3811 = bitcast i8* %3810 to double*
  store double 0.000000e+00, double* %3811, align 1, !tbaa !2452
  %3812 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3813 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3814 = load i64, i64* %PC
  %3815 = add i64 %3814, 9
  store i64 %3815, i64* %PC
  %3816 = bitcast i8* %3813 to double*
  %3817 = load double, double* %3816, align 1
  %3818 = getelementptr inbounds i8, i8* %3813, i64 8
  %3819 = bitcast i8* %3818 to i64*
  %3820 = load i64, i64* %3819, align 1
  %3821 = load double, double* bitcast (%sb_type* @sb to double*)
  %3822 = fadd double %3817, %3821
  %3823 = bitcast i8* %3812 to double*
  store double %3822, double* %3823, align 1, !tbaa !2452
  %3824 = getelementptr inbounds i8, i8* %3812, i64 8
  %3825 = bitcast i8* %3824 to i64*
  store i64 %3820, i64* %3825, align 1, !tbaa !2452
  %3826 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3827 = load i64, i64* %PC
  %3828 = add i64 %3827, 9
  store i64 %3828, i64* %PC
  %3829 = load double, double* bitcast (%two_type* @two to double*)
  %3830 = bitcast i8* %3826 to double*
  store double %3829, double* %3830, align 1, !tbaa !2452
  %3831 = getelementptr inbounds i8, i8* %3826, i64 8
  %3832 = bitcast i8* %3831 to double*
  store double 0.000000e+00, double* %3832, align 1, !tbaa !2452
  %3833 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3834 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %3835 = load i64, i64* %RBP
  %3836 = sub i64 %3835, 16
  %3837 = load i64, i64* %PC
  %3838 = add i64 %3837, 5
  store i64 %3838, i64* %PC
  %3839 = bitcast i8* %3834 to double*
  %3840 = load double, double* %3839, align 1
  %3841 = getelementptr inbounds i8, i8* %3834, i64 8
  %3842 = bitcast i8* %3841 to i64*
  %3843 = load i64, i64* %3842, align 1
  %3844 = inttoptr i64 %3836 to double*
  %3845 = load double, double* %3844
  %3846 = fmul double %3840, %3845
  %3847 = bitcast i8* %3833 to double*
  store double %3846, double* %3847, align 1, !tbaa !2452
  %3848 = getelementptr inbounds i8, i8* %3833, i64 8
  %3849 = bitcast i8* %3848 to i64*
  store i64 %3843, i64* %3849, align 1, !tbaa !2452
  %3850 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3851 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %3852 = bitcast %union.vec128_t* %XMM4 to i8*
  %3853 = load i64, i64* %PC
  %3854 = add i64 %3853, 4
  store i64 %3854, i64* %PC
  %3855 = bitcast i8* %3851 to double*
  %3856 = load double, double* %3855, align 1
  %3857 = getelementptr inbounds i8, i8* %3851, i64 8
  %3858 = bitcast i8* %3857 to i64*
  %3859 = load i64, i64* %3858, align 1
  %3860 = bitcast i8* %3852 to double*
  %3861 = load double, double* %3860, align 1
  %3862 = fadd double %3856, %3861
  %3863 = bitcast i8* %3850 to double*
  store double %3862, double* %3863, align 1, !tbaa !2452
  %3864 = getelementptr inbounds i8, i8* %3850, i64 8
  %3865 = bitcast i8* %3864 to i64*
  store i64 %3859, i64* %3865, align 1, !tbaa !2452
  %3866 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3867 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3868 = bitcast %union.vec128_t* %XMM3 to i8*
  %3869 = load i64, i64* %PC
  %3870 = add i64 %3869, 4
  store i64 %3870, i64* %PC
  %3871 = bitcast i8* %3867 to double*
  %3872 = load double, double* %3871, align 1
  %3873 = getelementptr inbounds i8, i8* %3867, i64 8
  %3874 = bitcast i8* %3873 to i64*
  %3875 = load i64, i64* %3874, align 1
  %3876 = bitcast i8* %3868 to double*
  %3877 = load double, double* %3876, align 1
  %3878 = fmul double %3872, %3877
  %3879 = bitcast i8* %3866 to double*
  store double %3878, double* %3879, align 1, !tbaa !2452
  %3880 = getelementptr inbounds i8, i8* %3866, i64 8
  %3881 = bitcast i8* %3880 to i64*
  store i64 %3875, i64* %3881, align 1, !tbaa !2452
  %3882 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3883 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3884 = load i64, i64* %PC
  %3885 = add i64 %3884, 9
  store i64 %3885, i64* %PC
  %3886 = bitcast i8* %3883 to double*
  %3887 = load double, double* %3886, align 1
  %3888 = getelementptr inbounds i8, i8* %3883, i64 8
  %3889 = bitcast i8* %3888 to i64*
  %3890 = load i64, i64* %3889, align 1
  %3891 = load double, double* bitcast (%two_type* @two to double*)
  %3892 = fdiv double %3887, %3891
  %3893 = bitcast i8* %3882 to double*
  store double %3892, double* %3893, align 1, !tbaa !2452
  %3894 = getelementptr inbounds i8, i8* %3882, i64 8
  %3895 = bitcast i8* %3894 to i64*
  store i64 %3890, i64* %3895, align 1, !tbaa !2452
  %3896 = bitcast %union.vec128_t* %XMM2 to i8*
  %3897 = load i64, i64* %PC
  %3898 = add i64 %3897, 9
  store i64 %3898, i64* %PC
  %3899 = bitcast i8* %3896 to double*
  %3900 = load double, double* %3899, align 1
  store double %3900, double* bitcast (%sa_type* @sa to double*)
  %3901 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3902 = load i64, i64* %PC
  %3903 = add i64 %3902, 9
  store i64 %3903, i64* %PC
  %3904 = load double, double* bitcast (%one_type* @one to double*)
  %3905 = bitcast i8* %3901 to double*
  store double %3904, double* %3905, align 1, !tbaa !2452
  %3906 = getelementptr inbounds i8, i8* %3901, i64 8
  %3907 = bitcast i8* %3906 to double*
  store double 0.000000e+00, double* %3907, align 1, !tbaa !2452
  %3908 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3909 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3910 = load i64, i64* %PC
  %3911 = add i64 %3910, 9
  store i64 %3911, i64* %PC
  %3912 = bitcast i8* %3909 to double*
  %3913 = load double, double* %3912, align 1
  %3914 = getelementptr inbounds i8, i8* %3909, i64 8
  %3915 = bitcast i8* %3914 to i64*
  %3916 = load i64, i64* %3915, align 1
  %3917 = load double, double* bitcast (%sa_type* @sa to double*)
  %3918 = fdiv double %3913, %3917
  %3919 = bitcast i8* %3908 to double*
  store double %3918, double* %3919, align 1, !tbaa !2452
  %3920 = getelementptr inbounds i8, i8* %3908, i64 8
  %3921 = bitcast i8* %3920 to i64*
  store i64 %3916, i64* %3921, align 1, !tbaa !2452
  %3922 = bitcast %union.vec128_t* %XMM2 to i8*
  %3923 = load i64, i64* %PC
  %3924 = add i64 %3923, 9
  store i64 %3924, i64* %PC
  %3925 = bitcast i8* %3922 to double*
  %3926 = load double, double* %3925, align 1
  store double %3926, double* bitcast (%sb_type* @sb to double*)
  %3927 = load i64, i64* %PC
  %3928 = add i64 %3927, 10
  store i64 %3928, i64* %PC
  %3929 = load double, double* bitcast (%sb_type* @sb to double*)
  %3930 = call double @llvm.trunc.f64(double %3929) #16
  %3931 = call double @llvm.fabs.f64(double %3930) #16
  %3932 = fcmp ogt double %3931, 0x43E0000000000000
  %3933 = fptosi double %3930 to i64
  %3934 = select i1 %3932, i64 -9223372036854775808, i64 %3933
  store i64 %3934, i64* %RAX, align 8, !tbaa !2428
  %3935 = load i64, i64* %RAX
  %3936 = load i64, i64* %PC
  %3937 = add i64 %3936, 7
  store i64 %3937, i64* %PC
  %3938 = sext i64 %3935 to i128
  %3939 = and i128 %3938, -18446744073709551616
  %3940 = zext i64 %3935 to i128
  %3941 = or i128 %3939, %3940
  %3942 = mul nsw i128 40000, %3941
  %3943 = trunc i128 %3942 to i64
  store i64 %3943, i64* %RAX, align 8, !tbaa !2428
  %3944 = sext i64 %3943 to i128
  %3945 = icmp ne i128 %3944, %3942
  %3946 = zext i1 %3945 to i8
  %3947 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %3946, i8* %3947, align 1, !tbaa !2432
  %3948 = trunc i128 %3942 to i32
  %3949 = and i32 %3948, 255
  %3950 = call i32 @llvm.ctpop.i32(i32 %3949) #16
  %3951 = trunc i32 %3950 to i8
  %3952 = and i8 %3951, 1
  %3953 = xor i8 %3952, 1
  %3954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %3953, i8* %3954, align 1, !tbaa !2446
  %3955 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %3955, align 1, !tbaa !2450
  %3956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 0, i8* %3956, align 1, !tbaa !2447
  %3957 = lshr i64 %3943, 63
  %3958 = trunc i64 %3957 to i8
  %3959 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %3958, i8* %3959, align 1, !tbaa !2448
  %3960 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %3946, i8* %3960, align 1, !tbaa !2449
  %3961 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3962 = load i64, i64* %RAX
  %3963 = load i64, i64* %PC
  %3964 = add i64 %3963, 5
  store i64 %3964, i64* %PC
  %3965 = sitofp i64 %3962 to double
  %3966 = bitcast i8* %3961 to double*
  store double %3965, double* %3966, align 1, !tbaa !2452
  %3967 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3968 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3969 = load i64, i64* %PC
  %3970 = add i64 %3969, 9
  store i64 %3970, i64* %PC
  %3971 = bitcast i8* %3968 to double*
  %3972 = load double, double* %3971, align 1
  %3973 = getelementptr inbounds i8, i8* %3968, i64 8
  %3974 = bitcast i8* %3973 to i64*
  %3975 = load i64, i64* %3974, align 1
  %3976 = load double, double* bitcast (%scale_type* @scale to double*)
  %3977 = fdiv double %3972, %3976
  %3978 = bitcast i8* %3967 to double*
  store double %3977, double* %3978, align 1, !tbaa !2452
  %3979 = getelementptr inbounds i8, i8* %3967, i64 8
  %3980 = bitcast i8* %3979 to i64*
  store i64 %3975, i64* %3980, align 1, !tbaa !2452
  %3981 = bitcast %union.vec128_t* %XMM2 to i8*
  %3982 = load i64, i64* %PC
  %3983 = add i64 %3982, 5
  store i64 %3983, i64* %PC
  %3984 = bitcast i8* %3981 to double*
  %3985 = load double, double* %3984, align 1
  %3986 = call double @llvm.trunc.f64(double %3985) #16
  %3987 = call double @llvm.fabs.f64(double %3986) #16
  %3988 = fcmp ogt double %3987, 0x43E0000000000000
  %3989 = fptosi double %3986 to i64
  %3990 = select i1 %3988, i64 -9223372036854775808, i64 %3989
  store i64 %3990, i64* %RAX, align 8, !tbaa !2428
  %3991 = load i64, i64* %RBP
  %3992 = sub i64 %3991, 88
  %3993 = load i64, i64* %RAX
  %3994 = load i64, i64* %PC
  %3995 = add i64 %3994, 4
  store i64 %3995, i64* %PC
  %3996 = inttoptr i64 %3992 to i64*
  store i64 %3993, i64* %3996
  %3997 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %3998 = load i64, i64* %PC
  %3999 = add i64 %3998, 9
  store i64 %3999, i64* %PC
  %4000 = load double, double* bitcast (%sb_type* @sb to double*)
  %4001 = bitcast i8* %3997 to double*
  store double %4000, double* %4001, align 1, !tbaa !2452
  %4002 = getelementptr inbounds i8, i8* %3997, i64 8
  %4003 = bitcast i8* %4002 to double*
  store double 0.000000e+00, double* %4003, align 1, !tbaa !2452
  %4004 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4005 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4006 = bitcast %union.vec128_t* %XMM1 to i8*
  %4007 = load i64, i64* %PC
  %4008 = add i64 %4007, 4
  store i64 %4008, i64* %PC
  %4009 = bitcast i8* %4005 to double*
  %4010 = load double, double* %4009, align 1
  %4011 = getelementptr inbounds i8, i8* %4005, i64 8
  %4012 = bitcast i8* %4011 to i64*
  %4013 = load i64, i64* %4012, align 1
  %4014 = bitcast i8* %4006 to double*
  %4015 = load double, double* %4014, align 1
  %4016 = fsub double %4010, %4015
  %4017 = bitcast i8* %4004 to double*
  store double %4016, double* %4017, align 1, !tbaa !2452
  %4018 = getelementptr inbounds i8, i8* %4004, i64 8
  %4019 = bitcast i8* %4018 to i64*
  store i64 %4013, i64* %4019, align 1, !tbaa !2452
  %4020 = bitcast %union.vec128_t* %XMM2 to i8*
  %4021 = load i64, i64* %PC
  %4022 = add i64 %4021, 9
  store i64 %4022, i64* %PC
  %4023 = bitcast i8* %4020 to double*
  %4024 = load double, double* %4023, align 1
  store double %4024, double* bitcast (%sc_type* @sc to double*)
  %4025 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4026 = load i64, i64* %PC
  %4027 = add i64 %4026, 9
  store i64 %4027, i64* %PC
  %4028 = load double, double* bitcast (%one_type* @one to double*)
  %4029 = bitcast i8* %4025 to double*
  store double %4028, double* %4029, align 1, !tbaa !2452
  %4030 = getelementptr inbounds i8, i8* %4025, i64 8
  %4031 = bitcast i8* %4030 to double*
  store double 0.000000e+00, double* %4031, align 1, !tbaa !2452
  %4032 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4033 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4034 = load i64, i64* %PC
  %4035 = add i64 %4034, 9
  store i64 %4035, i64* %PC
  %4036 = bitcast i8* %4033 to double*
  %4037 = load double, double* %4036, align 1
  %4038 = getelementptr inbounds i8, i8* %4033, i64 8
  %4039 = bitcast i8* %4038 to i64*
  %4040 = load i64, i64* %4039, align 1
  %4041 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 24) to double*)
  %4042 = fdiv double %4037, %4041
  %4043 = bitcast i8* %4032 to double*
  store double %4042, double* %4043, align 1, !tbaa !2452
  %4044 = getelementptr inbounds i8, i8* %4032, i64 8
  %4045 = bitcast i8* %4044 to i64*
  store i64 %4040, i64* %4045, align 1, !tbaa !2452
  %4046 = bitcast %union.vec128_t* %XMM1 to i8*
  %4047 = load i64, i64* %PC
  %4048 = add i64 %4047, 9
  store i64 %4048, i64* %PC
  %4049 = bitcast i8* %4046 to double*
  %4050 = load double, double* %4049, align 1
  store double %4050, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 32) to double*)
  %4051 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4052 = bitcast %union.vec128_t* %XMM0 to i8*
  %4053 = load i64, i64* %PC
  %4054 = add i64 %4053, 3
  store i64 %4054, i64* %PC
  %4055 = bitcast i8* %4052 to <2 x i32>*
  %4056 = load <2 x i32>, <2 x i32>* %4055, align 1
  %4057 = getelementptr inbounds i8, i8* %4052, i64 8
  %4058 = bitcast i8* %4057 to <2 x i32>*
  %4059 = load <2 x i32>, <2 x i32>* %4058, align 1
  %4060 = extractelement <2 x i32> %4056, i32 0
  %4061 = bitcast i8* %4051 to i32*
  store i32 %4060, i32* %4061, align 1, !tbaa !2455
  %4062 = extractelement <2 x i32> %4056, i32 1
  %4063 = getelementptr inbounds i8, i8* %4051, i64 4
  %4064 = bitcast i8* %4063 to i32*
  store i32 %4062, i32* %4064, align 1, !tbaa !2455
  %4065 = extractelement <2 x i32> %4059, i32 0
  %4066 = getelementptr inbounds i8, i8* %4051, i64 8
  %4067 = bitcast i8* %4066 to i32*
  store i32 %4065, i32* %4067, align 1, !tbaa !2455
  %4068 = extractelement <2 x i32> %4059, i32 1
  %4069 = getelementptr inbounds i8, i8* %4051, i64 12
  %4070 = bitcast i8* %4069 to i32*
  store i32 %4068, i32* %4070, align 1, !tbaa !2455
  %4071 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4072 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4073 = load i64, i64* %PC
  %4074 = add i64 %4073, 9
  store i64 %4074, i64* %PC
  %4075 = bitcast i8* %4072 to double*
  %4076 = load double, double* %4075, align 1
  %4077 = getelementptr inbounds i8, i8* %4072, i64 8
  %4078 = bitcast i8* %4077 to i64*
  %4079 = load i64, i64* %4078, align 1
  %4080 = load double, double* bitcast (%sc_type* @sc to double*)
  %4081 = fmul double %4076, %4080
  %4082 = bitcast i8* %4071 to double*
  store double %4081, double* %4082, align 1, !tbaa !2452
  %4083 = getelementptr inbounds i8, i8* %4071, i64 8
  %4084 = bitcast i8* %4083 to i64*
  store i64 %4079, i64* %4084, align 1, !tbaa !2452
  %4085 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4086 = bitcast %union.vec128_t* %XMM0 to i8*
  %4087 = load i64, i64* %PC
  %4088 = add i64 %4087, 3
  store i64 %4088, i64* %PC
  %4089 = bitcast i8* %4086 to <2 x i32>*
  %4090 = load <2 x i32>, <2 x i32>* %4089, align 1
  %4091 = getelementptr inbounds i8, i8* %4086, i64 8
  %4092 = bitcast i8* %4091 to <2 x i32>*
  %4093 = load <2 x i32>, <2 x i32>* %4092, align 1
  %4094 = extractelement <2 x i32> %4090, i32 0
  %4095 = bitcast i8* %4085 to i32*
  store i32 %4094, i32* %4095, align 1, !tbaa !2455
  %4096 = extractelement <2 x i32> %4090, i32 1
  %4097 = getelementptr inbounds i8, i8* %4085, i64 4
  %4098 = bitcast i8* %4097 to i32*
  store i32 %4096, i32* %4098, align 1, !tbaa !2455
  %4099 = extractelement <2 x i32> %4093, i32 0
  %4100 = getelementptr inbounds i8, i8* %4085, i64 8
  %4101 = bitcast i8* %4100 to i32*
  store i32 %4099, i32* %4101, align 1, !tbaa !2455
  %4102 = extractelement <2 x i32> %4093, i32 1
  %4103 = getelementptr inbounds i8, i8* %4085, i64 12
  %4104 = bitcast i8* %4103 to i32*
  store i32 %4102, i32* %4104, align 1, !tbaa !2455
  %4105 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4106 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4107 = load i64, i64* %PC
  %4108 = add i64 %4107, 9
  store i64 %4108, i64* %PC
  %4109 = bitcast i8* %4106 to double*
  %4110 = load double, double* %4109, align 1
  %4111 = getelementptr inbounds i8, i8* %4106, i64 8
  %4112 = bitcast i8* %4111 to i64*
  %4113 = load i64, i64* %4112, align 1
  %4114 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 16) to double*)
  %4115 = fmul double %4110, %4114
  %4116 = bitcast i8* %4105 to double*
  store double %4115, double* %4116, align 1, !tbaa !2452
  %4117 = getelementptr inbounds i8, i8* %4105, i64 8
  %4118 = bitcast i8* %4117 to i64*
  store i64 %4113, i64* %4118, align 1, !tbaa !2452
  %4119 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4120 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4121 = load i64, i64* %PC
  %4122 = add i64 %4121, 9
  store i64 %4122, i64* %PC
  %4123 = bitcast i8* %4120 to double*
  %4124 = load double, double* %4123, align 1
  %4125 = getelementptr inbounds i8, i8* %4120, i64 8
  %4126 = bitcast i8* %4125 to i64*
  %4127 = load i64, i64* %4126, align 1
  %4128 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 32) to double*)
  %4129 = fmul double %4124, %4128
  %4130 = bitcast i8* %4119 to double*
  store double %4129, double* %4130, align 1, !tbaa !2452
  %4131 = getelementptr inbounds i8, i8* %4119, i64 8
  %4132 = bitcast i8* %4131 to i64*
  store i64 %4127, i64* %4132, align 1, !tbaa !2452
  %4133 = load i64, i64* %RBP
  %4134 = sub i64 %4133, 136
  %4135 = bitcast %union.vec128_t* %XMM0 to i8*
  %4136 = load i64, i64* %PC
  %4137 = add i64 %4136, 8
  store i64 %4137, i64* %PC
  %4138 = bitcast i8* %4135 to double*
  %4139 = load double, double* %4138, align 1
  %4140 = inttoptr i64 %4134 to double*
  store double %4139, double* %4140
  %4141 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4142 = bitcast %union.vec128_t* %XMM1 to i8*
  %4143 = load i64, i64* %PC
  %4144 = add i64 %4143, 3
  store i64 %4144, i64* %PC
  %4145 = bitcast i8* %4142 to <2 x i32>*
  %4146 = load <2 x i32>, <2 x i32>* %4145, align 1
  %4147 = getelementptr inbounds i8, i8* %4142, i64 8
  %4148 = bitcast i8* %4147 to <2 x i32>*
  %4149 = load <2 x i32>, <2 x i32>* %4148, align 1
  %4150 = extractelement <2 x i32> %4146, i32 0
  %4151 = bitcast i8* %4141 to i32*
  store i32 %4150, i32* %4151, align 1, !tbaa !2455
  %4152 = extractelement <2 x i32> %4146, i32 1
  %4153 = getelementptr inbounds i8, i8* %4141, i64 4
  %4154 = bitcast i8* %4153 to i32*
  store i32 %4152, i32* %4154, align 1, !tbaa !2455
  %4155 = extractelement <2 x i32> %4149, i32 0
  %4156 = getelementptr inbounds i8, i8* %4141, i64 8
  %4157 = bitcast i8* %4156 to i32*
  store i32 %4155, i32* %4157, align 1, !tbaa !2455
  %4158 = extractelement <2 x i32> %4149, i32 1
  %4159 = getelementptr inbounds i8, i8* %4141, i64 12
  %4160 = bitcast i8* %4159 to i32*
  store i32 %4158, i32* %4160, align 1, !tbaa !2455
  %4161 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4162 = bitcast %union.vec128_t* %XMM2 to i8*
  %4163 = load i64, i64* %PC
  %4164 = add i64 %4163, 3
  store i64 %4164, i64* %PC
  %4165 = bitcast i8* %4162 to <2 x i32>*
  %4166 = load <2 x i32>, <2 x i32>* %4165, align 1
  %4167 = getelementptr inbounds i8, i8* %4162, i64 8
  %4168 = bitcast i8* %4167 to <2 x i32>*
  %4169 = load <2 x i32>, <2 x i32>* %4168, align 1
  %4170 = extractelement <2 x i32> %4166, i32 0
  %4171 = bitcast i8* %4161 to i32*
  store i32 %4170, i32* %4171, align 1, !tbaa !2455
  %4172 = extractelement <2 x i32> %4166, i32 1
  %4173 = getelementptr inbounds i8, i8* %4161, i64 4
  %4174 = bitcast i8* %4173 to i32*
  store i32 %4172, i32* %4174, align 1, !tbaa !2455
  %4175 = extractelement <2 x i32> %4169, i32 0
  %4176 = getelementptr inbounds i8, i8* %4161, i64 8
  %4177 = bitcast i8* %4176 to i32*
  store i32 %4175, i32* %4177, align 1, !tbaa !2455
  %4178 = extractelement <2 x i32> %4169, i32 1
  %4179 = getelementptr inbounds i8, i8* %4161, i64 12
  %4180 = bitcast i8* %4179 to i32*
  store i32 %4178, i32* %4180, align 1, !tbaa !2455
  %4181 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4182 = load i64, i64* %RBP
  %4183 = sub i64 %4182, 136
  %4184 = load i64, i64* %PC
  %4185 = add i64 %4184, 8
  store i64 %4185, i64* %PC
  %4186 = inttoptr i64 %4183 to double*
  %4187 = load double, double* %4186
  %4188 = bitcast i8* %4181 to double*
  store double %4187, double* %4188, align 1, !tbaa !2452
  %4189 = getelementptr inbounds i8, i8* %4181, i64 8
  %4190 = bitcast i8* %4189 to double*
  store double 0.000000e+00, double* %4190, align 1, !tbaa !2452
  %4191 = load i64, i64* %PC
  %4192 = add i64 %4191, 2
  store i64 %4192, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %4193 = load i64, i64* %PC
  %4194 = sub i64 %4193, 1578
  %4195 = load i64, i64* %PC
  %4196 = add i64 %4195, 5
  %4197 = load i64, i64* %PC
  %4198 = add i64 %4197, 5
  store i64 %4198, i64* %PC
  %4199 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4200 = load i64, i64* %4199, align 8, !tbaa !2428
  %4201 = add i64 %4200, -8
  %4202 = inttoptr i64 %4201 to i64*
  store i64 %4196, i64* %4202
  store i64 %4201, i64* %4199, align 8, !tbaa !2428
  %4203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4194, i64* %4203, align 8, !tbaa !2428
  %4204 = load i64, i64* %PC
  %4205 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %4204, %struct.Memory* %MEMORY.3)
  %4206 = load i64, i64* %PC
  %4207 = add i64 %4206, 10
  store i64 %4207, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %4208 = load i64, i64* %PC
  %4209 = add i64 %4208, 10
  store i64 %4209, i64* %PC
  store i64 -9223372036854775808, i64* %RCX, align 8, !tbaa !2428
  %4210 = load i64, i64* %RBP
  %4211 = sub i64 %4210, 88
  %4212 = load i64, i64* %PC
  %4213 = add i64 %4212, 4
  store i64 %4213, i64* %PC
  %4214 = inttoptr i64 %4211 to i64*
  %4215 = load i64, i64* %4214
  store i64 %4215, i64* %RDX, align 8, !tbaa !2428
  %4216 = load i64, i64* %RBP
  %4217 = sub i64 %4216, 80
  %4218 = load i64, i64* %RDX
  %4219 = load i64, i64* %PC
  %4220 = add i64 %4219, 4
  store i64 %4220, i64* %PC
  %4221 = inttoptr i64 %4217 to i64*
  store i64 %4218, i64* %4221
  %4222 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4223 = load i64, i64* %PC
  %4224 = add i64 %4223, 9
  store i64 %4224, i64* %PC
  %4225 = load double, double* bitcast (%five_type* @five to double*)
  %4226 = bitcast i8* %4222 to double*
  store double %4225, double* %4226, align 1, !tbaa !2452
  %4227 = getelementptr inbounds i8, i8* %4222, i64 8
  %4228 = bitcast i8* %4227 to double*
  store double 0.000000e+00, double* %4228, align 1, !tbaa !2452
  %4229 = bitcast %union.vec128_t* %XMM0 to i8*
  %4230 = load i64, i64* %PC
  %4231 = add i64 %4230, 5
  store i64 %4231, i64* %PC
  %4232 = bitcast i8* %4229 to i64*
  %4233 = load i64, i64* %4232, align 1
  store i64 %4233, i64* %RDX, align 1, !tbaa !2428
  %4234 = load i64, i64* %RDX
  %4235 = load i64, i64* %RCX
  %4236 = load i64, i64* %PC
  %4237 = add i64 %4236, 3
  store i64 %4237, i64* %PC
  %4238 = xor i64 %4235, %4234
  store i64 %4238, i64* %RDX, align 8, !tbaa !2428
  %4239 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4239, align 1, !tbaa !2432
  %4240 = trunc i64 %4238 to i32
  %4241 = and i32 %4240, 255
  %4242 = call i32 @llvm.ctpop.i32(i32 %4241) #16
  %4243 = trunc i32 %4242 to i8
  %4244 = and i8 %4243, 1
  %4245 = xor i8 %4244, 1
  %4246 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4245, i8* %4246, align 1, !tbaa !2446
  %4247 = icmp eq i64 %4238, 0
  %4248 = zext i1 %4247 to i8
  %4249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4248, i8* %4249, align 1, !tbaa !2447
  %4250 = lshr i64 %4238, 63
  %4251 = trunc i64 %4250 to i8
  %4252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4251, i8* %4252, align 1, !tbaa !2448
  %4253 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4253, align 1, !tbaa !2449
  %4254 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4254, align 1, !tbaa !2450
  %4255 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4256 = load i64, i64* %RDX
  %4257 = load i64, i64* %PC
  %4258 = add i64 %4257, 5
  store i64 %4258, i64* %PC
  %4259 = bitcast i8* %4255 to i64*
  store i64 %4256, i64* %4259, align 1, !tbaa !2428
  %4260 = getelementptr inbounds i8, i8* %4255, i64 8
  %4261 = bitcast i8* %4260 to i64*
  store i64 0, i64* %4261, align 1, !tbaa !2428
  %4262 = load i64, i64* %RBP
  %4263 = sub i64 %4262, 16
  %4264 = bitcast %union.vec128_t* %XMM0 to i8*
  %4265 = load i64, i64* %PC
  %4266 = add i64 %4265, 5
  store i64 %4266, i64* %PC
  %4267 = bitcast i8* %4264 to double*
  %4268 = load double, double* %4267, align 1
  %4269 = inttoptr i64 %4263 to double*
  store double %4268, double* %4269
  %4270 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4271 = load i64, i64* %PC
  %4272 = add i64 %4271, 9
  store i64 %4272, i64* %PC
  %4273 = load double, double* bitcast (%one_type* @one to double*)
  %4274 = bitcast i8* %4270 to double*
  store double %4273, double* %4274, align 1, !tbaa !2452
  %4275 = getelementptr inbounds i8, i8* %4270, i64 8
  %4276 = bitcast i8* %4275 to double*
  store double 0.000000e+00, double* %4276, align 1, !tbaa !2452
  %4277 = bitcast %union.vec128_t* %XMM0 to i8*
  %4278 = load i64, i64* %PC
  %4279 = add i64 %4278, 5
  store i64 %4279, i64* %PC
  %4280 = bitcast i8* %4277 to i64*
  %4281 = load i64, i64* %4280, align 1
  store i64 %4281, i64* %RDX, align 1, !tbaa !2428
  %4282 = load i64, i64* %RDX
  %4283 = load i64, i64* %RCX
  %4284 = load i64, i64* %PC
  %4285 = add i64 %4284, 3
  store i64 %4285, i64* %PC
  %4286 = xor i64 %4283, %4282
  store i64 %4286, i64* %RDX, align 8, !tbaa !2428
  %4287 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %4287, align 1, !tbaa !2432
  %4288 = trunc i64 %4286 to i32
  %4289 = and i32 %4288, 255
  %4290 = call i32 @llvm.ctpop.i32(i32 %4289) #16
  %4291 = trunc i32 %4290 to i8
  %4292 = and i8 %4291, 1
  %4293 = xor i8 %4292, 1
  %4294 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4293, i8* %4294, align 1, !tbaa !2446
  %4295 = icmp eq i64 %4286, 0
  %4296 = zext i1 %4295 to i8
  %4297 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4296, i8* %4297, align 1, !tbaa !2447
  %4298 = lshr i64 %4286, 63
  %4299 = trunc i64 %4298 to i8
  %4300 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %4299, i8* %4300, align 1, !tbaa !2448
  %4301 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4301, align 1, !tbaa !2449
  %4302 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4302, align 1, !tbaa !2450
  %4303 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4304 = load i64, i64* %RDX
  %4305 = load i64, i64* %PC
  %4306 = add i64 %4305, 5
  store i64 %4306, i64* %PC
  %4307 = bitcast i8* %4303 to i64*
  store i64 %4304, i64* %4307, align 1, !tbaa !2428
  %4308 = getelementptr inbounds i8, i8* %4303, i64 8
  %4309 = bitcast i8* %4308 to i64*
  store i64 0, i64* %4309, align 1, !tbaa !2428
  %4310 = bitcast %union.vec128_t* %XMM0 to i8*
  %4311 = load i64, i64* %PC
  %4312 = add i64 %4311, 9
  store i64 %4312, i64* %PC
  %4313 = bitcast i8* %4310 to double*
  %4314 = load double, double* %4313, align 1
  store double %4314, double* bitcast (%sa_type* @sa to double*)
  %4315 = load i64, i64* %RBP
  %4316 = sub i64 %4315, 140
  %4317 = load i32, i32* %EAX
  %4318 = zext i32 %4317 to i64
  %4319 = load i64, i64* %PC
  %4320 = add i64 %4319, 6
  store i64 %4320, i64* %PC
  %4321 = inttoptr i64 %4316 to i32*
  store i32 %4317, i32* %4321
  %4322 = load i64, i64* %PC
  %4323 = add i64 %4322, 6917
  %4324 = load i64, i64* %PC
  %4325 = add i64 %4324, 5
  %4326 = load i64, i64* %PC
  %4327 = add i64 %4326, 5
  store i64 %4327, i64* %PC
  %4328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4329 = load i64, i64* %4328, align 8, !tbaa !2428
  %4330 = add i64 %4329, -8
  %4331 = inttoptr i64 %4330 to i64*
  store i64 %4325, i64* %4331
  store i64 %4330, i64* %4328, align 8, !tbaa !2428
  %4332 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4323, i64* %4332, align 8, !tbaa !2428
  %4333 = load i64, i64* %PC
  %4334 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %4333, %struct.Memory* %4205)
  %4335 = load i64, i64* %RBP
  %4336 = sub i64 %4335, 72
  %4337 = load i64, i64* %PC
  %4338 = add i64 %4337, 8
  store i64 %4338, i64* %PC
  %4339 = inttoptr i64 %4336 to i64*
  store i64 1, i64* %4339
  %4340 = load i64, i64* %RBP
  %4341 = sub i64 %4340, 144
  %4342 = load i32, i32* %EAX
  %4343 = zext i32 %4342 to i64
  %4344 = load i64, i64* %PC
  %4345 = add i64 %4344, 6
  store i64 %4345, i64* %PC
  %4346 = inttoptr i64 %4341 to i32*
  store i32 %4342, i32* %4346
  br label %block_400ade

block_400b35:                                     ; preds = %block_400ade
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %4347 = load i64, i64* %PC
  %4348 = add i64 %4347, 6801
  %4349 = load i64, i64* %PC
  %4350 = add i64 %4349, 5
  %4351 = load i64, i64* %PC
  %4352 = add i64 %4351, 5
  store i64 %4352, i64* %PC
  %4353 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4354 = load i64, i64* %4353, align 8, !tbaa !2428
  %4355 = add i64 %4354, -8
  %4356 = inttoptr i64 %4355 to i64*
  store i64 %4350, i64* %4356
  store i64 %4355, i64* %4353, align 8, !tbaa !2428
  %4357 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4348, i64* %4357, align 8, !tbaa !2428
  %4358 = load i64, i64* %PC
  %4359 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %4358, %struct.Memory* %MEMORY.4)
  %4360 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4361 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4362 = bitcast %union.vec128_t* %XMM0 to i8*
  %4363 = load i64, i64* %PC
  %4364 = add i64 %4363, 3
  store i64 %4364, i64* %PC
  %4365 = bitcast i8* %4361 to i64*
  %4366 = load i64, i64* %4365, align 1
  %4367 = getelementptr inbounds i8, i8* %4361, i64 8
  %4368 = bitcast i8* %4367 to i64*
  %4369 = load i64, i64* %4368, align 1
  %4370 = bitcast i8* %4362 to i64*
  %4371 = load i64, i64* %4370, align 1
  %4372 = getelementptr inbounds i8, i8* %4362, i64 8
  %4373 = bitcast i8* %4372 to i64*
  %4374 = load i64, i64* %4373, align 1
  %4375 = xor i64 %4371, %4366
  %4376 = xor i64 %4374, %4369
  %4377 = trunc i64 %4375 to i32
  %4378 = lshr i64 %4375, 32
  %4379 = trunc i64 %4378 to i32
  %4380 = bitcast i8* %4360 to i32*
  store i32 %4377, i32* %4380, align 1, !tbaa !2454
  %4381 = getelementptr inbounds i8, i8* %4360, i64 4
  %4382 = bitcast i8* %4381 to i32*
  store i32 %4379, i32* %4382, align 1, !tbaa !2454
  %4383 = trunc i64 %4376 to i32
  %4384 = getelementptr inbounds i8, i8* %4360, i64 8
  %4385 = bitcast i8* %4384 to i32*
  store i32 %4383, i32* %4385, align 1, !tbaa !2454
  %4386 = lshr i64 %4376, 32
  %4387 = trunc i64 %4386 to i32
  %4388 = getelementptr inbounds i8, i8* %4360, i64 12
  %4389 = bitcast i8* %4388 to i32*
  store i32 %4387, i32* %4389, align 1, !tbaa !2454
  %4390 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4391 = load i64, i64* %PC
  %4392 = add i64 %4391, 9
  store i64 %4392, i64* %PC
  %4393 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %4394 = bitcast i8* %4390 to double*
  store double %4393, double* %4394, align 1, !tbaa !2452
  %4395 = getelementptr inbounds i8, i8* %4390, i64 8
  %4396 = bitcast i8* %4395 to double*
  store double 0.000000e+00, double* %4396, align 1, !tbaa !2452
  %4397 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4398 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4399 = load i64, i64* %PC
  %4400 = add i64 %4399, 9
  store i64 %4400, i64* %PC
  %4401 = bitcast i8* %4398 to double*
  %4402 = load double, double* %4401, align 1
  %4403 = getelementptr inbounds i8, i8* %4398, i64 8
  %4404 = bitcast i8* %4403 to i64*
  %4405 = load i64, i64* %4404, align 1
  %4406 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %4407 = fmul double %4402, %4406
  %4408 = bitcast i8* %4397 to double*
  store double %4407, double* %4408, align 1, !tbaa !2452
  %4409 = getelementptr inbounds i8, i8* %4397, i64 8
  %4410 = bitcast i8* %4409 to i64*
  store i64 %4405, i64* %4410, align 1, !tbaa !2452
  %4411 = bitcast %union.vec128_t* %XMM1 to i8*
  %4412 = load i64, i64* %PC
  %4413 = add i64 %4412, 9
  store i64 %4413, i64* %PC
  %4414 = bitcast i8* %4411 to double*
  %4415 = load double, double* %4414, align 1
  store double %4415, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  %4416 = bitcast %union.vec128_t* %XMM0 to i8*
  %4417 = load i64, i64* %PC
  %4418 = add i64 %4417, 9
  store i64 %4418, i64* %PC
  %4419 = bitcast i8* %4416 to double*
  %4420 = load double, double* %4419, align 1
  %4421 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  %4422 = fcmp uno double %4420, %4421
  br i1 %4422, label %4423, label %4435

; <label>:4423:                                   ; preds = %block_400b35
  %4424 = fadd double %4420, %4421
  %4425 = bitcast double %4424 to i64
  %4426 = and i64 %4425, 9221120237041090560
  %4427 = icmp eq i64 %4426, 9218868437227405312
  %4428 = and i64 %4425, 2251799813685247
  %4429 = icmp ne i64 %4428, 0
  %4430 = and i1 %4427, %4429
  br i1 %4430, label %4431, label %4441

; <label>:4431:                                   ; preds = %4423
  %4432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4433 = load i64, i64* %4432, align 8, !tbaa !2428
  %4434 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %4433, %struct.Memory* %4359) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1

; <label>:4435:                                   ; preds = %block_400b35
  %4436 = fcmp ogt double %4420, %4421
  br i1 %4436, label %4441, label %4437

; <label>:4437:                                   ; preds = %4435
  %4438 = fcmp olt double %4420, %4421
  br i1 %4438, label %4441, label %4439

; <label>:4439:                                   ; preds = %4437
  %4440 = fcmp oeq double %4420, %4421
  br i1 %4440, label %4441, label %4448

; <label>:4441:                                   ; preds = %4439, %4437, %4435, %4423
  %4442 = phi i8 [ 0, %4435 ], [ 0, %4437 ], [ 1, %4439 ], [ 1, %4423 ]
  %4443 = phi i8 [ 0, %4435 ], [ 0, %4437 ], [ 0, %4439 ], [ 1, %4423 ]
  %4444 = phi i8 [ 0, %4435 ], [ 1, %4437 ], [ 0, %4439 ], [ 1, %4423 ]
  %4445 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %4442, i8* %4445, align 1, !tbaa !2451
  %4446 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %4443, i8* %4446, align 1, !tbaa !2451
  %4447 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %4444, i8* %4447, align 1, !tbaa !2451
  br label %4448

; <label>:4448:                                   ; preds = %4441, %4439
  %4449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %4449, align 1, !tbaa !2451
  %4450 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %4450, align 1, !tbaa !2451
  %4451 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %4451, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1: ; preds = %4431, %4448
  %4452 = phi %struct.Memory* [ %4434, %4431 ], [ %4359, %4448 ]
  %4453 = load i64, i64* %RBP
  %4454 = sub i64 %4453, 148
  %4455 = load i32, i32* %EAX
  %4456 = zext i32 %4455 to i64
  %4457 = load i64, i64* %PC
  %4458 = add i64 %4457, 6
  store i64 %4458, i64* %PC
  %4459 = inttoptr i64 %4454 to i32*
  store i32 %4455, i32* %4459
  %4460 = load i64, i64* %PC
  %4461 = add i64 %4460, 18
  %4462 = load i64, i64* %PC
  %4463 = add i64 %4462, 6
  %4464 = load i64, i64* %PC
  %4465 = add i64 %4464, 6
  store i64 %4465, i64* %PC
  %4466 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %4467 = load i8, i8* %4466, align 1, !tbaa !2432
  %4468 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %4469 = load i8, i8* %4468, align 1, !tbaa !2447
  %4470 = or i8 %4469, %4467
  %4471 = icmp ne i8 %4470, 0
  %4472 = zext i1 %4471 to i8
  store i8 %4472, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %4473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %4474 = select i1 %4471, i64 %4461, i64 %4463
  store i64 %4474, i64* %4473, align 8, !tbaa !2428
  %4475 = load i8, i8* %BRANCH_TAKEN
  %4476 = icmp eq i8 %4475, 1
  br i1 %4476, label %block_400b83, label %block_400b77

block_401249:                                     ; preds = %block_401185
  %4477 = load i64, i64* %PC
  %4478 = add i64 %4477, 10
  store i64 %4478, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %4479 = load i64, i64* %PC
  %4480 = add i64 %4479, 4989
  %4481 = load i64, i64* %PC
  %4482 = add i64 %4481, 5
  %4483 = load i64, i64* %PC
  %4484 = add i64 %4483, 5
  store i64 %4484, i64* %PC
  %4485 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %4486 = load i64, i64* %4485, align 8, !tbaa !2428
  %4487 = add i64 %4486, -8
  %4488 = inttoptr i64 %4487 to i64*
  store i64 %4482, i64* %4488
  store i64 %4487, i64* %4485, align 8, !tbaa !2428
  %4489 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %4480, i64* %4489, align 8, !tbaa !2428
  %4490 = load i64, i64* %PC
  %4491 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %4490, %struct.Memory* %MEMORY.11)
  %4492 = load i64, i64* %PC
  %4493 = add i64 %4492, 10
  store i64 %4493, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 498), i64* %RDI, align 8, !tbaa !2428
  %4494 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %4495 = load i64, i64* %PC
  %4496 = add i64 %4495, 8
  store i64 %4496, i64* %PC
  %4497 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 72) to double*)
  %4498 = bitcast i8* %4494 to double*
  store double %4497, double* %4498, align 1, !tbaa !2452
  %4499 = getelementptr inbounds i8, i8* %4494, i64 8
  %4500 = bitcast i8* %4499 to double*
  store double 0.000000e+00, double* %4500, align 1, !tbaa !2452
  %4501 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4502 = load i64, i64* %PC
  %4503 = add i64 %4502, 8
  store i64 %4503, i64* %PC
  %4504 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 128) to double*)
  %4505 = bitcast i8* %4501 to double*
  store double %4504, double* %4505, align 1, !tbaa !2452
  %4506 = getelementptr inbounds i8, i8* %4501, i64 8
  %4507 = bitcast i8* %4506 to double*
  store double 0.000000e+00, double* %4507, align 1, !tbaa !2452
  %4508 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4509 = load i64, i64* %PC
  %4510 = add i64 %4509, 9
  store i64 %4510, i64* %PC
  %4511 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %4512 = bitcast i8* %4508 to double*
  store double %4511, double* %4512, align 1, !tbaa !2452
  %4513 = getelementptr inbounds i8, i8* %4508, i64 8
  %4514 = bitcast i8* %4513 to double*
  store double 0.000000e+00, double* %4514, align 1, !tbaa !2452
  %4515 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4516 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4517 = load i64, i64* %PC
  %4518 = add i64 %4517, 9
  store i64 %4518, i64* %PC
  %4519 = bitcast i8* %4516 to double*
  %4520 = load double, double* %4519, align 1
  %4521 = getelementptr inbounds i8, i8* %4516, i64 8
  %4522 = bitcast i8* %4521 to i64*
  %4523 = load i64, i64* %4522, align 1
  %4524 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %4525 = fmul double %4520, %4524
  %4526 = bitcast i8* %4515 to double*
  store double %4525, double* %4526, align 1, !tbaa !2452
  %4527 = getelementptr inbounds i8, i8* %4515, i64 8
  %4528 = bitcast i8* %4527 to i64*
  store i64 %4523, i64* %4528, align 1, !tbaa !2452
  %4529 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4530 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4531 = load i64, i64* %PC
  %4532 = add i64 %4531, 9
  store i64 %4532, i64* %PC
  %4533 = bitcast i8* %4530 to double*
  %4534 = load double, double* %4533, align 1
  %4535 = getelementptr inbounds i8, i8* %4530, i64 8
  %4536 = bitcast i8* %4535 to i64*
  %4537 = load i64, i64* %4536, align 1
  %4538 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %4539 = fsub double %4534, %4538
  %4540 = bitcast i8* %4529 to double*
  store double %4539, double* %4540, align 1, !tbaa !2452
  %4541 = getelementptr inbounds i8, i8* %4529, i64 8
  %4542 = bitcast i8* %4541 to i64*
  store i64 %4537, i64* %4542, align 1, !tbaa !2452
  %4543 = bitcast %union.vec128_t* %XMM2 to i8*
  %4544 = load i64, i64* %PC
  %4545 = add i64 %4544, 9
  store i64 %4545, i64* %PC
  %4546 = bitcast i8* %4543 to double*
  %4547 = load double, double* %4546, align 1
  store double %4547, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %4548 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4549 = load i64, i64* %PC
  %4550 = add i64 %4549, 9
  store i64 %4550, i64* %PC
  %4551 = load double, double* bitcast (%piref_type* @piref to double*)
  %4552 = bitcast i8* %4548 to double*
  store double %4551, double* %4552, align 1, !tbaa !2452
  %4553 = getelementptr inbounds i8, i8* %4548, i64 8
  %4554 = bitcast i8* %4553 to double*
  store double 0.000000e+00, double* %4554, align 1, !tbaa !2452
  %4555 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4556 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4557 = load i64, i64* %PC
  %4558 = add i64 %4557, 9
  store i64 %4558, i64* %PC
  %4559 = bitcast i8* %4556 to double*
  %4560 = load double, double* %4559, align 1
  %4561 = getelementptr inbounds i8, i8* %4556, i64 8
  %4562 = bitcast i8* %4561 to i64*
  %4563 = load i64, i64* %4562, align 1
  %4564 = load double, double* bitcast (%three_type* @three to double*)
  %4565 = fdiv double %4560, %4564
  %4566 = bitcast i8* %4555 to double*
  store double %4565, double* %4566, align 1, !tbaa !2452
  %4567 = getelementptr inbounds i8, i8* %4555, i64 8
  %4568 = bitcast i8* %4567 to i64*
  store i64 %4563, i64* %4568, align 1, !tbaa !2452
  %4569 = load i64, i64* %RBP
  %4570 = sub i64 %4569, 24
  %4571 = bitcast %union.vec128_t* %XMM2 to i8*
  %4572 = load i64, i64* %PC
  %4573 = add i64 %4572, 5
  store i64 %4573, i64* %PC
  %4574 = bitcast i8* %4571 to double*
  %4575 = load double, double* %4574, align 1
  %4576 = inttoptr i64 %4570 to double*
  store double %4575, double* %4576
  %4577 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4578 = load i64, i64* %RBP
  %4579 = sub i64 %4578, 24
  %4580 = load i64, i64* %PC
  %4581 = add i64 %4580, 5
  store i64 %4581, i64* %PC
  %4582 = inttoptr i64 %4579 to double*
  %4583 = load double, double* %4582
  %4584 = bitcast i8* %4577 to double*
  store double %4583, double* %4584, align 1, !tbaa !2452
  %4585 = getelementptr inbounds i8, i8* %4577, i64 8
  %4586 = bitcast i8* %4585 to double*
  store double 0.000000e+00, double* %4586, align 1, !tbaa !2452
  %4587 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4588 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4589 = load i64, i64* %RBP
  %4590 = sub i64 %4589, 24
  %4591 = load i64, i64* %PC
  %4592 = add i64 %4591, 5
  store i64 %4592, i64* %PC
  %4593 = bitcast i8* %4588 to double*
  %4594 = load double, double* %4593, align 1
  %4595 = getelementptr inbounds i8, i8* %4588, i64 8
  %4596 = bitcast i8* %4595 to i64*
  %4597 = load i64, i64* %4596, align 1
  %4598 = inttoptr i64 %4590 to double*
  %4599 = load double, double* %4598
  %4600 = fmul double %4594, %4599
  %4601 = bitcast i8* %4587 to double*
  store double %4600, double* %4601, align 1, !tbaa !2452
  %4602 = getelementptr inbounds i8, i8* %4587, i64 8
  %4603 = bitcast i8* %4602 to i64*
  store i64 %4597, i64* %4603, align 1, !tbaa !2452
  %4604 = load i64, i64* %RBP
  %4605 = sub i64 %4604, 40
  %4606 = bitcast %union.vec128_t* %XMM2 to i8*
  %4607 = load i64, i64* %PC
  %4608 = add i64 %4607, 5
  store i64 %4608, i64* %PC
  %4609 = bitcast i8* %4606 to double*
  %4610 = load double, double* %4609, align 1
  %4611 = inttoptr i64 %4605 to double*
  store double %4610, double* %4611
  %4612 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4613 = load i64, i64* %RBP
  %4614 = sub i64 %4613, 40
  %4615 = load i64, i64* %PC
  %4616 = add i64 %4615, 5
  store i64 %4616, i64* %PC
  %4617 = inttoptr i64 %4614 to double*
  %4618 = load double, double* %4617
  %4619 = bitcast i8* %4612 to double*
  store double %4618, double* %4619, align 1, !tbaa !2452
  %4620 = getelementptr inbounds i8, i8* %4612, i64 8
  %4621 = bitcast i8* %4620 to double*
  store double 0.000000e+00, double* %4621, align 1, !tbaa !2452
  %4622 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4623 = load i64, i64* %RBP
  %4624 = sub i64 %4623, 40
  %4625 = load i64, i64* %PC
  %4626 = add i64 %4625, 5
  store i64 %4626, i64* %PC
  %4627 = inttoptr i64 %4624 to double*
  %4628 = load double, double* %4627
  %4629 = bitcast i8* %4622 to double*
  store double %4628, double* %4629, align 1, !tbaa !2452
  %4630 = getelementptr inbounds i8, i8* %4622, i64 8
  %4631 = bitcast i8* %4630 to double*
  store double 0.000000e+00, double* %4631, align 1, !tbaa !2452
  %4632 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4633 = load i64, i64* %RBP
  %4634 = sub i64 %4633, 40
  %4635 = load i64, i64* %PC
  %4636 = add i64 %4635, 5
  store i64 %4636, i64* %PC
  %4637 = inttoptr i64 %4634 to double*
  %4638 = load double, double* %4637
  %4639 = bitcast i8* %4632 to double*
  store double %4638, double* %4639, align 1, !tbaa !2452
  %4640 = getelementptr inbounds i8, i8* %4632, i64 8
  %4641 = bitcast i8* %4640 to double*
  store double 0.000000e+00, double* %4641, align 1, !tbaa !2452
  %4642 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %4643 = load i64, i64* %RBP
  %4644 = sub i64 %4643, 40
  %4645 = load i64, i64* %PC
  %4646 = add i64 %4645, 5
  store i64 %4646, i64* %PC
  %4647 = inttoptr i64 %4644 to double*
  %4648 = load double, double* %4647
  %4649 = bitcast i8* %4642 to double*
  store double %4648, double* %4649, align 1, !tbaa !2452
  %4650 = getelementptr inbounds i8, i8* %4642, i64 8
  %4651 = bitcast i8* %4650 to double*
  store double 0.000000e+00, double* %4651, align 1, !tbaa !2452
  %4652 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %4653 = load i64, i64* %RBP
  %4654 = sub i64 %4653, 40
  %4655 = load i64, i64* %PC
  %4656 = add i64 %4655, 5
  store i64 %4656, i64* %PC
  %4657 = inttoptr i64 %4654 to double*
  %4658 = load double, double* %4657
  %4659 = bitcast i8* %4652 to double*
  store double %4658, double* %4659, align 1, !tbaa !2452
  %4660 = getelementptr inbounds i8, i8* %4652, i64 8
  %4661 = bitcast i8* %4660 to double*
  store double 0.000000e+00, double* %4661, align 1, !tbaa !2452
  %4662 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %4663 = load i64, i64* %PC
  %4664 = add i64 %4663, 9
  store i64 %4664, i64* %PC
  %4665 = load double, double* bitcast (%B6_type* @B6 to double*)
  %4666 = bitcast i8* %4662 to double*
  store double %4665, double* %4666, align 1, !tbaa !2452
  %4667 = getelementptr inbounds i8, i8* %4662, i64 8
  %4668 = bitcast i8* %4667 to double*
  store double 0.000000e+00, double* %4668, align 1, !tbaa !2452
  %4669 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %4670 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %4671 = load i64, i64* %RBP
  %4672 = sub i64 %4671, 40
  %4673 = load i64, i64* %PC
  %4674 = add i64 %4673, 5
  store i64 %4674, i64* %PC
  %4675 = bitcast i8* %4670 to double*
  %4676 = load double, double* %4675, align 1
  %4677 = getelementptr inbounds i8, i8* %4670, i64 8
  %4678 = bitcast i8* %4677 to i64*
  %4679 = load i64, i64* %4678, align 1
  %4680 = inttoptr i64 %4672 to double*
  %4681 = load double, double* %4680
  %4682 = fmul double %4676, %4681
  %4683 = bitcast i8* %4669 to double*
  store double %4682, double* %4683, align 1, !tbaa !2452
  %4684 = getelementptr inbounds i8, i8* %4669, i64 8
  %4685 = bitcast i8* %4684 to i64*
  store i64 %4679, i64* %4685, align 1, !tbaa !2452
  %4686 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %4687 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %4688 = load i64, i64* %PC
  %4689 = add i64 %4688, 9
  store i64 %4689, i64* %PC
  %4690 = bitcast i8* %4687 to double*
  %4691 = load double, double* %4690, align 1
  %4692 = getelementptr inbounds i8, i8* %4687, i64 8
  %4693 = bitcast i8* %4692 to i64*
  %4694 = load i64, i64* %4693, align 1
  %4695 = load double, double* bitcast (%B5_type* @B5 to double*)
  %4696 = fadd double %4691, %4695
  %4697 = bitcast i8* %4686 to double*
  store double %4696, double* %4697, align 1, !tbaa !2452
  %4698 = getelementptr inbounds i8, i8* %4686, i64 8
  %4699 = bitcast i8* %4698 to i64*
  store i64 %4694, i64* %4699, align 1, !tbaa !2452
  %4700 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %4701 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %4702 = bitcast %union.vec128_t* %XMM7 to i8*
  %4703 = load i64, i64* %PC
  %4704 = add i64 %4703, 4
  store i64 %4704, i64* %PC
  %4705 = bitcast i8* %4701 to double*
  %4706 = load double, double* %4705, align 1
  %4707 = getelementptr inbounds i8, i8* %4701, i64 8
  %4708 = bitcast i8* %4707 to i64*
  %4709 = load i64, i64* %4708, align 1
  %4710 = bitcast i8* %4702 to double*
  %4711 = load double, double* %4710, align 1
  %4712 = fmul double %4706, %4711
  %4713 = bitcast i8* %4700 to double*
  store double %4712, double* %4713, align 1, !tbaa !2452
  %4714 = getelementptr inbounds i8, i8* %4700, i64 8
  %4715 = bitcast i8* %4714 to i64*
  store i64 %4709, i64* %4715, align 1, !tbaa !2452
  %4716 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %4717 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %4718 = load i64, i64* %PC
  %4719 = add i64 %4718, 9
  store i64 %4719, i64* %PC
  %4720 = bitcast i8* %4717 to double*
  %4721 = load double, double* %4720, align 1
  %4722 = getelementptr inbounds i8, i8* %4717, i64 8
  %4723 = bitcast i8* %4722 to i64*
  %4724 = load i64, i64* %4723, align 1
  %4725 = load double, double* bitcast (%B4_type* @B4 to double*)
  %4726 = fadd double %4721, %4725
  %4727 = bitcast i8* %4716 to double*
  store double %4726, double* %4727, align 1, !tbaa !2452
  %4728 = getelementptr inbounds i8, i8* %4716, i64 8
  %4729 = bitcast i8* %4728 to i64*
  store i64 %4724, i64* %4729, align 1, !tbaa !2452
  %4730 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %4731 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %4732 = bitcast %union.vec128_t* %XMM6 to i8*
  %4733 = load i64, i64* %PC
  %4734 = add i64 %4733, 4
  store i64 %4734, i64* %PC
  %4735 = bitcast i8* %4731 to double*
  %4736 = load double, double* %4735, align 1
  %4737 = getelementptr inbounds i8, i8* %4731, i64 8
  %4738 = bitcast i8* %4737 to i64*
  %4739 = load i64, i64* %4738, align 1
  %4740 = bitcast i8* %4732 to double*
  %4741 = load double, double* %4740, align 1
  %4742 = fmul double %4736, %4741
  %4743 = bitcast i8* %4730 to double*
  store double %4742, double* %4743, align 1, !tbaa !2452
  %4744 = getelementptr inbounds i8, i8* %4730, i64 8
  %4745 = bitcast i8* %4744 to i64*
  store i64 %4739, i64* %4745, align 1, !tbaa !2452
  %4746 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %4747 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %4748 = load i64, i64* %PC
  %4749 = add i64 %4748, 9
  store i64 %4749, i64* %PC
  %4750 = bitcast i8* %4747 to double*
  %4751 = load double, double* %4750, align 1
  %4752 = getelementptr inbounds i8, i8* %4747, i64 8
  %4753 = bitcast i8* %4752 to i64*
  %4754 = load i64, i64* %4753, align 1
  %4755 = load double, double* bitcast (%B3_type* @B3 to double*)
  %4756 = fadd double %4751, %4755
  %4757 = bitcast i8* %4746 to double*
  store double %4756, double* %4757, align 1, !tbaa !2452
  %4758 = getelementptr inbounds i8, i8* %4746, i64 8
  %4759 = bitcast i8* %4758 to i64*
  store i64 %4754, i64* %4759, align 1, !tbaa !2452
  %4760 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4761 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4762 = bitcast %union.vec128_t* %XMM5 to i8*
  %4763 = load i64, i64* %PC
  %4764 = add i64 %4763, 4
  store i64 %4764, i64* %PC
  %4765 = bitcast i8* %4761 to double*
  %4766 = load double, double* %4765, align 1
  %4767 = getelementptr inbounds i8, i8* %4761, i64 8
  %4768 = bitcast i8* %4767 to i64*
  %4769 = load i64, i64* %4768, align 1
  %4770 = bitcast i8* %4762 to double*
  %4771 = load double, double* %4770, align 1
  %4772 = fmul double %4766, %4771
  %4773 = bitcast i8* %4760 to double*
  store double %4772, double* %4773, align 1, !tbaa !2452
  %4774 = getelementptr inbounds i8, i8* %4760, i64 8
  %4775 = bitcast i8* %4774 to i64*
  store i64 %4769, i64* %4775, align 1, !tbaa !2452
  %4776 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4777 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %4778 = load i64, i64* %PC
  %4779 = add i64 %4778, 9
  store i64 %4779, i64* %PC
  %4780 = bitcast i8* %4777 to double*
  %4781 = load double, double* %4780, align 1
  %4782 = getelementptr inbounds i8, i8* %4777, i64 8
  %4783 = bitcast i8* %4782 to i64*
  %4784 = load i64, i64* %4783, align 1
  %4785 = load double, double* bitcast (%B2_type* @B2 to double*)
  %4786 = fadd double %4781, %4785
  %4787 = bitcast i8* %4776 to double*
  store double %4786, double* %4787, align 1, !tbaa !2452
  %4788 = getelementptr inbounds i8, i8* %4776, i64 8
  %4789 = bitcast i8* %4788 to i64*
  store i64 %4784, i64* %4789, align 1, !tbaa !2452
  %4790 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4791 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4792 = bitcast %union.vec128_t* %XMM4 to i8*
  %4793 = load i64, i64* %PC
  %4794 = add i64 %4793, 4
  store i64 %4794, i64* %PC
  %4795 = bitcast i8* %4791 to double*
  %4796 = load double, double* %4795, align 1
  %4797 = getelementptr inbounds i8, i8* %4791, i64 8
  %4798 = bitcast i8* %4797 to i64*
  %4799 = load i64, i64* %4798, align 1
  %4800 = bitcast i8* %4792 to double*
  %4801 = load double, double* %4800, align 1
  %4802 = fmul double %4796, %4801
  %4803 = bitcast i8* %4790 to double*
  store double %4802, double* %4803, align 1, !tbaa !2452
  %4804 = getelementptr inbounds i8, i8* %4790, i64 8
  %4805 = bitcast i8* %4804 to i64*
  store i64 %4799, i64* %4805, align 1, !tbaa !2452
  %4806 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4807 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4808 = load i64, i64* %PC
  %4809 = add i64 %4808, 9
  store i64 %4809, i64* %PC
  %4810 = bitcast i8* %4807 to double*
  %4811 = load double, double* %4810, align 1
  %4812 = getelementptr inbounds i8, i8* %4807, i64 8
  %4813 = bitcast i8* %4812 to i64*
  %4814 = load i64, i64* %4813, align 1
  %4815 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %4816 = fadd double %4811, %4815
  %4817 = bitcast i8* %4806 to double*
  store double %4816, double* %4817, align 1, !tbaa !2452
  %4818 = getelementptr inbounds i8, i8* %4806, i64 8
  %4819 = bitcast i8* %4818 to i64*
  store i64 %4814, i64* %4819, align 1, !tbaa !2452
  %4820 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4821 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4822 = bitcast %union.vec128_t* %XMM3 to i8*
  %4823 = load i64, i64* %PC
  %4824 = add i64 %4823, 4
  store i64 %4824, i64* %PC
  %4825 = bitcast i8* %4821 to double*
  %4826 = load double, double* %4825, align 1
  %4827 = getelementptr inbounds i8, i8* %4821, i64 8
  %4828 = bitcast i8* %4827 to i64*
  %4829 = load i64, i64* %4828, align 1
  %4830 = bitcast i8* %4822 to double*
  %4831 = load double, double* %4830, align 1
  %4832 = fmul double %4826, %4831
  %4833 = bitcast i8* %4820 to double*
  store double %4832, double* %4833, align 1, !tbaa !2452
  %4834 = getelementptr inbounds i8, i8* %4820, i64 8
  %4835 = bitcast i8* %4834 to i64*
  store i64 %4829, i64* %4835, align 1, !tbaa !2452
  %4836 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4837 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4838 = load i64, i64* %PC
  %4839 = add i64 %4838, 9
  store i64 %4839, i64* %PC
  %4840 = bitcast i8* %4837 to double*
  %4841 = load double, double* %4840, align 1
  %4842 = getelementptr inbounds i8, i8* %4837, i64 8
  %4843 = bitcast i8* %4842 to i64*
  %4844 = load i64, i64* %4843, align 1
  %4845 = load double, double* bitcast (%one_type* @one to double*)
  %4846 = fadd double %4841, %4845
  %4847 = bitcast i8* %4836 to double*
  store double %4846, double* %4847, align 1, !tbaa !2452
  %4848 = getelementptr inbounds i8, i8* %4836, i64 8
  %4849 = bitcast i8* %4848 to i64*
  store i64 %4844, i64* %4849, align 1, !tbaa !2452
  %4850 = bitcast %union.vec128_t* %XMM2 to i8*
  %4851 = load i64, i64* %PC
  %4852 = add i64 %4851, 9
  store i64 %4852, i64* %PC
  %4853 = bitcast i8* %4850 to double*
  %4854 = load double, double* %4853, align 1
  store double %4854, double* bitcast (%sa_type* @sa to double*)
  %4855 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4856 = load i64, i64* %PC
  %4857 = add i64 %4856, 9
  store i64 %4857, i64* %PC
  %4858 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %4859 = bitcast i8* %4855 to double*
  store double %4858, double* %4859, align 1, !tbaa !2452
  %4860 = getelementptr inbounds i8, i8* %4855, i64 8
  %4861 = bitcast i8* %4860 to double*
  store double 0.000000e+00, double* %4861, align 1, !tbaa !2452
  %4862 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4863 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4864 = bitcast %union.vec128_t* %XMM1 to i8*
  %4865 = load i64, i64* %PC
  %4866 = add i64 %4865, 4
  store i64 %4866, i64* %PC
  %4867 = bitcast i8* %4863 to double*
  %4868 = load double, double* %4867, align 1
  %4869 = getelementptr inbounds i8, i8* %4863, i64 8
  %4870 = bitcast i8* %4869 to i64*
  %4871 = load i64, i64* %4870, align 1
  %4872 = bitcast i8* %4864 to double*
  %4873 = load double, double* %4872, align 1
  %4874 = fdiv double %4868, %4873
  %4875 = bitcast i8* %4862 to double*
  store double %4874, double* %4875, align 1, !tbaa !2452
  %4876 = getelementptr inbounds i8, i8* %4862, i64 8
  %4877 = bitcast i8* %4876 to i64*
  store i64 %4871, i64* %4877, align 1, !tbaa !2452
  %4878 = bitcast %union.vec128_t* %XMM2 to i8*
  %4879 = load i64, i64* %PC
  %4880 = add i64 %4879, 9
  store i64 %4880, i64* %PC
  %4881 = bitcast i8* %4878 to double*
  %4882 = load double, double* %4881, align 1
  store double %4882, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 104) to double*)
  %4883 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4884 = load i64, i64* %RBP
  %4885 = sub i64 %4884, 48
  %4886 = load i64, i64* %PC
  %4887 = add i64 %4886, 5
  store i64 %4887, i64* %PC
  %4888 = inttoptr i64 %4885 to double*
  %4889 = load double, double* %4888
  %4890 = bitcast i8* %4883 to double*
  store double %4889, double* %4890, align 1, !tbaa !2452
  %4891 = getelementptr inbounds i8, i8* %4883, i64 8
  %4892 = bitcast i8* %4891 to double*
  store double 0.000000e+00, double* %4892, align 1, !tbaa !2452
  %4893 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4894 = load i64, i64* %PC
  %4895 = add i64 %4894, 9
  store i64 %4895, i64* %PC
  %4896 = load double, double* bitcast (%sa_type* @sa to double*)
  %4897 = bitcast i8* %4893 to double*
  store double %4896, double* %4897, align 1, !tbaa !2452
  %4898 = getelementptr inbounds i8, i8* %4893, i64 8
  %4899 = bitcast i8* %4898 to double*
  store double 0.000000e+00, double* %4899, align 1, !tbaa !2452
  %4900 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4901 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4902 = load i64, i64* %PC
  %4903 = add i64 %4902, 9
  store i64 %4903, i64* %PC
  %4904 = bitcast i8* %4901 to double*
  %4905 = load double, double* %4904, align 1
  %4906 = getelementptr inbounds i8, i8* %4901, i64 8
  %4907 = bitcast i8* %4906 to i64*
  %4908 = load i64, i64* %4907, align 1
  %4909 = load double, double* bitcast (%one_type* @one to double*)
  %4910 = fadd double %4905, %4909
  %4911 = bitcast i8* %4900 to double*
  store double %4910, double* %4911, align 1, !tbaa !2452
  %4912 = getelementptr inbounds i8, i8* %4900, i64 8
  %4913 = bitcast i8* %4912 to i64*
  store i64 %4908, i64* %4913, align 1, !tbaa !2452
  %4914 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4915 = load i64, i64* %PC
  %4916 = add i64 %4915, 9
  store i64 %4916, i64* %PC
  %4917 = load double, double* bitcast (%two_type* @two to double*)
  %4918 = bitcast i8* %4914 to double*
  store double %4917, double* %4918, align 1, !tbaa !2452
  %4919 = getelementptr inbounds i8, i8* %4914, i64 8
  %4920 = bitcast i8* %4919 to double*
  store double 0.000000e+00, double* %4920, align 1, !tbaa !2452
  %4921 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4922 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %4923 = load i64, i64* %RBP
  %4924 = sub i64 %4923, 16
  %4925 = load i64, i64* %PC
  %4926 = add i64 %4925, 5
  store i64 %4926, i64* %PC
  %4927 = bitcast i8* %4922 to double*
  %4928 = load double, double* %4927, align 1
  %4929 = getelementptr inbounds i8, i8* %4922, i64 8
  %4930 = bitcast i8* %4929 to i64*
  %4931 = load i64, i64* %4930, align 1
  %4932 = inttoptr i64 %4924 to double*
  %4933 = load double, double* %4932
  %4934 = fmul double %4928, %4933
  %4935 = bitcast i8* %4921 to double*
  store double %4934, double* %4935, align 1, !tbaa !2452
  %4936 = getelementptr inbounds i8, i8* %4921, i64 8
  %4937 = bitcast i8* %4936 to i64*
  store i64 %4931, i64* %4937, align 1, !tbaa !2452
  %4938 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4939 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %4940 = bitcast %union.vec128_t* %XMM3 to i8*
  %4941 = load i64, i64* %PC
  %4942 = add i64 %4941, 4
  store i64 %4942, i64* %PC
  %4943 = bitcast i8* %4939 to double*
  %4944 = load double, double* %4943, align 1
  %4945 = getelementptr inbounds i8, i8* %4939, i64 8
  %4946 = bitcast i8* %4945 to i64*
  %4947 = load i64, i64* %4946, align 1
  %4948 = bitcast i8* %4940 to double*
  %4949 = load double, double* %4948, align 1
  %4950 = fadd double %4944, %4949
  %4951 = bitcast i8* %4938 to double*
  store double %4950, double* %4951, align 1, !tbaa !2452
  %4952 = getelementptr inbounds i8, i8* %4938, i64 8
  %4953 = bitcast i8* %4952 to i64*
  store i64 %4947, i64* %4953, align 1, !tbaa !2452
  %4954 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4955 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4956 = bitcast %union.vec128_t* %XMM2 to i8*
  %4957 = load i64, i64* %PC
  %4958 = add i64 %4957, 4
  store i64 %4958, i64* %PC
  %4959 = bitcast i8* %4955 to double*
  %4960 = load double, double* %4959, align 1
  %4961 = getelementptr inbounds i8, i8* %4955, i64 8
  %4962 = bitcast i8* %4961 to i64*
  %4963 = load i64, i64* %4962, align 1
  %4964 = bitcast i8* %4956 to double*
  %4965 = load double, double* %4964, align 1
  %4966 = fmul double %4960, %4965
  %4967 = bitcast i8* %4954 to double*
  store double %4966, double* %4967, align 1, !tbaa !2452
  %4968 = getelementptr inbounds i8, i8* %4954, i64 8
  %4969 = bitcast i8* %4968 to i64*
  store i64 %4963, i64* %4969, align 1, !tbaa !2452
  %4970 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4971 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4972 = load i64, i64* %PC
  %4973 = add i64 %4972, 9
  store i64 %4973, i64* %PC
  %4974 = bitcast i8* %4971 to double*
  %4975 = load double, double* %4974, align 1
  %4976 = getelementptr inbounds i8, i8* %4971, i64 8
  %4977 = bitcast i8* %4976 to i64*
  %4978 = load i64, i64* %4977, align 1
  %4979 = load double, double* bitcast (%two_type* @two to double*)
  %4980 = fdiv double %4975, %4979
  %4981 = bitcast i8* %4970 to double*
  store double %4980, double* %4981, align 1, !tbaa !2452
  %4982 = getelementptr inbounds i8, i8* %4970, i64 8
  %4983 = bitcast i8* %4982 to i64*
  store i64 %4978, i64* %4983, align 1, !tbaa !2452
  %4984 = bitcast %union.vec128_t* %XMM1 to i8*
  %4985 = load i64, i64* %PC
  %4986 = add i64 %4985, 9
  store i64 %4986, i64* %PC
  %4987 = bitcast i8* %4984 to double*
  %4988 = load double, double* %4987, align 1
  store double %4988, double* bitcast (%sa_type* @sa to double*)
  %4989 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4990 = load i64, i64* %PC
  %4991 = add i64 %4990, 9
  store i64 %4991, i64* %PC
  %4992 = load double, double* bitcast (%piref_type* @piref to double*)
  %4993 = bitcast i8* %4989 to double*
  store double %4992, double* %4993, align 1, !tbaa !2452
  %4994 = getelementptr inbounds i8, i8* %4989, i64 8
  %4995 = bitcast i8* %4994 to double*
  store double 0.000000e+00, double* %4995, align 1, !tbaa !2452
  %4996 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4997 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %4998 = load i64, i64* %PC
  %4999 = add i64 %4998, 9
  store i64 %4999, i64* %PC
  %5000 = bitcast i8* %4997 to double*
  %5001 = load double, double* %5000, align 1
  %5002 = getelementptr inbounds i8, i8* %4997, i64 8
  %5003 = bitcast i8* %5002 to i64*
  %5004 = load i64, i64* %5003, align 1
  %5005 = load double, double* bitcast (%three_type* @three to double*)
  %5006 = fdiv double %5001, %5005
  %5007 = bitcast i8* %4996 to double*
  store double %5006, double* %5007, align 1, !tbaa !2452
  %5008 = getelementptr inbounds i8, i8* %4996, i64 8
  %5009 = bitcast i8* %5008 to i64*
  store i64 %5004, i64* %5009, align 1, !tbaa !2452
  %5010 = load i64, i64* %RBP
  %5011 = sub i64 %5010, 24
  %5012 = bitcast %union.vec128_t* %XMM1 to i8*
  %5013 = load i64, i64* %PC
  %5014 = add i64 %5013, 5
  store i64 %5014, i64* %PC
  %5015 = bitcast i8* %5012 to double*
  %5016 = load double, double* %5015, align 1
  %5017 = inttoptr i64 %5011 to double*
  store double %5016, double* %5017
  %5018 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5019 = load i64, i64* %RBP
  %5020 = sub i64 %5019, 24
  %5021 = load i64, i64* %PC
  %5022 = add i64 %5021, 5
  store i64 %5022, i64* %PC
  %5023 = inttoptr i64 %5020 to double*
  %5024 = load double, double* %5023
  %5025 = bitcast i8* %5018 to double*
  store double %5024, double* %5025, align 1, !tbaa !2452
  %5026 = getelementptr inbounds i8, i8* %5018, i64 8
  %5027 = bitcast i8* %5026 to double*
  store double 0.000000e+00, double* %5027, align 1, !tbaa !2452
  %5028 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5029 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5030 = load i64, i64* %RBP
  %5031 = sub i64 %5030, 24
  %5032 = load i64, i64* %PC
  %5033 = add i64 %5032, 5
  store i64 %5033, i64* %PC
  %5034 = bitcast i8* %5029 to double*
  %5035 = load double, double* %5034, align 1
  %5036 = getelementptr inbounds i8, i8* %5029, i64 8
  %5037 = bitcast i8* %5036 to i64*
  %5038 = load i64, i64* %5037, align 1
  %5039 = inttoptr i64 %5031 to double*
  %5040 = load double, double* %5039
  %5041 = fmul double %5035, %5040
  %5042 = bitcast i8* %5028 to double*
  store double %5041, double* %5042, align 1, !tbaa !2452
  %5043 = getelementptr inbounds i8, i8* %5028, i64 8
  %5044 = bitcast i8* %5043 to i64*
  store i64 %5038, i64* %5044, align 1, !tbaa !2452
  %5045 = load i64, i64* %RBP
  %5046 = sub i64 %5045, 40
  %5047 = bitcast %union.vec128_t* %XMM1 to i8*
  %5048 = load i64, i64* %PC
  %5049 = add i64 %5048, 5
  store i64 %5049, i64* %PC
  %5050 = bitcast i8* %5047 to double*
  %5051 = load double, double* %5050, align 1
  %5052 = inttoptr i64 %5046 to double*
  store double %5051, double* %5052
  %5053 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5054 = load i64, i64* %RBP
  %5055 = sub i64 %5054, 24
  %5056 = load i64, i64* %PC
  %5057 = add i64 %5056, 5
  store i64 %5057, i64* %PC
  %5058 = inttoptr i64 %5055 to double*
  %5059 = load double, double* %5058
  %5060 = bitcast i8* %5053 to double*
  store double %5059, double* %5060, align 1, !tbaa !2452
  %5061 = getelementptr inbounds i8, i8* %5053, i64 8
  %5062 = bitcast i8* %5061 to double*
  store double 0.000000e+00, double* %5062, align 1, !tbaa !2452
  %5063 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5064 = load i64, i64* %PC
  %5065 = add i64 %5064, 9
  store i64 %5065, i64* %PC
  %5066 = load double, double* bitcast (%A6_type* @A6 to double*)
  %5067 = bitcast i8* %5063 to double*
  store double %5066, double* %5067, align 1, !tbaa !2452
  %5068 = getelementptr inbounds i8, i8* %5063, i64 8
  %5069 = bitcast i8* %5068 to double*
  store double 0.000000e+00, double* %5069, align 1, !tbaa !2452
  %5070 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5071 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5072 = load i64, i64* %RBP
  %5073 = sub i64 %5072, 40
  %5074 = load i64, i64* %PC
  %5075 = add i64 %5074, 5
  store i64 %5075, i64* %PC
  %5076 = bitcast i8* %5071 to double*
  %5077 = load double, double* %5076, align 1
  %5078 = getelementptr inbounds i8, i8* %5071, i64 8
  %5079 = bitcast i8* %5078 to i64*
  %5080 = load i64, i64* %5079, align 1
  %5081 = inttoptr i64 %5073 to double*
  %5082 = load double, double* %5081
  %5083 = fmul double %5077, %5082
  %5084 = bitcast i8* %5070 to double*
  store double %5083, double* %5084, align 1, !tbaa !2452
  %5085 = getelementptr inbounds i8, i8* %5070, i64 8
  %5086 = bitcast i8* %5085 to i64*
  store i64 %5080, i64* %5086, align 1, !tbaa !2452
  %5087 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5088 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5089 = load i64, i64* %PC
  %5090 = add i64 %5089, 9
  store i64 %5090, i64* %PC
  %5091 = bitcast i8* %5088 to double*
  %5092 = load double, double* %5091, align 1
  %5093 = getelementptr inbounds i8, i8* %5088, i64 8
  %5094 = bitcast i8* %5093 to i64*
  %5095 = load i64, i64* %5094, align 1
  %5096 = load double, double* bitcast (%A5_type* @A5 to double*)
  %5097 = fadd double %5092, %5096
  %5098 = bitcast i8* %5087 to double*
  store double %5097, double* %5098, align 1, !tbaa !2452
  %5099 = getelementptr inbounds i8, i8* %5087, i64 8
  %5100 = bitcast i8* %5099 to i64*
  store i64 %5095, i64* %5100, align 1, !tbaa !2452
  %5101 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5102 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5103 = load i64, i64* %RBP
  %5104 = sub i64 %5103, 40
  %5105 = load i64, i64* %PC
  %5106 = add i64 %5105, 5
  store i64 %5106, i64* %PC
  %5107 = bitcast i8* %5102 to double*
  %5108 = load double, double* %5107, align 1
  %5109 = getelementptr inbounds i8, i8* %5102, i64 8
  %5110 = bitcast i8* %5109 to i64*
  %5111 = load i64, i64* %5110, align 1
  %5112 = inttoptr i64 %5104 to double*
  %5113 = load double, double* %5112
  %5114 = fmul double %5108, %5113
  %5115 = bitcast i8* %5101 to double*
  store double %5114, double* %5115, align 1, !tbaa !2452
  %5116 = getelementptr inbounds i8, i8* %5101, i64 8
  %5117 = bitcast i8* %5116 to i64*
  store i64 %5111, i64* %5117, align 1, !tbaa !2452
  %5118 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5119 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5120 = load i64, i64* %PC
  %5121 = add i64 %5120, 9
  store i64 %5121, i64* %PC
  %5122 = bitcast i8* %5119 to double*
  %5123 = load double, double* %5122, align 1
  %5124 = getelementptr inbounds i8, i8* %5119, i64 8
  %5125 = bitcast i8* %5124 to i64*
  %5126 = load i64, i64* %5125, align 1
  %5127 = load double, double* bitcast (%A4_type* @A4 to double*)
  %5128 = fadd double %5123, %5127
  %5129 = bitcast i8* %5118 to double*
  store double %5128, double* %5129, align 1, !tbaa !2452
  %5130 = getelementptr inbounds i8, i8* %5118, i64 8
  %5131 = bitcast i8* %5130 to i64*
  store i64 %5126, i64* %5131, align 1, !tbaa !2452
  %5132 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5133 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5134 = load i64, i64* %RBP
  %5135 = sub i64 %5134, 40
  %5136 = load i64, i64* %PC
  %5137 = add i64 %5136, 5
  store i64 %5137, i64* %PC
  %5138 = bitcast i8* %5133 to double*
  %5139 = load double, double* %5138, align 1
  %5140 = getelementptr inbounds i8, i8* %5133, i64 8
  %5141 = bitcast i8* %5140 to i64*
  %5142 = load i64, i64* %5141, align 1
  %5143 = inttoptr i64 %5135 to double*
  %5144 = load double, double* %5143
  %5145 = fmul double %5139, %5144
  %5146 = bitcast i8* %5132 to double*
  store double %5145, double* %5146, align 1, !tbaa !2452
  %5147 = getelementptr inbounds i8, i8* %5132, i64 8
  %5148 = bitcast i8* %5147 to i64*
  store i64 %5142, i64* %5148, align 1, !tbaa !2452
  %5149 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5150 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5151 = load i64, i64* %PC
  %5152 = add i64 %5151, 9
  store i64 %5152, i64* %PC
  %5153 = bitcast i8* %5150 to double*
  %5154 = load double, double* %5153, align 1
  %5155 = getelementptr inbounds i8, i8* %5150, i64 8
  %5156 = bitcast i8* %5155 to i64*
  %5157 = load i64, i64* %5156, align 1
  %5158 = load double, double* bitcast (%A3_type* @A3 to double*)
  %5159 = fadd double %5154, %5158
  %5160 = bitcast i8* %5149 to double*
  store double %5159, double* %5160, align 1, !tbaa !2452
  %5161 = getelementptr inbounds i8, i8* %5149, i64 8
  %5162 = bitcast i8* %5161 to i64*
  store i64 %5157, i64* %5162, align 1, !tbaa !2452
  %5163 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5164 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5165 = load i64, i64* %RBP
  %5166 = sub i64 %5165, 40
  %5167 = load i64, i64* %PC
  %5168 = add i64 %5167, 5
  store i64 %5168, i64* %PC
  %5169 = bitcast i8* %5164 to double*
  %5170 = load double, double* %5169, align 1
  %5171 = getelementptr inbounds i8, i8* %5164, i64 8
  %5172 = bitcast i8* %5171 to i64*
  %5173 = load i64, i64* %5172, align 1
  %5174 = inttoptr i64 %5166 to double*
  %5175 = load double, double* %5174
  %5176 = fmul double %5170, %5175
  %5177 = bitcast i8* %5163 to double*
  store double %5176, double* %5177, align 1, !tbaa !2452
  %5178 = getelementptr inbounds i8, i8* %5163, i64 8
  %5179 = bitcast i8* %5178 to i64*
  store i64 %5173, i64* %5179, align 1, !tbaa !2452
  %5180 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5181 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5182 = load i64, i64* %PC
  %5183 = add i64 %5182, 9
  store i64 %5183, i64* %PC
  %5184 = bitcast i8* %5181 to double*
  %5185 = load double, double* %5184, align 1
  %5186 = getelementptr inbounds i8, i8* %5181, i64 8
  %5187 = bitcast i8* %5186 to i64*
  %5188 = load i64, i64* %5187, align 1
  %5189 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %5190 = fadd double %5185, %5189
  %5191 = bitcast i8* %5180 to double*
  store double %5190, double* %5191, align 1, !tbaa !2452
  %5192 = getelementptr inbounds i8, i8* %5180, i64 8
  %5193 = bitcast i8* %5192 to i64*
  store i64 %5188, i64* %5193, align 1, !tbaa !2452
  %5194 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5195 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5196 = load i64, i64* %RBP
  %5197 = sub i64 %5196, 40
  %5198 = load i64, i64* %PC
  %5199 = add i64 %5198, 5
  store i64 %5199, i64* %PC
  %5200 = bitcast i8* %5195 to double*
  %5201 = load double, double* %5200, align 1
  %5202 = getelementptr inbounds i8, i8* %5195, i64 8
  %5203 = bitcast i8* %5202 to i64*
  %5204 = load i64, i64* %5203, align 1
  %5205 = inttoptr i64 %5197 to double*
  %5206 = load double, double* %5205
  %5207 = fmul double %5201, %5206
  %5208 = bitcast i8* %5194 to double*
  store double %5207, double* %5208, align 1, !tbaa !2452
  %5209 = getelementptr inbounds i8, i8* %5194, i64 8
  %5210 = bitcast i8* %5209 to i64*
  store i64 %5204, i64* %5210, align 1, !tbaa !2452
  %5211 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5212 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5213 = load i64, i64* %PC
  %5214 = add i64 %5213, 9
  store i64 %5214, i64* %PC
  %5215 = bitcast i8* %5212 to double*
  %5216 = load double, double* %5215, align 1
  %5217 = getelementptr inbounds i8, i8* %5212, i64 8
  %5218 = bitcast i8* %5217 to i64*
  %5219 = load i64, i64* %5218, align 1
  %5220 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %5221 = fadd double %5216, %5220
  %5222 = bitcast i8* %5211 to double*
  store double %5221, double* %5222, align 1, !tbaa !2452
  %5223 = getelementptr inbounds i8, i8* %5211, i64 8
  %5224 = bitcast i8* %5223 to i64*
  store i64 %5219, i64* %5224, align 1, !tbaa !2452
  %5225 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5226 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5227 = load i64, i64* %RBP
  %5228 = sub i64 %5227, 40
  %5229 = load i64, i64* %PC
  %5230 = add i64 %5229, 5
  store i64 %5230, i64* %PC
  %5231 = bitcast i8* %5226 to double*
  %5232 = load double, double* %5231, align 1
  %5233 = getelementptr inbounds i8, i8* %5226, i64 8
  %5234 = bitcast i8* %5233 to i64*
  %5235 = load i64, i64* %5234, align 1
  %5236 = inttoptr i64 %5228 to double*
  %5237 = load double, double* %5236
  %5238 = fmul double %5232, %5237
  %5239 = bitcast i8* %5225 to double*
  store double %5238, double* %5239, align 1, !tbaa !2452
  %5240 = getelementptr inbounds i8, i8* %5225, i64 8
  %5241 = bitcast i8* %5240 to i64*
  store i64 %5235, i64* %5241, align 1, !tbaa !2452
  %5242 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5243 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5244 = load i64, i64* %PC
  %5245 = add i64 %5244, 9
  store i64 %5245, i64* %PC
  %5246 = bitcast i8* %5243 to double*
  %5247 = load double, double* %5246, align 1
  %5248 = getelementptr inbounds i8, i8* %5243, i64 8
  %5249 = bitcast i8* %5248 to i64*
  %5250 = load i64, i64* %5249, align 1
  %5251 = load double, double* bitcast (%A0_type* @A0 to double*)
  %5252 = fadd double %5247, %5251
  %5253 = bitcast i8* %5242 to double*
  store double %5252, double* %5253, align 1, !tbaa !2452
  %5254 = getelementptr inbounds i8, i8* %5242, i64 8
  %5255 = bitcast i8* %5254 to i64*
  store i64 %5250, i64* %5255, align 1, !tbaa !2452
  %5256 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5257 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5258 = bitcast %union.vec128_t* %XMM2 to i8*
  %5259 = load i64, i64* %PC
  %5260 = add i64 %5259, 4
  store i64 %5260, i64* %PC
  %5261 = bitcast i8* %5257 to double*
  %5262 = load double, double* %5261, align 1
  %5263 = getelementptr inbounds i8, i8* %5257, i64 8
  %5264 = bitcast i8* %5263 to i64*
  %5265 = load i64, i64* %5264, align 1
  %5266 = bitcast i8* %5258 to double*
  %5267 = load double, double* %5266, align 1
  %5268 = fmul double %5262, %5267
  %5269 = bitcast i8* %5256 to double*
  store double %5268, double* %5269, align 1, !tbaa !2452
  %5270 = getelementptr inbounds i8, i8* %5256, i64 8
  %5271 = bitcast i8* %5270 to i64*
  store i64 %5265, i64* %5271, align 1, !tbaa !2452
  %5272 = bitcast %union.vec128_t* %XMM1 to i8*
  %5273 = load i64, i64* %PC
  %5274 = add i64 %5273, 9
  store i64 %5274, i64* %PC
  %5275 = bitcast i8* %5272 to double*
  %5276 = load double, double* %5275, align 1
  store double %5276, double* bitcast (%sb_type* @sb to double*)
  %5277 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5278 = load i64, i64* %PC
  %5279 = add i64 %5278, 9
  store i64 %5279, i64* %PC
  %5280 = load double, double* bitcast (%sa_type* @sa to double*)
  %5281 = bitcast i8* %5277 to double*
  store double %5280, double* %5281, align 1, !tbaa !2452
  %5282 = getelementptr inbounds i8, i8* %5277, i64 8
  %5283 = bitcast i8* %5282 to double*
  store double 0.000000e+00, double* %5283, align 1, !tbaa !2452
  %5284 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5285 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5286 = load i64, i64* %PC
  %5287 = add i64 %5286, 9
  store i64 %5287, i64* %PC
  %5288 = bitcast i8* %5285 to double*
  %5289 = load double, double* %5288, align 1
  %5290 = getelementptr inbounds i8, i8* %5285, i64 8
  %5291 = bitcast i8* %5290 to i64*
  %5292 = load i64, i64* %5291, align 1
  %5293 = load double, double* bitcast (%sb_type* @sb to double*)
  %5294 = fsub double %5289, %5293
  %5295 = bitcast i8* %5284 to double*
  store double %5294, double* %5295, align 1, !tbaa !2452
  %5296 = getelementptr inbounds i8, i8* %5284, i64 8
  %5297 = bitcast i8* %5296 to i64*
  store i64 %5292, i64* %5297, align 1, !tbaa !2452
  %5298 = bitcast %union.vec128_t* %XMM1 to i8*
  %5299 = load i64, i64* %PC
  %5300 = add i64 %5299, 9
  store i64 %5300, i64* %PC
  %5301 = bitcast i8* %5298 to double*
  %5302 = load double, double* %5301, align 1
  store double %5302, double* bitcast (%sc_type* @sc to double*)
  %5303 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5304 = load i64, i64* %PC
  %5305 = add i64 %5304, 9
  store i64 %5305, i64* %PC
  %5306 = load double, double* bitcast (%one_type* @one to double*)
  %5307 = bitcast i8* %5303 to double*
  store double %5306, double* %5307, align 1, !tbaa !2452
  %5308 = getelementptr inbounds i8, i8* %5303, i64 8
  %5309 = bitcast i8* %5308 to double*
  store double 0.000000e+00, double* %5309, align 1, !tbaa !2452
  %5310 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5311 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5312 = load i64, i64* %PC
  %5313 = add i64 %5312, 9
  store i64 %5313, i64* %PC
  %5314 = bitcast i8* %5311 to double*
  %5315 = load double, double* %5314, align 1
  %5316 = getelementptr inbounds i8, i8* %5311, i64 8
  %5317 = bitcast i8* %5316 to i64*
  %5318 = load i64, i64* %5317, align 1
  %5319 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 104) to double*)
  %5320 = fdiv double %5315, %5319
  %5321 = bitcast i8* %5310 to double*
  store double %5320, double* %5321, align 1, !tbaa !2452
  %5322 = getelementptr inbounds i8, i8* %5310, i64 8
  %5323 = bitcast i8* %5322 to i64*
  store i64 %5318, i64* %5323, align 1, !tbaa !2452
  %5324 = bitcast %union.vec128_t* %XMM1 to i8*
  %5325 = load i64, i64* %PC
  %5326 = add i64 %5325, 9
  store i64 %5326, i64* %PC
  %5327 = bitcast i8* %5324 to double*
  %5328 = load double, double* %5327, align 1
  store double %5328, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 112) to double*)
  %5329 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5330 = bitcast %union.vec128_t* %XMM0 to i8*
  %5331 = load i64, i64* %PC
  %5332 = add i64 %5331, 3
  store i64 %5332, i64* %PC
  %5333 = bitcast i8* %5330 to <2 x i32>*
  %5334 = load <2 x i32>, <2 x i32>* %5333, align 1
  %5335 = getelementptr inbounds i8, i8* %5330, i64 8
  %5336 = bitcast i8* %5335 to <2 x i32>*
  %5337 = load <2 x i32>, <2 x i32>* %5336, align 1
  %5338 = extractelement <2 x i32> %5334, i32 0
  %5339 = bitcast i8* %5329 to i32*
  store i32 %5338, i32* %5339, align 1, !tbaa !2455
  %5340 = extractelement <2 x i32> %5334, i32 1
  %5341 = getelementptr inbounds i8, i8* %5329, i64 4
  %5342 = bitcast i8* %5341 to i32*
  store i32 %5340, i32* %5342, align 1, !tbaa !2455
  %5343 = extractelement <2 x i32> %5337, i32 0
  %5344 = getelementptr inbounds i8, i8* %5329, i64 8
  %5345 = bitcast i8* %5344 to i32*
  store i32 %5343, i32* %5345, align 1, !tbaa !2455
  %5346 = extractelement <2 x i32> %5337, i32 1
  %5347 = getelementptr inbounds i8, i8* %5329, i64 12
  %5348 = bitcast i8* %5347 to i32*
  store i32 %5346, i32* %5348, align 1, !tbaa !2455
  %5349 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5350 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5351 = load i64, i64* %PC
  %5352 = add i64 %5351, 9
  store i64 %5352, i64* %PC
  %5353 = bitcast i8* %5350 to double*
  %5354 = load double, double* %5353, align 1
  %5355 = getelementptr inbounds i8, i8* %5350, i64 8
  %5356 = bitcast i8* %5355 to i64*
  %5357 = load i64, i64* %5356, align 1
  %5358 = load double, double* bitcast (%sc_type* @sc to double*)
  %5359 = fmul double %5354, %5358
  %5360 = bitcast i8* %5349 to double*
  store double %5359, double* %5360, align 1, !tbaa !2452
  %5361 = getelementptr inbounds i8, i8* %5349, i64 8
  %5362 = bitcast i8* %5361 to i64*
  store i64 %5357, i64* %5362, align 1, !tbaa !2452
  %5363 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5364 = bitcast %union.vec128_t* %XMM0 to i8*
  %5365 = load i64, i64* %PC
  %5366 = add i64 %5365, 3
  store i64 %5366, i64* %PC
  %5367 = bitcast i8* %5364 to <2 x i32>*
  %5368 = load <2 x i32>, <2 x i32>* %5367, align 1
  %5369 = getelementptr inbounds i8, i8* %5364, i64 8
  %5370 = bitcast i8* %5369 to <2 x i32>*
  %5371 = load <2 x i32>, <2 x i32>* %5370, align 1
  %5372 = extractelement <2 x i32> %5368, i32 0
  %5373 = bitcast i8* %5363 to i32*
  store i32 %5372, i32* %5373, align 1, !tbaa !2455
  %5374 = extractelement <2 x i32> %5368, i32 1
  %5375 = getelementptr inbounds i8, i8* %5363, i64 4
  %5376 = bitcast i8* %5375 to i32*
  store i32 %5374, i32* %5376, align 1, !tbaa !2455
  %5377 = extractelement <2 x i32> %5371, i32 0
  %5378 = getelementptr inbounds i8, i8* %5363, i64 8
  %5379 = bitcast i8* %5378 to i32*
  store i32 %5377, i32* %5379, align 1, !tbaa !2455
  %5380 = extractelement <2 x i32> %5371, i32 1
  %5381 = getelementptr inbounds i8, i8* %5363, i64 12
  %5382 = bitcast i8* %5381 to i32*
  store i32 %5380, i32* %5382, align 1, !tbaa !2455
  %5383 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5384 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5385 = load i64, i64* %PC
  %5386 = add i64 %5385, 9
  store i64 %5386, i64* %PC
  %5387 = bitcast i8* %5384 to double*
  %5388 = load double, double* %5387, align 1
  %5389 = getelementptr inbounds i8, i8* %5384, i64 8
  %5390 = bitcast i8* %5389 to i64*
  %5391 = load i64, i64* %5390, align 1
  %5392 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %5393 = fmul double %5388, %5392
  %5394 = bitcast i8* %5383 to double*
  store double %5393, double* %5394, align 1, !tbaa !2452
  %5395 = getelementptr inbounds i8, i8* %5383, i64 8
  %5396 = bitcast i8* %5395 to i64*
  store i64 %5391, i64* %5396, align 1, !tbaa !2452
  %5397 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5398 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5399 = load i64, i64* %PC
  %5400 = add i64 %5399, 9
  store i64 %5400, i64* %PC
  %5401 = bitcast i8* %5398 to double*
  %5402 = load double, double* %5401, align 1
  %5403 = getelementptr inbounds i8, i8* %5398, i64 8
  %5404 = bitcast i8* %5403 to i64*
  %5405 = load i64, i64* %5404, align 1
  %5406 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 112) to double*)
  %5407 = fmul double %5402, %5406
  %5408 = bitcast i8* %5397 to double*
  store double %5407, double* %5408, align 1, !tbaa !2452
  %5409 = getelementptr inbounds i8, i8* %5397, i64 8
  %5410 = bitcast i8* %5409 to i64*
  store i64 %5405, i64* %5410, align 1, !tbaa !2452
  %5411 = load i64, i64* %RBP
  %5412 = sub i64 %5411, 208
  %5413 = bitcast %union.vec128_t* %XMM0 to i8*
  %5414 = load i64, i64* %PC
  %5415 = add i64 %5414, 8
  store i64 %5415, i64* %PC
  %5416 = bitcast i8* %5413 to double*
  %5417 = load double, double* %5416, align 1
  %5418 = inttoptr i64 %5412 to double*
  store double %5417, double* %5418
  %5419 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5420 = bitcast %union.vec128_t* %XMM1 to i8*
  %5421 = load i64, i64* %PC
  %5422 = add i64 %5421, 3
  store i64 %5422, i64* %PC
  %5423 = bitcast i8* %5420 to <2 x i32>*
  %5424 = load <2 x i32>, <2 x i32>* %5423, align 1
  %5425 = getelementptr inbounds i8, i8* %5420, i64 8
  %5426 = bitcast i8* %5425 to <2 x i32>*
  %5427 = load <2 x i32>, <2 x i32>* %5426, align 1
  %5428 = extractelement <2 x i32> %5424, i32 0
  %5429 = bitcast i8* %5419 to i32*
  store i32 %5428, i32* %5429, align 1, !tbaa !2455
  %5430 = extractelement <2 x i32> %5424, i32 1
  %5431 = getelementptr inbounds i8, i8* %5419, i64 4
  %5432 = bitcast i8* %5431 to i32*
  store i32 %5430, i32* %5432, align 1, !tbaa !2455
  %5433 = extractelement <2 x i32> %5427, i32 0
  %5434 = getelementptr inbounds i8, i8* %5419, i64 8
  %5435 = bitcast i8* %5434 to i32*
  store i32 %5433, i32* %5435, align 1, !tbaa !2455
  %5436 = extractelement <2 x i32> %5427, i32 1
  %5437 = getelementptr inbounds i8, i8* %5419, i64 12
  %5438 = bitcast i8* %5437 to i32*
  store i32 %5436, i32* %5438, align 1, !tbaa !2455
  %5439 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5440 = bitcast %union.vec128_t* %XMM2 to i8*
  %5441 = load i64, i64* %PC
  %5442 = add i64 %5441, 3
  store i64 %5442, i64* %PC
  %5443 = bitcast i8* %5440 to <2 x i32>*
  %5444 = load <2 x i32>, <2 x i32>* %5443, align 1
  %5445 = getelementptr inbounds i8, i8* %5440, i64 8
  %5446 = bitcast i8* %5445 to <2 x i32>*
  %5447 = load <2 x i32>, <2 x i32>* %5446, align 1
  %5448 = extractelement <2 x i32> %5444, i32 0
  %5449 = bitcast i8* %5439 to i32*
  store i32 %5448, i32* %5449, align 1, !tbaa !2455
  %5450 = extractelement <2 x i32> %5444, i32 1
  %5451 = getelementptr inbounds i8, i8* %5439, i64 4
  %5452 = bitcast i8* %5451 to i32*
  store i32 %5450, i32* %5452, align 1, !tbaa !2455
  %5453 = extractelement <2 x i32> %5447, i32 0
  %5454 = getelementptr inbounds i8, i8* %5439, i64 8
  %5455 = bitcast i8* %5454 to i32*
  store i32 %5453, i32* %5455, align 1, !tbaa !2455
  %5456 = extractelement <2 x i32> %5447, i32 1
  %5457 = getelementptr inbounds i8, i8* %5439, i64 12
  %5458 = bitcast i8* %5457 to i32*
  store i32 %5456, i32* %5458, align 1, !tbaa !2455
  %5459 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5460 = load i64, i64* %RBP
  %5461 = sub i64 %5460, 208
  %5462 = load i64, i64* %PC
  %5463 = add i64 %5462, 8
  store i64 %5463, i64* %PC
  %5464 = inttoptr i64 %5461 to double*
  %5465 = load double, double* %5464
  %5466 = bitcast i8* %5459 to double*
  store double %5465, double* %5466, align 1, !tbaa !2452
  %5467 = getelementptr inbounds i8, i8* %5459, i64 8
  %5468 = bitcast i8* %5467 to double*
  store double 0.000000e+00, double* %5468, align 1, !tbaa !2452
  %5469 = load i64, i64* %RBP
  %5470 = sub i64 %5469, 212
  %5471 = load i32, i32* %EAX
  %5472 = zext i32 %5471 to i64
  %5473 = load i64, i64* %PC
  %5474 = add i64 %5473, 6
  store i64 %5474, i64* %PC
  %5475 = inttoptr i64 %5470 to i32*
  store i32 %5471, i32* %5475
  %5476 = load i64, i64* %PC
  %5477 = add i64 %5476, 2
  store i64 %5477, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %5478 = load i64, i64* %PC
  %5479 = sub i64 %5478, 4181
  %5480 = load i64, i64* %PC
  %5481 = add i64 %5480, 5
  %5482 = load i64, i64* %PC
  %5483 = add i64 %5482, 5
  store i64 %5483, i64* %PC
  %5484 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5485 = load i64, i64* %5484, align 8, !tbaa !2428
  %5486 = add i64 %5485, -8
  %5487 = inttoptr i64 %5486 to i64*
  store i64 %5481, i64* %5487
  store i64 %5486, i64* %5484, align 8, !tbaa !2428
  %5488 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5479, i64* %5488, align 8, !tbaa !2428
  %5489 = load i64, i64* %PC
  %5490 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %5489, %struct.Memory* %4491)
  %5491 = load i64, i64* %PC
  %5492 = add i64 %5491, 10
  store i64 %5492, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %5493 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5494 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5495 = bitcast %union.vec128_t* %XMM0 to i8*
  %5496 = load i64, i64* %PC
  %5497 = add i64 %5496, 3
  store i64 %5497, i64* %PC
  %5498 = bitcast i8* %5494 to i64*
  %5499 = load i64, i64* %5498, align 1
  %5500 = getelementptr inbounds i8, i8* %5494, i64 8
  %5501 = bitcast i8* %5500 to i64*
  %5502 = load i64, i64* %5501, align 1
  %5503 = bitcast i8* %5495 to i64*
  %5504 = load i64, i64* %5503, align 1
  %5505 = getelementptr inbounds i8, i8* %5495, i64 8
  %5506 = bitcast i8* %5505 to i64*
  %5507 = load i64, i64* %5506, align 1
  %5508 = xor i64 %5504, %5499
  %5509 = xor i64 %5507, %5502
  %5510 = trunc i64 %5508 to i32
  %5511 = lshr i64 %5508, 32
  %5512 = trunc i64 %5511 to i32
  %5513 = bitcast i8* %5493 to i32*
  store i32 %5510, i32* %5513, align 1, !tbaa !2454
  %5514 = getelementptr inbounds i8, i8* %5493, i64 4
  %5515 = bitcast i8* %5514 to i32*
  store i32 %5512, i32* %5515, align 1, !tbaa !2454
  %5516 = trunc i64 %5509 to i32
  %5517 = getelementptr inbounds i8, i8* %5493, i64 8
  %5518 = bitcast i8* %5517 to i32*
  store i32 %5516, i32* %5518, align 1, !tbaa !2454
  %5519 = lshr i64 %5509, 32
  %5520 = trunc i64 %5519 to i32
  %5521 = getelementptr inbounds i8, i8* %5493, i64 12
  %5522 = bitcast i8* %5521 to i32*
  store i32 %5520, i32* %5522, align 1, !tbaa !2454
  %5523 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5524 = load i64, i64* %PC
  %5525 = add i64 %5524, 9
  store i64 %5525, i64* %PC
  %5526 = load double, double* bitcast (%piref_type* @piref to double*)
  %5527 = bitcast i8* %5523 to double*
  store double %5526, double* %5527, align 1, !tbaa !2452
  %5528 = getelementptr inbounds i8, i8* %5523, i64 8
  %5529 = bitcast i8* %5528 to double*
  store double 0.000000e+00, double* %5529, align 1, !tbaa !2452
  %5530 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5531 = load i64, i64* %PC
  %5532 = add i64 %5531, 9
  store i64 %5532, i64* %PC
  %5533 = load double, double* bitcast (%three_type* @three to double*)
  %5534 = bitcast i8* %5530 to double*
  store double %5533, double* %5534, align 1, !tbaa !2452
  %5535 = getelementptr inbounds i8, i8* %5530, i64 8
  %5536 = bitcast i8* %5535 to double*
  store double 0.000000e+00, double* %5536, align 1, !tbaa !2452
  %5537 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5538 = load i64, i64* %RBP
  %5539 = sub i64 %5538, 80
  %5540 = load i64, i64* %PC
  %5541 = add i64 %5540, 6
  store i64 %5541, i64* %PC
  %5542 = inttoptr i64 %5539 to i64*
  %5543 = load i64, i64* %5542
  %5544 = sitofp i64 %5543 to double
  %5545 = bitcast i8* %5537 to double*
  store double %5544, double* %5545, align 1, !tbaa !2452
  %5546 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5547 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5548 = bitcast %union.vec128_t* %XMM3 to i8*
  %5549 = load i64, i64* %PC
  %5550 = add i64 %5549, 4
  store i64 %5550, i64* %PC
  %5551 = bitcast i8* %5547 to double*
  %5552 = load double, double* %5551, align 1
  %5553 = getelementptr inbounds i8, i8* %5547, i64 8
  %5554 = bitcast i8* %5553 to i64*
  %5555 = load i64, i64* %5554, align 1
  %5556 = bitcast i8* %5548 to double*
  %5557 = load double, double* %5556, align 1
  %5558 = fmul double %5552, %5557
  %5559 = bitcast i8* %5546 to double*
  store double %5558, double* %5559, align 1, !tbaa !2452
  %5560 = getelementptr inbounds i8, i8* %5546, i64 8
  %5561 = bitcast i8* %5560 to i64*
  store i64 %5555, i64* %5561, align 1, !tbaa !2452
  %5562 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5563 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5564 = bitcast %union.vec128_t* %XMM2 to i8*
  %5565 = load i64, i64* %PC
  %5566 = add i64 %5565, 4
  store i64 %5566, i64* %PC
  %5567 = bitcast i8* %5563 to double*
  %5568 = load double, double* %5567, align 1
  %5569 = getelementptr inbounds i8, i8* %5563, i64 8
  %5570 = bitcast i8* %5569 to i64*
  %5571 = load i64, i64* %5570, align 1
  %5572 = bitcast i8* %5564 to double*
  %5573 = load double, double* %5572, align 1
  %5574 = fdiv double %5568, %5573
  %5575 = bitcast i8* %5562 to double*
  store double %5574, double* %5575, align 1, !tbaa !2452
  %5576 = getelementptr inbounds i8, i8* %5562, i64 8
  %5577 = bitcast i8* %5576 to i64*
  store i64 %5571, i64* %5577, align 1, !tbaa !2452
  %5578 = load i64, i64* %RBP
  %5579 = sub i64 %5578, 48
  %5580 = bitcast %union.vec128_t* %XMM1 to i8*
  %5581 = load i64, i64* %PC
  %5582 = add i64 %5581, 5
  store i64 %5582, i64* %PC
  %5583 = bitcast i8* %5580 to double*
  %5584 = load double, double* %5583, align 1
  %5585 = inttoptr i64 %5579 to double*
  store double %5584, double* %5585
  %5586 = load i64, i64* %RBP
  %5587 = sub i64 %5586, 16
  %5588 = bitcast %union.vec128_t* %XMM0 to i8*
  %5589 = load i64, i64* %PC
  %5590 = add i64 %5589, 5
  store i64 %5590, i64* %PC
  %5591 = bitcast i8* %5588 to double*
  %5592 = load double, double* %5591, align 1
  %5593 = inttoptr i64 %5587 to double*
  store double %5592, double* %5593
  %5594 = load i64, i64* %RBP
  %5595 = sub i64 %5594, 32
  %5596 = bitcast %union.vec128_t* %XMM0 to i8*
  %5597 = load i64, i64* %PC
  %5598 = add i64 %5597, 5
  store i64 %5598, i64* %PC
  %5599 = bitcast i8* %5596 to double*
  %5600 = load double, double* %5599, align 1
  %5601 = inttoptr i64 %5595 to double*
  store double %5600, double* %5601
  %5602 = load i64, i64* %RBP
  %5603 = sub i64 %5602, 216
  %5604 = load i32, i32* %EAX
  %5605 = zext i32 %5604 to i64
  %5606 = load i64, i64* %PC
  %5607 = add i64 %5606, 6
  store i64 %5607, i64* %PC
  %5608 = inttoptr i64 %5603 to i32*
  store i32 %5604, i32* %5608
  %5609 = load i64, i64* %PC
  %5610 = add i64 %5609, 4340
  %5611 = load i64, i64* %PC
  %5612 = add i64 %5611, 5
  %5613 = load i64, i64* %PC
  %5614 = add i64 %5613, 5
  store i64 %5614, i64* %PC
  %5615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5616 = load i64, i64* %5615, align 8, !tbaa !2428
  %5617 = add i64 %5616, -8
  %5618 = inttoptr i64 %5617 to i64*
  store i64 %5612, i64* %5618
  store i64 %5617, i64* %5615, align 8, !tbaa !2428
  %5619 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5610, i64* %5619, align 8, !tbaa !2428
  %5620 = load i64, i64* %PC
  %5621 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %5620, %struct.Memory* %5490)
  %5622 = load i64, i64* %RBP
  %5623 = sub i64 %5622, 72
  %5624 = load i64, i64* %PC
  %5625 = add i64 %5624, 8
  store i64 %5625, i64* %PC
  %5626 = inttoptr i64 %5623 to i64*
  store i64 1, i64* %5626
  %5627 = load i64, i64* %RBP
  %5628 = sub i64 %5627, 220
  %5629 = load i32, i32* %EAX
  %5630 = zext i32 %5629 to i64
  %5631 = load i64, i64* %PC
  %5632 = add i64 %5631, 6
  store i64 %5632, i64* %PC
  %5633 = inttoptr i64 %5628 to i32*
  store i32 %5629, i32* %5633
  br label %block_4014ef

block_4006b2:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %5634 = load i64, i64* %PC
  %5635 = add i64 %5634, 10
  store i64 %5635, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %5636 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5637 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5638 = bitcast %union.vec128_t* %XMM0 to i8*
  %5639 = load i64, i64* %PC
  %5640 = add i64 %5639, 3
  store i64 %5640, i64* %PC
  %5641 = bitcast i8* %5637 to i64*
  %5642 = load i64, i64* %5641, align 1
  %5643 = getelementptr inbounds i8, i8* %5637, i64 8
  %5644 = bitcast i8* %5643 to i64*
  %5645 = load i64, i64* %5644, align 1
  %5646 = bitcast i8* %5638 to i64*
  %5647 = load i64, i64* %5646, align 1
  %5648 = getelementptr inbounds i8, i8* %5638, i64 8
  %5649 = bitcast i8* %5648 to i64*
  %5650 = load i64, i64* %5649, align 1
  %5651 = xor i64 %5647, %5642
  %5652 = xor i64 %5650, %5645
  %5653 = trunc i64 %5651 to i32
  %5654 = lshr i64 %5651, 32
  %5655 = trunc i64 %5654 to i32
  %5656 = bitcast i8* %5636 to i32*
  store i32 %5653, i32* %5656, align 1, !tbaa !2454
  %5657 = getelementptr inbounds i8, i8* %5636, i64 4
  %5658 = bitcast i8* %5657 to i32*
  store i32 %5655, i32* %5658, align 1, !tbaa !2454
  %5659 = trunc i64 %5652 to i32
  %5660 = getelementptr inbounds i8, i8* %5636, i64 8
  %5661 = bitcast i8* %5660 to i32*
  store i32 %5659, i32* %5661, align 1, !tbaa !2454
  %5662 = lshr i64 %5652, 32
  %5663 = trunc i64 %5662 to i32
  %5664 = getelementptr inbounds i8, i8* %5636, i64 12
  %5665 = bitcast i8* %5664 to i32*
  store i32 %5663, i32* %5665, align 1, !tbaa !2454
  %5666 = load i64, i64* %RBP
  %5667 = sub i64 %5666, 88
  %5668 = load i64, i64* %PC
  %5669 = add i64 %5668, 4
  store i64 %5669, i64* %PC
  %5670 = inttoptr i64 %5667 to i64*
  %5671 = load i64, i64* %5670
  store i64 %5671, i64* %RAX, align 8, !tbaa !2428
  %5672 = load i64, i64* %RAX
  %5673 = load i64, i64* %PC
  %5674 = add i64 %5673, 4
  store i64 %5674, i64* %PC
  %5675 = shl i64 %5672, 1
  %5676 = icmp slt i64 %5672, 0
  %5677 = icmp slt i64 %5675, 0
  %5678 = xor i1 %5676, %5677
  store i64 %5675, i64* %RAX, align 8, !tbaa !2428
  %5679 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %5680 = zext i1 %5676 to i8
  store i8 %5680, i8* %5679, align 1, !tbaa !2451
  %5681 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %5682 = trunc i64 %5675 to i32
  %5683 = and i32 %5682, 254
  %5684 = call i32 @llvm.ctpop.i32(i32 %5683) #16
  %5685 = trunc i32 %5684 to i8
  %5686 = and i8 %5685, 1
  %5687 = xor i8 %5686, 1
  store i8 %5687, i8* %5681, align 1, !tbaa !2451
  %5688 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %5688, align 1, !tbaa !2451
  %5689 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %5690 = icmp eq i64 %5675, 0
  %5691 = zext i1 %5690 to i8
  store i8 %5691, i8* %5689, align 1, !tbaa !2451
  %5692 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %5693 = lshr i64 %5675, 63
  %5694 = trunc i64 %5693 to i8
  store i8 %5694, i8* %5692, align 1, !tbaa !2451
  %5695 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %5696 = zext i1 %5678 to i8
  store i8 %5696, i8* %5695, align 1, !tbaa !2451
  %5697 = load i64, i64* %RBP
  %5698 = sub i64 %5697, 88
  %5699 = load i64, i64* %RAX
  %5700 = load i64, i64* %PC
  %5701 = add i64 %5700, 4
  store i64 %5701, i64* %PC
  %5702 = inttoptr i64 %5698 to i64*
  store i64 %5699, i64* %5702
  %5703 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5704 = load i64, i64* %PC
  %5705 = add i64 %5704, 9
  store i64 %5705, i64* %PC
  %5706 = load double, double* bitcast (%one_type* @one to double*)
  %5707 = bitcast i8* %5703 to double*
  store double %5706, double* %5707, align 1, !tbaa !2452
  %5708 = getelementptr inbounds i8, i8* %5703, i64 8
  %5709 = bitcast i8* %5708 to double*
  store double 0.000000e+00, double* %5709, align 1, !tbaa !2452
  %5710 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5711 = load i64, i64* %RBP
  %5712 = sub i64 %5711, 88
  %5713 = load i64, i64* %PC
  %5714 = add i64 %5713, 6
  store i64 %5714, i64* %PC
  %5715 = inttoptr i64 %5712 to i64*
  %5716 = load i64, i64* %5715
  %5717 = sitofp i64 %5716 to double
  %5718 = bitcast i8* %5710 to double*
  store double %5717, double* %5718, align 1, !tbaa !2452
  %5719 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5720 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5721 = bitcast %union.vec128_t* %XMM2 to i8*
  %5722 = load i64, i64* %PC
  %5723 = add i64 %5722, 4
  store i64 %5723, i64* %PC
  %5724 = bitcast i8* %5720 to double*
  %5725 = load double, double* %5724, align 1
  %5726 = getelementptr inbounds i8, i8* %5720, i64 8
  %5727 = bitcast i8* %5726 to i64*
  %5728 = load i64, i64* %5727, align 1
  %5729 = bitcast i8* %5721 to double*
  %5730 = load double, double* %5729, align 1
  %5731 = fdiv double %5725, %5730
  %5732 = bitcast i8* %5719 to double*
  store double %5731, double* %5732, align 1, !tbaa !2452
  %5733 = getelementptr inbounds i8, i8* %5719, i64 8
  %5734 = bitcast i8* %5733 to i64*
  store i64 %5728, i64* %5734, align 1, !tbaa !2452
  %5735 = load i64, i64* %RBP
  %5736 = sub i64 %5735, 48
  %5737 = bitcast %union.vec128_t* %XMM1 to i8*
  %5738 = load i64, i64* %PC
  %5739 = add i64 %5738, 5
  store i64 %5739, i64* %PC
  %5740 = bitcast i8* %5737 to double*
  %5741 = load double, double* %5740, align 1
  %5742 = inttoptr i64 %5736 to double*
  store double %5741, double* %5742
  %5743 = load i64, i64* %RBP
  %5744 = sub i64 %5743, 16
  %5745 = bitcast %union.vec128_t* %XMM0 to i8*
  %5746 = load i64, i64* %PC
  %5747 = add i64 %5746, 5
  store i64 %5747, i64* %PC
  %5748 = bitcast i8* %5745 to double*
  %5749 = load double, double* %5748, align 1
  %5750 = inttoptr i64 %5744 to double*
  store double %5749, double* %5750
  %5751 = load i64, i64* %RBP
  %5752 = sub i64 %5751, 32
  %5753 = bitcast %union.vec128_t* %XMM0 to i8*
  %5754 = load i64, i64* %PC
  %5755 = add i64 %5754, 5
  store i64 %5755, i64* %PC
  %5756 = bitcast i8* %5753 to double*
  %5757 = load double, double* %5756, align 1
  %5758 = inttoptr i64 %5752 to double*
  store double %5757, double* %5758
  %5759 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5760 = load i64, i64* %PC
  %5761 = add i64 %5760, 9
  store i64 %5761, i64* %PC
  %5762 = load double, double* bitcast (%one_type* @one to double*)
  %5763 = bitcast i8* %5759 to double*
  store double %5762, double* %5763, align 1, !tbaa !2452
  %5764 = getelementptr inbounds i8, i8* %5759, i64 8
  %5765 = bitcast i8* %5764 to double*
  store double 0.000000e+00, double* %5765, align 1, !tbaa !2452
  %5766 = load i64, i64* %RBP
  %5767 = sub i64 %5766, 40
  %5768 = bitcast %union.vec128_t* %XMM0 to i8*
  %5769 = load i64, i64* %PC
  %5770 = add i64 %5769, 5
  store i64 %5770, i64* %PC
  %5771 = bitcast i8* %5768 to double*
  %5772 = load double, double* %5771, align 1
  %5773 = inttoptr i64 %5767 to double*
  store double %5772, double* %5773
  %5774 = load i64, i64* %PC
  %5775 = add i64 %5774, 7893
  %5776 = load i64, i64* %PC
  %5777 = add i64 %5776, 5
  %5778 = load i64, i64* %PC
  %5779 = add i64 %5778, 5
  store i64 %5779, i64* %PC
  %5780 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5781 = load i64, i64* %5780, align 8, !tbaa !2428
  %5782 = add i64 %5781, -8
  %5783 = inttoptr i64 %5782 to i64*
  store i64 %5777, i64* %5783
  store i64 %5782, i64* %5780, align 8, !tbaa !2428
  %5784 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5775, i64* %5784, align 8, !tbaa !2428
  %5785 = load i64, i64* %PC
  %5786 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %5785, %struct.Memory* %9147)
  %5787 = load i64, i64* %RBP
  %5788 = sub i64 %5787, 72
  %5789 = load i64, i64* %PC
  %5790 = add i64 %5789, 8
  store i64 %5790, i64* %PC
  %5791 = inttoptr i64 %5788 to i64*
  store i64 1, i64* %5791
  %5792 = load i64, i64* %RBP
  %5793 = sub i64 %5792, 116
  %5794 = load i32, i32* %EAX
  %5795 = zext i32 %5794 to i64
  %5796 = load i64, i64* %PC
  %5797 = add i64 %5796, 3
  store i64 %5797, i64* %PC
  %5798 = inttoptr i64 %5793 to i32*
  store i32 %5794, i32* %5798
  br label %block_40070b

block_400f2f:                                     ; preds = %block_400e64
  %5799 = load i64, i64* %PC
  %5800 = add i64 %5799, 10
  store i64 %5800, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %5801 = load i64, i64* %PC
  %5802 = add i64 %5801, 5783
  %5803 = load i64, i64* %PC
  %5804 = add i64 %5803, 5
  %5805 = load i64, i64* %PC
  %5806 = add i64 %5805, 5
  store i64 %5806, i64* %PC
  %5807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %5808 = load i64, i64* %5807, align 8, !tbaa !2428
  %5809 = add i64 %5808, -8
  %5810 = inttoptr i64 %5809 to i64*
  store i64 %5804, i64* %5810
  store i64 %5809, i64* %5807, align 8, !tbaa !2428
  %5811 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %5802, i64* %5811, align 8, !tbaa !2428
  %5812 = load i64, i64* %PC
  %5813 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %5812, %struct.Memory* %MEMORY.1)
  %5814 = load i64, i64* %PC
  %5815 = add i64 %5814, 10
  store i64 %5815, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 462), i64* %RDI, align 8, !tbaa !2428
  %5816 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %5817 = load i64, i64* %PC
  %5818 = add i64 %5817, 8
  store i64 %5818, i64* %PC
  %5819 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 72) to double*)
  %5820 = bitcast i8* %5816 to double*
  store double %5819, double* %5820, align 1, !tbaa !2452
  %5821 = getelementptr inbounds i8, i8* %5816, i64 8
  %5822 = bitcast i8* %5821 to double*
  store double 0.000000e+00, double* %5822, align 1, !tbaa !2452
  %5823 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %5824 = load i64, i64* %PC
  %5825 = add i64 %5824, 8
  store i64 %5825, i64* %PC
  %5826 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 112) to double*)
  %5827 = bitcast i8* %5823 to double*
  store double %5826, double* %5827, align 1, !tbaa !2452
  %5828 = getelementptr inbounds i8, i8* %5823, i64 8
  %5829 = bitcast i8* %5828 to double*
  store double 0.000000e+00, double* %5829, align 1, !tbaa !2452
  %5830 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %5831 = load i64, i64* %PC
  %5832 = add i64 %5831, 8
  store i64 %5832, i64* %PC
  %5833 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 120) to double*)
  %5834 = bitcast i8* %5830 to double*
  store double %5833, double* %5834, align 1, !tbaa !2452
  %5835 = getelementptr inbounds i8, i8* %5830, i64 8
  %5836 = bitcast i8* %5835 to double*
  store double 0.000000e+00, double* %5836, align 1, !tbaa !2452
  %5837 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5838 = load i64, i64* %PC
  %5839 = add i64 %5838, 9
  store i64 %5839, i64* %PC
  %5840 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %5841 = bitcast i8* %5837 to double*
  store double %5840, double* %5841, align 1, !tbaa !2452
  %5842 = getelementptr inbounds i8, i8* %5837, i64 8
  %5843 = bitcast i8* %5842 to double*
  store double 0.000000e+00, double* %5843, align 1, !tbaa !2452
  %5844 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5845 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5846 = load i64, i64* %PC
  %5847 = add i64 %5846, 9
  store i64 %5847, i64* %PC
  %5848 = bitcast i8* %5845 to double*
  %5849 = load double, double* %5848, align 1
  %5850 = getelementptr inbounds i8, i8* %5845, i64 8
  %5851 = bitcast i8* %5850 to i64*
  %5852 = load i64, i64* %5851, align 1
  %5853 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %5854 = fmul double %5849, %5853
  %5855 = bitcast i8* %5844 to double*
  store double %5854, double* %5855, align 1, !tbaa !2452
  %5856 = getelementptr inbounds i8, i8* %5844, i64 8
  %5857 = bitcast i8* %5856 to i64*
  store i64 %5852, i64* %5857, align 1, !tbaa !2452
  %5858 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5859 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5860 = load i64, i64* %PC
  %5861 = add i64 %5860, 9
  store i64 %5861, i64* %PC
  %5862 = bitcast i8* %5859 to double*
  %5863 = load double, double* %5862, align 1
  %5864 = getelementptr inbounds i8, i8* %5859, i64 8
  %5865 = bitcast i8* %5864 to i64*
  %5866 = load i64, i64* %5865, align 1
  %5867 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %5868 = fsub double %5863, %5867
  %5869 = bitcast i8* %5858 to double*
  store double %5868, double* %5869, align 1, !tbaa !2452
  %5870 = getelementptr inbounds i8, i8* %5858, i64 8
  %5871 = bitcast i8* %5870 to i64*
  store i64 %5866, i64* %5871, align 1, !tbaa !2452
  %5872 = bitcast %union.vec128_t* %XMM3 to i8*
  %5873 = load i64, i64* %PC
  %5874 = add i64 %5873, 9
  store i64 %5874, i64* %PC
  %5875 = bitcast i8* %5872 to double*
  %5876 = load double, double* %5875, align 1
  store double %5876, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %5877 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5878 = load i64, i64* %PC
  %5879 = add i64 %5878, 9
  store i64 %5879, i64* %PC
  %5880 = load double, double* bitcast (%piref_type* @piref to double*)
  %5881 = bitcast i8* %5877 to double*
  store double %5880, double* %5881, align 1, !tbaa !2452
  %5882 = getelementptr inbounds i8, i8* %5877, i64 8
  %5883 = bitcast i8* %5882 to double*
  store double 0.000000e+00, double* %5883, align 1, !tbaa !2452
  %5884 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5885 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5886 = load i64, i64* %PC
  %5887 = add i64 %5886, 9
  store i64 %5887, i64* %PC
  %5888 = bitcast i8* %5885 to double*
  %5889 = load double, double* %5888, align 1
  %5890 = getelementptr inbounds i8, i8* %5885, i64 8
  %5891 = bitcast i8* %5890 to i64*
  %5892 = load i64, i64* %5891, align 1
  %5893 = load double, double* bitcast (%three_type* @three to double*)
  %5894 = fdiv double %5889, %5893
  %5895 = bitcast i8* %5884 to double*
  store double %5894, double* %5895, align 1, !tbaa !2452
  %5896 = getelementptr inbounds i8, i8* %5884, i64 8
  %5897 = bitcast i8* %5896 to i64*
  store i64 %5892, i64* %5897, align 1, !tbaa !2452
  %5898 = load i64, i64* %RBP
  %5899 = sub i64 %5898, 24
  %5900 = bitcast %union.vec128_t* %XMM3 to i8*
  %5901 = load i64, i64* %PC
  %5902 = add i64 %5901, 5
  store i64 %5902, i64* %PC
  %5903 = bitcast i8* %5900 to double*
  %5904 = load double, double* %5903, align 1
  %5905 = inttoptr i64 %5899 to double*
  store double %5904, double* %5905
  %5906 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5907 = load i64, i64* %RBP
  %5908 = sub i64 %5907, 24
  %5909 = load i64, i64* %PC
  %5910 = add i64 %5909, 5
  store i64 %5910, i64* %PC
  %5911 = inttoptr i64 %5908 to double*
  %5912 = load double, double* %5911
  %5913 = bitcast i8* %5906 to double*
  store double %5912, double* %5913, align 1, !tbaa !2452
  %5914 = getelementptr inbounds i8, i8* %5906, i64 8
  %5915 = bitcast i8* %5914 to double*
  store double 0.000000e+00, double* %5915, align 1, !tbaa !2452
  %5916 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5917 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5918 = load i64, i64* %RBP
  %5919 = sub i64 %5918, 24
  %5920 = load i64, i64* %PC
  %5921 = add i64 %5920, 5
  store i64 %5921, i64* %PC
  %5922 = bitcast i8* %5917 to double*
  %5923 = load double, double* %5922, align 1
  %5924 = getelementptr inbounds i8, i8* %5917, i64 8
  %5925 = bitcast i8* %5924 to i64*
  %5926 = load i64, i64* %5925, align 1
  %5927 = inttoptr i64 %5919 to double*
  %5928 = load double, double* %5927
  %5929 = fmul double %5923, %5928
  %5930 = bitcast i8* %5916 to double*
  store double %5929, double* %5930, align 1, !tbaa !2452
  %5931 = getelementptr inbounds i8, i8* %5916, i64 8
  %5932 = bitcast i8* %5931 to i64*
  store i64 %5926, i64* %5932, align 1, !tbaa !2452
  %5933 = load i64, i64* %RBP
  %5934 = sub i64 %5933, 40
  %5935 = bitcast %union.vec128_t* %XMM3 to i8*
  %5936 = load i64, i64* %PC
  %5937 = add i64 %5936, 5
  store i64 %5937, i64* %PC
  %5938 = bitcast i8* %5935 to double*
  %5939 = load double, double* %5938, align 1
  %5940 = inttoptr i64 %5934 to double*
  store double %5939, double* %5940
  %5941 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %5942 = load i64, i64* %RBP
  %5943 = sub i64 %5942, 24
  %5944 = load i64, i64* %PC
  %5945 = add i64 %5944, 5
  store i64 %5945, i64* %PC
  %5946 = inttoptr i64 %5943 to double*
  %5947 = load double, double* %5946
  %5948 = bitcast i8* %5941 to double*
  store double %5947, double* %5948, align 1, !tbaa !2452
  %5949 = getelementptr inbounds i8, i8* %5941, i64 8
  %5950 = bitcast i8* %5949 to double*
  store double 0.000000e+00, double* %5950, align 1, !tbaa !2452
  %5951 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5952 = load i64, i64* %PC
  %5953 = add i64 %5952, 9
  store i64 %5953, i64* %PC
  %5954 = load double, double* bitcast (%A6_type* @A6 to double*)
  %5955 = bitcast i8* %5951 to double*
  store double %5954, double* %5955, align 1, !tbaa !2452
  %5956 = getelementptr inbounds i8, i8* %5951, i64 8
  %5957 = bitcast i8* %5956 to double*
  store double 0.000000e+00, double* %5957, align 1, !tbaa !2452
  %5958 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5959 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5960 = load i64, i64* %RBP
  %5961 = sub i64 %5960, 40
  %5962 = load i64, i64* %PC
  %5963 = add i64 %5962, 5
  store i64 %5963, i64* %PC
  %5964 = bitcast i8* %5959 to double*
  %5965 = load double, double* %5964, align 1
  %5966 = getelementptr inbounds i8, i8* %5959, i64 8
  %5967 = bitcast i8* %5966 to i64*
  %5968 = load i64, i64* %5967, align 1
  %5969 = inttoptr i64 %5961 to double*
  %5970 = load double, double* %5969
  %5971 = fmul double %5965, %5970
  %5972 = bitcast i8* %5958 to double*
  store double %5971, double* %5972, align 1, !tbaa !2452
  %5973 = getelementptr inbounds i8, i8* %5958, i64 8
  %5974 = bitcast i8* %5973 to i64*
  store i64 %5968, i64* %5974, align 1, !tbaa !2452
  %5975 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5976 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5977 = load i64, i64* %PC
  %5978 = add i64 %5977, 9
  store i64 %5978, i64* %PC
  %5979 = bitcast i8* %5976 to double*
  %5980 = load double, double* %5979, align 1
  %5981 = getelementptr inbounds i8, i8* %5976, i64 8
  %5982 = bitcast i8* %5981 to i64*
  %5983 = load i64, i64* %5982, align 1
  %5984 = load double, double* bitcast (%A5_type* @A5 to double*)
  %5985 = fsub double %5980, %5984
  %5986 = bitcast i8* %5975 to double*
  store double %5985, double* %5986, align 1, !tbaa !2452
  %5987 = getelementptr inbounds i8, i8* %5975, i64 8
  %5988 = bitcast i8* %5987 to i64*
  store i64 %5983, i64* %5988, align 1, !tbaa !2452
  %5989 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5990 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %5991 = load i64, i64* %RBP
  %5992 = sub i64 %5991, 40
  %5993 = load i64, i64* %PC
  %5994 = add i64 %5993, 5
  store i64 %5994, i64* %PC
  %5995 = bitcast i8* %5990 to double*
  %5996 = load double, double* %5995, align 1
  %5997 = getelementptr inbounds i8, i8* %5990, i64 8
  %5998 = bitcast i8* %5997 to i64*
  %5999 = load i64, i64* %5998, align 1
  %6000 = inttoptr i64 %5992 to double*
  %6001 = load double, double* %6000
  %6002 = fmul double %5996, %6001
  %6003 = bitcast i8* %5989 to double*
  store double %6002, double* %6003, align 1, !tbaa !2452
  %6004 = getelementptr inbounds i8, i8* %5989, i64 8
  %6005 = bitcast i8* %6004 to i64*
  store i64 %5999, i64* %6005, align 1, !tbaa !2452
  %6006 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6007 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6008 = load i64, i64* %PC
  %6009 = add i64 %6008, 9
  store i64 %6009, i64* %PC
  %6010 = bitcast i8* %6007 to double*
  %6011 = load double, double* %6010, align 1
  %6012 = getelementptr inbounds i8, i8* %6007, i64 8
  %6013 = bitcast i8* %6012 to i64*
  %6014 = load i64, i64* %6013, align 1
  %6015 = load double, double* bitcast (%A4_type* @A4 to double*)
  %6016 = fadd double %6011, %6015
  %6017 = bitcast i8* %6006 to double*
  store double %6016, double* %6017, align 1, !tbaa !2452
  %6018 = getelementptr inbounds i8, i8* %6006, i64 8
  %6019 = bitcast i8* %6018 to i64*
  store i64 %6014, i64* %6019, align 1, !tbaa !2452
  %6020 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6021 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6022 = load i64, i64* %RBP
  %6023 = sub i64 %6022, 40
  %6024 = load i64, i64* %PC
  %6025 = add i64 %6024, 5
  store i64 %6025, i64* %PC
  %6026 = bitcast i8* %6021 to double*
  %6027 = load double, double* %6026, align 1
  %6028 = getelementptr inbounds i8, i8* %6021, i64 8
  %6029 = bitcast i8* %6028 to i64*
  %6030 = load i64, i64* %6029, align 1
  %6031 = inttoptr i64 %6023 to double*
  %6032 = load double, double* %6031
  %6033 = fmul double %6027, %6032
  %6034 = bitcast i8* %6020 to double*
  store double %6033, double* %6034, align 1, !tbaa !2452
  %6035 = getelementptr inbounds i8, i8* %6020, i64 8
  %6036 = bitcast i8* %6035 to i64*
  store i64 %6030, i64* %6036, align 1, !tbaa !2452
  %6037 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6038 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6039 = load i64, i64* %PC
  %6040 = add i64 %6039, 9
  store i64 %6040, i64* %PC
  %6041 = bitcast i8* %6038 to double*
  %6042 = load double, double* %6041, align 1
  %6043 = getelementptr inbounds i8, i8* %6038, i64 8
  %6044 = bitcast i8* %6043 to i64*
  %6045 = load i64, i64* %6044, align 1
  %6046 = load double, double* bitcast (%A3_type* @A3 to double*)
  %6047 = fsub double %6042, %6046
  %6048 = bitcast i8* %6037 to double*
  store double %6047, double* %6048, align 1, !tbaa !2452
  %6049 = getelementptr inbounds i8, i8* %6037, i64 8
  %6050 = bitcast i8* %6049 to i64*
  store i64 %6045, i64* %6050, align 1, !tbaa !2452
  %6051 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6052 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6053 = load i64, i64* %RBP
  %6054 = sub i64 %6053, 40
  %6055 = load i64, i64* %PC
  %6056 = add i64 %6055, 5
  store i64 %6056, i64* %PC
  %6057 = bitcast i8* %6052 to double*
  %6058 = load double, double* %6057, align 1
  %6059 = getelementptr inbounds i8, i8* %6052, i64 8
  %6060 = bitcast i8* %6059 to i64*
  %6061 = load i64, i64* %6060, align 1
  %6062 = inttoptr i64 %6054 to double*
  %6063 = load double, double* %6062
  %6064 = fmul double %6058, %6063
  %6065 = bitcast i8* %6051 to double*
  store double %6064, double* %6065, align 1, !tbaa !2452
  %6066 = getelementptr inbounds i8, i8* %6051, i64 8
  %6067 = bitcast i8* %6066 to i64*
  store i64 %6061, i64* %6067, align 1, !tbaa !2452
  %6068 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6069 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6070 = load i64, i64* %PC
  %6071 = add i64 %6070, 9
  store i64 %6071, i64* %PC
  %6072 = bitcast i8* %6069 to double*
  %6073 = load double, double* %6072, align 1
  %6074 = getelementptr inbounds i8, i8* %6069, i64 8
  %6075 = bitcast i8* %6074 to i64*
  %6076 = load i64, i64* %6075, align 1
  %6077 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %6078 = fadd double %6073, %6077
  %6079 = bitcast i8* %6068 to double*
  store double %6078, double* %6079, align 1, !tbaa !2452
  %6080 = getelementptr inbounds i8, i8* %6068, i64 8
  %6081 = bitcast i8* %6080 to i64*
  store i64 %6076, i64* %6081, align 1, !tbaa !2452
  %6082 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6083 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6084 = load i64, i64* %RBP
  %6085 = sub i64 %6084, 40
  %6086 = load i64, i64* %PC
  %6087 = add i64 %6086, 5
  store i64 %6087, i64* %PC
  %6088 = bitcast i8* %6083 to double*
  %6089 = load double, double* %6088, align 1
  %6090 = getelementptr inbounds i8, i8* %6083, i64 8
  %6091 = bitcast i8* %6090 to i64*
  %6092 = load i64, i64* %6091, align 1
  %6093 = inttoptr i64 %6085 to double*
  %6094 = load double, double* %6093
  %6095 = fmul double %6089, %6094
  %6096 = bitcast i8* %6082 to double*
  store double %6095, double* %6096, align 1, !tbaa !2452
  %6097 = getelementptr inbounds i8, i8* %6082, i64 8
  %6098 = bitcast i8* %6097 to i64*
  store i64 %6092, i64* %6098, align 1, !tbaa !2452
  %6099 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6100 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6101 = load i64, i64* %PC
  %6102 = add i64 %6101, 9
  store i64 %6102, i64* %PC
  %6103 = bitcast i8* %6100 to double*
  %6104 = load double, double* %6103, align 1
  %6105 = getelementptr inbounds i8, i8* %6100, i64 8
  %6106 = bitcast i8* %6105 to i64*
  %6107 = load i64, i64* %6106, align 1
  %6108 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %6109 = fadd double %6104, %6108
  %6110 = bitcast i8* %6099 to double*
  store double %6109, double* %6110, align 1, !tbaa !2452
  %6111 = getelementptr inbounds i8, i8* %6099, i64 8
  %6112 = bitcast i8* %6111 to i64*
  store i64 %6107, i64* %6112, align 1, !tbaa !2452
  %6113 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6114 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6115 = load i64, i64* %RBP
  %6116 = sub i64 %6115, 40
  %6117 = load i64, i64* %PC
  %6118 = add i64 %6117, 5
  store i64 %6118, i64* %PC
  %6119 = bitcast i8* %6114 to double*
  %6120 = load double, double* %6119, align 1
  %6121 = getelementptr inbounds i8, i8* %6114, i64 8
  %6122 = bitcast i8* %6121 to i64*
  %6123 = load i64, i64* %6122, align 1
  %6124 = inttoptr i64 %6116 to double*
  %6125 = load double, double* %6124
  %6126 = fmul double %6120, %6125
  %6127 = bitcast i8* %6113 to double*
  store double %6126, double* %6127, align 1, !tbaa !2452
  %6128 = getelementptr inbounds i8, i8* %6113, i64 8
  %6129 = bitcast i8* %6128 to i64*
  store i64 %6123, i64* %6129, align 1, !tbaa !2452
  %6130 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6131 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6132 = load i64, i64* %PC
  %6133 = add i64 %6132, 9
  store i64 %6133, i64* %PC
  %6134 = bitcast i8* %6131 to double*
  %6135 = load double, double* %6134, align 1
  %6136 = getelementptr inbounds i8, i8* %6131, i64 8
  %6137 = bitcast i8* %6136 to i64*
  %6138 = load i64, i64* %6137, align 1
  %6139 = load double, double* bitcast (%one_type* @one to double*)
  %6140 = fadd double %6135, %6139
  %6141 = bitcast i8* %6130 to double*
  store double %6140, double* %6141, align 1, !tbaa !2452
  %6142 = getelementptr inbounds i8, i8* %6130, i64 8
  %6143 = bitcast i8* %6142 to i64*
  store i64 %6138, i64* %6143, align 1, !tbaa !2452
  %6144 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6145 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6146 = bitcast %union.vec128_t* %XMM4 to i8*
  %6147 = load i64, i64* %PC
  %6148 = add i64 %6147, 4
  store i64 %6148, i64* %PC
  %6149 = bitcast i8* %6145 to double*
  %6150 = load double, double* %6149, align 1
  %6151 = getelementptr inbounds i8, i8* %6145, i64 8
  %6152 = bitcast i8* %6151 to i64*
  %6153 = load i64, i64* %6152, align 1
  %6154 = bitcast i8* %6146 to double*
  %6155 = load double, double* %6154, align 1
  %6156 = fmul double %6150, %6155
  %6157 = bitcast i8* %6144 to double*
  store double %6156, double* %6157, align 1, !tbaa !2452
  %6158 = getelementptr inbounds i8, i8* %6144, i64 8
  %6159 = bitcast i8* %6158 to i64*
  store i64 %6153, i64* %6159, align 1, !tbaa !2452
  %6160 = bitcast %union.vec128_t* %XMM3 to i8*
  %6161 = load i64, i64* %PC
  %6162 = add i64 %6161, 9
  store i64 %6162, i64* %PC
  %6163 = bitcast i8* %6160 to double*
  %6164 = load double, double* %6163, align 1
  store double %6164, double* bitcast (%sa_type* @sa to double*)
  %6165 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6166 = load i64, i64* %PC
  %6167 = add i64 %6166, 9
  store i64 %6167, i64* %PC
  %6168 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %6169 = bitcast i8* %6165 to double*
  store double %6168, double* %6169, align 1, !tbaa !2452
  %6170 = getelementptr inbounds i8, i8* %6165, i64 8
  %6171 = bitcast i8* %6170 to double*
  store double 0.000000e+00, double* %6171, align 1, !tbaa !2452
  %6172 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6173 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6174 = bitcast %union.vec128_t* %XMM2 to i8*
  %6175 = load i64, i64* %PC
  %6176 = add i64 %6175, 4
  store i64 %6176, i64* %PC
  %6177 = bitcast i8* %6173 to double*
  %6178 = load double, double* %6177, align 1
  %6179 = getelementptr inbounds i8, i8* %6173, i64 8
  %6180 = bitcast i8* %6179 to i64*
  %6181 = load i64, i64* %6180, align 1
  %6182 = bitcast i8* %6174 to double*
  %6183 = load double, double* %6182, align 1
  %6184 = fdiv double %6178, %6183
  %6185 = bitcast i8* %6172 to double*
  store double %6184, double* %6185, align 1, !tbaa !2452
  %6186 = getelementptr inbounds i8, i8* %6172, i64 8
  %6187 = bitcast i8* %6186 to i64*
  store i64 %6181, i64* %6187, align 1, !tbaa !2452
  %6188 = bitcast %union.vec128_t* %XMM3 to i8*
  %6189 = load i64, i64* %PC
  %6190 = add i64 %6189, 9
  store i64 %6190, i64* %PC
  %6191 = bitcast i8* %6188 to double*
  %6192 = load double, double* %6191, align 1
  store double %6192, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 80) to double*)
  %6193 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6194 = load i64, i64* %RBP
  %6195 = sub i64 %6194, 48
  %6196 = load i64, i64* %PC
  %6197 = add i64 %6196, 5
  store i64 %6197, i64* %PC
  %6198 = inttoptr i64 %6195 to double*
  %6199 = load double, double* %6198
  %6200 = bitcast i8* %6193 to double*
  store double %6199, double* %6200, align 1, !tbaa !2452
  %6201 = getelementptr inbounds i8, i8* %6193, i64 8
  %6202 = bitcast i8* %6201 to double*
  store double 0.000000e+00, double* %6202, align 1, !tbaa !2452
  %6203 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6204 = load i64, i64* %PC
  %6205 = add i64 %6204, 9
  store i64 %6205, i64* %PC
  %6206 = load double, double* bitcast (%sa_type* @sa to double*)
  %6207 = bitcast i8* %6203 to double*
  store double %6206, double* %6207, align 1, !tbaa !2452
  %6208 = getelementptr inbounds i8, i8* %6203, i64 8
  %6209 = bitcast i8* %6208 to double*
  store double 0.000000e+00, double* %6209, align 1, !tbaa !2452
  %6210 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6211 = load i64, i64* %PC
  %6212 = add i64 %6211, 9
  store i64 %6212, i64* %PC
  %6213 = load double, double* bitcast (%two_type* @two to double*)
  %6214 = bitcast i8* %6210 to double*
  store double %6213, double* %6214, align 1, !tbaa !2452
  %6215 = getelementptr inbounds i8, i8* %6210, i64 8
  %6216 = bitcast i8* %6215 to double*
  store double 0.000000e+00, double* %6216, align 1, !tbaa !2452
  %6217 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6218 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6219 = load i64, i64* %RBP
  %6220 = sub i64 %6219, 16
  %6221 = load i64, i64* %PC
  %6222 = add i64 %6221, 5
  store i64 %6222, i64* %PC
  %6223 = bitcast i8* %6218 to double*
  %6224 = load double, double* %6223, align 1
  %6225 = getelementptr inbounds i8, i8* %6218, i64 8
  %6226 = bitcast i8* %6225 to i64*
  %6227 = load i64, i64* %6226, align 1
  %6228 = inttoptr i64 %6220 to double*
  %6229 = load double, double* %6228
  %6230 = fmul double %6224, %6229
  %6231 = bitcast i8* %6217 to double*
  store double %6230, double* %6231, align 1, !tbaa !2452
  %6232 = getelementptr inbounds i8, i8* %6217, i64 8
  %6233 = bitcast i8* %6232 to i64*
  store i64 %6227, i64* %6233, align 1, !tbaa !2452
  %6234 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6235 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6236 = bitcast %union.vec128_t* %XMM4 to i8*
  %6237 = load i64, i64* %PC
  %6238 = add i64 %6237, 4
  store i64 %6238, i64* %PC
  %6239 = bitcast i8* %6235 to double*
  %6240 = load double, double* %6239, align 1
  %6241 = getelementptr inbounds i8, i8* %6235, i64 8
  %6242 = bitcast i8* %6241 to i64*
  %6243 = load i64, i64* %6242, align 1
  %6244 = bitcast i8* %6236 to double*
  %6245 = load double, double* %6244, align 1
  %6246 = fadd double %6240, %6245
  %6247 = bitcast i8* %6234 to double*
  store double %6246, double* %6247, align 1, !tbaa !2452
  %6248 = getelementptr inbounds i8, i8* %6234, i64 8
  %6249 = bitcast i8* %6248 to i64*
  store i64 %6243, i64* %6249, align 1, !tbaa !2452
  %6250 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6251 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6252 = bitcast %union.vec128_t* %XMM3 to i8*
  %6253 = load i64, i64* %PC
  %6254 = add i64 %6253, 4
  store i64 %6254, i64* %PC
  %6255 = bitcast i8* %6251 to double*
  %6256 = load double, double* %6255, align 1
  %6257 = getelementptr inbounds i8, i8* %6251, i64 8
  %6258 = bitcast i8* %6257 to i64*
  %6259 = load i64, i64* %6258, align 1
  %6260 = bitcast i8* %6252 to double*
  %6261 = load double, double* %6260, align 1
  %6262 = fmul double %6256, %6261
  %6263 = bitcast i8* %6250 to double*
  store double %6262, double* %6263, align 1, !tbaa !2452
  %6264 = getelementptr inbounds i8, i8* %6250, i64 8
  %6265 = bitcast i8* %6264 to i64*
  store i64 %6259, i64* %6265, align 1, !tbaa !2452
  %6266 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6267 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6268 = load i64, i64* %PC
  %6269 = add i64 %6268, 9
  store i64 %6269, i64* %PC
  %6270 = bitcast i8* %6267 to double*
  %6271 = load double, double* %6270, align 1
  %6272 = getelementptr inbounds i8, i8* %6267, i64 8
  %6273 = bitcast i8* %6272 to i64*
  %6274 = load i64, i64* %6273, align 1
  %6275 = load double, double* bitcast (%two_type* @two to double*)
  %6276 = fdiv double %6271, %6275
  %6277 = bitcast i8* %6266 to double*
  store double %6276, double* %6277, align 1, !tbaa !2452
  %6278 = getelementptr inbounds i8, i8* %6266, i64 8
  %6279 = bitcast i8* %6278 to i64*
  store i64 %6274, i64* %6279, align 1, !tbaa !2452
  %6280 = bitcast %union.vec128_t* %XMM2 to i8*
  %6281 = load i64, i64* %PC
  %6282 = add i64 %6281, 9
  store i64 %6282, i64* %PC
  %6283 = bitcast i8* %6280 to double*
  %6284 = load double, double* %6283, align 1
  store double %6284, double* bitcast (%sa_type* @sa to double*)
  %6285 = bitcast %union.vec128_t* %XMM1 to i8*
  %6286 = load i64, i64* %PC
  %6287 = add i64 %6286, 9
  store i64 %6287, i64* %PC
  %6288 = bitcast i8* %6285 to double*
  %6289 = load double, double* %6288, align 1
  store double %6289, double* bitcast (%sb_type* @sb to double*)
  %6290 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6291 = load i64, i64* %PC
  %6292 = add i64 %6291, 9
  store i64 %6292, i64* %PC
  %6293 = load double, double* bitcast (%sa_type* @sa to double*)
  %6294 = bitcast i8* %6290 to double*
  store double %6293, double* %6294, align 1, !tbaa !2452
  %6295 = getelementptr inbounds i8, i8* %6290, i64 8
  %6296 = bitcast i8* %6295 to double*
  store double 0.000000e+00, double* %6296, align 1, !tbaa !2452
  %6297 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6298 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6299 = load i64, i64* %PC
  %6300 = add i64 %6299, 9
  store i64 %6300, i64* %PC
  %6301 = bitcast i8* %6298 to double*
  %6302 = load double, double* %6301, align 1
  %6303 = getelementptr inbounds i8, i8* %6298, i64 8
  %6304 = bitcast i8* %6303 to i64*
  %6305 = load i64, i64* %6304, align 1
  %6306 = load double, double* bitcast (%sb_type* @sb to double*)
  %6307 = fsub double %6302, %6306
  %6308 = bitcast i8* %6297 to double*
  store double %6307, double* %6308, align 1, !tbaa !2452
  %6309 = getelementptr inbounds i8, i8* %6297, i64 8
  %6310 = bitcast i8* %6309 to i64*
  store i64 %6305, i64* %6310, align 1, !tbaa !2452
  %6311 = bitcast %union.vec128_t* %XMM1 to i8*
  %6312 = load i64, i64* %PC
  %6313 = add i64 %6312, 9
  store i64 %6313, i64* %PC
  %6314 = bitcast i8* %6311 to double*
  %6315 = load double, double* %6314, align 1
  store double %6315, double* bitcast (%sc_type* @sc to double*)
  %6316 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6317 = load i64, i64* %PC
  %6318 = add i64 %6317, 9
  store i64 %6318, i64* %PC
  %6319 = load double, double* bitcast (%one_type* @one to double*)
  %6320 = bitcast i8* %6316 to double*
  store double %6319, double* %6320, align 1, !tbaa !2452
  %6321 = getelementptr inbounds i8, i8* %6316, i64 8
  %6322 = bitcast i8* %6321 to double*
  store double 0.000000e+00, double* %6322, align 1, !tbaa !2452
  %6323 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6324 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6325 = load i64, i64* %PC
  %6326 = add i64 %6325, 9
  store i64 %6326, i64* %PC
  %6327 = bitcast i8* %6324 to double*
  %6328 = load double, double* %6327, align 1
  %6329 = getelementptr inbounds i8, i8* %6324, i64 8
  %6330 = bitcast i8* %6329 to i64*
  %6331 = load i64, i64* %6330, align 1
  %6332 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 80) to double*)
  %6333 = fdiv double %6328, %6332
  %6334 = bitcast i8* %6323 to double*
  store double %6333, double* %6334, align 1, !tbaa !2452
  %6335 = getelementptr inbounds i8, i8* %6323, i64 8
  %6336 = bitcast i8* %6335 to i64*
  store i64 %6331, i64* %6336, align 1, !tbaa !2452
  %6337 = bitcast %union.vec128_t* %XMM1 to i8*
  %6338 = load i64, i64* %PC
  %6339 = add i64 %6338, 9
  store i64 %6339, i64* %PC
  %6340 = bitcast i8* %6337 to double*
  %6341 = load double, double* %6340, align 1
  store double %6341, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 88) to double*)
  %6342 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6343 = bitcast %union.vec128_t* %XMM0 to i8*
  %6344 = load i64, i64* %PC
  %6345 = add i64 %6344, 3
  store i64 %6345, i64* %PC
  %6346 = bitcast i8* %6343 to <2 x i32>*
  %6347 = load <2 x i32>, <2 x i32>* %6346, align 1
  %6348 = getelementptr inbounds i8, i8* %6343, i64 8
  %6349 = bitcast i8* %6348 to <2 x i32>*
  %6350 = load <2 x i32>, <2 x i32>* %6349, align 1
  %6351 = extractelement <2 x i32> %6347, i32 0
  %6352 = bitcast i8* %6342 to i32*
  store i32 %6351, i32* %6352, align 1, !tbaa !2455
  %6353 = extractelement <2 x i32> %6347, i32 1
  %6354 = getelementptr inbounds i8, i8* %6342, i64 4
  %6355 = bitcast i8* %6354 to i32*
  store i32 %6353, i32* %6355, align 1, !tbaa !2455
  %6356 = extractelement <2 x i32> %6350, i32 0
  %6357 = getelementptr inbounds i8, i8* %6342, i64 8
  %6358 = bitcast i8* %6357 to i32*
  store i32 %6356, i32* %6358, align 1, !tbaa !2455
  %6359 = extractelement <2 x i32> %6350, i32 1
  %6360 = getelementptr inbounds i8, i8* %6342, i64 12
  %6361 = bitcast i8* %6360 to i32*
  store i32 %6359, i32* %6361, align 1, !tbaa !2455
  %6362 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6363 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6364 = load i64, i64* %PC
  %6365 = add i64 %6364, 9
  store i64 %6365, i64* %PC
  %6366 = bitcast i8* %6363 to double*
  %6367 = load double, double* %6366, align 1
  %6368 = getelementptr inbounds i8, i8* %6363, i64 8
  %6369 = bitcast i8* %6368 to i64*
  %6370 = load i64, i64* %6369, align 1
  %6371 = load double, double* bitcast (%sc_type* @sc to double*)
  %6372 = fmul double %6367, %6371
  %6373 = bitcast i8* %6362 to double*
  store double %6372, double* %6373, align 1, !tbaa !2452
  %6374 = getelementptr inbounds i8, i8* %6362, i64 8
  %6375 = bitcast i8* %6374 to i64*
  store i64 %6370, i64* %6375, align 1, !tbaa !2452
  %6376 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6377 = bitcast %union.vec128_t* %XMM0 to i8*
  %6378 = load i64, i64* %PC
  %6379 = add i64 %6378, 3
  store i64 %6379, i64* %PC
  %6380 = bitcast i8* %6377 to <2 x i32>*
  %6381 = load <2 x i32>, <2 x i32>* %6380, align 1
  %6382 = getelementptr inbounds i8, i8* %6377, i64 8
  %6383 = bitcast i8* %6382 to <2 x i32>*
  %6384 = load <2 x i32>, <2 x i32>* %6383, align 1
  %6385 = extractelement <2 x i32> %6381, i32 0
  %6386 = bitcast i8* %6376 to i32*
  store i32 %6385, i32* %6386, align 1, !tbaa !2455
  %6387 = extractelement <2 x i32> %6381, i32 1
  %6388 = getelementptr inbounds i8, i8* %6376, i64 4
  %6389 = bitcast i8* %6388 to i32*
  store i32 %6387, i32* %6389, align 1, !tbaa !2455
  %6390 = extractelement <2 x i32> %6384, i32 0
  %6391 = getelementptr inbounds i8, i8* %6376, i64 8
  %6392 = bitcast i8* %6391 to i32*
  store i32 %6390, i32* %6392, align 1, !tbaa !2455
  %6393 = extractelement <2 x i32> %6384, i32 1
  %6394 = getelementptr inbounds i8, i8* %6376, i64 12
  %6395 = bitcast i8* %6394 to i32*
  store i32 %6393, i32* %6395, align 1, !tbaa !2455
  %6396 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6397 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6398 = load i64, i64* %PC
  %6399 = add i64 %6398, 9
  store i64 %6399, i64* %PC
  %6400 = bitcast i8* %6397 to double*
  %6401 = load double, double* %6400, align 1
  %6402 = getelementptr inbounds i8, i8* %6397, i64 8
  %6403 = bitcast i8* %6402 to i64*
  %6404 = load i64, i64* %6403, align 1
  %6405 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %6406 = fmul double %6401, %6405
  %6407 = bitcast i8* %6396 to double*
  store double %6406, double* %6407, align 1, !tbaa !2452
  %6408 = getelementptr inbounds i8, i8* %6396, i64 8
  %6409 = bitcast i8* %6408 to i64*
  store i64 %6404, i64* %6409, align 1, !tbaa !2452
  %6410 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6411 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6412 = load i64, i64* %PC
  %6413 = add i64 %6412, 9
  store i64 %6413, i64* %PC
  %6414 = bitcast i8* %6411 to double*
  %6415 = load double, double* %6414, align 1
  %6416 = getelementptr inbounds i8, i8* %6411, i64 8
  %6417 = bitcast i8* %6416 to i64*
  %6418 = load i64, i64* %6417, align 1
  %6419 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 88) to double*)
  %6420 = fmul double %6415, %6419
  %6421 = bitcast i8* %6410 to double*
  store double %6420, double* %6421, align 1, !tbaa !2452
  %6422 = getelementptr inbounds i8, i8* %6410, i64 8
  %6423 = bitcast i8* %6422 to i64*
  store i64 %6418, i64* %6423, align 1, !tbaa !2452
  %6424 = load i64, i64* %RBP
  %6425 = sub i64 %6424, 184
  %6426 = bitcast %union.vec128_t* %XMM0 to i8*
  %6427 = load i64, i64* %PC
  %6428 = add i64 %6427, 8
  store i64 %6428, i64* %PC
  %6429 = bitcast i8* %6426 to double*
  %6430 = load double, double* %6429, align 1
  %6431 = inttoptr i64 %6425 to double*
  store double %6430, double* %6431
  %6432 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6433 = bitcast %union.vec128_t* %XMM1 to i8*
  %6434 = load i64, i64* %PC
  %6435 = add i64 %6434, 3
  store i64 %6435, i64* %PC
  %6436 = bitcast i8* %6433 to <2 x i32>*
  %6437 = load <2 x i32>, <2 x i32>* %6436, align 1
  %6438 = getelementptr inbounds i8, i8* %6433, i64 8
  %6439 = bitcast i8* %6438 to <2 x i32>*
  %6440 = load <2 x i32>, <2 x i32>* %6439, align 1
  %6441 = extractelement <2 x i32> %6437, i32 0
  %6442 = bitcast i8* %6432 to i32*
  store i32 %6441, i32* %6442, align 1, !tbaa !2455
  %6443 = extractelement <2 x i32> %6437, i32 1
  %6444 = getelementptr inbounds i8, i8* %6432, i64 4
  %6445 = bitcast i8* %6444 to i32*
  store i32 %6443, i32* %6445, align 1, !tbaa !2455
  %6446 = extractelement <2 x i32> %6440, i32 0
  %6447 = getelementptr inbounds i8, i8* %6432, i64 8
  %6448 = bitcast i8* %6447 to i32*
  store i32 %6446, i32* %6448, align 1, !tbaa !2455
  %6449 = extractelement <2 x i32> %6440, i32 1
  %6450 = getelementptr inbounds i8, i8* %6432, i64 12
  %6451 = bitcast i8* %6450 to i32*
  store i32 %6449, i32* %6451, align 1, !tbaa !2455
  %6452 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6453 = bitcast %union.vec128_t* %XMM2 to i8*
  %6454 = load i64, i64* %PC
  %6455 = add i64 %6454, 3
  store i64 %6455, i64* %PC
  %6456 = bitcast i8* %6453 to <2 x i32>*
  %6457 = load <2 x i32>, <2 x i32>* %6456, align 1
  %6458 = getelementptr inbounds i8, i8* %6453, i64 8
  %6459 = bitcast i8* %6458 to <2 x i32>*
  %6460 = load <2 x i32>, <2 x i32>* %6459, align 1
  %6461 = extractelement <2 x i32> %6457, i32 0
  %6462 = bitcast i8* %6452 to i32*
  store i32 %6461, i32* %6462, align 1, !tbaa !2455
  %6463 = extractelement <2 x i32> %6457, i32 1
  %6464 = getelementptr inbounds i8, i8* %6452, i64 4
  %6465 = bitcast i8* %6464 to i32*
  store i32 %6463, i32* %6465, align 1, !tbaa !2455
  %6466 = extractelement <2 x i32> %6460, i32 0
  %6467 = getelementptr inbounds i8, i8* %6452, i64 8
  %6468 = bitcast i8* %6467 to i32*
  store i32 %6466, i32* %6468, align 1, !tbaa !2455
  %6469 = extractelement <2 x i32> %6460, i32 1
  %6470 = getelementptr inbounds i8, i8* %6452, i64 12
  %6471 = bitcast i8* %6470 to i32*
  store i32 %6469, i32* %6471, align 1, !tbaa !2455
  %6472 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6473 = load i64, i64* %RBP
  %6474 = sub i64 %6473, 184
  %6475 = load i64, i64* %PC
  %6476 = add i64 %6475, 8
  store i64 %6476, i64* %PC
  %6477 = inttoptr i64 %6474 to double*
  %6478 = load double, double* %6477
  %6479 = bitcast i8* %6472 to double*
  store double %6478, double* %6479, align 1, !tbaa !2452
  %6480 = getelementptr inbounds i8, i8* %6472, i64 8
  %6481 = bitcast i8* %6480 to double*
  store double 0.000000e+00, double* %6481, align 1, !tbaa !2452
  %6482 = load i64, i64* %RBP
  %6483 = sub i64 %6482, 188
  %6484 = load i32, i32* %EAX
  %6485 = zext i32 %6484 to i64
  %6486 = load i64, i64* %PC
  %6487 = add i64 %6486, 6
  store i64 %6487, i64* %PC
  %6488 = inttoptr i64 %6483 to i32*
  store i32 %6484, i32* %6488
  %6489 = load i64, i64* %PC
  %6490 = add i64 %6489, 2
  store i64 %6490, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %6491 = load i64, i64* %PC
  %6492 = sub i64 %6491, 3235
  %6493 = load i64, i64* %PC
  %6494 = add i64 %6493, 5
  %6495 = load i64, i64* %PC
  %6496 = add i64 %6495, 5
  store i64 %6496, i64* %PC
  %6497 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6498 = load i64, i64* %6497, align 8, !tbaa !2428
  %6499 = add i64 %6498, -8
  %6500 = inttoptr i64 %6499 to i64*
  store i64 %6494, i64* %6500
  store i64 %6499, i64* %6497, align 8, !tbaa !2428
  %6501 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6492, i64* %6501, align 8, !tbaa !2428
  %6502 = load i64, i64* %PC
  %6503 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %6502, %struct.Memory* %5813)
  %6504 = load i64, i64* %PC
  %6505 = add i64 %6504, 10
  store i64 %6505, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %6506 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6507 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6508 = bitcast %union.vec128_t* %XMM0 to i8*
  %6509 = load i64, i64* %PC
  %6510 = add i64 %6509, 3
  store i64 %6510, i64* %PC
  %6511 = bitcast i8* %6507 to i64*
  %6512 = load i64, i64* %6511, align 1
  %6513 = getelementptr inbounds i8, i8* %6507, i64 8
  %6514 = bitcast i8* %6513 to i64*
  %6515 = load i64, i64* %6514, align 1
  %6516 = bitcast i8* %6508 to i64*
  %6517 = load i64, i64* %6516, align 1
  %6518 = getelementptr inbounds i8, i8* %6508, i64 8
  %6519 = bitcast i8* %6518 to i64*
  %6520 = load i64, i64* %6519, align 1
  %6521 = xor i64 %6517, %6512
  %6522 = xor i64 %6520, %6515
  %6523 = trunc i64 %6521 to i32
  %6524 = lshr i64 %6521, 32
  %6525 = trunc i64 %6524 to i32
  %6526 = bitcast i8* %6506 to i32*
  store i32 %6523, i32* %6526, align 1, !tbaa !2454
  %6527 = getelementptr inbounds i8, i8* %6506, i64 4
  %6528 = bitcast i8* %6527 to i32*
  store i32 %6525, i32* %6528, align 1, !tbaa !2454
  %6529 = trunc i64 %6522 to i32
  %6530 = getelementptr inbounds i8, i8* %6506, i64 8
  %6531 = bitcast i8* %6530 to i32*
  store i32 %6529, i32* %6531, align 1, !tbaa !2454
  %6532 = lshr i64 %6522, 32
  %6533 = trunc i64 %6532 to i32
  %6534 = getelementptr inbounds i8, i8* %6506, i64 12
  %6535 = bitcast i8* %6534 to i32*
  store i32 %6533, i32* %6535, align 1, !tbaa !2454
  %6536 = load i64, i64* %PC
  %6537 = add i64 %6536, 10
  store i64 %6537, i64* %PC
  store i64 -9223372036854775808, i64* %RCX, align 8, !tbaa !2428
  %6538 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6539 = load i64, i64* %PC
  %6540 = add i64 %6539, 9
  store i64 %6540, i64* %PC
  %6541 = load double, double* bitcast (%A3_type* @A3 to double*)
  %6542 = bitcast i8* %6538 to double*
  store double %6541, double* %6542, align 1, !tbaa !2452
  %6543 = getelementptr inbounds i8, i8* %6538, i64 8
  %6544 = bitcast i8* %6543 to double*
  store double 0.000000e+00, double* %6544, align 1, !tbaa !2452
  %6545 = bitcast %union.vec128_t* %XMM1 to i8*
  %6546 = load i64, i64* %PC
  %6547 = add i64 %6546, 5
  store i64 %6547, i64* %PC
  %6548 = bitcast i8* %6545 to i64*
  %6549 = load i64, i64* %6548, align 1
  store i64 %6549, i64* %RDX, align 1, !tbaa !2428
  %6550 = load i64, i64* %RDX
  %6551 = load i64, i64* %RCX
  %6552 = load i64, i64* %PC
  %6553 = add i64 %6552, 3
  store i64 %6553, i64* %PC
  %6554 = xor i64 %6551, %6550
  store i64 %6554, i64* %RDX, align 8, !tbaa !2428
  %6555 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6555, align 1, !tbaa !2432
  %6556 = trunc i64 %6554 to i32
  %6557 = and i32 %6556, 255
  %6558 = call i32 @llvm.ctpop.i32(i32 %6557) #16
  %6559 = trunc i32 %6558 to i8
  %6560 = and i8 %6559, 1
  %6561 = xor i8 %6560, 1
  %6562 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6561, i8* %6562, align 1, !tbaa !2446
  %6563 = icmp eq i64 %6554, 0
  %6564 = zext i1 %6563 to i8
  %6565 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6564, i8* %6565, align 1, !tbaa !2447
  %6566 = lshr i64 %6554, 63
  %6567 = trunc i64 %6566 to i8
  %6568 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6567, i8* %6568, align 1, !tbaa !2448
  %6569 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6569, align 1, !tbaa !2449
  %6570 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6570, align 1, !tbaa !2450
  %6571 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6572 = load i64, i64* %RDX
  %6573 = load i64, i64* %PC
  %6574 = add i64 %6573, 5
  store i64 %6574, i64* %PC
  %6575 = bitcast i8* %6571 to i64*
  store i64 %6572, i64* %6575, align 1, !tbaa !2428
  %6576 = getelementptr inbounds i8, i8* %6571, i64 8
  %6577 = bitcast i8* %6576 to i64*
  store i64 0, i64* %6577, align 1, !tbaa !2428
  %6578 = bitcast %union.vec128_t* %XMM1 to i8*
  %6579 = load i64, i64* %PC
  %6580 = add i64 %6579, 9
  store i64 %6580, i64* %PC
  %6581 = bitcast i8* %6578 to double*
  %6582 = load double, double* %6581, align 1
  store double %6582, double* bitcast (%A3_type* @A3 to double*)
  %6583 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6584 = load i64, i64* %PC
  %6585 = add i64 %6584, 9
  store i64 %6585, i64* %PC
  %6586 = load double, double* bitcast (%A5_type* @A5 to double*)
  %6587 = bitcast i8* %6583 to double*
  store double %6586, double* %6587, align 1, !tbaa !2452
  %6588 = getelementptr inbounds i8, i8* %6583, i64 8
  %6589 = bitcast i8* %6588 to double*
  store double 0.000000e+00, double* %6589, align 1, !tbaa !2452
  %6590 = bitcast %union.vec128_t* %XMM1 to i8*
  %6591 = load i64, i64* %PC
  %6592 = add i64 %6591, 5
  store i64 %6592, i64* %PC
  %6593 = bitcast i8* %6590 to i64*
  %6594 = load i64, i64* %6593, align 1
  store i64 %6594, i64* %RDX, align 1, !tbaa !2428
  %6595 = load i64, i64* %RDX
  %6596 = load i64, i64* %RCX
  %6597 = load i64, i64* %PC
  %6598 = add i64 %6597, 3
  store i64 %6598, i64* %PC
  %6599 = xor i64 %6596, %6595
  store i64 %6599, i64* %RDX, align 8, !tbaa !2428
  %6600 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %6600, align 1, !tbaa !2432
  %6601 = trunc i64 %6599 to i32
  %6602 = and i32 %6601, 255
  %6603 = call i32 @llvm.ctpop.i32(i32 %6602) #16
  %6604 = trunc i32 %6603 to i8
  %6605 = and i8 %6604, 1
  %6606 = xor i8 %6605, 1
  %6607 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6606, i8* %6607, align 1, !tbaa !2446
  %6608 = icmp eq i64 %6599, 0
  %6609 = zext i1 %6608 to i8
  %6610 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6609, i8* %6610, align 1, !tbaa !2447
  %6611 = lshr i64 %6599, 63
  %6612 = trunc i64 %6611 to i8
  %6613 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6612, i8* %6613, align 1, !tbaa !2448
  %6614 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %6614, align 1, !tbaa !2449
  %6615 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %6615, align 1, !tbaa !2450
  %6616 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6617 = load i64, i64* %RDX
  %6618 = load i64, i64* %PC
  %6619 = add i64 %6618, 5
  store i64 %6619, i64* %PC
  %6620 = bitcast i8* %6616 to i64*
  store i64 %6617, i64* %6620, align 1, !tbaa !2428
  %6621 = getelementptr inbounds i8, i8* %6616, i64 8
  %6622 = bitcast i8* %6621 to i64*
  store i64 0, i64* %6622, align 1, !tbaa !2428
  %6623 = bitcast %union.vec128_t* %XMM1 to i8*
  %6624 = load i64, i64* %PC
  %6625 = add i64 %6624, 9
  store i64 %6625, i64* %PC
  %6626 = bitcast i8* %6623 to double*
  %6627 = load double, double* %6626, align 1
  store double %6627, double* bitcast (%A5_type* @A5 to double*)
  %6628 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6629 = load i64, i64* %PC
  %6630 = add i64 %6629, 9
  store i64 %6630, i64* %PC
  %6631 = load double, double* bitcast (%piref_type* @piref to double*)
  %6632 = bitcast i8* %6628 to double*
  store double %6631, double* %6632, align 1, !tbaa !2452
  %6633 = getelementptr inbounds i8, i8* %6628, i64 8
  %6634 = bitcast i8* %6633 to double*
  store double 0.000000e+00, double* %6634, align 1, !tbaa !2452
  %6635 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6636 = load i64, i64* %PC
  %6637 = add i64 %6636, 9
  store i64 %6637, i64* %PC
  %6638 = load double, double* bitcast (%three_type* @three to double*)
  %6639 = bitcast i8* %6635 to double*
  store double %6638, double* %6639, align 1, !tbaa !2452
  %6640 = getelementptr inbounds i8, i8* %6635, i64 8
  %6641 = bitcast i8* %6640 to double*
  store double 0.000000e+00, double* %6641, align 1, !tbaa !2452
  %6642 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6643 = load i64, i64* %RBP
  %6644 = sub i64 %6643, 80
  %6645 = load i64, i64* %PC
  %6646 = add i64 %6645, 6
  store i64 %6646, i64* %PC
  %6647 = inttoptr i64 %6644 to i64*
  %6648 = load i64, i64* %6647
  %6649 = sitofp i64 %6648 to double
  %6650 = bitcast i8* %6642 to double*
  store double %6649, double* %6650, align 1, !tbaa !2452
  %6651 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6652 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6653 = bitcast %union.vec128_t* %XMM3 to i8*
  %6654 = load i64, i64* %PC
  %6655 = add i64 %6654, 4
  store i64 %6655, i64* %PC
  %6656 = bitcast i8* %6652 to double*
  %6657 = load double, double* %6656, align 1
  %6658 = getelementptr inbounds i8, i8* %6652, i64 8
  %6659 = bitcast i8* %6658 to i64*
  %6660 = load i64, i64* %6659, align 1
  %6661 = bitcast i8* %6653 to double*
  %6662 = load double, double* %6661, align 1
  %6663 = fmul double %6657, %6662
  %6664 = bitcast i8* %6651 to double*
  store double %6663, double* %6664, align 1, !tbaa !2452
  %6665 = getelementptr inbounds i8, i8* %6651, i64 8
  %6666 = bitcast i8* %6665 to i64*
  store i64 %6660, i64* %6666, align 1, !tbaa !2452
  %6667 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6668 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6669 = bitcast %union.vec128_t* %XMM2 to i8*
  %6670 = load i64, i64* %PC
  %6671 = add i64 %6670, 4
  store i64 %6671, i64* %PC
  %6672 = bitcast i8* %6668 to double*
  %6673 = load double, double* %6672, align 1
  %6674 = getelementptr inbounds i8, i8* %6668, i64 8
  %6675 = bitcast i8* %6674 to i64*
  %6676 = load i64, i64* %6675, align 1
  %6677 = bitcast i8* %6669 to double*
  %6678 = load double, double* %6677, align 1
  %6679 = fdiv double %6673, %6678
  %6680 = bitcast i8* %6667 to double*
  store double %6679, double* %6680, align 1, !tbaa !2452
  %6681 = getelementptr inbounds i8, i8* %6667, i64 8
  %6682 = bitcast i8* %6681 to i64*
  store i64 %6676, i64* %6682, align 1, !tbaa !2452
  %6683 = load i64, i64* %RBP
  %6684 = sub i64 %6683, 48
  %6685 = bitcast %union.vec128_t* %XMM1 to i8*
  %6686 = load i64, i64* %PC
  %6687 = add i64 %6686, 5
  store i64 %6687, i64* %PC
  %6688 = bitcast i8* %6685 to double*
  %6689 = load double, double* %6688, align 1
  %6690 = inttoptr i64 %6684 to double*
  store double %6689, double* %6690
  %6691 = load i64, i64* %RBP
  %6692 = sub i64 %6691, 16
  %6693 = bitcast %union.vec128_t* %XMM0 to i8*
  %6694 = load i64, i64* %PC
  %6695 = add i64 %6694, 5
  store i64 %6695, i64* %PC
  %6696 = bitcast i8* %6693 to double*
  %6697 = load double, double* %6696, align 1
  %6698 = inttoptr i64 %6692 to double*
  store double %6697, double* %6698
  %6699 = load i64, i64* %RBP
  %6700 = sub i64 %6699, 32
  %6701 = bitcast %union.vec128_t* %XMM0 to i8*
  %6702 = load i64, i64* %PC
  %6703 = add i64 %6702, 5
  store i64 %6703, i64* %PC
  %6704 = bitcast i8* %6701 to double*
  %6705 = load double, double* %6704, align 1
  %6706 = inttoptr i64 %6700 to double*
  store double %6705, double* %6706
  %6707 = load i64, i64* %RBP
  %6708 = sub i64 %6707, 192
  %6709 = load i32, i32* %EAX
  %6710 = zext i32 %6709 to i64
  %6711 = load i64, i64* %PC
  %6712 = add i64 %6711, 6
  store i64 %6712, i64* %PC
  %6713 = inttoptr i64 %6708 to i32*
  store i32 %6709, i32* %6713
  %6714 = load i64, i64* %PC
  %6715 = add i64 %6714, 5214
  %6716 = load i64, i64* %PC
  %6717 = add i64 %6716, 5
  %6718 = load i64, i64* %PC
  %6719 = add i64 %6718, 5
  store i64 %6719, i64* %PC
  %6720 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %6721 = load i64, i64* %6720, align 8, !tbaa !2428
  %6722 = add i64 %6721, -8
  %6723 = inttoptr i64 %6722 to i64*
  store i64 %6717, i64* %6723
  store i64 %6722, i64* %6720, align 8, !tbaa !2428
  %6724 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %6715, i64* %6724, align 8, !tbaa !2428
  %6725 = load i64, i64* %PC
  %6726 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %6725, %struct.Memory* %6503)
  %6727 = load i64, i64* %RBP
  %6728 = sub i64 %6727, 72
  %6729 = load i64, i64* %PC
  %6730 = add i64 %6729, 8
  store i64 %6730, i64* %PC
  %6731 = inttoptr i64 %6728 to i64*
  store i64 1, i64* %6731
  %6732 = load i64, i64* %RBP
  %6733 = sub i64 %6732, 196
  %6734 = load i32, i32* %EAX
  %6735 = zext i32 %6734 to i64
  %6736 = load i64, i64* %PC
  %6737 = add i64 %6736, 6
  store i64 %6737, i64* %PC
  %6738 = inttoptr i64 %6733 to i32*
  store i32 %6734, i32* %6738
  br label %block_401185

block_400ade:                                     ; preds = %block_400aec, %block_4008c4
  %MEMORY.4 = phi %struct.Memory* [ %4334, %block_4008c4 ], [ %MEMORY.4, %block_400aec ]
  %6739 = load i64, i64* %RBP
  %6740 = sub i64 %6739, 72
  %6741 = load i64, i64* %PC
  %6742 = add i64 %6741, 4
  store i64 %6742, i64* %PC
  %6743 = inttoptr i64 %6740 to i64*
  %6744 = load i64, i64* %6743
  store i64 %6744, i64* %RAX, align 8, !tbaa !2428
  %6745 = load i64, i64* %RAX
  %6746 = load i64, i64* %RBP
  %6747 = sub i64 %6746, 80
  %6748 = load i64, i64* %PC
  %6749 = add i64 %6748, 4
  store i64 %6749, i64* %PC
  %6750 = inttoptr i64 %6747 to i64*
  %6751 = load i64, i64* %6750
  %6752 = sub i64 %6745, %6751
  %6753 = icmp ugt i64 %6751, %6745
  %6754 = zext i1 %6753 to i8
  %6755 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %6754, i8* %6755, align 1, !tbaa !2432
  %6756 = trunc i64 %6752 to i32
  %6757 = and i32 %6756, 255
  %6758 = call i32 @llvm.ctpop.i32(i32 %6757) #16
  %6759 = trunc i32 %6758 to i8
  %6760 = and i8 %6759, 1
  %6761 = xor i8 %6760, 1
  %6762 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %6761, i8* %6762, align 1, !tbaa !2446
  %6763 = xor i64 %6751, %6745
  %6764 = xor i64 %6763, %6752
  %6765 = lshr i64 %6764, 4
  %6766 = trunc i64 %6765 to i8
  %6767 = and i8 %6766, 1
  %6768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %6767, i8* %6768, align 1, !tbaa !2450
  %6769 = icmp eq i64 %6752, 0
  %6770 = zext i1 %6769 to i8
  %6771 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %6770, i8* %6771, align 1, !tbaa !2447
  %6772 = lshr i64 %6752, 63
  %6773 = trunc i64 %6772 to i8
  %6774 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %6773, i8* %6774, align 1, !tbaa !2448
  %6775 = lshr i64 %6745, 63
  %6776 = lshr i64 %6751, 63
  %6777 = xor i64 %6776, %6775
  %6778 = xor i64 %6772, %6775
  %6779 = add nuw nsw i64 %6778, %6777
  %6780 = icmp eq i64 %6779, 2
  %6781 = zext i1 %6780 to i8
  %6782 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %6781, i8* %6782, align 1, !tbaa !2449
  %6783 = load i64, i64* %PC
  %6784 = add i64 %6783, 79
  %6785 = load i64, i64* %PC
  %6786 = add i64 %6785, 6
  %6787 = load i64, i64* %PC
  %6788 = add i64 %6787, 6
  store i64 %6788, i64* %PC
  %6789 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %6790 = load i8, i8* %6789, align 1, !tbaa !2447
  %6791 = icmp eq i8 %6790, 0
  %6792 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %6793 = load i8, i8* %6792, align 1, !tbaa !2448
  %6794 = icmp ne i8 %6793, 0
  %6795 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %6796 = load i8, i8* %6795, align 1, !tbaa !2449
  %6797 = icmp ne i8 %6796, 0
  %6798 = xor i1 %6794, %6797
  %6799 = xor i1 %6798, true
  %6800 = and i1 %6791, %6799
  %6801 = zext i1 %6800 to i8
  store i8 %6801, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %6802 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %6803 = select i1 %6800, i64 %6784, i64 %6786
  store i64 %6803, i64* %6802, align 8, !tbaa !2428
  %6804 = load i8, i8* %BRANCH_TAKEN
  %6805 = icmp eq i8 %6804, 1
  %6806 = load i64, i64* %PC
  %6807 = add i64 %6806, 10
  store i64 %6807, i64* %PC
  br i1 %6805, label %block_400b35, label %block_400aec

block_401f87:                                     ; preds = %block_401f72
  %6808 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6809 = load i64, i64* %RBP
  %6810 = sub i64 %6809, 72
  %6811 = load i64, i64* %PC
  %6812 = add i64 %6811, 6
  store i64 %6812, i64* %PC
  %6813 = inttoptr i64 %6810 to i64*
  %6814 = load i64, i64* %6813
  %6815 = sitofp i64 %6814 to double
  %6816 = bitcast i8* %6808 to double*
  store double %6815, double* %6816, align 1, !tbaa !2452
  %6817 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6818 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6819 = load i64, i64* %RBP
  %6820 = sub i64 %6819, 48
  %6821 = load i64, i64* %PC
  %6822 = add i64 %6821, 5
  store i64 %6822, i64* %PC
  %6823 = bitcast i8* %6818 to double*
  %6824 = load double, double* %6823, align 1
  %6825 = getelementptr inbounds i8, i8* %6818, i64 8
  %6826 = bitcast i8* %6825 to i64*
  %6827 = load i64, i64* %6826, align 1
  %6828 = inttoptr i64 %6820 to double*
  %6829 = load double, double* %6828
  %6830 = fmul double %6824, %6829
  %6831 = bitcast i8* %6817 to double*
  store double %6830, double* %6831, align 1, !tbaa !2452
  %6832 = getelementptr inbounds i8, i8* %6817, i64 8
  %6833 = bitcast i8* %6832 to i64*
  store i64 %6827, i64* %6833, align 1, !tbaa !2452
  %6834 = load i64, i64* %RBP
  %6835 = sub i64 %6834, 24
  %6836 = bitcast %union.vec128_t* %XMM0 to i8*
  %6837 = load i64, i64* %PC
  %6838 = add i64 %6837, 5
  store i64 %6838, i64* %PC
  %6839 = bitcast i8* %6836 to double*
  %6840 = load double, double* %6839, align 1
  %6841 = inttoptr i64 %6835 to double*
  store double %6840, double* %6841
  %6842 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6843 = load i64, i64* %RBP
  %6844 = sub i64 %6843, 24
  %6845 = load i64, i64* %PC
  %6846 = add i64 %6845, 5
  store i64 %6846, i64* %PC
  %6847 = inttoptr i64 %6844 to double*
  %6848 = load double, double* %6847
  %6849 = bitcast i8* %6842 to double*
  store double %6848, double* %6849, align 1, !tbaa !2452
  %6850 = getelementptr inbounds i8, i8* %6842, i64 8
  %6851 = bitcast i8* %6850 to double*
  store double 0.000000e+00, double* %6851, align 1, !tbaa !2452
  %6852 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6853 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6854 = load i64, i64* %RBP
  %6855 = sub i64 %6854, 24
  %6856 = load i64, i64* %PC
  %6857 = add i64 %6856, 5
  store i64 %6857, i64* %PC
  %6858 = bitcast i8* %6853 to double*
  %6859 = load double, double* %6858, align 1
  %6860 = getelementptr inbounds i8, i8* %6853, i64 8
  %6861 = bitcast i8* %6860 to i64*
  %6862 = load i64, i64* %6861, align 1
  %6863 = inttoptr i64 %6855 to double*
  %6864 = load double, double* %6863
  %6865 = fmul double %6859, %6864
  %6866 = bitcast i8* %6852 to double*
  store double %6865, double* %6866, align 1, !tbaa !2452
  %6867 = getelementptr inbounds i8, i8* %6852, i64 8
  %6868 = bitcast i8* %6867 to i64*
  store i64 %6862, i64* %6868, align 1, !tbaa !2452
  %6869 = load i64, i64* %RBP
  %6870 = sub i64 %6869, 40
  %6871 = bitcast %union.vec128_t* %XMM0 to i8*
  %6872 = load i64, i64* %PC
  %6873 = add i64 %6872, 5
  store i64 %6873, i64* %PC
  %6874 = bitcast i8* %6871 to double*
  %6875 = load double, double* %6874, align 1
  %6876 = inttoptr i64 %6870 to double*
  store double %6875, double* %6876
  %6877 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %6878 = load i64, i64* %RBP
  %6879 = sub i64 %6878, 40
  %6880 = load i64, i64* %PC
  %6881 = add i64 %6880, 5
  store i64 %6881, i64* %PC
  %6882 = inttoptr i64 %6879 to double*
  %6883 = load double, double* %6882
  %6884 = bitcast i8* %6877 to double*
  store double %6883, double* %6884, align 1, !tbaa !2452
  %6885 = getelementptr inbounds i8, i8* %6877, i64 8
  %6886 = bitcast i8* %6885 to double*
  store double 0.000000e+00, double* %6886, align 1, !tbaa !2452
  %6887 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %6888 = load i64, i64* %RBP
  %6889 = sub i64 %6888, 40
  %6890 = load i64, i64* %PC
  %6891 = add i64 %6890, 5
  store i64 %6891, i64* %PC
  %6892 = inttoptr i64 %6889 to double*
  %6893 = load double, double* %6892
  %6894 = bitcast i8* %6887 to double*
  store double %6893, double* %6894, align 1, !tbaa !2452
  %6895 = getelementptr inbounds i8, i8* %6887, i64 8
  %6896 = bitcast i8* %6895 to double*
  store double 0.000000e+00, double* %6896, align 1, !tbaa !2452
  %6897 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %6898 = load i64, i64* %RBP
  %6899 = sub i64 %6898, 40
  %6900 = load i64, i64* %PC
  %6901 = add i64 %6900, 5
  store i64 %6901, i64* %PC
  %6902 = inttoptr i64 %6899 to double*
  %6903 = load double, double* %6902
  %6904 = bitcast i8* %6897 to double*
  store double %6903, double* %6904, align 1, !tbaa !2452
  %6905 = getelementptr inbounds i8, i8* %6897, i64 8
  %6906 = bitcast i8* %6905 to double*
  store double 0.000000e+00, double* %6906, align 1, !tbaa !2452
  %6907 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6908 = load i64, i64* %RBP
  %6909 = sub i64 %6908, 40
  %6910 = load i64, i64* %PC
  %6911 = add i64 %6910, 5
  store i64 %6911, i64* %PC
  %6912 = inttoptr i64 %6909 to double*
  %6913 = load double, double* %6912
  %6914 = bitcast i8* %6907 to double*
  store double %6913, double* %6914, align 1, !tbaa !2452
  %6915 = getelementptr inbounds i8, i8* %6907, i64 8
  %6916 = bitcast i8* %6915 to double*
  store double 0.000000e+00, double* %6916, align 1, !tbaa !2452
  %6917 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6918 = load i64, i64* %RBP
  %6919 = sub i64 %6918, 40
  %6920 = load i64, i64* %PC
  %6921 = add i64 %6920, 5
  store i64 %6921, i64* %PC
  %6922 = inttoptr i64 %6919 to double*
  %6923 = load double, double* %6922
  %6924 = bitcast i8* %6917 to double*
  store double %6923, double* %6924, align 1, !tbaa !2452
  %6925 = getelementptr inbounds i8, i8* %6917, i64 8
  %6926 = bitcast i8* %6925 to double*
  store double 0.000000e+00, double* %6926, align 1, !tbaa !2452
  %6927 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %6928 = load i64, i64* %PC
  %6929 = add i64 %6928, 9
  store i64 %6929, i64* %PC
  %6930 = load double, double* bitcast (%B6_type* @B6 to double*)
  %6931 = bitcast i8* %6927 to double*
  store double %6930, double* %6931, align 1, !tbaa !2452
  %6932 = getelementptr inbounds i8, i8* %6927, i64 8
  %6933 = bitcast i8* %6932 to double*
  store double 0.000000e+00, double* %6933, align 1, !tbaa !2452
  %6934 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %6935 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %6936 = load i64, i64* %RBP
  %6937 = sub i64 %6936, 40
  %6938 = load i64, i64* %PC
  %6939 = add i64 %6938, 5
  store i64 %6939, i64* %PC
  %6940 = bitcast i8* %6935 to double*
  %6941 = load double, double* %6940, align 1
  %6942 = getelementptr inbounds i8, i8* %6935, i64 8
  %6943 = bitcast i8* %6942 to i64*
  %6944 = load i64, i64* %6943, align 1
  %6945 = inttoptr i64 %6937 to double*
  %6946 = load double, double* %6945
  %6947 = fmul double %6941, %6946
  %6948 = bitcast i8* %6934 to double*
  store double %6947, double* %6948, align 1, !tbaa !2452
  %6949 = getelementptr inbounds i8, i8* %6934, i64 8
  %6950 = bitcast i8* %6949 to i64*
  store i64 %6944, i64* %6950, align 1, !tbaa !2452
  %6951 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %6952 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %6953 = load i64, i64* %PC
  %6954 = add i64 %6953, 9
  store i64 %6954, i64* %PC
  %6955 = bitcast i8* %6952 to double*
  %6956 = load double, double* %6955, align 1
  %6957 = getelementptr inbounds i8, i8* %6952, i64 8
  %6958 = bitcast i8* %6957 to i64*
  %6959 = load i64, i64* %6958, align 1
  %6960 = load double, double* bitcast (%B5_type* @B5 to double*)
  %6961 = fadd double %6956, %6960
  %6962 = bitcast i8* %6951 to double*
  store double %6961, double* %6962, align 1, !tbaa !2452
  %6963 = getelementptr inbounds i8, i8* %6951, i64 8
  %6964 = bitcast i8* %6963 to i64*
  store i64 %6959, i64* %6964, align 1, !tbaa !2452
  %6965 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6966 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6967 = bitcast %union.vec128_t* %XMM5 to i8*
  %6968 = load i64, i64* %PC
  %6969 = add i64 %6968, 4
  store i64 %6969, i64* %PC
  %6970 = bitcast i8* %6966 to double*
  %6971 = load double, double* %6970, align 1
  %6972 = getelementptr inbounds i8, i8* %6966, i64 8
  %6973 = bitcast i8* %6972 to i64*
  %6974 = load i64, i64* %6973, align 1
  %6975 = bitcast i8* %6967 to double*
  %6976 = load double, double* %6975, align 1
  %6977 = fmul double %6971, %6976
  %6978 = bitcast i8* %6965 to double*
  store double %6977, double* %6978, align 1, !tbaa !2452
  %6979 = getelementptr inbounds i8, i8* %6965, i64 8
  %6980 = bitcast i8* %6979 to i64*
  store i64 %6974, i64* %6980, align 1, !tbaa !2452
  %6981 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6982 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %6983 = load i64, i64* %PC
  %6984 = add i64 %6983, 9
  store i64 %6984, i64* %PC
  %6985 = bitcast i8* %6982 to double*
  %6986 = load double, double* %6985, align 1
  %6987 = getelementptr inbounds i8, i8* %6982, i64 8
  %6988 = bitcast i8* %6987 to i64*
  %6989 = load i64, i64* %6988, align 1
  %6990 = load double, double* bitcast (%B4_type* @B4 to double*)
  %6991 = fadd double %6986, %6990
  %6992 = bitcast i8* %6981 to double*
  store double %6991, double* %6992, align 1, !tbaa !2452
  %6993 = getelementptr inbounds i8, i8* %6981, i64 8
  %6994 = bitcast i8* %6993 to i64*
  store i64 %6989, i64* %6994, align 1, !tbaa !2452
  %6995 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6996 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %6997 = bitcast %union.vec128_t* %XMM4 to i8*
  %6998 = load i64, i64* %PC
  %6999 = add i64 %6998, 4
  store i64 %6999, i64* %PC
  %7000 = bitcast i8* %6996 to double*
  %7001 = load double, double* %7000, align 1
  %7002 = getelementptr inbounds i8, i8* %6996, i64 8
  %7003 = bitcast i8* %7002 to i64*
  %7004 = load i64, i64* %7003, align 1
  %7005 = bitcast i8* %6997 to double*
  %7006 = load double, double* %7005, align 1
  %7007 = fmul double %7001, %7006
  %7008 = bitcast i8* %6995 to double*
  store double %7007, double* %7008, align 1, !tbaa !2452
  %7009 = getelementptr inbounds i8, i8* %6995, i64 8
  %7010 = bitcast i8* %7009 to i64*
  store i64 %7004, i64* %7010, align 1, !tbaa !2452
  %7011 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7012 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7013 = load i64, i64* %PC
  %7014 = add i64 %7013, 9
  store i64 %7014, i64* %PC
  %7015 = bitcast i8* %7012 to double*
  %7016 = load double, double* %7015, align 1
  %7017 = getelementptr inbounds i8, i8* %7012, i64 8
  %7018 = bitcast i8* %7017 to i64*
  %7019 = load i64, i64* %7018, align 1
  %7020 = load double, double* bitcast (%B3_type* @B3 to double*)
  %7021 = fadd double %7016, %7020
  %7022 = bitcast i8* %7011 to double*
  store double %7021, double* %7022, align 1, !tbaa !2452
  %7023 = getelementptr inbounds i8, i8* %7011, i64 8
  %7024 = bitcast i8* %7023 to i64*
  store i64 %7019, i64* %7024, align 1, !tbaa !2452
  %7025 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7026 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7027 = bitcast %union.vec128_t* %XMM3 to i8*
  %7028 = load i64, i64* %PC
  %7029 = add i64 %7028, 4
  store i64 %7029, i64* %PC
  %7030 = bitcast i8* %7026 to double*
  %7031 = load double, double* %7030, align 1
  %7032 = getelementptr inbounds i8, i8* %7026, i64 8
  %7033 = bitcast i8* %7032 to i64*
  %7034 = load i64, i64* %7033, align 1
  %7035 = bitcast i8* %7027 to double*
  %7036 = load double, double* %7035, align 1
  %7037 = fmul double %7031, %7036
  %7038 = bitcast i8* %7025 to double*
  store double %7037, double* %7038, align 1, !tbaa !2452
  %7039 = getelementptr inbounds i8, i8* %7025, i64 8
  %7040 = bitcast i8* %7039 to i64*
  store i64 %7034, i64* %7040, align 1, !tbaa !2452
  %7041 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7042 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7043 = load i64, i64* %PC
  %7044 = add i64 %7043, 9
  store i64 %7044, i64* %PC
  %7045 = bitcast i8* %7042 to double*
  %7046 = load double, double* %7045, align 1
  %7047 = getelementptr inbounds i8, i8* %7042, i64 8
  %7048 = bitcast i8* %7047 to i64*
  %7049 = load i64, i64* %7048, align 1
  %7050 = load double, double* bitcast (%B2_type* @B2 to double*)
  %7051 = fadd double %7046, %7050
  %7052 = bitcast i8* %7041 to double*
  store double %7051, double* %7052, align 1, !tbaa !2452
  %7053 = getelementptr inbounds i8, i8* %7041, i64 8
  %7054 = bitcast i8* %7053 to i64*
  store i64 %7049, i64* %7054, align 1, !tbaa !2452
  %7055 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7056 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7057 = bitcast %union.vec128_t* %XMM2 to i8*
  %7058 = load i64, i64* %PC
  %7059 = add i64 %7058, 4
  store i64 %7059, i64* %PC
  %7060 = bitcast i8* %7056 to double*
  %7061 = load double, double* %7060, align 1
  %7062 = getelementptr inbounds i8, i8* %7056, i64 8
  %7063 = bitcast i8* %7062 to i64*
  %7064 = load i64, i64* %7063, align 1
  %7065 = bitcast i8* %7057 to double*
  %7066 = load double, double* %7065, align 1
  %7067 = fmul double %7061, %7066
  %7068 = bitcast i8* %7055 to double*
  store double %7067, double* %7068, align 1, !tbaa !2452
  %7069 = getelementptr inbounds i8, i8* %7055, i64 8
  %7070 = bitcast i8* %7069 to i64*
  store i64 %7064, i64* %7070, align 1, !tbaa !2452
  %7071 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7072 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7073 = load i64, i64* %PC
  %7074 = add i64 %7073, 9
  store i64 %7074, i64* %PC
  %7075 = bitcast i8* %7072 to double*
  %7076 = load double, double* %7075, align 1
  %7077 = getelementptr inbounds i8, i8* %7072, i64 8
  %7078 = bitcast i8* %7077 to i64*
  %7079 = load i64, i64* %7078, align 1
  %7080 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %7081 = fadd double %7076, %7080
  %7082 = bitcast i8* %7071 to double*
  store double %7081, double* %7082, align 1, !tbaa !2452
  %7083 = getelementptr inbounds i8, i8* %7071, i64 8
  %7084 = bitcast i8* %7083 to i64*
  store i64 %7079, i64* %7084, align 1, !tbaa !2452
  %7085 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7086 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7087 = bitcast %union.vec128_t* %XMM1 to i8*
  %7088 = load i64, i64* %PC
  %7089 = add i64 %7088, 4
  store i64 %7089, i64* %PC
  %7090 = bitcast i8* %7086 to double*
  %7091 = load double, double* %7090, align 1
  %7092 = getelementptr inbounds i8, i8* %7086, i64 8
  %7093 = bitcast i8* %7092 to i64*
  %7094 = load i64, i64* %7093, align 1
  %7095 = bitcast i8* %7087 to double*
  %7096 = load double, double* %7095, align 1
  %7097 = fmul double %7091, %7096
  %7098 = bitcast i8* %7085 to double*
  store double %7097, double* %7098, align 1, !tbaa !2452
  %7099 = getelementptr inbounds i8, i8* %7085, i64 8
  %7100 = bitcast i8* %7099 to i64*
  store i64 %7094, i64* %7100, align 1, !tbaa !2452
  %7101 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7102 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7103 = load i64, i64* %PC
  %7104 = add i64 %7103, 9
  store i64 %7104, i64* %PC
  %7105 = bitcast i8* %7102 to double*
  %7106 = load double, double* %7105, align 1
  %7107 = getelementptr inbounds i8, i8* %7102, i64 8
  %7108 = bitcast i8* %7107 to i64*
  %7109 = load i64, i64* %7108, align 1
  %7110 = load double, double* bitcast (%one_type* @one to double*)
  %7111 = fadd double %7106, %7110
  %7112 = bitcast i8* %7101 to double*
  store double %7111, double* %7112, align 1, !tbaa !2452
  %7113 = getelementptr inbounds i8, i8* %7101, i64 8
  %7114 = bitcast i8* %7113 to i64*
  store i64 %7109, i64* %7114, align 1, !tbaa !2452
  %7115 = load i64, i64* %RBP
  %7116 = sub i64 %7115, 32
  %7117 = bitcast %union.vec128_t* %XMM0 to i8*
  %7118 = load i64, i64* %PC
  %7119 = add i64 %7118, 5
  store i64 %7119, i64* %PC
  %7120 = bitcast i8* %7117 to double*
  %7121 = load double, double* %7120, align 1
  %7122 = inttoptr i64 %7116 to double*
  store double %7121, double* %7122
  %7123 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7124 = load i64, i64* %RBP
  %7125 = sub i64 %7124, 16
  %7126 = load i64, i64* %PC
  %7127 = add i64 %7126, 5
  store i64 %7127, i64* %PC
  %7128 = inttoptr i64 %7125 to double*
  %7129 = load double, double* %7128
  %7130 = bitcast i8* %7123 to double*
  store double %7129, double* %7130, align 1, !tbaa !2452
  %7131 = getelementptr inbounds i8, i8* %7123, i64 8
  %7132 = bitcast i8* %7131 to double*
  store double 0.000000e+00, double* %7132, align 1, !tbaa !2452
  %7133 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7134 = load i64, i64* %RBP
  %7135 = sub i64 %7134, 32
  %7136 = load i64, i64* %PC
  %7137 = add i64 %7136, 5
  store i64 %7137, i64* %PC
  %7138 = inttoptr i64 %7135 to double*
  %7139 = load double, double* %7138
  %7140 = bitcast i8* %7133 to double*
  store double %7139, double* %7140, align 1, !tbaa !2452
  %7141 = getelementptr inbounds i8, i8* %7133, i64 8
  %7142 = bitcast i8* %7141 to double*
  store double 0.000000e+00, double* %7142, align 1, !tbaa !2452
  %7143 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7144 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7145 = load i64, i64* %RBP
  %7146 = sub i64 %7145, 32
  %7147 = load i64, i64* %PC
  %7148 = add i64 %7147, 5
  store i64 %7148, i64* %PC
  %7149 = bitcast i8* %7144 to double*
  %7150 = load double, double* %7149, align 1
  %7151 = getelementptr inbounds i8, i8* %7144, i64 8
  %7152 = bitcast i8* %7151 to i64*
  %7153 = load i64, i64* %7152, align 1
  %7154 = inttoptr i64 %7146 to double*
  %7155 = load double, double* %7154
  %7156 = fmul double %7150, %7155
  %7157 = bitcast i8* %7143 to double*
  store double %7156, double* %7157, align 1, !tbaa !2452
  %7158 = getelementptr inbounds i8, i8* %7143, i64 8
  %7159 = bitcast i8* %7158 to i64*
  store i64 %7153, i64* %7159, align 1, !tbaa !2452
  %7160 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7161 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7162 = load i64, i64* %RBP
  %7163 = sub i64 %7162, 24
  %7164 = load i64, i64* %PC
  %7165 = add i64 %7164, 5
  store i64 %7165, i64* %PC
  %7166 = bitcast i8* %7161 to double*
  %7167 = load double, double* %7166, align 1
  %7168 = getelementptr inbounds i8, i8* %7161, i64 8
  %7169 = bitcast i8* %7168 to i64*
  %7170 = load i64, i64* %7169, align 1
  %7171 = inttoptr i64 %7163 to double*
  %7172 = load double, double* %7171
  %7173 = fmul double %7167, %7172
  %7174 = bitcast i8* %7160 to double*
  store double %7173, double* %7174, align 1, !tbaa !2452
  %7175 = getelementptr inbounds i8, i8* %7160, i64 8
  %7176 = bitcast i8* %7175 to i64*
  store i64 %7170, i64* %7176, align 1, !tbaa !2452
  %7177 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7178 = load i64, i64* %PC
  %7179 = add i64 %7178, 9
  store i64 %7179, i64* %PC
  %7180 = load double, double* bitcast (%A6_type* @A6 to double*)
  %7181 = bitcast i8* %7177 to double*
  store double %7180, double* %7181, align 1, !tbaa !2452
  %7182 = getelementptr inbounds i8, i8* %7177, i64 8
  %7183 = bitcast i8* %7182 to double*
  store double 0.000000e+00, double* %7183, align 1, !tbaa !2452
  %7184 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7185 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7186 = load i64, i64* %RBP
  %7187 = sub i64 %7186, 40
  %7188 = load i64, i64* %PC
  %7189 = add i64 %7188, 5
  store i64 %7189, i64* %PC
  %7190 = bitcast i8* %7185 to double*
  %7191 = load double, double* %7190, align 1
  %7192 = getelementptr inbounds i8, i8* %7185, i64 8
  %7193 = bitcast i8* %7192 to i64*
  %7194 = load i64, i64* %7193, align 1
  %7195 = inttoptr i64 %7187 to double*
  %7196 = load double, double* %7195
  %7197 = fmul double %7191, %7196
  %7198 = bitcast i8* %7184 to double*
  store double %7197, double* %7198, align 1, !tbaa !2452
  %7199 = getelementptr inbounds i8, i8* %7184, i64 8
  %7200 = bitcast i8* %7199 to i64*
  store i64 %7194, i64* %7200, align 1, !tbaa !2452
  %7201 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7202 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7203 = load i64, i64* %PC
  %7204 = add i64 %7203, 9
  store i64 %7204, i64* %PC
  %7205 = bitcast i8* %7202 to double*
  %7206 = load double, double* %7205, align 1
  %7207 = getelementptr inbounds i8, i8* %7202, i64 8
  %7208 = bitcast i8* %7207 to i64*
  %7209 = load i64, i64* %7208, align 1
  %7210 = load double, double* bitcast (%A5_type* @A5 to double*)
  %7211 = fadd double %7206, %7210
  %7212 = bitcast i8* %7201 to double*
  store double %7211, double* %7212, align 1, !tbaa !2452
  %7213 = getelementptr inbounds i8, i8* %7201, i64 8
  %7214 = bitcast i8* %7213 to i64*
  store i64 %7209, i64* %7214, align 1, !tbaa !2452
  %7215 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7216 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7217 = load i64, i64* %RBP
  %7218 = sub i64 %7217, 40
  %7219 = load i64, i64* %PC
  %7220 = add i64 %7219, 5
  store i64 %7220, i64* %PC
  %7221 = bitcast i8* %7216 to double*
  %7222 = load double, double* %7221, align 1
  %7223 = getelementptr inbounds i8, i8* %7216, i64 8
  %7224 = bitcast i8* %7223 to i64*
  %7225 = load i64, i64* %7224, align 1
  %7226 = inttoptr i64 %7218 to double*
  %7227 = load double, double* %7226
  %7228 = fmul double %7222, %7227
  %7229 = bitcast i8* %7215 to double*
  store double %7228, double* %7229, align 1, !tbaa !2452
  %7230 = getelementptr inbounds i8, i8* %7215, i64 8
  %7231 = bitcast i8* %7230 to i64*
  store i64 %7225, i64* %7231, align 1, !tbaa !2452
  %7232 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7233 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7234 = load i64, i64* %PC
  %7235 = add i64 %7234, 9
  store i64 %7235, i64* %PC
  %7236 = bitcast i8* %7233 to double*
  %7237 = load double, double* %7236, align 1
  %7238 = getelementptr inbounds i8, i8* %7233, i64 8
  %7239 = bitcast i8* %7238 to i64*
  %7240 = load i64, i64* %7239, align 1
  %7241 = load double, double* bitcast (%A4_type* @A4 to double*)
  %7242 = fadd double %7237, %7241
  %7243 = bitcast i8* %7232 to double*
  store double %7242, double* %7243, align 1, !tbaa !2452
  %7244 = getelementptr inbounds i8, i8* %7232, i64 8
  %7245 = bitcast i8* %7244 to i64*
  store i64 %7240, i64* %7245, align 1, !tbaa !2452
  %7246 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7247 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7248 = load i64, i64* %RBP
  %7249 = sub i64 %7248, 40
  %7250 = load i64, i64* %PC
  %7251 = add i64 %7250, 5
  store i64 %7251, i64* %PC
  %7252 = bitcast i8* %7247 to double*
  %7253 = load double, double* %7252, align 1
  %7254 = getelementptr inbounds i8, i8* %7247, i64 8
  %7255 = bitcast i8* %7254 to i64*
  %7256 = load i64, i64* %7255, align 1
  %7257 = inttoptr i64 %7249 to double*
  %7258 = load double, double* %7257
  %7259 = fmul double %7253, %7258
  %7260 = bitcast i8* %7246 to double*
  store double %7259, double* %7260, align 1, !tbaa !2452
  %7261 = getelementptr inbounds i8, i8* %7246, i64 8
  %7262 = bitcast i8* %7261 to i64*
  store i64 %7256, i64* %7262, align 1, !tbaa !2452
  %7263 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7264 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7265 = load i64, i64* %PC
  %7266 = add i64 %7265, 9
  store i64 %7266, i64* %PC
  %7267 = bitcast i8* %7264 to double*
  %7268 = load double, double* %7267, align 1
  %7269 = getelementptr inbounds i8, i8* %7264, i64 8
  %7270 = bitcast i8* %7269 to i64*
  %7271 = load i64, i64* %7270, align 1
  %7272 = load double, double* bitcast (%A3_type* @A3 to double*)
  %7273 = fadd double %7268, %7272
  %7274 = bitcast i8* %7263 to double*
  store double %7273, double* %7274, align 1, !tbaa !2452
  %7275 = getelementptr inbounds i8, i8* %7263, i64 8
  %7276 = bitcast i8* %7275 to i64*
  store i64 %7271, i64* %7276, align 1, !tbaa !2452
  %7277 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7278 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7279 = load i64, i64* %RBP
  %7280 = sub i64 %7279, 40
  %7281 = load i64, i64* %PC
  %7282 = add i64 %7281, 5
  store i64 %7282, i64* %PC
  %7283 = bitcast i8* %7278 to double*
  %7284 = load double, double* %7283, align 1
  %7285 = getelementptr inbounds i8, i8* %7278, i64 8
  %7286 = bitcast i8* %7285 to i64*
  %7287 = load i64, i64* %7286, align 1
  %7288 = inttoptr i64 %7280 to double*
  %7289 = load double, double* %7288
  %7290 = fmul double %7284, %7289
  %7291 = bitcast i8* %7277 to double*
  store double %7290, double* %7291, align 1, !tbaa !2452
  %7292 = getelementptr inbounds i8, i8* %7277, i64 8
  %7293 = bitcast i8* %7292 to i64*
  store i64 %7287, i64* %7293, align 1, !tbaa !2452
  %7294 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7295 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7296 = load i64, i64* %PC
  %7297 = add i64 %7296, 9
  store i64 %7297, i64* %PC
  %7298 = bitcast i8* %7295 to double*
  %7299 = load double, double* %7298, align 1
  %7300 = getelementptr inbounds i8, i8* %7295, i64 8
  %7301 = bitcast i8* %7300 to i64*
  %7302 = load i64, i64* %7301, align 1
  %7303 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %7304 = fadd double %7299, %7303
  %7305 = bitcast i8* %7294 to double*
  store double %7304, double* %7305, align 1, !tbaa !2452
  %7306 = getelementptr inbounds i8, i8* %7294, i64 8
  %7307 = bitcast i8* %7306 to i64*
  store i64 %7302, i64* %7307, align 1, !tbaa !2452
  %7308 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7309 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7310 = load i64, i64* %RBP
  %7311 = sub i64 %7310, 40
  %7312 = load i64, i64* %PC
  %7313 = add i64 %7312, 5
  store i64 %7313, i64* %PC
  %7314 = bitcast i8* %7309 to double*
  %7315 = load double, double* %7314, align 1
  %7316 = getelementptr inbounds i8, i8* %7309, i64 8
  %7317 = bitcast i8* %7316 to i64*
  %7318 = load i64, i64* %7317, align 1
  %7319 = inttoptr i64 %7311 to double*
  %7320 = load double, double* %7319
  %7321 = fmul double %7315, %7320
  %7322 = bitcast i8* %7308 to double*
  store double %7321, double* %7322, align 1, !tbaa !2452
  %7323 = getelementptr inbounds i8, i8* %7308, i64 8
  %7324 = bitcast i8* %7323 to i64*
  store i64 %7318, i64* %7324, align 1, !tbaa !2452
  %7325 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7326 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7327 = load i64, i64* %PC
  %7328 = add i64 %7327, 9
  store i64 %7328, i64* %PC
  %7329 = bitcast i8* %7326 to double*
  %7330 = load double, double* %7329, align 1
  %7331 = getelementptr inbounds i8, i8* %7326, i64 8
  %7332 = bitcast i8* %7331 to i64*
  %7333 = load i64, i64* %7332, align 1
  %7334 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %7335 = fadd double %7330, %7334
  %7336 = bitcast i8* %7325 to double*
  store double %7335, double* %7336, align 1, !tbaa !2452
  %7337 = getelementptr inbounds i8, i8* %7325, i64 8
  %7338 = bitcast i8* %7337 to i64*
  store i64 %7333, i64* %7338, align 1, !tbaa !2452
  %7339 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7340 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7341 = load i64, i64* %RBP
  %7342 = sub i64 %7341, 40
  %7343 = load i64, i64* %PC
  %7344 = add i64 %7343, 5
  store i64 %7344, i64* %PC
  %7345 = bitcast i8* %7340 to double*
  %7346 = load double, double* %7345, align 1
  %7347 = getelementptr inbounds i8, i8* %7340, i64 8
  %7348 = bitcast i8* %7347 to i64*
  %7349 = load i64, i64* %7348, align 1
  %7350 = inttoptr i64 %7342 to double*
  %7351 = load double, double* %7350
  %7352 = fmul double %7346, %7351
  %7353 = bitcast i8* %7339 to double*
  store double %7352, double* %7353, align 1, !tbaa !2452
  %7354 = getelementptr inbounds i8, i8* %7339, i64 8
  %7355 = bitcast i8* %7354 to i64*
  store i64 %7349, i64* %7355, align 1, !tbaa !2452
  %7356 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7357 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7358 = load i64, i64* %PC
  %7359 = add i64 %7358, 9
  store i64 %7359, i64* %PC
  %7360 = bitcast i8* %7357 to double*
  %7361 = load double, double* %7360, align 1
  %7362 = getelementptr inbounds i8, i8* %7357, i64 8
  %7363 = bitcast i8* %7362 to i64*
  %7364 = load i64, i64* %7363, align 1
  %7365 = load double, double* bitcast (%one_type* @one to double*)
  %7366 = fadd double %7361, %7365
  %7367 = bitcast i8* %7356 to double*
  store double %7366, double* %7367, align 1, !tbaa !2452
  %7368 = getelementptr inbounds i8, i8* %7356, i64 8
  %7369 = bitcast i8* %7368 to i64*
  store i64 %7364, i64* %7369, align 1, !tbaa !2452
  %7370 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7371 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7372 = bitcast %union.vec128_t* %XMM2 to i8*
  %7373 = load i64, i64* %PC
  %7374 = add i64 %7373, 4
  store i64 %7374, i64* %PC
  %7375 = bitcast i8* %7371 to double*
  %7376 = load double, double* %7375, align 1
  %7377 = getelementptr inbounds i8, i8* %7371, i64 8
  %7378 = bitcast i8* %7377 to i64*
  %7379 = load i64, i64* %7378, align 1
  %7380 = bitcast i8* %7372 to double*
  %7381 = load double, double* %7380, align 1
  %7382 = fmul double %7376, %7381
  %7383 = bitcast i8* %7370 to double*
  store double %7382, double* %7383, align 1, !tbaa !2452
  %7384 = getelementptr inbounds i8, i8* %7370, i64 8
  %7385 = bitcast i8* %7384 to i64*
  store i64 %7379, i64* %7385, align 1, !tbaa !2452
  %7386 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7387 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7388 = bitcast %union.vec128_t* %XMM1 to i8*
  %7389 = load i64, i64* %PC
  %7390 = add i64 %7389, 4
  store i64 %7390, i64* %PC
  %7391 = bitcast i8* %7387 to double*
  %7392 = load double, double* %7391, align 1
  %7393 = getelementptr inbounds i8, i8* %7387, i64 8
  %7394 = bitcast i8* %7393 to i64*
  %7395 = load i64, i64* %7394, align 1
  %7396 = bitcast i8* %7388 to double*
  %7397 = load double, double* %7396, align 1
  %7398 = fadd double %7392, %7397
  %7399 = bitcast i8* %7386 to double*
  store double %7398, double* %7399, align 1, !tbaa !2452
  %7400 = getelementptr inbounds i8, i8* %7386, i64 8
  %7401 = bitcast i8* %7400 to i64*
  store i64 %7395, i64* %7401, align 1, !tbaa !2452
  %7402 = load i64, i64* %RBP
  %7403 = sub i64 %7402, 16
  %7404 = bitcast %union.vec128_t* %XMM0 to i8*
  %7405 = load i64, i64* %PC
  %7406 = add i64 %7405, 5
  store i64 %7406, i64* %PC
  %7407 = bitcast i8* %7404 to double*
  %7408 = load double, double* %7407, align 1
  %7409 = inttoptr i64 %7403 to double*
  store double %7408, double* %7409
  %7410 = load i64, i64* %RBP
  %7411 = sub i64 %7410, 72
  %7412 = load i64, i64* %PC
  %7413 = add i64 %7412, 4
  store i64 %7413, i64* %PC
  %7414 = inttoptr i64 %7411 to i64*
  %7415 = load i64, i64* %7414
  store i64 %7415, i64* %RAX, align 8, !tbaa !2428
  %7416 = load i64, i64* %RAX
  %7417 = load i64, i64* %PC
  %7418 = add i64 %7417, 4
  store i64 %7418, i64* %PC
  %7419 = add i64 1, %7416
  store i64 %7419, i64* %RAX, align 8, !tbaa !2428
  %7420 = icmp ult i64 %7419, %7416
  %7421 = icmp ult i64 %7419, 1
  %7422 = or i1 %7420, %7421
  %7423 = zext i1 %7422 to i8
  %7424 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %7423, i8* %7424, align 1, !tbaa !2432
  %7425 = trunc i64 %7419 to i32
  %7426 = and i32 %7425, 255
  %7427 = call i32 @llvm.ctpop.i32(i32 %7426) #16
  %7428 = trunc i32 %7427 to i8
  %7429 = and i8 %7428, 1
  %7430 = xor i8 %7429, 1
  %7431 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %7430, i8* %7431, align 1, !tbaa !2446
  %7432 = xor i64 1, %7416
  %7433 = xor i64 %7432, %7419
  %7434 = lshr i64 %7433, 4
  %7435 = trunc i64 %7434 to i8
  %7436 = and i8 %7435, 1
  %7437 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %7436, i8* %7437, align 1, !tbaa !2450
  %7438 = icmp eq i64 %7419, 0
  %7439 = zext i1 %7438 to i8
  %7440 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %7439, i8* %7440, align 1, !tbaa !2447
  %7441 = lshr i64 %7419, 63
  %7442 = trunc i64 %7441 to i8
  %7443 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %7442, i8* %7443, align 1, !tbaa !2448
  %7444 = lshr i64 %7416, 63
  %7445 = xor i64 %7441, %7444
  %7446 = add nuw nsw i64 %7445, %7441
  %7447 = icmp eq i64 %7446, 2
  %7448 = zext i1 %7447 to i8
  %7449 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %7448, i8* %7449, align 1, !tbaa !2449
  %7450 = load i64, i64* %RBP
  %7451 = sub i64 %7450, 72
  %7452 = load i64, i64* %RAX
  %7453 = load i64, i64* %PC
  %7454 = add i64 %7453, 4
  store i64 %7454, i64* %PC
  %7455 = inttoptr i64 %7451 to i64*
  store i64 %7452, i64* %7455
  %7456 = load i64, i64* %PC
  %7457 = sub i64 %7456, 308
  %7458 = load i64, i64* %PC
  %7459 = add i64 %7458, 5
  store i64 %7459, i64* %PC
  %7460 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7457, i64* %7460, align 8, !tbaa !2428
  br label %block_401f72

block_401627:                                     ; preds = %block_4014ef
  %7461 = load i64, i64* %PC
  %7462 = add i64 %7461, 10
  store i64 %7462, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %7463 = load i64, i64* %PC
  %7464 = add i64 %7463, 3999
  %7465 = load i64, i64* %PC
  %7466 = add i64 %7465, 5
  %7467 = load i64, i64* %PC
  %7468 = add i64 %7467, 5
  store i64 %7468, i64* %PC
  %7469 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %7470 = load i64, i64* %7469, align 8, !tbaa !2428
  %7471 = add i64 %7470, -8
  %7472 = inttoptr i64 %7471 to i64*
  store i64 %7466, i64* %7472
  store i64 %7471, i64* %7469, align 8, !tbaa !2428
  %7473 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %7464, i64* %7473, align 8, !tbaa !2428
  %7474 = load i64, i64* %PC
  %7475 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %7474, %struct.Memory* %MEMORY.2)
  %7476 = load i64, i64* %PC
  %7477 = add i64 %7476, 10
  store i64 %7477, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 534), i64* %RDI, align 8, !tbaa !2428
  %7478 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %7479 = load i64, i64* %PC
  %7480 = add i64 %7479, 8
  store i64 %7480, i64* %PC
  %7481 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 72) to double*)
  %7482 = bitcast i8* %7478 to double*
  store double %7481, double* %7482, align 1, !tbaa !2452
  %7483 = getelementptr inbounds i8, i8* %7478, i64 8
  %7484 = bitcast i8* %7483 to double*
  store double 0.000000e+00, double* %7484, align 1, !tbaa !2452
  %7485 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %7486 = load i64, i64* %PC
  %7487 = add i64 %7486, 8
  store i64 %7487, i64* %PC
  %7488 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 136) to double*)
  %7489 = bitcast i8* %7485 to double*
  store double %7488, double* %7489, align 1, !tbaa !2452
  %7490 = getelementptr inbounds i8, i8* %7485, i64 8
  %7491 = bitcast i8* %7490 to double*
  store double 0.000000e+00, double* %7491, align 1, !tbaa !2452
  %7492 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %7493 = load i64, i64* %PC
  %7494 = add i64 %7493, 8
  store i64 %7494, i64* %PC
  %7495 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 144) to double*)
  %7496 = bitcast i8* %7492 to double*
  store double %7495, double* %7496, align 1, !tbaa !2452
  %7497 = getelementptr inbounds i8, i8* %7492, i64 8
  %7498 = bitcast i8* %7497 to double*
  store double 0.000000e+00, double* %7498, align 1, !tbaa !2452
  %7499 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7500 = load i64, i64* %PC
  %7501 = add i64 %7500, 9
  store i64 %7501, i64* %PC
  %7502 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %7503 = bitcast i8* %7499 to double*
  store double %7502, double* %7503, align 1, !tbaa !2452
  %7504 = getelementptr inbounds i8, i8* %7499, i64 8
  %7505 = bitcast i8* %7504 to double*
  store double 0.000000e+00, double* %7505, align 1, !tbaa !2452
  %7506 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7507 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7508 = load i64, i64* %PC
  %7509 = add i64 %7508, 9
  store i64 %7509, i64* %PC
  %7510 = bitcast i8* %7507 to double*
  %7511 = load double, double* %7510, align 1
  %7512 = getelementptr inbounds i8, i8* %7507, i64 8
  %7513 = bitcast i8* %7512 to i64*
  %7514 = load i64, i64* %7513, align 1
  %7515 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %7516 = fmul double %7511, %7515
  %7517 = bitcast i8* %7506 to double*
  store double %7516, double* %7517, align 1, !tbaa !2452
  %7518 = getelementptr inbounds i8, i8* %7506, i64 8
  %7519 = bitcast i8* %7518 to i64*
  store i64 %7514, i64* %7519, align 1, !tbaa !2452
  %7520 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7521 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7522 = load i64, i64* %PC
  %7523 = add i64 %7522, 9
  store i64 %7523, i64* %PC
  %7524 = bitcast i8* %7521 to double*
  %7525 = load double, double* %7524, align 1
  %7526 = getelementptr inbounds i8, i8* %7521, i64 8
  %7527 = bitcast i8* %7526 to i64*
  %7528 = load i64, i64* %7527, align 1
  %7529 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %7530 = fsub double %7525, %7529
  %7531 = bitcast i8* %7520 to double*
  store double %7530, double* %7531, align 1, !tbaa !2452
  %7532 = getelementptr inbounds i8, i8* %7520, i64 8
  %7533 = bitcast i8* %7532 to i64*
  store i64 %7528, i64* %7533, align 1, !tbaa !2452
  %7534 = bitcast %union.vec128_t* %XMM3 to i8*
  %7535 = load i64, i64* %PC
  %7536 = add i64 %7535, 9
  store i64 %7536, i64* %PC
  %7537 = bitcast i8* %7534 to double*
  %7538 = load double, double* %7537, align 1
  store double %7538, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 120) to double*)
  %7539 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7540 = load i64, i64* %PC
  %7541 = add i64 %7540, 9
  store i64 %7541, i64* %PC
  %7542 = load double, double* bitcast (%piref_type* @piref to double*)
  %7543 = bitcast i8* %7539 to double*
  store double %7542, double* %7543, align 1, !tbaa !2452
  %7544 = getelementptr inbounds i8, i8* %7539, i64 8
  %7545 = bitcast i8* %7544 to double*
  store double 0.000000e+00, double* %7545, align 1, !tbaa !2452
  %7546 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7547 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7548 = load i64, i64* %PC
  %7549 = add i64 %7548, 9
  store i64 %7549, i64* %PC
  %7550 = bitcast i8* %7547 to double*
  %7551 = load double, double* %7550, align 1
  %7552 = getelementptr inbounds i8, i8* %7547, i64 8
  %7553 = bitcast i8* %7552 to i64*
  %7554 = load i64, i64* %7553, align 1
  %7555 = load double, double* bitcast (%three_type* @three to double*)
  %7556 = fdiv double %7551, %7555
  %7557 = bitcast i8* %7546 to double*
  store double %7556, double* %7557, align 1, !tbaa !2452
  %7558 = getelementptr inbounds i8, i8* %7546, i64 8
  %7559 = bitcast i8* %7558 to i64*
  store i64 %7554, i64* %7559, align 1, !tbaa !2452
  %7560 = load i64, i64* %RBP
  %7561 = sub i64 %7560, 24
  %7562 = bitcast %union.vec128_t* %XMM3 to i8*
  %7563 = load i64, i64* %PC
  %7564 = add i64 %7563, 5
  store i64 %7564, i64* %PC
  %7565 = bitcast i8* %7562 to double*
  %7566 = load double, double* %7565, align 1
  %7567 = inttoptr i64 %7561 to double*
  store double %7566, double* %7567
  %7568 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7569 = load i64, i64* %RBP
  %7570 = sub i64 %7569, 24
  %7571 = load i64, i64* %PC
  %7572 = add i64 %7571, 5
  store i64 %7572, i64* %PC
  %7573 = inttoptr i64 %7570 to double*
  %7574 = load double, double* %7573
  %7575 = bitcast i8* %7568 to double*
  store double %7574, double* %7575, align 1, !tbaa !2452
  %7576 = getelementptr inbounds i8, i8* %7568, i64 8
  %7577 = bitcast i8* %7576 to double*
  store double 0.000000e+00, double* %7577, align 1, !tbaa !2452
  %7578 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7579 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7580 = load i64, i64* %RBP
  %7581 = sub i64 %7580, 24
  %7582 = load i64, i64* %PC
  %7583 = add i64 %7582, 5
  store i64 %7583, i64* %PC
  %7584 = bitcast i8* %7579 to double*
  %7585 = load double, double* %7584, align 1
  %7586 = getelementptr inbounds i8, i8* %7579, i64 8
  %7587 = bitcast i8* %7586 to i64*
  %7588 = load i64, i64* %7587, align 1
  %7589 = inttoptr i64 %7581 to double*
  %7590 = load double, double* %7589
  %7591 = fmul double %7585, %7590
  %7592 = bitcast i8* %7578 to double*
  store double %7591, double* %7592, align 1, !tbaa !2452
  %7593 = getelementptr inbounds i8, i8* %7578, i64 8
  %7594 = bitcast i8* %7593 to i64*
  store i64 %7588, i64* %7594, align 1, !tbaa !2452
  %7595 = load i64, i64* %RBP
  %7596 = sub i64 %7595, 40
  %7597 = bitcast %union.vec128_t* %XMM3 to i8*
  %7598 = load i64, i64* %PC
  %7599 = add i64 %7598, 5
  store i64 %7599, i64* %PC
  %7600 = bitcast i8* %7597 to double*
  %7601 = load double, double* %7600, align 1
  %7602 = inttoptr i64 %7596 to double*
  store double %7601, double* %7602
  %7603 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7604 = load i64, i64* %RBP
  %7605 = sub i64 %7604, 24
  %7606 = load i64, i64* %PC
  %7607 = add i64 %7606, 5
  store i64 %7607, i64* %PC
  %7608 = inttoptr i64 %7605 to double*
  %7609 = load double, double* %7608
  %7610 = bitcast i8* %7603 to double*
  store double %7609, double* %7610, align 1, !tbaa !2452
  %7611 = getelementptr inbounds i8, i8* %7603, i64 8
  %7612 = bitcast i8* %7611 to double*
  store double 0.000000e+00, double* %7612, align 1, !tbaa !2452
  %7613 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7614 = load i64, i64* %PC
  %7615 = add i64 %7614, 9
  store i64 %7615, i64* %PC
  %7616 = load double, double* bitcast (%A6_type* @A6 to double*)
  %7617 = bitcast i8* %7613 to double*
  store double %7616, double* %7617, align 1, !tbaa !2452
  %7618 = getelementptr inbounds i8, i8* %7613, i64 8
  %7619 = bitcast i8* %7618 to double*
  store double 0.000000e+00, double* %7619, align 1, !tbaa !2452
  %7620 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7621 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7622 = load i64, i64* %RBP
  %7623 = sub i64 %7622, 40
  %7624 = load i64, i64* %PC
  %7625 = add i64 %7624, 5
  store i64 %7625, i64* %PC
  %7626 = bitcast i8* %7621 to double*
  %7627 = load double, double* %7626, align 1
  %7628 = getelementptr inbounds i8, i8* %7621, i64 8
  %7629 = bitcast i8* %7628 to i64*
  %7630 = load i64, i64* %7629, align 1
  %7631 = inttoptr i64 %7623 to double*
  %7632 = load double, double* %7631
  %7633 = fmul double %7627, %7632
  %7634 = bitcast i8* %7620 to double*
  store double %7633, double* %7634, align 1, !tbaa !2452
  %7635 = getelementptr inbounds i8, i8* %7620, i64 8
  %7636 = bitcast i8* %7635 to i64*
  store i64 %7630, i64* %7636, align 1, !tbaa !2452
  %7637 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7638 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7639 = load i64, i64* %PC
  %7640 = add i64 %7639, 9
  store i64 %7640, i64* %PC
  %7641 = bitcast i8* %7638 to double*
  %7642 = load double, double* %7641, align 1
  %7643 = getelementptr inbounds i8, i8* %7638, i64 8
  %7644 = bitcast i8* %7643 to i64*
  %7645 = load i64, i64* %7644, align 1
  %7646 = load double, double* bitcast (%A5_type* @A5 to double*)
  %7647 = fadd double %7642, %7646
  %7648 = bitcast i8* %7637 to double*
  store double %7647, double* %7648, align 1, !tbaa !2452
  %7649 = getelementptr inbounds i8, i8* %7637, i64 8
  %7650 = bitcast i8* %7649 to i64*
  store i64 %7645, i64* %7650, align 1, !tbaa !2452
  %7651 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7652 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7653 = load i64, i64* %RBP
  %7654 = sub i64 %7653, 40
  %7655 = load i64, i64* %PC
  %7656 = add i64 %7655, 5
  store i64 %7656, i64* %PC
  %7657 = bitcast i8* %7652 to double*
  %7658 = load double, double* %7657, align 1
  %7659 = getelementptr inbounds i8, i8* %7652, i64 8
  %7660 = bitcast i8* %7659 to i64*
  %7661 = load i64, i64* %7660, align 1
  %7662 = inttoptr i64 %7654 to double*
  %7663 = load double, double* %7662
  %7664 = fmul double %7658, %7663
  %7665 = bitcast i8* %7651 to double*
  store double %7664, double* %7665, align 1, !tbaa !2452
  %7666 = getelementptr inbounds i8, i8* %7651, i64 8
  %7667 = bitcast i8* %7666 to i64*
  store i64 %7661, i64* %7667, align 1, !tbaa !2452
  %7668 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7669 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7670 = load i64, i64* %PC
  %7671 = add i64 %7670, 9
  store i64 %7671, i64* %PC
  %7672 = bitcast i8* %7669 to double*
  %7673 = load double, double* %7672, align 1
  %7674 = getelementptr inbounds i8, i8* %7669, i64 8
  %7675 = bitcast i8* %7674 to i64*
  %7676 = load i64, i64* %7675, align 1
  %7677 = load double, double* bitcast (%A4_type* @A4 to double*)
  %7678 = fadd double %7673, %7677
  %7679 = bitcast i8* %7668 to double*
  store double %7678, double* %7679, align 1, !tbaa !2452
  %7680 = getelementptr inbounds i8, i8* %7668, i64 8
  %7681 = bitcast i8* %7680 to i64*
  store i64 %7676, i64* %7681, align 1, !tbaa !2452
  %7682 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7683 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7684 = load i64, i64* %RBP
  %7685 = sub i64 %7684, 40
  %7686 = load i64, i64* %PC
  %7687 = add i64 %7686, 5
  store i64 %7687, i64* %PC
  %7688 = bitcast i8* %7683 to double*
  %7689 = load double, double* %7688, align 1
  %7690 = getelementptr inbounds i8, i8* %7683, i64 8
  %7691 = bitcast i8* %7690 to i64*
  %7692 = load i64, i64* %7691, align 1
  %7693 = inttoptr i64 %7685 to double*
  %7694 = load double, double* %7693
  %7695 = fmul double %7689, %7694
  %7696 = bitcast i8* %7682 to double*
  store double %7695, double* %7696, align 1, !tbaa !2452
  %7697 = getelementptr inbounds i8, i8* %7682, i64 8
  %7698 = bitcast i8* %7697 to i64*
  store i64 %7692, i64* %7698, align 1, !tbaa !2452
  %7699 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7700 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7701 = load i64, i64* %PC
  %7702 = add i64 %7701, 9
  store i64 %7702, i64* %PC
  %7703 = bitcast i8* %7700 to double*
  %7704 = load double, double* %7703, align 1
  %7705 = getelementptr inbounds i8, i8* %7700, i64 8
  %7706 = bitcast i8* %7705 to i64*
  %7707 = load i64, i64* %7706, align 1
  %7708 = load double, double* bitcast (%A3_type* @A3 to double*)
  %7709 = fadd double %7704, %7708
  %7710 = bitcast i8* %7699 to double*
  store double %7709, double* %7710, align 1, !tbaa !2452
  %7711 = getelementptr inbounds i8, i8* %7699, i64 8
  %7712 = bitcast i8* %7711 to i64*
  store i64 %7707, i64* %7712, align 1, !tbaa !2452
  %7713 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7714 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7715 = load i64, i64* %RBP
  %7716 = sub i64 %7715, 40
  %7717 = load i64, i64* %PC
  %7718 = add i64 %7717, 5
  store i64 %7718, i64* %PC
  %7719 = bitcast i8* %7714 to double*
  %7720 = load double, double* %7719, align 1
  %7721 = getelementptr inbounds i8, i8* %7714, i64 8
  %7722 = bitcast i8* %7721 to i64*
  %7723 = load i64, i64* %7722, align 1
  %7724 = inttoptr i64 %7716 to double*
  %7725 = load double, double* %7724
  %7726 = fmul double %7720, %7725
  %7727 = bitcast i8* %7713 to double*
  store double %7726, double* %7727, align 1, !tbaa !2452
  %7728 = getelementptr inbounds i8, i8* %7713, i64 8
  %7729 = bitcast i8* %7728 to i64*
  store i64 %7723, i64* %7729, align 1, !tbaa !2452
  %7730 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7731 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7732 = load i64, i64* %PC
  %7733 = add i64 %7732, 9
  store i64 %7733, i64* %PC
  %7734 = bitcast i8* %7731 to double*
  %7735 = load double, double* %7734, align 1
  %7736 = getelementptr inbounds i8, i8* %7731, i64 8
  %7737 = bitcast i8* %7736 to i64*
  %7738 = load i64, i64* %7737, align 1
  %7739 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %7740 = fadd double %7735, %7739
  %7741 = bitcast i8* %7730 to double*
  store double %7740, double* %7741, align 1, !tbaa !2452
  %7742 = getelementptr inbounds i8, i8* %7730, i64 8
  %7743 = bitcast i8* %7742 to i64*
  store i64 %7738, i64* %7743, align 1, !tbaa !2452
  %7744 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7745 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7746 = load i64, i64* %RBP
  %7747 = sub i64 %7746, 40
  %7748 = load i64, i64* %PC
  %7749 = add i64 %7748, 5
  store i64 %7749, i64* %PC
  %7750 = bitcast i8* %7745 to double*
  %7751 = load double, double* %7750, align 1
  %7752 = getelementptr inbounds i8, i8* %7745, i64 8
  %7753 = bitcast i8* %7752 to i64*
  %7754 = load i64, i64* %7753, align 1
  %7755 = inttoptr i64 %7747 to double*
  %7756 = load double, double* %7755
  %7757 = fmul double %7751, %7756
  %7758 = bitcast i8* %7744 to double*
  store double %7757, double* %7758, align 1, !tbaa !2452
  %7759 = getelementptr inbounds i8, i8* %7744, i64 8
  %7760 = bitcast i8* %7759 to i64*
  store i64 %7754, i64* %7760, align 1, !tbaa !2452
  %7761 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7762 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7763 = load i64, i64* %PC
  %7764 = add i64 %7763, 9
  store i64 %7764, i64* %PC
  %7765 = bitcast i8* %7762 to double*
  %7766 = load double, double* %7765, align 1
  %7767 = getelementptr inbounds i8, i8* %7762, i64 8
  %7768 = bitcast i8* %7767 to i64*
  %7769 = load i64, i64* %7768, align 1
  %7770 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %7771 = fadd double %7766, %7770
  %7772 = bitcast i8* %7761 to double*
  store double %7771, double* %7772, align 1, !tbaa !2452
  %7773 = getelementptr inbounds i8, i8* %7761, i64 8
  %7774 = bitcast i8* %7773 to i64*
  store i64 %7769, i64* %7774, align 1, !tbaa !2452
  %7775 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7776 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7777 = load i64, i64* %RBP
  %7778 = sub i64 %7777, 40
  %7779 = load i64, i64* %PC
  %7780 = add i64 %7779, 5
  store i64 %7780, i64* %PC
  %7781 = bitcast i8* %7776 to double*
  %7782 = load double, double* %7781, align 1
  %7783 = getelementptr inbounds i8, i8* %7776, i64 8
  %7784 = bitcast i8* %7783 to i64*
  %7785 = load i64, i64* %7784, align 1
  %7786 = inttoptr i64 %7778 to double*
  %7787 = load double, double* %7786
  %7788 = fmul double %7782, %7787
  %7789 = bitcast i8* %7775 to double*
  store double %7788, double* %7789, align 1, !tbaa !2452
  %7790 = getelementptr inbounds i8, i8* %7775, i64 8
  %7791 = bitcast i8* %7790 to i64*
  store i64 %7785, i64* %7791, align 1, !tbaa !2452
  %7792 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7793 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7794 = load i64, i64* %PC
  %7795 = add i64 %7794, 9
  store i64 %7795, i64* %PC
  %7796 = bitcast i8* %7793 to double*
  %7797 = load double, double* %7796, align 1
  %7798 = getelementptr inbounds i8, i8* %7793, i64 8
  %7799 = bitcast i8* %7798 to i64*
  %7800 = load i64, i64* %7799, align 1
  %7801 = load double, double* bitcast (%one_type* @one to double*)
  %7802 = fadd double %7797, %7801
  %7803 = bitcast i8* %7792 to double*
  store double %7802, double* %7803, align 1, !tbaa !2452
  %7804 = getelementptr inbounds i8, i8* %7792, i64 8
  %7805 = bitcast i8* %7804 to i64*
  store i64 %7800, i64* %7805, align 1, !tbaa !2452
  %7806 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7807 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7808 = bitcast %union.vec128_t* %XMM4 to i8*
  %7809 = load i64, i64* %PC
  %7810 = add i64 %7809, 4
  store i64 %7810, i64* %PC
  %7811 = bitcast i8* %7807 to double*
  %7812 = load double, double* %7811, align 1
  %7813 = getelementptr inbounds i8, i8* %7807, i64 8
  %7814 = bitcast i8* %7813 to i64*
  %7815 = load i64, i64* %7814, align 1
  %7816 = bitcast i8* %7808 to double*
  %7817 = load double, double* %7816, align 1
  %7818 = fmul double %7812, %7817
  %7819 = bitcast i8* %7806 to double*
  store double %7818, double* %7819, align 1, !tbaa !2452
  %7820 = getelementptr inbounds i8, i8* %7806, i64 8
  %7821 = bitcast i8* %7820 to i64*
  store i64 %7815, i64* %7821, align 1, !tbaa !2452
  %7822 = bitcast %union.vec128_t* %XMM3 to i8*
  %7823 = load i64, i64* %PC
  %7824 = add i64 %7823, 9
  store i64 %7824, i64* %PC
  %7825 = bitcast i8* %7822 to double*
  %7826 = load double, double* %7825, align 1
  store double %7826, double* bitcast (%sa_type* @sa to double*)
  %7827 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %7828 = load i64, i64* %RBP
  %7829 = sub i64 %7828, 40
  %7830 = load i64, i64* %PC
  %7831 = add i64 %7830, 5
  store i64 %7831, i64* %PC
  %7832 = inttoptr i64 %7829 to double*
  %7833 = load double, double* %7832
  %7834 = bitcast i8* %7827 to double*
  store double %7833, double* %7834, align 1, !tbaa !2452
  %7835 = getelementptr inbounds i8, i8* %7827, i64 8
  %7836 = bitcast i8* %7835 to double*
  store double 0.000000e+00, double* %7836, align 1, !tbaa !2452
  %7837 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %7838 = load i64, i64* %RBP
  %7839 = sub i64 %7838, 40
  %7840 = load i64, i64* %PC
  %7841 = add i64 %7840, 5
  store i64 %7841, i64* %PC
  %7842 = inttoptr i64 %7839 to double*
  %7843 = load double, double* %7842
  %7844 = bitcast i8* %7837 to double*
  store double %7843, double* %7844, align 1, !tbaa !2452
  %7845 = getelementptr inbounds i8, i8* %7837, i64 8
  %7846 = bitcast i8* %7845 to double*
  store double 0.000000e+00, double* %7846, align 1, !tbaa !2452
  %7847 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %7848 = load i64, i64* %RBP
  %7849 = sub i64 %7848, 40
  %7850 = load i64, i64* %PC
  %7851 = add i64 %7850, 5
  store i64 %7851, i64* %PC
  %7852 = inttoptr i64 %7849 to double*
  %7853 = load double, double* %7852
  %7854 = bitcast i8* %7847 to double*
  store double %7853, double* %7854, align 1, !tbaa !2452
  %7855 = getelementptr inbounds i8, i8* %7847, i64 8
  %7856 = bitcast i8* %7855 to double*
  store double 0.000000e+00, double* %7856, align 1, !tbaa !2452
  %7857 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %7858 = load i64, i64* %RBP
  %7859 = sub i64 %7858, 40
  %7860 = load i64, i64* %PC
  %7861 = add i64 %7860, 5
  store i64 %7861, i64* %PC
  %7862 = inttoptr i64 %7859 to double*
  %7863 = load double, double* %7862
  %7864 = bitcast i8* %7857 to double*
  store double %7863, double* %7864, align 1, !tbaa !2452
  %7865 = getelementptr inbounds i8, i8* %7857, i64 8
  %7866 = bitcast i8* %7865 to double*
  store double 0.000000e+00, double* %7866, align 1, !tbaa !2452
  %7867 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %7868 = load i64, i64* %RBP
  %7869 = sub i64 %7868, 40
  %7870 = load i64, i64* %PC
  %7871 = add i64 %7870, 5
  store i64 %7871, i64* %PC
  %7872 = inttoptr i64 %7869 to double*
  %7873 = load double, double* %7872
  %7874 = bitcast i8* %7867 to double*
  store double %7873, double* %7874, align 1, !tbaa !2452
  %7875 = getelementptr inbounds i8, i8* %7867, i64 8
  %7876 = bitcast i8* %7875 to double*
  store double 0.000000e+00, double* %7876, align 1, !tbaa !2452
  %7877 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %7878 = load i64, i64* %PC
  %7879 = add i64 %7878, 10
  store i64 %7879, i64* %PC
  %7880 = load double, double* bitcast (%B6_type* @B6 to double*)
  %7881 = bitcast i8* %7877 to double*
  store double %7880, double* %7881, align 1, !tbaa !2452
  %7882 = getelementptr inbounds i8, i8* %7877, i64 8
  %7883 = bitcast i8* %7882 to double*
  store double 0.000000e+00, double* %7883, align 1, !tbaa !2452
  %7884 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %7885 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %7886 = load i64, i64* %RBP
  %7887 = sub i64 %7886, 40
  %7888 = load i64, i64* %PC
  %7889 = add i64 %7888, 6
  store i64 %7889, i64* %PC
  %7890 = bitcast i8* %7885 to double*
  %7891 = load double, double* %7890, align 1
  %7892 = getelementptr inbounds i8, i8* %7885, i64 8
  %7893 = bitcast i8* %7892 to i64*
  %7894 = load i64, i64* %7893, align 1
  %7895 = inttoptr i64 %7887 to double*
  %7896 = load double, double* %7895
  %7897 = fmul double %7891, %7896
  %7898 = bitcast i8* %7884 to double*
  store double %7897, double* %7898, align 1, !tbaa !2452
  %7899 = getelementptr inbounds i8, i8* %7884, i64 8
  %7900 = bitcast i8* %7899 to i64*
  store i64 %7894, i64* %7900, align 1, !tbaa !2452
  %7901 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %7902 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %7903 = load i64, i64* %PC
  %7904 = add i64 %7903, 10
  store i64 %7904, i64* %PC
  %7905 = bitcast i8* %7902 to double*
  %7906 = load double, double* %7905, align 1
  %7907 = getelementptr inbounds i8, i8* %7902, i64 8
  %7908 = bitcast i8* %7907 to i64*
  %7909 = load i64, i64* %7908, align 1
  %7910 = load double, double* bitcast (%B5_type* @B5 to double*)
  %7911 = fadd double %7906, %7910
  %7912 = bitcast i8* %7901 to double*
  store double %7911, double* %7912, align 1, !tbaa !2452
  %7913 = getelementptr inbounds i8, i8* %7901, i64 8
  %7914 = bitcast i8* %7913 to i64*
  store i64 %7909, i64* %7914, align 1, !tbaa !2452
  %7915 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %7916 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %7917 = bitcast %union.vec128_t* %XMM8 to i8*
  %7918 = load i64, i64* %PC
  %7919 = add i64 %7918, 5
  store i64 %7919, i64* %PC
  %7920 = bitcast i8* %7916 to double*
  %7921 = load double, double* %7920, align 1
  %7922 = getelementptr inbounds i8, i8* %7916, i64 8
  %7923 = bitcast i8* %7922 to i64*
  %7924 = load i64, i64* %7923, align 1
  %7925 = bitcast i8* %7917 to double*
  %7926 = load double, double* %7925, align 1
  %7927 = fmul double %7921, %7926
  %7928 = bitcast i8* %7915 to double*
  store double %7927, double* %7928, align 1, !tbaa !2452
  %7929 = getelementptr inbounds i8, i8* %7915, i64 8
  %7930 = bitcast i8* %7929 to i64*
  store i64 %7924, i64* %7930, align 1, !tbaa !2452
  %7931 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %7932 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %7933 = load i64, i64* %PC
  %7934 = add i64 %7933, 9
  store i64 %7934, i64* %PC
  %7935 = bitcast i8* %7932 to double*
  %7936 = load double, double* %7935, align 1
  %7937 = getelementptr inbounds i8, i8* %7932, i64 8
  %7938 = bitcast i8* %7937 to i64*
  %7939 = load i64, i64* %7938, align 1
  %7940 = load double, double* bitcast (%B4_type* @B4 to double*)
  %7941 = fadd double %7936, %7940
  %7942 = bitcast i8* %7931 to double*
  store double %7941, double* %7942, align 1, !tbaa !2452
  %7943 = getelementptr inbounds i8, i8* %7931, i64 8
  %7944 = bitcast i8* %7943 to i64*
  store i64 %7939, i64* %7944, align 1, !tbaa !2452
  %7945 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %7946 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %7947 = bitcast %union.vec128_t* %XMM7 to i8*
  %7948 = load i64, i64* %PC
  %7949 = add i64 %7948, 4
  store i64 %7949, i64* %PC
  %7950 = bitcast i8* %7946 to double*
  %7951 = load double, double* %7950, align 1
  %7952 = getelementptr inbounds i8, i8* %7946, i64 8
  %7953 = bitcast i8* %7952 to i64*
  %7954 = load i64, i64* %7953, align 1
  %7955 = bitcast i8* %7947 to double*
  %7956 = load double, double* %7955, align 1
  %7957 = fmul double %7951, %7956
  %7958 = bitcast i8* %7945 to double*
  store double %7957, double* %7958, align 1, !tbaa !2452
  %7959 = getelementptr inbounds i8, i8* %7945, i64 8
  %7960 = bitcast i8* %7959 to i64*
  store i64 %7954, i64* %7960, align 1, !tbaa !2452
  %7961 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %7962 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %7963 = load i64, i64* %PC
  %7964 = add i64 %7963, 9
  store i64 %7964, i64* %PC
  %7965 = bitcast i8* %7962 to double*
  %7966 = load double, double* %7965, align 1
  %7967 = getelementptr inbounds i8, i8* %7962, i64 8
  %7968 = bitcast i8* %7967 to i64*
  %7969 = load i64, i64* %7968, align 1
  %7970 = load double, double* bitcast (%B3_type* @B3 to double*)
  %7971 = fadd double %7966, %7970
  %7972 = bitcast i8* %7961 to double*
  store double %7971, double* %7972, align 1, !tbaa !2452
  %7973 = getelementptr inbounds i8, i8* %7961, i64 8
  %7974 = bitcast i8* %7973 to i64*
  store i64 %7969, i64* %7974, align 1, !tbaa !2452
  %7975 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %7976 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %7977 = bitcast %union.vec128_t* %XMM6 to i8*
  %7978 = load i64, i64* %PC
  %7979 = add i64 %7978, 4
  store i64 %7979, i64* %PC
  %7980 = bitcast i8* %7976 to double*
  %7981 = load double, double* %7980, align 1
  %7982 = getelementptr inbounds i8, i8* %7976, i64 8
  %7983 = bitcast i8* %7982 to i64*
  %7984 = load i64, i64* %7983, align 1
  %7985 = bitcast i8* %7977 to double*
  %7986 = load double, double* %7985, align 1
  %7987 = fmul double %7981, %7986
  %7988 = bitcast i8* %7975 to double*
  store double %7987, double* %7988, align 1, !tbaa !2452
  %7989 = getelementptr inbounds i8, i8* %7975, i64 8
  %7990 = bitcast i8* %7989 to i64*
  store i64 %7984, i64* %7990, align 1, !tbaa !2452
  %7991 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %7992 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %7993 = load i64, i64* %PC
  %7994 = add i64 %7993, 9
  store i64 %7994, i64* %PC
  %7995 = bitcast i8* %7992 to double*
  %7996 = load double, double* %7995, align 1
  %7997 = getelementptr inbounds i8, i8* %7992, i64 8
  %7998 = bitcast i8* %7997 to i64*
  %7999 = load i64, i64* %7998, align 1
  %8000 = load double, double* bitcast (%B2_type* @B2 to double*)
  %8001 = fadd double %7996, %8000
  %8002 = bitcast i8* %7991 to double*
  store double %8001, double* %8002, align 1, !tbaa !2452
  %8003 = getelementptr inbounds i8, i8* %7991, i64 8
  %8004 = bitcast i8* %8003 to i64*
  store i64 %7999, i64* %8004, align 1, !tbaa !2452
  %8005 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8006 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8007 = bitcast %union.vec128_t* %XMM5 to i8*
  %8008 = load i64, i64* %PC
  %8009 = add i64 %8008, 4
  store i64 %8009, i64* %PC
  %8010 = bitcast i8* %8006 to double*
  %8011 = load double, double* %8010, align 1
  %8012 = getelementptr inbounds i8, i8* %8006, i64 8
  %8013 = bitcast i8* %8012 to i64*
  %8014 = load i64, i64* %8013, align 1
  %8015 = bitcast i8* %8007 to double*
  %8016 = load double, double* %8015, align 1
  %8017 = fmul double %8011, %8016
  %8018 = bitcast i8* %8005 to double*
  store double %8017, double* %8018, align 1, !tbaa !2452
  %8019 = getelementptr inbounds i8, i8* %8005, i64 8
  %8020 = bitcast i8* %8019 to i64*
  store i64 %8014, i64* %8020, align 1, !tbaa !2452
  %8021 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8022 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8023 = load i64, i64* %PC
  %8024 = add i64 %8023, 9
  store i64 %8024, i64* %PC
  %8025 = bitcast i8* %8022 to double*
  %8026 = load double, double* %8025, align 1
  %8027 = getelementptr inbounds i8, i8* %8022, i64 8
  %8028 = bitcast i8* %8027 to i64*
  %8029 = load i64, i64* %8028, align 1
  %8030 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %8031 = fadd double %8026, %8030
  %8032 = bitcast i8* %8021 to double*
  store double %8031, double* %8032, align 1, !tbaa !2452
  %8033 = getelementptr inbounds i8, i8* %8021, i64 8
  %8034 = bitcast i8* %8033 to i64*
  store i64 %8029, i64* %8034, align 1, !tbaa !2452
  %8035 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8036 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8037 = bitcast %union.vec128_t* %XMM4 to i8*
  %8038 = load i64, i64* %PC
  %8039 = add i64 %8038, 4
  store i64 %8039, i64* %PC
  %8040 = bitcast i8* %8036 to double*
  %8041 = load double, double* %8040, align 1
  %8042 = getelementptr inbounds i8, i8* %8036, i64 8
  %8043 = bitcast i8* %8042 to i64*
  %8044 = load i64, i64* %8043, align 1
  %8045 = bitcast i8* %8037 to double*
  %8046 = load double, double* %8045, align 1
  %8047 = fmul double %8041, %8046
  %8048 = bitcast i8* %8035 to double*
  store double %8047, double* %8048, align 1, !tbaa !2452
  %8049 = getelementptr inbounds i8, i8* %8035, i64 8
  %8050 = bitcast i8* %8049 to i64*
  store i64 %8044, i64* %8050, align 1, !tbaa !2452
  %8051 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8052 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8053 = load i64, i64* %PC
  %8054 = add i64 %8053, 9
  store i64 %8054, i64* %PC
  %8055 = bitcast i8* %8052 to double*
  %8056 = load double, double* %8055, align 1
  %8057 = getelementptr inbounds i8, i8* %8052, i64 8
  %8058 = bitcast i8* %8057 to i64*
  %8059 = load i64, i64* %8058, align 1
  %8060 = load double, double* bitcast (%one_type* @one to double*)
  %8061 = fadd double %8056, %8060
  %8062 = bitcast i8* %8051 to double*
  store double %8061, double* %8062, align 1, !tbaa !2452
  %8063 = getelementptr inbounds i8, i8* %8051, i64 8
  %8064 = bitcast i8* %8063 to i64*
  store i64 %8059, i64* %8064, align 1, !tbaa !2452
  %8065 = bitcast %union.vec128_t* %XMM3 to i8*
  %8066 = load i64, i64* %PC
  %8067 = add i64 %8066, 9
  store i64 %8067, i64* %PC
  %8068 = bitcast i8* %8065 to double*
  %8069 = load double, double* %8068, align 1
  store double %8069, double* bitcast (%sb_type* @sb to double*)
  %8070 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8071 = load i64, i64* %PC
  %8072 = add i64 %8071, 9
  store i64 %8072, i64* %PC
  %8073 = load double, double* bitcast (%sa_type* @sa to double*)
  %8074 = bitcast i8* %8070 to double*
  store double %8073, double* %8074, align 1, !tbaa !2452
  %8075 = getelementptr inbounds i8, i8* %8070, i64 8
  %8076 = bitcast i8* %8075 to double*
  store double 0.000000e+00, double* %8076, align 1, !tbaa !2452
  %8077 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8078 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8079 = load i64, i64* %PC
  %8080 = add i64 %8079, 9
  store i64 %8080, i64* %PC
  %8081 = bitcast i8* %8078 to double*
  %8082 = load double, double* %8081, align 1
  %8083 = getelementptr inbounds i8, i8* %8078, i64 8
  %8084 = bitcast i8* %8083 to i64*
  %8085 = load i64, i64* %8084, align 1
  %8086 = load double, double* bitcast (%sb_type* @sb to double*)
  %8087 = fdiv double %8082, %8086
  %8088 = bitcast i8* %8077 to double*
  store double %8087, double* %8088, align 1, !tbaa !2452
  %8089 = getelementptr inbounds i8, i8* %8077, i64 8
  %8090 = bitcast i8* %8089 to i64*
  store i64 %8085, i64* %8090, align 1, !tbaa !2452
  %8091 = bitcast %union.vec128_t* %XMM3 to i8*
  %8092 = load i64, i64* %PC
  %8093 = add i64 %8092, 9
  store i64 %8093, i64* %PC
  %8094 = bitcast i8* %8091 to double*
  %8095 = load double, double* %8094, align 1
  store double %8095, double* bitcast (%sa_type* @sa to double*)
  %8096 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8097 = load i64, i64* %PC
  %8098 = add i64 %8097, 9
  store i64 %8098, i64* %PC
  %8099 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 120) to double*)
  %8100 = bitcast i8* %8096 to double*
  store double %8099, double* %8100, align 1, !tbaa !2452
  %8101 = getelementptr inbounds i8, i8* %8096, i64 8
  %8102 = bitcast i8* %8101 to double*
  store double 0.000000e+00, double* %8102, align 1, !tbaa !2452
  %8103 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8104 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8105 = bitcast %union.vec128_t* %XMM2 to i8*
  %8106 = load i64, i64* %PC
  %8107 = add i64 %8106, 4
  store i64 %8107, i64* %PC
  %8108 = bitcast i8* %8104 to double*
  %8109 = load double, double* %8108, align 1
  %8110 = getelementptr inbounds i8, i8* %8104, i64 8
  %8111 = bitcast i8* %8110 to i64*
  %8112 = load i64, i64* %8111, align 1
  %8113 = bitcast i8* %8105 to double*
  %8114 = load double, double* %8113, align 1
  %8115 = fdiv double %8109, %8114
  %8116 = bitcast i8* %8103 to double*
  store double %8115, double* %8116, align 1, !tbaa !2452
  %8117 = getelementptr inbounds i8, i8* %8103, i64 8
  %8118 = bitcast i8* %8117 to i64*
  store i64 %8112, i64* %8118, align 1, !tbaa !2452
  %8119 = bitcast %union.vec128_t* %XMM3 to i8*
  %8120 = load i64, i64* %PC
  %8121 = add i64 %8120, 9
  store i64 %8121, i64* %PC
  %8122 = bitcast i8* %8119 to double*
  %8123 = load double, double* %8122, align 1
  store double %8123, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 128) to double*)
  %8124 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8125 = load i64, i64* %RBP
  %8126 = sub i64 %8125, 48
  %8127 = load i64, i64* %PC
  %8128 = add i64 %8127, 5
  store i64 %8128, i64* %PC
  %8129 = inttoptr i64 %8126 to double*
  %8130 = load double, double* %8129
  %8131 = bitcast i8* %8124 to double*
  store double %8130, double* %8131, align 1, !tbaa !2452
  %8132 = getelementptr inbounds i8, i8* %8124, i64 8
  %8133 = bitcast i8* %8132 to double*
  store double 0.000000e+00, double* %8133, align 1, !tbaa !2452
  %8134 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8135 = load i64, i64* %PC
  %8136 = add i64 %8135, 9
  store i64 %8136, i64* %PC
  %8137 = load double, double* bitcast (%sa_type* @sa to double*)
  %8138 = bitcast i8* %8134 to double*
  store double %8137, double* %8138, align 1, !tbaa !2452
  %8139 = getelementptr inbounds i8, i8* %8134, i64 8
  %8140 = bitcast i8* %8139 to double*
  store double 0.000000e+00, double* %8140, align 1, !tbaa !2452
  %8141 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8142 = load i64, i64* %PC
  %8143 = add i64 %8142, 9
  store i64 %8143, i64* %PC
  %8144 = load double, double* bitcast (%two_type* @two to double*)
  %8145 = bitcast i8* %8141 to double*
  store double %8144, double* %8145, align 1, !tbaa !2452
  %8146 = getelementptr inbounds i8, i8* %8141, i64 8
  %8147 = bitcast i8* %8146 to double*
  store double 0.000000e+00, double* %8147, align 1, !tbaa !2452
  %8148 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8149 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8150 = load i64, i64* %RBP
  %8151 = sub i64 %8150, 16
  %8152 = load i64, i64* %PC
  %8153 = add i64 %8152, 5
  store i64 %8153, i64* %PC
  %8154 = bitcast i8* %8149 to double*
  %8155 = load double, double* %8154, align 1
  %8156 = getelementptr inbounds i8, i8* %8149, i64 8
  %8157 = bitcast i8* %8156 to i64*
  %8158 = load i64, i64* %8157, align 1
  %8159 = inttoptr i64 %8151 to double*
  %8160 = load double, double* %8159
  %8161 = fmul double %8155, %8160
  %8162 = bitcast i8* %8148 to double*
  store double %8161, double* %8162, align 1, !tbaa !2452
  %8163 = getelementptr inbounds i8, i8* %8148, i64 8
  %8164 = bitcast i8* %8163 to i64*
  store i64 %8158, i64* %8164, align 1, !tbaa !2452
  %8165 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8166 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8167 = bitcast %union.vec128_t* %XMM4 to i8*
  %8168 = load i64, i64* %PC
  %8169 = add i64 %8168, 4
  store i64 %8169, i64* %PC
  %8170 = bitcast i8* %8166 to double*
  %8171 = load double, double* %8170, align 1
  %8172 = getelementptr inbounds i8, i8* %8166, i64 8
  %8173 = bitcast i8* %8172 to i64*
  %8174 = load i64, i64* %8173, align 1
  %8175 = bitcast i8* %8167 to double*
  %8176 = load double, double* %8175, align 1
  %8177 = fadd double %8171, %8176
  %8178 = bitcast i8* %8165 to double*
  store double %8177, double* %8178, align 1, !tbaa !2452
  %8179 = getelementptr inbounds i8, i8* %8165, i64 8
  %8180 = bitcast i8* %8179 to i64*
  store i64 %8174, i64* %8180, align 1, !tbaa !2452
  %8181 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8182 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8183 = bitcast %union.vec128_t* %XMM3 to i8*
  %8184 = load i64, i64* %PC
  %8185 = add i64 %8184, 4
  store i64 %8185, i64* %PC
  %8186 = bitcast i8* %8182 to double*
  %8187 = load double, double* %8186, align 1
  %8188 = getelementptr inbounds i8, i8* %8182, i64 8
  %8189 = bitcast i8* %8188 to i64*
  %8190 = load i64, i64* %8189, align 1
  %8191 = bitcast i8* %8183 to double*
  %8192 = load double, double* %8191, align 1
  %8193 = fmul double %8187, %8192
  %8194 = bitcast i8* %8181 to double*
  store double %8193, double* %8194, align 1, !tbaa !2452
  %8195 = getelementptr inbounds i8, i8* %8181, i64 8
  %8196 = bitcast i8* %8195 to i64*
  store i64 %8190, i64* %8196, align 1, !tbaa !2452
  %8197 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8198 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8199 = load i64, i64* %PC
  %8200 = add i64 %8199, 9
  store i64 %8200, i64* %PC
  %8201 = bitcast i8* %8198 to double*
  %8202 = load double, double* %8201, align 1
  %8203 = getelementptr inbounds i8, i8* %8198, i64 8
  %8204 = bitcast i8* %8203 to i64*
  %8205 = load i64, i64* %8204, align 1
  %8206 = load double, double* bitcast (%two_type* @two to double*)
  %8207 = fdiv double %8202, %8206
  %8208 = bitcast i8* %8197 to double*
  store double %8207, double* %8208, align 1, !tbaa !2452
  %8209 = getelementptr inbounds i8, i8* %8197, i64 8
  %8210 = bitcast i8* %8209 to i64*
  store i64 %8205, i64* %8210, align 1, !tbaa !2452
  %8211 = bitcast %union.vec128_t* %XMM2 to i8*
  %8212 = load i64, i64* %PC
  %8213 = add i64 %8212, 9
  store i64 %8213, i64* %PC
  %8214 = bitcast i8* %8211 to double*
  %8215 = load double, double* %8214, align 1
  store double %8215, double* bitcast (%sa_type* @sa to double*)
  %8216 = bitcast %union.vec128_t* %XMM1 to i8*
  %8217 = load i64, i64* %PC
  %8218 = add i64 %8217, 9
  store i64 %8218, i64* %PC
  %8219 = bitcast i8* %8216 to double*
  %8220 = load double, double* %8219, align 1
  store double %8220, double* bitcast (%sb_type* @sb to double*)
  %8221 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8222 = load i64, i64* %PC
  %8223 = add i64 %8222, 9
  store i64 %8223, i64* %PC
  %8224 = load double, double* bitcast (%sa_type* @sa to double*)
  %8225 = bitcast i8* %8221 to double*
  store double %8224, double* %8225, align 1, !tbaa !2452
  %8226 = getelementptr inbounds i8, i8* %8221, i64 8
  %8227 = bitcast i8* %8226 to double*
  store double 0.000000e+00, double* %8227, align 1, !tbaa !2452
  %8228 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8229 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8230 = load i64, i64* %PC
  %8231 = add i64 %8230, 9
  store i64 %8231, i64* %PC
  %8232 = bitcast i8* %8229 to double*
  %8233 = load double, double* %8232, align 1
  %8234 = getelementptr inbounds i8, i8* %8229, i64 8
  %8235 = bitcast i8* %8234 to i64*
  %8236 = load i64, i64* %8235, align 1
  %8237 = load double, double* bitcast (%sb_type* @sb to double*)
  %8238 = fsub double %8233, %8237
  %8239 = bitcast i8* %8228 to double*
  store double %8238, double* %8239, align 1, !tbaa !2452
  %8240 = getelementptr inbounds i8, i8* %8228, i64 8
  %8241 = bitcast i8* %8240 to i64*
  store i64 %8236, i64* %8241, align 1, !tbaa !2452
  %8242 = bitcast %union.vec128_t* %XMM1 to i8*
  %8243 = load i64, i64* %PC
  %8244 = add i64 %8243, 9
  store i64 %8244, i64* %PC
  %8245 = bitcast i8* %8242 to double*
  %8246 = load double, double* %8245, align 1
  store double %8246, double* bitcast (%sc_type* @sc to double*)
  %8247 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8248 = load i64, i64* %PC
  %8249 = add i64 %8248, 9
  store i64 %8249, i64* %PC
  %8250 = load double, double* bitcast (%one_type* @one to double*)
  %8251 = bitcast i8* %8247 to double*
  store double %8250, double* %8251, align 1, !tbaa !2452
  %8252 = getelementptr inbounds i8, i8* %8247, i64 8
  %8253 = bitcast i8* %8252 to double*
  store double 0.000000e+00, double* %8253, align 1, !tbaa !2452
  %8254 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8255 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8256 = load i64, i64* %PC
  %8257 = add i64 %8256, 9
  store i64 %8257, i64* %PC
  %8258 = bitcast i8* %8255 to double*
  %8259 = load double, double* %8258, align 1
  %8260 = getelementptr inbounds i8, i8* %8255, i64 8
  %8261 = bitcast i8* %8260 to i64*
  %8262 = load i64, i64* %8261, align 1
  %8263 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 128) to double*)
  %8264 = fdiv double %8259, %8263
  %8265 = bitcast i8* %8254 to double*
  store double %8264, double* %8265, align 1, !tbaa !2452
  %8266 = getelementptr inbounds i8, i8* %8254, i64 8
  %8267 = bitcast i8* %8266 to i64*
  store i64 %8262, i64* %8267, align 1, !tbaa !2452
  %8268 = bitcast %union.vec128_t* %XMM1 to i8*
  %8269 = load i64, i64* %PC
  %8270 = add i64 %8269, 9
  store i64 %8270, i64* %PC
  %8271 = bitcast i8* %8268 to double*
  %8272 = load double, double* %8271, align 1
  store double %8272, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 136) to double*)
  %8273 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8274 = bitcast %union.vec128_t* %XMM0 to i8*
  %8275 = load i64, i64* %PC
  %8276 = add i64 %8275, 3
  store i64 %8276, i64* %PC
  %8277 = bitcast i8* %8274 to <2 x i32>*
  %8278 = load <2 x i32>, <2 x i32>* %8277, align 1
  %8279 = getelementptr inbounds i8, i8* %8274, i64 8
  %8280 = bitcast i8* %8279 to <2 x i32>*
  %8281 = load <2 x i32>, <2 x i32>* %8280, align 1
  %8282 = extractelement <2 x i32> %8278, i32 0
  %8283 = bitcast i8* %8273 to i32*
  store i32 %8282, i32* %8283, align 1, !tbaa !2455
  %8284 = extractelement <2 x i32> %8278, i32 1
  %8285 = getelementptr inbounds i8, i8* %8273, i64 4
  %8286 = bitcast i8* %8285 to i32*
  store i32 %8284, i32* %8286, align 1, !tbaa !2455
  %8287 = extractelement <2 x i32> %8281, i32 0
  %8288 = getelementptr inbounds i8, i8* %8273, i64 8
  %8289 = bitcast i8* %8288 to i32*
  store i32 %8287, i32* %8289, align 1, !tbaa !2455
  %8290 = extractelement <2 x i32> %8281, i32 1
  %8291 = getelementptr inbounds i8, i8* %8273, i64 12
  %8292 = bitcast i8* %8291 to i32*
  store i32 %8290, i32* %8292, align 1, !tbaa !2455
  %8293 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8294 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8295 = load i64, i64* %PC
  %8296 = add i64 %8295, 9
  store i64 %8296, i64* %PC
  %8297 = bitcast i8* %8294 to double*
  %8298 = load double, double* %8297, align 1
  %8299 = getelementptr inbounds i8, i8* %8294, i64 8
  %8300 = bitcast i8* %8299 to i64*
  %8301 = load i64, i64* %8300, align 1
  %8302 = load double, double* bitcast (%sc_type* @sc to double*)
  %8303 = fmul double %8298, %8302
  %8304 = bitcast i8* %8293 to double*
  store double %8303, double* %8304, align 1, !tbaa !2452
  %8305 = getelementptr inbounds i8, i8* %8293, i64 8
  %8306 = bitcast i8* %8305 to i64*
  store i64 %8301, i64* %8306, align 1, !tbaa !2452
  %8307 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8308 = bitcast %union.vec128_t* %XMM0 to i8*
  %8309 = load i64, i64* %PC
  %8310 = add i64 %8309, 3
  store i64 %8310, i64* %PC
  %8311 = bitcast i8* %8308 to <2 x i32>*
  %8312 = load <2 x i32>, <2 x i32>* %8311, align 1
  %8313 = getelementptr inbounds i8, i8* %8308, i64 8
  %8314 = bitcast i8* %8313 to <2 x i32>*
  %8315 = load <2 x i32>, <2 x i32>* %8314, align 1
  %8316 = extractelement <2 x i32> %8312, i32 0
  %8317 = bitcast i8* %8307 to i32*
  store i32 %8316, i32* %8317, align 1, !tbaa !2455
  %8318 = extractelement <2 x i32> %8312, i32 1
  %8319 = getelementptr inbounds i8, i8* %8307, i64 4
  %8320 = bitcast i8* %8319 to i32*
  store i32 %8318, i32* %8320, align 1, !tbaa !2455
  %8321 = extractelement <2 x i32> %8315, i32 0
  %8322 = getelementptr inbounds i8, i8* %8307, i64 8
  %8323 = bitcast i8* %8322 to i32*
  store i32 %8321, i32* %8323, align 1, !tbaa !2455
  %8324 = extractelement <2 x i32> %8315, i32 1
  %8325 = getelementptr inbounds i8, i8* %8307, i64 12
  %8326 = bitcast i8* %8325 to i32*
  store i32 %8324, i32* %8326, align 1, !tbaa !2455
  %8327 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8328 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8329 = load i64, i64* %PC
  %8330 = add i64 %8329, 9
  store i64 %8330, i64* %PC
  %8331 = bitcast i8* %8328 to double*
  %8332 = load double, double* %8331, align 1
  %8333 = getelementptr inbounds i8, i8* %8328, i64 8
  %8334 = bitcast i8* %8333 to i64*
  %8335 = load i64, i64* %8334, align 1
  %8336 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 120) to double*)
  %8337 = fmul double %8332, %8336
  %8338 = bitcast i8* %8327 to double*
  store double %8337, double* %8338, align 1, !tbaa !2452
  %8339 = getelementptr inbounds i8, i8* %8327, i64 8
  %8340 = bitcast i8* %8339 to i64*
  store i64 %8335, i64* %8340, align 1, !tbaa !2452
  %8341 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8342 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8343 = load i64, i64* %PC
  %8344 = add i64 %8343, 9
  store i64 %8344, i64* %PC
  %8345 = bitcast i8* %8342 to double*
  %8346 = load double, double* %8345, align 1
  %8347 = getelementptr inbounds i8, i8* %8342, i64 8
  %8348 = bitcast i8* %8347 to i64*
  %8349 = load i64, i64* %8348, align 1
  %8350 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 136) to double*)
  %8351 = fmul double %8346, %8350
  %8352 = bitcast i8* %8341 to double*
  store double %8351, double* %8352, align 1, !tbaa !2452
  %8353 = getelementptr inbounds i8, i8* %8341, i64 8
  %8354 = bitcast i8* %8353 to i64*
  store i64 %8349, i64* %8354, align 1, !tbaa !2452
  %8355 = load i64, i64* %RBP
  %8356 = sub i64 %8355, 232
  %8357 = bitcast %union.vec128_t* %XMM0 to i8*
  %8358 = load i64, i64* %PC
  %8359 = add i64 %8358, 8
  store i64 %8359, i64* %PC
  %8360 = bitcast i8* %8357 to double*
  %8361 = load double, double* %8360, align 1
  %8362 = inttoptr i64 %8356 to double*
  store double %8361, double* %8362
  %8363 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8364 = bitcast %union.vec128_t* %XMM1 to i8*
  %8365 = load i64, i64* %PC
  %8366 = add i64 %8365, 3
  store i64 %8366, i64* %PC
  %8367 = bitcast i8* %8364 to <2 x i32>*
  %8368 = load <2 x i32>, <2 x i32>* %8367, align 1
  %8369 = getelementptr inbounds i8, i8* %8364, i64 8
  %8370 = bitcast i8* %8369 to <2 x i32>*
  %8371 = load <2 x i32>, <2 x i32>* %8370, align 1
  %8372 = extractelement <2 x i32> %8368, i32 0
  %8373 = bitcast i8* %8363 to i32*
  store i32 %8372, i32* %8373, align 1, !tbaa !2455
  %8374 = extractelement <2 x i32> %8368, i32 1
  %8375 = getelementptr inbounds i8, i8* %8363, i64 4
  %8376 = bitcast i8* %8375 to i32*
  store i32 %8374, i32* %8376, align 1, !tbaa !2455
  %8377 = extractelement <2 x i32> %8371, i32 0
  %8378 = getelementptr inbounds i8, i8* %8363, i64 8
  %8379 = bitcast i8* %8378 to i32*
  store i32 %8377, i32* %8379, align 1, !tbaa !2455
  %8380 = extractelement <2 x i32> %8371, i32 1
  %8381 = getelementptr inbounds i8, i8* %8363, i64 12
  %8382 = bitcast i8* %8381 to i32*
  store i32 %8380, i32* %8382, align 1, !tbaa !2455
  %8383 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8384 = bitcast %union.vec128_t* %XMM2 to i8*
  %8385 = load i64, i64* %PC
  %8386 = add i64 %8385, 3
  store i64 %8386, i64* %PC
  %8387 = bitcast i8* %8384 to <2 x i32>*
  %8388 = load <2 x i32>, <2 x i32>* %8387, align 1
  %8389 = getelementptr inbounds i8, i8* %8384, i64 8
  %8390 = bitcast i8* %8389 to <2 x i32>*
  %8391 = load <2 x i32>, <2 x i32>* %8390, align 1
  %8392 = extractelement <2 x i32> %8388, i32 0
  %8393 = bitcast i8* %8383 to i32*
  store i32 %8392, i32* %8393, align 1, !tbaa !2455
  %8394 = extractelement <2 x i32> %8388, i32 1
  %8395 = getelementptr inbounds i8, i8* %8383, i64 4
  %8396 = bitcast i8* %8395 to i32*
  store i32 %8394, i32* %8396, align 1, !tbaa !2455
  %8397 = extractelement <2 x i32> %8391, i32 0
  %8398 = getelementptr inbounds i8, i8* %8383, i64 8
  %8399 = bitcast i8* %8398 to i32*
  store i32 %8397, i32* %8399, align 1, !tbaa !2455
  %8400 = extractelement <2 x i32> %8391, i32 1
  %8401 = getelementptr inbounds i8, i8* %8383, i64 12
  %8402 = bitcast i8* %8401 to i32*
  store i32 %8400, i32* %8402, align 1, !tbaa !2455
  %8403 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8404 = load i64, i64* %RBP
  %8405 = sub i64 %8404, 232
  %8406 = load i64, i64* %PC
  %8407 = add i64 %8406, 8
  store i64 %8407, i64* %PC
  %8408 = inttoptr i64 %8405 to double*
  %8409 = load double, double* %8408
  %8410 = bitcast i8* %8403 to double*
  store double %8409, double* %8410, align 1, !tbaa !2452
  %8411 = getelementptr inbounds i8, i8* %8403, i64 8
  %8412 = bitcast i8* %8411 to double*
  store double 0.000000e+00, double* %8412, align 1, !tbaa !2452
  %8413 = load i64, i64* %RBP
  %8414 = sub i64 %8413, 236
  %8415 = load i32, i32* %EAX
  %8416 = zext i32 %8415 to i64
  %8417 = load i64, i64* %PC
  %8418 = add i64 %8417, 6
  store i64 %8418, i64* %PC
  %8419 = inttoptr i64 %8414 to i32*
  store i32 %8415, i32* %8419
  %8420 = load i64, i64* %PC
  %8421 = add i64 %8420, 2
  store i64 %8421, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %8422 = load i64, i64* %PC
  %8423 = sub i64 %8422, 5172
  %8424 = load i64, i64* %PC
  %8425 = add i64 %8424, 5
  %8426 = load i64, i64* %PC
  %8427 = add i64 %8426, 5
  store i64 %8427, i64* %PC
  %8428 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8429 = load i64, i64* %8428, align 8, !tbaa !2428
  %8430 = add i64 %8429, -8
  %8431 = inttoptr i64 %8430 to i64*
  store i64 %8425, i64* %8431
  store i64 %8430, i64* %8428, align 8, !tbaa !2428
  %8432 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8423, i64* %8432, align 8, !tbaa !2428
  %8433 = load i64, i64* %PC
  %8434 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %8433, %struct.Memory* %7475)
  %8435 = load i64, i64* %PC
  %8436 = add i64 %8435, 10
  store i64 %8436, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %8437 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8438 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8439 = bitcast %union.vec128_t* %XMM0 to i8*
  %8440 = load i64, i64* %PC
  %8441 = add i64 %8440, 3
  store i64 %8441, i64* %PC
  %8442 = bitcast i8* %8438 to i64*
  %8443 = load i64, i64* %8442, align 1
  %8444 = getelementptr inbounds i8, i8* %8438, i64 8
  %8445 = bitcast i8* %8444 to i64*
  %8446 = load i64, i64* %8445, align 1
  %8447 = bitcast i8* %8439 to i64*
  %8448 = load i64, i64* %8447, align 1
  %8449 = getelementptr inbounds i8, i8* %8439, i64 8
  %8450 = bitcast i8* %8449 to i64*
  %8451 = load i64, i64* %8450, align 1
  %8452 = xor i64 %8448, %8443
  %8453 = xor i64 %8451, %8446
  %8454 = trunc i64 %8452 to i32
  %8455 = lshr i64 %8452, 32
  %8456 = trunc i64 %8455 to i32
  %8457 = bitcast i8* %8437 to i32*
  store i32 %8454, i32* %8457, align 1, !tbaa !2454
  %8458 = getelementptr inbounds i8, i8* %8437, i64 4
  %8459 = bitcast i8* %8458 to i32*
  store i32 %8456, i32* %8459, align 1, !tbaa !2454
  %8460 = trunc i64 %8453 to i32
  %8461 = getelementptr inbounds i8, i8* %8437, i64 8
  %8462 = bitcast i8* %8461 to i32*
  store i32 %8460, i32* %8462, align 1, !tbaa !2454
  %8463 = lshr i64 %8453, 32
  %8464 = trunc i64 %8463 to i32
  %8465 = getelementptr inbounds i8, i8* %8437, i64 12
  %8466 = bitcast i8* %8465 to i32*
  store i32 %8464, i32* %8466, align 1, !tbaa !2454
  %8467 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8468 = load i64, i64* %PC
  %8469 = add i64 %8468, 9
  store i64 %8469, i64* %PC
  %8470 = load double, double* bitcast (%piref_type* @piref to double*)
  %8471 = bitcast i8* %8467 to double*
  store double %8470, double* %8471, align 1, !tbaa !2452
  %8472 = getelementptr inbounds i8, i8* %8467, i64 8
  %8473 = bitcast i8* %8472 to double*
  store double 0.000000e+00, double* %8473, align 1, !tbaa !2452
  %8474 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8475 = load i64, i64* %PC
  %8476 = add i64 %8475, 9
  store i64 %8476, i64* %PC
  %8477 = load double, double* bitcast (%four_type* @four to double*)
  %8478 = bitcast i8* %8474 to double*
  store double %8477, double* %8478, align 1, !tbaa !2452
  %8479 = getelementptr inbounds i8, i8* %8474, i64 8
  %8480 = bitcast i8* %8479 to double*
  store double 0.000000e+00, double* %8480, align 1, !tbaa !2452
  %8481 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8482 = load i64, i64* %RBP
  %8483 = sub i64 %8482, 80
  %8484 = load i64, i64* %PC
  %8485 = add i64 %8484, 6
  store i64 %8485, i64* %PC
  %8486 = inttoptr i64 %8483 to i64*
  %8487 = load i64, i64* %8486
  %8488 = sitofp i64 %8487 to double
  %8489 = bitcast i8* %8481 to double*
  store double %8488, double* %8489, align 1, !tbaa !2452
  %8490 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8491 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8492 = bitcast %union.vec128_t* %XMM3 to i8*
  %8493 = load i64, i64* %PC
  %8494 = add i64 %8493, 4
  store i64 %8494, i64* %PC
  %8495 = bitcast i8* %8491 to double*
  %8496 = load double, double* %8495, align 1
  %8497 = getelementptr inbounds i8, i8* %8491, i64 8
  %8498 = bitcast i8* %8497 to i64*
  %8499 = load i64, i64* %8498, align 1
  %8500 = bitcast i8* %8492 to double*
  %8501 = load double, double* %8500, align 1
  %8502 = fmul double %8496, %8501
  %8503 = bitcast i8* %8490 to double*
  store double %8502, double* %8503, align 1, !tbaa !2452
  %8504 = getelementptr inbounds i8, i8* %8490, i64 8
  %8505 = bitcast i8* %8504 to i64*
  store i64 %8499, i64* %8505, align 1, !tbaa !2452
  %8506 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8507 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8508 = bitcast %union.vec128_t* %XMM2 to i8*
  %8509 = load i64, i64* %PC
  %8510 = add i64 %8509, 4
  store i64 %8510, i64* %PC
  %8511 = bitcast i8* %8507 to double*
  %8512 = load double, double* %8511, align 1
  %8513 = getelementptr inbounds i8, i8* %8507, i64 8
  %8514 = bitcast i8* %8513 to i64*
  %8515 = load i64, i64* %8514, align 1
  %8516 = bitcast i8* %8508 to double*
  %8517 = load double, double* %8516, align 1
  %8518 = fdiv double %8512, %8517
  %8519 = bitcast i8* %8506 to double*
  store double %8518, double* %8519, align 1, !tbaa !2452
  %8520 = getelementptr inbounds i8, i8* %8506, i64 8
  %8521 = bitcast i8* %8520 to i64*
  store i64 %8515, i64* %8521, align 1, !tbaa !2452
  %8522 = load i64, i64* %RBP
  %8523 = sub i64 %8522, 48
  %8524 = bitcast %union.vec128_t* %XMM1 to i8*
  %8525 = load i64, i64* %PC
  %8526 = add i64 %8525, 5
  store i64 %8526, i64* %PC
  %8527 = bitcast i8* %8524 to double*
  %8528 = load double, double* %8527, align 1
  %8529 = inttoptr i64 %8523 to double*
  store double %8528, double* %8529
  %8530 = load i64, i64* %RBP
  %8531 = sub i64 %8530, 16
  %8532 = bitcast %union.vec128_t* %XMM0 to i8*
  %8533 = load i64, i64* %PC
  %8534 = add i64 %8533, 5
  store i64 %8534, i64* %PC
  %8535 = bitcast i8* %8532 to double*
  %8536 = load double, double* %8535, align 1
  %8537 = inttoptr i64 %8531 to double*
  store double %8536, double* %8537
  %8538 = load i64, i64* %RBP
  %8539 = sub i64 %8538, 32
  %8540 = bitcast %union.vec128_t* %XMM0 to i8*
  %8541 = load i64, i64* %PC
  %8542 = add i64 %8541, 5
  store i64 %8542, i64* %PC
  %8543 = bitcast i8* %8540 to double*
  %8544 = load double, double* %8543, align 1
  %8545 = inttoptr i64 %8539 to double*
  store double %8544, double* %8545
  %8546 = load i64, i64* %RBP
  %8547 = sub i64 %8546, 240
  %8548 = load i32, i32* %EAX
  %8549 = zext i32 %8548 to i64
  %8550 = load i64, i64* %PC
  %8551 = add i64 %8550, 6
  store i64 %8551, i64* %PC
  %8552 = inttoptr i64 %8547 to i32*
  store i32 %8548, i32* %8552
  %8553 = load i64, i64* %PC
  %8554 = add i64 %8553, 3349
  %8555 = load i64, i64* %PC
  %8556 = add i64 %8555, 5
  %8557 = load i64, i64* %PC
  %8558 = add i64 %8557, 5
  store i64 %8558, i64* %PC
  %8559 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %8560 = load i64, i64* %8559, align 8, !tbaa !2428
  %8561 = add i64 %8560, -8
  %8562 = inttoptr i64 %8561 to i64*
  store i64 %8556, i64* %8562
  store i64 %8561, i64* %8559, align 8, !tbaa !2428
  %8563 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8554, i64* %8563, align 8, !tbaa !2428
  %8564 = load i64, i64* %PC
  %8565 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %8564, %struct.Memory* %8434)
  %8566 = load i64, i64* %RBP
  %8567 = sub i64 %8566, 72
  %8568 = load i64, i64* %PC
  %8569 = add i64 %8568, 8
  store i64 %8569, i64* %PC
  %8570 = inttoptr i64 %8567 to i64*
  store i64 1, i64* %8570
  %8571 = load i64, i64* %RBP
  %8572 = sub i64 %8571, 244
  %8573 = load i32, i32* %EAX
  %8574 = zext i32 %8573 to i64
  %8575 = load i64, i64* %PC
  %8576 = add i64 %8575, 6
  store i64 %8576, i64* %PC
  %8577 = inttoptr i64 %8572 to i32*
  store i32 %8573, i32* %8577
  br label %block_4018ce

block_400720:                                     ; preds = %block_40070b
  %8578 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8579 = load i64, i64* %RBP
  %8580 = sub i64 %8579, 32
  %8581 = load i64, i64* %PC
  %8582 = add i64 %8581, 5
  store i64 %8582, i64* %PC
  %8583 = inttoptr i64 %8580 to double*
  %8584 = load double, double* %8583
  %8585 = bitcast i8* %8578 to double*
  store double %8584, double* %8585, align 1, !tbaa !2452
  %8586 = getelementptr inbounds i8, i8* %8578, i64 8
  %8587 = bitcast i8* %8586 to double*
  store double 0.000000e+00, double* %8587, align 1, !tbaa !2452
  %8588 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8589 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8590 = load i64, i64* %RBP
  %8591 = sub i64 %8590, 40
  %8592 = load i64, i64* %PC
  %8593 = add i64 %8592, 5
  store i64 %8593, i64* %PC
  %8594 = bitcast i8* %8589 to double*
  %8595 = load double, double* %8594, align 1
  %8596 = getelementptr inbounds i8, i8* %8589, i64 8
  %8597 = bitcast i8* %8596 to i64*
  %8598 = load i64, i64* %8597, align 1
  %8599 = inttoptr i64 %8591 to double*
  %8600 = load double, double* %8599
  %8601 = fadd double %8595, %8600
  %8602 = bitcast i8* %8588 to double*
  store double %8601, double* %8602, align 1, !tbaa !2452
  %8603 = getelementptr inbounds i8, i8* %8588, i64 8
  %8604 = bitcast i8* %8603 to i64*
  store i64 %8598, i64* %8604, align 1, !tbaa !2452
  %8605 = load i64, i64* %RBP
  %8606 = sub i64 %8605, 32
  %8607 = bitcast %union.vec128_t* %XMM0 to i8*
  %8608 = load i64, i64* %PC
  %8609 = add i64 %8608, 5
  store i64 %8609, i64* %PC
  %8610 = bitcast i8* %8607 to double*
  %8611 = load double, double* %8610, align 1
  %8612 = inttoptr i64 %8606 to double*
  store double %8611, double* %8612
  %8613 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8614 = load i64, i64* %RBP
  %8615 = sub i64 %8614, 32
  %8616 = load i64, i64* %PC
  %8617 = add i64 %8616, 5
  store i64 %8617, i64* %PC
  %8618 = inttoptr i64 %8615 to double*
  %8619 = load double, double* %8618
  %8620 = bitcast i8* %8613 to double*
  store double %8619, double* %8620, align 1, !tbaa !2452
  %8621 = getelementptr inbounds i8, i8* %8613, i64 8
  %8622 = bitcast i8* %8621 to double*
  store double 0.000000e+00, double* %8622, align 1, !tbaa !2452
  %8623 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8624 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8625 = load i64, i64* %RBP
  %8626 = sub i64 %8625, 48
  %8627 = load i64, i64* %PC
  %8628 = add i64 %8627, 5
  store i64 %8628, i64* %PC
  %8629 = bitcast i8* %8624 to double*
  %8630 = load double, double* %8629, align 1
  %8631 = getelementptr inbounds i8, i8* %8624, i64 8
  %8632 = bitcast i8* %8631 to i64*
  %8633 = load i64, i64* %8632, align 1
  %8634 = inttoptr i64 %8626 to double*
  %8635 = load double, double* %8634
  %8636 = fmul double %8630, %8635
  %8637 = bitcast i8* %8623 to double*
  store double %8636, double* %8637, align 1, !tbaa !2452
  %8638 = getelementptr inbounds i8, i8* %8623, i64 8
  %8639 = bitcast i8* %8638 to i64*
  store i64 %8633, i64* %8639, align 1, !tbaa !2452
  %8640 = load i64, i64* %RBP
  %8641 = sub i64 %8640, 24
  %8642 = bitcast %union.vec128_t* %XMM0 to i8*
  %8643 = load i64, i64* %PC
  %8644 = add i64 %8643, 5
  store i64 %8644, i64* %PC
  %8645 = bitcast i8* %8642 to double*
  %8646 = load double, double* %8645, align 1
  %8647 = inttoptr i64 %8641 to double*
  store double %8646, double* %8647
  %8648 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8649 = load i64, i64* %RBP
  %8650 = sub i64 %8649, 16
  %8651 = load i64, i64* %PC
  %8652 = add i64 %8651, 5
  store i64 %8652, i64* %PC
  %8653 = inttoptr i64 %8650 to double*
  %8654 = load double, double* %8653
  %8655 = bitcast i8* %8648 to double*
  store double %8654, double* %8655, align 1, !tbaa !2452
  %8656 = getelementptr inbounds i8, i8* %8648, i64 8
  %8657 = bitcast i8* %8656 to double*
  store double 0.000000e+00, double* %8657, align 1, !tbaa !2452
  %8658 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8659 = load i64, i64* %PC
  %8660 = add i64 %8659, 9
  store i64 %8660, i64* %PC
  %8661 = load double, double* bitcast (%D1_0_type* @D1_0 to double*)
  %8662 = bitcast i8* %8658 to double*
  store double %8661, double* %8662, align 1, !tbaa !2452
  %8663 = getelementptr inbounds i8, i8* %8658, i64 8
  %8664 = bitcast i8* %8663 to double*
  store double 0.000000e+00, double* %8664, align 1, !tbaa !2452
  %8665 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8666 = load i64, i64* %RBP
  %8667 = sub i64 %8666, 24
  %8668 = load i64, i64* %PC
  %8669 = add i64 %8668, 5
  store i64 %8669, i64* %PC
  %8670 = inttoptr i64 %8667 to double*
  %8671 = load double, double* %8670
  %8672 = bitcast i8* %8665 to double*
  store double %8671, double* %8672, align 1, !tbaa !2452
  %8673 = getelementptr inbounds i8, i8* %8665, i64 8
  %8674 = bitcast i8* %8673 to double*
  store double 0.000000e+00, double* %8674, align 1, !tbaa !2452
  %8675 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8676 = load i64, i64* %PC
  %8677 = add i64 %8676, 9
  store i64 %8677, i64* %PC
  %8678 = load double, double* bitcast (%D2_0_type* @D2_0 to double*)
  %8679 = bitcast i8* %8675 to double*
  store double %8678, double* %8679, align 1, !tbaa !2452
  %8680 = getelementptr inbounds i8, i8* %8675, i64 8
  %8681 = bitcast i8* %8680 to double*
  store double 0.000000e+00, double* %8681, align 1, !tbaa !2452
  %8682 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8683 = load i64, i64* %RBP
  %8684 = sub i64 %8683, 24
  %8685 = load i64, i64* %PC
  %8686 = add i64 %8685, 5
  store i64 %8686, i64* %PC
  %8687 = inttoptr i64 %8684 to double*
  %8688 = load double, double* %8687
  %8689 = bitcast i8* %8682 to double*
  store double %8688, double* %8689, align 1, !tbaa !2452
  %8690 = getelementptr inbounds i8, i8* %8682, i64 8
  %8691 = bitcast i8* %8690 to double*
  store double 0.000000e+00, double* %8691, align 1, !tbaa !2452
  %8692 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8693 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8694 = load i64, i64* %PC
  %8695 = add i64 %8694, 9
  store i64 %8695, i64* %PC
  %8696 = bitcast i8* %8693 to double*
  %8697 = load double, double* %8696, align 1
  %8698 = getelementptr inbounds i8, i8* %8693, i64 8
  %8699 = bitcast i8* %8698 to i64*
  %8700 = load i64, i64* %8699, align 1
  %8701 = load double, double* bitcast (%D3_type* @D3 to double*)
  %8702 = fmul double %8697, %8701
  %8703 = bitcast i8* %8692 to double*
  store double %8702, double* %8703, align 1, !tbaa !2452
  %8704 = getelementptr inbounds i8, i8* %8692, i64 8
  %8705 = bitcast i8* %8704 to i64*
  store i64 %8700, i64* %8705, align 1, !tbaa !2452
  %8706 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8707 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8708 = bitcast %union.vec128_t* %XMM4 to i8*
  %8709 = load i64, i64* %PC
  %8710 = add i64 %8709, 4
  store i64 %8710, i64* %PC
  %8711 = bitcast i8* %8707 to double*
  %8712 = load double, double* %8711, align 1
  %8713 = getelementptr inbounds i8, i8* %8707, i64 8
  %8714 = bitcast i8* %8713 to i64*
  %8715 = load i64, i64* %8714, align 1
  %8716 = bitcast i8* %8708 to double*
  %8717 = load double, double* %8716, align 1
  %8718 = fadd double %8712, %8717
  %8719 = bitcast i8* %8706 to double*
  store double %8718, double* %8719, align 1, !tbaa !2452
  %8720 = getelementptr inbounds i8, i8* %8706, i64 8
  %8721 = bitcast i8* %8720 to i64*
  store i64 %8715, i64* %8721, align 1, !tbaa !2452
  %8722 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8723 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8724 = bitcast %union.vec128_t* %XMM3 to i8*
  %8725 = load i64, i64* %PC
  %8726 = add i64 %8725, 4
  store i64 %8726, i64* %PC
  %8727 = bitcast i8* %8723 to double*
  %8728 = load double, double* %8727, align 1
  %8729 = getelementptr inbounds i8, i8* %8723, i64 8
  %8730 = bitcast i8* %8729 to i64*
  %8731 = load i64, i64* %8730, align 1
  %8732 = bitcast i8* %8724 to double*
  %8733 = load double, double* %8732, align 1
  %8734 = fmul double %8728, %8733
  %8735 = bitcast i8* %8722 to double*
  store double %8734, double* %8735, align 1, !tbaa !2452
  %8736 = getelementptr inbounds i8, i8* %8722, i64 8
  %8737 = bitcast i8* %8736 to i64*
  store i64 %8731, i64* %8737, align 1, !tbaa !2452
  %8738 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8739 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8740 = bitcast %union.vec128_t* %XMM2 to i8*
  %8741 = load i64, i64* %PC
  %8742 = add i64 %8741, 4
  store i64 %8742, i64* %PC
  %8743 = bitcast i8* %8739 to double*
  %8744 = load double, double* %8743, align 1
  %8745 = getelementptr inbounds i8, i8* %8739, i64 8
  %8746 = bitcast i8* %8745 to i64*
  %8747 = load i64, i64* %8746, align 1
  %8748 = bitcast i8* %8740 to double*
  %8749 = load double, double* %8748, align 1
  %8750 = fadd double %8744, %8749
  %8751 = bitcast i8* %8738 to double*
  store double %8750, double* %8751, align 1, !tbaa !2452
  %8752 = getelementptr inbounds i8, i8* %8738, i64 8
  %8753 = bitcast i8* %8752 to i64*
  store i64 %8747, i64* %8753, align 1, !tbaa !2452
  %8754 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8755 = load i64, i64* %RBP
  %8756 = sub i64 %8755, 40
  %8757 = load i64, i64* %PC
  %8758 = add i64 %8757, 5
  store i64 %8758, i64* %PC
  %8759 = inttoptr i64 %8756 to double*
  %8760 = load double, double* %8759
  %8761 = bitcast i8* %8754 to double*
  store double %8760, double* %8761, align 1, !tbaa !2452
  %8762 = getelementptr inbounds i8, i8* %8754, i64 8
  %8763 = bitcast i8* %8762 to double*
  store double 0.000000e+00, double* %8763, align 1, !tbaa !2452
  %8764 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8765 = load i64, i64* %RBP
  %8766 = sub i64 %8765, 24
  %8767 = load i64, i64* %PC
  %8768 = add i64 %8767, 5
  store i64 %8768, i64* %PC
  %8769 = inttoptr i64 %8766 to double*
  %8770 = load double, double* %8769
  %8771 = bitcast i8* %8764 to double*
  store double %8770, double* %8771, align 1, !tbaa !2452
  %8772 = getelementptr inbounds i8, i8* %8764, i64 8
  %8773 = bitcast i8* %8772 to double*
  store double 0.000000e+00, double* %8773, align 1, !tbaa !2452
  %8774 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8775 = load i64, i64* %PC
  %8776 = add i64 %8775, 9
  store i64 %8776, i64* %PC
  %8777 = load double, double* bitcast (%D1_0_type* @D1_0 to double*)
  %8778 = bitcast i8* %8774 to double*
  store double %8777, double* %8778, align 1, !tbaa !2452
  %8779 = getelementptr inbounds i8, i8* %8774, i64 8
  %8780 = bitcast i8* %8779 to double*
  store double 0.000000e+00, double* %8780, align 1, !tbaa !2452
  %8781 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %8782 = load i64, i64* %RBP
  %8783 = sub i64 %8782, 24
  %8784 = load i64, i64* %PC
  %8785 = add i64 %8784, 5
  store i64 %8785, i64* %PC
  %8786 = inttoptr i64 %8783 to double*
  %8787 = load double, double* %8786
  %8788 = bitcast i8* %8781 to double*
  store double %8787, double* %8788, align 1, !tbaa !2452
  %8789 = getelementptr inbounds i8, i8* %8781, i64 8
  %8790 = bitcast i8* %8789 to double*
  store double 0.000000e+00, double* %8790, align 1, !tbaa !2452
  %8791 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %8792 = load i64, i64* %PC
  %8793 = add i64 %8792, 9
  store i64 %8793, i64* %PC
  %8794 = load double, double* bitcast (%E2_0_type* @E2_0 to double*)
  %8795 = bitcast i8* %8791 to double*
  store double %8794, double* %8795, align 1, !tbaa !2452
  %8796 = getelementptr inbounds i8, i8* %8791, i64 8
  %8797 = bitcast i8* %8796 to double*
  store double 0.000000e+00, double* %8797, align 1, !tbaa !2452
  %8798 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %8799 = load i64, i64* %RBP
  %8800 = sub i64 %8799, 24
  %8801 = load i64, i64* %PC
  %8802 = add i64 %8801, 5
  store i64 %8802, i64* %PC
  %8803 = inttoptr i64 %8800 to double*
  %8804 = load double, double* %8803
  %8805 = bitcast i8* %8798 to double*
  store double %8804, double* %8805, align 1, !tbaa !2452
  %8806 = getelementptr inbounds i8, i8* %8798, i64 8
  %8807 = bitcast i8* %8806 to double*
  store double 0.000000e+00, double* %8807, align 1, !tbaa !2452
  %8808 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %8809 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %8810 = load i64, i64* %PC
  %8811 = add i64 %8810, 9
  store i64 %8811, i64* %PC
  %8812 = bitcast i8* %8809 to double*
  %8813 = load double, double* %8812, align 1
  %8814 = getelementptr inbounds i8, i8* %8809, i64 8
  %8815 = bitcast i8* %8814 to i64*
  %8816 = load i64, i64* %8815, align 1
  %8817 = load double, double* bitcast (%E3_type* @E3 to double*)
  %8818 = fmul double %8813, %8817
  %8819 = bitcast i8* %8808 to double*
  store double %8818, double* %8819, align 1, !tbaa !2452
  %8820 = getelementptr inbounds i8, i8* %8808, i64 8
  %8821 = bitcast i8* %8820 to i64*
  store i64 %8816, i64* %8821, align 1, !tbaa !2452
  %8822 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %8823 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %8824 = bitcast %union.vec128_t* %XMM7 to i8*
  %8825 = load i64, i64* %PC
  %8826 = add i64 %8825, 4
  store i64 %8826, i64* %PC
  %8827 = bitcast i8* %8823 to double*
  %8828 = load double, double* %8827, align 1
  %8829 = getelementptr inbounds i8, i8* %8823, i64 8
  %8830 = bitcast i8* %8829 to i64*
  %8831 = load i64, i64* %8830, align 1
  %8832 = bitcast i8* %8824 to double*
  %8833 = load double, double* %8832, align 1
  %8834 = fadd double %8828, %8833
  %8835 = bitcast i8* %8822 to double*
  store double %8834, double* %8835, align 1, !tbaa !2452
  %8836 = getelementptr inbounds i8, i8* %8822, i64 8
  %8837 = bitcast i8* %8836 to i64*
  store i64 %8831, i64* %8837, align 1, !tbaa !2452
  %8838 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %8839 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %8840 = bitcast %union.vec128_t* %XMM6 to i8*
  %8841 = load i64, i64* %PC
  %8842 = add i64 %8841, 4
  store i64 %8842, i64* %PC
  %8843 = bitcast i8* %8839 to double*
  %8844 = load double, double* %8843, align 1
  %8845 = getelementptr inbounds i8, i8* %8839, i64 8
  %8846 = bitcast i8* %8845 to i64*
  %8847 = load i64, i64* %8846, align 1
  %8848 = bitcast i8* %8840 to double*
  %8849 = load double, double* %8848, align 1
  %8850 = fmul double %8844, %8849
  %8851 = bitcast i8* %8838 to double*
  store double %8850, double* %8851, align 1, !tbaa !2452
  %8852 = getelementptr inbounds i8, i8* %8838, i64 8
  %8853 = bitcast i8* %8852 to i64*
  store i64 %8847, i64* %8853, align 1, !tbaa !2452
  %8854 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8855 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %8856 = bitcast %union.vec128_t* %XMM5 to i8*
  %8857 = load i64, i64* %PC
  %8858 = add i64 %8857, 4
  store i64 %8858, i64* %PC
  %8859 = bitcast i8* %8855 to double*
  %8860 = load double, double* %8859, align 1
  %8861 = getelementptr inbounds i8, i8* %8855, i64 8
  %8862 = bitcast i8* %8861 to i64*
  %8863 = load i64, i64* %8862, align 1
  %8864 = bitcast i8* %8856 to double*
  %8865 = load double, double* %8864, align 1
  %8866 = fadd double %8860, %8865
  %8867 = bitcast i8* %8854 to double*
  store double %8866, double* %8867, align 1, !tbaa !2452
  %8868 = getelementptr inbounds i8, i8* %8854, i64 8
  %8869 = bitcast i8* %8868 to i64*
  store i64 %8863, i64* %8869, align 1, !tbaa !2452
  %8870 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8871 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %8872 = bitcast %union.vec128_t* %XMM4 to i8*
  %8873 = load i64, i64* %PC
  %8874 = add i64 %8873, 4
  store i64 %8874, i64* %PC
  %8875 = bitcast i8* %8871 to double*
  %8876 = load double, double* %8875, align 1
  %8877 = getelementptr inbounds i8, i8* %8871, i64 8
  %8878 = bitcast i8* %8877 to i64*
  %8879 = load i64, i64* %8878, align 1
  %8880 = bitcast i8* %8872 to double*
  %8881 = load double, double* %8880, align 1
  %8882 = fmul double %8876, %8881
  %8883 = bitcast i8* %8870 to double*
  store double %8882, double* %8883, align 1, !tbaa !2452
  %8884 = getelementptr inbounds i8, i8* %8870, i64 8
  %8885 = bitcast i8* %8884 to i64*
  store i64 %8879, i64* %8885, align 1, !tbaa !2452
  %8886 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8887 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %8888 = bitcast %union.vec128_t* %XMM3 to i8*
  %8889 = load i64, i64* %PC
  %8890 = add i64 %8889, 4
  store i64 %8890, i64* %PC
  %8891 = bitcast i8* %8887 to double*
  %8892 = load double, double* %8891, align 1
  %8893 = getelementptr inbounds i8, i8* %8887, i64 8
  %8894 = bitcast i8* %8893 to i64*
  %8895 = load i64, i64* %8894, align 1
  %8896 = bitcast i8* %8888 to double*
  %8897 = load double, double* %8896, align 1
  %8898 = fadd double %8892, %8897
  %8899 = bitcast i8* %8886 to double*
  store double %8898, double* %8899, align 1, !tbaa !2452
  %8900 = getelementptr inbounds i8, i8* %8886, i64 8
  %8901 = bitcast i8* %8900 to i64*
  store i64 %8895, i64* %8901, align 1, !tbaa !2452
  %8902 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8903 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %8904 = bitcast %union.vec128_t* %XMM2 to i8*
  %8905 = load i64, i64* %PC
  %8906 = add i64 %8905, 4
  store i64 %8906, i64* %PC
  %8907 = bitcast i8* %8903 to double*
  %8908 = load double, double* %8907, align 1
  %8909 = getelementptr inbounds i8, i8* %8903, i64 8
  %8910 = bitcast i8* %8909 to i64*
  %8911 = load i64, i64* %8910, align 1
  %8912 = bitcast i8* %8904 to double*
  %8913 = load double, double* %8912, align 1
  %8914 = fdiv double %8908, %8913
  %8915 = bitcast i8* %8902 to double*
  store double %8914, double* %8915, align 1, !tbaa !2452
  %8916 = getelementptr inbounds i8, i8* %8902, i64 8
  %8917 = bitcast i8* %8916 to i64*
  store i64 %8911, i64* %8917, align 1, !tbaa !2452
  %8918 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8919 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %8920 = bitcast %union.vec128_t* %XMM1 to i8*
  %8921 = load i64, i64* %PC
  %8922 = add i64 %8921, 4
  store i64 %8922, i64* %PC
  %8923 = bitcast i8* %8919 to double*
  %8924 = load double, double* %8923, align 1
  %8925 = getelementptr inbounds i8, i8* %8919, i64 8
  %8926 = bitcast i8* %8925 to i64*
  %8927 = load i64, i64* %8926, align 1
  %8928 = bitcast i8* %8920 to double*
  %8929 = load double, double* %8928, align 1
  %8930 = fadd double %8924, %8929
  %8931 = bitcast i8* %8918 to double*
  store double %8930, double* %8931, align 1, !tbaa !2452
  %8932 = getelementptr inbounds i8, i8* %8918, i64 8
  %8933 = bitcast i8* %8932 to i64*
  store i64 %8927, i64* %8933, align 1, !tbaa !2452
  %8934 = load i64, i64* %RBP
  %8935 = sub i64 %8934, 16
  %8936 = bitcast %union.vec128_t* %XMM0 to i8*
  %8937 = load i64, i64* %PC
  %8938 = add i64 %8937, 5
  store i64 %8938, i64* %PC
  %8939 = bitcast i8* %8936 to double*
  %8940 = load double, double* %8939, align 1
  %8941 = inttoptr i64 %8935 to double*
  store double %8940, double* %8941
  %8942 = load i64, i64* %RBP
  %8943 = sub i64 %8942, 72
  %8944 = load i64, i64* %PC
  %8945 = add i64 %8944, 4
  store i64 %8945, i64* %PC
  %8946 = inttoptr i64 %8943 to i64*
  %8947 = load i64, i64* %8946
  store i64 %8947, i64* %RAX, align 8, !tbaa !2428
  %8948 = load i64, i64* %RAX
  %8949 = load i64, i64* %PC
  %8950 = add i64 %8949, 4
  store i64 %8950, i64* %PC
  %8951 = add i64 1, %8948
  store i64 %8951, i64* %RAX, align 8, !tbaa !2428
  %8952 = icmp ult i64 %8951, %8948
  %8953 = icmp ult i64 %8951, 1
  %8954 = or i1 %8952, %8953
  %8955 = zext i1 %8954 to i8
  %8956 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %8955, i8* %8956, align 1, !tbaa !2432
  %8957 = trunc i64 %8951 to i32
  %8958 = and i32 %8957, 255
  %8959 = call i32 @llvm.ctpop.i32(i32 %8958) #16
  %8960 = trunc i32 %8959 to i8
  %8961 = and i8 %8960, 1
  %8962 = xor i8 %8961, 1
  %8963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %8962, i8* %8963, align 1, !tbaa !2446
  %8964 = xor i64 1, %8948
  %8965 = xor i64 %8964, %8951
  %8966 = lshr i64 %8965, 4
  %8967 = trunc i64 %8966 to i8
  %8968 = and i8 %8967, 1
  %8969 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %8968, i8* %8969, align 1, !tbaa !2450
  %8970 = icmp eq i64 %8951, 0
  %8971 = zext i1 %8970 to i8
  %8972 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %8971, i8* %8972, align 1, !tbaa !2447
  %8973 = lshr i64 %8951, 63
  %8974 = trunc i64 %8973 to i8
  %8975 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %8974, i8* %8975, align 1, !tbaa !2448
  %8976 = lshr i64 %8948, 63
  %8977 = xor i64 %8973, %8976
  %8978 = add nuw nsw i64 %8977, %8973
  %8979 = icmp eq i64 %8978, 2
  %8980 = zext i1 %8979 to i8
  %8981 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %8980, i8* %8981, align 1, !tbaa !2449
  %8982 = load i64, i64* %RBP
  %8983 = sub i64 %8982, 72
  %8984 = load i64, i64* %RAX
  %8985 = load i64, i64* %PC
  %8986 = add i64 %8985, 4
  store i64 %8986, i64* %PC
  %8987 = inttoptr i64 %8983 to i64*
  store i64 %8984, i64* %8987
  %8988 = load i64, i64* %PC
  %8989 = sub i64 %8988, 197
  %8990 = load i64, i64* %PC
  %8991 = add i64 %8990, 5
  store i64 %8991, i64* %PC
  %8992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %8989, i64* %8992, align 8, !tbaa !2428
  br label %block_40070b

block_401f72:                                     ; preds = %block_401f87, %block_401d53
  %MEMORY.5 = phi %struct.Memory* [ %1416, %block_401d53 ], [ %MEMORY.5, %block_401f87 ]
  %8993 = load i64, i64* %RBP
  %8994 = sub i64 %8993, 72
  %8995 = load i64, i64* %PC
  %8996 = add i64 %8995, 4
  store i64 %8996, i64* %PC
  %8997 = inttoptr i64 %8994 to i64*
  %8998 = load i64, i64* %8997
  store i64 %8998, i64* %RAX, align 8, !tbaa !2428
  %8999 = load i64, i64* %RBP
  %9000 = sub i64 %8999, 80
  %9001 = load i64, i64* %PC
  %9002 = add i64 %9001, 4
  store i64 %9002, i64* %PC
  %9003 = inttoptr i64 %9000 to i64*
  %9004 = load i64, i64* %9003
  store i64 %9004, i64* %RCX, align 8, !tbaa !2428
  %9005 = load i64, i64* %RCX
  %9006 = load i64, i64* %PC
  %9007 = add i64 %9006, 4
  store i64 %9007, i64* %PC
  %9008 = sub i64 %9005, 1
  store i64 %9008, i64* %RCX, align 8, !tbaa !2428
  %9009 = icmp ult i64 %9005, 1
  %9010 = zext i1 %9009 to i8
  %9011 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9010, i8* %9011, align 1, !tbaa !2432
  %9012 = trunc i64 %9008 to i32
  %9013 = and i32 %9012, 255
  %9014 = call i32 @llvm.ctpop.i32(i32 %9013) #16
  %9015 = trunc i32 %9014 to i8
  %9016 = and i8 %9015, 1
  %9017 = xor i8 %9016, 1
  %9018 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9017, i8* %9018, align 1, !tbaa !2446
  %9019 = xor i64 1, %9005
  %9020 = xor i64 %9019, %9008
  %9021 = lshr i64 %9020, 4
  %9022 = trunc i64 %9021 to i8
  %9023 = and i8 %9022, 1
  %9024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9023, i8* %9024, align 1, !tbaa !2450
  %9025 = icmp eq i64 %9008, 0
  %9026 = zext i1 %9025 to i8
  %9027 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9026, i8* %9027, align 1, !tbaa !2447
  %9028 = lshr i64 %9008, 63
  %9029 = trunc i64 %9028 to i8
  %9030 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9029, i8* %9030, align 1, !tbaa !2448
  %9031 = lshr i64 %9005, 63
  %9032 = xor i64 %9028, %9031
  %9033 = add nuw nsw i64 %9032, %9031
  %9034 = icmp eq i64 %9033, 2
  %9035 = zext i1 %9034 to i8
  %9036 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9035, i8* %9036, align 1, !tbaa !2449
  %9037 = load i64, i64* %RAX
  %9038 = load i64, i64* %RCX
  %9039 = load i64, i64* %PC
  %9040 = add i64 %9039, 3
  store i64 %9040, i64* %PC
  %9041 = sub i64 %9037, %9038
  %9042 = icmp ult i64 %9037, %9038
  %9043 = zext i1 %9042 to i8
  %9044 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9043, i8* %9044, align 1, !tbaa !2432
  %9045 = trunc i64 %9041 to i32
  %9046 = and i32 %9045, 255
  %9047 = call i32 @llvm.ctpop.i32(i32 %9046) #16
  %9048 = trunc i32 %9047 to i8
  %9049 = and i8 %9048, 1
  %9050 = xor i8 %9049, 1
  %9051 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9050, i8* %9051, align 1, !tbaa !2446
  %9052 = xor i64 %9038, %9037
  %9053 = xor i64 %9052, %9041
  %9054 = lshr i64 %9053, 4
  %9055 = trunc i64 %9054 to i8
  %9056 = and i8 %9055, 1
  %9057 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %9056, i8* %9057, align 1, !tbaa !2450
  %9058 = icmp eq i64 %9041, 0
  %9059 = zext i1 %9058 to i8
  %9060 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9059, i8* %9060, align 1, !tbaa !2447
  %9061 = lshr i64 %9041, 63
  %9062 = trunc i64 %9061 to i8
  %9063 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %9062, i8* %9063, align 1, !tbaa !2448
  %9064 = lshr i64 %9037, 63
  %9065 = lshr i64 %9038, 63
  %9066 = xor i64 %9065, %9064
  %9067 = xor i64 %9061, %9064
  %9068 = add nuw nsw i64 %9067, %9066
  %9069 = icmp eq i64 %9068, 2
  %9070 = zext i1 %9069 to i8
  %9071 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %9070, i8* %9071, align 1, !tbaa !2449
  %9072 = load i64, i64* %PC
  %9073 = add i64 %9072, 298
  %9074 = load i64, i64* %PC
  %9075 = add i64 %9074, 6
  %9076 = load i64, i64* %PC
  %9077 = add i64 %9076, 6
  store i64 %9077, i64* %PC
  %9078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9079 = load i8, i8* %9078, align 1, !tbaa !2447
  %9080 = icmp eq i8 %9079, 0
  %9081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %9082 = load i8, i8* %9081, align 1, !tbaa !2448
  %9083 = icmp ne i8 %9082, 0
  %9084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %9085 = load i8, i8* %9084, align 1, !tbaa !2449
  %9086 = icmp ne i8 %9085, 0
  %9087 = xor i1 %9083, %9086
  %9088 = xor i1 %9087, true
  %9089 = and i1 %9080, %9088
  %9090 = zext i1 %9089 to i8
  store i8 %9090, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9092 = select i1 %9089, i64 %9073, i64 %9075
  store i64 %9092, i64* %9091, align 8, !tbaa !2428
  %9093 = load i8, i8* %BRANCH_TAKEN
  %9094 = icmp eq i8 %9093, 1
  br i1 %9094, label %block_4020ab, label %block_401f87

block_400696:                                     ; preds = %block_40080c, %block_400550
  %MEMORY.6 = phi %struct.Memory* [ %388, %block_400550 ], [ %3508, %block_40080c ]
  %9095 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9096 = load i64, i64* %PC
  %9097 = add i64 %9096, 9
  store i64 %9097, i64* %PC
  %9098 = load double, double* bitcast (%sa_type* @sa to double*)
  %9099 = bitcast i8* %9095 to double*
  store double %9098, double* %9099, align 1, !tbaa !2452
  %9100 = getelementptr inbounds i8, i8* %9095, i64 8
  %9101 = bitcast i8* %9100 to double*
  store double 0.000000e+00, double* %9101, align 1, !tbaa !2452
  %9102 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9103 = load i64, i64* %PC
  %9104 = add i64 %9103, 9
  store i64 %9104, i64* %PC
  %9105 = load double, double* bitcast (%TLimit_type* @TLimit to double*)
  %9106 = bitcast i8* %9102 to double*
  store double %9105, double* %9106, align 1, !tbaa !2452
  %9107 = getelementptr inbounds i8, i8* %9102, i64 8
  %9108 = bitcast i8* %9107 to double*
  store double 0.000000e+00, double* %9108, align 1, !tbaa !2452
  %9109 = bitcast %union.vec128_t* %XMM1 to i8*
  %9110 = bitcast %union.vec128_t* %XMM0 to i8*
  %9111 = load i64, i64* %PC
  %9112 = add i64 %9111, 4
  store i64 %9112, i64* %PC
  %9113 = bitcast i8* %9109 to double*
  %9114 = load double, double* %9113, align 1
  %9115 = bitcast i8* %9110 to double*
  %9116 = load double, double* %9115, align 1
  %9117 = fcmp uno double %9114, %9116
  br i1 %9117, label %9118, label %9130

; <label>:9118:                                   ; preds = %block_400696
  %9119 = fadd double %9114, %9116
  %9120 = bitcast double %9119 to i64
  %9121 = and i64 %9120, 9221120237041090560
  %9122 = icmp eq i64 %9121, 9218868437227405312
  %9123 = and i64 %9120, 2251799813685247
  %9124 = icmp ne i64 %9123, 0
  %9125 = and i1 %9122, %9124
  br i1 %9125, label %9126, label %9136

; <label>:9126:                                   ; preds = %9118
  %9127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9128 = load i64, i64* %9127, align 8, !tbaa !2428
  %9129 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %9128, %struct.Memory* %MEMORY.6) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

; <label>:9130:                                   ; preds = %block_400696
  %9131 = fcmp ogt double %9114, %9116
  br i1 %9131, label %9136, label %9132

; <label>:9132:                                   ; preds = %9130
  %9133 = fcmp olt double %9114, %9116
  br i1 %9133, label %9136, label %9134

; <label>:9134:                                   ; preds = %9132
  %9135 = fcmp oeq double %9114, %9116
  br i1 %9135, label %9136, label %9143

; <label>:9136:                                   ; preds = %9134, %9132, %9130, %9118
  %9137 = phi i8 [ 0, %9130 ], [ 0, %9132 ], [ 1, %9134 ], [ 1, %9118 ]
  %9138 = phi i8 [ 0, %9130 ], [ 0, %9132 ], [ 0, %9134 ], [ 1, %9118 ]
  %9139 = phi i8 [ 0, %9130 ], [ 1, %9132 ], [ 0, %9134 ], [ 1, %9118 ]
  %9140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %9137, i8* %9140, align 1, !tbaa !2451
  %9141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %9138, i8* %9141, align 1, !tbaa !2451
  %9142 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %9139, i8* %9142, align 1, !tbaa !2451
  br label %9143

; <label>:9143:                                   ; preds = %9136, %9134
  %9144 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %9144, align 1, !tbaa !2451
  %9145 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %9145, align 1, !tbaa !2451
  %9146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %9146, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit: ; preds = %9126, %9143
  %9147 = phi %struct.Memory* [ %9129, %9126 ], [ %MEMORY.6, %9143 ]
  %9148 = load i64, i64* %PC
  %9149 = add i64 %9148, 357
  %9150 = load i64, i64* %PC
  %9151 = add i64 %9150, 6
  %9152 = load i64, i64* %PC
  %9153 = add i64 %9152, 6
  store i64 %9153, i64* %PC
  %9154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %9155 = load i8, i8* %9154, align 1, !tbaa !2432
  %9156 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %9157 = load i8, i8* %9156, align 1, !tbaa !2447
  %9158 = or i8 %9157, %9155
  %9159 = icmp ne i8 %9158, 0
  %9160 = zext i1 %9159 to i8
  store i8 %9160, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %9161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9162 = select i1 %9159, i64 %9149, i64 %9151
  store i64 %9162, i64* %9161, align 8, !tbaa !2428
  %9163 = load i8, i8* %BRANCH_TAKEN
  %9164 = icmp eq i8 %9163, 1
  br i1 %9164, label %block_400811, label %block_4006b2

block_4020ab:                                     ; preds = %block_401f72
  %9165 = load i64, i64* %PC
  %9166 = add i64 %9165, 10
  store i64 %9166, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %9167 = load i64, i64* %PC
  %9168 = add i64 %9167, 1307
  %9169 = load i64, i64* %PC
  %9170 = add i64 %9169, 5
  %9171 = load i64, i64* %PC
  %9172 = add i64 %9171, 5
  store i64 %9172, i64* %PC
  %9173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %9174 = load i64, i64* %9173, align 8, !tbaa !2428
  %9175 = add i64 %9174, -8
  %9176 = inttoptr i64 %9175 to i64*
  store i64 %9170, i64* %9176
  store i64 %9175, i64* %9173, align 8, !tbaa !2428
  %9177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %9168, i64* %9177, align 8, !tbaa !2428
  %9178 = load i64, i64* %PC
  %9179 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %9178, %struct.Memory* %MEMORY.5)
  %9180 = load i64, i64* %PC
  %9181 = add i64 %9180, 10
  store i64 %9181, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 642), i64* %RDI, align 8, !tbaa !2428
  %9182 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %9183 = load i64, i64* %PC
  %9184 = add i64 %9183, 8
  store i64 %9184, i64* %PC
  %9185 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 72) to double*)
  %9186 = bitcast i8* %9182 to double*
  store double %9185, double* %9186, align 1, !tbaa !2452
  %9187 = getelementptr inbounds i8, i8* %9182, i64 8
  %9188 = bitcast i8* %9187 to double*
  store double 0.000000e+00, double* %9188, align 1, !tbaa !2452
  %9189 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9190 = load i64, i64* %PC
  %9191 = add i64 %9190, 8
  store i64 %9191, i64* %PC
  %9192 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 224) to double*)
  %9193 = bitcast i8* %9189 to double*
  store double %9192, double* %9193, align 1, !tbaa !2452
  %9194 = getelementptr inbounds i8, i8* %9189, i64 8
  %9195 = bitcast i8* %9194 to double*
  store double 0.000000e+00, double* %9195, align 1, !tbaa !2452
  %9196 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9197 = load i64, i64* %PC
  %9198 = add i64 %9197, 8
  store i64 %9198, i64* %PC
  %9199 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 232) to double*)
  %9200 = bitcast i8* %9196 to double*
  store double %9199, double* %9200, align 1, !tbaa !2452
  %9201 = getelementptr inbounds i8, i8* %9196, i64 8
  %9202 = bitcast i8* %9201 to double*
  store double 0.000000e+00, double* %9202, align 1, !tbaa !2452
  %9203 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9204 = load i64, i64* %PC
  %9205 = add i64 %9204, 9
  store i64 %9205, i64* %PC
  %9206 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %9207 = bitcast i8* %9203 to double*
  store double %9206, double* %9207, align 1, !tbaa !2452
  %9208 = getelementptr inbounds i8, i8* %9203, i64 8
  %9209 = bitcast i8* %9208 to double*
  store double 0.000000e+00, double* %9209, align 1, !tbaa !2452
  %9210 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9211 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9212 = load i64, i64* %PC
  %9213 = add i64 %9212, 9
  store i64 %9213, i64* %PC
  %9214 = bitcast i8* %9211 to double*
  %9215 = load double, double* %9214, align 1
  %9216 = getelementptr inbounds i8, i8* %9211, i64 8
  %9217 = bitcast i8* %9216 to i64*
  %9218 = load i64, i64* %9217, align 1
  %9219 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %9220 = fmul double %9215, %9219
  %9221 = bitcast i8* %9210 to double*
  store double %9220, double* %9221, align 1, !tbaa !2452
  %9222 = getelementptr inbounds i8, i8* %9210, i64 8
  %9223 = bitcast i8* %9222 to i64*
  store i64 %9218, i64* %9223, align 1, !tbaa !2452
  %9224 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9225 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9226 = load i64, i64* %PC
  %9227 = add i64 %9226, 9
  store i64 %9227, i64* %PC
  %9228 = bitcast i8* %9225 to double*
  %9229 = load double, double* %9228, align 1
  %9230 = getelementptr inbounds i8, i8* %9225, i64 8
  %9231 = bitcast i8* %9230 to i64*
  %9232 = load i64, i64* %9231, align 1
  %9233 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %9234 = fsub double %9229, %9233
  %9235 = bitcast i8* %9224 to double*
  store double %9234, double* %9235, align 1, !tbaa !2452
  %9236 = getelementptr inbounds i8, i8* %9224, i64 8
  %9237 = bitcast i8* %9236 to i64*
  store i64 %9232, i64* %9237, align 1, !tbaa !2452
  %9238 = bitcast %union.vec128_t* %XMM3 to i8*
  %9239 = load i64, i64* %PC
  %9240 = add i64 %9239, 9
  store i64 %9240, i64* %PC
  %9241 = bitcast i8* %9238 to double*
  %9242 = load double, double* %9241, align 1
  store double %9242, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 192) to double*)
  %9243 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9244 = load i64, i64* %PC
  %9245 = add i64 %9244, 9
  store i64 %9245, i64* %PC
  %9246 = load double, double* bitcast (%piref_type* @piref to double*)
  %9247 = bitcast i8* %9243 to double*
  store double %9246, double* %9247, align 1, !tbaa !2452
  %9248 = getelementptr inbounds i8, i8* %9243, i64 8
  %9249 = bitcast i8* %9248 to double*
  store double 0.000000e+00, double* %9249, align 1, !tbaa !2452
  %9250 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9251 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9252 = load i64, i64* %PC
  %9253 = add i64 %9252, 9
  store i64 %9253, i64* %PC
  %9254 = bitcast i8* %9251 to double*
  %9255 = load double, double* %9254, align 1
  %9256 = getelementptr inbounds i8, i8* %9251, i64 8
  %9257 = bitcast i8* %9256 to i64*
  %9258 = load i64, i64* %9257, align 1
  %9259 = load double, double* bitcast (%three_type* @three to double*)
  %9260 = fdiv double %9255, %9259
  %9261 = bitcast i8* %9250 to double*
  store double %9260, double* %9261, align 1, !tbaa !2452
  %9262 = getelementptr inbounds i8, i8* %9250, i64 8
  %9263 = bitcast i8* %9262 to i64*
  store i64 %9258, i64* %9263, align 1, !tbaa !2452
  %9264 = load i64, i64* %RBP
  %9265 = sub i64 %9264, 24
  %9266 = bitcast %union.vec128_t* %XMM3 to i8*
  %9267 = load i64, i64* %PC
  %9268 = add i64 %9267, 5
  store i64 %9268, i64* %PC
  %9269 = bitcast i8* %9266 to double*
  %9270 = load double, double* %9269, align 1
  %9271 = inttoptr i64 %9265 to double*
  store double %9270, double* %9271
  %9272 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9273 = load i64, i64* %RBP
  %9274 = sub i64 %9273, 24
  %9275 = load i64, i64* %PC
  %9276 = add i64 %9275, 5
  store i64 %9276, i64* %PC
  %9277 = inttoptr i64 %9274 to double*
  %9278 = load double, double* %9277
  %9279 = bitcast i8* %9272 to double*
  store double %9278, double* %9279, align 1, !tbaa !2452
  %9280 = getelementptr inbounds i8, i8* %9272, i64 8
  %9281 = bitcast i8* %9280 to double*
  store double 0.000000e+00, double* %9281, align 1, !tbaa !2452
  %9282 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9283 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9284 = load i64, i64* %RBP
  %9285 = sub i64 %9284, 24
  %9286 = load i64, i64* %PC
  %9287 = add i64 %9286, 5
  store i64 %9287, i64* %PC
  %9288 = bitcast i8* %9283 to double*
  %9289 = load double, double* %9288, align 1
  %9290 = getelementptr inbounds i8, i8* %9283, i64 8
  %9291 = bitcast i8* %9290 to i64*
  %9292 = load i64, i64* %9291, align 1
  %9293 = inttoptr i64 %9285 to double*
  %9294 = load double, double* %9293
  %9295 = fmul double %9289, %9294
  %9296 = bitcast i8* %9282 to double*
  store double %9295, double* %9296, align 1, !tbaa !2452
  %9297 = getelementptr inbounds i8, i8* %9282, i64 8
  %9298 = bitcast i8* %9297 to i64*
  store i64 %9292, i64* %9298, align 1, !tbaa !2452
  %9299 = load i64, i64* %RBP
  %9300 = sub i64 %9299, 40
  %9301 = bitcast %union.vec128_t* %XMM3 to i8*
  %9302 = load i64, i64* %PC
  %9303 = add i64 %9302, 5
  store i64 %9303, i64* %PC
  %9304 = bitcast i8* %9301 to double*
  %9305 = load double, double* %9304, align 1
  %9306 = inttoptr i64 %9300 to double*
  store double %9305, double* %9306
  %9307 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9308 = load i64, i64* %RBP
  %9309 = sub i64 %9308, 24
  %9310 = load i64, i64* %PC
  %9311 = add i64 %9310, 5
  store i64 %9311, i64* %PC
  %9312 = inttoptr i64 %9309 to double*
  %9313 = load double, double* %9312
  %9314 = bitcast i8* %9307 to double*
  store double %9313, double* %9314, align 1, !tbaa !2452
  %9315 = getelementptr inbounds i8, i8* %9307, i64 8
  %9316 = bitcast i8* %9315 to double*
  store double 0.000000e+00, double* %9316, align 1, !tbaa !2452
  %9317 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9318 = load i64, i64* %PC
  %9319 = add i64 %9318, 9
  store i64 %9319, i64* %PC
  %9320 = load double, double* bitcast (%A6_type* @A6 to double*)
  %9321 = bitcast i8* %9317 to double*
  store double %9320, double* %9321, align 1, !tbaa !2452
  %9322 = getelementptr inbounds i8, i8* %9317, i64 8
  %9323 = bitcast i8* %9322 to double*
  store double 0.000000e+00, double* %9323, align 1, !tbaa !2452
  %9324 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9325 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9326 = load i64, i64* %RBP
  %9327 = sub i64 %9326, 40
  %9328 = load i64, i64* %PC
  %9329 = add i64 %9328, 5
  store i64 %9329, i64* %PC
  %9330 = bitcast i8* %9325 to double*
  %9331 = load double, double* %9330, align 1
  %9332 = getelementptr inbounds i8, i8* %9325, i64 8
  %9333 = bitcast i8* %9332 to i64*
  %9334 = load i64, i64* %9333, align 1
  %9335 = inttoptr i64 %9327 to double*
  %9336 = load double, double* %9335
  %9337 = fmul double %9331, %9336
  %9338 = bitcast i8* %9324 to double*
  store double %9337, double* %9338, align 1, !tbaa !2452
  %9339 = getelementptr inbounds i8, i8* %9324, i64 8
  %9340 = bitcast i8* %9339 to i64*
  store i64 %9334, i64* %9340, align 1, !tbaa !2452
  %9341 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9342 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9343 = load i64, i64* %PC
  %9344 = add i64 %9343, 9
  store i64 %9344, i64* %PC
  %9345 = bitcast i8* %9342 to double*
  %9346 = load double, double* %9345, align 1
  %9347 = getelementptr inbounds i8, i8* %9342, i64 8
  %9348 = bitcast i8* %9347 to i64*
  %9349 = load i64, i64* %9348, align 1
  %9350 = load double, double* bitcast (%A5_type* @A5 to double*)
  %9351 = fadd double %9346, %9350
  %9352 = bitcast i8* %9341 to double*
  store double %9351, double* %9352, align 1, !tbaa !2452
  %9353 = getelementptr inbounds i8, i8* %9341, i64 8
  %9354 = bitcast i8* %9353 to i64*
  store i64 %9349, i64* %9354, align 1, !tbaa !2452
  %9355 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9356 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9357 = load i64, i64* %RBP
  %9358 = sub i64 %9357, 40
  %9359 = load i64, i64* %PC
  %9360 = add i64 %9359, 5
  store i64 %9360, i64* %PC
  %9361 = bitcast i8* %9356 to double*
  %9362 = load double, double* %9361, align 1
  %9363 = getelementptr inbounds i8, i8* %9356, i64 8
  %9364 = bitcast i8* %9363 to i64*
  %9365 = load i64, i64* %9364, align 1
  %9366 = inttoptr i64 %9358 to double*
  %9367 = load double, double* %9366
  %9368 = fmul double %9362, %9367
  %9369 = bitcast i8* %9355 to double*
  store double %9368, double* %9369, align 1, !tbaa !2452
  %9370 = getelementptr inbounds i8, i8* %9355, i64 8
  %9371 = bitcast i8* %9370 to i64*
  store i64 %9365, i64* %9371, align 1, !tbaa !2452
  %9372 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9373 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9374 = load i64, i64* %PC
  %9375 = add i64 %9374, 9
  store i64 %9375, i64* %PC
  %9376 = bitcast i8* %9373 to double*
  %9377 = load double, double* %9376, align 1
  %9378 = getelementptr inbounds i8, i8* %9373, i64 8
  %9379 = bitcast i8* %9378 to i64*
  %9380 = load i64, i64* %9379, align 1
  %9381 = load double, double* bitcast (%A4_type* @A4 to double*)
  %9382 = fadd double %9377, %9381
  %9383 = bitcast i8* %9372 to double*
  store double %9382, double* %9383, align 1, !tbaa !2452
  %9384 = getelementptr inbounds i8, i8* %9372, i64 8
  %9385 = bitcast i8* %9384 to i64*
  store i64 %9380, i64* %9385, align 1, !tbaa !2452
  %9386 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9387 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9388 = load i64, i64* %RBP
  %9389 = sub i64 %9388, 40
  %9390 = load i64, i64* %PC
  %9391 = add i64 %9390, 5
  store i64 %9391, i64* %PC
  %9392 = bitcast i8* %9387 to double*
  %9393 = load double, double* %9392, align 1
  %9394 = getelementptr inbounds i8, i8* %9387, i64 8
  %9395 = bitcast i8* %9394 to i64*
  %9396 = load i64, i64* %9395, align 1
  %9397 = inttoptr i64 %9389 to double*
  %9398 = load double, double* %9397
  %9399 = fmul double %9393, %9398
  %9400 = bitcast i8* %9386 to double*
  store double %9399, double* %9400, align 1, !tbaa !2452
  %9401 = getelementptr inbounds i8, i8* %9386, i64 8
  %9402 = bitcast i8* %9401 to i64*
  store i64 %9396, i64* %9402, align 1, !tbaa !2452
  %9403 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9404 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9405 = load i64, i64* %PC
  %9406 = add i64 %9405, 9
  store i64 %9406, i64* %PC
  %9407 = bitcast i8* %9404 to double*
  %9408 = load double, double* %9407, align 1
  %9409 = getelementptr inbounds i8, i8* %9404, i64 8
  %9410 = bitcast i8* %9409 to i64*
  %9411 = load i64, i64* %9410, align 1
  %9412 = load double, double* bitcast (%A3_type* @A3 to double*)
  %9413 = fadd double %9408, %9412
  %9414 = bitcast i8* %9403 to double*
  store double %9413, double* %9414, align 1, !tbaa !2452
  %9415 = getelementptr inbounds i8, i8* %9403, i64 8
  %9416 = bitcast i8* %9415 to i64*
  store i64 %9411, i64* %9416, align 1, !tbaa !2452
  %9417 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9418 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9419 = load i64, i64* %RBP
  %9420 = sub i64 %9419, 40
  %9421 = load i64, i64* %PC
  %9422 = add i64 %9421, 5
  store i64 %9422, i64* %PC
  %9423 = bitcast i8* %9418 to double*
  %9424 = load double, double* %9423, align 1
  %9425 = getelementptr inbounds i8, i8* %9418, i64 8
  %9426 = bitcast i8* %9425 to i64*
  %9427 = load i64, i64* %9426, align 1
  %9428 = inttoptr i64 %9420 to double*
  %9429 = load double, double* %9428
  %9430 = fmul double %9424, %9429
  %9431 = bitcast i8* %9417 to double*
  store double %9430, double* %9431, align 1, !tbaa !2452
  %9432 = getelementptr inbounds i8, i8* %9417, i64 8
  %9433 = bitcast i8* %9432 to i64*
  store i64 %9427, i64* %9433, align 1, !tbaa !2452
  %9434 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9435 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9436 = load i64, i64* %PC
  %9437 = add i64 %9436, 9
  store i64 %9437, i64* %PC
  %9438 = bitcast i8* %9435 to double*
  %9439 = load double, double* %9438, align 1
  %9440 = getelementptr inbounds i8, i8* %9435, i64 8
  %9441 = bitcast i8* %9440 to i64*
  %9442 = load i64, i64* %9441, align 1
  %9443 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %9444 = fadd double %9439, %9443
  %9445 = bitcast i8* %9434 to double*
  store double %9444, double* %9445, align 1, !tbaa !2452
  %9446 = getelementptr inbounds i8, i8* %9434, i64 8
  %9447 = bitcast i8* %9446 to i64*
  store i64 %9442, i64* %9447, align 1, !tbaa !2452
  %9448 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9449 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9450 = load i64, i64* %RBP
  %9451 = sub i64 %9450, 40
  %9452 = load i64, i64* %PC
  %9453 = add i64 %9452, 5
  store i64 %9453, i64* %PC
  %9454 = bitcast i8* %9449 to double*
  %9455 = load double, double* %9454, align 1
  %9456 = getelementptr inbounds i8, i8* %9449, i64 8
  %9457 = bitcast i8* %9456 to i64*
  %9458 = load i64, i64* %9457, align 1
  %9459 = inttoptr i64 %9451 to double*
  %9460 = load double, double* %9459
  %9461 = fmul double %9455, %9460
  %9462 = bitcast i8* %9448 to double*
  store double %9461, double* %9462, align 1, !tbaa !2452
  %9463 = getelementptr inbounds i8, i8* %9448, i64 8
  %9464 = bitcast i8* %9463 to i64*
  store i64 %9458, i64* %9464, align 1, !tbaa !2452
  %9465 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9466 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9467 = load i64, i64* %PC
  %9468 = add i64 %9467, 9
  store i64 %9468, i64* %PC
  %9469 = bitcast i8* %9466 to double*
  %9470 = load double, double* %9469, align 1
  %9471 = getelementptr inbounds i8, i8* %9466, i64 8
  %9472 = bitcast i8* %9471 to i64*
  %9473 = load i64, i64* %9472, align 1
  %9474 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %9475 = fadd double %9470, %9474
  %9476 = bitcast i8* %9465 to double*
  store double %9475, double* %9476, align 1, !tbaa !2452
  %9477 = getelementptr inbounds i8, i8* %9465, i64 8
  %9478 = bitcast i8* %9477 to i64*
  store i64 %9473, i64* %9478, align 1, !tbaa !2452
  %9479 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9480 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9481 = load i64, i64* %RBP
  %9482 = sub i64 %9481, 40
  %9483 = load i64, i64* %PC
  %9484 = add i64 %9483, 5
  store i64 %9484, i64* %PC
  %9485 = bitcast i8* %9480 to double*
  %9486 = load double, double* %9485, align 1
  %9487 = getelementptr inbounds i8, i8* %9480, i64 8
  %9488 = bitcast i8* %9487 to i64*
  %9489 = load i64, i64* %9488, align 1
  %9490 = inttoptr i64 %9482 to double*
  %9491 = load double, double* %9490
  %9492 = fmul double %9486, %9491
  %9493 = bitcast i8* %9479 to double*
  store double %9492, double* %9493, align 1, !tbaa !2452
  %9494 = getelementptr inbounds i8, i8* %9479, i64 8
  %9495 = bitcast i8* %9494 to i64*
  store i64 %9489, i64* %9495, align 1, !tbaa !2452
  %9496 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9497 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9498 = load i64, i64* %PC
  %9499 = add i64 %9498, 9
  store i64 %9499, i64* %PC
  %9500 = bitcast i8* %9497 to double*
  %9501 = load double, double* %9500, align 1
  %9502 = getelementptr inbounds i8, i8* %9497, i64 8
  %9503 = bitcast i8* %9502 to i64*
  %9504 = load i64, i64* %9503, align 1
  %9505 = load double, double* bitcast (%one_type* @one to double*)
  %9506 = fadd double %9501, %9505
  %9507 = bitcast i8* %9496 to double*
  store double %9506, double* %9507, align 1, !tbaa !2452
  %9508 = getelementptr inbounds i8, i8* %9496, i64 8
  %9509 = bitcast i8* %9508 to i64*
  store i64 %9504, i64* %9509, align 1, !tbaa !2452
  %9510 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9511 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9512 = bitcast %union.vec128_t* %XMM4 to i8*
  %9513 = load i64, i64* %PC
  %9514 = add i64 %9513, 4
  store i64 %9514, i64* %PC
  %9515 = bitcast i8* %9511 to double*
  %9516 = load double, double* %9515, align 1
  %9517 = getelementptr inbounds i8, i8* %9511, i64 8
  %9518 = bitcast i8* %9517 to i64*
  %9519 = load i64, i64* %9518, align 1
  %9520 = bitcast i8* %9512 to double*
  %9521 = load double, double* %9520, align 1
  %9522 = fmul double %9516, %9521
  %9523 = bitcast i8* %9510 to double*
  store double %9522, double* %9523, align 1, !tbaa !2452
  %9524 = getelementptr inbounds i8, i8* %9510, i64 8
  %9525 = bitcast i8* %9524 to i64*
  store i64 %9519, i64* %9525, align 1, !tbaa !2452
  %9526 = bitcast %union.vec128_t* %XMM3 to i8*
  %9527 = load i64, i64* %PC
  %9528 = add i64 %9527, 9
  store i64 %9528, i64* %PC
  %9529 = bitcast i8* %9526 to double*
  %9530 = load double, double* %9529, align 1
  store double %9530, double* bitcast (%sa_type* @sa to double*)
  %9531 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9532 = load i64, i64* %RBP
  %9533 = sub i64 %9532, 40
  %9534 = load i64, i64* %PC
  %9535 = add i64 %9534, 5
  store i64 %9535, i64* %PC
  %9536 = inttoptr i64 %9533 to double*
  %9537 = load double, double* %9536
  %9538 = bitcast i8* %9531 to double*
  store double %9537, double* %9538, align 1, !tbaa !2452
  %9539 = getelementptr inbounds i8, i8* %9531, i64 8
  %9540 = bitcast i8* %9539 to double*
  store double 0.000000e+00, double* %9540, align 1, !tbaa !2452
  %9541 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9542 = load i64, i64* %RBP
  %9543 = sub i64 %9542, 40
  %9544 = load i64, i64* %PC
  %9545 = add i64 %9544, 5
  store i64 %9545, i64* %PC
  %9546 = inttoptr i64 %9543 to double*
  %9547 = load double, double* %9546
  %9548 = bitcast i8* %9541 to double*
  store double %9547, double* %9548, align 1, !tbaa !2452
  %9549 = getelementptr inbounds i8, i8* %9541, i64 8
  %9550 = bitcast i8* %9549 to double*
  store double 0.000000e+00, double* %9550, align 1, !tbaa !2452
  %9551 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %9552 = load i64, i64* %RBP
  %9553 = sub i64 %9552, 40
  %9554 = load i64, i64* %PC
  %9555 = add i64 %9554, 5
  store i64 %9555, i64* %PC
  %9556 = inttoptr i64 %9553 to double*
  %9557 = load double, double* %9556
  %9558 = bitcast i8* %9551 to double*
  store double %9557, double* %9558, align 1, !tbaa !2452
  %9559 = getelementptr inbounds i8, i8* %9551, i64 8
  %9560 = bitcast i8* %9559 to double*
  store double 0.000000e+00, double* %9560, align 1, !tbaa !2452
  %9561 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %9562 = load i64, i64* %RBP
  %9563 = sub i64 %9562, 40
  %9564 = load i64, i64* %PC
  %9565 = add i64 %9564, 5
  store i64 %9565, i64* %PC
  %9566 = inttoptr i64 %9563 to double*
  %9567 = load double, double* %9566
  %9568 = bitcast i8* %9561 to double*
  store double %9567, double* %9568, align 1, !tbaa !2452
  %9569 = getelementptr inbounds i8, i8* %9561, i64 8
  %9570 = bitcast i8* %9569 to double*
  store double 0.000000e+00, double* %9570, align 1, !tbaa !2452
  %9571 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %9572 = load i64, i64* %RBP
  %9573 = sub i64 %9572, 40
  %9574 = load i64, i64* %PC
  %9575 = add i64 %9574, 5
  store i64 %9575, i64* %PC
  %9576 = inttoptr i64 %9573 to double*
  %9577 = load double, double* %9576
  %9578 = bitcast i8* %9571 to double*
  store double %9577, double* %9578, align 1, !tbaa !2452
  %9579 = getelementptr inbounds i8, i8* %9571, i64 8
  %9580 = bitcast i8* %9579 to double*
  store double 0.000000e+00, double* %9580, align 1, !tbaa !2452
  %9581 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %9582 = load i64, i64* %PC
  %9583 = add i64 %9582, 10
  store i64 %9583, i64* %PC
  %9584 = load double, double* bitcast (%B6_type* @B6 to double*)
  %9585 = bitcast i8* %9581 to double*
  store double %9584, double* %9585, align 1, !tbaa !2452
  %9586 = getelementptr inbounds i8, i8* %9581, i64 8
  %9587 = bitcast i8* %9586 to double*
  store double 0.000000e+00, double* %9587, align 1, !tbaa !2452
  %9588 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %9589 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %9590 = load i64, i64* %RBP
  %9591 = sub i64 %9590, 40
  %9592 = load i64, i64* %PC
  %9593 = add i64 %9592, 6
  store i64 %9593, i64* %PC
  %9594 = bitcast i8* %9589 to double*
  %9595 = load double, double* %9594, align 1
  %9596 = getelementptr inbounds i8, i8* %9589, i64 8
  %9597 = bitcast i8* %9596 to i64*
  %9598 = load i64, i64* %9597, align 1
  %9599 = inttoptr i64 %9591 to double*
  %9600 = load double, double* %9599
  %9601 = fmul double %9595, %9600
  %9602 = bitcast i8* %9588 to double*
  store double %9601, double* %9602, align 1, !tbaa !2452
  %9603 = getelementptr inbounds i8, i8* %9588, i64 8
  %9604 = bitcast i8* %9603 to i64*
  store i64 %9598, i64* %9604, align 1, !tbaa !2452
  %9605 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %9606 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %9607 = load i64, i64* %PC
  %9608 = add i64 %9607, 10
  store i64 %9608, i64* %PC
  %9609 = bitcast i8* %9606 to double*
  %9610 = load double, double* %9609, align 1
  %9611 = getelementptr inbounds i8, i8* %9606, i64 8
  %9612 = bitcast i8* %9611 to i64*
  %9613 = load i64, i64* %9612, align 1
  %9614 = load double, double* bitcast (%B5_type* @B5 to double*)
  %9615 = fadd double %9610, %9614
  %9616 = bitcast i8* %9605 to double*
  store double %9615, double* %9616, align 1, !tbaa !2452
  %9617 = getelementptr inbounds i8, i8* %9605, i64 8
  %9618 = bitcast i8* %9617 to i64*
  store i64 %9613, i64* %9618, align 1, !tbaa !2452
  %9619 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %9620 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %9621 = bitcast %union.vec128_t* %XMM8 to i8*
  %9622 = load i64, i64* %PC
  %9623 = add i64 %9622, 5
  store i64 %9623, i64* %PC
  %9624 = bitcast i8* %9620 to double*
  %9625 = load double, double* %9624, align 1
  %9626 = getelementptr inbounds i8, i8* %9620, i64 8
  %9627 = bitcast i8* %9626 to i64*
  %9628 = load i64, i64* %9627, align 1
  %9629 = bitcast i8* %9621 to double*
  %9630 = load double, double* %9629, align 1
  %9631 = fmul double %9625, %9630
  %9632 = bitcast i8* %9619 to double*
  store double %9631, double* %9632, align 1, !tbaa !2452
  %9633 = getelementptr inbounds i8, i8* %9619, i64 8
  %9634 = bitcast i8* %9633 to i64*
  store i64 %9628, i64* %9634, align 1, !tbaa !2452
  %9635 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %9636 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %9637 = load i64, i64* %PC
  %9638 = add i64 %9637, 9
  store i64 %9638, i64* %PC
  %9639 = bitcast i8* %9636 to double*
  %9640 = load double, double* %9639, align 1
  %9641 = getelementptr inbounds i8, i8* %9636, i64 8
  %9642 = bitcast i8* %9641 to i64*
  %9643 = load i64, i64* %9642, align 1
  %9644 = load double, double* bitcast (%B4_type* @B4 to double*)
  %9645 = fadd double %9640, %9644
  %9646 = bitcast i8* %9635 to double*
  store double %9645, double* %9646, align 1, !tbaa !2452
  %9647 = getelementptr inbounds i8, i8* %9635, i64 8
  %9648 = bitcast i8* %9647 to i64*
  store i64 %9643, i64* %9648, align 1, !tbaa !2452
  %9649 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %9650 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %9651 = bitcast %union.vec128_t* %XMM7 to i8*
  %9652 = load i64, i64* %PC
  %9653 = add i64 %9652, 4
  store i64 %9653, i64* %PC
  %9654 = bitcast i8* %9650 to double*
  %9655 = load double, double* %9654, align 1
  %9656 = getelementptr inbounds i8, i8* %9650, i64 8
  %9657 = bitcast i8* %9656 to i64*
  %9658 = load i64, i64* %9657, align 1
  %9659 = bitcast i8* %9651 to double*
  %9660 = load double, double* %9659, align 1
  %9661 = fmul double %9655, %9660
  %9662 = bitcast i8* %9649 to double*
  store double %9661, double* %9662, align 1, !tbaa !2452
  %9663 = getelementptr inbounds i8, i8* %9649, i64 8
  %9664 = bitcast i8* %9663 to i64*
  store i64 %9658, i64* %9664, align 1, !tbaa !2452
  %9665 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %9666 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %9667 = load i64, i64* %PC
  %9668 = add i64 %9667, 9
  store i64 %9668, i64* %PC
  %9669 = bitcast i8* %9666 to double*
  %9670 = load double, double* %9669, align 1
  %9671 = getelementptr inbounds i8, i8* %9666, i64 8
  %9672 = bitcast i8* %9671 to i64*
  %9673 = load i64, i64* %9672, align 1
  %9674 = load double, double* bitcast (%B3_type* @B3 to double*)
  %9675 = fadd double %9670, %9674
  %9676 = bitcast i8* %9665 to double*
  store double %9675, double* %9676, align 1, !tbaa !2452
  %9677 = getelementptr inbounds i8, i8* %9665, i64 8
  %9678 = bitcast i8* %9677 to i64*
  store i64 %9673, i64* %9678, align 1, !tbaa !2452
  %9679 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %9680 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %9681 = bitcast %union.vec128_t* %XMM6 to i8*
  %9682 = load i64, i64* %PC
  %9683 = add i64 %9682, 4
  store i64 %9683, i64* %PC
  %9684 = bitcast i8* %9680 to double*
  %9685 = load double, double* %9684, align 1
  %9686 = getelementptr inbounds i8, i8* %9680, i64 8
  %9687 = bitcast i8* %9686 to i64*
  %9688 = load i64, i64* %9687, align 1
  %9689 = bitcast i8* %9681 to double*
  %9690 = load double, double* %9689, align 1
  %9691 = fmul double %9685, %9690
  %9692 = bitcast i8* %9679 to double*
  store double %9691, double* %9692, align 1, !tbaa !2452
  %9693 = getelementptr inbounds i8, i8* %9679, i64 8
  %9694 = bitcast i8* %9693 to i64*
  store i64 %9688, i64* %9694, align 1, !tbaa !2452
  %9695 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %9696 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %9697 = load i64, i64* %PC
  %9698 = add i64 %9697, 9
  store i64 %9698, i64* %PC
  %9699 = bitcast i8* %9696 to double*
  %9700 = load double, double* %9699, align 1
  %9701 = getelementptr inbounds i8, i8* %9696, i64 8
  %9702 = bitcast i8* %9701 to i64*
  %9703 = load i64, i64* %9702, align 1
  %9704 = load double, double* bitcast (%B2_type* @B2 to double*)
  %9705 = fadd double %9700, %9704
  %9706 = bitcast i8* %9695 to double*
  store double %9705, double* %9706, align 1, !tbaa !2452
  %9707 = getelementptr inbounds i8, i8* %9695, i64 8
  %9708 = bitcast i8* %9707 to i64*
  store i64 %9703, i64* %9708, align 1, !tbaa !2452
  %9709 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9710 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9711 = bitcast %union.vec128_t* %XMM5 to i8*
  %9712 = load i64, i64* %PC
  %9713 = add i64 %9712, 4
  store i64 %9713, i64* %PC
  %9714 = bitcast i8* %9710 to double*
  %9715 = load double, double* %9714, align 1
  %9716 = getelementptr inbounds i8, i8* %9710, i64 8
  %9717 = bitcast i8* %9716 to i64*
  %9718 = load i64, i64* %9717, align 1
  %9719 = bitcast i8* %9711 to double*
  %9720 = load double, double* %9719, align 1
  %9721 = fmul double %9715, %9720
  %9722 = bitcast i8* %9709 to double*
  store double %9721, double* %9722, align 1, !tbaa !2452
  %9723 = getelementptr inbounds i8, i8* %9709, i64 8
  %9724 = bitcast i8* %9723 to i64*
  store i64 %9718, i64* %9724, align 1, !tbaa !2452
  %9725 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9726 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9727 = load i64, i64* %PC
  %9728 = add i64 %9727, 9
  store i64 %9728, i64* %PC
  %9729 = bitcast i8* %9726 to double*
  %9730 = load double, double* %9729, align 1
  %9731 = getelementptr inbounds i8, i8* %9726, i64 8
  %9732 = bitcast i8* %9731 to i64*
  %9733 = load i64, i64* %9732, align 1
  %9734 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %9735 = fadd double %9730, %9734
  %9736 = bitcast i8* %9725 to double*
  store double %9735, double* %9736, align 1, !tbaa !2452
  %9737 = getelementptr inbounds i8, i8* %9725, i64 8
  %9738 = bitcast i8* %9737 to i64*
  store i64 %9733, i64* %9738, align 1, !tbaa !2452
  %9739 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9740 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9741 = bitcast %union.vec128_t* %XMM4 to i8*
  %9742 = load i64, i64* %PC
  %9743 = add i64 %9742, 4
  store i64 %9743, i64* %PC
  %9744 = bitcast i8* %9740 to double*
  %9745 = load double, double* %9744, align 1
  %9746 = getelementptr inbounds i8, i8* %9740, i64 8
  %9747 = bitcast i8* %9746 to i64*
  %9748 = load i64, i64* %9747, align 1
  %9749 = bitcast i8* %9741 to double*
  %9750 = load double, double* %9749, align 1
  %9751 = fmul double %9745, %9750
  %9752 = bitcast i8* %9739 to double*
  store double %9751, double* %9752, align 1, !tbaa !2452
  %9753 = getelementptr inbounds i8, i8* %9739, i64 8
  %9754 = bitcast i8* %9753 to i64*
  store i64 %9748, i64* %9754, align 1, !tbaa !2452
  %9755 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9756 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9757 = load i64, i64* %PC
  %9758 = add i64 %9757, 9
  store i64 %9758, i64* %PC
  %9759 = bitcast i8* %9756 to double*
  %9760 = load double, double* %9759, align 1
  %9761 = getelementptr inbounds i8, i8* %9756, i64 8
  %9762 = bitcast i8* %9761 to i64*
  %9763 = load i64, i64* %9762, align 1
  %9764 = load double, double* bitcast (%one_type* @one to double*)
  %9765 = fadd double %9760, %9764
  %9766 = bitcast i8* %9755 to double*
  store double %9765, double* %9766, align 1, !tbaa !2452
  %9767 = getelementptr inbounds i8, i8* %9755, i64 8
  %9768 = bitcast i8* %9767 to i64*
  store i64 %9763, i64* %9768, align 1, !tbaa !2452
  %9769 = bitcast %union.vec128_t* %XMM3 to i8*
  %9770 = load i64, i64* %PC
  %9771 = add i64 %9770, 9
  store i64 %9771, i64* %PC
  %9772 = bitcast i8* %9769 to double*
  %9773 = load double, double* %9772, align 1
  store double %9773, double* bitcast (%sb_type* @sb to double*)
  %9774 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9775 = load i64, i64* %PC
  %9776 = add i64 %9775, 9
  store i64 %9776, i64* %PC
  %9777 = load double, double* bitcast (%sa_type* @sa to double*)
  %9778 = bitcast i8* %9774 to double*
  store double %9777, double* %9778, align 1, !tbaa !2452
  %9779 = getelementptr inbounds i8, i8* %9774, i64 8
  %9780 = bitcast i8* %9779 to double*
  store double 0.000000e+00, double* %9780, align 1, !tbaa !2452
  %9781 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9782 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9783 = load i64, i64* %PC
  %9784 = add i64 %9783, 9
  store i64 %9784, i64* %PC
  %9785 = bitcast i8* %9782 to double*
  %9786 = load double, double* %9785, align 1
  %9787 = getelementptr inbounds i8, i8* %9782, i64 8
  %9788 = bitcast i8* %9787 to i64*
  %9789 = load i64, i64* %9788, align 1
  %9790 = load double, double* bitcast (%sb_type* @sb to double*)
  %9791 = fmul double %9786, %9790
  %9792 = bitcast i8* %9781 to double*
  store double %9791, double* %9792, align 1, !tbaa !2452
  %9793 = getelementptr inbounds i8, i8* %9781, i64 8
  %9794 = bitcast i8* %9793 to i64*
  store i64 %9789, i64* %9794, align 1, !tbaa !2452
  %9795 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9796 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9797 = load i64, i64* %PC
  %9798 = add i64 %9797, 9
  store i64 %9798, i64* %PC
  %9799 = bitcast i8* %9796 to double*
  %9800 = load double, double* %9799, align 1
  %9801 = getelementptr inbounds i8, i8* %9796, i64 8
  %9802 = bitcast i8* %9801 to i64*
  %9803 = load i64, i64* %9802, align 1
  %9804 = load double, double* bitcast (%sb_type* @sb to double*)
  %9805 = fmul double %9800, %9804
  %9806 = bitcast i8* %9795 to double*
  store double %9805, double* %9806, align 1, !tbaa !2452
  %9807 = getelementptr inbounds i8, i8* %9795, i64 8
  %9808 = bitcast i8* %9807 to i64*
  store i64 %9803, i64* %9808, align 1, !tbaa !2452
  %9809 = bitcast %union.vec128_t* %XMM3 to i8*
  %9810 = load i64, i64* %PC
  %9811 = add i64 %9810, 9
  store i64 %9811, i64* %PC
  %9812 = bitcast i8* %9809 to double*
  %9813 = load double, double* %9812, align 1
  store double %9813, double* bitcast (%sa_type* @sa to double*)
  %9814 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9815 = load i64, i64* %PC
  %9816 = add i64 %9815, 9
  store i64 %9816, i64* %PC
  %9817 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 192) to double*)
  %9818 = bitcast i8* %9814 to double*
  store double %9817, double* %9818, align 1, !tbaa !2452
  %9819 = getelementptr inbounds i8, i8* %9814, i64 8
  %9820 = bitcast i8* %9819 to double*
  store double 0.000000e+00, double* %9820, align 1, !tbaa !2452
  %9821 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9822 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9823 = bitcast %union.vec128_t* %XMM2 to i8*
  %9824 = load i64, i64* %PC
  %9825 = add i64 %9824, 4
  store i64 %9825, i64* %PC
  %9826 = bitcast i8* %9822 to double*
  %9827 = load double, double* %9826, align 1
  %9828 = getelementptr inbounds i8, i8* %9822, i64 8
  %9829 = bitcast i8* %9828 to i64*
  %9830 = load i64, i64* %9829, align 1
  %9831 = bitcast i8* %9823 to double*
  %9832 = load double, double* %9831, align 1
  %9833 = fdiv double %9827, %9832
  %9834 = bitcast i8* %9821 to double*
  store double %9833, double* %9834, align 1, !tbaa !2452
  %9835 = getelementptr inbounds i8, i8* %9821, i64 8
  %9836 = bitcast i8* %9835 to i64*
  store i64 %9830, i64* %9836, align 1, !tbaa !2452
  %9837 = bitcast %union.vec128_t* %XMM3 to i8*
  %9838 = load i64, i64* %PC
  %9839 = add i64 %9838, 9
  store i64 %9839, i64* %PC
  %9840 = bitcast i8* %9837 to double*
  %9841 = load double, double* %9840, align 1
  store double %9841, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 200) to double*)
  %9842 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9843 = load i64, i64* %RBP
  %9844 = sub i64 %9843, 48
  %9845 = load i64, i64* %PC
  %9846 = add i64 %9845, 5
  store i64 %9846, i64* %PC
  %9847 = inttoptr i64 %9844 to double*
  %9848 = load double, double* %9847
  %9849 = bitcast i8* %9842 to double*
  store double %9848, double* %9849, align 1, !tbaa !2452
  %9850 = getelementptr inbounds i8, i8* %9842, i64 8
  %9851 = bitcast i8* %9850 to double*
  store double 0.000000e+00, double* %9851, align 1, !tbaa !2452
  %9852 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9853 = load i64, i64* %PC
  %9854 = add i64 %9853, 9
  store i64 %9854, i64* %PC
  %9855 = load double, double* bitcast (%sa_type* @sa to double*)
  %9856 = bitcast i8* %9852 to double*
  store double %9855, double* %9856, align 1, !tbaa !2452
  %9857 = getelementptr inbounds i8, i8* %9852, i64 8
  %9858 = bitcast i8* %9857 to double*
  store double 0.000000e+00, double* %9858, align 1, !tbaa !2452
  %9859 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9860 = load i64, i64* %PC
  %9861 = add i64 %9860, 9
  store i64 %9861, i64* %PC
  %9862 = load double, double* bitcast (%two_type* @two to double*)
  %9863 = bitcast i8* %9859 to double*
  store double %9862, double* %9863, align 1, !tbaa !2452
  %9864 = getelementptr inbounds i8, i8* %9859, i64 8
  %9865 = bitcast i8* %9864 to double*
  store double 0.000000e+00, double* %9865, align 1, !tbaa !2452
  %9866 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9867 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %9868 = load i64, i64* %RBP
  %9869 = sub i64 %9868, 16
  %9870 = load i64, i64* %PC
  %9871 = add i64 %9870, 5
  store i64 %9871, i64* %PC
  %9872 = bitcast i8* %9867 to double*
  %9873 = load double, double* %9872, align 1
  %9874 = getelementptr inbounds i8, i8* %9867, i64 8
  %9875 = bitcast i8* %9874 to i64*
  %9876 = load i64, i64* %9875, align 1
  %9877 = inttoptr i64 %9869 to double*
  %9878 = load double, double* %9877
  %9879 = fmul double %9873, %9878
  %9880 = bitcast i8* %9866 to double*
  store double %9879, double* %9880, align 1, !tbaa !2452
  %9881 = getelementptr inbounds i8, i8* %9866, i64 8
  %9882 = bitcast i8* %9881 to i64*
  store i64 %9876, i64* %9882, align 1, !tbaa !2452
  %9883 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9884 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %9885 = bitcast %union.vec128_t* %XMM4 to i8*
  %9886 = load i64, i64* %PC
  %9887 = add i64 %9886, 4
  store i64 %9887, i64* %PC
  %9888 = bitcast i8* %9884 to double*
  %9889 = load double, double* %9888, align 1
  %9890 = getelementptr inbounds i8, i8* %9884, i64 8
  %9891 = bitcast i8* %9890 to i64*
  %9892 = load i64, i64* %9891, align 1
  %9893 = bitcast i8* %9885 to double*
  %9894 = load double, double* %9893, align 1
  %9895 = fadd double %9889, %9894
  %9896 = bitcast i8* %9883 to double*
  store double %9895, double* %9896, align 1, !tbaa !2452
  %9897 = getelementptr inbounds i8, i8* %9883, i64 8
  %9898 = bitcast i8* %9897 to i64*
  store i64 %9892, i64* %9898, align 1, !tbaa !2452
  %9899 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9900 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9901 = bitcast %union.vec128_t* %XMM3 to i8*
  %9902 = load i64, i64* %PC
  %9903 = add i64 %9902, 4
  store i64 %9903, i64* %PC
  %9904 = bitcast i8* %9900 to double*
  %9905 = load double, double* %9904, align 1
  %9906 = getelementptr inbounds i8, i8* %9900, i64 8
  %9907 = bitcast i8* %9906 to i64*
  %9908 = load i64, i64* %9907, align 1
  %9909 = bitcast i8* %9901 to double*
  %9910 = load double, double* %9909, align 1
  %9911 = fmul double %9905, %9910
  %9912 = bitcast i8* %9899 to double*
  store double %9911, double* %9912, align 1, !tbaa !2452
  %9913 = getelementptr inbounds i8, i8* %9899, i64 8
  %9914 = bitcast i8* %9913 to i64*
  store i64 %9908, i64* %9914, align 1, !tbaa !2452
  %9915 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9916 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %9917 = load i64, i64* %PC
  %9918 = add i64 %9917, 9
  store i64 %9918, i64* %PC
  %9919 = bitcast i8* %9916 to double*
  %9920 = load double, double* %9919, align 1
  %9921 = getelementptr inbounds i8, i8* %9916, i64 8
  %9922 = bitcast i8* %9921 to i64*
  %9923 = load i64, i64* %9922, align 1
  %9924 = load double, double* bitcast (%two_type* @two to double*)
  %9925 = fdiv double %9920, %9924
  %9926 = bitcast i8* %9915 to double*
  store double %9925, double* %9926, align 1, !tbaa !2452
  %9927 = getelementptr inbounds i8, i8* %9915, i64 8
  %9928 = bitcast i8* %9927 to i64*
  store i64 %9923, i64* %9928, align 1, !tbaa !2452
  %9929 = bitcast %union.vec128_t* %XMM2 to i8*
  %9930 = load i64, i64* %PC
  %9931 = add i64 %9930, 9
  store i64 %9931, i64* %PC
  %9932 = bitcast i8* %9929 to double*
  %9933 = load double, double* %9932, align 1
  store double %9933, double* bitcast (%sa_type* @sa to double*)
  %9934 = bitcast %union.vec128_t* %XMM1 to i8*
  %9935 = load i64, i64* %PC
  %9936 = add i64 %9935, 9
  store i64 %9936, i64* %PC
  %9937 = bitcast i8* %9934 to double*
  %9938 = load double, double* %9937, align 1
  store double %9938, double* bitcast (%sb_type* @sb to double*)
  %9939 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9940 = load i64, i64* %PC
  %9941 = add i64 %9940, 9
  store i64 %9941, i64* %PC
  %9942 = load double, double* bitcast (%sa_type* @sa to double*)
  %9943 = bitcast i8* %9939 to double*
  store double %9942, double* %9943, align 1, !tbaa !2452
  %9944 = getelementptr inbounds i8, i8* %9939, i64 8
  %9945 = bitcast i8* %9944 to double*
  store double 0.000000e+00, double* %9945, align 1, !tbaa !2452
  %9946 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9947 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9948 = load i64, i64* %PC
  %9949 = add i64 %9948, 9
  store i64 %9949, i64* %PC
  %9950 = bitcast i8* %9947 to double*
  %9951 = load double, double* %9950, align 1
  %9952 = getelementptr inbounds i8, i8* %9947, i64 8
  %9953 = bitcast i8* %9952 to i64*
  %9954 = load i64, i64* %9953, align 1
  %9955 = load double, double* bitcast (%sb_type* @sb to double*)
  %9956 = fsub double %9951, %9955
  %9957 = bitcast i8* %9946 to double*
  store double %9956, double* %9957, align 1, !tbaa !2452
  %9958 = getelementptr inbounds i8, i8* %9946, i64 8
  %9959 = bitcast i8* %9958 to i64*
  store i64 %9954, i64* %9959, align 1, !tbaa !2452
  %9960 = bitcast %union.vec128_t* %XMM1 to i8*
  %9961 = load i64, i64* %PC
  %9962 = add i64 %9961, 9
  store i64 %9962, i64* %PC
  %9963 = bitcast i8* %9960 to double*
  %9964 = load double, double* %9963, align 1
  store double %9964, double* bitcast (%sc_type* @sc to double*)
  %9965 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9966 = load i64, i64* %PC
  %9967 = add i64 %9966, 9
  store i64 %9967, i64* %PC
  %9968 = load double, double* bitcast (%one_type* @one to double*)
  %9969 = bitcast i8* %9965 to double*
  store double %9968, double* %9969, align 1, !tbaa !2452
  %9970 = getelementptr inbounds i8, i8* %9965, i64 8
  %9971 = bitcast i8* %9970 to double*
  store double 0.000000e+00, double* %9971, align 1, !tbaa !2452
  %9972 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9973 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9974 = load i64, i64* %PC
  %9975 = add i64 %9974, 9
  store i64 %9975, i64* %PC
  %9976 = bitcast i8* %9973 to double*
  %9977 = load double, double* %9976, align 1
  %9978 = getelementptr inbounds i8, i8* %9973, i64 8
  %9979 = bitcast i8* %9978 to i64*
  %9980 = load i64, i64* %9979, align 1
  %9981 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 200) to double*)
  %9982 = fdiv double %9977, %9981
  %9983 = bitcast i8* %9972 to double*
  store double %9982, double* %9983, align 1, !tbaa !2452
  %9984 = getelementptr inbounds i8, i8* %9972, i64 8
  %9985 = bitcast i8* %9984 to i64*
  store i64 %9980, i64* %9985, align 1, !tbaa !2452
  %9986 = bitcast %union.vec128_t* %XMM1 to i8*
  %9987 = load i64, i64* %PC
  %9988 = add i64 %9987, 9
  store i64 %9988, i64* %PC
  %9989 = bitcast i8* %9986 to double*
  %9990 = load double, double* %9989, align 1
  store double %9990, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 208) to double*)
  %9991 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %9992 = bitcast %union.vec128_t* %XMM0 to i8*
  %9993 = load i64, i64* %PC
  %9994 = add i64 %9993, 3
  store i64 %9994, i64* %PC
  %9995 = bitcast i8* %9992 to <2 x i32>*
  %9996 = load <2 x i32>, <2 x i32>* %9995, align 1
  %9997 = getelementptr inbounds i8, i8* %9992, i64 8
  %9998 = bitcast i8* %9997 to <2 x i32>*
  %9999 = load <2 x i32>, <2 x i32>* %9998, align 1
  %10000 = extractelement <2 x i32> %9996, i32 0
  %10001 = bitcast i8* %9991 to i32*
  store i32 %10000, i32* %10001, align 1, !tbaa !2455
  %10002 = extractelement <2 x i32> %9996, i32 1
  %10003 = getelementptr inbounds i8, i8* %9991, i64 4
  %10004 = bitcast i8* %10003 to i32*
  store i32 %10002, i32* %10004, align 1, !tbaa !2455
  %10005 = extractelement <2 x i32> %9999, i32 0
  %10006 = getelementptr inbounds i8, i8* %9991, i64 8
  %10007 = bitcast i8* %10006 to i32*
  store i32 %10005, i32* %10007, align 1, !tbaa !2455
  %10008 = extractelement <2 x i32> %9999, i32 1
  %10009 = getelementptr inbounds i8, i8* %9991, i64 12
  %10010 = bitcast i8* %10009 to i32*
  store i32 %10008, i32* %10010, align 1, !tbaa !2455
  %10011 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10012 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10013 = load i64, i64* %PC
  %10014 = add i64 %10013, 9
  store i64 %10014, i64* %PC
  %10015 = bitcast i8* %10012 to double*
  %10016 = load double, double* %10015, align 1
  %10017 = getelementptr inbounds i8, i8* %10012, i64 8
  %10018 = bitcast i8* %10017 to i64*
  %10019 = load i64, i64* %10018, align 1
  %10020 = load double, double* bitcast (%sc_type* @sc to double*)
  %10021 = fmul double %10016, %10020
  %10022 = bitcast i8* %10011 to double*
  store double %10021, double* %10022, align 1, !tbaa !2452
  %10023 = getelementptr inbounds i8, i8* %10011, i64 8
  %10024 = bitcast i8* %10023 to i64*
  store i64 %10019, i64* %10024, align 1, !tbaa !2452
  %10025 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10026 = bitcast %union.vec128_t* %XMM0 to i8*
  %10027 = load i64, i64* %PC
  %10028 = add i64 %10027, 3
  store i64 %10028, i64* %PC
  %10029 = bitcast i8* %10026 to <2 x i32>*
  %10030 = load <2 x i32>, <2 x i32>* %10029, align 1
  %10031 = getelementptr inbounds i8, i8* %10026, i64 8
  %10032 = bitcast i8* %10031 to <2 x i32>*
  %10033 = load <2 x i32>, <2 x i32>* %10032, align 1
  %10034 = extractelement <2 x i32> %10030, i32 0
  %10035 = bitcast i8* %10025 to i32*
  store i32 %10034, i32* %10035, align 1, !tbaa !2455
  %10036 = extractelement <2 x i32> %10030, i32 1
  %10037 = getelementptr inbounds i8, i8* %10025, i64 4
  %10038 = bitcast i8* %10037 to i32*
  store i32 %10036, i32* %10038, align 1, !tbaa !2455
  %10039 = extractelement <2 x i32> %10033, i32 0
  %10040 = getelementptr inbounds i8, i8* %10025, i64 8
  %10041 = bitcast i8* %10040 to i32*
  store i32 %10039, i32* %10041, align 1, !tbaa !2455
  %10042 = extractelement <2 x i32> %10033, i32 1
  %10043 = getelementptr inbounds i8, i8* %10025, i64 12
  %10044 = bitcast i8* %10043 to i32*
  store i32 %10042, i32* %10044, align 1, !tbaa !2455
  %10045 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10046 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10047 = load i64, i64* %PC
  %10048 = add i64 %10047, 9
  store i64 %10048, i64* %PC
  %10049 = bitcast i8* %10046 to double*
  %10050 = load double, double* %10049, align 1
  %10051 = getelementptr inbounds i8, i8* %10046, i64 8
  %10052 = bitcast i8* %10051 to i64*
  %10053 = load i64, i64* %10052, align 1
  %10054 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 192) to double*)
  %10055 = fmul double %10050, %10054
  %10056 = bitcast i8* %10045 to double*
  store double %10055, double* %10056, align 1, !tbaa !2452
  %10057 = getelementptr inbounds i8, i8* %10045, i64 8
  %10058 = bitcast i8* %10057 to i64*
  store i64 %10053, i64* %10058, align 1, !tbaa !2452
  %10059 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10060 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10061 = load i64, i64* %PC
  %10062 = add i64 %10061, 9
  store i64 %10062, i64* %PC
  %10063 = bitcast i8* %10060 to double*
  %10064 = load double, double* %10063, align 1
  %10065 = getelementptr inbounds i8, i8* %10060, i64 8
  %10066 = bitcast i8* %10065 to i64*
  %10067 = load i64, i64* %10066, align 1
  %10068 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 208) to double*)
  %10069 = fmul double %10064, %10068
  %10070 = bitcast i8* %10059 to double*
  store double %10069, double* %10070, align 1, !tbaa !2452
  %10071 = getelementptr inbounds i8, i8* %10059, i64 8
  %10072 = bitcast i8* %10071 to i64*
  store i64 %10067, i64* %10072, align 1, !tbaa !2452
  %10073 = load i64, i64* %RBP
  %10074 = sub i64 %10073, 304
  %10075 = bitcast %union.vec128_t* %XMM0 to i8*
  %10076 = load i64, i64* %PC
  %10077 = add i64 %10076, 8
  store i64 %10077, i64* %PC
  %10078 = bitcast i8* %10075 to double*
  %10079 = load double, double* %10078, align 1
  %10080 = inttoptr i64 %10074 to double*
  store double %10079, double* %10080
  %10081 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10082 = bitcast %union.vec128_t* %XMM1 to i8*
  %10083 = load i64, i64* %PC
  %10084 = add i64 %10083, 3
  store i64 %10084, i64* %PC
  %10085 = bitcast i8* %10082 to <2 x i32>*
  %10086 = load <2 x i32>, <2 x i32>* %10085, align 1
  %10087 = getelementptr inbounds i8, i8* %10082, i64 8
  %10088 = bitcast i8* %10087 to <2 x i32>*
  %10089 = load <2 x i32>, <2 x i32>* %10088, align 1
  %10090 = extractelement <2 x i32> %10086, i32 0
  %10091 = bitcast i8* %10081 to i32*
  store i32 %10090, i32* %10091, align 1, !tbaa !2455
  %10092 = extractelement <2 x i32> %10086, i32 1
  %10093 = getelementptr inbounds i8, i8* %10081, i64 4
  %10094 = bitcast i8* %10093 to i32*
  store i32 %10092, i32* %10094, align 1, !tbaa !2455
  %10095 = extractelement <2 x i32> %10089, i32 0
  %10096 = getelementptr inbounds i8, i8* %10081, i64 8
  %10097 = bitcast i8* %10096 to i32*
  store i32 %10095, i32* %10097, align 1, !tbaa !2455
  %10098 = extractelement <2 x i32> %10089, i32 1
  %10099 = getelementptr inbounds i8, i8* %10081, i64 12
  %10100 = bitcast i8* %10099 to i32*
  store i32 %10098, i32* %10100, align 1, !tbaa !2455
  %10101 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10102 = bitcast %union.vec128_t* %XMM2 to i8*
  %10103 = load i64, i64* %PC
  %10104 = add i64 %10103, 3
  store i64 %10104, i64* %PC
  %10105 = bitcast i8* %10102 to <2 x i32>*
  %10106 = load <2 x i32>, <2 x i32>* %10105, align 1
  %10107 = getelementptr inbounds i8, i8* %10102, i64 8
  %10108 = bitcast i8* %10107 to <2 x i32>*
  %10109 = load <2 x i32>, <2 x i32>* %10108, align 1
  %10110 = extractelement <2 x i32> %10106, i32 0
  %10111 = bitcast i8* %10101 to i32*
  store i32 %10110, i32* %10111, align 1, !tbaa !2455
  %10112 = extractelement <2 x i32> %10106, i32 1
  %10113 = getelementptr inbounds i8, i8* %10101, i64 4
  %10114 = bitcast i8* %10113 to i32*
  store i32 %10112, i32* %10114, align 1, !tbaa !2455
  %10115 = extractelement <2 x i32> %10109, i32 0
  %10116 = getelementptr inbounds i8, i8* %10101, i64 8
  %10117 = bitcast i8* %10116 to i32*
  store i32 %10115, i32* %10117, align 1, !tbaa !2455
  %10118 = extractelement <2 x i32> %10109, i32 1
  %10119 = getelementptr inbounds i8, i8* %10101, i64 12
  %10120 = bitcast i8* %10119 to i32*
  store i32 %10118, i32* %10120, align 1, !tbaa !2455
  %10121 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10122 = load i64, i64* %RBP
  %10123 = sub i64 %10122, 304
  %10124 = load i64, i64* %PC
  %10125 = add i64 %10124, 8
  store i64 %10125, i64* %PC
  %10126 = inttoptr i64 %10123 to double*
  %10127 = load double, double* %10126
  %10128 = bitcast i8* %10121 to double*
  store double %10127, double* %10128, align 1, !tbaa !2452
  %10129 = getelementptr inbounds i8, i8* %10121, i64 8
  %10130 = bitcast i8* %10129 to double*
  store double 0.000000e+00, double* %10130, align 1, !tbaa !2452
  %10131 = load i64, i64* %RBP
  %10132 = sub i64 %10131, 308
  %10133 = load i32, i32* %EAX
  %10134 = zext i32 %10133 to i64
  %10135 = load i64, i64* %PC
  %10136 = add i64 %10135, 6
  store i64 %10136, i64* %PC
  %10137 = inttoptr i64 %10132 to i32*
  store i32 %10133, i32* %10137
  %10138 = load i64, i64* %PC
  %10139 = add i64 %10138, 2
  store i64 %10139, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %10140 = load i64, i64* %PC
  %10141 = sub i64 %10140, 7873
  %10142 = load i64, i64* %PC
  %10143 = add i64 %10142, 5
  %10144 = load i64, i64* %PC
  %10145 = add i64 %10144, 5
  store i64 %10145, i64* %PC
  %10146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10147 = load i64, i64* %10146, align 8, !tbaa !2428
  %10148 = add i64 %10147, -8
  %10149 = inttoptr i64 %10148 to i64*
  store i64 %10143, i64* %10149
  store i64 %10148, i64* %10146, align 8, !tbaa !2428
  %10150 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10141, i64* %10150, align 8, !tbaa !2428
  %10151 = load i64, i64* %PC
  %10152 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %10151, %struct.Memory* %9179)
  %10153 = load i64, i64* %PC
  %10154 = add i64 %10153, 10
  store i64 %10154, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 304), i64* %RDI, align 8, !tbaa !2428
  %10155 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10156 = load i64, i64* %PC
  %10157 = add i64 %10156, 8
  store i64 %10157, i64* %PC
  %10158 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 192) to double*)
  %10159 = bitcast i8* %10155 to double*
  store double %10158, double* %10159, align 1, !tbaa !2452
  %10160 = getelementptr inbounds i8, i8* %10155, i64 8
  %10161 = bitcast i8* %10160 to double*
  store double 0.000000e+00, double* %10161, align 1, !tbaa !2452
  %10162 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10163 = load i64, i64* %PC
  %10164 = add i64 %10163, 8
  store i64 %10164, i64* %PC
  %10165 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 200) to double*)
  %10166 = bitcast i8* %10162 to double*
  store double %10165, double* %10166, align 1, !tbaa !2452
  %10167 = getelementptr inbounds i8, i8* %10162, i64 8
  %10168 = bitcast i8* %10167 to double*
  store double 0.000000e+00, double* %10168, align 1, !tbaa !2452
  %10169 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10170 = load i64, i64* %PC
  %10171 = add i64 %10170, 8
  store i64 %10171, i64* %PC
  %10172 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 208) to double*)
  %10173 = bitcast i8* %10169 to double*
  store double %10172, double* %10173, align 1, !tbaa !2452
  %10174 = getelementptr inbounds i8, i8* %10169, i64 8
  %10175 = bitcast i8* %10174 to double*
  store double 0.000000e+00, double* %10175, align 1, !tbaa !2452
  %10176 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10177 = load i64, i64* %PC
  %10178 = add i64 %10177, 8
  store i64 %10178, i64* %PC
  %10179 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 216) to double*)
  %10180 = bitcast i8* %10176 to double*
  store double %10179, double* %10180, align 1, !tbaa !2452
  %10181 = getelementptr inbounds i8, i8* %10176, i64 8
  %10182 = bitcast i8* %10181 to double*
  store double 0.000000e+00, double* %10182, align 1, !tbaa !2452
  %10183 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10184 = load i64, i64* %PC
  %10185 = add i64 %10184, 9
  store i64 %10185, i64* %PC
  %10186 = load double, double* bitcast (%five_type* @five to double*)
  %10187 = bitcast i8* %10183 to double*
  store double %10186, double* %10187, align 1, !tbaa !2452
  %10188 = getelementptr inbounds i8, i8* %10183, i64 8
  %10189 = bitcast i8* %10188 to double*
  store double 0.000000e+00, double* %10189, align 1, !tbaa !2452
  %10190 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %10191 = load i64, i64* %PC
  %10192 = add i64 %10191, 9
  store i64 %10192, i64* %PC
  %10193 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 48) to double*)
  %10194 = bitcast i8* %10190 to double*
  store double %10193, double* %10194, align 1, !tbaa !2452
  %10195 = getelementptr inbounds i8, i8* %10190, i64 8
  %10196 = bitcast i8* %10195 to double*
  store double 0.000000e+00, double* %10196, align 1, !tbaa !2452
  %10197 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %10198 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %10199 = load i64, i64* %PC
  %10200 = add i64 %10199, 9
  store i64 %10200, i64* %PC
  %10201 = bitcast i8* %10198 to double*
  %10202 = load double, double* %10201, align 1
  %10203 = getelementptr inbounds i8, i8* %10198, i64 8
  %10204 = bitcast i8* %10203 to i64*
  %10205 = load i64, i64* %10204, align 1
  %10206 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  %10207 = fsub double %10202, %10206
  %10208 = bitcast i8* %10197 to double*
  store double %10207, double* %10208, align 1, !tbaa !2452
  %10209 = getelementptr inbounds i8, i8* %10197, i64 8
  %10210 = bitcast i8* %10209 to i64*
  store i64 %10205, i64* %10210, align 1, !tbaa !2452
  %10211 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10212 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10213 = bitcast %union.vec128_t* %XMM5 to i8*
  %10214 = load i64, i64* %PC
  %10215 = add i64 %10214, 4
  store i64 %10215, i64* %PC
  %10216 = bitcast i8* %10212 to double*
  %10217 = load double, double* %10216, align 1
  %10218 = getelementptr inbounds i8, i8* %10212, i64 8
  %10219 = bitcast i8* %10218 to i64*
  %10220 = load i64, i64* %10219, align 1
  %10221 = bitcast i8* %10213 to double*
  %10222 = load double, double* %10221, align 1
  %10223 = fmul double %10217, %10222
  %10224 = bitcast i8* %10211 to double*
  store double %10223, double* %10224, align 1, !tbaa !2452
  %10225 = getelementptr inbounds i8, i8* %10211, i64 8
  %10226 = bitcast i8* %10225 to i64*
  store i64 %10220, i64* %10226, align 1, !tbaa !2452
  %10227 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10228 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10229 = load i64, i64* %PC
  %10230 = add i64 %10229, 9
  store i64 %10230, i64* %PC
  %10231 = bitcast i8* %10228 to double*
  %10232 = load double, double* %10231, align 1
  %10233 = getelementptr inbounds i8, i8* %10228, i64 8
  %10234 = bitcast i8* %10233 to i64*
  %10235 = load i64, i64* %10234, align 1
  %10236 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %10237 = fadd double %10232, %10236
  %10238 = bitcast i8* %10227 to double*
  store double %10237, double* %10238, align 1, !tbaa !2452
  %10239 = getelementptr inbounds i8, i8* %10227, i64 8
  %10240 = bitcast i8* %10239 to i64*
  store i64 %10235, i64* %10240, align 1, !tbaa !2452
  %10241 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10242 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10243 = bitcast %union.vec128_t* %XMM3 to i8*
  %10244 = load i64, i64* %PC
  %10245 = add i64 %10244, 4
  store i64 %10245, i64* %PC
  %10246 = bitcast i8* %10242 to double*
  %10247 = load double, double* %10246, align 1
  %10248 = getelementptr inbounds i8, i8* %10242, i64 8
  %10249 = bitcast i8* %10248 to i64*
  %10250 = load i64, i64* %10249, align 1
  %10251 = bitcast i8* %10243 to double*
  %10252 = load double, double* %10251, align 1
  %10253 = fdiv double %10247, %10252
  %10254 = bitcast i8* %10241 to double*
  store double %10253, double* %10254, align 1, !tbaa !2452
  %10255 = getelementptr inbounds i8, i8* %10241, i64 8
  %10256 = bitcast i8* %10255 to i64*
  store i64 %10250, i64* %10256, align 1, !tbaa !2452
  %10257 = bitcast %union.vec128_t* %XMM4 to i8*
  %10258 = load i64, i64* %PC
  %10259 = add i64 %10258, 9
  store i64 %10259, i64* %PC
  %10260 = bitcast i8* %10257 to double*
  %10261 = load double, double* %10260, align 1
  store double %10261, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 216) to double*)
  %10262 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10263 = load i64, i64* %PC
  %10264 = add i64 %10263, 9
  store i64 %10264, i64* %PC
  %10265 = load double, double* bitcast (%one_type* @one to double*)
  %10266 = bitcast i8* %10262 to double*
  store double %10265, double* %10266, align 1, !tbaa !2452
  %10267 = getelementptr inbounds i8, i8* %10262, i64 8
  %10268 = bitcast i8* %10267 to double*
  store double 0.000000e+00, double* %10268, align 1, !tbaa !2452
  %10269 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10270 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10271 = load i64, i64* %PC
  %10272 = add i64 %10271, 9
  store i64 %10272, i64* %PC
  %10273 = bitcast i8* %10270 to double*
  %10274 = load double, double* %10273, align 1
  %10275 = getelementptr inbounds i8, i8* %10270, i64 8
  %10276 = bitcast i8* %10275 to i64*
  %10277 = load i64, i64* %10276, align 1
  %10278 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 216) to double*)
  %10279 = fdiv double %10274, %10278
  %10280 = bitcast i8* %10269 to double*
  store double %10279, double* %10280, align 1, !tbaa !2452
  %10281 = getelementptr inbounds i8, i8* %10269, i64 8
  %10282 = bitcast i8* %10281 to i64*
  store i64 %10277, i64* %10282, align 1, !tbaa !2452
  %10283 = bitcast %union.vec128_t* %XMM3 to i8*
  %10284 = load i64, i64* %PC
  %10285 = add i64 %10284, 9
  store i64 %10285, i64* %PC
  %10286 = bitcast i8* %10283 to double*
  %10287 = load double, double* %10286, align 1
  store double %10287, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 224) to double*)
  %10288 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10289 = load i64, i64* %PC
  %10290 = add i64 %10289, 9
  store i64 %10290, i64* %PC
  %10291 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 16) to double*)
  %10292 = bitcast i8* %10288 to double*
  store double %10291, double* %10292, align 1, !tbaa !2452
  %10293 = getelementptr inbounds i8, i8* %10288, i64 8
  %10294 = bitcast i8* %10293 to double*
  store double 0.000000e+00, double* %10294, align 1, !tbaa !2452
  %10295 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10296 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10297 = load i64, i64* %PC
  %10298 = add i64 %10297, 9
  store i64 %10298, i64* %PC
  %10299 = bitcast i8* %10296 to double*
  %10300 = load double, double* %10299, align 1
  %10301 = getelementptr inbounds i8, i8* %10296, i64 8
  %10302 = bitcast i8* %10301 to i64*
  %10303 = load i64, i64* %10302, align 1
  %10304 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %10305 = fadd double %10300, %10304
  %10306 = bitcast i8* %10295 to double*
  store double %10305, double* %10306, align 1, !tbaa !2452
  %10307 = getelementptr inbounds i8, i8* %10295, i64 8
  %10308 = bitcast i8* %10307 to i64*
  store i64 %10303, i64* %10308, align 1, !tbaa !2452
  %10309 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10310 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10311 = load i64, i64* %PC
  %10312 = add i64 %10311, 9
  store i64 %10312, i64* %PC
  %10313 = bitcast i8* %10310 to double*
  %10314 = load double, double* %10313, align 1
  %10315 = getelementptr inbounds i8, i8* %10310, i64 8
  %10316 = bitcast i8* %10315 to i64*
  %10317 = load i64, i64* %10316, align 1
  %10318 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %10319 = fadd double %10314, %10318
  %10320 = bitcast i8* %10309 to double*
  store double %10319, double* %10320, align 1, !tbaa !2452
  %10321 = getelementptr inbounds i8, i8* %10309, i64 8
  %10322 = bitcast i8* %10321 to i64*
  store i64 %10317, i64* %10322, align 1, !tbaa !2452
  %10323 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10324 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10325 = load i64, i64* %PC
  %10326 = add i64 %10325, 9
  store i64 %10326, i64* %PC
  %10327 = bitcast i8* %10324 to double*
  %10328 = load double, double* %10327, align 1
  %10329 = getelementptr inbounds i8, i8* %10324, i64 8
  %10330 = bitcast i8* %10329 to i64*
  %10331 = load i64, i64* %10330, align 1
  %10332 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 120) to double*)
  %10333 = fadd double %10328, %10332
  %10334 = bitcast i8* %10323 to double*
  store double %10333, double* %10334, align 1, !tbaa !2452
  %10335 = getelementptr inbounds i8, i8* %10323, i64 8
  %10336 = bitcast i8* %10335 to i64*
  store i64 %10331, i64* %10336, align 1, !tbaa !2452
  %10337 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10338 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10339 = load i64, i64* %PC
  %10340 = add i64 %10339, 9
  store i64 %10340, i64* %PC
  %10341 = bitcast i8* %10338 to double*
  %10342 = load double, double* %10341, align 1
  %10343 = getelementptr inbounds i8, i8* %10338, i64 8
  %10344 = bitcast i8* %10343 to i64*
  %10345 = load i64, i64* %10344, align 1
  %10346 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %10347 = fadd double %10342, %10346
  %10348 = bitcast i8* %10337 to double*
  store double %10347, double* %10348, align 1, !tbaa !2452
  %10349 = getelementptr inbounds i8, i8* %10337, i64 8
  %10350 = bitcast i8* %10349 to i64*
  store i64 %10345, i64* %10350, align 1, !tbaa !2452
  %10351 = bitcast %union.vec128_t* %XMM3 to i8*
  %10352 = load i64, i64* %PC
  %10353 = add i64 %10352, 9
  store i64 %10353, i64* %PC
  %10354 = bitcast i8* %10351 to double*
  %10355 = load double, double* %10354, align 1
  store double %10355, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 232) to double*)
  %10356 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10357 = load i64, i64* %PC
  %10358 = add i64 %10357, 9
  store i64 %10358, i64* %PC
  %10359 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 232) to double*)
  %10360 = bitcast i8* %10356 to double*
  store double %10359, double* %10360, align 1, !tbaa !2452
  %10361 = getelementptr inbounds i8, i8* %10356, i64 8
  %10362 = bitcast i8* %10361 to double*
  store double 0.000000e+00, double* %10362, align 1, !tbaa !2452
  %10363 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10364 = load i64, i64* %PC
  %10365 = add i64 %10364, 9
  store i64 %10365, i64* %PC
  %10366 = load double, double* bitcast (%four_type* @four to double*)
  %10367 = bitcast i8* %10363 to double*
  store double %10366, double* %10367, align 1, !tbaa !2452
  %10368 = getelementptr inbounds i8, i8* %10363, i64 8
  %10369 = bitcast i8* %10368 to double*
  store double 0.000000e+00, double* %10369, align 1, !tbaa !2452
  %10370 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10371 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %10372 = load i64, i64* %PC
  %10373 = add i64 %10372, 9
  store i64 %10373, i64* %PC
  %10374 = bitcast i8* %10371 to double*
  %10375 = load double, double* %10374, align 1
  %10376 = getelementptr inbounds i8, i8* %10371, i64 8
  %10377 = bitcast i8* %10376 to i64*
  %10378 = load i64, i64* %10377, align 1
  %10379 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 168) to double*)
  %10380 = fmul double %10375, %10379
  %10381 = bitcast i8* %10370 to double*
  store double %10380, double* %10381, align 1, !tbaa !2452
  %10382 = getelementptr inbounds i8, i8* %10370, i64 8
  %10383 = bitcast i8* %10382 to i64*
  store i64 %10378, i64* %10383, align 1, !tbaa !2452
  %10384 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10385 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10386 = bitcast %union.vec128_t* %XMM4 to i8*
  %10387 = load i64, i64* %PC
  %10388 = add i64 %10387, 4
  store i64 %10388, i64* %PC
  %10389 = bitcast i8* %10385 to double*
  %10390 = load double, double* %10389, align 1
  %10391 = getelementptr inbounds i8, i8* %10385, i64 8
  %10392 = bitcast i8* %10391 to i64*
  %10393 = load i64, i64* %10392, align 1
  %10394 = bitcast i8* %10386 to double*
  %10395 = load double, double* %10394, align 1
  %10396 = fadd double %10390, %10395
  %10397 = bitcast i8* %10384 to double*
  store double %10396, double* %10397, align 1, !tbaa !2452
  %10398 = getelementptr inbounds i8, i8* %10384, i64 8
  %10399 = bitcast i8* %10398 to i64*
  store i64 %10393, i64* %10399, align 1, !tbaa !2452
  %10400 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10401 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %10402 = bitcast %union.vec128_t* %XMM2 to i8*
  %10403 = load i64, i64* %PC
  %10404 = add i64 %10403, 4
  store i64 %10404, i64* %PC
  %10405 = bitcast i8* %10401 to double*
  %10406 = load double, double* %10405, align 1
  %10407 = getelementptr inbounds i8, i8* %10401, i64 8
  %10408 = bitcast i8* %10407 to i64*
  %10409 = load i64, i64* %10408, align 1
  %10410 = bitcast i8* %10402 to double*
  %10411 = load double, double* %10410, align 1
  %10412 = fdiv double %10406, %10411
  %10413 = bitcast i8* %10400 to double*
  store double %10412, double* %10413, align 1, !tbaa !2452
  %10414 = getelementptr inbounds i8, i8* %10400, i64 8
  %10415 = bitcast i8* %10414 to i64*
  store i64 %10409, i64* %10415, align 1, !tbaa !2452
  %10416 = bitcast %union.vec128_t* %XMM3 to i8*
  %10417 = load i64, i64* %PC
  %10418 = add i64 %10417, 9
  store i64 %10418, i64* %PC
  %10419 = bitcast i8* %10416 to double*
  %10420 = load double, double* %10419, align 1
  store double %10420, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 232) to double*)
  %10421 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10422 = load i64, i64* %PC
  %10423 = add i64 %10422, 9
  store i64 %10423, i64* %PC
  %10424 = load double, double* bitcast (%one_type* @one to double*)
  %10425 = bitcast i8* %10421 to double*
  store double %10424, double* %10425, align 1, !tbaa !2452
  %10426 = getelementptr inbounds i8, i8* %10421, i64 8
  %10427 = bitcast i8* %10426 to double*
  store double 0.000000e+00, double* %10427, align 1, !tbaa !2452
  %10428 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10429 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10430 = load i64, i64* %PC
  %10431 = add i64 %10430, 9
  store i64 %10431, i64* %PC
  %10432 = bitcast i8* %10429 to double*
  %10433 = load double, double* %10432, align 1
  %10434 = getelementptr inbounds i8, i8* %10429, i64 8
  %10435 = bitcast i8* %10434 to i64*
  %10436 = load i64, i64* %10435, align 1
  %10437 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 232) to double*)
  %10438 = fdiv double %10433, %10437
  %10439 = bitcast i8* %10428 to double*
  store double %10438, double* %10439, align 1, !tbaa !2452
  %10440 = getelementptr inbounds i8, i8* %10428, i64 8
  %10441 = bitcast i8* %10440 to i64*
  store i64 %10436, i64* %10441, align 1, !tbaa !2452
  %10442 = bitcast %union.vec128_t* %XMM2 to i8*
  %10443 = load i64, i64* %PC
  %10444 = add i64 %10443, 9
  store i64 %10444, i64* %PC
  %10445 = bitcast i8* %10442 to double*
  %10446 = load double, double* %10445, align 1
  store double %10446, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 240) to double*)
  %10447 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10448 = load i64, i64* %PC
  %10449 = add i64 %10448, 9
  store i64 %10449, i64* %PC
  %10450 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 16) to double*)
  %10451 = bitcast i8* %10447 to double*
  store double %10450, double* %10451, align 1, !tbaa !2452
  %10452 = getelementptr inbounds i8, i8* %10447, i64 8
  %10453 = bitcast i8* %10452 to double*
  store double 0.000000e+00, double* %10453, align 1, !tbaa !2452
  %10454 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10455 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10456 = load i64, i64* %PC
  %10457 = add i64 %10456, 9
  store i64 %10457, i64* %PC
  %10458 = bitcast i8* %10455 to double*
  %10459 = load double, double* %10458, align 1
  %10460 = getelementptr inbounds i8, i8* %10455, i64 8
  %10461 = bitcast i8* %10460 to i64*
  %10462 = load i64, i64* %10461, align 1
  %10463 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %10464 = fadd double %10459, %10463
  %10465 = bitcast i8* %10454 to double*
  store double %10464, double* %10465, align 1, !tbaa !2452
  %10466 = getelementptr inbounds i8, i8* %10454, i64 8
  %10467 = bitcast i8* %10466 to i64*
  store i64 %10462, i64* %10467, align 1, !tbaa !2452
  %10468 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10469 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10470 = load i64, i64* %PC
  %10471 = add i64 %10470, 9
  store i64 %10471, i64* %PC
  %10472 = bitcast i8* %10469 to double*
  %10473 = load double, double* %10472, align 1
  %10474 = getelementptr inbounds i8, i8* %10469, i64 8
  %10475 = bitcast i8* %10474 to i64*
  %10476 = load i64, i64* %10475, align 1
  %10477 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %10478 = fadd double %10473, %10477
  %10479 = bitcast i8* %10468 to double*
  store double %10478, double* %10479, align 1, !tbaa !2452
  %10480 = getelementptr inbounds i8, i8* %10468, i64 8
  %10481 = bitcast i8* %10480 to i64*
  store i64 %10476, i64* %10481, align 1, !tbaa !2452
  %10482 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10483 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10484 = load i64, i64* %PC
  %10485 = add i64 %10484, 9
  store i64 %10485, i64* %PC
  %10486 = bitcast i8* %10483 to double*
  %10487 = load double, double* %10486, align 1
  %10488 = getelementptr inbounds i8, i8* %10483, i64 8
  %10489 = bitcast i8* %10488 to i64*
  %10490 = load i64, i64* %10489, align 1
  %10491 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 120) to double*)
  %10492 = fadd double %10487, %10491
  %10493 = bitcast i8* %10482 to double*
  store double %10492, double* %10493, align 1, !tbaa !2452
  %10494 = getelementptr inbounds i8, i8* %10482, i64 8
  %10495 = bitcast i8* %10494 to i64*
  store i64 %10490, i64* %10495, align 1, !tbaa !2452
  %10496 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10497 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10498 = load i64, i64* %PC
  %10499 = add i64 %10498, 9
  store i64 %10499, i64* %PC
  %10500 = bitcast i8* %10497 to double*
  %10501 = load double, double* %10500, align 1
  %10502 = getelementptr inbounds i8, i8* %10497, i64 8
  %10503 = bitcast i8* %10502 to i64*
  %10504 = load i64, i64* %10503, align 1
  %10505 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %10506 = fadd double %10501, %10505
  %10507 = bitcast i8* %10496 to double*
  store double %10506, double* %10507, align 1, !tbaa !2452
  %10508 = getelementptr inbounds i8, i8* %10496, i64 8
  %10509 = bitcast i8* %10508 to i64*
  store i64 %10504, i64* %10509, align 1, !tbaa !2452
  %10510 = bitcast %union.vec128_t* %XMM2 to i8*
  %10511 = load i64, i64* %PC
  %10512 = add i64 %10511, 9
  store i64 %10512, i64* %PC
  %10513 = bitcast i8* %10510 to double*
  %10514 = load double, double* %10513, align 1
  store double %10514, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 248) to double*)
  %10515 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10516 = load i64, i64* %PC
  %10517 = add i64 %10516, 9
  store i64 %10517, i64* %PC
  %10518 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 248) to double*)
  %10519 = bitcast i8* %10515 to double*
  store double %10518, double* %10519, align 1, !tbaa !2452
  %10520 = getelementptr inbounds i8, i8* %10515, i64 8
  %10521 = bitcast i8* %10520 to double*
  store double 0.000000e+00, double* %10521, align 1, !tbaa !2452
  %10522 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10523 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10524 = load i64, i64* %PC
  %10525 = add i64 %10524, 9
  store i64 %10525, i64* %PC
  %10526 = bitcast i8* %10523 to double*
  %10527 = load double, double* %10526, align 1
  %10528 = getelementptr inbounds i8, i8* %10523, i64 8
  %10529 = bitcast i8* %10528 to i64*
  %10530 = load i64, i64* %10529, align 1
  %10531 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 168) to double*)
  %10532 = fadd double %10527, %10531
  %10533 = bitcast i8* %10522 to double*
  store double %10532, double* %10533, align 1, !tbaa !2452
  %10534 = getelementptr inbounds i8, i8* %10522, i64 8
  %10535 = bitcast i8* %10534 to i64*
  store i64 %10530, i64* %10535, align 1, !tbaa !2452
  %10536 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10537 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10538 = load i64, i64* %PC
  %10539 = add i64 %10538, 9
  store i64 %10539, i64* %PC
  %10540 = bitcast i8* %10537 to double*
  %10541 = load double, double* %10540, align 1
  %10542 = getelementptr inbounds i8, i8* %10537, i64 8
  %10543 = bitcast i8* %10542 to i64*
  %10544 = load i64, i64* %10543, align 1
  %10545 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 192) to double*)
  %10546 = fadd double %10541, %10545
  %10547 = bitcast i8* %10536 to double*
  store double %10546, double* %10547, align 1, !tbaa !2452
  %10548 = getelementptr inbounds i8, i8* %10536, i64 8
  %10549 = bitcast i8* %10548 to i64*
  store i64 %10544, i64* %10549, align 1, !tbaa !2452
  %10550 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10551 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %10552 = bitcast %union.vec128_t* %XMM1 to i8*
  %10553 = load i64, i64* %PC
  %10554 = add i64 %10553, 4
  store i64 %10554, i64* %PC
  %10555 = bitcast i8* %10551 to double*
  %10556 = load double, double* %10555, align 1
  %10557 = getelementptr inbounds i8, i8* %10551, i64 8
  %10558 = bitcast i8* %10557 to i64*
  %10559 = load i64, i64* %10558, align 1
  %10560 = bitcast i8* %10552 to double*
  %10561 = load double, double* %10560, align 1
  %10562 = fdiv double %10556, %10561
  %10563 = bitcast i8* %10550 to double*
  store double %10562, double* %10563, align 1, !tbaa !2452
  %10564 = getelementptr inbounds i8, i8* %10550, i64 8
  %10565 = bitcast i8* %10564 to i64*
  store i64 %10559, i64* %10565, align 1, !tbaa !2452
  %10566 = bitcast %union.vec128_t* %XMM2 to i8*
  %10567 = load i64, i64* %PC
  %10568 = add i64 %10567, 9
  store i64 %10568, i64* %PC
  %10569 = bitcast i8* %10566 to double*
  %10570 = load double, double* %10569, align 1
  store double %10570, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 248) to double*)
  %10571 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10572 = load i64, i64* %PC
  %10573 = add i64 %10572, 9
  store i64 %10573, i64* %PC
  %10574 = load double, double* bitcast (%one_type* @one to double*)
  %10575 = bitcast i8* %10571 to double*
  store double %10574, double* %10575, align 1, !tbaa !2452
  %10576 = getelementptr inbounds i8, i8* %10571, i64 8
  %10577 = bitcast i8* %10576 to double*
  store double 0.000000e+00, double* %10577, align 1, !tbaa !2452
  %10578 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10579 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10580 = load i64, i64* %PC
  %10581 = add i64 %10580, 9
  store i64 %10581, i64* %PC
  %10582 = bitcast i8* %10579 to double*
  %10583 = load double, double* %10582, align 1
  %10584 = getelementptr inbounds i8, i8* %10579, i64 8
  %10585 = bitcast i8* %10584 to i64*
  %10586 = load i64, i64* %10585, align 1
  %10587 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 248) to double*)
  %10588 = fdiv double %10583, %10587
  %10589 = bitcast i8* %10578 to double*
  store double %10588, double* %10589, align 1, !tbaa !2452
  %10590 = getelementptr inbounds i8, i8* %10578, i64 8
  %10591 = bitcast i8* %10590 to i64*
  store i64 %10586, i64* %10591, align 1, !tbaa !2452
  %10592 = bitcast %union.vec128_t* %XMM1 to i8*
  %10593 = load i64, i64* %PC
  %10594 = add i64 %10593, 9
  store i64 %10594, i64* %PC
  %10595 = bitcast i8* %10592 to double*
  %10596 = load double, double* %10595, align 1
  store double %10596, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 256) to double*)
  %10597 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10598 = load i64, i64* %PC
  %10599 = add i64 %10598, 9
  store i64 %10599, i64* %PC
  %10600 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 72) to double*)
  %10601 = bitcast i8* %10597 to double*
  store double %10600, double* %10601, align 1, !tbaa !2452
  %10602 = getelementptr inbounds i8, i8* %10597, i64 8
  %10603 = bitcast i8* %10602 to double*
  store double 0.000000e+00, double* %10603, align 1, !tbaa !2452
  %10604 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10605 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10606 = load i64, i64* %PC
  %10607 = add i64 %10606, 9
  store i64 %10607, i64* %PC
  %10608 = bitcast i8* %10605 to double*
  %10609 = load double, double* %10608, align 1
  %10610 = getelementptr inbounds i8, i8* %10605, i64 8
  %10611 = bitcast i8* %10610 to i64*
  %10612 = load i64, i64* %10611, align 1
  %10613 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 96) to double*)
  %10614 = fadd double %10609, %10613
  %10615 = bitcast i8* %10604 to double*
  store double %10614, double* %10615, align 1, !tbaa !2452
  %10616 = getelementptr inbounds i8, i8* %10604, i64 8
  %10617 = bitcast i8* %10616 to i64*
  store i64 %10612, i64* %10617, align 1, !tbaa !2452
  %10618 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10619 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10620 = load i64, i64* %PC
  %10621 = add i64 %10620, 9
  store i64 %10621, i64* %PC
  %10622 = bitcast i8* %10619 to double*
  %10623 = load double, double* %10622, align 1
  %10624 = getelementptr inbounds i8, i8* %10619, i64 8
  %10625 = bitcast i8* %10624 to i64*
  %10626 = load i64, i64* %10625, align 1
  %10627 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %10628 = fadd double %10623, %10627
  %10629 = bitcast i8* %10618 to double*
  store double %10628, double* %10629, align 1, !tbaa !2452
  %10630 = getelementptr inbounds i8, i8* %10618, i64 8
  %10631 = bitcast i8* %10630 to i64*
  store i64 %10626, i64* %10631, align 1, !tbaa !2452
  %10632 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10633 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10634 = load i64, i64* %PC
  %10635 = add i64 %10634, 9
  store i64 %10635, i64* %PC
  %10636 = bitcast i8* %10633 to double*
  %10637 = load double, double* %10636, align 1
  %10638 = getelementptr inbounds i8, i8* %10633, i64 8
  %10639 = bitcast i8* %10638 to i64*
  %10640 = load i64, i64* %10639, align 1
  %10641 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 192) to double*)
  %10642 = fadd double %10637, %10641
  %10643 = bitcast i8* %10632 to double*
  store double %10642, double* %10643, align 1, !tbaa !2452
  %10644 = getelementptr inbounds i8, i8* %10632, i64 8
  %10645 = bitcast i8* %10644 to i64*
  store i64 %10640, i64* %10645, align 1, !tbaa !2452
  %10646 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10647 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %10648 = bitcast %union.vec128_t* %XMM0 to i8*
  %10649 = load i64, i64* %PC
  %10650 = add i64 %10649, 4
  store i64 %10650, i64* %PC
  %10651 = bitcast i8* %10647 to double*
  %10652 = load double, double* %10651, align 1
  %10653 = getelementptr inbounds i8, i8* %10647, i64 8
  %10654 = bitcast i8* %10653 to i64*
  %10655 = load i64, i64* %10654, align 1
  %10656 = bitcast i8* %10648 to double*
  %10657 = load double, double* %10656, align 1
  %10658 = fdiv double %10652, %10657
  %10659 = bitcast i8* %10646 to double*
  store double %10658, double* %10659, align 1, !tbaa !2452
  %10660 = getelementptr inbounds i8, i8* %10646, i64 8
  %10661 = bitcast i8* %10660 to i64*
  store i64 %10655, i64* %10661, align 1, !tbaa !2452
  %10662 = bitcast %union.vec128_t* %XMM1 to i8*
  %10663 = load i64, i64* %PC
  %10664 = add i64 %10663, 9
  store i64 %10664, i64* %PC
  %10665 = bitcast i8* %10662 to double*
  %10666 = load double, double* %10665, align 1
  store double %10666, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 264) to double*)
  %10667 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10668 = load i64, i64* %PC
  %10669 = add i64 %10668, 9
  store i64 %10669, i64* %PC
  %10670 = load double, double* bitcast (%one_type* @one to double*)
  %10671 = bitcast i8* %10667 to double*
  store double %10670, double* %10671, align 1, !tbaa !2452
  %10672 = getelementptr inbounds i8, i8* %10667, i64 8
  %10673 = bitcast i8* %10672 to double*
  store double 0.000000e+00, double* %10673, align 1, !tbaa !2452
  %10674 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10675 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10676 = load i64, i64* %PC
  %10677 = add i64 %10676, 9
  store i64 %10677, i64* %PC
  %10678 = bitcast i8* %10675 to double*
  %10679 = load double, double* %10678, align 1
  %10680 = getelementptr inbounds i8, i8* %10675, i64 8
  %10681 = bitcast i8* %10680 to i64*
  %10682 = load i64, i64* %10681, align 1
  %10683 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 264) to double*)
  %10684 = fdiv double %10679, %10683
  %10685 = bitcast i8* %10674 to double*
  store double %10684, double* %10685, align 1, !tbaa !2452
  %10686 = getelementptr inbounds i8, i8* %10674, i64 8
  %10687 = bitcast i8* %10686 to i64*
  store i64 %10682, i64* %10687, align 1, !tbaa !2452
  %10688 = bitcast %union.vec128_t* %XMM0 to i8*
  %10689 = load i64, i64* %PC
  %10690 = add i64 %10689, 9
  store i64 %10690, i64* %PC
  %10691 = bitcast i8* %10688 to double*
  %10692 = load double, double* %10691, align 1
  store double %10692, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 272) to double*)
  %10693 = load i64, i64* %RBP
  %10694 = sub i64 %10693, 312
  %10695 = load i32, i32* %EAX
  %10696 = zext i32 %10695 to i64
  %10697 = load i64, i64* %PC
  %10698 = add i64 %10697, 6
  store i64 %10698, i64* %PC
  %10699 = inttoptr i64 %10694 to i32*
  store i32 %10695, i32* %10699
  %10700 = load i64, i64* %PC
  %10701 = add i64 %10700, 2
  store i64 %10701, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %10702 = load i64, i64* %PC
  %10703 = sub i64 %10702, 8330
  %10704 = load i64, i64* %PC
  %10705 = add i64 %10704, 5
  %10706 = load i64, i64* %PC
  %10707 = add i64 %10706, 5
  store i64 %10707, i64* %PC
  %10708 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10709 = load i64, i64* %10708, align 8, !tbaa !2428
  %10710 = add i64 %10709, -8
  %10711 = inttoptr i64 %10710 to i64*
  store i64 %10705, i64* %10711
  store i64 %10710, i64* %10708, align 8, !tbaa !2428
  %10712 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10703, i64* %10712, align 8, !tbaa !2428
  %10713 = load i64, i64* %PC
  %10714 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %10713, %struct.Memory* %10152)
  %10715 = load i64, i64* %PC
  %10716 = add i64 %10715, 10
  store i64 %10716, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 678), i64* %RDI, align 8, !tbaa !2428
  %10717 = load i64, i64* %RBP
  %10718 = sub i64 %10717, 80
  %10719 = load i64, i64* %PC
  %10720 = add i64 %10719, 4
  store i64 %10720, i64* %PC
  %10721 = inttoptr i64 %10718 to i64*
  %10722 = load i64, i64* %10721
  store i64 %10722, i64* %RSI, align 8, !tbaa !2428
  %10723 = load i64, i64* %RBP
  %10724 = sub i64 %10723, 316
  %10725 = load i32, i32* %EAX
  %10726 = zext i32 %10725 to i64
  %10727 = load i64, i64* %PC
  %10728 = add i64 %10727, 6
  store i64 %10728, i64* %PC
  %10729 = inttoptr i64 %10724 to i32*
  store i32 %10725, i32* %10729
  %10730 = load i64, i64* %PC
  %10731 = add i64 %10730, 2
  store i64 %10731, i64* %PC
  store i8 0, i8* %AL, align 1, !tbaa !2451
  %10732 = load i64, i64* %PC
  %10733 = sub i64 %10732, 8357
  %10734 = load i64, i64* %PC
  %10735 = add i64 %10734, 5
  %10736 = load i64, i64* %PC
  %10737 = add i64 %10736, 5
  store i64 %10737, i64* %PC
  %10738 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10739 = load i64, i64* %10738, align 8, !tbaa !2428
  %10740 = add i64 %10739, -8
  %10741 = inttoptr i64 %10740 to i64*
  store i64 %10735, i64* %10741
  store i64 %10740, i64* %10738, align 8, !tbaa !2428
  %10742 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10733, i64* %10742, align 8, !tbaa !2428
  %10743 = load i64, i64* %PC
  %10744 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %10743, %struct.Memory* %10714)
  %10745 = load i64, i64* %PC
  %10746 = add i64 %10745, 10
  store i64 %10746, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 706), i64* %RDI, align 8, !tbaa !2428
  %10747 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10748 = load i64, i64* %PC
  %10749 = add i64 %10748, 8
  store i64 %10749, i64* %PC
  %10750 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 72) to double*)
  %10751 = bitcast i8* %10747 to double*
  store double %10750, double* %10751, align 1, !tbaa !2452
  %10752 = getelementptr inbounds i8, i8* %10747, i64 8
  %10753 = bitcast i8* %10752 to double*
  store double 0.000000e+00, double* %10753, align 1, !tbaa !2452
  %10754 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10755 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10756 = load i64, i64* %PC
  %10757 = add i64 %10756, 9
  store i64 %10757, i64* %PC
  %10758 = bitcast i8* %10755 to double*
  %10759 = load double, double* %10758, align 1
  %10760 = getelementptr inbounds i8, i8* %10755, i64 8
  %10761 = bitcast i8* %10760 to i64*
  %10762 = load i64, i64* %10761, align 1
  %10763 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %10764 = fmul double %10759, %10763
  %10765 = bitcast i8* %10754 to double*
  store double %10764, double* %10765, align 1, !tbaa !2452
  %10766 = getelementptr inbounds i8, i8* %10754, i64 8
  %10767 = bitcast i8* %10766 to i64*
  store i64 %10762, i64* %10767, align 1, !tbaa !2452
  %10768 = load i64, i64* %RBP
  %10769 = sub i64 %10768, 320
  %10770 = load i32, i32* %EAX
  %10771 = zext i32 %10770 to i64
  %10772 = load i64, i64* %PC
  %10773 = add i64 %10772, 6
  store i64 %10773, i64* %PC
  %10774 = inttoptr i64 %10769 to i32*
  store i32 %10770, i32* %10774
  %10775 = load i64, i64* %PC
  %10776 = add i64 %10775, 2
  store i64 %10776, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %10777 = load i64, i64* %PC
  %10778 = sub i64 %10777, 8397
  %10779 = load i64, i64* %PC
  %10780 = add i64 %10779, 5
  %10781 = load i64, i64* %PC
  %10782 = add i64 %10781, 5
  store i64 %10782, i64* %PC
  %10783 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10784 = load i64, i64* %10783, align 8, !tbaa !2428
  %10785 = add i64 %10784, -8
  %10786 = inttoptr i64 %10785 to i64*
  store i64 %10780, i64* %10786
  store i64 %10785, i64* %10783, align 8, !tbaa !2428
  %10787 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10778, i64* %10787, align 8, !tbaa !2428
  %10788 = load i64, i64* %PC
  %10789 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %10788, %struct.Memory* %10744)
  %10790 = load i64, i64* %PC
  %10791 = add i64 %10790, 10
  store i64 %10791, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 736), i64* %RDI, align 8, !tbaa !2428
  %10792 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10793 = load i64, i64* %PC
  %10794 = add i64 %10793, 8
  store i64 %10794, i64* %PC
  %10795 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 72) to double*)
  %10796 = bitcast i8* %10792 to double*
  store double %10795, double* %10796, align 1, !tbaa !2452
  %10797 = getelementptr inbounds i8, i8* %10792, i64 8
  %10798 = bitcast i8* %10797 to double*
  store double 0.000000e+00, double* %10798, align 1, !tbaa !2452
  %10799 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10800 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10801 = load i64, i64* %PC
  %10802 = add i64 %10801, 9
  store i64 %10802, i64* %PC
  %10803 = bitcast i8* %10800 to double*
  %10804 = load double, double* %10803, align 1
  %10805 = getelementptr inbounds i8, i8* %10800, i64 8
  %10806 = bitcast i8* %10805 to i64*
  %10807 = load i64, i64* %10806, align 1
  %10808 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 224) to double*)
  %10809 = fmul double %10804, %10808
  %10810 = bitcast i8* %10799 to double*
  store double %10809, double* %10810, align 1, !tbaa !2452
  %10811 = getelementptr inbounds i8, i8* %10799, i64 8
  %10812 = bitcast i8* %10811 to i64*
  store i64 %10807, i64* %10812, align 1, !tbaa !2452
  %10813 = load i64, i64* %RBP
  %10814 = sub i64 %10813, 324
  %10815 = load i32, i32* %EAX
  %10816 = zext i32 %10815 to i64
  %10817 = load i64, i64* %PC
  %10818 = add i64 %10817, 6
  store i64 %10818, i64* %PC
  %10819 = inttoptr i64 %10814 to i32*
  store i32 %10815, i32* %10819
  %10820 = load i64, i64* %PC
  %10821 = add i64 %10820, 2
  store i64 %10821, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %10822 = load i64, i64* %PC
  %10823 = sub i64 %10822, 8437
  %10824 = load i64, i64* %PC
  %10825 = add i64 %10824, 5
  %10826 = load i64, i64* %PC
  %10827 = add i64 %10826, 5
  store i64 %10827, i64* %PC
  %10828 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10829 = load i64, i64* %10828, align 8, !tbaa !2428
  %10830 = add i64 %10829, -8
  %10831 = inttoptr i64 %10830 to i64*
  store i64 %10825, i64* %10831
  store i64 %10830, i64* %10828, align 8, !tbaa !2428
  %10832 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10823, i64* %10832, align 8, !tbaa !2428
  %10833 = load i64, i64* %PC
  %10834 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %10833, %struct.Memory* %10789)
  %10835 = load i64, i64* %PC
  %10836 = add i64 %10835, 10
  store i64 %10836, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 766), i64* %RDI, align 8, !tbaa !2428
  %10837 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10838 = load i64, i64* %PC
  %10839 = add i64 %10838, 8
  store i64 %10839, i64* %PC
  %10840 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 72) to double*)
  %10841 = bitcast i8* %10837 to double*
  store double %10840, double* %10841, align 1, !tbaa !2452
  %10842 = getelementptr inbounds i8, i8* %10837, i64 8
  %10843 = bitcast i8* %10842 to double*
  store double 0.000000e+00, double* %10843, align 1, !tbaa !2452
  %10844 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10845 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10846 = load i64, i64* %PC
  %10847 = add i64 %10846, 9
  store i64 %10847, i64* %PC
  %10848 = bitcast i8* %10845 to double*
  %10849 = load double, double* %10848, align 1
  %10850 = getelementptr inbounds i8, i8* %10845, i64 8
  %10851 = bitcast i8* %10850 to i64*
  %10852 = load i64, i64* %10851, align 1
  %10853 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 240) to double*)
  %10854 = fmul double %10849, %10853
  %10855 = bitcast i8* %10844 to double*
  store double %10854, double* %10855, align 1, !tbaa !2452
  %10856 = getelementptr inbounds i8, i8* %10844, i64 8
  %10857 = bitcast i8* %10856 to i64*
  store i64 %10852, i64* %10857, align 1, !tbaa !2452
  %10858 = load i64, i64* %RBP
  %10859 = sub i64 %10858, 328
  %10860 = load i32, i32* %EAX
  %10861 = zext i32 %10860 to i64
  %10862 = load i64, i64* %PC
  %10863 = add i64 %10862, 6
  store i64 %10863, i64* %PC
  %10864 = inttoptr i64 %10859 to i32*
  store i32 %10860, i32* %10864
  %10865 = load i64, i64* %PC
  %10866 = add i64 %10865, 2
  store i64 %10866, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %10867 = load i64, i64* %PC
  %10868 = sub i64 %10867, 8477
  %10869 = load i64, i64* %PC
  %10870 = add i64 %10869, 5
  %10871 = load i64, i64* %PC
  %10872 = add i64 %10871, 5
  store i64 %10872, i64* %PC
  %10873 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10874 = load i64, i64* %10873, align 8, !tbaa !2428
  %10875 = add i64 %10874, -8
  %10876 = inttoptr i64 %10875 to i64*
  store i64 %10870, i64* %10876
  store i64 %10875, i64* %10873, align 8, !tbaa !2428
  %10877 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10868, i64* %10877, align 8, !tbaa !2428
  %10878 = load i64, i64* %PC
  %10879 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %10878, %struct.Memory* %10834)
  %10880 = load i64, i64* %PC
  %10881 = add i64 %10880, 10
  store i64 %10881, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 796), i64* %RDI, align 8, !tbaa !2428
  %10882 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10883 = load i64, i64* %PC
  %10884 = add i64 %10883, 8
  store i64 %10884, i64* %PC
  %10885 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 72) to double*)
  %10886 = bitcast i8* %10882 to double*
  store double %10885, double* %10886, align 1, !tbaa !2452
  %10887 = getelementptr inbounds i8, i8* %10882, i64 8
  %10888 = bitcast i8* %10887 to double*
  store double 0.000000e+00, double* %10888, align 1, !tbaa !2452
  %10889 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10890 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10891 = load i64, i64* %PC
  %10892 = add i64 %10891, 9
  store i64 %10892, i64* %PC
  %10893 = bitcast i8* %10890 to double*
  %10894 = load double, double* %10893, align 1
  %10895 = getelementptr inbounds i8, i8* %10890, i64 8
  %10896 = bitcast i8* %10895 to i64*
  %10897 = load i64, i64* %10896, align 1
  %10898 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 256) to double*)
  %10899 = fmul double %10894, %10898
  %10900 = bitcast i8* %10889 to double*
  store double %10899, double* %10900, align 1, !tbaa !2452
  %10901 = getelementptr inbounds i8, i8* %10889, i64 8
  %10902 = bitcast i8* %10901 to i64*
  store i64 %10897, i64* %10902, align 1, !tbaa !2452
  %10903 = load i64, i64* %RBP
  %10904 = sub i64 %10903, 332
  %10905 = load i32, i32* %EAX
  %10906 = zext i32 %10905 to i64
  %10907 = load i64, i64* %PC
  %10908 = add i64 %10907, 6
  store i64 %10908, i64* %PC
  %10909 = inttoptr i64 %10904 to i32*
  store i32 %10905, i32* %10909
  %10910 = load i64, i64* %PC
  %10911 = add i64 %10910, 2
  store i64 %10911, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %10912 = load i64, i64* %PC
  %10913 = sub i64 %10912, 8517
  %10914 = load i64, i64* %PC
  %10915 = add i64 %10914, 5
  %10916 = load i64, i64* %PC
  %10917 = add i64 %10916, 5
  store i64 %10917, i64* %PC
  %10918 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10919 = load i64, i64* %10918, align 8, !tbaa !2428
  %10920 = add i64 %10919, -8
  %10921 = inttoptr i64 %10920 to i64*
  store i64 %10915, i64* %10921
  store i64 %10920, i64* %10918, align 8, !tbaa !2428
  %10922 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10913, i64* %10922, align 8, !tbaa !2428
  %10923 = load i64, i64* %PC
  %10924 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %10923, %struct.Memory* %10879)
  %10925 = load i64, i64* %PC
  %10926 = add i64 %10925, 10
  store i64 %10926, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 826), i64* %RDI, align 8, !tbaa !2428
  %10927 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10928 = load i64, i64* %PC
  %10929 = add i64 %10928, 8
  store i64 %10929, i64* %PC
  %10930 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 72) to double*)
  %10931 = bitcast i8* %10927 to double*
  store double %10930, double* %10931, align 1, !tbaa !2452
  %10932 = getelementptr inbounds i8, i8* %10927, i64 8
  %10933 = bitcast i8* %10932 to double*
  store double 0.000000e+00, double* %10933, align 1, !tbaa !2452
  %10934 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10935 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %10936 = load i64, i64* %PC
  %10937 = add i64 %10936, 9
  store i64 %10937, i64* %PC
  %10938 = bitcast i8* %10935 to double*
  %10939 = load double, double* %10938, align 1
  %10940 = getelementptr inbounds i8, i8* %10935, i64 8
  %10941 = bitcast i8* %10940 to i64*
  %10942 = load i64, i64* %10941, align 1
  %10943 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 272) to double*)
  %10944 = fmul double %10939, %10943
  %10945 = bitcast i8* %10934 to double*
  store double %10944, double* %10945, align 1, !tbaa !2452
  %10946 = getelementptr inbounds i8, i8* %10934, i64 8
  %10947 = bitcast i8* %10946 to i64*
  store i64 %10942, i64* %10947, align 1, !tbaa !2452
  %10948 = load i64, i64* %RBP
  %10949 = sub i64 %10948, 336
  %10950 = load i32, i32* %EAX
  %10951 = zext i32 %10950 to i64
  %10952 = load i64, i64* %PC
  %10953 = add i64 %10952, 6
  store i64 %10953, i64* %PC
  %10954 = inttoptr i64 %10949 to i32*
  store i32 %10950, i32* %10954
  %10955 = load i64, i64* %PC
  %10956 = add i64 %10955, 2
  store i64 %10956, i64* %PC
  store i8 1, i8* %AL, align 1, !tbaa !2451
  %10957 = load i64, i64* %PC
  %10958 = sub i64 %10957, 8557
  %10959 = load i64, i64* %PC
  %10960 = add i64 %10959, 5
  %10961 = load i64, i64* %PC
  %10962 = add i64 %10961, 5
  store i64 %10962, i64* %PC
  %10963 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10964 = load i64, i64* %10963, align 8, !tbaa !2428
  %10965 = add i64 %10964, -8
  %10966 = inttoptr i64 %10965 to i64*
  store i64 %10960, i64* %10966
  store i64 %10965, i64* %10963, align 8, !tbaa !2428
  %10967 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %10958, i64* %10967, align 8, !tbaa !2428
  %10968 = load i64, i64* %PC
  %10969 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %10968, %struct.Memory* %10924)
  %10970 = load i64, i64* %RCX
  %10971 = load i32, i32* %ECX
  %10972 = zext i32 %10971 to i64
  %10973 = load i64, i64* %PC
  %10974 = add i64 %10973, 2
  store i64 %10974, i64* %PC
  %10975 = xor i64 %10972, %10970
  %10976 = trunc i64 %10975 to i32
  %10977 = and i64 %10975, 4294967295
  store i64 %10977, i64* %RCX, align 8, !tbaa !2428
  %10978 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %10978, align 1, !tbaa !2432
  %10979 = and i32 %10976, 255
  %10980 = call i32 @llvm.ctpop.i32(i32 %10979) #16
  %10981 = trunc i32 %10980 to i8
  %10982 = and i8 %10981, 1
  %10983 = xor i8 %10982, 1
  %10984 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %10983, i8* %10984, align 1, !tbaa !2446
  %10985 = icmp eq i32 %10976, 0
  %10986 = zext i1 %10985 to i8
  %10987 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %10986, i8* %10987, align 1, !tbaa !2447
  %10988 = lshr i32 %10976, 31
  %10989 = trunc i32 %10988 to i8
  %10990 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %10989, i8* %10990, align 1, !tbaa !2448
  %10991 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %10991, align 1, !tbaa !2449
  %10992 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %10992, align 1, !tbaa !2450
  %10993 = load i64, i64* %RBP
  %10994 = sub i64 %10993, 340
  %10995 = load i32, i32* %EAX
  %10996 = zext i32 %10995 to i64
  %10997 = load i64, i64* %PC
  %10998 = add i64 %10997, 6
  store i64 %10998, i64* %PC
  %10999 = inttoptr i64 %10994 to i32*
  store i32 %10995, i32* %10999
  %11000 = load i32, i32* %ECX
  %11001 = zext i32 %11000 to i64
  %11002 = load i64, i64* %PC
  %11003 = add i64 %11002, 2
  store i64 %11003, i64* %PC
  %11004 = and i64 %11001, 4294967295
  store i64 %11004, i64* %RAX, align 8, !tbaa !2428
  %11005 = load i64, i64* %RSP
  %11006 = load i64, i64* %PC
  %11007 = add i64 %11006, 7
  store i64 %11007, i64* %PC
  %11008 = add i64 352, %11005
  store i64 %11008, i64* %RSP, align 8, !tbaa !2428
  %11009 = icmp ult i64 %11008, %11005
  %11010 = icmp ult i64 %11008, 352
  %11011 = or i1 %11009, %11010
  %11012 = zext i1 %11011 to i8
  %11013 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11012, i8* %11013, align 1, !tbaa !2432
  %11014 = trunc i64 %11008 to i32
  %11015 = and i32 %11014, 255
  %11016 = call i32 @llvm.ctpop.i32(i32 %11015) #16
  %11017 = trunc i32 %11016 to i8
  %11018 = and i8 %11017, 1
  %11019 = xor i8 %11018, 1
  %11020 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11019, i8* %11020, align 1, !tbaa !2446
  %11021 = xor i64 352, %11005
  %11022 = xor i64 %11021, %11008
  %11023 = lshr i64 %11022, 4
  %11024 = trunc i64 %11023 to i8
  %11025 = and i8 %11024, 1
  %11026 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11025, i8* %11026, align 1, !tbaa !2450
  %11027 = icmp eq i64 %11008, 0
  %11028 = zext i1 %11027 to i8
  %11029 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11028, i8* %11029, align 1, !tbaa !2447
  %11030 = lshr i64 %11008, 63
  %11031 = trunc i64 %11030 to i8
  %11032 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11031, i8* %11032, align 1, !tbaa !2448
  %11033 = lshr i64 %11005, 63
  %11034 = xor i64 %11030, %11033
  %11035 = add nuw nsw i64 %11034, %11030
  %11036 = icmp eq i64 %11035, 2
  %11037 = zext i1 %11036 to i8
  %11038 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11037, i8* %11038, align 1, !tbaa !2449
  %11039 = load i64, i64* %PC
  %11040 = add i64 %11039, 1
  store i64 %11040, i64* %PC
  %11041 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11042 = load i64, i64* %11041, align 8, !tbaa !2428
  %11043 = add i64 %11042, 8
  %11044 = inttoptr i64 %11042 to i64*
  %11045 = load i64, i64* %11044
  store i64 %11045, i64* %RBP, align 8, !tbaa !2428
  store i64 %11043, i64* %11041, align 8, !tbaa !2428
  %11046 = load i64, i64* %PC
  %11047 = add i64 %11046, 1
  store i64 %11047, i64* %PC
  %11048 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11049 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11050 = load i64, i64* %11049, align 8, !tbaa !2428
  %11051 = inttoptr i64 %11050 to i64*
  %11052 = load i64, i64* %11051
  store i64 %11052, i64* %11048, align 8, !tbaa !2428
  %11053 = add i64 %11050, 8
  store i64 %11053, i64* %11049, align 8, !tbaa !2428
  ret %struct.Memory* %10969

block_400aec:                                     ; preds = %block_400ade
  store i64 -9223372036854775808, i64* %RAX, align 8, !tbaa !2428
  %11054 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11055 = load i64, i64* %RBP
  %11056 = sub i64 %11055, 16
  %11057 = load i64, i64* %PC
  %11058 = add i64 %11057, 5
  store i64 %11058, i64* %PC
  %11059 = inttoptr i64 %11056 to double*
  %11060 = load double, double* %11059
  %11061 = bitcast i8* %11054 to double*
  store double %11060, double* %11061, align 1, !tbaa !2452
  %11062 = getelementptr inbounds i8, i8* %11054, i64 8
  %11063 = bitcast i8* %11062 to double*
  store double 0.000000e+00, double* %11063, align 1, !tbaa !2452
  %11064 = bitcast %union.vec128_t* %XMM0 to i8*
  %11065 = load i64, i64* %PC
  %11066 = add i64 %11065, 5
  store i64 %11066, i64* %PC
  %11067 = bitcast i8* %11064 to i64*
  %11068 = load i64, i64* %11067, align 1
  store i64 %11068, i64* %RCX, align 1, !tbaa !2428
  %11069 = load i64, i64* %RCX
  %11070 = load i64, i64* %RAX
  %11071 = load i64, i64* %PC
  %11072 = add i64 %11071, 3
  store i64 %11072, i64* %PC
  %11073 = xor i64 %11070, %11069
  store i64 %11073, i64* %RCX, align 8, !tbaa !2428
  %11074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %11074, align 1, !tbaa !2432
  %11075 = trunc i64 %11073 to i32
  %11076 = and i32 %11075, 255
  %11077 = call i32 @llvm.ctpop.i32(i32 %11076) #16
  %11078 = trunc i32 %11077 to i8
  %11079 = and i8 %11078, 1
  %11080 = xor i8 %11079, 1
  %11081 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11080, i8* %11081, align 1, !tbaa !2446
  %11082 = icmp eq i64 %11073, 0
  %11083 = zext i1 %11082 to i8
  %11084 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11083, i8* %11084, align 1, !tbaa !2447
  %11085 = lshr i64 %11073, 63
  %11086 = trunc i64 %11085 to i8
  %11087 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11086, i8* %11087, align 1, !tbaa !2448
  %11088 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %11088, align 1, !tbaa !2449
  %11089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %11089, align 1, !tbaa !2450
  %11090 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11091 = load i64, i64* %RCX
  %11092 = load i64, i64* %PC
  %11093 = add i64 %11092, 5
  store i64 %11093, i64* %PC
  %11094 = bitcast i8* %11090 to i64*
  store i64 %11091, i64* %11094, align 1, !tbaa !2428
  %11095 = getelementptr inbounds i8, i8* %11090, i64 8
  %11096 = bitcast i8* %11095 to i64*
  store i64 0, i64* %11096, align 1, !tbaa !2428
  %11097 = load i64, i64* %RBP
  %11098 = sub i64 %11097, 16
  %11099 = bitcast %union.vec128_t* %XMM0 to i8*
  %11100 = load i64, i64* %PC
  %11101 = add i64 %11100, 5
  store i64 %11101, i64* %PC
  %11102 = bitcast i8* %11099 to double*
  %11103 = load double, double* %11102, align 1
  %11104 = inttoptr i64 %11098 to double*
  store double %11103, double* %11104
  %11105 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11106 = load i64, i64* %PC
  %11107 = add i64 %11106, 9
  store i64 %11107, i64* %PC
  %11108 = load double, double* bitcast (%sa_type* @sa to double*)
  %11109 = bitcast i8* %11105 to double*
  store double %11108, double* %11109, align 1, !tbaa !2452
  %11110 = getelementptr inbounds i8, i8* %11105, i64 8
  %11111 = bitcast i8* %11110 to double*
  store double 0.000000e+00, double* %11111, align 1, !tbaa !2452
  %11112 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11113 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11114 = load i64, i64* %RBP
  %11115 = sub i64 %11114, 16
  %11116 = load i64, i64* %PC
  %11117 = add i64 %11116, 5
  store i64 %11117, i64* %PC
  %11118 = bitcast i8* %11113 to double*
  %11119 = load double, double* %11118, align 1
  %11120 = getelementptr inbounds i8, i8* %11113, i64 8
  %11121 = bitcast i8* %11120 to i64*
  %11122 = load i64, i64* %11121, align 1
  %11123 = inttoptr i64 %11115 to double*
  %11124 = load double, double* %11123
  %11125 = fadd double %11119, %11124
  %11126 = bitcast i8* %11112 to double*
  store double %11125, double* %11126, align 1, !tbaa !2452
  %11127 = getelementptr inbounds i8, i8* %11112, i64 8
  %11128 = bitcast i8* %11127 to i64*
  store i64 %11122, i64* %11128, align 1, !tbaa !2452
  %11129 = bitcast %union.vec128_t* %XMM0 to i8*
  %11130 = load i64, i64* %PC
  %11131 = add i64 %11130, 9
  store i64 %11131, i64* %PC
  %11132 = bitcast i8* %11129 to double*
  %11133 = load double, double* %11132, align 1
  store double %11133, double* bitcast (%sa_type* @sa to double*)
  %11134 = load i64, i64* %RBP
  %11135 = sub i64 %11134, 72
  %11136 = load i64, i64* %PC
  %11137 = add i64 %11136, 4
  store i64 %11137, i64* %PC
  %11138 = inttoptr i64 %11135 to i64*
  %11139 = load i64, i64* %11138
  store i64 %11139, i64* %RAX, align 8, !tbaa !2428
  %11140 = load i64, i64* %RAX
  %11141 = load i64, i64* %PC
  %11142 = add i64 %11141, 4
  store i64 %11142, i64* %PC
  %11143 = add i64 1, %11140
  store i64 %11143, i64* %RAX, align 8, !tbaa !2428
  %11144 = icmp ult i64 %11143, %11140
  %11145 = icmp ult i64 %11143, 1
  %11146 = or i1 %11144, %11145
  %11147 = zext i1 %11146 to i8
  %11148 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11147, i8* %11148, align 1, !tbaa !2432
  %11149 = trunc i64 %11143 to i32
  %11150 = and i32 %11149, 255
  %11151 = call i32 @llvm.ctpop.i32(i32 %11150) #16
  %11152 = trunc i32 %11151 to i8
  %11153 = and i8 %11152, 1
  %11154 = xor i8 %11153, 1
  %11155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11154, i8* %11155, align 1, !tbaa !2446
  %11156 = xor i64 1, %11140
  %11157 = xor i64 %11156, %11143
  %11158 = lshr i64 %11157, 4
  %11159 = trunc i64 %11158 to i8
  %11160 = and i8 %11159, 1
  %11161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11160, i8* %11161, align 1, !tbaa !2450
  %11162 = icmp eq i64 %11143, 0
  %11163 = zext i1 %11162 to i8
  %11164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11163, i8* %11164, align 1, !tbaa !2447
  %11165 = lshr i64 %11143, 63
  %11166 = trunc i64 %11165 to i8
  %11167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11166, i8* %11167, align 1, !tbaa !2448
  %11168 = lshr i64 %11140, 63
  %11169 = xor i64 %11165, %11168
  %11170 = add nuw nsw i64 %11169, %11165
  %11171 = icmp eq i64 %11170, 2
  %11172 = zext i1 %11171 to i8
  %11173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11172, i8* %11173, align 1, !tbaa !2449
  %11174 = load i64, i64* %RBP
  %11175 = sub i64 %11174, 72
  %11176 = load i64, i64* %RAX
  %11177 = load i64, i64* %PC
  %11178 = add i64 %11177, 4
  store i64 %11178, i64* %PC
  %11179 = inttoptr i64 %11175 to i64*
  store i64 %11176, i64* %11179
  %11180 = load i64, i64* %PC
  %11181 = sub i64 %11180, 82
  %11182 = load i64, i64* %PC
  %11183 = add i64 %11182, 5
  store i64 %11183, i64* %PC
  %11184 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11181, i64* %11184, align 8, !tbaa !2428
  br label %block_400ade

block_401cba:                                     ; preds = %block_401a06, %block_401ccf
  %MEMORY.7 = phi %struct.Memory* [ %13030, %block_401a06 ], [ %MEMORY.7, %block_401ccf ]
  %11185 = load i64, i64* %RBP
  %11186 = sub i64 %11185, 72
  %11187 = load i64, i64* %PC
  %11188 = add i64 %11187, 4
  store i64 %11188, i64* %PC
  %11189 = inttoptr i64 %11186 to i64*
  %11190 = load i64, i64* %11189
  store i64 %11190, i64* %RAX, align 8, !tbaa !2428
  %11191 = load i64, i64* %RBP
  %11192 = sub i64 %11191, 80
  %11193 = load i64, i64* %PC
  %11194 = add i64 %11193, 4
  store i64 %11194, i64* %PC
  %11195 = inttoptr i64 %11192 to i64*
  %11196 = load i64, i64* %11195
  store i64 %11196, i64* %RCX, align 8, !tbaa !2428
  %11197 = load i64, i64* %RCX
  %11198 = load i64, i64* %PC
  %11199 = add i64 %11198, 4
  store i64 %11199, i64* %PC
  %11200 = sub i64 %11197, 1
  store i64 %11200, i64* %RCX, align 8, !tbaa !2428
  %11201 = icmp ult i64 %11197, 1
  %11202 = zext i1 %11201 to i8
  %11203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11202, i8* %11203, align 1, !tbaa !2432
  %11204 = trunc i64 %11200 to i32
  %11205 = and i32 %11204, 255
  %11206 = call i32 @llvm.ctpop.i32(i32 %11205) #16
  %11207 = trunc i32 %11206 to i8
  %11208 = and i8 %11207, 1
  %11209 = xor i8 %11208, 1
  %11210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11209, i8* %11210, align 1, !tbaa !2446
  %11211 = xor i64 1, %11197
  %11212 = xor i64 %11211, %11200
  %11213 = lshr i64 %11212, 4
  %11214 = trunc i64 %11213 to i8
  %11215 = and i8 %11214, 1
  %11216 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11215, i8* %11216, align 1, !tbaa !2450
  %11217 = icmp eq i64 %11200, 0
  %11218 = zext i1 %11217 to i8
  %11219 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11218, i8* %11219, align 1, !tbaa !2447
  %11220 = lshr i64 %11200, 63
  %11221 = trunc i64 %11220 to i8
  %11222 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11221, i8* %11222, align 1, !tbaa !2448
  %11223 = lshr i64 %11197, 63
  %11224 = xor i64 %11220, %11223
  %11225 = add nuw nsw i64 %11224, %11223
  %11226 = icmp eq i64 %11225, 2
  %11227 = zext i1 %11226 to i8
  %11228 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11227, i8* %11228, align 1, !tbaa !2449
  %11229 = load i64, i64* %RAX
  %11230 = load i64, i64* %RCX
  %11231 = load i64, i64* %PC
  %11232 = add i64 %11231, 3
  store i64 %11232, i64* %PC
  %11233 = sub i64 %11229, %11230
  %11234 = icmp ult i64 %11229, %11230
  %11235 = zext i1 %11234 to i8
  %11236 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11235, i8* %11236, align 1, !tbaa !2432
  %11237 = trunc i64 %11233 to i32
  %11238 = and i32 %11237, 255
  %11239 = call i32 @llvm.ctpop.i32(i32 %11238) #16
  %11240 = trunc i32 %11239 to i8
  %11241 = and i8 %11240, 1
  %11242 = xor i8 %11241, 1
  %11243 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11242, i8* %11243, align 1, !tbaa !2446
  %11244 = xor i64 %11230, %11229
  %11245 = xor i64 %11244, %11233
  %11246 = lshr i64 %11245, 4
  %11247 = trunc i64 %11246 to i8
  %11248 = and i8 %11247, 1
  %11249 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11248, i8* %11249, align 1, !tbaa !2450
  %11250 = icmp eq i64 %11233, 0
  %11251 = zext i1 %11250 to i8
  %11252 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11251, i8* %11252, align 1, !tbaa !2447
  %11253 = lshr i64 %11233, 63
  %11254 = trunc i64 %11253 to i8
  %11255 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11254, i8* %11255, align 1, !tbaa !2448
  %11256 = lshr i64 %11229, 63
  %11257 = lshr i64 %11230, 63
  %11258 = xor i64 %11257, %11256
  %11259 = xor i64 %11253, %11256
  %11260 = add nuw nsw i64 %11259, %11258
  %11261 = icmp eq i64 %11260, 2
  %11262 = zext i1 %11261 to i8
  %11263 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11262, i8* %11263, align 1, !tbaa !2449
  %11264 = load i64, i64* %PC
  %11265 = add i64 %11264, 138
  %11266 = load i64, i64* %PC
  %11267 = add i64 %11266, 6
  %11268 = load i64, i64* %PC
  %11269 = add i64 %11268, 6
  store i64 %11269, i64* %PC
  %11270 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11271 = load i8, i8* %11270, align 1, !tbaa !2447
  %11272 = icmp eq i8 %11271, 0
  %11273 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %11274 = load i8, i8* %11273, align 1, !tbaa !2448
  %11275 = icmp ne i8 %11274, 0
  %11276 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11277 = load i8, i8* %11276, align 1, !tbaa !2449
  %11278 = icmp ne i8 %11277, 0
  %11279 = xor i1 %11275, %11278
  %11280 = xor i1 %11279, true
  %11281 = and i1 %11272, %11280
  %11282 = zext i1 %11281 to i8
  store i8 %11282, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11283 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11284 = select i1 %11281, i64 %11265, i64 %11267
  store i64 %11284, i64* %11283, align 8, !tbaa !2428
  %11285 = load i8, i8* %BRANCH_TAKEN
  %11286 = icmp eq i8 %11285, 1
  br i1 %11286, label %block_401d53, label %block_401ccf

block_400811:                                     ; preds = %block_400807, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit
  %MEMORY.8 = phi %struct.Memory* [ %9147, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tES3_EEP6MemoryS5_R5StateT_T0_.exit ], [ %3508, %block_400807 ]
  %11287 = load i64, i64* %PC
  %11288 = add i64 %11287, 10
  store i64 %11288, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %11289 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11290 = load i64, i64* %PC
  %11291 = add i64 %11290, 8
  store i64 %11291, i64* %PC
  %11292 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 64) to double*)
  %11293 = bitcast i8* %11289 to double*
  store double %11292, double* %11293, align 1, !tbaa !2452
  %11294 = getelementptr inbounds i8, i8* %11289, i64 8
  %11295 = bitcast i8* %11294 to double*
  store double 0.000000e+00, double* %11295, align 1, !tbaa !2452
  %11296 = bitcast %union.vec128_t* %XMM0 to i8*
  %11297 = load i64, i64* %PC
  %11298 = add i64 %11297, 9
  store i64 %11298, i64* %PC
  %11299 = bitcast i8* %11296 to double*
  %11300 = load double, double* %11299, align 1
  store double %11300, double* bitcast (%scale_type* @scale to double*)
  %11301 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11302 = load i64, i64* %PC
  %11303 = add i64 %11302, 9
  store i64 %11303, i64* %PC
  %11304 = load double, double* bitcast (%scale_type* @scale to double*)
  %11305 = bitcast i8* %11301 to double*
  store double %11304, double* %11305, align 1, !tbaa !2452
  %11306 = getelementptr inbounds i8, i8* %11301, i64 8
  %11307 = bitcast i8* %11306 to double*
  store double 0.000000e+00, double* %11307, align 1, !tbaa !2452
  %11308 = bitcast %union.vec128_t* %XMM0 to i8*
  %11309 = load i64, i64* %PC
  %11310 = add i64 %11309, 9
  store i64 %11310, i64* %PC
  %11311 = bitcast i8* %11308 to double*
  %11312 = load double, double* %11311, align 1
  store double %11312, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %11313 = load i64, i64* %PC
  %11314 = add i64 %11313, 7570
  %11315 = load i64, i64* %PC
  %11316 = add i64 %11315, 5
  %11317 = load i64, i64* %PC
  %11318 = add i64 %11317, 5
  store i64 %11318, i64* %PC
  %11319 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11320 = load i64, i64* %11319, align 8, !tbaa !2428
  %11321 = add i64 %11320, -8
  %11322 = inttoptr i64 %11321 to i64*
  store i64 %11316, i64* %11322
  store i64 %11321, i64* %11319, align 8, !tbaa !2428
  %11323 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11314, i64* %11323, align 8, !tbaa !2428
  %11324 = load i64, i64* %PC
  %11325 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %11324, %struct.Memory* %MEMORY.8)
  %11326 = load i64, i64* %RBP
  %11327 = sub i64 %11326, 72
  %11328 = load i64, i64* %PC
  %11329 = add i64 %11328, 8
  store i64 %11329, i64* %PC
  %11330 = inttoptr i64 %11327 to i64*
  store i64 1, i64* %11330
  %11331 = load i64, i64* %RBP
  %11332 = sub i64 %11331, 124
  %11333 = load i32, i32* %EAX
  %11334 = zext i32 %11333 to i64
  %11335 = load i64, i64* %PC
  %11336 = add i64 %11335, 3
  store i64 %11336, i64* %PC
  %11337 = inttoptr i64 %11332 to i32*
  store i32 %11333, i32* %11337
  br label %block_40084e

block_4008b8:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit
  %11338 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11339 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11340 = bitcast %union.vec128_t* %XMM0 to i8*
  %11341 = load i64, i64* %PC
  %11342 = add i64 %11341, 3
  store i64 %11342, i64* %PC
  %11343 = bitcast i8* %11339 to i64*
  %11344 = load i64, i64* %11343, align 1
  %11345 = getelementptr inbounds i8, i8* %11339, i64 8
  %11346 = bitcast i8* %11345 to i64*
  %11347 = load i64, i64* %11346, align 1
  %11348 = bitcast i8* %11340 to i64*
  %11349 = load i64, i64* %11348, align 1
  %11350 = getelementptr inbounds i8, i8* %11340, i64 8
  %11351 = bitcast i8* %11350 to i64*
  %11352 = load i64, i64* %11351, align 1
  %11353 = xor i64 %11349, %11344
  %11354 = xor i64 %11352, %11347
  %11355 = trunc i64 %11353 to i32
  %11356 = lshr i64 %11353, 32
  %11357 = trunc i64 %11356 to i32
  %11358 = bitcast i8* %11338 to i32*
  store i32 %11355, i32* %11358, align 1, !tbaa !2454
  %11359 = getelementptr inbounds i8, i8* %11338, i64 4
  %11360 = bitcast i8* %11359 to i32*
  store i32 %11357, i32* %11360, align 1, !tbaa !2454
  %11361 = trunc i64 %11354 to i32
  %11362 = getelementptr inbounds i8, i8* %11338, i64 8
  %11363 = bitcast i8* %11362 to i32*
  store i32 %11361, i32* %11363, align 1, !tbaa !2454
  %11364 = lshr i64 %11354, 32
  %11365 = trunc i64 %11364 to i32
  %11366 = getelementptr inbounds i8, i8* %11338, i64 12
  %11367 = bitcast i8* %11366 to i32*
  store i32 %11365, i32* %11367, align 1, !tbaa !2454
  %11368 = bitcast %union.vec128_t* %XMM0 to i8*
  %11369 = load i64, i64* %PC
  %11370 = add i64 %11369, 9
  store i64 %11370, i64* %PC
  %11371 = bitcast i8* %11368 to double*
  %11372 = load double, double* %11371, align 1
  store double %11372, double* bitcast (%nulltime_type* @nulltime to double*)
  br label %block_4008c4

block_40080c:                                     ; preds = %block_4007d5
  %11373 = sub i64 %3586, 374
  %11374 = load i64, i64* %PC
  %11375 = add i64 %11374, 5
  store i64 %11375, i64* %PC
  %11376 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11373, i64* %11376, align 8, !tbaa !2428
  br label %block_400696

block_40119a:                                     ; preds = %block_401185
  %11377 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11378 = load i64, i64* %RBP
  %11379 = sub i64 %11378, 72
  %11380 = load i64, i64* %PC
  %11381 = add i64 %11380, 6
  store i64 %11381, i64* %PC
  %11382 = inttoptr i64 %11379 to i64*
  %11383 = load i64, i64* %11382
  %11384 = sitofp i64 %11383 to double
  %11385 = bitcast i8* %11377 to double*
  store double %11384, double* %11385, align 1, !tbaa !2452
  %11386 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11387 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11388 = load i64, i64* %RBP
  %11389 = sub i64 %11388, 48
  %11390 = load i64, i64* %PC
  %11391 = add i64 %11390, 5
  store i64 %11391, i64* %PC
  %11392 = bitcast i8* %11387 to double*
  %11393 = load double, double* %11392, align 1
  %11394 = getelementptr inbounds i8, i8* %11387, i64 8
  %11395 = bitcast i8* %11394 to i64*
  %11396 = load i64, i64* %11395, align 1
  %11397 = inttoptr i64 %11389 to double*
  %11398 = load double, double* %11397
  %11399 = fmul double %11393, %11398
  %11400 = bitcast i8* %11386 to double*
  store double %11399, double* %11400, align 1, !tbaa !2452
  %11401 = getelementptr inbounds i8, i8* %11386, i64 8
  %11402 = bitcast i8* %11401 to i64*
  store i64 %11396, i64* %11402, align 1, !tbaa !2452
  %11403 = load i64, i64* %RBP
  %11404 = sub i64 %11403, 24
  %11405 = bitcast %union.vec128_t* %XMM0 to i8*
  %11406 = load i64, i64* %PC
  %11407 = add i64 %11406, 5
  store i64 %11407, i64* %PC
  %11408 = bitcast i8* %11405 to double*
  %11409 = load double, double* %11408, align 1
  %11410 = inttoptr i64 %11404 to double*
  store double %11409, double* %11410
  %11411 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11412 = load i64, i64* %RBP
  %11413 = sub i64 %11412, 24
  %11414 = load i64, i64* %PC
  %11415 = add i64 %11414, 5
  store i64 %11415, i64* %PC
  %11416 = inttoptr i64 %11413 to double*
  %11417 = load double, double* %11416
  %11418 = bitcast i8* %11411 to double*
  store double %11417, double* %11418, align 1, !tbaa !2452
  %11419 = getelementptr inbounds i8, i8* %11411, i64 8
  %11420 = bitcast i8* %11419 to double*
  store double 0.000000e+00, double* %11420, align 1, !tbaa !2452
  %11421 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11422 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11423 = load i64, i64* %RBP
  %11424 = sub i64 %11423, 24
  %11425 = load i64, i64* %PC
  %11426 = add i64 %11425, 5
  store i64 %11426, i64* %PC
  %11427 = bitcast i8* %11422 to double*
  %11428 = load double, double* %11427, align 1
  %11429 = getelementptr inbounds i8, i8* %11422, i64 8
  %11430 = bitcast i8* %11429 to i64*
  %11431 = load i64, i64* %11430, align 1
  %11432 = inttoptr i64 %11424 to double*
  %11433 = load double, double* %11432
  %11434 = fmul double %11428, %11433
  %11435 = bitcast i8* %11421 to double*
  store double %11434, double* %11435, align 1, !tbaa !2452
  %11436 = getelementptr inbounds i8, i8* %11421, i64 8
  %11437 = bitcast i8* %11436 to i64*
  store i64 %11431, i64* %11437, align 1, !tbaa !2452
  %11438 = load i64, i64* %RBP
  %11439 = sub i64 %11438, 40
  %11440 = bitcast %union.vec128_t* %XMM0 to i8*
  %11441 = load i64, i64* %PC
  %11442 = add i64 %11441, 5
  store i64 %11442, i64* %PC
  %11443 = bitcast i8* %11440 to double*
  %11444 = load double, double* %11443, align 1
  %11445 = inttoptr i64 %11439 to double*
  store double %11444, double* %11445
  %11446 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11447 = load i64, i64* %RBP
  %11448 = sub i64 %11447, 16
  %11449 = load i64, i64* %PC
  %11450 = add i64 %11449, 5
  store i64 %11450, i64* %PC
  %11451 = inttoptr i64 %11448 to double*
  %11452 = load double, double* %11451
  %11453 = bitcast i8* %11446 to double*
  store double %11452, double* %11453, align 1, !tbaa !2452
  %11454 = getelementptr inbounds i8, i8* %11446, i64 8
  %11455 = bitcast i8* %11454 to double*
  store double 0.000000e+00, double* %11455, align 1, !tbaa !2452
  %11456 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11457 = load i64, i64* %RBP
  %11458 = sub i64 %11457, 40
  %11459 = load i64, i64* %PC
  %11460 = add i64 %11459, 5
  store i64 %11460, i64* %PC
  %11461 = inttoptr i64 %11458 to double*
  %11462 = load double, double* %11461
  %11463 = bitcast i8* %11456 to double*
  store double %11462, double* %11463, align 1, !tbaa !2452
  %11464 = getelementptr inbounds i8, i8* %11456, i64 8
  %11465 = bitcast i8* %11464 to double*
  store double 0.000000e+00, double* %11465, align 1, !tbaa !2452
  %11466 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11467 = load i64, i64* %RBP
  %11468 = sub i64 %11467, 40
  %11469 = load i64, i64* %PC
  %11470 = add i64 %11469, 5
  store i64 %11470, i64* %PC
  %11471 = inttoptr i64 %11468 to double*
  %11472 = load double, double* %11471
  %11473 = bitcast i8* %11466 to double*
  store double %11472, double* %11473, align 1, !tbaa !2452
  %11474 = getelementptr inbounds i8, i8* %11466, i64 8
  %11475 = bitcast i8* %11474 to double*
  store double 0.000000e+00, double* %11475, align 1, !tbaa !2452
  %11476 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11477 = load i64, i64* %RBP
  %11478 = sub i64 %11477, 40
  %11479 = load i64, i64* %PC
  %11480 = add i64 %11479, 5
  store i64 %11480, i64* %PC
  %11481 = inttoptr i64 %11478 to double*
  %11482 = load double, double* %11481
  %11483 = bitcast i8* %11476 to double*
  store double %11482, double* %11483, align 1, !tbaa !2452
  %11484 = getelementptr inbounds i8, i8* %11476, i64 8
  %11485 = bitcast i8* %11484 to double*
  store double 0.000000e+00, double* %11485, align 1, !tbaa !2452
  %11486 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %11487 = load i64, i64* %RBP
  %11488 = sub i64 %11487, 40
  %11489 = load i64, i64* %PC
  %11490 = add i64 %11489, 5
  store i64 %11490, i64* %PC
  %11491 = inttoptr i64 %11488 to double*
  %11492 = load double, double* %11491
  %11493 = bitcast i8* %11486 to double*
  store double %11492, double* %11493, align 1, !tbaa !2452
  %11494 = getelementptr inbounds i8, i8* %11486, i64 8
  %11495 = bitcast i8* %11494 to double*
  store double 0.000000e+00, double* %11495, align 1, !tbaa !2452
  %11496 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %11497 = load i64, i64* %RBP
  %11498 = sub i64 %11497, 40
  %11499 = load i64, i64* %PC
  %11500 = add i64 %11499, 5
  store i64 %11500, i64* %PC
  %11501 = inttoptr i64 %11498 to double*
  %11502 = load double, double* %11501
  %11503 = bitcast i8* %11496 to double*
  store double %11502, double* %11503, align 1, !tbaa !2452
  %11504 = getelementptr inbounds i8, i8* %11496, i64 8
  %11505 = bitcast i8* %11504 to double*
  store double 0.000000e+00, double* %11505, align 1, !tbaa !2452
  %11506 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %11507 = load i64, i64* %PC
  %11508 = add i64 %11507, 9
  store i64 %11508, i64* %PC
  %11509 = load double, double* bitcast (%B6_type* @B6 to double*)
  %11510 = bitcast i8* %11506 to double*
  store double %11509, double* %11510, align 1, !tbaa !2452
  %11511 = getelementptr inbounds i8, i8* %11506, i64 8
  %11512 = bitcast i8* %11511 to double*
  store double 0.000000e+00, double* %11512, align 1, !tbaa !2452
  %11513 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %11514 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %11515 = load i64, i64* %RBP
  %11516 = sub i64 %11515, 40
  %11517 = load i64, i64* %PC
  %11518 = add i64 %11517, 5
  store i64 %11518, i64* %PC
  %11519 = bitcast i8* %11514 to double*
  %11520 = load double, double* %11519, align 1
  %11521 = getelementptr inbounds i8, i8* %11514, i64 8
  %11522 = bitcast i8* %11521 to i64*
  %11523 = load i64, i64* %11522, align 1
  %11524 = inttoptr i64 %11516 to double*
  %11525 = load double, double* %11524
  %11526 = fmul double %11520, %11525
  %11527 = bitcast i8* %11513 to double*
  store double %11526, double* %11527, align 1, !tbaa !2452
  %11528 = getelementptr inbounds i8, i8* %11513, i64 8
  %11529 = bitcast i8* %11528 to i64*
  store i64 %11523, i64* %11529, align 1, !tbaa !2452
  %11530 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %11531 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %11532 = load i64, i64* %PC
  %11533 = add i64 %11532, 9
  store i64 %11533, i64* %PC
  %11534 = bitcast i8* %11531 to double*
  %11535 = load double, double* %11534, align 1
  %11536 = getelementptr inbounds i8, i8* %11531, i64 8
  %11537 = bitcast i8* %11536 to i64*
  %11538 = load i64, i64* %11537, align 1
  %11539 = load double, double* bitcast (%B5_type* @B5 to double*)
  %11540 = fadd double %11535, %11539
  %11541 = bitcast i8* %11530 to double*
  store double %11540, double* %11541, align 1, !tbaa !2452
  %11542 = getelementptr inbounds i8, i8* %11530, i64 8
  %11543 = bitcast i8* %11542 to i64*
  store i64 %11538, i64* %11543, align 1, !tbaa !2452
  %11544 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %11545 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %11546 = bitcast %union.vec128_t* %XMM6 to i8*
  %11547 = load i64, i64* %PC
  %11548 = add i64 %11547, 4
  store i64 %11548, i64* %PC
  %11549 = bitcast i8* %11545 to double*
  %11550 = load double, double* %11549, align 1
  %11551 = getelementptr inbounds i8, i8* %11545, i64 8
  %11552 = bitcast i8* %11551 to i64*
  %11553 = load i64, i64* %11552, align 1
  %11554 = bitcast i8* %11546 to double*
  %11555 = load double, double* %11554, align 1
  %11556 = fmul double %11550, %11555
  %11557 = bitcast i8* %11544 to double*
  store double %11556, double* %11557, align 1, !tbaa !2452
  %11558 = getelementptr inbounds i8, i8* %11544, i64 8
  %11559 = bitcast i8* %11558 to i64*
  store i64 %11553, i64* %11559, align 1, !tbaa !2452
  %11560 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %11561 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %11562 = load i64, i64* %PC
  %11563 = add i64 %11562, 9
  store i64 %11563, i64* %PC
  %11564 = bitcast i8* %11561 to double*
  %11565 = load double, double* %11564, align 1
  %11566 = getelementptr inbounds i8, i8* %11561, i64 8
  %11567 = bitcast i8* %11566 to i64*
  %11568 = load i64, i64* %11567, align 1
  %11569 = load double, double* bitcast (%B4_type* @B4 to double*)
  %11570 = fadd double %11565, %11569
  %11571 = bitcast i8* %11560 to double*
  store double %11570, double* %11571, align 1, !tbaa !2452
  %11572 = getelementptr inbounds i8, i8* %11560, i64 8
  %11573 = bitcast i8* %11572 to i64*
  store i64 %11568, i64* %11573, align 1, !tbaa !2452
  %11574 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %11575 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %11576 = bitcast %union.vec128_t* %XMM5 to i8*
  %11577 = load i64, i64* %PC
  %11578 = add i64 %11577, 4
  store i64 %11578, i64* %PC
  %11579 = bitcast i8* %11575 to double*
  %11580 = load double, double* %11579, align 1
  %11581 = getelementptr inbounds i8, i8* %11575, i64 8
  %11582 = bitcast i8* %11581 to i64*
  %11583 = load i64, i64* %11582, align 1
  %11584 = bitcast i8* %11576 to double*
  %11585 = load double, double* %11584, align 1
  %11586 = fmul double %11580, %11585
  %11587 = bitcast i8* %11574 to double*
  store double %11586, double* %11587, align 1, !tbaa !2452
  %11588 = getelementptr inbounds i8, i8* %11574, i64 8
  %11589 = bitcast i8* %11588 to i64*
  store i64 %11583, i64* %11589, align 1, !tbaa !2452
  %11590 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %11591 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %11592 = load i64, i64* %PC
  %11593 = add i64 %11592, 9
  store i64 %11593, i64* %PC
  %11594 = bitcast i8* %11591 to double*
  %11595 = load double, double* %11594, align 1
  %11596 = getelementptr inbounds i8, i8* %11591, i64 8
  %11597 = bitcast i8* %11596 to i64*
  %11598 = load i64, i64* %11597, align 1
  %11599 = load double, double* bitcast (%B3_type* @B3 to double*)
  %11600 = fadd double %11595, %11599
  %11601 = bitcast i8* %11590 to double*
  store double %11600, double* %11601, align 1, !tbaa !2452
  %11602 = getelementptr inbounds i8, i8* %11590, i64 8
  %11603 = bitcast i8* %11602 to i64*
  store i64 %11598, i64* %11603, align 1, !tbaa !2452
  %11604 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11605 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11606 = bitcast %union.vec128_t* %XMM4 to i8*
  %11607 = load i64, i64* %PC
  %11608 = add i64 %11607, 4
  store i64 %11608, i64* %PC
  %11609 = bitcast i8* %11605 to double*
  %11610 = load double, double* %11609, align 1
  %11611 = getelementptr inbounds i8, i8* %11605, i64 8
  %11612 = bitcast i8* %11611 to i64*
  %11613 = load i64, i64* %11612, align 1
  %11614 = bitcast i8* %11606 to double*
  %11615 = load double, double* %11614, align 1
  %11616 = fmul double %11610, %11615
  %11617 = bitcast i8* %11604 to double*
  store double %11616, double* %11617, align 1, !tbaa !2452
  %11618 = getelementptr inbounds i8, i8* %11604, i64 8
  %11619 = bitcast i8* %11618 to i64*
  store i64 %11613, i64* %11619, align 1, !tbaa !2452
  %11620 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11621 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11622 = load i64, i64* %PC
  %11623 = add i64 %11622, 9
  store i64 %11623, i64* %PC
  %11624 = bitcast i8* %11621 to double*
  %11625 = load double, double* %11624, align 1
  %11626 = getelementptr inbounds i8, i8* %11621, i64 8
  %11627 = bitcast i8* %11626 to i64*
  %11628 = load i64, i64* %11627, align 1
  %11629 = load double, double* bitcast (%B2_type* @B2 to double*)
  %11630 = fadd double %11625, %11629
  %11631 = bitcast i8* %11620 to double*
  store double %11630, double* %11631, align 1, !tbaa !2452
  %11632 = getelementptr inbounds i8, i8* %11620, i64 8
  %11633 = bitcast i8* %11632 to i64*
  store i64 %11628, i64* %11633, align 1, !tbaa !2452
  %11634 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11635 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11636 = bitcast %union.vec128_t* %XMM3 to i8*
  %11637 = load i64, i64* %PC
  %11638 = add i64 %11637, 4
  store i64 %11638, i64* %PC
  %11639 = bitcast i8* %11635 to double*
  %11640 = load double, double* %11639, align 1
  %11641 = getelementptr inbounds i8, i8* %11635, i64 8
  %11642 = bitcast i8* %11641 to i64*
  %11643 = load i64, i64* %11642, align 1
  %11644 = bitcast i8* %11636 to double*
  %11645 = load double, double* %11644, align 1
  %11646 = fmul double %11640, %11645
  %11647 = bitcast i8* %11634 to double*
  store double %11646, double* %11647, align 1, !tbaa !2452
  %11648 = getelementptr inbounds i8, i8* %11634, i64 8
  %11649 = bitcast i8* %11648 to i64*
  store i64 %11643, i64* %11649, align 1, !tbaa !2452
  %11650 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11651 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11652 = load i64, i64* %PC
  %11653 = add i64 %11652, 9
  store i64 %11653, i64* %PC
  %11654 = bitcast i8* %11651 to double*
  %11655 = load double, double* %11654, align 1
  %11656 = getelementptr inbounds i8, i8* %11651, i64 8
  %11657 = bitcast i8* %11656 to i64*
  %11658 = load i64, i64* %11657, align 1
  %11659 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %11660 = fadd double %11655, %11659
  %11661 = bitcast i8* %11650 to double*
  store double %11660, double* %11661, align 1, !tbaa !2452
  %11662 = getelementptr inbounds i8, i8* %11650, i64 8
  %11663 = bitcast i8* %11662 to i64*
  store i64 %11658, i64* %11663, align 1, !tbaa !2452
  %11664 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11665 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11666 = bitcast %union.vec128_t* %XMM2 to i8*
  %11667 = load i64, i64* %PC
  %11668 = add i64 %11667, 4
  store i64 %11668, i64* %PC
  %11669 = bitcast i8* %11665 to double*
  %11670 = load double, double* %11669, align 1
  %11671 = getelementptr inbounds i8, i8* %11665, i64 8
  %11672 = bitcast i8* %11671 to i64*
  %11673 = load i64, i64* %11672, align 1
  %11674 = bitcast i8* %11666 to double*
  %11675 = load double, double* %11674, align 1
  %11676 = fmul double %11670, %11675
  %11677 = bitcast i8* %11664 to double*
  store double %11676, double* %11677, align 1, !tbaa !2452
  %11678 = getelementptr inbounds i8, i8* %11664, i64 8
  %11679 = bitcast i8* %11678 to i64*
  store i64 %11673, i64* %11679, align 1, !tbaa !2452
  %11680 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11681 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11682 = bitcast %union.vec128_t* %XMM1 to i8*
  %11683 = load i64, i64* %PC
  %11684 = add i64 %11683, 4
  store i64 %11684, i64* %PC
  %11685 = bitcast i8* %11681 to double*
  %11686 = load double, double* %11685, align 1
  %11687 = getelementptr inbounds i8, i8* %11681, i64 8
  %11688 = bitcast i8* %11687 to i64*
  %11689 = load i64, i64* %11688, align 1
  %11690 = bitcast i8* %11682 to double*
  %11691 = load double, double* %11690, align 1
  %11692 = fadd double %11686, %11691
  %11693 = bitcast i8* %11680 to double*
  store double %11692, double* %11693, align 1, !tbaa !2452
  %11694 = getelementptr inbounds i8, i8* %11680, i64 8
  %11695 = bitcast i8* %11694 to i64*
  store i64 %11689, i64* %11695, align 1, !tbaa !2452
  %11696 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11697 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11698 = load i64, i64* %PC
  %11699 = add i64 %11698, 9
  store i64 %11699, i64* %PC
  %11700 = bitcast i8* %11697 to double*
  %11701 = load double, double* %11700, align 1
  %11702 = getelementptr inbounds i8, i8* %11697, i64 8
  %11703 = bitcast i8* %11702 to i64*
  %11704 = load i64, i64* %11703, align 1
  %11705 = load double, double* bitcast (%one_type* @one to double*)
  %11706 = fadd double %11701, %11705
  %11707 = bitcast i8* %11696 to double*
  store double %11706, double* %11707, align 1, !tbaa !2452
  %11708 = getelementptr inbounds i8, i8* %11696, i64 8
  %11709 = bitcast i8* %11708 to i64*
  store i64 %11704, i64* %11709, align 1, !tbaa !2452
  %11710 = load i64, i64* %RBP
  %11711 = sub i64 %11710, 16
  %11712 = bitcast %union.vec128_t* %XMM0 to i8*
  %11713 = load i64, i64* %PC
  %11714 = add i64 %11713, 5
  store i64 %11714, i64* %PC
  %11715 = bitcast i8* %11712 to double*
  %11716 = load double, double* %11715, align 1
  %11717 = inttoptr i64 %11711 to double*
  store double %11716, double* %11717
  %11718 = load i64, i64* %RBP
  %11719 = sub i64 %11718, 72
  %11720 = load i64, i64* %PC
  %11721 = add i64 %11720, 4
  store i64 %11721, i64* %PC
  %11722 = inttoptr i64 %11719 to i64*
  %11723 = load i64, i64* %11722
  store i64 %11723, i64* %RAX, align 8, !tbaa !2428
  %11724 = load i64, i64* %RAX
  %11725 = load i64, i64* %PC
  %11726 = add i64 %11725, 4
  store i64 %11726, i64* %PC
  %11727 = add i64 1, %11724
  store i64 %11727, i64* %RAX, align 8, !tbaa !2428
  %11728 = icmp ult i64 %11727, %11724
  %11729 = icmp ult i64 %11727, 1
  %11730 = or i1 %11728, %11729
  %11731 = zext i1 %11730 to i8
  %11732 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11731, i8* %11732, align 1, !tbaa !2432
  %11733 = trunc i64 %11727 to i32
  %11734 = and i32 %11733, 255
  %11735 = call i32 @llvm.ctpop.i32(i32 %11734) #16
  %11736 = trunc i32 %11735 to i8
  %11737 = and i8 %11736, 1
  %11738 = xor i8 %11737, 1
  %11739 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11738, i8* %11739, align 1, !tbaa !2446
  %11740 = xor i64 1, %11724
  %11741 = xor i64 %11740, %11727
  %11742 = lshr i64 %11741, 4
  %11743 = trunc i64 %11742 to i8
  %11744 = and i8 %11743, 1
  %11745 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11744, i8* %11745, align 1, !tbaa !2450
  %11746 = icmp eq i64 %11727, 0
  %11747 = zext i1 %11746 to i8
  %11748 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11747, i8* %11748, align 1, !tbaa !2447
  %11749 = lshr i64 %11727, 63
  %11750 = trunc i64 %11749 to i8
  %11751 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11750, i8* %11751, align 1, !tbaa !2448
  %11752 = lshr i64 %11724, 63
  %11753 = xor i64 %11749, %11752
  %11754 = add nuw nsw i64 %11753, %11749
  %11755 = icmp eq i64 %11754, 2
  %11756 = zext i1 %11755 to i8
  %11757 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11756, i8* %11757, align 1, !tbaa !2449
  %11758 = load i64, i64* %RBP
  %11759 = sub i64 %11758, 72
  %11760 = load i64, i64* %RAX
  %11761 = load i64, i64* %PC
  %11762 = add i64 %11761, 4
  store i64 %11762, i64* %PC
  %11763 = inttoptr i64 %11759 to i64*
  store i64 %11760, i64* %11763
  %11764 = load i64, i64* %PC
  %11765 = sub i64 %11764, 191
  %11766 = load i64, i64* %PC
  %11767 = add i64 %11766, 5
  store i64 %11767, i64* %PC
  %11768 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11765, i64* %11768, align 8, !tbaa !2428
  br label %block_401185

block_400807:                                     ; preds = %block_4007d5
  %11769 = add i64 %3586, 10
  %11770 = load i64, i64* %PC
  %11771 = add i64 %11770, 5
  store i64 %11771, i64* %PC
  %11772 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11769, i64* %11772, align 8, !tbaa !2428
  br label %block_400811

block_400863:                                     ; preds = %block_40084e
  %11773 = add i64 %14202, 5
  %11774 = load i64, i64* %PC
  %11775 = add i64 %11774, 5
  store i64 %11775, i64* %PC
  %11776 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11773, i64* %11776, align 8, !tbaa !2428
  %11777 = load i64, i64* %RBP
  %11778 = sub i64 %11777, 72
  %11779 = load i64, i64* %PC
  %11780 = add i64 %11779, 4
  store i64 %11780, i64* %PC
  %11781 = inttoptr i64 %11778 to i64*
  %11782 = load i64, i64* %11781
  store i64 %11782, i64* %RAX, align 8, !tbaa !2428
  %11783 = load i64, i64* %RAX
  %11784 = load i64, i64* %PC
  %11785 = add i64 %11784, 4
  store i64 %11785, i64* %PC
  %11786 = add i64 1, %11783
  store i64 %11786, i64* %RAX, align 8, !tbaa !2428
  %11787 = icmp ult i64 %11786, %11783
  %11788 = icmp ult i64 %11786, 1
  %11789 = or i1 %11787, %11788
  %11790 = zext i1 %11789 to i8
  %11791 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11790, i8* %11791, align 1, !tbaa !2432
  %11792 = trunc i64 %11786 to i32
  %11793 = and i32 %11792, 255
  %11794 = call i32 @llvm.ctpop.i32(i32 %11793) #16
  %11795 = trunc i32 %11794 to i8
  %11796 = and i8 %11795, 1
  %11797 = xor i8 %11796, 1
  %11798 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11797, i8* %11798, align 1, !tbaa !2446
  %11799 = xor i64 1, %11783
  %11800 = xor i64 %11799, %11786
  %11801 = lshr i64 %11800, 4
  %11802 = trunc i64 %11801 to i8
  %11803 = and i8 %11802, 1
  %11804 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11803, i8* %11804, align 1, !tbaa !2450
  %11805 = icmp eq i64 %11786, 0
  %11806 = zext i1 %11805 to i8
  %11807 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11806, i8* %11807, align 1, !tbaa !2447
  %11808 = lshr i64 %11786, 63
  %11809 = trunc i64 %11808 to i8
  %11810 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11809, i8* %11810, align 1, !tbaa !2448
  %11811 = lshr i64 %11783, 63
  %11812 = xor i64 %11808, %11811
  %11813 = add nuw nsw i64 %11812, %11808
  %11814 = icmp eq i64 %11813, 2
  %11815 = zext i1 %11814 to i8
  %11816 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11815, i8* %11816, align 1, !tbaa !2449
  %11817 = load i64, i64* %RBP
  %11818 = sub i64 %11817, 72
  %11819 = load i64, i64* %RAX
  %11820 = load i64, i64* %PC
  %11821 = add i64 %11820, 4
  store i64 %11821, i64* %PC
  %11822 = inttoptr i64 %11818 to i64*
  store i64 %11819, i64* %11822
  %11823 = load i64, i64* %PC
  %11824 = sub i64 %11823, 38
  %11825 = load i64, i64* %PC
  %11826 = add i64 %11825, 5
  store i64 %11826, i64* %PC
  %11827 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11824, i64* %11827, align 8, !tbaa !2428
  br label %block_40084e

block_40070b:                                     ; preds = %block_400720, %block_4006b2
  %MEMORY.9 = phi %struct.Memory* [ %5786, %block_4006b2 ], [ %MEMORY.9, %block_400720 ]
  %11828 = load i64, i64* %RBP
  %11829 = sub i64 %11828, 72
  %11830 = load i64, i64* %PC
  %11831 = add i64 %11830, 4
  store i64 %11831, i64* %PC
  %11832 = inttoptr i64 %11829 to i64*
  %11833 = load i64, i64* %11832
  store i64 %11833, i64* %RAX, align 8, !tbaa !2428
  %11834 = load i64, i64* %RBP
  %11835 = sub i64 %11834, 88
  %11836 = load i64, i64* %PC
  %11837 = add i64 %11836, 4
  store i64 %11837, i64* %PC
  %11838 = inttoptr i64 %11835 to i64*
  %11839 = load i64, i64* %11838
  store i64 %11839, i64* %RCX, align 8, !tbaa !2428
  %11840 = load i64, i64* %RCX
  %11841 = load i64, i64* %PC
  %11842 = add i64 %11841, 4
  store i64 %11842, i64* %PC
  %11843 = sub i64 %11840, 1
  store i64 %11843, i64* %RCX, align 8, !tbaa !2428
  %11844 = icmp ult i64 %11840, 1
  %11845 = zext i1 %11844 to i8
  %11846 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11845, i8* %11846, align 1, !tbaa !2432
  %11847 = trunc i64 %11843 to i32
  %11848 = and i32 %11847, 255
  %11849 = call i32 @llvm.ctpop.i32(i32 %11848) #16
  %11850 = trunc i32 %11849 to i8
  %11851 = and i8 %11850, 1
  %11852 = xor i8 %11851, 1
  %11853 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11852, i8* %11853, align 1, !tbaa !2446
  %11854 = xor i64 1, %11840
  %11855 = xor i64 %11854, %11843
  %11856 = lshr i64 %11855, 4
  %11857 = trunc i64 %11856 to i8
  %11858 = and i8 %11857, 1
  %11859 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11858, i8* %11859, align 1, !tbaa !2450
  %11860 = icmp eq i64 %11843, 0
  %11861 = zext i1 %11860 to i8
  %11862 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11861, i8* %11862, align 1, !tbaa !2447
  %11863 = lshr i64 %11843, 63
  %11864 = trunc i64 %11863 to i8
  %11865 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11864, i8* %11865, align 1, !tbaa !2448
  %11866 = lshr i64 %11840, 63
  %11867 = xor i64 %11863, %11866
  %11868 = add nuw nsw i64 %11867, %11866
  %11869 = icmp eq i64 %11868, 2
  %11870 = zext i1 %11869 to i8
  %11871 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11870, i8* %11871, align 1, !tbaa !2449
  %11872 = load i64, i64* %RAX
  %11873 = load i64, i64* %RCX
  %11874 = load i64, i64* %PC
  %11875 = add i64 %11874, 3
  store i64 %11875, i64* %PC
  %11876 = sub i64 %11872, %11873
  %11877 = icmp ult i64 %11872, %11873
  %11878 = zext i1 %11877 to i8
  %11879 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %11878, i8* %11879, align 1, !tbaa !2432
  %11880 = trunc i64 %11876 to i32
  %11881 = and i32 %11880, 255
  %11882 = call i32 @llvm.ctpop.i32(i32 %11881) #16
  %11883 = trunc i32 %11882 to i8
  %11884 = and i8 %11883, 1
  %11885 = xor i8 %11884, 1
  %11886 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %11885, i8* %11886, align 1, !tbaa !2446
  %11887 = xor i64 %11873, %11872
  %11888 = xor i64 %11887, %11876
  %11889 = lshr i64 %11888, 4
  %11890 = trunc i64 %11889 to i8
  %11891 = and i8 %11890, 1
  %11892 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %11891, i8* %11892, align 1, !tbaa !2450
  %11893 = icmp eq i64 %11876, 0
  %11894 = zext i1 %11893 to i8
  %11895 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %11894, i8* %11895, align 1, !tbaa !2447
  %11896 = lshr i64 %11876, 63
  %11897 = trunc i64 %11896 to i8
  %11898 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %11897, i8* %11898, align 1, !tbaa !2448
  %11899 = lshr i64 %11872, 63
  %11900 = lshr i64 %11873, 63
  %11901 = xor i64 %11900, %11899
  %11902 = xor i64 %11896, %11899
  %11903 = add nuw nsw i64 %11902, %11901
  %11904 = icmp eq i64 %11903, 2
  %11905 = zext i1 %11904 to i8
  %11906 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %11905, i8* %11906, align 1, !tbaa !2449
  %11907 = load i64, i64* %PC
  %11908 = add i64 %11907, 187
  %11909 = load i64, i64* %PC
  %11910 = add i64 %11909, 6
  %11911 = load i64, i64* %PC
  %11912 = add i64 %11911, 6
  store i64 %11912, i64* %PC
  %11913 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %11914 = load i8, i8* %11913, align 1, !tbaa !2447
  %11915 = icmp eq i8 %11914, 0
  %11916 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %11917 = load i8, i8* %11916, align 1, !tbaa !2448
  %11918 = icmp ne i8 %11917, 0
  %11919 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %11920 = load i8, i8* %11919, align 1, !tbaa !2449
  %11921 = icmp ne i8 %11920, 0
  %11922 = xor i1 %11918, %11921
  %11923 = xor i1 %11922, true
  %11924 = and i1 %11915, %11923
  %11925 = zext i1 %11924 to i8
  store i8 %11925, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %11926 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %11927 = select i1 %11924, i64 %11908, i64 %11910
  store i64 %11927, i64* %11926, align 8, !tbaa !2428
  %11928 = load i8, i8* %BRANCH_TAKEN
  %11929 = icmp eq i8 %11928, 1
  br i1 %11929, label %block_4007d5, label %block_400720

block_401a06:                                     ; preds = %block_4018ce
  %11930 = load i64, i64* %PC
  %11931 = add i64 %11930, 10
  store i64 %11931, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %11932 = load i64, i64* %PC
  %11933 = add i64 %11932, 3008
  %11934 = load i64, i64* %PC
  %11935 = add i64 %11934, 5
  %11936 = load i64, i64* %PC
  %11937 = add i64 %11936, 5
  store i64 %11937, i64* %PC
  %11938 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %11939 = load i64, i64* %11938, align 8, !tbaa !2428
  %11940 = add i64 %11939, -8
  %11941 = inttoptr i64 %11940 to i64*
  store i64 %11935, i64* %11941
  store i64 %11940, i64* %11938, align 8, !tbaa !2428
  %11942 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %11933, i64* %11942, align 8, !tbaa !2428
  %11943 = load i64, i64* %PC
  %11944 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %11943, %struct.Memory* %MEMORY.0)
  %11945 = load i64, i64* %PC
  %11946 = add i64 %11945, 10
  store i64 %11946, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 570), i64* %RDI, align 8, !tbaa !2428
  %11947 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %11948 = load i64, i64* %PC
  %11949 = add i64 %11948, 8
  store i64 %11949, i64* %PC
  %11950 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 72) to double*)
  %11951 = bitcast i8* %11947 to double*
  store double %11950, double* %11951, align 1, !tbaa !2452
  %11952 = getelementptr inbounds i8, i8* %11947, i64 8
  %11953 = bitcast i8* %11952 to double*
  store double 0.000000e+00, double* %11953, align 1, !tbaa !2452
  %11954 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %11955 = load i64, i64* %PC
  %11956 = add i64 %11955, 8
  store i64 %11956, i64* %PC
  %11957 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 160) to double*)
  %11958 = bitcast i8* %11954 to double*
  store double %11957, double* %11958, align 1, !tbaa !2452
  %11959 = getelementptr inbounds i8, i8* %11954, i64 8
  %11960 = bitcast i8* %11959 to double*
  store double 0.000000e+00, double* %11960, align 1, !tbaa !2452
  %11961 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %11962 = load i64, i64* %PC
  %11963 = add i64 %11962, 8
  store i64 %11963, i64* %PC
  %11964 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 144) to double*)
  %11965 = bitcast i8* %11961 to double*
  store double %11964, double* %11965, align 1, !tbaa !2452
  %11966 = getelementptr inbounds i8, i8* %11961, i64 8
  %11967 = bitcast i8* %11966 to double*
  store double 0.000000e+00, double* %11967, align 1, !tbaa !2452
  %11968 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11969 = load i64, i64* %PC
  %11970 = add i64 %11969, 9
  store i64 %11970, i64* %PC
  %11971 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %11972 = bitcast i8* %11968 to double*
  store double %11971, double* %11972, align 1, !tbaa !2452
  %11973 = getelementptr inbounds i8, i8* %11968, i64 8
  %11974 = bitcast i8* %11973 to double*
  store double 0.000000e+00, double* %11974, align 1, !tbaa !2452
  %11975 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11976 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11977 = load i64, i64* %PC
  %11978 = add i64 %11977, 9
  store i64 %11978, i64* %PC
  %11979 = bitcast i8* %11976 to double*
  %11980 = load double, double* %11979, align 1
  %11981 = getelementptr inbounds i8, i8* %11976, i64 8
  %11982 = bitcast i8* %11981 to i64*
  %11983 = load i64, i64* %11982, align 1
  %11984 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %11985 = fmul double %11980, %11984
  %11986 = bitcast i8* %11975 to double*
  store double %11985, double* %11986, align 1, !tbaa !2452
  %11987 = getelementptr inbounds i8, i8* %11975, i64 8
  %11988 = bitcast i8* %11987 to i64*
  store i64 %11983, i64* %11988, align 1, !tbaa !2452
  %11989 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11990 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %11991 = load i64, i64* %PC
  %11992 = add i64 %11991, 9
  store i64 %11992, i64* %PC
  %11993 = bitcast i8* %11990 to double*
  %11994 = load double, double* %11993, align 1
  %11995 = getelementptr inbounds i8, i8* %11990, i64 8
  %11996 = bitcast i8* %11995 to i64*
  %11997 = load i64, i64* %11996, align 1
  %11998 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %11999 = fsub double %11994, %11998
  %12000 = bitcast i8* %11989 to double*
  store double %11999, double* %12000, align 1, !tbaa !2452
  %12001 = getelementptr inbounds i8, i8* %11989, i64 8
  %12002 = bitcast i8* %12001 to i64*
  store i64 %11997, i64* %12002, align 1, !tbaa !2452
  %12003 = bitcast %union.vec128_t* %XMM3 to i8*
  %12004 = load i64, i64* %PC
  %12005 = add i64 %12004, 9
  store i64 %12005, i64* %PC
  %12006 = bitcast i8* %12003 to double*
  %12007 = load double, double* %12006, align 1
  store double %12007, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %12008 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12009 = load i64, i64* %PC
  %12010 = add i64 %12009, 9
  store i64 %12010, i64* %PC
  %12011 = load double, double* bitcast (%piref_type* @piref to double*)
  %12012 = bitcast i8* %12008 to double*
  store double %12011, double* %12012, align 1, !tbaa !2452
  %12013 = getelementptr inbounds i8, i8* %12008, i64 8
  %12014 = bitcast i8* %12013 to double*
  store double 0.000000e+00, double* %12014, align 1, !tbaa !2452
  %12015 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12016 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12017 = load i64, i64* %PC
  %12018 = add i64 %12017, 9
  store i64 %12018, i64* %PC
  %12019 = bitcast i8* %12016 to double*
  %12020 = load double, double* %12019, align 1
  %12021 = getelementptr inbounds i8, i8* %12016, i64 8
  %12022 = bitcast i8* %12021 to i64*
  %12023 = load i64, i64* %12022, align 1
  %12024 = load double, double* bitcast (%four_type* @four to double*)
  %12025 = fdiv double %12020, %12024
  %12026 = bitcast i8* %12015 to double*
  store double %12025, double* %12026, align 1, !tbaa !2452
  %12027 = getelementptr inbounds i8, i8* %12015, i64 8
  %12028 = bitcast i8* %12027 to i64*
  store i64 %12023, i64* %12028, align 1, !tbaa !2452
  %12029 = load i64, i64* %RBP
  %12030 = sub i64 %12029, 24
  %12031 = bitcast %union.vec128_t* %XMM3 to i8*
  %12032 = load i64, i64* %PC
  %12033 = add i64 %12032, 5
  store i64 %12033, i64* %PC
  %12034 = bitcast i8* %12031 to double*
  %12035 = load double, double* %12034, align 1
  %12036 = inttoptr i64 %12030 to double*
  store double %12035, double* %12036
  %12037 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12038 = load i64, i64* %RBP
  %12039 = sub i64 %12038, 24
  %12040 = load i64, i64* %PC
  %12041 = add i64 %12040, 5
  store i64 %12041, i64* %PC
  %12042 = inttoptr i64 %12039 to double*
  %12043 = load double, double* %12042
  %12044 = bitcast i8* %12037 to double*
  store double %12043, double* %12044, align 1, !tbaa !2452
  %12045 = getelementptr inbounds i8, i8* %12037, i64 8
  %12046 = bitcast i8* %12045 to double*
  store double 0.000000e+00, double* %12046, align 1, !tbaa !2452
  %12047 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12048 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12049 = load i64, i64* %RBP
  %12050 = sub i64 %12049, 24
  %12051 = load i64, i64* %PC
  %12052 = add i64 %12051, 5
  store i64 %12052, i64* %PC
  %12053 = bitcast i8* %12048 to double*
  %12054 = load double, double* %12053, align 1
  %12055 = getelementptr inbounds i8, i8* %12048, i64 8
  %12056 = bitcast i8* %12055 to i64*
  %12057 = load i64, i64* %12056, align 1
  %12058 = inttoptr i64 %12050 to double*
  %12059 = load double, double* %12058
  %12060 = fmul double %12054, %12059
  %12061 = bitcast i8* %12047 to double*
  store double %12060, double* %12061, align 1, !tbaa !2452
  %12062 = getelementptr inbounds i8, i8* %12047, i64 8
  %12063 = bitcast i8* %12062 to i64*
  store i64 %12057, i64* %12063, align 1, !tbaa !2452
  %12064 = load i64, i64* %RBP
  %12065 = sub i64 %12064, 40
  %12066 = bitcast %union.vec128_t* %XMM3 to i8*
  %12067 = load i64, i64* %PC
  %12068 = add i64 %12067, 5
  store i64 %12068, i64* %PC
  %12069 = bitcast i8* %12066 to double*
  %12070 = load double, double* %12069, align 1
  %12071 = inttoptr i64 %12065 to double*
  store double %12070, double* %12071
  %12072 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12073 = load i64, i64* %RBP
  %12074 = sub i64 %12073, 24
  %12075 = load i64, i64* %PC
  %12076 = add i64 %12075, 5
  store i64 %12076, i64* %PC
  %12077 = inttoptr i64 %12074 to double*
  %12078 = load double, double* %12077
  %12079 = bitcast i8* %12072 to double*
  store double %12078, double* %12079, align 1, !tbaa !2452
  %12080 = getelementptr inbounds i8, i8* %12072, i64 8
  %12081 = bitcast i8* %12080 to double*
  store double 0.000000e+00, double* %12081, align 1, !tbaa !2452
  %12082 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12083 = load i64, i64* %PC
  %12084 = add i64 %12083, 9
  store i64 %12084, i64* %PC
  %12085 = load double, double* bitcast (%A6_type* @A6 to double*)
  %12086 = bitcast i8* %12082 to double*
  store double %12085, double* %12086, align 1, !tbaa !2452
  %12087 = getelementptr inbounds i8, i8* %12082, i64 8
  %12088 = bitcast i8* %12087 to double*
  store double 0.000000e+00, double* %12088, align 1, !tbaa !2452
  %12089 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12090 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12091 = load i64, i64* %RBP
  %12092 = sub i64 %12091, 40
  %12093 = load i64, i64* %PC
  %12094 = add i64 %12093, 5
  store i64 %12094, i64* %PC
  %12095 = bitcast i8* %12090 to double*
  %12096 = load double, double* %12095, align 1
  %12097 = getelementptr inbounds i8, i8* %12090, i64 8
  %12098 = bitcast i8* %12097 to i64*
  %12099 = load i64, i64* %12098, align 1
  %12100 = inttoptr i64 %12092 to double*
  %12101 = load double, double* %12100
  %12102 = fmul double %12096, %12101
  %12103 = bitcast i8* %12089 to double*
  store double %12102, double* %12103, align 1, !tbaa !2452
  %12104 = getelementptr inbounds i8, i8* %12089, i64 8
  %12105 = bitcast i8* %12104 to i64*
  store i64 %12099, i64* %12105, align 1, !tbaa !2452
  %12106 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12107 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12108 = load i64, i64* %PC
  %12109 = add i64 %12108, 9
  store i64 %12109, i64* %PC
  %12110 = bitcast i8* %12107 to double*
  %12111 = load double, double* %12110, align 1
  %12112 = getelementptr inbounds i8, i8* %12107, i64 8
  %12113 = bitcast i8* %12112 to i64*
  %12114 = load i64, i64* %12113, align 1
  %12115 = load double, double* bitcast (%A5_type* @A5 to double*)
  %12116 = fadd double %12111, %12115
  %12117 = bitcast i8* %12106 to double*
  store double %12116, double* %12117, align 1, !tbaa !2452
  %12118 = getelementptr inbounds i8, i8* %12106, i64 8
  %12119 = bitcast i8* %12118 to i64*
  store i64 %12114, i64* %12119, align 1, !tbaa !2452
  %12120 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12121 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12122 = load i64, i64* %RBP
  %12123 = sub i64 %12122, 40
  %12124 = load i64, i64* %PC
  %12125 = add i64 %12124, 5
  store i64 %12125, i64* %PC
  %12126 = bitcast i8* %12121 to double*
  %12127 = load double, double* %12126, align 1
  %12128 = getelementptr inbounds i8, i8* %12121, i64 8
  %12129 = bitcast i8* %12128 to i64*
  %12130 = load i64, i64* %12129, align 1
  %12131 = inttoptr i64 %12123 to double*
  %12132 = load double, double* %12131
  %12133 = fmul double %12127, %12132
  %12134 = bitcast i8* %12120 to double*
  store double %12133, double* %12134, align 1, !tbaa !2452
  %12135 = getelementptr inbounds i8, i8* %12120, i64 8
  %12136 = bitcast i8* %12135 to i64*
  store i64 %12130, i64* %12136, align 1, !tbaa !2452
  %12137 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12138 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12139 = load i64, i64* %PC
  %12140 = add i64 %12139, 9
  store i64 %12140, i64* %PC
  %12141 = bitcast i8* %12138 to double*
  %12142 = load double, double* %12141, align 1
  %12143 = getelementptr inbounds i8, i8* %12138, i64 8
  %12144 = bitcast i8* %12143 to i64*
  %12145 = load i64, i64* %12144, align 1
  %12146 = load double, double* bitcast (%A4_type* @A4 to double*)
  %12147 = fadd double %12142, %12146
  %12148 = bitcast i8* %12137 to double*
  store double %12147, double* %12148, align 1, !tbaa !2452
  %12149 = getelementptr inbounds i8, i8* %12137, i64 8
  %12150 = bitcast i8* %12149 to i64*
  store i64 %12145, i64* %12150, align 1, !tbaa !2452
  %12151 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12152 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12153 = load i64, i64* %RBP
  %12154 = sub i64 %12153, 40
  %12155 = load i64, i64* %PC
  %12156 = add i64 %12155, 5
  store i64 %12156, i64* %PC
  %12157 = bitcast i8* %12152 to double*
  %12158 = load double, double* %12157, align 1
  %12159 = getelementptr inbounds i8, i8* %12152, i64 8
  %12160 = bitcast i8* %12159 to i64*
  %12161 = load i64, i64* %12160, align 1
  %12162 = inttoptr i64 %12154 to double*
  %12163 = load double, double* %12162
  %12164 = fmul double %12158, %12163
  %12165 = bitcast i8* %12151 to double*
  store double %12164, double* %12165, align 1, !tbaa !2452
  %12166 = getelementptr inbounds i8, i8* %12151, i64 8
  %12167 = bitcast i8* %12166 to i64*
  store i64 %12161, i64* %12167, align 1, !tbaa !2452
  %12168 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12169 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12170 = load i64, i64* %PC
  %12171 = add i64 %12170, 9
  store i64 %12171, i64* %PC
  %12172 = bitcast i8* %12169 to double*
  %12173 = load double, double* %12172, align 1
  %12174 = getelementptr inbounds i8, i8* %12169, i64 8
  %12175 = bitcast i8* %12174 to i64*
  %12176 = load i64, i64* %12175, align 1
  %12177 = load double, double* bitcast (%A3_type* @A3 to double*)
  %12178 = fadd double %12173, %12177
  %12179 = bitcast i8* %12168 to double*
  store double %12178, double* %12179, align 1, !tbaa !2452
  %12180 = getelementptr inbounds i8, i8* %12168, i64 8
  %12181 = bitcast i8* %12180 to i64*
  store i64 %12176, i64* %12181, align 1, !tbaa !2452
  %12182 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12183 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12184 = load i64, i64* %RBP
  %12185 = sub i64 %12184, 40
  %12186 = load i64, i64* %PC
  %12187 = add i64 %12186, 5
  store i64 %12187, i64* %PC
  %12188 = bitcast i8* %12183 to double*
  %12189 = load double, double* %12188, align 1
  %12190 = getelementptr inbounds i8, i8* %12183, i64 8
  %12191 = bitcast i8* %12190 to i64*
  %12192 = load i64, i64* %12191, align 1
  %12193 = inttoptr i64 %12185 to double*
  %12194 = load double, double* %12193
  %12195 = fmul double %12189, %12194
  %12196 = bitcast i8* %12182 to double*
  store double %12195, double* %12196, align 1, !tbaa !2452
  %12197 = getelementptr inbounds i8, i8* %12182, i64 8
  %12198 = bitcast i8* %12197 to i64*
  store i64 %12192, i64* %12198, align 1, !tbaa !2452
  %12199 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12200 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12201 = load i64, i64* %PC
  %12202 = add i64 %12201, 9
  store i64 %12202, i64* %PC
  %12203 = bitcast i8* %12200 to double*
  %12204 = load double, double* %12203, align 1
  %12205 = getelementptr inbounds i8, i8* %12200, i64 8
  %12206 = bitcast i8* %12205 to i64*
  %12207 = load i64, i64* %12206, align 1
  %12208 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %12209 = fadd double %12204, %12208
  %12210 = bitcast i8* %12199 to double*
  store double %12209, double* %12210, align 1, !tbaa !2452
  %12211 = getelementptr inbounds i8, i8* %12199, i64 8
  %12212 = bitcast i8* %12211 to i64*
  store i64 %12207, i64* %12212, align 1, !tbaa !2452
  %12213 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12214 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12215 = load i64, i64* %RBP
  %12216 = sub i64 %12215, 40
  %12217 = load i64, i64* %PC
  %12218 = add i64 %12217, 5
  store i64 %12218, i64* %PC
  %12219 = bitcast i8* %12214 to double*
  %12220 = load double, double* %12219, align 1
  %12221 = getelementptr inbounds i8, i8* %12214, i64 8
  %12222 = bitcast i8* %12221 to i64*
  %12223 = load i64, i64* %12222, align 1
  %12224 = inttoptr i64 %12216 to double*
  %12225 = load double, double* %12224
  %12226 = fmul double %12220, %12225
  %12227 = bitcast i8* %12213 to double*
  store double %12226, double* %12227, align 1, !tbaa !2452
  %12228 = getelementptr inbounds i8, i8* %12213, i64 8
  %12229 = bitcast i8* %12228 to i64*
  store i64 %12223, i64* %12229, align 1, !tbaa !2452
  %12230 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12231 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12232 = load i64, i64* %PC
  %12233 = add i64 %12232, 9
  store i64 %12233, i64* %PC
  %12234 = bitcast i8* %12231 to double*
  %12235 = load double, double* %12234, align 1
  %12236 = getelementptr inbounds i8, i8* %12231, i64 8
  %12237 = bitcast i8* %12236 to i64*
  %12238 = load i64, i64* %12237, align 1
  %12239 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %12240 = fadd double %12235, %12239
  %12241 = bitcast i8* %12230 to double*
  store double %12240, double* %12241, align 1, !tbaa !2452
  %12242 = getelementptr inbounds i8, i8* %12230, i64 8
  %12243 = bitcast i8* %12242 to i64*
  store i64 %12238, i64* %12243, align 1, !tbaa !2452
  %12244 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12245 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12246 = load i64, i64* %RBP
  %12247 = sub i64 %12246, 40
  %12248 = load i64, i64* %PC
  %12249 = add i64 %12248, 5
  store i64 %12249, i64* %PC
  %12250 = bitcast i8* %12245 to double*
  %12251 = load double, double* %12250, align 1
  %12252 = getelementptr inbounds i8, i8* %12245, i64 8
  %12253 = bitcast i8* %12252 to i64*
  %12254 = load i64, i64* %12253, align 1
  %12255 = inttoptr i64 %12247 to double*
  %12256 = load double, double* %12255
  %12257 = fmul double %12251, %12256
  %12258 = bitcast i8* %12244 to double*
  store double %12257, double* %12258, align 1, !tbaa !2452
  %12259 = getelementptr inbounds i8, i8* %12244, i64 8
  %12260 = bitcast i8* %12259 to i64*
  store i64 %12254, i64* %12260, align 1, !tbaa !2452
  %12261 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12262 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12263 = load i64, i64* %PC
  %12264 = add i64 %12263, 9
  store i64 %12264, i64* %PC
  %12265 = bitcast i8* %12262 to double*
  %12266 = load double, double* %12265, align 1
  %12267 = getelementptr inbounds i8, i8* %12262, i64 8
  %12268 = bitcast i8* %12267 to i64*
  %12269 = load i64, i64* %12268, align 1
  %12270 = load double, double* bitcast (%one_type* @one to double*)
  %12271 = fadd double %12266, %12270
  %12272 = bitcast i8* %12261 to double*
  store double %12271, double* %12272, align 1, !tbaa !2452
  %12273 = getelementptr inbounds i8, i8* %12261, i64 8
  %12274 = bitcast i8* %12273 to i64*
  store i64 %12269, i64* %12274, align 1, !tbaa !2452
  %12275 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12276 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12277 = bitcast %union.vec128_t* %XMM4 to i8*
  %12278 = load i64, i64* %PC
  %12279 = add i64 %12278, 4
  store i64 %12279, i64* %PC
  %12280 = bitcast i8* %12276 to double*
  %12281 = load double, double* %12280, align 1
  %12282 = getelementptr inbounds i8, i8* %12276, i64 8
  %12283 = bitcast i8* %12282 to i64*
  %12284 = load i64, i64* %12283, align 1
  %12285 = bitcast i8* %12277 to double*
  %12286 = load double, double* %12285, align 1
  %12287 = fmul double %12281, %12286
  %12288 = bitcast i8* %12275 to double*
  store double %12287, double* %12288, align 1, !tbaa !2452
  %12289 = getelementptr inbounds i8, i8* %12275, i64 8
  %12290 = bitcast i8* %12289 to i64*
  store i64 %12284, i64* %12290, align 1, !tbaa !2452
  %12291 = bitcast %union.vec128_t* %XMM3 to i8*
  %12292 = load i64, i64* %PC
  %12293 = add i64 %12292, 9
  store i64 %12293, i64* %PC
  %12294 = bitcast i8* %12291 to double*
  %12295 = load double, double* %12294, align 1
  store double %12295, double* bitcast (%sa_type* @sa to double*)
  %12296 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12297 = load i64, i64* %RBP
  %12298 = sub i64 %12297, 40
  %12299 = load i64, i64* %PC
  %12300 = add i64 %12299, 5
  store i64 %12300, i64* %PC
  %12301 = inttoptr i64 %12298 to double*
  %12302 = load double, double* %12301
  %12303 = bitcast i8* %12296 to double*
  store double %12302, double* %12303, align 1, !tbaa !2452
  %12304 = getelementptr inbounds i8, i8* %12296, i64 8
  %12305 = bitcast i8* %12304 to double*
  store double 0.000000e+00, double* %12305, align 1, !tbaa !2452
  %12306 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12307 = load i64, i64* %RBP
  %12308 = sub i64 %12307, 40
  %12309 = load i64, i64* %PC
  %12310 = add i64 %12309, 5
  store i64 %12310, i64* %PC
  %12311 = inttoptr i64 %12308 to double*
  %12312 = load double, double* %12311
  %12313 = bitcast i8* %12306 to double*
  store double %12312, double* %12313, align 1, !tbaa !2452
  %12314 = getelementptr inbounds i8, i8* %12306, i64 8
  %12315 = bitcast i8* %12314 to double*
  store double 0.000000e+00, double* %12315, align 1, !tbaa !2452
  %12316 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %12317 = load i64, i64* %RBP
  %12318 = sub i64 %12317, 40
  %12319 = load i64, i64* %PC
  %12320 = add i64 %12319, 5
  store i64 %12320, i64* %PC
  %12321 = inttoptr i64 %12318 to double*
  %12322 = load double, double* %12321
  %12323 = bitcast i8* %12316 to double*
  store double %12322, double* %12323, align 1, !tbaa !2452
  %12324 = getelementptr inbounds i8, i8* %12316, i64 8
  %12325 = bitcast i8* %12324 to double*
  store double 0.000000e+00, double* %12325, align 1, !tbaa !2452
  %12326 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %12327 = load i64, i64* %RBP
  %12328 = sub i64 %12327, 40
  %12329 = load i64, i64* %PC
  %12330 = add i64 %12329, 5
  store i64 %12330, i64* %PC
  %12331 = inttoptr i64 %12328 to double*
  %12332 = load double, double* %12331
  %12333 = bitcast i8* %12326 to double*
  store double %12332, double* %12333, align 1, !tbaa !2452
  %12334 = getelementptr inbounds i8, i8* %12326, i64 8
  %12335 = bitcast i8* %12334 to double*
  store double 0.000000e+00, double* %12335, align 1, !tbaa !2452
  %12336 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %12337 = load i64, i64* %RBP
  %12338 = sub i64 %12337, 40
  %12339 = load i64, i64* %PC
  %12340 = add i64 %12339, 5
  store i64 %12340, i64* %PC
  %12341 = inttoptr i64 %12338 to double*
  %12342 = load double, double* %12341
  %12343 = bitcast i8* %12336 to double*
  store double %12342, double* %12343, align 1, !tbaa !2452
  %12344 = getelementptr inbounds i8, i8* %12336, i64 8
  %12345 = bitcast i8* %12344 to double*
  store double 0.000000e+00, double* %12345, align 1, !tbaa !2452
  %12346 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %12347 = load i64, i64* %PC
  %12348 = add i64 %12347, 10
  store i64 %12348, i64* %PC
  %12349 = load double, double* bitcast (%B6_type* @B6 to double*)
  %12350 = bitcast i8* %12346 to double*
  store double %12349, double* %12350, align 1, !tbaa !2452
  %12351 = getelementptr inbounds i8, i8* %12346, i64 8
  %12352 = bitcast i8* %12351 to double*
  store double 0.000000e+00, double* %12352, align 1, !tbaa !2452
  %12353 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %12354 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %12355 = load i64, i64* %RBP
  %12356 = sub i64 %12355, 40
  %12357 = load i64, i64* %PC
  %12358 = add i64 %12357, 6
  store i64 %12358, i64* %PC
  %12359 = bitcast i8* %12354 to double*
  %12360 = load double, double* %12359, align 1
  %12361 = getelementptr inbounds i8, i8* %12354, i64 8
  %12362 = bitcast i8* %12361 to i64*
  %12363 = load i64, i64* %12362, align 1
  %12364 = inttoptr i64 %12356 to double*
  %12365 = load double, double* %12364
  %12366 = fmul double %12360, %12365
  %12367 = bitcast i8* %12353 to double*
  store double %12366, double* %12367, align 1, !tbaa !2452
  %12368 = getelementptr inbounds i8, i8* %12353, i64 8
  %12369 = bitcast i8* %12368 to i64*
  store i64 %12363, i64* %12369, align 1, !tbaa !2452
  %12370 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %12371 = bitcast %"class.std::bitset"* %YMM8 to i8*
  %12372 = load i64, i64* %PC
  %12373 = add i64 %12372, 10
  store i64 %12373, i64* %PC
  %12374 = bitcast i8* %12371 to double*
  %12375 = load double, double* %12374, align 1
  %12376 = getelementptr inbounds i8, i8* %12371, i64 8
  %12377 = bitcast i8* %12376 to i64*
  %12378 = load i64, i64* %12377, align 1
  %12379 = load double, double* bitcast (%B5_type* @B5 to double*)
  %12380 = fadd double %12375, %12379
  %12381 = bitcast i8* %12370 to double*
  store double %12380, double* %12381, align 1, !tbaa !2452
  %12382 = getelementptr inbounds i8, i8* %12370, i64 8
  %12383 = bitcast i8* %12382 to i64*
  store i64 %12378, i64* %12383, align 1, !tbaa !2452
  %12384 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %12385 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %12386 = bitcast %union.vec128_t* %XMM8 to i8*
  %12387 = load i64, i64* %PC
  %12388 = add i64 %12387, 5
  store i64 %12388, i64* %PC
  %12389 = bitcast i8* %12385 to double*
  %12390 = load double, double* %12389, align 1
  %12391 = getelementptr inbounds i8, i8* %12385, i64 8
  %12392 = bitcast i8* %12391 to i64*
  %12393 = load i64, i64* %12392, align 1
  %12394 = bitcast i8* %12386 to double*
  %12395 = load double, double* %12394, align 1
  %12396 = fmul double %12390, %12395
  %12397 = bitcast i8* %12384 to double*
  store double %12396, double* %12397, align 1, !tbaa !2452
  %12398 = getelementptr inbounds i8, i8* %12384, i64 8
  %12399 = bitcast i8* %12398 to i64*
  store i64 %12393, i64* %12399, align 1, !tbaa !2452
  %12400 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %12401 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %12402 = load i64, i64* %PC
  %12403 = add i64 %12402, 9
  store i64 %12403, i64* %PC
  %12404 = bitcast i8* %12401 to double*
  %12405 = load double, double* %12404, align 1
  %12406 = getelementptr inbounds i8, i8* %12401, i64 8
  %12407 = bitcast i8* %12406 to i64*
  %12408 = load i64, i64* %12407, align 1
  %12409 = load double, double* bitcast (%B4_type* @B4 to double*)
  %12410 = fadd double %12405, %12409
  %12411 = bitcast i8* %12400 to double*
  store double %12410, double* %12411, align 1, !tbaa !2452
  %12412 = getelementptr inbounds i8, i8* %12400, i64 8
  %12413 = bitcast i8* %12412 to i64*
  store i64 %12408, i64* %12413, align 1, !tbaa !2452
  %12414 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %12415 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %12416 = bitcast %union.vec128_t* %XMM7 to i8*
  %12417 = load i64, i64* %PC
  %12418 = add i64 %12417, 4
  store i64 %12418, i64* %PC
  %12419 = bitcast i8* %12415 to double*
  %12420 = load double, double* %12419, align 1
  %12421 = getelementptr inbounds i8, i8* %12415, i64 8
  %12422 = bitcast i8* %12421 to i64*
  %12423 = load i64, i64* %12422, align 1
  %12424 = bitcast i8* %12416 to double*
  %12425 = load double, double* %12424, align 1
  %12426 = fmul double %12420, %12425
  %12427 = bitcast i8* %12414 to double*
  store double %12426, double* %12427, align 1, !tbaa !2452
  %12428 = getelementptr inbounds i8, i8* %12414, i64 8
  %12429 = bitcast i8* %12428 to i64*
  store i64 %12423, i64* %12429, align 1, !tbaa !2452
  %12430 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %12431 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %12432 = load i64, i64* %PC
  %12433 = add i64 %12432, 9
  store i64 %12433, i64* %PC
  %12434 = bitcast i8* %12431 to double*
  %12435 = load double, double* %12434, align 1
  %12436 = getelementptr inbounds i8, i8* %12431, i64 8
  %12437 = bitcast i8* %12436 to i64*
  %12438 = load i64, i64* %12437, align 1
  %12439 = load double, double* bitcast (%B3_type* @B3 to double*)
  %12440 = fadd double %12435, %12439
  %12441 = bitcast i8* %12430 to double*
  store double %12440, double* %12441, align 1, !tbaa !2452
  %12442 = getelementptr inbounds i8, i8* %12430, i64 8
  %12443 = bitcast i8* %12442 to i64*
  store i64 %12438, i64* %12443, align 1, !tbaa !2452
  %12444 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %12445 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %12446 = bitcast %union.vec128_t* %XMM6 to i8*
  %12447 = load i64, i64* %PC
  %12448 = add i64 %12447, 4
  store i64 %12448, i64* %PC
  %12449 = bitcast i8* %12445 to double*
  %12450 = load double, double* %12449, align 1
  %12451 = getelementptr inbounds i8, i8* %12445, i64 8
  %12452 = bitcast i8* %12451 to i64*
  %12453 = load i64, i64* %12452, align 1
  %12454 = bitcast i8* %12446 to double*
  %12455 = load double, double* %12454, align 1
  %12456 = fmul double %12450, %12455
  %12457 = bitcast i8* %12444 to double*
  store double %12456, double* %12457, align 1, !tbaa !2452
  %12458 = getelementptr inbounds i8, i8* %12444, i64 8
  %12459 = bitcast i8* %12458 to i64*
  store i64 %12453, i64* %12459, align 1, !tbaa !2452
  %12460 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %12461 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %12462 = load i64, i64* %PC
  %12463 = add i64 %12462, 9
  store i64 %12463, i64* %PC
  %12464 = bitcast i8* %12461 to double*
  %12465 = load double, double* %12464, align 1
  %12466 = getelementptr inbounds i8, i8* %12461, i64 8
  %12467 = bitcast i8* %12466 to i64*
  %12468 = load i64, i64* %12467, align 1
  %12469 = load double, double* bitcast (%B2_type* @B2 to double*)
  %12470 = fadd double %12465, %12469
  %12471 = bitcast i8* %12460 to double*
  store double %12470, double* %12471, align 1, !tbaa !2452
  %12472 = getelementptr inbounds i8, i8* %12460, i64 8
  %12473 = bitcast i8* %12472 to i64*
  store i64 %12468, i64* %12473, align 1, !tbaa !2452
  %12474 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12475 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12476 = bitcast %union.vec128_t* %XMM5 to i8*
  %12477 = load i64, i64* %PC
  %12478 = add i64 %12477, 4
  store i64 %12478, i64* %PC
  %12479 = bitcast i8* %12475 to double*
  %12480 = load double, double* %12479, align 1
  %12481 = getelementptr inbounds i8, i8* %12475, i64 8
  %12482 = bitcast i8* %12481 to i64*
  %12483 = load i64, i64* %12482, align 1
  %12484 = bitcast i8* %12476 to double*
  %12485 = load double, double* %12484, align 1
  %12486 = fmul double %12480, %12485
  %12487 = bitcast i8* %12474 to double*
  store double %12486, double* %12487, align 1, !tbaa !2452
  %12488 = getelementptr inbounds i8, i8* %12474, i64 8
  %12489 = bitcast i8* %12488 to i64*
  store i64 %12483, i64* %12489, align 1, !tbaa !2452
  %12490 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12491 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12492 = load i64, i64* %PC
  %12493 = add i64 %12492, 9
  store i64 %12493, i64* %PC
  %12494 = bitcast i8* %12491 to double*
  %12495 = load double, double* %12494, align 1
  %12496 = getelementptr inbounds i8, i8* %12491, i64 8
  %12497 = bitcast i8* %12496 to i64*
  %12498 = load i64, i64* %12497, align 1
  %12499 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %12500 = fadd double %12495, %12499
  %12501 = bitcast i8* %12490 to double*
  store double %12500, double* %12501, align 1, !tbaa !2452
  %12502 = getelementptr inbounds i8, i8* %12490, i64 8
  %12503 = bitcast i8* %12502 to i64*
  store i64 %12498, i64* %12503, align 1, !tbaa !2452
  %12504 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12505 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12506 = bitcast %union.vec128_t* %XMM4 to i8*
  %12507 = load i64, i64* %PC
  %12508 = add i64 %12507, 4
  store i64 %12508, i64* %PC
  %12509 = bitcast i8* %12505 to double*
  %12510 = load double, double* %12509, align 1
  %12511 = getelementptr inbounds i8, i8* %12505, i64 8
  %12512 = bitcast i8* %12511 to i64*
  %12513 = load i64, i64* %12512, align 1
  %12514 = bitcast i8* %12506 to double*
  %12515 = load double, double* %12514, align 1
  %12516 = fmul double %12510, %12515
  %12517 = bitcast i8* %12504 to double*
  store double %12516, double* %12517, align 1, !tbaa !2452
  %12518 = getelementptr inbounds i8, i8* %12504, i64 8
  %12519 = bitcast i8* %12518 to i64*
  store i64 %12513, i64* %12519, align 1, !tbaa !2452
  %12520 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12521 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12522 = load i64, i64* %PC
  %12523 = add i64 %12522, 9
  store i64 %12523, i64* %PC
  %12524 = bitcast i8* %12521 to double*
  %12525 = load double, double* %12524, align 1
  %12526 = getelementptr inbounds i8, i8* %12521, i64 8
  %12527 = bitcast i8* %12526 to i64*
  %12528 = load i64, i64* %12527, align 1
  %12529 = load double, double* bitcast (%one_type* @one to double*)
  %12530 = fadd double %12525, %12529
  %12531 = bitcast i8* %12520 to double*
  store double %12530, double* %12531, align 1, !tbaa !2452
  %12532 = getelementptr inbounds i8, i8* %12520, i64 8
  %12533 = bitcast i8* %12532 to i64*
  store i64 %12528, i64* %12533, align 1, !tbaa !2452
  %12534 = bitcast %union.vec128_t* %XMM3 to i8*
  %12535 = load i64, i64* %PC
  %12536 = add i64 %12535, 9
  store i64 %12536, i64* %PC
  %12537 = bitcast i8* %12534 to double*
  %12538 = load double, double* %12537, align 1
  store double %12538, double* bitcast (%sb_type* @sb to double*)
  %12539 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12540 = load i64, i64* %PC
  %12541 = add i64 %12540, 9
  store i64 %12541, i64* %PC
  %12542 = load double, double* bitcast (%sa_type* @sa to double*)
  %12543 = bitcast i8* %12539 to double*
  store double %12542, double* %12543, align 1, !tbaa !2452
  %12544 = getelementptr inbounds i8, i8* %12539, i64 8
  %12545 = bitcast i8* %12544 to double*
  store double 0.000000e+00, double* %12545, align 1, !tbaa !2452
  %12546 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12547 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12548 = load i64, i64* %PC
  %12549 = add i64 %12548, 9
  store i64 %12549, i64* %PC
  %12550 = bitcast i8* %12547 to double*
  %12551 = load double, double* %12550, align 1
  %12552 = getelementptr inbounds i8, i8* %12547, i64 8
  %12553 = bitcast i8* %12552 to i64*
  %12554 = load i64, i64* %12553, align 1
  %12555 = load double, double* bitcast (%sb_type* @sb to double*)
  %12556 = fmul double %12551, %12555
  %12557 = bitcast i8* %12546 to double*
  store double %12556, double* %12557, align 1, !tbaa !2452
  %12558 = getelementptr inbounds i8, i8* %12546, i64 8
  %12559 = bitcast i8* %12558 to i64*
  store i64 %12554, i64* %12559, align 1, !tbaa !2452
  %12560 = bitcast %union.vec128_t* %XMM3 to i8*
  %12561 = load i64, i64* %PC
  %12562 = add i64 %12561, 9
  store i64 %12562, i64* %PC
  %12563 = bitcast i8* %12560 to double*
  %12564 = load double, double* %12563, align 1
  store double %12564, double* bitcast (%sa_type* @sa to double*)
  %12565 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12566 = load i64, i64* %PC
  %12567 = add i64 %12566, 9
  store i64 %12567, i64* %PC
  %12568 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %12569 = bitcast i8* %12565 to double*
  store double %12568, double* %12569, align 1, !tbaa !2452
  %12570 = getelementptr inbounds i8, i8* %12565, i64 8
  %12571 = bitcast i8* %12570 to double*
  store double 0.000000e+00, double* %12571, align 1, !tbaa !2452
  %12572 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12573 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12574 = bitcast %union.vec128_t* %XMM2 to i8*
  %12575 = load i64, i64* %PC
  %12576 = add i64 %12575, 4
  store i64 %12576, i64* %PC
  %12577 = bitcast i8* %12573 to double*
  %12578 = load double, double* %12577, align 1
  %12579 = getelementptr inbounds i8, i8* %12573, i64 8
  %12580 = bitcast i8* %12579 to i64*
  %12581 = load i64, i64* %12580, align 1
  %12582 = bitcast i8* %12574 to double*
  %12583 = load double, double* %12582, align 1
  %12584 = fdiv double %12578, %12583
  %12585 = bitcast i8* %12572 to double*
  store double %12584, double* %12585, align 1, !tbaa !2452
  %12586 = getelementptr inbounds i8, i8* %12572, i64 8
  %12587 = bitcast i8* %12586 to i64*
  store i64 %12581, i64* %12587, align 1, !tbaa !2452
  %12588 = bitcast %union.vec128_t* %XMM3 to i8*
  %12589 = load i64, i64* %PC
  %12590 = add i64 %12589, 9
  store i64 %12590, i64* %PC
  %12591 = bitcast i8* %12588 to double*
  %12592 = load double, double* %12591, align 1
  store double %12592, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 152) to double*)
  %12593 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12594 = load i64, i64* %RBP
  %12595 = sub i64 %12594, 48
  %12596 = load i64, i64* %PC
  %12597 = add i64 %12596, 5
  store i64 %12597, i64* %PC
  %12598 = inttoptr i64 %12595 to double*
  %12599 = load double, double* %12598
  %12600 = bitcast i8* %12593 to double*
  store double %12599, double* %12600, align 1, !tbaa !2452
  %12601 = getelementptr inbounds i8, i8* %12593, i64 8
  %12602 = bitcast i8* %12601 to double*
  store double 0.000000e+00, double* %12602, align 1, !tbaa !2452
  %12603 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12604 = load i64, i64* %PC
  %12605 = add i64 %12604, 9
  store i64 %12605, i64* %PC
  %12606 = load double, double* bitcast (%sa_type* @sa to double*)
  %12607 = bitcast i8* %12603 to double*
  store double %12606, double* %12607, align 1, !tbaa !2452
  %12608 = getelementptr inbounds i8, i8* %12603, i64 8
  %12609 = bitcast i8* %12608 to double*
  store double 0.000000e+00, double* %12609, align 1, !tbaa !2452
  %12610 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12611 = load i64, i64* %PC
  %12612 = add i64 %12611, 9
  store i64 %12612, i64* %PC
  %12613 = load double, double* bitcast (%two_type* @two to double*)
  %12614 = bitcast i8* %12610 to double*
  store double %12613, double* %12614, align 1, !tbaa !2452
  %12615 = getelementptr inbounds i8, i8* %12610, i64 8
  %12616 = bitcast i8* %12615 to double*
  store double 0.000000e+00, double* %12616, align 1, !tbaa !2452
  %12617 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12618 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %12619 = load i64, i64* %RBP
  %12620 = sub i64 %12619, 16
  %12621 = load i64, i64* %PC
  %12622 = add i64 %12621, 5
  store i64 %12622, i64* %PC
  %12623 = bitcast i8* %12618 to double*
  %12624 = load double, double* %12623, align 1
  %12625 = getelementptr inbounds i8, i8* %12618, i64 8
  %12626 = bitcast i8* %12625 to i64*
  %12627 = load i64, i64* %12626, align 1
  %12628 = inttoptr i64 %12620 to double*
  %12629 = load double, double* %12628
  %12630 = fmul double %12624, %12629
  %12631 = bitcast i8* %12617 to double*
  store double %12630, double* %12631, align 1, !tbaa !2452
  %12632 = getelementptr inbounds i8, i8* %12617, i64 8
  %12633 = bitcast i8* %12632 to i64*
  store i64 %12627, i64* %12633, align 1, !tbaa !2452
  %12634 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12635 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %12636 = bitcast %union.vec128_t* %XMM4 to i8*
  %12637 = load i64, i64* %PC
  %12638 = add i64 %12637, 4
  store i64 %12638, i64* %PC
  %12639 = bitcast i8* %12635 to double*
  %12640 = load double, double* %12639, align 1
  %12641 = getelementptr inbounds i8, i8* %12635, i64 8
  %12642 = bitcast i8* %12641 to i64*
  %12643 = load i64, i64* %12642, align 1
  %12644 = bitcast i8* %12636 to double*
  %12645 = load double, double* %12644, align 1
  %12646 = fadd double %12640, %12645
  %12647 = bitcast i8* %12634 to double*
  store double %12646, double* %12647, align 1, !tbaa !2452
  %12648 = getelementptr inbounds i8, i8* %12634, i64 8
  %12649 = bitcast i8* %12648 to i64*
  store i64 %12643, i64* %12649, align 1, !tbaa !2452
  %12650 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12651 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12652 = bitcast %union.vec128_t* %XMM3 to i8*
  %12653 = load i64, i64* %PC
  %12654 = add i64 %12653, 4
  store i64 %12654, i64* %PC
  %12655 = bitcast i8* %12651 to double*
  %12656 = load double, double* %12655, align 1
  %12657 = getelementptr inbounds i8, i8* %12651, i64 8
  %12658 = bitcast i8* %12657 to i64*
  %12659 = load i64, i64* %12658, align 1
  %12660 = bitcast i8* %12652 to double*
  %12661 = load double, double* %12660, align 1
  %12662 = fmul double %12656, %12661
  %12663 = bitcast i8* %12650 to double*
  store double %12662, double* %12663, align 1, !tbaa !2452
  %12664 = getelementptr inbounds i8, i8* %12650, i64 8
  %12665 = bitcast i8* %12664 to i64*
  store i64 %12659, i64* %12665, align 1, !tbaa !2452
  %12666 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12667 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12668 = load i64, i64* %PC
  %12669 = add i64 %12668, 9
  store i64 %12669, i64* %PC
  %12670 = bitcast i8* %12667 to double*
  %12671 = load double, double* %12670, align 1
  %12672 = getelementptr inbounds i8, i8* %12667, i64 8
  %12673 = bitcast i8* %12672 to i64*
  %12674 = load i64, i64* %12673, align 1
  %12675 = load double, double* bitcast (%two_type* @two to double*)
  %12676 = fdiv double %12671, %12675
  %12677 = bitcast i8* %12666 to double*
  store double %12676, double* %12677, align 1, !tbaa !2452
  %12678 = getelementptr inbounds i8, i8* %12666, i64 8
  %12679 = bitcast i8* %12678 to i64*
  store i64 %12674, i64* %12679, align 1, !tbaa !2452
  %12680 = bitcast %union.vec128_t* %XMM2 to i8*
  %12681 = load i64, i64* %PC
  %12682 = add i64 %12681, 9
  store i64 %12682, i64* %PC
  %12683 = bitcast i8* %12680 to double*
  %12684 = load double, double* %12683, align 1
  store double %12684, double* bitcast (%sa_type* @sa to double*)
  %12685 = bitcast %union.vec128_t* %XMM1 to i8*
  %12686 = load i64, i64* %PC
  %12687 = add i64 %12686, 9
  store i64 %12687, i64* %PC
  %12688 = bitcast i8* %12685 to double*
  %12689 = load double, double* %12688, align 1
  store double %12689, double* bitcast (%sb_type* @sb to double*)
  %12690 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12691 = load i64, i64* %PC
  %12692 = add i64 %12691, 9
  store i64 %12692, i64* %PC
  %12693 = load double, double* bitcast (%sa_type* @sa to double*)
  %12694 = bitcast i8* %12690 to double*
  store double %12693, double* %12694, align 1, !tbaa !2452
  %12695 = getelementptr inbounds i8, i8* %12690, i64 8
  %12696 = bitcast i8* %12695 to double*
  store double 0.000000e+00, double* %12696, align 1, !tbaa !2452
  %12697 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12698 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12699 = load i64, i64* %PC
  %12700 = add i64 %12699, 9
  store i64 %12700, i64* %PC
  %12701 = bitcast i8* %12698 to double*
  %12702 = load double, double* %12701, align 1
  %12703 = getelementptr inbounds i8, i8* %12698, i64 8
  %12704 = bitcast i8* %12703 to i64*
  %12705 = load i64, i64* %12704, align 1
  %12706 = load double, double* bitcast (%sb_type* @sb to double*)
  %12707 = fsub double %12702, %12706
  %12708 = bitcast i8* %12697 to double*
  store double %12707, double* %12708, align 1, !tbaa !2452
  %12709 = getelementptr inbounds i8, i8* %12697, i64 8
  %12710 = bitcast i8* %12709 to i64*
  store i64 %12705, i64* %12710, align 1, !tbaa !2452
  %12711 = bitcast %union.vec128_t* %XMM1 to i8*
  %12712 = load i64, i64* %PC
  %12713 = add i64 %12712, 9
  store i64 %12713, i64* %PC
  %12714 = bitcast i8* %12711 to double*
  %12715 = load double, double* %12714, align 1
  store double %12715, double* bitcast (%sc_type* @sc to double*)
  %12716 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12717 = load i64, i64* %PC
  %12718 = add i64 %12717, 9
  store i64 %12718, i64* %PC
  %12719 = load double, double* bitcast (%one_type* @one to double*)
  %12720 = bitcast i8* %12716 to double*
  store double %12719, double* %12720, align 1, !tbaa !2452
  %12721 = getelementptr inbounds i8, i8* %12716, i64 8
  %12722 = bitcast i8* %12721 to double*
  store double 0.000000e+00, double* %12722, align 1, !tbaa !2452
  %12723 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12724 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12725 = load i64, i64* %PC
  %12726 = add i64 %12725, 9
  store i64 %12726, i64* %PC
  %12727 = bitcast i8* %12724 to double*
  %12728 = load double, double* %12727, align 1
  %12729 = getelementptr inbounds i8, i8* %12724, i64 8
  %12730 = bitcast i8* %12729 to i64*
  %12731 = load i64, i64* %12730, align 1
  %12732 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 152) to double*)
  %12733 = fdiv double %12728, %12732
  %12734 = bitcast i8* %12723 to double*
  store double %12733, double* %12734, align 1, !tbaa !2452
  %12735 = getelementptr inbounds i8, i8* %12723, i64 8
  %12736 = bitcast i8* %12735 to i64*
  store i64 %12731, i64* %12736, align 1, !tbaa !2452
  %12737 = bitcast %union.vec128_t* %XMM1 to i8*
  %12738 = load i64, i64* %PC
  %12739 = add i64 %12738, 9
  store i64 %12739, i64* %PC
  %12740 = bitcast i8* %12737 to double*
  %12741 = load double, double* %12740, align 1
  store double %12741, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 160) to double*)
  %12742 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12743 = bitcast %union.vec128_t* %XMM0 to i8*
  %12744 = load i64, i64* %PC
  %12745 = add i64 %12744, 3
  store i64 %12745, i64* %PC
  %12746 = bitcast i8* %12743 to <2 x i32>*
  %12747 = load <2 x i32>, <2 x i32>* %12746, align 1
  %12748 = getelementptr inbounds i8, i8* %12743, i64 8
  %12749 = bitcast i8* %12748 to <2 x i32>*
  %12750 = load <2 x i32>, <2 x i32>* %12749, align 1
  %12751 = extractelement <2 x i32> %12747, i32 0
  %12752 = bitcast i8* %12742 to i32*
  store i32 %12751, i32* %12752, align 1, !tbaa !2455
  %12753 = extractelement <2 x i32> %12747, i32 1
  %12754 = getelementptr inbounds i8, i8* %12742, i64 4
  %12755 = bitcast i8* %12754 to i32*
  store i32 %12753, i32* %12755, align 1, !tbaa !2455
  %12756 = extractelement <2 x i32> %12750, i32 0
  %12757 = getelementptr inbounds i8, i8* %12742, i64 8
  %12758 = bitcast i8* %12757 to i32*
  store i32 %12756, i32* %12758, align 1, !tbaa !2455
  %12759 = extractelement <2 x i32> %12750, i32 1
  %12760 = getelementptr inbounds i8, i8* %12742, i64 12
  %12761 = bitcast i8* %12760 to i32*
  store i32 %12759, i32* %12761, align 1, !tbaa !2455
  %12762 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12763 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12764 = load i64, i64* %PC
  %12765 = add i64 %12764, 9
  store i64 %12765, i64* %PC
  %12766 = bitcast i8* %12763 to double*
  %12767 = load double, double* %12766, align 1
  %12768 = getelementptr inbounds i8, i8* %12763, i64 8
  %12769 = bitcast i8* %12768 to i64*
  %12770 = load i64, i64* %12769, align 1
  %12771 = load double, double* bitcast (%sc_type* @sc to double*)
  %12772 = fmul double %12767, %12771
  %12773 = bitcast i8* %12762 to double*
  store double %12772, double* %12773, align 1, !tbaa !2452
  %12774 = getelementptr inbounds i8, i8* %12762, i64 8
  %12775 = bitcast i8* %12774 to i64*
  store i64 %12770, i64* %12775, align 1, !tbaa !2452
  %12776 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12777 = bitcast %union.vec128_t* %XMM0 to i8*
  %12778 = load i64, i64* %PC
  %12779 = add i64 %12778, 3
  store i64 %12779, i64* %PC
  %12780 = bitcast i8* %12777 to <2 x i32>*
  %12781 = load <2 x i32>, <2 x i32>* %12780, align 1
  %12782 = getelementptr inbounds i8, i8* %12777, i64 8
  %12783 = bitcast i8* %12782 to <2 x i32>*
  %12784 = load <2 x i32>, <2 x i32>* %12783, align 1
  %12785 = extractelement <2 x i32> %12781, i32 0
  %12786 = bitcast i8* %12776 to i32*
  store i32 %12785, i32* %12786, align 1, !tbaa !2455
  %12787 = extractelement <2 x i32> %12781, i32 1
  %12788 = getelementptr inbounds i8, i8* %12776, i64 4
  %12789 = bitcast i8* %12788 to i32*
  store i32 %12787, i32* %12789, align 1, !tbaa !2455
  %12790 = extractelement <2 x i32> %12784, i32 0
  %12791 = getelementptr inbounds i8, i8* %12776, i64 8
  %12792 = bitcast i8* %12791 to i32*
  store i32 %12790, i32* %12792, align 1, !tbaa !2455
  %12793 = extractelement <2 x i32> %12784, i32 1
  %12794 = getelementptr inbounds i8, i8* %12776, i64 12
  %12795 = bitcast i8* %12794 to i32*
  store i32 %12793, i32* %12795, align 1, !tbaa !2455
  %12796 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12797 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12798 = load i64, i64* %PC
  %12799 = add i64 %12798, 9
  store i64 %12799, i64* %PC
  %12800 = bitcast i8* %12797 to double*
  %12801 = load double, double* %12800, align 1
  %12802 = getelementptr inbounds i8, i8* %12797, i64 8
  %12803 = bitcast i8* %12802 to i64*
  %12804 = load i64, i64* %12803, align 1
  %12805 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 144) to double*)
  %12806 = fmul double %12801, %12805
  %12807 = bitcast i8* %12796 to double*
  store double %12806, double* %12807, align 1, !tbaa !2452
  %12808 = getelementptr inbounds i8, i8* %12796, i64 8
  %12809 = bitcast i8* %12808 to i64*
  store i64 %12804, i64* %12809, align 1, !tbaa !2452
  %12810 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12811 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12812 = load i64, i64* %PC
  %12813 = add i64 %12812, 9
  store i64 %12813, i64* %PC
  %12814 = bitcast i8* %12811 to double*
  %12815 = load double, double* %12814, align 1
  %12816 = getelementptr inbounds i8, i8* %12811, i64 8
  %12817 = bitcast i8* %12816 to i64*
  %12818 = load i64, i64* %12817, align 1
  %12819 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 160) to double*)
  %12820 = fmul double %12815, %12819
  %12821 = bitcast i8* %12810 to double*
  store double %12820, double* %12821, align 1, !tbaa !2452
  %12822 = getelementptr inbounds i8, i8* %12810, i64 8
  %12823 = bitcast i8* %12822 to i64*
  store i64 %12818, i64* %12823, align 1, !tbaa !2452
  %12824 = load i64, i64* %RBP
  %12825 = sub i64 %12824, 256
  %12826 = bitcast %union.vec128_t* %XMM0 to i8*
  %12827 = load i64, i64* %PC
  %12828 = add i64 %12827, 8
  store i64 %12828, i64* %PC
  %12829 = bitcast i8* %12826 to double*
  %12830 = load double, double* %12829, align 1
  %12831 = inttoptr i64 %12825 to double*
  store double %12830, double* %12831
  %12832 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12833 = bitcast %union.vec128_t* %XMM1 to i8*
  %12834 = load i64, i64* %PC
  %12835 = add i64 %12834, 3
  store i64 %12835, i64* %PC
  %12836 = bitcast i8* %12833 to <2 x i32>*
  %12837 = load <2 x i32>, <2 x i32>* %12836, align 1
  %12838 = getelementptr inbounds i8, i8* %12833, i64 8
  %12839 = bitcast i8* %12838 to <2 x i32>*
  %12840 = load <2 x i32>, <2 x i32>* %12839, align 1
  %12841 = extractelement <2 x i32> %12837, i32 0
  %12842 = bitcast i8* %12832 to i32*
  store i32 %12841, i32* %12842, align 1, !tbaa !2455
  %12843 = extractelement <2 x i32> %12837, i32 1
  %12844 = getelementptr inbounds i8, i8* %12832, i64 4
  %12845 = bitcast i8* %12844 to i32*
  store i32 %12843, i32* %12845, align 1, !tbaa !2455
  %12846 = extractelement <2 x i32> %12840, i32 0
  %12847 = getelementptr inbounds i8, i8* %12832, i64 8
  %12848 = bitcast i8* %12847 to i32*
  store i32 %12846, i32* %12848, align 1, !tbaa !2455
  %12849 = extractelement <2 x i32> %12840, i32 1
  %12850 = getelementptr inbounds i8, i8* %12832, i64 12
  %12851 = bitcast i8* %12850 to i32*
  store i32 %12849, i32* %12851, align 1, !tbaa !2455
  %12852 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12853 = bitcast %union.vec128_t* %XMM2 to i8*
  %12854 = load i64, i64* %PC
  %12855 = add i64 %12854, 3
  store i64 %12855, i64* %PC
  %12856 = bitcast i8* %12853 to <2 x i32>*
  %12857 = load <2 x i32>, <2 x i32>* %12856, align 1
  %12858 = getelementptr inbounds i8, i8* %12853, i64 8
  %12859 = bitcast i8* %12858 to <2 x i32>*
  %12860 = load <2 x i32>, <2 x i32>* %12859, align 1
  %12861 = extractelement <2 x i32> %12857, i32 0
  %12862 = bitcast i8* %12852 to i32*
  store i32 %12861, i32* %12862, align 1, !tbaa !2455
  %12863 = extractelement <2 x i32> %12857, i32 1
  %12864 = getelementptr inbounds i8, i8* %12852, i64 4
  %12865 = bitcast i8* %12864 to i32*
  store i32 %12863, i32* %12865, align 1, !tbaa !2455
  %12866 = extractelement <2 x i32> %12860, i32 0
  %12867 = getelementptr inbounds i8, i8* %12852, i64 8
  %12868 = bitcast i8* %12867 to i32*
  store i32 %12866, i32* %12868, align 1, !tbaa !2455
  %12869 = extractelement <2 x i32> %12860, i32 1
  %12870 = getelementptr inbounds i8, i8* %12852, i64 12
  %12871 = bitcast i8* %12870 to i32*
  store i32 %12869, i32* %12871, align 1, !tbaa !2455
  %12872 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %12873 = load i64, i64* %RBP
  %12874 = sub i64 %12873, 256
  %12875 = load i64, i64* %PC
  %12876 = add i64 %12875, 8
  store i64 %12876, i64* %PC
  %12877 = inttoptr i64 %12874 to double*
  %12878 = load double, double* %12877
  %12879 = bitcast i8* %12872 to double*
  store double %12878, double* %12879, align 1, !tbaa !2452
  %12880 = getelementptr inbounds i8, i8* %12872, i64 8
  %12881 = bitcast i8* %12880 to double*
  store double 0.000000e+00, double* %12881, align 1, !tbaa !2452
  %12882 = load i64, i64* %RBP
  %12883 = sub i64 %12882, 260
  %12884 = load i32, i32* %EAX
  %12885 = zext i32 %12884 to i64
  %12886 = load i64, i64* %PC
  %12887 = add i64 %12886, 6
  store i64 %12887, i64* %PC
  %12888 = inttoptr i64 %12883 to i32*
  store i32 %12884, i32* %12888
  %12889 = load i64, i64* %PC
  %12890 = add i64 %12889, 2
  store i64 %12890, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %12891 = load i64, i64* %PC
  %12892 = sub i64 %12891, 6163
  %12893 = load i64, i64* %PC
  %12894 = add i64 %12893, 5
  %12895 = load i64, i64* %PC
  %12896 = add i64 %12895, 5
  store i64 %12896, i64* %PC
  %12897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %12898 = load i64, i64* %12897, align 8, !tbaa !2428
  %12899 = add i64 %12898, -8
  %12900 = inttoptr i64 %12899 to i64*
  store i64 %12894, i64* %12900
  store i64 %12899, i64* %12897, align 8, !tbaa !2428
  %12901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %12892, i64* %12901, align 8, !tbaa !2428
  %12902 = load i64, i64* %PC
  %12903 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %12902, %struct.Memory* %11944)
  %12904 = load i64, i64* %PC
  %12905 = add i64 %12904, 10
  store i64 %12905, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %12906 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12907 = load i64, i64* %PC
  %12908 = add i64 %12907, 8
  store i64 %12908, i64* %PC
  %12909 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 152) to double*)
  %12910 = bitcast i8* %12906 to double*
  store double %12909, double* %12910, align 1, !tbaa !2452
  %12911 = getelementptr inbounds i8, i8* %12906, i64 8
  %12912 = bitcast i8* %12911 to double*
  store double 0.000000e+00, double* %12912, align 1, !tbaa !2452
  %12913 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12914 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12915 = bitcast %union.vec128_t* %XMM1 to i8*
  %12916 = load i64, i64* %PC
  %12917 = add i64 %12916, 3
  store i64 %12917, i64* %PC
  %12918 = bitcast i8* %12914 to i64*
  %12919 = load i64, i64* %12918, align 1
  %12920 = getelementptr inbounds i8, i8* %12914, i64 8
  %12921 = bitcast i8* %12920 to i64*
  %12922 = load i64, i64* %12921, align 1
  %12923 = bitcast i8* %12915 to i64*
  %12924 = load i64, i64* %12923, align 1
  %12925 = getelementptr inbounds i8, i8* %12915, i64 8
  %12926 = bitcast i8* %12925 to i64*
  %12927 = load i64, i64* %12926, align 1
  %12928 = xor i64 %12924, %12919
  %12929 = xor i64 %12927, %12922
  %12930 = trunc i64 %12928 to i32
  %12931 = lshr i64 %12928, 32
  %12932 = trunc i64 %12931 to i32
  %12933 = bitcast i8* %12913 to i32*
  store i32 %12930, i32* %12933, align 1, !tbaa !2454
  %12934 = getelementptr inbounds i8, i8* %12913, i64 4
  %12935 = bitcast i8* %12934 to i32*
  store i32 %12932, i32* %12935, align 1, !tbaa !2454
  %12936 = trunc i64 %12929 to i32
  %12937 = getelementptr inbounds i8, i8* %12913, i64 8
  %12938 = bitcast i8* %12937 to i32*
  store i32 %12936, i32* %12938, align 1, !tbaa !2454
  %12939 = lshr i64 %12929, 32
  %12940 = trunc i64 %12939 to i32
  %12941 = getelementptr inbounds i8, i8* %12913, i64 12
  %12942 = bitcast i8* %12941 to i32*
  store i32 %12940, i32* %12942, align 1, !tbaa !2454
  %12943 = load i64, i64* %RBP
  %12944 = sub i64 %12943, 16
  %12945 = bitcast %union.vec128_t* %XMM1 to i8*
  %12946 = load i64, i64* %PC
  %12947 = add i64 %12946, 5
  store i64 %12947, i64* %PC
  %12948 = bitcast i8* %12945 to double*
  %12949 = load double, double* %12948, align 1
  %12950 = inttoptr i64 %12944 to double*
  store double %12949, double* %12950
  %12951 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12952 = load i64, i64* %PC
  %12953 = add i64 %12952, 9
  store i64 %12953, i64* %PC
  %12954 = load double, double* bitcast (%one_type* @one to double*)
  %12955 = bitcast i8* %12951 to double*
  store double %12954, double* %12955, align 1, !tbaa !2452
  %12956 = getelementptr inbounds i8, i8* %12951, i64 8
  %12957 = bitcast i8* %12956 to double*
  store double 0.000000e+00, double* %12957, align 1, !tbaa !2452
  %12958 = load i64, i64* %RBP
  %12959 = sub i64 %12958, 40
  %12960 = bitcast %union.vec128_t* %XMM1 to i8*
  %12961 = load i64, i64* %PC
  %12962 = add i64 %12961, 5
  store i64 %12962, i64* %PC
  %12963 = bitcast i8* %12960 to double*
  %12964 = load double, double* %12963, align 1
  %12965 = inttoptr i64 %12959 to double*
  store double %12964, double* %12965
  %12966 = bitcast %union.vec128_t* %XMM0 to i8*
  %12967 = load i64, i64* %PC
  %12968 = add i64 %12967, 9
  store i64 %12968, i64* %PC
  %12969 = bitcast i8* %12966 to double*
  %12970 = load double, double* %12969, align 1
  store double %12970, double* bitcast (%sa_type* @sa to double*)
  %12971 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12972 = load i64, i64* %PC
  %12973 = add i64 %12972, 9
  store i64 %12973, i64* %PC
  %12974 = load double, double* bitcast (%sa_type* @sa to double*)
  %12975 = bitcast i8* %12971 to double*
  store double %12974, double* %12975, align 1, !tbaa !2452
  %12976 = getelementptr inbounds i8, i8* %12971, i64 8
  %12977 = bitcast i8* %12976 to double*
  store double 0.000000e+00, double* %12977, align 1, !tbaa !2452
  %12978 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %12979 = load i64, i64* %RBP
  %12980 = sub i64 %12979, 80
  %12981 = load i64, i64* %PC
  %12982 = add i64 %12981, 6
  store i64 %12982, i64* %PC
  %12983 = inttoptr i64 %12980 to i64*
  %12984 = load i64, i64* %12983
  %12985 = sitofp i64 %12984 to double
  %12986 = bitcast i8* %12978 to double*
  store double %12985, double* %12986, align 1, !tbaa !2452
  %12987 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12988 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %12989 = bitcast %union.vec128_t* %XMM1 to i8*
  %12990 = load i64, i64* %PC
  %12991 = add i64 %12990, 4
  store i64 %12991, i64* %PC
  %12992 = bitcast i8* %12988 to double*
  %12993 = load double, double* %12992, align 1
  %12994 = getelementptr inbounds i8, i8* %12988, i64 8
  %12995 = bitcast i8* %12994 to i64*
  %12996 = load i64, i64* %12995, align 1
  %12997 = bitcast i8* %12989 to double*
  %12998 = load double, double* %12997, align 1
  %12999 = fdiv double %12993, %12998
  %13000 = bitcast i8* %12987 to double*
  store double %12999, double* %13000, align 1, !tbaa !2452
  %13001 = getelementptr inbounds i8, i8* %12987, i64 8
  %13002 = bitcast i8* %13001 to i64*
  store i64 %12996, i64* %13002, align 1, !tbaa !2452
  %13003 = load i64, i64* %RBP
  %13004 = sub i64 %13003, 32
  %13005 = bitcast %union.vec128_t* %XMM0 to i8*
  %13006 = load i64, i64* %PC
  %13007 = add i64 %13006, 5
  store i64 %13007, i64* %PC
  %13008 = bitcast i8* %13005 to double*
  %13009 = load double, double* %13008, align 1
  %13010 = inttoptr i64 %13004 to double*
  store double %13009, double* %13010
  %13011 = load i64, i64* %RBP
  %13012 = sub i64 %13011, 264
  %13013 = load i32, i32* %EAX
  %13014 = zext i32 %13013 to i64
  %13015 = load i64, i64* %PC
  %13016 = add i64 %13015, 6
  store i64 %13016, i64* %PC
  %13017 = inttoptr i64 %13012 to i32*
  store i32 %13013, i32* %13017
  %13018 = load i64, i64* %PC
  %13019 = add i64 %13018, 2345
  %13020 = load i64, i64* %PC
  %13021 = add i64 %13020, 5
  %13022 = load i64, i64* %PC
  %13023 = add i64 %13022, 5
  store i64 %13023, i64* %PC
  %13024 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13025 = load i64, i64* %13024, align 8, !tbaa !2428
  %13026 = add i64 %13025, -8
  %13027 = inttoptr i64 %13026 to i64*
  store i64 %13021, i64* %13027
  store i64 %13026, i64* %13024, align 8, !tbaa !2428
  %13028 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %13019, i64* %13028, align 8, !tbaa !2428
  %13029 = load i64, i64* %PC
  %13030 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %13029, %struct.Memory* %12903)
  %13031 = load i64, i64* %RBP
  %13032 = sub i64 %13031, 72
  %13033 = load i64, i64* %PC
  %13034 = add i64 %13033, 8
  store i64 %13034, i64* %PC
  %13035 = inttoptr i64 %13032 to i64*
  store i64 1, i64* %13035
  %13036 = load i64, i64* %RBP
  %13037 = sub i64 %13036, 268
  %13038 = load i32, i32* %EAX
  %13039 = zext i32 %13038 to i64
  %13040 = load i64, i64* %PC
  %13041 = add i64 %13040, 6
  store i64 %13041, i64* %PC
  %13042 = inttoptr i64 %13037 to i32*
  store i32 %13038, i32* %13042
  br label %block_401cba

block_400bcf:                                     ; preds = %block_400b83, %block_400bdd
  %MEMORY.10 = phi %struct.Memory* [ %13956, %block_400b83 ], [ %MEMORY.10, %block_400bdd ]
  %13043 = load i64, i64* %RBP
  %13044 = sub i64 %13043, 72
  %13045 = load i64, i64* %PC
  %13046 = add i64 %13045, 4
  store i64 %13046, i64* %PC
  %13047 = inttoptr i64 %13044 to i64*
  %13048 = load i64, i64* %13047
  store i64 %13048, i64* %RAX, align 8, !tbaa !2428
  %13049 = load i64, i64* %RAX
  %13050 = load i64, i64* %RBP
  %13051 = sub i64 %13050, 80
  %13052 = load i64, i64* %PC
  %13053 = add i64 %13052, 4
  store i64 %13053, i64* %PC
  %13054 = inttoptr i64 %13051 to i64*
  %13055 = load i64, i64* %13054
  %13056 = sub i64 %13049, %13055
  %13057 = icmp ugt i64 %13055, %13049
  %13058 = zext i1 %13057 to i8
  %13059 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13058, i8* %13059, align 1, !tbaa !2432
  %13060 = trunc i64 %13056 to i32
  %13061 = and i32 %13060, 255
  %13062 = call i32 @llvm.ctpop.i32(i32 %13061) #16
  %13063 = trunc i32 %13062 to i8
  %13064 = and i8 %13063, 1
  %13065 = xor i8 %13064, 1
  %13066 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13065, i8* %13066, align 1, !tbaa !2446
  %13067 = xor i64 %13055, %13049
  %13068 = xor i64 %13067, %13056
  %13069 = lshr i64 %13068, 4
  %13070 = trunc i64 %13069 to i8
  %13071 = and i8 %13070, 1
  %13072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13071, i8* %13072, align 1, !tbaa !2450
  %13073 = icmp eq i64 %13056, 0
  %13074 = zext i1 %13073 to i8
  %13075 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13074, i8* %13075, align 1, !tbaa !2447
  %13076 = lshr i64 %13056, 63
  %13077 = trunc i64 %13076 to i8
  %13078 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13077, i8* %13078, align 1, !tbaa !2448
  %13079 = lshr i64 %13049, 63
  %13080 = lshr i64 %13055, 63
  %13081 = xor i64 %13080, %13079
  %13082 = xor i64 %13076, %13079
  %13083 = add nuw nsw i64 %13082, %13081
  %13084 = icmp eq i64 %13083, 2
  %13085 = zext i1 %13084 to i8
  %13086 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13085, i8* %13086, align 1, !tbaa !2449
  %13087 = load i64, i64* %PC
  %13088 = add i64 %13087, 170
  %13089 = load i64, i64* %PC
  %13090 = add i64 %13089, 6
  %13091 = load i64, i64* %PC
  %13092 = add i64 %13091, 6
  store i64 %13092, i64* %PC
  %13093 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %13094 = load i8, i8* %13093, align 1, !tbaa !2447
  %13095 = icmp eq i8 %13094, 0
  %13096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %13097 = load i8, i8* %13096, align 1, !tbaa !2448
  %13098 = icmp ne i8 %13097, 0
  %13099 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %13100 = load i8, i8* %13099, align 1, !tbaa !2449
  %13101 = icmp ne i8 %13100, 0
  %13102 = xor i1 %13098, %13101
  %13103 = xor i1 %13102, true
  %13104 = and i1 %13095, %13103
  %13105 = zext i1 %13104 to i8
  store i8 %13105, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %13106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %13107 = select i1 %13104, i64 %13088, i64 %13090
  store i64 %13107, i64* %13106, align 8, !tbaa !2428
  %13108 = load i8, i8* %BRANCH_TAKEN
  %13109 = icmp eq i8 %13108, 1
  %13110 = load i64, i64* %PC
  %13111 = add i64 %13110, 10
  store i64 %13111, i64* %PC
  br i1 %13109, label %block_400c81, label %block_400bdd

block_401185:                                     ; preds = %block_40119a, %block_400f2f
  %MEMORY.11 = phi %struct.Memory* [ %6726, %block_400f2f ], [ %MEMORY.11, %block_40119a ]
  %13112 = load i64, i64* %RBP
  %13113 = sub i64 %13112, 72
  %13114 = load i64, i64* %PC
  %13115 = add i64 %13114, 4
  store i64 %13115, i64* %PC
  %13116 = inttoptr i64 %13113 to i64*
  %13117 = load i64, i64* %13116
  store i64 %13117, i64* %RAX, align 8, !tbaa !2428
  %13118 = load i64, i64* %RBP
  %13119 = sub i64 %13118, 80
  %13120 = load i64, i64* %PC
  %13121 = add i64 %13120, 4
  store i64 %13121, i64* %PC
  %13122 = inttoptr i64 %13119 to i64*
  %13123 = load i64, i64* %13122
  store i64 %13123, i64* %RCX, align 8, !tbaa !2428
  %13124 = load i64, i64* %RCX
  %13125 = load i64, i64* %PC
  %13126 = add i64 %13125, 4
  store i64 %13126, i64* %PC
  %13127 = sub i64 %13124, 1
  store i64 %13127, i64* %RCX, align 8, !tbaa !2428
  %13128 = icmp ult i64 %13124, 1
  %13129 = zext i1 %13128 to i8
  %13130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13129, i8* %13130, align 1, !tbaa !2432
  %13131 = trunc i64 %13127 to i32
  %13132 = and i32 %13131, 255
  %13133 = call i32 @llvm.ctpop.i32(i32 %13132) #16
  %13134 = trunc i32 %13133 to i8
  %13135 = and i8 %13134, 1
  %13136 = xor i8 %13135, 1
  %13137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13136, i8* %13137, align 1, !tbaa !2446
  %13138 = xor i64 1, %13124
  %13139 = xor i64 %13138, %13127
  %13140 = lshr i64 %13139, 4
  %13141 = trunc i64 %13140 to i8
  %13142 = and i8 %13141, 1
  %13143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13142, i8* %13143, align 1, !tbaa !2450
  %13144 = icmp eq i64 %13127, 0
  %13145 = zext i1 %13144 to i8
  %13146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13145, i8* %13146, align 1, !tbaa !2447
  %13147 = lshr i64 %13127, 63
  %13148 = trunc i64 %13147 to i8
  %13149 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13148, i8* %13149, align 1, !tbaa !2448
  %13150 = lshr i64 %13124, 63
  %13151 = xor i64 %13147, %13150
  %13152 = add nuw nsw i64 %13151, %13150
  %13153 = icmp eq i64 %13152, 2
  %13154 = zext i1 %13153 to i8
  %13155 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13154, i8* %13155, align 1, !tbaa !2449
  %13156 = load i64, i64* %RAX
  %13157 = load i64, i64* %RCX
  %13158 = load i64, i64* %PC
  %13159 = add i64 %13158, 3
  store i64 %13159, i64* %PC
  %13160 = sub i64 %13156, %13157
  %13161 = icmp ult i64 %13156, %13157
  %13162 = zext i1 %13161 to i8
  %13163 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13162, i8* %13163, align 1, !tbaa !2432
  %13164 = trunc i64 %13160 to i32
  %13165 = and i32 %13164, 255
  %13166 = call i32 @llvm.ctpop.i32(i32 %13165) #16
  %13167 = trunc i32 %13166 to i8
  %13168 = and i8 %13167, 1
  %13169 = xor i8 %13168, 1
  %13170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13169, i8* %13170, align 1, !tbaa !2446
  %13171 = xor i64 %13157, %13156
  %13172 = xor i64 %13171, %13160
  %13173 = lshr i64 %13172, 4
  %13174 = trunc i64 %13173 to i8
  %13175 = and i8 %13174, 1
  %13176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13175, i8* %13176, align 1, !tbaa !2450
  %13177 = icmp eq i64 %13160, 0
  %13178 = zext i1 %13177 to i8
  %13179 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13178, i8* %13179, align 1, !tbaa !2447
  %13180 = lshr i64 %13160, 63
  %13181 = trunc i64 %13180 to i8
  %13182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13181, i8* %13182, align 1, !tbaa !2448
  %13183 = lshr i64 %13156, 63
  %13184 = lshr i64 %13157, 63
  %13185 = xor i64 %13184, %13183
  %13186 = xor i64 %13180, %13183
  %13187 = add nuw nsw i64 %13186, %13185
  %13188 = icmp eq i64 %13187, 2
  %13189 = zext i1 %13188 to i8
  %13190 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13189, i8* %13190, align 1, !tbaa !2449
  %13191 = load i64, i64* %PC
  %13192 = add i64 %13191, 181
  %13193 = load i64, i64* %PC
  %13194 = add i64 %13193, 6
  %13195 = load i64, i64* %PC
  %13196 = add i64 %13195, 6
  store i64 %13196, i64* %PC
  %13197 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %13198 = load i8, i8* %13197, align 1, !tbaa !2447
  %13199 = icmp eq i8 %13198, 0
  %13200 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %13201 = load i8, i8* %13200, align 1, !tbaa !2448
  %13202 = icmp ne i8 %13201, 0
  %13203 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %13204 = load i8, i8* %13203, align 1, !tbaa !2449
  %13205 = icmp ne i8 %13204, 0
  %13206 = xor i1 %13202, %13205
  %13207 = xor i1 %13206, true
  %13208 = and i1 %13199, %13207
  %13209 = zext i1 %13208 to i8
  store i8 %13209, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %13210 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %13211 = select i1 %13208, i64 %13192, i64 %13194
  store i64 %13211, i64* %13210, align 8, !tbaa !2428
  %13212 = load i8, i8* %BRANCH_TAKEN
  %13213 = icmp eq i8 %13212, 1
  br i1 %13213, label %block_401249, label %block_40119a

block_401504:                                     ; preds = %block_4014ef
  %13214 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13215 = load i64, i64* %RBP
  %13216 = sub i64 %13215, 72
  %13217 = load i64, i64* %PC
  %13218 = add i64 %13217, 6
  store i64 %13218, i64* %PC
  %13219 = inttoptr i64 %13216 to i64*
  %13220 = load i64, i64* %13219
  %13221 = sitofp i64 %13220 to double
  %13222 = bitcast i8* %13214 to double*
  store double %13221, double* %13222, align 1, !tbaa !2452
  %13223 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13224 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13225 = load i64, i64* %RBP
  %13226 = sub i64 %13225, 48
  %13227 = load i64, i64* %PC
  %13228 = add i64 %13227, 5
  store i64 %13228, i64* %PC
  %13229 = bitcast i8* %13224 to double*
  %13230 = load double, double* %13229, align 1
  %13231 = getelementptr inbounds i8, i8* %13224, i64 8
  %13232 = bitcast i8* %13231 to i64*
  %13233 = load i64, i64* %13232, align 1
  %13234 = inttoptr i64 %13226 to double*
  %13235 = load double, double* %13234
  %13236 = fmul double %13230, %13235
  %13237 = bitcast i8* %13223 to double*
  store double %13236, double* %13237, align 1, !tbaa !2452
  %13238 = getelementptr inbounds i8, i8* %13223, i64 8
  %13239 = bitcast i8* %13238 to i64*
  store i64 %13233, i64* %13239, align 1, !tbaa !2452
  %13240 = load i64, i64* %RBP
  %13241 = sub i64 %13240, 24
  %13242 = bitcast %union.vec128_t* %XMM0 to i8*
  %13243 = load i64, i64* %PC
  %13244 = add i64 %13243, 5
  store i64 %13244, i64* %PC
  %13245 = bitcast i8* %13242 to double*
  %13246 = load double, double* %13245, align 1
  %13247 = inttoptr i64 %13241 to double*
  store double %13246, double* %13247
  %13248 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13249 = load i64, i64* %RBP
  %13250 = sub i64 %13249, 24
  %13251 = load i64, i64* %PC
  %13252 = add i64 %13251, 5
  store i64 %13252, i64* %PC
  %13253 = inttoptr i64 %13250 to double*
  %13254 = load double, double* %13253
  %13255 = bitcast i8* %13248 to double*
  store double %13254, double* %13255, align 1, !tbaa !2452
  %13256 = getelementptr inbounds i8, i8* %13248, i64 8
  %13257 = bitcast i8* %13256 to double*
  store double 0.000000e+00, double* %13257, align 1, !tbaa !2452
  %13258 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13259 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13260 = load i64, i64* %RBP
  %13261 = sub i64 %13260, 24
  %13262 = load i64, i64* %PC
  %13263 = add i64 %13262, 5
  store i64 %13263, i64* %PC
  %13264 = bitcast i8* %13259 to double*
  %13265 = load double, double* %13264, align 1
  %13266 = getelementptr inbounds i8, i8* %13259, i64 8
  %13267 = bitcast i8* %13266 to i64*
  %13268 = load i64, i64* %13267, align 1
  %13269 = inttoptr i64 %13261 to double*
  %13270 = load double, double* %13269
  %13271 = fmul double %13265, %13270
  %13272 = bitcast i8* %13258 to double*
  store double %13271, double* %13272, align 1, !tbaa !2452
  %13273 = getelementptr inbounds i8, i8* %13258, i64 8
  %13274 = bitcast i8* %13273 to i64*
  store i64 %13268, i64* %13274, align 1, !tbaa !2452
  %13275 = load i64, i64* %RBP
  %13276 = sub i64 %13275, 40
  %13277 = bitcast %union.vec128_t* %XMM0 to i8*
  %13278 = load i64, i64* %PC
  %13279 = add i64 %13278, 5
  store i64 %13279, i64* %PC
  %13280 = bitcast i8* %13277 to double*
  %13281 = load double, double* %13280, align 1
  %13282 = inttoptr i64 %13276 to double*
  store double %13281, double* %13282
  %13283 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13284 = load i64, i64* %RBP
  %13285 = sub i64 %13284, 24
  %13286 = load i64, i64* %PC
  %13287 = add i64 %13286, 5
  store i64 %13287, i64* %PC
  %13288 = inttoptr i64 %13285 to double*
  %13289 = load double, double* %13288
  %13290 = bitcast i8* %13283 to double*
  store double %13289, double* %13290, align 1, !tbaa !2452
  %13291 = getelementptr inbounds i8, i8* %13283, i64 8
  %13292 = bitcast i8* %13291 to double*
  store double 0.000000e+00, double* %13292, align 1, !tbaa !2452
  %13293 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13294 = load i64, i64* %PC
  %13295 = add i64 %13294, 9
  store i64 %13295, i64* %PC
  %13296 = load double, double* bitcast (%A6_type* @A6 to double*)
  %13297 = bitcast i8* %13293 to double*
  store double %13296, double* %13297, align 1, !tbaa !2452
  %13298 = getelementptr inbounds i8, i8* %13293, i64 8
  %13299 = bitcast i8* %13298 to double*
  store double 0.000000e+00, double* %13299, align 1, !tbaa !2452
  %13300 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13301 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13302 = load i64, i64* %RBP
  %13303 = sub i64 %13302, 40
  %13304 = load i64, i64* %PC
  %13305 = add i64 %13304, 5
  store i64 %13305, i64* %PC
  %13306 = bitcast i8* %13301 to double*
  %13307 = load double, double* %13306, align 1
  %13308 = getelementptr inbounds i8, i8* %13301, i64 8
  %13309 = bitcast i8* %13308 to i64*
  %13310 = load i64, i64* %13309, align 1
  %13311 = inttoptr i64 %13303 to double*
  %13312 = load double, double* %13311
  %13313 = fmul double %13307, %13312
  %13314 = bitcast i8* %13300 to double*
  store double %13313, double* %13314, align 1, !tbaa !2452
  %13315 = getelementptr inbounds i8, i8* %13300, i64 8
  %13316 = bitcast i8* %13315 to i64*
  store i64 %13310, i64* %13316, align 1, !tbaa !2452
  %13317 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13318 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13319 = load i64, i64* %PC
  %13320 = add i64 %13319, 9
  store i64 %13320, i64* %PC
  %13321 = bitcast i8* %13318 to double*
  %13322 = load double, double* %13321, align 1
  %13323 = getelementptr inbounds i8, i8* %13318, i64 8
  %13324 = bitcast i8* %13323 to i64*
  %13325 = load i64, i64* %13324, align 1
  %13326 = load double, double* bitcast (%A5_type* @A5 to double*)
  %13327 = fadd double %13322, %13326
  %13328 = bitcast i8* %13317 to double*
  store double %13327, double* %13328, align 1, !tbaa !2452
  %13329 = getelementptr inbounds i8, i8* %13317, i64 8
  %13330 = bitcast i8* %13329 to i64*
  store i64 %13325, i64* %13330, align 1, !tbaa !2452
  %13331 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13332 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13333 = load i64, i64* %RBP
  %13334 = sub i64 %13333, 40
  %13335 = load i64, i64* %PC
  %13336 = add i64 %13335, 5
  store i64 %13336, i64* %PC
  %13337 = bitcast i8* %13332 to double*
  %13338 = load double, double* %13337, align 1
  %13339 = getelementptr inbounds i8, i8* %13332, i64 8
  %13340 = bitcast i8* %13339 to i64*
  %13341 = load i64, i64* %13340, align 1
  %13342 = inttoptr i64 %13334 to double*
  %13343 = load double, double* %13342
  %13344 = fmul double %13338, %13343
  %13345 = bitcast i8* %13331 to double*
  store double %13344, double* %13345, align 1, !tbaa !2452
  %13346 = getelementptr inbounds i8, i8* %13331, i64 8
  %13347 = bitcast i8* %13346 to i64*
  store i64 %13341, i64* %13347, align 1, !tbaa !2452
  %13348 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13349 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13350 = load i64, i64* %PC
  %13351 = add i64 %13350, 9
  store i64 %13351, i64* %PC
  %13352 = bitcast i8* %13349 to double*
  %13353 = load double, double* %13352, align 1
  %13354 = getelementptr inbounds i8, i8* %13349, i64 8
  %13355 = bitcast i8* %13354 to i64*
  %13356 = load i64, i64* %13355, align 1
  %13357 = load double, double* bitcast (%A4_type* @A4 to double*)
  %13358 = fadd double %13353, %13357
  %13359 = bitcast i8* %13348 to double*
  store double %13358, double* %13359, align 1, !tbaa !2452
  %13360 = getelementptr inbounds i8, i8* %13348, i64 8
  %13361 = bitcast i8* %13360 to i64*
  store i64 %13356, i64* %13361, align 1, !tbaa !2452
  %13362 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13363 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13364 = load i64, i64* %RBP
  %13365 = sub i64 %13364, 40
  %13366 = load i64, i64* %PC
  %13367 = add i64 %13366, 5
  store i64 %13367, i64* %PC
  %13368 = bitcast i8* %13363 to double*
  %13369 = load double, double* %13368, align 1
  %13370 = getelementptr inbounds i8, i8* %13363, i64 8
  %13371 = bitcast i8* %13370 to i64*
  %13372 = load i64, i64* %13371, align 1
  %13373 = inttoptr i64 %13365 to double*
  %13374 = load double, double* %13373
  %13375 = fmul double %13369, %13374
  %13376 = bitcast i8* %13362 to double*
  store double %13375, double* %13376, align 1, !tbaa !2452
  %13377 = getelementptr inbounds i8, i8* %13362, i64 8
  %13378 = bitcast i8* %13377 to i64*
  store i64 %13372, i64* %13378, align 1, !tbaa !2452
  %13379 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13380 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13381 = load i64, i64* %PC
  %13382 = add i64 %13381, 9
  store i64 %13382, i64* %PC
  %13383 = bitcast i8* %13380 to double*
  %13384 = load double, double* %13383, align 1
  %13385 = getelementptr inbounds i8, i8* %13380, i64 8
  %13386 = bitcast i8* %13385 to i64*
  %13387 = load i64, i64* %13386, align 1
  %13388 = load double, double* bitcast (%A3_type* @A3 to double*)
  %13389 = fadd double %13384, %13388
  %13390 = bitcast i8* %13379 to double*
  store double %13389, double* %13390, align 1, !tbaa !2452
  %13391 = getelementptr inbounds i8, i8* %13379, i64 8
  %13392 = bitcast i8* %13391 to i64*
  store i64 %13387, i64* %13392, align 1, !tbaa !2452
  %13393 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13394 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13395 = load i64, i64* %RBP
  %13396 = sub i64 %13395, 40
  %13397 = load i64, i64* %PC
  %13398 = add i64 %13397, 5
  store i64 %13398, i64* %PC
  %13399 = bitcast i8* %13394 to double*
  %13400 = load double, double* %13399, align 1
  %13401 = getelementptr inbounds i8, i8* %13394, i64 8
  %13402 = bitcast i8* %13401 to i64*
  %13403 = load i64, i64* %13402, align 1
  %13404 = inttoptr i64 %13396 to double*
  %13405 = load double, double* %13404
  %13406 = fmul double %13400, %13405
  %13407 = bitcast i8* %13393 to double*
  store double %13406, double* %13407, align 1, !tbaa !2452
  %13408 = getelementptr inbounds i8, i8* %13393, i64 8
  %13409 = bitcast i8* %13408 to i64*
  store i64 %13403, i64* %13409, align 1, !tbaa !2452
  %13410 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13411 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13412 = load i64, i64* %PC
  %13413 = add i64 %13412, 9
  store i64 %13413, i64* %PC
  %13414 = bitcast i8* %13411 to double*
  %13415 = load double, double* %13414, align 1
  %13416 = getelementptr inbounds i8, i8* %13411, i64 8
  %13417 = bitcast i8* %13416 to i64*
  %13418 = load i64, i64* %13417, align 1
  %13419 = load double, double* bitcast (%A2_0_type* @A2_0 to double*)
  %13420 = fadd double %13415, %13419
  %13421 = bitcast i8* %13410 to double*
  store double %13420, double* %13421, align 1, !tbaa !2452
  %13422 = getelementptr inbounds i8, i8* %13410, i64 8
  %13423 = bitcast i8* %13422 to i64*
  store i64 %13418, i64* %13423, align 1, !tbaa !2452
  %13424 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13425 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13426 = load i64, i64* %RBP
  %13427 = sub i64 %13426, 40
  %13428 = load i64, i64* %PC
  %13429 = add i64 %13428, 5
  store i64 %13429, i64* %PC
  %13430 = bitcast i8* %13425 to double*
  %13431 = load double, double* %13430, align 1
  %13432 = getelementptr inbounds i8, i8* %13425, i64 8
  %13433 = bitcast i8* %13432 to i64*
  %13434 = load i64, i64* %13433, align 1
  %13435 = inttoptr i64 %13427 to double*
  %13436 = load double, double* %13435
  %13437 = fmul double %13431, %13436
  %13438 = bitcast i8* %13424 to double*
  store double %13437, double* %13438, align 1, !tbaa !2452
  %13439 = getelementptr inbounds i8, i8* %13424, i64 8
  %13440 = bitcast i8* %13439 to i64*
  store i64 %13434, i64* %13440, align 1, !tbaa !2452
  %13441 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13442 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13443 = load i64, i64* %PC
  %13444 = add i64 %13443, 9
  store i64 %13444, i64* %PC
  %13445 = bitcast i8* %13442 to double*
  %13446 = load double, double* %13445, align 1
  %13447 = getelementptr inbounds i8, i8* %13442, i64 8
  %13448 = bitcast i8* %13447 to i64*
  %13449 = load i64, i64* %13448, align 1
  %13450 = load double, double* bitcast (%A1_0_type* @A1_0 to double*)
  %13451 = fadd double %13446, %13450
  %13452 = bitcast i8* %13441 to double*
  store double %13451, double* %13452, align 1, !tbaa !2452
  %13453 = getelementptr inbounds i8, i8* %13441, i64 8
  %13454 = bitcast i8* %13453 to i64*
  store i64 %13449, i64* %13454, align 1, !tbaa !2452
  %13455 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13456 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13457 = load i64, i64* %RBP
  %13458 = sub i64 %13457, 40
  %13459 = load i64, i64* %PC
  %13460 = add i64 %13459, 5
  store i64 %13460, i64* %PC
  %13461 = bitcast i8* %13456 to double*
  %13462 = load double, double* %13461, align 1
  %13463 = getelementptr inbounds i8, i8* %13456, i64 8
  %13464 = bitcast i8* %13463 to i64*
  %13465 = load i64, i64* %13464, align 1
  %13466 = inttoptr i64 %13458 to double*
  %13467 = load double, double* %13466
  %13468 = fmul double %13462, %13467
  %13469 = bitcast i8* %13455 to double*
  store double %13468, double* %13469, align 1, !tbaa !2452
  %13470 = getelementptr inbounds i8, i8* %13455, i64 8
  %13471 = bitcast i8* %13470 to i64*
  store i64 %13465, i64* %13471, align 1, !tbaa !2452
  %13472 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13473 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13474 = load i64, i64* %PC
  %13475 = add i64 %13474, 9
  store i64 %13475, i64* %PC
  %13476 = bitcast i8* %13473 to double*
  %13477 = load double, double* %13476, align 1
  %13478 = getelementptr inbounds i8, i8* %13473, i64 8
  %13479 = bitcast i8* %13478 to i64*
  %13480 = load i64, i64* %13479, align 1
  %13481 = load double, double* bitcast (%one_type* @one to double*)
  %13482 = fadd double %13477, %13481
  %13483 = bitcast i8* %13472 to double*
  store double %13482, double* %13483, align 1, !tbaa !2452
  %13484 = getelementptr inbounds i8, i8* %13472, i64 8
  %13485 = bitcast i8* %13484 to i64*
  store i64 %13480, i64* %13485, align 1, !tbaa !2452
  %13486 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13487 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13488 = bitcast %union.vec128_t* %XMM1 to i8*
  %13489 = load i64, i64* %PC
  %13490 = add i64 %13489, 4
  store i64 %13490, i64* %PC
  %13491 = bitcast i8* %13487 to double*
  %13492 = load double, double* %13491, align 1
  %13493 = getelementptr inbounds i8, i8* %13487, i64 8
  %13494 = bitcast i8* %13493 to i64*
  %13495 = load i64, i64* %13494, align 1
  %13496 = bitcast i8* %13488 to double*
  %13497 = load double, double* %13496, align 1
  %13498 = fmul double %13492, %13497
  %13499 = bitcast i8* %13486 to double*
  store double %13498, double* %13499, align 1, !tbaa !2452
  %13500 = getelementptr inbounds i8, i8* %13486, i64 8
  %13501 = bitcast i8* %13500 to i64*
  store i64 %13495, i64* %13501, align 1, !tbaa !2452
  %13502 = load i64, i64* %RBP
  %13503 = sub i64 %13502, 32
  %13504 = bitcast %union.vec128_t* %XMM0 to i8*
  %13505 = load i64, i64* %PC
  %13506 = add i64 %13505, 5
  store i64 %13506, i64* %PC
  %13507 = bitcast i8* %13504 to double*
  %13508 = load double, double* %13507, align 1
  %13509 = inttoptr i64 %13503 to double*
  store double %13508, double* %13509
  %13510 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13511 = load i64, i64* %RBP
  %13512 = sub i64 %13511, 16
  %13513 = load i64, i64* %PC
  %13514 = add i64 %13513, 5
  store i64 %13514, i64* %PC
  %13515 = inttoptr i64 %13512 to double*
  %13516 = load double, double* %13515
  %13517 = bitcast i8* %13510 to double*
  store double %13516, double* %13517, align 1, !tbaa !2452
  %13518 = getelementptr inbounds i8, i8* %13510, i64 8
  %13519 = bitcast i8* %13518 to double*
  store double 0.000000e+00, double* %13519, align 1, !tbaa !2452
  %13520 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13521 = load i64, i64* %RBP
  %13522 = sub i64 %13521, 32
  %13523 = load i64, i64* %PC
  %13524 = add i64 %13523, 5
  store i64 %13524, i64* %PC
  %13525 = inttoptr i64 %13522 to double*
  %13526 = load double, double* %13525
  %13527 = bitcast i8* %13520 to double*
  store double %13526, double* %13527, align 1, !tbaa !2452
  %13528 = getelementptr inbounds i8, i8* %13520, i64 8
  %13529 = bitcast i8* %13528 to double*
  store double 0.000000e+00, double* %13529, align 1, !tbaa !2452
  %13530 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13531 = load i64, i64* %RBP
  %13532 = sub i64 %13531, 40
  %13533 = load i64, i64* %PC
  %13534 = add i64 %13533, 5
  store i64 %13534, i64* %PC
  %13535 = inttoptr i64 %13532 to double*
  %13536 = load double, double* %13535
  %13537 = bitcast i8* %13530 to double*
  store double %13536, double* %13537, align 1, !tbaa !2452
  %13538 = getelementptr inbounds i8, i8* %13530, i64 8
  %13539 = bitcast i8* %13538 to double*
  store double 0.000000e+00, double* %13539, align 1, !tbaa !2452
  %13540 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13541 = load i64, i64* %RBP
  %13542 = sub i64 %13541, 40
  %13543 = load i64, i64* %PC
  %13544 = add i64 %13543, 5
  store i64 %13544, i64* %PC
  %13545 = inttoptr i64 %13542 to double*
  %13546 = load double, double* %13545
  %13547 = bitcast i8* %13540 to double*
  store double %13546, double* %13547, align 1, !tbaa !2452
  %13548 = getelementptr inbounds i8, i8* %13540, i64 8
  %13549 = bitcast i8* %13548 to double*
  store double 0.000000e+00, double* %13549, align 1, !tbaa !2452
  %13550 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13551 = load i64, i64* %RBP
  %13552 = sub i64 %13551, 40
  %13553 = load i64, i64* %PC
  %13554 = add i64 %13553, 5
  store i64 %13554, i64* %PC
  %13555 = inttoptr i64 %13552 to double*
  %13556 = load double, double* %13555
  %13557 = bitcast i8* %13550 to double*
  store double %13556, double* %13557, align 1, !tbaa !2452
  %13558 = getelementptr inbounds i8, i8* %13550, i64 8
  %13559 = bitcast i8* %13558 to double*
  store double 0.000000e+00, double* %13559, align 1, !tbaa !2452
  %13560 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %13561 = load i64, i64* %RBP
  %13562 = sub i64 %13561, 40
  %13563 = load i64, i64* %PC
  %13564 = add i64 %13563, 5
  store i64 %13564, i64* %PC
  %13565 = inttoptr i64 %13562 to double*
  %13566 = load double, double* %13565
  %13567 = bitcast i8* %13560 to double*
  store double %13566, double* %13567, align 1, !tbaa !2452
  %13568 = getelementptr inbounds i8, i8* %13560, i64 8
  %13569 = bitcast i8* %13568 to double*
  store double 0.000000e+00, double* %13569, align 1, !tbaa !2452
  %13570 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %13571 = load i64, i64* %RBP
  %13572 = sub i64 %13571, 40
  %13573 = load i64, i64* %PC
  %13574 = add i64 %13573, 5
  store i64 %13574, i64* %PC
  %13575 = inttoptr i64 %13572 to double*
  %13576 = load double, double* %13575
  %13577 = bitcast i8* %13570 to double*
  store double %13576, double* %13577, align 1, !tbaa !2452
  %13578 = getelementptr inbounds i8, i8* %13570, i64 8
  %13579 = bitcast i8* %13578 to double*
  store double 0.000000e+00, double* %13579, align 1, !tbaa !2452
  %13580 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %13581 = load i64, i64* %PC
  %13582 = add i64 %13581, 9
  store i64 %13582, i64* %PC
  %13583 = load double, double* bitcast (%B6_type* @B6 to double*)
  %13584 = bitcast i8* %13580 to double*
  store double %13583, double* %13584, align 1, !tbaa !2452
  %13585 = getelementptr inbounds i8, i8* %13580, i64 8
  %13586 = bitcast i8* %13585 to double*
  store double 0.000000e+00, double* %13586, align 1, !tbaa !2452
  %13587 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %13588 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %13589 = load i64, i64* %RBP
  %13590 = sub i64 %13589, 40
  %13591 = load i64, i64* %PC
  %13592 = add i64 %13591, 5
  store i64 %13592, i64* %PC
  %13593 = bitcast i8* %13588 to double*
  %13594 = load double, double* %13593, align 1
  %13595 = getelementptr inbounds i8, i8* %13588, i64 8
  %13596 = bitcast i8* %13595 to i64*
  %13597 = load i64, i64* %13596, align 1
  %13598 = inttoptr i64 %13590 to double*
  %13599 = load double, double* %13598
  %13600 = fmul double %13594, %13599
  %13601 = bitcast i8* %13587 to double*
  store double %13600, double* %13601, align 1, !tbaa !2452
  %13602 = getelementptr inbounds i8, i8* %13587, i64 8
  %13603 = bitcast i8* %13602 to i64*
  store i64 %13597, i64* %13603, align 1, !tbaa !2452
  %13604 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %13605 = bitcast %"class.std::bitset"* %YMM7 to i8*
  %13606 = load i64, i64* %PC
  %13607 = add i64 %13606, 9
  store i64 %13607, i64* %PC
  %13608 = bitcast i8* %13605 to double*
  %13609 = load double, double* %13608, align 1
  %13610 = getelementptr inbounds i8, i8* %13605, i64 8
  %13611 = bitcast i8* %13610 to i64*
  %13612 = load i64, i64* %13611, align 1
  %13613 = load double, double* bitcast (%B5_type* @B5 to double*)
  %13614 = fadd double %13609, %13613
  %13615 = bitcast i8* %13604 to double*
  store double %13614, double* %13615, align 1, !tbaa !2452
  %13616 = getelementptr inbounds i8, i8* %13604, i64 8
  %13617 = bitcast i8* %13616 to i64*
  store i64 %13612, i64* %13617, align 1, !tbaa !2452
  %13618 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %13619 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %13620 = bitcast %union.vec128_t* %XMM7 to i8*
  %13621 = load i64, i64* %PC
  %13622 = add i64 %13621, 4
  store i64 %13622, i64* %PC
  %13623 = bitcast i8* %13619 to double*
  %13624 = load double, double* %13623, align 1
  %13625 = getelementptr inbounds i8, i8* %13619, i64 8
  %13626 = bitcast i8* %13625 to i64*
  %13627 = load i64, i64* %13626, align 1
  %13628 = bitcast i8* %13620 to double*
  %13629 = load double, double* %13628, align 1
  %13630 = fmul double %13624, %13629
  %13631 = bitcast i8* %13618 to double*
  store double %13630, double* %13631, align 1, !tbaa !2452
  %13632 = getelementptr inbounds i8, i8* %13618, i64 8
  %13633 = bitcast i8* %13632 to i64*
  store i64 %13627, i64* %13633, align 1, !tbaa !2452
  %13634 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %13635 = bitcast %"class.std::bitset"* %YMM6 to i8*
  %13636 = load i64, i64* %PC
  %13637 = add i64 %13636, 9
  store i64 %13637, i64* %PC
  %13638 = bitcast i8* %13635 to double*
  %13639 = load double, double* %13638, align 1
  %13640 = getelementptr inbounds i8, i8* %13635, i64 8
  %13641 = bitcast i8* %13640 to i64*
  %13642 = load i64, i64* %13641, align 1
  %13643 = load double, double* bitcast (%B4_type* @B4 to double*)
  %13644 = fadd double %13639, %13643
  %13645 = bitcast i8* %13634 to double*
  store double %13644, double* %13645, align 1, !tbaa !2452
  %13646 = getelementptr inbounds i8, i8* %13634, i64 8
  %13647 = bitcast i8* %13646 to i64*
  store i64 %13642, i64* %13647, align 1, !tbaa !2452
  %13648 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %13649 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %13650 = bitcast %union.vec128_t* %XMM6 to i8*
  %13651 = load i64, i64* %PC
  %13652 = add i64 %13651, 4
  store i64 %13652, i64* %PC
  %13653 = bitcast i8* %13649 to double*
  %13654 = load double, double* %13653, align 1
  %13655 = getelementptr inbounds i8, i8* %13649, i64 8
  %13656 = bitcast i8* %13655 to i64*
  %13657 = load i64, i64* %13656, align 1
  %13658 = bitcast i8* %13650 to double*
  %13659 = load double, double* %13658, align 1
  %13660 = fmul double %13654, %13659
  %13661 = bitcast i8* %13648 to double*
  store double %13660, double* %13661, align 1, !tbaa !2452
  %13662 = getelementptr inbounds i8, i8* %13648, i64 8
  %13663 = bitcast i8* %13662 to i64*
  store i64 %13657, i64* %13663, align 1, !tbaa !2452
  %13664 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %13665 = bitcast %"class.std::bitset"* %YMM5 to i8*
  %13666 = load i64, i64* %PC
  %13667 = add i64 %13666, 9
  store i64 %13667, i64* %PC
  %13668 = bitcast i8* %13665 to double*
  %13669 = load double, double* %13668, align 1
  %13670 = getelementptr inbounds i8, i8* %13665, i64 8
  %13671 = bitcast i8* %13670 to i64*
  %13672 = load i64, i64* %13671, align 1
  %13673 = load double, double* bitcast (%B3_type* @B3 to double*)
  %13674 = fadd double %13669, %13673
  %13675 = bitcast i8* %13664 to double*
  store double %13674, double* %13675, align 1, !tbaa !2452
  %13676 = getelementptr inbounds i8, i8* %13664, i64 8
  %13677 = bitcast i8* %13676 to i64*
  store i64 %13672, i64* %13677, align 1, !tbaa !2452
  %13678 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13679 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13680 = bitcast %union.vec128_t* %XMM5 to i8*
  %13681 = load i64, i64* %PC
  %13682 = add i64 %13681, 4
  store i64 %13682, i64* %PC
  %13683 = bitcast i8* %13679 to double*
  %13684 = load double, double* %13683, align 1
  %13685 = getelementptr inbounds i8, i8* %13679, i64 8
  %13686 = bitcast i8* %13685 to i64*
  %13687 = load i64, i64* %13686, align 1
  %13688 = bitcast i8* %13680 to double*
  %13689 = load double, double* %13688, align 1
  %13690 = fmul double %13684, %13689
  %13691 = bitcast i8* %13678 to double*
  store double %13690, double* %13691, align 1, !tbaa !2452
  %13692 = getelementptr inbounds i8, i8* %13678, i64 8
  %13693 = bitcast i8* %13692 to i64*
  store i64 %13687, i64* %13693, align 1, !tbaa !2452
  %13694 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13695 = bitcast %"class.std::bitset"* %YMM4 to i8*
  %13696 = load i64, i64* %PC
  %13697 = add i64 %13696, 9
  store i64 %13697, i64* %PC
  %13698 = bitcast i8* %13695 to double*
  %13699 = load double, double* %13698, align 1
  %13700 = getelementptr inbounds i8, i8* %13695, i64 8
  %13701 = bitcast i8* %13700 to i64*
  %13702 = load i64, i64* %13701, align 1
  %13703 = load double, double* bitcast (%B2_type* @B2 to double*)
  %13704 = fadd double %13699, %13703
  %13705 = bitcast i8* %13694 to double*
  store double %13704, double* %13705, align 1, !tbaa !2452
  %13706 = getelementptr inbounds i8, i8* %13694, i64 8
  %13707 = bitcast i8* %13706 to i64*
  store i64 %13702, i64* %13707, align 1, !tbaa !2452
  %13708 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13709 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13710 = bitcast %union.vec128_t* %XMM4 to i8*
  %13711 = load i64, i64* %PC
  %13712 = add i64 %13711, 4
  store i64 %13712, i64* %PC
  %13713 = bitcast i8* %13709 to double*
  %13714 = load double, double* %13713, align 1
  %13715 = getelementptr inbounds i8, i8* %13709, i64 8
  %13716 = bitcast i8* %13715 to i64*
  %13717 = load i64, i64* %13716, align 1
  %13718 = bitcast i8* %13710 to double*
  %13719 = load double, double* %13718, align 1
  %13720 = fmul double %13714, %13719
  %13721 = bitcast i8* %13708 to double*
  store double %13720, double* %13721, align 1, !tbaa !2452
  %13722 = getelementptr inbounds i8, i8* %13708, i64 8
  %13723 = bitcast i8* %13722 to i64*
  store i64 %13717, i64* %13723, align 1, !tbaa !2452
  %13724 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13725 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %13726 = load i64, i64* %PC
  %13727 = add i64 %13726, 9
  store i64 %13727, i64* %PC
  %13728 = bitcast i8* %13725 to double*
  %13729 = load double, double* %13728, align 1
  %13730 = getelementptr inbounds i8, i8* %13725, i64 8
  %13731 = bitcast i8* %13730 to i64*
  %13732 = load i64, i64* %13731, align 1
  %13733 = load double, double* bitcast (%B1_0_type* @B1_0 to double*)
  %13734 = fadd double %13729, %13733
  %13735 = bitcast i8* %13724 to double*
  store double %13734, double* %13735, align 1, !tbaa !2452
  %13736 = getelementptr inbounds i8, i8* %13724, i64 8
  %13737 = bitcast i8* %13736 to i64*
  store i64 %13732, i64* %13737, align 1, !tbaa !2452
  %13738 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13739 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13740 = bitcast %union.vec128_t* %XMM3 to i8*
  %13741 = load i64, i64* %PC
  %13742 = add i64 %13741, 4
  store i64 %13742, i64* %PC
  %13743 = bitcast i8* %13739 to double*
  %13744 = load double, double* %13743, align 1
  %13745 = getelementptr inbounds i8, i8* %13739, i64 8
  %13746 = bitcast i8* %13745 to i64*
  %13747 = load i64, i64* %13746, align 1
  %13748 = bitcast i8* %13740 to double*
  %13749 = load double, double* %13748, align 1
  %13750 = fmul double %13744, %13749
  %13751 = bitcast i8* %13738 to double*
  store double %13750, double* %13751, align 1, !tbaa !2452
  %13752 = getelementptr inbounds i8, i8* %13738, i64 8
  %13753 = bitcast i8* %13752 to i64*
  store i64 %13747, i64* %13753, align 1, !tbaa !2452
  %13754 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13755 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %13756 = load i64, i64* %PC
  %13757 = add i64 %13756, 9
  store i64 %13757, i64* %PC
  %13758 = bitcast i8* %13755 to double*
  %13759 = load double, double* %13758, align 1
  %13760 = getelementptr inbounds i8, i8* %13755, i64 8
  %13761 = bitcast i8* %13760 to i64*
  %13762 = load i64, i64* %13761, align 1
  %13763 = load double, double* bitcast (%one_type* @one to double*)
  %13764 = fadd double %13759, %13763
  %13765 = bitcast i8* %13754 to double*
  store double %13764, double* %13765, align 1, !tbaa !2452
  %13766 = getelementptr inbounds i8, i8* %13754, i64 8
  %13767 = bitcast i8* %13766 to i64*
  store i64 %13762, i64* %13767, align 1, !tbaa !2452
  %13768 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13769 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13770 = bitcast %union.vec128_t* %XMM2 to i8*
  %13771 = load i64, i64* %PC
  %13772 = add i64 %13771, 4
  store i64 %13772, i64* %PC
  %13773 = bitcast i8* %13769 to double*
  %13774 = load double, double* %13773, align 1
  %13775 = getelementptr inbounds i8, i8* %13769, i64 8
  %13776 = bitcast i8* %13775 to i64*
  %13777 = load i64, i64* %13776, align 1
  %13778 = bitcast i8* %13770 to double*
  %13779 = load double, double* %13778, align 1
  %13780 = fdiv double %13774, %13779
  %13781 = bitcast i8* %13768 to double*
  store double %13780, double* %13781, align 1, !tbaa !2452
  %13782 = getelementptr inbounds i8, i8* %13768, i64 8
  %13783 = bitcast i8* %13782 to i64*
  store i64 %13777, i64* %13783, align 1, !tbaa !2452
  %13784 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13785 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13786 = bitcast %union.vec128_t* %XMM1 to i8*
  %13787 = load i64, i64* %PC
  %13788 = add i64 %13787, 4
  store i64 %13788, i64* %PC
  %13789 = bitcast i8* %13785 to double*
  %13790 = load double, double* %13789, align 1
  %13791 = getelementptr inbounds i8, i8* %13785, i64 8
  %13792 = bitcast i8* %13791 to i64*
  %13793 = load i64, i64* %13792, align 1
  %13794 = bitcast i8* %13786 to double*
  %13795 = load double, double* %13794, align 1
  %13796 = fadd double %13790, %13795
  %13797 = bitcast i8* %13784 to double*
  store double %13796, double* %13797, align 1, !tbaa !2452
  %13798 = getelementptr inbounds i8, i8* %13784, i64 8
  %13799 = bitcast i8* %13798 to i64*
  store i64 %13793, i64* %13799, align 1, !tbaa !2452
  %13800 = load i64, i64* %RBP
  %13801 = sub i64 %13800, 16
  %13802 = bitcast %union.vec128_t* %XMM0 to i8*
  %13803 = load i64, i64* %PC
  %13804 = add i64 %13803, 5
  store i64 %13804, i64* %PC
  %13805 = bitcast i8* %13802 to double*
  %13806 = load double, double* %13805, align 1
  %13807 = inttoptr i64 %13801 to double*
  store double %13806, double* %13807
  %13808 = load i64, i64* %RBP
  %13809 = sub i64 %13808, 72
  %13810 = load i64, i64* %PC
  %13811 = add i64 %13810, 4
  store i64 %13811, i64* %PC
  %13812 = inttoptr i64 %13809 to i64*
  %13813 = load i64, i64* %13812
  store i64 %13813, i64* %RAX, align 8, !tbaa !2428
  %13814 = load i64, i64* %RAX
  %13815 = load i64, i64* %PC
  %13816 = add i64 %13815, 4
  store i64 %13816, i64* %PC
  %13817 = add i64 1, %13814
  store i64 %13817, i64* %RAX, align 8, !tbaa !2428
  %13818 = icmp ult i64 %13817, %13814
  %13819 = icmp ult i64 %13817, 1
  %13820 = or i1 %13818, %13819
  %13821 = zext i1 %13820 to i8
  %13822 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %13821, i8* %13822, align 1, !tbaa !2432
  %13823 = trunc i64 %13817 to i32
  %13824 = and i32 %13823, 255
  %13825 = call i32 @llvm.ctpop.i32(i32 %13824) #16
  %13826 = trunc i32 %13825 to i8
  %13827 = and i8 %13826, 1
  %13828 = xor i8 %13827, 1
  %13829 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %13828, i8* %13829, align 1, !tbaa !2446
  %13830 = xor i64 1, %13814
  %13831 = xor i64 %13830, %13817
  %13832 = lshr i64 %13831, 4
  %13833 = trunc i64 %13832 to i8
  %13834 = and i8 %13833, 1
  %13835 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %13834, i8* %13835, align 1, !tbaa !2450
  %13836 = icmp eq i64 %13817, 0
  %13837 = zext i1 %13836 to i8
  %13838 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %13837, i8* %13838, align 1, !tbaa !2447
  %13839 = lshr i64 %13817, 63
  %13840 = trunc i64 %13839 to i8
  %13841 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %13840, i8* %13841, align 1, !tbaa !2448
  %13842 = lshr i64 %13814, 63
  %13843 = xor i64 %13839, %13842
  %13844 = add nuw nsw i64 %13843, %13839
  %13845 = icmp eq i64 %13844, 2
  %13846 = zext i1 %13845 to i8
  %13847 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %13846, i8* %13847, align 1, !tbaa !2449
  %13848 = load i64, i64* %RBP
  %13849 = sub i64 %13848, 72
  %13850 = load i64, i64* %RAX
  %13851 = load i64, i64* %PC
  %13852 = add i64 %13851, 4
  store i64 %13852, i64* %PC
  %13853 = inttoptr i64 %13849 to i64*
  store i64 %13850, i64* %13853
  %13854 = load i64, i64* %PC
  %13855 = sub i64 %13854, 307
  %13856 = load i64, i64* %PC
  %13857 = add i64 %13856, 5
  store i64 %13857, i64* %PC
  %13858 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %13855, i64* %13858, align 8, !tbaa !2428
  br label %block_4014ef

block_400b83:                                     ; preds = %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1, %block_400b77
  %MEMORY.12 = phi %struct.Memory* [ %4452, %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit1 ], [ %4452, %block_400b77 ]
  %13859 = load i64, i64* %PC
  %13860 = add i64 %13859, 10
  store i64 %13860, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %13861 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13862 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13863 = bitcast %union.vec128_t* %XMM0 to i8*
  %13864 = load i64, i64* %PC
  %13865 = add i64 %13864, 3
  store i64 %13865, i64* %PC
  %13866 = bitcast i8* %13862 to i64*
  %13867 = load i64, i64* %13866, align 1
  %13868 = getelementptr inbounds i8, i8* %13862, i64 8
  %13869 = bitcast i8* %13868 to i64*
  %13870 = load i64, i64* %13869, align 1
  %13871 = bitcast i8* %13863 to i64*
  %13872 = load i64, i64* %13871, align 1
  %13873 = getelementptr inbounds i8, i8* %13863, i64 8
  %13874 = bitcast i8* %13873 to i64*
  %13875 = load i64, i64* %13874, align 1
  %13876 = xor i64 %13872, %13867
  %13877 = xor i64 %13875, %13870
  %13878 = trunc i64 %13876 to i32
  %13879 = lshr i64 %13876, 32
  %13880 = trunc i64 %13879 to i32
  %13881 = bitcast i8* %13861 to i32*
  store i32 %13878, i32* %13881, align 1, !tbaa !2454
  %13882 = getelementptr inbounds i8, i8* %13861, i64 4
  %13883 = bitcast i8* %13882 to i32*
  store i32 %13880, i32* %13883, align 1, !tbaa !2454
  %13884 = trunc i64 %13877 to i32
  %13885 = getelementptr inbounds i8, i8* %13861, i64 8
  %13886 = bitcast i8* %13885 to i32*
  store i32 %13884, i32* %13886, align 1, !tbaa !2454
  %13887 = lshr i64 %13877, 32
  %13888 = trunc i64 %13887 to i32
  %13889 = getelementptr inbounds i8, i8* %13861, i64 12
  %13890 = bitcast i8* %13889 to i32*
  store i32 %13888, i32* %13890, align 1, !tbaa !2454
  %13891 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13892 = load i64, i64* %RBP
  %13893 = sub i64 %13892, 80
  %13894 = load i64, i64* %PC
  %13895 = add i64 %13894, 6
  store i64 %13895, i64* %PC
  %13896 = inttoptr i64 %13893 to i64*
  %13897 = load i64, i64* %13896
  %13898 = sitofp i64 %13897 to double
  %13899 = bitcast i8* %13891 to double*
  store double %13898, double* %13899, align 1, !tbaa !2452
  %13900 = bitcast %union.vec128_t* %XMM1 to i8*
  %13901 = load i64, i64* %PC
  %13902 = add i64 %13901, 9
  store i64 %13902, i64* %PC
  %13903 = bitcast i8* %13900 to double*
  %13904 = load double, double* %13903, align 1
  store double %13904, double* bitcast (%sc_type* @sc to double*)
  %13905 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %13906 = load i64, i64* %PC
  %13907 = add i64 %13906, 9
  store i64 %13907, i64* %PC
  %13908 = load double, double* bitcast (%sa_type* @sa to double*)
  %13909 = bitcast i8* %13905 to double*
  store double %13908, double* %13909, align 1, !tbaa !2452
  %13910 = getelementptr inbounds i8, i8* %13905, i64 8
  %13911 = bitcast i8* %13910 to double*
  store double 0.000000e+00, double* %13911, align 1, !tbaa !2452
  %13912 = load i64, i64* %RBP
  %13913 = sub i64 %13912, 24
  %13914 = bitcast %union.vec128_t* %XMM1 to i8*
  %13915 = load i64, i64* %PC
  %13916 = add i64 %13915, 5
  store i64 %13916, i64* %PC
  %13917 = bitcast i8* %13914 to double*
  %13918 = load double, double* %13917, align 1
  %13919 = inttoptr i64 %13913 to double*
  store double %13918, double* %13919
  %13920 = load i64, i64* %RBP
  %13921 = sub i64 %13920, 32
  %13922 = bitcast %union.vec128_t* %XMM0 to i8*
  %13923 = load i64, i64* %PC
  %13924 = add i64 %13923, 5
  store i64 %13924, i64* %PC
  %13925 = bitcast i8* %13922 to double*
  %13926 = load double, double* %13925, align 1
  %13927 = inttoptr i64 %13921 to double*
  store double %13926, double* %13927
  %13928 = load i64, i64* %RBP
  %13929 = sub i64 %13928, 40
  %13930 = bitcast %union.vec128_t* %XMM0 to i8*
  %13931 = load i64, i64* %PC
  %13932 = add i64 %13931, 5
  store i64 %13932, i64* %PC
  %13933 = bitcast i8* %13930 to double*
  %13934 = load double, double* %13933, align 1
  %13935 = inttoptr i64 %13929 to double*
  store double %13934, double* %13935
  %13936 = load i64, i64* %RBP
  %13937 = sub i64 %13936, 48
  %13938 = bitcast %union.vec128_t* %XMM0 to i8*
  %13939 = load i64, i64* %PC
  %13940 = add i64 %13939, 5
  store i64 %13940, i64* %PC
  %13941 = bitcast i8* %13938 to double*
  %13942 = load double, double* %13941, align 1
  %13943 = inttoptr i64 %13937 to double*
  store double %13942, double* %13943
  %13944 = load i64, i64* %PC
  %13945 = add i64 %13944, 6676
  %13946 = load i64, i64* %PC
  %13947 = add i64 %13946, 5
  %13948 = load i64, i64* %PC
  %13949 = add i64 %13948, 5
  store i64 %13949, i64* %PC
  %13950 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13951 = load i64, i64* %13950, align 8, !tbaa !2428
  %13952 = add i64 %13951, -8
  %13953 = inttoptr i64 %13952 to i64*
  store i64 %13947, i64* %13953
  store i64 %13952, i64* %13950, align 8, !tbaa !2428
  %13954 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %13945, i64* %13954, align 8, !tbaa !2428
  %13955 = load i64, i64* %PC
  %13956 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %13955, %struct.Memory* %MEMORY.12)
  %13957 = load i64, i64* %RBP
  %13958 = sub i64 %13957, 72
  %13959 = load i64, i64* %PC
  %13960 = add i64 %13959, 8
  store i64 %13960, i64* %PC
  %13961 = inttoptr i64 %13958 to i64*
  store i64 1, i64* %13961
  %13962 = load i64, i64* %RBP
  %13963 = sub i64 %13962, 152
  %13964 = load i32, i32* %EAX
  %13965 = zext i32 %13964 to i64
  %13966 = load i64, i64* %PC
  %13967 = add i64 %13966, 6
  store i64 %13967, i64* %PC
  %13968 = inttoptr i64 %13963 to i32*
  store i32 %13964, i32* %13968
  br label %block_400bcf

block_400879:                                     ; preds = %block_40084e
  %13969 = add i64 %14202, 10
  store i64 %13969, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %13970 = load i64, i64* %PC
  %13971 = add i64 %13970, 7501
  %13972 = load i64, i64* %PC
  %13973 = add i64 %13972, 5
  %13974 = load i64, i64* %PC
  %13975 = add i64 %13974, 5
  store i64 %13975, i64* %PC
  %13976 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %13977 = load i64, i64* %13976, align 8, !tbaa !2428
  %13978 = add i64 %13977, -8
  %13979 = inttoptr i64 %13978 to i64*
  store i64 %13973, i64* %13979
  store i64 %13978, i64* %13976, align 8, !tbaa !2428
  %13980 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %13971, i64* %13980, align 8, !tbaa !2428
  %13981 = load i64, i64* %PC
  %13982 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %13981, %struct.Memory* %MEMORY.13)
  %13983 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13984 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %13985 = bitcast %union.vec128_t* %XMM0 to i8*
  %13986 = load i64, i64* %PC
  %13987 = add i64 %13986, 3
  store i64 %13987, i64* %PC
  %13988 = bitcast i8* %13984 to i64*
  %13989 = load i64, i64* %13988, align 1
  %13990 = getelementptr inbounds i8, i8* %13984, i64 8
  %13991 = bitcast i8* %13990 to i64*
  %13992 = load i64, i64* %13991, align 1
  %13993 = bitcast i8* %13985 to i64*
  %13994 = load i64, i64* %13993, align 1
  %13995 = getelementptr inbounds i8, i8* %13985, i64 8
  %13996 = bitcast i8* %13995 to i64*
  %13997 = load i64, i64* %13996, align 1
  %13998 = xor i64 %13994, %13989
  %13999 = xor i64 %13997, %13992
  %14000 = trunc i64 %13998 to i32
  %14001 = lshr i64 %13998, 32
  %14002 = trunc i64 %14001 to i32
  %14003 = bitcast i8* %13983 to i32*
  store i32 %14000, i32* %14003, align 1, !tbaa !2454
  %14004 = getelementptr inbounds i8, i8* %13983, i64 4
  %14005 = bitcast i8* %14004 to i32*
  store i32 %14002, i32* %14005, align 1, !tbaa !2454
  %14006 = trunc i64 %13999 to i32
  %14007 = getelementptr inbounds i8, i8* %13983, i64 8
  %14008 = bitcast i8* %14007 to i32*
  store i32 %14006, i32* %14008, align 1, !tbaa !2454
  %14009 = lshr i64 %13999, 32
  %14010 = trunc i64 %14009 to i32
  %14011 = getelementptr inbounds i8, i8* %13983, i64 12
  %14012 = bitcast i8* %14011 to i32*
  store i32 %14010, i32* %14012, align 1, !tbaa !2454
  %14013 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14014 = load i64, i64* %PC
  %14015 = add i64 %14014, 9
  store i64 %14015, i64* %PC
  %14016 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %14017 = bitcast i8* %14013 to double*
  store double %14016, double* %14017, align 1, !tbaa !2452
  %14018 = getelementptr inbounds i8, i8* %14013, i64 8
  %14019 = bitcast i8* %14018 to double*
  store double 0.000000e+00, double* %14019, align 1, !tbaa !2452
  %14020 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14021 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14022 = load i64, i64* %PC
  %14023 = add i64 %14022, 9
  store i64 %14023, i64* %PC
  %14024 = bitcast i8* %14021 to double*
  %14025 = load double, double* %14024, align 1
  %14026 = getelementptr inbounds i8, i8* %14021, i64 8
  %14027 = bitcast i8* %14026 to i64*
  %14028 = load i64, i64* %14027, align 1
  %14029 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %14030 = fmul double %14025, %14029
  %14031 = bitcast i8* %14020 to double*
  store double %14030, double* %14031, align 1, !tbaa !2452
  %14032 = getelementptr inbounds i8, i8* %14020, i64 8
  %14033 = bitcast i8* %14032 to i64*
  store i64 %14028, i64* %14033, align 1, !tbaa !2452
  %14034 = bitcast %union.vec128_t* %XMM1 to i8*
  %14035 = load i64, i64* %PC
  %14036 = add i64 %14035, 9
  store i64 %14036, i64* %PC
  %14037 = bitcast i8* %14034 to double*
  %14038 = load double, double* %14037, align 1
  store double %14038, double* bitcast (%nulltime_type* @nulltime to double*)
  %14039 = bitcast %union.vec128_t* %XMM0 to i8*
  %14040 = load i64, i64* %PC
  %14041 = add i64 %14040, 9
  store i64 %14041, i64* %PC
  %14042 = bitcast i8* %14039 to double*
  %14043 = load double, double* %14042, align 1
  %14044 = load double, double* bitcast (%nulltime_type* @nulltime to double*)
  %14045 = fcmp uno double %14043, %14044
  br i1 %14045, label %14046, label %14058

; <label>:14046:                                  ; preds = %block_400879
  %14047 = fadd double %14043, %14044
  %14048 = bitcast double %14047 to i64
  %14049 = and i64 %14048, 9221120237041090560
  %14050 = icmp eq i64 %14049, 9218868437227405312
  %14051 = and i64 %14048, 2251799813685247
  %14052 = icmp ne i64 %14051, 0
  %14053 = and i1 %14050, %14052
  br i1 %14053, label %14054, label %14064

; <label>:14054:                                  ; preds = %14046
  %14055 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %14056 = load i64, i64* %14055, align 8, !tbaa !2428
  %14057 = call %struct.Memory* @__remill_error(%struct.State* nonnull dereferenceable(3376) %0, i64 %14056, %struct.Memory* %13982) #17
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

; <label>:14058:                                  ; preds = %block_400879
  %14059 = fcmp ogt double %14043, %14044
  br i1 %14059, label %14064, label %14060

; <label>:14060:                                  ; preds = %14058
  %14061 = fcmp olt double %14043, %14044
  br i1 %14061, label %14064, label %14062

; <label>:14062:                                  ; preds = %14060
  %14063 = fcmp oeq double %14043, %14044
  br i1 %14063, label %14064, label %14071

; <label>:14064:                                  ; preds = %14062, %14060, %14058, %14046
  %14065 = phi i8 [ 0, %14058 ], [ 0, %14060 ], [ 1, %14062 ], [ 1, %14046 ]
  %14066 = phi i8 [ 0, %14058 ], [ 0, %14060 ], [ 0, %14062 ], [ 1, %14046 ]
  %14067 = phi i8 [ 0, %14058 ], [ 1, %14060 ], [ 0, %14062 ], [ 1, %14046 ]
  %14068 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14065, i8* %14068, align 1, !tbaa !2451
  %14069 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14066, i8* %14069, align 1, !tbaa !2451
  %14070 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14067, i8* %14070, align 1, !tbaa !2451
  br label %14071

; <label>:14071:                                  ; preds = %14064, %14062
  %14072 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %14072, align 1, !tbaa !2451
  %14073 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %14073, align 1, !tbaa !2451
  %14074 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %14074, align 1, !tbaa !2451
  br label %_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit

_ZN12_GLOBAL__N_1L6COMISDI2VnI8vec128_tE3MVnI7vec64_tEEEP6MemoryS8_R5StateT_T0_.exit: ; preds = %14054, %14071
  %14075 = phi %struct.Memory* [ %14057, %14054 ], [ %13982, %14071 ]
  %14076 = load i64, i64* %RBP
  %14077 = sub i64 %14076, 128
  %14078 = load i32, i32* %EAX
  %14079 = zext i32 %14078 to i64
  %14080 = load i64, i64* %PC
  %14081 = add i64 %14080, 3
  store i64 %14081, i64* %PC
  %14082 = inttoptr i64 %14077 to i32*
  store i32 %14078, i32* %14082
  %14083 = load i64, i64* %PC
  %14084 = add i64 %14083, 18
  %14085 = load i64, i64* %PC
  %14086 = add i64 %14085, 6
  %14087 = load i64, i64* %PC
  %14088 = add i64 %14087, 6
  store i64 %14088, i64* %PC
  %14089 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  %14090 = load i8, i8* %14089, align 1, !tbaa !2432
  %14091 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %14092 = load i8, i8* %14091, align 1, !tbaa !2447
  %14093 = or i8 %14092, %14090
  %14094 = icmp ne i8 %14093, 0
  %14095 = zext i1 %14094 to i8
  store i8 %14095, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %14096 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %14097 = select i1 %14094, i64 %14084, i64 %14086
  store i64 %14097, i64* %14096, align 8, !tbaa !2428
  %14098 = load i8, i8* %BRANCH_TAKEN
  %14099 = icmp eq i8 %14098, 1
  br i1 %14099, label %block_4008c4, label %block_4008b8

block_40084e:                                     ; preds = %block_400863, %block_400811
  %MEMORY.13 = phi %struct.Memory* [ %11325, %block_400811 ], [ %MEMORY.13, %block_400863 ]
  %14100 = load i64, i64* %RBP
  %14101 = sub i64 %14100, 72
  %14102 = load i64, i64* %PC
  %14103 = add i64 %14102, 4
  store i64 %14103, i64* %PC
  %14104 = inttoptr i64 %14101 to i64*
  %14105 = load i64, i64* %14104
  store i64 %14105, i64* %RAX, align 8, !tbaa !2428
  %14106 = load i64, i64* %RBP
  %14107 = sub i64 %14106, 88
  %14108 = load i64, i64* %PC
  %14109 = add i64 %14108, 4
  store i64 %14109, i64* %PC
  %14110 = inttoptr i64 %14107 to i64*
  %14111 = load i64, i64* %14110
  store i64 %14111, i64* %RCX, align 8, !tbaa !2428
  %14112 = load i64, i64* %RCX
  %14113 = load i64, i64* %PC
  %14114 = add i64 %14113, 4
  store i64 %14114, i64* %PC
  %14115 = sub i64 %14112, 1
  store i64 %14115, i64* %RCX, align 8, !tbaa !2428
  %14116 = icmp ult i64 %14112, 1
  %14117 = zext i1 %14116 to i8
  %14118 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14117, i8* %14118, align 1, !tbaa !2432
  %14119 = trunc i64 %14115 to i32
  %14120 = and i32 %14119, 255
  %14121 = call i32 @llvm.ctpop.i32(i32 %14120) #16
  %14122 = trunc i32 %14121 to i8
  %14123 = and i8 %14122, 1
  %14124 = xor i8 %14123, 1
  %14125 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14124, i8* %14125, align 1, !tbaa !2446
  %14126 = xor i64 1, %14112
  %14127 = xor i64 %14126, %14115
  %14128 = lshr i64 %14127, 4
  %14129 = trunc i64 %14128 to i8
  %14130 = and i8 %14129, 1
  %14131 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14130, i8* %14131, align 1, !tbaa !2450
  %14132 = icmp eq i64 %14115, 0
  %14133 = zext i1 %14132 to i8
  %14134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14133, i8* %14134, align 1, !tbaa !2447
  %14135 = lshr i64 %14115, 63
  %14136 = trunc i64 %14135 to i8
  %14137 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14136, i8* %14137, align 1, !tbaa !2448
  %14138 = lshr i64 %14112, 63
  %14139 = xor i64 %14135, %14138
  %14140 = add nuw nsw i64 %14139, %14138
  %14141 = icmp eq i64 %14140, 2
  %14142 = zext i1 %14141 to i8
  %14143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14142, i8* %14143, align 1, !tbaa !2449
  %14144 = load i64, i64* %RAX
  %14145 = load i64, i64* %RCX
  %14146 = load i64, i64* %PC
  %14147 = add i64 %14146, 3
  store i64 %14147, i64* %PC
  %14148 = sub i64 %14144, %14145
  %14149 = icmp ult i64 %14144, %14145
  %14150 = zext i1 %14149 to i8
  %14151 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14150, i8* %14151, align 1, !tbaa !2432
  %14152 = trunc i64 %14148 to i32
  %14153 = and i32 %14152, 255
  %14154 = call i32 @llvm.ctpop.i32(i32 %14153) #16
  %14155 = trunc i32 %14154 to i8
  %14156 = and i8 %14155, 1
  %14157 = xor i8 %14156, 1
  %14158 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %14157, i8* %14158, align 1, !tbaa !2446
  %14159 = xor i64 %14145, %14144
  %14160 = xor i64 %14159, %14148
  %14161 = lshr i64 %14160, 4
  %14162 = trunc i64 %14161 to i8
  %14163 = and i8 %14162, 1
  %14164 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %14163, i8* %14164, align 1, !tbaa !2450
  %14165 = icmp eq i64 %14148, 0
  %14166 = zext i1 %14165 to i8
  %14167 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %14166, i8* %14167, align 1, !tbaa !2447
  %14168 = lshr i64 %14148, 63
  %14169 = trunc i64 %14168 to i8
  %14170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %14169, i8* %14170, align 1, !tbaa !2448
  %14171 = lshr i64 %14144, 63
  %14172 = lshr i64 %14145, 63
  %14173 = xor i64 %14172, %14171
  %14174 = xor i64 %14168, %14171
  %14175 = add nuw nsw i64 %14174, %14173
  %14176 = icmp eq i64 %14175, 2
  %14177 = zext i1 %14176 to i8
  %14178 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %14177, i8* %14178, align 1, !tbaa !2449
  %14179 = load i64, i64* %PC
  %14180 = add i64 %14179, 28
  %14181 = load i64, i64* %PC
  %14182 = add i64 %14181, 6
  %14183 = load i64, i64* %PC
  %14184 = add i64 %14183, 6
  store i64 %14184, i64* %PC
  %14185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %14186 = load i8, i8* %14185, align 1, !tbaa !2447
  %14187 = icmp eq i8 %14186, 0
  %14188 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %14189 = load i8, i8* %14188, align 1, !tbaa !2448
  %14190 = icmp ne i8 %14189, 0
  %14191 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  %14192 = load i8, i8* %14191, align 1, !tbaa !2449
  %14193 = icmp ne i8 %14192, 0
  %14194 = xor i1 %14190, %14193
  %14195 = xor i1 %14194, true
  %14196 = and i1 %14187, %14195
  %14197 = zext i1 %14196 to i8
  store i8 %14197, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %14198 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %14199 = select i1 %14196, i64 %14180, i64 %14182
  store i64 %14199, i64* %14198, align 8, !tbaa !2428
  %14200 = load i8, i8* %BRANCH_TAKEN
  %14201 = icmp eq i8 %14200, 1
  %14202 = load i64, i64* %PC
  br i1 %14201, label %block_400879, label %block_400863

block_400c81:                                     ; preds = %block_400bcf
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %14203 = load i64, i64* %PC
  %14204 = add i64 %14203, 6469
  %14205 = load i64, i64* %PC
  %14206 = add i64 %14205, 5
  %14207 = load i64, i64* %PC
  %14208 = add i64 %14207, 5
  store i64 %14208, i64* %PC
  %14209 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14210 = load i64, i64* %14209, align 8, !tbaa !2428
  %14211 = add i64 %14210, -8
  %14212 = inttoptr i64 %14211 to i64*
  store i64 %14206, i64* %14212
  store i64 %14211, i64* %14209, align 8, !tbaa !2428
  %14213 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14204, i64* %14213, align 8, !tbaa !2428
  %14214 = load i64, i64* %PC
  %14215 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %14214, %struct.Memory* %MEMORY.10)
  %14216 = load i64, i64* %PC
  %14217 = add i64 %14216, 10
  store i64 %14217, i64* %PC
  store i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 426), i64* %RDI, align 8, !tbaa !2428
  %14218 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14219 = load i64, i64* %PC
  %14220 = add i64 %14219, 8
  store i64 %14220, i64* %PC
  %14221 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 72) to double*)
  %14222 = bitcast i8* %14218 to double*
  store double %14221, double* %14222, align 1, !tbaa !2452
  %14223 = getelementptr inbounds i8, i8* %14218, i64 8
  %14224 = bitcast i8* %14223 to double*
  store double 0.000000e+00, double* %14224, align 1, !tbaa !2452
  %14225 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14226 = load i64, i64* %PC
  %14227 = add i64 %14226, 8
  store i64 %14227, i64* %PC
  %14228 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 96) to double*)
  %14229 = bitcast i8* %14225 to double*
  store double %14228, double* %14229, align 1, !tbaa !2452
  %14230 = getelementptr inbounds i8, i8* %14225, i64 8
  %14231 = bitcast i8* %14230 to double*
  store double 0.000000e+00, double* %14231, align 1, !tbaa !2452
  %14232 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14233 = load i64, i64* %PC
  %14234 = add i64 %14233, 8
  store i64 %14234, i64* %PC
  %14235 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 104) to double*)
  %14236 = bitcast i8* %14232 to double*
  store double %14235, double* %14236, align 1, !tbaa !2452
  %14237 = getelementptr inbounds i8, i8* %14232, i64 8
  %14238 = bitcast i8* %14237 to double*
  store double 0.000000e+00, double* %14238, align 1, !tbaa !2452
  %14239 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14240 = load i64, i64* %PC
  %14241 = add i64 %14240, 9
  store i64 %14241, i64* %PC
  %14242 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 8) to double*)
  %14243 = bitcast i8* %14239 to double*
  store double %14242, double* %14243, align 1, !tbaa !2452
  %14244 = getelementptr inbounds i8, i8* %14239, i64 8
  %14245 = bitcast i8* %14244 to double*
  store double 0.000000e+00, double* %14245, align 1, !tbaa !2452
  %14246 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14247 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14248 = load i64, i64* %PC
  %14249 = add i64 %14248, 9
  store i64 %14249, i64* %PC
  %14250 = bitcast i8* %14247 to double*
  %14251 = load double, double* %14250, align 1
  %14252 = getelementptr inbounds i8, i8* %14247, i64 8
  %14253 = bitcast i8* %14252 to i64*
  %14254 = load i64, i64* %14253, align 1
  %14255 = load double, double* inttoptr (i64 add (i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64 8) to double*)
  %14256 = fmul double %14251, %14255
  %14257 = bitcast i8* %14246 to double*
  store double %14256, double* %14257, align 1, !tbaa !2452
  %14258 = getelementptr inbounds i8, i8* %14246, i64 8
  %14259 = bitcast i8* %14258 to i64*
  store i64 %14254, i64* %14259, align 1, !tbaa !2452
  %14260 = bitcast %union.vec128_t* %XMM3 to i8*
  %14261 = load i64, i64* %PC
  %14262 = add i64 %14261, 9
  store i64 %14262, i64* %PC
  %14263 = bitcast i8* %14260 to double*
  %14264 = load double, double* %14263, align 1
  store double %14264, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 48) to double*)
  %14265 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14266 = load i64, i64* %PC
  %14267 = add i64 %14266, 9
  store i64 %14267, i64* %PC
  %14268 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 48) to double*)
  %14269 = bitcast i8* %14265 to double*
  store double %14268, double* %14269, align 1, !tbaa !2452
  %14270 = getelementptr inbounds i8, i8* %14265, i64 8
  %14271 = bitcast i8* %14270 to double*
  store double 0.000000e+00, double* %14271, align 1, !tbaa !2452
  %14272 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14273 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14274 = load i64, i64* %PC
  %14275 = add i64 %14274, 9
  store i64 %14275, i64* %PC
  %14276 = bitcast i8* %14273 to double*
  %14277 = load double, double* %14276, align 1
  %14278 = getelementptr inbounds i8, i8* %14273, i64 8
  %14279 = bitcast i8* %14278 to i64*
  %14280 = load i64, i64* %14279, align 1
  %14281 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  %14282 = fsub double %14277, %14281
  %14283 = bitcast i8* %14272 to double*
  store double %14282, double* %14283, align 1, !tbaa !2452
  %14284 = getelementptr inbounds i8, i8* %14272, i64 8
  %14285 = bitcast i8* %14284 to i64*
  store i64 %14280, i64* %14285, align 1, !tbaa !2452
  %14286 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14287 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14288 = bitcast %union.vec128_t* %XMM2 to i8*
  %14289 = load i64, i64* %PC
  %14290 = add i64 %14289, 4
  store i64 %14290, i64* %PC
  %14291 = bitcast i8* %14287 to double*
  %14292 = load double, double* %14291, align 1
  %14293 = getelementptr inbounds i8, i8* %14287, i64 8
  %14294 = bitcast i8* %14293 to i64*
  %14295 = load i64, i64* %14294, align 1
  %14296 = bitcast i8* %14288 to double*
  %14297 = load double, double* %14296, align 1
  %14298 = fdiv double %14292, %14297
  %14299 = bitcast i8* %14286 to double*
  store double %14298, double* %14299, align 1, !tbaa !2452
  %14300 = getelementptr inbounds i8, i8* %14286, i64 8
  %14301 = bitcast i8* %14300 to i64*
  store i64 %14295, i64* %14301, align 1, !tbaa !2452
  %14302 = bitcast %union.vec128_t* %XMM3 to i8*
  %14303 = load i64, i64* %PC
  %14304 = add i64 %14303, 9
  store i64 %14304, i64* %PC
  %14305 = bitcast i8* %14302 to double*
  %14306 = load double, double* %14305, align 1
  store double %14306, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 56) to double*)
  %14307 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14308 = load i64, i64* %PC
  %14309 = add i64 %14308, 9
  store i64 %14309, i64* %PC
  %14310 = load double, double* bitcast (%sa_type* @sa to double*)
  %14311 = bitcast i8* %14307 to double*
  store double %14310, double* %14311, align 1, !tbaa !2452
  %14312 = getelementptr inbounds i8, i8* %14307, i64 8
  %14313 = bitcast i8* %14312 to double*
  store double 0.000000e+00, double* %14313, align 1, !tbaa !2452
  %14314 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14315 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14316 = load i64, i64* %RBP
  %14317 = sub i64 %14316, 48
  %14318 = load i64, i64* %PC
  %14319 = add i64 %14318, 5
  store i64 %14319, i64* %PC
  %14320 = bitcast i8* %14315 to double*
  %14321 = load double, double* %14320, align 1
  %14322 = getelementptr inbounds i8, i8* %14315, i64 8
  %14323 = bitcast i8* %14322 to i64*
  %14324 = load i64, i64* %14323, align 1
  %14325 = inttoptr i64 %14317 to double*
  %14326 = load double, double* %14325
  %14327 = fmul double %14321, %14326
  %14328 = bitcast i8* %14314 to double*
  store double %14327, double* %14328, align 1, !tbaa !2452
  %14329 = getelementptr inbounds i8, i8* %14314, i64 8
  %14330 = bitcast i8* %14329 to i64*
  store i64 %14324, i64* %14330, align 1, !tbaa !2452
  %14331 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14332 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14333 = load i64, i64* %PC
  %14334 = add i64 %14333, 9
  store i64 %14334, i64* %PC
  %14335 = bitcast i8* %14332 to double*
  %14336 = load double, double* %14335, align 1
  %14337 = getelementptr inbounds i8, i8* %14332, i64 8
  %14338 = bitcast i8* %14337 to i64*
  %14339 = load i64, i64* %14338, align 1
  %14340 = load double, double* bitcast (%sc_type* @sc to double*)
  %14341 = fdiv double %14336, %14340
  %14342 = bitcast i8* %14331 to double*
  store double %14341, double* %14342, align 1, !tbaa !2452
  %14343 = getelementptr inbounds i8, i8* %14331, i64 8
  %14344 = bitcast i8* %14343 to i64*
  store i64 %14339, i64* %14344, align 1, !tbaa !2452
  %14345 = bitcast %union.vec128_t* %XMM2 to i8*
  %14346 = load i64, i64* %PC
  %14347 = add i64 %14346, 5
  store i64 %14347, i64* %PC
  %14348 = bitcast i8* %14345 to double*
  %14349 = load double, double* %14348, align 1
  %14350 = call double @llvm.trunc.f64(double %14349) #16
  %14351 = call double @llvm.fabs.f64(double %14350) #16
  %14352 = fcmp ogt double %14351, 0x43E0000000000000
  %14353 = fptosi double %14350 to i64
  %14354 = select i1 %14352, i64 -9223372036854775808, i64 %14353
  store i64 %14354, i64* %RCX, align 8, !tbaa !2428
  %14355 = load i64, i64* %RBP
  %14356 = sub i64 %14355, 80
  %14357 = load i64, i64* %RCX
  %14358 = load i64, i64* %PC
  %14359 = add i64 %14358, 4
  store i64 %14359, i64* %PC
  %14360 = inttoptr i64 %14356 to i64*
  store i64 %14357, i64* %14360
  %14361 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14362 = load i64, i64* %PC
  %14363 = add i64 %14362, 9
  store i64 %14363, i64* %PC
  %14364 = load double, double* bitcast (%four_type* @four to double*)
  %14365 = bitcast i8* %14361 to double*
  store double %14364, double* %14365, align 1, !tbaa !2452
  %14366 = getelementptr inbounds i8, i8* %14361, i64 8
  %14367 = bitcast i8* %14366 to double*
  store double 0.000000e+00, double* %14367, align 1, !tbaa !2452
  %14368 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14369 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14370 = load i64, i64* %RBP
  %14371 = sub i64 %14370, 40
  %14372 = load i64, i64* %PC
  %14373 = add i64 %14372, 5
  store i64 %14373, i64* %PC
  %14374 = bitcast i8* %14369 to double*
  %14375 = load double, double* %14374, align 1
  %14376 = getelementptr inbounds i8, i8* %14369, i64 8
  %14377 = bitcast i8* %14376 to i64*
  %14378 = load i64, i64* %14377, align 1
  %14379 = inttoptr i64 %14371 to double*
  %14380 = load double, double* %14379
  %14381 = fmul double %14375, %14380
  %14382 = bitcast i8* %14368 to double*
  store double %14381, double* %14382, align 1, !tbaa !2452
  %14383 = getelementptr inbounds i8, i8* %14368, i64 8
  %14384 = bitcast i8* %14383 to i64*
  store i64 %14378, i64* %14384, align 1, !tbaa !2452
  %14385 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14386 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14387 = load i64, i64* %PC
  %14388 = add i64 %14387, 9
  store i64 %14388, i64* %PC
  %14389 = bitcast i8* %14386 to double*
  %14390 = load double, double* %14389, align 1
  %14391 = getelementptr inbounds i8, i8* %14386, i64 8
  %14392 = bitcast i8* %14391 to i64*
  %14393 = load i64, i64* %14392, align 1
  %14394 = load double, double* bitcast (%five_type* @five to double*)
  %14395 = fdiv double %14390, %14394
  %14396 = bitcast i8* %14385 to double*
  store double %14395, double* %14396, align 1, !tbaa !2452
  %14397 = getelementptr inbounds i8, i8* %14385, i64 8
  %14398 = bitcast i8* %14397 to i64*
  store i64 %14393, i64* %14398, align 1, !tbaa !2452
  %14399 = bitcast %union.vec128_t* %XMM2 to i8*
  %14400 = load i64, i64* %PC
  %14401 = add i64 %14400, 9
  store i64 %14401, i64* %PC
  %14402 = bitcast i8* %14399 to double*
  %14403 = load double, double* %14402, align 1
  store double %14403, double* bitcast (%sa_type* @sa to double*)
  %14404 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14405 = load i64, i64* %PC
  %14406 = add i64 %14405, 9
  store i64 %14406, i64* %PC
  %14407 = load double, double* bitcast (%sa_type* @sa to double*)
  %14408 = bitcast i8* %14404 to double*
  store double %14407, double* %14408, align 1, !tbaa !2452
  %14409 = getelementptr inbounds i8, i8* %14404, i64 8
  %14410 = bitcast i8* %14409 to double*
  store double 0.000000e+00, double* %14410, align 1, !tbaa !2452
  %14411 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14412 = load i64, i64* %PC
  %14413 = add i64 %14412, 9
  store i64 %14413, i64* %PC
  %14414 = load double, double* bitcast (%five_type* @five to double*)
  %14415 = bitcast i8* %14411 to double*
  store double %14414, double* %14415, align 1, !tbaa !2452
  %14416 = getelementptr inbounds i8, i8* %14411, i64 8
  %14417 = bitcast i8* %14416 to double*
  store double 0.000000e+00, double* %14417, align 1, !tbaa !2452
  %14418 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14419 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14420 = load i64, i64* %RBP
  %14421 = sub i64 %14420, 32
  %14422 = load i64, i64* %PC
  %14423 = add i64 %14422, 5
  store i64 %14423, i64* %PC
  %14424 = bitcast i8* %14419 to double*
  %14425 = load double, double* %14424, align 1
  %14426 = getelementptr inbounds i8, i8* %14419, i64 8
  %14427 = bitcast i8* %14426 to i64*
  %14428 = load i64, i64* %14427, align 1
  %14429 = inttoptr i64 %14421 to double*
  %14430 = load double, double* %14429
  %14431 = fdiv double %14425, %14430
  %14432 = bitcast i8* %14418 to double*
  store double %14431, double* %14432, align 1, !tbaa !2452
  %14433 = getelementptr inbounds i8, i8* %14418, i64 8
  %14434 = bitcast i8* %14433 to i64*
  store i64 %14428, i64* %14434, align 1, !tbaa !2452
  %14435 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14436 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14437 = bitcast %union.vec128_t* %XMM3 to i8*
  %14438 = load i64, i64* %PC
  %14439 = add i64 %14438, 4
  store i64 %14439, i64* %PC
  %14440 = bitcast i8* %14436 to double*
  %14441 = load double, double* %14440, align 1
  %14442 = getelementptr inbounds i8, i8* %14436, i64 8
  %14443 = bitcast i8* %14442 to i64*
  %14444 = load i64, i64* %14443, align 1
  %14445 = bitcast i8* %14437 to double*
  %14446 = load double, double* %14445, align 1
  %14447 = fadd double %14441, %14446
  %14448 = bitcast i8* %14435 to double*
  store double %14447, double* %14448, align 1, !tbaa !2452
  %14449 = getelementptr inbounds i8, i8* %14435, i64 8
  %14450 = bitcast i8* %14449 to i64*
  store i64 %14444, i64* %14450, align 1, !tbaa !2452
  %14451 = bitcast %union.vec128_t* %XMM2 to i8*
  %14452 = load i64, i64* %PC
  %14453 = add i64 %14452, 9
  store i64 %14453, i64* %PC
  %14454 = bitcast i8* %14451 to double*
  %14455 = load double, double* %14454, align 1
  store double %14455, double* bitcast (%sb_type* @sb to double*)
  %14456 = bitcast %union.vec128_t* %XMM1 to i8*
  %14457 = load i64, i64* %PC
  %14458 = add i64 %14457, 9
  store i64 %14458, i64* %PC
  %14459 = bitcast i8* %14456 to double*
  %14460 = load double, double* %14459, align 1
  store double %14460, double* bitcast (%sc_type* @sc to double*)
  %14461 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14462 = load i64, i64* %PC
  %14463 = add i64 %14462, 9
  store i64 %14463, i64* %PC
  %14464 = load double, double* bitcast (%sb_type* @sb to double*)
  %14465 = bitcast i8* %14461 to double*
  store double %14464, double* %14465, align 1, !tbaa !2452
  %14466 = getelementptr inbounds i8, i8* %14461, i64 8
  %14467 = bitcast i8* %14466 to double*
  store double 0.000000e+00, double* %14467, align 1, !tbaa !2452
  %14468 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14469 = load i64, i64* %PC
  %14470 = add i64 %14469, 9
  store i64 %14470, i64* %PC
  %14471 = load double, double* bitcast (%sc_type* @sc to double*)
  %14472 = bitcast i8* %14468 to double*
  store double %14471, double* %14472, align 1, !tbaa !2452
  %14473 = getelementptr inbounds i8, i8* %14468, i64 8
  %14474 = bitcast i8* %14473 to double*
  store double 0.000000e+00, double* %14474, align 1, !tbaa !2452
  %14475 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14476 = load i64, i64* %RBP
  %14477 = sub i64 %14476, 32
  %14478 = load i64, i64* %PC
  %14479 = add i64 %14478, 5
  store i64 %14479, i64* %PC
  %14480 = inttoptr i64 %14477 to double*
  %14481 = load double, double* %14480
  %14482 = bitcast i8* %14475 to double*
  store double %14481, double* %14482, align 1, !tbaa !2452
  %14483 = getelementptr inbounds i8, i8* %14475, i64 8
  %14484 = bitcast i8* %14483 to double*
  store double 0.000000e+00, double* %14484, align 1, !tbaa !2452
  %14485 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14486 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14487 = load i64, i64* %RBP
  %14488 = sub i64 %14487, 32
  %14489 = load i64, i64* %PC
  %14490 = add i64 %14489, 5
  store i64 %14490, i64* %PC
  %14491 = bitcast i8* %14486 to double*
  %14492 = load double, double* %14491, align 1
  %14493 = getelementptr inbounds i8, i8* %14486, i64 8
  %14494 = bitcast i8* %14493 to i64*
  %14495 = load i64, i64* %14494, align 1
  %14496 = inttoptr i64 %14488 to double*
  %14497 = load double, double* %14496
  %14498 = fmul double %14492, %14497
  %14499 = bitcast i8* %14485 to double*
  store double %14498, double* %14499, align 1, !tbaa !2452
  %14500 = getelementptr inbounds i8, i8* %14485, i64 8
  %14501 = bitcast i8* %14500 to i64*
  store i64 %14495, i64* %14501, align 1, !tbaa !2452
  %14502 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14503 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14504 = load i64, i64* %RBP
  %14505 = sub i64 %14504, 32
  %14506 = load i64, i64* %PC
  %14507 = add i64 %14506, 5
  store i64 %14507, i64* %PC
  %14508 = bitcast i8* %14503 to double*
  %14509 = load double, double* %14508, align 1
  %14510 = getelementptr inbounds i8, i8* %14503, i64 8
  %14511 = bitcast i8* %14510 to i64*
  %14512 = load i64, i64* %14511, align 1
  %14513 = inttoptr i64 %14505 to double*
  %14514 = load double, double* %14513
  %14515 = fmul double %14509, %14514
  %14516 = bitcast i8* %14502 to double*
  store double %14515, double* %14516, align 1, !tbaa !2452
  %14517 = getelementptr inbounds i8, i8* %14502, i64 8
  %14518 = bitcast i8* %14517 to i64*
  store i64 %14512, i64* %14518, align 1, !tbaa !2452
  %14519 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14520 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14521 = bitcast %union.vec128_t* %XMM3 to i8*
  %14522 = load i64, i64* %PC
  %14523 = add i64 %14522, 4
  store i64 %14523, i64* %PC
  %14524 = bitcast i8* %14520 to double*
  %14525 = load double, double* %14524, align 1
  %14526 = getelementptr inbounds i8, i8* %14520, i64 8
  %14527 = bitcast i8* %14526 to i64*
  %14528 = load i64, i64* %14527, align 1
  %14529 = bitcast i8* %14521 to double*
  %14530 = load double, double* %14529, align 1
  %14531 = fdiv double %14525, %14530
  %14532 = bitcast i8* %14519 to double*
  store double %14531, double* %14532, align 1, !tbaa !2452
  %14533 = getelementptr inbounds i8, i8* %14519, i64 8
  %14534 = bitcast i8* %14533 to i64*
  store i64 %14528, i64* %14534, align 1, !tbaa !2452
  %14535 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14536 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14537 = bitcast %union.vec128_t* %XMM2 to i8*
  %14538 = load i64, i64* %PC
  %14539 = add i64 %14538, 4
  store i64 %14539, i64* %PC
  %14540 = bitcast i8* %14536 to double*
  %14541 = load double, double* %14540, align 1
  %14542 = getelementptr inbounds i8, i8* %14536, i64 8
  %14543 = bitcast i8* %14542 to i64*
  %14544 = load i64, i64* %14543, align 1
  %14545 = bitcast i8* %14537 to double*
  %14546 = load double, double* %14545, align 1
  %14547 = fsub double %14541, %14546
  %14548 = bitcast i8* %14535 to double*
  store double %14547, double* %14548, align 1, !tbaa !2452
  %14549 = getelementptr inbounds i8, i8* %14535, i64 8
  %14550 = bitcast i8* %14549 to i64*
  store i64 %14544, i64* %14550, align 1, !tbaa !2452
  %14551 = bitcast %union.vec128_t* %XMM1 to i8*
  %14552 = load i64, i64* %PC
  %14553 = add i64 %14552, 9
  store i64 %14553, i64* %PC
  %14554 = bitcast i8* %14551 to double*
  %14555 = load double, double* %14554, align 1
  store double %14555, double* bitcast (%piprg_type* @piprg to double*)
  %14556 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14557 = load i64, i64* %PC
  %14558 = add i64 %14557, 9
  store i64 %14558, i64* %PC
  %14559 = load double, double* bitcast (%piprg_type* @piprg to double*)
  %14560 = bitcast i8* %14556 to double*
  store double %14559, double* %14560, align 1, !tbaa !2452
  %14561 = getelementptr inbounds i8, i8* %14556, i64 8
  %14562 = bitcast i8* %14561 to double*
  store double 0.000000e+00, double* %14562, align 1, !tbaa !2452
  %14563 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14564 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14565 = load i64, i64* %PC
  %14566 = add i64 %14565, 9
  store i64 %14566, i64* %PC
  %14567 = bitcast i8* %14564 to double*
  %14568 = load double, double* %14567, align 1
  %14569 = getelementptr inbounds i8, i8* %14564, i64 8
  %14570 = bitcast i8* %14569 to i64*
  %14571 = load i64, i64* %14570, align 1
  %14572 = load double, double* bitcast (%piref_type* @piref to double*)
  %14573 = fsub double %14568, %14572
  %14574 = bitcast i8* %14563 to double*
  store double %14573, double* %14574, align 1, !tbaa !2452
  %14575 = getelementptr inbounds i8, i8* %14563, i64 8
  %14576 = bitcast i8* %14575 to i64*
  store i64 %14571, i64* %14576, align 1, !tbaa !2452
  %14577 = bitcast %union.vec128_t* %XMM1 to i8*
  %14578 = load i64, i64* %PC
  %14579 = add i64 %14578, 9
  store i64 %14579, i64* %PC
  %14580 = bitcast i8* %14577 to double*
  %14581 = load double, double* %14580, align 1
  store double %14581, double* bitcast (%pierr_type* @pierr to double*)
  %14582 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14583 = load i64, i64* %PC
  %14584 = add i64 %14583, 9
  store i64 %14584, i64* %PC
  %14585 = load double, double* bitcast (%one_type* @one to double*)
  %14586 = bitcast i8* %14582 to double*
  store double %14585, double* %14586, align 1, !tbaa !2452
  %14587 = getelementptr inbounds i8, i8* %14582, i64 8
  %14588 = bitcast i8* %14587 to double*
  store double 0.000000e+00, double* %14588, align 1, !tbaa !2452
  %14589 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14590 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14591 = load i64, i64* %PC
  %14592 = add i64 %14591, 9
  store i64 %14592, i64* %PC
  %14593 = bitcast i8* %14590 to double*
  %14594 = load double, double* %14593, align 1
  %14595 = getelementptr inbounds i8, i8* %14590, i64 8
  %14596 = bitcast i8* %14595 to i64*
  %14597 = load i64, i64* %14596, align 1
  %14598 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 56) to double*)
  %14599 = fdiv double %14594, %14598
  %14600 = bitcast i8* %14589 to double*
  store double %14599, double* %14600, align 1, !tbaa !2452
  %14601 = getelementptr inbounds i8, i8* %14589, i64 8
  %14602 = bitcast i8* %14601 to i64*
  store i64 %14597, i64* %14602, align 1, !tbaa !2452
  %14603 = bitcast %union.vec128_t* %XMM1 to i8*
  %14604 = load i64, i64* %PC
  %14605 = add i64 %14604, 9
  store i64 %14605, i64* %PC
  %14606 = bitcast i8* %14603 to double*
  %14607 = load double, double* %14606, align 1
  store double %14607, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 64) to double*)
  %14608 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14609 = bitcast %union.vec128_t* %XMM0 to i8*
  %14610 = load i64, i64* %PC
  %14611 = add i64 %14610, 3
  store i64 %14611, i64* %PC
  %14612 = bitcast i8* %14609 to <2 x i32>*
  %14613 = load <2 x i32>, <2 x i32>* %14612, align 1
  %14614 = getelementptr inbounds i8, i8* %14609, i64 8
  %14615 = bitcast i8* %14614 to <2 x i32>*
  %14616 = load <2 x i32>, <2 x i32>* %14615, align 1
  %14617 = extractelement <2 x i32> %14613, i32 0
  %14618 = bitcast i8* %14608 to i32*
  store i32 %14617, i32* %14618, align 1, !tbaa !2455
  %14619 = extractelement <2 x i32> %14613, i32 1
  %14620 = getelementptr inbounds i8, i8* %14608, i64 4
  %14621 = bitcast i8* %14620 to i32*
  store i32 %14619, i32* %14621, align 1, !tbaa !2455
  %14622 = extractelement <2 x i32> %14616, i32 0
  %14623 = getelementptr inbounds i8, i8* %14608, i64 8
  %14624 = bitcast i8* %14623 to i32*
  store i32 %14622, i32* %14624, align 1, !tbaa !2455
  %14625 = extractelement <2 x i32> %14616, i32 1
  %14626 = getelementptr inbounds i8, i8* %14608, i64 12
  %14627 = bitcast i8* %14626 to i32*
  store i32 %14625, i32* %14627, align 1, !tbaa !2455
  %14628 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14629 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14630 = load i64, i64* %PC
  %14631 = add i64 %14630, 9
  store i64 %14631, i64* %PC
  %14632 = bitcast i8* %14629 to double*
  %14633 = load double, double* %14632, align 1
  %14634 = getelementptr inbounds i8, i8* %14629, i64 8
  %14635 = bitcast i8* %14634 to i64*
  %14636 = load i64, i64* %14635, align 1
  %14637 = load double, double* bitcast (%pierr_type* @pierr to double*)
  %14638 = fmul double %14633, %14637
  %14639 = bitcast i8* %14628 to double*
  store double %14638, double* %14639, align 1, !tbaa !2452
  %14640 = getelementptr inbounds i8, i8* %14628, i64 8
  %14641 = bitcast i8* %14640 to i64*
  store i64 %14636, i64* %14641, align 1, !tbaa !2452
  %14642 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14643 = load i64, i64* %PC
  %14644 = add i64 %14643, 9
  store i64 %14644, i64* %PC
  %14645 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 48) to double*)
  %14646 = bitcast i8* %14642 to double*
  store double %14645, double* %14646, align 1, !tbaa !2452
  %14647 = getelementptr inbounds i8, i8* %14642, i64 8
  %14648 = bitcast i8* %14647 to double*
  store double 0.000000e+00, double* %14648, align 1, !tbaa !2452
  %14649 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14650 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14651 = load i64, i64* %PC
  %14652 = add i64 %14651, 9
  store i64 %14652, i64* %PC
  %14653 = bitcast i8* %14650 to double*
  %14654 = load double, double* %14653, align 1
  %14655 = getelementptr inbounds i8, i8* %14650, i64 8
  %14656 = bitcast i8* %14655 to i64*
  %14657 = load i64, i64* %14656, align 1
  %14658 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 40) to double*)
  %14659 = fsub double %14654, %14658
  %14660 = bitcast i8* %14649 to double*
  store double %14659, double* %14660, align 1, !tbaa !2452
  %14661 = getelementptr inbounds i8, i8* %14649, i64 8
  %14662 = bitcast i8* %14661 to i64*
  store i64 %14657, i64* %14662, align 1, !tbaa !2452
  %14663 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14664 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14665 = bitcast %union.vec128_t* %XMM0 to i8*
  %14666 = load i64, i64* %PC
  %14667 = add i64 %14666, 4
  store i64 %14667, i64* %PC
  %14668 = bitcast i8* %14664 to double*
  %14669 = load double, double* %14668, align 1
  %14670 = getelementptr inbounds i8, i8* %14664, i64 8
  %14671 = bitcast i8* %14670 to i64*
  %14672 = load i64, i64* %14671, align 1
  %14673 = bitcast i8* %14665 to double*
  %14674 = load double, double* %14673, align 1
  %14675 = fmul double %14669, %14674
  %14676 = bitcast i8* %14663 to double*
  store double %14675, double* %14676, align 1, !tbaa !2452
  %14677 = getelementptr inbounds i8, i8* %14663, i64 8
  %14678 = bitcast i8* %14677 to i64*
  store i64 %14672, i64* %14678, align 1, !tbaa !2452
  %14679 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14680 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14681 = load i64, i64* %PC
  %14682 = add i64 %14681, 9
  store i64 %14682, i64* %PC
  %14683 = bitcast i8* %14680 to double*
  %14684 = load double, double* %14683, align 1
  %14685 = getelementptr inbounds i8, i8* %14680, i64 8
  %14686 = bitcast i8* %14685 to i64*
  %14687 = load i64, i64* %14686, align 1
  %14688 = load double, double* inttoptr (i64 add (i64 ptrtoint (%T_type* @T to i64), i64 64) to double*)
  %14689 = fmul double %14684, %14688
  %14690 = bitcast i8* %14679 to double*
  store double %14689, double* %14690, align 1, !tbaa !2452
  %14691 = getelementptr inbounds i8, i8* %14679, i64 8
  %14692 = bitcast i8* %14691 to i64*
  store i64 %14687, i64* %14692, align 1, !tbaa !2452
  %14693 = load i64, i64* %RBP
  %14694 = sub i64 %14693, 160
  %14695 = bitcast %union.vec128_t* %XMM0 to i8*
  %14696 = load i64, i64* %PC
  %14697 = add i64 %14696, 8
  store i64 %14697, i64* %PC
  %14698 = bitcast i8* %14695 to double*
  %14699 = load double, double* %14698, align 1
  %14700 = inttoptr i64 %14694 to double*
  store double %14699, double* %14700
  %14701 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14702 = bitcast %union.vec128_t* %XMM1 to i8*
  %14703 = load i64, i64* %PC
  %14704 = add i64 %14703, 3
  store i64 %14704, i64* %PC
  %14705 = bitcast i8* %14702 to <2 x i32>*
  %14706 = load <2 x i32>, <2 x i32>* %14705, align 1
  %14707 = getelementptr inbounds i8, i8* %14702, i64 8
  %14708 = bitcast i8* %14707 to <2 x i32>*
  %14709 = load <2 x i32>, <2 x i32>* %14708, align 1
  %14710 = extractelement <2 x i32> %14706, i32 0
  %14711 = bitcast i8* %14701 to i32*
  store i32 %14710, i32* %14711, align 1, !tbaa !2455
  %14712 = extractelement <2 x i32> %14706, i32 1
  %14713 = getelementptr inbounds i8, i8* %14701, i64 4
  %14714 = bitcast i8* %14713 to i32*
  store i32 %14712, i32* %14714, align 1, !tbaa !2455
  %14715 = extractelement <2 x i32> %14709, i32 0
  %14716 = getelementptr inbounds i8, i8* %14701, i64 8
  %14717 = bitcast i8* %14716 to i32*
  store i32 %14715, i32* %14717, align 1, !tbaa !2455
  %14718 = extractelement <2 x i32> %14709, i32 1
  %14719 = getelementptr inbounds i8, i8* %14701, i64 12
  %14720 = bitcast i8* %14719 to i32*
  store i32 %14718, i32* %14720, align 1, !tbaa !2455
  %14721 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14722 = bitcast %union.vec128_t* %XMM2 to i8*
  %14723 = load i64, i64* %PC
  %14724 = add i64 %14723, 3
  store i64 %14724, i64* %PC
  %14725 = bitcast i8* %14722 to <2 x i32>*
  %14726 = load <2 x i32>, <2 x i32>* %14725, align 1
  %14727 = getelementptr inbounds i8, i8* %14722, i64 8
  %14728 = bitcast i8* %14727 to <2 x i32>*
  %14729 = load <2 x i32>, <2 x i32>* %14728, align 1
  %14730 = extractelement <2 x i32> %14726, i32 0
  %14731 = bitcast i8* %14721 to i32*
  store i32 %14730, i32* %14731, align 1, !tbaa !2455
  %14732 = extractelement <2 x i32> %14726, i32 1
  %14733 = getelementptr inbounds i8, i8* %14721, i64 4
  %14734 = bitcast i8* %14733 to i32*
  store i32 %14732, i32* %14734, align 1, !tbaa !2455
  %14735 = extractelement <2 x i32> %14729, i32 0
  %14736 = getelementptr inbounds i8, i8* %14721, i64 8
  %14737 = bitcast i8* %14736 to i32*
  store i32 %14735, i32* %14737, align 1, !tbaa !2455
  %14738 = extractelement <2 x i32> %14729, i32 1
  %14739 = getelementptr inbounds i8, i8* %14721, i64 12
  %14740 = bitcast i8* %14739 to i32*
  store i32 %14738, i32* %14740, align 1, !tbaa !2455
  %14741 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14742 = load i64, i64* %RBP
  %14743 = sub i64 %14742, 160
  %14744 = load i64, i64* %PC
  %14745 = add i64 %14744, 8
  store i64 %14745, i64* %PC
  %14746 = inttoptr i64 %14743 to double*
  %14747 = load double, double* %14746
  %14748 = bitcast i8* %14741 to double*
  store double %14747, double* %14748, align 1, !tbaa !2452
  %14749 = getelementptr inbounds i8, i8* %14741, i64 8
  %14750 = bitcast i8* %14749 to double*
  store double 0.000000e+00, double* %14750, align 1, !tbaa !2452
  %14751 = load i64, i64* %RBP
  %14752 = sub i64 %14751, 164
  %14753 = load i32, i32* %EAX
  %14754 = zext i32 %14753 to i64
  %14755 = load i64, i64* %PC
  %14756 = add i64 %14755, 6
  store i64 %14756, i64* %PC
  %14757 = inttoptr i64 %14752 to i32*
  store i32 %14753, i32* %14757
  %14758 = load i64, i64* %PC
  %14759 = add i64 %14758, 2
  store i64 %14759, i64* %PC
  store i8 3, i8* %AL, align 1, !tbaa !2451
  %14760 = load i64, i64* %PC
  %14761 = sub i64 %14760, 2506
  %14762 = load i64, i64* %PC
  %14763 = add i64 %14762, 5
  %14764 = load i64, i64* %PC
  %14765 = add i64 %14764, 5
  store i64 %14765, i64* %PC
  %14766 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14767 = load i64, i64* %14766, align 8, !tbaa !2428
  %14768 = add i64 %14767, -8
  %14769 = inttoptr i64 %14768 to i64*
  store i64 %14763, i64* %14769
  store i64 %14768, i64* %14766, align 8, !tbaa !2428
  %14770 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14761, i64* %14770, align 8, !tbaa !2428
  %14771 = load i64, i64* %PC
  %14772 = call %struct.Memory* @ext_603310_printf(%struct.State* %0, i64 %14771, %struct.Memory* %14215)
  %14773 = load i64, i64* %PC
  %14774 = add i64 %14773, 10
  store i64 %14774, i64* %PC
  store i64 ptrtoint (%TimeArray_type* @TimeArray to i64), i64* %RDI, align 8, !tbaa !2428
  %14775 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14776 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %14777 = bitcast %union.vec128_t* %XMM0 to i8*
  %14778 = load i64, i64* %PC
  %14779 = add i64 %14778, 3
  store i64 %14779, i64* %PC
  %14780 = bitcast i8* %14776 to i64*
  %14781 = load i64, i64* %14780, align 1
  %14782 = getelementptr inbounds i8, i8* %14776, i64 8
  %14783 = bitcast i8* %14782 to i64*
  %14784 = load i64, i64* %14783, align 1
  %14785 = bitcast i8* %14777 to i64*
  %14786 = load i64, i64* %14785, align 1
  %14787 = getelementptr inbounds i8, i8* %14777, i64 8
  %14788 = bitcast i8* %14787 to i64*
  %14789 = load i64, i64* %14788, align 1
  %14790 = xor i64 %14786, %14781
  %14791 = xor i64 %14789, %14784
  %14792 = trunc i64 %14790 to i32
  %14793 = lshr i64 %14790, 32
  %14794 = trunc i64 %14793 to i32
  %14795 = bitcast i8* %14775 to i32*
  store i32 %14792, i32* %14795, align 1, !tbaa !2454
  %14796 = getelementptr inbounds i8, i8* %14775, i64 4
  %14797 = bitcast i8* %14796 to i32*
  store i32 %14794, i32* %14797, align 1, !tbaa !2454
  %14798 = trunc i64 %14791 to i32
  %14799 = getelementptr inbounds i8, i8* %14775, i64 8
  %14800 = bitcast i8* %14799 to i32*
  store i32 %14798, i32* %14800, align 1, !tbaa !2454
  %14801 = lshr i64 %14791, 32
  %14802 = trunc i64 %14801 to i32
  %14803 = getelementptr inbounds i8, i8* %14775, i64 12
  %14804 = bitcast i8* %14803 to i32*
  store i32 %14802, i32* %14804, align 1, !tbaa !2454
  %14805 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14806 = load i64, i64* %PC
  %14807 = add i64 %14806, 9
  store i64 %14807, i64* %PC
  %14808 = load double, double* bitcast (%piref_type* @piref to double*)
  %14809 = bitcast i8* %14805 to double*
  store double %14808, double* %14809, align 1, !tbaa !2452
  %14810 = getelementptr inbounds i8, i8* %14805, i64 8
  %14811 = bitcast i8* %14810 to double*
  store double 0.000000e+00, double* %14811, align 1, !tbaa !2452
  %14812 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14813 = load i64, i64* %PC
  %14814 = add i64 %14813, 9
  store i64 %14814, i64* %PC
  %14815 = load double, double* bitcast (%three_type* @three to double*)
  %14816 = bitcast i8* %14812 to double*
  store double %14815, double* %14816, align 1, !tbaa !2452
  %14817 = getelementptr inbounds i8, i8* %14812, i64 8
  %14818 = bitcast i8* %14817 to double*
  store double 0.000000e+00, double* %14818, align 1, !tbaa !2452
  %14819 = bitcast %"class.std::bitset"* %YMM3 to i8*
  %14820 = load i64, i64* %RBP
  %14821 = sub i64 %14820, 80
  %14822 = load i64, i64* %PC
  %14823 = add i64 %14822, 6
  store i64 %14823, i64* %PC
  %14824 = inttoptr i64 %14821 to i64*
  %14825 = load i64, i64* %14824
  %14826 = sitofp i64 %14825 to double
  %14827 = bitcast i8* %14819 to double*
  store double %14826, double* %14827, align 1, !tbaa !2452
  %14828 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14829 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %14830 = bitcast %union.vec128_t* %XMM3 to i8*
  %14831 = load i64, i64* %PC
  %14832 = add i64 %14831, 4
  store i64 %14832, i64* %PC
  %14833 = bitcast i8* %14829 to double*
  %14834 = load double, double* %14833, align 1
  %14835 = getelementptr inbounds i8, i8* %14829, i64 8
  %14836 = bitcast i8* %14835 to i64*
  %14837 = load i64, i64* %14836, align 1
  %14838 = bitcast i8* %14830 to double*
  %14839 = load double, double* %14838, align 1
  %14840 = fmul double %14834, %14839
  %14841 = bitcast i8* %14828 to double*
  store double %14840, double* %14841, align 1, !tbaa !2452
  %14842 = getelementptr inbounds i8, i8* %14828, i64 8
  %14843 = bitcast i8* %14842 to i64*
  store i64 %14837, i64* %14843, align 1, !tbaa !2452
  %14844 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14845 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %14846 = bitcast %union.vec128_t* %XMM2 to i8*
  %14847 = load i64, i64* %PC
  %14848 = add i64 %14847, 4
  store i64 %14848, i64* %PC
  %14849 = bitcast i8* %14845 to double*
  %14850 = load double, double* %14849, align 1
  %14851 = getelementptr inbounds i8, i8* %14845, i64 8
  %14852 = bitcast i8* %14851 to i64*
  %14853 = load i64, i64* %14852, align 1
  %14854 = bitcast i8* %14846 to double*
  %14855 = load double, double* %14854, align 1
  %14856 = fdiv double %14850, %14855
  %14857 = bitcast i8* %14844 to double*
  store double %14856, double* %14857, align 1, !tbaa !2452
  %14858 = getelementptr inbounds i8, i8* %14844, i64 8
  %14859 = bitcast i8* %14858 to i64*
  store i64 %14853, i64* %14859, align 1, !tbaa !2452
  %14860 = load i64, i64* %RBP
  %14861 = sub i64 %14860, 48
  %14862 = bitcast %union.vec128_t* %XMM1 to i8*
  %14863 = load i64, i64* %PC
  %14864 = add i64 %14863, 5
  store i64 %14864, i64* %PC
  %14865 = bitcast i8* %14862 to double*
  %14866 = load double, double* %14865, align 1
  %14867 = inttoptr i64 %14861 to double*
  store double %14866, double* %14867
  %14868 = load i64, i64* %RBP
  %14869 = sub i64 %14868, 16
  %14870 = bitcast %union.vec128_t* %XMM0 to i8*
  %14871 = load i64, i64* %PC
  %14872 = add i64 %14871, 5
  store i64 %14872, i64* %PC
  %14873 = bitcast i8* %14870 to double*
  %14874 = load double, double* %14873, align 1
  %14875 = inttoptr i64 %14869 to double*
  store double %14874, double* %14875
  %14876 = load i64, i64* %RBP
  %14877 = sub i64 %14876, 32
  %14878 = bitcast %union.vec128_t* %XMM0 to i8*
  %14879 = load i64, i64* %PC
  %14880 = add i64 %14879, 5
  store i64 %14880, i64* %PC
  %14881 = bitcast i8* %14878 to double*
  %14882 = load double, double* %14881, align 1
  %14883 = inttoptr i64 %14877 to double*
  store double %14882, double* %14883
  %14884 = load i64, i64* %RBP
  %14885 = sub i64 %14884, 168
  %14886 = load i32, i32* %EAX
  %14887 = zext i32 %14886 to i64
  %14888 = load i64, i64* %PC
  %14889 = add i64 %14888, 6
  store i64 %14889, i64* %PC
  %14890 = inttoptr i64 %14885 to i32*
  store i32 %14886, i32* %14890
  %14891 = load i64, i64* %PC
  %14892 = add i64 %14891, 6015
  %14893 = load i64, i64* %PC
  %14894 = add i64 %14893, 5
  %14895 = load i64, i64* %PC
  %14896 = add i64 %14895, 5
  store i64 %14896, i64* %PC
  %14897 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %14898 = load i64, i64* %14897, align 8, !tbaa !2428
  %14899 = add i64 %14898, -8
  %14900 = inttoptr i64 %14899 to i64*
  store i64 %14894, i64* %14900
  store i64 %14899, i64* %14897, align 8, !tbaa !2428
  %14901 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %14892, i64* %14901, align 8, !tbaa !2428
  %14902 = load i64, i64* %PC
  %14903 = call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %14902, %struct.Memory* %14772)
  %14904 = load i64, i64* %RBP
  %14905 = sub i64 %14904, 72
  %14906 = load i64, i64* %PC
  %14907 = add i64 %14906, 8
  store i64 %14907, i64* %PC
  %14908 = inttoptr i64 %14905 to i64*
  store i64 1, i64* %14908
  %14909 = load i64, i64* %RBP
  %14910 = sub i64 %14909, 172
  %14911 = load i32, i32* %EAX
  %14912 = zext i32 %14911 to i64
  %14913 = load i64, i64* %PC
  %14914 = add i64 %14913, 6
  store i64 %14914, i64* %PC
  %14915 = inttoptr i64 %14910 to i32*
  store i32 %14911, i32* %14915
  br label %block_400e64
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004d0_register_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004d0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 9
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RSI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 11
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RDI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 13
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RSP = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 15
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RBP = bitcast %union.anon* %26 to i64*
  %27 = load i64, i64* %PC
  %28 = add i64 %27, 5
  store i64 %28, i64* %PC
  store i64 6304024, i64* %RSI, align 8, !tbaa !2428
  %29 = load i64, i64* %RBP
  %30 = load i64, i64* %PC
  %31 = add i64 %30, 1
  store i64 %31, i64* %PC
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !tbaa !2428
  %34 = add i64 %33, -8
  %35 = inttoptr i64 %34 to i64*
  store i64 %29, i64* %35
  store i64 %34, i64* %32, align 8, !tbaa !2428
  %36 = load i64, i64* %RSI
  %37 = load i64, i64* %PC
  %38 = add i64 %37, 7
  store i64 %38, i64* %PC
  %39 = sub i64 %36, 6304024
  store i64 %39, i64* %RSI, align 8, !tbaa !2428
  %40 = icmp ult i64 %36, 6304024
  %41 = zext i1 %40 to i8
  %42 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %41, i8* %42, align 1, !tbaa !2432
  %43 = trunc i64 %39 to i32
  %44 = and i32 %43, 255
  %45 = call i32 @llvm.ctpop.i32(i32 %44) #16
  %46 = trunc i32 %45 to i8
  %47 = and i8 %46, 1
  %48 = xor i8 %47, 1
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %48, i8* %49, align 1, !tbaa !2446
  %50 = xor i64 6304024, %36
  %51 = xor i64 %50, %39
  %52 = lshr i64 %51, 4
  %53 = trunc i64 %52 to i8
  %54 = and i8 %53, 1
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %54, i8* %55, align 1, !tbaa !2450
  %56 = icmp eq i64 %39, 0
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %57, i8* %58, align 1, !tbaa !2447
  %59 = lshr i64 %39, 63
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %60, i8* %61, align 1, !tbaa !2448
  %62 = lshr i64 %36, 63
  %63 = xor i64 %59, %62
  %64 = add nuw nsw i64 %63, %62
  %65 = icmp eq i64 %64, 2
  %66 = zext i1 %65 to i8
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %66, i8* %67, align 1, !tbaa !2449
  %68 = load i64, i64* %RSP
  %69 = load i64, i64* %PC
  %70 = add i64 %69, 3
  store i64 %70, i64* %PC
  store i64 %68, i64* %RBP, align 8, !tbaa !2428
  %71 = load i64, i64* %RSI
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 4
  store i64 %73, i64* %PC
  %74 = ashr i64 %71, 2
  %75 = trunc i64 %74 to i8
  %76 = and i8 %75, 1
  %77 = ashr i64 %74, 1
  store i64 %77, i64* %RSI, align 8, !tbaa !2428
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %76, i8* %78, align 1, !tbaa !2451
  %79 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %80 = trunc i64 %77 to i32
  %81 = and i32 %80, 255
  %82 = call i32 @llvm.ctpop.i32(i32 %81) #16
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 1
  %85 = xor i8 %84, 1
  store i8 %85, i8* %79, align 1, !tbaa !2451
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %86, align 1, !tbaa !2451
  %87 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %88 = icmp eq i64 %77, 0
  %89 = zext i1 %88 to i8
  store i8 %89, i8* %87, align 1, !tbaa !2451
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %91 = lshr i64 %77, 63
  %92 = trunc i64 %91 to i8
  store i8 %92, i8* %90, align 1, !tbaa !2451
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %93, align 1, !tbaa !2451
  %94 = load i64, i64* %RSI
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 3
  store i64 %96, i64* %PC
  store i64 %94, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %PC
  %99 = add i64 %98, 4
  store i64 %99, i64* %PC
  %100 = lshr i64 %97, 62
  %101 = trunc i64 %100 to i8
  %102 = and i8 %101, 1
  %103 = lshr i64 %100, 1
  store i64 %103, i64* %RAX, align 8, !tbaa !2428
  %104 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %102, i8* %104, align 1, !tbaa !2451
  %105 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %106 = trunc i64 %103 to i32
  %107 = and i32 %106, 255
  %108 = call i32 @llvm.ctpop.i32(i32 %107) #16
  %109 = trunc i32 %108 to i8
  %110 = and i8 %109, 1
  %111 = xor i8 %110, 1
  store i8 %111, i8* %105, align 1, !tbaa !2451
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %112, align 1, !tbaa !2451
  %113 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %114 = icmp eq i64 %103, 0
  %115 = zext i1 %114 to i8
  store i8 %115, i8* %113, align 1, !tbaa !2451
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 0, i8* %116, align 1, !tbaa !2451
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %117, align 1, !tbaa !2451
  %118 = load i64, i64* %RSI
  %119 = load i64, i64* %RAX
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 3
  store i64 %121, i64* %PC
  %122 = add i64 %119, %118
  store i64 %122, i64* %RSI, align 8, !tbaa !2428
  %123 = icmp ult i64 %122, %118
  %124 = icmp ult i64 %122, %119
  %125 = or i1 %123, %124
  %126 = zext i1 %125 to i8
  %127 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %126, i8* %127, align 1, !tbaa !2432
  %128 = trunc i64 %122 to i32
  %129 = and i32 %128, 255
  %130 = call i32 @llvm.ctpop.i32(i32 %129) #16
  %131 = trunc i32 %130 to i8
  %132 = and i8 %131, 1
  %133 = xor i8 %132, 1
  %134 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %133, i8* %134, align 1, !tbaa !2446
  %135 = xor i64 %119, %118
  %136 = xor i64 %135, %122
  %137 = lshr i64 %136, 4
  %138 = trunc i64 %137 to i8
  %139 = and i8 %138, 1
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %139, i8* %140, align 1, !tbaa !2450
  %141 = icmp eq i64 %122, 0
  %142 = zext i1 %141 to i8
  %143 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %142, i8* %143, align 1, !tbaa !2447
  %144 = lshr i64 %122, 63
  %145 = trunc i64 %144 to i8
  %146 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %145, i8* %146, align 1, !tbaa !2448
  %147 = lshr i64 %118, 63
  %148 = lshr i64 %119, 63
  %149 = xor i64 %144, %147
  %150 = xor i64 %144, %148
  %151 = add nuw nsw i64 %149, %150
  %152 = icmp eq i64 %151, 2
  %153 = zext i1 %152 to i8
  %154 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %153, i8* %154, align 1, !tbaa !2449
  %155 = load i64, i64* %RSI
  %156 = load i64, i64* %PC
  %157 = add i64 %156, 3
  store i64 %157, i64* %PC
  %158 = trunc i64 %155 to i8
  %159 = and i8 %158, 1
  %160 = ashr i64 %155, 1
  store i64 %160, i64* %RSI, align 8, !tbaa !2428
  %161 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %159, i8* %161, align 1, !tbaa !2451
  %162 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  %163 = trunc i64 %160 to i32
  %164 = and i32 %163, 255
  %165 = call i32 @llvm.ctpop.i32(i32 %164) #16
  %166 = trunc i32 %165 to i8
  %167 = and i8 %166, 1
  %168 = xor i8 %167, 1
  store i8 %168, i8* %162, align 1, !tbaa !2451
  %169 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %169, align 1, !tbaa !2451
  %170 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %171 = icmp eq i64 %160, 0
  %172 = zext i1 %171 to i8
  store i8 %172, i8* %170, align 1, !tbaa !2451
  %173 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  %174 = lshr i64 %160, 63
  %175 = trunc i64 %174 to i8
  store i8 %175, i8* %173, align 1, !tbaa !2451
  %176 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %176, align 1, !tbaa !2451
  %177 = load i64, i64* %PC
  %178 = add i64 %177, 23
  %179 = load i64, i64* %PC
  %180 = add i64 %179, 2
  %181 = load i64, i64* %PC
  %182 = add i64 %181, 2
  store i64 %182, i64* %PC
  %183 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %184 = load i8, i8* %183, align 1, !tbaa !2447
  store i8 %184, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %185 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %186 = icmp ne i8 %184, 0
  %187 = select i1 %186, i64 %178, i64 %180
  store i64 %187, i64* %185, align 8, !tbaa !2428
  %188 = load i8, i8* %BRANCH_TAKEN
  %189 = icmp eq i8 %188, 1
  br i1 %189, label %block_400508, label %block_4004f3

block_4004fd:                                     ; preds = %block_4004f3
  %190 = load i64, i64* %PC
  %191 = add i64 %190, 1
  store i64 %191, i64* %PC
  %192 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %193 = load i64, i64* %192, align 8, !tbaa !2428
  %194 = add i64 %193, 8
  %195 = inttoptr i64 %193 to i64*
  %196 = load i64, i64* %195
  store i64 %196, i64* %RBP, align 8, !tbaa !2428
  store i64 %194, i64* %192, align 8, !tbaa !2428
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 5
  store i64 %198, i64* %PC
  store i64 6304024, i64* %RDI, align 8, !tbaa !2428
  %199 = load i64, i64* %RAX
  %200 = load i64, i64* %PC
  %201 = add i64 %200, 2
  store i64 %201, i64* %PC
  %202 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %199, i64* %202, align 8, !tbaa !2428
  %203 = load i64, i64* %PC
  switch i64 %203, label %269 [
    i64 4195594, label %block_40050a
    i64 4195589, label %block_400505
  ]

block_40050a:                                     ; preds = %block_4004fd
  %204 = load i64, i64* %RAX
  %205 = load i64, i64* %RAX
  %206 = add i64 %205, %204
  %207 = load i16, i16* %AX
  %208 = zext i16 %207 to i64
  %209 = load i64, i64* %PC
  %210 = add i64 %209, 6
  store i64 %210, i64* %PC
  %211 = load i64, i64* %PC
  %212 = tail call %struct.Memory* @sub_400510___do_global_dtors_aux(%struct.State* %0, i64 %211, %struct.Memory* %2)
  ret %struct.Memory* %212

block_4004f3:                                     ; preds = %block_4004d0
  %213 = load i64, i64* %PC
  %214 = add i64 %213, 5
  store i64 %214, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %215 = load i64, i64* %RAX
  %216 = load i64, i64* %RAX
  %217 = load i64, i64* %PC
  %218 = add i64 %217, 3
  store i64 %218, i64* %PC
  %219 = and i64 %216, %215
  %220 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %220, align 1, !tbaa !2432
  %221 = trunc i64 %219 to i32
  %222 = and i32 %221, 255
  %223 = call i32 @llvm.ctpop.i32(i32 %222) #16
  %224 = trunc i32 %223 to i8
  %225 = and i8 %224, 1
  %226 = xor i8 %225, 1
  %227 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %226, i8* %227, align 1, !tbaa !2446
  %228 = icmp eq i64 %219, 0
  %229 = zext i1 %228 to i8
  %230 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %229, i8* %230, align 1, !tbaa !2447
  %231 = lshr i64 %219, 63
  %232 = trunc i64 %231 to i8
  %233 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %232, i8* %233, align 1, !tbaa !2448
  %234 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %234, align 1, !tbaa !2449
  %235 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %235, align 1, !tbaa !2450
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 13
  %238 = load i64, i64* %PC
  %239 = add i64 %238, 2
  %240 = load i64, i64* %PC
  %241 = add i64 %240, 2
  store i64 %241, i64* %PC
  %242 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %243 = load i8, i8* %242, align 1, !tbaa !2447
  store i8 %243, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %244 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %245 = icmp ne i8 %243, 0
  %246 = select i1 %245, i64 %237, i64 %239
  store i64 %246, i64* %244, align 8, !tbaa !2428
  %247 = load i8, i8* %BRANCH_TAKEN
  %248 = icmp eq i8 %247, 1
  br i1 %248, label %block_400508, label %block_4004fd

block_400508:                                     ; preds = %block_400505, %block_4004f3, %block_4004d0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4004d0 ], [ %2, %block_4004f3 ], [ %2, %block_400505 ]
  %249 = load i64, i64* %PC
  %250 = add i64 %249, 1
  store i64 %250, i64* %PC
  %251 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %252 = load i64, i64* %251, align 8, !tbaa !2428
  %253 = add i64 %252, 8
  %254 = inttoptr i64 %252 to i64*
  %255 = load i64, i64* %254
  store i64 %255, i64* %RBP, align 8, !tbaa !2428
  store i64 %253, i64* %251, align 8, !tbaa !2428
  %256 = load i64, i64* %PC
  %257 = add i64 %256, 1
  store i64 %257, i64* %PC
  %258 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %259 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %260 = load i64, i64* %259, align 8, !tbaa !2428
  %261 = inttoptr i64 %260 to i64*
  %262 = load i64, i64* %261
  store i64 %262, i64* %258, align 8, !tbaa !2428
  %263 = add i64 %260, 8
  store i64 %263, i64* %259, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_400505:                                     ; preds = %block_4004fd
  %264 = load i64, i64* %RAX
  %265 = load i32, i32* %EAX
  %266 = zext i32 %265 to i64
  %267 = load i64, i64* %PC
  %268 = add i64 %267, 3
  store i64 %268, i64* %PC
  br label %block_400508

; <label>:269:                                    ; preds = %block_4004fd
  %270 = load i64, i64* %PC
  %271 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %270, %struct.Memory* %2)
  ret %struct.Memory* %271
}

; Function Attrs: noinline
define %struct.Memory* @sub_400418__init_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_400418:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RAX = bitcast %union.anon* %8 to i64*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 13
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %RSP = bitcast %union.anon* %11 to i64*
  %12 = load i64, i64* %RSP
  %13 = load i64, i64* %PC
  %14 = add i64 %13, 4
  store i64 %14, i64* %PC
  %15 = sub i64 %12, 8
  store i64 %15, i64* %RSP, align 8, !tbaa !2428
  %16 = icmp ult i64 %12, 8
  %17 = zext i1 %16 to i8
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %17, i8* %18, align 1, !tbaa !2432
  %19 = trunc i64 %15 to i32
  %20 = and i32 %19, 255
  %21 = call i32 @llvm.ctpop.i32(i32 %20) #16
  %22 = trunc i32 %21 to i8
  %23 = and i8 %22, 1
  %24 = xor i8 %23, 1
  %25 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %24, i8* %25, align 1, !tbaa !2446
  %26 = xor i64 8, %12
  %27 = xor i64 %26, %15
  %28 = lshr i64 %27, 4
  %29 = trunc i64 %28 to i8
  %30 = and i8 %29, 1
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %30, i8* %31, align 1, !tbaa !2450
  %32 = icmp eq i64 %15, 0
  %33 = zext i1 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %33, i8* %34, align 1, !tbaa !2447
  %35 = lshr i64 %15, 63
  %36 = trunc i64 %35 to i8
  %37 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %36, i8* %37, align 1, !tbaa !2448
  %38 = lshr i64 %12, 63
  %39 = xor i64 %35, %38
  %40 = add nuw nsw i64 %39, %38
  %41 = icmp eq i64 %40, 2
  %42 = zext i1 %41 to i8
  %43 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %42, i8* %43, align 1, !tbaa !2449
  %44 = load i64, i64* %PC
  %45 = add i64 %44, 7
  store i64 %45, i64* %PC
  %46 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%seg_602ff0__got_type* @seg_602ff0__got to i64), i64 8) to i64*)
  store i64 %46, i64* %RAX, align 8, !tbaa !2428
  %47 = load i64, i64* %RAX
  %48 = load i64, i64* %RAX
  %49 = load i64, i64* %PC
  %50 = add i64 %49, 3
  store i64 %50, i64* %PC
  %51 = and i64 %48, %47
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %52, align 1, !tbaa !2432
  %53 = trunc i64 %51 to i32
  %54 = and i32 %53, 255
  %55 = call i32 @llvm.ctpop.i32(i32 %54) #16
  %56 = trunc i32 %55 to i8
  %57 = and i8 %56, 1
  %58 = xor i8 %57, 1
  %59 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %58, i8* %59, align 1, !tbaa !2446
  %60 = icmp eq i64 %51, 0
  %61 = zext i1 %60 to i8
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %61, i8* %62, align 1, !tbaa !2447
  %63 = lshr i64 %51, 63
  %64 = trunc i64 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %64, i8* %65, align 1, !tbaa !2448
  %66 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %66, align 1, !tbaa !2449
  %67 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %67, align 1, !tbaa !2450
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 4
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2447
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_40042a, label %block_400428

block_400428:                                     ; preds = %block_400418
  %81 = load i64, i64* %RAX
  %82 = load i64, i64* %PC
  %83 = add i64 %82, 2
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 2
  store i64 %85, i64* %PC
  %86 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %87 = load i64, i64* %86, align 8, !tbaa !2428
  %88 = add i64 %87, -8
  %89 = inttoptr i64 %88 to i64*
  store i64 %83, i64* %89
  store i64 %88, i64* %86, align 8, !tbaa !2428
  %90 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %81, i64* %90, align 8, !tbaa !2428
  %91 = load i64, i64* %PC
  %92 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 %91, %struct.Memory* %2)
  br label %block_40042a

block_40042a:                                     ; preds = %block_400428, %block_400418
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_400418 ], [ %92, %block_400428 ]
  %93 = load i64, i64* %RSP
  %94 = load i64, i64* %PC
  %95 = add i64 %94, 4
  store i64 %95, i64* %PC
  %96 = add i64 8, %93
  store i64 %96, i64* %RSP, align 8, !tbaa !2428
  %97 = icmp ult i64 %96, %93
  %98 = icmp ult i64 %96, 8
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i8
  %101 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %100, i8* %101, align 1, !tbaa !2432
  %102 = trunc i64 %96 to i32
  %103 = and i32 %102, 255
  %104 = call i32 @llvm.ctpop.i32(i32 %103) #16
  %105 = trunc i32 %104 to i8
  %106 = and i8 %105, 1
  %107 = xor i8 %106, 1
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %107, i8* %108, align 1, !tbaa !2446
  %109 = xor i64 8, %93
  %110 = xor i64 %109, %96
  %111 = lshr i64 %110, 4
  %112 = trunc i64 %111 to i8
  %113 = and i8 %112, 1
  %114 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %113, i8* %114, align 1, !tbaa !2450
  %115 = icmp eq i64 %96, 0
  %116 = zext i1 %115 to i8
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %116, i8* %117, align 1, !tbaa !2447
  %118 = lshr i64 %96, 63
  %119 = trunc i64 %118 to i8
  %120 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %119, i8* %120, align 1, !tbaa !2448
  %121 = lshr i64 %93, 63
  %122 = xor i64 %118, %121
  %123 = add nuw nsw i64 %122, %118
  %124 = icmp eq i64 %123, 2
  %125 = zext i1 %124 to i8
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %125, i8* %126, align 1, !tbaa !2449
  %127 = load i64, i64* %PC
  %128 = add i64 %127, 1
  store i64 %128, i64* %PC
  %129 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %130 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %131 = load i64, i64* %130, align 8, !tbaa !2428
  %132 = inttoptr i64 %131 to i64*
  %133 = load i64, i64* %132
  store i64 %133, i64* %129, align 8, !tbaa !2428
  %134 = add i64 %131, 8
  store i64 %134, i64* %130, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0
}

; Function Attrs: noinline
define %struct.Memory* @sub_4025d0_dtime(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4025d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %EAX = bitcast %union.anon* %8 to i32*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %ECX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 5
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RCX = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSI = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 11
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RDI = bitcast %union.anon* %23 to i64*
  %24 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %25 = getelementptr inbounds %struct.GPR, %struct.GPR* %24, i32 0, i32 13
  %26 = getelementptr inbounds %struct.Reg, %struct.Reg* %25, i32 0, i32 0
  %RSP = bitcast %union.anon* %26 to i64*
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %28 = getelementptr inbounds %struct.GPR, %struct.GPR* %27, i32 0, i32 15
  %29 = getelementptr inbounds %struct.Reg, %struct.Reg* %28, i32 0, i32 0
  %RBP = bitcast %union.anon* %29 to i64*
  %30 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %31 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %30, i64 0, i64 0
  %YMM0 = bitcast %union.VectorReg* %31 to %"class.std::bitset"*
  %32 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %33 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %32, i64 0, i64 1
  %YMM1 = bitcast %union.VectorReg* %33 to %"class.std::bitset"*
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %35 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %34, i64 0, i64 2
  %YMM2 = bitcast %union.VectorReg* %35 to %"class.std::bitset"*
  %36 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %37 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %36, i64 0, i64 0
  %XMM0 = bitcast %union.VectorReg* %37 to %union.vec128_t*
  %38 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %39 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %38, i64 0, i64 1
  %XMM1 = bitcast %union.VectorReg* %39 to %union.vec128_t*
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 1
  %41 = getelementptr inbounds [32 x %union.VectorReg], [32 x %union.VectorReg]* %40, i64 0, i64 2
  %XMM2 = bitcast %union.VectorReg* %41 to %union.vec128_t*
  %42 = load i64, i64* %RBP
  %43 = load i64, i64* %PC
  %44 = add i64 %43, 1
  store i64 %44, i64* %PC
  %45 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %46 = load i64, i64* %45, align 8, !tbaa !2428
  %47 = add i64 %46, -8
  %48 = inttoptr i64 %47 to i64*
  store i64 %42, i64* %48
  store i64 %47, i64* %45, align 8, !tbaa !2428
  %49 = load i64, i64* %RSP
  %50 = load i64, i64* %PC
  %51 = add i64 %50, 3
  store i64 %51, i64* %PC
  store i64 %49, i64* %RBP, align 8, !tbaa !2428
  %52 = load i64, i64* %RSP
  %53 = load i64, i64* %PC
  %54 = add i64 %53, 4
  store i64 %54, i64* %PC
  %55 = sub i64 %52, 32
  store i64 %55, i64* %RSP, align 8, !tbaa !2428
  %56 = icmp ult i64 %52, 32
  %57 = zext i1 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %57, i8* %58, align 1, !tbaa !2432
  %59 = trunc i64 %55 to i32
  %60 = and i32 %59, 255
  %61 = call i32 @llvm.ctpop.i32(i32 %60) #16
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 1
  %64 = xor i8 %63, 1
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %64, i8* %65, align 1, !tbaa !2446
  %66 = xor i64 32, %52
  %67 = xor i64 %66, %55
  %68 = lshr i64 %67, 4
  %69 = trunc i64 %68 to i8
  %70 = and i8 %69, 1
  %71 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %70, i8* %71, align 1, !tbaa !2450
  %72 = icmp eq i64 %55, 0
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %73, i8* %74, align 1, !tbaa !2447
  %75 = lshr i64 %55, 63
  %76 = trunc i64 %75 to i8
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %76, i8* %77, align 1, !tbaa !2448
  %78 = lshr i64 %52, 63
  %79 = xor i64 %75, %78
  %80 = add nuw nsw i64 %79, %78
  %81 = icmp eq i64 %80, 2
  %82 = zext i1 %81 to i8
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %82, i8* %83, align 1, !tbaa !2449
  %84 = load i64, i64* %PC
  %85 = add i64 %84, 10
  store i64 %85, i64* %PC
  store i64 ptrtoint (%tnow_type* @tnow to i64), i64* %RAX, align 8, !tbaa !2428
  %86 = load i64, i64* %RCX
  %87 = load i32, i32* %ECX
  %88 = zext i32 %87 to i64
  %89 = load i64, i64* %PC
  %90 = add i64 %89, 2
  store i64 %90, i64* %PC
  %91 = xor i64 %88, %86
  %92 = trunc i64 %91 to i32
  %93 = and i64 %91, 4294967295
  store i64 %93, i64* %RCX, align 8, !tbaa !2428
  %94 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %94, align 1, !tbaa !2432
  %95 = and i32 %92, 255
  %96 = call i32 @llvm.ctpop.i32(i32 %95) #16
  %97 = trunc i32 %96 to i8
  %98 = and i8 %97, 1
  %99 = xor i8 %98, 1
  %100 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %99, i8* %100, align 1, !tbaa !2446
  %101 = icmp eq i32 %92, 0
  %102 = zext i1 %101 to i8
  %103 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %102, i8* %103, align 1, !tbaa !2447
  %104 = lshr i32 %92, 31
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %105, i8* %106, align 1, !tbaa !2448
  %107 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %107, align 1, !tbaa !2449
  %108 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %108, align 1, !tbaa !2450
  %109 = load i32, i32* %ECX
  %110 = zext i32 %109 to i64
  %111 = load i64, i64* %PC
  %112 = add i64 %111, 2
  store i64 %112, i64* %PC
  %113 = and i64 %110, 4294967295
  store i64 %113, i64* %RSI, align 8, !tbaa !2428
  %114 = load i64, i64* %RBP
  %115 = sub i64 %114, 8
  %116 = load i64, i64* %RDI
  %117 = load i64, i64* %PC
  %118 = add i64 %117, 4
  store i64 %118, i64* %PC
  %119 = inttoptr i64 %115 to i64*
  store i64 %116, i64* %119
  %120 = load i64, i64* %RBP
  %121 = sub i64 %120, 8
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 4
  store i64 %123, i64* %PC
  %124 = inttoptr i64 %121 to i64*
  %125 = load i64, i64* %124
  store i64 %125, i64* %RDI, align 8, !tbaa !2428
  %126 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %127 = load i64, i64* %RDI
  %128 = add i64 %127, 16
  %129 = load i64, i64* %PC
  %130 = add i64 %129, 5
  store i64 %130, i64* %PC
  %131 = inttoptr i64 %128 to double*
  %132 = load double, double* %131
  %133 = bitcast i8* %126 to double*
  store double %132, double* %133, align 1, !tbaa !2452
  %134 = getelementptr inbounds i8, i8* %126, i64 8
  %135 = bitcast i8* %134 to double*
  store double 0.000000e+00, double* %135, align 1, !tbaa !2452
  %136 = load i64, i64* %RBP
  %137 = sub i64 %136, 16
  %138 = bitcast %union.vec128_t* %XMM0 to i8*
  %139 = load i64, i64* %PC
  %140 = add i64 %139, 5
  store i64 %140, i64* %PC
  %141 = bitcast i8* %138 to double*
  %142 = load double, double* %141, align 1
  %143 = inttoptr i64 %137 to double*
  store double %142, double* %143
  %144 = load i64, i64* %RAX
  %145 = load i64, i64* %PC
  %146 = add i64 %145, 3
  store i64 %146, i64* %PC
  store i64 %144, i64* %RDI, align 8, !tbaa !2428
  %147 = load i64, i64* %PC
  %148 = sub i64 %147, 8619
  %149 = load i64, i64* %PC
  %150 = add i64 %149, 5
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 5
  store i64 %152, i64* %PC
  %153 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %154 = load i64, i64* %153, align 8, !tbaa !2428
  %155 = add i64 %154, -8
  %156 = inttoptr i64 %155 to i64*
  store i64 %150, i64* %156
  store i64 %155, i64* %153, align 8, !tbaa !2428
  %157 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %148, i64* %157, align 8, !tbaa !2428
  %158 = load i64, i64* %PC
  %159 = call %struct.Memory* @ext_603318_gettimeofday(%struct.State* %0, i64 %158, %struct.Memory* %2)
  %160 = load i64, i64* %RCX
  %161 = load i32, i32* %ECX
  %162 = zext i32 %161 to i64
  %163 = load i64, i64* %PC
  %164 = add i64 %163, 2
  store i64 %164, i64* %PC
  %165 = xor i64 %162, %160
  %166 = trunc i64 %165 to i32
  %167 = and i64 %165, 4294967295
  store i64 %167, i64* %RCX, align 8, !tbaa !2428
  %168 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %168, align 1, !tbaa !2432
  %169 = and i32 %166, 255
  %170 = call i32 @llvm.ctpop.i32(i32 %169) #16
  %171 = trunc i32 %170 to i8
  %172 = and i8 %171, 1
  %173 = xor i8 %172, 1
  %174 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %173, i8* %174, align 1, !tbaa !2446
  %175 = icmp eq i32 %166, 0
  %176 = zext i1 %175 to i8
  %177 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %176, i8* %177, align 1, !tbaa !2447
  %178 = lshr i32 %166, 31
  %179 = trunc i32 %178 to i8
  %180 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %179, i8* %180, align 1, !tbaa !2448
  %181 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %181, align 1, !tbaa !2449
  %182 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %182, align 1, !tbaa !2450
  %183 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %184 = load i64, i64* %PC
  %185 = add i64 %184, 8
  store i64 %185, i64* %PC
  %186 = load double, double* inttoptr (i64 add (i64 ptrtoint (%seg_4026e0__rodata_type* @seg_4026e0__rodata to i64), i64 240) to double*)
  %187 = bitcast i8* %183 to double*
  store double %186, double* %187, align 1, !tbaa !2452
  %188 = getelementptr inbounds i8, i8* %183, i64 8
  %189 = bitcast i8* %188 to double*
  store double 0.000000e+00, double* %189, align 1, !tbaa !2452
  %190 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %191 = load i64, i64* %PC
  %192 = add i64 %191, 10
  store i64 %192, i64* %PC
  %193 = load i64, i64* bitcast (%tnow_type* @tnow to i64*)
  %194 = sitofp i64 %193 to double
  %195 = bitcast i8* %190 to double*
  store double %194, double* %195, align 1, !tbaa !2452
  %196 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %197 = load i64, i64* %PC
  %198 = add i64 %197, 10
  store i64 %198, i64* %PC
  %199 = load i64, i64* inttoptr (i64 add (i64 ptrtoint (%tnow_type* @tnow to i64), i64 8) to i64*)
  %200 = sitofp i64 %199 to double
  %201 = bitcast i8* %196 to double*
  store double %200, double* %201, align 1, !tbaa !2452
  %202 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %203 = bitcast %"class.std::bitset"* %YMM2 to i8*
  %204 = bitcast %union.vec128_t* %XMM0 to i8*
  %205 = load i64, i64* %PC
  %206 = add i64 %205, 4
  store i64 %206, i64* %PC
  %207 = bitcast i8* %203 to double*
  %208 = load double, double* %207, align 1
  %209 = getelementptr inbounds i8, i8* %203, i64 8
  %210 = bitcast i8* %209 to i64*
  %211 = load i64, i64* %210, align 1
  %212 = bitcast i8* %204 to double*
  %213 = load double, double* %212, align 1
  %214 = fmul double %208, %213
  %215 = bitcast i8* %202 to double*
  store double %214, double* %215, align 1, !tbaa !2452
  %216 = getelementptr inbounds i8, i8* %202, i64 8
  %217 = bitcast i8* %216 to i64*
  store i64 %211, i64* %217, align 1, !tbaa !2452
  %218 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %219 = bitcast %"class.std::bitset"* %YMM1 to i8*
  %220 = bitcast %union.vec128_t* %XMM2 to i8*
  %221 = load i64, i64* %PC
  %222 = add i64 %221, 4
  store i64 %222, i64* %PC
  %223 = bitcast i8* %219 to double*
  %224 = load double, double* %223, align 1
  %225 = getelementptr inbounds i8, i8* %219, i64 8
  %226 = bitcast i8* %225 to i64*
  %227 = load i64, i64* %226, align 1
  %228 = bitcast i8* %220 to double*
  %229 = load double, double* %228, align 1
  %230 = fadd double %224, %229
  %231 = bitcast i8* %218 to double*
  store double %230, double* %231, align 1, !tbaa !2452
  %232 = getelementptr inbounds i8, i8* %218, i64 8
  %233 = bitcast i8* %232 to i64*
  store i64 %227, i64* %233, align 1, !tbaa !2452
  %234 = load i64, i64* %RBP
  %235 = sub i64 %234, 8
  %236 = load i64, i64* %PC
  %237 = add i64 %236, 4
  store i64 %237, i64* %PC
  %238 = inttoptr i64 %235 to i64*
  %239 = load i64, i64* %238
  store i64 %239, i64* %RSI, align 8, !tbaa !2428
  %240 = load i64, i64* %RSI
  %241 = add i64 %240, 16
  %242 = bitcast %union.vec128_t* %XMM1 to i8*
  %243 = load i64, i64* %PC
  %244 = add i64 %243, 5
  store i64 %244, i64* %PC
  %245 = bitcast i8* %242 to double*
  %246 = load double, double* %245, align 1
  %247 = inttoptr i64 %241 to double*
  store double %246, double* %247
  %248 = load i64, i64* %RBP
  %249 = sub i64 %248, 8
  %250 = load i64, i64* %PC
  %251 = add i64 %250, 4
  store i64 %251, i64* %PC
  %252 = inttoptr i64 %249 to i64*
  %253 = load i64, i64* %252
  store i64 %253, i64* %RSI, align 8, !tbaa !2428
  %254 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %255 = load i64, i64* %RSI
  %256 = add i64 %255, 16
  %257 = load i64, i64* %PC
  %258 = add i64 %257, 5
  store i64 %258, i64* %PC
  %259 = inttoptr i64 %256 to double*
  %260 = load double, double* %259
  %261 = bitcast i8* %254 to double*
  store double %260, double* %261, align 1, !tbaa !2452
  %262 = getelementptr inbounds i8, i8* %254, i64 8
  %263 = bitcast i8* %262 to double*
  store double 0.000000e+00, double* %263, align 1, !tbaa !2452
  %264 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %265 = bitcast %"class.std::bitset"* %YMM0 to i8*
  %266 = load i64, i64* %RBP
  %267 = sub i64 %266, 16
  %268 = load i64, i64* %PC
  %269 = add i64 %268, 5
  store i64 %269, i64* %PC
  %270 = bitcast i8* %265 to double*
  %271 = load double, double* %270, align 1
  %272 = getelementptr inbounds i8, i8* %265, i64 8
  %273 = bitcast i8* %272 to i64*
  %274 = load i64, i64* %273, align 1
  %275 = inttoptr i64 %267 to double*
  %276 = load double, double* %275
  %277 = fsub double %271, %276
  %278 = bitcast i8* %264 to double*
  store double %277, double* %278, align 1, !tbaa !2452
  %279 = getelementptr inbounds i8, i8* %264, i64 8
  %280 = bitcast i8* %279 to i64*
  store i64 %274, i64* %280, align 1, !tbaa !2452
  %281 = load i64, i64* %RBP
  %282 = sub i64 %281, 8
  %283 = load i64, i64* %PC
  %284 = add i64 %283, 4
  store i64 %284, i64* %PC
  %285 = inttoptr i64 %282 to i64*
  %286 = load i64, i64* %285
  store i64 %286, i64* %RSI, align 8, !tbaa !2428
  %287 = load i64, i64* %RSI
  %288 = add i64 %287, 8
  %289 = bitcast %union.vec128_t* %XMM0 to i8*
  %290 = load i64, i64* %PC
  %291 = add i64 %290, 5
  store i64 %291, i64* %PC
  %292 = bitcast i8* %289 to double*
  %293 = load double, double* %292, align 1
  %294 = inttoptr i64 %288 to double*
  store double %293, double* %294
  %295 = load i64, i64* %RBP
  %296 = sub i64 %295, 20
  %297 = load i32, i32* %EAX
  %298 = zext i32 %297 to i64
  %299 = load i64, i64* %PC
  %300 = add i64 %299, 3
  store i64 %300, i64* %PC
  %301 = inttoptr i64 %296 to i32*
  store i32 %297, i32* %301
  %302 = load i32, i32* %ECX
  %303 = zext i32 %302 to i64
  %304 = load i64, i64* %PC
  %305 = add i64 %304, 2
  store i64 %305, i64* %PC
  %306 = and i64 %303, 4294967295
  store i64 %306, i64* %RAX, align 8, !tbaa !2428
  %307 = load i64, i64* %RSP
  %308 = load i64, i64* %PC
  %309 = add i64 %308, 4
  store i64 %309, i64* %PC
  %310 = add i64 32, %307
  store i64 %310, i64* %RSP, align 8, !tbaa !2428
  %311 = icmp ult i64 %310, %307
  %312 = icmp ult i64 %310, 32
  %313 = or i1 %311, %312
  %314 = zext i1 %313 to i8
  %315 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %314, i8* %315, align 1, !tbaa !2432
  %316 = trunc i64 %310 to i32
  %317 = and i32 %316, 255
  %318 = call i32 @llvm.ctpop.i32(i32 %317) #16
  %319 = trunc i32 %318 to i8
  %320 = and i8 %319, 1
  %321 = xor i8 %320, 1
  %322 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %321, i8* %322, align 1, !tbaa !2446
  %323 = xor i64 32, %307
  %324 = xor i64 %323, %310
  %325 = lshr i64 %324, 4
  %326 = trunc i64 %325 to i8
  %327 = and i8 %326, 1
  %328 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %327, i8* %328, align 1, !tbaa !2450
  %329 = icmp eq i64 %310, 0
  %330 = zext i1 %329 to i8
  %331 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %330, i8* %331, align 1, !tbaa !2447
  %332 = lshr i64 %310, 63
  %333 = trunc i64 %332 to i8
  %334 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %333, i8* %334, align 1, !tbaa !2448
  %335 = lshr i64 %307, 63
  %336 = xor i64 %332, %335
  %337 = add nuw nsw i64 %336, %332
  %338 = icmp eq i64 %337, 2
  %339 = zext i1 %338 to i8
  %340 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %339, i8* %340, align 1, !tbaa !2449
  %341 = load i64, i64* %PC
  %342 = add i64 %341, 1
  store i64 %342, i64* %PC
  %343 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %344 = load i64, i64* %343, align 8, !tbaa !2428
  %345 = add i64 %344, 8
  %346 = inttoptr i64 %344 to i64*
  %347 = load i64, i64* %346
  store i64 %347, i64* %RBP, align 8, !tbaa !2428
  store i64 %345, i64* %343, align 8, !tbaa !2428
  %348 = load i64, i64* %PC
  %349 = add i64 %348, 1
  store i64 %349, i64* %PC
  %350 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %351 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %352 = load i64, i64* %351, align 8, !tbaa !2428
  %353 = inttoptr i64 %352 to i64*
  %354 = load i64, i64* %353
  store i64 %354, i64* %350, align 8, !tbaa !2428
  %355 = add i64 %352, 8
  store i64 %355, i64* %351, align 8, !tbaa !2428
  ret %struct.Memory* %159
}

; Function Attrs: noinline
define %struct.Memory* @sub_4026d4__term_proc(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4026d4:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 13
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %RSP = bitcast %union.anon* %8 to i64*
  %9 = load i64, i64* %RSP
  %10 = load i64, i64* %PC
  %11 = add i64 %10, 4
  store i64 %11, i64* %PC
  %12 = sub i64 %9, 8
  store i64 %12, i64* %RSP, align 8, !tbaa !2428
  %13 = icmp ult i64 %9, 8
  %14 = zext i1 %13 to i8
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %14, i8* %15, align 1, !tbaa !2432
  %16 = trunc i64 %12 to i32
  %17 = and i32 %16, 255
  %18 = call i32 @llvm.ctpop.i32(i32 %17) #16
  %19 = trunc i32 %18 to i8
  %20 = and i8 %19, 1
  %21 = xor i8 %20, 1
  %22 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %21, i8* %22, align 1, !tbaa !2446
  %23 = xor i64 8, %9
  %24 = xor i64 %23, %12
  %25 = lshr i64 %24, 4
  %26 = trunc i64 %25 to i8
  %27 = and i8 %26, 1
  %28 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %27, i8* %28, align 1, !tbaa !2450
  %29 = icmp eq i64 %12, 0
  %30 = zext i1 %29 to i8
  %31 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %30, i8* %31, align 1, !tbaa !2447
  %32 = lshr i64 %12, 63
  %33 = trunc i64 %32 to i8
  %34 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %33, i8* %34, align 1, !tbaa !2448
  %35 = lshr i64 %9, 63
  %36 = xor i64 %32, %35
  %37 = add nuw nsw i64 %36, %35
  %38 = icmp eq i64 %37, 2
  %39 = zext i1 %38 to i8
  %40 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %39, i8* %40, align 1, !tbaa !2449
  %41 = load i64, i64* %RSP
  %42 = load i64, i64* %PC
  %43 = add i64 %42, 4
  store i64 %43, i64* %PC
  %44 = add i64 8, %41
  store i64 %44, i64* %RSP, align 8, !tbaa !2428
  %45 = icmp ult i64 %44, %41
  %46 = icmp ult i64 %44, 8
  %47 = or i1 %45, %46
  %48 = zext i1 %47 to i8
  %49 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %48, i8* %49, align 1, !tbaa !2432
  %50 = trunc i64 %44 to i32
  %51 = and i32 %50, 255
  %52 = call i32 @llvm.ctpop.i32(i32 %51) #16
  %53 = trunc i32 %52 to i8
  %54 = and i8 %53, 1
  %55 = xor i8 %54, 1
  %56 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %55, i8* %56, align 1, !tbaa !2446
  %57 = xor i64 8, %41
  %58 = xor i64 %57, %44
  %59 = lshr i64 %58, 4
  %60 = trunc i64 %59 to i8
  %61 = and i8 %60, 1
  %62 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %61, i8* %62, align 1, !tbaa !2450
  %63 = icmp eq i64 %44, 0
  %64 = zext i1 %63 to i8
  %65 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %64, i8* %65, align 1, !tbaa !2447
  %66 = lshr i64 %44, 63
  %67 = trunc i64 %66 to i8
  %68 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %67, i8* %68, align 1, !tbaa !2448
  %69 = lshr i64 %41, 63
  %70 = xor i64 %66, %69
  %71 = add nuw nsw i64 %70, %66
  %72 = icmp eq i64 %71, 2
  %73 = zext i1 %72 to i8
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %73, i8* %74, align 1, !tbaa !2449
  %75 = load i64, i64* %PC
  %76 = add i64 %75, 1
  store i64 %76, i64* %PC
  %77 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %78 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %79 = load i64, i64* %78, align 8, !tbaa !2428
  %80 = inttoptr i64 %79 to i64*
  %81 = load i64, i64* %80
  store i64 %81, i64* %77, align 8, !tbaa !2428
  %82 = add i64 %79, 8
  store i64 %82, i64* %78, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
define %struct.Memory* @sub_4004a0_deregister_tm_clones(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4004a0:
  %BRANCH_TAKEN = alloca i8, align 1
  store i8 0, i8* %BRANCH_TAKEN, align 1
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %7 = getelementptr inbounds %struct.GPR, %struct.GPR* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.Reg, %struct.Reg* %7, i32 0, i32 0
  %AX = bitcast %union.anon* %8 to i16*
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %10 = getelementptr inbounds %struct.GPR, %struct.GPR* %9, i32 0, i32 1
  %11 = getelementptr inbounds %struct.Reg, %struct.Reg* %10, i32 0, i32 0
  %EAX = bitcast %union.anon* %11 to i32*
  %12 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %13 = getelementptr inbounds %struct.GPR, %struct.GPR* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.Reg, %struct.Reg* %13, i32 0, i32 0
  %RAX = bitcast %union.anon* %14 to i64*
  %15 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %16 = getelementptr inbounds %struct.GPR, %struct.GPR* %15, i32 0, i32 11
  %17 = getelementptr inbounds %struct.Reg, %struct.Reg* %16, i32 0, i32 0
  %RDI = bitcast %union.anon* %17 to i64*
  %18 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %19 = getelementptr inbounds %struct.GPR, %struct.GPR* %18, i32 0, i32 13
  %20 = getelementptr inbounds %struct.Reg, %struct.Reg* %19, i32 0, i32 0
  %RSP = bitcast %union.anon* %20 to i64*
  %21 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %22 = getelementptr inbounds %struct.GPR, %struct.GPR* %21, i32 0, i32 15
  %23 = getelementptr inbounds %struct.Reg, %struct.Reg* %22, i32 0, i32 0
  %RBP = bitcast %union.anon* %23 to i64*
  %24 = load i64, i64* %RBP
  %25 = load i64, i64* %PC
  %26 = add i64 %25, 1
  store i64 %26, i64* %PC
  %27 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %28 = load i64, i64* %27, align 8, !tbaa !2428
  %29 = add i64 %28, -8
  %30 = inttoptr i64 %29 to i64*
  store i64 %24, i64* %30
  store i64 %29, i64* %27, align 8, !tbaa !2428
  %31 = load i64, i64* %PC
  %32 = add i64 %31, 5
  store i64 %32, i64* %PC
  store i64 6304024, i64* %RAX, align 8, !tbaa !2428
  %33 = load i64, i64* %RAX
  %34 = load i64, i64* %PC
  %35 = add i64 %34, 6
  store i64 %35, i64* %PC
  %36 = sub i64 %33, 6304024
  %37 = icmp ult i64 %33, 6304024
  %38 = zext i1 %37 to i8
  %39 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 %38, i8* %39, align 1, !tbaa !2432
  %40 = trunc i64 %36 to i32
  %41 = and i32 %40, 255
  %42 = call i32 @llvm.ctpop.i32(i32 %41) #16
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  %46 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %45, i8* %46, align 1, !tbaa !2446
  %47 = xor i64 6304024, %33
  %48 = xor i64 %47, %36
  %49 = lshr i64 %48, 4
  %50 = trunc i64 %49 to i8
  %51 = and i8 %50, 1
  %52 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 %51, i8* %52, align 1, !tbaa !2450
  %53 = icmp eq i64 %36, 0
  %54 = zext i1 %53 to i8
  %55 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %54, i8* %55, align 1, !tbaa !2447
  %56 = lshr i64 %36, 63
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %57, i8* %58, align 1, !tbaa !2448
  %59 = lshr i64 %33, 63
  %60 = xor i64 %56, %59
  %61 = add nuw nsw i64 %60, %59
  %62 = icmp eq i64 %61, 2
  %63 = zext i1 %62 to i8
  %64 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 %63, i8* %64, align 1, !tbaa !2449
  %65 = load i64, i64* %RSP
  %66 = load i64, i64* %PC
  %67 = add i64 %66, 3
  store i64 %67, i64* %PC
  store i64 %65, i64* %RBP, align 8, !tbaa !2428
  %68 = load i64, i64* %PC
  %69 = add i64 %68, 25
  %70 = load i64, i64* %PC
  %71 = add i64 %70, 2
  %72 = load i64, i64* %PC
  %73 = add i64 %72, 2
  store i64 %73, i64* %PC
  %74 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %75 = load i8, i8* %74, align 1, !tbaa !2447
  store i8 %75, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %76 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %77 = icmp ne i8 %75, 0
  %78 = select i1 %77, i64 %69, i64 %71
  store i64 %78, i64* %76, align 8, !tbaa !2428
  %79 = load i8, i8* %BRANCH_TAKEN
  %80 = icmp eq i8 %79, 1
  br i1 %80, label %block_4004c8, label %block_4004b1

block_4004bb:                                     ; preds = %block_4004b1
  %81 = load i64, i64* %PC
  %82 = add i64 %81, 1
  store i64 %82, i64* %PC
  %83 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %84 = load i64, i64* %83, align 8, !tbaa !2428
  %85 = add i64 %84, 8
  %86 = inttoptr i64 %84 to i64*
  %87 = load i64, i64* %86
  store i64 %87, i64* %RBP, align 8, !tbaa !2428
  store i64 %85, i64* %83, align 8, !tbaa !2428
  %88 = load i64, i64* %PC
  %89 = add i64 %88, 5
  store i64 %89, i64* %PC
  store i64 6304024, i64* %RDI, align 8, !tbaa !2428
  %90 = load i64, i64* %RAX
  %91 = load i64, i64* %PC
  %92 = add i64 %91, 2
  store i64 %92, i64* %PC
  %93 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  store i64 %90, i64* %93, align 8, !tbaa !2428
  %94 = load i64, i64* %PC
  switch i64 %94, label %162 [
    i64 4195530, label %block_4004ca
    i64 4195523, label %block_4004c3
  ]

block_4004b1:                                     ; preds = %block_4004a0
  %95 = load i64, i64* %PC
  %96 = add i64 %95, 5
  store i64 %96, i64* %PC
  store i64 0, i64* %RAX, align 8, !tbaa !2428
  %97 = load i64, i64* %RAX
  %98 = load i64, i64* %RAX
  %99 = load i64, i64* %PC
  %100 = add i64 %99, 3
  store i64 %100, i64* %PC
  %101 = and i64 %98, %97
  %102 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 1
  store i8 0, i8* %102, align 1, !tbaa !2432
  %103 = trunc i64 %101 to i32
  %104 = and i32 %103, 255
  %105 = call i32 @llvm.ctpop.i32(i32 %104) #16
  %106 = trunc i32 %105 to i8
  %107 = and i8 %106, 1
  %108 = xor i8 %107, 1
  %109 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 3
  store i8 %108, i8* %109, align 1, !tbaa !2446
  %110 = icmp eq i64 %101, 0
  %111 = zext i1 %110 to i8
  %112 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  store i8 %111, i8* %112, align 1, !tbaa !2447
  %113 = lshr i64 %101, 63
  %114 = trunc i64 %113 to i8
  %115 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 9
  store i8 %114, i8* %115, align 1, !tbaa !2448
  %116 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 13
  store i8 0, i8* %116, align 1, !tbaa !2449
  %117 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 5
  store i8 0, i8* %117, align 1, !tbaa !2450
  %118 = load i64, i64* %PC
  %119 = add i64 %118, 15
  %120 = load i64, i64* %PC
  %121 = add i64 %120, 2
  %122 = load i64, i64* %PC
  %123 = add i64 %122, 2
  store i64 %123, i64* %PC
  %124 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 2, i32 7
  %125 = load i8, i8* %124, align 1, !tbaa !2447
  store i8 %125, i8* %BRANCH_TAKEN, align 1, !tbaa !2451
  %126 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %127 = icmp ne i8 %125, 0
  %128 = select i1 %127, i64 %119, i64 %121
  store i64 %128, i64* %126, align 8, !tbaa !2428
  %129 = load i8, i8* %BRANCH_TAKEN
  %130 = icmp eq i8 %129, 1
  br i1 %130, label %block_4004c8, label %block_4004bb

block_4004c8:                                     ; preds = %block_4004c3, %block_4004b1, %block_4004a0
  %MEMORY.0 = phi %struct.Memory* [ %2, %block_4004a0 ], [ %2, %block_4004b1 ], [ %2, %block_4004c3 ]
  %131 = load i64, i64* %PC
  %132 = add i64 %131, 1
  store i64 %132, i64* %PC
  %133 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %134 = load i64, i64* %133, align 8, !tbaa !2428
  %135 = add i64 %134, 8
  %136 = inttoptr i64 %134 to i64*
  %137 = load i64, i64* %136
  store i64 %137, i64* %RBP, align 8, !tbaa !2428
  store i64 %135, i64* %133, align 8, !tbaa !2428
  %138 = load i64, i64* %PC
  %139 = add i64 %138, 1
  store i64 %139, i64* %PC
  %140 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %141 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %142 = load i64, i64* %141, align 8, !tbaa !2428
  %143 = inttoptr i64 %142 to i64*
  %144 = load i64, i64* %143
  store i64 %144, i64* %140, align 8, !tbaa !2428
  %145 = add i64 %142, 8
  store i64 %145, i64* %141, align 8, !tbaa !2428
  ret %struct.Memory* %MEMORY.0

block_4004ca:                                     ; preds = %block_4004bb
  %146 = load i64, i64* %RAX
  %147 = load i64, i64* %RAX
  %148 = add i64 %147, %146
  %149 = load i16, i16* %AX
  %150 = zext i16 %149 to i64
  %151 = load i64, i64* %PC
  %152 = add i64 %151, 6
  store i64 %152, i64* %PC
  %153 = load i64, i64* %PC
  %154 = tail call %struct.Memory* @sub_4004d0_register_tm_clones(%struct.State* %0, i64 %153, %struct.Memory* %2)
  ret %struct.Memory* %154

block_4004c3:                                     ; preds = %block_4004bb
  %155 = load i64, i64* %RAX
  %156 = load i64, i64* %RAX
  %157 = add i64 %156, %155
  %158 = load i32, i32* %EAX
  %159 = zext i32 %158 to i64
  %160 = load i64, i64* %PC
  %161 = add i64 %160, 5
  store i64 %161, i64* %PC
  br label %block_4004c8

; <label>:162:                                    ; preds = %block_4004bb
  %163 = load i64, i64* %PC
  %164 = tail call %struct.Memory* @__remill_jump(%struct.State* %0, i64 %163, %struct.Memory* %2)
  ret %struct.Memory* %164
}

; Function Attrs: noinline
define %struct.Memory* @sub_4026d0___libc_csu_fini(%struct.State* noalias dereferenceable(3376), i64, %struct.Memory* noalias) #14 {
block_4026d0:
  %3 = getelementptr inbounds %struct.State, %struct.State* %0, i32 0, i32 6
  %4 = getelementptr inbounds %struct.GPR, %struct.GPR* %3, i32 0, i32 33
  %5 = getelementptr inbounds %struct.Reg, %struct.Reg* %4, i32 0, i32 0
  %PC = bitcast %union.anon* %5 to i64*
  store i64 %1, i64* %PC, align 8
  %6 = load i64, i64* %PC
  %7 = add i64 %6, 2
  store i64 %7, i64* %PC
  %8 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 33, i32 0, i32 0
  %9 = getelementptr inbounds %struct.State, %struct.State* %0, i64 0, i32 6, i32 13, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !2428
  %11 = inttoptr i64 %10 to i64*
  %12 = load i64, i64* %11
  store i64 %12, i64* %8, align 8, !tbaa !2428
  %13 = add i64 %10, 8
  store i64 %13, i64* %9, align 8, !tbaa !2428
  ret %struct.Memory* %2
}

; Function Attrs: noinline
declare void @__mcsema_attach_call() #13

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400540_frame_dummy() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400540;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @1, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400540_frame_dummy_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400540_frame_dummy(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_400510___do_global_dtors_aux() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400510;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @3, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_400510___do_global_dtors_aux_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400510___do_global_dtors_aux(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_4026d0___libc_csu_fini() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4026d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @4, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_4026d0___libc_csu_fini_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4026d0___libc_csu_fini(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define internal void @callback_sub_402660___libc_csu_init() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x402660;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @5, void ()** @2)
  ret void
}

define internal %struct.Memory* @callback_sub_402660___libc_csu_init_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_402660___libc_csu_init(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @main() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400550;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @6, void ()** @2)
  ret void
}

define internal %struct.Memory* @main_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400550_main(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603320___libc_start_main(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64)* @__libc_start_main to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603310_printf(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)* @printf to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: noinline
define internal %struct.Memory* @ext_603318_gettimeofday(%struct.State*, i64, %struct.Memory*) #13 {
  %4 = call %struct.Memory* @__remill_function_call(%struct.State* %0, i64 ptrtoint (i64 (i64, i64)* @gettimeofday to i64), %struct.Memory* %2)
  ret %struct.Memory* %4
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.init_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x400418;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @7, void ()** @2)
  ret void
}

define internal %struct.Memory* @.init_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_400418__init_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @.term_proc() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4026d4;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @8, void ()** @2)
  ret void
}

define internal %struct.Memory* @.term_proc_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4026d4__term_proc(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

; Function Attrs: naked nobuiltin noinline
define dllexport void @dtime() #15 {
  call void asm sideeffect "pushq $0;pushq $$0x4025d0;jmpq *$1;", "*m,*m,~{dirflag},~{fpsr},~{flags}"(%struct.Memory* (%struct.State*, i64, %struct.Memory*)** @9, void ()** @2)
  ret void
}

define internal %struct.Memory* @dtime_wrapper(%struct.State*, i64, %struct.Memory*) {
  %4 = load volatile i1, i1* @0
  br i1 %4, label %5, label %6

; <label>:5:                                      ; preds = %3
  br label %__mcsema_early_init.exit

; <label>:6:                                      ; preds = %3
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %6, %5
  %7 = tail call %struct.Memory* @sub_4025d0_dtime(%struct.State* %0, i64 %1, %struct.Memory* %2)
  ret %struct.Memory* %7
}

define internal void @__mcsema_constructor() {
  %1 = load volatile i1, i1* @0
  br i1 %1, label %2, label %3

; <label>:2:                                      ; preds = %0
  br label %__mcsema_early_init.exit

; <label>:3:                                      ; preds = %0
  store volatile i1 true, i1* @0
  br label %__mcsema_early_init.exit

__mcsema_early_init.exit:                         ; preds = %3, %2
  call void @callback_sub_402660___libc_csu_init()
  ret void
}

define internal void @__mcsema_destructor() {
  call void @callback_sub_4026d0___libc_csu_fini()
  ret void
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noduplicate noinline nounwind optnone readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noduplicate noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { noinline }
attributes #14 = { noinline "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { naked nobuiltin noinline }
attributes #16 = { nounwind }
attributes #17 = { alwaysinline nobuiltin nounwind }

!llvm.ident = !{!0, !0}
!llvm.dbg.cu = !{!1}
!llvm.module.flags = !{!1259, !1260}

!0 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!1 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !2, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3, retainedTypes: !67, imports: !70)
!2 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/BasicBlock.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!3 = !{!4, !26, !35, !39, !45, !51, !55, !61}
!4 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "Name", scope: !6, file: !5, line: 70, baseType: !8, size: 32, elements: !11, identifier: "_ZTSN14AsyncHyperCall4NameE")
!5 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/HyperCall.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!6 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "AsyncHyperCall", file: !5, line: 68, size: 8, elements: !7, identifier: "_ZTS14AsyncHyperCall")
!7 = !{}
!8 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !9, line: 183, baseType: !10)
!9 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stdint.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!10 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!11 = !{!12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!12 = !DIEnumerator(name: "kInvalid", value: 0)
!13 = !DIEnumerator(name: "kX86Int1", value: 1)
!14 = !DIEnumerator(name: "kX86Int3", value: 2)
!15 = !DIEnumerator(name: "kX86IntO", value: 3)
!16 = !DIEnumerator(name: "kX86IntN", value: 4)
!17 = !DIEnumerator(name: "kX86Bound", value: 5)
!18 = !DIEnumerator(name: "kX86IRet", value: 6)
!19 = !DIEnumerator(name: "kX86SysCall", value: 7)
!20 = !DIEnumerator(name: "kX86SysRet", value: 8)
!21 = !DIEnumerator(name: "kX86SysEnter", value: 9)
!22 = !DIEnumerator(name: "kX86SysExit", value: 10)
!23 = !DIEnumerator(name: "kX86JmpFar", value: 11)
!24 = !DIEnumerator(name: "kAArch64SupervisorCall", value: 12)
!25 = !DIEnumerator(name: "kInvalidInstruction", value: 13)
!26 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "RequestPrivilegeLevel", file: !27, line: 64, baseType: !28, size: 16, elements: !30, identifier: "_ZTS21RequestPrivilegeLevel")
!27 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/X86/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !9, line: 218, baseType: !29)
!29 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!30 = !{!31, !32, !33, !34}
!31 = !DIEnumerator(name: "kRPLRingZero", value: 0)
!32 = !DIEnumerator(name: "kRPLRingOne", value: 1)
!33 = !DIEnumerator(name: "kRPLRingTwo", value: 2)
!34 = !DIEnumerator(name: "kRPLRingThree", value: 3)
!35 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "TableIndicator", file: !27, line: 71, baseType: !28, size: 16, elements: !36, identifier: "_ZTS14TableIndicator")
!36 = !{!37, !38}
!37 = !DIEnumerator(name: "kGlobalDescriptorTable", value: 0)
!38 = !DIEnumerator(name: "kLocalDescriptorTable", value: 1)
!39 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUPrecisionControl", file: !27, line: 123, baseType: !28, size: 16, elements: !40, identifier: "_ZTS19FPUPrecisionControl")
!40 = !{!41, !42, !43, !44}
!41 = !DIEnumerator(name: "kPrecisionSingle", value: 0)
!42 = !DIEnumerator(name: "kPrecisionReserved", value: 1)
!43 = !DIEnumerator(name: "kPrecisionDouble", value: 2)
!44 = !DIEnumerator(name: "kPrecisionExtended", value: 3)
!45 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPURoundingControl", file: !27, line: 130, baseType: !28, size: 16, elements: !46, identifier: "_ZTS18FPURoundingControl")
!46 = !{!47, !48, !49, !50}
!47 = !DIEnumerator(name: "kFPURoundToNearestEven", value: 0)
!48 = !DIEnumerator(name: "kFPURoundDownNegInf", value: 1)
!49 = !DIEnumerator(name: "kFPURoundUpInf", value: 2)
!50 = !DIEnumerator(name: "kFPURoundToZero", value: 3)
!51 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUInfinityControl", file: !27, line: 137, baseType: !28, size: 16, elements: !52, identifier: "_ZTS18FPUInfinityControl")
!52 = !{!53, !54}
!53 = !DIEnumerator(name: "kInfinityProjective", value: 0)
!54 = !DIEnumerator(name: "kInfinityAffine", value: 1)
!55 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUTag", file: !27, line: 214, baseType: !28, size: 16, elements: !56, identifier: "_ZTS6FPUTag")
!56 = !{!57, !58, !59, !60}
!57 = !DIEnumerator(name: "kFPUTagNonZero", value: 0)
!58 = !DIEnumerator(name: "kFPUTagZero", value: 1)
!59 = !DIEnumerator(name: "kFPUTagSpecial", value: 2)
!60 = !DIEnumerator(name: "kFPUTagEmpty", value: 3)
!61 = distinct !DICompositeType(tag: DW_TAG_enumeration_type, name: "FPUAbridgedTag", file: !27, line: 221, baseType: !62, size: 8, elements: !64, identifier: "_ZTS14FPUAbridgedTag")
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !9, line: 237, baseType: !63)
!63 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!64 = !{!65, !66}
!65 = !DIEnumerator(name: "kFPUAbridgedTagEmpty", value: 0)
!66 = !DIEnumerator(name: "kFPUAbridgedTagValid", value: 1)
!67 = !{!68}
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!70 = !{!71, !77, !83, !86, !93, !97, !102, !104, !112, !116, !120, !132, !136, !140, !144, !148, !153, !157, !161, !165, !169, !177, !181, !185, !187, !191, !195, !199, !205, !209, !213, !215, !223, !227, !235, !237, !241, !245, !249, !253, !258, !263, !268, !269, !270, !271, !274, !275, !276, !277, !278, !279, !280, !335, !339, !355, !358, !363, !371, !376, !380, !384, !388, !392, !394, !396, !400, !406, !410, !416, !422, !424, !428, !432, !436, !440, !451, !453, !457, !461, !465, !467, !471, !475, !479, !481, !483, !487, !495, !499, !503, !507, !509, !515, !517, !523, !527, !531, !535, !539, !543, !547, !549, !551, !555, !559, !563, !565, !569, !573, !575, !577, !581, !585, !589, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !606, !609, !611, !613, !615, !617, !619, !621, !623, !625, !627, !629, !631, !633, !634, !635, !636, !638, !640, !642, !644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !665, !669, !674, !677, !679, !681, !683, !685, !687, !689, !691, !693, !695, !697, !699, !701, !703, !706, !712, !717, !721, !723, !725, !727, !729, !736, !740, !744, !748, !752, !756, !761, !765, !767, !771, !777, !781, !786, !788, !790, !794, !798, !802, !804, !806, !808, !810, !814, !816, !818, !822, !826, !830, !834, !838, !840, !842, !846, !850, !854, !858, !860, !862, !866, !870, !871, !872, !873, !874, !875, !880, !882, !884, !888, !890, !892, !894, !896, !898, !900, !902, !907, !911, !913, !915, !920, !922, !924, !926, !928, !930, !932, !935, !937, !939, !943, !947, !949, !951, !953, !955, !957, !959, !961, !963, !965, !967, !971, !975, !977, !979, !981, !983, !985, !987, !989, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1009, !1013, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1039, !1043, !1047, !1049, !1051, !1053, !1057, !1061, !1065, !1067, !1069, !1071, !1073, !1075, !1077, !1079, !1081, !1083, !1085, !1087, !1089, !1093, !1097, !1101, !1103, !1105, !1107, !1109, !1113, !1117, !1119, !1121, !1123, !1125, !1127, !1129, !1133, !1137, !1139, !1141, !1143, !1145, !1149, !1153, !1157, !1159, !1161, !1163, !1165, !1167, !1169, !1173, !1177, !1181, !1183, !1187, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1207, !1209, !1212, !1217, !1219, !1225, !1227, !1229, !1231, !1236, !1238, !1244, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258}
!71 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !72, entity: !74, line: 58)
!72 = !DINamespace(name: "__gnu_debug", scope: null, file: !73, line: 56)
!73 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/debug/debug.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!74 = !DINamespace(name: "__debug", scope: !75, file: !73, line: 50)
!75 = !DINamespace(name: "std", scope: null, file: !76, line: 229)
!76 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/x86_64-linux-gnu/c++/7.4.0/bits/c++config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!77 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !78, line: 52)
!78 = !DISubprogram(name: "abs", scope: !79, file: !79, line: 837, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!79 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !82}
!82 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !84, line: 127)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !79, line: 62, baseType: !85)
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 58, flags: DIFlagFwdDecl, identifier: "_ZTS5div_t")
!86 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !87, line: 128)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !79, line: 70, baseType: !88)
!88 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 66, size: 128, elements: !89, identifier: "_ZTS6ldiv_t")
!89 = !{!90, !92}
!90 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !88, file: !79, line: 68, baseType: !91, size: 64)
!91 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !88, file: !79, line: 69, baseType: !91, size: 64, offset: 64)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !94, line: 130)
!94 = !DISubprogram(name: "abort", scope: !79, file: !79, line: 588, type: !95, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!95 = !DISubroutineType(types: !96)
!96 = !{null}
!97 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !98, line: 134)
!98 = !DISubprogram(name: "atexit", scope: !79, file: !79, line: 592, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!99 = !DISubroutineType(types: !100)
!100 = !{!82, !101}
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!102 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !103, line: 137)
!103 = !DISubprogram(name: "at_quick_exit", scope: !79, file: !79, line: 597, type: !99, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!104 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !105, line: 140)
!105 = !DISubprogram(name: "atof", scope: !79, file: !79, line: 101, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!106 = !DISubroutineType(types: !107)
!107 = !{!108, !109}
!108 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !111)
!111 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !79, file: !79, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!82, !109}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !79, file: !79, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!91, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !79, file: !79, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!124, !68, !68, !125, !125, !128}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !126, line: 62, baseType: !127)
!126 = !DIFile(filename: "/home/ubuntu/Github/remill/remill-build/libraries/llvm/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!127 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !79, line: 805, baseType: !129)
!129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64)
!130 = !DISubroutineType(types: !131)
!131 = !{!82, !68, !68}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !133, line: 144)
!133 = !DISubprogram(name: "calloc", scope: !79, file: !79, line: 541, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!124, !125, !125}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !137, line: 145)
!137 = !DISubprogram(name: "div", scope: !79, file: !79, line: 849, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!84, !82, !82}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !141, line: 146)
!141 = !DISubprogram(name: "exit", scope: !79, file: !79, line: 614, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !82}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !145, line: 147)
!145 = !DISubprogram(name: "free", scope: !79, file: !79, line: 563, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !124}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !149, line: 148)
!149 = !DISubprogram(name: "getenv", scope: !79, file: !79, line: 631, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!152, !109}
!152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !154, line: 149)
!154 = !DISubprogram(name: "labs", scope: !79, file: !79, line: 838, type: !155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!155 = !DISubroutineType(types: !156)
!156 = !{!91, !91}
!157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !158, line: 150)
!158 = !DISubprogram(name: "ldiv", scope: !79, file: !79, line: 851, type: !159, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!159 = !DISubroutineType(types: !160)
!160 = !{!87, !91, !91}
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !162, line: 151)
!162 = !DISubprogram(name: "malloc", scope: !79, file: !79, line: 539, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!124, !125}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !166, line: 153)
!166 = !DISubprogram(name: "mblen", scope: !79, file: !79, line: 919, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!82, !109, !125}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !170, line: 154)
!170 = !DISubprogram(name: "mbstowcs", scope: !79, file: !79, line: 930, type: !171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DISubroutineType(types: !172)
!172 = !{!125, !173, !176, !125}
!173 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !174)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !109)
!177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !178, line: 155)
!178 = !DISubprogram(name: "mbtowc", scope: !79, file: !79, line: 922, type: !179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!179 = !DISubroutineType(types: !180)
!180 = !{!82, !173, !176, !125}
!181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !182, line: 157)
!182 = !DISubprogram(name: "qsort", scope: !79, file: !79, line: 827, type: !183, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!183 = !DISubroutineType(types: !184)
!184 = !{null, !124, !125, !125, !128}
!185 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !186, line: 160)
!186 = !DISubprogram(name: "quick_exit", scope: !79, file: !79, line: 620, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !188, line: 163)
!188 = !DISubprogram(name: "rand", scope: !79, file: !79, line: 453, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!82}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !192, line: 164)
!192 = !DISubprogram(name: "realloc", scope: !79, file: !79, line: 549, type: !193, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DISubroutineType(types: !194)
!194 = !{!124, !124, !125}
!195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !196, line: 165)
!196 = !DISubprogram(name: "srand", scope: !79, file: !79, line: 455, type: !197, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!197 = !DISubroutineType(types: !198)
!198 = !{null, !10}
!199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !200, line: 166)
!200 = !DISubprogram(name: "strtod", scope: !79, file: !79, line: 117, type: !201, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!201 = !DISubroutineType(types: !202)
!202 = !{!108, !176, !203}
!203 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !206, line: 167)
!206 = !DISubprogram(name: "strtol", scope: !79, file: !79, line: 176, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!91, !176, !203, !82}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !210, line: 168)
!210 = !DISubprogram(name: "strtoul", scope: !79, file: !79, line: 180, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!127, !176, !203, !82}
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !214, line: 169)
!214 = !DISubprogram(name: "system", scope: !79, file: !79, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !216, line: 171)
!216 = !DISubprogram(name: "wcstombs", scope: !79, file: !79, line: 933, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!125, !219, !220, !125}
!219 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !152)
!220 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !221)
!221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !222, size: 64)
!222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !175)
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !224, line: 172)
!224 = !DISubprogram(name: "wctomb", scope: !79, file: !79, line: 926, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!82, !152, !175}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !229, line: 200)
!228 = !DINamespace(name: "__gnu_cxx", scope: null, file: !76, line: 255)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !79, line: 80, baseType: !230)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 76, size: 128, elements: !231, identifier: "_ZTS7lldiv_t")
!231 = !{!232, !234}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !230, file: !79, line: 78, baseType: !233, size: 64)
!233 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !230, file: !79, line: 79, baseType: !233, size: 64, offset: 64)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !236, line: 206)
!236 = !DISubprogram(name: "_Exit", scope: !79, file: !79, line: 626, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !238, line: 210)
!238 = !DISubprogram(name: "llabs", scope: !79, file: !79, line: 841, type: !239, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!239 = !DISubroutineType(types: !240)
!240 = !{!233, !233}
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !242, line: 216)
!242 = !DISubprogram(name: "lldiv", scope: !79, file: !79, line: 855, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!229, !233, !233}
!245 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !246, line: 227)
!246 = !DISubprogram(name: "atoll", scope: !79, file: !79, line: 112, type: !247, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!247 = !DISubroutineType(types: !248)
!248 = !{!233, !109}
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !250, line: 228)
!250 = !DISubprogram(name: "strtoll", scope: !79, file: !79, line: 200, type: !251, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DISubroutineType(types: !252)
!252 = !{!233, !176, !203, !82}
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !254, line: 229)
!254 = !DISubprogram(name: "strtoull", scope: !79, file: !79, line: 205, type: !255, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!255 = !DISubroutineType(types: !256)
!256 = !{!257, !176, !203, !82}
!257 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !259, line: 231)
!259 = !DISubprogram(name: "strtof", scope: !79, file: !79, line: 123, type: !260, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!260 = !DISubroutineType(types: !261)
!261 = !{!262, !176, !203}
!262 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !264, line: 232)
!264 = !DISubprogram(name: "strtold", scope: !79, file: !79, line: 126, type: !265, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DISubroutineType(types: !266)
!266 = !{!267, !176, !203}
!267 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !229, line: 240)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !236, line: 242)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !238, line: 244)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !272, line: 245)
!272 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !228, file: !273, line: 213, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!273 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/cstdlib", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !242, line: 246)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !246, line: 248)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !259, line: 249)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !250, line: 250)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !254, line: 251)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !264, line: 252)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !281, line: 57)
!281 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "exception_ptr", scope: !283, file: !282, line: 79, size: 64, elements: !284, identifier: "_ZTSNSt15__exception_ptr13exception_ptrE")
!282 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/bits/exception_ptr.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!283 = !DINamespace(name: "__exception_ptr", scope: !75, file: !282, line: 52)
!284 = !{!285, !286, !290, !293, !294, !299, !300, !304, !309, !313, !317, !320, !321, !324, !328}
!285 = !DIDerivedType(tag: DW_TAG_member, name: "_M_exception_object", scope: !281, file: !282, line: 81, baseType: !124, size: 64)
!286 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 83, type: !287, isLocal: false, isDefinition: false, scopeLine: 83, flags: DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!287 = !DISubroutineType(types: !288)
!288 = !{null, !289, !124}
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !281, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!290 = !DISubprogram(name: "_M_addref", linkageName: "_ZNSt15__exception_ptr13exception_ptr9_M_addrefEv", scope: !281, file: !282, line: 85, type: !291, isLocal: false, isDefinition: false, scopeLine: 85, flags: DIFlagPrototyped, isOptimized: false)
!291 = !DISubroutineType(types: !292)
!292 = !{null, !289}
!293 = !DISubprogram(name: "_M_release", linkageName: "_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv", scope: !281, file: !282, line: 86, type: !291, isLocal: false, isDefinition: false, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false)
!294 = !DISubprogram(name: "_M_get", linkageName: "_ZNKSt15__exception_ptr13exception_ptr6_M_getEv", scope: !281, file: !282, line: 88, type: !295, isLocal: false, isDefinition: false, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false)
!295 = !DISubroutineType(types: !296)
!296 = !{!124, !297}
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !281)
!299 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 96, type: !291, isLocal: false, isDefinition: false, scopeLine: 96, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!300 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 98, type: !301, isLocal: false, isDefinition: false, scopeLine: 98, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!301 = !DISubroutineType(types: !302)
!302 = !{null, !289, !303}
!303 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !298, size: 64)
!304 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 101, type: !305, isLocal: false, isDefinition: false, scopeLine: 101, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!305 = !DISubroutineType(types: !306)
!306 = !{null, !289, !307}
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "nullptr_t", scope: !75, file: !76, line: 235, baseType: !308)
!308 = !DIBasicType(tag: DW_TAG_unspecified_type, name: "decltype(nullptr)")
!309 = !DISubprogram(name: "exception_ptr", scope: !281, file: !282, line: 105, type: !310, isLocal: false, isDefinition: false, scopeLine: 105, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!310 = !DISubroutineType(types: !311)
!311 = !{null, !289, !312}
!312 = !DIDerivedType(tag: DW_TAG_rvalue_reference_type, baseType: !281, size: 64)
!313 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSERKS0_", scope: !281, file: !282, line: 118, type: !314, isLocal: false, isDefinition: false, scopeLine: 118, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!314 = !DISubroutineType(types: !315)
!315 = !{!316, !289, !303}
!316 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !281, size: 64)
!317 = !DISubprogram(name: "operator=", linkageName: "_ZNSt15__exception_ptr13exception_ptraSEOS0_", scope: !281, file: !282, line: 122, type: !318, isLocal: false, isDefinition: false, scopeLine: 122, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!318 = !DISubroutineType(types: !319)
!319 = !{!316, !289, !312}
!320 = !DISubprogram(name: "~exception_ptr", scope: !281, file: !282, line: 129, type: !291, isLocal: false, isDefinition: false, scopeLine: 129, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!321 = !DISubprogram(name: "swap", linkageName: "_ZNSt15__exception_ptr13exception_ptr4swapERS0_", scope: !281, file: !282, line: 132, type: !322, isLocal: false, isDefinition: false, scopeLine: 132, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!322 = !DISubroutineType(types: !323)
!323 = !{null, !289, !316}
!324 = !DISubprogram(name: "operator bool", linkageName: "_ZNKSt15__exception_ptr13exception_ptrcvbEv", scope: !281, file: !282, line: 144, type: !325, isLocal: false, isDefinition: false, scopeLine: 144, flags: DIFlagPublic | DIFlagExplicit | DIFlagPrototyped, isOptimized: false)
!325 = !DISubroutineType(types: !326)
!326 = !{!327, !297}
!327 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!328 = !DISubprogram(name: "__cxa_exception_type", linkageName: "_ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv", scope: !281, file: !282, line: 153, type: !329, isLocal: false, isDefinition: false, scopeLine: 153, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!329 = !DISubroutineType(types: !330)
!330 = !{!331, !297}
!331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !332, size: 64)
!332 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !333)
!333 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "type_info", scope: !75, file: !334, line: 88, flags: DIFlagFwdDecl, identifier: "_ZTSSt9type_info")
!334 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/7.4.0/../../../../include/c++/7.4.0/typeinfo", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!335 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !283, entity: !336, line: 73)
!336 = !DISubprogram(name: "rethrow_exception", linkageName: "_ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE", scope: !75, file: !282, line: 69, type: !337, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!337 = !DISubroutineType(types: !338)
!338 = !{null, !281}
!339 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !340, line: 64)
!340 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !341, line: 6, baseType: !342)
!341 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!342 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !343, line: 21, baseType: !344)
!343 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 13, size: 64, elements: !345, identifier: "_ZTS11__mbstate_t")
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !344, file: !343, line: 15, baseType: !82, size: 32)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !344, file: !343, line: 20, baseType: !348, size: 32, offset: 32)
!348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !344, file: !343, line: 16, size: 32, elements: !349, identifier: "_ZTSN11__mbstate_tUt_E")
!349 = !{!350, !351}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !348, file: !343, line: 18, baseType: !10, size: 32)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !348, file: !343, line: 19, baseType: !352, size: 32)
!352 = !DICompositeType(tag: DW_TAG_array_type, baseType: !111, size: 32, elements: !353)
!353 = !{!354}
!354 = !DISubrange(count: 4)
!355 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !356, line: 139)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "wint_t", file: !357, line: 20, baseType: !10)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!358 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !359, line: 141)
!359 = !DISubprogram(name: "btowc", scope: !360, file: !360, line: 284, type: !361, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!360 = !DIFile(filename: "/usr/include/wchar.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!361 = !DISubroutineType(types: !362)
!362 = !{!356, !82}
!363 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !364, line: 142)
!364 = !DISubprogram(name: "fgetwc", scope: !360, file: !360, line: 727, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!365 = !DISubroutineType(types: !366)
!366 = !{!356, !367}
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_typedef, name: "__FILE", file: !369, line: 5, baseType: !370)
!369 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !369, line: 4, flags: DIFlagFwdDecl, identifier: "_ZTS8_IO_FILE")
!371 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !372, line: 143)
!372 = !DISubprogram(name: "fgetws", scope: !360, file: !360, line: 756, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!373 = !DISubroutineType(types: !374)
!374 = !{!174, !173, !82, !375}
!375 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !367)
!376 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !377, line: 144)
!377 = !DISubprogram(name: "fputwc", scope: !360, file: !360, line: 741, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!378 = !DISubroutineType(types: !379)
!379 = !{!356, !175, !367}
!380 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !381, line: 145)
!381 = !DISubprogram(name: "fputws", scope: !360, file: !360, line: 763, type: !382, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!382 = !DISubroutineType(types: !383)
!383 = !{!82, !220, !375}
!384 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !385, line: 146)
!385 = !DISubprogram(name: "fwide", scope: !360, file: !360, line: 573, type: !386, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!386 = !DISubroutineType(types: !387)
!387 = !{!82, !367, !82}
!388 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !389, line: 147)
!389 = !DISubprogram(name: "fwprintf", scope: !360, file: !360, line: 580, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!390 = !DISubroutineType(types: !391)
!391 = !{!82, !375, !220, null}
!392 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !393, line: 148)
!393 = !DISubprogram(name: "fwscanf", scope: !360, file: !360, line: 621, type: !390, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!394 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !395, line: 149)
!395 = !DISubprogram(name: "getwc", scope: !360, file: !360, line: 728, type: !365, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!396 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !397, line: 150)
!397 = !DISubprogram(name: "getwchar", scope: !360, file: !360, line: 734, type: !398, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!398 = !DISubroutineType(types: !399)
!399 = !{!356}
!400 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !401, line: 151)
!401 = !DISubprogram(name: "mbrlen", scope: !360, file: !360, line: 307, type: !402, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!402 = !DISubroutineType(types: !403)
!403 = !{!125, !176, !125, !404}
!404 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !405)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64)
!406 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !407, line: 152)
!407 = !DISubprogram(name: "mbrtowc", scope: !360, file: !360, line: 296, type: !408, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!408 = !DISubroutineType(types: !409)
!409 = !{!125, !173, !176, !125, !404}
!410 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !411, line: 153)
!411 = !DISubprogram(name: "mbsinit", scope: !360, file: !360, line: 292, type: !412, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!412 = !DISubroutineType(types: !413)
!413 = !{!82, !414}
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !340)
!416 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !417, line: 154)
!417 = !DISubprogram(name: "mbsrtowcs", scope: !360, file: !360, line: 337, type: !418, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!418 = !DISubroutineType(types: !419)
!419 = !{!125, !173, !420, !125, !404}
!420 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !109, size: 64)
!422 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !423, line: 155)
!423 = !DISubprogram(name: "putwc", scope: !360, file: !360, line: 742, type: !378, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!424 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !425, line: 156)
!425 = !DISubprogram(name: "putwchar", scope: !360, file: !360, line: 748, type: !426, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!426 = !DISubroutineType(types: !427)
!427 = !{!356, !175}
!428 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !429, line: 158)
!429 = !DISubprogram(name: "swprintf", scope: !360, file: !360, line: 590, type: !430, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!430 = !DISubroutineType(types: !431)
!431 = !{!82, !173, !125, !220, null}
!432 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !433, line: 160)
!433 = !DISubprogram(name: "swscanf", scope: !360, file: !360, line: 631, type: !434, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!434 = !DISubroutineType(types: !435)
!435 = !{!82, !220, !220, null}
!436 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !437, line: 161)
!437 = !DISubprogram(name: "ungetwc", scope: !360, file: !360, line: 771, type: !438, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!438 = !DISubroutineType(types: !439)
!439 = !{!356, !356, !367}
!440 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !441, line: 162)
!441 = !DISubprogram(name: "vfwprintf", scope: !360, file: !360, line: 598, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!442 = !DISubroutineType(types: !443)
!443 = !{!82, !375, !220, !444}
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !2, size: 192, elements: !446, identifier: "_ZTS13__va_list_tag")
!446 = !{!447, !448, !449, !450}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !445, file: !2, baseType: !10, size: 32)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !445, file: !2, baseType: !10, size: 32, offset: 32)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 64)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !445, file: !2, baseType: !124, size: 64, offset: 128)
!451 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 164)
!452 = !DISubprogram(name: "vfwscanf", scope: !360, file: !360, line: 673, type: !442, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!453 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !454, line: 167)
!454 = !DISubprogram(name: "vswprintf", scope: !360, file: !360, line: 611, type: !455, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!455 = !DISubroutineType(types: !456)
!456 = !{!82, !173, !125, !220, !444}
!457 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 170)
!458 = !DISubprogram(name: "vswscanf", scope: !360, file: !360, line: 685, type: !459, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!459 = !DISubroutineType(types: !460)
!460 = !{!82, !220, !220, !444}
!461 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !462, line: 172)
!462 = !DISubprogram(name: "vwprintf", scope: !360, file: !360, line: 606, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!463 = !DISubroutineType(types: !464)
!464 = !{!82, !220, !444}
!465 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 174)
!466 = !DISubprogram(name: "vwscanf", scope: !360, file: !360, line: 681, type: !463, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!467 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !468, line: 176)
!468 = !DISubprogram(name: "wcrtomb", scope: !360, file: !360, line: 301, type: !469, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!469 = !DISubroutineType(types: !470)
!470 = !{!125, !219, !175, !404}
!471 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !472, line: 177)
!472 = !DISubprogram(name: "wcscat", scope: !360, file: !360, line: 97, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!473 = !DISubroutineType(types: !474)
!474 = !{!174, !173, !220}
!475 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !476, line: 178)
!476 = !DISubprogram(name: "wcscmp", scope: !360, file: !360, line: 106, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!477 = !DISubroutineType(types: !478)
!478 = !{!82, !221, !221}
!479 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !480, line: 179)
!480 = !DISubprogram(name: "wcscoll", scope: !360, file: !360, line: 131, type: !477, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!481 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !482, line: 180)
!482 = !DISubprogram(name: "wcscpy", scope: !360, file: !360, line: 87, type: !473, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!483 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !484, line: 181)
!484 = !DISubprogram(name: "wcscspn", scope: !360, file: !360, line: 187, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!485 = !DISubroutineType(types: !486)
!486 = !{!125, !221, !221}
!487 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !488, line: 182)
!488 = !DISubprogram(name: "wcsftime", scope: !360, file: !360, line: 835, type: !489, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!489 = !DISubroutineType(types: !490)
!490 = !{!125, !173, !125, !220, !491}
!491 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !492)
!492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !493, size: 64)
!493 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !360, line: 83, flags: DIFlagFwdDecl, identifier: "_ZTS2tm")
!495 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !496, line: 183)
!496 = !DISubprogram(name: "wcslen", scope: !360, file: !360, line: 222, type: !497, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!497 = !DISubroutineType(types: !498)
!498 = !{!125, !221}
!499 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !500, line: 184)
!500 = !DISubprogram(name: "wcsncat", scope: !360, file: !360, line: 101, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!501 = !DISubroutineType(types: !502)
!502 = !{!174, !173, !220, !125}
!503 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !504, line: 185)
!504 = !DISubprogram(name: "wcsncmp", scope: !360, file: !360, line: 109, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!505 = !DISubroutineType(types: !506)
!506 = !{!82, !221, !221, !125}
!507 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !508, line: 186)
!508 = !DISubprogram(name: "wcsncpy", scope: !360, file: !360, line: 92, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!509 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !510, line: 187)
!510 = !DISubprogram(name: "wcsrtombs", scope: !360, file: !360, line: 343, type: !511, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!511 = !DISubroutineType(types: !512)
!512 = !{!125, !219, !513, !125, !404}
!513 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !514)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !221, size: 64)
!515 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !516, line: 188)
!516 = !DISubprogram(name: "wcsspn", scope: !360, file: !360, line: 191, type: !485, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!517 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !518, line: 189)
!518 = !DISubprogram(name: "wcstod", scope: !360, file: !360, line: 377, type: !519, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!519 = !DISubroutineType(types: !520)
!520 = !{!108, !220, !521}
!521 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !522)
!522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!523 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 191)
!524 = !DISubprogram(name: "wcstof", scope: !360, file: !360, line: 382, type: !525, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!525 = !DISubroutineType(types: !526)
!526 = !{!262, !220, !521}
!527 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !528, line: 193)
!528 = !DISubprogram(name: "wcstok", scope: !360, file: !360, line: 217, type: !529, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!529 = !DISubroutineType(types: !530)
!530 = !{!174, !173, !220, !521}
!531 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !532, line: 194)
!532 = !DISubprogram(name: "wcstol", scope: !360, file: !360, line: 428, type: !533, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!533 = !DISubroutineType(types: !534)
!534 = !{!91, !220, !521, !82}
!535 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !536, line: 195)
!536 = !DISubprogram(name: "wcstoul", scope: !360, file: !360, line: 433, type: !537, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!537 = !DISubroutineType(types: !538)
!538 = !{!127, !220, !521, !82}
!539 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !540, line: 196)
!540 = !DISubprogram(name: "wcsxfrm", scope: !360, file: !360, line: 135, type: !541, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!541 = !DISubroutineType(types: !542)
!542 = !{!125, !173, !220, !125}
!543 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !544, line: 197)
!544 = !DISubprogram(name: "wctob", scope: !360, file: !360, line: 288, type: !545, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!545 = !DISubroutineType(types: !546)
!546 = !{!82, !356}
!547 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !548, line: 198)
!548 = !DISubprogram(name: "wmemcmp", scope: !360, file: !360, line: 258, type: !505, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!549 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !550, line: 199)
!550 = !DISubprogram(name: "wmemcpy", scope: !360, file: !360, line: 262, type: !501, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!551 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !552, line: 200)
!552 = !DISubprogram(name: "wmemmove", scope: !360, file: !360, line: 267, type: !553, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!553 = !DISubroutineType(types: !554)
!554 = !{!174, !174, !221, !125}
!555 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !556, line: 201)
!556 = !DISubprogram(name: "wmemset", scope: !360, file: !360, line: 271, type: !557, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!557 = !DISubroutineType(types: !558)
!558 = !{!174, !174, !175, !125}
!559 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !560, line: 202)
!560 = !DISubprogram(name: "wprintf", scope: !360, file: !360, line: 587, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!561 = !DISubroutineType(types: !562)
!562 = !{!82, !220, null}
!563 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !564, line: 203)
!564 = !DISubprogram(name: "wscanf", scope: !360, file: !360, line: 628, type: !561, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!565 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !566, line: 204)
!566 = !DISubprogram(name: "wcschr", scope: !360, file: !360, line: 164, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!567 = !DISubroutineType(types: !568)
!568 = !{!174, !221, !175}
!569 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !570, line: 205)
!570 = !DISubprogram(name: "wcspbrk", scope: !360, file: !360, line: 201, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!571 = !DISubroutineType(types: !572)
!572 = !{!174, !221, !221}
!573 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !574, line: 206)
!574 = !DISubprogram(name: "wcsrchr", scope: !360, file: !360, line: 174, type: !567, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!575 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !576, line: 207)
!576 = !DISubprogram(name: "wcsstr", scope: !360, file: !360, line: 212, type: !571, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!577 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !578, line: 208)
!578 = !DISubprogram(name: "wmemchr", scope: !360, file: !360, line: 253, type: !579, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!579 = !DISubroutineType(types: !580)
!580 = !{!174, !221, !175, !125}
!581 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !582, line: 248)
!582 = !DISubprogram(name: "wcstold", scope: !360, file: !360, line: 384, type: !583, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!583 = !DISubroutineType(types: !584)
!584 = !{!267, !220, !521}
!585 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !586, line: 257)
!586 = !DISubprogram(name: "wcstoll", scope: !360, file: !360, line: 441, type: !587, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!587 = !DISubroutineType(types: !588)
!588 = !{!233, !220, !521, !82}
!589 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !590, line: 258)
!590 = !DISubprogram(name: "wcstoull", scope: !360, file: !360, line: 448, type: !591, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!591 = !DISubroutineType(types: !592)
!592 = !{!257, !220, !521, !82}
!593 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 264)
!594 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 265)
!595 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 266)
!596 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !524, line: 280)
!597 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !452, line: 283)
!598 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !458, line: 286)
!599 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !466, line: 289)
!600 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !582, line: 293)
!601 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !586, line: 294)
!602 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !590, line: 295)
!603 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !604, line: 48)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !9, line: 235, baseType: !605)
!605 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!606 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !607, line: 49)
!607 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !9, line: 216, baseType: !608)
!608 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!609 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !610, line: 50)
!610 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !9, line: 178, baseType: !82)
!611 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !612, line: 51)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !9, line: 107, baseType: !91)
!613 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !614, line: 53)
!614 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast8_t", file: !9, line: 245, baseType: !604)
!615 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !616, line: 54)
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast16_t", file: !9, line: 228, baseType: !607)
!617 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !618, line: 55)
!618 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast32_t", file: !9, line: 197, baseType: !610)
!619 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !620, line: 56)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_fast64_t", file: !9, line: 123, baseType: !612)
!621 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !622, line: 58)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least8_t", file: !9, line: 243, baseType: !604)
!623 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !624, line: 59)
!624 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least16_t", file: !9, line: 226, baseType: !607)
!625 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !626, line: 60)
!626 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least32_t", file: !9, line: 195, baseType: !610)
!627 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !628, line: 61)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "int_least64_t", file: !9, line: 121, baseType: !612)
!629 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !630, line: 63)
!630 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !9, line: 276, baseType: !91)
!631 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !632, line: 64)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !9, line: 263, baseType: !612)
!633 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !62, line: 66)
!634 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !28, line: 67)
!635 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !8, line: 68)
!636 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !637, line: 69)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !9, line: 109, baseType: !127)
!638 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !639, line: 71)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast8_t", file: !9, line: 246, baseType: !62)
!640 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !641, line: 72)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast16_t", file: !9, line: 229, baseType: !28)
!642 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !643, line: 73)
!643 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast32_t", file: !9, line: 198, baseType: !8)
!644 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !645, line: 74)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_fast64_t", file: !9, line: 124, baseType: !637)
!646 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !647, line: 76)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least8_t", file: !9, line: 244, baseType: !62)
!648 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !649, line: 77)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least16_t", file: !9, line: 227, baseType: !28)
!650 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !651, line: 78)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least32_t", file: !9, line: 196, baseType: !8)
!652 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !653, line: 79)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint_least64_t", file: !9, line: 122, baseType: !637)
!654 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !655, line: 81)
!655 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !9, line: 277, baseType: !127)
!656 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !657, line: 82)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !9, line: 270, baseType: !637)
!658 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !659, line: 44)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", scope: !75, file: !76, line: 231, baseType: !127)
!660 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !661, line: 45)
!661 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", scope: !75, file: !76, line: 232, baseType: !91)
!662 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !663, line: 53)
!663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lconv", file: !664, line: 51, flags: DIFlagFwdDecl, identifier: "_ZTS5lconv")
!664 = !DIFile(filename: "/usr/include/locale.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!665 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !666, line: 54)
!666 = !DISubprogram(name: "setlocale", scope: !664, file: !664, line: 122, type: !667, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!667 = !DISubroutineType(types: !668)
!668 = !{!152, !82, !109}
!669 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !670, line: 55)
!670 = !DISubprogram(name: "localeconv", scope: !664, file: !664, line: 125, type: !671, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!671 = !DISubroutineType(types: !672)
!672 = !{!673}
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!674 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !675, line: 64)
!675 = !DISubprogram(name: "isalnum", scope: !676, file: !676, line: 108, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!676 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!677 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !678, line: 65)
!678 = !DISubprogram(name: "isalpha", scope: !676, file: !676, line: 109, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!679 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !680, line: 66)
!680 = !DISubprogram(name: "iscntrl", scope: !676, file: !676, line: 110, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!681 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !682, line: 67)
!682 = !DISubprogram(name: "isdigit", scope: !676, file: !676, line: 111, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!683 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !684, line: 68)
!684 = !DISubprogram(name: "isgraph", scope: !676, file: !676, line: 113, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!685 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !686, line: 69)
!686 = !DISubprogram(name: "islower", scope: !676, file: !676, line: 112, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!687 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !688, line: 70)
!688 = !DISubprogram(name: "isprint", scope: !676, file: !676, line: 114, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!689 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !690, line: 71)
!690 = !DISubprogram(name: "ispunct", scope: !676, file: !676, line: 115, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!691 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !692, line: 72)
!692 = !DISubprogram(name: "isspace", scope: !676, file: !676, line: 116, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!693 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !694, line: 73)
!694 = !DISubprogram(name: "isupper", scope: !676, file: !676, line: 117, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!695 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !696, line: 74)
!696 = !DISubprogram(name: "isxdigit", scope: !676, file: !676, line: 118, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!697 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !698, line: 75)
!698 = !DISubprogram(name: "tolower", scope: !676, file: !676, line: 122, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!699 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !700, line: 76)
!700 = !DISubprogram(name: "toupper", scope: !676, file: !676, line: 125, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!701 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !702, line: 87)
!702 = !DISubprogram(name: "isblank", scope: !676, file: !676, line: 130, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!703 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !704, line: 98)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !705, line: 7, baseType: !370)
!705 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!706 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !707, line: 99)
!707 = !DIDerivedType(tag: DW_TAG_typedef, name: "fpos_t", file: !708, line: 78, baseType: !709)
!708 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "_G_fpos_t", file: !710, line: 30, baseType: !711)
!710 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/_G_config.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !710, line: 26, flags: DIFlagFwdDecl, identifier: "_ZTS9_G_fpos_t")
!712 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !713, line: 101)
!713 = !DISubprogram(name: "clearerr", scope: !708, file: !708, line: 757, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!714 = !DISubroutineType(types: !715)
!715 = !{null, !716}
!716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!717 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !718, line: 102)
!718 = !DISubprogram(name: "fclose", scope: !708, file: !708, line: 199, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!719 = !DISubroutineType(types: !720)
!720 = !{!82, !716}
!721 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !722, line: 103)
!722 = !DISubprogram(name: "feof", scope: !708, file: !708, line: 759, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!723 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !724, line: 104)
!724 = !DISubprogram(name: "ferror", scope: !708, file: !708, line: 761, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!725 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !726, line: 105)
!726 = !DISubprogram(name: "fflush", scope: !708, file: !708, line: 204, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!727 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !728, line: 106)
!728 = !DISubprogram(name: "fgetc", scope: !708, file: !708, line: 477, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!729 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !730, line: 107)
!730 = !DISubprogram(name: "fgetpos", scope: !708, file: !708, line: 731, type: !731, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!731 = !DISubroutineType(types: !732)
!732 = !{!82, !733, !734}
!733 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !716)
!734 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !735)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!736 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !737, line: 108)
!737 = !DISubprogram(name: "fgets", scope: !708, file: !708, line: 564, type: !738, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!738 = !DISubroutineType(types: !739)
!739 = !{!152, !219, !82, !733}
!740 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !741, line: 109)
!741 = !DISubprogram(name: "fopen", scope: !708, file: !708, line: 232, type: !742, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!742 = !DISubroutineType(types: !743)
!743 = !{!716, !176, !176}
!744 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !745, line: 110)
!745 = !DISubprogram(name: "fprintf", scope: !708, file: !708, line: 312, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!746 = !DISubroutineType(types: !747)
!747 = !{!82, !733, !176, null}
!748 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !749, line: 111)
!749 = !DISubprogram(name: "fputc", scope: !708, file: !708, line: 517, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!750 = !DISubroutineType(types: !751)
!751 = !{!82, !82, !716}
!752 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !753, line: 112)
!753 = !DISubprogram(name: "fputs", scope: !708, file: !708, line: 626, type: !754, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!754 = !DISubroutineType(types: !755)
!755 = !{!82, !176, !733}
!756 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !757, line: 113)
!757 = !DISubprogram(name: "fread", scope: !708, file: !708, line: 646, type: !758, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!758 = !DISubroutineType(types: !759)
!759 = !{!125, !760, !125, !125, !733}
!760 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !124)
!761 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !762, line: 114)
!762 = !DISubprogram(name: "freopen", scope: !708, file: !708, line: 238, type: !763, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!763 = !DISubroutineType(types: !764)
!764 = !{!716, !176, !176, !733}
!765 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !766, line: 115)
!766 = !DISubprogram(name: "fscanf", scope: !708, file: !708, line: 377, type: !746, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!767 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !768, line: 116)
!768 = !DISubprogram(name: "fseek", scope: !708, file: !708, line: 684, type: !769, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!769 = !DISubroutineType(types: !770)
!770 = !{!82, !716, !91, !82}
!771 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !772, line: 117)
!772 = !DISubprogram(name: "fsetpos", scope: !708, file: !708, line: 736, type: !773, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!773 = !DISubroutineType(types: !774)
!774 = !{!82, !716, !775}
!775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !776, size: 64)
!776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!777 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !778, line: 118)
!778 = !DISubprogram(name: "ftell", scope: !708, file: !708, line: 689, type: !779, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!779 = !DISubroutineType(types: !780)
!780 = !{!91, !716}
!781 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !782, line: 119)
!782 = !DISubprogram(name: "fwrite", scope: !708, file: !708, line: 652, type: !783, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!783 = !DISubroutineType(types: !784)
!784 = !{!125, !785, !125, !125, !733}
!785 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!786 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !787, line: 120)
!787 = !DISubprogram(name: "getc", scope: !708, file: !708, line: 478, type: !719, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!788 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !789, line: 121)
!789 = !DISubprogram(name: "getchar", scope: !708, file: !708, line: 484, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!790 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !791, line: 124)
!791 = !DISubprogram(name: "gets", scope: !708, file: !708, line: 577, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!792 = !DISubroutineType(types: !793)
!793 = !{!152, !152}
!794 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !795, line: 126)
!795 = !DISubprogram(name: "perror", scope: !708, file: !708, line: 775, type: !796, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!796 = !DISubroutineType(types: !797)
!797 = !{null, !109}
!798 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !799, line: 127)
!799 = !DISubprogram(name: "printf", scope: !708, file: !708, line: 318, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!800 = !DISubroutineType(types: !801)
!801 = !{!82, !176, null}
!802 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !803, line: 128)
!803 = !DISubprogram(name: "putc", scope: !708, file: !708, line: 518, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!804 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !805, line: 129)
!805 = !DISubprogram(name: "putchar", scope: !708, file: !708, line: 524, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!806 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !807, line: 130)
!807 = !DISubprogram(name: "puts", scope: !708, file: !708, line: 632, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!808 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !809, line: 131)
!809 = !DISubprogram(name: "remove", scope: !708, file: !708, line: 144, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!810 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !811, line: 132)
!811 = !DISubprogram(name: "rename", scope: !708, file: !708, line: 146, type: !812, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!812 = !DISubroutineType(types: !813)
!813 = !{!82, !109, !109}
!814 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !815, line: 133)
!815 = !DISubprogram(name: "rewind", scope: !708, file: !708, line: 694, type: !714, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!816 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !817, line: 134)
!817 = !DISubprogram(name: "scanf", scope: !708, file: !708, line: 383, type: !800, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!818 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !819, line: 135)
!819 = !DISubprogram(name: "setbuf", scope: !708, file: !708, line: 290, type: !820, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!820 = !DISubroutineType(types: !821)
!821 = !{null, !733, !219}
!822 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !823, line: 136)
!823 = !DISubprogram(name: "setvbuf", scope: !708, file: !708, line: 294, type: !824, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!824 = !DISubroutineType(types: !825)
!825 = !{!82, !733, !219, !82, !125}
!826 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !827, line: 137)
!827 = !DISubprogram(name: "sprintf", scope: !708, file: !708, line: 320, type: !828, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!828 = !DISubroutineType(types: !829)
!829 = !{!82, !219, !176, null}
!830 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !831, line: 138)
!831 = !DISubprogram(name: "sscanf", scope: !708, file: !708, line: 385, type: !832, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!832 = !DISubroutineType(types: !833)
!833 = !{!82, !176, !176, null}
!834 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !835, line: 139)
!835 = !DISubprogram(name: "tmpfile", scope: !708, file: !708, line: 159, type: !836, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!836 = !DISubroutineType(types: !837)
!837 = !{!716}
!838 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !839, line: 141)
!839 = !DISubprogram(name: "tmpnam", scope: !708, file: !708, line: 173, type: !792, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!840 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !841, line: 143)
!841 = !DISubprogram(name: "ungetc", scope: !708, file: !708, line: 639, type: !750, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!842 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !843, line: 144)
!843 = !DISubprogram(name: "vfprintf", scope: !708, file: !708, line: 327, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!844 = !DISubroutineType(types: !845)
!845 = !{!82, !733, !176, !444}
!846 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !847, line: 145)
!847 = !DISubprogram(name: "vprintf", scope: !708, file: !708, line: 333, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!848 = !DISubroutineType(types: !849)
!849 = !{!82, !176, !444}
!850 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !851, line: 146)
!851 = !DISubprogram(name: "vsprintf", scope: !708, file: !708, line: 335, type: !852, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!852 = !DISubroutineType(types: !853)
!853 = !{!82, !219, !176, !444}
!854 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !855, line: 175)
!855 = !DISubprogram(name: "snprintf", scope: !708, file: !708, line: 340, type: !856, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!856 = !DISubroutineType(types: !857)
!857 = !{!82, !219, !125, !176, null}
!858 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !859, line: 176)
!859 = !DISubprogram(name: "vfscanf", scope: !708, file: !708, line: 420, type: !844, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!860 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !861, line: 177)
!861 = !DISubprogram(name: "vscanf", scope: !708, file: !708, line: 428, type: !848, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!862 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !863, line: 178)
!863 = !DISubprogram(name: "vsnprintf", scope: !708, file: !708, line: 344, type: !864, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!864 = !DISubroutineType(types: !865)
!865 = !{!82, !219, !125, !176, !444}
!866 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !228, entity: !867, line: 179)
!867 = !DISubprogram(name: "vsscanf", scope: !708, file: !708, line: 432, type: !868, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!868 = !DISubroutineType(types: !869)
!869 = !{!82, !176, !176, !444}
!870 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !855, line: 185)
!871 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !859, line: 186)
!872 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !861, line: 187)
!873 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !863, line: 188)
!874 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !867, line: 189)
!875 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !876, line: 83)
!876 = !DISubprogram(name: "acos", scope: !877, file: !877, line: 53, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!877 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/mathcalls.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!878 = !DISubroutineType(types: !879)
!879 = !{!108, !108}
!880 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !881, line: 102)
!881 = !DISubprogram(name: "asin", scope: !877, file: !877, line: 55, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!882 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !883, line: 121)
!883 = !DISubprogram(name: "atan", scope: !877, file: !877, line: 57, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!884 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !885, line: 140)
!885 = !DISubprogram(name: "atan2", scope: !877, file: !877, line: 59, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!886 = !DISubroutineType(types: !887)
!887 = !{!108, !108, !108}
!888 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !889, line: 161)
!889 = !DISubprogram(name: "ceil", scope: !877, file: !877, line: 159, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!890 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !891, line: 180)
!891 = !DISubprogram(name: "cos", scope: !877, file: !877, line: 62, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!892 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !893, line: 199)
!893 = !DISubprogram(name: "cosh", scope: !877, file: !877, line: 71, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!894 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !895, line: 218)
!895 = !DISubprogram(name: "exp", scope: !877, file: !877, line: 95, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!896 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !897, line: 237)
!897 = !DISubprogram(name: "fabs", scope: !877, file: !877, line: 162, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!898 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !899, line: 256)
!899 = !DISubprogram(name: "floor", scope: !877, file: !877, line: 165, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!900 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !901, line: 275)
!901 = !DISubprogram(name: "fmod", scope: !877, file: !877, line: 168, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!902 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !903, line: 296)
!903 = !DISubprogram(name: "frexp", scope: !877, file: !877, line: 98, type: !904, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!904 = !DISubroutineType(types: !905)
!905 = !{!108, !108, !906}
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!907 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !908, line: 315)
!908 = !DISubprogram(name: "ldexp", scope: !877, file: !877, line: 101, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!909 = !DISubroutineType(types: !910)
!910 = !{!108, !108, !82}
!911 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !912, line: 334)
!912 = !DISubprogram(name: "log", scope: !877, file: !877, line: 104, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!913 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !914, line: 353)
!914 = !DISubprogram(name: "log10", scope: !877, file: !877, line: 107, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!915 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !916, line: 372)
!916 = !DISubprogram(name: "modf", scope: !877, file: !877, line: 110, type: !917, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!917 = !DISubroutineType(types: !918)
!918 = !{!108, !108, !919}
!919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!920 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !921, line: 384)
!921 = !DISubprogram(name: "pow", scope: !877, file: !877, line: 140, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!922 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !923, line: 421)
!923 = !DISubprogram(name: "sin", scope: !877, file: !877, line: 64, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!924 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !925, line: 440)
!925 = !DISubprogram(name: "sinh", scope: !877, file: !877, line: 73, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!926 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !927, line: 459)
!927 = !DISubprogram(name: "sqrt", scope: !877, file: !877, line: 143, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!928 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !929, line: 478)
!929 = !DISubprogram(name: "tan", scope: !877, file: !877, line: 66, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!930 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !931, line: 497)
!931 = !DISubprogram(name: "tanh", scope: !877, file: !877, line: 75, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!932 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !933, line: 1080)
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_t", file: !934, line: 150, baseType: !108)
!934 = !DIFile(filename: "/usr/include/math.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!935 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !936, line: 1081)
!936 = !DIDerivedType(tag: DW_TAG_typedef, name: "float_t", file: !934, line: 149, baseType: !262)
!937 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !938, line: 1084)
!938 = !DISubprogram(name: "acosh", scope: !877, file: !877, line: 85, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!939 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !940, line: 1085)
!940 = !DISubprogram(name: "acoshf", scope: !877, file: !877, line: 85, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!941 = !DISubroutineType(types: !942)
!942 = !{!262, !262}
!943 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !944, line: 1086)
!944 = !DISubprogram(name: "acoshl", scope: !877, file: !877, line: 85, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!945 = !DISubroutineType(types: !946)
!946 = !{!267, !267}
!947 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !948, line: 1088)
!948 = !DISubprogram(name: "asinh", scope: !877, file: !877, line: 87, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!949 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !950, line: 1089)
!950 = !DISubprogram(name: "asinhf", scope: !877, file: !877, line: 87, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!951 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !952, line: 1090)
!952 = !DISubprogram(name: "asinhl", scope: !877, file: !877, line: 87, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!953 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !954, line: 1092)
!954 = !DISubprogram(name: "atanh", scope: !877, file: !877, line: 89, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!955 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !956, line: 1093)
!956 = !DISubprogram(name: "atanhf", scope: !877, file: !877, line: 89, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!957 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !958, line: 1094)
!958 = !DISubprogram(name: "atanhl", scope: !877, file: !877, line: 89, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!959 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !960, line: 1096)
!960 = !DISubprogram(name: "cbrt", scope: !877, file: !877, line: 152, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!961 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !962, line: 1097)
!962 = !DISubprogram(name: "cbrtf", scope: !877, file: !877, line: 152, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!963 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !964, line: 1098)
!964 = !DISubprogram(name: "cbrtl", scope: !877, file: !877, line: 152, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!965 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !966, line: 1100)
!966 = !DISubprogram(name: "copysign", scope: !877, file: !877, line: 196, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!967 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !968, line: 1101)
!968 = !DISubprogram(name: "copysignf", scope: !877, file: !877, line: 196, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!969 = !DISubroutineType(types: !970)
!970 = !{!262, !262, !262}
!971 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !972, line: 1102)
!972 = !DISubprogram(name: "copysignl", scope: !877, file: !877, line: 196, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!973 = !DISubroutineType(types: !974)
!974 = !{!267, !267, !267}
!975 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !976, line: 1104)
!976 = !DISubprogram(name: "erf", scope: !877, file: !877, line: 228, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!977 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !978, line: 1105)
!978 = !DISubprogram(name: "erff", scope: !877, file: !877, line: 228, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!979 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !980, line: 1106)
!980 = !DISubprogram(name: "erfl", scope: !877, file: !877, line: 228, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!981 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !982, line: 1108)
!982 = !DISubprogram(name: "erfc", scope: !877, file: !877, line: 229, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!983 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !984, line: 1109)
!984 = !DISubprogram(name: "erfcf", scope: !877, file: !877, line: 229, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!985 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !986, line: 1110)
!986 = !DISubprogram(name: "erfcl", scope: !877, file: !877, line: 229, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!987 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !988, line: 1112)
!988 = !DISubprogram(name: "exp2", scope: !877, file: !877, line: 130, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!989 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !990, line: 1113)
!990 = !DISubprogram(name: "exp2f", scope: !877, file: !877, line: 130, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!991 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !992, line: 1114)
!992 = !DISubprogram(name: "exp2l", scope: !877, file: !877, line: 130, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!993 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !994, line: 1116)
!994 = !DISubprogram(name: "expm1", scope: !877, file: !877, line: 119, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!995 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !996, line: 1117)
!996 = !DISubprogram(name: "expm1f", scope: !877, file: !877, line: 119, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!997 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !998, line: 1118)
!998 = !DISubprogram(name: "expm1l", scope: !877, file: !877, line: 119, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!999 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1000, line: 1120)
!1000 = !DISubprogram(name: "fdim", scope: !877, file: !877, line: 326, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1001 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1002, line: 1121)
!1002 = !DISubprogram(name: "fdimf", scope: !877, file: !877, line: 326, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1003 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1004, line: 1122)
!1004 = !DISubprogram(name: "fdiml", scope: !877, file: !877, line: 326, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1005 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1006, line: 1124)
!1006 = !DISubprogram(name: "fma", scope: !877, file: !877, line: 335, type: !1007, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!108, !108, !108, !108}
!1009 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1010, line: 1125)
!1010 = !DISubprogram(name: "fmaf", scope: !877, file: !877, line: 335, type: !1011, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1011 = !DISubroutineType(types: !1012)
!1012 = !{!262, !262, !262, !262}
!1013 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1014, line: 1126)
!1014 = !DISubprogram(name: "fmal", scope: !877, file: !877, line: 335, type: !1015, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1015 = !DISubroutineType(types: !1016)
!1016 = !{!267, !267, !267, !267}
!1017 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1018, line: 1128)
!1018 = !DISubprogram(name: "fmax", scope: !877, file: !877, line: 329, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1019 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1020, line: 1129)
!1020 = !DISubprogram(name: "fmaxf", scope: !877, file: !877, line: 329, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1021 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1022, line: 1130)
!1022 = !DISubprogram(name: "fmaxl", scope: !877, file: !877, line: 329, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1023 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1024, line: 1132)
!1024 = !DISubprogram(name: "fmin", scope: !877, file: !877, line: 332, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1025 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1026, line: 1133)
!1026 = !DISubprogram(name: "fminf", scope: !877, file: !877, line: 332, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1027 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1028, line: 1134)
!1028 = !DISubprogram(name: "fminl", scope: !877, file: !877, line: 332, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1029 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1030, line: 1136)
!1030 = !DISubprogram(name: "hypot", scope: !877, file: !877, line: 147, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1031 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1032, line: 1137)
!1032 = !DISubprogram(name: "hypotf", scope: !877, file: !877, line: 147, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1033 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1034, line: 1138)
!1034 = !DISubprogram(name: "hypotl", scope: !877, file: !877, line: 147, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1035 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1036, line: 1140)
!1036 = !DISubprogram(name: "ilogb", scope: !877, file: !877, line: 280, type: !1037, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!82, !108}
!1039 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1040, line: 1141)
!1040 = !DISubprogram(name: "ilogbf", scope: !877, file: !877, line: 280, type: !1041, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!82, !262}
!1043 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1044, line: 1142)
!1044 = !DISubprogram(name: "ilogbl", scope: !877, file: !877, line: 280, type: !1045, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!82, !267}
!1047 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1048, line: 1144)
!1048 = !DISubprogram(name: "lgamma", scope: !877, file: !877, line: 230, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1049 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1050, line: 1145)
!1050 = !DISubprogram(name: "lgammaf", scope: !877, file: !877, line: 230, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1051 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1052, line: 1146)
!1052 = !DISubprogram(name: "lgammal", scope: !877, file: !877, line: 230, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1053 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1054, line: 1149)
!1054 = !DISubprogram(name: "llrint", scope: !877, file: !877, line: 316, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1055 = !DISubroutineType(types: !1056)
!1056 = !{!233, !108}
!1057 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1058, line: 1150)
!1058 = !DISubprogram(name: "llrintf", scope: !877, file: !877, line: 316, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{!233, !262}
!1061 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1062, line: 1151)
!1062 = !DISubprogram(name: "llrintl", scope: !877, file: !877, line: 316, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1063 = !DISubroutineType(types: !1064)
!1064 = !{!233, !267}
!1065 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1066, line: 1153)
!1066 = !DISubprogram(name: "llround", scope: !877, file: !877, line: 322, type: !1055, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1067 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1068, line: 1154)
!1068 = !DISubprogram(name: "llroundf", scope: !877, file: !877, line: 322, type: !1059, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1069 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1070, line: 1155)
!1070 = !DISubprogram(name: "llroundl", scope: !877, file: !877, line: 322, type: !1063, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1071 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1072, line: 1158)
!1072 = !DISubprogram(name: "log1p", scope: !877, file: !877, line: 122, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1073 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1074, line: 1159)
!1074 = !DISubprogram(name: "log1pf", scope: !877, file: !877, line: 122, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1075 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1076, line: 1160)
!1076 = !DISubprogram(name: "log1pl", scope: !877, file: !877, line: 122, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1077 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1078, line: 1162)
!1078 = !DISubprogram(name: "log2", scope: !877, file: !877, line: 133, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1079 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1080, line: 1163)
!1080 = !DISubprogram(name: "log2f", scope: !877, file: !877, line: 133, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1081 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1082, line: 1164)
!1082 = !DISubprogram(name: "log2l", scope: !877, file: !877, line: 133, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1083 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1084, line: 1166)
!1084 = !DISubprogram(name: "logb", scope: !877, file: !877, line: 125, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1085 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1086, line: 1167)
!1086 = !DISubprogram(name: "logbf", scope: !877, file: !877, line: 125, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1087 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1088, line: 1168)
!1088 = !DISubprogram(name: "logbl", scope: !877, file: !877, line: 125, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1089 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1090, line: 1170)
!1090 = !DISubprogram(name: "lrint", scope: !877, file: !877, line: 314, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1091 = !DISubroutineType(types: !1092)
!1092 = !{!91, !108}
!1093 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1094, line: 1171)
!1094 = !DISubprogram(name: "lrintf", scope: !877, file: !877, line: 314, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!91, !262}
!1097 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1098, line: 1172)
!1098 = !DISubprogram(name: "lrintl", scope: !877, file: !877, line: 314, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1099 = !DISubroutineType(types: !1100)
!1100 = !{!91, !267}
!1101 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1102, line: 1174)
!1102 = !DISubprogram(name: "lround", scope: !877, file: !877, line: 320, type: !1091, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1104, line: 1175)
!1104 = !DISubprogram(name: "lroundf", scope: !877, file: !877, line: 320, type: !1095, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1105 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1106, line: 1176)
!1106 = !DISubprogram(name: "lroundl", scope: !877, file: !877, line: 320, type: !1099, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1108, line: 1178)
!1108 = !DISubprogram(name: "nan", scope: !877, file: !877, line: 201, type: !106, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1109 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1110, line: 1179)
!1110 = !DISubprogram(name: "nanf", scope: !877, file: !877, line: 201, type: !1111, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!262, !109}
!1113 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1114, line: 1180)
!1114 = !DISubprogram(name: "nanl", scope: !877, file: !877, line: 201, type: !1115, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!267, !109}
!1117 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1118, line: 1182)
!1118 = !DISubprogram(name: "nearbyint", scope: !877, file: !877, line: 294, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1119 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1120, line: 1183)
!1120 = !DISubprogram(name: "nearbyintf", scope: !877, file: !877, line: 294, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1121 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1122, line: 1184)
!1122 = !DISubprogram(name: "nearbyintl", scope: !877, file: !877, line: 294, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1123 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1124, line: 1186)
!1124 = !DISubprogram(name: "nextafter", scope: !877, file: !877, line: 259, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1125 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1126, line: 1187)
!1126 = !DISubprogram(name: "nextafterf", scope: !877, file: !877, line: 259, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1127 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1128, line: 1188)
!1128 = !DISubprogram(name: "nextafterl", scope: !877, file: !877, line: 259, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1129 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1130, line: 1190)
!1130 = !DISubprogram(name: "nexttoward", scope: !877, file: !877, line: 261, type: !1131, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!108, !108, !267}
!1133 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1134, line: 1191)
!1134 = !DISubprogram(name: "nexttowardf", scope: !877, file: !877, line: 261, type: !1135, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{!262, !262, !267}
!1137 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1138, line: 1192)
!1138 = !DISubprogram(name: "nexttowardl", scope: !877, file: !877, line: 261, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1139 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1140, line: 1194)
!1140 = !DISubprogram(name: "remainder", scope: !877, file: !877, line: 272, type: !886, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1141 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1142, line: 1195)
!1142 = !DISubprogram(name: "remainderf", scope: !877, file: !877, line: 272, type: !969, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1143 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1144, line: 1196)
!1144 = !DISubprogram(name: "remainderl", scope: !877, file: !877, line: 272, type: !973, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1145 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1146, line: 1198)
!1146 = !DISubprogram(name: "remquo", scope: !877, file: !877, line: 307, type: !1147, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!108, !108, !108, !906}
!1149 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1150, line: 1199)
!1150 = !DISubprogram(name: "remquof", scope: !877, file: !877, line: 307, type: !1151, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!262, !262, !262, !906}
!1153 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1154, line: 1200)
!1154 = !DISubprogram(name: "remquol", scope: !877, file: !877, line: 307, type: !1155, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!267, !267, !267, !906}
!1157 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1158, line: 1202)
!1158 = !DISubprogram(name: "rint", scope: !877, file: !877, line: 256, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1159 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1160, line: 1203)
!1160 = !DISubprogram(name: "rintf", scope: !877, file: !877, line: 256, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1162, line: 1204)
!1162 = !DISubprogram(name: "rintl", scope: !877, file: !877, line: 256, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1163 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1164, line: 1206)
!1164 = !DISubprogram(name: "round", scope: !877, file: !877, line: 298, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1166, line: 1207)
!1166 = !DISubprogram(name: "roundf", scope: !877, file: !877, line: 298, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1167 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1168, line: 1208)
!1168 = !DISubprogram(name: "roundl", scope: !877, file: !877, line: 298, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1170, line: 1210)
!1170 = !DISubprogram(name: "scalbln", scope: !877, file: !877, line: 290, type: !1171, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1171 = !DISubroutineType(types: !1172)
!1172 = !{!108, !108, !91}
!1173 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1174, line: 1211)
!1174 = !DISubprogram(name: "scalblnf", scope: !877, file: !877, line: 290, type: !1175, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1175 = !DISubroutineType(types: !1176)
!1176 = !{!262, !262, !91}
!1177 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1178, line: 1212)
!1178 = !DISubprogram(name: "scalblnl", scope: !877, file: !877, line: 290, type: !1179, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1179 = !DISubroutineType(types: !1180)
!1180 = !{!267, !267, !91}
!1181 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1182, line: 1214)
!1182 = !DISubprogram(name: "scalbn", scope: !877, file: !877, line: 276, type: !909, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1184, line: 1215)
!1184 = !DISubprogram(name: "scalbnf", scope: !877, file: !877, line: 276, type: !1185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!262, !262, !82}
!1187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1188, line: 1216)
!1188 = !DISubprogram(name: "scalbnl", scope: !877, file: !877, line: 276, type: !1189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1189 = !DISubroutineType(types: !1190)
!1190 = !{!267, !267, !82}
!1191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1192, line: 1218)
!1192 = !DISubprogram(name: "tgamma", scope: !877, file: !877, line: 235, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1194, line: 1219)
!1194 = !DISubprogram(name: "tgammaf", scope: !877, file: !877, line: 235, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1195 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1196, line: 1220)
!1196 = !DISubprogram(name: "tgammal", scope: !877, file: !877, line: 235, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1198, line: 1222)
!1198 = !DISubprogram(name: "trunc", scope: !877, file: !877, line: 302, type: !878, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1199 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1200, line: 1223)
!1200 = !DISubprogram(name: "truncf", scope: !877, file: !877, line: 302, type: !941, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1202, line: 1224)
!1202 = !DISubprogram(name: "truncl", scope: !877, file: !877, line: 302, type: !945, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1203 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 58)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "fenv_t", file: !1205, line: 94, baseType: !1206)
!1205 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1205, line: 75, flags: DIFlagFwdDecl, identifier: "_ZTS6fenv_t")
!1207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 59)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "fexcept_t", file: !1205, line: 68, baseType: !29)
!1209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 62)
!1210 = !DISubprogram(name: "feclearexcept", scope: !1211, file: !1211, line: 71, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1211 = !DIFile(filename: "/usr/include/fenv.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1212 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 63)
!1213 = !DISubprogram(name: "fegetexceptflag", scope: !1211, file: !1211, line: 75, type: !1214, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!82, !1216, !82}
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1208, size: 64)
!1217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 64)
!1218 = !DISubprogram(name: "feraiseexcept", scope: !1211, file: !1211, line: 78, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 65)
!1220 = !DISubprogram(name: "fesetexceptflag", scope: !1211, file: !1211, line: 88, type: !1221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1221 = !DISubroutineType(types: !1222)
!1222 = !{!82, !1223, !82}
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1208)
!1225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 66)
!1226 = !DISubprogram(name: "fetestexcept", scope: !1211, file: !1211, line: 92, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 68)
!1228 = !DISubprogram(name: "fegetround", scope: !1211, file: !1211, line: 104, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1229 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 69)
!1230 = !DISubprogram(name: "fesetround", scope: !1211, file: !1211, line: 107, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 71)
!1232 = !DISubprogram(name: "fegetenv", scope: !1211, file: !1211, line: 114, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1233 = !DISubroutineType(types: !1234)
!1234 = !{!82, !1235}
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 72)
!1237 = !DISubprogram(name: "feholdexcept", scope: !1211, file: !1211, line: 119, type: !1233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 73)
!1239 = !DISubprogram(name: "fesetenv", scope: !1211, file: !1211, line: 123, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!82, !1242}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1244 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 74)
!1245 = !DISubprogram(name: "feupdateenv", scope: !1211, file: !1211, line: 128, type: !1240, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!1246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1204, line: 61)
!1247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1208, line: 62)
!1248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1210, line: 65)
!1249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1213, line: 66)
!1250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1218, line: 67)
!1251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1220, line: 68)
!1252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1226, line: 69)
!1253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1228, line: 71)
!1254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1230, line: 72)
!1255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1232, line: 74)
!1256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1237, line: 75)
!1257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1239, line: 76)
!1258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !75, entity: !1245, line: 77)
!1259 = !{i32 2, !"Dwarf Version", i32 4}
!1260 = !{i32 2, !"Debug Info Version", i32 3}
!1261 = distinct !DISubprogram(name: "__remill_basic_block", scope: !2, file: !2, line: 52, type: !1262, isLocal: false, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{!1264, !1267, !1950, !1264}
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Memory", file: !1266, line: 36, flags: DIFlagFwdDecl, identifier: "_ZTS6Memory")
!1266 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Types.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1267 = !DIDerivedType(tag: DW_TAG_reference_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "State", file: !27, line: 742, size: 27008, align: 128, elements: !1269, identifier: "_ZTS5State")
!1269 = !{!1270, !1282, !1491, !1511, !1541, !1566, !1595, !1632, !1642, !1703, !1728, !1752, !1932}
!1270 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1268, baseType: !1271)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArchState", file: !1272, line: 21, size: 128, elements: !1273, identifier: "_ZTS9ArchState")
!1272 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/State.h", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call", scope: !1271, file: !1272, line: 23, baseType: !4, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1271, file: !1272, line: 25, baseType: !8, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, scope: !1271, file: !1272, line: 31, baseType: !1277, size: 64, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !1272, line: 31, size: 64, elements: !1278, identifier: "_ZTSN9ArchStateUt_E")
!1278 = !{!1279, !1280, !1281}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_load", scope: !1277, file: !1272, line: 32, baseType: !637, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "addr_to_store", scope: !1277, file: !1272, line: 33, baseType: !637, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "hyper_call_vector", scope: !1277, file: !1272, line: 34, baseType: !8, size: 32)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1268, file: !27, line: 747, baseType: !1283, size: 16384, offset: 128)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1284, size: 16384, elements: !1369)
!1284 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "VectorReg", file: !27, line: 636, size: 512, align: 128, elements: !1285, identifier: "_ZTS9VectorReg")
!1285 = !{!1286, !1361, !1426}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1284, file: !27, line: 637, baseType: !1287, size: 128, align: 128)
!1287 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec128_t", file: !1266, line: 317, size: 128, elements: !1288, identifier: "_ZTS8vec128_t")
!1288 = !{!1289, !1298, !1305, !1312, !1317, !1324, !1329, !1334, !1339, !1344, !1349, !1354}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1287, file: !1266, line: 321, baseType: !1290, size: 128)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v1_t", file: !1266, line: 205, size: 128, elements: !1291, identifier: "_ZTS11uint128v1_t")
!1291 = !{!1292}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1290, file: !1266, line: 205, baseType: !1293, size: 128)
!1293 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 128, elements: !1296)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint128_t", file: !1266, line: 46, baseType: !1295)
!1295 = !DIBasicType(name: "unsigned __int128", size: 128, encoding: DW_ATE_unsigned)
!1296 = !{!1297}
!1297 = !DISubrange(count: 1)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1287, file: !1266, line: 323, baseType: !1299, size: 128)
!1299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v16_t", file: !1266, line: 182, size: 128, elements: !1300, identifier: "_ZTS10uint8v16_t")
!1300 = !{!1301}
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1299, file: !1266, line: 182, baseType: !1302, size: 128)
!1302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 128, elements: !1303)
!1303 = !{!1304}
!1304 = !DISubrange(count: 16)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1287, file: !1266, line: 324, baseType: !1306, size: 128)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v8_t", file: !1266, line: 189, size: 128, elements: !1307, identifier: "_ZTS10uint16v8_t")
!1307 = !{!1308}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1306, file: !1266, line: 189, baseType: !1309, size: 128)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 128, elements: !1310)
!1310 = !{!1311}
!1311 = !DISubrange(count: 8)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1287, file: !1266, line: 325, baseType: !1313, size: 128)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v4_t", file: !1266, line: 195, size: 128, elements: !1314, identifier: "_ZTS10uint32v4_t")
!1314 = !{!1315}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1313, file: !1266, line: 195, baseType: !1316, size: 128)
!1316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 128, elements: !353)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1287, file: !1266, line: 326, baseType: !1318, size: 128)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v2_t", file: !1266, line: 200, size: 128, elements: !1319, identifier: "_ZTS10uint64v2_t")
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1318, file: !1266, line: 200, baseType: !1321, size: 128)
!1321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 128, elements: !1322)
!1322 = !{!1323}
!1323 = !DISubrange(count: 2)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1287, file: !1266, line: 327, baseType: !1325, size: 128)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v4_t", file: !1266, line: 242, size: 128, elements: !1326, identifier: "_ZTS11float32v4_t")
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1325, file: !1266, line: 242, baseType: !1328, size: 128)
!1328 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 128, elements: !353)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1287, file: !1266, line: 328, baseType: !1330, size: 128)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v2_t", file: !1266, line: 247, size: 128, elements: !1331, identifier: "_ZTS11float64v2_t")
!1331 = !{!1332}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1330, file: !1266, line: 247, baseType: !1333, size: 128)
!1333 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 128, elements: !1322)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1287, file: !1266, line: 330, baseType: !1335, size: 128)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v16_t", file: !1266, line: 213, size: 128, elements: !1336, identifier: "_ZTS9int8v16_t")
!1336 = !{!1337}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1335, file: !1266, line: 213, baseType: !1338, size: 128)
!1338 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 128, elements: !1303)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1287, file: !1266, line: 331, baseType: !1340, size: 128)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v8_t", file: !1266, line: 220, size: 128, elements: !1341, identifier: "_ZTS9int16v8_t")
!1341 = !{!1342}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1340, file: !1266, line: 220, baseType: !1343, size: 128)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 128, elements: !1310)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1287, file: !1266, line: 332, baseType: !1345, size: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v4_t", file: !1266, line: 226, size: 128, elements: !1346, identifier: "_ZTS9int32v4_t")
!1346 = !{!1347}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1345, file: !1266, line: 226, baseType: !1348, size: 128)
!1348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !353)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1287, file: !1266, line: 333, baseType: !1350, size: 128)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v2_t", file: !1266, line: 231, size: 128, elements: !1351, identifier: "_ZTS9int64v2_t")
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1350, file: !1266, line: 231, baseType: !1353, size: 128)
!1353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 128, elements: !1322)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1287, file: !1266, line: 334, baseType: !1355, size: 128)
!1355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v1_t", file: !1266, line: 236, size: 128, elements: !1356, identifier: "_ZTS10int128v1_t")
!1356 = !{!1357}
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1355, file: !1266, line: 236, baseType: !1358, size: 128)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 128, elements: !1296)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "int128_t", file: !1266, line: 47, baseType: !1360)
!1360 = !DIBasicType(name: "__int128", size: 128, encoding: DW_ATE_signed)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1284, file: !27, line: 638, baseType: !1362, size: 256, align: 128)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec256_t", file: !1266, line: 340, size: 256, elements: !1363, identifier: "_ZTS8vec256_t")
!1363 = !{!1364, !1371, !1376, !1381, !1386, !1391, !1396, !1401, !1406, !1411, !1416, !1421}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1362, file: !1266, line: 341, baseType: !1365, size: 256)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v32_t", file: !1266, line: 183, size: 256, elements: !1366, identifier: "_ZTS10uint8v32_t")
!1366 = !{!1367}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1365, file: !1266, line: 183, baseType: !1368, size: 256)
!1368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 256, elements: !1369)
!1369 = !{!1370}
!1370 = !DISubrange(count: 32)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1362, file: !1266, line: 342, baseType: !1372, size: 256)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v16_t", file: !1266, line: 190, size: 256, elements: !1373, identifier: "_ZTS11uint16v16_t")
!1373 = !{!1374}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1372, file: !1266, line: 190, baseType: !1375, size: 256)
!1375 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 256, elements: !1303)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1362, file: !1266, line: 343, baseType: !1377, size: 256)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v8_t", file: !1266, line: 196, size: 256, elements: !1378, identifier: "_ZTS10uint32v8_t")
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1377, file: !1266, line: 196, baseType: !1380, size: 256)
!1380 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 256, elements: !1310)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1362, file: !1266, line: 344, baseType: !1382, size: 256)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v4_t", file: !1266, line: 201, size: 256, elements: !1383, identifier: "_ZTS10uint64v4_t")
!1383 = !{!1384}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1382, file: !1266, line: 201, baseType: !1385, size: 256)
!1385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 256, elements: !353)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1362, file: !1266, line: 345, baseType: !1387, size: 256)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v2_t", file: !1266, line: 206, size: 256, elements: !1388, identifier: "_ZTS11uint128v2_t")
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1387, file: !1266, line: 206, baseType: !1390, size: 256)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 256, elements: !1322)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1362, file: !1266, line: 346, baseType: !1392, size: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v8_t", file: !1266, line: 243, size: 256, elements: !1393, identifier: "_ZTS11float32v8_t")
!1393 = !{!1394}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1392, file: !1266, line: 243, baseType: !1395, size: 256)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 256, elements: !1310)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1362, file: !1266, line: 347, baseType: !1397, size: 256)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v4_t", file: !1266, line: 248, size: 256, elements: !1398, identifier: "_ZTS11float64v4_t")
!1398 = !{!1399}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1397, file: !1266, line: 248, baseType: !1400, size: 256)
!1400 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 256, elements: !353)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1362, file: !1266, line: 349, baseType: !1402, size: 256)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v32_t", file: !1266, line: 214, size: 256, elements: !1403, identifier: "_ZTS9int8v32_t")
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1402, file: !1266, line: 214, baseType: !1405, size: 256)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 256, elements: !1369)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1362, file: !1266, line: 350, baseType: !1407, size: 256)
!1407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v16_t", file: !1266, line: 221, size: 256, elements: !1408, identifier: "_ZTS10int16v16_t")
!1408 = !{!1409}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1407, file: !1266, line: 221, baseType: !1410, size: 256)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 256, elements: !1303)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1362, file: !1266, line: 351, baseType: !1412, size: 256)
!1412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v8_t", file: !1266, line: 227, size: 256, elements: !1413, identifier: "_ZTS9int32v8_t")
!1413 = !{!1414}
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1412, file: !1266, line: 227, baseType: !1415, size: 256)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 256, elements: !1310)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1362, file: !1266, line: 352, baseType: !1417, size: 256)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v4_t", file: !1266, line: 232, size: 256, elements: !1418, identifier: "_ZTS9int64v4_t")
!1418 = !{!1419}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1417, file: !1266, line: 232, baseType: !1420, size: 256)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 256, elements: !353)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1362, file: !1266, line: 353, baseType: !1422, size: 256)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v2_t", file: !1266, line: 237, size: 256, elements: !1423, identifier: "_ZTS10int128v2_t")
!1423 = !{!1424}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1422, file: !1266, line: 237, baseType: !1425, size: 256)
!1425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 256, elements: !1322)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "zmm", scope: !1284, file: !27, line: 639, baseType: !1427, size: 512, align: 128)
!1427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec512_t", file: !1266, line: 359, size: 512, elements: !1428, identifier: "_ZTS8vec512_t")
!1428 = !{!1429, !1436, !1441, !1446, !1451, !1456, !1461, !1466, !1471, !1476, !1481, !1486}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1427, file: !1266, line: 360, baseType: !1430, size: 512)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v64_t", file: !1266, line: 184, size: 512, elements: !1431, identifier: "_ZTS10uint8v64_t")
!1431 = !{!1432}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1430, file: !1266, line: 184, baseType: !1433, size: 512)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 512, elements: !1434)
!1434 = !{!1435}
!1435 = !DISubrange(count: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1427, file: !1266, line: 361, baseType: !1437, size: 512)
!1437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v32_t", file: !1266, line: 191, size: 512, elements: !1438, identifier: "_ZTS11uint16v32_t")
!1438 = !{!1439}
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1437, file: !1266, line: 191, baseType: !1440, size: 512)
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 512, elements: !1369)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1427, file: !1266, line: 362, baseType: !1442, size: 512)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v16_t", file: !1266, line: 197, size: 512, elements: !1443, identifier: "_ZTS11uint32v16_t")
!1443 = !{!1444}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1442, file: !1266, line: 197, baseType: !1445, size: 512)
!1445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 512, elements: !1303)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1427, file: !1266, line: 363, baseType: !1447, size: 512)
!1447 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v8_t", file: !1266, line: 202, size: 512, elements: !1448, identifier: "_ZTS10uint64v8_t")
!1448 = !{!1449}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1447, file: !1266, line: 202, baseType: !1450, size: 512)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 512, elements: !1310)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "dqwords", scope: !1427, file: !1266, line: 364, baseType: !1452, size: 512)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint128v4_t", file: !1266, line: 207, size: 512, elements: !1453, identifier: "_ZTS11uint128v4_t")
!1453 = !{!1454}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1452, file: !1266, line: 207, baseType: !1455, size: 512)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1294, size: 512, elements: !353)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1427, file: !1266, line: 365, baseType: !1457, size: 512)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v16_t", file: !1266, line: 244, size: 512, elements: !1458, identifier: "_ZTS12float32v16_t")
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1457, file: !1266, line: 244, baseType: !1460, size: 512)
!1460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 512, elements: !1303)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1427, file: !1266, line: 366, baseType: !1462, size: 512)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v8_t", file: !1266, line: 249, size: 512, elements: !1463, identifier: "_ZTS11float64v8_t")
!1463 = !{!1464}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1462, file: !1266, line: 249, baseType: !1465, size: 512)
!1465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 512, elements: !1310)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1427, file: !1266, line: 368, baseType: !1467, size: 512)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v64_t", file: !1266, line: 215, size: 512, elements: !1468, identifier: "_ZTS9int8v64_t")
!1468 = !{!1469}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1467, file: !1266, line: 215, baseType: !1470, size: 512)
!1470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 512, elements: !1434)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1427, file: !1266, line: 369, baseType: !1472, size: 512)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v32_t", file: !1266, line: 222, size: 512, elements: !1473, identifier: "_ZTS10int16v32_t")
!1473 = !{!1474}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1472, file: !1266, line: 222, baseType: !1475, size: 512)
!1475 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 512, elements: !1369)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1427, file: !1266, line: 370, baseType: !1477, size: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v16_t", file: !1266, line: 228, size: 512, elements: !1478, identifier: "_ZTS10int32v16_t")
!1478 = !{!1479}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1477, file: !1266, line: 228, baseType: !1480, size: 512)
!1480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 512, elements: !1303)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1427, file: !1266, line: 371, baseType: !1482, size: 512)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v8_t", file: !1266, line: 233, size: 512, elements: !1483, identifier: "_ZTS9int64v8_t")
!1483 = !{!1484}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1482, file: !1266, line: 233, baseType: !1485, size: 512)
!1485 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 512, elements: !1310)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sdqwords", scope: !1427, file: !1266, line: 372, baseType: !1487, size: 512)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int128v4_t", file: !1266, line: 238, size: 512, elements: !1488, identifier: "_ZTS10int128v4_t")
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1487, file: !1266, line: 238, baseType: !1490, size: 512)
!1490 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1359, size: 512, elements: !353)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "aflag", scope: !1268, file: !27, line: 751, baseType: !1492, size: 128, align: 64, offset: 16512)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ArithFlags", file: !27, line: 402, size: 128, align: 64, elements: !1493, identifier: "_ZTS10ArithFlags")
!1493 = !{!1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1492, file: !27, line: 404, baseType: !1495, size: 8)
!1495 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !62)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1492, file: !27, line: 405, baseType: !62, size: 8, offset: 8)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1492, file: !27, line: 406, baseType: !1495, size: 8, offset: 16)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1492, file: !27, line: 407, baseType: !62, size: 8, offset: 24)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1492, file: !27, line: 408, baseType: !1495, size: 8, offset: 32)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1492, file: !27, line: 409, baseType: !62, size: 8, offset: 40)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1492, file: !27, line: 410, baseType: !1495, size: 8, offset: 48)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1492, file: !27, line: 411, baseType: !62, size: 8, offset: 56)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1492, file: !27, line: 412, baseType: !1495, size: 8, offset: 64)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1492, file: !27, line: 413, baseType: !62, size: 8, offset: 72)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1492, file: !27, line: 414, baseType: !1495, size: 8, offset: 80)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1492, file: !27, line: 415, baseType: !62, size: 8, offset: 88)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1492, file: !27, line: 416, baseType: !1495, size: 8, offset: 96)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1492, file: !27, line: 417, baseType: !62, size: 8, offset: 104)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1492, file: !27, line: 418, baseType: !1495, size: 8, offset: 112)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1492, file: !27, line: 419, baseType: !1495, size: 8, offset: 120)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rflag", scope: !1268, file: !27, line: 752, baseType: !1512, size: 64, align: 64, offset: 16640)
!1512 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "Flags", file: !27, line: 366, size: 64, align: 64, elements: !1513, identifier: "_ZTS5Flags")
!1513 = !{!1514, !1515}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1512, file: !27, line: 367, baseType: !637, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_member, scope: !1512, file: !27, line: 368, baseType: !1516, size: 64)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1512, file: !27, line: 368, size: 64, elements: !1517, identifier: "_ZTSN5FlagsUt_E")
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "cf", scope: !1516, file: !27, line: 369, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_1", scope: !1516, file: !27, line: 370, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "pf", scope: !1516, file: !27, line: 371, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0a", scope: !1516, file: !27, line: 372, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "af", scope: !1516, file: !27, line: 374, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0b", scope: !1516, file: !27, line: 375, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "zf", scope: !1516, file: !27, line: 376, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1516, file: !27, line: 377, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !1516, file: !27, line: 379, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "_if", scope: !1516, file: !27, line: 380, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "df", scope: !1516, file: !27, line: 381, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "of", scope: !1516, file: !27, line: 382, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "iopl", scope: !1516, file: !27, line: 384, baseType: !8, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "nt", scope: !1516, file: !27, line: 385, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "must_be_0c", scope: !1516, file: !27, line: 386, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "rf", scope: !1516, file: !27, line: 388, baseType: !8, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vm", scope: !1516, file: !27, line: 389, baseType: !8, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "ac", scope: !1516, file: !27, line: 390, baseType: !8, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "vif", scope: !1516, file: !27, line: 391, baseType: !8, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "vip", scope: !1516, file: !27, line: 393, baseType: !8, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1516, file: !27, line: 394, baseType: !8, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_eflags", scope: !1516, file: !27, line: 395, baseType: !8, size: 10, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_rflags", scope: !1516, file: !27, line: 396, baseType: !8, size: 32, offset: 32)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "seg", scope: !1268, file: !27, line: 753, baseType: !1542, size: 192, align: 64, offset: 16704)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Segments", file: !27, line: 451, size: 192, align: 64, elements: !1543, identifier: "_ZTS8Segments")
!1543 = !{!1544, !1546, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1542, file: !27, line: 452, baseType: !1545, size: 16)
!1545 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !28)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1542, file: !27, line: 453, baseType: !1547, size: 16, offset: 16)
!1547 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "SegmentSelector", file: !27, line: 76, size: 16, elements: !1548, identifier: "_ZTS15SegmentSelector")
!1548 = !{!1549, !1550}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1547, file: !27, line: 77, baseType: !28, size: 16)
!1550 = !DIDerivedType(tag: DW_TAG_member, scope: !1547, file: !27, line: 78, baseType: !1551, size: 16)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1547, file: !27, line: 78, size: 16, elements: !1552, identifier: "_ZTSN15SegmentSelectorUt_E")
!1552 = !{!1553, !1554, !1555}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "rpi", scope: !1551, file: !27, line: 79, baseType: !26, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !1551, file: !27, line: 80, baseType: !35, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1551, file: !27, line: 81, baseType: !28, size: 13, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1542, file: !27, line: 454, baseType: !1545, size: 16, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1542, file: !27, line: 455, baseType: !1547, size: 16, offset: 48)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1542, file: !27, line: 456, baseType: !1545, size: 16, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1542, file: !27, line: 457, baseType: !1547, size: 16, offset: 80)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1542, file: !27, line: 458, baseType: !1545, size: 16, offset: 96)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1542, file: !27, line: 459, baseType: !1547, size: 16, offset: 112)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1542, file: !27, line: 460, baseType: !1545, size: 16, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1542, file: !27, line: 461, baseType: !1547, size: 16, offset: 144)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1542, file: !27, line: 462, baseType: !1545, size: 16, offset: 160)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1542, file: !27, line: 463, baseType: !1547, size: 16, offset: 176)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1268, file: !27, line: 754, baseType: !1567, size: 768, align: 64, offset: 16896)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AddressSpace", file: !27, line: 654, size: 768, align: 64, elements: !1568, identifier: "_ZTS12AddressSpace")
!1568 = !{!1569, !1571, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1567, file: !27, line: 655, baseType: !1570, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !637)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "ss_base", scope: !1567, file: !27, line: 656, baseType: !1572, size: 64, offset: 64)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Reg", file: !27, line: 610, size: 64, elements: !1573, identifier: "_ZTS3Reg")
!1573 = !{!1574}
!1574 = !DIDerivedType(tag: DW_TAG_member, scope: !1572, file: !27, line: 611, baseType: !1575, size: 64)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1572, file: !27, line: 611, size: 64, elements: !1576, identifier: "_ZTSN3RegUt_E")
!1576 = !{!1577, !1582, !1583, !1584}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !1575, file: !27, line: 615, baseType: !1578, size: 16, align: 8)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1575, file: !27, line: 612, size: 16, elements: !1579, identifier: "_ZTSN3RegUt_Ut_E")
!1579 = !{!1580, !1581}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1578, file: !27, line: 613, baseType: !62, size: 8)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1578, file: !27, line: 614, baseType: !62, size: 8, offset: 8)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !1575, file: !27, line: 616, baseType: !28, size: 16, align: 16)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1575, file: !27, line: 617, baseType: !8, size: 32, align: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1575, file: !27, line: 618, baseType: !637, size: 64, align: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1567, file: !27, line: 657, baseType: !1570, size: 64, offset: 128)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "es_base", scope: !1567, file: !27, line: 658, baseType: !1572, size: 64, offset: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1567, file: !27, line: 659, baseType: !1570, size: 64, offset: 256)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "gs_base", scope: !1567, file: !27, line: 660, baseType: !1572, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1567, file: !27, line: 661, baseType: !1570, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "fs_base", scope: !1567, file: !27, line: 662, baseType: !1572, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1567, file: !27, line: 663, baseType: !1570, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "ds_base", scope: !1567, file: !27, line: 664, baseType: !1572, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1567, file: !27, line: 665, baseType: !1570, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cs_base", scope: !1567, file: !27, line: 666, baseType: !1572, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "gpr", scope: !1268, file: !27, line: 755, baseType: !1596, size: 2176, align: 64, offset: 17664)
!1596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GPR", file: !27, line: 677, size: 2176, align: 64, elements: !1597, identifier: "_ZTS3GPR")
!1597 = !{!1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1596, file: !27, line: 679, baseType: !1570, size: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "rax", scope: !1596, file: !27, line: 680, baseType: !1572, size: 64, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1596, file: !27, line: 681, baseType: !1570, size: 64, offset: 128)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "rbx", scope: !1596, file: !27, line: 682, baseType: !1572, size: 64, offset: 192)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1596, file: !27, line: 683, baseType: !1570, size: 64, offset: 256)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "rcx", scope: !1596, file: !27, line: 684, baseType: !1572, size: 64, offset: 320)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1596, file: !27, line: 685, baseType: !1570, size: 64, offset: 384)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "rdx", scope: !1596, file: !27, line: 686, baseType: !1572, size: 64, offset: 448)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1596, file: !27, line: 687, baseType: !1570, size: 64, offset: 512)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "rsi", scope: !1596, file: !27, line: 688, baseType: !1572, size: 64, offset: 576)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1596, file: !27, line: 689, baseType: !1570, size: 64, offset: 640)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "rdi", scope: !1596, file: !27, line: 690, baseType: !1572, size: 64, offset: 704)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1596, file: !27, line: 691, baseType: !1570, size: 64, offset: 768)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "rsp", scope: !1596, file: !27, line: 692, baseType: !1572, size: 64, offset: 832)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1596, file: !27, line: 693, baseType: !1570, size: 64, offset: 896)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "rbp", scope: !1596, file: !27, line: 694, baseType: !1572, size: 64, offset: 960)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1596, file: !27, line: 695, baseType: !1570, size: 64, offset: 1024)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !1596, file: !27, line: 696, baseType: !1572, size: 64, offset: 1088)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1596, file: !27, line: 697, baseType: !1570, size: 64, offset: 1152)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !1596, file: !27, line: 698, baseType: !1572, size: 64, offset: 1216)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "_10", scope: !1596, file: !27, line: 699, baseType: !1570, size: 64, offset: 1280)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !1596, file: !27, line: 700, baseType: !1572, size: 64, offset: 1344)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "_11", scope: !1596, file: !27, line: 701, baseType: !1570, size: 64, offset: 1408)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !1596, file: !27, line: 702, baseType: !1572, size: 64, offset: 1472)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "_12", scope: !1596, file: !27, line: 703, baseType: !1570, size: 64, offset: 1536)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !1596, file: !27, line: 704, baseType: !1572, size: 64, offset: 1600)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "_13", scope: !1596, file: !27, line: 705, baseType: !1570, size: 64, offset: 1664)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !1596, file: !27, line: 706, baseType: !1572, size: 64, offset: 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "_14", scope: !1596, file: !27, line: 707, baseType: !1570, size: 64, offset: 1792)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !1596, file: !27, line: 708, baseType: !1572, size: 64, offset: 1856)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "_15", scope: !1596, file: !27, line: 709, baseType: !1570, size: 64, offset: 1920)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !1596, file: !27, line: 710, baseType: !1572, size: 64, offset: 1984)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "_16", scope: !1596, file: !27, line: 711, baseType: !1570, size: 64, offset: 2048)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1596, file: !27, line: 714, baseType: !1572, size: 64, offset: 2112)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1268, file: !27, line: 756, baseType: !1633, size: 1024, align: 64, offset: 19840)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "X87Stack", file: !27, line: 719, size: 1024, align: 64, elements: !1634, identifier: "_ZTS8X87Stack")
!1634 = !{!1635}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1633, file: !27, line: 723, baseType: !1636, size: 1024)
!1636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1637, size: 1024, elements: !1310)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1633, file: !27, line: 720, size: 128, align: 64, elements: !1638, identifier: "_ZTSN8X87StackUt_E")
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1637, file: !27, line: 721, baseType: !637, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1637, file: !27, line: 722, baseType: !1641, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "float64_t", file: !1266, line: 61, baseType: !108)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1268, file: !27, line: 757, baseType: !1643, size: 1024, align: 64, offset: 20864)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "MMX", file: !27, line: 729, size: 1024, align: 64, elements: !1644, identifier: "_ZTS3MMX")
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1643, file: !27, line: 733, baseType: !1646, size: 1024)
!1646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1647, size: 1024, elements: !1310)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1643, file: !27, line: 730, size: 128, align: 64, elements: !1648, identifier: "_ZTSN3MMXUt_E")
!1648 = !{!1649, !1650}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1647, file: !27, line: 731, baseType: !637, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1647, file: !27, line: 732, baseType: !1651, size: 64, offset: 64)
!1651 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "vec64_t", file: !1266, line: 294, size: 64, elements: !1652, identifier: "_ZTS7vec64_t")
!1652 = !{!1653, !1658, !1663, !1668, !1673, !1678, !1683, !1688, !1693, !1698}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "qwords", scope: !1651, file: !1266, line: 298, baseType: !1654, size: 64)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint64v1_t", file: !1266, line: 199, size: 64, elements: !1655, identifier: "_ZTS10uint64v1_t")
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1654, file: !1266, line: 199, baseType: !1657, size: 64)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !637, size: 64, elements: !1296)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !1651, file: !1266, line: 300, baseType: !1659, size: 64)
!1659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint8v8_t", file: !1266, line: 181, size: 64, elements: !1660, identifier: "_ZTS9uint8v8_t")
!1660 = !{!1661}
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1659, file: !1266, line: 181, baseType: !1662, size: 64)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 64, elements: !1310)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !1651, file: !1266, line: 301, baseType: !1664, size: 64)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint16v4_t", file: !1266, line: 188, size: 64, elements: !1665, identifier: "_ZTS10uint16v4_t")
!1665 = !{!1666}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1664, file: !1266, line: 188, baseType: !1667, size: 64)
!1667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !353)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "dwords", scope: !1651, file: !1266, line: 302, baseType: !1669, size: 64)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uint32v2_t", file: !1266, line: 194, size: 64, elements: !1670, identifier: "_ZTS10uint32v2_t")
!1670 = !{!1671}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1669, file: !1266, line: 194, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 64, elements: !1322)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "floats", scope: !1651, file: !1266, line: 303, baseType: !1674, size: 64)
!1674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float32v2_t", file: !1266, line: 241, size: 64, elements: !1675, identifier: "_ZTS11float32v2_t")
!1675 = !{!1676}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1674, file: !1266, line: 241, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1322)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "doubles", scope: !1651, file: !1266, line: 304, baseType: !1679, size: 64)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float64v1_t", file: !1266, line: 246, size: 64, elements: !1680, identifier: "_ZTS11float64v1_t")
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1679, file: !1266, line: 246, baseType: !1682, size: 64)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !108, size: 64, elements: !1296)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "sbytes", scope: !1651, file: !1266, line: 306, baseType: !1684, size: 64)
!1684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int8v8_t", file: !1266, line: 212, size: 64, elements: !1685, identifier: "_ZTS8int8v8_t")
!1685 = !{!1686}
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1684, file: !1266, line: 212, baseType: !1687, size: 64)
!1687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !1310)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "swords", scope: !1651, file: !1266, line: 307, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int16v4_t", file: !1266, line: 219, size: 64, elements: !1690, identifier: "_ZTS9int16v4_t")
!1690 = !{!1691}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1689, file: !1266, line: 219, baseType: !1692, size: 64)
!1692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !607, size: 64, elements: !353)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "sdwords", scope: !1651, file: !1266, line: 308, baseType: !1694, size: 64)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int32v2_t", file: !1266, line: 225, size: 64, elements: !1695, identifier: "_ZTS9int32v2_t")
!1695 = !{!1696}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1694, file: !1266, line: 225, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 64, elements: !1322)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "sqwords", scope: !1651, file: !1266, line: 309, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int64v1_t", file: !1266, line: 230, size: 64, elements: !1700, identifier: "_ZTS9int64v1_t")
!1700 = !{!1701}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !1699, file: !1266, line: 230, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !1296)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "sw", scope: !1268, file: !27, line: 758, baseType: !1704, size: 192, offset: 21888)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStatusFlags", file: !27, line: 332, size: 192, elements: !1705, identifier: "_ZTS14FPUStatusFlags")
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_0", scope: !1704, file: !27, line: 333, baseType: !62, size: 8)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1704, file: !27, line: 334, baseType: !62, size: 8, offset: 8)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_1", scope: !1704, file: !27, line: 335, baseType: !62, size: 8, offset: 16)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1704, file: !27, line: 336, baseType: !62, size: 8, offset: 24)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "_2", scope: !1704, file: !27, line: 337, baseType: !62, size: 8, offset: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1704, file: !27, line: 338, baseType: !62, size: 8, offset: 40)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "_3", scope: !1704, file: !27, line: 339, baseType: !62, size: 8, offset: 48)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1704, file: !27, line: 340, baseType: !62, size: 8, offset: 56)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_4", scope: !1704, file: !27, line: 342, baseType: !62, size: 8, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1704, file: !27, line: 343, baseType: !62, size: 8, offset: 72)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "_5", scope: !1704, file: !27, line: 345, baseType: !62, size: 8, offset: 80)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1704, file: !27, line: 346, baseType: !62, size: 8, offset: 88)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_6", scope: !1704, file: !27, line: 348, baseType: !62, size: 8, offset: 96)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1704, file: !27, line: 349, baseType: !62, size: 8, offset: 104)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_7", scope: !1704, file: !27, line: 351, baseType: !62, size: 8, offset: 112)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1704, file: !27, line: 352, baseType: !62, size: 8, offset: 120)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_8", scope: !1704, file: !27, line: 354, baseType: !62, size: 8, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1704, file: !27, line: 355, baseType: !62, size: 8, offset: 136)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "_9", scope: !1704, file: !27, line: 357, baseType: !62, size: 8, offset: 144)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1704, file: !27, line: 358, baseType: !62, size: 8, offset: 152)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "_padding", scope: !1704, file: !27, line: 360, baseType: !1727, size: 32, offset: 160)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 32, elements: !353)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "xcr0", scope: !1268, file: !27, line: 759, baseType: !1729, size: 64, offset: 22080)
!1729 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "XCR0", file: !27, line: 424, size: 64, elements: !1730, identifier: "_ZTS4XCR0")
!1730 = !{!1731, !1732, !1737}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1729, file: !27, line: 425, baseType: !637, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 427, baseType: !1733, size: 64)
!1733 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 427, size: 64, elements: !1734, identifier: "_ZTSN4XCR0Ut_E")
!1734 = !{!1735, !1736}
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "eax", scope: !1733, file: !27, line: 428, baseType: !8, size: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "edx", scope: !1733, file: !27, line: 429, baseType: !8, size: 32, offset: 32)
!1737 = !DIDerivedType(tag: DW_TAG_member, scope: !1729, file: !27, line: 433, baseType: !1738, size: 64)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1729, file: !27, line: 433, size: 64, elements: !1739, identifier: "_ZTSN4XCR0Ut0_E")
!1739 = !{!1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "x87_fpu_mmx", scope: !1738, file: !27, line: 434, baseType: !637, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1738, file: !27, line: 435, baseType: !637, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ymm", scope: !1738, file: !27, line: 436, baseType: !637, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "bndreg", scope: !1738, file: !27, line: 437, baseType: !637, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "bndcsr", scope: !1738, file: !27, line: 438, baseType: !637, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "opmask", scope: !1738, file: !27, line: 439, baseType: !637, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "zmm_hi256", scope: !1738, file: !27, line: 440, baseType: !637, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "hi16_zmm", scope: !1738, file: !27, line: 441, baseType: !637, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "pkru", scope: !1738, file: !27, line: 442, baseType: !637, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved0", scope: !1738, file: !27, line: 443, baseType: !637, size: 53, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "lwp", scope: !1738, file: !27, line: 444, baseType: !637, size: 1, offset: 62, flags: DIFlagBitField, extraData: i64 0)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_reserved1", scope: !1738, file: !27, line: 445, baseType: !637, size: 1, offset: 63, flags: DIFlagBitField, extraData: i64 0)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "x87", scope: !1268, file: !27, line: 760, baseType: !1753, size: 4096, align: 128, offset: 22144)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPU", file: !27, line: 314, size: 4096, align: 128, elements: !1754, identifier: "_ZTS3FPU")
!1754 = !{!1755, !1851, !1914}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1753, file: !27, line: 317, baseType: !1756, size: 4096)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 315, size: 4096, elements: !1757, identifier: "_ZTSN3FPUUt_E")
!1757 = !{!1758, !1847}
!1758 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1756, baseType: !1759)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFSAVE", file: !27, line: 263, size: 1248, elements: !1760, identifier: "_ZTS8FpuFSAVE")
!1760 = !{!1761, !1779, !1780, !1801, !1802, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1759, file: !27, line: 264, baseType: !1762, size: 16)
!1762 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlWord", file: !27, line: 142, size: 16, elements: !1763, identifier: "_ZTS14FPUControlWord")
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1762, file: !27, line: 143, baseType: !28, size: 16)
!1765 = !DIDerivedType(tag: DW_TAG_member, scope: !1762, file: !27, line: 144, baseType: !1766, size: 16)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1762, file: !27, line: 144, size: 16, elements: !1767, identifier: "_ZTSN14FPUControlWordUt_E")
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1766, file: !27, line: 145, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1766, file: !27, line: 146, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1766, file: !27, line: 147, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1766, file: !27, line: 148, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1766, file: !27, line: 149, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1766, file: !27, line: 150, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1766, file: !27, line: 151, baseType: !28, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "pc", scope: !1766, file: !27, line: 152, baseType: !39, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !1766, file: !27, line: 153, baseType: !45, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1766, file: !27, line: 154, baseType: !51, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1766, file: !27, line: 155, baseType: !28, size: 3, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1759, file: !27, line: 265, baseType: !28, size: 16, offset: 16)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1759, file: !27, line: 266, baseType: !1781, size: 16, offset: 32)
!1781 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUStatusWord", file: !27, line: 100, size: 16, elements: !1782, identifier: "_ZTS13FPUStatusWord")
!1782 = !{!1783, !1784}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1781, file: !27, line: 101, baseType: !28, size: 16)
!1784 = !DIDerivedType(tag: DW_TAG_member, scope: !1781, file: !27, line: 102, baseType: !1785, size: 16)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1781, file: !27, line: 102, size: 16, elements: !1786, identifier: "_ZTSN13FPUStatusWordUt_E")
!1786 = !{!1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1785, file: !27, line: 103, baseType: !28, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1785, file: !27, line: 104, baseType: !28, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1785, file: !27, line: 105, baseType: !28, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1785, file: !27, line: 106, baseType: !28, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1785, file: !27, line: 107, baseType: !28, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1785, file: !27, line: 108, baseType: !28, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "sf", scope: !1785, file: !27, line: 109, baseType: !28, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1785, file: !27, line: 110, baseType: !28, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "c0", scope: !1785, file: !27, line: 111, baseType: !28, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "c1", scope: !1785, file: !27, line: 112, baseType: !28, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "c2", scope: !1785, file: !27, line: 113, baseType: !28, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !1785, file: !27, line: 114, baseType: !28, size: 3, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "c3", scope: !1785, file: !27, line: 115, baseType: !28, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !1785, file: !27, line: 116, baseType: !28, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1759, file: !27, line: 267, baseType: !28, size: 16, offset: 48)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1759, file: !27, line: 268, baseType: !1803, size: 16, offset: 64)
!1803 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUTagWord", file: !27, line: 227, size: 16, elements: !1804, identifier: "_ZTS10FPUTagWord")
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1803, file: !27, line: 228, baseType: !28, size: 16)
!1806 = !DIDerivedType(tag: DW_TAG_member, scope: !1803, file: !27, line: 229, baseType: !1807, size: 16)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1803, file: !27, line: 229, size: 16, elements: !1808, identifier: "_ZTSN10FPUTagWordUt_E")
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "tag0", scope: !1807, file: !27, line: 230, baseType: !55, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tag1", scope: !1807, file: !27, line: 231, baseType: !55, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "tag2", scope: !1807, file: !27, line: 232, baseType: !55, size: 2, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "tag3", scope: !1807, file: !27, line: 233, baseType: !55, size: 2, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tag4", scope: !1807, file: !27, line: 234, baseType: !55, size: 2, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "tag5", scope: !1807, file: !27, line: 235, baseType: !55, size: 2, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "tag6", scope: !1807, file: !27, line: 236, baseType: !55, size: 2, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tag7", scope: !1807, file: !27, line: 237, baseType: !55, size: 2, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1759, file: !27, line: 269, baseType: !28, size: 16, offset: 80)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1759, file: !27, line: 270, baseType: !8, size: 32, offset: 96)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1759, file: !27, line: 271, baseType: !1547, size: 16, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1759, file: !27, line: 272, baseType: !28, size: 16, offset: 144)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1759, file: !27, line: 273, baseType: !8, size: 32, offset: 160)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1759, file: !27, line: 274, baseType: !1547, size: 16, offset: 192)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd3", scope: !1759, file: !27, line: 275, baseType: !28, size: 16, offset: 208)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1759, file: !27, line: 276, baseType: !1825, size: 1024, offset: 224)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1826, size: 1024, elements: !1310)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FPUStackElem", file: !27, line: 162, size: 128, elements: !1827, identifier: "_ZTS12FPUStackElem")
!1827 = !{!1828, !1843}
!1828 = !DIDerivedType(tag: DW_TAG_member, scope: !1826, file: !27, line: 163, baseType: !1829, size: 80)
!1829 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1826, file: !27, line: 163, size: 80, elements: !1830, identifier: "_ZTSN12FPUStackElemUt_E")
!1830 = !{!1831, !1838}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1829, file: !27, line: 164, baseType: !1832, size: 80)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "float80_t", file: !1266, line: 65, size: 80, elements: !1833, identifier: "_ZTS9float80_t")
!1833 = !{!1834}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1832, file: !1266, line: 66, baseType: !1835, size: 80)
!1835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 80, elements: !1836)
!1836 = !{!1837}
!1837 = !DISubrange(count: 10)
!1838 = !DIDerivedType(tag: DW_TAG_member, scope: !1829, file: !27, line: 165, baseType: !1839, size: 80)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1829, file: !27, line: 165, size: 80, elements: !1840, identifier: "_ZTSN12FPUStackElemUt_Ut_E")
!1840 = !{!1841, !1842}
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "mmx", scope: !1839, file: !27, line: 166, baseType: !637, size: 64)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "infinity", scope: !1839, file: !27, line: 167, baseType: !28, size: 16, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1826, file: !27, line: 170, baseType: !1844, size: 48, offset: 80)
!1844 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 48, elements: !1845)
!1845 = !{!1846}
!1846 = !DISubrange(count: 6)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1756, file: !27, line: 316, baseType: !1848, size: 2848, offset: 1248)
!1848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 2848, elements: !1849)
!1849 = !{!1850}
!1850 = !DISubrange(count: 356)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave32", scope: !1753, file: !27, line: 321, baseType: !1852, size: 4096)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 319, size: 4096, elements: !1853, identifier: "_ZTSN3FPUUt0_E")
!1853 = !{!1854, !1910}
!1854 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1852, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE", file: !27, line: 280, size: 3328, elements: !1856, identifier: "_ZTS9FpuFXSAVE")
!1856 = !{!1857, !1858, !1859, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1906, !1907, !1908}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1855, file: !27, line: 281, baseType: !1762, size: 16)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1855, file: !27, line: 282, baseType: !1781, size: 16, offset: 16)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1855, file: !27, line: 283, baseType: !1860, size: 8, offset: 32)
!1860 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUAbridgedTagWord", file: !27, line: 245, size: 8, elements: !1861, identifier: "_ZTS18FPUAbridgedTagWord")
!1861 = !{!1862, !1863}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1860, file: !27, line: 246, baseType: !62, size: 8)
!1863 = !DIDerivedType(tag: DW_TAG_member, scope: !1860, file: !27, line: 247, baseType: !1864, size: 8)
!1864 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1860, file: !27, line: 247, size: 8, elements: !1865, identifier: "_ZTSN18FPUAbridgedTagWordUt_E")
!1865 = !{!1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "r0", scope: !1864, file: !27, line: 248, baseType: !61, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !1864, file: !27, line: 249, baseType: !61, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !1864, file: !27, line: 250, baseType: !61, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "r3", scope: !1864, file: !27, line: 251, baseType: !61, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "r4", scope: !1864, file: !27, line: 252, baseType: !61, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "r5", scope: !1864, file: !27, line: 253, baseType: !61, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "r6", scope: !1864, file: !27, line: 254, baseType: !61, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "r7", scope: !1864, file: !27, line: 255, baseType: !61, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1855, file: !27, line: 284, baseType: !62, size: 8, offset: 40)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1855, file: !27, line: 285, baseType: !28, size: 16, offset: 48)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1855, file: !27, line: 286, baseType: !8, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1855, file: !27, line: 287, baseType: !1547, size: 16, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd1", scope: !1855, file: !27, line: 288, baseType: !28, size: 16, offset: 112)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1855, file: !27, line: 289, baseType: !8, size: 32, offset: 128)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1855, file: !27, line: 290, baseType: !1547, size: 16, offset: 160)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd2", scope: !1855, file: !27, line: 291, baseType: !28, size: 16, offset: 176)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1855, file: !27, line: 292, baseType: !1883, size: 32, offset: 192)
!1883 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "FPUControlStatus", file: !27, line: 188, size: 32, elements: !1884, identifier: "_ZTS16FPUControlStatus")
!1884 = !{!1885, !1886}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flat", scope: !1883, file: !27, line: 189, baseType: !8, size: 32)
!1886 = !DIDerivedType(tag: DW_TAG_member, scope: !1883, file: !27, line: 190, baseType: !1887, size: 32)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1883, file: !27, line: 190, size: 32, elements: !1888, identifier: "_ZTSN16FPUControlStatusUt_E")
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "ie", scope: !1887, file: !27, line: 191, baseType: !8, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "de", scope: !1887, file: !27, line: 192, baseType: !8, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "ze", scope: !1887, file: !27, line: 193, baseType: !8, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "oe", scope: !1887, file: !27, line: 194, baseType: !8, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "ue", scope: !1887, file: !27, line: 195, baseType: !8, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "pe", scope: !1887, file: !27, line: 196, baseType: !8, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "daz", scope: !1887, file: !27, line: 197, baseType: !8, size: 1, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1887, file: !27, line: 198, baseType: !8, size: 1, offset: 7, flags: DIFlagBitField, extraData: i64 0)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "dm", scope: !1887, file: !27, line: 199, baseType: !8, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "zm", scope: !1887, file: !27, line: 200, baseType: !8, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "om", scope: !1887, file: !27, line: 201, baseType: !8, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "um", scope: !1887, file: !27, line: 202, baseType: !8, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !1887, file: !27, line: 203, baseType: !8, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "rn", scope: !1887, file: !27, line: 204, baseType: !8, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "rp", scope: !1887, file: !27, line: 205, baseType: !8, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "fz", scope: !1887, file: !27, line: 206, baseType: !8, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd", scope: !1887, file: !27, line: 207, baseType: !8, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1855, file: !27, line: 293, baseType: !1883, size: 32, offset: 224)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1855, file: !27, line: 294, baseType: !1825, size: 1024, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1855, file: !27, line: 295, baseType: !1909, size: 2048, offset: 1280)
!1909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 2048, elements: !1303)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1852, file: !27, line: 320, baseType: !1911, size: 768, offset: 3328)
!1911 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 768, elements: !1912)
!1912 = !{!1913}
!1913 = !DISubrange(count: 96)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave64", scope: !1753, file: !27, line: 325, baseType: !1915, size: 4096)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1753, file: !27, line: 323, size: 4096, elements: !1916, identifier: "_ZTSN3FPUUt1_E")
!1916 = !{!1917, !1931}
!1917 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !1915, baseType: !1918)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FpuFXSAVE64", file: !27, line: 299, size: 3328, elements: !1919, identifier: "_ZTS11FpuFXSAVE64")
!1919 = !{!1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1918, file: !27, line: 300, baseType: !1762, size: 16)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1918, file: !27, line: 301, baseType: !1781, size: 16, offset: 16)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "ftw", scope: !1918, file: !27, line: 302, baseType: !1860, size: 8, offset: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_rsvd0", scope: !1918, file: !27, line: 303, baseType: !62, size: 8, offset: 40)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1918, file: !27, line: 304, baseType: !28, size: 16, offset: 48)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !1918, file: !27, line: 305, baseType: !637, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "dp", scope: !1918, file: !27, line: 306, baseType: !637, size: 64, offset: 128)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1918, file: !27, line: 307, baseType: !1883, size: 32, offset: 192)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1918, file: !27, line: 308, baseType: !1883, size: 32, offset: 224)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "st", scope: !1918, file: !27, line: 309, baseType: !1825, size: 1024, offset: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "xmm", scope: !1918, file: !27, line: 310, baseType: !1909, size: 2048, offset: 1280)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_padding0", scope: !1915, file: !27, line: 324, baseType: !1911, size: 768, offset: 3328)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "seg_caches", scope: !1268, file: !27, line: 761, baseType: !1933, size: 768, align: 64, offset: 26240)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentCaches", file: !27, line: 468, size: 768, align: 64, elements: !1934, identifier: "_ZTS13SegmentCaches")
!1934 = !{!1935, !1945, !1946, !1947, !1948, !1949}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !1933, file: !27, line: 469, baseType: !1936, size: 128)
!1936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SegmentShadow", file: !27, line: 88, size: 128, elements: !1937, identifier: "_ZTS13SegmentShadow")
!1937 = !{!1938, !1943, !1944}
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1936, file: !27, line: 92, baseType: !1939, size: 64)
!1939 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1936, file: !27, line: 89, size: 64, elements: !1940, identifier: "_ZTSN13SegmentShadowUt_E")
!1940 = !{!1941, !1942}
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "dword", scope: !1939, file: !27, line: 90, baseType: !8, size: 32)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "qword", scope: !1939, file: !27, line: 91, baseType: !637, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1936, file: !27, line: 93, baseType: !8, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1936, file: !27, line: 94, baseType: !8, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !1933, file: !27, line: 470, baseType: !1936, size: 128, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1933, file: !27, line: 471, baseType: !1936, size: 128, offset: 256)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1933, file: !27, line: 472, baseType: !1936, size: 128, offset: 384)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1933, file: !27, line: 473, baseType: !1936, size: 128, offset: 512)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "gs", scope: !1933, file: !27, line: 474, baseType: !1936, size: 128, offset: 640)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_t", file: !1266, line: 42, baseType: !1951)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr64_t", file: !1266, line: 41, baseType: !637)
!1952 = !DILocation(line: 54, column: 8, scope: !1261)
!1953 = !DILocation(line: 55, column: 10, scope: !1261)
!1954 = !DILocation(line: 56, column: 10, scope: !1261)
!1955 = !DILocation(line: 57, column: 10, scope: !1261)
!1956 = !DILocation(line: 58, column: 10, scope: !1261)
!1957 = !DILocation(line: 61, column: 9, scope: !1261)
!1958 = !DILocation(line: 62, column: 9, scope: !1261)
!1959 = !DILocation(line: 63, column: 20, scope: !1261)
!1960 = !DILocation(line: 63, column: 24, scope: !1261)
!1961 = !DILocation(line: 63, column: 28, scope: !1261)
!1962 = !DILocation(line: 69, column: 6, scope: !1261)
!1963 = !DILocation(line: 74, column: 20, scope: !1261)
!1964 = !DILocation(line: 74, column: 24, scope: !1261)
!1965 = !DILocation(line: 74, column: 28, scope: !1261)
!1966 = !DILocation(line: 74, column: 33, scope: !1261)
!1967 = !DILocation(line: 75, column: 20, scope: !1261)
!1968 = !DILocation(line: 75, column: 24, scope: !1261)
!1969 = !DILocation(line: 75, column: 28, scope: !1261)
!1970 = !DILocation(line: 75, column: 33, scope: !1261)
!1971 = !DILocation(line: 76, column: 20, scope: !1261)
!1972 = !DILocation(line: 76, column: 24, scope: !1261)
!1973 = !DILocation(line: 76, column: 28, scope: !1261)
!1974 = !DILocation(line: 76, column: 33, scope: !1261)
!1975 = !DILocation(line: 77, column: 20, scope: !1261)
!1976 = !DILocation(line: 77, column: 24, scope: !1261)
!1977 = !DILocation(line: 77, column: 28, scope: !1261)
!1978 = !DILocation(line: 77, column: 33, scope: !1261)
!1979 = !DILocation(line: 78, column: 20, scope: !1261)
!1980 = !DILocation(line: 78, column: 24, scope: !1261)
!1981 = !DILocation(line: 78, column: 28, scope: !1261)
!1982 = !DILocation(line: 78, column: 33, scope: !1261)
!1983 = !DILocation(line: 79, column: 20, scope: !1261)
!1984 = !DILocation(line: 79, column: 24, scope: !1261)
!1985 = !DILocation(line: 79, column: 28, scope: !1261)
!1986 = !DILocation(line: 79, column: 33, scope: !1261)
!1987 = !DILocation(line: 80, column: 20, scope: !1261)
!1988 = !DILocation(line: 80, column: 24, scope: !1261)
!1989 = !DILocation(line: 80, column: 28, scope: !1261)
!1990 = !DILocation(line: 80, column: 33, scope: !1261)
!1991 = !DILocation(line: 81, column: 20, scope: !1261)
!1992 = !DILocation(line: 81, column: 24, scope: !1261)
!1993 = !DILocation(line: 81, column: 28, scope: !1261)
!1994 = !DILocation(line: 81, column: 33, scope: !1261)
!1995 = !DILocation(line: 83, column: 21, scope: !1261)
!1996 = !DILocation(line: 83, column: 25, scope: !1261)
!1997 = !DILocation(line: 83, column: 29, scope: !1261)
!1998 = !DILocation(line: 83, column: 34, scope: !1261)
!1999 = !DILocation(line: 84, column: 21, scope: !1261)
!2000 = !DILocation(line: 84, column: 25, scope: !1261)
!2001 = !DILocation(line: 84, column: 29, scope: !1261)
!2002 = !DILocation(line: 84, column: 34, scope: !1261)
!2003 = !DILocation(line: 85, column: 21, scope: !1261)
!2004 = !DILocation(line: 85, column: 25, scope: !1261)
!2005 = !DILocation(line: 85, column: 29, scope: !1261)
!2006 = !DILocation(line: 85, column: 34, scope: !1261)
!2007 = !DILocation(line: 86, column: 21, scope: !1261)
!2008 = !DILocation(line: 86, column: 25, scope: !1261)
!2009 = !DILocation(line: 86, column: 29, scope: !1261)
!2010 = !DILocation(line: 86, column: 34, scope: !1261)
!2011 = !DILocation(line: 87, column: 21, scope: !1261)
!2012 = !DILocation(line: 87, column: 25, scope: !1261)
!2013 = !DILocation(line: 87, column: 28, scope: !1261)
!2014 = !DILocation(line: 87, column: 33, scope: !1261)
!2015 = !DILocation(line: 88, column: 21, scope: !1261)
!2016 = !DILocation(line: 88, column: 25, scope: !1261)
!2017 = !DILocation(line: 88, column: 28, scope: !1261)
!2018 = !DILocation(line: 88, column: 33, scope: !1261)
!2019 = !DILocation(line: 89, column: 22, scope: !1261)
!2020 = !DILocation(line: 89, column: 26, scope: !1261)
!2021 = !DILocation(line: 89, column: 30, scope: !1261)
!2022 = !DILocation(line: 89, column: 35, scope: !1261)
!2023 = !DILocation(line: 90, column: 22, scope: !1261)
!2024 = !DILocation(line: 90, column: 26, scope: !1261)
!2025 = !DILocation(line: 90, column: 30, scope: !1261)
!2026 = !DILocation(line: 90, column: 35, scope: !1261)
!2027 = !DILocation(line: 91, column: 22, scope: !1261)
!2028 = !DILocation(line: 91, column: 26, scope: !1261)
!2029 = !DILocation(line: 91, column: 30, scope: !1261)
!2030 = !DILocation(line: 91, column: 35, scope: !1261)
!2031 = !DILocation(line: 92, column: 22, scope: !1261)
!2032 = !DILocation(line: 92, column: 26, scope: !1261)
!2033 = !DILocation(line: 92, column: 30, scope: !1261)
!2034 = !DILocation(line: 92, column: 35, scope: !1261)
!2035 = !DILocation(line: 93, column: 22, scope: !1261)
!2036 = !DILocation(line: 93, column: 26, scope: !1261)
!2037 = !DILocation(line: 93, column: 30, scope: !1261)
!2038 = !DILocation(line: 93, column: 35, scope: !1261)
!2039 = !DILocation(line: 94, column: 22, scope: !1261)
!2040 = !DILocation(line: 94, column: 26, scope: !1261)
!2041 = !DILocation(line: 94, column: 30, scope: !1261)
!2042 = !DILocation(line: 94, column: 35, scope: !1261)
!2043 = !DILocation(line: 96, column: 20, scope: !1261)
!2044 = !DILocation(line: 96, column: 24, scope: !1261)
!2045 = !DILocation(line: 96, column: 28, scope: !1261)
!2046 = !DILocation(line: 97, column: 20, scope: !1261)
!2047 = !DILocation(line: 97, column: 24, scope: !1261)
!2048 = !DILocation(line: 97, column: 28, scope: !1261)
!2049 = !DILocation(line: 98, column: 20, scope: !1261)
!2050 = !DILocation(line: 98, column: 24, scope: !1261)
!2051 = !DILocation(line: 98, column: 28, scope: !1261)
!2052 = !DILocation(line: 99, column: 20, scope: !1261)
!2053 = !DILocation(line: 99, column: 24, scope: !1261)
!2054 = !DILocation(line: 99, column: 28, scope: !1261)
!2055 = !DILocation(line: 100, column: 20, scope: !1261)
!2056 = !DILocation(line: 100, column: 24, scope: !1261)
!2057 = !DILocation(line: 100, column: 28, scope: !1261)
!2058 = !DILocation(line: 101, column: 20, scope: !1261)
!2059 = !DILocation(line: 101, column: 24, scope: !1261)
!2060 = !DILocation(line: 101, column: 28, scope: !1261)
!2061 = !DILocation(line: 102, column: 20, scope: !1261)
!2062 = !DILocation(line: 102, column: 24, scope: !1261)
!2063 = !DILocation(line: 102, column: 28, scope: !1261)
!2064 = !DILocation(line: 103, column: 20, scope: !1261)
!2065 = !DILocation(line: 103, column: 24, scope: !1261)
!2066 = !DILocation(line: 103, column: 28, scope: !1261)
!2067 = !DILocation(line: 105, column: 21, scope: !1261)
!2068 = !DILocation(line: 105, column: 25, scope: !1261)
!2069 = !DILocation(line: 105, column: 28, scope: !1261)
!2070 = !DILocation(line: 106, column: 21, scope: !1261)
!2071 = !DILocation(line: 106, column: 25, scope: !1261)
!2072 = !DILocation(line: 106, column: 28, scope: !1261)
!2073 = !DILocation(line: 107, column: 22, scope: !1261)
!2074 = !DILocation(line: 107, column: 26, scope: !1261)
!2075 = !DILocation(line: 107, column: 30, scope: !1261)
!2076 = !DILocation(line: 108, column: 22, scope: !1261)
!2077 = !DILocation(line: 108, column: 26, scope: !1261)
!2078 = !DILocation(line: 108, column: 30, scope: !1261)
!2079 = !DILocation(line: 109, column: 22, scope: !1261)
!2080 = !DILocation(line: 109, column: 26, scope: !1261)
!2081 = !DILocation(line: 109, column: 30, scope: !1261)
!2082 = !DILocation(line: 110, column: 22, scope: !1261)
!2083 = !DILocation(line: 110, column: 26, scope: !1261)
!2084 = !DILocation(line: 110, column: 30, scope: !1261)
!2085 = !DILocation(line: 111, column: 22, scope: !1261)
!2086 = !DILocation(line: 111, column: 26, scope: !1261)
!2087 = !DILocation(line: 111, column: 30, scope: !1261)
!2088 = !DILocation(line: 112, column: 22, scope: !1261)
!2089 = !DILocation(line: 112, column: 26, scope: !1261)
!2090 = !DILocation(line: 112, column: 30, scope: !1261)
!2091 = !DILocation(line: 114, column: 20, scope: !1261)
!2092 = !DILocation(line: 114, column: 24, scope: !1261)
!2093 = !DILocation(line: 114, column: 28, scope: !1261)
!2094 = !DILocation(line: 116, column: 21, scope: !1261)
!2095 = !DILocation(line: 116, column: 25, scope: !1261)
!2096 = !DILocation(line: 116, column: 29, scope: !1261)
!2097 = !DILocation(line: 117, column: 21, scope: !1261)
!2098 = !DILocation(line: 117, column: 25, scope: !1261)
!2099 = !DILocation(line: 117, column: 29, scope: !1261)
!2100 = !DILocation(line: 118, column: 21, scope: !1261)
!2101 = !DILocation(line: 118, column: 25, scope: !1261)
!2102 = !DILocation(line: 118, column: 29, scope: !1261)
!2103 = !DILocation(line: 119, column: 21, scope: !1261)
!2104 = !DILocation(line: 119, column: 25, scope: !1261)
!2105 = !DILocation(line: 119, column: 29, scope: !1261)
!2106 = !DILocation(line: 120, column: 21, scope: !1261)
!2107 = !DILocation(line: 120, column: 25, scope: !1261)
!2108 = !DILocation(line: 120, column: 29, scope: !1261)
!2109 = !DILocation(line: 121, column: 21, scope: !1261)
!2110 = !DILocation(line: 121, column: 25, scope: !1261)
!2111 = !DILocation(line: 121, column: 29, scope: !1261)
!2112 = !DILocation(line: 122, column: 21, scope: !1261)
!2113 = !DILocation(line: 122, column: 25, scope: !1261)
!2114 = !DILocation(line: 122, column: 29, scope: !1261)
!2115 = !DILocation(line: 123, column: 21, scope: !1261)
!2116 = !DILocation(line: 123, column: 25, scope: !1261)
!2117 = !DILocation(line: 123, column: 29, scope: !1261)
!2118 = !DILocation(line: 124, column: 21, scope: !1261)
!2119 = !DILocation(line: 124, column: 25, scope: !1261)
!2120 = !DILocation(line: 124, column: 29, scope: !1261)
!2121 = !DILocation(line: 127, column: 21, scope: !1261)
!2122 = !DILocation(line: 127, column: 25, scope: !1261)
!2123 = !DILocation(line: 127, column: 28, scope: !1261)
!2124 = !DILocation(line: 128, column: 21, scope: !1261)
!2125 = !DILocation(line: 128, column: 25, scope: !1261)
!2126 = !DILocation(line: 128, column: 28, scope: !1261)
!2127 = !DILocation(line: 129, column: 22, scope: !1261)
!2128 = !DILocation(line: 129, column: 26, scope: !1261)
!2129 = !DILocation(line: 129, column: 30, scope: !1261)
!2130 = !DILocation(line: 130, column: 22, scope: !1261)
!2131 = !DILocation(line: 130, column: 26, scope: !1261)
!2132 = !DILocation(line: 130, column: 30, scope: !1261)
!2133 = !DILocation(line: 131, column: 22, scope: !1261)
!2134 = !DILocation(line: 131, column: 26, scope: !1261)
!2135 = !DILocation(line: 131, column: 30, scope: !1261)
!2136 = !DILocation(line: 132, column: 22, scope: !1261)
!2137 = !DILocation(line: 132, column: 26, scope: !1261)
!2138 = !DILocation(line: 132, column: 30, scope: !1261)
!2139 = !DILocation(line: 133, column: 22, scope: !1261)
!2140 = !DILocation(line: 133, column: 26, scope: !1261)
!2141 = !DILocation(line: 133, column: 30, scope: !1261)
!2142 = !DILocation(line: 134, column: 22, scope: !1261)
!2143 = !DILocation(line: 134, column: 26, scope: !1261)
!2144 = !DILocation(line: 134, column: 30, scope: !1261)
!2145 = !DILocation(line: 136, column: 21, scope: !1261)
!2146 = !DILocation(line: 136, column: 25, scope: !1261)
!2147 = !DILocation(line: 136, column: 29, scope: !1261)
!2148 = !DILocation(line: 137, column: 21, scope: !1261)
!2149 = !DILocation(line: 137, column: 25, scope: !1261)
!2150 = !DILocation(line: 137, column: 29, scope: !1261)
!2151 = !DILocation(line: 138, column: 21, scope: !1261)
!2152 = !DILocation(line: 138, column: 25, scope: !1261)
!2153 = !DILocation(line: 138, column: 29, scope: !1261)
!2154 = !DILocation(line: 139, column: 21, scope: !1261)
!2155 = !DILocation(line: 139, column: 25, scope: !1261)
!2156 = !DILocation(line: 139, column: 29, scope: !1261)
!2157 = !DILocation(line: 140, column: 21, scope: !1261)
!2158 = !DILocation(line: 140, column: 25, scope: !1261)
!2159 = !DILocation(line: 140, column: 29, scope: !1261)
!2160 = !DILocation(line: 141, column: 21, scope: !1261)
!2161 = !DILocation(line: 141, column: 25, scope: !1261)
!2162 = !DILocation(line: 141, column: 29, scope: !1261)
!2163 = !DILocation(line: 142, column: 21, scope: !1261)
!2164 = !DILocation(line: 142, column: 25, scope: !1261)
!2165 = !DILocation(line: 142, column: 29, scope: !1261)
!2166 = !DILocation(line: 143, column: 21, scope: !1261)
!2167 = !DILocation(line: 143, column: 25, scope: !1261)
!2168 = !DILocation(line: 143, column: 29, scope: !1261)
!2169 = !DILocation(line: 144, column: 20, scope: !1261)
!2170 = !DILocation(line: 144, column: 24, scope: !1261)
!2171 = !DILocation(line: 144, column: 27, scope: !1261)
!2172 = !DILocation(line: 145, column: 20, scope: !1261)
!2173 = !DILocation(line: 145, column: 24, scope: !1261)
!2174 = !DILocation(line: 145, column: 27, scope: !1261)
!2175 = !DILocation(line: 146, column: 21, scope: !1261)
!2176 = !DILocation(line: 146, column: 25, scope: !1261)
!2177 = !DILocation(line: 146, column: 29, scope: !1261)
!2178 = !DILocation(line: 147, column: 21, scope: !1261)
!2179 = !DILocation(line: 147, column: 25, scope: !1261)
!2180 = !DILocation(line: 147, column: 29, scope: !1261)
!2181 = !DILocation(line: 148, column: 21, scope: !1261)
!2182 = !DILocation(line: 148, column: 25, scope: !1261)
!2183 = !DILocation(line: 148, column: 29, scope: !1261)
!2184 = !DILocation(line: 149, column: 21, scope: !1261)
!2185 = !DILocation(line: 149, column: 25, scope: !1261)
!2186 = !DILocation(line: 149, column: 29, scope: !1261)
!2187 = !DILocation(line: 150, column: 21, scope: !1261)
!2188 = !DILocation(line: 150, column: 25, scope: !1261)
!2189 = !DILocation(line: 150, column: 29, scope: !1261)
!2190 = !DILocation(line: 151, column: 21, scope: !1261)
!2191 = !DILocation(line: 151, column: 25, scope: !1261)
!2192 = !DILocation(line: 151, column: 29, scope: !1261)
!2193 = !DILocation(line: 152, column: 21, scope: !1261)
!2194 = !DILocation(line: 152, column: 25, scope: !1261)
!2195 = !DILocation(line: 152, column: 29, scope: !1261)
!2196 = !DILocation(line: 155, column: 20, scope: !1261)
!2197 = !DILocation(line: 155, column: 24, scope: !1261)
!2198 = !DILocation(line: 155, column: 27, scope: !1261)
!2199 = !DILocation(line: 156, column: 20, scope: !1261)
!2200 = !DILocation(line: 156, column: 24, scope: !1261)
!2201 = !DILocation(line: 156, column: 27, scope: !1261)
!2202 = !DILocation(line: 157, column: 20, scope: !1261)
!2203 = !DILocation(line: 157, column: 24, scope: !1261)
!2204 = !DILocation(line: 157, column: 27, scope: !1261)
!2205 = !DILocation(line: 158, column: 20, scope: !1261)
!2206 = !DILocation(line: 158, column: 24, scope: !1261)
!2207 = !DILocation(line: 158, column: 27, scope: !1261)
!2208 = !DILocation(line: 159, column: 20, scope: !1261)
!2209 = !DILocation(line: 159, column: 24, scope: !1261)
!2210 = !DILocation(line: 159, column: 27, scope: !1261)
!2211 = !DILocation(line: 160, column: 20, scope: !1261)
!2212 = !DILocation(line: 160, column: 24, scope: !1261)
!2213 = !DILocation(line: 160, column: 27, scope: !1261)
!2214 = !DILocation(line: 164, column: 25, scope: !1261)
!2215 = !DILocation(line: 164, column: 30, scope: !1261)
!2216 = !DILocation(line: 164, column: 38, scope: !1261)
!2217 = !DILocation(line: 165, column: 25, scope: !1261)
!2218 = !DILocation(line: 165, column: 30, scope: !1261)
!2219 = !DILocation(line: 165, column: 38, scope: !1261)
!2220 = !DILocation(line: 205, column: 22, scope: !1261)
!2221 = !DILocation(line: 205, column: 16, scope: !1261)
!2222 = !DILocation(line: 205, column: 29, scope: !1261)
!2223 = !DILocation(line: 206, column: 22, scope: !1261)
!2224 = !DILocation(line: 206, column: 16, scope: !1261)
!2225 = !DILocation(line: 206, column: 29, scope: !1261)
!2226 = !DILocation(line: 207, column: 22, scope: !1261)
!2227 = !DILocation(line: 207, column: 16, scope: !1261)
!2228 = !DILocation(line: 207, column: 29, scope: !1261)
!2229 = !DILocation(line: 208, column: 22, scope: !1261)
!2230 = !DILocation(line: 208, column: 16, scope: !1261)
!2231 = !DILocation(line: 208, column: 29, scope: !1261)
!2232 = !DILocation(line: 209, column: 22, scope: !1261)
!2233 = !DILocation(line: 209, column: 16, scope: !1261)
!2234 = !DILocation(line: 209, column: 29, scope: !1261)
!2235 = !DILocation(line: 210, column: 22, scope: !1261)
!2236 = !DILocation(line: 210, column: 16, scope: !1261)
!2237 = !DILocation(line: 210, column: 29, scope: !1261)
!2238 = !DILocation(line: 211, column: 22, scope: !1261)
!2239 = !DILocation(line: 211, column: 16, scope: !1261)
!2240 = !DILocation(line: 211, column: 29, scope: !1261)
!2241 = !DILocation(line: 212, column: 22, scope: !1261)
!2242 = !DILocation(line: 212, column: 16, scope: !1261)
!2243 = !DILocation(line: 212, column: 29, scope: !1261)
!2244 = !DILocation(line: 214, column: 22, scope: !1261)
!2245 = !DILocation(line: 214, column: 16, scope: !1261)
!2246 = !DILocation(line: 214, column: 29, scope: !1261)
!2247 = !DILocation(line: 215, column: 22, scope: !1261)
!2248 = !DILocation(line: 215, column: 16, scope: !1261)
!2249 = !DILocation(line: 215, column: 29, scope: !1261)
!2250 = !DILocation(line: 216, column: 23, scope: !1261)
!2251 = !DILocation(line: 216, column: 17, scope: !1261)
!2252 = !DILocation(line: 216, column: 31, scope: !1261)
!2253 = !DILocation(line: 217, column: 23, scope: !1261)
!2254 = !DILocation(line: 217, column: 17, scope: !1261)
!2255 = !DILocation(line: 217, column: 31, scope: !1261)
!2256 = !DILocation(line: 218, column: 23, scope: !1261)
!2257 = !DILocation(line: 218, column: 17, scope: !1261)
!2258 = !DILocation(line: 218, column: 31, scope: !1261)
!2259 = !DILocation(line: 219, column: 23, scope: !1261)
!2260 = !DILocation(line: 219, column: 17, scope: !1261)
!2261 = !DILocation(line: 219, column: 31, scope: !1261)
!2262 = !DILocation(line: 220, column: 23, scope: !1261)
!2263 = !DILocation(line: 220, column: 17, scope: !1261)
!2264 = !DILocation(line: 220, column: 31, scope: !1261)
!2265 = !DILocation(line: 221, column: 23, scope: !1261)
!2266 = !DILocation(line: 221, column: 17, scope: !1261)
!2267 = !DILocation(line: 221, column: 31, scope: !1261)
!2268 = !DILocation(line: 245, column: 22, scope: !1261)
!2269 = !DILocation(line: 245, column: 16, scope: !1261)
!2270 = !DILocation(line: 245, column: 29, scope: !1261)
!2271 = !DILocation(line: 246, column: 22, scope: !1261)
!2272 = !DILocation(line: 246, column: 16, scope: !1261)
!2273 = !DILocation(line: 246, column: 29, scope: !1261)
!2274 = !DILocation(line: 247, column: 22, scope: !1261)
!2275 = !DILocation(line: 247, column: 16, scope: !1261)
!2276 = !DILocation(line: 247, column: 29, scope: !1261)
!2277 = !DILocation(line: 248, column: 22, scope: !1261)
!2278 = !DILocation(line: 248, column: 16, scope: !1261)
!2279 = !DILocation(line: 248, column: 29, scope: !1261)
!2280 = !DILocation(line: 249, column: 22, scope: !1261)
!2281 = !DILocation(line: 249, column: 16, scope: !1261)
!2282 = !DILocation(line: 249, column: 29, scope: !1261)
!2283 = !DILocation(line: 250, column: 22, scope: !1261)
!2284 = !DILocation(line: 250, column: 16, scope: !1261)
!2285 = !DILocation(line: 250, column: 29, scope: !1261)
!2286 = !DILocation(line: 251, column: 22, scope: !1261)
!2287 = !DILocation(line: 251, column: 16, scope: !1261)
!2288 = !DILocation(line: 251, column: 29, scope: !1261)
!2289 = !DILocation(line: 252, column: 22, scope: !1261)
!2290 = !DILocation(line: 252, column: 16, scope: !1261)
!2291 = !DILocation(line: 252, column: 29, scope: !1261)
!2292 = !DILocation(line: 255, column: 22, scope: !1261)
!2293 = !DILocation(line: 255, column: 16, scope: !1261)
!2294 = !DILocation(line: 255, column: 29, scope: !1261)
!2295 = !DILocation(line: 256, column: 22, scope: !1261)
!2296 = !DILocation(line: 256, column: 16, scope: !1261)
!2297 = !DILocation(line: 256, column: 29, scope: !1261)
!2298 = !DILocation(line: 257, column: 23, scope: !1261)
!2299 = !DILocation(line: 257, column: 17, scope: !1261)
!2300 = !DILocation(line: 257, column: 31, scope: !1261)
!2301 = !DILocation(line: 258, column: 23, scope: !1261)
!2302 = !DILocation(line: 258, column: 17, scope: !1261)
!2303 = !DILocation(line: 258, column: 31, scope: !1261)
!2304 = !DILocation(line: 259, column: 23, scope: !1261)
!2305 = !DILocation(line: 259, column: 17, scope: !1261)
!2306 = !DILocation(line: 259, column: 31, scope: !1261)
!2307 = !DILocation(line: 260, column: 23, scope: !1261)
!2308 = !DILocation(line: 260, column: 17, scope: !1261)
!2309 = !DILocation(line: 260, column: 31, scope: !1261)
!2310 = !DILocation(line: 261, column: 23, scope: !1261)
!2311 = !DILocation(line: 261, column: 17, scope: !1261)
!2312 = !DILocation(line: 261, column: 31, scope: !1261)
!2313 = !DILocation(line: 262, column: 23, scope: !1261)
!2314 = !DILocation(line: 262, column: 17, scope: !1261)
!2315 = !DILocation(line: 262, column: 31, scope: !1261)
!2316 = !DILocation(line: 285, column: 21, scope: !1261)
!2317 = !DILocation(line: 285, column: 24, scope: !1261)
!2318 = !DILocation(line: 285, column: 15, scope: !1261)
!2319 = !DILocation(line: 285, column: 33, scope: !1261)
!2320 = !DILocation(line: 286, column: 21, scope: !1261)
!2321 = !DILocation(line: 286, column: 24, scope: !1261)
!2322 = !DILocation(line: 286, column: 15, scope: !1261)
!2323 = !DILocation(line: 286, column: 33, scope: !1261)
!2324 = !DILocation(line: 287, column: 21, scope: !1261)
!2325 = !DILocation(line: 287, column: 24, scope: !1261)
!2326 = !DILocation(line: 287, column: 15, scope: !1261)
!2327 = !DILocation(line: 287, column: 33, scope: !1261)
!2328 = !DILocation(line: 288, column: 21, scope: !1261)
!2329 = !DILocation(line: 288, column: 24, scope: !1261)
!2330 = !DILocation(line: 288, column: 15, scope: !1261)
!2331 = !DILocation(line: 288, column: 33, scope: !1261)
!2332 = !DILocation(line: 289, column: 21, scope: !1261)
!2333 = !DILocation(line: 289, column: 24, scope: !1261)
!2334 = !DILocation(line: 289, column: 15, scope: !1261)
!2335 = !DILocation(line: 289, column: 33, scope: !1261)
!2336 = !DILocation(line: 290, column: 21, scope: !1261)
!2337 = !DILocation(line: 290, column: 24, scope: !1261)
!2338 = !DILocation(line: 290, column: 15, scope: !1261)
!2339 = !DILocation(line: 290, column: 33, scope: !1261)
!2340 = !DILocation(line: 291, column: 21, scope: !1261)
!2341 = !DILocation(line: 291, column: 24, scope: !1261)
!2342 = !DILocation(line: 291, column: 15, scope: !1261)
!2343 = !DILocation(line: 291, column: 33, scope: !1261)
!2344 = !DILocation(line: 292, column: 21, scope: !1261)
!2345 = !DILocation(line: 292, column: 24, scope: !1261)
!2346 = !DILocation(line: 292, column: 15, scope: !1261)
!2347 = !DILocation(line: 292, column: 33, scope: !1261)
!2348 = !DILocation(line: 318, column: 21, scope: !1261)
!2349 = !DILocation(line: 318, column: 25, scope: !1261)
!2350 = !DILocation(line: 318, column: 15, scope: !1261)
!2351 = !DILocation(line: 318, column: 34, scope: !1261)
!2352 = !DILocation(line: 318, column: 38, scope: !1261)
!2353 = !DILocation(line: 318, column: 45, scope: !1261)
!2354 = !DILocation(line: 319, column: 21, scope: !1261)
!2355 = !DILocation(line: 319, column: 25, scope: !1261)
!2356 = !DILocation(line: 319, column: 15, scope: !1261)
!2357 = !DILocation(line: 319, column: 34, scope: !1261)
!2358 = !DILocation(line: 319, column: 38, scope: !1261)
!2359 = !DILocation(line: 319, column: 45, scope: !1261)
!2360 = !DILocation(line: 320, column: 21, scope: !1261)
!2361 = !DILocation(line: 320, column: 25, scope: !1261)
!2362 = !DILocation(line: 320, column: 15, scope: !1261)
!2363 = !DILocation(line: 320, column: 34, scope: !1261)
!2364 = !DILocation(line: 320, column: 38, scope: !1261)
!2365 = !DILocation(line: 320, column: 45, scope: !1261)
!2366 = !DILocation(line: 321, column: 21, scope: !1261)
!2367 = !DILocation(line: 321, column: 25, scope: !1261)
!2368 = !DILocation(line: 321, column: 15, scope: !1261)
!2369 = !DILocation(line: 321, column: 34, scope: !1261)
!2370 = !DILocation(line: 321, column: 38, scope: !1261)
!2371 = !DILocation(line: 321, column: 45, scope: !1261)
!2372 = !DILocation(line: 322, column: 21, scope: !1261)
!2373 = !DILocation(line: 322, column: 25, scope: !1261)
!2374 = !DILocation(line: 322, column: 15, scope: !1261)
!2375 = !DILocation(line: 322, column: 34, scope: !1261)
!2376 = !DILocation(line: 322, column: 38, scope: !1261)
!2377 = !DILocation(line: 322, column: 45, scope: !1261)
!2378 = !DILocation(line: 323, column: 21, scope: !1261)
!2379 = !DILocation(line: 323, column: 25, scope: !1261)
!2380 = !DILocation(line: 323, column: 15, scope: !1261)
!2381 = !DILocation(line: 323, column: 34, scope: !1261)
!2382 = !DILocation(line: 323, column: 38, scope: !1261)
!2383 = !DILocation(line: 323, column: 45, scope: !1261)
!2384 = !DILocation(line: 324, column: 21, scope: !1261)
!2385 = !DILocation(line: 324, column: 25, scope: !1261)
!2386 = !DILocation(line: 324, column: 15, scope: !1261)
!2387 = !DILocation(line: 324, column: 34, scope: !1261)
!2388 = !DILocation(line: 324, column: 38, scope: !1261)
!2389 = !DILocation(line: 324, column: 45, scope: !1261)
!2390 = !DILocation(line: 325, column: 21, scope: !1261)
!2391 = !DILocation(line: 325, column: 25, scope: !1261)
!2392 = !DILocation(line: 325, column: 15, scope: !1261)
!2393 = !DILocation(line: 325, column: 34, scope: !1261)
!2394 = !DILocation(line: 325, column: 38, scope: !1261)
!2395 = !DILocation(line: 325, column: 45, scope: !1261)
!2396 = !DILocation(line: 328, column: 20, scope: !1261)
!2397 = !DILocation(line: 328, column: 26, scope: !1261)
!2398 = !DILocation(line: 329, column: 20, scope: !1261)
!2399 = !DILocation(line: 329, column: 26, scope: !1261)
!2400 = !DILocation(line: 330, column: 20, scope: !1261)
!2401 = !DILocation(line: 330, column: 26, scope: !1261)
!2402 = !DILocation(line: 331, column: 20, scope: !1261)
!2403 = !DILocation(line: 331, column: 26, scope: !1261)
!2404 = !DILocation(line: 332, column: 20, scope: !1261)
!2405 = !DILocation(line: 332, column: 26, scope: !1261)
!2406 = !DILocation(line: 333, column: 20, scope: !1261)
!2407 = !DILocation(line: 333, column: 26, scope: !1261)
!2408 = !DILocation(line: 334, column: 20, scope: !1261)
!2409 = !DILocation(line: 334, column: 26, scope: !1261)
!2410 = !DILocation(line: 337, column: 9, scope: !1261)
!2411 = !DILocation(line: 338, column: 9, scope: !1261)
!2412 = !DILocation(line: 339, column: 9, scope: !1261)
!2413 = !DILocation(line: 340, column: 9, scope: !1261)
!2414 = !DILocation(line: 341, column: 9, scope: !1261)
!2415 = !DILocation(line: 342, column: 9, scope: !1261)
!2416 = !DILocation(line: 343, column: 9, scope: !1261)
!2417 = !DILocation(line: 344, column: 9, scope: !1261)
!2418 = !DILocation(line: 347, column: 9, scope: !1261)
!2419 = !DILocation(line: 348, column: 9, scope: !1261)
!2420 = !DILocation(line: 349, column: 9, scope: !1261)
!2421 = !DILocation(line: 350, column: 9, scope: !1261)
!2422 = !DILocation(line: 351, column: 9, scope: !1261)
!2423 = !DILocation(line: 353, column: 9, scope: !1261)
!2424 = !DILocation(line: 357, column: 3, scope: !1261)
!2425 = distinct !DISubprogram(name: "__remill_intrinsics", scope: !2426, file: !2426, line: 35, type: !95, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: false, unit: !1, variables: !7)
!2426 = !DIFile(filename: "/home/ubuntu/Github/remill/remill/Arch/Runtime/Intrinsics.cpp", directory: "/home/ubuntu/Github/remill/remill-build/remill/Arch/X86/Runtime")
!2427 = !DILocation(line: 116, column: 1, scope: !2425)
!2428 = !{!2429, !2429, i64 0}
!2429 = !{!"long", !2430, i64 0}
!2430 = !{!"omnipotent char", !2431, i64 0}
!2431 = !{!"Simple C++ TBAA"}
!2432 = !{!2433, !2430, i64 2065}
!2433 = !{!"_ZTS5State", !2430, i64 16, !2434, i64 2064, !2430, i64 2080, !2435, i64 2088, !2437, i64 2112, !2439, i64 2208, !2440, i64 2480, !2441, i64 2608, !2442, i64 2736, !2430, i64 2760, !2430, i64 2768, !2443, i64 3280}
!2434 = !{!"_ZTS10ArithFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15}
!2435 = !{!"_ZTS8Segments", !2436, i64 0, !2430, i64 2, !2436, i64 4, !2430, i64 6, !2436, i64 8, !2430, i64 10, !2436, i64 12, !2430, i64 14, !2436, i64 16, !2430, i64 18, !2436, i64 20, !2430, i64 22}
!2436 = !{!"short", !2430, i64 0}
!2437 = !{!"_ZTS12AddressSpace", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88}
!2438 = !{!"_ZTS3Reg", !2430, i64 0}
!2439 = !{!"_ZTS3GPR", !2429, i64 0, !2438, i64 8, !2429, i64 16, !2438, i64 24, !2429, i64 32, !2438, i64 40, !2429, i64 48, !2438, i64 56, !2429, i64 64, !2438, i64 72, !2429, i64 80, !2438, i64 88, !2429, i64 96, !2438, i64 104, !2429, i64 112, !2438, i64 120, !2429, i64 128, !2438, i64 136, !2429, i64 144, !2438, i64 152, !2429, i64 160, !2438, i64 168, !2429, i64 176, !2438, i64 184, !2429, i64 192, !2438, i64 200, !2429, i64 208, !2438, i64 216, !2429, i64 224, !2438, i64 232, !2429, i64 240, !2438, i64 248, !2429, i64 256, !2438, i64 264}
!2440 = !{!"_ZTS8X87Stack", !2430, i64 0}
!2441 = !{!"_ZTS3MMX", !2430, i64 0}
!2442 = !{!"_ZTS14FPUStatusFlags", !2430, i64 0, !2430, i64 1, !2430, i64 2, !2430, i64 3, !2430, i64 4, !2430, i64 5, !2430, i64 6, !2430, i64 7, !2430, i64 8, !2430, i64 9, !2430, i64 10, !2430, i64 11, !2430, i64 12, !2430, i64 13, !2430, i64 14, !2430, i64 15, !2430, i64 16, !2430, i64 17, !2430, i64 18, !2430, i64 19, !2430, i64 20}
!2443 = !{!"_ZTS13SegmentCaches", !2444, i64 0, !2444, i64 16, !2444, i64 32, !2444, i64 48, !2444, i64 64, !2444, i64 80}
!2444 = !{!"_ZTS13SegmentShadow", !2430, i64 0, !2445, i64 8, !2445, i64 12}
!2445 = !{!"int", !2430, i64 0}
!2446 = !{!2433, !2430, i64 2067}
!2447 = !{!2433, !2430, i64 2071}
!2448 = !{!2433, !2430, i64 2073}
!2449 = !{!2433, !2430, i64 2077}
!2450 = !{!2433, !2430, i64 2069}
!2451 = !{!2430, !2430, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"double", !2430, i64 0}
!2454 = !{!2445, !2445, i64 0}
!2455 = !{!2456, !2456, i64 0}
!2456 = !{!"float", !2430, i64 0}
